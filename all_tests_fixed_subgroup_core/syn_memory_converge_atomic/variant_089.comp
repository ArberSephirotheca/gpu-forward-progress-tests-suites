#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec4 GLF_merged3_0_2_45_2_1_11_3_1_12GLF_merged2_0_1_13_1_1_8num_workgroupread_valvirtual_gidworkgroup_id;
 uvec4 GLF_merged3_0_2_52_2_1_11_3_1_14GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_idworkgroup_base;
 uvec4 GLF_merged2_0_3_84_3_1_13GLF_merged2_0_2_52_2_1_8GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizeread_valnum_workgroup;
 uvec4 GLF_merged2_0_2_50_2_2_51GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_baseGLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size;
 uvec2 GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size;
 GLF_merged2_0_2_50_2_2_51GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_baseGLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.zw = GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size;
 if(_GLF_DEAD(false))
  return;
 uvec4 GLF_merged2_0_3_84_3_1_17GLF_merged2_0_2_52_2_1_8GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizeread_valsubgroup_local_id;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, 0 + (0))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uvec4 GLF_merged2_0_3_83_3_1_13GLF_merged2_0_2_45_2_1_13GLF_merged2_0_1_13_1_1_8num_workgroupread_valnum_workgroupnum_workgroup;
 uvec3 GLF_merged2_0_2_45_2_1_13GLF_merged2_0_1_13_1_1_8num_workgroupread_valnum_workgroup;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))) : _GLF_FUZZED(asin(-8.8)))), (_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))) : _GLF_FUZZED(asin(-8.8))))) / 1.0) > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(_GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) ? _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))) : _GLF_FUZZED(asin(-8.8)), min(_GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) ? _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))) : _GLF_FUZZED(asin(-8.8)), _GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) ? _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))) : _GLF_FUZZED(asin(-8.8)))))) > injectionSwitch.y))) && true)))
  return;
 GLF_merged2_0_3_83_3_1_13GLF_merged2_0_2_45_2_1_13GLF_merged2_0_1_13_1_1_8num_workgroupread_valnum_workgroupnum_workgroup.xyz = GLF_merged2_0_2_45_2_1_13GLF_merged2_0_1_13_1_1_8num_workgroupread_valnum_workgroup;
 uvec3 GLF_merged2_0_2_52_2_1_8GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizeread_val;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 GLF_merged2_0_3_84_3_1_13GLF_merged2_0_2_52_2_1_8GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizeread_valnum_workgroup.xyz = GLF_merged2_0_2_52_2_1_8GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizeread_val;
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(false))
      continue;
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 GLF_merged2_0_3_84_3_1_17GLF_merged2_0_2_52_2_1_8GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizeread_valsubgroup_local_id.xyz = GLF_merged2_0_3_84_3_1_13GLF_merged2_0_2_52_2_1_8GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizeread_valnum_workgroup.xyz;
 uvec2 GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 GLF_merged2_0_2_50_2_2_51GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_baseGLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.xy = GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 uvec4 GLF_merged4_0_1_8_1_1_11_2_1_11_3_1_14read_valsubgroup_idvirtual_gidworkgroup_base;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(_GLF_IDENTITY(true && (! (false)), bool(bvec3(_GLF_IDENTITY(true && (! (false)), bool(bvec2(true && (! (false)), true))), _GLF_IDENTITY(true, (true) || false), true))), false || (true && (! (false)))))))))
  return;
 uvec2 GLF_merged2_0_1_13_1_1_8num_workgroupread_val;
 GLF_merged3_0_2_45_2_1_11_3_1_12GLF_merged2_0_1_13_1_1_8num_workgroupread_valvirtual_gidworkgroup_id.xy = GLF_merged2_0_1_13_1_1_8num_workgroupread_val;
 _GLF_IDENTITY(GLF_merged2_0_3_83_3_1_13GLF_merged2_0_2_45_2_1_13GLF_merged2_0_1_13_1_1_8num_workgroupread_valnum_workgroupnum_workgroup.xyz.xy = _GLF_IDENTITY(GLF_merged3_0_2_45_2_1_11_3_1_12GLF_merged2_0_1_13_1_1_8num_workgroupread_valvirtual_gidworkgroup_id.xy, max(_GLF_IDENTITY(GLF_merged3_0_2_45_2_1_11_3_1_12GLF_merged2_0_1_13_1_1_8num_workgroupread_valvirtual_gidworkgroup_id.xy, (GLF_merged3_0_2_45_2_1_11_3_1_12GLF_merged2_0_1_13_1_1_8num_workgroupread_valvirtual_gidworkgroup_id.xy) / uvec2(1u, 1u)), _GLF_IDENTITY(GLF_merged3_0_2_45_2_1_11_3_1_12GLF_merged2_0_1_13_1_1_8num_workgroupread_valvirtual_gidworkgroup_id.xy, (GLF_merged3_0_2_45_2_1_11_3_1_12GLF_merged2_0_1_13_1_1_8num_workgroupread_valvirtual_gidworkgroup_id.xy) * uvec2(1u, 1u)))), (GLF_merged2_0_3_83_3_1_13GLF_merged2_0_2_45_2_1_13GLF_merged2_0_1_13_1_1_8num_workgroupread_valnum_workgroupnum_workgroup.xyz.xy = _GLF_IDENTITY(GLF_merged3_0_2_45_2_1_11_3_1_12GLF_merged2_0_1_13_1_1_8num_workgroupread_valvirtual_gidworkgroup_id.xy, max(_GLF_IDENTITY(GLF_merged3_0_2_45_2_1_11_3_1_12GLF_merged2_0_1_13_1_1_8num_workgroupread_valvirtual_gidworkgroup_id.xy, (GLF_merged3_0_2_45_2_1_11_3_1_12GLF_merged2_0_1_13_1_1_8num_workgroupread_valvirtual_gidworkgroup_id.xy) / uvec2(1u, 1u)), _GLF_IDENTITY(GLF_merged3_0_2_45_2_1_11_3_1_12GLF_merged2_0_1_13_1_1_8num_workgroupread_valvirtual_gidworkgroup_id.xy, (GLF_merged3_0_2_45_2_1_11_3_1_12GLF_merged2_0_1_13_1_1_8num_workgroupread_valvirtual_gidworkgroup_id.xy) * uvec2(1u, 1u))))) * uvec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)));
 for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), min(_GLF_IDENTITY(int(4), (int(_GLF_IDENTITY(4, max(4, 4)))) - _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), (~ (0)) * 1)))), int(4))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      continue;
     return;
    }
  }
 uvec2 GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size;
 GLF_merged3_0_2_52_2_1_11_3_1_14GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_idworkgroup_base.xy = GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size;
 GLF_merged2_0_3_84_3_1_17GLF_merged2_0_2_52_2_1_8GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizeread_valsubgroup_local_id.xyz.xy = _GLF_IDENTITY(GLF_merged3_0_2_52_2_1_11_3_1_14GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_idworkgroup_base.xy, clamp(_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_11_3_1_14GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_idworkgroup_base.xy, (GLF_merged3_0_2_52_2_1_11_3_1_14GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_idworkgroup_base.xy) << uvec2(0u, 0u)), GLF_merged3_0_2_52_2_1_11_3_1_14GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_idworkgroup_base.xy, GLF_merged3_0_2_52_2_1_11_3_1_14GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_idworkgroup_base.xy));
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) || false))
    {
     return;
    }
   else
    {
    }
  }
 uint subgroup_id = gl_SubgroupID;
 GLF_merged3_0_2_52_2_1_11_3_1_14GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_idworkgroup_base.z = subgroup_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    return;
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 GLF_merged4_0_1_8_1_1_11_2_1_11_3_1_14read_valsubgroup_idvirtual_gidworkgroup_base.y = GLF_merged3_0_2_52_2_1_11_3_1_14GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_idworkgroup_base.z;
uint subgroup_size = 16;
 do
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    continue;
  }
 while(_GLF_WRAPPED_LOOP(false));
 for(int _injected_loop_counter = (1 | (1 | 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   do
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       GLF_merged2_0_3_84_3_1_17GLF_merged2_0_2_52_2_1_8GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizeread_valsubgroup_local_id.xyz.xy.x = subgroup_size;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
       if(_GLF_DEAD(false))
        return;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    continue;
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 do
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (int(_GLF_ONE(1.0, injectionSwitch.y)) ^ 0)); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        continue;
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false)))))))
            continue;
          }
         else
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
            return;
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   if(_GLF_DEAD(false))
    break;
  }
 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), true && (_GLF_WRAPPED_LOOP(false))));
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))), true && (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 GLF_merged2_0_3_84_3_1_17GLF_merged2_0_2_52_2_1_8GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizeread_valsubgroup_local_id.w = subgroup_local_id;
 do
  {
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > ((0 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) ^ 0)))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))
    {
     do
      {
       do
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             do
              {
               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bool(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      return;
                     return;
                    }
                   return;
                  }
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    break;
                   break;
                  }
                 return;
                 if(_GLF_DEAD(false))
                  continue;
                }
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(false))
                return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           else
            {
            }
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, true && (true))), true && (! (true)))))))
            {
             if(_GLF_DEAD(false))
              {
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
             if(_GLF_DEAD(false))
              break;
            }
           else
            {
            }
          }
         else
          {
           return;
           if(_GLF_DEAD(false))
            break;
          }
         if(_GLF_DEAD(false))
          return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))).x)) > injectionSwitch.y))));
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && _GLF_IDENTITY(_GLF_IDENTITY((false), false || (_GLF_IDENTITY((false), false || ((false))))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY((false), false || (_GLF_IDENTITY((false), false || ((false))))), false, true)), ! (_GLF_IDENTITY(! (bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY((false), bool(bvec4((false), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false || (_GLF_IDENTITY((false), false || ((false))))), false, true))), false || (! (bool(bvec3(_GLF_IDENTITY((false), false || (_GLF_IDENTITY((false), false || _GLF_IDENTITY(((false)), bool(bvec2(((false)), true)))))), false, true)))))))))))
      {
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           do
            {
             for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)) && true); _injected_loop_counter --)
              {
               return;
              }
             if(_GLF_DEAD(false))
              break;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          break;
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), true && (_GLF_WRAPPED_LOOP(false))));
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, gl_NumWorkGroups)).x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 GLF_merged2_0_3_84_3_1_13GLF_merged2_0_2_52_2_1_8GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizeread_valnum_workgroup.w = num_workgroup;
 GLF_merged2_0_3_83_3_1_13GLF_merged2_0_2_45_2_1_13GLF_merged2_0_1_13_1_1_8num_workgroupread_valnum_workgroupnum_workgroup.w = GLF_merged2_0_3_84_3_1_13GLF_merged2_0_2_52_2_1_8GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizeread_valnum_workgroup.w;
 do
  {
   do
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      continue;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    return;
  }
 else
  {
  }
 GLF_merged2_0_3_83_3_1_13GLF_merged2_0_2_45_2_1_13GLF_merged2_0_1_13_1_1_8num_workgroupread_valnum_workgroupnum_workgroup.xyz.z = GLF_merged2_0_3_83_3_1_13GLF_merged2_0_2_45_2_1_13GLF_merged2_0_1_13_1_1_8num_workgroupread_valnum_workgroupnum_workgroup.w;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
        return;
       for(int _injected_loop_counter = int(_GLF_ONE(_GLF_IDENTITY(1.0, _GLF_IDENTITY(abs(0.0) + (1.0), _GLF_IDENTITY(float(mat2x3(abs(0.0) + (1.0), 1.0, cos(0.0), _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(215.197)), float(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(false ? _GLF_FUZZED(-1.6) : 1.0, max(_GLF_IDENTITY(false ? _GLF_FUZZED(-1.6) : 1.0, mix(float(_GLF_FUZZED(72.21)), float(false ? _GLF_FUZZED(-1.6) : 1.0), bool(true))), false ? _GLF_FUZZED(-1.6) : 1.0))))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), 0.0, 1.0)), (false ? _GLF_FUZZED(62.92) : float(mat2x3(abs(0.0) + (1.0), 1.0, cos(0.0), 1.0, 0.0, 1.0)))))), injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | _GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 | (0))) | (_GLF_IDENTITY(0, (0) | (0)))))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               do
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! _GLF_IDENTITY((_GLF_IDENTITY(! (false), bool(bvec2(! (false), true)))), false || _GLF_IDENTITY(((_GLF_IDENTITY(! (false), bool(bvec2(! (false), true))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (((_GLF_IDENTITY(! (false), bool(bvec2(! (false), true))))))))))))))
                  continue;
                 return;
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)))))))
                    {
                     if(_GLF_DEAD(false))
                      return;
                    }
                   else
                    {
                     return;
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    break;
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                }
               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, float(mat2x3(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, 0.0, 1.0, 1.0, 0.0, 1.0))), _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(5.9)), bool(false)))))))))
                continue;
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                 continue;
                }
               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) || false)) && true))
                {
                 return;
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                break;
              }
             if(_GLF_DEAD(false))
              break;
            }
           else
            {
             if(_GLF_DEAD(false))
              return;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              return;
             break;
            }
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), clamp(int(5), int(5), int(5))))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(false))
                    break;
                   if(_GLF_DEAD(false))
                    return;
                   return;
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    break;
                  }
                }
              }
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               do
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true, true)), _GLF_IDENTITY(bool(bool(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true, true)))), (bool(bool(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true, true))))) && true)))))
                  return;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               return;
              }
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
          }
         else
          {
          }
        }
       else
        {
        }
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      break;
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(false))), (injectionSwitch.x > injectionSwitch.y))));
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 do
  {
   GLF_merged2_0_3_83_3_1_13GLF_merged2_0_2_45_2_1_13GLF_merged2_0_1_13_1_1_8num_workgroupread_valnum_workgroupnum_workgroup.xyz.xy.x = GLF_merged2_0_3_83_3_1_13GLF_merged2_0_2_45_2_1_13GLF_merged2_0_1_13_1_1_8num_workgroupread_valnum_workgroupnum_workgroup.xyz.z;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
    continue;
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), bool(bvec4(_GLF_IDENTITY(false, (false) && true), false, true, false)))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), bool(bvec4(_GLF_IDENTITY(false, (false) && true), false, true, false)))), bool(bool((_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), bool(bvec4(_GLF_IDENTITY(false, (false) && true), false, true, false)))))))))) && true)))
    {
    }
   else
    {
     do
      {
       for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) - 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
        }
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))));
    }
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   do
    {
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))))))))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 GLF_merged2_0_2_50_2_2_51GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_baseGLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.zw.y = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (workgroup_size) | (workgroup_size)), ~ (~ (_GLF_IDENTITY(workgroup_size, (workgroup_size) | (workgroup_size)))));
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))))))))
    return;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)), true)))));
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (1 ^ 1)); _injected_loop_counter --)
  {
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec3(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec3(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true))))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec3(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec3(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true)))))), true && (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(bvec3(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED((+ -4.5))), float(injectionSwitch.x), bool(true))) > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), (bool(bvec3(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true)))))))))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec3(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(5.1), _GLF_FUZZED(1.2)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))))), (bool(bvec3(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true)))))))))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED((948.222 + 3.0))), vec2(_GLF_FUZZED(-194.192), _GLF_IDENTITY((injectionSwitch)[1], min(_GLF_IDENTITY((injectionSwitch)[1], max((injectionSwitch)[1], (injectionSwitch)[1])), (injectionSwitch)[1]))), bvec2(false, true))).x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)))).y))))
  return;
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = _GLF_IDENTITY((_GLF_IDENTITY(0, min(0, 0)) | _GLF_IDENTITY(0, clamp(0, 0, 0))), ((_GLF_IDENTITY(0, min(0, 0)) | 0)) >> 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   do
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, (0) * 1))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))), (((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))) | (((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))))) & 1)); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   _GLF_IDENTITY(GLF_merged2_0_3_84_3_1_17GLF_merged2_0_2_52_2_1_8GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizeread_valsubgroup_local_id.xyz.xy.y = _GLF_IDENTITY(GLF_merged2_0_2_50_2_2_51GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_baseGLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.zw.y, _GLF_IDENTITY(0u + (GLF_merged2_0_2_50_2_2_51GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_baseGLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.zw.y), uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(0u + (GLF_merged2_0_2_50_2_2_51GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_baseGLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.zw.y), ~ (~ (0u + (GLF_merged2_0_2_50_2_2_51GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_baseGLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.zw.y)))), (_GLF_IDENTITY(0u + (GLF_merged2_0_2_50_2_2_51GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_baseGLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.zw.y), ~ (~ (0u + (GLF_merged2_0_2_50_2_2_51GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_baseGLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.zw.y))))) * 1u), _GLF_IDENTITY(0u, (0u) | (0u)), 1u, uint(_GLF_ONE(1.0, injectionSwitch.y)))))), ~ _GLF_IDENTITY(_GLF_IDENTITY((~ (GLF_merged2_0_3_84_3_1_17GLF_merged2_0_2_52_2_1_8GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizeread_valsubgroup_local_id.xyz.xy.y = _GLF_IDENTITY(GLF_merged2_0_2_50_2_2_51GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_baseGLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.zw.y, 0u + (GLF_merged2_0_2_50_2_2_51GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_baseGLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.zw.y)))), ((~ (GLF_merged2_0_3_84_3_1_17GLF_merged2_0_2_52_2_1_8GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizeread_valsubgroup_local_id.xyz.xy.y = _GLF_IDENTITY(GLF_merged2_0_2_50_2_2_51GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_baseGLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.zw.y, 0u + (GLF_merged2_0_2_50_2_2_51GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_baseGLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.zw.y))))) << 0u), (_GLF_IDENTITY(_GLF_IDENTITY((~ (GLF_merged2_0_3_84_3_1_17GLF_merged2_0_2_52_2_1_8GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizeread_valsubgroup_local_id.xyz.xy.y = _GLF_IDENTITY(GLF_merged2_0_2_50_2_2_51GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_baseGLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.zw.y, 0u + (GLF_merged2_0_2_50_2_2_51GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_baseGLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.zw.y)))), ((~ (GLF_merged2_0_3_84_3_1_17GLF_merged2_0_2_52_2_1_8GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizeread_valsubgroup_local_id.xyz.xy.y = _GLF_IDENTITY(GLF_merged2_0_2_50_2_2_51GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_baseGLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.zw.y, 0u + (GLF_merged2_0_2_50_2_2_51GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_baseGLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.zw.y))))) << 0u), 0u ^ _GLF_IDENTITY((_GLF_IDENTITY((~ (GLF_merged2_0_3_84_3_1_17GLF_merged2_0_2_52_2_1_8GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizeread_valsubgroup_local_id.xyz.xy.y = _GLF_IDENTITY(GLF_merged2_0_2_50_2_2_51GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_baseGLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.zw.y, 0u + (_GLF_IDENTITY(GLF_merged2_0_2_50_2_2_51GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_baseGLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.zw.y, ~ (~ (_GLF_IDENTITY(GLF_merged2_0_2_50_2_2_51GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_baseGLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.zw.y, (true ? GLF_merged2_0_2_50_2_2_51GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_baseGLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.zw.y : _GLF_FUZZED(workgroup_size)))))))))), ((~ (GLF_merged2_0_3_84_3_1_17GLF_merged2_0_2_52_2_1_8GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizeread_valsubgroup_local_id.xyz.xy.y = _GLF_IDENTITY(GLF_merged2_0_2_50_2_2_51GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_baseGLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.zw.y, 0u + (GLF_merged2_0_2_50_2_2_51GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_baseGLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.zw.y))))) << 0u)), ((_GLF_IDENTITY((~ (GLF_merged2_0_3_84_3_1_17GLF_merged2_0_2_52_2_1_8GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizeread_valsubgroup_local_id.xyz.xy.y = _GLF_IDENTITY(GLF_merged2_0_2_50_2_2_51GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_baseGLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.zw.y, 0u + (GLF_merged2_0_2_50_2_2_51GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_baseGLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.zw.y)))), ((~ (GLF_merged2_0_3_84_3_1_17GLF_merged2_0_2_52_2_1_8GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizeread_valsubgroup_local_id.xyz.xy.y = _GLF_IDENTITY(GLF_merged2_0_2_50_2_2_51GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_baseGLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.zw.y, 0u + (GLF_merged2_0_2_50_2_2_51GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_baseGLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.zw.y))))) << 0u))) / 1u))) - 0u));
  }
 uint workgroup_id = gl_WorkGroupID.x;
 GLF_merged3_0_2_45_2_1_11_3_1_12GLF_merged2_0_1_13_1_1_8num_workgroupread_valvirtual_gidworkgroup_id.w = workgroup_id;
 GLF_merged2_0_2_50_2_2_51GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_baseGLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.zw.x = GLF_merged3_0_2_45_2_1_11_3_1_12GLF_merged2_0_1_13_1_1_8num_workgroupread_valvirtual_gidworkgroup_id.w;
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))), bool(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)))), true && (bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)))) || false)))))))
    return;
   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) - 0))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(_GLF_IDENTITY(int(4), 0 + _GLF_IDENTITY((_GLF_IDENTITY(int(4), clamp(int(4), int(4), int(4)))), (true ? (_GLF_IDENTITY(int(4), clamp(int(4), int(4), int(4)))) : _GLF_FUZZED(97201)))), min(int(4), int(4))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      continue;
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
    }
   else
    {
    }
  }
 uint workgroup_base = GLF_merged2_0_3_84_3_1_17GLF_merged2_0_2_52_2_1_8GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizeread_valsubgroup_local_id.xyz.xy.y * GLF_merged2_0_2_50_2_2_51GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_baseGLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.zw.x;
 if(_GLF_DEAD(false))
  return;
 GLF_merged3_0_2_52_2_1_11_3_1_14GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_idworkgroup_base.w = workgroup_base;
 GLF_merged2_0_2_50_2_2_51GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_baseGLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.xy.y = _GLF_IDENTITY(GLF_merged3_0_2_52_2_1_11_3_1_14GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_idworkgroup_base.w, (false ? _GLF_FUZZED(workgroup_size) : GLF_merged3_0_2_52_2_1_11_3_1_14GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizesubgroup_idworkgroup_base.w));
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (true ? _GLF_ZERO(0.0, injectionSwitch.x) : _GLF_FUZZED(4387.5156))))); _injected_loop_counter --)
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bvec2(! (_GLF_DEAD(false)), true))))))
    return;
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
    continue;
  }
 for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY((0 | 1), (_GLF_IDENTITY(true, ! (! (true))) ? (0 | 1) : _GLF_FUZZED(70323))), ~ (_GLF_IDENTITY(~ ((0 | 1)), (~ ((0 | 1))) / 1))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    break;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, bool(bvec4(true, false, true, false))))), (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), true, true))), true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || false)))))))), (_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), true, true), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), true, true), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), true, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), true, true)))), false)))))))), true, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4x2(injectionSwitch, 0.0, 0.0, 1.0, cos(0.0), 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0))))), (true ? mat4x2(injectionSwitch, 0.0, 0.0, 1.0, cos(0.0), 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0))))) : _GLF_FUZZED(mat4x2(19.42, -58.45, 4.9, 7613.9143, -9.5, 4.7, 1.1, -783.333)))))).y)))), (bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch.x : _GLF_FUZZED(-4.1))) > injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), true, true))), true, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec2(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), true && ((injectionSwitch.x < injectionSwitch.y))), false))))))) && true)) && true))))))
      break;
     GLF_merged4_0_1_8_1_1_11_2_1_11_3_1_14read_valsubgroup_idvirtual_gidworkgroup_base.w = _GLF_IDENTITY(GLF_merged2_0_2_50_2_2_51GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_baseGLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.xy, (GLF_merged2_0_2_50_2_2_51GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_baseGLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.xy) + uvec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))).y;
    }
   else
    {
    }
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    return;
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 ^ (-47344 & 0))); _GLF_IDENTITY(_injected_loop_counter --, (_GLF_IDENTITY(_injected_loop_counter --, (false ? _GLF_FUZZED(ivec2(-46231, -90069)[1]) : _GLF_IDENTITY(_injected_loop_counter --, 1 * (_injected_loop_counter --))))) / 1))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec4(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)).x > injectionSwitch.y))))), true, false, true)))))
        return;
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          return;
         return;
        }
       for(int _injected_loop_counter = (_GLF_IDENTITY(0, (0) - 0) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          {
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bvec2(! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true))))))
            {
             return;
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_DEAD(false))
          continue;
         return;
        }
       if(_GLF_DEAD(false))
        break;
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, ! (! (false))))))))
        return;
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
     if(_GLF_DEAD(false))
      break;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec4(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, true))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))) / 1.0)))));
  }
 uint virtual_gid = _GLF_IDENTITY(GLF_merged4_0_1_8_1_1_11_2_1_11_3_1_14read_valsubgroup_idvirtual_gidworkgroup_base.w, (GLF_merged4_0_1_8_1_1_11_2_1_11_3_1_14read_valsubgroup_idvirtual_gidworkgroup_base.w) ^ 0u) + GLF_merged4_0_1_8_1_1_11_2_1_11_3_1_14read_valsubgroup_idvirtual_gidworkgroup_base.y * _GLF_IDENTITY(GLF_merged2_0_3_84_3_1_17GLF_merged2_0_2_52_2_1_8GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizeread_valsubgroup_local_id.xyz.xy, max(GLF_merged2_0_3_84_3_1_17GLF_merged2_0_2_52_2_1_8GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizeread_valsubgroup_local_id.xyz.xy, GLF_merged2_0_3_84_3_1_17GLF_merged2_0_2_52_2_1_8GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizeread_valsubgroup_local_id.xyz.xy)).x + GLF_merged2_0_3_84_3_1_17GLF_merged2_0_2_52_2_1_8GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizeread_valsubgroup_local_id.w;
 GLF_merged3_0_2_45_2_1_11_3_1_12GLF_merged2_0_1_13_1_1_8num_workgroupread_valvirtual_gidworkgroup_id.z = virtual_gid;
 GLF_merged2_0_2_50_2_2_51GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_baseGLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.xy.x = GLF_merged3_0_2_45_2_1_11_3_1_12GLF_merged2_0_1_13_1_1_8num_workgroupread_valvirtual_gidworkgroup_id.z;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     return;
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
          }
        }
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(vec2(7.6, 1.0).x)), vec2(_GLF_FUZZED((603.672 + 706.277)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), (_GLF_IDENTITY((injectionSwitch), max((injectionSwitch), (injectionSwitch)))) / vec2(1.0, 1.0))[1], min(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), (_GLF_IDENTITY((injectionSwitch), max((injectionSwitch), (injectionSwitch)))) / vec2(1.0, 1.0))[1], mix(float(_GLF_IDENTITY((injectionSwitch), (_GLF_IDENTITY((injectionSwitch), max((injectionSwitch), (injectionSwitch)))) / vec2(1.0, 1.0))[1]), float(_GLF_FUZZED(0.7)), bool(false))), _GLF_IDENTITY((injectionSwitch), (_GLF_IDENTITY((injectionSwitch), max((injectionSwitch), (injectionSwitch)))) / vec2(1.0, 1.0))[1])), ((injectionSwitch)[1]) + 0.0)), bvec2(false, true))).y))))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
      }
     else
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            continue;
           continue;
          }
         _GLF_IDENTITY(GLF_merged4_0_1_8_1_1_11_2_1_11_3_1_14read_valsubgroup_idvirtual_gidworkgroup_base.z = GLF_merged2_0_2_50_2_2_51GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_baseGLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.xy.x, (true ? GLF_merged4_0_1_8_1_1_11_2_1_11_3_1_14read_valsubgroup_idvirtual_gidworkgroup_base.z = _GLF_IDENTITY(GLF_merged2_0_2_50_2_2_51GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_baseGLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.xy.x, (false ? _GLF_FUZZED(num_workgroup) : GLF_merged2_0_2_50_2_2_51GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_baseGLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.xy.x)) : _GLF_IDENTITY(_GLF_FUZZED(subgroup_local_id), (_GLF_FUZZED(subgroup_local_id)) * uint(_GLF_ONE(1.0, injectionSwitch.y)))));
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           continue;
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), false)))) && true)))
  return;
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       return;
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    continue;
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, 1.0 * (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y, _GLF_IDENTITY(float(mat3(injectionSwitch.y, 1.0, 0.0, 0.0, 1.0, 0.0, sqrt(0.0), 0.0, 0.0)), max(float(mat3(injectionSwitch.y, 1.0, 0.0, 0.0, 1.0, 0.0, sqrt(0.0), 0.0, 0.0)), float(mat3(injectionSwitch.y, 1.0, 0.0, 0.0, 1.0, 0.0, sqrt(0.0), 0.0, 0.0)))))))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), true, _GLF_IDENTITY(false, bool(bvec3(false, false, true))), true))), true && (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), true, _GLF_IDENTITY(false, bool(bvec3(false, false, true))), true)))))))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            return;
           for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) >> 0)) | 0), (_GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) >> 0)) | 0), (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) >> 0)) | 0)) / 1)) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY(0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : 0)) ^ 1)); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              continue;
             do
              {
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (false))))), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (false)))))))))
                continue;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).y))))
                return;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
             if(_GLF_DEAD(false))
              return;
            }
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             for(int _injected_loop_counter = int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                return;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))))))
              {
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = _GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec3(1, 0, 1), (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)) ? ivec3(1, 0, 1) : _GLF_FUZZED(ivec3(22973, 6876, 69656)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                  {
                   return;
                  }
                }
               if(_GLF_DEAD(false))
                return;
               return;
              }
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
      }
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 atomicStore(write_val, uint(GLF_merged4_0_1_8_1_1_11_2_1_11_3_1_14read_valsubgroup_idvirtual_gidworkgroup_base.z), 4, _GLF_IDENTITY(64, (64) - _GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, min(_GLF_IDENTITY(0, int(int(0))), 0))))), 0);
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
    }
  }
 uint read_val = atomicLoad(_GLF_IDENTITY(write_val, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(write_val, max(write_val, write_val))), (~ (_GLF_IDENTITY(write_val, max(write_val, write_val)))) ^ 0u))), 4, 64, 0);
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      continue;
     _GLF_IDENTITY(GLF_merged2_0_3_84_3_1_17GLF_merged2_0_2_52_2_1_8GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizeread_valsubgroup_local_id.xyz.z = read_val, (true ? GLF_merged2_0_3_84_3_1_17GLF_merged2_0_2_52_2_1_8GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizeread_valsubgroup_local_id.xyz.z = read_val : _GLF_FUZZED(5646u)));
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) || false)), _GLF_IDENTITY((_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) || false)), (bool(_GLF_IDENTITY(false, (false) || false))) || false)) && true, ! (! ((_GLF_IDENTITY(bool(_GLF_IDENTITY(false, _GLF_IDENTITY((false), false || ((false))) || false)), (bool(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, false || (false)))), ! (! (bool(bool(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), ! (! (false || (false)))))))))))))) || false)) && true))))), ! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), false || (_GLF_IDENTITY(false, (false) || false)))), _GLF_IDENTITY((_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) || false)), (bool(_GLF_IDENTITY(false, (false) || false))) || false)) && true, ! (! ((_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) || false)), (bool(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false || (false), ! (! (false || (false))))), bool(bvec3(! (_GLF_IDENTITY(false || (false), ! (! (false || (false))))), true, false)))))))), ! (! (bool(bool(_GLF_IDENTITY(false, false || (false))))))))))) || false)) && true))))), true && (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) || false)), _GLF_IDENTITY((_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) || false)), (bool(_GLF_IDENTITY(false, (false) || false))) || false)) && true, ! (! ((_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) || false)), (bool(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, false || (false)))), ! (! (bool(bool(_GLF_IDENTITY(false, false || (false))))))))))) || false)) && true)))))))))))))
    break;
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), true, true))))))))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
  return;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    break;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))))
        break;
       if(_GLF_DEAD(false))
        return;
       GLF_merged4_0_1_8_1_1_11_2_1_11_3_1_14read_valsubgroup_idvirtual_gidworkgroup_base.x = GLF_merged2_0_3_84_3_1_17GLF_merged2_0_2_52_2_1_8GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizeread_valsubgroup_local_id.xyz.z;
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    continue;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  {
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       return;
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = int(_GLF_ONE(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, float(_GLF_IDENTITY(vec3(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(1.3)), bool(false))), 0.0, 0.0), mix(vec3((vec3(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(1.3)), bool(false))), 0.0, 0.0))[0], _GLF_FUZZED(9.6), _GLF_FUZZED(-6.9)), vec3(_GLF_FUZZED(608.134), (vec3(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(1.3)), bool(false))), 0.0, 0.0))[_GLF_IDENTITY(1, (false ? _GLF_FUZZED(47228) : 1))], (vec3(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(1.3)), bool(false))), 0.0, 0.0))[2]), bvec3(false, true, true))))))), injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(8), int(8)))); _injected_loop_counter --)
          {
           return;
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    return;
  }
 GLF_merged2_0_3_83_3_1_13GLF_merged2_0_2_45_2_1_13GLF_merged2_0_1_13_1_1_8num_workgroupread_valnum_workgroupnum_workgroup.xyz.xy.y = GLF_merged4_0_1_8_1_1_11_2_1_11_3_1_14read_valsubgroup_idvirtual_gidworkgroup_base.x;
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(84.38) : injectionSwitch.y))))) - 0.0)) - 0.0)), _GLF_IDENTITY(! (! ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-437.985)), float(injectionSwitch.y), bool(true))), (injectionSwitch.y) - 0.0)) || false), (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, (_GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), injectionSwitch.y)) : _GLF_FUZZED(25.53)))) - 0.0)) || false)) || false)) || false)))), bool(bvec4(! (! ((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-9.6) : injectionSwitch.y)), (injectionSwitch.y) - 0.0), (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-1.7)), bool(false))), (injectionSwitch.y) - 0.0)) || false)))), false, false, false)))))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
          return;
         break;
        }
       break;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))))
      continue;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-8044.0059, -2816.5572)))).y))))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))))
              {
              }
             else
              {
               return;
              }
            }
          }
         else
          {
          }
         break;
        }
       return;
       if(_GLF_DEAD(false))
        continue;
      }
     if(_GLF_DEAD(false))
      continue;
    }
   else
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      break;
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (ivec2(-44044, 41227).r & (_GLF_IDENTITY(0, (0) / 1) >> _GLF_IDENTITY(int(0), int(0))))); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             return;
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bool(false))))))))
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(_GLF_IDENTITY(false, true && _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), false || ((_GLF_IDENTITY(false, ! (! (false)))))))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_DEAD(false))
                  return;
                 continue;
                }
               continue;
              }
             return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             do
              {
               return;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           else
            {
            }
          }
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           buf[GLF_merged4_0_1_8_1_1_11_2_1_11_3_1_14read_valsubgroup_idvirtual_gidworkgroup_base.z] = uint(subgroupAllEqual(GLF_merged2_0_3_83_3_1_13GLF_merged2_0_2_45_2_1_13GLF_merged2_0_1_13_1_1_8num_workgroupread_valnum_workgroupnum_workgroup.xyz.xy.y));
           if(_GLF_DEAD(false))
            continue;
          }
        }
       if(_GLF_DEAD(false))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
        }
      }
    }
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      continue;
     break;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec4(_GLF_WRAPPED_IF_FALSE(false), false, false, true)))), _GLF_IDENTITY(bool(bvec2((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec2(_GLF_WRAPPED_IF_FALSE(false), true))), false))), false, false, true)))), false)), ! (! (bool(bvec2((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec4(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true), false, true)))), false)))))))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         return;
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bool(false))))))))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(_GLF_IDENTITY(0, (0) | (0)), (_GLF_IDENTITY(0, (0) | _GLF_IDENTITY((0), ((0)) ^ (0 & -61254)))) / 1)); _injected_loop_counter --)
              {
               do
                {
                 return;
                 if(_GLF_DEAD(false))
                  continue;
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(false))
                continue;
              }
             if(_GLF_DEAD(false))
              break;
            }
           if(_GLF_DEAD(false))
            break;
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_DEAD(false))
                  return;
                 return;
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
              }
            }
          }
        }
       else
        {
        }
       for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        break;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      {
       for(int _injected_loop_counter = ((0 ^ 0) << _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         return;
         if(_GLF_DEAD(false))
          continue;
        }
      }
     if(_GLF_DEAD(false))
      return;
     do
      {
       if(_GLF_DEAD(false))
        continue;
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, max(1, 1))) >> 0) ^ 0)); _injected_loop_counter ++)
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, (false) || false)))))), bool(bool(_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_DEAD(false)), bool(bool((_GLF_DEAD(false))))), ! (! (! (_GLF_DEAD(false)))))))))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
            }
           else
            {
             for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (_GLF_IDENTITY(int(4), int(4))) ^ 0)) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) ^ 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter --)
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 do
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true))
                      break;
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      return;
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        continue;
                       continue;
                      }
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))
                      {
                      }
                     else
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          {
                           if(_GLF_DEAD(false))
                            {
                             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                              continue;
                             continue;
                            }
                           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
                            break;
                          }
                         else
                          {
                           if(_GLF_DEAD(false))
                            {
                             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (int(_GLF_ONE(1.0, injectionSwitch.y)) ^ (1 | 1))); _injected_loop_counter --)
                              {
                               return;
                              }
                            }
                           do
                            {
                             if(_GLF_DEAD(false))
                              {
                               for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(4, clamp(4, _GLF_IDENTITY(4, max(4, 4)), 4))), int(4))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(4, 0 ^ (4))), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                                {
                                 return;
                                }
                              }
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                            {
                             if(_GLF_DEAD(false))
                              {
                               if(_GLF_DEAD(false))
                                return;
                               return;
                              }
                            }
                           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                            break;
                           if(_GLF_DEAD(false))
                            break;
                          }
                         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                          return;
                         return;
                         if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
                          break;
                        }
                      }
                     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                      break;
                     if(_GLF_DEAD(false))
                      return;
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            continue;
                          }
                         else
                          {
                           return;
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            return;
                          }
                        }
                       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          break;
                         break;
                        }
                       if(_GLF_DEAD(false))
                        break;
                       if(_GLF_DEAD(false))
                        return;
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           return;
                          }
                         else
                          {
                          }
                        }
                       if(_GLF_DEAD(false))
                        continue;
                       if(_GLF_DEAD(false))
                        break;
                      }
                    }
                   else
                    {
                     do
                      {
                       if(_GLF_DEAD(false))
                        return;
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          return;
                         for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, abs(vec2(0.0, 0.0)) + (injectionSwitch)).x)) ^ ((0 << _GLF_IDENTITY(int(_GLF_IDENTITY(6, 0 ^ (6))), int(6))) >> _GLF_IDENTITY(int(2), int(2)))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (0 | ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))))); _injected_loop_counter ++)
                          {
                           return;
                           if(_GLF_DEAD(false))
                            continue;
                          }
                         if(_GLF_DEAD(false))
                          break;
                        }
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(false))
                          continue;
                         if(_GLF_DEAD(false))
                          continue;
                         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
                          {
                           if(_GLF_DEAD(false))
                            return;
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             return;
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              break;
                            }
                           else
                            {
                             if(_GLF_DEAD(false))
                              break;
                            }
                           if(_GLF_DEAD(false))
                            continue;
                          }
                         return;
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               if(_GLF_DEAD(false))
                break;
              }
            }
           if(_GLF_DEAD(false))
            break;
          }
        }
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    return;
   return;
  }
}
