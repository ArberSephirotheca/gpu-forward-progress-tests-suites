#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_6 {
 mat4x3 _f0;
} ;

struct _GLF_struct_7 {
 _GLF_struct_6 _f0;
 int _f1;
 vec3 _f2;
} ;

struct _GLF_struct_4 {
 uvec4 _f0;
 uint subgroup_local_id;
 bvec2 _f1;
} ;

struct _GLF_struct_5 {
 _GLF_struct_4 _f0;
 ivec2 _f1;
 ivec3 _f2;
 bool _f3;
} ;

struct _GLF_struct_2 {
 float _f0;
 mat3 _f1;
 mat3x4 _f2;
 mat3x4 _f3;
 vec4 _f4;
 bvec2 _f5;
} ;

struct _GLF_struct_1 {
 bvec4 _f0;
 ivec3 _f1;
 int _f2;
 mat2x4 _f3;
 mat4x3 _f4;
} ;

struct _GLF_struct_0 {
 uint _f0;
 vec4 _f1;
 mat2 _f2;
 mat3x4 _f3;
 mat4x2 _f4;
} ;

struct _GLF_struct_3 {
 ivec2 _f0;
 _GLF_struct_0 _f1;
 _GLF_struct_1 _f2;
 _GLF_struct_2 _f3;
} ;

struct _GLF_struct_8 {
 _GLF_struct_3 _f0;
 _GLF_struct_5 _f1;
 _GLF_struct_7 _f2;
 mat2x4 _f3;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec4 GLF_merged4_0_1_8_1_1_17_2_1_11_3_1_12read_valsubgroup_local_idvirtual_gidworkgroup_id;
 uint subgroup_id = gl_SubgroupID;
uint subgroup_size = 16;
 _GLF_struct_8 _GLF_struct_replacement_8 = _GLF_struct_8(_GLF_struct_3(ivec2(1), _GLF_struct_0(1u, vec4(1.0), mat2(1.0), mat3x4(1.0), mat4x2(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) / _GLF_IDENTITY(dot(_GLF_IDENTITY(vec4(0.0, 0.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 0.0), _GLF_IDENTITY(_GLF_IDENTITY(mat4(_GLF_ONE(1.0, injectionSwitch.y)) * (vec4(0.0, 0.0, 1.0, 0.0)), (mat4(_GLF_ONE(1.0, injectionSwitch.y)) * (vec4(0.0, 0.0, 1.0, 0.0))) / vec4(1.0, 1.0, 1.0, 1.0)), min(mat4(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), injectionSwitch.y)))) * _GLF_IDENTITY((vec4(0.0, 0.0, 1.0, 0.0)), clamp(_GLF_IDENTITY((vec4(0.0, 0.0, 1.0, 0.0)), max((vec4(0.0, 0.0, 1.0, 0.0)), (vec4(0.0, 0.0, 1.0, 0.0)))), (vec4(0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)))), _GLF_IDENTITY((vec4(0.0, 0.0, 1.0, 0.0)), ((vec4(0.0, 0.0, 1.0, 0.0))) - sqrt(vec4(0.0, 0.0, 0.0, 0.0))))), _GLF_IDENTITY(mat4(_GLF_ONE(1.0, injectionSwitch.y)) * (vec4(0.0, 0.0, 1.0, 0.0)), mix(vec4((mat4(_GLF_ONE(1.0, injectionSwitch.y)) * (vec4(0.0, 0.0, 1.0, 0.0)))[0], (mat4(_GLF_ONE(1.0, injectionSwitch.y)) * (vec4(0.0, 0.0, 1.0, 0.0)))[1], _GLF_FUZZED(1025.5291), _GLF_FUZZED(1.1)), vec4(_GLF_FUZZED(241.762), _GLF_FUZZED(float(19689u)), (mat4(_GLF_ONE(1.0, injectionSwitch.y)) * (vec4(0.0, 0.0, 1.0, 0.0)))[2], (mat4(_GLF_ONE(1.0, injectionSwitch.y)) * (vec4(0.0, 0.0, 1.0, 0.0)))[3]), bvec4(false, false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), vec4(0.0, 0.0, sqrt(1.0), 0.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, sqrt(1.0), _GLF_IDENTITY(0.0, min(0.0, 0.0)))))), (_GLF_IDENTITY(1.0, (1.0) / _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, _GLF_IDENTITY(sqrt(1.0), (false ? _GLF_FUZZED(-377.362) : _GLF_IDENTITY(sqrt(1.0), (false ? _GLF_FUZZED(-4.1) : sqrt(1.0))))), 0.0)), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(_GLF_IDENTITY(mat2x4(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 1.0, 1.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, tan(0.0), 0.0, 1.0, 1.0)), exp(0.0)), mat2x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat2x4(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 1.0, 1.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, tan(0.0), 0.0, 1.0, 1.0)), exp(0.0))))), clamp(float(_GLF_IDENTITY(mat2x4(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 1.0, 1.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, tan(0.0), 0.0, 1.0, 1.0)), exp(0.0)), mat2x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat2x4(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 1.0, 1.0, 0.0, round(length(normalize(vec2(_GLF_IDENTITY(1.0, 1.0 * (1.0)), 1.0)))), determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, tan(0.0), 0.0, 1.0, 1.0)), exp(0.0))))), float(_GLF_IDENTITY(mat2x4(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 1.0, 1.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, tan(_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0))), 0.0, 1.0, 1.0)), exp(0.0)), mat2x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat2x4(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 1.0, 1.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), determinant(mat4(1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-6.7)), bool(false))), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, tan(0.0), 0.0, 1.0, 1.0)), exp(0.0))))), float(_GLF_IDENTITY(mat2x4(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 1.0, 1.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, tan(0.0), 0.0, 1.0, 1.0)), exp(0.0)), mat2x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat2x4(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 1.0, 1.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, tan(0.0), 0.0, 1.0, 1.0)), exp(0.0))))))))), vec4(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0, sqrt(1.0), 0.0)), clamp(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0, sqrt(1.0), 0.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), _GLF_IDENTITY(vec4(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0, sqrt(1.0), 0.0), vec4(1.0, 1.0, 1.0, 1.0) * (_GLF_IDENTITY(vec4(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0, sqrt(1.0), 0.0), mat4(1.0) * (vec4(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0, sqrt(1.0), 0.0)))))), dot(vec4(0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)), 0.0))) * _GLF_IDENTITY(1.0, (1.0) / 1.0)), 1.0, 0.0), vec4(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0, sqrt(1.0), 0.0))))))) * 1.0))), _GLF_struct_1(bvec4(true), ivec3(1), 1, mat2x4(1.0), mat4x3(1.0)), _GLF_struct_2(1.0, mat3(1.0), mat3x4(1.0), mat3x4(1.0), _GLF_IDENTITY(vec4(1.0), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(ldexp(vec4(_GLF_IDENTITY(-7.4, (_GLF_IDENTITY(-7.4, (-7.4) + 0.0)) / determinant(_GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0, 0.0, 1.0, 1.0), (mat2(1.0, 0.0, 1.0, 1.0)) - mat2(0.0, 0.0, 0.0, 0.0)), (_GLF_IDENTITY(mat2(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0, 1.0, 1.0), transpose(transpose(mat2(1.0, 0.0, 1.0, 1.0))))) + mat2(0.0, 0.0, 0.0, 0.0)))), 8370.2752, 65.84, -9.1), ivec4(75632, -14328, -90110, -57082))) : vec4(1.0))), bvec2(true))), _GLF_struct_5(_GLF_struct_4(uvec4(1u), gl_SubgroupInvocationID, _GLF_IDENTITY(bvec2(true), bvec2(bvec4(bvec2(true), false, false)))), ivec2(1), ivec3(1), _GLF_IDENTITY(true, (true) && true)), _GLF_struct_7(_GLF_struct_6(mat4x3(1.0)), 1, vec3(1.0)), mat2x4(1.0));
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       do
        {
         do
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat4(injectionSwitch, 0.0, 0.0, 0.0, determinant(_GLF_IDENTITY(mat3(0.0, 0.0, abs(1.0), 0.0, 0.0, 0.0, 0.0, tan(0.0), 0.0), mat3(1.0) * (mat3(0.0, 0.0, abs(1.0), 0.0, 0.0, 0.0, 0.0, tan(0.0), 0.0)))), 1.0, sqrt(sin(0.0)), 1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), sqrt(log(1.0)), 0.0))).y), ! (! ((injectionSwitch.x > injectionSwitch.y))))), bool(bool(_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat4(injectionSwitch, 0.0, 0.0, 0.0, determinant(mat3(0.0, 0.0, abs(1.0), _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat2(0.0, 1.0, 0.0, 1.0), mat2(0.0, 0.0, 0.0, 0.0) + (mat2(0.0, 1.0, 0.0, 1.0))))), 0.0, 0.0, 0.0, tan(0.0), 0.0)), 1.0, sqrt(sin(0.0)), 1.0, 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(vec2(injectionSwitch.x, 0.0)), (float(vec2(injectionSwitch.x, 0.0))) * 1.0))), (_GLF_IDENTITY(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(vec2(injectionSwitch.x, 0.0)), (float(vec2(injectionSwitch.x, 0.0))) * 1.0))), max(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(vec2(injectionSwitch.x, 0.0)), (float(vec2(injectionSwitch.x, 0.0))) * 1.0))), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(vec2(injectionSwitch.x, 0.0)), (float(vec2(injectionSwitch.x, 0.0))) * 1.0)))))) / abs(1.0)), _GLF_IDENTITY(sqrt(log(1.0)), (false ? _GLF_FUZZED(-2.9) : sqrt(log(1.0)))), 0.0))).y), ! (! ((injectionSwitch.x > injectionSwitch.y))))), (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / _GLF_ONE(1.0, injectionSwitch.y)) > _GLF_IDENTITY(injectionSwitch, vec2(mat4(injectionSwitch, 0.0, 0.0, 0.0, determinant(mat3(0.0, 0.0, abs(1.0), 0.0, 0.0, 0.0, 0.0, tan(0.0), 0.0)), 1.0, sqrt(sin(0.0)), 1.0, _GLF_IDENTITY(1.0, float(mat3(1.0, determinant(mat2(0.0, 0.0, 1.0, 0.0)), 0.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), 1.0, 0.0, 0.0, 0.0, determinant(mat2(0.0, 1.0, 0.0, 0.0))))), 1.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), sqrt(log(1.0)), 0.0))).y), ! (! ((injectionSwitch.x > injectionSwitch.y))))), false || (! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat4(injectionSwitch, 0.0, 0.0, 0.0, determinant(mat3(0.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)), abs(1.0), 0.0, 0.0, 0.0, 0.0, tan(0.0), 0.0)), 1.0, _GLF_IDENTITY(sqrt(sin(0.0)), max(_GLF_IDENTITY(sqrt(sin(0.0)), clamp(sqrt(sin(0.0)), sqrt(sin(0.0)), sqrt(sin(0.0)))), sqrt(sin(0.0)))), 1.0, 1.0, 1.0, 1.0, 1.0, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x), sqrt(log(1.0)), 0.0))).y), ! (! _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), (((injectionSwitch.x > injectionSwitch.y))) && true))))))))))) && _GLF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, false || (true))), false || (! (_GLF_IDENTITY(true, false || (true))))))), (injectionSwitch.x < injectionSwitch.y)))))))))))
              {
              }
             else
              {
               GLF_merged4_0_1_8_1_1_17_2_1_11_3_1_12read_valsubgroup_local_idvirtual_gidworkgroup_id.y = _GLF_struct_replacement_8._f1._f0.subgroup_local_id;
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
      }
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(! (! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true))), true))), (injectionSwitch.x > injectionSwitch.y))))), false || (! (! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y)))))))))
      {
      }
     else
      {
       for(int _injected_loop_counter = int(_GLF_IDENTITY(_GLF_ZERO(_GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0)), injectionSwitch.x), mix(float(_GLF_FUZZED(-5.9)), float(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(mat4x2(_GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 1.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, sqrt(1.0), 0.0)))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), _GLF_IDENTITY(! (! _GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, (1) ^ 0))), bool(bool((_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, int(ivec4(_injected_loop_counter, 1, 0, 1))) < 1)))))), true && (! (_GLF_IDENTITY(_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, min(_GLF_IDENTITY(1, 0 + (1)), 1)))), bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter < 1))))), ! (! (! _GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter < 1)), bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter < 1)))))))), false || (! _GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter < 1)), bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter < 1))))))))))); _injected_loop_counter ++)
        {
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, 1 * (1))); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(false))
                  {
                   do
                    {
                     do
                      {
                       do
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           do
                            {
                             if(_GLF_WRAPPED_IF_FALSE(false))
                              {
                              }
                             else
                              {
                               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                {
                                 do
                                  {
                                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) && true)))))
                                    {
                                     return;
                                    }
                                   else
                                    {
                                    }
                                  }
                                 while(_GLF_WRAPPED_LOOP(false));
                                }
                               else
                                {
                                }
                              }
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                          }
                         else
                          {
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ((false)) && true) && true)));
                  }
                }
              }
             else
              {
              }
            }
           else
            {
            }
          }
        }
      }
    }
   else
    {
    }
  }
 else
  {
  }
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, gl_WorkGroupID)).x;
 GLF_merged4_0_1_8_1_1_17_2_1_11_3_1_12read_valsubgroup_local_idvirtual_gidworkgroup_id.w = workgroup_id;
 uint workgroup_base = workgroup_size * _GLF_IDENTITY(GLF_merged4_0_1_8_1_1_17_2_1_11_3_1_12read_valsubgroup_local_idvirtual_gidworkgroup_id.w, (true ? GLF_merged4_0_1_8_1_1_17_2_1_11_3_1_12read_valsubgroup_local_idvirtual_gidworkgroup_id.w : _GLF_FUZZED(workgroup_id)));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         do
          {
           for(int _injected_loop_counter = (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(2), int(2))), min((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) >> 0))), (1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) | 0))))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, (2) - 0)) | (int(_GLF_ZERO(0.0, injectionSwitch.x)) | 0)), int(ivec3(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, (2) - 0)) | (int(_GLF_ZERO(0.0, injectionSwitch.x)) | 0)), 1, 0)))), int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(int(2), (true ? int(2) : _GLF_FUZZED(-74546))), 0), (ivec2(int(2), 0)) | (_GLF_IDENTITY(ivec2(int(2), 0), (_GLF_IDENTITY(ivec2(int(2), 0), _GLF_IDENTITY(max(ivec2(int(2), 0), ivec2(int(2), _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (false ? _GLF_FUZZED(-74093) : 0)))))), ivec2(0, 0) | (max(ivec2(int(2), 0), ivec2(int(2), _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (false ? _GLF_FUZZED(-74093) : 0)))))))))) | _GLF_IDENTITY((ivec2(int(2), 0)), ((ivec2(int(_GLF_IDENTITY(2, (true ? _GLF_IDENTITY(2, 0 ^ (2)) : _GLF_FUZZED((-80111 % -12900))))), 0))) / ivec2(1, 1))))))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) << 0), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) << 0), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) << 0), (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) << 0)) ^ 0)) / 1, ~ (~ _GLF_IDENTITY(((_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) + 0)) << 0), (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) << 0)) ^ 0)) / 1), (((_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) << 0), (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) << 0)) ^ 0)) / 1)) >> 0))))))) > (_GLF_IDENTITY(0, 1 * (0)) >> _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) | 0)), _GLF_IDENTITY(int(1), (int(1)) / 1)), min(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) | 0)), _GLF_IDENTITY(int(1), (int(1)) / 1)), ~ (~ (_GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) | 0)), _GLF_IDENTITY(int(1), (int(1)) / 1))))), _GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) | 0)), _GLF_IDENTITY(int(1), _GLF_IDENTITY((int(1)) / 1, ((int(1)) / 1) * int(_GLF_ONE(1.0, injectionSwitch.y)))))))), (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) << 0), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) << 0), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) << 0), (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) << 0)) ^ 0), (false ? _GLF_FUZZED((atomicAdd(_injected_loop_counter, 40394) + _injected_loop_counter)) : _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) << 0), (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) << 0)) ^ 0)))) / 1, 0 + ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) << 0), (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) << 0)) ^ 0), (false ? _GLF_FUZZED((atomicAdd(_injected_loop_counter, 40394) + _injected_loop_counter)) : _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) << 0), (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) << 0)) ^ 0)))) / 1)))))) > (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) | 0)), _GLF_IDENTITY(int(1), (int(1)) / 1)), (_GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) | 0)), _GLF_IDENTITY(int(1), (int(1)) / 1))) | 0))) || false)); _injected_loop_counter --)
            {
             do
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 for(int _injected_loop_counter = (_GLF_IDENTITY(1, ~ (~ (1))) ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
                    {
                     do
                      {
                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, min(0, 0))); _injected_loop_counter --)
                        {
                         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)), _GLF_IDENTITY(1, (_GLF_IDENTITY(1, clamp(1, 1, 1))) - 0) * (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(3), int(3))), min((1 << _GLF_IDENTITY(int(3), int(3))), (1 << _GLF_IDENTITY(int(3), int(3))))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) + 0)))), (_GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), (false ? _GLF_FUZZED(ivec2(-28885, 73550).r) : _GLF_IDENTITY(int(3), 0 | (int(3))))), int(3))) >> _GLF_IDENTITY(int(3), int(3)), 1 * ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))))) >> 0))); _injected_loop_counter ++)
                          {
                           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (injectionSwitch.x > injectionSwitch.y))))
                            {
                            }
                           else
                            {
                             if(_GLF_WRAPPED_IF_TRUE(true))
                              {
                               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                                {
                                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                  {
                                  }
                                 else
                                  {
                                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), injectionSwitch.x))), float(_GLF_FUZZED(-9222.1294)), bool(false))))) < injectionSwitch.y))))
                                    {
                                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
                                      {
                                      }
                                     else
                                      {
                                       if(_GLF_WRAPPED_IF_FALSE(false))
                                        {
                                        }
                                       else
                                        {
                                         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 & 1) | 1)); _injected_loop_counter ++)
                                          {
                                           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
                                            {
                                             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                                              {
                                               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                                {
                                                 if(_GLF_WRAPPED_IF_FALSE(false))
                                                  {
                                                  }
                                                 else
                                                  {
                                                   do
                                                    {
                                                     if(_GLF_WRAPPED_IF_TRUE(true))
                                                      {
                                                       return;
                                                      }
                                                     else
                                                      {
                                                      }
                                                    }
                                                   while(_GLF_WRAPPED_LOOP(false));
                                                  }
                                                }
                                               else
                                                {
                                                }
                                              }
                                            }
                                           else
                                            {
                                            }
                                          }
                                        }
                                      }
                                    }
                                   else
                                    {
                                    }
                                  }
                                }
                              }
                             else
                              {
                              }
                            }
                          }
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   else
                    {
                    }
                  }
                }
               else
                {
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))));
            }
          }
         while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bool(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (bool(bool(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || false)), true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bool(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (bool(bool(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || false)))), false), bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bool(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (bool(bool(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || false)), false)))))));
        }
      }
    }
   else
    {
    }
  }
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, max(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) / 1u), _GLF_IDENTITY(subgroup_id * subgroup_size, min(subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id * subgroup_size, 1u * (subgroup_id * subgroup_size)))))), (_GLF_IDENTITY(subgroup_id * subgroup_size, max(_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) << 0u)) / 1u), _GLF_IDENTITY(subgroup_id * subgroup_size, min(_GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(write_val) : _GLF_IDENTITY(subgroup_id, 0u ^ (_GLF_IDENTITY(subgroup_id, 0u | (subgroup_id)))))) * subgroup_size, _GLF_IDENTITY(subgroup_id * subgroup_size, 1u * (subgroup_id * subgroup_size))))))) | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, max(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) / 1u), _GLF_IDENTITY(subgroup_id * subgroup_size, min(subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id * subgroup_size, 1u * (subgroup_id * subgroup_size)))))), uint(uvec3(_GLF_IDENTITY(subgroup_id * subgroup_size, max(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) / 1u), max(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) / 1u), _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) / 1u))), _GLF_IDENTITY(subgroup_id * subgroup_size, min(subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id * subgroup_size, 1u * (subgroup_id * subgroup_size)))))), 0u, 0u))))), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) / 1u) + _GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(max(_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(subgroup_id * subgroup_size, min(subgroup_id * subgroup_size, subgroup_id * subgroup_size))))), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(subgroup_id * subgroup_size, min(subgroup_id * subgroup_size, subgroup_id * subgroup_size))))), ((_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(subgroup_id * subgroup_size, min(subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), subgroup_id * subgroup_size)))))) - 0u)))) / 1u), _GLF_IDENTITY(subgroup_id * subgroup_size, min(subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id * subgroup_size, 1u * (subgroup_id * subgroup_size))))), min(max(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) / 1u), _GLF_IDENTITY(subgroup_id * subgroup_size, min(subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id * subgroup_size, 1u * (subgroup_id * subgroup_size))))), max(_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id * subgroup_size, clamp(subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(uint(uint(subgroup_id * subgroup_size)), (uint(uint(subgroup_id * subgroup_size))) | 0u)), _GLF_IDENTITY(subgroup_id * subgroup_size, 0u | (subgroup_id * subgroup_size))))) / 1u), _GLF_IDENTITY(subgroup_id * subgroup_size, min(subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id * subgroup_size, 1u * (_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)) * subgroup_size)))))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base) / 1u, max((workgroup_base) / 1u, (workgroup_base) / 1u))) + _GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)) * subgroup_size, (subgroup_id * subgroup_size) / 1u), _GLF_IDENTITY(subgroup_id * subgroup_size, min(subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id * subgroup_size, 1u * (subgroup_id * _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))))))), min(max(_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY((subgroup_id * subgroup_size) / 1u, max((subgroup_id * subgroup_size) / 1u, _GLF_IDENTITY((subgroup_id * subgroup_size) / 1u, ~ (_GLF_IDENTITY(~ ((subgroup_id * subgroup_size) / 1u), clamp(~ ((_GLF_IDENTITY(subgroup_id * subgroup_size, uint(_GLF_IDENTITY(uvec2(subgroup_id * subgroup_size, 0u), max(uvec2(subgroup_id * subgroup_size, 0u), uvec2(subgroup_id * subgroup_size, 0u)))))) / 1u), ~ ((_GLF_IDENTITY(subgroup_id * subgroup_size, 0u ^ (_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) << 0u)))) / 1u), ~ ((subgroup_id * subgroup_size) / 1u))))))), (_GLF_IDENTITY((subgroup_id * subgroup_size) / 1u, max((subgroup_id * subgroup_size) / 1u, _GLF_IDENTITY((subgroup_id * subgroup_size) / 1u, ~ (_GLF_IDENTITY(~ ((subgroup_id * subgroup_size) / 1u), clamp(~ ((_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(subgroup_id * subgroup_size, 0u), max(uvec2(subgroup_id * subgroup_size, 0u), _GLF_IDENTITY(uvec2(subgroup_id * subgroup_size, 0u), (true ? uvec2(subgroup_id * subgroup_size, 0u) : _GLF_FUZZED(uvec2(82491u, 198110u))))))), clamp(uint(_GLF_IDENTITY(uvec2(subgroup_id * subgroup_size, 0u), max(uvec2(subgroup_id * subgroup_size, 0u), _GLF_IDENTITY(uvec2(subgroup_id * subgroup_size, 0u), (true ? uvec2(subgroup_id * subgroup_size, 0u) : _GLF_FUZZED(uvec2(82491u, 198110u))))))), uint(_GLF_IDENTITY(uvec2(subgroup_id * subgroup_size, 0u), max(uvec2(subgroup_id * subgroup_size, 0u), _GLF_IDENTITY(uvec2(subgroup_id * subgroup_size, 0u), (true ? uvec2(subgroup_id * subgroup_size, 0u) : _GLF_FUZZED(uvec2(82491u, 198110u))))))), uint(_GLF_IDENTITY(uvec2(subgroup_id * subgroup_size, 0u), max(uvec2(subgroup_id * subgroup_size, 0u), _GLF_IDENTITY(uvec2(subgroup_id * subgroup_size, 0u), (true ? uvec2(subgroup_id * subgroup_size, 0u) : _GLF_FUZZED(uvec2(82491u, 198110u))))))))))) / 1u), ~ ((subgroup_id * subgroup_size) / 1u), ~ ((subgroup_id * subgroup_size) / 1u)))))))) | 0u)), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, max(subgroup_id * subgroup_size, subgroup_id * subgroup_size)), min(subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id * subgroup_size, 1u * (subgroup_id * subgroup_size))))), max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) / 1u), min(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) / 1u), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) / 1u), min(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) / 1u), _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) / 1u))))), 0u | (_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) / 1u))), _GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, uint(uint(_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(subgroup_size, uint(uint(_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))))) : _GLF_FUZZED(num_workgroup))), _GLF_IDENTITY(min(subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id * subgroup_size, 1u * (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)), 0u | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)), (true ? _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)), 0u | (_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)))) : _GLF_FUZZED(workgroup_base))))) * subgroup_size))), 0u | (min(subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id * subgroup_size, 1u * (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)), subgroup_id)), 0u | _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)), (true ? _GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)) : _GLF_FUZZED(workgroup_base)))), ~ (~ ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)), (true ? _GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)) : _GLF_FUZZED(workgroup_base)))))))) * subgroup_size))))))))))), uint(_GLF_IDENTITY(uvec2(~ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, clamp(_GLF_IDENTITY(workgroup_base, (workgroup_base) - (0u | 0u)), workgroup_base, workgroup_base)), _GLF_IDENTITY((workgroup_base), (_GLF_IDENTITY((workgroup_base), max((workgroup_base), (workgroup_base)))) ^ 0u) / 1u) + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(max(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) / 1u), _GLF_IDENTITY(subgroup_id * subgroup_size, min(subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id * subgroup_size, 1u * (subgroup_id * subgroup_size))))), min(max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * subgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, max(subgroup_id, _GLF_IDENTITY(subgroup_id, (subgroup_id) - (0u >> _GLF_IDENTITY(uint(0u), _GLF_IDENTITY(uint(0u), (_GLF_IDENTITY(uint(0u), uint(uint(uint(0u))))) - uint(_GLF_ZERO(0.0, injectionSwitch.x)))))))) * subgroup_size, (true ? _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * subgroup_size, _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * subgroup_size)), clamp(~ (~ (_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * subgroup_size)), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * subgroup_size)), (false ? _GLF_FUZZED(150182u) : ~ (~ (_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * subgroup_size)))), ~ (~ (_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * subgroup_size))))) : _GLF_FUZZED(156940u)))) | (_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * subgroup_size)), (subgroup_id * subgroup_size) / 1u), _GLF_IDENTITY(subgroup_id * subgroup_size, min(subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id * subgroup_size, 1u * (subgroup_id * subgroup_size))))), max(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) / 1u), _GLF_IDENTITY(subgroup_id * subgroup_size, min(subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id * subgroup_size, 1u * _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)) * subgroup_size), 0u ^ ((_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)) * subgroup_size)))))))))), (true ? _GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(max(_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, uint(uvec4(subgroup_size, (0u << _GLF_IDENTITY(uint(3u), uint(3u))), 0u, (0u >> _GLF_IDENTITY(uint(5u), _GLF_IDENTITY(uint(5u), (uint(5u)) ^ 0u)))))), (_GLF_IDENTITY(subgroup_id * subgroup_size, 0u + (subgroup_id * subgroup_size))) / 1u), _GLF_IDENTITY(subgroup_id * subgroup_size, min(subgroup_id * _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), _GLF_IDENTITY(subgroup_id * subgroup_size, 1u * (subgroup_id * subgroup_size))))), min(max(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) / 1u), _GLF_IDENTITY(subgroup_id * subgroup_size, min(subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id * subgroup_size, 1u * (subgroup_id * subgroup_size))))), max(_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id, uint(_GLF_IDENTITY(uvec3(subgroup_id, 1u, (0u << _GLF_IDENTITY(uint(3u), uint(3u)))), (uvec3(subgroup_id, 1u, (0u << _GLF_IDENTITY(uint(3u), uint(3u))))) | (uvec3(subgroup_id, 1u, (0u << _GLF_IDENTITY(uint(3u), uint(3u)))))))) * subgroup_size) / 1u), _GLF_IDENTITY(subgroup_id * subgroup_size, min(subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id * subgroup_size, 1u * (_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)) * subgroup_size)))))))) : _GLF_FUZZED(194678u)))), (false ? _GLF_FUZZED(workgroup_base) : (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) << uint(_GLF_ZERO(0.0, injectionSwitch.x))), clamp(_GLF_IDENTITY(workgroup_base, (workgroup_base) - (0u | 0u)), workgroup_base, workgroup_base)), (_GLF_IDENTITY(workgroup_base, uint(_GLF_IDENTITY(uint(workgroup_base), (false ? _GLF_FUZZED(workgroup_base) : uint(workgroup_base)))))) / 1u) + _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (0u | 0u) | (subgroup_id)) * subgroup_size, _GLF_IDENTITY(max(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) / 1u), _GLF_IDENTITY(subgroup_id * subgroup_size, min(subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id * subgroup_size, 1u * (subgroup_id * subgroup_size))))), min(max(_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY((subgroup_id * subgroup_size) / 1u, ((subgroup_id * subgroup_size) / 1u) >> 0u)), _GLF_IDENTITY(subgroup_id * subgroup_size, min(subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(1u * (subgroup_id * subgroup_size), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (1u * (subgroup_id * subgroup_size)), (~ (1u * (subgroup_id * subgroup_size))) - 0u), (_GLF_IDENTITY(~ (_GLF_IDENTITY(1u * (subgroup_id * subgroup_size), clamp(1u * (subgroup_id * subgroup_size), 1u * (subgroup_id * subgroup_size), _GLF_IDENTITY(1u * (_GLF_IDENTITY(subgroup_id, uint(uint(subgroup_id))) * subgroup_size), (_GLF_IDENTITY(1u * (subgroup_id * subgroup_size), max(1u * (subgroup_id * subgroup_size), 1u * (subgroup_id * subgroup_size)))) * 1u)))), max(~ (1u * (subgroup_id * subgroup_size)), ~ (1u * _GLF_IDENTITY((subgroup_id * subgroup_size), min((subgroup_id * subgroup_size), (subgroup_id * subgroup_size))))))) * 1u))))))), max(_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id * subgroup_size, max(subgroup_id * subgroup_size, subgroup_id * subgroup_size))) / 1u), _GLF_IDENTITY(subgroup_id * subgroup_size, min(subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id * subgroup_size, 1u * (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)), (_GLF_IDENTITY(subgroup_id, min(subgroup_id, _GLF_IDENTITY(subgroup_id, (true ? subgroup_id : _GLF_FUZZED(write_val)))))) / 1u) * subgroup_size)))))))), (true ? _GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(max(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) / 1u), _GLF_IDENTITY(subgroup_id * subgroup_size, min(subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id * subgroup_size, 1u * (_GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u) * subgroup_size))))), min(max(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) / _GLF_IDENTITY(1u, (1u) | (1u))), _GLF_IDENTITY(subgroup_id * subgroup_size, min(subgroup_id * subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) | (_GLF_IDENTITY(subgroup_id, (subgroup_id) | (_GLF_IDENTITY(subgroup_id, uint(uvec2(subgroup_id, 1u))))))) * subgroup_size, 1u * (subgroup_id * subgroup_size))))), max(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) / 1u), _GLF_IDENTITY(subgroup_id * subgroup_size, min(subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id * subgroup_size, 1u * (_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)) * subgroup_size)))))))) : _GLF_FUZZED(194678u)))))), 1u), uvec2(uvec4(uvec2(~ (_GLF_IDENTITY(workgroup_base, (workgroup_base) / 1u) + _GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u), _GLF_IDENTITY(max(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) / 1u), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(subgroup_id * subgroup_size, 0u, 0u, 0u), (uvec4(subgroup_id * subgroup_size, 0u, 0u, _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) ^ (0u | 0u))) << (0u & 76332u)))) ^ uvec4(0u, 0u, 0u, 0u))), ~ (~ (uint(_GLF_IDENTITY(uvec4(subgroup_id * subgroup_size, 0u, 0u, 0u), (uvec4(subgroup_id * subgroup_size, 0u, 0u, 0u)) ^ uvec4(_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(write_val) : 0u)), 0u, 0u, _GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), (~ (0u)) | (~ (0u)))))))))))), min(subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id * subgroup_size, 1u * (subgroup_id * _GLF_IDENTITY(subgroup_size, uint(uint(subgroup_size)))))))), min(max(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) / 1u), _GLF_IDENTITY(subgroup_id * subgroup_size, min(subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id * subgroup_size, 1u * (subgroup_id * subgroup_size))))), max(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) / 1u), _GLF_IDENTITY(subgroup_id * subgroup_size, min(subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(1u, max(_GLF_IDENTITY(1u, ~ (~ (1u))), 1u)) * (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(min(subgroup_id, subgroup_id), clamp(min(subgroup_id, subgroup_id), min(subgroup_id, subgroup_id), min(subgroup_id, subgroup_id)))) * subgroup_size))))))))), 1u), 1u, _GLF_IDENTITY(0u, (0u) - 0u))))))))) | (workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, max(_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY((subgroup_id * subgroup_size) / 1u, 0u | ((_GLF_IDENTITY(subgroup_id, ~ (_GLF_IDENTITY(~ (subgroup_id), (~ (subgroup_id)) >> 0u))) * subgroup_size) / 1u))), _GLF_IDENTITY(subgroup_id * subgroup_size, min(subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id * subgroup_size, 1u * (subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u))))))), (_GLF_IDENTITY(subgroup_id * subgroup_size, max(_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY((subgroup_id * subgroup_size) / 1u, 0u | ((subgroup_id * subgroup_size) / 1u))), _GLF_IDENTITY(subgroup_id * subgroup_size, min(subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id * subgroup_size, 1u * (subgroup_id * subgroup_size))))))) | 0u))) + GLF_merged4_0_1_8_1_1_17_2_1_11_3_1_12read_valsubgroup_local_idvirtual_gidworkgroup_id.y;
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, 0 | (2))))) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter --)
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), max(int(4), int(4))), int(4)), _GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (false ? _GLF_FUZZED(-37995) : _GLF_IDENTITY(int(_GLF_IDENTITY(4, (4) >> 0)), int(4)))), 1)), (int(ivec2(_GLF_IDENTITY(int(4), int(4)), 1))) | (int(ivec2(_GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) ^ 0)), _GLF_IDENTITY(1, (0 << _GLF_IDENTITY(int(1), int(1))) | (1)))))))) >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! _GLF_IDENTITY((false), false || ((false))), false || (! (false)))))))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != (-97123 & 0)); _injected_loop_counter --)
                  {
                   for(int _injected_loop_counter = (ivec2(11615, -18009).g & (0 >> _GLF_IDENTITY(int(3), int(3)))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y)), ! (! (_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y)))))); _injected_loop_counter ++)
                    {
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          {
                          }
                         else
                          {
                           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                            {
                             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(false)), _GLF_IDENTITY(bool(bvec4(! (_GLF_WRAPPED_IF_FALSE(false)), false, true, true)), ! (! (bool(bvec4(! (_GLF_WRAPPED_IF_FALSE(false)), false, true, true)))))))), false, _GLF_IDENTITY(false, (false) || false)))))
                              {
                              }
                             else
                              {
                               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                {
                                 do
                                  {
                                   for(int _injected_loop_counter = _GLF_IDENTITY((_GLF_IDENTITY(0 << _GLF_IDENTITY(int(0), int(0)), ~ (~ (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(0), int(0)), 0 + (0 << _GLF_IDENTITY(int(0), int(0)))))))), max((0 << _GLF_IDENTITY(int(0), int(0))), (0 << _GLF_IDENTITY(int(0), int(0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) << (56378 & 0)))
                                    {
                                     for(int _injected_loop_counter = ((0 | 1) & int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
                                      {
                                       do
                                        {
                                         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) | (0 << _GLF_IDENTITY(int(4), int(4))))), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) | (0 << _GLF_IDENTITY(int(4), int(4))))), (_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) | (0 << _GLF_IDENTITY(int(4), int(4)))))) | (_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) | (0 << _GLF_IDENTITY(int(4), int(4))))))), 1, 1, 1), (ivec4(_GLF_IDENTITY(_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) | (0 << _GLF_IDENTITY(int(4), int(4))))), (_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) | (0 << _GLF_IDENTITY(int(4), int(4)))))) | (_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) | (0 << _GLF_IDENTITY(int(4), int(4))))))), 1, 1, 1)) | (ivec4(_GLF_IDENTITY(_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) | (0 << _GLF_IDENTITY(int(4), int(4))))), (_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) | (0 << _GLF_IDENTITY(int(4), int(4)))))) | (_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) | (0 << _GLF_IDENTITY(int(4), int(4))))))), 1, 1, 1)))), 0 ^ (int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) | (0 << _GLF_IDENTITY(int(4), int(4))))), (_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) | (0 << _GLF_IDENTITY(int(4), int(4)))))) | (_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) | (0 << _GLF_IDENTITY(int(4), int(4))))))), 1, 1, 1), (ivec4(_GLF_IDENTITY(_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) | (0 << _GLF_IDENTITY(int(4), int(4))))), (_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) | (0 << _GLF_IDENTITY(int(4), int(4)))))) | (_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) | (0 << _GLF_IDENTITY(int(4), int(4))))))), 1, 1, 1)) | (ivec4(_GLF_IDENTITY(_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) | (0 << _GLF_IDENTITY(int(4), int(4))))), (_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) | (0 << _GLF_IDENTITY(int(4), int(4)))))) | (_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) | (0 << _GLF_IDENTITY(int(4), int(4))))))), 1, 1, 1))))))))); _injected_loop_counter ++)
                                          {
                                           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(_GLF_IDENTITY(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) || false)))))
                                            {
                                             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                                              {
                                               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                                                {
                                                 if(_GLF_WRAPPED_IF_TRUE(true))
                                                  {
                                                   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec3(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec3(bvec2(true, true), true))), false)))))))
                                                    {
                                                     return;
                                                    }
                                                   else
                                                    {
                                                    }
                                                  }
                                                 else
                                                  {
                                                  }
                                                }
                                              }
                                            }
                                           else
                                            {
                                            }
                                          }
                                        }
                                       while(_GLF_WRAPPED_LOOP(false));
                                      }
                                    }
                                  }
                                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                }
                               else
                                {
                                }
                              }
                            }
                           else
                            {
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
         else
          {
          }
        }
      }
    }
  }
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       do
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY(1 | _GLF_IDENTITY(0, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(0, 1), (ivec2(0, 1)) - ivec2(0, 0))), (int(_GLF_IDENTITY(ivec2(0, 1), (ivec2(0, 1)) - ivec2(0, 0)))) | 0)), (1 | 0) / 1))); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), 1 * (int(_GLF_ONE(1.0, injectionSwitch.y)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                  {
                   GLF_merged4_0_1_8_1_1_17_2_1_11_3_1_12read_valsubgroup_local_idvirtual_gidworkgroup_id.z = virtual_gid;
                  }
                }
              }
            }
           else
            {
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     else
      {
      }
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     do
      {
       atomicStore(write_val, uint(GLF_merged4_0_1_8_1_1_17_2_1_11_3_1_12read_valsubgroup_local_idvirtual_gidworkgroup_id.z), 4, 64, 0);
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 else
  {
  }
 uint read_val = atomicLoad(write_val, _GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (_GLF_IDENTITY(4, (4) + 0))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(4, (4) << 0), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(4, (_GLF_IDENTITY(true, true && (true)) ? 4 : _GLF_FUZZED(66242))), (4) + 0))), clamp(_GLF_IDENTITY(4, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, max(0, 0))) | (_GLF_IDENTITY(0, max(0, 0)))) ^ (_GLF_IDENTITY(_GLF_IDENTITY(4, _GLF_IDENTITY((4) + 0, ((4) + 0) - 0)), (_GLF_IDENTITY(4, (4) + 0)) / 1))), _GLF_IDENTITY(4, 0 ^ (_GLF_IDENTITY(4, (4) + 0))), _GLF_IDENTITY(4, 0 ^ (_GLF_IDENTITY(4, (4) + 0))))), (_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(66242))), (4) + 0))), clamp(_GLF_IDENTITY(4, 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(4, _GLF_IDENTITY((4) + 0, ((4) + 0) - 0)), (_GLF_IDENTITY(4, (4) + 0)) / 1))), _GLF_IDENTITY(4, 0 ^ (_GLF_IDENTITY(4, (4) + 0))), _GLF_IDENTITY(4, 0 ^ (_GLF_IDENTITY(4, (4) + 0)))))) | 0)) * 1), 64, 0);
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))) / 1.0)))); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     do
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY((ivec4(89322, _GLF_IDENTITY(14510, (14510) << 0), 62639, 20177).p & 0), _GLF_IDENTITY(min((_GLF_IDENTITY(ivec4(89322, 14510, 62639, 20177).p & 0, (_GLF_IDENTITY(ivec4(89322, 14510, 62639, 20177).p & 0, int(ivec4(ivec4(_GLF_IDENTITY(89322, (true ? 89322 : _GLF_FUZZED(_injected_loop_counter))), 14510, 62639, 20177).p & 0, 1, 0, 0)))) ^ 0)), (ivec4(89322, 14510, 62639, 20177).p & 0)), (false ? _GLF_FUZZED(87106) : min((ivec4(89322, 14510, 62639, 20177).p & 0), (ivec4(89322, 14510, 62639, 20177).p & 0)))))); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * _GLF_IDENTITY((injectionSwitch), _GLF_IDENTITY(vec2(_GLF_IDENTITY(vec3(_GLF_IDENTITY((injectionSwitch), vec2(vec3((injectionSwitch), exp(0.0)))), 1.0), max(vec3(_GLF_IDENTITY((injectionSwitch), vec2(vec3((injectionSwitch), exp(0.0)))), 1.0), vec3(_GLF_IDENTITY((injectionSwitch), vec2(vec3((injectionSwitch), exp(0.0)))), 1.0)))), min(vec2(_GLF_IDENTITY(vec3(_GLF_IDENTITY((injectionSwitch), vec2(vec3((injectionSwitch), exp(0.0)))), 1.0), max(vec3(_GLF_IDENTITY((injectionSwitch), vec2(vec3((injectionSwitch), exp(0.0)))), 1.0), vec3(_GLF_IDENTITY((injectionSwitch), vec2(vec3((injectionSwitch), exp(0.0)))), 1.0)))), vec2(_GLF_IDENTITY(vec3(_GLF_IDENTITY((injectionSwitch), vec2(vec3((injectionSwitch), exp(0.0)))), 1.0), max(vec3(_GLF_IDENTITY((injectionSwitch), vec2(vec3((injectionSwitch), exp(0.0)))), 1.0), vec3(_GLF_IDENTITY((injectionSwitch), vec2(vec3((injectionSwitch), exp(0.0)))), 1.0)))))))).x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               do
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   for(int _injected_loop_counter = _GLF_IDENTITY(0, int(int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) * 1))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), 0 ^ (_GLF_IDENTITY(int(5), (int(5)) * 1)))))); _injected_loop_counter ++)
                    {
                     GLF_merged4_0_1_8_1_1_17_2_1_11_3_1_12read_valsubgroup_local_idvirtual_gidworkgroup_id.x = read_val;
                    }
                  }
                 else
                  {
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 1.0, 1.0, 0.0, 0.0), mat3x2(_GLF_IDENTITY(mat3x4(mat3x2(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch)))[0], 1.0 * (injectionSwitch[0])), _GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) * 1.0))), 1.0, 1.0, 0.0, 0.0)), transpose(transpose(mat3x4(mat3x2(injectionSwitch, 1.0, 1.0, 0.0, 0.0)))))))), clamp(_GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 1.0, _GLF_IDENTITY(1.0, mix(_GLF_IDENTITY(float(_GLF_FUZZED(1.3)), clamp(_GLF_IDENTITY(float(_GLF_FUZZED(1.3)), (true ? float(_GLF_FUZZED(1.3)) : _GLF_FUZZED(-158.626))), float(_GLF_FUZZED(1.3)), float(_GLF_FUZZED(1.3)))), float(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-1.0)), float(1.0), bool(true)))), bool(true))), 0.0, 0.0), mat3x2(_GLF_IDENTITY(mat3x4(mat3x2(injectionSwitch, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(69.71) : 1.0)), 1.0, 0.0, 0.0)), transpose(transpose(mat3x4(mat3x2(injectionSwitch, 1.0, 1.0, _GLF_IDENTITY(0.0, float(mat3(0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, determinant(mat3(sqrt(0.0), length(vec3(0.0, 0.0, 0.0)), log(1.0), 1.0, 0.0, 0.0, 1.0, 1.0, 0.0))))), 0.0)))))))), max(vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 0.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, float(mat3x4(0.0, 1.0, 1.0, 1.0, tan(0.0), 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0))), 0.0))), mat3x2(_GLF_IDENTITY(mat3x4(mat3x2(injectionSwitch, 1.0, 1.0, 0.0, 0.0)), transpose(transpose(mat3x4(mat3x2(injectionSwitch, 1.0, 1.0, 0.0, 0.0)))))))), vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 1.0, 1.0, 0.0, 0.0), mat3x2(_GLF_IDENTITY(mat3x4(mat3x2(injectionSwitch, 1.0, 1.0, 0.0, 0.0)), transpose(transpose(mat3x4(mat3x2(injectionSwitch, 1.0, 1.0, 0.0, 0.0)))))))))), vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 1.0, 1.0, 0.0, 0.0), mat3x2(_GLF_IDENTITY(mat3x4(mat3x2(injectionSwitch, 1.0, 1.0, 0.0, 0.0)), transpose(transpose(mat3x4(mat3x2(injectionSwitch, 1.0, 1.0, 0.0, 0.0)))))))), _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 1.0, 1.0, 0.0, 0.0), mat3x2(_GLF_IDENTITY(mat3x4(mat3x2(injectionSwitch, 1.0, 1.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, float(mat2x4(0.0, 1.0, 1.0, 0.0, cos(0.0), 0.0, 1.0, 1.0))), 0.0)), 0.0)), transpose(transpose(mat3x4(mat3x2(injectionSwitch, 1.0, 1.0, 0.0, 0.0)))))))), mix(vec2((vec2(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED((-732.559 + -324.406)), _GLF_FUZZED(-8677.1653)), bvec2(false, false))), 1.0, 1.0, 0.0, 0.0), mat3x2(_GLF_IDENTITY(mat3x4(mat3x2(injectionSwitch, 1.0, 1.0, 0.0, 0.0)), transpose(transpose(mat3x4(mat3x2(injectionSwitch, 1.0, 1.0, 0.0, 0.0)))))))))[0], (vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 1.0, 1.0, 0.0, 0.0), mat3x2(_GLF_IDENTITY(mat3x4(mat3x2(injectionSwitch, 1.0, 1.0, 0.0, 0.0)), transpose(transpose(mat3x4(mat3x2(injectionSwitch, 1.0, 1.0, 0.0, 0.0)))))))))[1]), vec2(_GLF_FUZZED(-8396.1749), _GLF_FUZZED(-2.6)), bvec2(false, false)))))).y))));
              }
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(false))), (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true)))))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 1)); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, true && (true))) && true)))
            {
             for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 do
                  {
                   do
                    {
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                      {
                       do
                        {
                         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
                          {
                          }
                         else
                          {
                           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                            {
                             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              {
                              }
                             else
                              {
                               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))), injectionSwitch)).y))))
                                {
                                }
                               else
                                {
                                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                                  {
                                   if(_GLF_WRAPPED_IF_TRUE(true))
                                    {
                                     do
                                      {
                                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter --)
                                        {
                                         if(_GLF_WRAPPED_IF_FALSE(false))
                                          {
                                          }
                                         else
                                          {
                                           if(_GLF_WRAPPED_IF_FALSE(false))
                                            {
                                            }
                                           else
                                            {
                                             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || (_GLF_WRAPPED_IF_TRUE(true))))
                                              {
                                               if(_GLF_DEAD(false))
                                                {
                                                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0) * (injectionSwitch), max(mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))), mat2(1.0) * (injectionSwitch))), mat2(1.0) * (_GLF_IDENTITY(mat2(1.0) * (injectionSwitch), max(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch)))))).x < injectionSwitch.y))))
                                                  {
                                                   do
                                                    {
                                                     if(_GLF_WRAPPED_IF_TRUE(true))
                                                      {
                                                       return;
                                                      }
                                                     else
                                                      {
                                                      }
                                                    }
                                                   while(_GLF_WRAPPED_LOOP(false));
                                                  }
                                                 else
                                                  {
                                                  }
                                                }
                                              }
                                             else
                                              {
                                              }
                                            }
                                          }
                                        }
                                      }
                                     while(_GLF_WRAPPED_LOOP(false));
                                    }
                                   else
                                    {
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
            }
           else
            {
            }
          }
        }
       else
        {
        }
      }
    }
  }
 else
  {
  }
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(_GLF_IDENTITY(true, (true) || false), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(bool(bvec3(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).y, false, true)), (bool(bvec3(injectionSwitch.x < injectionSwitch.y, false, true))) && true))), ! (! ((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(bool(bvec3(injectionSwitch.x < injectionSwitch.y, false, true)), (bool(bvec3(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)), false, true))) && _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, true, true)), ! (! (bool(bvec3(true, true, true)))))))))))), ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(vec2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, 0.0 + (1.0)), 1.0)), 1.0)))))) / _GLF_IDENTITY(vec2(1.0, 1.0), min(vec2(1.0, 1.0), vec2(1.0, 1.0)))).y) && true)) || false), _GLF_IDENTITY(bool(bvec3(injectionSwitch.x < injectionSwitch.y, false, true)), (bool(bvec3(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y, false, true))) && true)))) || false)), (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)))) || false)), bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(_GLF_IDENTITY(true, (true) || false), (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y, false, true)), false || (bool(bvec3(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 1.0, 1.0, 0.0, log(1.0), 1.0, 1.0, 0.0)))) - vec2(0.0, 0.0)).x < injectionSwitch.y, false, true)))), (bool(bvec3(injectionSwitch.x < injectionSwitch.y, false, true))) && true)))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, float(mat3x2(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), 0.0, 0.0, 0.0, 1.0, sqrt(1.0)))) < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), true && (! (! (false)))))), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, 0.0 + (1.0))) * 1.0), injectionSwitch.y)) * (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), bool(bvec4(_GLF_IDENTITY(! (! (false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (! (false)), bool(bvec2(! (! (false)), false)))), (! (_GLF_IDENTITY(! (! (false)), bool(bvec2(! (! (false)), false))))) && true))), true, true, false))))), false)), _GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, ! (! (false)))), false)), bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_TRUE(_GLF_IDENTITY(true, bool(bvec3(true, false, true))), (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-9.7)), vec2(_GLF_FUZZED(-1322.6301), (injectionSwitch)[1]), bvec2(false, true))) : _GLF_FUZZED(injectionSwitch))), injectionSwitch)).y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, ! (! (false)))), false))))), true)), bvec3(bvec3(bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-2.8)), float(injectionSwitch.y), bool(true))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, ! (! (false)))), false)), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat2(injectionSwitch.x, 0.0, 1.0, 1.0))) > injectionSwitch.y)), _GLF_IDENTITY(false, ! (! (false)))), false)), bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat2(injectionSwitch.x, 0.0, 1.0, 1.0)), float(mat2x3(float(mat2(injectionSwitch.x, 0.0, 1.0, 1.0)), 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0))), 1.0, 0.0, 0.0)))) > injectionSwitch.y)), _GLF_IDENTITY(false, ! (! (false)))), false)))))))), true)))))))), _GLF_IDENTITY(false, (false) && true) || (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)), _GLF_IDENTITY(false, ! (! (false)))), bvec3(bvec4(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, ! (! (false)))), true)))), (bool(bvec3(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, float(vec4(injectionSwitch.y, 0.0, 1.0, _GLF_IDENTITY(length(tan(vec4(0.0, 0.0, 0.0, 0.0))), mix(float(_GLF_FUZZED(-4.7)), float(_GLF_IDENTITY(length(tan(vec4(0.0, 0.0, 0.0, 0.0))), float(_GLF_IDENTITY(mat4x2(length(tan(vec4(0.0, 0.0, 0.0, 0.0))), 1.0, 1.0, sqrt(1.0), 0.0, 1.0, 0.0, 0.0), transpose(transpose(mat4x2(length(tan(vec4(0.0, 0.0, 0.0, 0.0))), 1.0, 1.0, sqrt(1.0), 0.0, 1.0, 0.0, 0.0))))))), bool(true)))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), true && (! (! (false)))))))) && true))))), ((_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, float(mat3x2(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), 0.0, 0.0, 0.0, 1.0, sqrt(1.0)))) < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), true && (! (! (false)))))), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, 0.0 + (1.0))) * 1.0), injectionSwitch.y)) * (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), bool(bvec4(_GLF_IDENTITY(! (! (false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (! (false)), bool(bvec2(! (! (false)), false)))), (! (_GLF_IDENTITY(! (! (false)), bool(bvec2(! (! (false)), false))))) && true))), true, true, false))))), false)), _GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, ! (! (false)))), false)), bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_TRUE(_GLF_IDENTITY(true, bool(bvec3(true, false, true))), (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-9.7)), vec2(_GLF_FUZZED(-1322.6301), (injectionSwitch)[1]), bvec2(false, true))) : _GLF_FUZZED(injectionSwitch))), injectionSwitch)).y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, ! (! (false)))), false))))), true)), bvec3(bvec3(bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-2.8)), float(injectionSwitch.y), bool(true))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, ! (! (false)))), false)), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat2(injectionSwitch.x, 0.0, 1.0, 1.0))) > injectionSwitch.y)), _GLF_IDENTITY(false, ! (! (false)))), false)), bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat2(injectionSwitch.x, 0.0, 1.0, 1.0)), float(mat2x3(float(mat2(injectionSwitch.x, 0.0, 1.0, 1.0)), 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0))), 1.0, 0.0, 0.0)))) > injectionSwitch.y)), _GLF_IDENTITY(false, ! (! (false)))), false)))))))), true)))))))), _GLF_IDENTITY(false, (false) && true) || (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)), _GLF_IDENTITY(false, ! (! (false)))), bvec3(bvec4(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, ! (! (false)))), true)))), (bool(bvec3(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, float(vec4(injectionSwitch.y, 0.0, 1.0, _GLF_IDENTITY(length(tan(vec4(0.0, 0.0, 0.0, 0.0))), mix(float(_GLF_FUZZED(-4.7)), float(_GLF_IDENTITY(length(tan(vec4(0.0, 0.0, 0.0, 0.0))), float(_GLF_IDENTITY(mat4x2(length(tan(vec4(0.0, 0.0, 0.0, 0.0))), 1.0, 1.0, sqrt(1.0), 0.0, 1.0, 0.0, 0.0), transpose(transpose(mat4x2(length(tan(vec4(0.0, 0.0, 0.0, 0.0))), 1.0, 1.0, sqrt(1.0), 0.0, 1.0, 0.0, 0.0))))))), bool(true)))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), true && (! (! (false)))))))) && true)))))) && true) || false)), _GLF_IDENTITY((_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, (true) && true)))) || false), (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(injectionSwitch.x < injectionSwitch.y, false, true)), false || (bool(bvec3(injectionSwitch.x < injectionSwitch.y, false, true)))), (bool(bvec3(injectionSwitch.x < injectionSwitch.y, false, true))) && true)))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, ! (! (false))))), false || (_GLF_IDENTITY(bool(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true), _GLF_IDENTITY(false, ! (! (false))))), (bool(bvec3(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, mix(_GLF_IDENTITY(float(injectionSwitch.y), clamp(_GLF_IDENTITY(float(injectionSwitch.y), clamp(float(injectionSwitch.y), float(injectionSwitch.y), float(injectionSwitch.y))), float(injectionSwitch.y), float(injectionSwitch.y))), float(_GLF_FUZZED(-8.5)), bool(false)))), float(_GLF_FUZZED(-88.29)), bool(false))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, ! (! (false)))))) && true)))), ! (! (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, ! (! (false))))), false || (_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(27.62)))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, ! (! (false))))), (bool(bvec3(_GLF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, (true) && true)), ! (! (! (_GLF_IDENTITY(true, (true) && true))))))), (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(mix(float(injectionSwitch.y), float(_GLF_FUZZED(-8.5)), bool(false)), min(mix(float(injectionSwitch.y), float(_GLF_FUZZED(-8.5)), bool(false)), _GLF_IDENTITY(mix(float(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(vec3(injectionSwitch.y, 1.0, 0.0))), injectionSwitch.y))), float(_GLF_FUZZED(-8.5)), bool(false)), 0.0 + (mix(float(injectionSwitch.y), float(_GLF_FUZZED(-8.5)), bool(false)))))))), float(_GLF_FUZZED(-88.29)), _GLF_IDENTITY(bool(false), (bool(false)) || false))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, ! (! (false))), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(false, ! (! (false))), true), false, true)))), true && (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, ! (! (false))), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(false, ! (! (false))), true), false, true)))))))))) && true)))))))) || false))) && true, ! (! (_GLF_IDENTITY((_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY((_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, (true) && true)))), (_GLF_IDENTITY((_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, (true) && true)))), ! (! ((_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, (true) && true)))))))) && true) || false), (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(injectionSwitch.x < injectionSwitch.y, false, true)), false || (bool(bvec3(injectionSwitch.x < injectionSwitch.y, false, true)))), (bool(bvec3(injectionSwitch.x < injectionSwitch.y, false, true))) && true)))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, ! (! (false))))), false || (_GLF_IDENTITY(bool(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0))) > injectionSwitch.y)), _GLF_IDENTITY(false, ! (! (false))))), (bool(bvec3(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-8.5)), bool(false)))), float(_GLF_FUZZED(-88.29)), bool(false))), (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(mix(float(injectionSwitch.y), float(_GLF_FUZZED(-8.5)), bool(false)), mix(float(_GLF_FUZZED(-5705.3572)), float(mix(float(injectionSwitch.y), float(_GLF_FUZZED(-8.5)), bool(false))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), float(_GLF_FUZZED(-88.29)), bool(false)))) / _GLF_ONE(1.0, injectionSwitch.y)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, ! (! (false)))))) && true)))), ! (! (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, ! (! (false))))), false || (_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, ! (! (false))))), (bool(bvec3(_GLF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, (true) && true)), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(true, (true) && true))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(true, (true) && true))), ! (! (! (! (_GLF_IDENTITY(true, (true) && true))))))), (! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(true, (true) && true))), ! (! (! (! (_GLF_IDENTITY(true, (true) && true)))))))) && true))))))), (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(mix(float(injectionSwitch.y), float(_GLF_FUZZED(-8.5)), bool(false)), min(mix(float(injectionSwitch.y), float(_GLF_FUZZED(-8.5)), bool(false)), _GLF_IDENTITY(mix(float(injectionSwitch.y), float(_GLF_FUZZED(-8.5)), bool(false)), 0.0 + (mix(float(injectionSwitch.y), float(_GLF_FUZZED(-8.5)), bool(false)))))))), float(_GLF_FUZZED(-88.29)), bool(false))))), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x4(injectionSwitch, log(1.0), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, abs(cos(0.0)), sqrt(0.0), determinant(mat2(1.0, determinant(mat3(0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 1.0))), transpose(transpose(mat3x4(injectionSwitch, log(1.0), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, abs(cos(0.0)), sqrt(0.0), determinant(mat2(1.0, determinant(mat3(0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 1.0)))))))).y)), _GLF_IDENTITY(false, ! (! (false)))))) && true)))))))) || false))) && true, bool(bvec3((_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY((_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, (true) && true)))), (_GLF_IDENTITY((_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, (true) && true)))), ! (! ((_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, (true) && true)))))))) && true) || false), (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(injectionSwitch.x < injectionSwitch.y, false, true)), false || (bool(bvec3(injectionSwitch.x < injectionSwitch.y, false, true)))), (bool(bvec3(injectionSwitch.x < injectionSwitch.y, false, true))) && true)))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, ! (! (false))))), false || (_GLF_IDENTITY(bool(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0))) > injectionSwitch.y)), _GLF_IDENTITY(false, ! (! (false))))), (bool(bvec3(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-8.5)), bool(false)))), float(_GLF_FUZZED(-88.29)), bool(false))), (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(mix(float(injectionSwitch.y), float(_GLF_FUZZED(-8.5)), bool(false)), mix(float(_GLF_FUZZED(-5705.3572)), float(mix(float(injectionSwitch.y), float(_GLF_FUZZED(-8.5)), bool(false))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), float(_GLF_FUZZED(-88.29)), bool(false)))) / _GLF_ONE(1.0, injectionSwitch.y)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, ! (! (false)))))) && true)))), ! (! (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, ! (! (false))))), false || (_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, ! (! (false))))), (bool(bvec3(_GLF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, (true) && true)), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(true, (true) && true))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(true, (true) && true))), ! (! (! (! (_GLF_IDENTITY(true, (true) && true))))))), (! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(true, (true) && true))), ! (! (! (! (_GLF_IDENTITY(true, (true) && true)))))))) && true))))))), (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(mix(float(injectionSwitch.y), float(_GLF_FUZZED(-8.5)), bool(false)), min(mix(float(injectionSwitch.y), float(_GLF_FUZZED(-8.5)), bool(false)), _GLF_IDENTITY(mix(float(injectionSwitch.y), float(_GLF_FUZZED(-8.5)), bool(false)), 0.0 + (mix(float(injectionSwitch.y), float(_GLF_FUZZED(-8.5)), bool(false)))))))), float(_GLF_FUZZED(-88.29)), bool(false))))), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x4(injectionSwitch, log(1.0), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, abs(cos(0.0)), sqrt(0.0), determinant(mat2(1.0, determinant(mat3(0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 1.0))), transpose(transpose(mat3x4(injectionSwitch, log(1.0), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, abs(cos(0.0)), sqrt(0.0), determinant(mat2(1.0, determinant(mat3(0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 1.0)))))))).y)), _GLF_IDENTITY(false, ! (! (false)))))) && true)))))))) || false))) && true, true, false))))))), true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, float(mat3(injectionSwitch.x, tan(sqrt(0.0)), 1.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 0.0))) < injectionSwitch.y)), _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (0) | 0)); _injected_loop_counter --)
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                          {
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) || false))
                              {
                               for(int _injected_loop_counter = (int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y) / 1.0, min(_GLF_IDENTITY((injectionSwitch.y) / 1.0, (true ? _GLF_IDENTITY((injectionSwitch.y) / _GLF_IDENTITY(1.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(smoothstep(5.8, 9.5, -2.9)) : _GLF_IDENTITY(1.0, 0.0 + (_GLF_IDENTITY(1.0, min(1.0, 1.0)))))), (true ? (injectionSwitch.y) / 1.0 : _GLF_FUZZED(8079.5219))) : _GLF_FUZZED(-892.704))), _GLF_IDENTITY((injectionSwitch.y) / 1.0, ((injectionSwitch.y) / 1.0) / 1.0))))), clamp(min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y) / 1.0, min(_GLF_IDENTITY((injectionSwitch.y) / 1.0, (true ? _GLF_IDENTITY((injectionSwitch.y) / _GLF_IDENTITY(1.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(smoothstep(5.8, 9.5, -2.9)) : _GLF_IDENTITY(1.0, 0.0 + (_GLF_IDENTITY(1.0, min(1.0, 1.0)))))), (true ? (injectionSwitch.y) / 1.0 : _GLF_FUZZED(8079.5219))) : _GLF_FUZZED(-892.704))), _GLF_IDENTITY((injectionSwitch.y) / 1.0, ((injectionSwitch.y) / 1.0) / 1.0))))), min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y) / 1.0, min(_GLF_IDENTITY((injectionSwitch.y) / 1.0, (true ? _GLF_IDENTITY((injectionSwitch.y) / _GLF_IDENTITY(1.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(smoothstep(5.8, 9.5, -2.9)) : _GLF_IDENTITY(1.0, 0.0 + (_GLF_IDENTITY(1.0, min(1.0, 1.0)))))), (true ? (injectionSwitch.y) / 1.0 : _GLF_FUZZED(8079.5219))) : _GLF_FUZZED(-892.704))), _GLF_IDENTITY((injectionSwitch.y) / 1.0, ((injectionSwitch.y) / 1.0) / 1.0))))), min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y) / 1.0, min(_GLF_IDENTITY((injectionSwitch.y) / 1.0, (true ? _GLF_IDENTITY((injectionSwitch.y) / _GLF_IDENTITY(1.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(smoothstep(5.8, 9.5, -2.9)) : _GLF_IDENTITY(1.0, 0.0 + (_GLF_IDENTITY(1.0, min(1.0, 1.0)))))), (true ? (injectionSwitch.y) / 1.0 : _GLF_FUZZED(8079.5219))) : _GLF_FUZZED(-892.704))), _GLF_IDENTITY((injectionSwitch.y) / 1.0, ((injectionSwitch.y) / 1.0) / 1.0)))))))))))) & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), mix(float(_GLF_FUZZED(2.6)), float(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))), bool(_GLF_IDENTITY(true, ! (! (true)))))))); _injected_loop_counter --)
                                {
                                 do
                                  {
                                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) >> 0))) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter ++)
                                    {
                                     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                                      {
                                       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
                                        {
                                         if(_GLF_WRAPPED_IF_FALSE(false))
                                          {
                                          }
                                         else
                                          {
                                           for(int _injected_loop_counter = (1 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                                            {
                                             do
                                              {
                                               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                                {
                                                 buf[GLF_merged4_0_1_8_1_1_17_2_1_11_3_1_12read_valsubgroup_local_idvirtual_gidworkgroup_id.z] = uint(subgroupAllEqual(GLF_merged4_0_1_8_1_1_17_2_1_11_3_1_12read_valsubgroup_local_idvirtual_gidworkgroup_id.x));
                                                }
                                               else
                                                {
                                                }
                                              }
                                             while(_GLF_WRAPPED_LOOP(false));
                                            }
                                          }
                                        }
                                       else
                                        {
                                        }
                                      }
                                    }
                                  }
                                 while(_GLF_WRAPPED_LOOP(false));
                                }
                              }
                             else
                              {
                              }
                            }
                          }
                        }
                       else
                        {
                        }
                      }
                    }
                  }
                }
               else
                {
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         else
          {
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
  }
 else
  {
  }
}
