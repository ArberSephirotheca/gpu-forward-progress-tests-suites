#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_0 {
 mat2 _f0;
 uint num_workgroup;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), mat2(1.0) * (mat2(1.0) * (injectionSwitch)))).x, min(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-2.0))), mix(float(_GLF_FUZZED(4.3)), float(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-2.0)))), bool(true))))) > injectionSwitch.y))), _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false))))) || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, true)))))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 uint subgroup_id = gl_SubgroupID;
uint subgroup_size = 16;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 _GLF_struct_0 _GLF_struct_replacement_0 = _GLF_struct_0(mat2(1.0), _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups.x, clamp(gl_NumWorkGroups.x, gl_NumWorkGroups.x, gl_NumWorkGroups.x))) | (gl_NumWorkGroups.x)), max(gl_NumWorkGroups.x, _GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups.x, clamp(gl_NumWorkGroups.x, _GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | (gl_NumWorkGroups)).x, _GLF_IDENTITY(gl_NumWorkGroups.x, (true ? _GLF_IDENTITY(gl_NumWorkGroups.x, (true ? _GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups, (false ? _GLF_FUZZED(uvec3(124153u, 135116u, 146767u)) : _GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) - uvec3(0u, 0u, 0u)))).x) ^ 0u) : _GLF_FUZZED(784u))) : _GLF_FUZZED(bitfieldExtract(write_val, -21984, 99784))))))) | 0u))));
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (false))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, length(vec3(0.0, 0.0, 0.0)), 1.0, tan(0.0), 0.0))).x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 for(int _injected_loop_counter = ((int(_GLF_ONE(_GLF_IDENTITY(1.0, (1.0) + 0.0), injectionSwitch.y)) << _GLF_IDENTITY(_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), _GLF_IDENTITY(max(int(0), int(0)), (false ? _GLF_IDENTITY(_GLF_FUZZED(-51026), 0 ^ (_GLF_FUZZED(-51026))) : max(int(_GLF_IDENTITY(0, int(ivec4(0, 1, 0, 0)))), int(0)))))), (_GLF_IDENTITY(true ? _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), max(int(0), _GLF_IDENTITY(int(0), max(_GLF_IDENTITY(int(0), (-52279 & 0) ^ (int(0))), int(0)))))) : _GLF_FUZZED(-46561), 1 * (_GLF_IDENTITY(true ? _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), max(int(0), _GLF_IDENTITY(int(0), max(_GLF_IDENTITY(int(0), (-52279 & 0) ^ (int(0))), int(0)))))) : _GLF_FUZZED(-46561), min(true ? _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), max(int(0), _GLF_IDENTITY(int(0), max(_GLF_IDENTITY(int(0), (-52279 & 0) ^ (int(0))), int(0)))))) : _GLF_FUZZED(-46561), true ? _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), max(int(0), _GLF_IDENTITY(int(0), max(_GLF_IDENTITY(int(0), (-52279 & 0) ^ (int(0))), int(0)))))) : _GLF_FUZZED(-46561)))))))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) && true))
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec2(_GLF_IDENTITY(! (false), (! (false)) && true), true))))), (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED((- 0.9))), bool(false)))))));
      }
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false)))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! _GLF_IDENTITY((false), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY((false), false || ((false))))), ! (! (bool(bool(_GLF_IDENTITY((false), false || ((false))))))))), bool(bool(! (false))))))))
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), false || (_GLF_WRAPPED_IF_FALSE(false))))
      {
      }
     else
      {
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), false || (_GLF_IDENTITY(false, (false) || false)))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))), ! (! (! (_GLF_DEAD(false))))))))
  {
   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(_GLF_IDENTITY(0, ~ (~ (0)))), clamp(int(0), int(0), _GLF_IDENTITY(int(0), int(ivec4(int(0), 0, 0, 1))))))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) | 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), true && (_GLF_WRAPPED_IF_TRUE(true))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
              barrier();
            }
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(! (false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (! (false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (! (_GLF_IDENTITY(! (false), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(5.7, -632.931)) : _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(488.928, -8.9)))))))).x > injectionSwitch.y)) || (! (false)))))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(! (_GLF_IDENTITY(! (false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (! (false)))), _GLF_IDENTITY(bool(bvec2(! (_GLF_IDENTITY(! (false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (! (false)))), false)), (bool(bvec2(! (_GLF_IDENTITY(! (false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (! (false)))), false))) && true)), true, true, true)), true && (bool(bvec4(_GLF_IDENTITY(! (_GLF_IDENTITY(! (false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (! (false)))), _GLF_IDENTITY(bool(bvec2(! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (! (false)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (! (false)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (! (false))) || false))))), false)), (bool(bvec2(! _GLF_IDENTITY((_GLF_IDENTITY(! (false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || _GLF_IDENTITY((! (false)), false || ((! (false)))))), bool(bvec4((_GLF_IDENTITY(! (false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || _GLF_IDENTITY((! (false)), false || ((! (false)))))), false, false, true))), false))) && _GLF_IDENTITY(true, ! (! (true))))), true, true, true))))))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, false, false)), false || (bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, false, false)))))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         barrier();
        }
       else
        {
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) && true))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), ! (! (bool(bvec3((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))), bool(bool(_GLF_IDENTITY(bool(bvec3((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), ! (! (bool(bvec3((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))))))), (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))) * 1.0))) || (! _GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - sin(vec2(0.0, 0.0))).x > injectionSwitch.y)), ! (! (((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - sin(vec2(0.0, 0.0))), mix(vec2(_GLF_FUZZED(-4.3), _GLF_FUZZED(-0.1)), vec2((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - sin(vec2(0.0, 0.0))))[0], (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - sin(vec2(0.0, 0.0))))[1]), bvec2(true, true))).x > injectionSwitch.y)))))))))), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, (true) && true)))))))) || false), (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), bool(bvec4(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3x2(injectionSwitch.y, 1.0, exp(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, log(1.0), 1.0)), max(float(mat3x2(injectionSwitch.y, 1.0, exp(_GLF_ZERO(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(3.5)), float(0.0), bool(true))), 0.0)), 0.0)), injectionSwitch.x)), 0.0, log(1.0), 1.0)), _GLF_IDENTITY(float(mat3x2(injectionSwitch.y, 1.0, exp(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, log(1.0), 1.0)), clamp(float(mat3x2(injectionSwitch.y, 1.0, exp(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, log(1.0), 1.0)), float(mat3x2(injectionSwitch.y, 1.0, exp(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, log(1.0), 1.0)), float(mat3x2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y, 1.0, exp(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, log(1.0), _GLF_IDENTITY(1.0, float(mat4(1.0, length(0.0), 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, cos(0.0), 1.0, 1.0, 0.0, 0.0)))))))))), true, false, true))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), bool(bvec4(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3x2(injectionSwitch.y, 1.0, exp(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, log(1.0), 1.0)), max(float(mat3x2(injectionSwitch.y, 1.0, exp(_GLF_ZERO(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(3.5)), float(0.0), bool(true))), 0.0)), 0.0)), injectionSwitch.x)), 0.0, log(1.0), 1.0)), _GLF_IDENTITY(float(mat3x2(injectionSwitch.y, 1.0, exp(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, log(1.0), 1.0)), clamp(float(mat3x2(injectionSwitch.y, 1.0, exp(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, log(1.0), 1.0)), float(mat3x2(injectionSwitch.y, 1.0, exp(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, log(1.0), 1.0)), float(mat3x2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y, 1.0, exp(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, log(1.0), _GLF_IDENTITY(1.0, float(mat4(1.0, length(0.0), 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, cos(0.0), 1.0, 1.0, 0.0, 0.0)))))))))), true, false, true))))))))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), bool(bvec4(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3x2(injectionSwitch.y, 1.0, exp(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, log(1.0), 1.0)), max(float(mat3x2(injectionSwitch.y, 1.0, exp(_GLF_ZERO(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(3.5)), float(0.0), bool(true))), 0.0)), 0.0)), injectionSwitch.x)), 0.0, log(1.0), 1.0)), _GLF_IDENTITY(float(mat3x2(injectionSwitch.y, 1.0, exp(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, log(1.0), 1.0)), clamp(float(mat3x2(injectionSwitch.y, 1.0, exp(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, log(1.0), 1.0)), float(mat3x2(injectionSwitch.y, 1.0, exp(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, log(1.0), 1.0)), float(mat3x2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y, 1.0, exp(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, log(1.0), _GLF_IDENTITY(1.0, float(mat4(1.0, length(0.0), 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, cos(0.0), 1.0, 1.0, 0.0, 0.0)))))))))), true, false, true))))))))), true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), bool(bvec4(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3x2(injectionSwitch.y, 1.0, exp(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, log(1.0), 1.0)), max(float(mat3x2(injectionSwitch.y, 1.0, exp(_GLF_ZERO(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(3.5)), float(0.0), bool(true))), 0.0)), 0.0)), injectionSwitch.x)), 0.0, log(1.0), 1.0)), _GLF_IDENTITY(float(mat3x2(injectionSwitch.y, 1.0, exp(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, log(1.0), 1.0)), clamp(float(mat3x2(injectionSwitch.y, 1.0, exp(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, log(1.0), 1.0)), float(mat3x2(injectionSwitch.y, 1.0, exp(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, log(1.0), 1.0)), float(mat3x2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y, 1.0, exp(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, log(1.0), _GLF_IDENTITY(1.0, float(mat4(1.0, length(0.0), 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, cos(0.0), 1.0, 1.0, 0.0, 0.0)))))))))), true, false, true))))))))))), true, false, false)))) || false)), ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), bool(bvec4(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3x2(injectionSwitch.y, 1.0, _GLF_IDENTITY(exp(_GLF_ZERO(0.0, injectionSwitch.x)), (exp(_GLF_ZERO(0.0, injectionSwitch.x))) - 0.0), 0.0, log(1.0), 1.0)), max(float(mat3x2(injectionSwitch.y, 1.0, exp(_GLF_ZERO(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(3.5)), float(0.0), bool(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(true)), bool(bvec2(bool(bool(true)), false))))))), 0.0)), 0.0)), injectionSwitch.x)), 0.0, log(1.0), 1.0)), _GLF_IDENTITY(float(mat3x2(injectionSwitch.y, 1.0, exp(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, log(1.0), 1.0)), clamp(float(mat3x2(injectionSwitch.y, 1.0, exp(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, log(1.0), 1.0)), float(mat3x2(injectionSwitch.y, 1.0, exp(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(vec4(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 1.0)))))), _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), log(1.0), 1.0)), float(mat3x2(injectionSwitch.y, 1.0, exp(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, log(1.0), _GLF_IDENTITY(1.0, float(mat4(1.0, length(0.0), 0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)))), _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), _GLF_IDENTITY(0.0, min(0.0, 0.0)))), 0.0, 0.0, 0.0, 1.0, cos(0.0), 1.0, 1.0, 0.0, 0.0)))))))))), true, false, true))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), bool(bvec4(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3x2(injectionSwitch.y, 1.0, _GLF_IDENTITY(exp(_GLF_ZERO(0.0, injectionSwitch.x)), (exp(_GLF_ZERO(0.0, injectionSwitch.x))) - 0.0), 0.0, log(1.0), 1.0)), max(float(mat3x2(injectionSwitch.y, 1.0, exp(_GLF_ZERO(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(3.5)), float(0.0), bool(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(true)), bool(bvec2(bool(bool(true)), false))))))), 0.0)), 0.0)), injectionSwitch.x)), 0.0, log(1.0), 1.0)), _GLF_IDENTITY(float(mat3x2(injectionSwitch.y, 1.0, exp(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, log(1.0), 1.0)), clamp(float(mat3x2(injectionSwitch.y, 1.0, exp(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, log(1.0), 1.0)), float(mat3x2(injectionSwitch.y, 1.0, exp(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(vec4(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 1.0)))))), _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), log(1.0), 1.0)), float(mat3x2(injectionSwitch.y, 1.0, exp(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, log(1.0), _GLF_IDENTITY(1.0, float(mat4(1.0, length(0.0), 0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)))), _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), _GLF_IDENTITY(0.0, min(0.0, 0.0)))), 0.0, 0.0, 0.0, 1.0, cos(0.0), 1.0, 1.0, 0.0, 0.0)))))))))), true, false, true))))))))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), bool(bvec4(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3x2(injectionSwitch.y, 1.0, _GLF_IDENTITY(exp(_GLF_ZERO(0.0, injectionSwitch.x)), (exp(_GLF_ZERO(0.0, injectionSwitch.x))) - 0.0), 0.0, log(1.0), 1.0)), max(float(mat3x2(injectionSwitch.y, 1.0, exp(_GLF_ZERO(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(_GLF_FUZZED(3.5), (_GLF_FUZZED(3.5)) / _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))))), float(0.0), bool(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(true)), bool(bvec2(bool(bool(true)), false))))))), 0.0)), 0.0)), injectionSwitch.x)), 0.0, log(1.0), 1.0)), _GLF_IDENTITY(float(mat3x2(injectionSwitch.y, 1.0, exp(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), max(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))), 0.0, log(1.0), 1.0)), clamp(float(mat3x2(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(mat3x2(injectionSwitch.y, 1.0, 0.0, 0.0, 1.0, 0.0)))) / 1.0), 1.0, exp(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, log(1.0), 1.0)), float(mat3x2(injectionSwitch.y, 1.0, exp(_GLF_IDENTITY(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(log(vec2(-7.4, -55.67))))).x), min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-5142.5695) : injectionSwitch.x))), float(vec4(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 1.0)))))), _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), log(1.0), 1.0)), float(mat3x2(injectionSwitch.y, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)))), exp(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, log(1.0), _GLF_IDENTITY(1.0, float(mat4(1.0, length(0.0), 0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)))), _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), _GLF_IDENTITY(0.0, min(0.0, 0.0)))), 0.0, 0.0, 0.0, 1.0, cos(0.0), 1.0, 1.0, 0.0, 0.0)))))))))), true, false, true)))))))))) && true)) && true))) || false)), (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! _GLF_IDENTITY(_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))), ((! ((injectionSwitch.x > injectionSwitch.y)))) && true)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(! ((injectionSwitch.x > injectionSwitch.y)), true, true)), false || (bool(bvec3(! ((injectionSwitch.x > injectionSwitch.y)), true, true)))))), ! (! ((! ((injectionSwitch.x > injectionSwitch.y))))))), true && (! (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))), ! _GLF_IDENTITY(_GLF_IDENTITY((! ((! ((injectionSwitch.x > injectionSwitch.y))))), false || (_GLF_IDENTITY((! ((! ((injectionSwitch.x > injectionSwitch.y))))), ! (! ((! ((! ((injectionSwitch.x > injectionSwitch.y)))))))))), _GLF_IDENTITY(bool(bvec2((! ((! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(7.3)))))))), true)), (bool(bvec2((! ((! ((injectionSwitch.x > injectionSwitch.y))))), true))) || false)))))))))), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(true, true && (true)), true)))) || false)) || false), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), _GLF_IDENTITY(bool(bvec3((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), ! (! (bool(bvec3((_GLF_IDENTITY(false, ! (! (false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))))), (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (! ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - sin(vec2(0.0, 0.0))).x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - sin(vec2(0.0, 0.0))).x > injectionSwitch.y) || false)))))))), bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)), bvec3(bvec3(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)))))))))) || false), bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3((false), _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec2(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec3((injectionSwitch.x < injectionSwitch.y), true, true))), false)))))), true), bvec3(bvec4(bvec3((false), _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec2(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec3((injectionSwitch.x < injectionSwitch.y), true, true))), false)))))), true), false)))), ! (! (bool(bvec3((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))))), (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (! ((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - sin(vec2(0.0, 0.0))).x > injectionSwitch.y))))))), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)))) || false), true, false))), (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, 1.0 * (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(0.7))))))), max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)))).y, injectionSwitch.y)), bool(bvec4(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-104.625, 6942.9849)))).y, _GLF_IDENTITY(float(mat3x2(injectionSwitch.y, 1.0, exp(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, log(1.0), 1.0)), _GLF_IDENTITY(max(float(mat3x2(injectionSwitch.y, 1.0, exp(_GLF_ZERO(_GLF_IDENTITY(_GLF_IDENTITY(0.0, max(0.0, 0.0)), min(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(3.5)), float(0.0), bool(true))), 0.0)), 0.0)), _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))), 0.0, log(1.0), 1.0)), _GLF_IDENTITY(float(mat3x2(injectionSwitch.y, 1.0, exp(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, log(1.0), _GLF_IDENTITY(1.0, float(vec2(1.0, 0.0))))), clamp(float(mat3x2(injectionSwitch.y, 1.0, exp(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, log(1.0), 1.0)), float(mat3x2(injectionSwitch.y, 1.0, exp(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, log(1.0), 1.0)), float(mat3x2(injectionSwitch.y, 1.0, exp(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, log(1.0), _GLF_IDENTITY(1.0, float(mat4(1.0, length(0.0), 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, cos(0.0), 1.0, 1.0, 0.0, 0.0)))))))), (true ? max(float(mat3x2(injectionSwitch.y, 1.0, _GLF_IDENTITY(exp(_GLF_ZERO(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(3.5)), float(0.0), bool(true))), 0.0)), 0.0)), injectionSwitch.x)), float(float(exp(_GLF_ZERO(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(3.5)), float(_GLF_IDENTITY(0.0, max(0.0, 0.0))), bool(true))), 0.0)), 0.0)), injectionSwitch.x))))), _GLF_IDENTITY(0.0, determinant(mat2(0.0, 0.0, 1.0, 0.0)) + (_GLF_IDENTITY(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat4x3(0.0, 0.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, log(1.0), 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0)), (float(mat4x3(0.0, 0.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, log(1.0), 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0))) + 0.0)), float(mat4x2(0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0))))), log(1.0), 1.0)), _GLF_IDENTITY(float(mat3x2(injectionSwitch.y, 1.0, exp(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, log(1.0), 1.0)), _GLF_IDENTITY(clamp(float(mat3x2(injectionSwitch.y, 1.0, exp(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, log(1.0), 1.0)), float(mat3x2(injectionSwitch.y, 1.0, exp(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, log(1.0), 1.0)), float(mat3x2(injectionSwitch.y, 1.0, _GLF_IDENTITY(exp(_GLF_ZERO(0.0, injectionSwitch.x)), mix(float(_GLF_FUZZED(9.6)), float(exp(_GLF_ZERO(0.0, injectionSwitch.x))), bool(true))), 0.0, log(1.0), _GLF_IDENTITY(1.0, float(mat4(1.0, length(0.0), 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, cos(0.0), 1.0, 1.0, 0.0, 0.0)))))), (clamp(float(mat3x2(injectionSwitch.y, 1.0, exp(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, log(_GLF_IDENTITY(1.0, (1.0) * cos(0.0))), 1.0)), float(mat3x2(injectionSwitch.y, 1.0, exp(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, log(1.0), 1.0)), float(mat3x2(injectionSwitch.y, 1.0, exp(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, float(mat3x2(0.0, 0.0, 0.0, 1.0, 1.0, 1.0))), _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(exp2(-3712.1832)) : 0.0)))), log(1.0), _GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat4(1.0, length(0.0), 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, cos(0.0), 1.0, 1.0, 0.0, 0.0), (_GLF_IDENTITY(mat4(1.0, length(0.0), 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, cos(0.0), 1.0, 1.0, 0.0, 0.0), _GLF_IDENTITY((mat4(1.0, length(0.0), 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, cos(0.0), 1.0, 1.0, 0.0, 0.0)) - mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0), (false ? _GLF_FUZZED(mat4(-304.555, 7054.2801, 2.5, 1.0, 790.940, -5.6, -34.13, 8.1, 2.8, 4.4, -8770.8440, -988.242, 940.073, -780.515, -0.1, 9.1)) : (mat4(1.0, length(0.0), 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, cos(0.0), 1.0, 1.0, 0.0, 0.0)) - mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))) - mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))))) * 1.0))) : _GLF_FUZZED(9139.1788))))), true, false, true)))))))))), ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(vec3(injectionSwitch.x, 0.0, cos(0.0)))), min(_GLF_IDENTITY(injectionSwitch.x, float(vec3(injectionSwitch.x, 0.0, cos(0.0)))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(vec3(injectionSwitch.x, 0.0, cos(0.0)))), max(_GLF_IDENTITY(injectionSwitch.x, float(vec3(injectionSwitch.x, 0.0, cos(0.0)))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(vec3(injectionSwitch.x, 0.0, cos(0.0)))), clamp(_GLF_IDENTITY(injectionSwitch.x, float(vec3(injectionSwitch.x, 0.0, cos(0.0)))), _GLF_IDENTITY(injectionSwitch.x, float(vec3(injectionSwitch.x, 0.0, cos(0.0)))), _GLF_IDENTITY(injectionSwitch.x, float(vec3(injectionSwitch.x, 0.0, cos(0.0)))))))))) > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), bool(bvec4(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3x2(injectionSwitch.y, 1.0, exp(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, log(1.0), 1.0)), max(float(mat3x2(injectionSwitch.y, 1.0, exp(_GLF_ZERO(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(3.5)), float(0.0), bool(true))), 0.0)), 0.0)), injectionSwitch.x)), 0.0, log(1.0), 1.0)), _GLF_IDENTITY(float(mat3x2(injectionSwitch.y, 1.0, exp(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, log(1.0), 1.0)), clamp(float(mat3x2(injectionSwitch.y, 1.0, exp(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, log(1.0), 1.0)), float(mat3x2(injectionSwitch.y, 1.0, exp(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, log(1.0), 1.0)), float(mat3x2(injectionSwitch.y, 1.0, exp(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, log(1.0), _GLF_IDENTITY(1.0, float(mat4(1.0, length(0.0), 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, cos(0.0), 1.0, 1.0, 0.0, 0.0)))))))))), true, false, true))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), bool(bvec4(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3x2(injectionSwitch.y, 1.0, exp(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, log(1.0), 1.0)), max(float(mat3x2(injectionSwitch.y, 1.0, exp(_GLF_ZERO(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(3.5)), float(0.0), bool(true))), 0.0)), 0.0)), injectionSwitch.x)), 0.0, log(1.0), 1.0)), _GLF_IDENTITY(float(mat3x2(injectionSwitch.y, 1.0, exp(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, log(1.0), 1.0)), clamp(float(mat3x2(injectionSwitch.y, 1.0, exp(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, log(1.0), 1.0)), float(mat3x2(injectionSwitch.y, 1.0, exp(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, log(1.0), 1.0)), float(mat3x2(injectionSwitch.y, 1.0, exp(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, log(1.0), _GLF_IDENTITY(1.0, float(mat4(1.0, length(0.0), 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, cos(0.0), 1.0, 1.0, 0.0, 0.0)))))))))), true, false, true))), true && (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), bool(bvec4(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3x2(injectionSwitch.y, 1.0, exp(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, log(1.0), 1.0)), max(float(mat3x2(injectionSwitch.y, 1.0, exp(_GLF_ZERO(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(3.5)), float(0.0), bool(true))), 0.0)), 0.0)), injectionSwitch.x)), 0.0, log(1.0), 1.0)), _GLF_IDENTITY(float(mat3x2(injectionSwitch.y, 1.0, exp(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, log(1.0), 1.0)), clamp(float(mat3x2(injectionSwitch.y, 1.0, exp(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, log(1.0), 1.0)), float(mat3x2(injectionSwitch.y, 1.0, exp(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, log(1.0), 1.0)), float(mat3x2(injectionSwitch.y, 1.0, exp(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, log(1.0), _GLF_IDENTITY(1.0, float(mat4(1.0, length(0.0), 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, cos(0.0), 1.0, 1.0, 0.0, 0.0)))))))))), true, false, true))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), ! (! (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))) || false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), bool(bvec4(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3x2(injectionSwitch.y, 1.0, exp(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, log(1.0), 1.0)), max(float(mat3x2(injectionSwitch.y, 1.0, exp(_GLF_ZERO(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(3.5)), float(0.0), bool(true))), 0.0)), 0.0)), injectionSwitch.x)), 0.0, log(1.0), 1.0)), _GLF_IDENTITY(float(mat3x2(injectionSwitch.y, 1.0, exp(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, log(1.0), 1.0)), clamp(float(mat3x2(injectionSwitch.y, 1.0, exp(_GLF_ZERO(_GLF_IDENTITY(0.0, 1.0 * (0.0)), _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(5.6) : injectionSwitch.x))) * 1.0))), 0.0, log(1.0), 1.0)), float(mat3x2(injectionSwitch.y, 1.0, exp(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, log(1.0), 1.0)), float(mat3x2(injectionSwitch.y, 1.0, exp(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, log(1.0), _GLF_IDENTITY(1.0, float(mat4(1.0, length(0.0), 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, cos(0.0), 1.0, 1.0, 0.0, 0.0)))))))))), true, false, true)))))))))))))))))) || false)), (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, true))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! _GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))), ! (! ((! ((injectionSwitch.x > injectionSwitch.y)))))))), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(true, true && (true)), true)))) || false)) || false), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), true && _GLF_IDENTITY(_GLF_IDENTITY((false), _GLF_IDENTITY(bool(bvec3((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), ! (! (bool(_GLF_IDENTITY(bvec3((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec3(bvec4(bvec3((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), false)))))))), (_GLF_IDENTITY(_GLF_IDENTITY((false), _GLF_IDENTITY(bool(bvec3((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), ! (! (bool(_GLF_IDENTITY(bvec3((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec3(bvec4(bvec3((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), false)))))))), (_GLF_IDENTITY((false), _GLF_IDENTITY(bool(bvec3((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), ! (! (bool(_GLF_IDENTITY(bvec3((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec3(bvec4(bvec3((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), false))))))))) || false)) || false)), (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (! ((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - sin(vec2(0.0, 0.0))).x > injectionSwitch.y))))))), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)))) || _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))), (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-6.7), _GLF_FUZZED(vec3(-4.5, -91.58, -28.34).g)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y)), bool(bvec4(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3x2(injectionSwitch.y, 1.0, exp(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, log(1.0), 1.0)), max(float(mat3x2(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(5.6))), 1.0, exp(_GLF_ZERO(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(3.5)), float(0.0), bool(true))), 0.0)), 0.0)), injectionSwitch.x)), _GLF_IDENTITY(0.0, float(mat4x2(0.0, 0.0, length(_GLF_ZERO(0.0, injectionSwitch.x)), 1.0, 0.0, 0.0, 0.0, 1.0))), log(1.0), 1.0)), _GLF_IDENTITY(float(mat3x2(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0), injectionSwitch.y)), 1.0, exp(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, log(1.0), _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(vec4(1.0, 1.0, exp(0.0), 1.0)), (float(vec4(1.0, 1.0, exp(0.0), 1.0))) / 1.0)))), clamp(float(mat3x2(injectionSwitch.y, 1.0, exp(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, log(1.0), _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(4603.2634) : 1.0)))), float(mat3x2(injectionSwitch.y, 1.0, exp(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, log(1.0), 1.0)), float(mat3x2(injectionSwitch.y, 1.0, exp(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, log(1.0), _GLF_IDENTITY(1.0, float(mat4(1.0, length(_GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0))))), 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, cos(0.0), 1.0, 1.0, 0.0, 0.0)))))))))), true, false, true)))))), true && (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), bool(bvec4(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(float(mat3x2(injectionSwitch.y, 1.0, exp(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, log(1.0), 1.0)), min(float(mat3x2(injectionSwitch.y, 1.0, exp(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, log(1.0), 1.0)), _GLF_IDENTITY(float(mat3x2(injectionSwitch.y, 1.0, exp(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, log(1.0), 1.0)), clamp(float(mat3x2(injectionSwitch.y, 1.0, exp(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, log(1.0), 1.0)), float(mat3x2(injectionSwitch.y, 1.0, exp(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, log(1.0), 1.0)), float(mat3x2(injectionSwitch.y, 1.0, exp(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, log(1.0), 1.0)))))), max(float(mat3x2(injectionSwitch.y, 1.0, exp(_GLF_ZERO(_GLF_IDENTITY(0.0, _GLF_IDENTITY(min(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(3.5)), float(0.0), bool(true))), 0.0)), 0.0), clamp(_GLF_IDENTITY(min(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(3.5)), float(0.0), bool(true))), 0.0)), 0.0), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-1.6) : min(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(3.5)), float(0.0), bool(true))), 0.0)), 0.0))), min(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(3.5)), float(0.0), bool(true))), 0.0)), 0.0), min(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(3.5)), float(0.0), bool(true))), 0.0)), 0.0)))), injectionSwitch.x)), 0.0, log(1.0), 1.0)), _GLF_IDENTITY(float(mat3x2(injectionSwitch.y, 1.0, exp(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, log(1.0), _GLF_IDENTITY(1.0, float(mat2x4(_GLF_IDENTITY(1.0, float(mat3x2(1.0, sqrt(1.0), 0.0, 0.0, 0.0, 1.0))), 1.0, 0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), 1.0, cos(0.0), 1.0, 1.0))))), clamp(float(mat3x2(injectionSwitch.y, 1.0, exp(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, log(1.0), 1.0)), float(mat3x2(injectionSwitch.y, 1.0, exp(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, log(1.0), 1.0)), float(mat3x2(injectionSwitch.y, 1.0, exp(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, log(1.0), _GLF_IDENTITY(1.0, float(mat4(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(3.5) : _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(9.0)), float(_GLF_IDENTITY(1.0, (1.0) * 1.0)), bool(true))))), length(0.0), 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0)), cos(0.0), 1.0, 1.0, 0.0, 0.0)))))))))), true, false, true)))))), true && (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(60.73)), bool(false))) > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], (true ? (injectionSwitch)[0] : _GLF_FUZZED(6.1))), (injectionSwitch)[1]), vec2(_GLF_FUZZED(7.2), _GLF_FUZZED(_GLF_IDENTITY(vec3(_GLF_IDENTITY(5.4, mix(float(_GLF_FUZZED(-602.841)), float(5.4), bool(true))), -7466.4359, 1.5), clamp(_GLF_IDENTITY(vec3(_GLF_IDENTITY(5.4, mix(float(_GLF_FUZZED(-602.841)), float(5.4), bool(true))), -7466.4359, 1.5), (vec3(_GLF_IDENTITY(5.4, mix(float(_GLF_FUZZED(-602.841)), float(5.4), bool(true))), -7466.4359, 1.5)) - vec3(0.0, 0.0, 0.0)), vec3(_GLF_IDENTITY(5.4, mix(float(_GLF_FUZZED(-602.841)), float(5.4), bool(true))), -7466.4359, 1.5), vec3(_GLF_IDENTITY(5.4, mix(float(_GLF_FUZZED(-602.841)), float(5.4), bool(true))), -7466.4359, 1.5))).p)), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))).y)), bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3x2(injectionSwitch.y, 1.0, exp(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x)), 0.0, log(1.0), 1.0)), max(float(mat3x2(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], float(mat4(injectionSwitch[0], 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0))), injectionSwitch[1])))).y, 1.0, exp(_GLF_ZERO(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(3.5)), _GLF_IDENTITY(float(0.0), 1.0 * (_GLF_IDENTITY(float(0.0), 0.0 + (float(0.0))))), bool(true))), 0.0)), 0.0)), injectionSwitch.x)), 0.0, log(1.0), 1.0)), _GLF_IDENTITY(float(mat3x2(injectionSwitch.y, 1.0, exp(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, log(1.0), 1.0)), clamp(float(mat3x2(injectionSwitch.y, 1.0, exp(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, log(1.0), 1.0)), float(mat3x2(injectionSwitch.y, 1.0, exp(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, log(1.0), 1.0)), float(mat3x2(injectionSwitch.y, 1.0, exp(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, log(1.0), _GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat4(1.0, length(0.0), 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, cos(0.0), 1.0, 1.0, 0.0, 0.0), (mat4(1.0, length(0.0), 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, cos(0.0), 1.0, 1.0, 0.0, 0.0)) / mat4(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)))))))))))), bool(bool(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3x2(injectionSwitch.y, 1.0, exp(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x)), 0.0, log(1.0), 1.0)), max(float(mat3x2(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], float(mat4(injectionSwitch[0], 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0))), injectionSwitch[1])))).y, 1.0, exp(_GLF_ZERO(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(3.5)), _GLF_IDENTITY(float(0.0), 1.0 * (_GLF_IDENTITY(float(0.0), 0.0 + (float(0.0))))), bool(true))), 0.0)), 0.0)), injectionSwitch.x)), 0.0, log(1.0), 1.0)), _GLF_IDENTITY(float(mat3x2(injectionSwitch.y, 1.0, exp(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, log(1.0), 1.0)), clamp(float(mat3x2(injectionSwitch.y, 1.0, exp(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, log(1.0), 1.0)), float(mat3x2(injectionSwitch.y, 1.0, exp(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, log(1.0), 1.0)), float(mat3x2(injectionSwitch.y, 1.0, exp(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, log(1.0), _GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat4(1.0, length(0.0), 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, cos(0.0), 1.0, 1.0, 0.0, 0.0), (mat4(1.0, length(0.0), 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, cos(0.0), 1.0, 1.0, 0.0, 0.0)) / mat4(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)))))))))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3x2(injectionSwitch.y, 1.0, exp(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x)), 0.0, log(1.0), 1.0)), max(float(mat3x2(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], float(mat4(injectionSwitch[0], 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0))), injectionSwitch[1])))).y, 1.0, exp(_GLF_ZERO(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(3.5)), _GLF_IDENTITY(float(0.0), 1.0 * (_GLF_IDENTITY(float(0.0), 0.0 + (float(0.0))))), bool(true))), 0.0)), 0.0)), injectionSwitch.x)), 0.0, log(1.0), 1.0)), _GLF_IDENTITY(float(mat3x2(injectionSwitch.y, 1.0, exp(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, log(1.0), 1.0)), clamp(float(mat3x2(injectionSwitch.y, 1.0, exp(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, log(1.0), 1.0)), float(mat3x2(injectionSwitch.y, 1.0, exp(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, log(1.0), 1.0)), float(mat3x2(injectionSwitch.y, 1.0, exp(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, log(1.0), _GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat4(1.0, length(0.0), 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, cos(0.0), 1.0, 1.0, 0.0, 0.0), (mat4(1.0, length(0.0), 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, cos(0.0), 1.0, 1.0, 0.0, 0.0)) / mat4(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))))))))))))) || false)))), true, false, true)))))))))))))), ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false), ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-1670.6458), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch)[0], (true ? (injectionSwitch)[0] : _GLF_FUZZED((+ -3858.6274)))), _GLF_FUZZED(-2947.4369)), bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).y, injectionSwitch.y)), bool(bvec4(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3x2(injectionSwitch.y, 1.0, exp(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, log(1.0), 1.0)), _GLF_IDENTITY(max(float(mat3x2(injectionSwitch.y, 1.0, exp(_GLF_ZERO(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(3.5)), float(0.0), _GLF_IDENTITY(bool(true), ! (! (_GLF_IDENTITY(bool(true), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(bool(true), true && (bool(true))), false, true)), false || (bool(bvec3(_GLF_IDENTITY(bool(true), true && (bool(true))), false, true)))))))))), 0.0)), 0.0)), injectionSwitch.x)), 0.0, log(1.0), 1.0)), _GLF_IDENTITY(float(mat3x2(injectionSwitch.y, 1.0, exp(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, log(1.0), 1.0)), clamp(float(mat3x2(injectionSwitch.y, 1.0, exp(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, log(1.0), 1.0)), float(mat3x2(injectionSwitch.y, 1.0, exp(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, log(1.0), 1.0)), float(mat3x2(injectionSwitch.y, 1.0, exp(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, log(1.0), _GLF_IDENTITY(1.0, float(mat4(1.0, length(0.0), 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(0.0, 0.0 + (_GLF_IDENTITY(0.0, (0.0) - 0.0))), 0.0, 0.0, 0.0, 1.0, cos(0.0), 1.0, 1.0, 0.0, 0.0)))))))), min(max(float(mat3x2(injectionSwitch.y, 1.0, exp(_GLF_ZERO(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(3.5)), float(0.0), _GLF_IDENTITY(bool(true), ! (! (_GLF_IDENTITY(bool(true), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(bool(true), true && (bool(true))), false, true)), false || (bool(bvec3(_GLF_IDENTITY(bool(true), true && (bool(true))), false, true)))))))))), 0.0)), 0.0)), injectionSwitch.x)), 0.0, log(1.0), 1.0)), _GLF_IDENTITY(float(mat3x2(injectionSwitch.y, 1.0, exp(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, log(1.0), 1.0)), clamp(float(mat3x2(injectionSwitch.y, 1.0, exp(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, log(1.0), 1.0)), float(mat3x2(injectionSwitch.y, 1.0, exp(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, log(1.0), 1.0)), float(mat3x2(injectionSwitch.y, 1.0, exp(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, log(1.0), _GLF_IDENTITY(1.0, float(mat4(1.0, length(0.0), 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(0.0, 0.0 + (_GLF_IDENTITY(0.0, (0.0) - 0.0))), 0.0, 0.0, 0.0, 1.0, cos(0.0), 1.0, 1.0, 0.0, 0.0)))))))), max(float(mat3x2(injectionSwitch.y, 1.0, exp(_GLF_ZERO(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(3.5)), float(0.0), _GLF_IDENTITY(bool(true), ! (! (_GLF_IDENTITY(bool(true), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(bool(true), true && (bool(true))), false, true)), false || (bool(bvec3(_GLF_IDENTITY(bool(true), true && (bool(true))), false, true)))))))))), 0.0)), 0.0)), injectionSwitch.x)), 0.0, log(1.0), 1.0)), _GLF_IDENTITY(float(mat3x2(injectionSwitch.y, 1.0, exp(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, log(1.0), 1.0)), clamp(float(mat3x2(injectionSwitch.y, 1.0, exp(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, log(1.0), 1.0)), float(mat3x2(injectionSwitch.y, 1.0, exp(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, log(1.0), 1.0)), float(mat3x2(injectionSwitch.y, 1.0, exp(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, log(1.0), _GLF_IDENTITY(1.0, float(mat4(1.0, length(0.0), 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(0.0, 0.0 + (_GLF_IDENTITY(0.0, (0.0) - 0.0))), 0.0, 0.0, 0.0, 1.0, cos(0.0), 1.0, 1.0, 0.0, 0.0)))))))))))), true, false, true))))))))))) || false)), (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! _GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))), ! (! ((! ((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y)))))))), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-2.6)), vec2(_GLF_FUZZED(-68.70), (injectionSwitch)[1]), bvec2(false, true))).y)), _GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), true && _GLF_IDENTITY((_GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (! ((_GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), true)))) || false)) || false), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-0.6))) < _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-6200.0983), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(float(190468u))), bvec2(true, false))).y)))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(false, (false) && true)) || false)) && true)))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-45.04) : injectionSwitch.x)) > injectionSwitch.y), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true) || ((_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-45.04) : injectionSwitch.x)) > injectionSwitch.y))))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, (false) && true), true, true), bvec3(bvec3(bvec3(false, true, true))))), (bool(_GLF_IDENTITY(bvec3(false, true, true), _GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(false, true, true)), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(false, true, true)), bvec3(bvec4(bvec3(bvec3(false, true, true)), true))))))), _GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(false, true, true)), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(false, true, true)), bvec3(bvec4(bvec3(bvec3(false, true, true)), true))))))))), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(false, true, true)), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(false, true, true)), bvec3(bvec4(bvec3(bvec3(false, true, true)), true))))))))), bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(false, true, true)), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(false, true, true)), bvec3(bvec4(bvec3(bvec3(false, true, true)), true))))))))))))))))))) && _GLF_IDENTITY(true, true && (true))))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, ! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(! (_injected_loop_counter < 1), (! (_injected_loop_counter < 1)) || false), bool(bvec2(! (_injected_loop_counter < 1), false)))), true && (_GLF_IDENTITY((! _GLF_IDENTITY((_injected_loop_counter < 1), ((_injected_loop_counter < 1)) && true)), true && ((! (_injected_loop_counter < 1)))))))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), _GLF_IDENTITY(bool(bvec3(false, true, false)), ! (_GLF_IDENTITY(! (bool(bvec3(false, true, false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (bool(bvec3(false, true, false))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(! (bool(bvec3(false, true, false)))), bool(bvec2(bool(! (bool(bvec3(false, true, false)))), true)))), ! (! (bool(_GLF_IDENTITY(bool(! (bool(bvec3(false, true, false)))), bool(bvec2(bool(! (bool(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec3(bvec3(false, true, false))), bvec3(bvec3(bvec3(bvec3(bvec3(false, true, false)))))))))), true))))))))), ! (! (! (_GLF_IDENTITY(! (bool(bvec3(false, true, false))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(! (bool(bvec3(false, true, false)))), bool(bvec2(bool(! (bool(bvec3(false, true, false)))), true)))), ! (! (bool(_GLF_IDENTITY(bool(! (bool(bvec3(false, true, false)))), bool(bvec2(bool(! (bool(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec3(bvec3(false, true, false)))))), bvec3(bvec3(bvec3(bvec3(bvec3(false, true, false)))))))))), true)))))))))))))))))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_injected_loop_counter --, 0 | (_injected_loop_counter --)))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), false), bvec2(bvec2(bvec2(_GLF_DEAD(false), _GLF_IDENTITY(false, ! (! (false))))))))))))
          barrier();
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true)))))
          {
           barrier();
          }
         else
          {
          }
        }
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec2((injectionSwitch.x > injectionSwitch.y), true), bvec2(bvec3(bvec2((injectionSwitch.x > injectionSwitch.y), true), false))))))))
  barrier();
 uint workgroup_base = _GLF_IDENTITY(workgroup_size * _GLF_IDENTITY(workgroup_id, ~ (_GLF_IDENTITY(~ (workgroup_id), (~ (workgroup_id)) * 1u))), _GLF_IDENTITY((_GLF_IDENTITY(false ? _GLF_FUZZED(max(workgroup_id, subgroup_size)) : workgroup_size * workgroup_id, (_GLF_IDENTITY(false ? _GLF_FUZZED(max(workgroup_id, subgroup_size)) : workgroup_size * workgroup_id, (false ? _GLF_FUZZED(max(workgroup_id, subgroup_size)) : workgroup_size * workgroup_id) - 0u)) - 0u)), ((false ? _GLF_FUZZED(max(workgroup_id, subgroup_size)) : workgroup_size * workgroup_id)) | 0u));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(8911.3506) : injectionSwitch.y))))))
  {
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 | 1)); _injected_loop_counter ++)
          {
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) | 0)), int(1))) + (_injected_loop_counter)) > int(_GLF_ZERO(0.0, injectionSwitch.x)), ! _GLF_IDENTITY((! (_GLF_IDENTITY(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x)), (_GLF_IDENTITY(_injected_loop_counter, min(_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(_injected_loop_counter) : _injected_loop_counter)), _injected_loop_counter)) > int(_GLF_ZERO(0.0, injectionSwitch.x))) && true))), _GLF_IDENTITY(bool(bvec3((! (_GLF_IDENTITY(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter, min(_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(_injected_loop_counter) : _injected_loop_counter)), _injected_loop_counter)) > int(_GLF_ZERO(0.0, injectionSwitch.x))) && true, true && ((_GLF_IDENTITY(_injected_loop_counter, min(_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(_injected_loop_counter) : _injected_loop_counter)), _injected_loop_counter)) > _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), ~ (~ (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), ~ (~ (int(_GLF_ZERO(0.0, injectionSwitch.x))))))))) && true))))), false, false)), bool(bvec3(bool(bvec3((! (_GLF_IDENTITY(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter, min(_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(_injected_loop_counter) : _injected_loop_counter)), _injected_loop_counter)) > int(_GLF_ZERO(0.0, injectionSwitch.x))), ! (! ((_GLF_IDENTITY(_injected_loop_counter, min(_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(_injected_loop_counter) : _injected_loop_counter)), _injected_loop_counter)) > int(_GLF_ZERO(0.0, injectionSwitch.x)))))) && true))), false, false)), false, false)))))); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), ! (! ((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)))))))
                  {
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
              }
             else
              {
              }
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                barrier();
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                {
                 for(int _injected_loop_counter = ((_GLF_IDENTITY((_GLF_IDENTITY(-74360, (-74360) | (_GLF_IDENTITY(_GLF_IDENTITY(-74360, clamp(-74360, -74360, -74360)), (_GLF_IDENTITY(-74360, clamp(-74360, -74360, -74360))) - ((0 << _GLF_IDENTITY(int(4), int(4))) << _GLF_IDENTITY(int(7), int(7)))))) & 0), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(-74360 & 0, clamp(_GLF_IDENTITY(-74360 & 0, max(-74360 & 0, _GLF_IDENTITY(-74360 & 0, (-74360 & 0) >> 0))), -74360 & 0, -74360 & 0)), int(ivec2(-74360 & 0, 1)))), max((_GLF_IDENTITY(-74360 & 0, int(ivec2(-74360 & 0, 1)))), _GLF_IDENTITY((_GLF_IDENTITY(-74360 & 0, int(ivec2(-74360 & 0, _GLF_IDENTITY(1, (1) >> (0 ^ 0)))))), ((_GLF_IDENTITY(-74360 & 0, int(ivec2(_GLF_IDENTITY(-74360 & 0, (true ? _GLF_IDENTITY(-74360, clamp(_GLF_IDENTITY(-74360, (-74360) << 0), _GLF_IDENTITY(-74360, 0 + (-74360)), _GLF_IDENTITY(-74360, max(-74360, -74360)))) & 0 : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(1, (1) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))))) / _GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | (1))) - (0 << _GLF_IDENTITY(int(3), int(3)))), (1) - 0)) - 0))))), (((_GLF_IDENTITY(-74360 & 0, int(_GLF_IDENTITY(ivec2(-74360 & 0, 1), ivec2(ivec2(ivec2(-74360 & 0, 1))))))))) << 0), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(((_GLF_IDENTITY(-74360 & 0, int(ivec2(_GLF_IDENTITY(-74360 & 0, _GLF_IDENTITY(1 * (-74360 & 0), int(ivec3(1 * (-74360 & 0), 1, 1)))), 1))))), _GLF_IDENTITY((((_GLF_IDENTITY(-74360 & 0, int(ivec2(-74360 & 0, 1)))))) << 0, int(_GLF_ZERO(0.0, injectionSwitch.x)) + (_GLF_IDENTITY((((_GLF_IDENTITY(-74360 & 0, int(ivec2(-74360 & 0, 1)))))) << 0, ((((_GLF_IDENTITY(-74360 & 0, int(_GLF_IDENTITY(ivec2(-74360 & 0, 1), (ivec2(-74360 & 0, 1)) | ivec2(0, 0))))))) << 0) - 0)))), clamp(_GLF_IDENTITY(((_GLF_IDENTITY(-74360 & _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, ~ (~ (0))))), int(ivec2(-74360 & 0, 1))))), (((_GLF_IDENTITY(_GLF_IDENTITY(-74360 & 0, int(ivec2(-74360 & 0, 1))), (_GLF_IDENTITY(-74360 & 0, int(ivec2(-74360 & 0, 1)))) ^ 0)))) << 0), _GLF_IDENTITY(_GLF_IDENTITY(((_GLF_IDENTITY(-74360 & 0, int(ivec2(-74360 & 0, 1))))), (((_GLF_IDENTITY(-74360 & 0, int(ivec2(-74360 & 0, 1)))))) << 0), ~ (~ (_GLF_IDENTITY(((_GLF_IDENTITY(-74360 & 0, int(ivec2(-74360 & 0, 1))))), (((_GLF_IDENTITY(-74360 & 0, int(ivec2(-74360 & 0, 1)))))) << 0)))), _GLF_IDENTITY(_GLF_IDENTITY(((_GLF_IDENTITY(-74360 & 0, int(ivec2(-74360 & 0, 1))))), (((_GLF_IDENTITY(-74360 & 0, int(ivec2(-74360 & 0, 1)))))) << 0), min(_GLF_IDENTITY(((_GLF_IDENTITY(_GLF_IDENTITY(-74360, clamp(_GLF_IDENTITY(-74360, 0 | (-74360)), _GLF_IDENTITY(-74360, (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(-74360, ~ (~ (-74360))))), -74360)) & 0, int(ivec2(-74360 & 0, 1))))), (((_GLF_IDENTITY(-74360 & 0, int(ivec2(-74360 & 0, 1)))))) << 0), _GLF_IDENTITY(((_GLF_IDENTITY(-74360 & 0, int(ivec2(-74360 & 0, 1))))), (((_GLF_IDENTITY(_GLF_IDENTITY(-74360, clamp(-74360, -74360, -74360)) & 0, int(ivec2(-74360 & 0, 1)))))) << 0))))), (_GLF_IDENTITY(_GLF_IDENTITY(((_GLF_IDENTITY(-74360 & 0, int(ivec2(_GLF_IDENTITY(-74360 & 0, 1 * (-74360 & 0)), 1))))), _GLF_IDENTITY((((_GLF_IDENTITY(-74360 & 0, _GLF_IDENTITY(int(ivec2(-74360 & 0, 1)), (int(ivec2(-74360 & 0, 1))) << int(_GLF_ZERO(0.0, injectionSwitch.x))))))) << 0, int(_GLF_ZERO(0.0, injectionSwitch.x)) + (_GLF_IDENTITY((((_GLF_IDENTITY(-74360 & 0, int(ivec2(-74360 & 0, 1)))))) << _GLF_IDENTITY(0, (0) << 0), ((((_GLF_IDENTITY(-74360 & 0, int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(-74360 & 0, (_GLF_IDENTITY(-74360 & 0, (-74360 & 0) - 0)) | 0), 1), (ivec2(-74360 & 0, 1)) | ivec2(_GLF_IDENTITY(0, 0 | (0)), 0))))))) << 0) - 0)))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(((_GLF_IDENTITY(-74360 & _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, ~ (~ (0))))), int(ivec2(-74360 & _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, min(_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-77599))), 0)), 0)), 1))))), (((_GLF_IDENTITY(_GLF_IDENTITY(-74360 & 0, int(ivec2(-74360 & 0, 1))), (_GLF_IDENTITY(-74360 & 0, int(ivec2(-74360 & 0, 1)))) ^ 0)))) << 0), int(ivec3(_GLF_IDENTITY(((_GLF_IDENTITY(-74360 & _GLF_IDENTITY(_GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, (0) + 0)))), 0, _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, 0 ^ (0)))))), 0 ^ (_GLF_IDENTITY(0, ~ (~ (0))))), int(ivec2(-74360 & 0, 1))))), (((_GLF_IDENTITY(_GLF_IDENTITY(-74360 & 0, int(ivec2(-74360 & 0, 1))), (_GLF_IDENTITY(-74360 & 0, int(ivec2(-74360 & 0, 1)))) ^ 0)))) << 0), 1, 1))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(-74360 & 0, int(ivec2(-74360 & 0, 1)))), clamp(_GLF_IDENTITY((_GLF_IDENTITY(-74360 & 0, int(ivec2(-74360 & 0, 1)))), (0 | 0) | ((_GLF_IDENTITY(-74360 & 0, int(ivec2(-74360 & 0, 1)))))), (_GLF_IDENTITY(-74360 & 0, int(ivec2(-74360 & 0, 1)))), (_GLF_IDENTITY(-74360 & 0, int(ivec2(-74360 & 0, 1))))))), (((_GLF_IDENTITY(-74360 & _GLF_IDENTITY(0, _GLF_IDENTITY(int(int(_GLF_IDENTITY(0, int(ivec2(0, int(_GLF_ZERO(0.0, injectionSwitch.x))))))), max(int(int(_GLF_IDENTITY(0, int(ivec2(0, int(_GLF_ZERO(0.0, injectionSwitch.x))))))), int(int(_GLF_IDENTITY(0, int(ivec2(0, int(_GLF_ZERO(0.0, injectionSwitch.x)))))))))), int(ivec2(-74360 & 0, _GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec3(1, _GLF_IDENTITY(0, (0) - 0), 1), (ivec3(1, 0, 1)) / ivec3(1, 1, 1)))))))))) << 0), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(((_GLF_IDENTITY(-74360 & 0, int(ivec2(-74360 & 0, 1))))), (((_GLF_IDENTITY(-74360 & 0, int(_GLF_IDENTITY(ivec2(-74360 & 0, 1), (ivec2(-74360 & 0, 1)) | (_GLF_IDENTITY(ivec2(-74360 & 0, 1), max(ivec2(-74360 & 0, 1), ivec2(-74360 & 0, 1)))))))))) << 0), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(((_GLF_IDENTITY(-74360 & 0, int(ivec2(-74360 & 0, 1))))), (((_GLF_IDENTITY(-74360 & 0, int(_GLF_IDENTITY(ivec2(-74360 & 0, 1), (ivec2(-74360 & 0, 1)) | (_GLF_IDENTITY(ivec2(-74360 & 0, 1), max(ivec2(-74360 & 0, 1), ivec2(-74360 & 0, 1)))))))))) << 0), (true ? _GLF_IDENTITY(((_GLF_IDENTITY(-74360 & 0, int(ivec2(-74360 & 0, 1))))), (((_GLF_IDENTITY(-74360 & 0, int(_GLF_IDENTITY(ivec2(-74360 & 0, 1), (ivec2(-74360 & 0, _GLF_IDENTITY(1, max(1, 1)))) | (_GLF_IDENTITY(ivec2(-74360 & 0, 1), max(ivec2(-74360 & 0, 1), ivec2(-74360 & 0, 1)))))))))) << 0) : _GLF_FUZZED(_injected_loop_counter))))))))), _GLF_IDENTITY(_GLF_IDENTITY(((_GLF_IDENTITY(-74360 & 0, int(ivec2(-74360 & 0, 1))))), (_GLF_IDENTITY(((_GLF_IDENTITY(-74360 & 0, int(ivec2(-74360 & 0, 1))))), (((_GLF_IDENTITY(-74360 & 0, int(ivec2(-74360 & 0, 1)))))) - 0)) << 0), _GLF_IDENTITY(min(_GLF_IDENTITY(((_GLF_IDENTITY(_GLF_IDENTITY(-74360, clamp(_GLF_IDENTITY(-74360, 0 | (-74360)), _GLF_IDENTITY(-74360, (_GLF_IDENTITY(false, (false) || false) ? _GLF_FUZZED(_injected_loop_counter) : -74360)), -74360)) & 0, int(ivec2(-74360 & 0, 1))))), (((_GLF_IDENTITY(-74360 & 0, int(ivec2(-74360 & 0, 1)))))) << 0), _GLF_IDENTITY(((_GLF_IDENTITY(-74360 & 0, int(ivec2(-74360 & 0, 1))))), (((_GLF_IDENTITY(_GLF_IDENTITY(-74360, clamp(_GLF_IDENTITY(-74360, clamp(-74360, -74360, -74360)), -74360, -74360)) & 0, int(ivec2(-74360 & 0, 1)))))) << 0)), (_GLF_IDENTITY(min(_GLF_IDENTITY(((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(-74360, _GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(-74360, clamp(-74360, -74360, -74360)), (0 | 0))), ~ (~ (int(ivec2(_GLF_IDENTITY(-74360, clamp(-74360, -74360, -74360)), (0 | 0))))))), clamp(_GLF_IDENTITY(-74360, 0 | (-74360)), _GLF_IDENTITY(-74360, (false ? _GLF_FUZZED(_injected_loop_counter) : -74360)), -74360)) & 0, int(ivec2(-74360 & 0, 1))))), (((_GLF_IDENTITY(-74360 & 0, int(ivec2(-74360 & 0, 1)))))) << 0), _GLF_IDENTITY(((_GLF_IDENTITY(-74360 & 0, int(ivec2(-74360 & 0, 1))))), (((_GLF_IDENTITY(_GLF_IDENTITY(-74360, clamp(-74360, -74360, -74360)) & 0, int(ivec2(-74360 & 0, 1)))))) << 0)), 0 | (min(_GLF_IDENTITY(((_GLF_IDENTITY(_GLF_IDENTITY(-74360, clamp(_GLF_IDENTITY(-74360, 0 | (-74360)), _GLF_IDENTITY(-74360, (false ? _GLF_FUZZED(_injected_loop_counter) : -74360)), -74360)) & 0, int(ivec2(-74360 & 0, 1))))), (((_GLF_IDENTITY(-74360 & 0, int(ivec2(-74360 & 0, 1)))))) << 0), _GLF_IDENTITY(_GLF_IDENTITY(((_GLF_IDENTITY(-74360 & 0, int(ivec2(-74360 & 0, 1))))), (((_GLF_IDENTITY(_GLF_IDENTITY(-74360, clamp(-74360, -74360, -74360)) & 0, int(ivec2(-74360 & 0, 1)))))) << 0), max(_GLF_IDENTITY(_GLF_IDENTITY(((_GLF_IDENTITY(-74360 & 0, int(ivec2(-74360 & 0, 1))))), (((_GLF_IDENTITY(_GLF_IDENTITY(-74360, clamp(-74360, -74360, -74360)) & 0, int(ivec2(-74360 & 0, 1)))))) << 0), _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(((_GLF_IDENTITY(-74360 & 0, int(ivec2(-74360 & 0, 1))))), (((_GLF_IDENTITY(_GLF_IDENTITY(-74360, clamp(-74360, -74360, -74360)) & 0, int(ivec2(-74360 & 0, 1)))))) << 0), 1, 0, 1)), int(ivec2(int(ivec4(_GLF_IDENTITY(((_GLF_IDENTITY(-74360 & 0, int(ivec2(-74360 & 0, 1))))), (((_GLF_IDENTITY(_GLF_IDENTITY(-74360, clamp(-74360, -74360, -74360)) & 0, int(ivec2(-74360 & 0, 1)))))) << 0), 1, 0, 1)), 0)))), _GLF_IDENTITY(((_GLF_IDENTITY(-74360 & 0, int(ivec2(-74360 & 0, 1))))), (((_GLF_IDENTITY(_GLF_IDENTITY(-74360, clamp(-74360, -74360, -74360)) & 0, int(ivec2(-74360 & 0, 1)))))) << 0))))))) | (_GLF_IDENTITY(min(_GLF_IDENTITY(((_GLF_IDENTITY(_GLF_IDENTITY(-74360, clamp(_GLF_IDENTITY(-74360, 0 | (-74360)), _GLF_IDENTITY(-74360, (false ? _GLF_FUZZED(_injected_loop_counter) : -74360)), -74360)) & 0, int(ivec2(-74360 & 0, 1))))), (((_GLF_IDENTITY(-74360 & 0, int(ivec2(-74360 & 0, 1)))))) << 0), _GLF_IDENTITY(((_GLF_IDENTITY(-74360 & 0, int(ivec2(-74360 & 0, 1))))), (((_GLF_IDENTITY(_GLF_IDENTITY(-74360, clamp(-74360, -74360, -74360)) & _GLF_IDENTITY(0, max(0, 0)), int(ivec2(-74360 & 0, 1)))))) << 0)), 0 ^ (min(_GLF_IDENTITY(((_GLF_IDENTITY(_GLF_IDENTITY(-74360, clamp(_GLF_IDENTITY(-74360, 0 | (-74360)), _GLF_IDENTITY(-74360, (false ? _GLF_FUZZED(_injected_loop_counter) : -74360)), -74360)) & 0, _GLF_IDENTITY(int(ivec2(-74360 & 0, 1)), max(_GLF_IDENTITY(int(ivec2(-74360 & 0, 1)), max(int(ivec2(-74360 & 0, 1)), int(ivec2(-74360 & 0, 1)))), _GLF_IDENTITY(int(ivec2(-74360 & 0, 1)), (int(ivec2(-74360 & 0, 1))) >> 0)))))), (((_GLF_IDENTITY(-74360 & 0, int(ivec2(_GLF_IDENTITY(-74360 & 0, (_GLF_IDENTITY(-74360 & 0, (-74360 & 0) | (-74360 & 0))) + 0), _GLF_IDENTITY(1, int(ivec3(1, 1, 0))))))))) << _GLF_IDENTITY(0, int(ivec4(0, 1, 1, 0)))), _GLF_IDENTITY(((_GLF_IDENTITY(-74360 & 0, int(ivec2(-74360 & 0, 1))))), (((_GLF_IDENTITY(_GLF_IDENTITY(-74360, clamp(-74360, -74360, -74360)) & 0, int(ivec2(-74360 & 0, 1)))))) << 0)))))))))) * _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))), clamp(((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))), ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))), ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))))))) | 0) | ((-74360 & _GLF_IDENTITY(_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 ^ (0))) | 0), (0) << 0), (_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, _GLF_IDENTITY(1, (1) / 1) * (_GLF_IDENTITY(1, (1) | (1))))) - 0), (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 1 * (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(_injected_loop_counter)))) | (1))))) - 0)) | (_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 1 * (_GLF_IDENTITY(1, (1) | (1))))) - 0), clamp(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 1 * (_GLF_IDENTITY(1, (1) | (1))))) - 0), _GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 1 * (_GLF_IDENTITY(1, (1) | (1))))) - 0), min(_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 1 * (_GLF_IDENTITY(1, (1) | (1))))) - 0), int(int(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 1 * (_GLF_IDENTITY(1, (1) | (1))))) - 0)))), _GLF_IDENTITY(1, (_GLF_IDENTITY(1, _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) - int(_GLF_ZERO(0.0, injectionSwitch.x)))) / 1) * (_GLF_IDENTITY(1, (1) | (1))))) - 0))), _GLF_IDENTITY(1, (_GLF_IDENTITY(1, 1 * (_GLF_IDENTITY(1, (1) | (1))))) - 0))))) ^ 1), _GLF_IDENTITY(0, (_GLF_IDENTITY(0, int(int(0)))) + (0 << _GLF_IDENTITY(int(5), int(5))))))), 0)), _GLF_IDENTITY(min(_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(0, _GLF_IDENTITY((_GLF_IDENTITY(0, 0 ^ (0))) | 0, max((_GLF_IDENTITY(0, 0 ^ (0))) | 0, _GLF_IDENTITY((_GLF_IDENTITY(0, 0 ^ (0))) | 0, max((_GLF_IDENTITY(0, 0 ^ (0))) | 0, (_GLF_IDENTITY(0, 0 ^ (0))) | 0))))), (0) << 0), (_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, 1, 1)), 1 * (_GLF_IDENTITY(1, (1) | (1))))) - 0), (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 1 * (_GLF_IDENTITY(1, (1) | (1))))) - 0)) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 1 * (_GLF_IDENTITY(1, (1) | (1))))) - 0), clamp(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 1 * (_GLF_IDENTITY(1, (1) | (1))))) - 0), _GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 1 * (_GLF_IDENTITY(1, (1) | (1))))) - 0), min(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 1 * (_GLF_IDENTITY(1, (1) | (1))))) - 0), _GLF_IDENTITY(1, (_GLF_IDENTITY(1, 1 * (_GLF_IDENTITY(1, (1) | (1))))) - 0))), _GLF_IDENTITY(1, (_GLF_IDENTITY(1, 1 * (_GLF_IDENTITY(1, (1) | (1))))) - 0))), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 1 * (_GLF_IDENTITY(1, (1) | (1))))) - 0), clamp(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 1 * (_GLF_IDENTITY(1, (1) | (1))))) - 0), _GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 1 * (_GLF_IDENTITY(1, (1) | (1))))) - 0), min(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 1 * (_GLF_IDENTITY(1, (1) | (1))))) - 0), _GLF_IDENTITY(1, (_GLF_IDENTITY(1, 1 * (_GLF_IDENTITY(1, (1) | (1))))) - 0))), _GLF_IDENTITY(1, (_GLF_IDENTITY(1, 1 * (_GLF_IDENTITY(1, (1) | (1))))) - 0))))))) ^ 1), _GLF_IDENTITY(0, (_GLF_IDENTITY(0, int(int(0)))) + (0 << _GLF_IDENTITY(int(5), int(5))))))), 0)), _GLF_IDENTITY(0, min(_GLF_IDENTITY(0, int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 ^ (0))) | 0), (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 ^ (0))) | 0)) ^ 0), (0) << 0), (_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 1 * (_GLF_IDENTITY(1, (1) | (1))))) - 0), (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 1 * (_GLF_IDENTITY(1, (1) | (1))))) - 0)) | (_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 1 * (_GLF_IDENTITY(1, (1) | (1))))) - 0), clamp(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 1 * (_GLF_IDENTITY(1, (1) | (1))))) - 0), _GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 1 * (_GLF_IDENTITY(1, (1) | (1))))) - _GLF_IDENTITY(0, (true ? _GLF_IDENTITY(0, (0) | (0)) : _GLF_FUZZED(_injected_loop_counter)))), min(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 1 * (_GLF_IDENTITY(1, (1) | (1))))) - 0), _GLF_IDENTITY(1, (_GLF_IDENTITY(1, 1 * (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, clamp(1, 1, 1)), 1))) | (1))))) - 0))), _GLF_IDENTITY(1, (_GLF_IDENTITY(1, _GLF_IDENTITY(1 * (_GLF_IDENTITY(1, (1) | (1))), (1 * (_GLF_IDENTITY(1, (1) | (1)))) * 1))) - 0))))) ^ 1), _GLF_IDENTITY(0, (_GLF_IDENTITY(0, int(int(0)))) + (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) | (int(5))), _GLF_IDENTITY(int(5), (int(5)) ^ 0))))))), 0))), (min(_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(0, _GLF_IDENTITY((_GLF_IDENTITY(0, 0 ^ (0))) | 0, max((_GLF_IDENTITY(0, 0 ^ (0))) | 0, _GLF_IDENTITY((_GLF_IDENTITY(0, 0 ^ (0))) | 0, max((_GLF_IDENTITY(0, 0 ^ (0))) | 0, (_GLF_IDENTITY(0, 0 ^ (0))) | 0))))), (0) << 0), (_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, 1, 1)), 1 * (_GLF_IDENTITY(1, (1) | (1))))) - 0), (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 1 * (_GLF_IDENTITY(1, (1) | (1))))) - 0)) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 1 * (_GLF_IDENTITY(1, (1) | (1))))) - 0), clamp(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 1 * (_GLF_IDENTITY(1, (1) | (1))))) - 0), _GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 1 * (_GLF_IDENTITY(1, (1) | (1))))) - 0), min(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 1 * (_GLF_IDENTITY(1, (1) | (1))))) - 0), _GLF_IDENTITY(1, (_GLF_IDENTITY(1, 1 * (_GLF_IDENTITY(1, (1) | (1))))) - 0))), _GLF_IDENTITY(1, (_GLF_IDENTITY(1, 1 * (_GLF_IDENTITY(1, (1) | (1))))) - 0))), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 1 * (_GLF_IDENTITY(1, (1) | (1))))) - 0), clamp(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 1 * (_GLF_IDENTITY(1, (1) | (1))))) - 0), _GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 1 * (_GLF_IDENTITY(1, (1) | (1))))) - 0), min(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 1 * (_GLF_IDENTITY(1, (1) | (1))))) - 0), _GLF_IDENTITY(1, (_GLF_IDENTITY(1, 1 * (_GLF_IDENTITY(1, (1) | (1))))) - 0))), _GLF_IDENTITY(1, (_GLF_IDENTITY(1, 1 * (_GLF_IDENTITY(1, (1) | (1))))) - 0))))))) ^ 1), _GLF_IDENTITY(0, (_GLF_IDENTITY(0, int(int(0)))) + (0 << _GLF_IDENTITY(int(5), int(5))))))), 0)), _GLF_IDENTITY(0, min(_GLF_IDENTITY(0, int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 ^ (0))) | 0), (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 ^ (0))) | 0)) ^ 0), (0) << 0), (_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 1 * (_GLF_IDENTITY(1, (1) | (1))))) - 0), (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 1 * (_GLF_IDENTITY(1, (1) | (1))))) - 0)) | (_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 1 * (_GLF_IDENTITY(1, (1) | (1))))) - 0), clamp(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 1 * (_GLF_IDENTITY(1, (1) | (1))))) - 0), _GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 1 * (_GLF_IDENTITY(1, (1) | (1))))) - _GLF_IDENTITY(0, (true ? _GLF_IDENTITY(0, (0) | (0)) : _GLF_FUZZED(_injected_loop_counter)))), min(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 1 * (_GLF_IDENTITY(1, (1) | (1))))) - 0), _GLF_IDENTITY(1, (_GLF_IDENTITY(1, 1 * (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, clamp(1, 1, 1)), 1))) | (1))))) - 0))), _GLF_IDENTITY(1, (_GLF_IDENTITY(1, _GLF_IDENTITY(1 * (_GLF_IDENTITY(1, (1) | (1))), (1 * (_GLF_IDENTITY(1, (1) | (1)))) * 1))) - 0))))) ^ 1), _GLF_IDENTITY(0, (_GLF_IDENTITY(0, int(int(0)))) + (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) | (int(5))), _GLF_IDENTITY(int(5), (int(5)) ^ 0))))))), 0)))) << 0))))) & 73972) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(true ? int(5) : _GLF_FUZZED(-76180), ~ (_GLF_IDENTITY(~ (true ? int(5) : _GLF_FUZZED(-76180)), min(~ (true ? int(5) : _GLF_FUZZED(-76180)), ~ (true ? int(5) : _GLF_FUZZED(-76180)))))), clamp(true ? int(5) : _GLF_FUZZED(_GLF_IDENTITY(-76180, (false ? _GLF_FUZZED(_injected_loop_counter) : -76180))), true ? int(5) : _GLF_FUZZED(-76180), _GLF_IDENTITY(true ? int(5) : _GLF_FUZZED(-76180), (1 ^ 0) * _GLF_IDENTITY((true ? int(5) : _GLF_FUZZED(-76180)), (_GLF_IDENTITY((true ? int(5) : _GLF_FUZZED(-76180)), ((true ? int(5) : _GLF_FUZZED(-76180))) ^ 0)) / 1))))), (true ? (_GLF_IDENTITY(true ? int(5) : _GLF_FUZZED(-76180), clamp(true ? int(5) : _GLF_FUZZED(_GLF_IDENTITY(-76180, (false ? _GLF_FUZZED(_injected_loop_counter) : -76180))), true ? int(5) : _GLF_FUZZED(-76180), _GLF_IDENTITY(true ? int(5) : _GLF_FUZZED(-76180), (1 ^ 0) * (true ? int(5) : _GLF_FUZZED(-76180)))))) : _GLF_FUZZED(bitfieldExtract(_injected_loop_counter, 53048, (-4604 / _injected_loop_counter)))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | _GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(1, (1) / 1))), max(_GLF_IDENTITY((~ (_GLF_IDENTITY(1, (1) / 1))), ((~ (_GLF_IDENTITY(1, (1) / 1)))) | ((~ (_GLF_IDENTITY(1, (1) / 1))))), (~ (_GLF_IDENTITY(1, (1) / 1)))))))); _injected_loop_counter ++)
                  {
                   barrier();
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > (8333 & 0)); _injected_loop_counter --)
                      {
                       if(_GLF_DEAD(false))
                        {
                         for(int _injected_loop_counter = _GLF_IDENTITY(1, clamp(1, 1, 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                          {
                           barrier();
                          }
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                      }
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                         barrier();
                         do
                          {
                           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 1.0, 0.0, 0.0, 1.0), transpose(transpose(mat3x2(injectionSwitch, 1.0, 0.0, 0.0, 1.0)))))).x > injectionSwitch.y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(vec4(injectionSwitch.x, 0.0, 0.0, 0.0))))) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), vec2(mat4x2((injectionSwitch) * mat2(1.0), 1.0, 1.0, 0.0, 1.0, 0.0, 0.0)))).y, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), vec2(mat4x2((injectionSwitch) * mat2(1.0), 1.0, 1.0, 0.0, 1.0, 0.0, 0.0)))).y) - 0.0)))) || false), true, false), bvec3(bvec4(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false), _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, bool(bvec4(true, true, true, false))), false)))))))))), true && (bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false), _GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false), bvec3(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)), true, false))))))), false)), bvec3(bvec3(bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false), bvec3(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, float(mat3x4(injectionSwitch.y, length(vec3(0.0, 0.0, 0.0)), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0)))), float(_GLF_FUZZED(603.887)), bool(false))))), true, false))))))), false)))))), bvec3(bvec4(bvec3(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch)))) / sqrt(vec2(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-792.520))), 1.0))).y)), true, _GLF_IDENTITY(false, true && (false))), true)))))))))
                            {
                             if(_GLF_DEAD(false))
                              barrier();
                             barrier();
                            }
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       else
                        {
                        }
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     barrier();
                    }
                   do
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
                  }
                }
              }
             else
              {
              }
            }
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(true)), (bool(bool(true))) && true))))
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bvec4(! (true), true, true, false)))))), (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bvec4(! (true), true, true, false))))))) || false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(9.0, -4.7)) : injectionSwitch)).x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_IDENTITY(! ((injectionSwitch.x < injectionSwitch.y)), bool(bvec4(! ((injectionSwitch.x < injectionSwitch.y)), true, true, true))))))))))), _GLF_IDENTITY(bool(bool(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(9.0, -4.7)) : injectionSwitch)).x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_IDENTITY(! ((injectionSwitch.x < injectionSwitch.y)), bool(bvec4(! ((injectionSwitch.x < injectionSwitch.y)), true, true, true))))))))))))), (bool(bool(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(9.0, -4.7)) : injectionSwitch)).x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_IDENTITY(! ((injectionSwitch.x < injectionSwitch.y)), bool(bvec4(! ((injectionSwitch.x < injectionSwitch.y)), true, true, true)))))))))))))) && true)))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false)))
          barrier();
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, true && (false)), false, true), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec2(false, true))))), false, true), false)), bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec2(false, true))))), false, true), false)))))))), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, true && (false)), false, true), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec2(false, true))))), false, true), false)), bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec2(false, true))))), false, true), false)))))))), false), true)))))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           do
            {
             barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, true, false)), bool(bvec3(_GLF_IDENTITY(bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, true, false)), ! (! (bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, true, false))))), false, true))))))))
              {
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))));
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 barrier();
                }
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))), true, true))))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, (true) && true)))) && (false))))
        barrier();
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         do
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, cos(0.0) * (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-3285.2808)), bool(false)))))) / 1.0) > injectionSwitch.y))))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         barrier();
        }
      }
    }
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
  }
 uint virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, 0u | (workgroup_base + subgroup_id * subgroup_size)) + subgroup_local_id, _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (workgroup_base + subgroup_id * subgroup_size + subgroup_local_id), 0u ^ (~ (workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)))), uint(uint(~ (~ (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), subgroup_size, subgroup_size)) + subgroup_local_id))))));
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true), true, false, false)), (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-1.5) : _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))))) && true), true, false, false)), false || (bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true), true, false, false))))) || false))), true, true)))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (! (true))))))))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 atomicStore(write_val, uint(virtual_gid), 4, 64, 0);
 uint read_val = atomicLoad(write_val, 4, 64, 0);
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)), true && (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY((true), bool(bvec4((true), true, true, true))) && true), (_GLF_IDENTITY(_GLF_IDENTITY(true, (true) && true), true && (_GLF_IDENTITY(true, (true) && true)))) && true)))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(0, max(0, 0)) << _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter --)
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, ! (! (true))), (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.y, float(mat2x4(injectionSwitch.y, 0.0, 1.0, abs(1.0), 1.0, 1.0, 1.0, 1.0)))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (_GLF_IDENTITY(injectionSwitch.y, float(mat2x4(injectionSwitch.y, 0.0, 1.0, abs(1.0), 1.0, 1.0, 1.0, 1.0)))) : _GLF_FUZZED(clamp(316.441, 0.6, -4729.2341)))) / _GLF_ONE(1.0, injectionSwitch.y)))), (_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(225.079) : _GLF_IDENTITY(clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y), (clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)) + 0.0))))) - 0.0)))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-80.68)), vec2(_GLF_FUZZED(4.5), (injectionSwitch)[1]), bvec2(false, true)))) / vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))).y))))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 0.0, 1.0, 0.0, abs(0.0), exp(0.0), 0.0, 1.0, 0.0, 1.0, 1.0)), (true ? _GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 0.0, 1.0, 0.0, abs(0.0), exp(0.0), 0.0, 1.0, 0.0, 1.0, 1.0)), min(vec2(mat4x3(injectionSwitch, 0.0, 1.0, 0.0, abs(0.0), exp(0.0), 0.0, 1.0, 0.0, 1.0, 1.0)), vec2(mat4x3(injectionSwitch, 0.0, 1.0, 0.0, abs(0.0), exp(0.0), 0.0, 1.0, 0.0, 1.0, 1.0)))) : _GLF_FUZZED(injectionSwitch)))).y, _GLF_IDENTITY(true && (injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(true && (injectionSwitch.x > injectionSwitch.y), ! (! (true && (injectionSwitch.x > injectionSwitch.y)))), true, false, true)), false || (bool(bvec4(_GLF_IDENTITY(true && (injectionSwitch.x > injectionSwitch.y), ! (! (true && (injectionSwitch.x > injectionSwitch.y)))), true, false, true)))))))))))))
              {
               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, true, false))), (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true)), (_GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true)), ! (! (bool(bvec3(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true)))))) || false)), true && (! (_GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true)), (_GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true)), ! (! (bool(bvec3(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true)))))) || false))))))))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                }
               else
                {
                 for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) / 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((1 | 0), _GLF_IDENTITY(((1 | 0)) + 0, min(((1 | 0)) + 0, ((1 | 0)) + 0)))); _GLF_IDENTITY(_injected_loop_counter ++, _GLF_IDENTITY((_injected_loop_counter ++), _GLF_IDENTITY(((_injected_loop_counter ++)), (false ? _GLF_FUZZED(_injected_loop_counter) : ((_injected_loop_counter ++)))) - 0) ^ 0))
                  {
                   do
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       barrier();
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                   barrier();
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2(injectionSwitch, 1.0, 0.0)), max(vec2(mat2(injectionSwitch, 1.0, 0.0)), vec2(mat2(injectionSwitch, 1.0, 0.0))))).x > injectionSwitch.y))))
                  barrier();
                }
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-998.431) : injectionSwitch.y)), injectionSwitch.y)))), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-998.431) : injectionSwitch.y)), injectionSwitch.y)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                }
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
                  barrier();
                }
              }
            }
           else
            {
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))), true && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))))))), ! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-3.6)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) > injectionSwitch.y)))))), false || _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! _GLF_IDENTITY((! ((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true && ((! ((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false, false)))), false || _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! ((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! ((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))), (! (bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! ((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))))))))) || false)))), ! (! (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))), false || _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(9.5) : injectionSwitch.y)))))), ! (! ((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! ((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))), (! (bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! ((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))) || false))))))))))), false || ((_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-3.6)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) > injectionSwitch.y)))))), false || _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! _GLF_IDENTITY((! ((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true && ((! ((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false, false)))), false || _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! ((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! ((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))), (! (bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! ((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))))))))) || false)))), ! (! (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))), false || _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(9.5) : injectionSwitch.y)))))), ! (! ((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! ((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))), (! (bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! ((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))) || false))))))))))))))))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(false, (false) && true)) || false)))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   barrier();
                  }
                }
               if(_GLF_DEAD(false))
                barrier();
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && true))))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(false, false || (false)) || (injectionSwitch.x > injectionSwitch.y))) && true)), true && (! _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)), bool(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)), bool(bvec3((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)), false, true))), true, _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))))))))))))))
                barrier();
               barrier();
              }
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
        }
      }
     buf[virtual_gid] = uint(subgroupAllEqual(read_val));
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
          barrier();
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + sqrt(0.0))) - 0.0)))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(false, true)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) && true)))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
}
