#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_12 {
 uvec4 _f0;
 mat4x3 _f1;
} ;

struct _GLF_struct_13 {
 vec2 _f0;
 _GLF_struct_12 _f1;
 bool _f2;
 mat2x3 _f3;
 bvec3 _f4;
} ;

struct _GLF_struct_10 {
 vec2 _f0;
 vec4 _f1;
 mat3 _f2;
 uvec2 _f3;
} ;

struct _GLF_struct_9 {
 bvec3 _f0;
 ivec4 _f1;
 mat2 _f2;
 mat2x3 _f3;
 mat3x4 _f4;
} ;

struct _GLF_struct_8 {
 mat2x4 _f0;
 uvec4 _f1;
 int _f2;
 mat2 _f3;
} ;

struct _GLF_struct_7 {
 ivec4 _f0;
 mat2 _f1;
 ivec4 _f2;
} ;

struct _GLF_struct_11 {
 _GLF_struct_7 _f0;
 _GLF_struct_8 _f1;
 _GLF_struct_9 _f2;
 _GLF_struct_10 _f3;
} ;

struct _GLF_struct_5 {
 mat3x4 _f0;
 bvec3 _f1;
 uvec3 _f2;
 mat3x4 _f3;
} ;

struct _GLF_struct_4 {
 vec2 _f0;
 mat3 _f1;
 vec2 _f2;
 uvec3 _f3;
} ;

struct _GLF_struct_3 {
 mat3 _f0;
 uvec2 _f1;
 mat4x3 _f2;
 int _f3;
} ;

struct _GLF_struct_6 {
 _GLF_struct_3 _f0;
 _GLF_struct_4 _f1;
 ivec3 _f2;
 mat4 _f3;
 _GLF_struct_5 _f4;
} ;

struct _GLF_struct_14 {
 mat3x2 _f0;
 _GLF_struct_6 _f1;
 _GLF_struct_11 _f2;
 uint _f3;
 mat4x2 _f4;
 int _injected_loop_counter;
 bvec3 _f5;
 _GLF_struct_13 _f6;
} ;

struct _GLF_struct_0 {
 int _f0;
 vec2 _f1;
} ;

struct _GLF_struct_1 {
 _GLF_struct_0 _f0;
 uint virtual_gid;
} ;

struct _GLF_struct_2 {
 bvec4 _f0;
 bvec2 _f1;
 _GLF_struct_1 _f2;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
uint subgroup_size = 16;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 _GLF_struct_2 _GLF_struct_replacement_2 = _GLF_struct_2(bvec4(true), bvec2(true), _GLF_struct_1(_GLF_struct_0(1, vec2(1.0)), workgroup_base + subgroup_id * subgroup_size + subgroup_local_id));
 for(_GLF_struct_14 _GLF_struct_replacement_14 = _GLF_struct_14(mat3x2(1.0), _GLF_struct_6(_GLF_struct_3(mat3(1.0), uvec2(1u), mat4x3(1.0), 1), _GLF_struct_4(vec2(1.0), mat3(1.0), vec2(1.0), uvec3(1u)), ivec3(1), mat4(1.0), _GLF_struct_5(mat3x4(1.0), bvec3(true), uvec3(1u), mat3x4(1.0))), _GLF_struct_11(_GLF_struct_7(ivec4(1), mat2(1.0), ivec4(1)), _GLF_struct_8(mat2x4(1.0), uvec4(1u), 1, mat2(1.0)), _GLF_struct_9(bvec3(true), ivec4(1), mat2(1.0), mat2x3(1.0), mat3x4(1.0)), _GLF_struct_10(vec2(1.0), vec4(1.0), mat3(1.0), uvec2(1u))), 1u, mat4x2(1.0), ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))), bvec3(true), _GLF_struct_13(vec2(1.0), _GLF_struct_12(uvec4(1u), mat4x3(1.0)), true, mat2x3(1.0), bvec3(true))); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_14._injected_loop_counter != 0); _GLF_struct_replacement_14._injected_loop_counter --)
  {
   atomicStore(write_val, uint(_GLF_struct_replacement_2._f2.virtual_gid), 4, 64, 0);
  }
 uint read_val = atomicLoad(write_val, 4, 64, 0);
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   buf[_GLF_struct_replacement_2._f2.virtual_gid] = uint(subgroupAllEqual(read_val));
  }
}
