#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    return;
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (0) ^ 0)); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     return;
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false)))));
  }
uint subgroup_size = 16;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        return;
      }
     return;
    }
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          continue;
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) * 1))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), max(_GLF_IDENTITY(int(2), (int(2)) * 1), _GLF_IDENTITY(_GLF_IDENTITY(int(2), clamp(int(2), int(2), int(_GLF_IDENTITY(2, (2) | (_GLF_IDENTITY(2, min(_GLF_IDENTITY(2, min(2, 2)), _GLF_IDENTITY(2, clamp(2, 2, 2))))))))), clamp(_GLF_IDENTITY(int(2), clamp(int(2), int(2), int(_GLF_IDENTITY(2, (2) | (_GLF_IDENTITY(2, min(_GLF_IDENTITY(2, min(2, 2)), _GLF_IDENTITY(2, clamp(2, 2, 2))))))))), _GLF_IDENTITY(int(2), clamp(int(2), int(2), int(_GLF_IDENTITY(2, (2) | (_GLF_IDENTITY(2, min(_GLF_IDENTITY(2, min(2, 2)), _GLF_IDENTITY(2, clamp(2, 2, 2))))))))), _GLF_IDENTITY(int(2), clamp(int(2), int(2), int(_GLF_IDENTITY(2, (2) | (_GLF_IDENTITY(2, min(_GLF_IDENTITY(2, min(2, 2)), _GLF_IDENTITY(2, clamp(2, 2, 2)))))))))))))))); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              return;
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        continue;
       break;
      }
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec3((injectionSwitch.x < injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))))
      {
      }
     else
      {
       return;
      }
    }
  }
 else
  {
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   do
    {
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(uvec3(0u, 0u, _GLF_IDENTITY(0u, ~ (~ (0u)))) ^ _GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups)), max(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(0u, 0u, 0u) ^ (_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, ~ (~ (gl_NumWorkGroups))))))), _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups)), uvec3(0u, 0u, 0u) ^ (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups))))))) | (gl_NumWorkGroups))), (false ? _GLF_FUZZED(uvec3(194673u, 124519u, 123998u)) : _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | (gl_NumWorkGroups))), clamp((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(uvec3(uvec3(_GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups)))), uvec3(0u, 0u, 0u) ^ (uvec3(uvec3(_GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups))))))), (gl_NumWorkGroups) | (gl_NumWorkGroups)), (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | (gl_NumWorkGroups))) ^ _GLF_IDENTITY(uvec3(0u, 0u, 0u), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? uvec3(0u, 0u, 0u) : _GLF_FUZZED(uvec3(103305u, 179126u, 120184u)))))), _GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | _GLF_IDENTITY((gl_NumWorkGroups), ((gl_NumWorkGroups)) - (_GLF_IDENTITY(uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u), clamp(uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u), uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u), _GLF_IDENTITY(uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u), (true ? uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u) : _GLF_FUZZED(uvec3(87010u, 157479u, 7399u)))))))))), uvec3(0u, 0u, 0u) + ((_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) * uvec3(1u, 1u, 1u)), (gl_NumWorkGroups) | _GLF_IDENTITY((gl_NumWorkGroups), ((gl_NumWorkGroups)) - (uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u))))))), (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(_GLF_IDENTITY(0u, min(0u, 0u)), 0u, 0u) | (gl_NumWorkGroups)), _GLF_IDENTITY((gl_NumWorkGroups) | (gl_NumWorkGroups), max((gl_NumWorkGroups) | (gl_NumWorkGroups), (gl_NumWorkGroups) | (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], gl_NumWorkGroups[2]))))))))), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | (gl_NumWorkGroups))), clamp((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(uvec3(uvec3(_GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups)))), uvec3(0u, 0u, 0u) ^ (uvec3(uvec3(_GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups))))))), (gl_NumWorkGroups) | (gl_NumWorkGroups)), (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | (gl_NumWorkGroups))) ^ _GLF_IDENTITY(uvec3(0u, 0u, 0u), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? uvec3(0u, 0u, 0u) : _GLF_FUZZED(uvec3(103305u, 179126u, 120184u)))))), _GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | _GLF_IDENTITY((gl_NumWorkGroups), ((gl_NumWorkGroups)) - (_GLF_IDENTITY(uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u), clamp(uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u), uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u), _GLF_IDENTITY(uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u), (true ? uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u) : _GLF_FUZZED(uvec3(87010u, 157479u, 7399u)))))))))), uvec3(0u, 0u, 0u) + ((_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) * uvec3(1u, 1u, 1u)), (gl_NumWorkGroups) | _GLF_IDENTITY((gl_NumWorkGroups), ((gl_NumWorkGroups)) - (uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u))))))), (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(_GLF_IDENTITY(0u, min(0u, 0u)), 0u, 0u) | (gl_NumWorkGroups)), _GLF_IDENTITY((gl_NumWorkGroups) | (gl_NumWorkGroups), max((gl_NumWorkGroups) | (gl_NumWorkGroups), (gl_NumWorkGroups) | (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], gl_NumWorkGroups[2]))))))))), (true ? _GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | (gl_NumWorkGroups))), clamp((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(uvec3(uvec3(_GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups)))), uvec3(0u, 0u, 0u) ^ (uvec3(uvec3(_GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups))))))), (gl_NumWorkGroups) | (gl_NumWorkGroups)), (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | (gl_NumWorkGroups))) ^ _GLF_IDENTITY(uvec3(0u, 0u, 0u), (_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) || false)) ? uvec3(0u, 0u, 0u) : _GLF_FUZZED(uvec3(103305u, 179126u, 120184u)))))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | _GLF_IDENTITY((gl_NumWorkGroups), ((gl_NumWorkGroups)) - (_GLF_IDENTITY(uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u), clamp(uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u), uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u), _GLF_IDENTITY(uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u), (true ? uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u) : _GLF_FUZZED(uvec3(87010u, 157479u, 7399u))))))))), uvec3(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | _GLF_IDENTITY((gl_NumWorkGroups), ((gl_NumWorkGroups)) - (_GLF_IDENTITY(uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u), clamp(uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u), uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u), _GLF_IDENTITY(uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u), (true ? uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u) : _GLF_FUZZED(uvec3(87010u, 157479u, 7399u))))))))), (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | _GLF_IDENTITY((gl_NumWorkGroups), ((gl_NumWorkGroups)) - (_GLF_IDENTITY(uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u), clamp(uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u), uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u), _GLF_IDENTITY(uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u), (true ? uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u) : _GLF_FUZZED(uvec3(87010u, 157479u, 7399u)))))))))) | uvec3(0u, 0u, 0u)))))), uvec3(0u, 0u, 0u) + ((_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) * uvec3(1u, 1u, 1u)), (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups))) | _GLF_IDENTITY((gl_NumWorkGroups), ((gl_NumWorkGroups)) - (uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u))))))), (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(_GLF_IDENTITY(0u, min(0u, 0u)), 0u, 0u) | (gl_NumWorkGroups)), _GLF_IDENTITY((gl_NumWorkGroups) | (gl_NumWorkGroups), max((gl_NumWorkGroups) | (gl_NumWorkGroups), (gl_NumWorkGroups) | (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], gl_NumWorkGroups[2]))))))))) : _GLF_FUZZED((+ uvec3(90873u, 183192u, 161188u)))))) / uvec3(1u, 1u, 1u)))), (_GLF_IDENTITY(uvec3(0u, 0u, _GLF_IDENTITY(0u, ~ (~ (0u)))), uvec3(uvec3(uvec3(0u, 0u, _GLF_IDENTITY(0u, ~ (~ (0u))))))) ^ _GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups)), max(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(0u, 0u, 0u) ^ (_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, ~ (~ (gl_NumWorkGroups))))))), _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups)), uvec3(0u, 0u, 0u) ^ (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups))))))) | (gl_NumWorkGroups))), (false ? _GLF_FUZZED(uvec3(194673u, 124519u, 123998u)) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | (gl_NumWorkGroups))), clamp((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(uvec3(uvec3(_GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups)))), uvec3(0u, 0u, 0u) ^ (uvec3(uvec3(_GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups))))))), (gl_NumWorkGroups) | (gl_NumWorkGroups)), (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | (gl_NumWorkGroups))) ^ _GLF_IDENTITY(uvec3(0u, 0u, 0u), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? uvec3(0u, 0u, 0u) : _GLF_FUZZED(uvec3(103305u, 179126u, 120184u)))))), _GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | _GLF_IDENTITY((gl_NumWorkGroups), ((gl_NumWorkGroups)) - (_GLF_IDENTITY(uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u), clamp(uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u), uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u), _GLF_IDENTITY(uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u), (true ? uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u) : _GLF_FUZZED(uvec3(87010u, 157479u, 7399u)))))))))), uvec3(0u, 0u, 0u) + ((_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) * uvec3(1u, 1u, 1u)), (gl_NumWorkGroups) | _GLF_IDENTITY((gl_NumWorkGroups), ((gl_NumWorkGroups)) - (uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u))))))), (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(_GLF_IDENTITY(0u, min(0u, 0u)), 0u, 0u) | (gl_NumWorkGroups)), _GLF_IDENTITY((gl_NumWorkGroups) | (gl_NumWorkGroups), max((gl_NumWorkGroups) | (gl_NumWorkGroups), (gl_NumWorkGroups) | (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], gl_NumWorkGroups[2]))))))))), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | (gl_NumWorkGroups))), clamp((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(uvec3(uvec3(_GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups)))), uvec3(0u, 0u, 0u) ^ (uvec3(uvec3(_GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups))))))), (gl_NumWorkGroups) | (gl_NumWorkGroups)), (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | (gl_NumWorkGroups))) ^ _GLF_IDENTITY(uvec3(0u, 0u, 0u), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? uvec3(0u, 0u, 0u) : _GLF_FUZZED(uvec3(103305u, 179126u, 120184u)))))), _GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | _GLF_IDENTITY((gl_NumWorkGroups), ((gl_NumWorkGroups)) - (_GLF_IDENTITY(uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u), clamp(uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u), uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u), _GLF_IDENTITY(uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u), (true ? uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u) : _GLF_FUZZED(uvec3(87010u, 157479u, 7399u)))))))))), uvec3(0u, 0u, 0u) + ((_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) * uvec3(1u, 1u, 1u)), (gl_NumWorkGroups) | _GLF_IDENTITY((gl_NumWorkGroups), ((gl_NumWorkGroups)) - (uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u))))))), (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(_GLF_IDENTITY(0u, min(0u, 0u)), 0u, 0u) | (gl_NumWorkGroups)), _GLF_IDENTITY((gl_NumWorkGroups) | (gl_NumWorkGroups), max((gl_NumWorkGroups) | (gl_NumWorkGroups), (gl_NumWorkGroups) | (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], gl_NumWorkGroups[2]))))))))), (true ? _GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | (gl_NumWorkGroups))), clamp((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(uvec3(uvec3(_GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups)))), uvec3(0u, 0u, 0u) ^ (uvec3(uvec3(_GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups))))))), (gl_NumWorkGroups) | (gl_NumWorkGroups)), (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | (gl_NumWorkGroups))) ^ _GLF_IDENTITY(uvec3(0u, 0u, 0u), (_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) || false)) ? uvec3(0u, 0u, 0u) : _GLF_FUZZED(uvec3(103305u, 179126u, 120184u)))))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | _GLF_IDENTITY((gl_NumWorkGroups), ((gl_NumWorkGroups)) - (_GLF_IDENTITY(uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u), clamp(uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u), uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u), _GLF_IDENTITY(uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u), (true ? uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u) : _GLF_FUZZED(uvec3(87010u, 157479u, 7399u))))))))), uvec3(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | _GLF_IDENTITY((gl_NumWorkGroups), ((gl_NumWorkGroups)) - (_GLF_IDENTITY(uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u), clamp(uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u), uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u), _GLF_IDENTITY(uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u), (true ? uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u) : _GLF_FUZZED(uvec3(87010u, 157479u, 7399u))))))))), (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | _GLF_IDENTITY((gl_NumWorkGroups), ((gl_NumWorkGroups)) - (_GLF_IDENTITY(uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u), clamp(uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u), uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u), _GLF_IDENTITY(uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u), (true ? uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u) : _GLF_FUZZED(uvec3(87010u, 157479u, 7399u)))))))))) | uvec3(0u, 0u, 0u)))))), uvec3(0u, 0u, 0u) + ((_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) * uvec3(1u, 1u, 1u)), (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups))) | _GLF_IDENTITY((gl_NumWorkGroups), ((gl_NumWorkGroups)) - (uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u))))))), (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(_GLF_IDENTITY(0u, min(0u, 0u)), 0u, 0u) | (gl_NumWorkGroups)), _GLF_IDENTITY((gl_NumWorkGroups) | (gl_NumWorkGroups), max((gl_NumWorkGroups) | (gl_NumWorkGroups), (gl_NumWorkGroups) | (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], gl_NumWorkGroups[2]))))))))) : _GLF_FUZZED((+ uvec3(90873u, 183192u, 161188u)))))) / uvec3(1u, 1u, 1u)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | (gl_NumWorkGroups))), clamp((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(uvec3(uvec3(_GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups)))), uvec3(0u, 0u, 0u) ^ (uvec3(uvec3(_GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups))))))), (gl_NumWorkGroups) | (gl_NumWorkGroups)), (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | (gl_NumWorkGroups))) ^ _GLF_IDENTITY(uvec3(0u, 0u, 0u), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? uvec3(0u, 0u, 0u) : _GLF_FUZZED(uvec3(103305u, 179126u, 120184u)))))), _GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | _GLF_IDENTITY((gl_NumWorkGroups), ((gl_NumWorkGroups)) - (_GLF_IDENTITY(uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u), clamp(uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u), uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u), _GLF_IDENTITY(uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u), (true ? uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u) : _GLF_FUZZED(uvec3(87010u, 157479u, 7399u)))))))))), uvec3(0u, 0u, 0u) + ((_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) * uvec3(1u, 1u, 1u)), (gl_NumWorkGroups) | _GLF_IDENTITY((gl_NumWorkGroups), ((gl_NumWorkGroups)) - (uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u))))))), (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(_GLF_IDENTITY(0u, min(0u, 0u)), 0u, 0u) | (gl_NumWorkGroups)), _GLF_IDENTITY((gl_NumWorkGroups) | (gl_NumWorkGroups), max((gl_NumWorkGroups) | (gl_NumWorkGroups), (gl_NumWorkGroups) | (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], gl_NumWorkGroups[2]))))))))), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | (gl_NumWorkGroups))), clamp((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(uvec3(uvec3(_GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups)))), uvec3(0u, 0u, 0u) ^ (uvec3(uvec3(_GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups))))))), (gl_NumWorkGroups) | (gl_NumWorkGroups)), (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | (gl_NumWorkGroups))) ^ _GLF_IDENTITY(uvec3(0u, 0u, 0u), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? uvec3(0u, 0u, 0u) : _GLF_FUZZED(uvec3(103305u, 179126u, 120184u)))))), _GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | _GLF_IDENTITY((gl_NumWorkGroups), ((gl_NumWorkGroups)) - (_GLF_IDENTITY(uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u), clamp(uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u), uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u), _GLF_IDENTITY(uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u), (true ? uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u) : _GLF_FUZZED(uvec3(87010u, 157479u, 7399u)))))))))), uvec3(0u, 0u, 0u) + ((_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) * uvec3(1u, 1u, 1u)), (gl_NumWorkGroups) | _GLF_IDENTITY((gl_NumWorkGroups), ((gl_NumWorkGroups)) - (uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u))))))), (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(_GLF_IDENTITY(0u, min(0u, 0u)), 0u, 0u) | (gl_NumWorkGroups)), _GLF_IDENTITY((gl_NumWorkGroups) | (gl_NumWorkGroups), max((gl_NumWorkGroups) | (gl_NumWorkGroups), (gl_NumWorkGroups) | (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], gl_NumWorkGroups[2]))))))))), (true ? _GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | (gl_NumWorkGroups))), clamp((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(uvec3(uvec3(_GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups)))), uvec3(0u, 0u, 0u) ^ (uvec3(uvec3(_GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups))))))), (gl_NumWorkGroups) | (gl_NumWorkGroups)), (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | (gl_NumWorkGroups))) ^ _GLF_IDENTITY(uvec3(0u, 0u, 0u), (_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) || false)) ? uvec3(0u, 0u, 0u) : _GLF_FUZZED(uvec3(103305u, 179126u, 120184u)))))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | _GLF_IDENTITY((gl_NumWorkGroups), ((gl_NumWorkGroups)) - (_GLF_IDENTITY(uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u), clamp(uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u), uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u), _GLF_IDENTITY(uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u), (true ? uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u) : _GLF_FUZZED(uvec3(87010u, 157479u, 7399u))))))))), uvec3(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | _GLF_IDENTITY((gl_NumWorkGroups), ((gl_NumWorkGroups)) - (_GLF_IDENTITY(uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u), clamp(uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u), uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u), _GLF_IDENTITY(uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u), (true ? uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u) : _GLF_FUZZED(uvec3(87010u, 157479u, 7399u))))))))), (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | _GLF_IDENTITY((gl_NumWorkGroups), ((gl_NumWorkGroups)) - (_GLF_IDENTITY(uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u), clamp(uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u), uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u), _GLF_IDENTITY(uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u), (true ? uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u) : _GLF_FUZZED(uvec3(87010u, 157479u, 7399u)))))))))) | uvec3(0u, 0u, 0u)))))), uvec3(0u, 0u, 0u) + ((_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) * uvec3(1u, 1u, 1u)), (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups))) | _GLF_IDENTITY((gl_NumWorkGroups), ((gl_NumWorkGroups)) - (uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u))))))), (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(_GLF_IDENTITY(0u, min(0u, 0u)), 0u, 0u) | (gl_NumWorkGroups)), _GLF_IDENTITY((gl_NumWorkGroups) | (gl_NumWorkGroups), max((gl_NumWorkGroups) | (gl_NumWorkGroups), (gl_NumWorkGroups) | (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], gl_NumWorkGroups[2]))))))))) : _GLF_FUZZED((+ uvec3(90873u, 183192u, 161188u)))))) / uvec3(1u, 1u, 1u)), clamp(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | (gl_NumWorkGroups))), clamp((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(uvec3(uvec3(_GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups)))), uvec3(0u, 0u, 0u) ^ (uvec3(uvec3(_GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups))))))), (gl_NumWorkGroups) | (gl_NumWorkGroups)), (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | (gl_NumWorkGroups))) ^ _GLF_IDENTITY(uvec3(0u, 0u, 0u), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? uvec3(0u, 0u, 0u) : _GLF_FUZZED(uvec3(103305u, 179126u, 120184u)))))), _GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | _GLF_IDENTITY((gl_NumWorkGroups), ((gl_NumWorkGroups)) - (_GLF_IDENTITY(uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u), clamp(uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u), uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u), _GLF_IDENTITY(uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u), (true ? uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u) : _GLF_FUZZED(uvec3(87010u, 157479u, 7399u)))))))))), uvec3(0u, 0u, 0u) + ((_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) * uvec3(1u, 1u, 1u)), (gl_NumWorkGroups) | _GLF_IDENTITY((gl_NumWorkGroups), ((gl_NumWorkGroups)) - (uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u))))))), (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(_GLF_IDENTITY(0u, min(0u, 0u)), 0u, 0u) | (gl_NumWorkGroups)), _GLF_IDENTITY((gl_NumWorkGroups) | (gl_NumWorkGroups), max((gl_NumWorkGroups) | (gl_NumWorkGroups), (gl_NumWorkGroups) | (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], gl_NumWorkGroups[2]))))))))), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | (gl_NumWorkGroups))), clamp((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(uvec3(uvec3(_GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups)))), uvec3(0u, 0u, 0u) ^ (uvec3(uvec3(_GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups))))))), (gl_NumWorkGroups) | (gl_NumWorkGroups)), (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | (gl_NumWorkGroups))) ^ _GLF_IDENTITY(uvec3(0u, 0u, 0u), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? uvec3(0u, 0u, 0u) : _GLF_FUZZED(uvec3(103305u, 179126u, 120184u)))))), _GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | _GLF_IDENTITY((gl_NumWorkGroups), ((gl_NumWorkGroups)) - (_GLF_IDENTITY(uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u), clamp(uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u), uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u), _GLF_IDENTITY(uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u), (true ? uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u) : _GLF_FUZZED(uvec3(87010u, 157479u, 7399u)))))))))), uvec3(0u, 0u, 0u) + ((_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) * uvec3(1u, 1u, 1u)), (gl_NumWorkGroups) | _GLF_IDENTITY((gl_NumWorkGroups), ((gl_NumWorkGroups)) - (uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u))))))), (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(_GLF_IDENTITY(0u, min(0u, 0u)), 0u, 0u) | (gl_NumWorkGroups)), _GLF_IDENTITY((gl_NumWorkGroups) | (gl_NumWorkGroups), max((gl_NumWorkGroups) | (gl_NumWorkGroups), (gl_NumWorkGroups) | (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], gl_NumWorkGroups[2]))))))))), (true ? _GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | (gl_NumWorkGroups))), clamp((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(uvec3(uvec3(_GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups)))), uvec3(0u, 0u, 0u) ^ (uvec3(uvec3(_GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups))))))), (gl_NumWorkGroups) | (gl_NumWorkGroups)), (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | (gl_NumWorkGroups))) ^ _GLF_IDENTITY(uvec3(0u, 0u, 0u), (_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) || false)) ? uvec3(0u, 0u, 0u) : _GLF_FUZZED(uvec3(103305u, 179126u, 120184u)))))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | _GLF_IDENTITY((gl_NumWorkGroups), ((gl_NumWorkGroups)) - (_GLF_IDENTITY(uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u), clamp(uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u), uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u), _GLF_IDENTITY(uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u), (true ? uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u) : _GLF_FUZZED(uvec3(87010u, 157479u, 7399u))))))))), uvec3(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | _GLF_IDENTITY((gl_NumWorkGroups), ((gl_NumWorkGroups)) - (_GLF_IDENTITY(uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u), clamp(uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u), uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u), _GLF_IDENTITY(uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u), (true ? uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u) : _GLF_FUZZED(uvec3(87010u, 157479u, 7399u))))))))), (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | _GLF_IDENTITY((gl_NumWorkGroups), ((gl_NumWorkGroups)) - (_GLF_IDENTITY(uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u), clamp(uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u), uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u), _GLF_IDENTITY(uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u), (true ? uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u) : _GLF_FUZZED(uvec3(87010u, 157479u, 7399u)))))))))) | uvec3(0u, 0u, 0u)))))), uvec3(0u, 0u, 0u) + ((_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) * uvec3(1u, 1u, 1u)), (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups))) | _GLF_IDENTITY((gl_NumWorkGroups), ((gl_NumWorkGroups)) - (uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u))))))), (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(_GLF_IDENTITY(0u, min(0u, 0u)), 0u, 0u) | (gl_NumWorkGroups)), _GLF_IDENTITY((gl_NumWorkGroups) | (gl_NumWorkGroups), max((gl_NumWorkGroups) | (gl_NumWorkGroups), (gl_NumWorkGroups) | (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], gl_NumWorkGroups[2]))))))))) : _GLF_FUZZED((+ uvec3(90873u, 183192u, 161188u)))))) / uvec3(1u, 1u, 1u)), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | (gl_NumWorkGroups))), clamp((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(uvec3(uvec3(_GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups)))), uvec3(0u, 0u, 0u) ^ (uvec3(uvec3(_GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups))))))), (gl_NumWorkGroups) | (gl_NumWorkGroups)), (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | (gl_NumWorkGroups))) ^ _GLF_IDENTITY(uvec3(0u, 0u, 0u), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? uvec3(0u, 0u, 0u) : _GLF_FUZZED(uvec3(103305u, 179126u, 120184u)))))), _GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | _GLF_IDENTITY((gl_NumWorkGroups), ((gl_NumWorkGroups)) - (_GLF_IDENTITY(uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u), clamp(uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u), uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u), _GLF_IDENTITY(uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u), (true ? uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u) : _GLF_FUZZED(uvec3(87010u, 157479u, 7399u)))))))))), uvec3(0u, 0u, 0u) + ((_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) * uvec3(1u, 1u, 1u)), (gl_NumWorkGroups) | _GLF_IDENTITY((gl_NumWorkGroups), ((gl_NumWorkGroups)) - (uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u))))))), (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(_GLF_IDENTITY(0u, min(0u, 0u)), 0u, 0u) | (gl_NumWorkGroups)), _GLF_IDENTITY((gl_NumWorkGroups) | (gl_NumWorkGroups), max((gl_NumWorkGroups) | (gl_NumWorkGroups), (gl_NumWorkGroups) | (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], gl_NumWorkGroups[2]))))))))), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | (gl_NumWorkGroups))), clamp((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(uvec3(uvec3(_GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups)))), uvec3(0u, 0u, 0u) ^ (uvec3(uvec3(_GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups))))))), (gl_NumWorkGroups) | (gl_NumWorkGroups)), (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | (gl_NumWorkGroups))) ^ _GLF_IDENTITY(uvec3(0u, 0u, 0u), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? uvec3(0u, 0u, 0u) : _GLF_FUZZED(uvec3(103305u, 179126u, 120184u)))))), _GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | _GLF_IDENTITY((gl_NumWorkGroups), ((gl_NumWorkGroups)) - (_GLF_IDENTITY(uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u), clamp(uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u), uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u), _GLF_IDENTITY(uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u), (true ? uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u) : _GLF_FUZZED(uvec3(87010u, 157479u, 7399u)))))))))), uvec3(0u, 0u, 0u) + ((_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) * uvec3(1u, 1u, 1u)), (gl_NumWorkGroups) | _GLF_IDENTITY((gl_NumWorkGroups), ((gl_NumWorkGroups)) - (uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u))))))), (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(_GLF_IDENTITY(0u, min(0u, 0u)), 0u, 0u) | (gl_NumWorkGroups)), _GLF_IDENTITY((gl_NumWorkGroups) | (gl_NumWorkGroups), max((gl_NumWorkGroups) | (gl_NumWorkGroups), (gl_NumWorkGroups) | (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], gl_NumWorkGroups[2]))))))))), (true ? _GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | (gl_NumWorkGroups))), clamp((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(uvec3(uvec3(_GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups)))), uvec3(0u, 0u, 0u) ^ (uvec3(uvec3(_GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups))))))), (gl_NumWorkGroups) | (gl_NumWorkGroups)), (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | (gl_NumWorkGroups))) ^ _GLF_IDENTITY(uvec3(0u, 0u, 0u), (_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) || false)) ? uvec3(0u, 0u, 0u) : _GLF_FUZZED(uvec3(103305u, 179126u, 120184u)))))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | _GLF_IDENTITY((gl_NumWorkGroups), ((gl_NumWorkGroups)) - (_GLF_IDENTITY(uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u), clamp(uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u), uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u), _GLF_IDENTITY(uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u), (true ? uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u) : _GLF_FUZZED(uvec3(87010u, 157479u, 7399u))))))))), uvec3(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | _GLF_IDENTITY((gl_NumWorkGroups), ((gl_NumWorkGroups)) - (_GLF_IDENTITY(uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u), clamp(uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u), uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u), _GLF_IDENTITY(uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u), (true ? uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u) : _GLF_FUZZED(uvec3(87010u, 157479u, 7399u))))))))), (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | _GLF_IDENTITY((gl_NumWorkGroups), ((gl_NumWorkGroups)) - (_GLF_IDENTITY(uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u), clamp(uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u), uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u), _GLF_IDENTITY(uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u), (true ? uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u) : _GLF_FUZZED(uvec3(87010u, 157479u, 7399u)))))))))) | uvec3(0u, 0u, 0u)))))), uvec3(0u, 0u, 0u) + ((_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) * uvec3(1u, 1u, 1u)), (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups))) | _GLF_IDENTITY((gl_NumWorkGroups), ((gl_NumWorkGroups)) - (uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u))))))), (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(_GLF_IDENTITY(0u, min(0u, 0u)), 0u, 0u) | (gl_NumWorkGroups)), _GLF_IDENTITY((gl_NumWorkGroups) | (gl_NumWorkGroups), max((gl_NumWorkGroups) | (gl_NumWorkGroups), (gl_NumWorkGroups) | (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], gl_NumWorkGroups[2]))))))))) : _GLF_FUZZED((+ uvec3(90873u, 183192u, 161188u)))))) / uvec3(1u, 1u, 1u)), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | (gl_NumWorkGroups))), clamp((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(uvec3(uvec3(_GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups)))), uvec3(0u, 0u, 0u) ^ (uvec3(uvec3(_GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups))))))), (gl_NumWorkGroups) | (gl_NumWorkGroups)), (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | (gl_NumWorkGroups))) ^ _GLF_IDENTITY(uvec3(0u, 0u, 0u), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? uvec3(0u, 0u, 0u) : _GLF_FUZZED(uvec3(103305u, 179126u, 120184u)))))), _GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | _GLF_IDENTITY((gl_NumWorkGroups), ((gl_NumWorkGroups)) - (_GLF_IDENTITY(uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u), clamp(uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u), uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u), _GLF_IDENTITY(uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u), (true ? uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u) : _GLF_FUZZED(uvec3(87010u, 157479u, 7399u)))))))))), uvec3(0u, 0u, 0u) + ((_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) * uvec3(1u, 1u, 1u)), (gl_NumWorkGroups) | _GLF_IDENTITY((gl_NumWorkGroups), ((gl_NumWorkGroups)) - (uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u))))))), (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(_GLF_IDENTITY(0u, min(0u, 0u)), 0u, 0u) | (gl_NumWorkGroups)), _GLF_IDENTITY((gl_NumWorkGroups) | (gl_NumWorkGroups), max((gl_NumWorkGroups) | (gl_NumWorkGroups), (gl_NumWorkGroups) | (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], gl_NumWorkGroups[2]))))))))), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | (gl_NumWorkGroups))), clamp((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(uvec3(uvec3(_GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups)))), uvec3(0u, 0u, 0u) ^ (uvec3(uvec3(_GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups))))))), (gl_NumWorkGroups) | (gl_NumWorkGroups)), (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | (gl_NumWorkGroups))) ^ _GLF_IDENTITY(uvec3(0u, 0u, 0u), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? uvec3(0u, 0u, 0u) : _GLF_FUZZED(uvec3(103305u, 179126u, 120184u)))))), _GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | _GLF_IDENTITY((gl_NumWorkGroups), ((gl_NumWorkGroups)) - (_GLF_IDENTITY(uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u), clamp(uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u), uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u), _GLF_IDENTITY(uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u), (true ? uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u) : _GLF_FUZZED(uvec3(87010u, 157479u, 7399u)))))))))), uvec3(0u, 0u, 0u) + ((_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) * uvec3(1u, 1u, 1u)), (gl_NumWorkGroups) | _GLF_IDENTITY((gl_NumWorkGroups), ((gl_NumWorkGroups)) - (uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u))))))), (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(_GLF_IDENTITY(0u, min(0u, 0u)), 0u, 0u) | (gl_NumWorkGroups)), _GLF_IDENTITY((gl_NumWorkGroups) | (gl_NumWorkGroups), max((gl_NumWorkGroups) | (gl_NumWorkGroups), (gl_NumWorkGroups) | (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], gl_NumWorkGroups[2]))))))))), (true ? _GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | (gl_NumWorkGroups))), clamp((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(uvec3(uvec3(_GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups)))), uvec3(0u, 0u, 0u) ^ (uvec3(uvec3(_GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups))))))), (gl_NumWorkGroups) | (gl_NumWorkGroups)), (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | (gl_NumWorkGroups))) ^ _GLF_IDENTITY(uvec3(0u, 0u, 0u), (_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) || false)) ? uvec3(0u, 0u, 0u) : _GLF_FUZZED(uvec3(103305u, 179126u, 120184u)))))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | _GLF_IDENTITY((gl_NumWorkGroups), ((gl_NumWorkGroups)) - (_GLF_IDENTITY(uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u), clamp(uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u), uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u), _GLF_IDENTITY(uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u), (true ? uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u) : _GLF_FUZZED(uvec3(87010u, 157479u, 7399u))))))))), uvec3(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | _GLF_IDENTITY((gl_NumWorkGroups), ((gl_NumWorkGroups)) - (_GLF_IDENTITY(uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u), clamp(uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u), uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u), _GLF_IDENTITY(uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u), (true ? uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u) : _GLF_FUZZED(uvec3(87010u, 157479u, 7399u))))))))), (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | _GLF_IDENTITY((gl_NumWorkGroups), ((gl_NumWorkGroups)) - (_GLF_IDENTITY(uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u), clamp(uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u), uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u), _GLF_IDENTITY(uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u), (true ? uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u) : _GLF_FUZZED(uvec3(87010u, 157479u, 7399u)))))))))) | uvec3(0u, 0u, 0u)))))), uvec3(0u, 0u, 0u) + ((_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) * uvec3(1u, 1u, 1u)), (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups))) | _GLF_IDENTITY((gl_NumWorkGroups), ((gl_NumWorkGroups)) - (uvec3(0u, 0u, 0u) & uvec3(100192u, 146342u, 17366u))))))), (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(_GLF_IDENTITY(0u, min(0u, 0u)), 0u, 0u) | (gl_NumWorkGroups)), _GLF_IDENTITY((gl_NumWorkGroups) | (gl_NumWorkGroups), max((gl_NumWorkGroups) | (gl_NumWorkGroups), (gl_NumWorkGroups) | (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], gl_NumWorkGroups[2]))))))))) : _GLF_FUZZED((+ uvec3(90873u, 183192u, 161188u)))))) / uvec3(1u, 1u, 1u))))) << uvec3(0u, 0u, 0u))))) * uvec3(1u, 1u, 1u))).x;
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), (! (! (false))) && true)), true)))))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(9127.9300), _GLF_FUZZED((_GLF_IDENTITY(+ -81.71, float(_GLF_IDENTITY(vec3(+ -81.71, 1.0, 0.0), min(vec3(+ -81.71, 1.0, 0.0), vec3(+ -81.71, 1.0, 0.0)))))))), bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          break;
         return;
        }
       return;
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true)))))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
            return;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           return;
          }
         break;
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
          }
        }
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
      return;
    }
   else
    {
    }
   do
    {
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)), bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | _GLF_IDENTITY(0, clamp(0, 0, 0)))), true), bvec2(bvec2(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)), true)))))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y))))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), _GLF_IDENTITY(_GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && (bool(false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(true, (true) && _GLF_TRUE(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (! (true))))), (injectionSwitch.x < injectionSwitch.y))) && (bool(false))))))), (injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter --)
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        return;
      }
    }
   return;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! _GLF_IDENTITY((! (injectionSwitch.x < injectionSwitch.y)), ! (_GLF_IDENTITY(! ((! (injectionSwitch.x < injectionSwitch.y))), bool(bvec3(_GLF_IDENTITY(! ((! (injectionSwitch.x < injectionSwitch.y))), bool(bvec3(! ((! (injectionSwitch.x < injectionSwitch.y))), false, true))), false, false))))))))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (-86089 & 0)); _injected_loop_counter --)
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (false) && true), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)).y))))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              return;
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
               for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), abs(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))), 0.0, cos(0.0), length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, abs(1.0)), (false ? _GLF_FUZZED(mat3(-5344.5533, 432.482, 96.32, 2444.6040, -9659.4069, 1.2, -1.3, -1.4, 1.0)) : mat3(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), abs(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))), 0.0, cos(0.0), length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, abs(1.0))))), (true ? vec2(_GLF_IDENTITY(mat3(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), abs(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))), 0.0, cos(0.0), length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, abs(1.0)), (false ? _GLF_FUZZED(mat3(-5344.5533, 432.482, 96.32, 2444.6040, -9659.4069, 1.2, -1.3, -1.4, 1.0)) : mat3(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), abs(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))), 0.0, cos(0.0), length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, abs(1.0))))) : _GLF_FUZZED(vec2(-72.23, -9015.2136))))).x > injectionSwitch.y))))
                  return;
                }
              }
             else
              {
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(0), int(0)), (0 << _GLF_IDENTITY(int(0), int(0))) << 0)))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          return;
        }
      }
     for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
        return;
       return;
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         do
          {
           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               do
                {
                 if(_GLF_DEAD(false))
                  continue;
                 do
                  {
                   if(_GLF_DEAD(false))
                    {
                     do
                      {
                       return;
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], (false ? _GLF_FUZZED(-9.2) : injectionSwitch[0])), injectionSwitch[1])).x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))));
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  return;
                }
               else
                {
                }
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
              }
             if(_GLF_DEAD(false))
              return;
            }
           if(_GLF_DEAD(false))
            break;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       else
        {
        }
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), 0 + (int(_GLF_IDENTITY(2, (2) >> (0 << _GLF_IDENTITY(int(8), int(_GLF_IDENTITY(8, (8) / 1)))))))), (_GLF_IDENTITY(int(2), 0 + (int(_GLF_IDENTITY(2, (2) >> (0 << _GLF_IDENTITY(int(8), int(_GLF_IDENTITY(8, (8) / 1))))))))) / 1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (1) / 1)); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        break;
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         do
          {
           return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = (((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     return;
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
  return;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), _GLF_IDENTITY(false || (bool(bvec2(false, true))), ! (! (_GLF_IDENTITY(false || (bool(bvec2(false, true))), ! (! (false || (bool(bvec2(false, true)))))))))))))
  return;
 uint workgroup_base = _GLF_IDENTITY(workgroup_size, uint(uvec4(workgroup_size, uint(_GLF_ONE(1.0, injectionSwitch.y)), 0u, 1u))) * workgroup_id;
 do
  {
   do
    {
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
          }
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))) & 1)); _injected_loop_counter ++)
          {
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))
              {
               if(_GLF_DEAD(false))
                return;
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                  {
                   return;
                  }
                 if(_GLF_DEAD(false))
                  break;
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
        }
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       return;
      }
    }
  }
 else
  {
  }
 for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || _GLF_IDENTITY((true), ! (! ((true)))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x < injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))) < _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y)), (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(1.0, 1.0) * (injectionSwitch), (true ? vec2(1.0, 1.0) * (injectionSwitch) : _GLF_FUZZED(vec2(-37.38, 2.0))))).y))) && true)))), bool(bvec4(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y))))), true, false, true))))
          {
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> 0) > 0); _injected_loop_counter --)
            {
             return;
             if(_GLF_DEAD(false))
              break;
            }
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, ~ (_GLF_IDENTITY(~ (subgroup_id), ~ (~ (~ (subgroup_id)))))) * _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size) | (subgroup_size), _GLF_IDENTITY(uint(uint((subgroup_size) | (subgroup_size))), (uint(uint((subgroup_size) | (subgroup_size)))) | (uint(uint((subgroup_size) | (subgroup_size))))))), ~ (~ (workgroup_base + _GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size) | (subgroup_size), _GLF_IDENTITY(uint(uint((subgroup_size) | (subgroup_size))), (uint(uint((subgroup_size) | (subgroup_size)))) | (uint(uint((subgroup_size) | (_GLF_IDENTITY(subgroup_size, max(_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u), subgroup_size))))))))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? subgroup_id * _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size) | (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)), _GLF_IDENTITY(uint(uint((_GLF_IDENTITY(subgroup_size, (true ? subgroup_size : _GLF_FUZZED(workgroup_size)))) | _GLF_IDENTITY((subgroup_size), (true ? (subgroup_size) : _GLF_FUZZED(workgroup_base))))), (uint(uint((subgroup_size) | (subgroup_size)))) | (uint(uint((subgroup_size) | (_GLF_IDENTITY(subgroup_size, max(_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u), subgroup_size))))))))) : _GLF_FUZZED(write_val)))))) + subgroup_local_id;
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       do
        {
         for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, false)), ! (! (bool(bvec3(false, true, false))))))))
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_injected_loop_counter --, (true ? _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) + 0) : _GLF_FUZZED(_injected_loop_counter))))
            {
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 return;
                }
              }
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 return;
                }
               else
                {
                }
              }
             else
              {
               if(_GLF_DEAD(false))
                return;
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(false))
            break;
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, ! (_GLF_IDENTITY(! (_injected_loop_counter != 0), ! (! (! (_injected_loop_counter != 0))))))); _injected_loop_counter --)
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                return;
              }
             for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   for(int _injected_loop_counter = (_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), ~ (_GLF_IDENTITY(~ (int(2)), 0 | (~ (int(2))))))), (0 >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), _GLF_IDENTITY(~ (~ (int(2))), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (~ (~ (int(2)))))))) | 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _GLF_IDENTITY(_injected_loop_counter ++, 0 | (_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) / 1))))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       return;
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        continue;
                      }
                     if(_GLF_DEAD(false))
                      break;
                    }
                   if(_GLF_DEAD(false))
                    continue;
                  }
                }
              }
            }
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               if(_GLF_DEAD(false))
                break;
              }
             else
              {
               if(_GLF_DEAD(false))
                return;
              }
             do
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (_GLF_IDENTITY(! (false), bool(bvec2(! (false), false)))) && true))), (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                    return;
                  }
                 if(_GLF_DEAD(false))
                  break;
                }
               do
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      return;
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_DEAD(false))
                        {
                         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (88649 & 0)); _injected_loop_counter --)
                          {
                           return;
                          }
                        }
                       if(_GLF_DEAD(false))
                        continue;
                      }
                     else
                      {
                      }
                    }
                   else
                    {
                     do
                      {
                       return;
                       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                        {
                         if(_GLF_DEAD(false))
                          break;
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           return;
                          }
                         else
                          {
                          }
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) && true));
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           continue;
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      break;
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))));
 for(int _injected_loop_counter = _GLF_IDENTITY(((((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))) << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), min(int(1), int(1))))) >> _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, (false ? _GLF_FUZZED((mat3x4(-552.916, -99.35, -3247.0663, 1.7, -392.228, 6898.6019, -752.319, 254.893, -61.24, -23.91, -3.8, -374.986) , -42943)) : 1))))), (((((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(ivec3(int(5), 0, 1)), (int(ivec3(int(_GLF_IDENTITY(5, (_GLF_IDENTITY(true, _GLF_IDENTITY(! (! (true)), (! (! (true))) || false)) ? _GLF_IDENTITY(5, (5) - 0) : _GLF_FUZZED(-96542)))), 0, _GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, int(ivec3(1, 1, 1))), 1, 1))))))) ^ 0)))) >> _GLF_IDENTITY(int(5), int(5))) << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) >> 0)), min(int(1), int(1))))) >> _GLF_IDENTITY(int(1), int(1)))) << (int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x)) >> _GLF_IDENTITY(int(0), int(0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, ~ (~ (0)))); _injected_loop_counter --)
  {
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)) || false))
        return;
       if(_GLF_DEAD(false))
        break;
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-779.314)), float(injectionSwitch.y), bool(true)))))), _GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! (_GLF_IDENTITY(! (bool(bool(false))), bool(bool(! (bool(bool(false))))))))), bool(bool(false))) || (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x < injectionSwitch.y))), false, false))))))
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || (_GLF_WRAPPED_IF_TRUE(true)))), bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true))))) || false), false || (_GLF_WRAPPED_IF_TRUE(true))))), bool(bool(bool((_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || (_GLF_WRAPPED_IF_TRUE(true)))))))))))))
          {
           do
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                 do
                  {
                   for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                    {
                     return;
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
                }
               for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > ((0 & 92465) >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                  return;
                }
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   do
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       do
                        {
                         return;
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) || false)))))));
                      }
                     else
                      {
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                }
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
                return;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    continue;
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     return;
                    }
                   else
                    {
                    }
                  }
                 else
                  {
                  }
                }
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                return;
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              continue;
             return;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             do
              {
               do
                {
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_DEAD(false))
                  break;
                 return;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false))))
                  continue;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) > injectionSwitch.y))))
            break;
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                return;
              }
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                  {
                   return;
                  }
                }
              }
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               return;
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(! (! (false)), false), bvec2(bvec4(bvec2(! (! (false)), false), false, false)))), ! (! (bool(_GLF_IDENTITY(bvec2(! (! (false)), false), bvec2(bvec4(bvec2(! (! (false)), false), false, false))))))))), false, _GLF_IDENTITY(false, (false) || false)), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(! (! (false)), true && (_GLF_IDENTITY(! (! (false)), ! (! (! (! (false))))))), ! (! (_GLF_IDENTITY(! (! (false)), true && (_GLF_IDENTITY(! (! (false)), ! (! (! (! (false))))))))))), false, _GLF_IDENTITY(false, _GLF_IDENTITY((false), ((false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)), true)))))))
        continue;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
           for(int _injected_loop_counter = _GLF_IDENTITY(1, ~ (~ (1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(-77735 & _GLF_IDENTITY(_GLF_IDENTITY(0, max(0, 0)), min(_GLF_IDENTITY(0, _GLF_IDENTITY(max(0, 0), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(max(0, 0), max(max(0, 0), max(0, 0))), ((0 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(6), int(6))), 1, 0), (ivec4(_GLF_IDENTITY(max(0, 0), max(max(0, 0), max(_GLF_IDENTITY(0, int(ivec3(_GLF_IDENTITY(0, 0 | (0)), 1, 1))), 0))), ((0 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(6), int(6))), 1, 0)) << ivec4(0, 0, 0, 0))), (int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(max(0, 0), (false ? _GLF_FUZZED(int(-1.4)) : max(0, 0))), min(max(0, 0), _GLF_IDENTITY(max(0, 0), (max(0, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) - 0)) - 0))) ^ 0))), max(max(0, 0), max(0, 0))), ((_GLF_IDENTITY(0 << _GLF_IDENTITY(int(1), int(1)), min(0 << _GLF_IDENTITY(int(1), int(1)), 0 << _GLF_IDENTITY(int(1), int(1))))) >> _GLF_IDENTITY(int(6), int(6))), 1, 0), (ivec4(_GLF_IDENTITY(_GLF_IDENTITY(max(0, 0), max(max(0, 0), max(0, 0))), (_GLF_IDENTITY(_GLF_IDENTITY(max(0, 0), max(max(0, 0), max(0, 0))), (_GLF_IDENTITY(max(0, 0), max(max(0, 0), max(0, 0)))) | (_GLF_IDENTITY(max(0, 0), max(max(0, 0), max(0, 0)))))) | 0), ((0 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(6), int(6))), 1, 0)) << ivec4(0, 0, 0, 0)))) << 0))), _GLF_IDENTITY(_GLF_IDENTITY(0, max(0, 0)), clamp(_GLF_IDENTITY(0, max(0, 0)), _GLF_IDENTITY(0, max(0, 0)), _GLF_IDENTITY(0, max(0, 0)))))), (_GLF_IDENTITY(-77735, ~ (~ (-77735))) & _GLF_IDENTITY(_GLF_IDENTITY(0, max(0, 0)), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(0, 0, 0), ((ivec3(1, 1, 1) << _GLF_IDENTITY(ivec3(4), ivec3(4))) >> _GLF_IDENTITY(ivec3(4), ivec3(4))) * (_GLF_IDENTITY(_GLF_IDENTITY(ivec3(0, 0, 0), clamp(ivec3(0, 0, 0), ivec3(0, 0, 0), ivec3(0, 0, 0))), clamp(ivec3(0, _GLF_IDENTITY(0, (0) / 1), 0), ivec3(0, 0, 0), ivec3(0, 0, 0)))))), 0 ^ (int(_GLF_IDENTITY(ivec3(0, 0, 0), ((ivec3(1, _GLF_IDENTITY(1, clamp(1, 1, 1)), 1) << _GLF_IDENTITY(ivec3(4), ivec3(4))) >> _GLF_IDENTITY(_GLF_IDENTITY(ivec3(4), max(_GLF_IDENTITY(ivec3(4), (ivec3(4)) / ivec3(1, 1, 1)), ivec3(4))), ivec3(4))) * (_GLF_IDENTITY(ivec3(0, 0, 0), clamp(ivec3(0, 0, 0), ivec3(0, 0, 0), ivec3(0, 0, 0))))))))))), (_GLF_IDENTITY(0, max(0, 0))) / 1))), (~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(0, 0, 0), ((ivec3(1, 1, 1) << _GLF_IDENTITY(ivec3(4), ivec3(4))) >> _GLF_IDENTITY(ivec3(4), ivec3(4))) * (_GLF_IDENTITY(_GLF_IDENTITY(ivec3(0, 0, 0), clamp(ivec3(0, 0, 0), ivec3(0, 0, 0), ivec3(0, 0, 0))), clamp(ivec3(0, _GLF_IDENTITY(0, (0) / 1), 0), ivec3(0, 0, 0), ivec3(0, 0, 0)))))), 0 ^ (int(_GLF_IDENTITY(ivec3(0, 0, 0), ((ivec3(1, _GLF_IDENTITY(1, clamp(1, 1, 1)), 1) << _GLF_IDENTITY(ivec3(4), ivec3(4))) >> _GLF_IDENTITY(_GLF_IDENTITY(ivec3(4), max(_GLF_IDENTITY(ivec3(4), (ivec3(4)) / ivec3(1, 1, 1)), ivec3(4))), ivec3(4))) * (_GLF_IDENTITY(ivec3(0, 0, 0), clamp(ivec3(0, 0, 0), ivec3(0, 0, 0), ivec3(0, 0, 0))))))))))), (_GLF_IDENTITY(0, max(0, 0))) / 1)))) ^ 0))) - 0))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              break;
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), bool(bvec2(_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(bool(bvec3(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, true)), false || (_GLF_IDENTITY(bool(bvec3(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, true)), true && (bool(bvec3(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, true))))))), true))))))
              continue;
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), true && (bool(false)))))))
              return;
             atomicStore(write_val, uint(_GLF_IDENTITY(virtual_gid, ~ _GLF_IDENTITY((~ (virtual_gid)), ((~ (virtual_gid))) << 0u))), _GLF_IDENTITY(4, min(4, 4)), 64, 0);
             if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))), _GLF_IDENTITY(false || (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, true)))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! _GLF_IDENTITY((false || (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, true))))), (_GLF_IDENTITY((false || (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, true))))), ! (_GLF_IDENTITY(! ((false || (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, true)))))), (! ((_GLF_IDENTITY(false || (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, true)))), (false || (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, true))))) && true)))) || false)))) && true), ! (_GLF_IDENTITY(! _GLF_IDENTITY((! (false || (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, true)))))), ((! (false || (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, true))))))) || false), bool(bvec3(! _GLF_IDENTITY((! (false || (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, _GLF_IDENTITY(true, true && (true)))))))), _GLF_IDENTITY(bool(bvec4((! (false || (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, _GLF_IDENTITY(true, true && (true)))))))), true, true, true)), false || (bool(bvec4((! (false || (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, _GLF_IDENTITY(true, true && (true)))))))), true, true, true))))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), ! (_GLF_IDENTITY(! (! (false || (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, true)))))), ! (! (! (! (false || (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, true)))))))))))))))
              {
               if(_GLF_DEAD(false))
                continue;
               return;
              }
            }
          }
        }
       else
        {
        }
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)))), false, true, false)), bool(_GLF_IDENTITY(bvec3(bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), false, true, false)), _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false)))))), true), bvec3(bvec3(bvec3(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), false || (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), true, false))), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)), true, false))))))) && true))), false, true, false)), false, _GLF_IDENTITY(true, ! _GLF_IDENTITY((_GLF_IDENTITY(! (true), bool(bvec4(! (true), _GLF_IDENTITY(false, ! (! (false))), true, false)))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(! (true), bool(bvec4(_GLF_IDENTITY(! (true), (_GLF_IDENTITY(! (true), ! (_GLF_IDENTITY(! (! (true)), (! (! (true))) || false)))) && true), false, true, false))))), bool(bvec2(! ((_GLF_IDENTITY(! (true), bool(bvec4(! (true), false, true, false))))), false))))))))))))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec3(false, true, false))))))))
        break;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, false, false)), ! (! (bool(bvec4(false, true, false, false))))))))
            {
             do
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 return;
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-1589.8552))) > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))));
             if(_GLF_DEAD(false))
              return;
            }
          }
        }
       else
        {
        }
       continue;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(8), int(8)))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       break;
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))))) * mat2(1.0)).x > injectionSwitch.y), false || _GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))))) || (((injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(false, (false) || false), true)), bool(bool(bool(bvec3(((injectionSwitch.x > injectionSwitch.y)), false, true))))))))));
  }
 uint read_val = atomicLoad(_GLF_IDENTITY(write_val, clamp(_GLF_IDENTITY(write_val, (write_val) ^ 0u), write_val, write_val)), 4, 64, 0);
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   for(int _injected_loop_counter = (_GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), min(~ (_GLF_IDENTITY(0, (false ? _GLF_FUZZED(-17376) : 0))), ~ (0))))), 0, 0)) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) ^ 0) < 1); _GLF_IDENTITY(_injected_loop_counter ++, (true ? _injected_loop_counter ++ : _GLF_FUZZED(28288))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (int(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(float(mat4(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, _GLF_IDENTITY(1.0, (1.0) - _GLF_IDENTITY(_GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), min(log(1.0), log(1.0))), log(1.0))), max(_GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), min(log(1.0), log(1.0))), log(1.0))), _GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), min(log(1.0), log(1.0))), log(1.0)))))), 0.0, 0.0, 0.0, 0.0, 0.0, sin(0.0), 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 1.0, 1.0)), 0.0 + (float(mat4(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, sin(0.0), 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 1.0, 1.0))))), max(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(float(mat4(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, _GLF_IDENTITY(1.0, (1.0) - _GLF_IDENTITY(_GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), min(log(1.0), log(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-442.468)), bool(false)))))), log(1.0))), max(_GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), min(log(1.0), log(1.0))), log(1.0))), _GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), min(log(1.0), log(1.0))), log(1.0)))))), 0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0, 0.0, sin(0.0), _GLF_IDENTITY(1.0, (1.0) * 1.0), _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 1.0, 1.0)), 0.0 + (float(mat4(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 0.0, 0.0, 0.0, sin(0.0), 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 1.0, 1.0))))), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(float(mat4(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, _GLF_IDENTITY(1.0, (1.0) - _GLF_IDENTITY(_GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), min(log(1.0), log(1.0))), log(1.0))), max(_GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), min(log(1.0), log(1.0))), log(1.0))), _GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), min(log(1.0), log(1.0))), log(1.0)))))), 0.0, 0.0, 0.0, 0.0, 0.0, sin(0.0), _GLF_IDENTITY(1.0, float(vec3(1.0, 1.0, 1.0))), _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 1.0, 1.0)), 0.0 + (float(_GLF_IDENTITY(mat4(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, sin(0.0), 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 1.0, 1.0), (true ? mat4(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, sin(0.0), 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 1.0, 1.0) : _GLF_FUZZED(mat4(-8.8, -783.158, 159.241, -1.1, 6.7, -19.98, 15.24, 0.2, -7.9, 115.602, 3330.3618, 9.8, 4.9, 45.67, -202.930, 1178.5863))))))))))) ^ 1)); _injected_loop_counter ++)
        {
         do
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), true && (_GLF_IDENTITY(false, ! (! (false)))))))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               return;
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false, true)))));
         if(_GLF_DEAD(false))
          break;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), max(int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(1.0, injectionSwitch.y)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                break;
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(4095.7722)), bool(false)))), ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(mix(float(injectionSwitch.y), float(_GLF_FUZZED(4095.7722)), bool(false)), clamp(mix(float(injectionSwitch.y), float(_GLF_FUZZED(4095.7722)), bool(false)), mix(float(injectionSwitch.y), float(_GLF_FUZZED(4095.7722)), bool(false)), mix(float(injectionSwitch.y), float(_GLF_FUZZED(4095.7722)), bool(false))))))) || false), ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(4095.7722)), bool(false))))) || _GLF_IDENTITY(false, ! (! (false)))))))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                    }
                   else
                    {
                     do
                      {
                       buf[virtual_gid] = uint(subgroupAllEqual(read_val));
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))), float(_GLF_FUZZED(1.3)), bool(false))) > injectionSwitch.y))));
                    }
                   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
                    return;
                  }
                 else
                  {
                  }
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                  continue;
                 continue;
                }
              }
             else
              {
               if(_GLF_DEAD(false))
                break;
              }
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
        }
      }
     else
      {
      }
    }
  }
}
