#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_2 {
 uint workgroup_size;
 bvec4 _f0;
} ;

struct _GLF_struct_0 {
 uint subgroup_local_id;
 mat2x3 _f0;
} ;

struct _GLF_struct_1 {
 _GLF_struct_0 _f0;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec4 GLF_merged4_0_1_8_1_1_11_2_1_13_3_1_11read_valsubgroup_idsubgroup_sizevirtual_gid;
 uint subgroup_id = gl_SubgroupID;
 GLF_merged4_0_1_8_1_1_11_2_1_13_3_1_11read_valsubgroup_idsubgroup_sizevirtual_gid.y = subgroup_id;
uint subgroup_size = 16;
 GLF_merged4_0_1_8_1_1_11_2_1_13_3_1_11read_valsubgroup_idsubgroup_sizevirtual_gid.z = subgroup_size;
 _GLF_struct_1 _GLF_struct_replacement_1 = _GLF_struct_1(_GLF_struct_0(gl_SubgroupInvocationID, mat2x3(1.0)));
 uint num_workgroup = gl_NumWorkGroups.x;
 _GLF_struct_2 _GLF_struct_replacement_2 = _GLF_struct_2(gl_WorkGroupSize.x, bvec4(true));
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = _GLF_struct_replacement_2.workgroup_size * workgroup_id;
 uint virtual_gid = workgroup_base + _GLF_IDENTITY(GLF_merged4_0_1_8_1_1_11_2_1_13_3_1_11read_valsubgroup_idsubgroup_sizevirtual_gid.y * GLF_merged4_0_1_8_1_1_11_2_1_13_3_1_11read_valsubgroup_idsubgroup_sizevirtual_gid.z, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(workgroup_id) : GLF_merged4_0_1_8_1_1_11_2_1_13_3_1_11read_valsubgroup_idsubgroup_sizevirtual_gid.y * GLF_merged4_0_1_8_1_1_11_2_1_13_3_1_11read_valsubgroup_idsubgroup_sizevirtual_gid.z)) + _GLF_struct_replacement_1._f0.subgroup_local_id;
 GLF_merged4_0_1_8_1_1_11_2_1_13_3_1_11read_valsubgroup_idsubgroup_sizevirtual_gid.w = virtual_gid;
 atomicStore(write_val, uint(GLF_merged4_0_1_8_1_1_11_2_1_13_3_1_11read_valsubgroup_idsubgroup_sizevirtual_gid.w), 4, 64, 0);
 uint read_val = atomicLoad(write_val, 4, 64, 0);
 GLF_merged4_0_1_8_1_1_11_2_1_13_3_1_11read_valsubgroup_idsubgroup_sizevirtual_gid.x = read_val;
 buf[GLF_merged4_0_1_8_1_1_11_2_1_13_3_1_11read_valsubgroup_idsubgroup_sizevirtual_gid.w] = uint(subgroupAllEqual(GLF_merged4_0_1_8_1_1_11_2_1_13_3_1_11read_valsubgroup_idsubgroup_sizevirtual_gid.x));
}
