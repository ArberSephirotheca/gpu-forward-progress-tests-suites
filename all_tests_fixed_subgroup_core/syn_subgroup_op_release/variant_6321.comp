#version 460
struct _GLF_struct_7 {
 uint _f0;
} ;

struct _GLF_struct_8 {
 _GLF_struct_7 _f0;
 bool _f1;
} ;

struct _GLF_struct_5 {
 vec3 _f0;
 bool _f1;
 mat4x2 _f2;
 bvec2 _f3;
 bool _f4;
} ;

struct _GLF_struct_6 {
 _GLF_struct_5 _f0;
} ;

struct _GLF_struct_3 {
 ivec3 _f0;
 mat3x2 _f1;
} ;

struct _GLF_struct_2 {
 ivec3 _f0;
 mat3x4 _f1;
} ;

struct _GLF_struct_4 {
 _GLF_struct_2 _f0;
 uint subgroup_id;
 _GLF_struct_3 _f1;
} ;

struct _GLF_struct_9 {
 vec3 _f0;
 uvec2 _f1;
 mat2 _f2;
 _GLF_struct_4 _f3;
 _GLF_struct_6 _f4;
 _GLF_struct_8 _f5;
} ;

struct _GLF_struct_1 {
 uint subgroup_size;
 ivec4 _f0;
} ;

struct _GLF_struct_0 {
 uint workgroup_base;
 uvec3 _f0;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 _GLF_struct_9 _GLF_struct_replacement_9 = _GLF_struct_9(vec3(1.0), uvec2(1u), mat2(1.0), _GLF_struct_4(_GLF_struct_2(ivec3(1), mat3x4(1.0)), gl_SubgroupID, _GLF_struct_3(ivec3(1), mat3x2(1.0))), _GLF_struct_6(_GLF_struct_5(vec3(1.0), true, mat4x2(1.0), bvec2(true), true)), _GLF_struct_8(_GLF_struct_7(1u), true));
 _GLF_struct_1 _GLF_struct_replacement_1 = _GLF_struct_1(gl_SubgroupSize, ivec4(1));
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 _GLF_struct_0 _GLF_struct_replacement_0 = _GLF_struct_0(workgroup_size * workgroup_id, uvec3(1u));
 uint virtual_gid = _GLF_struct_replacement_0.workgroup_base + _GLF_struct_replacement_9._f3.subgroup_id * _GLF_struct_replacement_1.subgroup_size + subgroup_local_id;
 uint next_virtual_gid = _GLF_struct_replacement_0.workgroup_base + _GLF_struct_replacement_9._f3.subgroup_id * _GLF_struct_replacement_1.subgroup_size + ((subgroup_local_id + 1) % _GLF_struct_replacement_1.subgroup_size);
 atomicStore(buf[virtual_gid], uint(1), 4, 64, 4);
 if(subgroup_local_id + 1 < _GLF_struct_replacement_1.subgroup_size)
  {
   atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
   subgroupAll(false);
  }
 else
  {
   atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
   subgroupAll(true);
  }
}
