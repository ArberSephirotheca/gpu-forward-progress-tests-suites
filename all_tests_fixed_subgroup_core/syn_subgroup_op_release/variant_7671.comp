#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (false))), bool(bvec3(! (_GLF_IDENTITY(false, false || (false))), false, false)))))))
  {
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)).y))))
      {
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_DEAD(false)), ! (! ((_GLF_DEAD(false))))) || _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), vec2(mat2x3((injectionSwitch) * mat2(1.0), 0.0, 1.0, 0.0, 1.0)))), injectionSwitch)).y))), bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_DEAD(false)), _GLF_IDENTITY(! (! ((_GLF_DEAD(false)))), (! (! ((_GLF_DEAD(false))))) && true)) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-4316.2084) : injectionSwitch.x)))) > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY((injectionSwitch) * mat2(1.0), vec2(mat2x3((injectionSwitch) * mat2(1.0), 0.0, 1.0, 0.0, 1.0)))), injectionSwitch)).y)))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + _GLF_IDENTITY(vec2(0.0, 0.0), (_GLF_IDENTITY(vec2(0.0, 0.0), min(vec2(0.0, 0.0), _GLF_IDENTITY(vec2(0.0, 0.0), vec2(mat4x2(vec2(0.0, 0.0), 0.0, 0.0, 1.0, 0.0, 1.0, 0.0)))))) - abs(vec2(0.0, 0.0)))).x > injectionSwitch.y))), _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true, true && (_GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true, ! (! ((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true)))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bvec2(! (true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), bool(bvec3(true, true, true)))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           barrier();
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, false, true), true)))))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true)))))
        barrier();
       do
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(1, (1) / 1) ^ 0)); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (false) && true)))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  {
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                  }
                }
               barrier();
              }
            }
           else
            {
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_WRAPPED_LOOP(false))));
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           for(int _injected_loop_counter = _GLF_IDENTITY(0, 0 | (0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             barrier();
            }
          }
        }
      }
    }
   else
    {
    }
   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec4(true, true, false, false)))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), bool(bvec2(bool(bvec2(false, false)), true))))) && true)))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
uint subgroup_size = 16;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), true && (_GLF_IDENTITY(false, (false) && true)))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 do
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(3.3)), float(injectionSwitch.y), bool(true))), max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)))))), ! (! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(25.35)))))))))), (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(_GLF_IDENTITY(bvec2(! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(sqrt(vec2(1.0, 1.0)) * (injectionSwitch), (false ? _GLF_FUZZED(injectionSwitch) : sqrt(vec2(1.0, 1.0)) * (injectionSwitch)))).x > injectionSwitch.y), bool(bvec3((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(sqrt(vec2(1.0, 1.0)) * (injectionSwitch), (false ? _GLF_FUZZED(injectionSwitch) : sqrt(vec2(1.0, 1.0)) * (injectionSwitch)))).x > injectionSwitch.y), false, false)))))), true), bvec2(bvec2(bvec2(! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) > injectionSwitch.y), bool(bool((_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) > injectionSwitch.y))))))), true))))))) || false)))))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
          barrier();
         barrier();
        }
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(3.2)), vec2(_GLF_FUZZED(float(36728)), (injectionSwitch)[1]), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))).y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           do
            {
             for(int _injected_loop_counter = (int(_GLF_ONE(1.0, injectionSwitch.y)) ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / round(length(normalize(vec2(1.0, 1.0))))), 1.0, 1.0, 1.0, length(vec2(0.0, 0.0)), 0.0, 1.0, 0.0))) > injectionSwitch.y))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
  }
 uint workgroup_base = _GLF_IDENTITY(workgroup_size * workgroup_id, (_GLF_IDENTITY(workgroup_size * workgroup_id, 0u | (workgroup_size * _GLF_IDENTITY(workgroup_id, max(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) | (workgroup_id))))))) - 0u);
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, 0u + _GLF_IDENTITY((subgroup_size), clamp((subgroup_size), _GLF_IDENTITY((subgroup_size), ((subgroup_size)) | (_GLF_IDENTITY((subgroup_size), ~ (~ (_GLF_IDENTITY((subgroup_size), ((subgroup_size)) | ((subgroup_size)))))))), _GLF_IDENTITY((subgroup_size), ((subgroup_size)) << 0u)))), clamp(_GLF_IDENTITY(workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, 0u + _GLF_IDENTITY((subgroup_size), clamp((subgroup_size), _GLF_IDENTITY((subgroup_size), ((subgroup_size)) | ((subgroup_size))), _GLF_IDENTITY((subgroup_size), ((subgroup_size)) << 0u)))), (true ? workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, 0u + _GLF_IDENTITY((subgroup_size), clamp((subgroup_size), _GLF_IDENTITY((subgroup_size), ((subgroup_size)) | ((subgroup_size))), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size))), ((subgroup_size)) << 0u)))) : _GLF_FUZZED(workgroup_base))), workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, 0u + _GLF_IDENTITY((subgroup_size), clamp((subgroup_size), _GLF_IDENTITY((subgroup_size), ((subgroup_size)) | ((subgroup_size))), _GLF_IDENTITY((subgroup_size), ((subgroup_size)) << _GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(workgroup_size))))))), _GLF_IDENTITY(workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, 0u + _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u)), clamp((subgroup_size), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, (true ? subgroup_size : _GLF_FUZZED(packHalf2x16(injectionSwitch))))), ((subgroup_size)) | ((subgroup_size))), _GLF_IDENTITY((subgroup_size), ((subgroup_size)) << 0u)))), min(workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(0u, uint(uvec4(0u, 0u, 1u, 1u))) + _GLF_IDENTITY((subgroup_size), clamp((subgroup_size), _GLF_IDENTITY((subgroup_size), ((subgroup_size)) | ((subgroup_size))), _GLF_IDENTITY((subgroup_size), ((subgroup_size)) << 0u)))), _GLF_IDENTITY(workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, 0u + _GLF_IDENTITY((subgroup_size), clamp((subgroup_size), _GLF_IDENTITY((subgroup_size), ((subgroup_size)) | ((subgroup_size))), _GLF_IDENTITY((subgroup_size), ((subgroup_size)) << 0u)))), (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(0u + _GLF_IDENTITY((subgroup_size), clamp((subgroup_size), _GLF_IDENTITY((subgroup_size), ((subgroup_size)) | ((subgroup_size))), _GLF_IDENTITY((subgroup_size), ((subgroup_size)) << 0u))), (0u + _GLF_IDENTITY(_GLF_IDENTITY((subgroup_size), max((subgroup_size), (subgroup_size))), clamp(_GLF_IDENTITY((subgroup_size), (false ? _GLF_FUZZED((subgroup_local_id ^ subgroup_id)) : (subgroup_size))), _GLF_IDENTITY((subgroup_size), ((subgroup_size)) | ((subgroup_size))), _GLF_IDENTITY((subgroup_size), ((subgroup_size)) << 0u)))) / ((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u)))))) | 0u))))) + subgroup_local_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / sqrt(1.0))))))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
    }
  }
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + (_GLF_IDENTITY((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), min(_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + _GLF_IDENTITY(1, min(1, 1))) >> 0u)) % _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) << _GLF_IDENTITY((_GLF_IDENTITY(0u, ~ (~ (0u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(5u), uint(uvec2(uint(5u), 1u))), uint(_GLF_IDENTITY(5u, min(_GLF_IDENTITY(5u, max(_GLF_IDENTITY(5u, max(5u, 5u)), 5u)), 5u))))), min((_GLF_IDENTITY(0u, ~ (~ (0u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(5u), uint(uvec2(uint(5u), 1u))), uint(_GLF_IDENTITY(5u, min(_GLF_IDENTITY(5u, max(_GLF_IDENTITY(5u, max(5u, 5u)), 5u)), 5u))))), _GLF_IDENTITY((_GLF_IDENTITY(0u, ~ (~ (0u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(5u), uint(uvec2(uint(5u), 1u))), uint(_GLF_IDENTITY(5u, min(_GLF_IDENTITY(5u, max(_GLF_IDENTITY(5u, max(5u, 5u)), 5u)), 5u))))), 0u | ((_GLF_IDENTITY(0u, ~ (~ (0u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(5u), uint(uvec2(uint(5u), 1u))), uint(_GLF_IDENTITY(5u, min(_GLF_IDENTITY(5u, max(_GLF_IDENTITY(5u, max(5u, 5u)), 5u)), 5u)))))))))), (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size), ~ (~ (_GLF_IDENTITY((subgroup_size), ((subgroup_size)) | 0u)))) << (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0u, ~ (~ (0u))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) - 0u), ~ (~ _GLF_IDENTITY((0u), min((0u), (0u))))))), (_GLF_IDENTITY(_GLF_IDENTITY(0u, ~ (~ (0u))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) - 0u), ~ (~ _GLF_IDENTITY((0u), min((0u), (0u)))))))) | (_GLF_IDENTITY(_GLF_IDENTITY(0u, ~ (~ (0u))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) - 0u), ~ (~ _GLF_IDENTITY((0u), min((0u), (0u))))))))) >> _GLF_IDENTITY(uint(5u), uint(5u))))) - 0u)), (~ ((subgroup_local_id + 1) % subgroup_size)) | 0u))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, 1u * (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ 0u))))) + 1), _GLF_IDENTITY(((subgroup_local_id + 1)), clamp(((subgroup_local_id + 1)), _GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id, 1u * (subgroup_local_id)) + 1)), clamp(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 1u))) + 1, uint(uint(subgroup_local_id + 1)))), min((_GLF_IDENTITY(subgroup_local_id + 1, uint(uint(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) >> 0u) + 1)))), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, uint(uint(subgroup_local_id + 1)))), ((_GLF_IDENTITY(subgroup_local_id + 1, uint(uint(_GLF_IDENTITY(subgroup_local_id + 1, 0u ^ (_GLF_IDENTITY(subgroup_local_id + 1, max(subgroup_local_id + 1, subgroup_local_id + 1))))))))) - 0u))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 1u))) + 1, uint(uint(subgroup_local_id + 1)))), min((_GLF_IDENTITY(subgroup_local_id + 1, uint(uint(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) >> 0u) + 1)))), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, uint(uint(_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))) + 1)))), ((_GLF_IDENTITY(subgroup_local_id + 1, uint(uint(_GLF_IDENTITY(subgroup_local_id + 1, 0u ^ (_GLF_IDENTITY(subgroup_local_id + 1, max(subgroup_local_id + 1, subgroup_local_id + 1))))))))) - 0u)))) / 1u)), _GLF_IDENTITY(0u, _GLF_IDENTITY(_GLF_IDENTITY((0u) | (0u), min((0u) | (0u), (0u) | (0u))), _GLF_IDENTITY(((0u) | (0u)) | 0u, ~ (~ (((0u) | (0u)) | 0u))))) | (((subgroup_local_id + 1)))), (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) ^ 0u)), _GLF_IDENTITY(((subgroup_local_id + 1)), min(((subgroup_local_id + 1)), _GLF_IDENTITY(((subgroup_local_id + 1)), (((subgroup_local_id + 1))) | (((subgroup_local_id + 1)))))))), ((subgroup_local_id + 1)))) >> 0u) % _GLF_IDENTITY(subgroup_size, (subgroup_size) | 0u), _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size) | (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((subgroup_local_id + 1) % subgroup_size) | ((subgroup_local_id + 1) % subgroup_size))), _GLF_IDENTITY(clamp(_GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size) | ((subgroup_local_id + 1) % subgroup_size), min((_GLF_IDENTITY((subgroup_local_id + 1), _GLF_IDENTITY((0u ^ 0u), clamp((0u ^ 0u), (0u ^ 0u), (0u ^ 0u))) + ((subgroup_local_id + 1))) % subgroup_size) | (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, max((subgroup_local_id + 1) % subgroup_size, _GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, max((subgroup_local_id + 1) % subgroup_size, (_GLF_IDENTITY(subgroup_local_id + 1, (false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id + 1))) % subgroup_size))))), (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, uint(uvec4((subgroup_local_id + 1) % subgroup_size, _GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, 0u ^ (1u)))))), 0u, 0u)))) | _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) | ((subgroup_local_id + 1))) % subgroup_size), (_GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) | ((subgroup_local_id + 1))) % subgroup_size), max(_GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) | ((subgroup_local_id + 1))) % _GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)), (true ? (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) | ((subgroup_local_id + 1))) % subgroup_size) : _GLF_FUZZED(subgroup_id))), _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) | ((subgroup_local_id + 1))) % subgroup_size), (false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) | ((subgroup_local_id + 1))) % subgroup_size), min((_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) | ((subgroup_local_id + 1))) % subgroup_size), _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) | ((subgroup_local_id + 1))) % subgroup_size), (_GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) | ((subgroup_local_id + 1))) % subgroup_size), ((_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) | ((subgroup_local_id + 1))) % subgroup_size)) | ((_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) | ((subgroup_local_id + 1))) % subgroup_size)))) / 1u)))))))) | 0u))), _GLF_IDENTITY(_GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), (_GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), (_GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), 0u ^ (((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) >> 0u) + 1) % subgroup_size)))) ^ 0u)) ^ 0u) | ((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size) << uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u | ((subgroup_size) << uint(_GLF_ZERO(0.0, injectionSwitch.x)))))), (_GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), (_GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)) + 1) % subgroup_size), (_GLF_IDENTITY(_GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), 0u ^ (((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) >> 0u) + 1) % subgroup_size))), ~ (~ (_GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), 0u ^ (((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) >> 0u) + 1) % subgroup_size))))))) ^ 0u)) ^ 0u) | ((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY((subgroup_size) << uint(_GLF_ZERO(0.0, injectionSwitch.x)), ((subgroup_size) << uint(_GLF_ZERO(0.0, injectionSwitch.x))) * 1u), 0u | ((subgroup_size) << uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(180.808)))))))))) / 1u), ((_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1))) % subgroup_size) | _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), (false ? _GLF_FUZZED(workgroup_size) : ((subgroup_local_id + 1) % subgroup_size)))), (clamp(_GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size) | ((subgroup_local_id + 1) % subgroup_size), min((_GLF_IDENTITY((subgroup_local_id + 1), _GLF_IDENTITY((0u ^ 0u), clamp((0u ^ 0u), (0u ^ 0u), (0u ^ 0u))) + ((subgroup_local_id + 1))) % subgroup_size) | ((subgroup_local_id + 1) % subgroup_size), (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, uint(uvec4((subgroup_local_id + 1) % subgroup_size, 1u, 0u, 0u)))) | (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(uint(false)) : subgroup_local_id)) + 1), ((subgroup_local_id + 1)) | ((subgroup_local_id + 1))) % subgroup_size))), _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), (_GLF_IDENTITY(_GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), (_GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), (((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id))) | (subgroup_local_id)) + _GLF_IDENTITY(1, clamp(1, 1, 1))) % subgroup_size)) ^ 0u)) / 1u), (_GLF_IDENTITY(((subgroup_local_id + _GLF_IDENTITY(1, min(_GLF_IDENTITY(1, int(ivec3(1, int(_GLF_ZERO(0.0, injectionSwitch.x)), 0))), 1))) % subgroup_size), 0u ^ ((_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) >> 0u) + 1), _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) >> 0u) + 1), 0u | ((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) >> 0u) + 1))), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u)), ~ (~ (uint(uvec3(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) >> 0u) + 1), 0u | ((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) >> 0u) + 1))), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u)))))) % subgroup_size)))) ^ 0u)) ^ 0u) | ((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size) << uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u + (_GLF_IDENTITY((subgroup_size) << uint(_GLF_ZERO(0.0, injectionSwitch.x)), min((subgroup_size) << uint(_GLF_ZERO(0.0, injectionSwitch.x)), (subgroup_size) << uint(_GLF_ZERO(0.0, injectionSwitch.x)))))))), ((_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)) + 1))) % subgroup_size) | ((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) + 0u)) % subgroup_size))) | 0u))))));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           else
            {
            }
          }
         barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
        }
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))) || false)))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(52.09)), float(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), bool(true)))))))
  {
  }
 else
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), false || (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! _GLF_IDENTITY((! (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-4.1), _GLF_FUZZED(vec2(-5348.5433, -2.3).g)), vec2(_GLF_IDENTITY((injectionSwitch)[0], clamp(_GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (injectionSwitch)[0])), (injectionSwitch)[0], (injectionSwitch)[0])), (injectionSwitch)[1]), bvec2(true, true))).x > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))), false || (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))))))), true && ((! (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-4.1), _GLF_FUZZED(vec2(-5348.5433, -2.3).g)), vec2(_GLF_IDENTITY((injectionSwitch)[0], clamp(_GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (injectionSwitch)[0])), (injectionSwitch)[0], (injectionSwitch)[0])), (injectionSwitch)[1]), bvec2(true, true))).x > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))), false || (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))))))))))))))))))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           else
            {
            }
          }
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter)) != 0); _injected_loop_counter --)
        {
         barrier();
        }
      }
     for(int _injected_loop_counter = _GLF_IDENTITY(0, min(0, 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, max(0, 0))); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) | 0))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             barrier();
            }
          }
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
               else
                {
                }
              }
            }
           else
            {
            }
           if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bool(_GLF_DEAD(false))), (bool(bool(_GLF_DEAD(false)))) && true)))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y))))
            barrier();
           barrier();
          }
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) || false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
      {
       do
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), true, true, false)), _GLF_IDENTITY(bool(bvec4(bool(bvec4(_GLF_DEAD(false), true, true, false)), true, true, true)), (bool(bvec4(bool(bvec4(_GLF_DEAD(false), true, true, false)), true, true, true))) && true)))) || false))))))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
            barrier();
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) || false), false, true, true))), (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) || false), false, true, true))), bool(bvec4(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) || false), false, true, true))), true, true, false)))) || false)))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
            barrier();
           for(int _injected_loop_counter = _GLF_IDENTITY((_GLF_IDENTITY(44402 & 0, (44402 & 0) | (44402 & 0))), (0 >> _GLF_IDENTITY(int(4), int(4))) ^ (_GLF_IDENTITY((_GLF_IDENTITY(44402 & 0, (44402 & 0) | (44402 & 0))), max((_GLF_IDENTITY(44402 & 0, (44402 & 0) | (44402 & 0))), _GLF_IDENTITY((_GLF_IDENTITY(44402 & 0, (44402 & 0) | (44402 & 0))), ((_GLF_IDENTITY(44402 & 0, (44402 & 0) | (44402 & 0)))) >> 0))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != _GLF_IDENTITY(1, (1) << 0), ! (! (_GLF_IDENTITY(_injected_loop_counter != _GLF_IDENTITY(1, (1) << 0), ! (! (_injected_loop_counter != _GLF_IDENTITY(1, (1) << 0)))))))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               do
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             else
              {
              }
            }
          }
        }
       atomicStore(buf[virtual_gid], uint(1), 4, _GLF_IDENTITY(_GLF_IDENTITY(64, (64) | (64)), ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(64, (_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(96501, (96501) << 0)) : 64, (true ? _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, true), _GLF_IDENTITY(bvec3(bvec4(bvec3(false, true, true), false)), _GLF_IDENTITY(bvec3(bvec4(bvec3(bvec4(bvec3(false, true, true), false)), true)), bvec3(bvec4(bvec3(bvec4(bvec3(bvec4(bvec3(false, true, true), false)), true)), false))))))) ? _GLF_FUZZED(96501) : 64 : _GLF_FUZZED(-48268)))))), ((_GLF_IDENTITY(_GLF_IDENTITY(64, (_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(96501, (96501) << 0)) : 64, (true ? _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec4(bvec3(false, true, true), false))))) ? _GLF_FUZZED(96501) : 64 : _GLF_FUZZED(-48268))))), (_GLF_IDENTITY(64, (_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(96501, (96501) << 0)) : 64, (true ? _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec4(bvec3(false, true, true), false))))) ? _GLF_FUZZED(96501) : 64 : _GLF_FUZZED(-48268)))))) << 0))) | 0))), 4);
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y)), false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y))))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y)), false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((injectionSwitch.x) - 0.0, mix(float((injectionSwitch.x) - 0.0), float(_GLF_FUZZED(-3778.0921)), bool(false)))) > injectionSwitch.y)))))) && true))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
    {
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) ^ 0u), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + 1, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) / 1u) + 1, max(subgroup_local_id + 1, subgroup_local_id + 1)), 0u + (subgroup_local_id + 1)))), 0u | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id, min(_GLF_IDENTITY(subgroup_local_id, uint(uvec3(subgroup_local_id, 0u, _GLF_IDENTITY(1u, max(_GLF_IDENTITY(1u, (1u) - (0u | 0u)), 1u))))), subgroup_local_id)) + 1)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, min(_GLF_IDENTITY(subgroup_local_id + 1, uint(_GLF_IDENTITY(uint(subgroup_local_id + 1), ~ (~ (uint(subgroup_local_id + 1)))))), subgroup_local_id + 1)), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | 0u), min(subgroup_local_id + 1, subgroup_local_id + 1))) | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, max(subgroup_local_id + 1, subgroup_local_id + 1)), min(subgroup_local_id + 1, subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY((1), ((1)) ^ 0) / 1))))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, uint(uvec2(subgroup_local_id + 1, 0u))), min(subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)) + 1)), _GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + 1, subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | (1))) | (_GLF_IDENTITY(1, int(ivec2(1, 1))))))))), (_GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1))))) << 0u))), _GLF_IDENTITY(max(_GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + 1, subgroup_local_id + 1)), _GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id + 1, uint(uvec4(subgroup_local_id + 1, 0u, 0u, 1u))), _GLF_IDENTITY(subgroup_local_id, 1u * (subgroup_local_id)) + 1))))), _GLF_IDENTITY((_GLF_IDENTITY(max(_GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + 1, subgroup_local_id + 1)), _GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + 1, subgroup_local_id + 1))), (max(_GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + 1, subgroup_local_id + 1)), _GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + 1, subgroup_local_id + 1)))) | 0u)) >> (0u << _GLF_IDENTITY(uint(_GLF_IDENTITY(5u, (5u) | (5u))), uint(5u))), ((_GLF_IDENTITY(max(_GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + 1, subgroup_local_id + 1)), _GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + 1, subgroup_local_id + 1))), (max(_GLF_IDENTITY(subgroup_local_id + 1, min(_GLF_IDENTITY(subgroup_local_id, uint(uvec3(_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)), 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x))))) + 1, subgroup_local_id + 1)), _GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + 1, subgroup_local_id + 1)))) | 0u)) >> (0u << _GLF_IDENTITY(uint(_GLF_IDENTITY(5u, (5u) | (5u))), uint(5u)))) >> 0u)))) - 0u) < _GLF_IDENTITY(subgroup_size, min(_GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec4(subgroup_size, 0u, 1u, (0u >> _GLF_IDENTITY(uint(8u), uint(8u)))), clamp(uvec4(subgroup_size, 0u, 1u, (0u >> _GLF_IDENTITY(uint(8u), uint(8u)))), uvec4(subgroup_size, 0u, _GLF_IDENTITY(1u, (1u) << 0u), (0u >> _GLF_IDENTITY(uint(8u), uint(8u)))), uvec4(subgroup_size, 0u, 1u, _GLF_IDENTITY((0u >> _GLF_IDENTITY(uint(8u), uint(8u))), 1u * (_GLF_IDENTITY((0u >> _GLF_IDENTITY(uint(8u), uint(8u))), ((0u >> _GLF_IDENTITY(uint(8u), uint(8u)))) - 0u)))))))), subgroup_size)))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-7164.7041, -4233.2179)))).y))))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), 1.0, 1.0))).x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       do
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(_GLF_DEAD(false), true, true)), _GLF_IDENTITY((_GLF_IDENTITY(bool(bvec3(_GLF_DEAD(false), true, true)), ! (! (bool(bvec3(_GLF_DEAD(false), true, true)))))) && true, ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(bool(bvec3(_GLF_DEAD(false), true, true)), ! (! (bool(bvec3(_GLF_DEAD(false), true, true)))))) && true), bool(bvec2(! ((_GLF_IDENTITY(bool(bvec3(_GLF_DEAD(false), true, true)), ! (! (bool(bvec3(_GLF_DEAD(false), true, true)))))) && true), true)))))), _GLF_IDENTITY(true && (bool(bvec3(_GLF_DEAD(false), true, true))), bool(bvec4(true && (bool(bvec3(_GLF_DEAD(false), true, true))), false, false, true))))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                }
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        barrier();
       atomicStore(buf[_GLF_IDENTITY(_GLF_IDENTITY(next_virtual_gid, uint(uint(_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) | 0u)))), (_GLF_IDENTITY(next_virtual_gid, (true ? next_virtual_gid : _GLF_FUZZED(_GLF_IDENTITY(packUnorm4x8(vec4(46.38, 198.740, -783.292, -692.148)), ~ (~ (_GLF_IDENTITY(packUnorm4x8(vec4(46.38, _GLF_IDENTITY(198.740, min(198.740, _GLF_IDENTITY(198.740, mix(_GLF_IDENTITY(float(_GLF_FUZZED(-6.8)), mix(float(float(_GLF_FUZZED(-6.8))), float(_GLF_FUZZED((vec2(-5517.5597, 2.0) + 56.55).s)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), float(198.740), bool(true))))), -783.292, _GLF_IDENTITY(-692.148, max(-692.148, -692.148)))), (_GLF_IDENTITY(packUnorm4x8(vec4(46.38, _GLF_IDENTITY(198.740, min(198.740, _GLF_IDENTITY(198.740, mix(_GLF_IDENTITY(float(_GLF_FUZZED(-6.8)), mix(float(float(_GLF_FUZZED(-6.8))), float(_GLF_FUZZED((vec2(-5517.5597, 2.0) + 56.55).s)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), float(198.740), bool(true))))), -783.292, _GLF_IDENTITY(-692.148, max(-692.148, -692.148)))), (false ? _GLF_FUZZED(workgroup_id) : packUnorm4x8(vec4(46.38, _GLF_IDENTITY(198.740, min(198.740, _GLF_IDENTITY(198.740, mix(_GLF_IDENTITY(float(_GLF_FUZZED(-6.8)), mix(float(float(_GLF_FUZZED(-6.8))), float(_GLF_FUZZED((vec2(-5517.5597, 2.0) + 56.55).s)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), float(198.740), bool(true))))), -783.292, _GLF_IDENTITY(-692.148, max(-692.148, -692.148))))))) | 0u)))))))) >> uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x)))], uint(2), 4, _GLF_IDENTITY(64, clamp(64, 64, 64)), 4);
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = _GLF_IDENTITY((1 | 1), max((1 | 1), (1 | 1))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x > injectionSwitch.y))))
              {
               do
                {
                 barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true)));
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             for(int _injected_loop_counter = ((0 ^ 0) >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), _GLF_IDENTITY(0, (0) - 0) ^ (int(4))), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               barrier();
               if(_GLF_DEAD(false))
                barrier();
               do
                {
                 for(int _injected_loop_counter = (1 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       barrier();
                      }
                     else
                      {
                      }
                    }
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         subgroupAll(false);
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = _GLF_IDENTITY(0, (_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) / 1), _GLF_IDENTITY(0, clamp(0, 0, 0))))) | (0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((0 | 1) << _GLF_IDENTITY(int(3), int(3)), ((0 | 1) << _GLF_IDENTITY(int(3), int(3))) ^ 0), 0 | (_GLF_IDENTITY(_GLF_IDENTITY((0 | 1) << _GLF_IDENTITY(int(3), int(3)), ((0 | 1) << _GLF_IDENTITY(int(3), int(3))) ^ 0), (_GLF_IDENTITY((0 | 1) << _GLF_IDENTITY(int(3), int(3)), ((0 | 1) << _GLF_IDENTITY(int(3), int(3))) ^ 0)) << 0))), _GLF_IDENTITY(((0 >> _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(7), int(7))) ^ (_GLF_IDENTITY(_GLF_IDENTITY((0 | 1) << _GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY((0 | 1) << _GLF_IDENTITY(int(3), int(3)), clamp((0 | 1) << _GLF_IDENTITY(int(3), int(3)), (0 | 1) << _GLF_IDENTITY(int(3), int(3)), (0 | _GLF_IDENTITY(1, 0 + (_GLF_IDENTITY(1, (1) | (1))))) << _GLF_IDENTITY(int(3), int(3))))) << (-98086 & 0)), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY((0 | 1) << _GLF_IDENTITY(int(3), int(3)), ((0 | 1) << _GLF_IDENTITY(int(3), int(3))) << (-98086 & 0))), 1 * (_GLF_IDENTITY(~ (_GLF_IDENTITY((0 | 1) << _GLF_IDENTITY(int(3), int(3)), ((0 | 1) << _GLF_IDENTITY(int(3), int(3))) << (-98086 & 0))), (~ (_GLF_IDENTITY((0 | 1) << _GLF_IDENTITY(int(3), int(3)), ((0 | 1) << _GLF_IDENTITY(int(3), int(3))) << (-98086 & 0)))) ^ 0))), (~ (_GLF_IDENTITY((0 | 1) << _GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(true ? 0 : _GLF_FUZZED(_injected_loop_counter), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(true ? 0 : _GLF_FUZZED(_injected_loop_counter), (true ? 0 : _GLF_FUZZED(_injected_loop_counter)) | 0))))), (true ? _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter))) : _GLF_FUZZED(max(_injected_loop_counter, 85641)))) | 1), clamp(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(true ? 0 : _GLF_FUZZED(_injected_loop_counter), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(true ? 0 : _GLF_FUZZED(_injected_loop_counter), (true ? 0 : _GLF_FUZZED(_injected_loop_counter)) | 0))))), (true ? _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter))) : _GLF_FUZZED(max(_injected_loop_counter, 85641)))) | 1), clamp((_GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(true ? 0 : _GLF_FUZZED(_injected_loop_counter), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(true ? 0 : _GLF_FUZZED(_injected_loop_counter), (true ? 0 : _GLF_FUZZED(_injected_loop_counter)) | 0))))), (true ? _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter))) : _GLF_FUZZED(max(_injected_loop_counter, 85641)))) | 1), (_GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(true ? 0 : _GLF_FUZZED(_injected_loop_counter), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(true ? 0 : _GLF_FUZZED(_injected_loop_counter), (true ? 0 : _GLF_FUZZED(_injected_loop_counter)) | 0))))), (true ? _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter))) : _GLF_FUZZED(max(_injected_loop_counter, 85641)))) | 1), (_GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(true ? 0 : _GLF_FUZZED(_injected_loop_counter), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(true ? 0 : _GLF_FUZZED(_injected_loop_counter), (true ? 0 : _GLF_FUZZED(_injected_loop_counter)) | 0))))), (true ? _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter))) : _GLF_FUZZED(max(_injected_loop_counter, 85641)))) | 1))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(true ? 0 : _GLF_FUZZED(_injected_loop_counter), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(true ? 0 : _GLF_FUZZED(_injected_loop_counter), (true ? 0 : _GLF_FUZZED(_injected_loop_counter)) | 0))))), (true ? _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter))) : _GLF_FUZZED(max(_injected_loop_counter, 85641)))) | 1), clamp((_GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(true ? 0 : _GLF_FUZZED(_injected_loop_counter), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(true ? 0 : _GLF_FUZZED(_injected_loop_counter), (true ? 0 : _GLF_FUZZED(_injected_loop_counter)) | 0))))), (true ? _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter))) : _GLF_FUZZED(max(_injected_loop_counter, 85641)))) | 1), (_GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(true ? 0 : _GLF_FUZZED(_injected_loop_counter), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(true ? 0 : _GLF_FUZZED(_injected_loop_counter), (true ? 0 : _GLF_FUZZED(_injected_loop_counter)) | 0))))), (true ? _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter))) : _GLF_FUZZED(max(_injected_loop_counter, 85641)))) | 1), (_GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(true ? 0 : _GLF_FUZZED(_injected_loop_counter), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(true ? 0 : _GLF_FUZZED(_injected_loop_counter), (true ? 0 : _GLF_FUZZED(_injected_loop_counter)) | 0))))), (true ? _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter))) : _GLF_FUZZED(max(_injected_loop_counter, 85641)))) | 1))), (_GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(true ? 0 : _GLF_FUZZED(_injected_loop_counter), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(true ? 0 : _GLF_FUZZED(_injected_loop_counter), (true ? 0 : _GLF_FUZZED(_injected_loop_counter)) | 0))))), (true ? _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter))) : _GLF_FUZZED(max(_injected_loop_counter, 85641)))) | 1))) << _GLF_IDENTITY(int(3), int(3))) << _GLF_IDENTITY((-98086 & 0), (_GLF_IDENTITY((-98086 & 0), ~ (~ ((-98086 & 0))))) / 1)))) / 1)))), (((0 >> _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(7), int(7))) ^ _GLF_IDENTITY((_GLF_IDENTITY((0 | 1) << _GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY((0 | 1) << _GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY((0 | 1) << _GLF_IDENTITY(int(3), int(3)), ((0 | 1) << _GLF_IDENTITY(int(3), int(3))) << 0)) >> 0)) << (-98086 & 0))), clamp((_GLF_IDENTITY((0 | 1) << _GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY((0 | 1) << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (true ? int(3) : _GLF_FUZZED(62701)))), (_GLF_IDENTITY((0 | 1) << _GLF_IDENTITY(int(3), int(3)), ((_GLF_IDENTITY(0 | 1, int(ivec3(0 | 1, 0, 1)))) << _GLF_IDENTITY(int(3), int(3))) << 0)) >> 0)) << (-98086 & 0))), (_GLF_IDENTITY((0 | 1) << _GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY((0 | 1) << _GLF_IDENTITY(int(3), int(3)), _GLF_IDENTITY((_GLF_IDENTITY((0 | 1) << _GLF_IDENTITY(int(3), int(3)), ((0 | 1) << _GLF_IDENTITY(int(3), int(3))) << 0)) >> 0, ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY((0 | 1) << _GLF_IDENTITY(int(3), int(3)), ((0 | 1) << _GLF_IDENTITY(int(3), int(3))) << 0)) >> 0), max(~ ((_GLF_IDENTITY((0 | 1) << _GLF_IDENTITY(int(3), int(3)), ((0 | 1) << _GLF_IDENTITY(int(3), int(3))) << 0)) >> 0), ~ ((_GLF_IDENTITY((0 | 1) << _GLF_IDENTITY(int(3), int(3)), ((0 | 1) << _GLF_IDENTITY(int(3), int(3))) << 0)) >> 0))))))) << (-98086 & 0))), (_GLF_IDENTITY((0 | 1) << _GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY((0 | 1) << _GLF_IDENTITY(int(3), int(3)), _GLF_IDENTITY((_GLF_IDENTITY((0 | 1) << _GLF_IDENTITY(int(3), int(3)), ((0 | 1) << _GLF_IDENTITY(int(3), int(3))) << 0)) >> 0, 0 + ((_GLF_IDENTITY((0 | 1) << _GLF_IDENTITY(_GLF_IDENTITY(int(3), ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) * (int(3))), int(3)), ((0 | 1) << _GLF_IDENTITY(int(3), int(3))) << 0)) >> 0)))) << (-98086 & 0)))))) - 0))) >> _GLF_IDENTITY(int(3), int(3)), max(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((0 | 1), (true ? (0 | 1) : _GLF_FUZZED(abs(_injected_loop_counter)))) << _GLF_IDENTITY(int(3), int(3)), ((0 >> _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(7), min(int(7), int(7))), int(7))) ^ (_GLF_IDENTITY((0 | 1) << _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, _GLF_IDENTITY((3), ((3)) >> 0) - 0))), _GLF_IDENTITY(((0 | 1) << _GLF_IDENTITY(int(3), int(3))) << (-98086 & 0), (((0 | 1) << _GLF_IDENTITY(int(3), int(3))) << (-98086 & 0)) | (((0 | 1) << _GLF_IDENTITY(int(3), int(3))) << (-98086 & 0))))))), ((_GLF_IDENTITY((0 | 1) << _GLF_IDENTITY(int(3), int(3)), ((0 >> _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(7), min(int(_GLF_IDENTITY(7, (7) | (7))), int(7))), int(7))) ^ (_GLF_IDENTITY((0 | 1) << _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, _GLF_IDENTITY((3), _GLF_IDENTITY(((3)) >> 0, clamp(((3)) >> 0, ((3)) >> 0, ((3)) >> 0))) - 0))), ((0 | 1) << _GLF_IDENTITY(int(3), int(3))) << (-98086 & 0)))))) | ((_GLF_IDENTITY((0 | _GLF_IDENTITY(1, (1) - 0)) << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), 1 * (_GLF_IDENTITY(int(3), (int(3)) | (int(3)))))), ((0 >> _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(7), min(int(7), int(7))), int(7))) ^ (_GLF_IDENTITY((0 | 1) << _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, _GLF_IDENTITY((3), ((3)) >> 0) - 0))), ((0 | 1) << _GLF_IDENTITY(int(3), int(3))) << (-98086 & 0))))))) >> _GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY((0 | 1) << _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, (3) ^ 0))), ((0 >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(_GLF_IDENTITY(4, (false ? _GLF_FUZZED(_injected_loop_counter) : 4))), (int(_GLF_IDENTITY(4, (false ? _GLF_FUZZED(_injected_loop_counter) : 4)))) | _GLF_IDENTITY((int(_GLF_IDENTITY(4, (false ? _GLF_FUZZED(_injected_loop_counter) : 4)))), int(ivec4((int(_GLF_IDENTITY(4, (false ? _GLF_FUZZED(_injected_loop_counter) : 4)))), 1, 0, 0)))))) >> _GLF_IDENTITY(int(7), int(7))) ^ (_GLF_IDENTITY((0 | 1) << _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(_GLF_IDENTITY(3, min(3, 3)), clamp(_GLF_IDENTITY(3, min(3, 3)), _GLF_IDENTITY(_GLF_IDENTITY(3, min(3, 3)), (_GLF_IDENTITY(3, min(3, 3))) + 0), _GLF_IDENTITY(3, min(3, 3)))))), ((0 | 1) << _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, (3) << 0)))) << (-98086 & 0))))) >> _GLF_IDENTITY(int(3), int(3))))) | 0)); _injected_loop_counter ++)
          {
           do
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bool(false)))));
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
            {
             if(_GLF_DEAD(false))
              barrier();
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false))))), ! (! ((false)))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((false), ! (! ((false)))), false || (_GLF_IDENTITY(_GLF_IDENTITY((false), ! (! ((false)))), ! (! (_GLF_IDENTITY((false), ! (! ((false))))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), ! (! ((false))))), (! _GLF_IDENTITY((_GLF_IDENTITY((false), ! (! _GLF_IDENTITY(((false)), (((false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), false || ((_GLF_IDENTITY((false), ! (! _GLF_IDENTITY(((false)), (((false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))) || false))), false, false)), bool(_GLF_IDENTITY(bvec3(bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY((false), ! (! ((false)))), ! (! (_GLF_IDENTITY((false), ! (! ((false))))))), false, false)), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true), false), bvec3(bvec3(bvec3(bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((false), ((false)) || false), ! (! (_GLF_IDENTITY((false), (_GLF_IDENTITY((false), false || ((false)))) && true)))), ! (! (_GLF_IDENTITY((false), ! (! ((false))))))), false, false)), false, false))))))))))
            barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
       atomicStore(buf[next_virtual_gid], uint(2), 4, 64, _GLF_IDENTITY(4, min(_GLF_IDENTITY(4, (4) << 0), 4)));
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         subgroupAll(true);
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), true && _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))))), ! (! ((_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))))))))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         barrier();
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), bool(bool(bool(false))))))))
        {
        }
       else
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
            {
             barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch)))) / vec2(1.0, 1.0)).x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
            }
           else
            {
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         barrier();
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, (false) && true))), ! (! (bool(bool(_GLF_IDENTITY(false, (false) && true)))))))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED((injectionSwitch / -92.39)))).x, mix(float(_GLF_FUZZED(-7.8)), float(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED((injectionSwitch / -92.39)))).x), bool(true))) > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, true, true)), bool(bvec4(bool(bvec4(false, true, true, true)), true, false, true))))))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false) || (_GLF_WRAPPED_LOOP(false))));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, false, false))), (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
}
