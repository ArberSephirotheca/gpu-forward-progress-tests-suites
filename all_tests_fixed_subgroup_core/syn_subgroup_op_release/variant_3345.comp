#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (false))), ! (! (! (_GLF_IDENTITY(false, false || (false))))))))), (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (false))), ! (! (! (_GLF_IDENTITY(false, false || (false)))))))))) || false)))))
  barrier();
uint subgroup_size = 16;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false))))), (injectionSwitch.x > injectionSwitch.y))) || false)), bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false))))), (injectionSwitch.x > injectionSwitch.y))) || false), (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false))))), (injectionSwitch.x > injectionSwitch.y))) || false)) || false)), true, _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y)))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || _GLF_IDENTITY(false, (false) && true)))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        return;
       barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(1.4)), float(injectionSwitch.y), bool(true)))))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(1.4)), float(injectionSwitch.y), bool(true)))))), false))))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec4(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, false))))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))), ! (! (injectionSwitch.x > injectionSwitch.y)))))))
      barrier();
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), false || (_GLF_IDENTITY(false, bool(bool(false)))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))), (! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))) && true)) || false)))) && true)))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(min(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))), injectionSwitch), mix(vec2(_GLF_IDENTITY((min(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))), injectionSwitch))[0], max((min(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))), injectionSwitch))[0], (min(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))), injectionSwitch))[0])), _GLF_FUZZED(9.3)), vec2(_GLF_FUZZED(76.84), (min(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))), injectionSwitch))[1]), bvec2(false, true)))).y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
      barrier();
     return;
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec3(bvec2(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(_GLF_IDENTITY(bool(! (false)), bool(bvec4(bool(! (false)), true, true, true))))))), false), true)))))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true))), true, true)), bool(bvec2(bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true))), true, true)), false))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, (true ? _GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], gl_NumWorkGroups[2])) : _GLF_FUZZED((true ? uvec3(92982u, 134329u, 112333u) : uvec3(129744u, 155315u, 117264u)))))))) | uvec3(0u, 0u, 0u)).x;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
  }
 uint workgroup_size = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, clamp(gl_WorkGroupSize.x, _GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY((gl_WorkGroupSize.x) << (84987u & 0u), min((gl_WorkGroupSize.x) << (84987u & 0u), _GLF_IDENTITY((gl_WorkGroupSize.x) << (84987u & 0u), min((gl_WorkGroupSize.x) << (84987u & 0u), (gl_WorkGroupSize.x) << (84987u & 0u)))))), gl_WorkGroupSize.x)), _GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupSize.x, min(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) - uvec3(0u, 0u, 0u)).x, _GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) + uvec3(0u, 0u, 0u)).x))) / _GLF_IDENTITY(1u, min(1u, 1u)), clamp((_GLF_IDENTITY(gl_WorkGroupSize.x, min(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) - uvec3(0u, 0u, 0u)).x, _GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) + uvec3(0u, 0u, 0u)).x))) / 1u, (_GLF_IDENTITY(gl_WorkGroupSize.x, min(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) - uvec3(0u, 0u, 0u)).x, _GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) + uvec3(0u, 0u, 0u)).x))) / 1u, (_GLF_IDENTITY(gl_WorkGroupSize.x, min(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) - uvec3(0u, 0u, 0u)).x, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) - uvec3(0u, 0u, 0u)).x : _GLF_FUZZED(uint(faceforward(-1034.4441, 1498.3449, 32.60))))), _GLF_IDENTITY(gl_WorkGroupSize, (_GLF_IDENTITY(gl_WorkGroupSize, (_GLF_IDENTITY(gl_WorkGroupSize, clamp(gl_WorkGroupSize, gl_WorkGroupSize, gl_WorkGroupSize))) - uvec3(0u, 0u, 0u))) + uvec3(0u, 0u, 0u)).x))) / 1u))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, clamp(gl_WorkGroupSize.x, _GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY(_GLF_IDENTITY((gl_WorkGroupSize.x) << (84987u & 0u), min((gl_WorkGroupSize.x) << _GLF_IDENTITY((84987u & 0u), min(_GLF_IDENTITY((84987u & 0u), clamp((84987u & 0u), (84987u & 0u), (84987u & 0u))), (84987u & 0u))), (gl_WorkGroupSize.x) << (84987u & 0u))), clamp(_GLF_IDENTITY((gl_WorkGroupSize.x) << _GLF_IDENTITY((_GLF_IDENTITY(84987u, 0u + (_GLF_IDENTITY(84987u, (0u << _GLF_IDENTITY(uint(5u), uint(5u))) ^ (84987u)))) & 0u), ((_GLF_IDENTITY(84987u, 0u + (_GLF_IDENTITY(84987u, (0u << _GLF_IDENTITY(uint(5u), uint(5u))) ^ (84987u)))) & 0u)) >> 0u), min((gl_WorkGroupSize.x) << _GLF_IDENTITY((84987u & 0u), min(_GLF_IDENTITY((84987u & 0u), clamp((84987u & 0u), (84987u & 0u), (84987u & 0u))), (84987u & 0u))), (gl_WorkGroupSize.x) << (84987u & 0u))), _GLF_IDENTITY((gl_WorkGroupSize.x) << (84987u & 0u), min((gl_WorkGroupSize.x) << _GLF_IDENTITY((84987u & 0u), min(_GLF_IDENTITY((84987u & 0u), clamp((84987u & 0u), (84987u & 0u), (84987u & 0u))), (84987u & 0u))), (gl_WorkGroupSize.x) << (84987u & 0u))), _GLF_IDENTITY(_GLF_IDENTITY((gl_WorkGroupSize.x), ((gl_WorkGroupSize.x)) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))) << (84987u & 0u), min((gl_WorkGroupSize.x) << _GLF_IDENTITY((84987u & 0u), min(_GLF_IDENTITY((84987u & 0u), clamp((84987u & 0u), (84987u & _GLF_IDENTITY(0u, (0u) - 0u)), _GLF_IDENTITY((84987u & 0u), ((84987u & 0u)) | (_GLF_IDENTITY((84987u & 0u), uint(_GLF_IDENTITY(uint((84987u & 0u)), (uint((84987u & 0u))) / 1u))))))), (84987u & 0u))), (gl_WorkGroupSize.x) << (84987u & 0u)))))), gl_WorkGroupSize.x)), (_GLF_IDENTITY(gl_WorkGroupSize.x, min(gl_WorkGroupSize.x, gl_WorkGroupSize.x))) / 1u), (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, clamp(gl_WorkGroupSize.x, _GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY((gl_WorkGroupSize.x) << (84987u & _GLF_IDENTITY(0u, 0u ^ (_GLF_IDENTITY(0u, max(0u, _GLF_IDENTITY(0u, (0u) * 1u)))))), _GLF_IDENTITY(min((gl_WorkGroupSize.x) << (84987u & 0u), (gl_WorkGroupSize.x) << (_GLF_IDENTITY(84987u & 0u, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(84987u & 0u, (84987u & 0u) ^ 0u)), (uint(_GLF_IDENTITY(84987u & 0u, (84987u & 0u) ^ 0u))) << 0u)), (uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(84987u & 0u, (84987u & 0u) ^ 0u)), (uint(_GLF_IDENTITY(84987u & 0u, (84987u & 0u) ^ 0u))) << 0u))) - 0u)))), 0u | (min((gl_WorkGroupSize.x) << (84987u & 0u), (gl_WorkGroupSize.x) << (84987u & 0u)))))), gl_WorkGroupSize.x)), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupSize.x, min(gl_WorkGroupSize.x, gl_WorkGroupSize.x))), 0u ^ (_GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupSize.x, min(gl_WorkGroupSize.x, gl_WorkGroupSize.x))), uint(_GLF_IDENTITY(uint((_GLF_IDENTITY(gl_WorkGroupSize.x, min(gl_WorkGroupSize.x, gl_WorkGroupSize.x)))), (true ? uint((_GLF_IDENTITY(gl_WorkGroupSize.x, min(gl_WorkGroupSize.x, gl_WorkGroupSize.x)))) : _GLF_FUZZED(num_workgroup))))))) / 1u, _GLF_IDENTITY(max((_GLF_IDENTITY(gl_WorkGroupSize.x, min(gl_WorkGroupSize.x, gl_WorkGroupSize.x))) / 1u, _GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupSize.x, min(gl_WorkGroupSize.x, gl_WorkGroupSize.x))) / 1u, (false ? _GLF_FUZZED(38194u) : (_GLF_IDENTITY(gl_WorkGroupSize.x, min(gl_WorkGroupSize.x, gl_WorkGroupSize.x))) / 1u))), (max((_GLF_IDENTITY(gl_WorkGroupSize.x, min(gl_WorkGroupSize.x, gl_WorkGroupSize.x))) / 1u, _GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupSize.x, min(gl_WorkGroupSize.x, gl_WorkGroupSize.x))) / 1u, (false ? _GLF_FUZZED(38194u) : (_GLF_IDENTITY(gl_WorkGroupSize.x, min(gl_WorkGroupSize.x, gl_WorkGroupSize.x))) / 1u)))) / 1u)))) >> 0u)) | 0u);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(vec4(injectionSwitch.x, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0))), mix(float(_GLF_IDENTITY(injectionSwitch.x, float(vec4(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x, 1.0, _GLF_ZERO(_GLF_IDENTITY(0.0, 0.0 + (_GLF_IDENTITY(0.0, min(0.0, 0.0)))), injectionSwitch.x), 1.0)))), float(_GLF_FUZZED(79.37)), bool(false))) > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      return;
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (_GLF_IDENTITY(false, (false) && true)), (false || (_GLF_IDENTITY(false, (false) && true))) || false))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((- -2104.5725)), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(float((mat3(7.9, -411.281, -849.201, -3.0, 6867.7432, 4220.2302, -0.2, 251.645, 6161.1138) == mat3(-4415.3890, 2.3, -8.7, -981.669, 604.089, -9240.1745, -4.1, 733.631, 802.928))))), bvec2(true, false))).x > injectionSwitch.y))))
          return;
         barrier();
        }
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           barrier();
          }
         barrier();
        }
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(false, ! (! (false)))) || false)))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true)))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bool(false)))))))
          return;
         return;
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(pow(injectionSwitch, (mat4x2(1.0, -3.8, -983.923, -4.0, -1.4, 59.55, 5.4, -36.64) , injectionSwitch))) : injectionSwitch)).y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(pow(injectionSwitch, (mat4x2(1.0, -3.8, -983.923, -4.0, -1.4, 59.55, 5.4, -36.64) , injectionSwitch))) : injectionSwitch)).y))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
        }
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) || false)))
        barrier();
      }
     return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(_GLF_IDENTITY(true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_IDENTITY(true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec3(true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true, true))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_IDENTITY(true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec3(true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true, true)))))), false || (bool(_GLF_IDENTITY(true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_IDENTITY(true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec3(true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true, true))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_IDENTITY(true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec3(true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true, true)))))), false || (bool(_GLF_IDENTITY(true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_IDENTITY(true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec3(true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true, true))))))))), bool(bvec4(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_IDENTITY(true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec3(true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true, true)))))), false || (bool(_GLF_IDENTITY(true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_IDENTITY(true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec3(true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true, true))))))))), false, false, false))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(false)), bool(bvec4(bool(bool(false)), true, true, false))), (bool(bool(false))) && true))))
    return;
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  barrier();
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), (_GLF_IDENTITY(workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size)))) << 0u)) ^ 0u) + ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, ~ (~ (_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, 1u * (subgroup_local_id))) ^ 0u)))) + 1, max(_GLF_IDENTITY(subgroup_local_id + 1, 0u | (subgroup_local_id + 1)), _GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + 1, subgroup_local_id + 1))))) % subgroup_size), min(_GLF_IDENTITY(workgroup_base + subgroup_id * _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size))) | (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size))))) / 1u), ~ (_GLF_IDENTITY(~ (subgroup_size), min(~ (subgroup_size), ~ (subgroup_size))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size))) | (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size))))) / 1u), ~ (_GLF_IDENTITY(~ (subgroup_size), min(~ (subgroup_size), ~ (subgroup_size))))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size))) | (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size))))) / 1u), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_size), 1u * (~ (subgroup_size))), min(~ (subgroup_size), ~ (subgroup_size))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size))) | (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size))))) / 1u), ~ (_GLF_IDENTITY(~ (subgroup_size), min(~ (subgroup_size), ~ (subgroup_size))))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(max(subgroup_size, subgroup_size), ~ (_GLF_IDENTITY(~ (max(subgroup_size, subgroup_size)), clamp(_GLF_IDENTITY(~ (max(subgroup_size, subgroup_size)), (~ (max(subgroup_size, subgroup_size))) | 0u), ~ (max(subgroup_size, subgroup_size)), ~ (max(subgroup_size, subgroup_size)))))))) | (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size))))) / 1u), ~ (_GLF_IDENTITY(~ (subgroup_size), min(~ (subgroup_size), ~ (subgroup_size)))))))))) + (_GLF_IDENTITY((subgroup_local_id + 1), (true ? _GLF_IDENTITY((subgroup_local_id + 1), 0u | ((subgroup_local_id + 1))) : _GLF_FUZZED(virtual_gid))) % subgroup_size), _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(~ (~ (subgroup_size)), (_GLF_IDENTITY(~ (~ (subgroup_size)), (0u | 0u) | (~ (~ (subgroup_size))))) | (~ (~ (subgroup_size))))), (subgroup_id * _GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size)))) | (_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), 0u | (_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), max(subgroup_id * _GLF_IDENTITY(subgroup_size, ~ _GLF_IDENTITY((~ (subgroup_size)), uint(uvec2((~ (subgroup_size)), 1u)))), subgroup_id * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), 1u * (_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size)))))), ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), 1u * (_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))))))) - (0u >> _GLF_IDENTITY(uint(5u), uint(5u)))) | 0u))))))), (_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), (subgroup_id * _GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size)))) >> 0u)) - 0u), 0u + (workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(~ _GLF_IDENTITY((~ (subgroup_size)), (_GLF_IDENTITY((~ (subgroup_size)), (0u >> _GLF_IDENTITY(uint(1u), uint(1u))) ^ ((~ (subgroup_size))))) - uint(_GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_IDENTITY(~ (~ (subgroup_size)), (0u | 0u) | (~ (~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)))))) | (~ (~ (subgroup_size))))), (_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(~ (~ (subgroup_size)), (_GLF_IDENTITY(~ (~ (subgroup_size)), (0u | 0u) | (~ (~ (subgroup_size))))) | (~ (~ (subgroup_size))))), (subgroup_id * _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(~ (~ (subgroup_size)), (_GLF_IDENTITY(~ (~ (subgroup_size)), (0u | 0u) | (~ (~ (subgroup_size))))) | (~ (~ (subgroup_size)))))) | (subgroup_id * _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(~ (~ (subgroup_size)), (_GLF_IDENTITY(~ (~ (subgroup_size)), (0u | 0u) | (~ (~ (subgroup_size))))) | (~ (~ (subgroup_size)))))))) | (subgroup_id * _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(~ (~ (subgroup_size)), _GLF_IDENTITY((_GLF_IDENTITY(~ (~ (subgroup_size)), _GLF_IDENTITY((0u | 0u) | (~ (~ (subgroup_size))), ~ (~ (_GLF_IDENTITY((0u | 0u) | (~ (~ (subgroup_size))), clamp((0u | 0u) | (~ (~ (subgroup_size))), (0u | 0u) | (~ (~ (subgroup_size))), (0u | 0u) | (~ (~ (subgroup_size)))))))))), ((_GLF_IDENTITY(~ (~ (subgroup_size)), _GLF_IDENTITY((0u | 0u) | (~ (~ (subgroup_size))), ~ (~ (_GLF_IDENTITY((0u | 0u) | (~ (~ (subgroup_size))), clamp((0u | 0u) | (~ (~ (subgroup_size))), (0u | 0u) | (~ (~ (subgroup_size))), (0u | 0u) | (~ (~ (subgroup_size))))))))))) * 1u) | (~ (~ (subgroup_size))))))), (subgroup_id * _GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size)))) | (_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), 0u | (_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(~ (~ (subgroup_size)), 0u ^ (~ (~ (subgroup_size))))), max(subgroup_id * _GLF_IDENTITY(subgroup_size, ~ _GLF_IDENTITY((~ (subgroup_size)), uint(uvec2((~ (subgroup_size)), 1u)))), subgroup_id * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u), ~ (~ (subgroup_size))), 1u * (_GLF_IDENTITY(subgroup_size, ~ _GLF_IDENTITY((~ (subgroup_size)), ((~ (subgroup_size))) | uint(_GLF_ZERO(0.0, injectionSwitch.x))))))) | 0u))))))), (_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), (subgroup_id * _GLF_IDENTITY(subgroup_size, ~ (~ _GLF_IDENTITY((subgroup_size), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((subgroup_size), clamp((subgroup_size), (subgroup_size), (subgroup_size)))), max(~ (_GLF_IDENTITY((subgroup_size), clamp((subgroup_size), (subgroup_size), (subgroup_size)))), _GLF_IDENTITY(~ (_GLF_IDENTITY((subgroup_size), clamp((subgroup_size), (subgroup_size), (subgroup_size)))), (~ (_GLF_IDENTITY((subgroup_size), clamp((subgroup_size), (subgroup_size), (subgroup_size))))) | (~ (_GLF_IDENTITY((subgroup_size), clamp((subgroup_size), (subgroup_size), (subgroup_size))))))))))))) >> 0u)) - 0u))) + (_GLF_IDENTITY((subgroup_local_id + 1), min((subgroup_local_id + 1), _GLF_IDENTITY((subgroup_local_id + 1), clamp((subgroup_local_id + 1), _GLF_IDENTITY((subgroup_local_id + 1), 0u | ((subgroup_local_id + 1))), (subgroup_local_id + 1))))) % subgroup_size)), (_GLF_IDENTITY((workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(~ (~ (subgroup_size)), (_GLF_IDENTITY(~ (~ (subgroup_size)), (0u | 0u) | (~ (~ (subgroup_size))))) | (~ (~ (_GLF_IDENTITY(subgroup_size, (0u | 0u) + (subgroup_size))))))), (subgroup_id * _GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size)))) | (_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(~ (~ (subgroup_size)), min(_GLF_IDENTITY(~ (~ (subgroup_size)), (~ (~ (subgroup_size))) | 0u), ~ (~ (subgroup_size))))), 0u | (_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), max(subgroup_id * _GLF_IDENTITY(subgroup_size, ~ _GLF_IDENTITY((~ (subgroup_size)), uint(uvec2((~ (subgroup_size)), 1u)))), subgroup_id * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, ~ _GLF_IDENTITY((~ (subgroup_size)), ((~ (subgroup_size))) | (_GLF_IDENTITY((~ (subgroup_size)), ~ (~ ((~ (subgroup_size)))))))), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), 1u * (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(~ (~ (subgroup_size)), _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)) + (~ (~ (subgroup_size)))))))) | 0u))))))), (_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), ~ (~ (_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size)))))), (subgroup_id * _GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size)))) >> 0u)) - _GLF_IDENTITY(0u, ~ (~ (0u)))) + ((subgroup_local_id + 1) % subgroup_size)), ((workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(~ (~ (subgroup_size)), (_GLF_IDENTITY(~ (~ (subgroup_size)), (0u | 0u) | (~ (_GLF_IDENTITY(~ (subgroup_size), (true ? ~ (subgroup_size) : _GLF_FUZZED(subgroup_local_id))))))) | (~ (~ (subgroup_size))))), (_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(false ? _GLF_FUZZED(num_workgroup) : subgroup_id, max(false ? _GLF_FUZZED(num_workgroup) : subgroup_id, false ? _GLF_FUZZED(num_workgroup) : subgroup_id))))) - 0u) * _GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size)))) | (_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), 0u | (_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), max(subgroup_id * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, ~ _GLF_IDENTITY((~ (subgroup_size)), uint(uvec2((~ (subgroup_size)), 1u)))), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, ~ _GLF_IDENTITY((~ (subgroup_size)), uint(uvec2((~ (subgroup_size)), 1u)))), min(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, ~ _GLF_IDENTITY((~ (subgroup_size)), uint(uvec2((~ (subgroup_size)), 1u)))), (_GLF_IDENTITY(subgroup_size, ~ _GLF_IDENTITY((~ (subgroup_size)), uint(uvec2((~ (subgroup_size)), 1u))))) | (_GLF_IDENTITY(subgroup_size, ~ _GLF_IDENTITY((~ (subgroup_size)), uint(uvec2((~ (subgroup_size)), 1u)))))), _GLF_IDENTITY(subgroup_size, ~ _GLF_IDENTITY((~ (subgroup_size)), uint(uvec2((~ (subgroup_size)), 1u))))))) | (_GLF_IDENTITY(subgroup_size, ~ _GLF_IDENTITY((~ (subgroup_size)), uint(uvec2((~ (subgroup_size)), 1u)))))), subgroup_id * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), 1u * (_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size)))))) | 0u))))))), (_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), (subgroup_id * _GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size)))) >> 0u)) - 0u) + ((subgroup_local_id + 1) % subgroup_size))) / 1u)) | (0u | 0u)) / 1u), workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, ~ (~ _GLF_IDENTITY((subgroup_size), ((subgroup_size)) | 0u))) + ((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_id) : subgroup_size, (0u >> _GLF_IDENTITY(uint(4u), uint(4u))) ^ (false ? _GLF_FUZZED(subgroup_id) : subgroup_size)))))));
 atomicStore(buf[virtual_gid], uint(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (1)), (_GLF_IDENTITY(1, (1) | (1))) << 0), 1, 1))), 4, _GLF_IDENTITY(64, max(_GLF_IDENTITY(64, min(64, 64)), 64)), 4);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec4((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec2(_GLF_IDENTITY(bool(bvec4((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(bvec4((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), true)))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   barrier();
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, 0 | _GLF_IDENTITY((0), ((0)) ^ 0))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    break;
   if(_GLF_IDENTITY(subgroup_local_id, 0u + (subgroup_local_id)) + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(76594))) : _GLF_FUZZED(_injected_loop_counter))) < _GLF_IDENTITY(subgroup_size, 0u + (_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), true && (! (injectionSwitch.x > injectionSwitch.y)))))))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))) && true)))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         continue;
        }
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, false || (false))))), (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           continue;
          }
         if(_GLF_DEAD(false))
          continue;
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) || false), (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / sqrt(vec2(1.0, 1.0))).y, (injectionSwitch.y) * _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))))), (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) || false), (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / _GLF_IDENTITY(sqrt(vec2(1.0, 1.0)), (sqrt(vec2(1.0, 1.0))) - vec2(0.0, 0.0))).y, (injectionSwitch.y) * 1.0))), ! (_GLF_IDENTITY(! (_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) || false), (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / _GLF_IDENTITY(sqrt(vec2(1.0, 1.0)), (sqrt(vec2(1.0, 1.0))) - vec2(0.0, 0.0))).y, (injectionSwitch.y) * 1.0)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) || false), (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / _GLF_IDENTITY(sqrt(vec2(1.0, 1.0)), (sqrt(vec2(1.0, 1.0))) - vec2(0.0, 0.0))).y, (injectionSwitch.y) * 1.0)))), (! (_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) || false), (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / _GLF_IDENTITY(sqrt(vec2(1.0, 1.0)), (sqrt(vec2(1.0, 1.0))) - vec2(0.0, 0.0))).y, (injectionSwitch.y) * 1.0))))) || false)), true && (! (_GLF_IDENTITY(! (_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) || false), (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / _GLF_IDENTITY(sqrt(vec2(1.0, 1.0)), (sqrt(vec2(1.0, 1.0))) - vec2(0.0, 0.0))).y, (injectionSwitch.y) * 1.0)))), (! (_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) || false), (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / _GLF_IDENTITY(sqrt(vec2(1.0, 1.0)), (sqrt(vec2(1.0, 1.0))) - vec2(0.0, 0.0))).y, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)).y) * 1.0))))) || false))))))))) && true)))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
            break;
           barrier();
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)) || false))))) && true))))
            barrier();
          }
         continue;
         if(_GLF_DEAD(false))
          break;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          break;
         barrier();
        }
       barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(0.0 + (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)), mix(float(0.0 + (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0))), float(_GLF_FUZZED(-1.0)), bool(false))))))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
            return;
           barrier();
          }
         continue;
         if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, false, false))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
            break;
           return;
          }
        }
       if(_GLF_DEAD(false))
        break;
      }
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       continue;
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, (_GLF_IDENTITY(next_virtual_gid, clamp(next_virtual_gid, next_virtual_gid, _GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) / 1u)))) * 1u)], uint(2), 4, 64, 4);
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)))))
        continue;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        break;
       barrier();
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           barrier();
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              break;
             barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         break;
        }
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-97.13)), float(injectionSwitch.y), bool(true)))))))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     subgroupAll(false);
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))) || false)), ! (! (! (_GLF_IDENTITY(false, (false) || false)))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)), ! (! ((_GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false))))), (false) || false))))), true && _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true))))), ! (! ((_GLF_IDENTITY(false, (false) || false)))))), (_GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true))))), ! (! ((_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), (false) || false)))))), (_GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true))))), ! (! ((_GLF_IDENTITY(false, (false) || false)))))), true && ((_GLF_IDENTITY((_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true))))), ! (! ((_GLF_IDENTITY(false, (false) || false))))))))) || false)) && _GLF_IDENTITY(true, bool(bvec2(true, true)))))))) && true)))
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(bvec2(false, false)))))))))
        continue;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
        }
       continue;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(vec2(-96.12, 46.66).t)), bool(false))))), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(vec2(-96.12, 46.66).t)), bool(false))))), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(vec2(-96.12, 46.66).t)), bool(false))), min(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(vec2(-96.12, _GLF_IDENTITY(46.66, mix(float(_GLF_FUZZED((-0.5 / (-2830.8255)))), float(46.66), bool(true)))).t)), bool(false))), _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(_GLF_IDENTITY(vec2(-96.12, 46.66), clamp(vec2(-96.12, 46.66), vec2(-96.12, 46.66), vec2(-96.12, 46.66))).t)), bool(false))))))), true)))))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((false) && true)))) || false)))
            continue;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           barrier();
          }
         if(_GLF_DEAD(false))
          break;
         barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, bool(bvec3(false, true, true))), false), bvec2(bvec2(bvec2(_GLF_IDENTITY(false, bool(bvec3(false, true, true))), false))))))))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))) || false)))), _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true, bool(bvec4(true, false, false, true))), false, true)), _GLF_IDENTITY(bool(bvec4(bool(bvec3(_GLF_IDENTITY(true, bool(bvec4(true, false, false, true))), false, true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), ! (! (bool(bvec4(bool(bvec3(_GLF_IDENTITY(true, bool(bvec4(true, false, false, true))), false, true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))))))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        continue;
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      continue;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (injectionSwitch.x > injectionSwitch.y))), ! (! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), ! (! ((_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          break;
         barrier();
        }
       barrier();
      }
     atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false)))))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     subgroupAll(true);
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((true ? injectionSwitch.x : _GLF_FUZZED(9068.9521)), (_GLF_IDENTITY((true ? injectionSwitch.x : _GLF_FUZZED(9068.9521)), ((true ? injectionSwitch.x : _GLF_FUZZED(9068.9521))) * 1.0)) - 0.0)), injectionSwitch.x)) > injectionSwitch.y), bool(bvec2((_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((true ? injectionSwitch.x : _GLF_FUZZED(9068.9521)), (_GLF_IDENTITY((true ? injectionSwitch.x : _GLF_FUZZED(9068.9521)), ((true ? injectionSwitch.x : _GLF_FUZZED(9068.9521))) * 1.0)) - 0.0)), injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), true))))))
      {
       if(_GLF_DEAD(false))
        continue;
       barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * _GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(((2.9 / -3777.3909) + 73.98)), ((injectionSwitch))[1]), vec2(((injectionSwitch))[0], _GLF_FUZZED(1.5)), bvec2(true, false)))).x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))), true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), true, false)))))))
        barrier();
       if(_GLF_DEAD(false))
        return;
       barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
           barrier();
          }
         return;
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, false, false))), (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, false, false))), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, false, false)))))) && true)))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) && true)))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(mix(float(injectionSwitch.x), _GLF_IDENTITY(float(_GLF_FUZZED(7.1)), mix(float(float(_GLF_FUZZED(7.1))), float(_GLF_FUZZED(vec4(-42.79, 390.341, 5029.4761, 5.8).x)), bool(false))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), clamp(mix(float(injectionSwitch.x), _GLF_IDENTITY(float(_GLF_FUZZED(7.1)), mix(float(float(_GLF_FUZZED(7.1))), float(_GLF_FUZZED(vec4(-42.79, 390.341, 5029.4761, 5.8).x)), bool(false))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), mix(float(injectionSwitch.x), _GLF_IDENTITY(float(_GLF_FUZZED(7.1)), mix(float(float(_GLF_FUZZED(7.1))), float(_GLF_FUZZED(vec4(-42.79, 390.341, 5029.4761, 5.8).x)), bool(false))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(mix(float(injectionSwitch.x), _GLF_IDENTITY(float(_GLF_FUZZED(7.1)), mix(float(float(_GLF_FUZZED(7.1))), float(_GLF_FUZZED(vec4(-42.79, 390.341, 5029.4761, 5.8).x)), bool(false))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), max(mix(float(injectionSwitch.x), _GLF_IDENTITY(float(_GLF_FUZZED(7.1)), mix(float(float(_GLF_FUZZED(7.1))), float(_GLF_FUZZED(vec4(-42.79, 390.341, 5029.4761, 5.8).x)), bool(false))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), mix(float(injectionSwitch.x), _GLF_IDENTITY(float(_GLF_FUZZED(7.1)), mix(float(float(_GLF_FUZZED(7.1))), float(_GLF_FUZZED(vec4(-42.79, 390.341, 5029.4761, 5.8).x)), bool(false))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))) > injectionSwitch.y), true && ((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(mix(float(injectionSwitch.x), _GLF_IDENTITY(float(_GLF_FUZZED(7.1)), mix(float(float(_GLF_FUZZED(7.1))), float(_GLF_FUZZED(vec4(-42.79, 390.341, 5029.4761, 5.8).x)), bool(false))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), clamp(mix(float(injectionSwitch.x), _GLF_IDENTITY(float(_GLF_FUZZED(7.1)), mix(float(float(_GLF_FUZZED(7.1))), float(_GLF_FUZZED(vec4(-42.79, 390.341, 5029.4761, 5.8).x)), bool(false))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), mix(float(injectionSwitch.x), _GLF_IDENTITY(float(_GLF_FUZZED(7.1)), mix(float(float(_GLF_FUZZED(7.1))), float(_GLF_FUZZED(vec4(-42.79, 390.341, 5029.4761, 5.8).x)), bool(false))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(mix(float(injectionSwitch.x), _GLF_IDENTITY(float(_GLF_FUZZED(7.1)), mix(float(float(_GLF_FUZZED(7.1))), float(_GLF_FUZZED(vec4(-42.79, 390.341, 5029.4761, 5.8).x)), bool(false))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), max(mix(float(injectionSwitch.x), _GLF_IDENTITY(float(_GLF_FUZZED(7.1)), mix(float(float(_GLF_FUZZED(7.1))), float(_GLF_FUZZED(vec4(-42.79, 390.341, 5029.4761, 5.8).x)), bool(false))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), mix(float(injectionSwitch.x), _GLF_IDENTITY(float(_GLF_FUZZED(7.1)), mix(float(float(_GLF_FUZZED(7.1))), float(_GLF_FUZZED(vec4(-42.79, 390.341, 5029.4761, 5.8).x)), bool(false))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))) > injectionSwitch.y))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(false, _GLF_IDENTITY(true, bool(bvec2(true, false))), false, true)), false || (bool(bvec4(false, _GLF_IDENTITY(true, bool(bvec2(true, false))), _GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), bool(bvec2(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), bool(bvec4(_GLF_IDENTITY(false, false || (false)), true, false, true))), true, true), bvec3(bvec3(bvec3(false, true, true)))))), false))), true)))), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(false, _GLF_IDENTITY(true, bool(bvec2(true, false))), false, true)), false || (bool(bvec4(false, _GLF_IDENTITY(true, bool(bvec2(true, false))), _GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), bool(bvec2(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, false || (false)), true, true), bvec3(bvec3(bvec3(false, true, true)))))), false))), true)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec4(false, _GLF_IDENTITY(true, bool(bvec2(true, false))), false, true)), false || (bool(bvec4(false, _GLF_IDENTITY(true, bool(bvec2(true, false))), _GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), bool(bvec2(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), bool(bool((false))))), bool(bvec4(! (_GLF_IDENTITY((false), bool(bool((false))))), true, true, true)))))), true, true), bvec3(bvec3(bvec3(false, true, true)))))), false))), true))))), (! (_GLF_IDENTITY(bool(bvec4(false, _GLF_IDENTITY(true, bool(bvec2(true, false))), false, true)), false || (bool(bvec4(false, _GLF_IDENTITY(true, bool(bvec2(true, false))), _GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), bool(bvec2(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, false || (false)), true, true), bvec3(bvec3(bvec3(false, true, true)))))), false))), true)))))) && true))), true))))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           return;
          }
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
    }
  }
}
