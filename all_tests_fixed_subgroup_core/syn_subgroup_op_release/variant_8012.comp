#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  barrier();
 uvec4 GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_11subgroup_idsubgroup_local_idsubgroup_sizevirtual_gid;
 uvec2 GLF_merged2_0_1_16_1_1_12next_virtual_gidworkgroup_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uvec4 GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id;
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(mat4x2(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(7368.1601) : injectionSwitch.x)), 0.0, 1.0, cos(0.0), 0.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0))), 0.0, 0.0))))) > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), ~ (~ (int(_GLF_IDENTITY(7, (false ? _GLF_FUZZED(39050) : 7))))))) | (_GLF_IDENTITY(int(7), 0 | (_GLF_IDENTITY(int(7), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(7), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) ? _GLF_FUZZED(-68621) : int(7)))), clamp(~ (_GLF_IDENTITY(_GLF_IDENTITY(int(7), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-68621) : int(7))), (_GLF_IDENTITY(int(7), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_IDENTITY(_GLF_FUZZED(-68621), 1 * (_GLF_FUZZED(-68621))) : int(7)))) | 0)), ~ (_GLF_IDENTITY(int(7), (_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), false)), (bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), false))) || false), bool(bvec4(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), false)), (bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), false))) || false), false, true, false))))), bool(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), false)), (bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), false))) || false))), false), bvec2(bvec4(bvec2((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), false)), (bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), false))) || false))), false), false, false)))))) ? _GLF_FUZZED(-68621) : _GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), int(ivec2(int(7), 1)))) | (int(7)))) * 1)))), ~ (_GLF_IDENTITY(int(7), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, determinant(mat2(0.0, length(vec2(0.0, 0.0)), 0.0, 0.0)), 0.0))).x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)) ? _GLF_FUZZED(-68621) : int(7)))))))))))))), int(ivec3(((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, (_GLF_IDENTITY(7, (7) - 0)) << 0)), int(7))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), ~ (~ (int(7))))) | (_GLF_IDENTITY(int(7), 0 | (_GLF_IDENTITY(int(7), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(7), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-68621) : int(7)))), clamp(~ (_GLF_IDENTITY(int(7), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-68621) : int(7)))), ~ (_GLF_IDENTITY(int(7), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-68621) : int(7)))), ~ (_GLF_IDENTITY(int(7), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-68621) : int(7))))))))))))), min(_GLF_IDENTITY(_GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), ~ (~ (int(7))))) | (_GLF_IDENTITY(int(7), 0 | (_GLF_IDENTITY(int(7), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(7), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-68621) : int(7)))), clamp(~ (_GLF_IDENTITY(int(7), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-68621) : int(7)))), ~ (_GLF_IDENTITY(int(7), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-68621) : int(7)))), ~ (_GLF_IDENTITY(int(7), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-68621) : int(7))))))))))))), (_GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), ~ (~ (int(7))))) | (_GLF_IDENTITY(int(7), 0 | (_GLF_IDENTITY(int(7), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(7), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-68621) : int(7)))), clamp(~ (_GLF_IDENTITY(int(7), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-68621) : int(7)))), ~ (_GLF_IDENTITY(int(7), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-68621) : int(7)))), ~ (_GLF_IDENTITY(int(7), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-68621) : int(7)))))))))))))) | 0), _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), ~ (~ (int(7))))) | (_GLF_IDENTITY(int(7), 0 | (_GLF_IDENTITY(int(7), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(7), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-68621) : int(7)))), clamp(~ (_GLF_IDENTITY(int(7), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-68621) : int(7)))), ~ (_GLF_IDENTITY(int(7), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-68621) : int(7)))), ~ (_GLF_IDENTITY(int(7), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-68621) : int(7)))))))))))))))), ((_GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, (true ? 5 : _GLF_FUZZED(94997)))))), 0))), (_GLF_IDENTITY(_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), ~ (~ (int(7))))) | (_GLF_IDENTITY(int(7), 0 | (_GLF_IDENTITY(int(7), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(7), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) ? _GLF_FUZZED(-68621) : int(7)))), clamp(~ (_GLF_IDENTITY(_GLF_IDENTITY(int(7), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-68621) : int(7))), (_GLF_IDENTITY(int(7), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-68621) : int(7)))) | 0)), ~ (_GLF_IDENTITY(int(7), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), false)), (bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), false))) || false)))) ? _GLF_FUZZED(-68621) : int(7)))), ~ (_GLF_IDENTITY(int(7), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-68621) : int(7)))))))))))))), int(ivec3(((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, (_GLF_IDENTITY(7, (7) - 0)) << 0)), int(7))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(_GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), ~ (~ (int(7))))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(7), 0 | (_GLF_IDENTITY(int(7), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(7), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-68621) : int(7)))), clamp(~ (_GLF_IDENTITY(int(7), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-68621) : int(7)))), ~ (_GLF_IDENTITY(int(7), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-68621) : int(7)))), ~ (_GLF_IDENTITY(int(7), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-68621) : int(7)))))))))), (_GLF_IDENTITY(int(7), 0 | (_GLF_IDENTITY(int(7), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(7), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-68621) : int(7)))), clamp(~ (_GLF_IDENTITY(int(7), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-68621) : int(7)))), ~ (_GLF_IDENTITY(int(7), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-68621) : int(7)))), ~ (_GLF_IDENTITY(int(7), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-68621) : int(7))))))))))) | (0 << _GLF_IDENTITY(int(1), int(1)))))), max(_GLF_IDENTITY(_GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), ~ (~ (int(7))))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(7), 0 | (_GLF_IDENTITY(int(7), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(7), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-68621) : int(7)))), clamp(~ (_GLF_IDENTITY(int(7), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-68621) : int(7)))), ~ (_GLF_IDENTITY(int(7), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-68621) : int(7)))), ~ (_GLF_IDENTITY(int(7), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-68621) : int(7)))))))))), (_GLF_IDENTITY(int(7), 0 | (_GLF_IDENTITY(int(7), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(7), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-68621) : int(7)))), clamp(~ (_GLF_IDENTITY(int(7), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-68621) : int(7)))), ~ (_GLF_IDENTITY(int(7), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-68621) : int(7)))), ~ (_GLF_IDENTITY(int(7), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-68621) : int(7))))))))))) | (0 << _GLF_IDENTITY(int(1), int(1)))))), min(_GLF_IDENTITY(_GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), ~ (~ (int(7))))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(7), 0 | (_GLF_IDENTITY(int(7), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(7), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-68621) : int(7)))), clamp(~ (_GLF_IDENTITY(int(7), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-68621) : int(7)))), ~ (_GLF_IDENTITY(int(7), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-68621) : int(7)))), ~ (_GLF_IDENTITY(int(7), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-68621) : int(7)))))))))), (_GLF_IDENTITY(int(7), 0 | (_GLF_IDENTITY(int(7), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(7), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-68621) : int(7)))), clamp(~ (_GLF_IDENTITY(int(7), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-68621) : int(7)))), ~ (_GLF_IDENTITY(int(7), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-68621) : int(7)))), ~ (_GLF_IDENTITY(int(7), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-68621) : int(7))))))))))) | (0 << _GLF_IDENTITY(int(1), int(1)))))), (_GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), ~ (~ (int(7))))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(7), 0 | (_GLF_IDENTITY(int(7), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(7), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-68621) : int(7)))), clamp(~ (_GLF_IDENTITY(int(7), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-68621) : int(7)))), ~ (_GLF_IDENTITY(int(7), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-68621) : int(7)))), ~ (_GLF_IDENTITY(int(7), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-68621) : int(7)))))))))), (_GLF_IDENTITY(int(7), 0 | (_GLF_IDENTITY(int(7), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(7), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-68621) : int(7)))), clamp(~ (_GLF_IDENTITY(int(7), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-68621) : int(7)))), ~ (_GLF_IDENTITY(int(7), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-68621) : int(7)))), ~ (_GLF_IDENTITY(int(7), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-68621) : int(7))))))))))) | (0 << _GLF_IDENTITY(int(1), int(1))))))) << 0), _GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), ~ (~ (int(7))))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(7), 0 | (_GLF_IDENTITY(int(7), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(7), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-68621) : int(7)))), clamp(~ (_GLF_IDENTITY(int(7), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-68621) : int(7)))), ~ (_GLF_IDENTITY(int(7), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-68621) : int(7)))), ~ (_GLF_IDENTITY(int(7), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-68621) : int(7)))))))))), (_GLF_IDENTITY(int(7), 0 | (_GLF_IDENTITY(int(7), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(7), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-68621) : int(7)))), clamp(~ (_GLF_IDENTITY(int(7), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-68621) : int(7)))), ~ (_GLF_IDENTITY(int(7), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-68621) : int(7)))), ~ (_GLF_IDENTITY(int(7), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-68621) : int(7))))))))))) | (0 << _GLF_IDENTITY(int(1), int(1)))))))), _GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), ~ (~ (int(7))))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(7), 0 | (_GLF_IDENTITY(int(7), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(7), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-68621) : int(7)))), clamp(~ (_GLF_IDENTITY(int(7), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-68621) : int(7)))), ~ (_GLF_IDENTITY(int(7), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-68621) : int(7)))), ~ (_GLF_IDENTITY(int(7), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-68621) : int(7)))))))))), (_GLF_IDENTITY(int(7), 0 | (_GLF_IDENTITY(int(7), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(7), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-68621) : int(7)))), clamp(~ (_GLF_IDENTITY(int(7), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-68621) : int(7)))), ~ (_GLF_IDENTITY(int(7), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-68621) : int(7)))), ~ (_GLF_IDENTITY(int(7), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-68621) : int(7))))))))))) | (0 << _GLF_IDENTITY(int(1), int(1)))))))))), ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))), 0))), (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), ~ (~ (int(7))))) | _GLF_IDENTITY((_GLF_IDENTITY(int(7), 0 | (_GLF_IDENTITY(int(7), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(7), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) ? _GLF_FUZZED(-68621) : int(7)), clamp((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) ? _GLF_FUZZED(-68621) : int(7)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) ? _GLF_FUZZED(-68621) : int(7)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) ? _GLF_FUZZED(-68621) : int(7)))))), clamp(~ (_GLF_IDENTITY(_GLF_IDENTITY(int(7), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))) ? _GLF_FUZZED(_GLF_IDENTITY(-68621, (_GLF_IDENTITY(-68621, (-68621) / 1)) << 0)) : int(7))), (_GLF_IDENTITY(int(7), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-68621) : int(7)))) | _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) + 0)) | 0))), ~ (_GLF_IDENTITY(int(7), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), false)), (bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), false))) || false)))) ? _GLF_FUZZED(-68621) : int(7)))), ~ (_GLF_IDENTITY(int(7), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-68621) : int(7))))))))))), ((_GLF_IDENTITY(int(7), 0 | (_GLF_IDENTITY(int(7), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(7), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) ? _GLF_FUZZED(-68621) : int(7)))), clamp(~ (_GLF_IDENTITY(_GLF_IDENTITY(int(7), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-68621) : int(7))), (_GLF_IDENTITY(int(7), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-68621) : int(7)))) | 0)), ~ (_GLF_IDENTITY(int(7), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), false)), (bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), false))) || false)))) ? _GLF_FUZZED(-68621) : int(7)))), ~ (_GLF_IDENTITY(int(7), _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-68621) : int(7)), 1 * ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-68621) : int(7)))))))))))))) / 1)))), int(ivec3(((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(7, (_GLF_IDENTITY(7, (7) - 0)) << 0), (_GLF_IDENTITY(7, (_GLF_IDENTITY(7, (7) - 0)) << 0)) - _GLF_IDENTITY(0, int(ivec4(0, 1, 0, 1))))), int(7))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), ~ (~ (int(7))))) | (_GLF_IDENTITY(int(7), 0 | (_GLF_IDENTITY(int(7), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(int(7), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-68621) : int(7)))), clamp(~ (_GLF_IDENTITY(int(7), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))))))))))) ? _GLF_FUZZED(-68621) : int(7)))), ~ (_GLF_IDENTITY(int(7), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-68621) : int(7)))), ~ (_GLF_IDENTITY(int(7), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-68621) : int(7)))))), min(_GLF_IDENTITY(~ (_GLF_IDENTITY(int(7), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-68621) : int(7)))), clamp(~ (_GLF_IDENTITY(int(7), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-68621) : int(7)))), ~ (_GLF_IDENTITY(int(7), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)) : _GLF_FUZZED(vec2(-7964.5944, -800.520)))).y)) ? _GLF_FUZZED(-68621) : int(7)))), ~ (_GLF_IDENTITY(int(7), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-68621) : int(7)))))), _GLF_IDENTITY(~ (_GLF_IDENTITY(int(7), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-68621) : int(7)))), clamp(~ (_GLF_IDENTITY(int(7), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-68621) : int(7)))), ~ (_GLF_IDENTITY(int(7), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-68621) : int(7)))), ~ (_GLF_IDENTITY(int(7), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-68621) : int(7)))))))))))))))), ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))), 0)))) | 0)) * 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_11subgroup_idsubgroup_local_idsubgroup_sizevirtual_gid.x = subgroup_id;
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     do
      {
       GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id.z = GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_11subgroup_idsubgroup_local_idsubgroup_sizevirtual_gid.x;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
         for(int _injected_loop_counter = _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) | (0))) / 1), 0, _GLF_IDENTITY(0, int(ivec2(0, 1))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           for(int _injected_loop_counter = _GLF_IDENTITY(1, min(1, 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              barrier();
            }
          }
        }
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
          barrier();
        }
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
uint subgroup_size = 16;
 GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_11subgroup_idsubgroup_local_idsubgroup_sizevirtual_gid.z = subgroup_size;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
      {
      }
     else
      {
       barrier();
      }
    }
   barrier();
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 do
  {
   for(int _injected_loop_counter = (_GLF_IDENTITY(0, min(0, 0)) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(_GLF_IDENTITY(int(6), (false ? _GLF_FUZZED(-6265) : _GLF_IDENTITY(int(6), (int(6)) | (int(6))))), (int(6)) + 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_11subgroup_idsubgroup_local_idsubgroup_sizevirtual_gid.y = subgroup_local_id;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id.w = GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_11subgroup_idsubgroup_local_idsubgroup_sizevirtual_gid.y;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id.y = _GLF_IDENTITY(num_workgroup, (_GLF_IDENTITY(num_workgroup, (false ? _GLF_FUZZED(subgroup_local_id) : num_workgroup))) - _GLF_IDENTITY(((1u & 1u) ^ (1u ^ 0u)), ~ (_GLF_IDENTITY(~ (((1u & 1u) ^ (1u ^ 0u))), (~ (((1u & 1u) ^ (1u ^ 0u)))) | (~ (((1u & 1u) ^ (1u ^ 0u))))))));
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(624.809, 58.28)))), _GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 1.0))))).x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
      }
     else
      {
      }
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bool(false)))))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             else
              {
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
          }
         else
          {
          }
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  {
                   for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, (1) | 0)); _injected_loop_counter ++)
                    {
                     barrier();
                    }
                  }
                }
               else
                {
                }
              }
             else
              {
              }
             barrier();
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, bool(bvec3(_GLF_IDENTITY(_injected_loop_counter > 0, (_injected_loop_counter > 0) || false), false, false)))); _injected_loop_counter --)
      {
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((injectionSwitch.x > injectionSwitch.y))))))
  barrier();
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize, ~ (~ (gl_WorkGroupSize))).x;
 uint workgroup_id = gl_WorkGroupID.x;
 GLF_merged2_0_1_16_1_1_12next_virtual_gidworkgroup_id.y = workgroup_id;
 uint workgroup_base = workgroup_size * GLF_merged2_0_1_16_1_1_12next_virtual_gidworkgroup_id.y;
 uint virtual_gid = workgroup_base + GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id.z * GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_11subgroup_idsubgroup_local_idsubgroup_sizevirtual_gid.z + GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id.w;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(1 ^ 1, min(_GLF_IDENTITY(1 ^ 1, (1 ^ 1) | _GLF_IDENTITY((1 ^ 1), (_GLF_IDENTITY((1 ^ 1), clamp((1 ^ 1), (1 ^ 1), (1 ^ 1)))) * int(_GLF_ONE(1.0, injectionSwitch.y)))), _GLF_IDENTITY(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(_injected_loop_counter))) ^ 1, max(1 ^ 1, 1 ^ 1)))))); _injected_loop_counter --)
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(! (! (false)), ! (! (! (! (false))))))))))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
          {
          }
         else
          {
           barrier();
          }
        }
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_11subgroup_idsubgroup_local_idsubgroup_sizevirtual_gid.w = virtual_gid;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
          {
           do
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
            {
             for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               barrier();
              }
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
          }
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4x3(injectionSwitch, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0), mat4x3(mat4x3(_GLF_IDENTITY(mat4x3(injectionSwitch, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0), (false ? _GLF_FUZZED(mat4x3(7.4, 7.0, 7570.8812, 12.45, -346.997, 2582.9268, -93.01, -6726.3104, -2.9, -1401.6195, 8.0, -5.7)) : mat4x3(injectionSwitch, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0)))))))).y))))
        barrier();
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     else
      {
      }
    }
   else
    {
    }
   barrier();
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (int(_GLF_ZERO(0.0, injectionSwitch.x)) | 0)); _injected_loop_counter --)
        {
         barrier();
        }
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 uint next_virtual_gid = workgroup_base + GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id.z * GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_11subgroup_idsubgroup_local_idsubgroup_sizevirtual_gid.z + ((_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id, uvec4(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id[0], GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id[1], _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id[2], (GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id[2]) * 1u), GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id[3])).w + 1) % _GLF_IDENTITY(GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_11subgroup_idsubgroup_local_idsubgroup_sizevirtual_gid.z, min(GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_11subgroup_idsubgroup_local_idsubgroup_sizevirtual_gid.z, GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_11subgroup_idsubgroup_local_idsubgroup_sizevirtual_gid.z)));
 GLF_merged2_0_1_16_1_1_12next_virtual_gidworkgroup_id.x = next_virtual_gid;
 for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id.x = GLF_merged2_0_1_16_1_1_12next_virtual_gidworkgroup_id.x;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (_GLF_IDENTITY(_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(false, (false) && true)) && true)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(false, (false) && true)) && true)), ! (! ((_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(false, (false) && true)) && true)))))), false || (! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(false, (false) && true)) && true)), ! (! ((_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(false, (false) && true)) && true)))))))))), bool(_GLF_IDENTITY(bvec2(! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(false, (false) && true)) && true)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(false, (false) && true)) && true)), ! (! ((_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(false, (false) && true)) && true)))))), false || (! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(false, (false) && true)) && true)), ! (! ((_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(false, (false) && true)) && true)))))))))), true), bvec2(bvec4(bvec2(! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(false, (false) && true)) && true)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(false, (false) && true)) && true)), ! (! ((_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(false, (false) && true)) && true)))))), false || (! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(false, (false) && true)) && true)), ! (! ((_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(false, (false) && true)) && true)))))))))), true), true, false))))), true && (! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)), (false) && true)) && true))))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))))))
      barrier();
    }
  }
 atomicStore(buf[GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_11subgroup_idsubgroup_local_idsubgroup_sizevirtual_gid.w], uint(1), 4, _GLF_IDENTITY(64, ~ (~ (_GLF_IDENTITY(64, (64) << 0)))), _GLF_IDENTITY(4, min(4, 4)));
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id.w + 1 < GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_11subgroup_idsubgroup_local_idsubgroup_sizevirtual_gid.z)
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(bvec2(false, false))))))))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   barrier();
                  }
                }
               else
                {
                }
              }
             do
              {
               atomicStore(buf[GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id.x], uint(2), 4, 64, 4);
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           else
            {
             for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                barrier();
              }
            }
          }
         do
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          barrier();
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) - int(_GLF_ZERO(0.0, injectionSwitch.x))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(0, (0) ^ 0) << _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
          }
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < injectionSwitch.y))))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               do
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
            }
          }
         else
          {
          }
        }
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             barrier();
            }
           else
            {
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec2(false, true)))));
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY((0 ^ 1) ^ 0, 0 ^ ((0 ^ 1) ^ 0)))); _GLF_IDENTITY(_injected_loop_counter ++, 0 | (_injected_loop_counter ++)))
        {
         subgroupAll(false);
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = _GLF_IDENTITY((0 ^ 0), ((0 ^ 0)) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       atomicStore(buf[GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id.x], _GLF_IDENTITY(uint(2), (false ? _GLF_FUZZED(subgroup_local_id) : uint(2))), 4, 64, 4);
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec2(false, false)))));
        }
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         subgroupAll(true);
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
         do
          {
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false)))))));
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           barrier();
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(3.0)), vec2(_GLF_FUZZED(82.59), (injectionSwitch)[1]), bvec2(false, true)))) * vec2(1.0, 1.0)), mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)))).x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-6664.2430) : injectionSwitch.y))), true && ((injectionSwitch.x > injectionSwitch.y))))))
        barrier();
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))))) || false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))))))
            {
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)))))
                  barrier();
                 barrier();
                }
              }
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (0 ^ (0 ^ 1))); _injected_loop_counter ++)
              {
               barrier();
              }
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
            {
             if(_GLF_DEAD(false))
              barrier();
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
          }
         else
          {
          }
        }
      }
    }
   else
    {
    }
  }
}
