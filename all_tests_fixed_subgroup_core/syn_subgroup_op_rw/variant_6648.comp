#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_19 {
 mat3x2 _f0;
 int _injected_loop_counter;
 vec2 _f1;
} ;

struct _GLF_struct_16 {
 mat2 _f0;
 mat3x2 _f1;
 uint _f2;
} ;

struct _GLF_struct_15 {
 vec4 _f0;
 mat3 _f1;
 uvec4 _f2;
 mat4 _f3;
 uint _f4;
} ;

struct _GLF_struct_14 {
 mat4x3 _f0;
 mat3 _f1;
 int _f2;
} ;

struct _GLF_struct_13 {
 bvec2 _f0;
 mat2 _f1;
 bvec3 _f2;
 vec3 _f3;
 mat4x2 _f4;
} ;

struct _GLF_struct_12 {
 bvec4 _f0;
 uvec4 _f1;
 bvec3 _f2;
 mat4x3 _f3;
 ivec3 _f4;
 mat3 _f5;
 ivec2 _f6;
} ;

struct _GLF_struct_17 {
 vec4 _f0;
 _GLF_struct_12 _f1;
 _GLF_struct_13 _f2;
 uint workgroup_id;
 _GLF_struct_14 _f3;
 vec2 _f4;
 _GLF_struct_15 _f5;
 _GLF_struct_16 _f6;
} ;

struct _GLF_struct_10 {
 float _f0;
} ;

struct _GLF_struct_9 {
 uvec3 _f0;
 mat3x2 _f1;
 mat3x2 _f2;
 vec3 _f3;
} ;

struct _GLF_struct_11 {
 _GLF_struct_9 _f0;
 _GLF_struct_10 _f1;
 mat4x2 _f2;
 mat3x4 _f3;
} ;

struct _GLF_struct_8 {
 mat4 _f0;
} ;

struct _GLF_struct_18 {
 _GLF_struct_8 _f0;
 _GLF_struct_11 _f1;
 uvec2 _f2;
 int _f3;
 _GLF_struct_17 _f4;
 vec2 _f5;
} ;

struct _GLF_struct_5 {
 mat3x4 _f0;
 uvec2 _f1;
} ;

struct _GLF_struct_4 {
 uint _f0;
} ;

struct _GLF_struct_3 {
 mat2x3 _f0;
} ;

struct _GLF_struct_6 {
 _GLF_struct_3 _f0;
 _GLF_struct_4 _f1;
 uvec4 _f2;
 _GLF_struct_5 _f3;
} ;

struct _GLF_struct_7 {
 uint workgroup_size;
 _GLF_struct_6 _f0;
} ;

struct _GLF_struct_2 {
 int _injected_loop_counter;
 mat2x4 _f0;
 ivec2 _f1;
} ;

struct _GLF_struct_0 {
 mat4x2 _f0;
 float _f1;
} ;

struct _GLF_struct_1 {
 uint workgroup_base;
 mat2x4 _f0;
 _GLF_struct_0 _f1;
 bvec2 _f2;
 mat2x4 _f3;
 uvec4 _f4;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     return;
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), false, true)))))))
  {
   do
    {
     for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)), ! (! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)), bool(bvec4(! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)), true, false, true)))))))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        return;
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
      }
     else
      {
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false))))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec2(-706.930, -23.40)) : injectionSwitch)).x > injectionSwitch.y))))
    return;
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  return;
 uint subgroup_id = gl_SubgroupID;
uint subgroup_size = 16;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, (false) || false), true, true)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
     return;
    }
  }
 if(_GLF_DEAD(false))
  return;
 uint num_workgroup = gl_NumWorkGroups.x;
 _GLF_struct_7 _GLF_struct_replacement_7 = _GLF_struct_7(gl_WorkGroupSize.x, _GLF_struct_6(_GLF_struct_3(mat2x3(1.0)), _GLF_struct_4(_GLF_IDENTITY(1u, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(1u, 0u, 1u, 0u), clamp(uvec4(1u, 0u, 1u, 0u), uvec4(1u, 0u, 1u, 0u), uvec4(1u, 0u, 1u, 0u)))), (uint(_GLF_IDENTITY(uvec4(1u, 0u, 1u, 0u), clamp(uvec4(1u, 0u, 1u, 0u), uvec4(1u, 0u, 1u, 0u), uvec4(1u, 0u, 1u, 0u))))) - 0u))), uvec4(1u), _GLF_struct_5(mat3x4(1.0), uvec2(1u))));
 _GLF_struct_18 _GLF_struct_replacement_18 = _GLF_struct_18(_GLF_struct_8(mat4(1.0)), _GLF_struct_11(_GLF_struct_9(uvec3(1u), mat3x2(1.0), mat3x2(1.0), vec3(1.0)), _GLF_struct_10(1.0), mat4x2(1.0), mat3x4(1.0)), _GLF_IDENTITY(uvec2(1u), (_GLF_IDENTITY(uvec2(1u), uvec2(0u, 0u) ^ (uvec2(1u)))) | (uvec2(1u))), 1, _GLF_struct_17(vec4(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-9894.0919) : 1.0))))), _GLF_struct_12(bvec4(true), uvec4(1u), bvec3(true), mat4x3(1.0), ivec3(1), mat3(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat4x3(1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0), (mat4x3(1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(float(79416u))), float(0.0), bool(true))), 1.0, 0.0)) - mat4x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))), _GLF_IDENTITY(_GLF_IDENTITY(ivec2(1), (false ? _GLF_FUZZED(_GLF_IDENTITY((ivec2(32543, _GLF_IDENTITY(19279, (_GLF_IDENTITY(19279, max(19279, 19279))) << 0)) ^ _GLF_IDENTITY(ivec2(1191, 26551), (ivec2(1191, 26551)) * ((ivec2(1, 1) << _GLF_IDENTITY(ivec2(0), ivec2(0))) >> _GLF_IDENTITY(ivec2(0), ivec2(0))))), clamp((ivec2(32543, 19279) ^ ivec2(1191, 26551)), (ivec2(32543, 19279) ^ ivec2(1191, 26551)), (ivec2(32543, 19279) ^ ivec2(1191, 26551))))) : _GLF_IDENTITY(ivec2(1), clamp(ivec2(1), ivec2(1), ivec2(1))))), ivec2(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(ivec2(1), (false ? _GLF_FUZZED(_GLF_IDENTITY((ivec2(32543, 19279) ^ ivec2(1191, 26551)), (_GLF_IDENTITY((ivec2(32543, 19279) ^ ivec2(1191, 26551)), max((ivec2(32543, 19279) ^ ivec2(1191, 26551)), (ivec2(32543, 19279) ^ ivec2(1191, 26551))))) >> ivec2(0, 0))) : _GLF_IDENTITY(ivec2(1), clamp(ivec2(1), ivec2(1), ivec2(1))))), ivec2(0, 0) | (_GLF_IDENTITY(ivec2(1), (false ? _GLF_FUZZED((ivec2(32543, 19279) ^ ivec2(1191, 26551))) : _GLF_IDENTITY(ivec2(1), clamp(ivec2(1), ivec2(1), ivec2(1))))))), int(_GLF_ONE(1.0, injectionSwitch.y)))))), _GLF_struct_13(bvec2(true), mat2(_GLF_IDENTITY(1.0, max(1.0, 1.0))), bvec3(true), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(vec3(1.0), _GLF_IDENTITY(min(vec3(1.0), vec3(1.0)), (true ? _GLF_IDENTITY(min(vec3(1.0), vec3(1.0)), vec3(mat4(min(vec3(1.0), vec3(1.0)), length(vec3(0.0, 0.0, 0.0)), sin(0.0), 0.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), log(1.0), 1.0, 1.0, 0.0, 1.0, 0.0, abs(0.0)))) : _GLF_FUZZED(vec3(35.13, -2.4, 54.04))))), abs(sin(vec3(0.0, 0.0, 0.0))) + (_GLF_IDENTITY(vec3(1.0), vec3(mat2x3(vec3(1.0), 0.0, 0.0, 1.0))))), clamp(_GLF_IDENTITY(vec3(1.0), abs(sin(vec3(0.0, 0.0, 0.0))) + (_GLF_IDENTITY(vec3(1.0), vec3(mat2x3(vec3(1.0), 0.0, 0.0, 1.0))))), _GLF_IDENTITY(_GLF_IDENTITY(vec3(1.0), _GLF_IDENTITY(abs(sin(vec3(0.0, 0.0, 0.0))) + (_GLF_IDENTITY(vec3(1.0), vec3(mat2x3(vec3(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), 0.0, 0.0, 1.0)))), mix(vec3(_GLF_FUZZED(3.5), _GLF_FUZZED(vec3(-7.2, 7219.4963, 7.9).x), _GLF_FUZZED(-7.0)), vec3((abs(sin(vec3(0.0, 0.0, 0.0))) + (_GLF_IDENTITY(vec3(1.0), vec3(mat2x3(vec3(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), 0.0, 0.0, 1.0)))))[0], (abs(sin(vec3(0.0, 0.0, 0.0))) + (_GLF_IDENTITY(vec3(1.0), vec3(mat2x3(vec3(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), 0.0, 0.0, 1.0)))))[1], (abs(sin(vec3(0.0, 0.0, 0.0))) + (_GLF_IDENTITY(vec3(1.0), vec3(mat2x3(vec3(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), 0.0, 0.0, 1.0)))))[2]), bvec3(true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), mix(vec3((_GLF_IDENTITY(vec3(1.0), abs(sin(vec3(0.0, 0.0, 0.0))) + (_GLF_IDENTITY(vec3(1.0), vec3(mat2x3(vec3(1.0), _GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(47.41)), float(0.0), bool(true)))), float(_GLF_FUZZED(-228.684)), bool(false))), 0.0, 1.0))))))[0], (_GLF_IDENTITY(vec3(1.0), abs(sin(vec3(0.0, 0.0, 0.0))) + (_GLF_IDENTITY(vec3(1.0), vec3(mat2x3(vec3(1.0), 0.0, 0.0, 1.0))))))[1], _GLF_FUZZED(76.68)), vec3(_GLF_FUZZED(-574.311), _GLF_FUZZED(vec4(-4904.3388, 70.54, -9.9, -3.7).q), _GLF_IDENTITY((_GLF_IDENTITY(vec3(1.0), abs(_GLF_IDENTITY(sin(vec3(0.0, 0.0, 0.0)), vec3(1.0, 1.0, 1.0) * (sin(vec3(0.0, 0.0, 0.0))))) + (_GLF_IDENTITY(vec3(1.0), vec3(mat2x3(vec3(1.0), 0.0, 0.0, 1.0)))))), clamp(_GLF_IDENTITY((_GLF_IDENTITY(vec3(1.0), _GLF_IDENTITY(abs(_GLF_IDENTITY(sin(vec3(0.0, 0.0, 0.0)), vec3(1.0, 1.0, 1.0) * _GLF_IDENTITY((sin(vec3(0.0, 0.0, 0.0))), max((sin(vec3(0.0, 0.0, 0.0))), (sin(vec3(0.0, 0.0, 0.0))))))), vec3(0.0, 0.0, 0.0) + (_GLF_IDENTITY(abs(_GLF_IDENTITY(sin(vec3(0.0, 0.0, 0.0)), vec3(1.0, 1.0, 1.0) * _GLF_IDENTITY((sin(vec3(0.0, 0.0, 0.0))), max((sin(vec3(0.0, 0.0, 0.0))), (sin(vec3(0.0, 0.0, 0.0))))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED((vec3(-6.2, -987.580, -7230.5626) + vec3(-8690.4606, -67.60, -69.04))) : _GLF_IDENTITY(abs(_GLF_IDENTITY(sin(vec3(0.0, 0.0, 0.0)), vec3(1.0, 1.0, 1.0) * _GLF_IDENTITY((sin(vec3(0.0, 0.0, 0.0))), max((sin(vec3(0.0, 0.0, 0.0))), (sin(vec3(0.0, 0.0, 0.0))))))), max(abs(_GLF_IDENTITY(sin(vec3(0.0, 0.0, 0.0)), vec3(1.0, 1.0, 1.0) * _GLF_IDENTITY((sin(vec3(0.0, 0.0, 0.0))), max((sin(vec3(0.0, 0.0, 0.0))), (sin(vec3(0.0, 0.0, 0.0))))))), abs(_GLF_IDENTITY(sin(vec3(0.0, 0.0, 0.0)), vec3(1.0, 1.0, 1.0) * _GLF_IDENTITY((sin(vec3(0.0, 0.0, 0.0))), max((sin(vec3(0.0, 0.0, 0.0))), (sin(vec3(0.0, 0.0, 0.0))))))))))))) + (_GLF_IDENTITY(vec3(1.0), vec3(mat2x3(vec3(1.0), 0.0, 0.0, 1.0)))))), max(_GLF_IDENTITY((_GLF_IDENTITY(vec3(1.0), abs(_GLF_IDENTITY(sin(vec3(0.0, 0.0, 0.0)), vec3(1.0, 1.0, 1.0) * (sin(vec3(0.0, 0.0, 0.0))))) + (_GLF_IDENTITY(vec3(1.0), vec3(mat2x3(vec3(1.0), 0.0, 0.0, 1.0)))))), (true ? (_GLF_IDENTITY(vec3(1.0), abs(_GLF_IDENTITY(sin(vec3(0.0, 0.0, 0.0)), vec3(1.0, 1.0, 1.0) * (sin(vec3(0.0, 0.0, 0.0))))) + (_GLF_IDENTITY(vec3(1.0), vec3(mat2x3(vec3(1.0), 0.0, 0.0, 1.0)))))) : _GLF_FUZZED(vec3(-11.63, -833.562, 378.936)))), (_GLF_IDENTITY(vec3(1.0), abs(_GLF_IDENTITY(sin(vec3(0.0, 0.0, 0.0)), vec3(1.0, 1.0, 1.0) * (sin(vec3(0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-1.8))), _GLF_IDENTITY(0.0, max(0.0, 0.0))))))) + (_GLF_IDENTITY(vec3(1.0), vec3(mat2x3(vec3(1.0), 0.0, 0.0, 1.0)))))))), _GLF_IDENTITY((_GLF_IDENTITY(vec3(1.0), abs(_GLF_IDENTITY(sin(vec3(0.0, 0.0, 0.0)), vec3(1.0, 1.0, 1.0) * (sin(vec3(0.0, 0.0, _GLF_IDENTITY(0.0, 1.0 * (0.0))))))) + (_GLF_IDENTITY(vec3(1.0), vec3(mat2x3(vec3(1.0), 0.0, 0.0, 1.0)))))), ((_GLF_IDENTITY(_GLF_IDENTITY(vec3(1.0), abs(_GLF_IDENTITY(sin(vec3(0.0, 0.0, 0.0)), vec3(1.0, 1.0, 1.0) * (sin(vec3(0.0, 0.0, 0.0))))) + (_GLF_IDENTITY(vec3(1.0), vec3(mat2x3(vec3(1.0), 0.0, 0.0, 1.0))))), mat3(1.0) * (_GLF_IDENTITY(vec3(1.0), abs(_GLF_IDENTITY(sin(vec3(0.0, 0.0, 0.0)), vec3(1.0, 1.0, 1.0) * (sin(vec3(0.0, 0.0, 0.0))))) + (_GLF_IDENTITY(vec3(1.0), vec3(mat2x3(vec3(1.0), 0.0, 0.0, 1.0))))))))) - vec3(0.0, 0.0, 0.0)), (_GLF_IDENTITY(vec3(1.0), abs(_GLF_IDENTITY(sin(vec3(0.0, 0.0, 0.0)), vec3(1.0, 1.0, 1.0) * (sin(vec3(0.0, 0.0, 0.0))))) + (_GLF_IDENTITY(vec3(1.0), vec3(mat2x3(vec3(1.0), 0.0, 0.0, 1.0))))))))[2]), bvec3(false, false, true))), _GLF_IDENTITY(vec3(1.0), abs(_GLF_IDENTITY(sin(vec3(0.0, 0.0, 0.0)), vec3(mat4(sin(vec3(0.0, 0.0, 0.0)), 1.0, 1.0, exp(0.0), cos(0.0), 0.0, 1.0, 0.0, 0.0, 0.0, abs(0.0), 1.0, 1.0, 1.0)))) + (_GLF_IDENTITY(vec3(1.0), vec3(mat2x3(vec3(1.0), 0.0, 0.0, 1.0))))))), mat4x2(1.0)), gl_WorkGroupID.x, _GLF_struct_14(mat4x3(1.0), mat3(1.0), 1), vec2(1.0), _GLF_struct_15(vec4(1.0), mat3(1.0), uvec4(1u), mat4(_GLF_IDENTITY(1.0, (1.0) - 0.0)), 1u), _GLF_struct_16(mat2(1.0), mat3x2(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0))), 1u)), vec2(1.0));
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 _GLF_struct_1 _GLF_struct_replacement_1 = _GLF_struct_1(_GLF_struct_replacement_7.workgroup_size * _GLF_struct_replacement_18._f4.workgroup_id, mat2x4(1.0), _GLF_struct_0(mat4x2(1.0), 1.0), bvec2(true), mat2x4(1.0), uvec4(1u));
 do
  {
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)));
  }
 for(int _injected_loop_counter = _GLF_IDENTITY(0, clamp(0, 0, 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
    return;
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, true)), false || _GLF_IDENTITY((bool(bvec3(false, true, true))), bool(bool((bool(bvec3(false, true, true))))))))), bool(bool(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, true)), false || (bool(bvec3(false, true, true))))))))))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
           return;
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          return;
        }
      }
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false)))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           do
            {
             return;
             if(_GLF_DEAD(false))
              continue;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               return;
              }
            }
          }
        }
      }
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, ! (! (false)))))), false))), (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2x3(injectionSwitch, abs(1.0), 0.0, 1.0, 0.0), (true ? mat2x3(injectionSwitch, abs(1.0), 0.0, 1.0, 0.0) : _GLF_FUZZED(mat2x3(-715.092, 293.061, 5.0, 166.490, -973.124, 58.05)))))).y))));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        return;
      }
     do
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))
        return;
       if(_GLF_DEAD(false))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)))));
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       return;
      }
    }
   do
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         return;
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 do
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    continue;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)), vec2(vec3(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(72.33), _GLF_FUZZED(174.063)), bvec2(false, false))), 0.0))).x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * abs(vec2(1.0, 1.0))).y))));
            }
           return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          return;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))
        return;
       return;
      }
    }
  }
 uint virtual_gid = _GLF_struct_replacement_1.workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       return;
      }
     else
      {
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       for(int _injected_loop_counter = (int(_GLF_ONE(1.0, injectionSwitch.y)) | 1); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(81201) : _injected_loop_counter)) > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
      }
     if(_GLF_DEAD(false))
      return;
     do
      {
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
     return;
    }
   if(_GLF_DEAD(false))
    return;
  }
 uint next_virtual_gid = _GLF_struct_replacement_1.workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    return;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     return;
    }
   else
    {
    }
  }
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
    }
   if(_GLF_DEAD(false))
    continue;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 do
  {
   do
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) && true)), false))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           return;
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))
            continue;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(_GLF_DEAD(false))
              break;
             break;
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
        }
       if(_GLF_DEAD(false))
        break;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
          return;
         break;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, _GLF_IDENTITY(0.0, max(0.0, 0.0)), round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0))), injectionSwitch)).y), ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(asinh(vec2(-2642.1575, -4.2))) : injectionSwitch)), _GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, _GLF_IDENTITY(0.0, max(0.0, 0.0)), round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0))), injectionSwitch)).y)) || false))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          return;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           for(_GLF_struct_19 _GLF_struct_replacement_19 = _GLF_struct_19(mat3x2(1.0), 1, vec2(1.0)); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_19._injected_loop_counter != _GLF_IDENTITY(0, (false ? _GLF_FUZZED(_injected_loop_counter) : 0))); _GLF_struct_replacement_19._injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
              break;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             for(int _injected_loop_counter = (_GLF_IDENTITY((_GLF_IDENTITY(0 << _GLF_IDENTITY(int(4), int(4)), (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(4), int(4)), (0 << _GLF_IDENTITY(int(4), int(4))) >> 0)) ^ 0)) | _GLF_IDENTITY(1, max(1, 1)), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(0 << _GLF_IDENTITY(int(4), int(4)), (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(4), int(4)), (0 << _GLF_IDENTITY(int(4), int(4))) >> 0)) ^ 0)) | _GLF_IDENTITY(1, max(1, 1))), clamp(_GLF_IDENTITY(~ ((_GLF_IDENTITY(0 << _GLF_IDENTITY(int(4), int(4)), (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(4), int(4)), (0 << _GLF_IDENTITY(int(4), int(4))) >> 0)) ^ 0)) | _GLF_IDENTITY(1, max(1, 1))), (~ ((_GLF_IDENTITY(0 << _GLF_IDENTITY(int(4), int(4)), (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(4), int(4)), (0 << _GLF_IDENTITY(int(4), int(4))) >> 0)) ^ 0)) | _GLF_IDENTITY(1, max(1, 1)))) ^ 0), _GLF_IDENTITY(~ ((_GLF_IDENTITY(0 << _GLF_IDENTITY(int(4), int(4)), (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(4), int(4)), (0 << _GLF_IDENTITY(int(4), int(4))) >> 0)) ^ 0)) | _GLF_IDENTITY(1, max(1, 1))), (~ ((_GLF_IDENTITY(0 << _GLF_IDENTITY(int(4), int(4)), (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(4), int(4)), (0 << _GLF_IDENTITY(int(4), int(4))) >> 0)) ^ 0)) | _GLF_IDENTITY(1, max(1, 1)))) - 0), ~ ((_GLF_IDENTITY(0 << _GLF_IDENTITY(int(4), int(4)), (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(4), int(4)), (0 << _GLF_IDENTITY(int(4), int(4))) >> 0)) ^ 0)) | _GLF_IDENTITY(1, max(1, 1)))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    continue;
                   break;
                  }
                 return;
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    return;
                   break;
                  }
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 break;
                }
               atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
              }
            }
          }
         if(_GLF_DEAD(false))
          break;
         for(int _injected_loop_counter = (_GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), max(int(2), int(2)))), ~ (~ (_GLF_IDENTITY(1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), max(int(2), int(2)))), clamp(1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), max(int(2), int(2)))), 1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), max(int(2), int(2)))), 1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), max(int(2), int(2)))))))))), min((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), max(int(2), int(2))))), _GLF_IDENTITY((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), max(int(2), int(_GLF_IDENTITY(2, min(2, 2))))))), min(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), max(int(2), int(2))))), ((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), max(int(2), int(2)))))) | ((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), max(int(2), int(2))))))), (1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), max(_GLF_IDENTITY(int(2), 0 | (int(2))), int(2))))))))) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, false || (_GLF_IDENTITY(_injected_loop_counter != 0, _GLF_IDENTITY(bool(bvec2(_injected_loop_counter != _GLF_IDENTITY(0, min(_GLF_IDENTITY(0, 0 ^ (0)), _GLF_IDENTITY(0, 0 + (0)))), false)), ! (! (bool(bvec2(_injected_loop_counter != 0, false))))))))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                return;
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              return;
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (1 ^ 1)); _injected_loop_counter --)
                {
                 return;
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               if(_GLF_DEAD(false))
                return;
              }
            }
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        continue;
      }
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 else
  {
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
     return;
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, _GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, (true) && true)))), ! (! (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, (true) && true))))))))), true && (bool(bvec3(false, false, true)))))), (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, true)), true && (_GLF_IDENTITY(bool(bvec3(false, _GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, true), _GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(false, false, true), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, false, true), false))))), bvec3(bvec3(bvec3(bvec3(bvec3(false, false, true))))))), false)), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec4(_GLF_IDENTITY(bvec3(false, false, true), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, false, true), false))))), bvec3(bvec3(bvec3(bvec3(bvec3(false, false, true))))))), false))), bvec3(bvec4(bvec3(bvec3(bvec4(_GLF_IDENTITY(bvec3(false, false, true), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, false, true), false))))), bvec3(bvec3(bvec3(bvec3(bvec3(false, false, true))))))), false))), false)))))))))))))), true, true, true))), true)), _GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(! (bool(bvec3(false, _GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec3(bvec3(false, false, true)))), false))))))))))), true, true, true))), true))), ! (! (! (bool(bvec3(false, _GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec3(bvec3(false, false, true)))), false))))))))))), true, true, true))), bool(bvec3(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec3(bvec3(false, false, true)))), false))))))))))), true, true, true))), false, false))), true)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_IDENTITY(! (bool(bvec3(false, _GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec3(bvec3(false, false, true)))), false))))))))))), true, true, true))), true))), ! (! (! (bool(bvec3(false, _GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec3(bvec3(false, false, true)))), false))))))))))), true, true, true))), bool(bvec3(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec3(bvec3(false, false, true)))), false))))))))))), true, true, true))), false, false))), true)))))), true && (_GLF_IDENTITY(! (bool(bvec3(false, _GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec3(bvec3(false, false, true)))), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec3(bvec3(false, false, true)))), false)))), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec3(bvec3(false, false, true)))), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec3(bvec3(false, false, true)))), false))))), bool(bvec2(! (bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec3(bvec3(false, false, true)))), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec3(bvec3(false, false, true)))), false))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))))), true, true, true))), true))), ! (! (! (bool(bvec3(false, _GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec3(bvec3(false, false, true)))), false))))))))))), true, true, true))), bool(bvec3(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec3(bvec3(false, false, true)))), false))))))))))), true, true, _GLF_IDENTITY(true, (true) && true)))), _GLF_IDENTITY(false, ! (! (false))), false))), true))))))))))), (! (_GLF_IDENTITY(! (bool(bvec3(false, _GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec3(bvec3(false, false, true)))), false))))))))))), true, true, true))), true))), ! (! (! (bool(bvec3(false, _GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec3(bvec3(false, false, true)))), false))))))), bool(bvec2(! (! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec3(bvec3(false, false, true)))), false))))))), false))))))), true, _GLF_IDENTITY(true, (true) || false), true))), true)))))))) && true))))))) || false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
          }
         return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           return;
          }
        }
      }
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
    }
   if(_GLF_DEAD(false))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
        }
      }
    }
   else
    {
    }
   return;
  }
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      break;
     break;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1 < subgroup_size, bool(_GLF_IDENTITY(bvec3(subgroup_local_id + 1 < _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, 1.0, 1.0, 0.0))), injectionSwitch.y)), ! (! (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, 1.0, 1.0, 0.0))), injectionSwitch.y))))))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))), bvec3(bvec4(bvec3(subgroup_local_id + 1 < _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false))))), false || (subgroup_local_id + 1 < subgroup_size)))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      break;
     do
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        continue;
       for(int _injected_loop_counter = _GLF_IDENTITY(0, min(0, 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, determinant(mat2(0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)))), 0.0))).y))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           atomicStore(checker[virtual_gid], read, 4, 64, 4);
          }
         if(_GLF_DEAD(false))
          break;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               return;
              }
             else
              {
               if(_GLF_DEAD(false))
                break;
              }
            }
           continue;
          }
         break;
        }
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         continue;
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-64.45, -1.6)) : injectionSwitch)).y))));
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       subgroupAll(false);
      }
    }
   else
    {
     for(_GLF_struct_2 _GLF_struct_replacement_2 = _GLF_struct_2(1, mat2x4(1.0), ivec2(1)); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_2._injected_loop_counter != (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(6, clamp(6, 6, 6))), int(_GLF_IDENTITY(_GLF_IDENTITY(6, int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (6)), (_GLF_IDENTITY(6, int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ _GLF_IDENTITY((6), max((6), (6))))) << 0))))); _GLF_IDENTITY(_GLF_struct_replacement_2._injected_loop_counter --, 0 | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_2._injected_loop_counter --, (_GLF_struct_replacement_2._injected_loop_counter --) ^ 0), (_GLF_struct_replacement_2._injected_loop_counter --) >> 0))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(false, bool(bvec4(false, true, true, true))) ? _GLF_FUZZED(-36.16) : injectionSwitch.y)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))), ! (! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))))))))
          return;
         break;
        }
       atomicStore(buf[virtual_gid], read, 4, 64, 4);
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(_GLF_IDENTITY(mat2(injectionSwitch.x, 1.0, _GLF_IDENTITY(abs(_GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0))), mix(float(_GLF_FUZZED(float(false))), float(_GLF_IDENTITY(abs(_GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(9797.4180)), float(0.0), bool(true)))) / 1.0), _GLF_IDENTITY(0.0, float(mat4x2(0.0, 1.0, 0.0, 0.0, 1.0, 0.0, abs(1.0), 1.0)))))), _GLF_IDENTITY((_GLF_IDENTITY(abs(0.0), clamp(abs(0.0), abs(0.0), abs(0.0)))) * 1.0, 0.0 + ((_GLF_IDENTITY(abs(0.0), clamp(abs(0.0), abs(_GLF_IDENTITY(0.0, min(0.0, 0.0))), abs(0.0)))) * 1.0)))), bool(true))), 1.0), transpose(transpose(mat2(injectionSwitch.x, 1.0, _GLF_IDENTITY(abs(_GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0))), mix(float(_GLF_FUZZED(float(false))), float(_GLF_IDENTITY(abs(_GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(9797.4180)), float(0.0), bool(true)))) / 1.0), _GLF_IDENTITY(0.0, float(mat4x2(0.0, 1.0, 0.0, 0.0, 1.0, 0.0, abs(1.0), 1.0)))))), _GLF_IDENTITY((_GLF_IDENTITY(abs(0.0), clamp(abs(0.0), abs(0.0), abs(0.0)))) * 1.0, 0.0 + ((_GLF_IDENTITY(abs(0.0), clamp(abs(0.0), abs(_GLF_IDENTITY(0.0, min(0.0, 0.0))), abs(0.0)))) * 1.0)))), bool(true))), 1.0)))), transpose(transpose(mat2(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), 1.0, _GLF_IDENTITY(abs(0.0), mix(float(_GLF_FUZZED(float(false))), float(_GLF_IDENTITY(abs(0.0), (_GLF_IDENTITY(abs(0.0), clamp(abs(0.0), abs(0.0), abs(0.0)))) * 1.0)), bool(true))), 1.0)))))), mix(float(_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat2(injectionSwitch.x, 1.0, _GLF_IDENTITY(abs(0.0), mix(float(_GLF_FUZZED(float(false))), float(_GLF_IDENTITY(abs(0.0), (_GLF_IDENTITY(abs(0.0), clamp(abs(0.0), abs(0.0), abs(0.0)))) * 1.0)), bool(true))), 1.0), transpose(transpose(mat2(injectionSwitch.x, 1.0, _GLF_IDENTITY(abs(0.0), mix(float(_GLF_FUZZED(float(false))), float(_GLF_IDENTITY(abs(0.0), (_GLF_IDENTITY(abs(0.0), clamp(abs(0.0), abs(0.0), abs(0.0)))) * 1.0)), bool(true))), 1.0))))))), float(_GLF_FUZZED(7535.0500)), bool(false))) < injectionSwitch.y))))
      {
       subgroupAll(true);
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        continue;
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))))))))
        break;
      }
    }
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      break;
     break;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    continue;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec2(! (false), false)))))));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    return;
   do
    {
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, false || (false)))), (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(false))
          return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        return;
       return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))))))))
  return;
}
