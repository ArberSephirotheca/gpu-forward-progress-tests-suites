#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
            {
             if(_GLF_DEAD(false))
              return;
             barrier();
            }
           return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
              return;
             barrier();
            }
          }
        }
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), false))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           barrier();
          }
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          return;
        }
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), _GLF_IDENTITY(min(int(1), int(1)), min(_GLF_IDENTITY(min(int(1), int(1)), (min(int(1), int(1))) / (1 ^ 0)), min(int(1), int(1))))))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
           barrier();
          }
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & 1)); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               barrier();
              }
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             return;
            }
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              return;
             return;
            }
          }
        }
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), clamp(int(0), int(0), int(0)))))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    barrier();
  }
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true)))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
uint subgroup_size = 16;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(2, (2) | 0)), (int(_GLF_IDENTITY(2, (2) | 0))) / 1), int(2)))); _injected_loop_counter ++)
  {
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), (_GLF_IDENTITY((false), ! (! ((false))))) || false) || false)))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(1, int(int(1))) ^ 1)); _injected_loop_counter --)
    {
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch.x : _GLF_FUZZED(distance(vec4(0.1, 43.89, -5.1, -436.109), vec4(9600.2550, -1.4, 1275.6001, 715.722))))) : _GLF_FUZZED(-81.20))) > injectionSwitch.y))))
    return;
  }
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups.x, clamp(gl_NumWorkGroups.x, _GLF_IDENTITY(gl_NumWorkGroups.x, min(gl_NumWorkGroups.x, gl_NumWorkGroups.x)), gl_NumWorkGroups.x));
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-891.477) : _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x, float(vec2(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(6.5) : injectionSwitch.x)), sqrt(1.0)))) > injectionSwitch.y) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, float(mat2x3(injectionSwitch.x, log(1.0), 1.0, 1.0, _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), 1.0))), injectionSwitch.x)) < injectionSwitch.y))))) && true)))))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID, uvec3(gl_WorkGroupID[0], gl_WorkGroupID[_GLF_IDENTITY(1, (1) ^ 0)], gl_WorkGroupID[_GLF_IDENTITY(2, 0 | (2))])).x;
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 do
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y)))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       barrier();
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id + 1, max(subgroup_local_id + 1, subgroup_local_id + 1)))), clamp(_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id + 1, max(subgroup_local_id + 1, subgroup_local_id + 1)))), _GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, max(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) >> 0u), subgroup_local_id + 1)), (_GLF_IDENTITY(subgroup_local_id + 1, max(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) >> 0u), subgroup_local_id + 1))) ^ 0u))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + _GLF_IDENTITY(1, clamp(1, 1, 1)), subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id + 1, max(subgroup_local_id + 1, subgroup_local_id + 1)))), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + _GLF_IDENTITY(1, clamp(1, 1, 1)), subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id + 1, max(subgroup_local_id + 1, subgroup_local_id + 1)))), 0u ^ (_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + _GLF_IDENTITY(1, clamp(1, 1, 1)), subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id + 1, max(subgroup_local_id + 1, subgroup_local_id + 1))))))) - 0u), 0u | (_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id + 1, max(subgroup_local_id + 1, subgroup_local_id + 1))))))))))) % subgroup_size);
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       continue;
      }
     continue;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         continue;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))));
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           do
            {
             do
              {
               barrier();
               if(_GLF_DEAD(false))
                break;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         continue;
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true))))
        continue;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 uint read = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], 0u | (buf[virtual_gid])), 4, 64, 0);
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (_GLF_IDENTITY(false, false || (false))), true, true)))))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false))), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))));
     return;
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 do
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & 1)); _injected_loop_counter ++)
      {
       barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
     if(_GLF_DEAD(false))
      break;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
           if(_GLF_DEAD(false))
            continue;
          }
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            continue;
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          break;
        }
      }
    }
   if(_GLF_DEAD(false))
    break;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, 1.0 * (0.0)))), injectionSwitch.x))); _injected_loop_counter --)
        {
         barrier();
        }
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, true, true))), (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4x3(injectionSwitch, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, exp(0.0), _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, max(1.0, 1.0))) - 0.0), 0.0, 0.0), (false ? _GLF_FUZZED(mat4x3(-268.828, 382.433, 97.20, 8.0, 3.4, 2.9, -610.622, _GLF_IDENTITY(6.0, _GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_IDENTITY(mat3x4(_GLF_IDENTITY(6.0, max(_GLF_IDENTITY(6.0, mix(float(6.0), float(_GLF_FUZZED(-5035.2341)), bool(false))), 6.0)), tan(0.0), 1.0, 1.0, 1.0, 0.0, log(1.0), 1.0, 1.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 0.0), (_GLF_IDENTITY(mat3x4(_GLF_IDENTITY(_GLF_IDENTITY(6.0, (false ? _GLF_FUZZED(-9.8) : 6.0)), max(_GLF_IDENTITY(6.0, mix(float(6.0), float(_GLF_FUZZED(-5035.2341)), bool(false))), 6.0)), tan(0.0), 1.0, 1.0, 1.0, 0.0, log(1.0), 1.0, 1.0, 0.0, _GLF_IDENTITY(round(length(normalize(vec2(1.0, 1.0)))), (round(length(normalize(vec2(1.0, 1.0))))) + tan(0.0)), 0.0), (false ? _GLF_FUZZED(mat3x4(9.1, -0.3, -0.6, 9.7, -172.374, 3654.8881, -64.32, -2.5, 5877.8774, -1.9, 923.221, -4546.1657)) : mat3x4(_GLF_IDENTITY(6.0, max(_GLF_IDENTITY(6.0, mix(float(6.0), float(_GLF_FUZZED(-5035.2341)), bool(false))), 6.0)), tan(0.0), 1.0, 1.0, 1.0, 0.0, log(1.0), 1.0, 1.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 0.0)))) - mat3x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), _GLF_IDENTITY(float(vec2(float(_GLF_IDENTITY(mat3x4(_GLF_IDENTITY(6.0, max(_GLF_IDENTITY(6.0, mix(float(6.0), float(_GLF_FUZZED(-5035.2341)), bool(false))), 6.0)), tan(0.0), 1.0, 1.0, 1.0, 0.0, log(1.0), 1.0, 1.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 0.0), (_GLF_IDENTITY(mat3x4(_GLF_IDENTITY(_GLF_IDENTITY(6.0, (false ? _GLF_FUZZED(-9.8) : 6.0)), max(_GLF_IDENTITY(6.0, mix(float(6.0), float(_GLF_FUZZED(-5035.2341)), bool(false))), 6.0)), tan(0.0), 1.0, 1.0, 1.0, 0.0, log(1.0), 1.0, 1.0, 0.0, _GLF_IDENTITY(round(length(normalize(vec2(1.0, 1.0)))), (round(length(normalize(vec2(1.0, 1.0))))) + tan(0.0)), 0.0), (false ? _GLF_FUZZED(mat3x4(9.1, -0.3, -0.6, 9.7, -172.374, 3654.8881, -64.32, -2.5, 5877.8774, -1.9, 923.221, -4546.1657)) : mat3x4(_GLF_IDENTITY(6.0, max(_GLF_IDENTITY(6.0, mix(float(6.0), float(_GLF_FUZZED(-5035.2341)), bool(false))), 6.0)), tan(0.0), 1.0, 1.0, 1.0, 0.0, log(1.0), 1.0, 1.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 0.0)))) - mat3x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), length(0.0))), clamp(float(vec2(float(_GLF_IDENTITY(mat3x4(_GLF_IDENTITY(6.0, max(_GLF_IDENTITY(6.0, mix(float(6.0), float(_GLF_FUZZED(-5035.2341)), bool(false))), 6.0)), tan(0.0), 1.0, 1.0, 1.0, 0.0, log(1.0), 1.0, 1.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 0.0), (_GLF_IDENTITY(mat3x4(_GLF_IDENTITY(_GLF_IDENTITY(6.0, (false ? _GLF_FUZZED(-9.8) : 6.0)), max(_GLF_IDENTITY(6.0, mix(float(6.0), float(_GLF_FUZZED(-5035.2341)), bool(false))), 6.0)), tan(0.0), 1.0, 1.0, 1.0, 0.0, log(1.0), 1.0, 1.0, 0.0, _GLF_IDENTITY(round(length(normalize(vec2(1.0, 1.0)))), (round(length(normalize(vec2(1.0, 1.0))))) + tan(0.0)), 0.0), (false ? _GLF_FUZZED(mat3x4(9.1, -0.3, -0.6, 9.7, -172.374, 3654.8881, -64.32, -2.5, 5877.8774, -1.9, 923.221, -4546.1657)) : mat3x4(_GLF_IDENTITY(6.0, max(_GLF_IDENTITY(6.0, mix(float(6.0), float(_GLF_FUZZED(-5035.2341)), bool(false))), 6.0)), tan(0.0), 1.0, 1.0, 1.0, 0.0, log(1.0), 1.0, 1.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 0.0)))) - mat3x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), length(0.0))), float(vec2(float(_GLF_IDENTITY(mat3x4(_GLF_IDENTITY(6.0, max(_GLF_IDENTITY(6.0, mix(float(6.0), float(_GLF_FUZZED(-5035.2341)), bool(false))), 6.0)), tan(0.0), 1.0, 1.0, 1.0, 0.0, log(1.0), 1.0, 1.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 0.0), (_GLF_IDENTITY(mat3x4(_GLF_IDENTITY(_GLF_IDENTITY(6.0, (false ? _GLF_FUZZED(-9.8) : 6.0)), max(_GLF_IDENTITY(6.0, mix(float(6.0), float(_GLF_FUZZED(-5035.2341)), bool(false))), 6.0)), tan(0.0), 1.0, 1.0, 1.0, 0.0, log(1.0), 1.0, 1.0, 0.0, _GLF_IDENTITY(round(length(normalize(vec2(1.0, 1.0)))), (round(length(normalize(vec2(1.0, 1.0))))) + tan(0.0)), 0.0), (false ? _GLF_FUZZED(mat3x4(9.1, -0.3, -0.6, 9.7, -172.374, 3654.8881, -64.32, -2.5, 5877.8774, -1.9, 923.221, -4546.1657)) : mat3x4(_GLF_IDENTITY(6.0, max(_GLF_IDENTITY(6.0, mix(float(6.0), float(_GLF_FUZZED(-5035.2341)), bool(false))), 6.0)), tan(0.0), 1.0, 1.0, 1.0, 0.0, log(1.0), 1.0, 1.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 0.0)))) - mat3x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), length(0.0))), float(vec2(float(_GLF_IDENTITY(mat3x4(_GLF_IDENTITY(6.0, max(_GLF_IDENTITY(6.0, mix(float(6.0), float(_GLF_FUZZED(-5035.2341)), bool(false))), 6.0)), tan(0.0), 1.0, 1.0, 1.0, 0.0, log(1.0), 1.0, 1.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 0.0), (_GLF_IDENTITY(mat3x4(_GLF_IDENTITY(_GLF_IDENTITY(6.0, (false ? _GLF_FUZZED(-9.8) : 6.0)), max(_GLF_IDENTITY(6.0, mix(float(6.0), float(_GLF_FUZZED(-5035.2341)), bool(false))), 6.0)), tan(0.0), 1.0, 1.0, 1.0, 0.0, log(1.0), 1.0, 1.0, 0.0, _GLF_IDENTITY(round(length(normalize(vec2(1.0, 1.0)))), (round(length(normalize(vec2(1.0, 1.0))))) + tan(0.0)), 0.0), (false ? _GLF_FUZZED(mat3x4(9.1, -0.3, -0.6, 9.7, -172.374, 3654.8881, -64.32, -2.5, 5877.8774, -1.9, 923.221, -4546.1657)) : mat3x4(_GLF_IDENTITY(6.0, max(_GLF_IDENTITY(6.0, mix(float(6.0), float(_GLF_FUZZED(-5035.2341)), bool(false))), 6.0)), tan(0.0), 1.0, 1.0, 1.0, 0.0, log(1.0), 1.0, 1.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 0.0)))) - mat3x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), length(0.0)))))), clamp(float(_GLF_IDENTITY(mat3x4(_GLF_IDENTITY(6.0, max(_GLF_IDENTITY(6.0, _GLF_IDENTITY(mix(float(6.0), float(_GLF_FUZZED(-5035.2341)), bool(false)), max(mix(float(6.0), float(_GLF_FUZZED(-5035.2341)), bool(_GLF_IDENTITY(false, (false) && true))), _GLF_IDENTITY(mix(float(6.0), float(_GLF_FUZZED(-5035.2341)), bool(false)), max(mix(float(6.0), float(_GLF_FUZZED(-5035.2341)), bool(false)), mix(float(6.0), float(_GLF_FUZZED(-5035.2341)), bool(false))))))), 6.0)), tan(0.0), 1.0, 1.0, 1.0, 0.0, log(1.0), 1.0, 1.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 0.0), (_GLF_IDENTITY(mat3x4(_GLF_IDENTITY(_GLF_IDENTITY(6.0, mix(float(6.0), float(_GLF_FUZZED(1097.2653)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), max(_GLF_IDENTITY(6.0, mix(float(_GLF_IDENTITY(6.0, (6.0) / 1.0)), float(_GLF_FUZZED(-5035.2341)), bool(false))), 6.0)), tan(0.0), 1.0, 1.0, 1.0, 0.0, log(1.0), 1.0, 1.0, 0.0, _GLF_IDENTITY(round(length(normalize(vec2(1.0, 1.0)))), max(round(length(normalize(vec2(1.0, 1.0)))), round(length(normalize(vec2(1.0, 1.0)))))), 0.0), (false ? _GLF_FUZZED(mat3x4(9.1, -0.3, _GLF_IDENTITY(-0.6, (_GLF_IDENTITY(-0.6, float(_GLF_IDENTITY(mat2x4(-0.6, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, sin(0.0)), transpose(transpose(mat2x4(-0.6, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, sin(0.0)))))))) + _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))), 9.7, -172.374, 3654.8881, -64.32, -2.5, 5877.8774, -1.9, _GLF_IDENTITY(923.221, (true ? 923.221 : _GLF_FUZZED(7.5))), _GLF_IDENTITY(-4546.1657, mix(float(_GLF_IDENTITY(-4546.1657, (-4546.1657) * sqrt(1.0))), float(_GLF_FUZZED(9.5)), bool(false))))) : mat3x4(_GLF_IDENTITY(6.0, max(_GLF_IDENTITY(6.0, mix(float(6.0), float(_GLF_FUZZED(-5035.2341)), bool(false))), 6.0)), tan(0.0), 1.0, 1.0, 1.0, 0.0, log(1.0), 1.0, 1.0, 0.0, round(length(normalize(_GLF_IDENTITY(vec2(1.0, 1.0), vec2(_GLF_IDENTITY(mat4x2(vec2(1.0, 1.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(mat4x2(vec2(1.0, 1.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0), transpose(transpose(mat4x2(vec2(1.0, 1.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))) : _GLF_FUZZED(mat4x2(-4690.2207, 43.02, 9.9, -67.99, -9.7, -7.7, 263.214, 1200.5150))))))))), 0.0)))) - mat3x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(false ? _GLF_IDENTITY(_GLF_FUZZED(6.7), mix(float(_GLF_FUZZED(6.7)), float(_GLF_FUZZED(4.8)), bool(false))) : 0.0, clamp(false ? _GLF_FUZZED(6.7) : 0.0, false ? _GLF_FUZZED(6.7) : 0.0, false ? _GLF_FUZZED(6.7) : 0.0)))))), 0.0, 0.0, 0.0, 0.0))), float(_GLF_IDENTITY(mat3x4(_GLF_IDENTITY(6.0, max(_GLF_IDENTITY(6.0, mix(float(6.0), float(_GLF_FUZZED(-5035.2341)), bool(false))), _GLF_IDENTITY(6.0, float(_GLF_IDENTITY(mat3(_GLF_IDENTITY(6.0, _GLF_IDENTITY(float(mat4(6.0, abs(1.0), 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, sqrt(1.0), 0.0, 0.0)), (float(mat4(6.0, abs(1.0), 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)))), 1.0)), 0.0, 0.0, sqrt(1.0), 0.0, 0.0))) - 0.0)), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(dot(vec2(determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0), vec2(sqrt(1.0), 0.0)), dot(vec2(determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0), vec2(sqrt(1.0), 0.0))), 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(4.5)), bool(false))), _GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, max(0.0, 0.0)) : _GLF_FUZZED(7.6))))), 1.0), (true ? mat3(_GLF_IDENTITY(_GLF_IDENTITY(6.0, mix(float(_GLF_FUZZED(3.9)), float(6.0), bool(true))), _GLF_IDENTITY(float(mat4(6.0, abs(1.0), 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, sqrt(1.0), 0.0, 0.0)), (float(mat4(6.0, abs(1.0), 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, sqrt(1.0), 0.0, 0.0))) - 0.0)), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(dot(vec2(determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0), vec2(sqrt(_GLF_IDENTITY(1.0, max(1.0, 1.0))), 0.0)), dot(vec2(determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0), vec2(sqrt(1.0), 0.0))), 0.0, 0.0, 1.0, 0.0, 0.0, 1.0) : _GLF_FUZZED(mat3(-5.7, -4.5, 6.7, 45.83, 6.4, -36.25, 7.0, -14.21, -78.94)))))))), tan(0.0), 1.0, 1.0, 1.0, 0.0, log(1.0), 1.0, 1.0, 0.0, _GLF_IDENTITY(round(length(normalize(vec2(1.0, 1.0)))), max(round(length(normalize(vec2(1.0, 1.0)))), _GLF_IDENTITY(round(length(normalize(vec2(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-1.5)), bool(false))), 1.0))) - 0.0), 1.0)))), (false ? _GLF_FUZZED(7.6) : round(length(normalize(vec2(1.0, 1.0)))))))), 0.0), (_GLF_IDENTITY(mat3x4(_GLF_IDENTITY(6.0, max(_GLF_IDENTITY(6.0, mix(float(6.0), float(_GLF_FUZZED(-5035.2341)), bool(false))), 6.0)), tan(0.0), 1.0, 1.0, 1.0, 0.0, log(1.0), 1.0, 1.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 0.0), (false ? _GLF_FUZZED(mat3x4(9.1, -0.3, -0.6, 9.7, -172.374, 3654.8881, -64.32, -2.5, 5877.8774, -1.9, 923.221, -4546.1657)) : mat3x4(_GLF_IDENTITY(6.0, max(_GLF_IDENTITY(6.0, mix(float(6.0), float(_GLF_FUZZED(-5035.2341)), bool(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false))))) && true)))), 6.0)), tan(0.0), 1.0, 1.0, 1.0, 0.0, log(1.0), 1.0, 1.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 0.0)))) - mat3x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), float(_GLF_IDENTITY(mat3x4(_GLF_IDENTITY(6.0, max(_GLF_IDENTITY(6.0, mix(_GLF_IDENTITY(float(6.0), min(float(6.0), float(6.0))), float(_GLF_FUZZED(_GLF_IDENTITY(-5035.2341, (_GLF_IDENTITY(-5035.2341, max(-5035.2341, -5035.2341))) - 0.0))), bool(false))), 6.0)), tan(0.0), 1.0, 1.0, 1.0, 0.0, log(1.0), 1.0, 1.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 0.0), (_GLF_IDENTITY(mat3x4(_GLF_IDENTITY(6.0, max(_GLF_IDENTITY(6.0, mix(float(6.0), float(_GLF_FUZZED(-5035.2341)), bool(false))), 6.0)), tan(0.0), 1.0, 1.0, 1.0, 0.0, log(1.0), 1.0, 1.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 0.0), (false ? _GLF_FUZZED(mat3x4(9.1, -0.3, -0.6, 9.7, -172.374, 3654.8881, _GLF_IDENTITY(-64.32, (true ? -64.32 : _GLF_FUZZED(determinant(mat4(9.5, -0.8, -2.7, 84.94, -9564.8195, -9.0, -6.7, 8.7, 7.0, _GLF_IDENTITY(1796.0525, min(1796.0525, 1796.0525)), 83.53, -6.5, 3637.5929, 2534.3523, 6.4, 4733.9885))))), -2.5, 5877.8774, -1.9, 923.221, _GLF_IDENTITY(-4546.1657, mix(float(_GLF_FUZZED(-127.152)), float(_GLF_IDENTITY(-4546.1657, (-4546.1657) * 1.0)), bool(true))))) : mat3x4(_GLF_IDENTITY(6.0, max(_GLF_IDENTITY(6.0, mix(float(6.0), float(_GLF_FUZZED(-5035.2341)), bool(false))), _GLF_IDENTITY(6.0, min(6.0, _GLF_IDENTITY(6.0, (6.0) * 1.0))))), tan(0.0), 1.0, 1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, (1.0) - 0.0)), float(_GLF_FUZZED(-9.2)), bool(false))), 0.0, log(1.0), 1.0, 1.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 0.0)))) - mat3x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))), 840.672, 63.50, 4.1, -8.7)) : mat4x3(injectionSwitch, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, exp(0.0), 1.0, 0.0, 0.0))))), injectionSwitch)).x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     barrier();
    }
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, bool(bool(false))), true, _GLF_IDENTITY(true, false || (true)))))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     do
      {
       barrier();
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), true && (_GLF_WRAPPED_LOOP(false))))), true, false, false))));
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 for(int _injected_loop_counter = int(_GLF_ZERO(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), injectionSwitch.x)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (true ? _injected_loop_counter : _GLF_FUZZED(8250))) != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    break;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
        {
         if(_GLF_DEAD(false))
          break;
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y))))
        return;
      }
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec3(_GLF_DEAD(false), false, false)), bool(bvec4(bool(bvec3(_GLF_DEAD(false), false, false)), true, false, true)))), (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))) && true))
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       for(int _injected_loop_counter = (78631 & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          continue;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_IDENTITY(subgroup_local_id + 1 < subgroup_size, ! (! (_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, ~ (~ (1))) < subgroup_size, (subgroup_local_id + _GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, 0 + (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) - 0), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) - 0), ~ (~ (_GLF_IDENTITY(1, (1) - 0)))))), (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) - 0), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) - 0), ~ (~ (_GLF_IDENTITY(1, (1) - 0))))))) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) - 0), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) - 0), ~ (~ (_GLF_IDENTITY(1, (1) - 0)))))), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) - 0), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) - 0), ~ (~ (_GLF_IDENTITY(1, (1) - 0)))))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) - 0), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) - 0), ~ (~ (_GLF_IDENTITY(1, (1) - 0))))))))), 0, 0)))))))))) < subgroup_size) || false)))))
    {
     atomicStore(checker[virtual_gid], read, 4, 64, 4);
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         barrier();
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y))))
          barrier();
        }
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       continue;
      }
     for(int _injected_loop_counter = (((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))) & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         subgroupAll(false);
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec2(_GLF_WRAPPED_IF_FALSE(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec2(_GLF_WRAPPED_IF_FALSE(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true && (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec2(_GLF_WRAPPED_IF_FALSE(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), ! (! (! ((injectionSwitch.x > injectionSwitch.y))))))))))
          {
           if(_GLF_DEAD(false))
            return;
           continue;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             break;
            }
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             barrier();
            }
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
          return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            barrier();
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | 1)); _injected_loop_counter ++)
            {
             return;
            }
          }
         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
          break;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           barrier();
          }
         else
          {
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          barrier();
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                  continue;
                 barrier();
                }
               barrier();
              }
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
              {
               barrier();
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec4(! (false), false, false, true)))))))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
            break;
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter --)
            {
             for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), max(int(1), int(1))))) >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) >> (1 ^ 1))), int(1))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (59622 & 0)); _injected_loop_counter --)
                  {
                   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), (_GLF_DEAD(_GLF_IDENTITY(false, false || (false)))) || _GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, true && (false))))))
                    {
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                      {
                       barrier();
                      }
                    }
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))).y))))
                  break;
                 barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              return;
             barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            break;
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             atomicStore(buf[virtual_gid], read, 4, 64, 4);
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED((-466.183 / 5.0)) : _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, float(vec2(injectionSwitch.x, 1.0)))) / 1.0))))))), injectionSwitch.x)) > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           do
            {
             do
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   barrier();
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         else
          {
           if(_GLF_DEAD(false))
            break;
          }
        }
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (1) | 0)); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       subgroupAll(true);
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           barrier();
          }
         return;
        }
       break;
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     break;
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, true && (false)), true, false)))))
  barrier();
}
