#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
uint subgroup_size = 16;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups.x, min(gl_NumWorkGroups.x, gl_NumWorkGroups.x));
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-2.6) : _GLF_IDENTITY(injectionSwitch.y, float(vec4(injectionSwitch.y, 1.0, 0.0, 0.0))))), mix(float(injectionSwitch.y), float(_GLF_FUZZED(vec2(931.644, 924.220).x)), bool(false)))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | 0) < 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(29.89) : _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))))
          barrier();
        }
      }
     else
      {
      }
    }
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _GLF_IDENTITY(_injected_loop_counter --, (true ? _GLF_IDENTITY(_injected_loop_counter --, (true ? _injected_loop_counter -- : _GLF_FUZZED(_GLF_IDENTITY(atomicExchange(_injected_loop_counter, -98720), (_GLF_IDENTITY(atomicExchange(_injected_loop_counter, -98720), (_GLF_IDENTITY(atomicExchange(_injected_loop_counter, -98720), (atomicExchange(_injected_loop_counter, -98720)) << 0)) / 1)) / 1)))) : _GLF_IDENTITY(_GLF_FUZZED(ivec2(-54131, _GLF_IDENTITY(33853, (33853) + (1 ^ 1))).g), ~ (_GLF_IDENTITY(~ (_GLF_FUZZED(ivec2(-54131, _GLF_IDENTITY(33853, (33853) + (1 ^ 1))).g)), max(~ (_GLF_FUZZED(ivec2(-54131, _GLF_IDENTITY(33853, (33853) + (1 ^ 1))).g)), ~ (_GLF_FUZZED(ivec2(-54131, _GLF_IDENTITY(33853, (33853) + (1 ^ 1))).g)))))))))
  {
   do
    {
     do
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y, bool(_GLF_IDENTITY(bvec3(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - _GLF_IDENTITY(vec2(0.0, 0.0), (_GLF_IDENTITY(vec2(0.0, 0.0), min(vec2(0.0, 0.0), vec2(0.0, 0.0)))) * vec2(1.0, 1.0))).y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec3(bvec4(bvec3(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), false)))))))))
        {
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             do
              {
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     barrier();
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bool(false))))), (injectionSwitch.x > injectionSwitch.y))));
                }
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    {
                     do
                      {
                       barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                        {
                         barrier();
                        }
                       else
                        {
                        }
                      }
                    }
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)).y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, _GLF_ONE(1.0, injectionSwitch.y), 0.0))).y)) || false)), true))))), (bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))) && true))), _GLF_IDENTITY(! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))), true), _GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))), true))), bvec2(bvec4(bvec2(bvec2(bvec2(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))), true))), false, true)))))))), (bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, (false) && true), true, false)), true && (bool(bvec3(_GLF_IDENTITY(false, (false) && true), true, false))))), (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, (false) && true), true, false)), true && (bool(bvec3(_GLF_IDENTITY(false, (false) && true), true, false))))), (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY((false), bool(bvec2(_GLF_IDENTITY((false), bool(bvec3(_GLF_IDENTITY((false), ! (! ((false)))), true, false))), true))) && true), true, false)), true && (_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, (false) && true), true, false)), (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, (false) && true), true, false)), _GLF_IDENTITY(bool(bool(bool(bvec3(_GLF_IDENTITY(false, (false) && true), true, false)))), bool(bvec4(bool(bool(bool(bvec3(_GLF_IDENTITY(false, (false) && true), true, false)))), true, false, true)))), _GLF_IDENTITY(bool(bool(bool(bvec3(_GLF_IDENTITY(false, (false) && true), true, false)))), false || (bool(bool(bool(bvec3(_GLF_IDENTITY(false, (false) && true), true, false)))))))) && true)))), (injectionSwitch.x > injectionSwitch.y)))))))), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))) && true)), (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))).x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))), (bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (false) && true), _GLF_IDENTITY(true, (true) && true), _GLF_IDENTITY(false, ! (! (false))))), true && (bool(bvec3(_GLF_IDENTITY(false, (false) && true), true, false))))), (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (false) && true), true, false)), true && (bool(bvec3(_GLF_IDENTITY(false, (false) && true), true, false))))), (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, (false) && true), true, false)), true && (_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, (false) && true), true, false)), (_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, (false) && true), true, false)), _GLF_IDENTITY(bool(bool(bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), true && (_GLF_IDENTITY(false, (false) && true))), true, false)))), false || (bool(bool(bool(bvec3(_GLF_IDENTITY(false, (false) && true), true, false)))))))) && true)))), (injectionSwitch.x > injectionSwitch.y)))))))), bool(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), false, _GLF_IDENTITY(false, ! (! (false))), false))))), true)))))) && true))) && true)), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))), true), _GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))), true))), bvec2(bvec4(bvec2(bvec2(bvec2(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))), true))), false, true)))))))), (bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, (false) && true), true, false)), true && (bool(bvec3(_GLF_IDENTITY(false, (false) && true), true, false))))), (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, (false) && true), true, false)), true && (bool(bvec3(_GLF_IDENTITY(false, (false) && true), true, false))))), (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY((false), bool(bvec2(_GLF_IDENTITY((false), bool(bvec3(_GLF_IDENTITY((false), ! (! ((false)))), true, false))), true))) && true), true, false)), true && (_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, (false) && true), true, false)), (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, (false) && true), true, false)), _GLF_IDENTITY(bool(bool(bool(bvec3(_GLF_IDENTITY(false, (false) && true), true, false)))), bool(bvec4(bool(bool(bool(bvec3(_GLF_IDENTITY(false, (false) && true), true, false)))), true, false, true)))), _GLF_IDENTITY(bool(bool(bool(bvec3(_GLF_IDENTITY(false, (false) && true), true, false)))), false || (bool(bool(bool(bvec3(_GLF_IDENTITY(false, (false) && true), true, false)))))))) && true)))), (injectionSwitch.x > injectionSwitch.y)))))))), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))) && true)), (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))).x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))), (bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (false) && true), _GLF_IDENTITY(true, (true) && true), _GLF_IDENTITY(false, ! (! (false))))), true && (bool(bvec3(_GLF_IDENTITY(false, (false) && true), true, false))))), (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (false) && true), true, false)), true && (bool(bvec3(_GLF_IDENTITY(false, (false) && true), true, false))))), (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, (false) && true), true, false)), true && (_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, (false) && true), true, false)), (_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, (false) && true), true, false)), _GLF_IDENTITY(bool(bool(bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), true && (_GLF_IDENTITY(false, (false) && true))), true, false)))), false || (bool(bool(bool(bvec3(_GLF_IDENTITY(false, (false) && true), true, false)))))))) && true)))), (injectionSwitch.x > injectionSwitch.y)))))))), bool(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), false, _GLF_IDENTITY(false, ! (! (false))), false))))), true)))))) && true))) && true))), (! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))), _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))), true), _GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))), true))), bvec2(bvec4(bvec2(bvec2(bvec2(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))), true))), false, true)))))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))), true), _GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))), true))), bvec2(bvec4(bvec2(bvec2(bvec2(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))), true))), false, true)))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec4(bvec2(bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))), true), _GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))), true))), bvec2(bvec4(bvec2(bvec2(bvec2(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))), true))), false, true)))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))), ! (! (bool(_GLF_IDENTITY(bvec2(bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))), true), _GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))), true))), bvec2(bvec4(bvec2(bvec2(bvec2(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))), true))), false, true)))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec4(bvec2(bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))), true), _GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))), true))), bvec2(bvec4(bvec2(bvec2(bvec2(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))), true))), false, true)))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))))), (bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, (false) && true), true, false)), true && (bool(bvec3(_GLF_IDENTITY(false, (false) && true), true, false))))), (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, (false) && true), true, false)), true && (bool(bvec3(_GLF_IDENTITY(false, (false) && true), true, false))))), (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY((false), bool(bvec2(_GLF_IDENTITY((false), bool(bvec3(_GLF_IDENTITY((false), ! (! ((false)))), true, false))), true))) && true), true, false)), true && (_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, (false) && true), true, false)), (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, (false) && true), true, false)), _GLF_IDENTITY(bool(bool(bool(bvec3(_GLF_IDENTITY(false, (false) && true), true, false)))), bool(bvec4(bool(bool(bool(bvec3(_GLF_IDENTITY(false, (false) && true), true, false)))), true, false, true)))), _GLF_IDENTITY(bool(bool(bool(bvec3(_GLF_IDENTITY(false, (false) && true), true, false)))), false || (bool(bool(bool(bvec3(_GLF_IDENTITY(false, (false) && true), true, false)))))))) && true)))), (injectionSwitch.x > injectionSwitch.y)))))))), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))) && true)), (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)), injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).y)), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))).x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))), (bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (false) && true), _GLF_IDENTITY(true, (true) && true), _GLF_IDENTITY(false, ! (! (false))))), true && (bool(bvec3(_GLF_IDENTITY(false, (false) && true), true, false))))), (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (false) && true), true, false)), true && (bool(bvec3(_GLF_IDENTITY(false, (false) && true), true, false))))), (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, (false) && true), true, false)), true && (_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, (false) && true), true, false)), (_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, (false) && true), true, false)), _GLF_IDENTITY(bool(bool(bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), true && (_GLF_IDENTITY(false, (false) && true))), true, false)))), false || (bool(bool(bool(bvec3(_GLF_IDENTITY(false, (false) && true), true, false)))))))) && true)))), (injectionSwitch.x > injectionSwitch.y)))))))), bool(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), false, _GLF_IDENTITY(false, ! (! (false))), false))))), true)))))) && true))) && true)))) && true))))), bool(bvec4(_GLF_IDENTITY(! (! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y)), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))), _GLF_IDENTITY((bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))), _GLF_IDENTITY(true, bool(bvec3(true, true, false))) && (bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))))) && true, bool(bvec2((bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bool(injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(bool(bool(injectionSwitch.x > injectionSwitch.y)), (bool(bool(injectionSwitch.x > injectionSwitch.y))) && true)) || false)))), true)))))) && true, false)))))), bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))), true))))), _GLF_IDENTITY((bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), (bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))) || false))), true && (bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))))) && true, _GLF_IDENTITY(bool(bvec2((bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), false)))) || false)), true)))))) && true, false)), (bool(bvec2((bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), false)))) || false)), true)))))) && true, false))) || false))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))), true))))), _GLF_IDENTITY((bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), (bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))) || false))), true && (bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))))) && true, _GLF_IDENTITY(bool(bvec2((bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), false)))) || false)), true)))))) && true, false)), (bool(bvec2((bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), false)))) || false)), true)))))) && true, false))) || false))))), bool(bvec4(bool(bool(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))), true))))), _GLF_IDENTITY((bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), (bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))) || false))), true && (bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))))) && true, _GLF_IDENTITY(bool(bvec2((bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), false)))) || false)), true)))))) && true, false)), (bool(bvec2((bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), false)))) || false)), true)))))) && true, false))) || false))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true))))))), true && (bool((_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), mix(vec2((_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))[0], _GLF_FUZZED(-7.9)), vec2(_GLF_FUZZED(vec4(-44.86, -4140.2411, -531.450, 6.3).q), (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))[1]), bvec2(false, true))).x > injectionSwitch.y)), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))), _GLF_IDENTITY((bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y)), true)))), true && (bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))))) && true, bool(bvec2((bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), ! (! (! ((injectionSwitch.x > injectionSwitch.y)))))))) || false)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))) && true, false))))))))))))), bool(_GLF_IDENTITY(bvec2(! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat2x4(injectionSwitch.y, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, abs(cos(0.0))))), bool(bvec3(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))), bool(bvec3((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))), (bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))) && _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, ! (! (true)))))))))), (bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))) && _GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, true && (true))))))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat2x4(injectionSwitch.y, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, abs(cos(0.0))))), bool(bvec3(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))), bool(bvec3((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))), (bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))) && _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, ! (! (true)))))))))), (bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))) && _GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, true && (true)))))))), ! (! (! (! (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat2x4(injectionSwitch.y, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, abs(cos(0.0))))), bool(bvec3(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))), bool(bvec3((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))), (bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))) && _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, ! (! (true)))))))))), (bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-3.3)), bool(false))) > injectionSwitch.y)), true)))))) && _GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, true && (true))))))))))))))), false), _GLF_IDENTITY(bvec2(bvec3(bvec2(! (! (! (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))) && true)), bool(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0)) / 1.0) > injectionSwitch.y)) || _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, true, false)), ! (! (_GLF_IDENTITY(bool(bvec4(false, true, true, false)), (bool(bvec4(false, true, true, false))) || false)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))), _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))), ! (! (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))), ! (_GLF_IDENTITY(! (bool(bool(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))), bool(bool(! (bool(bool(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))))))))))), (bool(bool(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))))), true), bvec2(bvec4(bvec2(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true), true, false)))))))) && true))))), false), true)), bvec2(bvec2(bvec2(bvec3(bvec2(! (! (! (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))) * 1.0), bool(bvec3(_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 0.0, cos(0.0), 0.0, 0.0, 0.0, 1.0, 0.0))).x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))), bool(bvec3((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))), _GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(vec3(injectionSwitch.x, 1.0, 0.0))) > injectionSwitch.y)), true))))))), false || (bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))))))), (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))), ! (! (bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), mix(float(_GLF_FUZZED(2203.9749)), float(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), bool(true)))) > injectionSwitch.y)), true))))))))) || _GLF_FALSE(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y), false || ((_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y))))), (bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, false), bvec2(bvec2(bvec2(injectionSwitch.x > injectionSwitch.y, false)))))))))), bool(bvec2(_GLF_FALSE(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], clamp(_GLF_IDENTITY(injectionSwitch[1], min(injectionSwitch[1], injectionSwitch[1])), _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-0.9, 357.988)) : _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch))))), vec2(mat2x3(mat2(1.0) * (injectionSwitch), 0.0, exp(0.0), 1.0, exp(0.0)))))[1], injectionSwitch[1])))).y)), true)))))) && true))))), false), true)))))))), false, true, false))))))))
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                          {
                           barrier();
                           if(_GLF_DEAD(false))
                            barrier();
                          }
                         else
                          {
                          }
                         do
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                    }
                   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), false || (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), false || (_GLF_WRAPPED_IF_FALSE(false))))))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   else
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (! (true))))), false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
                      {
                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> 0) != (_GLF_IDENTITY((0 << _GLF_IDENTITY(int(7), int(7))) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(_GLF_IDENTITY(5, (5) - _GLF_IDENTITY(0, _GLF_IDENTITY((_GLF_IDENTITY(0, (0) | (0))), clamp((0), (0), (0))) - 0))), (_GLF_IDENTITY(int(5), clamp(int(5), int(5), int(5)))) | 0)), ~ (~ ((_GLF_IDENTITY(0, (0) << 0) << _GLF_IDENTITY(int(7), int(7))) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(_GLF_IDENTITY(5, (5) - _GLF_IDENTITY(0, (0) - 0))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) | _GLF_IDENTITY((_GLF_IDENTITY(int(5), (int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y)))), clamp((_GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y))), min(_GLF_IDENTITY(int(5), (int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y))), _GLF_IDENTITY(int(_GLF_IDENTITY(5, (_GLF_IDENTITY(5, (5) / 1)) | (_GLF_IDENTITY(5, ~ (~ (5)))))), (int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y))))), _GLF_IDENTITY(int(5), (int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y))), _GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(5), (int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y)))), max(~ (_GLF_IDENTITY(int(5), (int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y)))), ~ (_GLF_IDENTITY(int(5), (int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y))))))))))), _GLF_IDENTITY((_GLF_IDENTITY(int(5), (int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y)))), ((_GLF_IDENTITY(int(5), (int(5)) * _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(int(int(_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), ~ (~ (_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), min(_GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), float(mat2x4(_GLF_ONE(1.0, injectionSwitch.y), 1.0, exp(0.0), 0.0, 1.0, 1.0, 0.0, 0.0)))))), 0 ^ (int(_GLF_ONE(1.0, injectionSwitch.y))))))))), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(int(int(_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), ~ (~ (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), 0 ^ (int(_GLF_ONE(1.0, injectionSwitch.y))))))))), (int(int(_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), ~ (~ (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), 0 ^ (int(_GLF_ONE(1.0, injectionSwitch.y)))))))))) << 0), min(_GLF_IDENTITY(int(int(_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), ~ (~ (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), 0 ^ (int(_GLF_ONE(1.0, injectionSwitch.y))))))))), (int(int(_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), ~ (~ (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), 0 ^ (int(_GLF_ONE(1.0, injectionSwitch.y)))))))))) << 0), _GLF_IDENTITY(int(int(_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), ~ (~ (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), 0 ^ (int(_GLF_ONE(1.0, injectionSwitch.y))))))))), (int(int(_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), ~ (~ (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), 0 ^ (int(_GLF_ONE(1.0, injectionSwitch.y)))))))))) << 0))))))))) / (1 & _GLF_IDENTITY(1, 0 | (1)))), _GLF_IDENTITY((_GLF_IDENTITY(int(5), (int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y)))), (_GLF_IDENTITY((_GLF_IDENTITY(int(5), (int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y)))), min((_GLF_IDENTITY(int(5), (int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y)))), (_GLF_IDENTITY(int(5), (int(5)) * int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[_GLF_IDENTITY(0, (0) | (0))], _GLF_IDENTITY(injectionSwitch[1], min(injectionSwitch[1], injectionSwitch[1])))).y))))))) / 1)))), clamp(int(5), int(5), _GLF_IDENTITY(int(5), max(_GLF_IDENTITY(int(5), min(int(5), int(5))), int(5))))), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) | _GLF_IDENTITY((_GLF_IDENTITY(int(5), (int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y)))), clamp((_GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y))), min(_GLF_IDENTITY(int(5), (int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y))), _GLF_IDENTITY(int(_GLF_IDENTITY(5, (_GLF_IDENTITY(5, (5) / 1)) | (_GLF_IDENTITY(5, ~ (~ (5)))))), (int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y))))), _GLF_IDENTITY(int(5), _GLF_IDENTITY((int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y)), ~ (~ (_GLF_IDENTITY((int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y)), clamp((int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY((int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y)), ((int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y))) / 1), (int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y)))))))), _GLF_IDENTITY(int(5), (int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y)))))), _GLF_IDENTITY((_GLF_IDENTITY(int(5), (int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y)))), ((_GLF_IDENTITY(int(5), (int(5)) * _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(int(int(_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), ~ (~ (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), 0 ^ (int(_GLF_ONE(1.0, injectionSwitch.y))))))))), 0 ^ (_GLF_IDENTITY(int(int(_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), ~ (~ (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), 0 ^ (int(_GLF_ONE(1.0, injectionSwitch.y))))))))), (int(int(_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), ~ (~ (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), 0 ^ (int(_GLF_ONE(1.0, injectionSwitch.y)))))))))) << 0))))))) / (1 & _GLF_IDENTITY(1, 0 | (1)))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(int(5), (int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y)))), (_GLF_IDENTITY((_GLF_IDENTITY(int(5), (int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y)))), 0 ^ ((_GLF_IDENTITY(int(5), (int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y))))))) + 0), (_GLF_IDENTITY((_GLF_IDENTITY(int(5), (int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y)))), min((_GLF_IDENTITY(int(5), (int(5)) * _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), 0 | (int(_GLF_ONE(1.0, injectionSwitch.y)))))), (_GLF_IDENTITY(int(5), (int(5)) * int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], min(injectionSwitch[1], injectionSwitch[1])))).y))))))) / 1)))), clamp(int(5), int(5), _GLF_IDENTITY(int(5), max(_GLF_IDENTITY(int(5), min(int(5), int(5))), int(5))))), (_GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) | _GLF_IDENTITY((_GLF_IDENTITY(int(5), (int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y)))), clamp((_GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y))), min(_GLF_IDENTITY(int(5), (int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y))), _GLF_IDENTITY(int(_GLF_IDENTITY(5, (_GLF_IDENTITY(5, (5) / 1)) | (_GLF_IDENTITY(5, ~ (~ (5)))))), _GLF_IDENTITY((int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y)), min((int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y)), (int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y))))), (~ (_GLF_IDENTITY((int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y)), min((int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y)), (int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y)))))) >> 0)))))), _GLF_IDENTITY(_GLF_IDENTITY(int(5), ~ (~ (int(5)))), (int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y))), _GLF_IDENTITY(int(5), (int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y)))))), _GLF_IDENTITY((_GLF_IDENTITY(int(5), (int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y)))), ((_GLF_IDENTITY(int(5), (int(5)) * _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(int(int(_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), ~ (~ (_GLF_IDENTITY(int(_GLF_ONE(_GLF_IDENTITY(1.0, max(1.0, 1.0)), injectionSwitch.y)), 0 ^ (int(_GLF_ONE(1.0, injectionSwitch.y))))))))), 0 ^ (_GLF_IDENTITY(int(int(_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), float(_GLF_IDENTITY(mat4(_GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, abs(1.0), 1.0, 1.0), transpose(transpose(mat4(_GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, abs(1.0), 1.0, 1.0))))))), ~ (~ (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), 0 ^ (int(_GLF_ONE(1.0, injectionSwitch.y))))))))), (int(_GLF_IDENTITY(int(_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), ~ (~ (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), 0 ^ (int(_GLF_ONE(1.0, injectionSwitch.y)))))))), ~ (~ (int(_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), ~ (~ (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), 0 ^ (int(_GLF_ONE(1.0, injectionSwitch.y))))))))))))) << 0))))))) / (1 & _GLF_IDENTITY(_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) | (1)), 1)), 0 | (1)))), _GLF_IDENTITY((_GLF_IDENTITY(int(5), (int(5)) * _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) - int(_GLF_ZERO(0.0, injectionSwitch.x)))) | (int(_GLF_ONE(1.0, injectionSwitch.y)))))), (_GLF_IDENTITY((_GLF_IDENTITY(int(5), (int(_GLF_IDENTITY(5, ~ (~ (5))))) * int(_GLF_ONE(1.0, injectionSwitch.y)))), min((_GLF_IDENTITY(int(5), (int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y)))), (_GLF_IDENTITY(int(5), (int(5)) * int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], min(injectionSwitch[1], injectionSwitch[1])))).y))))))) / 1)))), clamp(int(5), int(5), _GLF_IDENTITY(int(5), max(_GLF_IDENTITY(int(5), min(int(5), int(5))), int(5)))))) - 0)))) | _GLF_IDENTITY(_GLF_IDENTITY(0, 0 | (0)), (0) | (_GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, min(0, 0)), 0)))), min((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) | _GLF_IDENTITY((_GLF_IDENTITY(int(5), (int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y)))), clamp((_GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y))), min(_GLF_IDENTITY(int(5), (int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y))), _GLF_IDENTITY(int(_GLF_IDENTITY(5, (_GLF_IDENTITY(5, (5) / 1)) | (_GLF_IDENTITY(5, ~ (~ (5)))))), (int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y))))), _GLF_IDENTITY(int(5), (int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y))), _GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(5), (int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y)))), max(~ (_GLF_IDENTITY(int(5), (int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y)))), ~ (_GLF_IDENTITY(int(5), (int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y))))))))))), _GLF_IDENTITY((_GLF_IDENTITY(int(5), (int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y)))), ((_GLF_IDENTITY(int(5), (int(5)) * _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(int(int(_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), ~ (~ (_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), min(_GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), float(mat2x4(_GLF_ONE(1.0, injectionSwitch.y), 1.0, exp(0.0), 0.0, 1.0, 1.0, 0.0, 0.0)))))), 0 ^ (int(_GLF_ONE(1.0, injectionSwitch.y))))))))), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(int(int(_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), ~ (~ (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), 0 ^ (int(_GLF_ONE(1.0, injectionSwitch.y))))))))), (int(int(_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), ~ (~ (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), 0 ^ (int(_GLF_ONE(1.0, injectionSwitch.y)))))))))) << 0), min(_GLF_IDENTITY(int(int(_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), ~ (~ (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), 0 ^ (int(_GLF_ONE(1.0, injectionSwitch.y))))))))), (int(int(_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), ~ (~ (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), 0 ^ (int(_GLF_ONE(1.0, injectionSwitch.y)))))))))) << 0), _GLF_IDENTITY(int(int(_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), ~ (~ (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), 0 ^ (int(_GLF_ONE(1.0, injectionSwitch.y))))))))), (int(int(_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), ~ (~ (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), 0 ^ (int(_GLF_ONE(1.0, injectionSwitch.y)))))))))) << 0))))))))) / (1 & _GLF_IDENTITY(1, 0 | (1)))), _GLF_IDENTITY((_GLF_IDENTITY(int(5), (int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y)))), (_GLF_IDENTITY((_GLF_IDENTITY(int(5), (int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y)))), min((_GLF_IDENTITY(int(5), (int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y)))), (_GLF_IDENTITY(int(5), (int(5)) * int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[_GLF_IDENTITY(0, (0) | (0))], _GLF_IDENTITY(injectionSwitch[1], min(injectionSwitch[1], injectionSwitch[1])))).y))))))) / 1)))), clamp(int(5), int(5), _GLF_IDENTITY(int(5), max(_GLF_IDENTITY(int(5), min(int(5), int(5))), int(5))))), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) | _GLF_IDENTITY((_GLF_IDENTITY(int(5), (int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y)))), clamp((_GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y))), min(_GLF_IDENTITY(int(5), (int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y))), _GLF_IDENTITY(int(_GLF_IDENTITY(5, (_GLF_IDENTITY(5, (5) / 1)) | (_GLF_IDENTITY(5, ~ (~ (5)))))), (int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y))))), _GLF_IDENTITY(int(5), _GLF_IDENTITY((int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y)), ~ (~ (_GLF_IDENTITY((int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y)), clamp((int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY((int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y)), ((int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y))) / 1), (int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y)))))))), _GLF_IDENTITY(int(5), (int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y)))))), _GLF_IDENTITY((_GLF_IDENTITY(int(5), (int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y)))), ((_GLF_IDENTITY(int(5), (int(5)) * _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(int(int(_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), ~ (~ (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), 0 ^ (int(_GLF_ONE(1.0, injectionSwitch.y))))))))), 0 ^ (_GLF_IDENTITY(int(int(_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), ~ (~ (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), 0 ^ (int(_GLF_ONE(1.0, injectionSwitch.y))))))))), (int(int(_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), ~ (~ (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), 0 ^ (int(_GLF_ONE(1.0, injectionSwitch.y)))))))))) << 0))))))) / (1 & _GLF_IDENTITY(1, 0 | (1)))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(int(5), (int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y)))), (_GLF_IDENTITY((_GLF_IDENTITY(int(5), (int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y)))), 0 ^ ((_GLF_IDENTITY(int(5), (int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y))))))) + 0), (_GLF_IDENTITY((_GLF_IDENTITY(int(5), (int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y)))), min((_GLF_IDENTITY(int(5), (int(5)) * _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), 0 | (int(_GLF_ONE(1.0, injectionSwitch.y)))))), (_GLF_IDENTITY(int(5), (int(5)) * int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], min(injectionSwitch[1], injectionSwitch[1])))).y))))))) / 1)))), clamp(int(5), int(5), _GLF_IDENTITY(int(5), max(_GLF_IDENTITY(int(5), min(int(5), int(5))), int(5))))), (_GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) | _GLF_IDENTITY((_GLF_IDENTITY(int(5), (int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y)))), clamp((_GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y))), min(_GLF_IDENTITY(int(5), (int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y))), _GLF_IDENTITY(int(_GLF_IDENTITY(5, (_GLF_IDENTITY(5, (5) / 1)) | (_GLF_IDENTITY(5, ~ (~ (5)))))), _GLF_IDENTITY((int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y)), min((int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y)), (int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y))))), (~ (_GLF_IDENTITY((int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y)), min((int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y)), (int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y)))))) >> 0)))))), _GLF_IDENTITY(_GLF_IDENTITY(int(5), ~ (~ (int(5)))), (int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y))), _GLF_IDENTITY(int(5), (int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y)))))), _GLF_IDENTITY((_GLF_IDENTITY(int(5), (int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y)))), ((_GLF_IDENTITY(int(5), (int(5)) * _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(int(int(_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), ~ (~ (_GLF_IDENTITY(int(_GLF_ONE(_GLF_IDENTITY(1.0, max(1.0, 1.0)), injectionSwitch.y)), 0 ^ (int(_GLF_ONE(1.0, injectionSwitch.y))))))))), 0 ^ (_GLF_IDENTITY(int(int(_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), float(_GLF_IDENTITY(mat4(_GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, abs(1.0), 1.0, 1.0), transpose(transpose(mat4(_GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, abs(1.0), 1.0, 1.0))))))), ~ (~ (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), 0 ^ (int(_GLF_ONE(1.0, injectionSwitch.y))))))))), (int(_GLF_IDENTITY(int(_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), ~ (~ (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), 0 ^ (int(_GLF_ONE(1.0, injectionSwitch.y)))))))), ~ (~ (int(_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), ~ (~ (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), 0 ^ (int(_GLF_ONE(1.0, injectionSwitch.y))))))))))))) << 0))))))) / (1 & _GLF_IDENTITY(_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) | (1)), 1)), 0 | (1)))), _GLF_IDENTITY((_GLF_IDENTITY(int(5), (int(5)) * _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) - int(_GLF_ZERO(0.0, injectionSwitch.x)))) | (int(_GLF_ONE(1.0, injectionSwitch.y)))))), (_GLF_IDENTITY((_GLF_IDENTITY(int(5), (int(_GLF_IDENTITY(5, ~ (~ (5))))) * int(_GLF_ONE(1.0, injectionSwitch.y)))), min((_GLF_IDENTITY(int(5), (int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y)))), (_GLF_IDENTITY(int(5), (int(5)) * int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], min(injectionSwitch[1], injectionSwitch[1])))).y))))))) / 1)))), clamp(int(5), int(5), _GLF_IDENTITY(int(5), max(_GLF_IDENTITY(int(5), min(int(5), int(5))), int(5)))))) - 0)))) | _GLF_IDENTITY(_GLF_IDENTITY(0, 0 | (0)), (0) | (_GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, min(0, 0)), 0)))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) | _GLF_IDENTITY((_GLF_IDENTITY(int(5), (int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y)))), clamp((_GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y))), min(_GLF_IDENTITY(int(5), (int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y))), _GLF_IDENTITY(int(_GLF_IDENTITY(5, (_GLF_IDENTITY(5, (5) / 1)) | (_GLF_IDENTITY(5, ~ (~ (5)))))), (int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y))))), _GLF_IDENTITY(int(5), (int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y))), _GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(5), (int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y)))), max(~ (_GLF_IDENTITY(int(5), (int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y)))), ~ (_GLF_IDENTITY(int(5), (int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y))))))))))), _GLF_IDENTITY((_GLF_IDENTITY(int(5), (int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y)))), ((_GLF_IDENTITY(int(5), (int(5)) * _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(int(int(_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), ~ (~ (_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), min(_GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), float(mat2x4(_GLF_ONE(1.0, injectionSwitch.y), 1.0, exp(0.0), 0.0, 1.0, 1.0, 0.0, 0.0)))))), 0 ^ (int(_GLF_ONE(1.0, injectionSwitch.y))))))))), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(int(int(_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), ~ (~ (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), 0 ^ (int(_GLF_ONE(1.0, injectionSwitch.y))))))))), (int(int(_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), ~ (~ (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), 0 ^ (int(_GLF_ONE(1.0, injectionSwitch.y)))))))))) << 0), min(_GLF_IDENTITY(int(int(_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), ~ (~ (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), 0 ^ (int(_GLF_ONE(1.0, injectionSwitch.y))))))))), (int(int(_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), ~ (~ (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), 0 ^ (int(_GLF_ONE(1.0, injectionSwitch.y)))))))))) << 0), _GLF_IDENTITY(int(int(_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), ~ (~ (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), 0 ^ (int(_GLF_ONE(1.0, injectionSwitch.y))))))))), (int(int(_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), ~ (~ (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), 0 ^ (int(_GLF_ONE(1.0, injectionSwitch.y)))))))))) << 0))))))))) / (1 & _GLF_IDENTITY(1, 0 | (1)))), _GLF_IDENTITY((_GLF_IDENTITY(int(5), (int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y)))), (_GLF_IDENTITY((_GLF_IDENTITY(int(5), (int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y)))), min((_GLF_IDENTITY(int(5), (int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y)))), (_GLF_IDENTITY(int(5), (int(5)) * int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[_GLF_IDENTITY(0, (0) | (0))], _GLF_IDENTITY(injectionSwitch[1], min(injectionSwitch[1], injectionSwitch[1])))).y))))))) / 1)))), clamp(int(5), int(5), _GLF_IDENTITY(int(5), max(_GLF_IDENTITY(int(5), min(int(5), int(5))), int(5))))), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) | _GLF_IDENTITY((_GLF_IDENTITY(int(5), (int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y)))), clamp((_GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y))), min(_GLF_IDENTITY(int(5), (int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y))), _GLF_IDENTITY(int(_GLF_IDENTITY(5, (_GLF_IDENTITY(5, (5) / 1)) | (_GLF_IDENTITY(5, ~ (~ (5)))))), (int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y))))), _GLF_IDENTITY(int(5), _GLF_IDENTITY((int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y)), ~ (~ (_GLF_IDENTITY((int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y)), clamp((int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY((int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y)), ((int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y))) / 1), (int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y)))))))), _GLF_IDENTITY(int(5), (int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y)))))), _GLF_IDENTITY((_GLF_IDENTITY(int(5), (int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y)))), ((_GLF_IDENTITY(int(5), (int(5)) * _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(int(int(_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), ~ (~ (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), 0 ^ (int(_GLF_ONE(1.0, injectionSwitch.y))))))))), 0 ^ (_GLF_IDENTITY(int(int(_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), ~ (~ (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), 0 ^ (int(_GLF_ONE(1.0, injectionSwitch.y))))))))), (int(int(_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), ~ (~ (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), 0 ^ (int(_GLF_ONE(1.0, injectionSwitch.y)))))))))) << 0))))))) / (1 & _GLF_IDENTITY(1, 0 | (1)))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(int(5), (int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y)))), (_GLF_IDENTITY((_GLF_IDENTITY(int(5), (int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y)))), 0 ^ ((_GLF_IDENTITY(int(5), (int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y))))))) + 0), (_GLF_IDENTITY((_GLF_IDENTITY(int(5), (int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y)))), min((_GLF_IDENTITY(int(5), (int(5)) * _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), 0 | (int(_GLF_ONE(1.0, injectionSwitch.y)))))), (_GLF_IDENTITY(int(5), (int(5)) * int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], min(injectionSwitch[1], injectionSwitch[1])))).y))))))) / 1)))), clamp(int(5), int(5), _GLF_IDENTITY(int(5), max(_GLF_IDENTITY(int(5), min(int(5), int(5))), int(5))))), (_GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) | _GLF_IDENTITY((_GLF_IDENTITY(int(5), (int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y)))), clamp((_GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y))), min(_GLF_IDENTITY(int(5), (int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y))), _GLF_IDENTITY(int(_GLF_IDENTITY(5, (_GLF_IDENTITY(5, (5) / 1)) | (_GLF_IDENTITY(5, ~ (~ (5)))))), _GLF_IDENTITY((int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y)), min((int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y)), (int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y))))), (~ (_GLF_IDENTITY((int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y)), min((int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y)), (int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y)))))) >> 0)))))), _GLF_IDENTITY(_GLF_IDENTITY(int(5), ~ (~ (int(5)))), (int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y))), _GLF_IDENTITY(int(5), (int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y)))))), _GLF_IDENTITY((_GLF_IDENTITY(int(5), (int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y)))), ((_GLF_IDENTITY(int(5), (int(5)) * _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(int(int(_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), ~ (~ (_GLF_IDENTITY(int(_GLF_ONE(_GLF_IDENTITY(1.0, max(1.0, 1.0)), injectionSwitch.y)), 0 ^ (int(_GLF_ONE(1.0, injectionSwitch.y))))))))), 0 ^ (_GLF_IDENTITY(int(int(_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), float(_GLF_IDENTITY(mat4(_GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, abs(1.0), 1.0, 1.0), transpose(transpose(mat4(_GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, abs(1.0), 1.0, 1.0))))))), ~ (~ (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), 0 ^ (int(_GLF_ONE(1.0, injectionSwitch.y))))))))), (int(_GLF_IDENTITY(int(_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), ~ (~ (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), 0 ^ (int(_GLF_ONE(1.0, injectionSwitch.y)))))))), ~ (~ (int(_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), ~ (~ (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), 0 ^ (int(_GLF_ONE(1.0, injectionSwitch.y))))))))))))) << 0))))))) / (1 & _GLF_IDENTITY(_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) | (1)), 1)), 0 | (1)))), _GLF_IDENTITY((_GLF_IDENTITY(int(5), (int(5)) * _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) - int(_GLF_ZERO(0.0, injectionSwitch.x)))) | (int(_GLF_ONE(1.0, injectionSwitch.y)))))), (_GLF_IDENTITY((_GLF_IDENTITY(int(5), (int(_GLF_IDENTITY(5, ~ (~ (5))))) * int(_GLF_ONE(1.0, injectionSwitch.y)))), min((_GLF_IDENTITY(int(5), (int(5)) * int(_GLF_ONE(1.0, injectionSwitch.y)))), (_GLF_IDENTITY(int(5), (int(5)) * int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], min(injectionSwitch[1], injectionSwitch[1])))).y))))))) / 1)))), clamp(int(5), int(5), _GLF_IDENTITY(int(5), max(_GLF_IDENTITY(int(5), min(int(5), int(5))), int(5)))))) - 0)))) | _GLF_IDENTITY(_GLF_IDENTITY(0, 0 | (0)), (0) | (_GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, min(0, 0)), 0))))))))))))); _injected_loop_counter --)
                        {
                         do
                          {
                           do
                            {
                             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, true, true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(bvec3(true, true, true)))))))
                              {
                               do
                                {
                                 barrier();
                                }
                               while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec3(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(5687.3933), _GLF_IDENTITY((injectionSwitch), (_GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) * vec2(1.0, 1.0))) / vec2(1.0, 1.0))[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-915.347)), _GLF_IDENTITY(bvec2(true, false), bvec2(bvec3(bvec2(true, false), true))))), abs(1.0)), _GLF_IDENTITY(vec3(vec4(vec3(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY(_GLF_FUZZED(5687.3933), clamp(_GLF_FUZZED(5687.3933), _GLF_FUZZED(5687.3933), _GLF_FUZZED(5687.3933))), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-915.347)), bvec2(true, false))), abs(1.0)), 0.0)), (vec3(vec4(vec3(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(5687.3933), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-915.347)), bvec2(true, false))), abs(1.0)), 0.0))) * mat3(1.0))))).x > injectionSwitch.y))), (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                              }
                             else
                              {
                              }
                             if(_GLF_DEAD(false))
                              barrier();
                            }
                           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
                            {
                            }
                           else
                            {
                             if(_GLF_DEAD(false))
                              {
                               if(_GLF_WRAPPED_IF_TRUE(true))
                                {
                                 barrier();
                                }
                               else
                                {
                                }
                              }
                            }
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             if(_GLF_WRAPPED_IF_FALSE(false))
                              {
                              }
                             else
                              {
                               if(_GLF_DEAD(false))
                                {
                                 if(_GLF_WRAPPED_IF_TRUE(true))
                                  {
                                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, clamp(1, 1, 1))); _injected_loop_counter ++)
                                    {
                                     barrier();
                                    }
                                  }
                                 else
                                  {
                                  }
                                }
                              }
                            }
                           else
                            {
                            }
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                       do
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))) / _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0)))) > injectionSwitch.y))))
                          {
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              {
                               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                {
                                 barrier();
                                }
                               else
                                {
                                }
                              }
                            }
                           else
                            {
                             for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) & 64419); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | (0 | (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(3), int(3))), ((1 << _GLF_IDENTITY(int(3), int(3)))) >> 0) >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), max(_GLF_IDENTITY(int(3), int(3)), _GLF_IDENTITY(int(3), int(3)))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(int(3), int(3)) : _GLF_FUZZED(_injected_loop_counter))))))); _injected_loop_counter ++)
                              {
                               for(int _injected_loop_counter = ((-14009 & -32792) & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                                {
                                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                  barrier();
                                }
                               barrier();
                              }
                             if(_GLF_WRAPPED_IF_FALSE(false))
                              {
                              }
                             else
                              {
                               if(_GLF_DEAD(false))
                                barrier();
                               if(_GLF_DEAD(false))
                                {
                                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                  barrier();
                                 for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, min(_GLF_IDENTITY(1, 0 | (1)), 1))); _injected_loop_counter ++)
                                  {
                                   barrier();
                                  }
                                }
                              }
                            }
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                     else
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           for(int _injected_loop_counter = _GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, (0) << 0))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y)), ! (! (_injected_loop_counter != _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), max(int(_GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) << int(_GLF_ZERO(0.0, injectionSwitch.x))))))))); _injected_loop_counter ++)
                            {
                             if(_GLF_DEAD(false))
                              {
                               if(_GLF_DEAD(false))
                                barrier();
                               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & _GLF_IDENTITY((1 & 1), min((1 & 1), (1 & 1))))); _injected_loop_counter ++)
                                {
                                 barrier();
                                }
                              }
                            }
                          }
                         else
                          {
                          }
                        }
                       else
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                        }
                      }
                     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], clamp(injectionSwitch[0], injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[0], clamp(injectionSwitch[0], injectionSwitch[0], injectionSwitch[0])))), injectionSwitch[1])), clamp(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).y, min(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[1]), min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[1]), max(vec2(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) ? injectionSwitch : _GLF_FUZZED(injectionSwitch)))[0], injectionSwitch[_GLF_IDENTITY(1, clamp(1, 1, 1))]), vec2(injectionSwitch[0], injectionSwitch[1]))), clamp(vec2(injectionSwitch[0], injectionSwitch[1]), vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, (1) | 0)]), vec2(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec4(injectionSwitch, 1.0, 0.0)), max(vec2(vec4(injectionSwitch, 1.0, 0.0)), vec2(vec4(injectionSwitch, 1.0, 0.0)))))[0], injectionSwitch[1]))), vec2(mat4(_GLF_IDENTITY(_GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[1]), max(vec2(injectionSwitch[0], injectionSwitch[1]), vec2(injectionSwitch[0], injectionSwitch[1]))), clamp(vec2(injectionSwitch[0], injectionSwitch[1]), vec2(injectionSwitch[0], injectionSwitch[1]), vec2(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec4(injectionSwitch, 1.0, 0.0)), max(vec2(vec4(injectionSwitch, 1.0, 0.0)), vec2(vec4(injectionSwitch, 1.0, 0.0)))))[0], injectionSwitch[1]))), 0.0, 0.0, 1.0, 0.0, 0.0, log(1.0), 1.0, 1.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(7298.1509))), 0.0, 0.0, abs(1.0), 1.0))), _GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[1]), vec2(0.0, 0.0) + (vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], _GLF_IDENTITY(float(mat2x4(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(degrees(injectionSwitch))))[1], 1.0, 1.0, 0.0, exp(0.0), 0.0, 0.0, 1.0)), clamp(float(mat2x4(injectionSwitch[_GLF_IDENTITY(1, (1) - 0)], 1.0, 1.0, 0.0, exp(0.0), 0.0, 0.0, 1.0)), float(mat2x4(_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(pow(injectionSwitch, injectionSwitch))))[1], 1.0, 1.0, 0.0, exp(0.0), 0.0, 0.0, 1.0)), float(mat2x4(injectionSwitch[1], 1.0, 1.0, 0.0, exp(0.0), 0.0, 0.0, 1.0))))))))))).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[_GLF_IDENTITY(0, _GLF_IDENTITY(0, (true ? _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) >> 0)) - (0 << _GLF_IDENTITY(int(7), int(7)))) : _GLF_FUZZED(-39544))) | (0))], injectionSwitch[_GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))) ? _GLF_FUZZED(61756) : _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(70650)))), max((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(61756) : _GLF_IDENTITY(1, (true ? 1 : _GLF_IDENTITY(_GLF_FUZZED(70650), (_GLF_FUZZED(70650)) | (_GLF_FUZZED(70650)))))), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(829.832), _GLF_FUZZED(2.1)), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], mix(float(_GLF_IDENTITY(_GLF_FUZZED(5740.3848), clamp(_GLF_IDENTITY(_GLF_FUZZED(5740.3848), float(mat4(_GLF_FUZZED(5740.3848), 0.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0))), 0.0, 0.0, 1.0, 0.0, 1.0, cos(0.0), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0))), _GLF_FUZZED(5740.3848), _GLF_FUZZED(5740.3848)))), float((injectionSwitch)[1]), bool(true)))), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))).y)) ? _GLF_FUZZED(61756) : _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, min(_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec4(1, 0, 0, 0), max(ivec4(1, 0, 0, 0), ivec4(1, 0, 0, 0))))), 1)) : _GLF_FUZZED(70650)))))))])).y, min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))[1])).y, float(vec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))) - vec2(0.0, 0.0))[1])).y, _GLF_IDENTITY((false ? _GLF_FUZZED(0.3) : _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))[1])).y), (false ? _GLF_FUZZED(-3.9) : (false ? _GLF_FUZZED(0.3) : _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))[1])).y)))), 0.0, determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0)))))))))));
                }
               else
                {
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           else
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((injectionSwitch.x > injectionSwitch.y))))))
                {
                }
               else
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   do
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                          {
                           barrier();
                          }
                         else
                          {
                          }
                        }
                       else
                        {
                        }
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                  }
                 else
                  {
                  }
                }
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint virtual_gid = workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id * subgroup_size, min(subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) * 1u)))) | 0u), max(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | 0u), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | 0u), (true ? _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, uint(uvec4(subgroup_size, 0u, 1u, 1u))), (subgroup_id * subgroup_size) | 0u), (_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | 0u)) + 0u) : _GLF_FUZZED(workgroup_id))))), uint(uvec2(_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY((subgroup_id * _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))), (true ? (subgroup_id * subgroup_size) : _GLF_FUZZED(workgroup_id))) | 0u), uint(_GLF_ONE(1.0, injectionSwitch.y))))) + subgroup_local_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), bool(bvec2(! ((false)), false)))))))), (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)).y, _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(8.3)))), float(_GLF_FUZZED(-79.69)), bool(false))), (injectionSwitch.y) - 0.0), injectionSwitch.y), (false ? _GLF_FUZZED(6.2) : max(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))) - _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat4x2(0.0, 1.0, abs(log(1.0)), determinant(mat4(1.0, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(float(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))), (_GLF_IDENTITY(float(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) * 1.0)))), mix(float(_GLF_FUZZED(334.981)), _GLF_IDENTITY(float(float(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), (float(float(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))))) / 1.0), bool(true)))) + 0.0))), 0.0, exp(0.0), 0.0, _GLF_IDENTITY(1.0, (1.0) * 1.0), 0.0, 1.0, 0.0, abs(0.0), 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0)), 0.0, 1.0, 0.0, sqrt(1.0))), min(float(mat4x2(0.0, 1.0, abs(log(1.0)), determinant(mat4(1.0, _GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))), _GLF_IDENTITY(float(_GLF_FUZZED(float(34665u))), float(_GLF_IDENTITY(mat2x4(float(_GLF_FUZZED(float(34665u))), 1.0, 1.0, 1.0, abs(0.0), 1.0, 1.0, 1.0), (mat2x4(float(_GLF_FUZZED(float(34665u))), 1.0, 1.0, 1.0, abs(0.0), 1.0, 1.0, 1.0)) * mat2(1.0)))), bool(false))), 0.0, exp(0.0), 0.0, 1.0, 0.0, 1.0, 0.0, abs(0.0), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), 0.0, 1.0, 0.0, sqrt(1.0))), float(mat4x2(0.0, 1.0, abs(_GLF_IDENTITY(log(1.0), clamp(_GLF_IDENTITY(log(1.0), (true ? log(1.0) : _GLF_FUZZED(-1.1))), log(1.0), log(1.0)))), determinant(mat4(1.0, 0.0, 0.0, exp(0.0), 0.0, 1.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(abs(0.0), mix(float(_GLF_FUZZED(64.11)), float(abs(0.0)), bool(true))), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), 0.0, 1.0, 0.0, sqrt(1.0))))))), injectionSwitch.y))))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, true, true))))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true && (false), (true && (false)) || _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true)), (bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))) || false)))), true && (! (_GLF_IDENTITY(true && (false), (true && (false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
        {
         do
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             do
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       else
        {
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
  }
 uint next_virtual_gid = workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(min(subgroup_id, subgroup_id), uint(uvec4(min(subgroup_id, subgroup_id), 0u, 0u, 1u)))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(min(subgroup_id, subgroup_id), uint(uvec4(min(subgroup_id, subgroup_id), 0u, 0u, 1u)))), uint(uvec4(_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(min(subgroup_id, subgroup_id), uint(uvec4(min(subgroup_id, subgroup_id), 0u, 0u, 1u)))), 1u, 0u, 0u)))))))), _GLF_IDENTITY(uint(uvec4((~ (_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)))), _GLF_IDENTITY(0u, max(0u, 0u)), 1u, _GLF_IDENTITY(1u, (true ? _GLF_IDENTITY(_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, 1u))) | 0u))), ~ (~ (1u))) : _GLF_FUZZED((workgroup_base + workgroup_size)))))), ~ (~ (uint(_GLF_IDENTITY(uvec4((~ (_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)))), 0u, 1u, 1u), (uvec4((~ (_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)))), 0u, _GLF_IDENTITY(1u, (1u) >> 0u), 1u)) << uvec4(0u, 0u, 0u, 0u))))))))) + 0u), ~ (~ (_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(min(_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, uint(uvec3(subgroup_id, 1u, 0u)))) ^ (0u >> _GLF_IDENTITY(uint(4u), uint(4u)))), subgroup_id), uint(uvec4(_GLF_IDENTITY(min(subgroup_id, subgroup_id), (_GLF_IDENTITY(min(subgroup_id, subgroup_id), clamp(min(subgroup_id, subgroup_id), min(subgroup_id, subgroup_id), min(subgroup_id, subgroup_id)))) >> 0u), 0u, 0u, 1u)))))), _GLF_IDENTITY(uint(uvec4((~ (_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)))), _GLF_IDENTITY(0u, max(0u, 0u)), 1u, 1u)), ~ _GLF_IDENTITY((~ (uint(_GLF_IDENTITY(uvec4((~ (_GLF_IDENTITY(subgroup_id, min(subgroup_id, _GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u))))), 0u, 1u, 1u), (uvec4((~ (_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)))), 0u, 1u, 1u)) << uvec4(_GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, clamp(0u, 0u, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)))))), 0u, 0u, 0u))))), ((~ (uint(_GLF_IDENTITY(uvec4((~ (_GLF_IDENTITY(subgroup_id, min(subgroup_id, _GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u))))), 0u, 1u, 1u), (uvec4((~ (_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)))), 0u, 1u, 1u)) << uvec4(_GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, clamp(0u, 0u, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)))))), 0u, 0u, 0u)))))) >> 0u)))), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(min(_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, uint(uvec3(subgroup_id, 1u, 0u)))) ^ (0u >> _GLF_IDENTITY(uint(4u), uint(4u)))), subgroup_id), uint(uvec4(_GLF_IDENTITY(min(subgroup_id, subgroup_id), (_GLF_IDENTITY(min(subgroup_id, subgroup_id), clamp(min(subgroup_id, subgroup_id), min(subgroup_id, subgroup_id), min(subgroup_id, subgroup_id)))) >> 0u), 0u, 0u, 1u)))))), _GLF_IDENTITY(uint(uvec4((~ (_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)))), _GLF_IDENTITY(0u, max(0u, 0u)), 1u, 1u)), ~ _GLF_IDENTITY((~ (uint(_GLF_IDENTITY(uvec4((~ (_GLF_IDENTITY(subgroup_id, min(subgroup_id, _GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u))))), 0u, 1u, 1u), (uvec4((~ (_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)))), 0u, 1u, 1u)) << uvec4(_GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, clamp(0u, 0u, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)))))), 0u, 0u, 0u))))), ((~ (uint(_GLF_IDENTITY(uvec4((~ (_GLF_IDENTITY(subgroup_id, min(subgroup_id, _GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u))))), 0u, 1u, 1u), (uvec4((~ (_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)))), 0u, 1u, 1u)) << uvec4(_GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, clamp(0u, 0u, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)))))), 0u, 0u, 0u)))))) >> 0u)))), max(_GLF_IDENTITY(subgroup_id, ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(min(_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, uint(uvec3(subgroup_id, 1u, 0u)))) ^ (0u >> _GLF_IDENTITY(uint(4u), uint(4u)))), subgroup_id), uint(uvec4(_GLF_IDENTITY(min(subgroup_id, subgroup_id), (_GLF_IDENTITY(min(subgroup_id, subgroup_id), clamp(min(subgroup_id, subgroup_id), min(subgroup_id, subgroup_id), min(subgroup_id, subgroup_id)))) >> 0u), 0u, 0u, 1u)))))), _GLF_IDENTITY(uint(uvec4((~ (_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)))), _GLF_IDENTITY(0u, max(0u, 0u)), 1u, 1u)), ~ _GLF_IDENTITY((~ (uint(_GLF_IDENTITY(uvec4((~ (_GLF_IDENTITY(subgroup_id, min(subgroup_id, _GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u))))), 0u, 1u, 1u), (uvec4((~ (_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)))), 0u, 1u, 1u)) << uvec4(_GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, clamp(0u, 0u, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)))))), 0u, 0u, 0u))))), ((~ (uint(_GLF_IDENTITY(uvec4((~ (_GLF_IDENTITY(subgroup_id, min(subgroup_id, _GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u))))), 0u, 1u, 1u), (uvec4((~ (_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)))), 0u, 1u, 1u)) << uvec4(_GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, clamp(0u, 0u, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)))))), 0u, 0u, 0u)))))) >> 0u)))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(min(_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, uint(uvec3(subgroup_id, 1u, 0u)))) ^ (0u >> _GLF_IDENTITY(uint(4u), uint(4u)))), subgroup_id), uint(uvec4(_GLF_IDENTITY(min(subgroup_id, subgroup_id), (_GLF_IDENTITY(min(subgroup_id, subgroup_id), clamp(min(subgroup_id, subgroup_id), min(subgroup_id, subgroup_id), min(subgroup_id, subgroup_id)))) >> 0u), 0u, 0u, 1u)))))), _GLF_IDENTITY(uint(uvec4((~ (_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)))), _GLF_IDENTITY(0u, max(0u, 0u)), 1u, 1u)), ~ _GLF_IDENTITY((~ (uint(_GLF_IDENTITY(uvec4((~ (_GLF_IDENTITY(subgroup_id, min(subgroup_id, _GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u))))), 0u, 1u, 1u), (uvec4((~ (_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)))), 0u, 1u, 1u)) << uvec4(_GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, clamp(0u, 0u, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)))))), 0u, 0u, 0u))))), ((~ (uint(_GLF_IDENTITY(uvec4((~ (_GLF_IDENTITY(subgroup_id, min(subgroup_id, _GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u))))), 0u, 1u, 1u), (uvec4((~ (_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)))), 0u, 1u, 1u)) << uvec4(_GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, clamp(0u, 0u, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)))))), 0u, 0u, 0u)))))) >> 0u)))), ~ (~ (_GLF_IDENTITY(subgroup_id, ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(min(_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, uint(uvec3(subgroup_id, 1u, 0u)))) ^ (0u >> _GLF_IDENTITY(uint(4u), uint(4u)))), subgroup_id), uint(uvec4(_GLF_IDENTITY(min(subgroup_id, subgroup_id), (_GLF_IDENTITY(min(subgroup_id, subgroup_id), clamp(min(subgroup_id, subgroup_id), min(subgroup_id, subgroup_id), min(subgroup_id, subgroup_id)))) >> 0u), 0u, 0u, 1u)))))), _GLF_IDENTITY(uint(uvec4((~ (_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)))), _GLF_IDENTITY(0u, max(0u, 0u)), 1u, 1u)), ~ _GLF_IDENTITY((~ (uint(_GLF_IDENTITY(uvec4((~ (_GLF_IDENTITY(subgroup_id, min(subgroup_id, _GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u))))), 0u, 1u, 1u), (uvec4((~ (_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)))), 0u, 1u, 1u)) << uvec4(_GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, clamp(0u, 0u, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)))))), 0u, 0u, 0u))))), ((~ (uint(_GLF_IDENTITY(uvec4((~ (_GLF_IDENTITY(subgroup_id, min(subgroup_id, _GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u))))), 0u, 1u, 1u), (uvec4((~ (_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)))), 0u, 1u, 1u)) << uvec4(_GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, clamp(0u, 0u, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)))))), 0u, 0u, 0u)))))) >> 0u)))))))))))) + 0u)))) * subgroup_size + ((subgroup_local_id + 1) % subgroup_size);
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, true && (false)))))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, true && (false)))))), bool(bvec3(bool(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, true && (false)))))), true, true)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(2), int(2)), clamp(0 << _GLF_IDENTITY(int(2), int(2)), 0 << _GLF_IDENTITY(int(2), int(2)), _GLF_IDENTITY(0 << _GLF_IDENTITY(int(2), int(2)), (true ? 0 << _GLF_IDENTITY(int(2), int(2)) : _GLF_FUZZED(-42727))))))); _injected_loop_counter --)
    {
     barrier();
    }
  }
 uint read = atomicLoad(buf[virtual_gid], 4, _GLF_IDENTITY(64, (64) - 0), 0);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
  {
   for(int _injected_loop_counter = (1 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(0, (0) / (1 & 1)) >> _GLF_IDENTITY(_GLF_IDENTITY(int(8), int(8)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(int(8), int(8)), (true ? _GLF_IDENTITY(int(8), int(8)) : _GLF_FUZZED(31336)))) ^ 0, ((_GLF_IDENTITY(_GLF_IDENTITY(int(8), int(8)), (true ? _GLF_IDENTITY(int(8), int(8)) : _GLF_FUZZED(31336)))) ^ 0) << (0 | 0))))); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
              barrier();
             do
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), false || (_GLF_WRAPPED_IF_FALSE(false))))
            {
            }
           else
            {
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, bool(bvec3(true, true, false))), false)))))))
                {
                 for(int _injected_loop_counter = int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (true ? _GLF_IDENTITY(_GLF_ONE(_GLF_IDENTITY(1.0, min(1.0, 1.0)), injectionSwitch.y), clamp(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), max(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))), _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (false ? _GLF_FUZZED(-3.5) : _GLF_ONE(1.0, injectionSwitch.y))))) : _GLF_FUZZED(1.6)))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(1), int(1)))), bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(1), int(1)))), false, false, false))); _injected_loop_counter --)
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                    }
                   else
                    {
                    }
                  }
                }
               else
                {
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             do
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
                  {
                   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                    {
                     barrier();
                    }
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = (_GLF_IDENTITY(1 | 1, max(_GLF_IDENTITY(1 | 1, (false ? _GLF_FUZZED(73063) : 1 | 1)), _GLF_IDENTITY(1 | 1, clamp(1 | 1, 1 | 1, 1 | 1))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (0) ^ 0)); _injected_loop_counter --)
                  {
                   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                    {
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter ++)
                      {
                       for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), false || (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0))); _injected_loop_counter --)
                        {
                         barrier();
                        }
                      }
                    }
                  }
                }
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))
                  {
                  }
                 else
                  {
                   barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                }
              }
            }
          }
        }
       else
        {
        }
      }
    }
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > ((0 & 59861) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) << 0)))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, (false) && true), _GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, false || (true)))), true)))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), false || (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, (_injected_loop_counter > 0) || false))))) || false); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) ^ 0))
          {
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
                    barrier();
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     do
                      {
                       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                         if(_GLF_DEAD(false))
                          barrier();
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           barrier();
                           if(_GLF_DEAD(false))
                            barrier();
                          }
                         else
                          {
                          }
                        }
                       do
                        {
                         barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) || false));
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, false, false)), false || (_GLF_IDENTITY(bool(bvec3(true, false, false)), ! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(true, false, false), bvec3(_GLF_IDENTITY(bvec3(bvec3(true, false, false)), bvec3(bvec3(bvec3(bvec3(true, false, false)))))))), bool(bvec2(bool(bvec3(true, false, false)), true)))))))))))
                      {
                       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                        {
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             barrier();
                            }
                           else
                            {
                            }
                          }
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                          }
                         else
                          {
                          }
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(0.0, 0.0) + (injectionSwitch), vec2(_GLF_IDENTITY(mat4x3(vec2(0.0, 0.0) + (injectionSwitch), determinant(mat3(0.0, 1.0, 0.0, length(vec2(0.0, 0.0)), 0.0, 1.0, length(vec2(0.0, 0.0)), 0.0, 0.0)), 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, determinant(mat4(0.0, 0.0, determinant(mat2(0.0, 1.0, 0.0, 0.0)), length(vec3(0.0, 0.0, 0.0)), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0))), (mat4x3(vec2(0.0, 0.0) + (injectionSwitch), determinant(mat3(0.0, 1.0, 0.0, length(vec2(0.0, 0.0)), 0.0, 1.0, length(vec2(0.0, 0.0)), 0.0, 0.0)), 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, determinant(mat4(0.0, 0.0, determinant(mat2(0.0, 1.0, 0.0, 0.0)), length(vec3(0.0, 0.0, 0.0)), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)))) + mat4x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))[0], min(injectionSwitch[_GLF_IDENTITY(0, _GLF_IDENTITY(0, (0) | (0)) | (0))], injectionSwitch[0])), _GLF_ZERO(0.0, injectionSwitch.x) + (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - tan(vec2(0.0, 0.0)))), vec2(_GLF_IDENTITY(mat4x3(vec2(0.0, 0.0) + (injectionSwitch), determinant(mat3(0.0, 1.0, 0.0, length(vec2(0.0, 0.0)), 0.0, 1.0, length(vec2(0.0, 0.0)), 0.0, 0.0)), 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, determinant(mat4(0.0, 0.0, determinant(mat2(0.0, 1.0, 0.0, 0.0)), length(vec3(0.0, 0.0, 0.0)), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0))), (mat4x3(vec2(0.0, _GLF_IDENTITY(0.0, 0.0 + (0.0))) + (injectionSwitch), determinant(mat3(0.0, 1.0, 0.0, length(vec2(0.0, 0.0)), 0.0, 1.0, length(vec2(0.0, 0.0)), 0.0, 0.0)), 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, determinant(mat4(0.0, 0.0, determinant(mat2(0.0, 1.0, 0.0, 0.0)), length(vec3(0.0, 0.0, 0.0)), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)))) + mat4x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))[0], min(injectionSwitch[_GLF_IDENTITY(0, _GLF_IDENTITY(0, (0) | (0)) | (0))], injectionSwitch[0])))), injectionSwitch[1])).y))))
                          {
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             do
                              {
                               if(_GLF_DEAD(false))
                                {
                                 if(_GLF_WRAPPED_IF_TRUE(true))
                                  {
                                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                                    {
                                     barrier();
                                    }
                                  }
                                 else
                                  {
                                  }
                                }
                               barrier();
                              }
                             while(_GLF_WRAPPED_LOOP(false));
                            }
                           else
                            {
                            }
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             if(_GLF_WRAPPED_IF_TRUE(true))
                              {
                               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                                {
                                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], max(injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1])), (injectionSwitch) + _GLF_IDENTITY(vec2(0.0, 0.0), mix(vec2(_GLF_FUZZED(-0.5), (vec2(0.0, 0.0))[1]), vec2((vec2(0.0, 0.0))[0], _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(-28.40, _GLF_IDENTITY((-28.40), (_GLF_IDENTITY((-28.40), max((-28.40), _GLF_IDENTITY((-28.40), ((-28.40)) / 1.0)))) * 1.0) - 0.0), float(mat2x3(-28.40, 0.0, 0.0, 0.0, 1.0, 0.0))))), bvec2(true, false)))).y))))
                                  {
                                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                    {
                                    }
                                   else
                                    {
                                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
                                      {
                                      }
                                     else
                                      {
                                       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
                                        {
                                         barrier();
                                        }
                                       else
                                        {
                                        }
                                       if(_GLF_WRAPPED_IF_FALSE(false))
                                        {
                                        }
                                       else
                                        {
                                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                          {
                                           do
                                            {
                                             barrier();
                                            }
                                           while(_GLF_WRAPPED_LOOP(false));
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                             else
                              {
                               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                barrier();
                              }
                            }
                          }
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                           barrier();
                          }
                        }
                       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                        barrier();
                      }
                     else
                      {
                      }
                    }
                   else
                    {
                    }
                   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false)))))))
                    barrier();
                  }
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
          }
        }
      }
    }
  }
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != _GLF_IDENTITY((_GLF_IDENTITY(0 << _GLF_IDENTITY(int(3), int(3)), ~ (~ (0 << _GLF_IDENTITY(int(3), int(3)))))), _GLF_IDENTITY(((0 << _GLF_IDENTITY(int(3), int(3)))) / 1, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(((0 << _GLF_IDENTITY(int(3), int(3)))) / 1, (true ? ((0 << _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, _GLF_IDENTITY(int(ivec3(3, (1 ^ 0), 0)), (int(ivec3(3, (1 ^ 0), 0))) / (1 & 1))))))) / 1 : _GLF_FUZZED(_injected_loop_counter)))), 0 | (~ (((0 << _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, (false ? _GLF_FUZZED(-5091) : _GLF_IDENTITY(3, int(ivec2(3, 0))))))))) / 1)))))), bool(bvec3(_injected_loop_counter != _GLF_IDENTITY((_GLF_IDENTITY(0 << _GLF_IDENTITY(int(3), int(3)), ~ (~ (0 << _GLF_IDENTITY(int(3), int(3)))))), _GLF_IDENTITY(((0 << _GLF_IDENTITY(int(3), int(3)))) / 1, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(((0 << _GLF_IDENTITY(int(3), int(3)))) / 1, (true ? ((0 << _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, _GLF_IDENTITY(int(ivec3(3, (1 ^ 0), 0)), (int(ivec3(3, (1 ^ 0), 0))) / (1 & 1))))))) / 1 : _GLF_FUZZED(_injected_loop_counter)))), 0 | (~ (((0 << _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, (false ? _GLF_FUZZED(-5091) : _GLF_IDENTITY(3, int(ivec2(3, 0))))))))) / 1)))))), _GLF_IDENTITY(false, (false) && true), true)))); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         do
          {
           if(_GLF_DEAD(false))
            barrier();
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY(1, max(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) ^ 0), min(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) ^ 0), min(_GLF_IDENTITY(1, (1) ^ 0), _GLF_IDENTITY(1, (1) ^ 0))), _GLF_IDENTITY(_GLF_IDENTITY(1, (1) ^ 0), (_GLF_IDENTITY(1, _GLF_IDENTITY((1) ^ 0, (_GLF_IDENTITY((1) ^ 0, min(_GLF_IDENTITY((1) ^ 0, ~ (~ ((1) ^ 0))), (1) ^ 0))) << (0 | 0)))) / ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))))), 1)) | 1)); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(acosh(-1.1)) : injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-5.0)), bool(false))))) > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
              barrier();
            }
           else
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y)) || (_GLF_DEAD(false))))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), ! (! ((_GLF_IDENTITY(false, false || (false)))))))))))))
                    {
                     do
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         barrier();
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (1 ^ 1)); _injected_loop_counter --)
                      {
                       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))), bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true)))))
                        {
                        }
                       else
                        {
                         if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false))))))
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat3x2(injectionSwitch.y, 1.0, 1.0, exp(0.0), 0.0, 0.0)))))))
                            barrier();
                           barrier();
                          }
                        }
                       barrier();
                      }
                    }
                  }
                }
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
           atomicStore(buf[next_virtual_gid], uint(1), 4, _GLF_IDENTITY(64, ~ _GLF_IDENTITY((~ (64)), ~ (~ ((~ _GLF_IDENTITY((64), ((64)) ^ 0)))))), _GLF_IDENTITY(4, ~ _GLF_IDENTITY((~ (4)), ((~ (4))) - 0)));
           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), clamp(int(3), int(3), int(3)))))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       else
        {
        }
       do
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | int(_GLF_ZERO(0.0, injectionSwitch.x)))); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)) : _GLF_FUZZED(ldexp(vec2(-25.13, 3.5), ivec2(72102, 41209))))).y))))
              barrier();
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) / 1); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter)) < 1); _injected_loop_counter ++)
        {
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false, false))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(mat2x3(injectionSwitch.y, exp(0.0), 1.0, 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0)), dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0))), 0.0)))) - 0.0))))))), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false, false)), ! (! (bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false, false))))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false, false)), ! (! (bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false, false))))), false || (_GLF_IDENTITY(bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false, false)), ! (! (bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false, false))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
                {
                 do
                  {
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), true && (injectionSwitch.x > injectionSwitch.y)))), false || (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), true && (injectionSwitch.x > injectionSwitch.y))))))));
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / exp(vec2(0.0, 0.0))).x > injectionSwitch.y))))) || false), true && (_GLF_IDENTITY(_GLF_IDENTITY(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(_GLF_IDENTITY(bvec2(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true), bvec2(bvec3(bvec2(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true), true))))), (_GLF_IDENTITY(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(_GLF_IDENTITY(bvec2(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true), bvec2(bvec3(bvec2(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true), true)))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false, false, true))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / exp(vec2(0.0, 0.0))).x > injectionSwitch.y))))) || false), true && (_GLF_IDENTITY(_GLF_IDENTITY(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(_GLF_IDENTITY(bvec2(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true), bvec2(bvec3(bvec2(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true), true))))), (_GLF_IDENTITY(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(_GLF_IDENTITY(bvec2(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true), bvec2(bvec3(bvec2(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true), true)))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false, false, true)))), bool(bvec4(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / exp(vec2(0.0, 0.0))).x > injectionSwitch.y))))) || false), true && (_GLF_IDENTITY(_GLF_IDENTITY(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(_GLF_IDENTITY(bvec2(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true), bvec2(bvec3(bvec2(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true), true))))), (_GLF_IDENTITY(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(_GLF_IDENTITY(bvec2(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true), bvec2(bvec3(bvec2(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true), true)))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false, false, true)))), false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))));
        }
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false)))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (_GLF_IDENTITY(false, (false) || false))), ! (! (_GLF_IDENTITY(! (! (false)), bool(_GLF_IDENTITY(bvec2(! (! (_GLF_IDENTITY(false, ! (! (false))))), true), bvec2(bvec2(bvec2(! (! (false)), true))))))))))));
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))), injectionSwitch)).y), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))), injectionSwitch)).y)) && true)) ? _GLF_FUZZED(_GLF_IDENTITY(-4.5, (-4.5) - 0.0)) : injectionSwitch.x)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-4.5) : injectionSwitch.x)), float(mat4x2(_GLF_IDENTITY(injectionSwitch.x, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-4.5) : injectionSwitch.x)), 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0)))) * 1.0) > injectionSwitch.y))));
 do
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), min((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0))))))))) - vec2(0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED((-9263.5143))), float(0.0), bool(true))))))), vec2(1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0)) * (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec4(injectionSwitch, determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, sqrt(0.0), 0.0, 1.0, 0.0)), sin(0.0)), mat4(1.0) * (vec4(injectionSwitch, determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, sqrt(0.0), 0.0, 1.0, 0.0)), sin(0.0)))))), max(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec4(injectionSwitch, determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, sqrt(0.0), 0.0, 1.0, 0.0)), sin(0.0)), mat4(1.0) * (vec4(injectionSwitch, determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, sqrt(0.0), 0.0, 1.0, 0.0)), sin(0.0)))))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec4(injectionSwitch, determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, sqrt(0.0), 0.0, 1.0, 0.0)), sin(0.0)), mat4(1.0) * (vec4(injectionSwitch, determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, sqrt(0.0), 0.0, 1.0, 0.0)), sin(0.0)))))), vec2(_GLF_IDENTITY(mat3x4(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec4(injectionSwitch, determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, sqrt(0.0), 0.0, 1.0, 0.0)), sin(0.0)), mat4(1.0) * (vec4(injectionSwitch, determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, sqrt(0.0), 0.0, 1.0, 0.0)), sin(0.0)))))), 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, sqrt(0.0)), (mat3x4(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec4(injectionSwitch, determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, sqrt(0.0), 0.0, 1.0, 0.0)), sin(0.0)), mat4(1.0) * (vec4(injectionSwitch, determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, sqrt(0.0), 0.0, 1.0, 0.0)), sin(0.0)))))), 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, sqrt(0.0))) * mat3(1.0)))))), (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(min(injectionSwitch, injectionSwitch), max(_GLF_IDENTITY(min(injectionSwitch, injectionSwitch), (min(injectionSwitch, injectionSwitch)) * mat2(1.0)), min(injectionSwitch, injectionSwitch))))))) - vec2(0.0, 0.0)))).x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), true && (! ((injectionSwitch.x > injectionSwitch.y)))))))))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), int(ivec3(int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bvec3(! (_GLF_DEAD(false)), false, true))))))
              barrier();
            }
          }
         else
          {
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 0.0, 0.0, determinant(mat4(0.0, 0.0, exp(0.0), 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)), tan(0.0), 1.0, 0.0))).y), false || ((injectionSwitch.x > injectionSwitch.y))))), true && (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x, float(_GLF_IDENTITY(vec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x)), 1.0, cos(0.0)), (vec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x)), 1.0, cos(0.0))) * mat3(1.0)))) > injectionSwitch.y)))), true && (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y)))), bool(bool(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y)))))))))))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
             for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), _GLF_IDENTITY(~ (~ (int(6))), (~ (~ (int(6)))) - 0)))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_injected_loop_counter --, ~ (~ (_injected_loop_counter --))))
              {
               if(_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(-78755))) < subgroup_size, _GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(true, (true) || false) ? 1 : _GLF_FUZZED(-78755))) < subgroup_size) && true, ! (! (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(true, (true) || false) ? 1 : _GLF_FUZZED(-78755))) < subgroup_size) && true, false || (_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(true, (true) || false) ? 1 : _GLF_FUZZED(-78755))) < subgroup_size) && true, false || ((subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(true, (true) || false) ? 1 : _GLF_FUZZED(-78755))) < subgroup_size) && true)))), ! (! ((subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, true, true)), true && (bool(bvec3(true, true, true))))), (true) || false) ? 1 : _GLF_FUZZED(-78755))) < subgroup_size) && true))))))))
                {
                 atomicStore(checker[virtual_gid], read, 4, _GLF_IDENTITY(64, (64) | _GLF_IDENTITY(0, max(0, 0))), 4);
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y))) || false)))
                  barrier();
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   subgroupAll(false);
                  }
                 else
                  {
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                 atomicStore(buf[virtual_gid], read, 4, 64, 4);
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   subgroupAll(true);
                  }
                }
              }
            }
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(float(83260u)), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(1.6)), bvec2(true, false))).x > injectionSwitch.y))))
              {
              }
             else
              {
               barrier();
              }
            }
          }
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false))), (injectionSwitch.x > injectionSwitch.y))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))
                barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))
          barrier();
        }
       else
        {
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 while(_GLF_WRAPPED_LOOP(false));
}
