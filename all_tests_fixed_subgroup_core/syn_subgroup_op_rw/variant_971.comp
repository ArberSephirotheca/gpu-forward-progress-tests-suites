#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = (_GLF_IDENTITY(0, (0) << 0) >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (true ? int(1) : _GLF_FUZZED(86948))), (0 | 0) | (_GLF_IDENTITY(int(1), (true ? int(1) : _GLF_FUZZED(86948))))), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((_GLF_IDENTITY(1 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(int(4), int(4)))), int(int(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(int(4), int(4))))))), clamp(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, ~ (~ (4))))))), min(_GLF_IDENTITY(1 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, (false ? _GLF_FUZZED(atomicExchange(_injected_loop_counter, _injected_loop_counter)) : 4)))), _GLF_IDENTITY((false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(int(4), int(4))), (_GLF_IDENTITY((false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(int(4), int(4))), (true ? (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(int(4), int(4))) : _GLF_FUZZED((~ 38626))))) | ((false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(int(4), int(4)))))), clamp(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), max(int(4), int(4)))))), _GLF_IDENTITY(int(ivec3(1 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, min(_GLF_IDENTITY(4, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(4, 1 * (4))), (~ (_GLF_IDENTITY(4, 1 * (4)))) | 0))), 4)))), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(int(4), int(4)))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, min(_GLF_IDENTITY(4, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(4, 1 * (4))), (~ (_GLF_IDENTITY(4, 1 * (4)))) | 0))), 4)))), (_GLF_IDENTITY(false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(int(4), int(4)), min(false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(int(4), int(4)), false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(int(4), int(4)))))), _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, min(_GLF_IDENTITY(4, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(4, 1 * (4))), (~ (_GLF_IDENTITY(4, 1 * (4)))) | 0))), 4)))), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(int(4), int(4)))), _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, min(_GLF_IDENTITY(4, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(4, 1 * (4))), (~ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(4, 1 * (4)), ~ (~ (_GLF_IDENTITY(4, 1 * (4)))))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(4, 1 * (4)), ~ (~ (_GLF_IDENTITY(4, 1 * (4)))))), ((_GLF_IDENTITY(_GLF_IDENTITY(4, 1 * (4)), ~ (~ (_GLF_IDENTITY(4, 1 * (4))))))) ^ 0)) | ((_GLF_IDENTITY(_GLF_IDENTITY(4, 1 * (4)), ~ (~ (_GLF_IDENTITY(4, 1 * (4))))))))) | 0))), 4)))), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(int(4), int(4)))))), clamp(_GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, (4) << 0))), _GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(int(4), int(4)))), 1, (0 | 0))), int(ivec3(int(ivec3(1 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), max(int(4), int(4)))) - 0)), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (_GLF_IDENTITY(int(4), int(4))) * 1))), clamp(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(int(4), int(4)))), 1, (0 | 0))), 1, 1)))), _GLF_IDENTITY(1 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) | 0), int(4)), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(int(_GLF_IDENTITY(4, (_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(3), int(3)), (0 >> _GLF_IDENTITY(int(3), int(3))) / 1)) | (4))), int(4)))), clamp(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(int(4), int(4)))), (1 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(int(_GLF_IDENTITY(4, (4) / (0 ^ 1))), int(4)))), clamp(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(int(_GLF_IDENTITY(4, 1 * (4))), int(4)), _GLF_IDENTITY(int(4), int(4))))) ^ 0)))) >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], clamp((injectionSwitch)[0], (injectionSwitch)[0], (injectionSwitch)[0])), _GLF_IDENTITY(_GLF_FUZZED(4.9), 0.0 + _GLF_IDENTITY((_GLF_FUZZED(_GLF_IDENTITY(4.9, float(vec3(4.9, 0.0, 1.0))))), 0.0 + ((_GLF_FUZZED(4.9)))))), vec2(_GLF_FUZZED(5.8), (injectionSwitch)[1]), bvec2(false, true))).x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        barrier();
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter ++)
        {
         barrier();
        }
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, exp(0.0) * (injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     do
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec4(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec2(false, true)))), true, true, false))));
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 1)); _injected_loop_counter --)
        {
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat3(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), 0.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0))), 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, abs(1.0))), 0.0, 1.0, 0.0, 1.0, 1.0))).x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 0.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0))), 0.0, 0.0, _GLF_IDENTITY(1.0, 0.0 + (1.0)), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, abs(1.0))), 0.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0, 1.0, 1.0))).x > injectionSwitch.y)), false)), bool(bvec4(_GLF_IDENTITY(bool(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 0.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0))), 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, abs(1.0))), 0.0, 1.0, 0.0, 1.0, 1.0))).x > injectionSwitch.y)), false)), ! (! (bool(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 0.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-3.5) : _GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)) : _GLF_FUZZED(4657.1446)))))), vec4(1.0, 0.0, 0.0, 0.0))), 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, abs(1.0))), 0.0, 1.0, 0.0, 1.0, 1.0))).x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(96.85)), vec2(_GLF_FUZZED((- -0.4)), (injectionSwitch)[1]), bvec2(false, true))).y)), false))))), false, true, true)))), false), bvec2(_GLF_IDENTITY(bvec2(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), _GLF_IDENTITY(bvec2(bvec3(bvec2(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), log(vec2(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(vec2(3062.6540, -8646.2194).y)), float(1.0), bool(true))))) + (mat2(1.0) * (injectionSwitch)))).x > injectionSwitch.y)), false)), true)), _GLF_IDENTITY(bvec2(bvec4(bvec2(bvec3(bvec2(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), log(vec2(1.0, 1.0)) + (mat2(1.0) * (injectionSwitch)))).x > injectionSwitch.y)), false)), true)), false, true)), bvec2(bvec4(bvec2(bvec4(bvec2(bvec3(bvec2(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0), transpose(_GLF_IDENTITY(transpose(mat2(1.0)), (_GLF_IDENTITY(transpose(mat2(1.0)), mat2(1.0) * (transpose(mat2(1.0))))) * mat2(1.0)))) * (injectionSwitch), log(vec2(1.0, 1.0)) + (mat2(1.0) * (injectionSwitch)))).x > injectionSwitch.y)), false)), true)), false, true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-609.139) : _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))) < injectionSwitch.y)))))))))))))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   do
    {
     do
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bool(! (_GLF_DEAD(false))))))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y))), bool(bvec2(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y))), false))));
   if(_GLF_DEAD(false))
    barrier();
  }
 uint subgroup_id = gl_SubgroupID;
uint subgroup_size = 16;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false))))
          barrier();
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) > injectionSwitch.y))))
              barrier();
            }
           else
            {
            }
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), ! (! (! (! (false))))))))
          barrier();
         barrier();
        }
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
           barrier();
          }
        }
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
      barrier();
     barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = _GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (1) | 0), _GLF_IDENTITY(1, 0 + (1)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (-16993 & 0)); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
        {
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))) - vec2(0.0, 0.0)).y, mix(float(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))) - vec2(0.0, 0.0)).y), float(_GLF_FUZZED((6084.9648 - -3.7))), bool(false)))))))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, ! _GLF_IDENTITY((! (_injected_loop_counter != 0)), ! (! ((! (_injected_loop_counter != 0))))))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            barrier();
           for(int _injected_loop_counter = _GLF_IDENTITY(1, 0 ^ (1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(false || (injectionSwitch.x > injectionSwitch.y), bool(bool(false || (injectionSwitch.x > injectionSwitch.y))))), true)))))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
            barrier();
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false)))))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               do
                {
                 barrier();
                }
               while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec3(_GLF_WRAPPED_LOOP(false), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))));
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
            }
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < injectionSwitch.y))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true)))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true)))))
          barrier();
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
          barrier();
        }
       else
        {
        }
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         do
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y))));
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))
        barrier();
      }
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y))))
  {
  }
 else
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(64.95), _GLF_FUZZED(8766.6122)), vec2(_GLF_IDENTITY((injectionSwitch)[0], (false ? _GLF_FUZZED(91.45) : _GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (injectionSwitch)[0])))), (injectionSwitch)[1]), bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))).y)) && (_GLF_DEAD(false))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), bool(bvec4(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), min(_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (false ? _GLF_FUZZED(-43775) : _GLF_IDENTITY(int(0), int(0)))), _GLF_IDENTITY(int(0), int(0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bool(false)))))
    {
    }
   else
    {
     for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = (_GLF_IDENTITY((_GLF_IDENTITY(1, (1) ^ 0) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY((_GLF_IDENTITY(1, (1) ^ 0) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)), min((_GLF_IDENTITY(1, (1) ^ 0) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(1, (1) ^ 0) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) >> 0)))) | ((_GLF_IDENTITY(1, (1) ^ 0) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((_GLF_IDENTITY((0 << _GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, (0) | 0)))) << _GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), 1 * (int(0))), int(0))) << _GLF_IDENTITY(int(3), int(3)), ((0 << _GLF_IDENTITY(int(0), int(0))) << _GLF_IDENTITY(int(3), int(3))) | 0)) | ((0 << _GLF_IDENTITY(int(0), int(0))) << _GLF_IDENTITY(int(3), int(3))))), 0 ^ (_GLF_IDENTITY((_GLF_IDENTITY((0 << _GLF_IDENTITY(int(0), int(0))) << _GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), 1 * (int(0))), int(0))) << _GLF_IDENTITY(int(3), int(3)), ((0 << _GLF_IDENTITY(int(0), int(0))) << _GLF_IDENTITY(int(3), int(3))) | 0)) | ((0 << _GLF_IDENTITY(int(0), int(0))) << _GLF_IDENTITY(int(3), int(3))))), ((_GLF_IDENTITY((0 << _GLF_IDENTITY(int(0), int(0))) << _GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY(_GLF_IDENTITY((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), 1 * (int(0))), int(0))) << _GLF_IDENTITY(int(3), int(3)), 0 ^ ((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), 1 * (int(0))), int(0))) << _GLF_IDENTITY(int(3), int(3)))), ((0 << _GLF_IDENTITY(int(0), int(0))) << _GLF_IDENTITY(int(3), int(3))) | 0)) | ((0 << _GLF_IDENTITY(int(0), int(0))) << _GLF_IDENTITY(int(3), int(3)))))) | 0)))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, true))))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                }
               if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)) && true))))
                barrier();
               barrier();
              }
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
              }
             else
              {
              }
             do
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
                  barrier();
                }
               do
                {
                 if(_GLF_DEAD(false))
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _GLF_IDENTITY(_injected_loop_counter ++, (true ? _injected_loop_counter ++ : _GLF_FUZZED(33896))))
                    {
                     barrier();
                    }
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false))))) || false));
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ 0); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))), bool(bvec4(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))), false, true, true)))); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) * 1))
              {
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 1)); _injected_loop_counter --)
          {
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-5.7) : _GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, float(mat3(injectionSwitch.x, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0))), _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))))) > injectionSwitch.y))))
      {
      }
     else
      {
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))
        barrier();
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         barrier();
        }
       if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), false, true, true)), false || (bool(bvec4(_GLF_DEAD(false), false, true, true))))), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), false, true, true)), false || (bool(bvec4(_GLF_DEAD(false), false, true, true))))), (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), false, true, true)), false || (bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), false, true, true)))))) || false), true))))
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true)))))
          {
           barrier();
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         barrier();
        }
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize, (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, ~ (~ (gl_WorkGroupSize))), min(gl_WorkGroupSize, gl_WorkGroupSize))) * uvec3(1u, 1u, _GLF_IDENTITY(1u, ~ (_GLF_IDENTITY(~ (1u), _GLF_IDENTITY(min(~ (1u), ~ (1u)), min(min(~ (1u), ~ (1u)), _GLF_IDENTITY(min(~ (1u), ~ (1u)), min(_GLF_IDENTITY(min(~ (1u), ~ (1u)), uint(uvec4(min(~ (1u), ~ (1u)), 0u, 1u, 1u))), _GLF_IDENTITY(min(~ (_GLF_IDENTITY(1u, max(1u, _GLF_IDENTITY(1u, (1u) | 0u)))), ~ (1u)), 0u | (min(~ (1u), ~ (1u))))))))))))).x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(53.87))) > injectionSwitch.y)))), true))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)), bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y))), true, true))), false)))))))
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               barrier();
              }
             while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false)))));
            }
           barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))))
          barrier();
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bvec3(! (true), true, true)))))) && true), (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, 1.0 * (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - abs(vec2(0.0, 0.0))).y, injectionSwitch.y))))))))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             do
              {
               do
                {
                 do
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), clamp(vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))))), clamp(_GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), clamp(vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))))), _GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), clamp(vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))))), _GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), clamp(vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))))))), mix(vec2(_GLF_FUZZED(-1.7), _GLF_FUZZED((-717.346 * 5552.1214))), vec2((_GLF_IDENTITY(_GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), clamp(vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))))), clamp(_GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), clamp(vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))))), _GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), clamp(vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))))), _GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), clamp(vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))))))))[0], (_GLF_IDENTITY(_GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), clamp(vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))))), clamp(_GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), clamp(vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))))), _GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), clamp(vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))))), _GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), clamp(vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))))))))[1]), bvec2(true, true))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), clamp(vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-502.311)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(float(0.0)), max(float(float(0.0)), float(float(0.0))))))), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))))), clamp(_GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), _GLF_IDENTITY(clamp(vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0)))), _GLF_IDENTITY(vec2(mat4(clamp(vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0)))), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 0.0, sqrt(0.0), abs(0.0), 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 1.0, 0.0, 0.0)), (vec2(mat4(clamp(vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0)))), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 0.0, sqrt(0.0), abs(0.0), 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 1.0, 0.0, 0.0))) * mat2(1.0)))), _GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(2.9)), bool(false))), 1.0, 1.0, 0.0, log(1.0))), clamp(vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), _GLF_IDENTITY(sqrt(1.0), min(sqrt(1.0), sqrt(1.0))), 1.0, 1.0, 1.0, 0.0, log(1.0))), vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), _GLF_IDENTITY(length(vec4(0.0, 0.0, 0.0, 0.0)), (length(vec4(0.0, 0.0, 0.0, 0.0))) - 0.0), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), _GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, 1.0, 0.0, log(1.0))))), _GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 0.0, 0.0, _GLF_IDENTITY(abs(0.0), _GLF_IDENTITY(float(mat3(abs(0.0), 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0)), max(float(mat3(abs(0.0), 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0)), float(mat3(abs(0.0), 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0))))), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-57.24) : _GLF_IDENTITY(1.0, max(1.0, 1.0)))), 1.0))), 1.0, 1.0, 1.0, 0.0, log(1.0))), clamp(vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))))))), (_GLF_IDENTITY(_GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), clamp(vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))))), clamp(_GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), clamp(vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-4764.9548)), float(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))), bool(true))), 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))))), _GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 0.0, _GLF_IDENTITY(0.0, float(mat2x3(0.0, 0.0, 0.0, 1.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))))), abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), clamp(vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), _GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), max(vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))))))), _GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, _GLF_IDENTITY(1.0, 0.0 + (1.0)), 0.0, log(1.0))), clamp(vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(_GLF_IDENTITY(0.0, (0.0) / _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))))), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, 0.0, log(1.0))), vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) * 1.0))), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0)))))))) * mat2(1.0)), _GLF_IDENTITY(_GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, min(0.0, 0.0)), _GLF_IDENTITY(0.0, (0.0) / sqrt(1.0)), _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-3.5) : 0.0)))), 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), clamp(vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, _GLF_IDENTITY(1.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(dot(vec3(80.04, 899.270, -3.6), vec3(-11.15, 5.8, 65.79))))), 0.0, log(1.0))), vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))))), clamp(_GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), clamp(vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(_GLF_IDENTITY(0.0, (0.0) - _GLF_ZERO(0.0, injectionSwitch.x))), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), _GLF_IDENTITY(1.0, (1.0) + 0.0), 1.0, 1.0, 0.0, log(1.0))))), _GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 0.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, (0.0) * 1.0))), abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), clamp(vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))))), _GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 0.0, 0.0, _GLF_IDENTITY(abs(0.0), (true ? _GLF_IDENTITY(abs(0.0), (false ? _GLF_FUZZED(-2991.8974) : abs(0.0))) : _GLF_FUZZED(6.2))), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), clamp(vec2(mat4x3(injectionSwitch, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(_GLF_IDENTITY(vec4(0.0, 0.0, 0.0, 0.0), clamp(vec4(0.0, 0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), _GLF_IDENTITY(vec4(0.0, 0.0, 0.0, 0.0), clamp(vec4(0.0, 0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0)))))), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))))))), _GLF_IDENTITY(_GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), clamp(vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, _GLF_IDENTITY(0.0, float(vec2(0.0, tan(0.0)))), 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))))), clamp(_GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), clamp(vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))))), _GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), clamp(vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), _GLF_IDENTITY(sqrt(1.0), min(_GLF_IDENTITY(sqrt(1.0), clamp(sqrt(1.0), sqrt(1.0), sqrt(1.0))), sqrt(1.0))), 1.0, 1.0, 1.0, 0.0, log(1.0))), vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))))), _GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), clamp(vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(8.0)), float(_GLF_IDENTITY(0.0, float(mat2(0.0, 1.0, 1.0, 1.0)))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), log(1.0))), vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0)))))))))).y, mix(float(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), clamp(vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))))), clamp(_GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), clamp(vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))))), _GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), clamp(vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))))), _GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), clamp(vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))))))), mix(vec2(_GLF_FUZZED(-1.7), _GLF_FUZZED((-717.346 * 5552.1214))), vec2((_GLF_IDENTITY(_GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), clamp(vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))))), clamp(_GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), clamp(vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))))), _GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), clamp(vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))))), _GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), clamp(vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))))))))[0], (_GLF_IDENTITY(_GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), clamp(vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))))), clamp(_GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), clamp(vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))))), _GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), clamp(vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))))), _GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), clamp(vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))))))))[1]), bvec2(true, true))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), clamp(vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-502.311)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(float(0.0)), max(float(float(0.0)), float(float(0.0))))))), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))))), clamp(_GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), _GLF_IDENTITY(clamp(vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0)))), _GLF_IDENTITY(vec2(mat4(clamp(vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0)))), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 0.0, sqrt(0.0), abs(0.0), 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 1.0, 0.0, 0.0)), (vec2(mat4(clamp(vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0)))), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 0.0, sqrt(0.0), abs(0.0), 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 1.0, 0.0, 0.0))) * mat2(1.0)))), _GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(2.9)), bool(false))), 1.0, 1.0, 0.0, log(1.0))), clamp(vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), _GLF_IDENTITY(sqrt(1.0), min(sqrt(1.0), sqrt(1.0))), 1.0, 1.0, 1.0, 0.0, log(1.0))), vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), _GLF_IDENTITY(length(vec4(0.0, 0.0, 0.0, 0.0)), (length(vec4(0.0, 0.0, 0.0, 0.0))) - 0.0), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), _GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, 1.0, 0.0, log(1.0))))), _GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 0.0, 0.0, _GLF_IDENTITY(abs(0.0), _GLF_IDENTITY(float(mat3(abs(0.0), 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0)), max(float(mat3(abs(0.0), 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0)), float(mat3(abs(0.0), 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0))))), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-57.24) : _GLF_IDENTITY(1.0, max(1.0, 1.0)))), 1.0))), 1.0, 1.0, 1.0, 0.0, log(1.0))), clamp(vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))))))), (_GLF_IDENTITY(_GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), clamp(vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))))), clamp(_GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), clamp(vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-4764.9548)), float(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))), bool(true))), 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))))), _GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 0.0, _GLF_IDENTITY(0.0, float(mat2x3(0.0, 0.0, 0.0, 1.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))))), abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), clamp(vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), _GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), max(vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))))))), _GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, _GLF_IDENTITY(1.0, 0.0 + (1.0)), 0.0, log(1.0))), clamp(vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(_GLF_IDENTITY(0.0, (0.0) / _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))))), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, 0.0, log(1.0))), vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) * 1.0))), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0)))))))) * mat2(1.0)), _GLF_IDENTITY(_GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, min(0.0, 0.0)), _GLF_IDENTITY(0.0, (0.0) / sqrt(1.0)), _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-3.5) : 0.0)))), 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), clamp(vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, _GLF_IDENTITY(1.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(dot(vec3(80.04, 899.270, -3.6), vec3(-11.15, 5.8, 65.79))))), 0.0, log(1.0))), vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))))), clamp(_GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), clamp(vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(_GLF_IDENTITY(0.0, (0.0) - _GLF_ZERO(0.0, injectionSwitch.x))), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), _GLF_IDENTITY(1.0, (1.0) + 0.0), 1.0, 1.0, 0.0, log(1.0))))), _GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 0.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, (0.0) * 1.0))), abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), clamp(vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))))), _GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 0.0, 0.0, _GLF_IDENTITY(abs(0.0), (true ? _GLF_IDENTITY(abs(0.0), (false ? _GLF_FUZZED(-2991.8974) : abs(0.0))) : _GLF_FUZZED(6.2))), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), clamp(vec2(mat4x3(injectionSwitch, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(_GLF_IDENTITY(vec4(0.0, 0.0, 0.0, 0.0), clamp(vec4(0.0, 0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), _GLF_IDENTITY(vec4(0.0, 0.0, 0.0, 0.0), clamp(vec4(0.0, 0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0)))))), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))))))), _GLF_IDENTITY(_GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), clamp(vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, _GLF_IDENTITY(0.0, float(vec2(0.0, tan(0.0)))), 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))))), clamp(_GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), clamp(vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))))), _GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), clamp(vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), _GLF_IDENTITY(sqrt(1.0), min(_GLF_IDENTITY(sqrt(1.0), clamp(sqrt(1.0), sqrt(1.0), sqrt(1.0))), sqrt(1.0))), 1.0, 1.0, 1.0, 0.0, log(1.0))), vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))))), _GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), clamp(vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(8.0)), float(_GLF_IDENTITY(0.0, float(mat2(0.0, 1.0, 1.0, 1.0)))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), log(1.0))), vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0))), vec2(mat4x3(injectionSwitch, 0.0, 0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, log(1.0)))))))))).y), float(_GLF_FUZZED(5.1)), bool(false)))))))
                      {
                       barrier();
                       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(true, ! (! (true))))))))))))) || false)))
                        barrier();
                      }
                     else
                      {
                       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
                        barrier();
                      }
                    }
                   barrier();
                   if(_GLF_DEAD(false))
                    {
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                      {
                       barrier();
                      }
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x < injectionSwitch.y))))
                    {
                     do
                      {
                       barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, false || (false)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                      barrier();
                    }
                   else
                    {
                    }
                  }
                }
               while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))), _GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))), false, true)), ! (_GLF_IDENTITY(! (bool(bvec3(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))), false, true))), ! (! (! (bool(bvec3(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), ! (! (_GLF_IDENTITY(false, true && (false)))))) && true)), false, true))))))))));
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
              }
             if(_GLF_DEAD(false))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
            }
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
              {
               do
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                  {
                   barrier();
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch, injectionSwitch)).y))))), bool(bool(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))));
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                barrier();
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)) > int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), mix(float(_GLF_FUZZED(27.50)), float(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), mix(float(_GLF_FUZZED(_GLF_IDENTITY(4.9, mix(float(4.9), float(_GLF_FUZZED(((561.112 + 58.42)))), bool(false))))), float(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), sin(0.0) + (_GLF_ZERO(0.0, injectionSwitch.x)))), bool(true)))), _GLF_IDENTITY(bool(true), false || (bool(true))))))); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
            }
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_IDENTITY(1.0, (1.0) - 0.0))))).y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, true, true)))))))
          {
           do
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), true && (_GLF_WRAPPED_IF_FALSE(false))))
                {
                }
               else
                {
                 barrier();
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))), true)))))
                  barrier();
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, _GLF_IDENTITY(true, false || (true)) && (_GLF_IDENTITY(false, (false) && true)))))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = _GLF_IDENTITY(((0 << _GLF_IDENTITY(int(8), int(8))) << _GLF_IDENTITY(int(7), int(7))), ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(((0 << _GLF_IDENTITY(int(8), int(8))) << _GLF_IDENTITY(int(7), int(7))), min(((0 << _GLF_IDENTITY(int(8), int(8))) << _GLF_IDENTITY(int(7), int(7))), _GLF_IDENTITY(((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(8), int(8)), 0 ^ (_GLF_IDENTITY(int(8), int(8))))) << _GLF_IDENTITY(int(7), int(7))), int(ivec4(((0 << _GLF_IDENTITY(int(8), int(8))) << _GLF_IDENTITY(int(7), int(7))), 1, 1, 0)))))), ((_GLF_IDENTITY(((0 << _GLF_IDENTITY(int(8), int(8))) << _GLF_IDENTITY(int(7), int(7))), min(((0 << _GLF_IDENTITY(int(8), int(8))) << _GLF_IDENTITY(int(7), int(7))), _GLF_IDENTITY(((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(8), int(8)), 0 ^ (_GLF_IDENTITY(int(8), int(8))))) << _GLF_IDENTITY(int(7), int(7))), int(ivec4(((0 << _GLF_IDENTITY(int(8), int(8))) << _GLF_IDENTITY(int(7), int(7))), 1, 1, 0))))))) >> 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) - 0)))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 0.0, 0.0, 0.0, 1.0))).x > injectionSwitch.y))))
      barrier();
    }
  }
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, _GLF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, false, true)), ! (! (bool(bvec3(true, false, true)))))), (injectionSwitch.x < injectionSwitch.y))), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), false))), false))))))))) && true, false || ((_GLF_DEAD(false)) && _GLF_IDENTITY(true, (true) && true)))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(false), true)), bool(bvec2(bool(bvec2(_GLF_DEAD(false), true)), false)))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec4(_GLF_WRAPPED_IF_TRUE(true), true, true, true))), false, false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec4(_GLF_WRAPPED_IF_TRUE(true), true, true, true))), false, false)))), (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec4(_GLF_WRAPPED_IF_TRUE(true), true, true, _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! (! (true))))))))), false, false))))) || false))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)), (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)), bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))))) || false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | 0) != (0 << _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter --)
                  {
                   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false))))
                    {
                     do
                      {
                       barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         barrier();
                        }
                      }
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(abs(-5323.8019)))) > injectionSwitch.y))))))
                barrier();
              }
            }
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               do
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             else
              {
              }
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true), true, false)))))))
                barrier();
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), (_GLF_IDENTITY((false), _GLF_IDENTITY(((_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec4(false, false, true, true)))))))), bool(bvec4(((_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec4(false, false, true, true)))))))), false, true, false))) || false)) || false) && _GLF_IDENTITY(true, true && (true)))))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bool(! (true)))))) && (false)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(false, true && (false))) && true))))))
                    barrier();
                   barrier();
                  }
                }
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), 0.0, 1.0, sin(0.0), 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0))) > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)))))));
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
              }
            }
           do
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (! (true)))))))))
          {
           barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)), (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true))) && (false)), (injectionSwitch.x > injectionSwitch.y))) && true)))
            barrier();
          }
         else
          {
          }
        }
       else
        {
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)) || false, (((injectionSwitch.x > injectionSwitch.y)) || false) && true))) && true))));
 uint workgroup_id = _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, (_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) / uvec3(1u, 1u, 1u))) - uvec3(0u, 0u, 0u)), _GLF_IDENTITY((gl_WorkGroupID) ^ uvec3(0u, 0u, 0u), ~ (_GLF_IDENTITY(~ ((gl_WorkGroupID) ^ uvec3(0u, 0u, 0u)), uvec3(_GLF_IDENTITY(uvec3(~ ((gl_WorkGroupID) ^ uvec3(0u, 0u, 0u))), uvec3(0u, 0u, 0u) ^ (uvec3(~ ((gl_WorkGroupID) ^ uvec3(0u, 0u, 0u)))))))))).x;
 for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, _GLF_IDENTITY((1), ~ (~ ((1)))) | (1))) | _GLF_IDENTITY(0, int(_GLF_IDENTITY(ivec2(0, 0), (ivec2(0, 0)) | (ivec2(0, 0)))))), (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | (1))) | 0)) << int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))), true)), (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))), ((injectionSwitch.x > injectionSwitch.y)) || false))), true)), false || (bool(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))), true))))) || false)))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bool(! (injectionSwitch.x > injectionSwitch.y))))))), ((injectionSwitch.x > injectionSwitch.y)) || false))), true)), (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))), true)), false || (bool(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))), true)))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))), true)), false || (bool(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))), true)))), false, _GLF_IDENTITY(false, bool(bvec2(false, false))), false)), true && (bool(bvec4(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))), true)), false || (bool(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))), true)))), false, _GLF_IDENTITY(false, bool(bvec2(false, false))), false)))))) || false))))), bool(bvec4(_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))), true)), (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))), true)), false || (bool(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))), true))))) || false))))), (! (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-65.89)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), injectionSwitch.x)) > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))), _GLF_IDENTITY(true, (_GLF_IDENTITY(true, true && (true))) || false))), (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))), true)), false || (bool(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))), true))))) || false)))))) && true), false, false, true))))))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_IDENTITY(_injected_loop_counter ++, _GLF_IDENTITY((_injected_loop_counter ++), 1 * (_GLF_IDENTITY((_injected_loop_counter ++), ((_injected_loop_counter ++)) | 0))) << _GLF_IDENTITY(0, 0 ^ (0))))
          {
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true))))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY((55287 & _GLF_IDENTITY(0, 0 ^ (0))), ~ (~ _GLF_IDENTITY(((55287 & 0)), (((55287 & 0))) + 0)))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))))
          barrier();
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = ((0 | 0) << _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
  {
   do
    {
     barrier();
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false)))));
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 1.0, 1.0, determinant(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0)), 1.0, determinant(mat3(1.0, 0.0, 0.0, 1.0, 1.0, sin(0.0), 0.0, exp(0.0), 1.0)), determinant(mat2(1.0, 0.0, 0.0, 1.0)), 0.0, 0.0, 0.0, sqrt(1.0))), (vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 1.0, 1.0, determinant(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0)), 1.0, determinant(mat3(1.0, 0.0, 0.0, 1.0, 1.0, sin(0.0), 0.0, exp(0.0), 1.0)), determinant(mat2(_GLF_IDENTITY(1.0, float(mat3(1.0, 0.0, 1.0, 0.0, round(length(normalize(1.0))), 0.0, 1.0, 1.0, 0.0))), 0.0, 0.0, 1.0)), 0.0, 0.0, 0.0, sqrt(1.0)))) * vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)))).x > injectionSwitch.y))))
  barrier();
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, max(subgroup_id * subgroup_size, subgroup_id * subgroup_size)), uint(uint(_GLF_IDENTITY(subgroup_id * subgroup_size, max(subgroup_id * subgroup_size, subgroup_id * subgroup_size))))) + subgroup_local_id, uint(uvec3(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, max(subgroup_id * subgroup_size, subgroup_id * subgroup_size)) + subgroup_local_id, 1u, 1u)));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + subgroup_id * subgroup_size) - 0u) + _GLF_IDENTITY(((subgroup_local_id + _GLF_IDENTITY(1, ~ (~ (1)))) % subgroup_size), (((subgroup_local_id + _GLF_IDENTITY(1, ~ (~ (1)))) % subgroup_size)) | (((subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), _GLF_IDENTITY(clamp(_GLF_IDENTITY(~ (1), (~ (1)) | (~ (1))), ~ (1), ~ (1)), (true ? clamp(_GLF_IDENTITY(~ (1), (~ (1)) | (~ (1))), ~ (1), ~ (1)) : _GLF_FUZZED(11466)))))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (_GLF_IDENTITY(1, ~ (~ (1)))) ^ 0))))) + 0)) % subgroup_size)));
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false, false)))), (bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false, false))))) && true)))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), bool(bvec2(bool(bvec2(false, true)), true))))), bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, true))))), (bool(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, true)))))) && true))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec2(1, 0), ivec2(ivec2(ivec2(1, 0)))))), _GLF_IDENTITY(1, (1) >> 0), _GLF_IDENTITY(1, 1 * (1)))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)), 0 ^ (_GLF_IDENTITY(_injected_loop_counter, (true ? _injected_loop_counter : _GLF_FUZZED(16669))))) != (0 << _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter --)
        {
         for(int _injected_loop_counter = (_GLF_IDENTITY(0 ^ 0, (0 ^ 0) >> 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           do
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))), float(_GLF_FUZZED(-8.6)), bool(false))) > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), bool(bvec2(! ((_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) / 1.0) > injectionSwitch.y)), false))))), ! (! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))) || false))))))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    {
                     do
                      {
                       do
                        {
                         barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                  }
                 barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(false)), false || (! (_GLF_WRAPPED_IF_FALSE(false)))))))
                {
                }
               else
                {
                 do
                  {
                   for(int _injected_loop_counter = (int(_GLF_ONE(1.0, injectionSwitch.y)) ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         barrier();
                        }
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       barrier();
                      }
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))));
          }
         if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))))), true && (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))))
          {
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y)))))));
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), true && (_GLF_WRAPPED_IF_FALSE(false))))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
                {
                 for(int _injected_loop_counter = (((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))) | 0); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) << 0) != _GLF_IDENTITY((0 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), min(int(5), int(5))))), ((0 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), min(int(5), int(5)))))) | 0)); _injected_loop_counter --)
                  {
                   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(_GLF_IDENTITY(4, 0 + (4))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(int(4), min(int(4), int(4)))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY((_GLF_IDENTITY(int(4), min(int(4), int(4)))), ((_GLF_IDENTITY(int(4), min(int(4), int(4))))) * 1))), 0 + ((_GLF_IDENTITY(int(4), min(int(4), int(4)))))) << 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))) * 1.0), (injectionSwitch.x) - 0.0) < injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
                          {
                           barrier();
                          }
                         else
                          {
                          }
                        }
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(11.07) : _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)))))))))
                        barrier();
                       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
                        barrier();
                       for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(0), int(0)))), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(0), int(0)))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(0), int(0)))))))) || _GLF_IDENTITY(false, false || (false))); _injected_loop_counter --)
                        {
                         barrier();
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                      }
                     else
                      {
                      }
                    }
                  }
                }
               else
                {
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
              {
              }
             else
              {
               barrier();
              }
            }
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
            barrier();
           barrier();
          }
         barrier();
         do
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         barrier();
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   barrier();
  }
 uint read = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], _GLF_IDENTITY((buf[virtual_gid]), min(_GLF_IDENTITY((buf[virtual_gid]), max(_GLF_IDENTITY((buf[virtual_gid]), 0u + ((buf[virtual_gid]))), (buf[virtual_gid]))), (buf[virtual_gid]))) ^ 0u), _GLF_IDENTITY(4, ~ (~ (4))), 64, 0);
 do
  {
   atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(1, (1) >> 0)) ^ 0, ((1) ^ 0) * 1))))), 4, 64, 4);
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x < injectionSwitch.y)), (! ((injectionSwitch.x < injectionSwitch.y))) || false))))), true && (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x < injectionSwitch.y)), (! ((injectionSwitch.x < injectionSwitch.y))) || false))))))))
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, false, true))))));
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))))
      barrier();
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))))))
    {
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(bool(bool(_GLF_WRAPPED_IF_TRUE(true))), (bool(bool(_GLF_WRAPPED_IF_TRUE(true)))) && true)))
        {
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           if(subgroup_local_id + _GLF_IDENTITY(1, (1) - 0) < subgroup_size)
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(0, int(ivec2(_GLF_IDENTITY(0, int(ivec4(0, 1, 1, 0))), 1)))), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                    }
                   else
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         barrier();
                        }
                      }
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                    }
                   do
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                      barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_IDENTITY(true, true && (true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
                      {
                       for(int _injected_loop_counter = _GLF_IDENTITY(1, min(1, 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter --)
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                        }
                       barrier();
                      }
                     barrier();
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       barrier();
                      }
                    }
                  }
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                }
              }
             do
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   do
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       do
                        {
                         barrier();
                        }
                       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))));
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
                  }
                 else
                  {
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(1171.7019)))))))
                  barrier();
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     do
                      {
                       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter)) < (_GLF_IDENTITY(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(1, 0 ^ (1))), _GLF_IDENTITY(int(1), max(_GLF_IDENTITY(int(1), ~ (~ (int(1)))), _GLF_IDENTITY(int(1), (int(1)) | (int(1))))))) >> _GLF_IDENTITY(int(1), int(1)), min((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), max(_GLF_IDENTITY(int(1), ~ (~ (int(1)))), _GLF_IDENTITY(int(1), (int(1)) | (int(1))))))) >> _GLF_IDENTITY(int(1), int(1)), (1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), max(_GLF_IDENTITY(int(1), ~ (~ (int(1)))), _GLF_IDENTITY(_GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), min(int(1), int(1)))) >> 0), (int(1)) | (int(1))))))) >> _GLF_IDENTITY(int(1), int(1)))), (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(1, 0 ^ (1))), _GLF_IDENTITY(int(1), max(_GLF_IDENTITY(int(1), ~ (~ (int(1)))), _GLF_IDENTITY(int(1), (int(1)) | (int(1))))))) >> _GLF_IDENTITY(int(1), int(1)), min((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), max(_GLF_IDENTITY(int(1), ~ (~ (int(1)))), _GLF_IDENTITY(int(1), (int(1)) | (int(1))))))) >> _GLF_IDENTITY(int(1), int(1)), (1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), max(_GLF_IDENTITY(int(1), ~ (~ (int(1)))), _GLF_IDENTITY(_GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), min(int(1), int(1)))) >> 0), (int(1)) | (int(1))))))) >> _GLF_IDENTITY(int(1), int(1))))) | (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(1, 0 ^ (1))), _GLF_IDENTITY(int(1), max(_GLF_IDENTITY(int(1), ~ (~ (int(1)))), _GLF_IDENTITY(int(1), (int(1)) | (int(1))))))) >> _GLF_IDENTITY(int(1), int(1)), min((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), max(_GLF_IDENTITY(int(1), ~ (~ (int(1)))), _GLF_IDENTITY(int(1), (int(1)) | (int(1))))))) >> _GLF_IDENTITY(int(1), int(1)), (1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), max(_GLF_IDENTITY(int(1), ~ (~ (int(1)))), _GLF_IDENTITY(_GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), min(int(1), int(1)))) >> 0), (int(1)) | (int(1))))))) >> _GLF_IDENTITY(int(1), int(1)))))))); _injected_loop_counter ++)
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY(_GLF_IDENTITY(false || (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(false, ! (! (false)))) || false)), bool(bvec3(false || (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(false, ! (! (false))))), true && (! ((_GLF_IDENTITY(false, ! (! (false))))))))) || false)), true, true))), true && (_GLF_IDENTITY(_GLF_IDENTITY(false || (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(false, ! (! (false)))) || false)), bool(bvec3(false || (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(false, ! (! (false))))), true && (! ((_GLF_IDENTITY(false, ! (! (false))))))))) || false)), true, true))), ! (! (_GLF_IDENTITY(false || (_GLF_IDENTITY(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), true && (_GLF_IDENTITY((! (false)), true && ((! (false))))))), (_GLF_IDENTITY(false, ! (! (false)))) || false)), bool(bvec3(false || (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! ((_GLF_IDENTITY(false, ! (! (false))))), true && (! ((_GLF_IDENTITY(false, ! (! (false))))))), (_GLF_IDENTITY(! ((_GLF_IDENTITY(false, ! (! (false))))), true && (! ((_GLF_IDENTITY(false, ! (! (false)))))))) || false))) || false)), true, true))))))))))))))
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec2((injectionSwitch.x > injectionSwitch.y), false), _GLF_IDENTITY(bvec2(bvec3(bvec2((injectionSwitch.x > injectionSwitch.y), false), false)), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec3(bvec2(bvec3(bvec2((injectionSwitch.x > injectionSwitch.y), false), false)), true), bvec3(bvec4(bvec3(bvec2(bvec3(bvec2((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(9554.5445), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-5061.2625)), bvec2(true, false))).y), false), false)), true), true)))), _GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec3(bvec2(bvec3(bvec2((injectionSwitch.x > injectionSwitch.y), false), false)), true), bvec3(bvec4(bvec3(bvec2(bvec3(bvec2((injectionSwitch.x > injectionSwitch.y), false), false)), true), true)))), true, true)), bvec2(bvec4(bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec3(bvec2(bvec3(bvec2((injectionSwitch.x > injectionSwitch.y), false), false)), true), bvec3(bvec4(bvec3(bvec2(bvec3(bvec2((injectionSwitch.x > injectionSwitch.y), false), false)), true), true)))), true, true)), false, false)))))))))))
                            barrier();
                           if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), false, false), bvec3(bvec4(bvec3(_GLF_DEAD(false), false, false), true))))))))
                            {
                             do
                              {
                               barrier();
                              }
                             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, true), bvec2(bvec3(bvec2(injectionSwitch.x > injectionSwitch.y, true), false)))))))));
                            }
                           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) + 0.0) > injectionSwitch.y))))
                              {
                               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                {
                                }
                               else
                                {
                                 if(_GLF_DEAD(false))
                                  barrier();
                                }
                               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                {
                                 if(_GLF_DEAD(false))
                                  barrier();
                                }
                               else
                                {
                                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                  barrier();
                                 barrier();
                                 if(_GLF_DEAD(false))
                                  barrier();
                                 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                                  barrier();
                                }
                              }
                            }
                           else
                            {
                            }
                           barrier();
                          }
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                  }
                }
               if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
                barrier();
               do
                {
                 atomicStore(checker[virtual_gid], read, _GLF_IDENTITY(4, (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(_GLF_IDENTITY(int(1.8), (int(1.8)) ^ 0))))) | (_GLF_IDENTITY(4, min(4, 4)))), 64, 4);
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  {
                   do
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
                    barrier();
                   for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), min(int(4), int(4))), _GLF_IDENTITY(int(4), min(_GLF_IDENTITY(int(4), (int(4)) * 1), int(4))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y))))
                      {
                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (int(_GLF_ZERO(0.0, injectionSwitch.x))) - 0)); _injected_loop_counter --)
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                        }
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       barrier();
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           barrier();
                          }
                         else
                          {
                          }
                        }
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          {
                          }
                         else
                          {
                           barrier();
                          }
                        }
                      }
                    }
                   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ((false)) && true)))))
                    {
                     do
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                     barrier();
                    }
                  }
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 do
                  {
                   if(_GLF_DEAD(false))
                    {
                     do
                      {
                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((0 ^ 0), int(ivec4((0 ^ 0), 1, 1, 0)))); _injected_loop_counter --)
                        {
                         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) ^ 0) != (0 | 0)); _injected_loop_counter --)
                          {
                           if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (! (_GLF_DEAD(false))))))), true, false, false))))
                            barrier();
                          }
                         barrier();
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(true, ! (! (true))) && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false))))) || false))))));
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     barrier();
                    }
                  }
                }
              }
             else
              {
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))
              barrier();
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, min(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(6, (_GLF_IDENTITY(6, (6) << 0)) | (6))), int(6))) >> _GLF_IDENTITY(int(6), int(6)))), _injected_loop_counter)) < _GLF_IDENTITY(1, (1) + int(_GLF_ZERO(0.0, injectionSwitch.x)))); _injected_loop_counter ++)
              {
               subgroupAll(false);
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                barrier();
              }
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat3(injectionSwitch.x, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)))), dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0))))), determinant(mat4(0.0, length(vec2(0.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(8019.1198))), 0.0)))), 0.0, 0.0, sin(0.0), 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 0.0, 0.0, 0.0, sqrt(0.0), 0.0)), 1.0, tan(0.0), 1.0, 1.0, 1.0, sqrt(1.0)), (mat3(injectionSwitch.x, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)))), dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0))))), determinant(mat4(0.0, length(vec2(0.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(8019.1198))), 0.0)))), 0.0, 0.0, sin(0.0), 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 0.0, 0.0, 0.0, sqrt(0.0), 0.0)), 1.0, tan(0.0), 1.0, 1.0, 1.0, sqrt(1.0))) + mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))) < injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))), ! _GLF_IDENTITY((! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, false || (true)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(bool(bvec3(injectionSwitch.x < injectionSwitch.y, true, true)), bool(bvec4(_GLF_IDENTITY(bool(bvec3(injectionSwitch.x < injectionSwitch.y, true, true)), (bool(bvec3(injectionSwitch.x < injectionSwitch.y, true, true))) && true), true, false, false)))), (injectionSwitch.x < injectionSwitch.y) || false)))))), ((! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-4.2, 5.2)))).x < injectionSwitch.y)))))) || false)), true)))), (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / _GLF_IDENTITY(1.0, max(1.0, 1.0))) < _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))), ! _GLF_IDENTITY((! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), bool(bvec3(! (injectionSwitch.x < injectionSwitch.y), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat4x2(injectionSwitch.x, round(length(normalize(vec2(1.0, 1.0)))), 1.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0)), _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0)), float(mat4x3(dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0)), 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0)))), sqrt(1.0), 0.0, 0.0, cos(0.0)))) > injectionSwitch.y)), false))))), _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) || false) || false)))))), ((! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) || false)), true))))) || false))))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) - 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        {
                         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, (_GLF_IDENTITY(_injected_loop_counter < 1, ! (! (_GLF_IDENTITY(_injected_loop_counter < 1, (_injected_loop_counter < 1) && true))))) || false)); _injected_loop_counter ++)
                          {
                           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec2(false, true)))))))))
                            {
                            }
                           else
                            {
                             if(_GLF_WRAPPED_IF_FALSE(false))
                              {
                              }
                             else
                              {
                               for(int _injected_loop_counter = (-9762 & (37086 & 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                                {
                                 barrier();
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter ++)
                        {
                         barrier();
                        }
                      }
                     else
                      {
                      }
                    }
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), max(~ (1), ~ (1)))))); _injected_loop_counter ++)
                    {
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                      {
                       do
                        {
                         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))) || (_GLF_WRAPPED_IF_FALSE(false))))
                          {
                          }
                         else
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                           if(_GLF_DEAD(false))
                            barrier();
                           do
                            {
                             if(_GLF_WRAPPED_IF_TRUE(true))
                              {
                               if(_GLF_DEAD(false))
                                {
                                 do
                                  {
                                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
                                    barrier();
                                  }
                                 while(_GLF_WRAPPED_LOOP(false));
                                 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)), (bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false))) || false)))
                                  {
                                   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
                                    {
                                     barrier();
                                    }
                                   else
                                    {
                                    }
                                  }
                                 if(_GLF_DEAD(false))
                                  {
                                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                    barrier();
                                   barrier();
                                  }
                                 if(_GLF_WRAPPED_IF_FALSE(false))
                                  {
                                  }
                                 else
                                  {
                                   if(_GLF_DEAD(false))
                                    {
                                     if(_GLF_DEAD(false))
                                      {
                                       if(_GLF_WRAPPED_IF_TRUE(true))
                                        {
                                         barrier();
                                        }
                                       else
                                        {
                                        }
                                      }
                                     barrier();
                                    }
                                  }
                                 if(_GLF_DEAD(false))
                                  barrier();
                                 if(_GLF_WRAPPED_IF_FALSE(false))
                                  {
                                  }
                                 else
                                  {
                                   barrier();
                                   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec2(bvec2(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
                                    barrier();
                                  }
                                 if(_GLF_DEAD(false))
                                  {
                                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                    {
                                     barrier();
                                    }
                                   else
                                    {
                                    }
                                  }
                                }
                              }
                             else
                              {
                              }
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   do
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_DEAD(false))
                        barrier();
                       barrier();
                      }
                     if(_GLF_DEAD(false))
                      {
                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter --)
                        {
                         barrier();
                        }
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))));
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                }
               else
                {
                }
              }
             else
              {
              }
             do
              {
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   for(int _injected_loop_counter = _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))), int(ivec2(((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))), 1))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                    {
                     barrier();
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(bvec2(false, false)))), true, true)))), ! (! (bool(bvec2(false, false))))), true && (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(false, false)), ! (! (bool(bvec2(false, false))))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bvec2(false, false)), ! (! (bool(bvec2(false, false))))), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(bool(bvec2(false, false)), ! (! (bool(bvec2(false, false))))), true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(true, false || (true))))))))))));
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                barrier();
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 for(int _injected_loop_counter = (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(7), min(int(7), _GLF_IDENTITY(_GLF_IDENTITY(int(7), min(_GLF_IDENTITY(int(7), (int(7)) | (int(7))), int(7))), (int(7)) << _GLF_IDENTITY(0, (0) | (0))))), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_IDENTITY(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), max(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + log(vec2(1.0, 1.0))), vec2(injectionSwitch[_GLF_IDENTITY(0, (0) - 0)], injectionSwitch[1])))).y), (_GLF_ONE(1.0, injectionSwitch.y)) * 1.0))); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))))
                      barrier();
                     do
                      {
                       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                         barrier();
                        }
                       barrier();
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false)))))) || (false))));
                    }
                  }
                 if(_GLF_DEAD(false))
                  {
                   for(int _injected_loop_counter = (0 & -37792); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                    {
                     barrier();
                    }
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                }
               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  {
                   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                    {
                     barrier();
                    }
                   for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), bool(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))); _injected_loop_counter --)
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                  }
                }
               do
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))) : _GLF_FUZZED((vec2(3061.0219, 3892.2951))))).x > injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     do
                      {
                       barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                    }
                  }
                 else
                  {
                  }
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-4.4), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(((false ? 6503.1491 : -6145.4730)))), bvec2(true, false))).x > injectionSwitch.y))))
                  barrier();
                }
               else
                {
                 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                  barrier();
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      {
                       for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < (0 | ((int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))) - 0.0))) << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) >> (0 << _GLF_IDENTITY(int(4), int(4))))) >> _GLF_IDENTITY(int(6), int(6))))); _injected_loop_counter ++)
                        {
                         barrier();
                        }
                      }
                     barrier();
                    }
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = (-48417 & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                {
                 barrier();
                }
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, true && ((false) || false)))))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, true)), (bool(bvec3(false, false, true))) || false))))), ! (! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), _GLF_IDENTITY(bool(bvec3(false, false, true)), (bool(bvec3(false, false, true))) || false)))))))), (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(6941.4019)), float(injectionSwitch.x), bool(true))) > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))))))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   do
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           barrier();
                          }
                        }
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   if(_GLF_DEAD(false))
                    {
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), ! (! (bool(bvec2(false, true)))))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)) ? _GLF_FUZZED(52338) : 1, _GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)), ! (! (_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)))))))) ? _GLF_FUZZED(52338) : 1, 0, 1)), int(ivec2(int(ivec3(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(8.8)), bool(false))) > injectionSwitch.y)) || false)) ? _GLF_FUZZED(52338) : 1, 0, 1)), 1))))))); _injected_loop_counter ++)
                      {
                       barrier();
                      }
                    }
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                    }
                   else
                    {
                    }
                  }
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               barrier();
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), bool(bvec3(bool(bvec2(false, false)), true, false))))))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), true, true))))
                    {
                     do
                      {
                       barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                  }
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                 for(int _injected_loop_counter = _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec4(1, 1, 1, _GLF_IDENTITY(0, (0) * 1)), (ivec4(1, 1, 1, 0)) * (ivec4(0, 0, 0, 0) ^ ivec4(1, 1, 1, 1))))), _GLF_IDENTITY(1, 1 * (1)), _GLF_IDENTITY(1, max(1, 1)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                  {
                   barrier();
                   if(_GLF_DEAD(false))
                    {
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, clamp(6, 6, 6)) : _GLF_FUZZED(min(_injected_loop_counter, _injected_loop_counter))))), int(6)))); _injected_loop_counter ++)
                      {
                       barrier();
                      }
                    }
                  }
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (_GLF_IDENTITY(bool(bvec4(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, ! (! (false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false || (bool(bvec4(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))) || false)), (injectionSwitch.x > injectionSwitch.y))))
                  {
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 barrier();
                }
              }
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true))))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(_GLF_IDENTITY(distance(-955.757, 636.157), 1.0 * (_GLF_IDENTITY(distance(-955.757, 636.157), min(distance(-955.757, 636.157), distance(-955.757, 636.157)))))))), ! (_GLF_IDENTITY(! (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch))) - vec2(0.0, 0.0)).y : _GLF_FUZZED(distance(-955.757, 636.157))))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(! (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(4.0)), vec2(_GLF_FUZZED(_GLF_IDENTITY((- 2.7), clamp((- 2.7), (- 2.7), (- 2.7)))), (injectionSwitch)[1]), bvec2(false, true))).y, (true ? injectionSwitch.y : _GLF_IDENTITY(_GLF_FUZZED(distance(-955.757, 636.157)), _GLF_IDENTITY(mix(float(_GLF_FUZZED(distance(_GLF_IDENTITY(-955.757, max(-955.757, -955.757)), 636.157))), float(_GLF_FUZZED((4.0 - 80.58))), bool(false)), clamp(mix(float(_GLF_FUZZED(distance(_GLF_IDENTITY(-955.757, max(-955.757, -955.757)), 636.157))), float(_GLF_FUZZED((4.0 - 80.58))), bool(false)), mix(float(_GLF_FUZZED(distance(_GLF_IDENTITY(-955.757, max(-955.757, -955.757)), 636.157))), float(_GLF_FUZZED((4.0 - 80.58))), bool(false)), mix(float(_GLF_FUZZED(distance(_GLF_IDENTITY(-955.757, max(-955.757, -955.757)), 636.157))), float(_GLF_FUZZED((4.0 - 80.58))), bool(false)))))))), _GLF_IDENTITY((! (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-5.1)), vec2(_GLF_FUZZED(220.520), (injectionSwitch)[1]), bvec2(false, true))), _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)))).y, (true ? injectionSwitch.y : _GLF_FUZZED(distance(-955.757, 636.157)))))), ! (! (_GLF_IDENTITY((! (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED((9350.3551 + -0.9))), float(_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, 0.0, 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 0.0, 0.0, 1.0, 1.0, 1.0))).y), bool(true))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))) - 0.0), float(vec3(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))) - 0.0), 0.0, 0.0))) : _GLF_FUZZED(distance(-955.757, 636.157)))))), ! (! ((! (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / _GLF_ONE(1.0, injectionSwitch.y)), (true ? injectionSwitch.y : _GLF_FUZZED(distance(-955.757, 636.157)))))))))))) || false), false, false)), bool(bvec3(bool(bvec3(_GLF_IDENTITY(! (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(distance(-955.757, 636.157), (false ? _GLF_FUZZED(-4.3) : distance(-955.757, 636.157))), min(distance(-955.757, 636.157), distance(-955.757, 636.157))))))), (! (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], mix(float((injectionSwitch)[0]), float(_GLF_FUZZED((float(4704u) - (888.434)))), bool(false))), (injectionSwitch)[_GLF_IDENTITY(1, clamp(1, 1, 1))]), vec2(_GLF_FUZZED(5682.0325), _GLF_FUZZED(-25.62)), bvec2(false, false)))) / vec2(1.0, 1.0)).y, _GLF_IDENTITY((true ? injectionSwitch.y : _GLF_FUZZED(distance(-955.757, 636.157))), mix(float(_GLF_IDENTITY(_GLF_IDENTITY((true ? injectionSwitch.y : _GLF_FUZZED(distance(-955.757, 636.157))), max(_GLF_IDENTITY((true ? injectionSwitch.y : _GLF_FUZZED(distance(-955.757, 636.157))), min((true ? _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y : _GLF_FUZZED(distance(-955.757, 636.157))), _GLF_IDENTITY((true ? injectionSwitch.y : _GLF_FUZZED(distance(-955.757, 636.157))), (true ? (true ? injectionSwitch.y : _GLF_FUZZED(distance(-955.757, 636.157))) : _GLF_FUZZED(9.0))))), (true ? injectionSwitch.y : _GLF_FUZZED(distance(-955.757, 636.157))))), ((true ? injectionSwitch.y : _GLF_FUZZED(distance(-955.757, 636.157)))) - 0.0)), float(_GLF_FUZZED(-9.4)), bool(false)))))) || false), _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), false)), ! (! (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), false)), true && (bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), false)))))))), false)), false, true))))))))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, false, true, true)), bool(bool(_GLF_IDENTITY(bool(bvec4(true, false, true, true)), _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec3(bvec3(true, false, _GLF_IDENTITY(false, true && (false)))))))))) && (bool(bvec4(true, false, true, true))))))))))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                    barrier();
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                   do
                    {
                     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x > injectionSwitch.y))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), _GLF_IDENTITY(max((injectionSwitch), (injectionSwitch)), max(max((injectionSwitch), (injectionSwitch)), max((injectionSwitch), (injectionSwitch))))) * vec2(1.0, 1.0)).x > injectionSwitch.y))))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * _GLF_IDENTITY(vec2(1.0, 1.0), clamp(vec2(1.0, 1.0), vec2(1.0, 1.0), _GLF_IDENTITY(vec2(1.0, 1.0), mat2(1.0) * (vec2(1.0, 1.0)))))).x > injectionSwitch.y))))), false), true, true))))))
                      {
                       for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(0, (0) / 1)), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
                          barrier();
                        }
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                          {
                           barrier();
                          }
                         else
                          {
                          }
                        }
                       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                        {
                         do
                          {
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             if(_GLF_DEAD(false))
                              {
                               do
                                {
                                 barrier();
                                }
                               while(_GLF_WRAPPED_LOOP(false));
                              }
                             if(_GLF_DEAD(false))
                              barrier();
                            }
                           barrier();
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                       if(_GLF_DEAD(false))
                        {
                         do
                          {
                           barrier();
                          }
                         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y), true && ((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y))))));
                        }
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             barrier();
                            }
                           else
                            {
                            }
                          }
                         barrier();
                        }
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! ((false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))) - vec2(0.0, 0.0)).x > injectionSwitch.y))))
                      barrier();
                    }
                   else
                    {
                    }
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                  }
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | int(_GLF_ZERO(0.0, injectionSwitch.x)))); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
                    barrier();
                   do
                    {
                     barrier();
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           barrier();
                          }
                        }
                       barrier();
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[1], min(injectionSwitch[1], _GLF_IDENTITY(injectionSwitch[1], mix(float(injectionSwitch[1]), float(_GLF_FUZZED(88.95)), bool(false))))), min(_GLF_IDENTITY(injectionSwitch[1], min(injectionSwitch[1], _GLF_IDENTITY(injectionSwitch[1], mix(float(injectionSwitch[1]), float(_GLF_FUZZED(88.95)), bool(false))))), _GLF_IDENTITY(injectionSwitch[1], min(injectionSwitch[1], _GLF_IDENTITY(injectionSwitch[1], mix(float(injectionSwitch[1]), float(_GLF_FUZZED(88.95)), bool(false))))))))), (injectionSwitch) - vec2(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0)).y))));
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
                  barrier();
                }
               else
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     barrier();
                    }
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), bool(bvec4(_GLF_IDENTITY(false || (false), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)))) && true))) || (false || (false))), false, false, true))))))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                      barrier();
                    }
                   else
                    {
                     barrier();
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false)))))
                    {
                    }
                   else
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), false || ((injectionSwitch.x < injectionSwitch.y))))))
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                           barrier();
                          }
                         else
                          {
                          }
                        }
                      }
                     else
                      {
                      }
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec2(false, true))))), (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec2(false, true))))), (injectionSwitch.x > injectionSwitch.y)))), bool(bvec4(! (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec2(false, true))))), (injectionSwitch.x > injectionSwitch.y)))), true, false, true))))))
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                      {
                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (true ? _GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) << 0) : _GLF_FUZZED(18948))) > 0); _injected_loop_counter --)
                        {
                         barrier();
                        }
                      }
                     barrier();
                    }
                  }
                }
               else
                {
                }
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 do
                  {
                   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     do
                      {
                       do
                        {
                         barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                    }
                  }
                 else
                  {
                   do
                    {
                     atomicStore(buf[virtual_gid], read, 4, _GLF_IDENTITY(64, _GLF_IDENTITY((64) | (_GLF_IDENTITY(64, (_GLF_IDENTITY(64, (_GLF_IDENTITY(false ? _GLF_FUZZED(-74783) : 64, _GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(false ? _GLF_FUZZED(-74783) : 64, (false ? _GLF_FUZZED(-74783) : 64) | (false ? _GLF_FUZZED(-74783) : 64)), 0, 0)), min(int(ivec3(_GLF_IDENTITY(false ? _GLF_FUZZED(-74783) : 64, (false ? _GLF_FUZZED(_GLF_IDENTITY(-74783, (-74783) >> 0)) : 64) | (false ? _GLF_FUZZED(-74783) : 64)), 0, 0)), _GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(false ? _GLF_FUZZED(-74783) : 64, (false ? _GLF_FUZZED(-74783) : 64) | (false ? _GLF_FUZZED(-74783) : 64)), 0, 0)), (int(ivec3(_GLF_IDENTITY(false ? _GLF_FUZZED(-74783) : 64, (false ? _GLF_FUZZED(-74783) : 64) | (_GLF_IDENTITY(false, true && (false)) ? _GLF_FUZZED(-74783) : 64)), 0, 0))) | 0))))))) >> 0)), 0 | (_GLF_IDENTITY((64) | (_GLF_IDENTITY(64, (_GLF_IDENTITY(64, (_GLF_IDENTITY(false ? _GLF_FUZZED(-74783) : 64, _GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(false ? _GLF_FUZZED(-74783) : 64, (false ? _GLF_FUZZED(-74783) : 64) | (false ? _GLF_FUZZED(-74783) : 64)), 0, 0)), min(int(ivec3(_GLF_IDENTITY(false ? _GLF_FUZZED(-74783) : 64, (false ? _GLF_FUZZED(_GLF_IDENTITY(-74783, (-74783) >> 0)) : 64) | (false ? _GLF_FUZZED(-74783) : 64)), 0, 0)), _GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(false ? _GLF_FUZZED(-74783) : 64, (false ? _GLF_FUZZED(-74783) : 64) | (false ? _GLF_FUZZED(-74783) : 64)), 0, 0)), (int(ivec3(_GLF_IDENTITY(false ? _GLF_FUZZED(-74783) : 64, (false ? _GLF_FUZZED(-74783) : 64) | (_GLF_IDENTITY(false, true && (false)) ? _GLF_FUZZED(-74783) : 64)), 0, 0))) | 0))))))) >> 0)), int(_GLF_IDENTITY(int((64) | (_GLF_IDENTITY(64, (_GLF_IDENTITY(64, (_GLF_IDENTITY(false ? _GLF_FUZZED(-74783) : 64, _GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(false ? _GLF_FUZZED(-74783) : 64, (false ? _GLF_FUZZED(-74783) : 64) | (false ? _GLF_FUZZED(-74783) : 64)), 0, 0)), min(int(ivec3(_GLF_IDENTITY(false ? _GLF_FUZZED(-74783) : 64, (false ? _GLF_FUZZED(_GLF_IDENTITY(-74783, (-74783) >> 0)) : 64) | (false ? _GLF_FUZZED(-74783) : 64)), 0, 0)), _GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(false ? _GLF_FUZZED(-74783) : 64, (false ? _GLF_FUZZED(-74783) : 64) | (false ? _GLF_FUZZED(-74783) : 64)), 0, 0)), (int(ivec3(_GLF_IDENTITY(false ? _GLF_FUZZED(-74783) : 64, (false ? _GLF_FUZZED(-74783) : 64) | (_GLF_IDENTITY(false, true && (false)) ? _GLF_FUZZED(-74783) : 64)), 0, 0))) | 0))))))) >> 0))), (int((64) | (_GLF_IDENTITY(64, (_GLF_IDENTITY(64, (_GLF_IDENTITY(false ? _GLF_FUZZED(-74783) : 64, _GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(false ? _GLF_FUZZED(-74783) : 64, (false ? _GLF_FUZZED(-74783) : 64) | (false ? _GLF_FUZZED(-74783) : 64)), 0, 0)), min(int(ivec3(_GLF_IDENTITY(false ? _GLF_FUZZED(-74783) : 64, (false ? _GLF_FUZZED(_GLF_IDENTITY(-74783, (-74783) >> 0)) : 64) | (false ? _GLF_FUZZED(-74783) : 64)), 0, 0)), _GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(false ? _GLF_FUZZED(-74783) : 64, (false ? _GLF_FUZZED(-74783) : 64) | (false ? _GLF_FUZZED(-74783) : 64)), 0, 0)), (int(ivec3(_GLF_IDENTITY(false ? _GLF_FUZZED(-74783) : 64, (false ? _GLF_FUZZED(-74783) : 64) | (_GLF_IDENTITY(false, true && (false)) ? _GLF_FUZZED(-74783) : 64)), 0, 0))) | 0))))))) >> 0)))) + 0)))))), 4);
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                    }
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))))
                      {
                      }
                     else
                      {
                       barrier();
                      }
                    }
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
                          barrier();
                         barrier();
                        }
                      }
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(mat3x2(injectionSwitch.x, _GLF_ONE(1.0, injectionSwitch.y), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0))))) > injectionSwitch.y))))))))))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_DEAD(false))
                  {
                   for(int _injected_loop_counter = _GLF_IDENTITY(0, max(0, 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, (1) - 0)))) >> _GLF_IDENTITY(int(1), int(1))), (((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))) | (0 >> _GLF_IDENTITY(int(5), int(5))))); _injected_loop_counter ++)
                    {
                     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         barrier();
                        }
                       else
                        {
                        }
                      }
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                    }
                  }
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                barrier();
              }
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), bool(bool(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), true && (false)))))))
              {
               for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 barrier();
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true)))))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))))) && _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y)))))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                 subgroupAll(true);
                }
               else
                {
                }
              }
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(75.76)), bool(false)))) + _GLF_ZERO(0.0, injectionSwitch.x)) < injectionSwitch.y)), false)), true && (bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-33.92)), float(injectionSwitch.x), bool(true))), injectionSwitch.x)) < injectionSwitch.y)), false))))))))
                barrier();
               barrier();
              }
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y)))))))))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(uintBitsToFloat(182010u)) : injectionSwitch.y))))))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, int(_GLF_IDENTITY(_GLF_IDENTITY(ivec4(0, (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), min(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (_GLF_IDENTITY(int(4), int(4))) | (_GLF_IDENTITY(int(4), int(4)))), _GLF_IDENTITY(int(4), int(4))))), 1, int(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(min(ivec4(0, (0 << _GLF_IDENTITY(int(4), int(4))), 1, int(_GLF_ZERO(0.0, injectionSwitch.x))), ivec4(0, (0 << _GLF_IDENTITY(int(4), int(4))), 1, int(_GLF_ZERO(0.0, injectionSwitch.x)))), ivec4(0, 0, 0, 0) ^ (min(ivec4(0, (0 << _GLF_IDENTITY(int(4), int(4))), 1, int(_GLF_ZERO(0.0, injectionSwitch.x))), ivec4(0, (0 << _GLF_IDENTITY(int(4), int(4))), 1, int(_GLF_ZERO(0.0, injectionSwitch.x))))))), (_GLF_IDENTITY(ivec4(0, (0 << _GLF_IDENTITY(int(4), int(4))), 1, int(_GLF_ZERO(0.0, injectionSwitch.x))), min(ivec4(0, (0 << _GLF_IDENTITY(int(4), int(4))), 1, int(_GLF_ZERO(0.0, injectionSwitch.x))), ivec4(0, (0 << _GLF_IDENTITY(int(4), int(4))), 1, int(_GLF_ZERO(0.0, injectionSwitch.x)))))) << ivec4(0, 0, 0, 0))))); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                barrier();
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             barrier();
            }
          }
        }
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | (1 ^ 1))), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | (1 ^ 1)))), true && (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | (1 ^ _GLF_IDENTITY(1, (1) / int(_GLF_ONE(1.0, injectionSwitch.y))))))))))); _injected_loop_counter --)
      {
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x > injectionSwitch.y))))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(bool(bvec3(injectionSwitch.x < injectionSwitch.y, true, false)), false || (_GLF_IDENTITY(bool(bvec3(injectionSwitch.x < injectionSwitch.y, true, false)), false || (bool(bvec3(injectionSwitch.x < injectionSwitch.y, true, false))))))))) && (false))))
  barrier();
}
