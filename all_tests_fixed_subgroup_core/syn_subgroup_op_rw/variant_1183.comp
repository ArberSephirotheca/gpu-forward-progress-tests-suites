#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec4 GLF_merged2_0_3_76_3_1_16GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_sizenext_virtual_gid;
 uvec3 GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_size;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
            {
             barrier();
            }
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 else
  {
  }
 do
  {
   _GLF_IDENTITY(GLF_merged2_0_3_76_3_1_16GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_sizenext_virtual_gid.xyz = GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_size, (GLF_merged2_0_3_76_3_1_16GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_sizenext_virtual_gid.xyz = GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_size) + uvec3(0u, 0u, 0u));
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(_GLF_IDENTITY(vec3(injectionSwitch.y, 0.0, 0.0), _GLF_IDENTITY(mat3(1.0) * (vec3(injectionSwitch.y, 0.0, 0.0)), mix(vec3(_GLF_FUZZED(57.07), _GLF_FUZZED(-35.52), (mat3(1.0) * (vec3(injectionSwitch.y, 0.0, 0.0)))[2]), vec3((mat3(1.0) * (vec3(injectionSwitch.y, 0.0, 0.0)))[0], (mat3(1.0) * (vec3(injectionSwitch.y, 0.0, 0.0)))[1], _GLF_FUZZED(9196.4587)), bvec3(true, true, false))))), mix(float(float(_GLF_IDENTITY(vec3(injectionSwitch.y, 0.0, 0.0), _GLF_IDENTITY(mat3(1.0) * (vec3(injectionSwitch.y, 0.0, 0.0)), mix(vec3(_GLF_FUZZED(57.07), _GLF_FUZZED(-35.52), (mat3(1.0) * (vec3(injectionSwitch.y, 0.0, 0.0)))[2]), vec3((mat3(1.0) * (vec3(injectionSwitch.y, 0.0, 0.0)))[0], (mat3(1.0) * (vec3(injectionSwitch.y, 0.0, 0.0)))[1], _GLF_FUZZED(9196.4587)), bvec3(true, true, false)))))), float(_GLF_FUZZED(-6923.8487)), bool(false))))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), false || (! ((injectionSwitch.x > injectionSwitch.y)))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), false || (! ((injectionSwitch.x > injectionSwitch.y)))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec3(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), false || (! ((injectionSwitch.x > injectionSwitch.y)))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))))))
  barrier();
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true)))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           barrier();
          }
        }
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 uint subgroup_id = gl_SubgroupID;
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
uint subgroup_size = 16;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 GLF_merged2_0_3_76_3_1_16GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_sizenext_virtual_gid.xyz.y = subgroup_local_id;
 uint num_workgroup = gl_NumWorkGroups.x;
 GLF_merged2_0_3_76_3_1_16GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_sizenext_virtual_gid.xyz.x = num_workgroup;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, bool(bvec3(false, false, false))), true, false)))))
      barrier();
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
       barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec4(false, false, true, false))))))))
        barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), bool(bvec4((! (false)), false, false, true))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     for(int _injected_loop_counter = _GLF_IDENTITY((int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))), ((int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))))) / 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 GLF_merged2_0_3_76_3_1_16GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_sizenext_virtual_gid.xyz.z = workgroup_size;
 uint workgroup_id = _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID.x, min(gl_WorkGroupID.x, gl_WorkGroupID.x)), _GLF_IDENTITY((gl_WorkGroupID.x) << 0u, ((gl_WorkGroupID.x) << 0u) >> 0u));
 uint workgroup_base = _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_3_76_3_1_16GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_sizenext_virtual_gid.xyz, ~ (~ (GLF_merged2_0_3_76_3_1_16GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_sizenext_virtual_gid.xyz))).z * workgroup_id, ~ (~ (GLF_merged2_0_3_76_3_1_16GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_sizenext_virtual_gid.xyz.z * workgroup_id)));
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, uint(_GLF_ZERO(0.0, injectionSwitch.x)) + _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, max(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, uint(uvec2(workgroup_base + subgroup_id * subgroup_size, 0u))), workgroup_base + subgroup_id * subgroup_size)), clamp(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, max(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, uint(uvec2(workgroup_base + subgroup_id * subgroup_size, 0u))), workgroup_base + subgroup_id * subgroup_size)), _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, max(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, uint(uvec2(workgroup_base + subgroup_id * subgroup_size, 0u))), workgroup_base + subgroup_id * subgroup_size)), _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, max(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, uint(uvec2(workgroup_base + subgroup_id * subgroup_size, 0u))), workgroup_base + subgroup_id * subgroup_size))))), uint(uvec2((_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, max(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, uint(uvec2(workgroup_base + subgroup_id * subgroup_size, 0u))), workgroup_base + subgroup_id * subgroup_size))), uint(_GLF_ZERO(0.0, injectionSwitch.x)))))) + GLF_merged2_0_3_76_3_1_16GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_sizenext_virtual_gid.xyz.y;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(GLF_merged2_0_3_76_3_1_16GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_sizenext_virtual_gid.xyz.y, max(GLF_merged2_0_3_76_3_1_16GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_sizenext_virtual_gid.xyz.y, _GLF_IDENTITY(GLF_merged2_0_3_76_3_1_16GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_sizenext_virtual_gid.xyz.y, min(GLF_merged2_0_3_76_3_1_16GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_sizenext_virtual_gid.xyz.y, GLF_merged2_0_3_76_3_1_16GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_sizenext_virtual_gid.xyz.y)))) + 1) % subgroup_size, 0u | ((GLF_merged2_0_3_76_3_1_16GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_sizenext_virtual_gid.xyz.y + _GLF_IDENTITY(1, min(1, 1))) % subgroup_size)), (_GLF_IDENTITY((GLF_merged2_0_3_76_3_1_16GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_sizenext_virtual_gid.xyz.y + 1) % subgroup_size, 0u | ((_GLF_IDENTITY(GLF_merged2_0_3_76_3_1_16GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_sizenext_virtual_gid.xyz, (GLF_merged2_0_3_76_3_1_16GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_sizenext_virtual_gid.xyz) ^ (uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(4u), uvec3(4u)))).y + 1) % subgroup_size))) | (0u | 0u)));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
  {
   for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, 0 | (1))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
        {
        }
       else
        {
         barrier();
        }
      }
     GLF_merged2_0_3_76_3_1_16GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_sizenext_virtual_gid.w = next_virtual_gid;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       else
        {
        }
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))).y))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))), (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))))).y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), false))))))) && true), ! (! ((_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) > injectionSwitch.y))))), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))).x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), false))))))) && true), ! (! ((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(1.0 * (injectionSwitch.x), 1.0 * (_GLF_IDENTITY(1.0 * (injectionSwitch.x), (true ? 1.0 * (injectionSwitch.x) : _GLF_FUZZED(clamp(-5464.1696, -671.414, -43.66))))))) > injectionSwitch.y))))), true && (_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec4(injectionSwitch, _GLF_IDENTITY(1.0, float(mat3(1.0, 1.0, 1.0, 0.0, determinant(mat3(_GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), dot(vec2(0.0, 0.0), vec2(1.0, 1.0))), 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)), 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec4(1.0, 1.0, 1.0, 0.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(1.0, 1.0, 1.0, 0.0), vec4(0.0, 0.0, 0.0, 1.0)))))), abs(0.0)), _GLF_IDENTITY(mat4(1.0) * (vec4(injectionSwitch, 1.0, abs(0.0))), clamp(mat4(1.0) * (vec4(injectionSwitch, 1.0, abs(0.0))), mat4(1.0) * (vec4(injectionSwitch, 1.0, abs(0.0))), mat4(1.0) * (vec4(injectionSwitch, 1.0, abs(0.0)))))))).x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! _GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), false)))), (_GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), false)))), bool(bvec4((_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(_GLF_IDENTITY(mat3x4(injectionSwitch.y, 1.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0))), determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, determinant(mat2(0.0, 0.0, 1.0, 0.0)), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0)), sqrt(0.0), 1.0, 0.0, 1.0, 1.0, exp(0.0), 1.0, 0.0), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? mat3x4(injectionSwitch.y, 1.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0))), determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, determinant(mat2(0.0, 0.0, 1.0, 0.0)), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0)), sqrt(0.0), 1.0, 0.0, 1.0, 1.0, exp(0.0), 1.0, 0.0) : _GLF_FUZZED(mat3x4(mat2x4(2148.5878, -1654.0323, -947.687, 1.7, -17.69, 72.02, -1.5, -0.5)))))), min(float(_GLF_IDENTITY(mat3x4(injectionSwitch.y, 1.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0))), determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, determinant(mat2(0.0, 0.0, 1.0, 0.0)), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0)), sqrt(0.0), 1.0, 0.0, 1.0, 1.0, exp(0.0), 1.0, 0.0), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? mat3x4(injectionSwitch.y, 1.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0))), determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, determinant(mat2(0.0, 0.0, 1.0, 0.0)), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0)), sqrt(0.0), 1.0, 0.0, 1.0, 1.0, exp(0.0), 1.0, 0.0) : _GLF_FUZZED(mat3x4(mat2x4(2148.5878, -1654.0323, -947.687, 1.7, -17.69, 72.02, -1.5, -0.5)))))), float(_GLF_IDENTITY(mat3x4(injectionSwitch.y, 1.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0))), determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, determinant(mat2(0.0, 0.0, 1.0, 0.0)), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0)), sqrt(0.0), 1.0, 0.0, 1.0, 1.0, exp(0.0), 1.0, 0.0), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? mat3x4(injectionSwitch.y, 1.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0))), determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, determinant(mat2(0.0, 0.0, 1.0, 0.0)), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0)), sqrt(0.0), 1.0, 0.0, 1.0, 1.0, exp(0.0), 1.0, 0.0) : _GLF_FUZZED(mat3x4(mat2x4(2148.5878, -1654.0323, -947.687, 1.7, -17.69, 72.02, -1.5, -0.5)))))))))), bool(bvec2((injectionSwitch.x > injectionSwitch.y), false)))), false, false, true)))) && true)))) && true), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) > injectionSwitch.y)), ! (_GLF_IDENTITY(! (! ((_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) > injectionSwitch.y))), _GLF_IDENTITY((! (! ((_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) > injectionSwitch.y)))), bool(bool((! (! ((_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) > injectionSwitch.y))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) ^ 0))) >> _GLF_IDENTITY(int(5), int(5))), max(((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), clamp(int(5), int(5), _GLF_IDENTITY(int(5), (_GLF_IDENTITY(int(5), min(int(5), _GLF_IDENTITY(int(5), (int(5)) | 0)))) >> 0))), _GLF_IDENTITY(int(5), (int(5)) ^ 0))) >> _GLF_IDENTITY(int(5), int(5))), _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (_GLF_IDENTITY(int(5), int(ivec2(int(5), 0)))) ^ 0))) >> _GLF_IDENTITY(int(5), int(5))), (((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) ^ 0))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(5, (5) | (_GLF_IDENTITY(5, max(5, 5))))), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(int(5), 0 + (int(5))), min(_GLF_IDENTITY(int(5), 0 + (int(5))), _GLF_IDENTITY(int(5), 0 + (int(5))))))), 0), _GLF_IDENTITY(ivec2(ivec4(ivec2(_GLF_IDENTITY(int(5), 0 | (_GLF_IDENTITY(int(5), 0 + (int(5))))), 0), 1, 1)), clamp(ivec2(ivec4(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(int(5), 0 | (_GLF_IDENTITY(int(5), 0 + (int(5))))), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(int(5), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(int(5), 0 + (int(5))), min(_GLF_IDENTITY(int(5), 0 + (int(5))), _GLF_IDENTITY(int(5), 0 + (int(5))))))), max(_GLF_IDENTITY(int(5), _GLF_IDENTITY(0 | (_GLF_IDENTITY(int(5), 0 + (int(5)))), min(0 | (_GLF_IDENTITY(int(5), 0 + (int(5)))), 0 | (_GLF_IDENTITY(int(5), 0 + (int(5))))))), _GLF_IDENTITY(_GLF_IDENTITY(int(5), 0 | (_GLF_IDENTITY(int(5), 0 + (int(5))))), (_GLF_IDENTITY(int(5), 0 | (_GLF_IDENTITY(int(5), 0 + (int(5)))))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(5), 0 | (_GLF_IDENTITY(int(5), 0 + (int(5))))), clamp(_GLF_IDENTITY(int(5), 0 | (_GLF_IDENTITY(int(5), 0 + (int(5))))), _GLF_IDENTITY(_GLF_IDENTITY(int(5), 0 | (_GLF_IDENTITY(int(5), 0 + (int(5))))), (_GLF_IDENTITY(int(5), 0 | (_GLF_IDENTITY(int(5), 0 + (int(5)))))) | (_GLF_IDENTITY(int(5), 0 | (_GLF_IDENTITY(int(5), 0 + (int(5))))))), _GLF_IDENTITY(int(5), 0 | (_GLF_IDENTITY(int(5), 0 + (int(5))))))))))))), 0), 1, 1)), ivec2(ivec4(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(int(5), 0 | (_GLF_IDENTITY(int(5), 0 + (int(5))))), (_GLF_IDENTITY(int(5), 0 | (_GLF_IDENTITY(int(5), 0 + (_GLF_IDENTITY(int(5), _GLF_IDENTITY(0, min(0, 0)) + (_GLF_IDENTITY(int(5), (int(5)) - 0)))))))) - 0), 0), 1, 1)), ivec2(_GLF_IDENTITY(ivec4(ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(5, min(5, 5))), _GLF_IDENTITY(0 | (_GLF_IDENTITY(int(5), 0 + (int(5)))), (_GLF_IDENTITY(0 | (_GLF_IDENTITY(int(5), 0 + (int(5)))), ~ (~ (0 | (_GLF_IDENTITY(int(5), 0 + (int(5)))))))) - 0)), 0), 1, 1), (ivec4(ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(5, min(5, 5))), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(int(5), 0 + (int(5))), clamp(_GLF_IDENTITY(int(5), 0 + (int(5))), _GLF_IDENTITY(int(5), 0 + (int(5))), _GLF_IDENTITY(int(5), 0 + (int(5))))))), 0), 1, 1)) - ivec4(0, 0, 0, 0))))))))))) | (((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) ^ 0))) >> _GLF_IDENTITY(int(5), int(5))))))), (_injected_loop_counter != _GLF_IDENTITY(((_GLF_IDENTITY(1, (_GLF_IDENTITY(1, int(ivec4(1, 1, 1, 1)))) >> 0) << _GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) ^ 0), _GLF_IDENTITY(int(5), (int(_GLF_IDENTITY(_GLF_IDENTITY(5, (false ? _GLF_IDENTITY(_GLF_FUZZED(_injected_loop_counter), (_GLF_FUZZED(_injected_loop_counter)) + (37588 & (0 << _GLF_IDENTITY(int(4), int(4))))) : _GLF_IDENTITY(5, max(_GLF_IDENTITY(5, (true ? _GLF_IDENTITY(5, (_GLF_IDENTITY(5, ~ (~ (_GLF_IDENTITY(5, clamp(5, 5, 5)))))) | (5)) : _GLF_FUZZED(-94988))), 5)))), (_GLF_IDENTITY(5, (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(5, max(_GLF_IDENTITY(5, (true ? 5 : _GLF_FUZZED(-94988))), 5))))) << 0))) ^ 0))) >> _GLF_IDENTITY(int(5), int(5))), max(((_GLF_IDENTITY(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), clamp(int(5), int(5), _GLF_IDENTITY(int(5), (_GLF_IDENTITY(int(5), min(int(5), _GLF_IDENTITY(int(5), (int(5)) | 0)))) >> 0))), _GLF_IDENTITY(int(5), (int(5)) ^ 0)), clamp(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), clamp(int(5), int(5), _GLF_IDENTITY(int(5), (_GLF_IDENTITY(int(5), min(int(5), _GLF_IDENTITY(int(5), (int(5)) | 0)))) >> 0))), _GLF_IDENTITY(int(5), (int(5)) ^ 0)), _GLF_IDENTITY(1, clamp(1, 1, 1)) << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(5), clamp(int(5), int(5), _GLF_IDENTITY(int(5), (_GLF_IDENTITY(int(5), min(int(5), _GLF_IDENTITY(int(5), (int(5)) | 0)))) >> 0))), _GLF_IDENTITY(int(5), (int(5)) ^ 0)), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(5), clamp(int(5), int(5), _GLF_IDENTITY(int(5), (_GLF_IDENTITY(int(5), min(int(5), _GLF_IDENTITY(int(5), (int(5)) | 0)))) >> 0))), _GLF_IDENTITY(int(5), (int(5)) ^ 0)), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(_GLF_IDENTITY(int(5), clamp(int(5), int(5), _GLF_IDENTITY(int(5), (_GLF_IDENTITY(int(5), min(int(5), _GLF_IDENTITY(int(5), (int(5)) | 0)))) >> 0))), _GLF_IDENTITY(int(5), (int(5)) ^ 0)))), 1, 1))), 1 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), clamp(int(5), int(5), _GLF_IDENTITY(int(5), (_GLF_IDENTITY(int(5), min(int(5), _GLF_IDENTITY(int(5), (int(5)) | 0)))) >> 0))), _GLF_IDENTITY(int(5), (int(5)) ^ _GLF_IDENTITY(0, 0 | (_GLF_IDENTITY(0, (0) / 1)))))))) >> _GLF_IDENTITY(int(5), int(5))), _GLF_IDENTITY(((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) ^ 0)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) ^ 0)), clamp(_GLF_IDENTITY(int(5), _GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) ^ 0), clamp(_GLF_IDENTITY(int(5), (int(5)) ^ 0), _GLF_IDENTITY(int(5), (int(_GLF_IDENTITY(5, (5) << 0))) ^ 0), _GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) ^ 0), (_GLF_IDENTITY(int(5), (int(5)) ^ 0)) ^ 0)))), _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) ^ _GLF_IDENTITY(0, min(0, 0)))), _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) ^ 0)))), _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) ^ 0)), _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(_GLF_IDENTITY(5, (5) / 1)), (int(5)) ^ 0))))) >> _GLF_IDENTITY(int(5), int(5))), _GLF_IDENTITY((((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), _GLF_IDENTITY((int(5)) ^ 0, ((int(5)) ^ 0) / 1)))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(int(5), 0 | (_GLF_IDENTITY(int(5), 0 + (int(5))))), 0), _GLF_IDENTITY(ivec2(ivec4(ivec2(_GLF_IDENTITY(int(5), 0 | (_GLF_IDENTITY(int(5), 0 + (int(5))))), 0), 1, 1)), clamp(ivec2(ivec4(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(int(5), 0 | (_GLF_IDENTITY(int(5), 0 + (int(5))))), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(int(5), 0 | (_GLF_IDENTITY(int(5), 0 + (int(5))))), max(_GLF_IDENTITY(int(5), 0 | (_GLF_IDENTITY(int(5), _GLF_IDENTITY(0, (0) << (0 & 99920)) + (int(5))))), _GLF_IDENTITY(int(5), 0 | (_GLF_IDENTITY(int(5), _GLF_IDENTITY(0 + (int(5)), clamp(0 + (int(5)), _GLF_IDENTITY(0 + (int(5)), clamp(0 + (int(5)), 0 + (int(5)), 0 + (int(5)))), 0 + (int(5))))))))))), _GLF_IDENTITY(0, (0) << (0 >> _GLF_IDENTITY(int(3), int(3))))), 1, 1)), ivec2(ivec4(ivec2(_GLF_IDENTITY(int(5), 0 | (_GLF_IDENTITY(int(5), 0 + (int(5))))), 0), 1, 1)), ivec2(ivec4(ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(5, min(5, _GLF_IDENTITY(5, min(5, 5)))), (_GLF_IDENTITY(5, min(5, _GLF_IDENTITY(5, min(5, 5))))) / 1)), 0 | (_GLF_IDENTITY(int(5), _GLF_IDENTITY(0 + (int(5)), (true ? _GLF_IDENTITY(0 + (int(5)), 0 | (0 + (int(5)))) : _GLF_FUZZED(84216)))))), 0), 1, 1)))))))))), ((((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) ^ 0))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(int(5), 0 | (_GLF_IDENTITY(int(5), 0 + (int(5))))), 0), _GLF_IDENTITY(ivec2(ivec4(ivec2(_GLF_IDENTITY(int(5), 0 | (_GLF_IDENTITY(int(5), 0 + (int(5))))), 0), 1, 1)), clamp(ivec2(ivec4(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(int(5), 0 | (_GLF_IDENTITY(int(5), 0 + (int(5))))), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(int(5), 0 | (_GLF_IDENTITY(int(5), 0 + (int(5))))), max(_GLF_IDENTITY(int(5), 0 | (_GLF_IDENTITY(int(5), _GLF_IDENTITY(0, _GLF_IDENTITY(_GLF_IDENTITY((0) << (0 & 99920), ((0) << (0 & 99920)) - 0), 0 ^ (_GLF_IDENTITY((0) << (0 & 99920), ((0) << (0 & 99920)) - 0)))) + (int(5))))), _GLF_IDENTITY(int(5), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(int(5), max(int(5), int(5))), 0 + (int(5))))))))), _GLF_IDENTITY(0, (0) << _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(3), int(3))), min(_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(3), int(3))), ((0 >> _GLF_IDENTITY(int(3), int(3)))) - 0), (0 >> _GLF_IDENTITY(int(3), int(3))))))), 1, 1)), ivec2(ivec4(ivec2(_GLF_IDENTITY(int(5), 0 | (_GLF_IDENTITY(int(5), 0 + (int(5))))), 0), 1, 1)), ivec2(ivec4(ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(5, _GLF_IDENTITY(min(5, 5), (min(5, 5)) - (1 ^ 1)))), 0 | (_GLF_IDENTITY(int(5), 0 + _GLF_IDENTITY((int(5)), min((int(5)), _GLF_IDENTITY((int(5)), ((int(5))) - 0)))))), _GLF_IDENTITY(0, (0) / (1 & 1))), 1, 1))))))))))) << int(_GLF_ZERO(0.0, injectionSwitch.x))) | (((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), clamp(int(5), _GLF_IDENTITY(int(5), 0 ^ (_GLF_IDENTITY(int(5), min(int(5), int(5))))), int(5))), _GLF_IDENTITY(int(_GLF_IDENTITY(5, clamp(5, 5, 5))), (int(5)) ^ 0))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (injectionSwitch.x > injectionSwitch.y)))) ? _GLF_FUZZED(45071) : _GLF_IDENTITY(int(5), int(5)))))))))) || false)); _injected_loop_counter ++)
        {
         barrier();
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, min(1, 1)))))); _injected_loop_counter --)
                  {
                   barrier();
                  }
                }
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)))))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     do
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
          }
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bool(! (false)))))))), (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(648.009)), bool(false)))))))
      barrier();
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 for(int _injected_loop_counter = (((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))) & (1 ^ 0)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) << (0 << _GLF_IDENTITY(int(0), int(0)))) != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter --)
      {
       barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))))
        {
         for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(_GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(1.4))))), injectionSwitch.x))), bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(_GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(1.4))))), injectionSwitch.x))), false), bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(_GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(1.4))))), injectionSwitch.x))), false), false, false))))); _injected_loop_counter --)
          {
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             do
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                }
               if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 for(int _injected_loop_counter = ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(_GLF_IDENTITY(2, max(2, 2))), int(2))) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, (_injected_loop_counter > 0) && true)); _injected_loop_counter --)
                  {
                   barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           else
            {
            }
           do
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     else
      {
      }
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       atomicStore(buf[GLF_merged2_0_3_76_3_1_16GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_sizenext_virtual_gid.w], uint(1), 4, 64, _GLF_IDENTITY(_GLF_IDENTITY(4, clamp(4, _GLF_IDENTITY(4, (_GLF_IDENTITY(_GLF_IDENTITY(4, (4) / ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))), (4) | (4))) + 0), 4)), clamp(_GLF_IDENTITY(4, clamp(4, _GLF_IDENTITY(4, (_GLF_IDENTITY(_GLF_IDENTITY(4, (4) / ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))), (4) | (4))) + 0), 4)), _GLF_IDENTITY(4, clamp(4, _GLF_IDENTITY(4, (_GLF_IDENTITY(_GLF_IDENTITY(4, (4) / ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))), (4) | (4))) + 0), 4)), _GLF_IDENTITY(4, clamp(4, _GLF_IDENTITY(4, (_GLF_IDENTITY(_GLF_IDENTITY(4, (4) / ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))), (4) | (4))) + 0), 4)))));
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_3_76_3_1_16GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_sizenext_virtual_gid.xyz.y, (true ? GLF_merged2_0_3_76_3_1_16GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_sizenext_virtual_gid.xyz.y : _GLF_FUZZED(subgroup_id))) + 1, (GLF_merged2_0_3_76_3_1_16GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_sizenext_virtual_gid.xyz.y + 1) | (_GLF_IDENTITY(GLF_merged2_0_3_76_3_1_16GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_sizenext_virtual_gid, (_GLF_IDENTITY(GLF_merged2_0_3_76_3_1_16GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_sizenext_virtual_gid, ~ (_GLF_IDENTITY(~ (GLF_merged2_0_3_76_3_1_16GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_sizenext_virtual_gid), clamp(~ (GLF_merged2_0_3_76_3_1_16GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_sizenext_virtual_gid), ~ (GLF_merged2_0_3_76_3_1_16GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_sizenext_virtual_gid), _GLF_IDENTITY(~ (GLF_merged2_0_3_76_3_1_16GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_sizenext_virtual_gid), max(~ (GLF_merged2_0_3_76_3_1_16GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_sizenext_virtual_gid), ~ (GLF_merged2_0_3_76_3_1_16GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_sizenext_virtual_gid)))))))) << uvec4(_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) | 0u), min(0u, 0u)), 0u, 0u, 0u)).xyz.y + _GLF_IDENTITY(1, _GLF_IDENTITY(clamp(1, 1, 1), (clamp(1, 1, 1)) / int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))), 1.0, 1.0, 0.0, determinant(mat2(1.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, float(mat4x2(0.0, 0.0, 1.0, 0.0, sin(0.0), 0.0, tan(0.0), 1.0)))) - 0.0), 1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0))))))).y, (injectionSwitch.y) / 1.0))))))), (GLF_merged2_0_3_76_3_1_16GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_sizenext_virtual_gid.xyz.y + 1) >> 0u) < subgroup_size)
        {
         atomicStore(checker[virtual_gid], read, 4, 64, 4);
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
           else
            {
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false)))))))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > (0 | 0), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_injected_loop_counter > (0 | 0), true), _GLF_IDENTITY(bvec2(bvec2(bvec2(_injected_loop_counter > (0 | 0), true))), bvec2(bvec4(bvec2(bvec2(bvec2(_injected_loop_counter > (0 | 0), true))), false, false))))), ! (! (bool(_GLF_IDENTITY(bvec2(_injected_loop_counter > (0 | 0), true), _GLF_IDENTITY(bvec2(bvec2(bvec2(_injected_loop_counter > (0 | 0), true))), bvec2(bvec4(bvec2(bvec2(bvec2(_injected_loop_counter > (0 | 0), true))), false, false)))))))))); _injected_loop_counter --)
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                {
                 do
                  {
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 1)); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
            }
          }
         subgroupAll(false);
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
            barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         atomicStore(buf[virtual_gid], _GLF_IDENTITY(read, _GLF_IDENTITY((_GLF_IDENTITY(read, (read) | (read))), max(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(read, (_GLF_IDENTITY(read, max(read, read))) * 1u), (read) | (read)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(read, _GLF_IDENTITY((read) | (read), clamp((read) | (read), _GLF_IDENTITY((read) | (read), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY((read) | (read), ~ (~ ((read) | (read)))), 0u | (_GLF_IDENTITY((read) | (read), ~ (~ ((read) | (read))))))))), (read) | (read)))), (true ? _GLF_IDENTITY(read, (read) | (read)) : _GLF_FUZZED(workgroup_id))), _GLF_IDENTITY(read, (_GLF_IDENTITY(read, min(_GLF_IDENTITY(read, (read) << 0u), read))) | (read)), _GLF_IDENTITY(read, (read) | (read))))), (_GLF_IDENTITY((_GLF_IDENTITY(read, (read) | (read))), (true ? (_GLF_IDENTITY(read, (read) | (read))) : _GLF_FUZZED(next_virtual_gid)))) << 0u), _GLF_IDENTITY((_GLF_IDENTITY(read, (read) | (read))), _GLF_IDENTITY(0u ^ (_GLF_IDENTITY((_GLF_IDENTITY(read, (read) | (read))), ((_GLF_IDENTITY(read, (read) | (read)))) + 0u)), (_GLF_IDENTITY(0u ^ (_GLF_IDENTITY((_GLF_IDENTITY(read, (read) | (read))), ((_GLF_IDENTITY(read, (read) | (read)))) + 0u)), min(0u ^ (_GLF_IDENTITY((_GLF_IDENTITY(read, (read) | (read))), ((_GLF_IDENTITY(read, (read) | (read)))) + 0u)), 0u ^ (_GLF_IDENTITY((_GLF_IDENTITY(read, (read) | (read))), ((_GLF_IDENTITY(read, (read) | (read)))) + 0u))))) << 0u)))) / 1u), 4, 64, _GLF_IDENTITY(4, (_GLF_IDENTITY(4, (4) | (4))) / 1));
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             do
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               subgroupAll(true);
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false)))))
                {
                }
               else
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)), injectionSwitch, injectionSwitch)))).y))))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                }
              }
             else
              {
              }
            }
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
              {
               barrier();
              }
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
        }
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  barrier();
}
