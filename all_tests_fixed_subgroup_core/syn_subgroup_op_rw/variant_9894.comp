#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_13 {
 ivec4 _f0;
 bool _f1;
} ;

struct _GLF_struct_12 {
 uvec3 _f0;
 bvec3 _f1;
 ivec3 _f2;
 ivec2 _f3;
 mat2x3 _f4;
} ;

struct _GLF_struct_14 {
 uvec2 _f0;
 _GLF_struct_12 _f1;
 float _f2;
 bool _f3;
 _GLF_struct_13 _f4;
 bvec4 _f5;
 ivec3 _f6;
} ;

struct _GLF_struct_10 {
 mat3 _f0;
 vec2 _f1;
 mat3x2 _f2;
 uvec4 _f3;
} ;

struct _GLF_struct_9 {
 bool _f0;
 mat4x2 _f1;
 uint _f2;
 bool _f3;
 bvec2 _f4;
 uint _f5;
 mat3x4 _f6;
} ;

struct _GLF_struct_11 {
 mat2x4 _f0;
 float _f1;
 _GLF_struct_9 _f2;
 _GLF_struct_10 _f3;
} ;

struct _GLF_struct_7 {
 uint _f0;
} ;

struct _GLF_struct_8 {
 _GLF_struct_7 _f0;
} ;

struct _GLF_struct_5 {
 bvec4 _f0;
 uint read;
} ;

struct _GLF_struct_4 {
 uint _f0;
 ivec4 _f1;
 mat3x4 _f2;
 uint _f3;
 vec3 _f4;
 uint _f5;
} ;

struct _GLF_struct_6 {
 _GLF_struct_4 _f0;
 _GLF_struct_5 _f1;
 vec3 _f2;
 mat4x2 _f3;
} ;

struct _GLF_struct_15 {
 bvec3 _f0;
 _GLF_struct_6 _f1;
 uint _f2;
 _GLF_struct_8 _f3;
 uvec4 _f4;
 _GLF_struct_11 _f5;
 _GLF_struct_14 _f6;
} ;

struct _GLF_struct_1 {
 mat2 _f0;
 bool _f1;
 mat4x2 _f2;
 uvec4 _f3;
 bvec4 _f4;
 float _f5;
} ;

struct _GLF_struct_2 {
 uvec4 _f0;
 vec2 _f1;
 _GLF_struct_1 _f2;
 bvec2 _f3;
} ;

struct _GLF_struct_0 {
 bvec2 _f0;
} ;

struct _GLF_struct_3 {
 mat4x2 _f0;
 uint subgroup_size;
 _GLF_struct_0 _f1;
 mat4x3 _f2;
 float _f3;
 uvec3 _f4;
 _GLF_struct_2 _f5;
 mat2x4 _f6;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 _GLF_struct_3 _GLF_struct_replacement_3 = _GLF_struct_3(mat4x2(1.0), gl_SubgroupSize, _GLF_struct_0(bvec2(true)), mat4x3(1.0), 1.0, uvec3(1u), _GLF_struct_2(uvec4(1u), vec2(1.0), _GLF_struct_1(mat2(1.0), true, mat4x2(1.0), uvec4(1u), bvec4(true), 1.0), bvec2(true)), mat2x4(1.0));
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = workgroup_base + subgroup_id * _GLF_struct_replacement_3.subgroup_size + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_id * _GLF_struct_replacement_3.subgroup_size + ((subgroup_local_id + 1) % _GLF_struct_replacement_3.subgroup_size);
 _GLF_struct_15 _GLF_struct_replacement_15 = _GLF_struct_15(bvec3(true), _GLF_struct_6(_GLF_struct_4(1u, ivec4(1), mat3x4(1.0), 1u, vec3(1.0), 1u), _GLF_struct_5(bvec4(true), atomicLoad(buf[virtual_gid], 4, 64, 0)), vec3(1.0), mat4x2(1.0)), 1u, _GLF_struct_8(_GLF_struct_7(1u)), uvec4(1u), _GLF_struct_11(mat2x4(1.0), 1.0, _GLF_struct_9(true, mat4x2(1.0), 1u, true, bvec2(true), 1u, mat3x4(1.0)), _GLF_struct_10(mat3(1.0), vec2(1.0), mat3x2(1.0), uvec4(1u))), _GLF_struct_14(uvec2(1u), _GLF_struct_12(uvec3(1u), bvec3(true), ivec3(1), ivec2(1), mat2x3(1.0)), 1.0, true, _GLF_struct_13(ivec4(1), true), bvec4(true), ivec3(1)));
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ int(_GLF_ONE(1.0, injectionSwitch.y)))); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
          }
         else
          {
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
      }
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     if(subgroup_local_id + 1 < _GLF_struct_replacement_3.subgroup_size)
      {
       do
        {
         atomicStore(checker[virtual_gid], _GLF_struct_replacement_15._f1._f1.read, 4, 64, 4);
        }
       while(_GLF_WRAPPED_LOOP(false));
       do
        {
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
            {
             subgroupAll(false);
            }
           else
            {
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               atomicStore(buf[virtual_gid], _GLF_struct_replacement_15._f1._f1.read, 4, 64, 4);
              }
             else
              {
              }
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & int(_GLF_ONE(1.0, injectionSwitch.y)))); _injected_loop_counter ++)
                  {
                   do
                    {
                     do
                      {
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                        {
                         do
                          {
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              {
                              }
                             else
                              {
                               do
                                {
                                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & int(_GLF_ONE(1.0, injectionSwitch.y)))); _injected_loop_counter ++)
                                  {
                                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                    {
                                     if(_GLF_WRAPPED_IF_TRUE(true))
                                      {
                                       subgroupAll(true);
                                      }
                                     else
                                      {
                                      }
                                    }
                                   else
                                    {
                                    }
                                  }
                                }
                               while(_GLF_WRAPPED_LOOP(false));
                              }
                            }
                           else
                            {
                            }
                          }
                         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                        }
                       else
                        {
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                }
               else
                {
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         else
          {
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
  }
}
