#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y)), ! (! (_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), bool(bvec2(false, true)))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-36.32), _GLF_FUZZED(-307.752)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).x, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-36.32), _GLF_FUZZED(-307.752)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).x, 1.0 * (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-36.32), _GLF_FUZZED(-307.752)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).x)), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-36.32), _GLF_FUZZED(-307.752)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).x)), max(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x)) > injectionSwitch.y)))))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), true, false)))))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) > injectionSwitch.y)), true, false)), ! (! (bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false))))))))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))), false || ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))))) && true))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
      return;
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, (false) || false))), ! (! (bool(bool(_GLF_IDENTITY(false, (false) || false)))))))))
        barrier();
       barrier();
      }
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), true)), true && (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), true)), false || (bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), true)))))))))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
     if(_GLF_DEAD(false))
      barrier();
    }
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(false))
    barrier();
  }
uint subgroup_size = 16;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
   if(_GLF_DEAD(false))
    barrier();
  }
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize, ((uvec3(1u, 1u, 1u) << _GLF_IDENTITY(uvec3(1u), uvec3(1u))) >> _GLF_IDENTITY(uvec3(1u), uvec3(1u))) * (gl_WorkGroupSize)).x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! _GLF_IDENTITY((! _GLF_IDENTITY((false), ((false)) && true)), ! (! ((! _GLF_IDENTITY((false), ((false)) && true))))))) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * sqrt(vec2(1.0, 1.0))).x < injectionSwitch.y)), ((_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! _GLF_IDENTITY((! _GLF_IDENTITY((false), ((false)) && true)), ! _GLF_IDENTITY((! ((! _GLF_IDENTITY((false), ((false)) && true)))), bool(bvec2((! ((! _GLF_IDENTITY((false), ((false)) && true)))), true)))))) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * sqrt(vec2(1.0, 1.0))).x < injectionSwitch.y))) && true))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true)))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat4(injectionSwitch.y, 0.0, 1.0, 1.0, 1.0, determinant(mat3(0.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 1.0, 1.0), vec4(0.0, 1.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0)), dot(vec4(1.0, 0.0, 1.0, 1.0), vec4(0.0, 1.0, 0.0, 0.0))), 0.0, log(1.0))), cos(0.0), abs(0.0), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0), (mat4(injectionSwitch.y, 0.0, 1.0, 1.0, 1.0, determinant(mat3(0.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(_GLF_IDENTITY(dot(vec4(1.0, 0.0, 1.0, 1.0), vec4(0.0, 1.0, 0.0, 0.0)), max(dot(vec4(1.0, 0.0, 1.0, 1.0), vec4(0.0, 1.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec4(1.0, 0.0, 1.0, 1.0), vec4(0.0, 1.0, 0.0, 0.0)), (_GLF_IDENTITY(dot(vec4(1.0, 0.0, 1.0, 1.0), vec4(0.0, 1.0, 0.0, 0.0)), float(vec3(dot(vec4(1.0, 0.0, 1.0, 1.0), vec4(0.0, 1.0, 0.0, 0.0)), 1.0, 1.0)))) - 0.0))), dot(vec4(1.0, 0.0, 1.0, 1.0), vec4(0.0, 1.0, 0.0, 0.0))), 0.0, log(1.0))), cos(0.0), abs(0.0), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0)) - mat4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))))))))
      return;
     return;
     if(_GLF_DEAD(false))
      barrier();
    }
   barrier();
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 uint workgroup_base = _GLF_IDENTITY(workgroup_size, ~ (~ (_GLF_IDENTITY(workgroup_size, max(workgroup_size, workgroup_size))))) * workgroup_id;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(vec4(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec3(1.0, 1.0, 1.0)), dot(vec3(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec3(1.0, 1.0, 1.0)))))), max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(vec4(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), 0.0, _GLF_IDENTITY(dot(_GLF_IDENTITY(vec3(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), (_GLF_IDENTITY(true, ! (! (true))) ? _GLF_IDENTITY(vec3(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), (vec3(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))) + vec3(0.0, 0.0, 0.0)) : _GLF_FUZZED(vec3(-431.609, 1.8, -7.2)))), vec3(1.0, 1.0, 1.0)), dot(vec3(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec3(1.0, 1.0, 1.0)))))), min(_GLF_IDENTITY(injectionSwitch, vec2(vec4(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), 0.0, _GLF_IDENTITY(_GLF_IDENTITY(dot(vec3(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec3(1.0, 1.0, 1.0)), dot(vec3(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec3(1.0, 1.0, 1.0))), max(_GLF_IDENTITY(dot(vec3(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec3(1.0, 1.0, 1.0)), dot(vec3(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec3(1.0, 1.0, 1.0))), _GLF_IDENTITY(_GLF_IDENTITY(dot(vec3(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec3(1.0, 1.0, 1.0)), dot(vec3(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec3(1.0, 1.0, 1.0))), (false ? _GLF_FUZZED(-29.66) : _GLF_IDENTITY(dot(vec3(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec3(1.0, 1.0, 1.0)), dot(vec3(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec3(1.0, 1.0, 1.0)))))))))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(vec4(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec3(1.0, 1.0, 1.0)), dot(vec3(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec3(1.0, 1.0, 1.0)))))), max(_GLF_IDENTITY(injectionSwitch, vec2(vec4(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec3(1.0, 1.0, 1.0)), dot(vec3(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec3(1.0, 1.0, 1.0)))))), _GLF_IDENTITY(injectionSwitch, vec2(vec4(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY(vec3(1.0, 1.0, 1.0), (true ? _GLF_IDENTITY(vec3(1.0, 1.0, 1.0), clamp(vec3(1.0, 1.0, 1.0), vec3(1.0, 1.0, 1.0), _GLF_IDENTITY(vec3(1.0, 1.0, 1.0), min(vec3(1.0, 1.0, 1.0), vec3(1.0, 1.0, 1.0))))) : _GLF_FUZZED(vec3(-9493.2519, -33.28, 34.17))))), dot(_GLF_IDENTITY(vec3(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), (vec3(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))) * mat3(_GLF_ONE(1.0, injectionSwitch.y))), vec3(1.0, 1.0, 1.0)))))))))), _GLF_IDENTITY(injectionSwitch, vec2(vec4(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), 0.0, _GLF_IDENTITY(dot(vec3(0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-445.135)), float(_GLF_IDENTITY(0.0, (0.0) - 0.0)), bool(true))), _GLF_ZERO(0.0, injectionSwitch.x)), vec3(1.0, 1.0, 1.0)), dot(vec3(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec3(1.0, 1.0, 1.0)))))))).y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y)))) && true))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(bvec3(false, false, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))))))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, false, false)), true && (bool(bvec4(false, true, false, false))))), true, true, true)))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 uint virtual_gid = workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u), uint(uint(subgroup_id * subgroup_size))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(subgroup_id))) ^ 1u, clamp(_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(subgroup_id))) ^ 1u, _GLF_IDENTITY(_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(subgroup_id))) ^ 1u, max(_GLF_IDENTITY(_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(subgroup_id))) ^ 1u, (_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(subgroup_id))) ^ 1u) ^ 0u), _GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(subgroup_id))) ^ 1u)), _GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(subgroup_id))) ^ 1u))), max((_GLF_IDENTITY(_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(subgroup_id))) ^ 1u, clamp(_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(subgroup_id))) ^ 1u, _GLF_IDENTITY(_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(subgroup_id))) ^ 1u, max(_GLF_IDENTITY(_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(subgroup_id))) ^ 1u, (_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(subgroup_id))) ^ 1u) ^ 0u), _GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(subgroup_id))) ^ 1u)), _GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(subgroup_id))) ^ 1u))), (_GLF_IDENTITY(_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(subgroup_id))) ^ 1u, clamp(_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(subgroup_id))) ^ 1u, _GLF_IDENTITY(_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(subgroup_id))) ^ 1u, max(_GLF_IDENTITY(_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(subgroup_id))) ^ 1u, (_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(subgroup_id))) ^ 1u) ^ 0u), _GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(subgroup_id))) ^ 1u)), _GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(subgroup_id))) ^ 1u))))), ((_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(subgroup_id))) ^ 1u)) >> 0u) | (subgroup_id * subgroup_size)) + subgroup_local_id;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id))) | 0u) + 1), ((subgroup_local_id + 1)) | 0u) % subgroup_size), ~ (~ (workgroup_base + subgroup_id * subgroup_size + (_GLF_IDENTITY((subgroup_local_id + 1), ((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) >> 0u))) | _GLF_IDENTITY(0u, (0u) | 0u)) % subgroup_size))));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4(injectionSwitch, 1.0, 0.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, tan(0.0), 0.0, 1.0), (false ? _GLF_FUZZED(mat4(-5.2, -3.9, 36.46, -5.9, -5.1, -9.5, 0.1, -0.6, 5686.2720, -0.5, -882.260, -239.863, 1.1, 2.8, 127.397, -7.9)) : mat4(injectionSwitch, 1.0, 0.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, tan(0.0), 0.0, 1.0))))).x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(3017.8613)), float(injectionSwitch.x), bool(true))))))) > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    barrier();
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint read = atomicLoad(buf[virtual_gid], _GLF_IDENTITY(4, max(_GLF_IDENTITY(4, min(_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), 1 * (4)), 4)), 4)), _GLF_IDENTITY(64, int(ivec4(64, 1, (-82504 & 0), _GLF_IDENTITY(1, (false ? _GLF_FUZZED(98777) : 1))))), 0);
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), true, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), true, false))))))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch)).y)))))))
    return;
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(1), ~ _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(~ _GLF_IDENTITY((uint(1)), ((_GLF_IDENTITY(uint(1), clamp(uint(1), _GLF_IDENTITY(uint(1), (uint(1)) | (uint(1))), _GLF_IDENTITY(uint(_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (false ? _GLF_FUZZED(67787) : 1)), 1))), min(uint(1), _GLF_IDENTITY(uint(1), (false ? _GLF_FUZZED(subgroup_id) : uint(1))))))))) >> 0u), max(_GLF_IDENTITY(~ _GLF_IDENTITY((uint(1)), ((_GLF_IDENTITY(uint(1), clamp(uint(1), _GLF_IDENTITY(uint(1), (uint(1)) | (uint(1))), _GLF_IDENTITY(uint(1), min(uint(1), _GLF_IDENTITY(uint(1), (false ? _GLF_FUZZED(subgroup_id) : uint(1))))))))) >> 0u), max(~ _GLF_IDENTITY((_GLF_IDENTITY(uint(1), max(uint(1), uint(1)))), ((_GLF_IDENTITY(uint(1), clamp(uint(1), _GLF_IDENTITY(uint(1), (uint(1)) | (uint(1))), _GLF_IDENTITY(uint(1), min(uint(1), _GLF_IDENTITY(uint(1), (false ? _GLF_FUZZED(subgroup_id) : uint(1))))))))) >> 0u), _GLF_IDENTITY(~ _GLF_IDENTITY((uint(1)), ((_GLF_IDENTITY(uint(1), clamp(uint(1), _GLF_IDENTITY(uint(1), (uint(1)) | _GLF_IDENTITY((uint(1)), (true ? (uint(1)) : _GLF_FUZZED(workgroup_id)))), _GLF_IDENTITY(uint(1), min(uint(1), _GLF_IDENTITY(uint(1), (false ? _GLF_FUZZED(subgroup_id) : uint(1))))))))) >> 0u), max(~ _GLF_IDENTITY((uint(1)), _GLF_IDENTITY(((_GLF_IDENTITY(uint(1), clamp(uint(1), _GLF_IDENTITY(uint(1), (uint(1)) | (uint(1))), _GLF_IDENTITY(uint(1), min(uint(1), _GLF_IDENTITY(uint(1), (false ? _GLF_FUZZED(subgroup_id) : uint(1))))))))) >> 0u, (_GLF_IDENTITY(((_GLF_IDENTITY(uint(1), clamp(uint(1), _GLF_IDENTITY(uint(1), (uint(1)) | (uint(1))), _GLF_IDENTITY(uint(1), min(uint(1), _GLF_IDENTITY(uint(1), (false ? _GLF_FUZZED(subgroup_id) : uint(1))))))))) >> 0u, (((_GLF_IDENTITY(_GLF_IDENTITY(uint(1), min(uint(1), uint(1))), clamp(uint(_GLF_IDENTITY(1, (0 >> _GLF_IDENTITY(int(4), int(4))) ^ (1))), _GLF_IDENTITY(uint(1), (uint(1)) | (uint(1))), _GLF_IDENTITY(uint(1), min(uint(1), _GLF_IDENTITY(_GLF_IDENTITY(uint(1), (false ? _GLF_FUZZED(subgroup_id) : uint(1))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(1), (false ? _GLF_FUZZED(subgroup_id) : uint(1)))), uint(uvec2(~ (_GLF_IDENTITY(uint(1), (false ? _GLF_FUZZED(subgroup_id) : uint(1)))), 1u))))))))))) >> 0u) - 0u)) / 1u)), ~ _GLF_IDENTITY((uint(1)), ((_GLF_IDENTITY(uint(1), clamp(uint(1), _GLF_IDENTITY(uint(1), (uint(1)) | (uint(1))), _GLF_IDENTITY(uint(1), min(uint(1), _GLF_IDENTITY(uint(1), (false ? _GLF_FUZZED(subgroup_id) : uint(1))))))))) >> 0u))))), ~ _GLF_IDENTITY((uint(1)), ((_GLF_IDENTITY(_GLF_IDENTITY(uint(1), clamp(uint(1), _GLF_IDENTITY(uint(1), (uint(1)) | (uint(1))), _GLF_IDENTITY(uint(1), min(uint(1), _GLF_IDENTITY(uint(1), (false ? _GLF_FUZZED(subgroup_id) : uint(1))))))), ~ (~ (_GLF_IDENTITY(uint(1), clamp(uint(1), _GLF_IDENTITY(uint(1), (uint(1)) | (uint(1))), _GLF_IDENTITY(uint(1), min(uint(1), _GLF_IDENTITY(uint(1), (false ? _GLF_FUZZED(subgroup_id) : uint(1)))))))))))) >> 0u))), uint(uvec2(~ (uint(1)), 0u)))), ((_GLF_IDENTITY(_GLF_IDENTITY(~ _GLF_IDENTITY((uint(1)), ((_GLF_IDENTITY(uint(1), clamp(uint(1), _GLF_IDENTITY(uint(1), (uint(1)) | (uint(1))), _GLF_IDENTITY(uint(_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (false ? _GLF_FUZZED(67787) : 1)), 1))), min(uint(1), _GLF_IDENTITY(uint(1), (false ? _GLF_FUZZED(subgroup_id) : uint(1))))))))) >> 0u), max(_GLF_IDENTITY(~ _GLF_IDENTITY((uint(1)), ((_GLF_IDENTITY(uint(1), clamp(uint(1), _GLF_IDENTITY(uint(1), (uint(1)) | (uint(1))), _GLF_IDENTITY(uint(1), min(uint(1), _GLF_IDENTITY(uint(1), (false ? _GLF_FUZZED(subgroup_id) : uint(1))))))))) >> 0u), max(~ _GLF_IDENTITY((_GLF_IDENTITY(uint(1), max(uint(1), uint(1)))), ((_GLF_IDENTITY(uint(1), clamp(uint(1), _GLF_IDENTITY(uint(1), (uint(1)) | (uint(1))), _GLF_IDENTITY(uint(1), min(uint(1), _GLF_IDENTITY(uint(1), (false ? _GLF_FUZZED(subgroup_id) : uint(1))))))))) >> 0u), _GLF_IDENTITY(~ _GLF_IDENTITY((uint(1)), ((_GLF_IDENTITY(uint(1), clamp(uint(1), _GLF_IDENTITY(uint(1), (uint(1)) | _GLF_IDENTITY((uint(1)), (true ? (uint(1)) : _GLF_FUZZED(workgroup_id)))), _GLF_IDENTITY(uint(1), min(uint(1), _GLF_IDENTITY(uint(1), (false ? _GLF_FUZZED(subgroup_id) : uint(1))))))))) >> 0u), max(~ _GLF_IDENTITY((uint(1)), _GLF_IDENTITY(((_GLF_IDENTITY(uint(1), clamp(uint(1), _GLF_IDENTITY(uint(1), (uint(1)) | (uint(1))), _GLF_IDENTITY(uint(1), min(uint(1), _GLF_IDENTITY(uint(1), (false ? _GLF_FUZZED(subgroup_id) : uint(1))))))))) >> 0u, (_GLF_IDENTITY(((_GLF_IDENTITY(uint(1), clamp(uint(1), _GLF_IDENTITY(uint(1), (uint(1)) | (uint(1))), _GLF_IDENTITY(uint(1), min(uint(1), _GLF_IDENTITY(uint(1), (false ? _GLF_FUZZED(subgroup_id) : uint(1))))))))) >> 0u, (((_GLF_IDENTITY(_GLF_IDENTITY(uint(1), min(uint(1), uint(1))), clamp(uint(_GLF_IDENTITY(1, (0 >> _GLF_IDENTITY(int(4), int(4))) ^ (1))), _GLF_IDENTITY(uint(1), (uint(1)) | (uint(1))), _GLF_IDENTITY(uint(1), min(uint(1), _GLF_IDENTITY(_GLF_IDENTITY(uint(1), (false ? _GLF_FUZZED(subgroup_id) : uint(1))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(1), (false ? _GLF_FUZZED(subgroup_id) : uint(1)))), uint(uvec2(~ (_GLF_IDENTITY(uint(1), (false ? _GLF_FUZZED(subgroup_id) : uint(1)))), 1u))))))))))) >> 0u) - 0u)) / 1u)), ~ _GLF_IDENTITY((uint(1)), ((_GLF_IDENTITY(uint(1), clamp(uint(1), _GLF_IDENTITY(uint(1), (uint(1)) | (uint(1))), _GLF_IDENTITY(uint(1), min(uint(1), _GLF_IDENTITY(uint(1), (false ? _GLF_FUZZED(subgroup_id) : uint(1))))))))) >> 0u))))), ~ _GLF_IDENTITY((uint(1)), ((_GLF_IDENTITY(_GLF_IDENTITY(uint(1), clamp(uint(1), _GLF_IDENTITY(uint(1), (uint(1)) | (uint(1))), _GLF_IDENTITY(uint(1), min(uint(1), _GLF_IDENTITY(uint(1), (false ? _GLF_FUZZED(subgroup_id) : uint(1))))))), ~ (~ (_GLF_IDENTITY(uint(1), clamp(uint(1), _GLF_IDENTITY(uint(1), (uint(1)) | (uint(1))), _GLF_IDENTITY(uint(1), min(uint(1), _GLF_IDENTITY(uint(1), (false ? _GLF_FUZZED(subgroup_id) : uint(1)))))))))))) >> 0u))), uint(uvec2(~ (uint(1)), 0u))))) - 0u), ((_GLF_IDENTITY(~ _GLF_IDENTITY((uint(1)), ((_GLF_IDENTITY(uint(1), clamp(uint(_GLF_IDENTITY(1, min(1, 1))), _GLF_IDENTITY(uint(1), (uint(1)) | (uint(1))), _GLF_IDENTITY(uint(1), min(uint(1), _GLF_IDENTITY(uint(1), (false ? _GLF_FUZZED(subgroup_id) : uint(1))))))))) >> 0u), uint(uvec2(~ (uint(1)), 0u))))) << 0u)), 4, _GLF_IDENTITY(64, max(64, 64)), 4);
 if(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, max(0u, 0u))) ^ 0u) + (subgroup_local_id)) + _GLF_IDENTITY(_GLF_IDENTITY(1, 0 ^ (1)), (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), bool(bvec3((false), false, false)))))), (! (false)) || false))), (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), bool(bvec3((false), false, false)))))), (! (false)) || false))), true && (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), bool(bvec3((false), false, false)))))), (! (false)) || false)))))) || false) ? _GLF_FUZZED(_GLF_IDENTITY(-56437, (-56437) | (-56437))) : 1)) < subgroup_size)
  {
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), true && (_GLF_DEAD(false))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, float(vec4(injectionSwitch.y, 1.0, 1.0, 1.0))), injectionSwitch.y))))))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   atomicStore(checker[_GLF_IDENTITY(virtual_gid, ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (virtual_gid), max(~ _GLF_IDENTITY((virtual_gid), min((virtual_gid), _GLF_IDENTITY((virtual_gid), ((virtual_gid)) / 1u))), ~ (_GLF_IDENTITY(virtual_gid, min(_GLF_IDENTITY(virtual_gid, (virtual_gid) | (virtual_gid)), _GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (virtual_gid) | (virtual_gid)), _GLF_IDENTITY((virtual_gid) ^ 0u, _GLF_IDENTITY(~ (~ ((virtual_gid) ^ 0u)), 0u + (_GLF_IDENTITY(~ (~ ((virtual_gid) ^ 0u)), (true ? ~ (~ ((virtual_gid) ^ 0u)) : _GLF_FUZZED(subgroup_id))))))))))))), _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(~ (virtual_gid), max(~ _GLF_IDENTITY((virtual_gid), min((virtual_gid), _GLF_IDENTITY((virtual_gid), ((virtual_gid)) / 1u))), ~ (_GLF_IDENTITY(virtual_gid, min(_GLF_IDENTITY(virtual_gid, (virtual_gid) | (virtual_gid)), _GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (virtual_gid) | (virtual_gid)), _GLF_IDENTITY((virtual_gid) ^ 0u, ~ (~ ((virtual_gid) ^ 0u)))))))))), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(~ (virtual_gid), max(~ _GLF_IDENTITY((virtual_gid), min((virtual_gid), _GLF_IDENTITY((virtual_gid), ((virtual_gid)) / 1u))), ~ (_GLF_IDENTITY(virtual_gid, min(_GLF_IDENTITY(virtual_gid, (virtual_gid) | (virtual_gid)), _GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (virtual_gid) | (virtual_gid)), _GLF_IDENTITY((virtual_gid) ^ 0u, ~ (~ ((virtual_gid) ^ 0u)))))))))), ~ (~ ((_GLF_IDENTITY(~ (virtual_gid), max(~ _GLF_IDENTITY((virtual_gid), min((virtual_gid), _GLF_IDENTITY((virtual_gid), ((virtual_gid)) / 1u))), ~ (_GLF_IDENTITY(virtual_gid, min(_GLF_IDENTITY(virtual_gid, (virtual_gid) | (virtual_gid)), _GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (virtual_gid) | (virtual_gid)), _GLF_IDENTITY((virtual_gid) ^ 0u, ~ (~ ((virtual_gid) ^ 0u))))))))))))))))) / 1u, (true ? (_GLF_IDENTITY((_GLF_IDENTITY(~ (virtual_gid), _GLF_IDENTITY(max(~ _GLF_IDENTITY((virtual_gid), min((virtual_gid), _GLF_IDENTITY((virtual_gid), ((virtual_gid)) / 1u))), ~ (_GLF_IDENTITY(virtual_gid, min(_GLF_IDENTITY(virtual_gid, (virtual_gid) | (virtual_gid)), _GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (virtual_gid) | (virtual_gid)), _GLF_IDENTITY((virtual_gid) ^ 0u, ~ (~ ((virtual_gid) ^ 0u)))))))), 0u | (_GLF_IDENTITY(max(~ _GLF_IDENTITY((virtual_gid), min((virtual_gid), _GLF_IDENTITY((virtual_gid), ((virtual_gid)) / 1u))), ~ (_GLF_IDENTITY(virtual_gid, min(_GLF_IDENTITY(virtual_gid, (virtual_gid) | (virtual_gid)), _GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (virtual_gid) | (virtual_gid)), _GLF_IDENTITY((virtual_gid) ^ 0u, ~ (~ ((virtual_gid) ^ 0u)))))))), (max(~ _GLF_IDENTITY((virtual_gid), min((virtual_gid), _GLF_IDENTITY((virtual_gid), ((virtual_gid)) / 1u))), ~ (_GLF_IDENTITY(virtual_gid, min(_GLF_IDENTITY(virtual_gid, (virtual_gid) | (virtual_gid)), _GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (virtual_gid) | (virtual_gid)), _GLF_IDENTITY((virtual_gid) ^ 0u, ~ (~ ((virtual_gid) ^ 0u))))))))) >> 0u))))), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid))), max(~ _GLF_IDENTITY((virtual_gid), min((virtual_gid), _GLF_IDENTITY((virtual_gid), ((virtual_gid)) / 1u))), ~ (_GLF_IDENTITY(virtual_gid, min(_GLF_IDENTITY(virtual_gid, (virtual_gid) | (virtual_gid)), _GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (virtual_gid) | (virtual_gid)), _GLF_IDENTITY(_GLF_IDENTITY((virtual_gid) ^ 0u, ~ (~ ((virtual_gid) ^ 0u))), (_GLF_IDENTITY(_GLF_IDENTITY((virtual_gid) ^ 0u, ~ (~ ((virtual_gid) ^ 0u))), uint(uint(_GLF_IDENTITY((virtual_gid) ^ 0u, ~ (~ ((virtual_gid) ^ 0u))))))) | (_GLF_IDENTITY((virtual_gid) ^ 0u, ~ (~ ((virtual_gid) ^ 0u)))))))))))), ~ (~ ((_GLF_IDENTITY(~ (virtual_gid), max(~ _GLF_IDENTITY((virtual_gid), min((virtual_gid), _GLF_IDENTITY((virtual_gid), ((virtual_gid)) / 1u))), ~ (_GLF_IDENTITY(virtual_gid, min(_GLF_IDENTITY(virtual_gid, (virtual_gid) | (virtual_gid)), _GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (virtual_gid) | (virtual_gid)), _GLF_IDENTITY((virtual_gid) ^ 0u, ~ (~ _GLF_IDENTITY(((virtual_gid) ^ 0u), (((virtual_gid) ^ 0u)) | (((virtual_gid) ^ 0u))))))))))))))))))) / 1u : _GLF_FUZZED(next_virtual_gid)))))], read, 4, _GLF_IDENTITY(64, (64) | (_GLF_IDENTITY(64, (64) << 0))), _GLF_IDENTITY(_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-47414))), (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-47414)))) ^ 0));
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) || false) || _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) && true)))) || false)))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))) && true)))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))))))
        barrier();
       return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
      }
     return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(true, bool(bool(true))) && (false))) && true), (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           return;
          }
         barrier();
        }
       return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), bool(bvec2(bool(false), true)))))))), bool(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), bool(bvec2(bool(false), true)))))))), true, true))))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   subgroupAll(false);
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       return;
       if(_GLF_DEAD(false))
        barrier();
      }
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), bool(bvec2(bool(bool(false)), true))))), (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), bool(bvec2(bool(bool(false)), true)))))) && true))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(false), false)), ! (! (bool(bvec2(_GLF_DEAD(false), false)))))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   atomicStore(buf[virtual_gid], read, 4, _GLF_IDENTITY(64, 0 | _GLF_IDENTITY((64), ((64)) ^ (0 | 0))), 4);
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     return;
    }
   subgroupAll(true);
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, false, false, _GLF_IDENTITY(false, ! (! (false))))))) && true), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))), mix(vec2(((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))))[0], _GLF_FUZZED(-1.7)), vec2(_GLF_FUZZED(-3.5), ((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))))[1]), bvec2(false, true))) / vec2(1.0, 1.0)).x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))), mix(vec2(((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(vec2(vec3(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), abs(1.0))), (true ? vec2(vec3(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), abs(1.0))) : _GLF_FUZZED(injectionSwitch))))))[0], _GLF_FUZZED(-1.7)), vec2(_GLF_FUZZED(-3.5), ((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))))[1]), bvec2(false, true))) / vec2(1.0, 1.0)).x > injectionSwitch.y))))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
}
