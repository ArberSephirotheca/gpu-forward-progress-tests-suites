#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_14 {
 vec3 _f0;
 bvec3 _f1;
} ;

struct _GLF_struct_13 {
 mat4x3 _f0;
 uint _f1;
 uvec4 _f2;
} ;

struct _GLF_struct_12 {
 mat4 _f0;
 vec2 _f1;
} ;

struct _GLF_struct_11 {
 mat2x4 _f0;
 uvec4 _f1;
 uint _f2;
} ;

struct _GLF_struct_10 {
 mat3x4 _f0;
 int _f1;
 uint num_workgroup;
 mat4x3 _f2;
 int _f3;
 uint _f4;
} ;

struct _GLF_struct_15 {
 _GLF_struct_10 _f0;
 _GLF_struct_11 _f1;
 ivec3 _f2;
 _GLF_struct_12 _f3;
 _GLF_struct_13 _f4;
 _GLF_struct_14 _f5;
} ;

struct _GLF_struct_8 {
 vec4 _f0;
 vec2 _f1;
 mat4 _f2;
 ivec3 _f3;
 mat4 _f4;
} ;

struct _GLF_struct_7 {
 bvec2 _f0;
 vec4 _f1;
} ;

struct _GLF_struct_6 {
 ivec2 _f0;
 ivec4 _f1;
 vec2 _f2;
} ;

struct _GLF_struct_9 {
 _GLF_struct_6 _f0;
 ivec3 _f1;
 uint _f2;
 mat3 _f3;
 _GLF_struct_7 _f4;
 mat4x3 _f5;
 _GLF_struct_8 _f6;
} ;

struct _GLF_struct_16 {
 _GLF_struct_9 _f0;
 _GLF_struct_15 _f1;
 mat4 _f2;
 mat4x2 _f3;
} ;

struct _GLF_struct_3 {
 mat4x2 _f0;
 mat4x3 _f1;
 mat2x4 _f2;
 int _f3;
 bool _f4;
 mat3 _f5;
} ;

struct _GLF_struct_2 {
 mat3 _f0;
 uvec4 _f1;
 uint virtual_gid;
 mat2x4 _f2;
 ivec2 _f3;
} ;

struct _GLF_struct_1 {
 bool _f0;
 uint _f1;
 mat2x4 _f2;
 mat2x4 _f3;
 bvec2 _f4;
 mat4x3 _f5;
 mat2x3 _f6;
} ;

struct _GLF_struct_4 {
 bvec2 _f0;
 _GLF_struct_1 _f1;
 _GLF_struct_2 _f2;
 _GLF_struct_3 _f3;
 int _f4;
 float _f5;
} ;

struct _GLF_struct_0 {
 float _f0;
 mat2 _f1;
 bvec4 _f2;
} ;

struct _GLF_struct_5 {
 _GLF_struct_0 _f0;
 _GLF_struct_4 _f1;
 uvec2 _f2;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  barrier();
 uvec2 GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id;
 uvec2 GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id;
 uvec4 GLF_merged2_0_2_49_2_2_53GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidGLF_merged2_0_1_16_1_1_12next_virtual_gidworkgroup_id;
 uvec3 GLF_merged3_0_1_4_1_1_11_2_1_13readsubgroup_idsubgroup_size;
 uvec2 GLF_merged2_0_1_16_1_1_12next_virtual_gidworkgroup_id;
 GLF_merged2_0_2_49_2_2_53GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidGLF_merged2_0_1_16_1_1_12next_virtual_gidworkgroup_id.zw = GLF_merged2_0_1_16_1_1_12next_virtual_gidworkgroup_id;
 if(_GLF_DEAD(false))
  return;
 uvec4 GLF_merged3_0_2_40_2_1_4_3_1_17GLF_merged2_0_1_4_1_1_12readworkgroup_idreadsubgroup_local_id;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
  return;
 uvec2 GLF_merged2_0_1_4_1_1_12readworkgroup_id;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 for(int _injected_loop_counter = _GLF_IDENTITY(1, min(1, 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   GLF_merged3_0_2_40_2_1_4_3_1_17GLF_merged2_0_1_4_1_1_12readworkgroup_idreadsubgroup_local_id.xy = GLF_merged2_0_1_4_1_1_12readworkgroup_id;
  }
 uvec4 GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id;
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false))))))))))))))))) || false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
    }
  }
 for(int _injected_loop_counter = _GLF_IDENTITY(0, _GLF_IDENTITY((0), max(_GLF_IDENTITY((_GLF_IDENTITY(0, int(_GLF_IDENTITY(int(0), ~ (~ (int(0))))))), clamp((0), (0), _GLF_IDENTITY((0), max((0), (0))))), (0))) * (1 | 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(false, ! (! (false)))) && true), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(false, ! (! (false)))) && true))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(false, ! (! (false)))) && true))), false || (bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(false, ! (! (false)))) && true))))), true, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(false, ! (! (false)))) && true))), false || (bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(false, ! (! (false)))) && true))))), true, false), false))))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         break;
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
    }
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uvec2 GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gid;
 GLF_merged2_0_2_49_2_2_53GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidGLF_merged2_0_1_16_1_1_12next_virtual_gidworkgroup_id.xy = GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gid;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
   barrier();
  }
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))), true, true)))))
    continue;
   if(_GLF_DEAD(false))
    return;
   GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id.xy = GLF_merged2_0_2_49_2_2_53GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidGLF_merged2_0_1_16_1_1_12next_virtual_gidworkgroup_id.xy;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       barrier();
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))));
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(_GLF_IDENTITY(vec2(9.9, -126.787), _GLF_IDENTITY(vec2(mat2x4(_GLF_IDENTITY(vec2(9.9, -126.787), vec2(vec3(vec2(9.9, -126.787), 0.0))), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0)), mix(vec2(_GLF_FUZZED(737.501), (vec2(mat2x4(_GLF_IDENTITY(vec2(9.9, -126.787), vec2(vec3(vec2(9.9, -126.787), 0.0))), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0)))[1]), vec2((vec2(mat2x4(_GLF_IDENTITY(vec2(9.9, -126.787), vec2(vec3(vec2(9.9, -126.787), 0.0))), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0)))[0], _GLF_FUZZED(-1.3)), bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) : injectionSwitch)))).x > injectionSwitch.y))))
    break;
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false))))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((injectionSwitch.x) + 0.0, cos(0.0) * ((injectionSwitch.x) + 0.0))), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(vec3(0.0, 1.0, 0.0), mix(vec3(_GLF_FUZZED(-1105.7466), (vec3(0.0, 1.0, 0.0))[1], (vec3(0.0, 1.0, 0.0))[2]), vec3((vec3(0.0, 1.0, 0.0))[0], _GLF_FUZZED(4.7), _GLF_FUZZED(2.3)), bvec3(true, false, false)))))), injectionSwitch.x)) > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), injectionSwitch.x)) > injectionSwitch.y)) || false)))))), (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(vec2(-64.65, -2207.1277))), (false ? _GLF_FUZZED(vec2(-3.7, -5.8)) : (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(vec2(-64.65, -2207.1277)))))), max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, _GLF_IDENTITY(0.0, float(vec3(0.0, 1.0, 1.0))))), _GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, 0.0, 1.0, 1.0))))).y))))))) || false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       do
        {
         return;
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
            continue;
           do
            {
             return;
            }
           while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false || (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))));
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, max(0, 0)), 0))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      return;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.x = subgroup_id;
 do
  {
   _GLF_IDENTITY(GLF_merged3_0_1_4_1_1_11_2_1_13readsubgroup_idsubgroup_size.y = GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.x, 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_4_1_1_11_2_1_13readsubgroup_idsubgroup_size.y = GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.x, (GLF_merged3_0_1_4_1_1_11_2_1_13readsubgroup_idsubgroup_size.y = GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.x) / 1u), (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_4_1_1_11_2_1_13readsubgroup_idsubgroup_size.y = GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.x, (GLF_merged3_0_1_4_1_1_11_2_1_13readsubgroup_idsubgroup_size.y = GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.x) / 1u), 0u | (_GLF_IDENTITY(GLF_merged3_0_1_4_1_1_11_2_1_13readsubgroup_idsubgroup_size.y = GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.x, (GLF_merged3_0_1_4_1_1_11_2_1_13readsubgroup_idsubgroup_size.y = GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.x) / 1u)))) >> 0u)));
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-292.862, -8.8)) : injectionSwitch)).y))));
 do
  {
   GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id.z = GLF_merged3_0_1_4_1_1_11_2_1_13readsubgroup_idsubgroup_size.y;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, true && (true))))), false, true))), (true) || false)) && true)))
        {
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       barrier();
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
      }
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, clamp(0, 0, 0)), 0)), (0) * 1); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != _GLF_IDENTITY(1, int(ivec4(1, 1, 1, _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (int(_GLF_ZERO(0.0, injectionSwitch.x))) | (int(_GLF_ZERO(0.0, injectionSwitch.x))))))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_injected_loop_counter, 0 ^ (_injected_loop_counter)) != _GLF_IDENTITY(1, int(ivec4(_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), 0 ^ (~ (1))))), 1)), 1, 1, int(_GLF_ZERO(0.0, injectionSwitch.x))))), true)), true && (_GLF_IDENTITY(bool(bvec2(_injected_loop_counter != _GLF_IDENTITY(1, int(ivec4(1, 1, 1, int(_GLF_ZERO(0.0, injectionSwitch.x))))), true)), (bool(bvec2(_injected_loop_counter != _GLF_IDENTITY(1, int(ivec4(1, 1, 1, int(_GLF_ZERO(0.0, injectionSwitch.x))))), true))) || false))))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          break;
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          continue;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0))).y), bool(_GLF_IDENTITY(bool((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0))).y)), true && (bool((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0))).y)))))))));
uint subgroup_size = 16;
 _GLF_IDENTITY(GLF_merged3_0_1_4_1_1_11_2_1_13readsubgroup_idsubgroup_size.z = subgroup_size, 0u ^ (GLF_merged3_0_1_4_1_1_11_2_1_13readsubgroup_idsubgroup_size.z = subgroup_size));
 uint subgroup_local_id = gl_SubgroupInvocationID;
 GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.y = subgroup_local_id;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     GLF_merged3_0_2_40_2_1_4_3_1_17GLF_merged2_0_1_4_1_1_12readworkgroup_idreadsubgroup_local_id.w = GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.y;
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))))))
    return;
   GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id.w = _GLF_IDENTITY(GLF_merged3_0_2_40_2_1_4_3_1_17GLF_merged2_0_1_4_1_1_12readworkgroup_idreadsubgroup_local_id.w, clamp(GLF_merged3_0_2_40_2_1_4_3_1_17GLF_merged2_0_1_4_1_1_12readworkgroup_idreadsubgroup_local_id.w, _GLF_IDENTITY(GLF_merged3_0_2_40_2_1_4_3_1_17GLF_merged2_0_1_4_1_1_12readworkgroup_idreadsubgroup_local_id.w, (GLF_merged3_0_2_40_2_1_4_3_1_17GLF_merged2_0_1_4_1_1_12readworkgroup_idreadsubgroup_local_id.w) * (1u ^ 0u)), _GLF_IDENTITY(GLF_merged3_0_2_40_2_1_4_3_1_17GLF_merged2_0_1_4_1_1_12readworkgroup_idreadsubgroup_local_id.w, uint(uvec4(GLF_merged3_0_2_40_2_1_4_3_1_17GLF_merged2_0_1_4_1_1_12readworkgroup_idreadsubgroup_local_id.w, (1u & 1u), 0u, 0u)))));
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
    }
  }
 _GLF_struct_16 _GLF_struct_replacement_16 = _GLF_struct_16(_GLF_struct_9(_GLF_struct_6(ivec2(1), ivec4(1), vec2(1.0)), ivec3(1), _GLF_IDENTITY(1u, (1u) >> 0u), mat3(1.0), _GLF_struct_7(bvec2(true), vec4(1.0)), mat4x3(1.0), _GLF_struct_8(vec4(1.0), vec2(1.0), mat4(1.0), ivec3(1), mat4(1.0))), _GLF_struct_15(_GLF_struct_10(mat3x4(1.0), 1, gl_NumWorkGroups.x, mat4x3(1.0), 1, 1u), _GLF_struct_11(mat2x4(1.0), uvec4(1u), 1u), ivec3(1), _GLF_struct_12(mat4(1.0), vec2(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-25.96)), float(1.0), bool(true))))), _GLF_struct_13(mat4x3(1.0), 1u, uvec4(1u)), _GLF_struct_14(vec3(_GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(_GLF_FUZZED(9972.7087), mix(float(_GLF_FUZZED(90.04)), float(_GLF_FUZZED(9972.7087)), bool(true)))), float(1.0), _GLF_IDENTITY(bool(true), false || (bool(true)))))), bvec3(true))), mat4(1.0), mat4x2(_GLF_IDENTITY(1.0, _GLF_IDENTITY(max(1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(327.732)), bool(false)))), min(_GLF_IDENTITY(max(1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(327.732)), bool(false)))), clamp(max(1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(327.732)), bool(false)))), max(1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(9.4)), bool(false))), mix(float(1.0), float(_GLF_FUZZED(327.732)), bool(false)))), max(1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(327.732)), bool(false)))))), _GLF_IDENTITY(max(1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(327.732)), bool(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (_GLF_IDENTITY(false, ! (! (false)))), false || (false || (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(false, ! (! (false)))) && true)))))))))))), max(max(1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(327.732)), bool(false)))), max(1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(327.732)), bool(false)))))))))));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id.xy.x = _GLF_struct_replacement_16._f1._f0.num_workgroup;
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(mat3x2(injectionSwitch.x, 1.0, 0.0, 1.0, 1.0, 1.0))) > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x, float(mat3x2(injectionSwitch.x, 1.0, 0.0, 1.0, 1.0, 1.0))) > injectionSwitch.y))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         break;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       return;
      }
    }
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 do
  {
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = int(_GLF_ZERO(_GLF_IDENTITY(0.0, (0.0) / 1.0), injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
  }
 uint workgroup_id = gl_WorkGroupID.x;
 GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.y = workgroup_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 GLF_merged2_0_2_49_2_2_53GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidGLF_merged2_0_1_16_1_1_12next_virtual_gidworkgroup_id.zw.y = GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.y;
 GLF_merged3_0_2_40_2_1_4_3_1_17GLF_merged2_0_1_4_1_1_12readworkgroup_idreadsubgroup_local_id.xy.y = _GLF_IDENTITY(GLF_merged2_0_2_49_2_2_53GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidGLF_merged2_0_1_16_1_1_12next_virtual_gidworkgroup_id.zw.y, _GLF_IDENTITY((_GLF_IDENTITY(GLF_merged2_0_2_49_2_2_53GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidGLF_merged2_0_1_16_1_1_12next_virtual_gidworkgroup_id.zw.y, 1u * (GLF_merged2_0_2_49_2_2_53GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidGLF_merged2_0_1_16_1_1_12next_virtual_gidworkgroup_id.zw.y))) | (GLF_merged2_0_2_49_2_2_53GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidGLF_merged2_0_1_16_1_1_12next_virtual_gidworkgroup_id.zw.y), uint(uvec4(_GLF_IDENTITY((_GLF_IDENTITY(GLF_merged2_0_2_49_2_2_53GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidGLF_merged2_0_1_16_1_1_12next_virtual_gidworkgroup_id.zw.y, 1u * (GLF_merged2_0_2_49_2_2_53GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidGLF_merged2_0_1_16_1_1_12next_virtual_gidworkgroup_id.zw.y))) | (GLF_merged2_0_2_49_2_2_53GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidGLF_merged2_0_1_16_1_1_12next_virtual_gidworkgroup_id.zw.y), clamp((_GLF_IDENTITY(GLF_merged2_0_2_49_2_2_53GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidGLF_merged2_0_1_16_1_1_12next_virtual_gidworkgroup_id.zw.y, 1u * (GLF_merged2_0_2_49_2_2_53GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidGLF_merged2_0_1_16_1_1_12next_virtual_gidworkgroup_id.zw.y))) | (GLF_merged2_0_2_49_2_2_53GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidGLF_merged2_0_1_16_1_1_12next_virtual_gidworkgroup_id.zw.y), (_GLF_IDENTITY(GLF_merged2_0_2_49_2_2_53GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidGLF_merged2_0_1_16_1_1_12next_virtual_gidworkgroup_id.zw.y, 1u * (GLF_merged2_0_2_49_2_2_53GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidGLF_merged2_0_1_16_1_1_12next_virtual_gidworkgroup_id.zw.y))) | (GLF_merged2_0_2_49_2_2_53GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidGLF_merged2_0_1_16_1_1_12next_virtual_gidworkgroup_id.zw.y), (_GLF_IDENTITY(GLF_merged2_0_2_49_2_2_53GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidGLF_merged2_0_1_16_1_1_12next_virtual_gidworkgroup_id.zw.y, 1u * _GLF_IDENTITY((_GLF_IDENTITY(GLF_merged2_0_2_49_2_2_53GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidGLF_merged2_0_1_16_1_1_12next_virtual_gidworkgroup_id, max(GLF_merged2_0_2_49_2_2_53GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidGLF_merged2_0_1_16_1_1_12next_virtual_gidworkgroup_id, GLF_merged2_0_2_49_2_2_53GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidGLF_merged2_0_1_16_1_1_12next_virtual_gidworkgroup_id)).zw.y), ((_GLF_IDENTITY(GLF_merged2_0_2_49_2_2_53GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidGLF_merged2_0_1_16_1_1_12next_virtual_gidworkgroup_id, max(GLF_merged2_0_2_49_2_2_53GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidGLF_merged2_0_1_16_1_1_12next_virtual_gidworkgroup_id, GLF_merged2_0_2_49_2_2_53GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidGLF_merged2_0_1_16_1_1_12next_virtual_gidworkgroup_id)).zw.y)) ^ (1u ^ 1u)))) | (GLF_merged2_0_2_49_2_2_53GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidGLF_merged2_0_1_16_1_1_12next_virtual_gidworkgroup_id.zw.y))), 0u, 0u, 0u))));
 uint workgroup_base = workgroup_size * GLF_merged3_0_2_40_2_1_4_3_1_17GLF_merged2_0_1_4_1_1_12readworkgroup_idreadsubgroup_local_id.xy.y;
 GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.x = workgroup_base;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, bool(bvec2(_GLF_IDENTITY((false), true && (_GLF_IDENTITY((false), ! (! ((false)))))) || false, true))))))))))))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, true && (false)), true, false, true)), bool(bool(bool(bvec4(_GLF_IDENTITY(false, true && (false)), true, false, true)))))))), ! (! (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, true && (false))))))))))
    return;
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false)))));
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
            return;
          }
        }
       if(_GLF_DEAD(false))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       barrier();
      }
    }
  }
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), (_GLF_DEAD(false)) || false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           return;
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     for(int _injected_loop_counter = (((0 << _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, min(4, 4))))) ^ 0) << _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       return;
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
    return;
  }
 _GLF_struct_5 _GLF_struct_replacement_5 = _GLF_struct_5(_GLF_struct_0(1.0, mat2(1.0), bvec4(true)), _GLF_struct_4(bvec2(true), _GLF_struct_1(true, 1u, mat2x4(1.0), mat2x4(1.0), bvec2(true), mat4x3(1.0), mat2x3(1.0)), _GLF_struct_2(mat3(1.0), uvec4(1u), _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.x, uint(uint(GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.x))), min(_GLF_IDENTITY(GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.x, (false ? _GLF_FUZZED(workgroup_size) : _GLF_IDENTITY(GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.x, (GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.x) | (_GLF_IDENTITY(GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.x, ~ (~ _GLF_IDENTITY((GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.x), uint(uvec4((GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.x), 0u, 0u, 1u))))))))), GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.x)) + _GLF_IDENTITY(GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id, (uvec4(0u, 0u, 0u, 0u) << _GLF_IDENTITY(uvec4(0u), uvec4(0u))) | (GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id)).z * GLF_merged3_0_1_4_1_1_11_2_1_13readsubgroup_idsubgroup_size.z + _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id, min(GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id, GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id)), (GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id) | uvec4(0u, 0u, 0u, 0u)).w, mat2x4(1.0), ivec2(1)), _GLF_struct_3(mat4x2(1.0), mat4x3(1.0), mat2x4(1.0), 1, true, _GLF_IDENTITY(mat3(1.0), _GLF_IDENTITY(mat3(1.0) * (mat3(1.0)), (mat3(1.0) * (mat3(1.0))) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)))), 1, 1.0), uvec2(1u));
 for(int _injected_loop_counter = (67218 & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   do
    {
     GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id.xy.y = _GLF_struct_replacement_5._f1._f2.virtual_gid;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bool(false))))))));
   if(_GLF_DEAD(false))
    barrier();
  }
 uint next_virtual_gid = _GLF_IDENTITY(GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.x + GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id.z * GLF_merged3_0_1_4_1_1_11_2_1_13readsubgroup_idsubgroup_size.z, (GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.x + GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id.z * GLF_merged3_0_1_4_1_1_11_2_1_13readsubgroup_idsubgroup_size.z) / 1u) + _GLF_IDENTITY(((_GLF_IDENTITY(GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id, uvec4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) ^ (GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id)).w + 1) % _GLF_IDENTITY(GLF_merged3_0_1_4_1_1_11_2_1_13readsubgroup_idsubgroup_size.z, (GLF_merged3_0_1_4_1_1_11_2_1_13readsubgroup_idsubgroup_size.z) ^ 0u)), max(_GLF_IDENTITY(((_GLF_IDENTITY(GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id, uvec4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) ^ (GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id)).w + 1) % _GLF_IDENTITY(GLF_merged3_0_1_4_1_1_11_2_1_13readsubgroup_idsubgroup_size.z, (GLF_merged3_0_1_4_1_1_11_2_1_13readsubgroup_idsubgroup_size.z) ^ 0u)), uint(uvec3(((_GLF_IDENTITY(GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id, uvec4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) ^ (GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id)).w + 1) % _GLF_IDENTITY(GLF_merged3_0_1_4_1_1_11_2_1_13readsubgroup_idsubgroup_size.z, (GLF_merged3_0_1_4_1_1_11_2_1_13readsubgroup_idsubgroup_size.z) ^ 0u)), 0u, 0u))), ((_GLF_IDENTITY(GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id, uvec4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) ^ (GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id)).w + 1) % _GLF_IDENTITY(GLF_merged3_0_1_4_1_1_11_2_1_13readsubgroup_idsubgroup_size.z, (GLF_merged3_0_1_4_1_1_11_2_1_13readsubgroup_idsubgroup_size.z) ^ 0u))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    return;
  }
 GLF_merged2_0_2_49_2_2_53GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidGLF_merged2_0_1_16_1_1_12next_virtual_gidworkgroup_id.zw.x = _GLF_IDENTITY(next_virtual_gid, ~ (~ (next_virtual_gid)));
 uint read = atomicLoad(buf[GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id.xy.y], 4, 64, 0);
 if(_GLF_DEAD(false))
  return;
 GLF_merged3_0_1_4_1_1_11_2_1_13readsubgroup_idsubgroup_size.x = read;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)).x > injectionSwitch.y)))))))
  return;
 GLF_merged3_0_2_40_2_1_4_3_1_17GLF_merged2_0_1_4_1_1_12readworkgroup_idreadsubgroup_local_id.z = GLF_merged3_0_1_4_1_1_11_2_1_13readsubgroup_idsubgroup_size.x;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   GLF_merged3_0_2_40_2_1_4_3_1_17GLF_merged2_0_1_4_1_1_12readworkgroup_idreadsubgroup_local_id.xy.x = GLF_merged3_0_2_40_2_1_4_3_1_17GLF_merged2_0_1_4_1_1_12readworkgroup_idreadsubgroup_local_id.z;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & _GLF_IDENTITY(ivec2(-64561, 95387).s, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ _GLF_IDENTITY((ivec2(-64561, 95387).s), max((ivec2(-64561, 95387).s), (ivec2(-64561, 95387).s))), (~ _GLF_IDENTITY((ivec2(-64561, 95387).s), max((ivec2(-64561, 95387).s), (ivec2(-64561, 95387).s)))) ^ 0), max(~ (_GLF_IDENTITY(ivec2(-64561, 95387).s, clamp(_GLF_IDENTITY(ivec2(-64561, 95387).s, ~ (_GLF_IDENTITY(~ (ivec2(-64561, 95387).s), max(~ (ivec2(-64561, 95387).s), ~ (ivec2(-64561, 95387).s))))), _GLF_IDENTITY(ivec2(-64561, 95387).s, max(ivec2(-64561, 95387).s, ivec2(-64561, 95387).s)), ivec2(-64561, 95387).s))), _GLF_IDENTITY(~ (ivec2(-64561, 95387).s), max(~ (ivec2(-64561, 95387).s), _GLF_IDENTITY(~ (ivec2(-64561, 95387).s), (~ (ivec2(-64561, 95387).s)) + 0))))))))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      break;
     return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      break;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec4(false, true, false, false))))))))
    return;
  }
 atomicStore(buf[GLF_merged2_0_2_49_2_2_53GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidGLF_merged2_0_1_16_1_1_12next_virtual_gidworkgroup_id.zw.x], uint(1), 4, 64, 4);
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id, (uvec4(1u, 1u, 1u, 1u) ^ uvec4(1u, 1u, 1u, 1u)) + (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id, clamp(GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id, _GLF_IDENTITY(GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id, (GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id) | (GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id)), GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id)), (false ? _GLF_FUZZED(GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id) : GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id)))).w + _GLF_IDENTITY(1, int(ivec4(1, 1, 0, 0))), 0u ^ (GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id.w + 1)), max(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id, (uvec4(1u, 1u, 1u, 1u) ^ uvec4(1u, 1u, 1u, 1u)) + (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id, clamp(GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id, _GLF_IDENTITY(GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id, (GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id) | (GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id)), GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id)), (false ? _GLF_FUZZED(GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id) : GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id)))).w + _GLF_IDENTITY(1, int(ivec4(1, 1, 0, 0))), 0u ^ (GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id.w + 1)), _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id, (uvec4(1u, 1u, 1u, 1u) ^ uvec4(1u, 1u, 1u, 1u)) + (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id, clamp(GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id, _GLF_IDENTITY(GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id, (GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id) | (GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id)), GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id)), (false ? _GLF_FUZZED(GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id) : GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id)))).w + _GLF_IDENTITY(1, int(ivec4(1, 1, 0, 0))), 0u ^ (GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id.w + 1)))) < GLF_merged3_0_1_4_1_1_11_2_1_13readsubgroup_idsubgroup_size.z)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)) - 0.0)))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) | (0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      return;
    }
   atomicStore(checker[GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id.xy.y], _GLF_IDENTITY(GLF_merged3_0_2_40_2_1_4_3_1_17GLF_merged2_0_1_4_1_1_12readworkgroup_idreadsubgroup_local_id.xy.x, (_GLF_IDENTITY(GLF_merged3_0_2_40_2_1_4_3_1_17GLF_merged2_0_1_4_1_1_12readworkgroup_idreadsubgroup_local_id.xy.x, 0u + (GLF_merged3_0_2_40_2_1_4_3_1_17GLF_merged2_0_1_4_1_1_12readworkgroup_idreadsubgroup_local_id.xy.x))) - 0u), 4, 64, 4);
   subgroupAll(false);
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, true)))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, true)))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, true)))), (_GLF_IDENTITY(false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, true)))), bool(bvec2(_GLF_IDENTITY(false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, true)))), bool(bvec2(false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, true)))), false))), false)))) && true))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) || false)) && true)))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, false || (true)), (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
   atomicStore(buf[GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id.xy.y], GLF_merged3_0_2_40_2_1_4_3_1_17GLF_merged2_0_1_4_1_1_12readworkgroup_idreadsubgroup_local_id.xy.x, 4, 64, 4);
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(9.6), _GLF_FUZZED(6231.5132)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).x < injectionSwitch.y)), true)))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true)))))
      barrier();
     barrier();
    }
   for(int _injected_loop_counter = _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, max(1, 1))) * 1)), int(_GLF_IDENTITY(1, _GLF_IDENTITY((0 | 0) + _GLF_IDENTITY((_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 1 * (_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | 0)) / 1), 1))))) | (1))), max((_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 1 * (_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | 0)) / 1), 1))))) | (1))), (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 1 * (_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | 0)) / 1), 1))))) | (1))))), _GLF_IDENTITY(1, 1 * (1)) * ((0 | 0) + _GLF_IDENTITY((_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 1 * (_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | 0)) / 1), 1))))) | (1))), max((_GLF_IDENTITY(1, (_GLF_IDENTITY(1, _GLF_IDENTITY(1 * (_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | 0)) / 1), 1))), max(_GLF_IDENTITY(1 * (_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | 0)) / 1), 1))), (1 * (_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | 0)) / 1), 1)))) | (1 * (_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | 0)) / 1), 1))))), 1 * (_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | 0)) / 1), 1))))))) | (1))), (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 1 * (_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | 0)) / 1), 1))))) | (1))))))))))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) + 0))), (((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), _GLF_IDENTITY((int(1)), clamp(_GLF_IDENTITY((int(1)), ((int(1))) << 0), (int(1)), (int(1)))) + 0)))) | int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-3268.1762) : _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0))))) >> _GLF_IDENTITY(int(8), int(8)), (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(8, _GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(8, (8) | (8)), 1)), ~ (_GLF_IDENTITY(~ (int(ivec2(_GLF_IDENTITY(8, (8) | (8)), 1))), (~ (int(ivec2(_GLF_IDENTITY(8, (8) | _GLF_IDENTITY((8), min((8), (8)))), 1)))) * 1))))), 0 ^ _GLF_IDENTITY((int(8)), ((int(8))) - 0)), int(8))) | 0))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bool(! (false)))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bool(! (false)))))), (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bool(! (false))))))) || false)))), ! (! (false)))))
      return;
     subgroupAll(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(true, ! (! (true))), false, false)))))))));
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
  }
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    {
     if(_GLF_DEAD(false))
      continue;
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) | 0))) >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         for(int _injected_loop_counter = ((0 ^ 0) & 69405); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), 0 | (int(0)))))); _injected_loop_counter ++)
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != (_GLF_IDENTITY(1 & 1, clamp(1 & 1, _GLF_IDENTITY(1 & 1, (1 & 1) / 1), 1 & 1))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_injected_loop_counter != (1 & 1), _GLF_IDENTITY(! (_GLF_IDENTITY(! (_injected_loop_counter != (1 & 1)), false || (! (_injected_loop_counter != (1 & 1))))), _GLF_IDENTITY(bool(bvec2(! (_GLF_IDENTITY(! (_injected_loop_counter != (1 & 1)), false || (! (_injected_loop_counter != (1 & 1))))), true)), bool(bvec2(bool(bvec2(! (_GLF_IDENTITY(! (_injected_loop_counter != (1 & 1)), false || (! (_injected_loop_counter != (1 & 1))))), true)), false))))), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(_injected_loop_counter != (_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, max(1, 1)))) & 1), ! (_GLF_IDENTITY(! (_injected_loop_counter != (1 & 1)), false || (! (_injected_loop_counter != (1 & 1)))))), false), _GLF_IDENTITY(false, bool(bvec4(false, false, false, true))))))))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               if(_GLF_DEAD(false))
                barrier();
               continue;
              }
             barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                break;
               barrier();
              }
            }
          }
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(924.976) : injectionSwitch.y))))))))))))
      continue;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      continue;
     return;
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), _GLF_IDENTITY(! (! (_GLF_IDENTITY(false, ! (! (false))))), (! (_GLF_IDENTITY(! (false), true && (! (false))))) || false)))))));
}
