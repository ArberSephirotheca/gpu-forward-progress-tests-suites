#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_7 {
 bvec4 _f0;
 uint workgroup_base;
} ;

struct _GLF_struct_6 {
 mat4 _f0;
 uint subgroup_size;
} ;

struct _GLF_struct_3 {
 uint _f0;
 bool _f1;
 mat4x3 _f2;
 mat2x4 _f3;
 mat3 _f4;
 uint _f5;
 uint _f6;
} ;

struct _GLF_struct_2 {
 bvec4 _f0;
 mat4x2 _f1;
 uvec3 _f2;
 uvec4 _f3;
 ivec4 _f4;
 mat4 _f5;
 bool _f6;
} ;

struct _GLF_struct_1 {
 bvec3 _f0;
 ivec3 _f1;
 mat4x2 _f2;
} ;

struct _GLF_struct_0 {
 uvec3 _f0;
 ivec3 _f1;
 mat2 _f2;
 bool _f3;
} ;

struct _GLF_struct_4 {
 vec4 _f0;
 _GLF_struct_0 _f1;
 ivec3 _f2;
 _GLF_struct_1 _f3;
 _GLF_struct_2 _f4;
 bvec3 _f5;
 _GLF_struct_3 _f6;
} ;

struct _GLF_struct_5 {
 _GLF_struct_4 _f0;
 vec4 _f1;
 uint subgroup_id;
 mat3x2 _f2;
 bvec4 _f3;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 _GLF_struct_5 _GLF_struct_replacement_5 = _GLF_struct_5(_GLF_struct_4(vec4(1.0), _GLF_struct_0(uvec3(1u), ivec3(1), mat2(1.0), true), ivec3(1), _GLF_struct_1(bvec3(true), ivec3(1), mat4x2(1.0)), _GLF_struct_2(bvec4(true), mat4x2(1.0), uvec3(1u), uvec4(1u), ivec4(1), mat4(1.0), true), bvec3(true), _GLF_struct_3(1u, true, mat4x3(1.0), mat2x4(1.0), mat3(1.0), 1u, 1u)), vec4(1.0), gl_SubgroupID, mat3x2(1.0), bvec4(true));
 _GLF_struct_6 _GLF_struct_replacement_6 = _GLF_struct_6(mat4(1.0), gl_SubgroupSize);
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 _GLF_struct_7 _GLF_struct_replacement_7 = _GLF_struct_7(bvec4(true), workgroup_size * workgroup_id);
 uint virtual_gid = _GLF_struct_replacement_7.workgroup_base + _GLF_IDENTITY(_GLF_struct_replacement_5.subgroup_id, (_GLF_struct_replacement_5.subgroup_id) - uint(_GLF_ZERO(0.0, injectionSwitch.x))) * _GLF_struct_replacement_6.subgroup_size + subgroup_local_id;
 uint next_virtual_gid = _GLF_struct_replacement_7.workgroup_base + _GLF_struct_replacement_5.subgroup_id * _GLF_struct_replacement_6.subgroup_size + ((subgroup_local_id + 1) % _GLF_struct_replacement_6.subgroup_size);
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 0);
 atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
 if(subgroup_local_id + 1 < _GLF_struct_replacement_6.subgroup_size)
  {
   atomicStore(checker[virtual_gid], read, 4, 64, 4);
   subgroupAll(false);
  }
 else
  {
   atomicStore(buf[virtual_gid], read, 4, 64, 4);
   subgroupAll(true);
  }
}
