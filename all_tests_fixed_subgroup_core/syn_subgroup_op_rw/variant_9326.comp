#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_48 {
 bool _f0;
 uint _f1;
 ivec2 _f2;
 uvec4 _f3;
 mat2x4 _f4;
 int _f5;
} ;

struct _GLF_struct_47 {
 mat3x2 _f0;
 bool _f1;
 uvec4 _f2;
 mat3x4 _f3;
 float _f4;
 bvec2 _f5;
} ;

struct _GLF_struct_49 {
 _GLF_struct_47 _f0;
 bvec2 _f1;
 mat2x3 _f2;
 float _f3;
 _GLF_struct_48 _f4;
 bvec2 _f5;
 ivec2 _f6;
} ;

struct _GLF_struct_45 {
 mat4x3 _f0;
} ;

struct _GLF_struct_44 {
 float _f0;
 uvec4 _f1;
 mat2x4 _f2;
 mat3x4 _f3;
} ;

struct _GLF_struct_43 {
 ivec3 _f0;
 ivec4 _f1;
 mat4x2 _f2;
 mat2 _f3;
 bvec4 _f4;
 bvec4 _f5;
} ;

struct _GLF_struct_46 {
 uvec4 _f0;
 _GLF_struct_43 _f1;
 _GLF_struct_44 _f2;
 bool _f3;
 mat2x4 _f4;
 _GLF_struct_45 _f5;
} ;

struct _GLF_struct_41 {
 uint _f0;
 vec3 _f1;
 mat3x2 _f2;
 bvec3 _f3;
 bvec3 _f4;
 bvec3 _f5;
} ;

struct _GLF_struct_40 {
 uvec3 _f0;
 uvec4 _f1;
 vec4 _f2;
 int _f3;
 vec4 _f4;
 ivec3 _f5;
 mat4x2 _f6;
} ;

struct _GLF_struct_42 {
 uint workgroup_id;
 _GLF_struct_40 _f0;
 mat4 _f1;
 _GLF_struct_41 _f2;
} ;

struct _GLF_struct_50 {
 _GLF_struct_42 _f0;
 _GLF_struct_46 _f1;
 _GLF_struct_49 _f2;
 uvec3 _f3;
 mat4x2 _f4;
 mat2x4 _f5;
 uvec4 _f6;
} ;

struct _GLF_struct_37 {
 mat2 _f0;
 mat3x4 _f1;
} ;

struct _GLF_struct_36 {
 vec2 _f0;
} ;

struct _GLF_struct_38 {
 _GLF_struct_36 _f0;
 float _f1;
 uint _f2;
 _GLF_struct_37 _f3;
 mat4x3 _f4;
} ;

struct _GLF_struct_34 {
 mat3x4 _f0;
 uvec4 _f1;
 uvec2 _f2;
 int _f3;
 bvec3 _f4;
 vec2 _f5;
 uvec4 _f6;
} ;

struct _GLF_struct_35 {
 _GLF_struct_34 _f0;
 bvec3 _f1;
 ivec3 _f2;
} ;

struct _GLF_struct_39 {
 uint workgroup_base;
 mat2x3 _f0;
 mat3 _f1;
 _GLF_struct_35 _f2;
 _GLF_struct_38 _f3;
 vec4 _f4;
} ;

struct _GLF_struct_31 {
 bvec2 _f0;
 mat4x3 _f1;
 int _f2;
 vec4 _f3;
} ;

struct _GLF_struct_30 {
 vec2 _f0;
} ;

struct _GLF_struct_32 {
 uvec4 _f0;
 vec4 _f1;
 mat4x2 _f2;
 _GLF_struct_30 _f3;
 _GLF_struct_31 _f4;
} ;

struct _GLF_struct_28 {
 mat4x3 _f0;
} ;

struct _GLF_struct_27 {
 mat4 _f0;
 mat4x2 _f1;
 bool _f2;
 ivec3 _f3;
 float _f4;
} ;

struct _GLF_struct_26 {
 bvec2 _f0;
 mat2x3 _f1;
 float _f2;
 mat2x4 _f3;
 bvec3 _f4;
 uvec4 _f5;
 vec3 _f6;
} ;

struct _GLF_struct_25 {
 mat4 _f0;
 bvec4 _f1;
 bvec4 _f2;
 bvec2 _f3;
} ;

struct _GLF_struct_29 {
 bvec4 _f0;
 mat3x2 _f1;
 _GLF_struct_25 _f2;
 _GLF_struct_26 _f3;
 _GLF_struct_27 _f4;
 _GLF_struct_28 _f5;
} ;

struct _GLF_struct_23 {
 uvec3 _f0;
 ivec2 _f1;
} ;

struct _GLF_struct_24 {
 _GLF_struct_23 _f0;
 mat3x4 _f1;
 ivec4 _f2;
} ;

struct _GLF_struct_33 {
 _GLF_struct_24 _f0;
 int _f1;
 _GLF_struct_29 _f2;
 uint subgroup_id;
 _GLF_struct_32 _f3;
} ;

struct _GLF_struct_22 {
 vec4 _f0;
 int _injected_loop_counter;
} ;

struct _GLF_struct_19 {
 ivec3 _f0;
 mat4 _f1;
 vec3 _f2;
 mat4x3 _f3;
 ivec3 _f4;
 mat3 _f5;
 uvec4 _f6;
} ;

struct _GLF_struct_20 {
 bvec2 _f0;
 _GLF_struct_19 _f1;
 mat3x4 _f2;
 bvec3 _f3;
} ;

struct _GLF_struct_17 {
 mat3x4 _f0;
 bvec2 _f1;
} ;

struct _GLF_struct_18 {
 uvec3 _f0;
 vec4 _f1;
 _GLF_struct_17 _f2;
} ;

struct _GLF_struct_15 {
 mat4 _f0;
 vec2 _f1;
 mat4x2 _f2;
 mat2x3 _f3;
 vec4 _f4;
} ;

struct _GLF_struct_14 {
 mat4x2 _f0;
 ivec2 _f1;
} ;

struct _GLF_struct_16 {
 _GLF_struct_14 _f0;
 uvec2 _f1;
 _GLF_struct_15 _f2;
 mat2 _f3;
} ;

struct _GLF_struct_21 {
 _GLF_struct_16 _f0;
 vec3 _f1;
 _GLF_struct_18 _f2;
 _GLF_struct_20 _f3;
 uint read;
} ;

struct _GLF_struct_11 {
 bvec4 _f0;
 ivec4 _f1;
 bool _f2;
 mat4x3 _f3;
 mat3x4 _f4;
 uvec3 _f5;
 mat3x4 _f6;
} ;

struct _GLF_struct_12 {
 _GLF_struct_11 _f0;
 mat3 _f1;
} ;

struct _GLF_struct_9 {
 uint _f0;
 uint _f1;
} ;

struct _GLF_struct_10 {
 _GLF_struct_9 _f0;
 mat4x2 _f1;
 bool _f2;
 uint subgroup_size;
 bvec3 _f3;
 int _f4;
} ;

struct _GLF_struct_13 {
 mat4x3 _f0;
 mat4 _f1;
 bool _f2;
 _GLF_struct_10 _f3;
 mat3x2 _f4;
 _GLF_struct_12 _f5;
} ;

struct _GLF_struct_6 {
 uvec2 _f0;
 int _f1;
 bvec3 _f2;
 int _f3;
 mat4 _f4;
 ivec2 _f5;
} ;

struct _GLF_struct_5 {
 mat4x3 _f0;
 uvec3 _f1;
 vec4 _f2;
 float _f3;
} ;

struct _GLF_struct_4 {
 uvec3 _f0;
 mat2x3 _f1;
 ivec4 _f2;
 vec3 _f3;
 vec2 _f4;
 uvec4 _f5;
} ;

struct _GLF_struct_3 {
 mat4x2 _f0;
 mat3x4 _f1;
 mat3x4 _f2;
} ;

struct _GLF_struct_7 {
 _GLF_struct_3 _f0;
 _GLF_struct_4 _f1;
 _GLF_struct_5 _f2;
 ivec4 _f3;
 _GLF_struct_6 _f4;
} ;

struct _GLF_struct_1 {
 mat2x3 _f0;
 uint num_workgroup;
 mat4 _f1;
 mat2x4 _f2;
 mat4x2 _f3;
} ;

struct _GLF_struct_0 {
 mat3 _f0;
 uint _f1;
 int _f2;
} ;

struct _GLF_struct_2 {
 uvec4 _f0;
 uvec4 _f1;
 _GLF_struct_0 _f2;
 uvec3 _f3;
 _GLF_struct_1 _f4;
} ;

struct _GLF_struct_8 {
 _GLF_struct_2 _f0;
 int _f1;
 mat4 _f2;
 mat3x4 _f3;
 bool _f4;
 _GLF_struct_7 _f5;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     return;
     if(_GLF_DEAD(false))
      break;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((_GLF_IDENTITY(! (false), ! (! _GLF_IDENTITY((! (false)), bool(bvec2(_GLF_IDENTITY((! (false)), false || ((! (false)))), true)))))), ! (! ((_GLF_IDENTITY(! (false), ! (! _GLF_IDENTITY((! (false)), bool(bvec2(_GLF_IDENTITY((! (false)), false || ((! (false)))), true))))))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 _GLF_struct_33 _GLF_struct_replacement_33 = _GLF_struct_33(_GLF_struct_24(_GLF_struct_23(uvec3(1u), ivec2(1)), mat3x4(1.0), ivec4(1)), 1, _GLF_struct_29(bvec4(true), mat3x2(1.0), _GLF_struct_25(mat4(1.0), bvec4(true), bvec4(true), bvec2(true)), _GLF_struct_26(bvec2(true), mat2x3(1.0), 1.0, mat2x4(1.0), bvec3(true), uvec4(1u), vec3(1.0)), _GLF_struct_27(mat4(1.0), mat4x2(1.0), true, ivec3(1), 1.0), _GLF_struct_28(mat4x3(1.0))), gl_SubgroupID, _GLF_struct_32(uvec4(1u), vec4(1.0), mat4x2(_GLF_IDENTITY(1.0, max(1.0, 1.0))), _GLF_struct_30(vec2(1.0)), _GLF_struct_31(bvec2(true), mat4x3(1.0), 1, vec4(1.0))));
 _GLF_struct_13 _GLF_struct_replacement_13 = _GLF_struct_13(mat4x3(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), _GLF_IDENTITY(_GLF_IDENTITY(mat4(1.0), transpose(_GLF_IDENTITY(transpose(mat4(1.0)), (transpose(mat4(1.0))) / mat4(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-5661.4161)), float(1.0), bool(true))), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)))), (_GLF_IDENTITY(mat4(1.0), transpose(_GLF_IDENTITY(transpose(mat4(1.0)), (transpose(mat4(1.0))) / mat4(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-5661.4161)), float(1.0), bool(true))), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))))) + mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), true, _GLF_struct_10(_GLF_struct_9(1u, 1u), mat4x2(_GLF_IDENTITY(1.0, max(1.0, 1.0))), true, gl_SubgroupSize, _GLF_IDENTITY(bvec3(true), bvec3(bvec4(bvec3(true), true))), 1), mat3x2(1.0), _GLF_struct_12(_GLF_struct_11(bvec4(_GLF_IDENTITY(true, bool(bvec3(true, true, true)))), ivec4(1), true, mat4x3(1.0), mat3x4(1.0), uvec3(1u), mat3x4(1.0)), mat3(1.0)));
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(_GLF_IDENTITY(injectionSwitch, vec2(mat2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(898.790, 948.896)))), 1.0, 1.0))), cos(0.0), 0.0, 0.0, 1.0))).x > injectionSwitch.y))))
      barrier();
     do
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))));
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        continue;
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> 0) != _GLF_IDENTITY(1, _GLF_IDENTITY(int(_GLF_IDENTITY(int(_GLF_IDENTITY(1, _GLF_IDENTITY(0, (0) ^ 0) | (1))), int(_GLF_IDENTITY(ivec2(int(_GLF_IDENTITY(1, 0 | (1))), 0), (ivec2(int(_GLF_IDENTITY(1, 0 | (1))), _GLF_IDENTITY(0, min(0, 0)))) | ivec2(0, 0))))), ~ (~ (_GLF_IDENTITY(int(int(1)), max(_GLF_IDENTITY(int(int(1)), clamp(int(int(1)), int(int(1)), _GLF_IDENTITY(int(int(1)), max(int(int(1)), int(int(1)))))), int(int(1))))))))); _injected_loop_counter ++)
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), false, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), false))))
          continue;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         return;
        }
       else
        {
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 _GLF_struct_8 _GLF_struct_replacement_8 = _GLF_struct_8(_GLF_struct_2(uvec4(1u), uvec4(1u), _GLF_struct_0(mat3(1.0), 1u, 1), uvec3(1u), _GLF_struct_1(mat2x3(1.0), gl_NumWorkGroups.x, mat4(1.0), mat2x4(1.0), mat4x2(1.0))), 1, mat4(1.0), mat3x4(1.0), true, _GLF_struct_7(_GLF_struct_3(mat4x2(1.0), mat3x4(1.0), mat3x4(1.0)), _GLF_struct_4(uvec3(1u), mat2x3(1.0), ivec4(1), vec3(1.0), vec2(1.0), uvec4(1u)), _GLF_struct_5(mat4x3(1.0), _GLF_IDENTITY(_GLF_IDENTITY(uvec3(1u), (uvec3(1u)) | uvec3(0u, 0u, 0u)), uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) << 0u)) ^ (uvec3(1u))), vec4(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-3652.8458)), float(1.0), bool(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y))))))))), 1.0), ivec4(1), _GLF_struct_6(uvec2(1u), 1, bvec3(true), 1, mat4(1.0), ivec2(1))));
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (true ? _GLF_IDENTITY(int(2), (int(2)) | 0) : _GLF_FUZZED(_GLF_IDENTITY(-7810, 0 ^ (-7810))))))), _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (true ? _GLF_IDENTITY(int(2), (int(2)) | 0) : _GLF_FUZZED(_GLF_IDENTITY(-7810, 0 ^ (-7810)))))))) ^ 0, min(_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (true ? _GLF_IDENTITY(int(2), (int(2)) | 0) : _GLF_FUZZED(_GLF_IDENTITY(-7810, 0 ^ (-7810)))))))) ^ 0, int(ivec4(_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (true ? _GLF_IDENTITY(int(2), (int(2)) | 0) : _GLF_FUZZED(_GLF_IDENTITY(-7810, 0 ^ (-7810)))))))) ^ 0, (((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (true ? _GLF_IDENTITY(int(2), (int(2)) | 0) : _GLF_FUZZED(_GLF_IDENTITY(-7810, 0 ^ (-7810)))))))) ^ 0) | 0), 0, 1, 1))), ((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (true ? _GLF_IDENTITY(int(2), (int(2)) | 0) : _GLF_FUZZED(_GLF_IDENTITY(-7810, 0 ^ (-7810)))))))) ^ 0))) >> _GLF_IDENTITY(int(2), int(2)))); _GLF_IDENTITY(_injected_loop_counter ++, (1 & 1) * (_injected_loop_counter ++)))
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(_injected_loop_counter) : _injected_loop_counter)) != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))) && (false)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)), ! (! _GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, abs(0.0), 1.0, 0.0, 1.0, 1.0, 1.0))).y)), _GLF_IDENTITY(false, bool(bvec2(false, true))))), false || (bool(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))) && (false))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, abs(0.0), 1.0, 0.0, 1.0, 1.0, 1.0))).y)), _GLF_IDENTITY(false, bool(bvec2(false, true))))), false || (bool(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))) && (false))), _GLF_IDENTITY(bool(bvec4((_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, abs(0.0), 1.0, 0.0, 1.0, 1.0, 1.0))).y)), _GLF_IDENTITY(false, bool(bvec2(false, true))))), false || (bool(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))) && (false))), false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec4((_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, abs(0.0), 1.0, 0.0, 1.0, 1.0, 1.0))).y)), _GLF_IDENTITY(false, bool(bvec2(false, true))))), false || (bool(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))) && (false))), false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true)))))))) || false)));
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bool(! (false)))))), (injectionSwitch.x > injectionSwitch.y))))
        break;
       return;
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(false)), bool(bvec2(! (_GLF_WRAPPED_LOOP(false)), false))))));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
            return;
          }
         else
          {
          }
        }
      }
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   else
    {
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, injectionSwitch.x)) - 0.0))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(false || (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)), true && (injectionSwitch.x > injectionSwitch.y))), (false || (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)), true && (injectionSwitch.x > injectionSwitch.y)))) && true)))), bool(bvec4(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))) - 0.0), true && (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))) - 0.0), true && (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))) - 0.0))))), _GLF_IDENTITY(false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat4x2(injectionSwitch.y, exp(0.0), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0)), clamp(float(mat4x2(injectionSwitch.y, exp(0.0), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0)), float(mat4x2(injectionSwitch.y, exp(0.0), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0)), float(mat4x2(injectionSwitch.y, exp(0.0), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0)))))) / sqrt(1.0))))), (_GLF_IDENTITY(false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat4x2(injectionSwitch.y, exp(0.0), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0)), clamp(float(mat4x2(injectionSwitch.y, exp(0.0), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0)), float(mat4x2(injectionSwitch.y, exp(0.0), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0)), float(mat4x2(injectionSwitch.y, exp(0.0), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0)))))) / sqrt(1.0))))), bool(bvec2(false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat4x2(injectionSwitch.y, exp(0.0), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0)), clamp(float(mat4x2(injectionSwitch.y, exp(0.0), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0)), float(mat4x2(injectionSwitch.y, exp(0.0), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0)), float(mat4x2(injectionSwitch.y, exp(0.0), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0)))))) / sqrt(1.0))))), true)))) && true)))), false, false, false)))))
      barrier();
    }
  }
 _GLF_struct_50 _GLF_struct_replacement_50 = _GLF_struct_50(_GLF_struct_42(_GLF_IDENTITY(gl_WorkGroupID, (_GLF_IDENTITY(gl_WorkGroupID, ~ (~ (gl_WorkGroupID)))) + uvec3(0u, 0u, 0u)).x, _GLF_struct_40(uvec3(1u), uvec4(1u), vec4(_GLF_IDENTITY(1.0, (1.0) / 1.0)), 1, vec4(1.0), ivec3(1), mat4x2(1.0)), mat4(1.0), _GLF_struct_41(1u, vec3(1.0), mat3x2(1.0), bvec3(true), bvec3(true), _GLF_IDENTITY(bvec3(true), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(true), bvec3(bvec3(bvec3(true)))), bvec3(bvec3(_GLF_IDENTITY(bvec3(true), bvec3(bvec3(bvec3(true))))))))), bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(true), bvec3(bvec3(bvec3(true)))), bvec3(bvec3(_GLF_IDENTITY(bvec3(true), bvec3(bvec3(bvec3(true))))))))))))))), _GLF_struct_46(uvec4(1u), _GLF_struct_43(ivec3(1), _GLF_IDENTITY(ivec4(1), max(ivec4(1), ivec4(1))), mat4x2(1.0), mat2(1.0), bvec4(true), bvec4(true)), _GLF_struct_44(1.0, uvec4(1u), mat2x4(1.0), mat3x4(1.0)), true, mat2x4(1.0), _GLF_struct_45(mat4x3(1.0))), _GLF_struct_49(_GLF_struct_47(mat3x2(1.0), true, uvec4(1u), mat3x4(1.0), 1.0, bvec2(true)), bvec2(true), mat2x3(1.0), 1.0, _GLF_struct_48(true, 1u, ivec2(1), uvec4(1u), mat2x4(1.0), 1), bvec2(true), ivec2(1)), uvec3(1u), mat4x2(1.0), mat2x4(1.0), uvec4(1u));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_IDENTITY(_GLF_FUZZED(cosh(injectionSwitch)), vec2(mat4(_GLF_FUZZED(cosh(injectionSwitch)), 1.0, tan(0.0), 1.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0, 0.0)), 0.0)), abs(1.0), _GLF_IDENTITY(_GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, sin(0.0), 0.0)), _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, sin(0.0), 0.0)), clamp(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, sin(0.0), 0.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, sin(0.0), 0.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, sin(0.0), _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(8.1)), float(_GLF_IDENTITY(0.0, float(mat2x3(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(25.71))), 1.0, 1.0, 1.0, 0.0, 1.0)))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, sin(0.0), 0.0)), _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, sin(0.0), 0.0)), clamp(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, sin(0.0), 0.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, sin(0.0), 0.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, sin(0.0), 0.0))))), min(_GLF_IDENTITY(_GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, sin(0.0), 0.0)), _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, sin(0.0), 0.0)), _GLF_IDENTITY(clamp(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, sin(0.0), 0.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, sin(0.0), 0.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, sin(0.0), 0.0))), float(mat4x2(clamp(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, sin(0.0), 0.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, sin(0.0), 0.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, sin(0.0), 0.0))), 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, sin(0.0)))))), (_GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, sin(0.0), 0.0)), _GLF_IDENTITY(dot(vec4(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(vec4(0.0, 1.0, sin(0.0), determinant(mat3(1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0)))), max(float(vec4(0.0, 1.0, sin(0.0), determinant(mat3(1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0)))), float(vec4(0.0, 1.0, sin(0.0), determinant(mat3(1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0))))))), 1.0, 0.0, 0.0), vec4(0.0, 1.0, sin(0.0), 0.0)), clamp(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, sin(0.0), 0.0)), dot(vec4(0.0, 1.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, float(vec3(0.0, 1.0, 1.0))), 0.0)), 0.0), vec4(0.0, 1.0, sin(0.0), 0.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, sin(0.0), 0.0)))))) / 1.0), _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, sin(0.0), 0.0)), _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, sin(0.0), 0.0)), clamp(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, sin(0.0), 0.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, sin(0.0), 0.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, sin(0.0), 0.0)))))))) / 1.0), exp(0.0), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(_GLF_IDENTITY(1.0, (1.0) / round(length(normalize(1.0)))), 0.0))), 0.0, 0.0, 0.0, 1.0, 0.0))))).x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, sin(0.0) + (injectionSwitch.y)), 0.0 + (_GLF_IDENTITY(injectionSwitch.y, sin(_GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, (false ? _GLF_IDENTITY(_GLF_FUZZED(7.4), mix(float(_GLF_FUZZED(1.8)), float(_GLF_IDENTITY(_GLF_FUZZED(7.4), (_GLF_FUZZED(7.4)) + sqrt(0.0))), bool(true))) : 0.0)), 0.0))))) + (injectionSwitch.y))))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)), (_GLF_DEAD(_GLF_IDENTITY(false, (false) || false))) || false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec2(! (false), true)))))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) && true))), ! (! (bool(bool(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bool(false)))) && true, ((_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(false), ! (! (bool(false))))), (! (_GLF_IDENTITY(bool(false), ! (! (bool(false)))))) || false)))))) && true) && true))))))))))
    return;
   barrier();
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * exp(vec2(0.0, 0.0))).y)) ? _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), _GLF_IDENTITY(max(injectionSwitch, injectionSwitch), vec2(vec3(max(injectionSwitch, injectionSwitch), 1.0))))) / vec2(1.0, 1.0)) : _GLF_FUZZED(vec2(2798.4076, 73.81)), (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * exp(vec2(0.0, 0.0))).y)) ? _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), _GLF_IDENTITY(max(injectionSwitch, injectionSwitch), vec2(vec3(max(injectionSwitch, injectionSwitch), 1.0))))) / vec2(1.0, 1.0)) : _GLF_FUZZED(vec2(2798.4076, 73.81))) * mat2(1.0)))).y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
       return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      break;
     barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 _GLF_struct_39 _GLF_struct_replacement_39 = _GLF_struct_39(_GLF_IDENTITY(workgroup_size, 1u * _GLF_IDENTITY((_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY((workgroup_size) - 0u, clamp((workgroup_size) - 0u, (workgroup_size) - 0u, (_GLF_IDENTITY(workgroup_size, min(_GLF_IDENTITY(workgroup_size, (workgroup_size) | 0u), workgroup_size))) - 0u)))), (_GLF_IDENTITY((_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY((workgroup_size) - 0u, clamp((workgroup_size) - 0u, (workgroup_size) - 0u, (workgroup_size) - 0u)))), ((_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY((workgroup_size) - 0u, clamp((workgroup_size) - 0u, (workgroup_size) - 0u, (workgroup_size) - 0u))))) - 0u)) | ((_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY((workgroup_size) - 0u, clamp((workgroup_size) - 0u, (workgroup_size) - 0u, (workgroup_size) - 0u))))))) * _GLF_struct_replacement_50._f0.workgroup_id, mat2x3(1.0), mat3(1.0), _GLF_struct_35(_GLF_struct_34(mat3x4(1.0), uvec4(1u), uvec2(1u), 1, bvec3(true), vec2(1.0), uvec4(1u)), bvec3(true), ivec3(1)), _GLF_struct_38(_GLF_struct_36(vec2(1.0)), 1.0, 1u, _GLF_struct_37(mat2(1.0), mat3x4(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(113.934)), bool(false))), min(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(113.934)), bool(false))), _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(113.934)), bool(false)))))) - _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, float(vec3(0.0, 0.0, 0.0)))))))), mat4x3(1.0)), vec4(1.0));
 uint virtual_gid = _GLF_struct_replacement_39.workgroup_base + _GLF_struct_replacement_33.subgroup_id * _GLF_struct_replacement_13._f3.subgroup_size + subgroup_local_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint next_virtual_gid = _GLF_struct_replacement_39.workgroup_base + _GLF_struct_replacement_33.subgroup_id * _GLF_struct_replacement_13._f3.subgroup_size + ((subgroup_local_id + 1) % _GLF_struct_replacement_13._f3.subgroup_size);
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(5100.6389))))) > _GLF_IDENTITY(injectionSwitch.y, 1.0 * _GLF_IDENTITY((injectionSwitch.y), min((injectionSwitch.y), _GLF_IDENTITY((injectionSwitch.y), clamp((injectionSwitch.y), _GLF_IDENTITY((injectionSwitch.y), mix(float(_GLF_FUZZED(-438.766)), float((injectionSwitch.y)), bool(true))), (injectionSwitch.y))))))))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
   return;
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) && true))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 _GLF_struct_21 _GLF_struct_replacement_21 = _GLF_struct_21(_GLF_struct_16(_GLF_struct_14(mat4x2(1.0), ivec2(1)), _GLF_IDENTITY(uvec2(1u), _GLF_IDENTITY(uvec2(0u, 0u), uvec2(0u, 0u) + (uvec2(0u, 0u))) | (uvec2(1u))), _GLF_struct_15(mat4(1.0), vec2(1.0), mat4x2(1.0), mat2x3(1.0), vec4(1.0)), mat2(1.0)), vec3(1.0), _GLF_struct_18(uvec3(1u), vec4(1.0), _GLF_struct_17(mat3x4(1.0), bvec2(true))), _GLF_struct_20(bvec2(true), _GLF_struct_19(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), min(_GLF_IDENTITY(1, ~ (~ (1))), _GLF_IDENTITY(1, ~ (~ (1)))))), mat4(1.0), vec3(1.0), mat4x3(1.0), ivec3(1), mat3(1.0), uvec4(1u)), mat3x4(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(_GLF_IDENTITY(vec3(1.0, 1.0, 1.0), mix(vec3((vec3(1.0, 1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, (1.0) + 0.0)), float(_GLF_FUZZED(-22.42)), bool(false)))))[0], _GLF_FUZZED(-0.4), _GLF_FUZZED(vec4(-7.9, 5655.2201, -4.7, 81.49).s)), vec3(_GLF_FUZZED(-1213.3780), (_GLF_IDENTITY(vec3(1.0, 1.0, 1.0), (_GLF_IDENTITY(_GLF_IDENTITY(vec3(1.0, 1.0, 1.0), _GLF_IDENTITY(min(vec3(1.0, 1.0, 1.0), vec3(1.0, 1.0, 1.0)), (min(vec3(1.0, 1.0, 1.0), _GLF_IDENTITY(vec3(1.0, 1.0, 1.0), max(vec3(1.0, 1.0, 1.0), vec3(1.0, 1.0, 1.0))))) * vec3(1.0, 1.0, 1.0))), min(_GLF_IDENTITY(vec3(1.0, 1.0, 1.0), _GLF_IDENTITY(min(vec3(1.0, 1.0, 1.0), vec3(1.0, 1.0, 1.0)), (min(vec3(1.0, 1.0, 1.0), _GLF_IDENTITY(vec3(1.0, 1.0, 1.0), max(vec3(1.0, 1.0, 1.0), vec3(1.0, 1.0, 1.0))))) * vec3(1.0, 1.0, 1.0))), _GLF_IDENTITY(_GLF_IDENTITY(vec3(1.0, 1.0, 1.0), _GLF_IDENTITY(min(vec3(1.0, 1.0, 1.0), vec3(1.0, 1.0, 1.0)), (min(vec3(1.0, 1.0, 1.0), _GLF_IDENTITY(vec3(1.0, 1.0, 1.0), max(vec3(1.0, 1.0, 1.0), vec3(1.0, 1.0, 1.0))))) * vec3(1.0, 1.0, 1.0))), max(_GLF_IDENTITY(vec3(1.0, 1.0, 1.0), _GLF_IDENTITY(min(vec3(1.0, 1.0, 1.0), vec3(1.0, 1.0, 1.0)), (min(vec3(1.0, 1.0, 1.0), _GLF_IDENTITY(vec3(1.0, 1.0, 1.0), max(vec3(1.0, 1.0, 1.0), vec3(1.0, 1.0, 1.0))))) * vec3(1.0, 1.0, 1.0))), _GLF_IDENTITY(_GLF_IDENTITY(vec3(1.0, 1.0, 1.0), _GLF_IDENTITY(min(vec3(1.0, 1.0, 1.0), vec3(1.0, 1.0, 1.0)), (min(vec3(1.0, 1.0, 1.0), _GLF_IDENTITY(vec3(1.0, 1.0, 1.0), max(vec3(1.0, 1.0, 1.0), vec3(1.0, 1.0, 1.0))))) * vec3(1.0, 1.0, 1.0))), max(_GLF_IDENTITY(vec3(1.0, 1.0, 1.0), _GLF_IDENTITY(min(vec3(1.0, 1.0, 1.0), vec3(1.0, 1.0, 1.0)), (min(vec3(1.0, 1.0, 1.0), _GLF_IDENTITY(vec3(1.0, 1.0, 1.0), max(vec3(1.0, 1.0, 1.0), vec3(1.0, 1.0, 1.0))))) * vec3(1.0, 1.0, 1.0))), _GLF_IDENTITY(vec3(1.0, 1.0, 1.0), _GLF_IDENTITY(min(vec3(1.0, 1.0, 1.0), vec3(1.0, 1.0, 1.0)), (min(vec3(1.0, 1.0, 1.0), _GLF_IDENTITY(vec3(1.0, 1.0, 1.0), max(vec3(1.0, 1.0, 1.0), vec3(1.0, 1.0, 1.0))))) * vec3(1.0, 1.0, 1.0)))))))))) / vec3(1.0, 1.0, 1.0)))[1], (_GLF_IDENTITY(vec3(1.0, 1.0, 1.0), (vec3(1.0, 1.0, 1.0)) * vec3(1.0, 1.0, 1.0)))[2]), _GLF_IDENTITY(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec3(bvec4(bvec3(false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) && true), ! (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) && true))))))))), true), false)))))), min(float(_GLF_IDENTITY(vec3(1.0, 1.0, 1.0), mix(vec3((_GLF_IDENTITY(vec3(1.0, 1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, (1.0) + 0.0)), float(_GLF_FUZZED(-22.42)), bool(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(false, true)))) || false))))), (vec3(1.0, 1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, (1.0) + 0.0)), float(_GLF_FUZZED(-22.42)), bool(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(false, true)))) || false)))))) * vec3(1.0, 1.0, 1.0)))[0], _GLF_FUZZED(-0.4), _GLF_FUZZED(vec4(-7.9, 5655.2201, -4.7, 81.49).s)), vec3(_GLF_FUZZED(-1213.3780), (_GLF_IDENTITY(vec3(1.0, 1.0, 1.0), (_GLF_IDENTITY(vec3(1.0, 1.0, 1.0), _GLF_IDENTITY(_GLF_IDENTITY(min(vec3(1.0, 1.0, 1.0), vec3(1.0, 1.0, 1.0)), (min(vec3(1.0, 1.0, 1.0), _GLF_IDENTITY(vec3(1.0, 1.0, 1.0), max(vec3(1.0, 1.0, 1.0), vec3(1.0, 1.0, 1.0))))) * vec3(1.0, 1.0, 1.0)), mix(vec3(_GLF_FUZZED(-54.61), (_GLF_IDENTITY(min(vec3(1.0, 1.0, 1.0), vec3(1.0, 1.0, 1.0)), (min(vec3(1.0, 1.0, 1.0), _GLF_IDENTITY(vec3(1.0, 1.0, 1.0), max(vec3(1.0, 1.0, 1.0), vec3(1.0, 1.0, 1.0))))) * vec3(1.0, 1.0, 1.0)))[1], _GLF_FUZZED(1.0)), vec3((_GLF_IDENTITY(min(vec3(1.0, 1.0, 1.0), vec3(1.0, 1.0, 1.0)), (min(vec3(1.0, 1.0, 1.0), _GLF_IDENTITY(vec3(1.0, 1.0, 1.0), max(vec3(1.0, 1.0, 1.0), vec3(1.0, 1.0, 1.0))))) * vec3(1.0, 1.0, 1.0)))[0], _GLF_FUZZED(-5.8), (_GLF_IDENTITY(min(vec3(1.0, 1.0, 1.0), vec3(1.0, 1.0, 1.0)), (min(vec3(1.0, 1.0, 1.0), _GLF_IDENTITY(vec3(1.0, 1.0, 1.0), max(vec3(1.0, 1.0, 1.0), vec3(1.0, 1.0, 1.0))))) * vec3(1.0, 1.0, 1.0)))[2]), bvec3(true, false, true))))) / vec3(1.0, 1.0, 1.0)))[1], (_GLF_IDENTITY(vec3(1.0, 1.0, 1.0), (vec3(1.0, 1.0, 1.0)) * vec3(1.0, 1.0, 1.0)))[2]), _GLF_IDENTITY(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec3(bvec4(bvec3(false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) && true)))))), true), false)))))), float(_GLF_IDENTITY(vec3(1.0, 1.0, 1.0), mix(vec3((vec3(1.0, 1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, (1.0) + 0.0)), float(_GLF_FUZZED(-22.42)), bool(false)))))[0], _GLF_FUZZED(-0.4), _GLF_FUZZED(vec4(-7.9, 5655.2201, -4.7, 81.49).s)), vec3(_GLF_FUZZED(-1213.3780), (_GLF_IDENTITY(_GLF_IDENTITY(vec3(1.0, 1.0, 1.0), clamp(_GLF_IDENTITY(vec3(1.0, 1.0, 1.0), min(vec3(1.0, 1.0, 1.0), vec3(1.0, 1.0, 1.0))), _GLF_IDENTITY(vec3(1.0, 1.0, 1.0), clamp(_GLF_IDENTITY(vec3(1.0, 1.0, 1.0), (vec3(1.0, 1.0, 1.0)) * mat3(1.0)), vec3(1.0, 1.0, 1.0), _GLF_IDENTITY(vec3(1.0, 1.0, 1.0), vec3(mat2x3(vec3(1.0, 1.0, 1.0), 0.0, 0.0, 0.0))))), _GLF_IDENTITY(vec3(1.0, 1.0, 1.0), max(vec3(1.0, 1.0, 1.0), vec3(1.0, 1.0, 1.0))))), (_GLF_IDENTITY(vec3(1.0, 1.0, 1.0), _GLF_IDENTITY(min(_GLF_IDENTITY(vec3(1.0, 1.0, 1.0), max(vec3(1.0, 1.0, 1.0), vec3(1.0, 1.0, 1.0))), vec3(1.0, 1.0, 1.0)), _GLF_IDENTITY((min(vec3(1.0, 1.0, 1.0), _GLF_IDENTITY(vec3(1.0, 1.0, 1.0), max(vec3(1.0, 1.0, 1.0), vec3(1.0, 1.0, 1.0))))) * vec3(1.0, 1.0, 1.0), clamp(_GLF_IDENTITY((min(vec3(1.0, 1.0, 1.0), _GLF_IDENTITY(vec3(1.0, 1.0, 1.0), max(vec3(1.0, 1.0, 1.0), vec3(1.0, 1.0, 1.0))))) * vec3(1.0, 1.0, 1.0), vec3(0.0, 0.0, 0.0) + ((min(vec3(1.0, 1.0, 1.0), _GLF_IDENTITY(vec3(1.0, 1.0, 1.0), max(vec3(1.0, 1.0, 1.0), vec3(1.0, 1.0, 1.0))))) * vec3(1.0, 1.0, 1.0))), _GLF_IDENTITY((min(vec3(1.0, 1.0, 1.0), _GLF_IDENTITY(vec3(1.0, 1.0, 1.0), max(vec3(1.0, 1.0, 1.0), vec3(1.0, 1.0, 1.0))))) * vec3(1.0, 1.0, 1.0), mix(vec3(((min(vec3(1.0, 1.0, 1.0), _GLF_IDENTITY(vec3(1.0, 1.0, 1.0), max(vec3(1.0, 1.0, 1.0), vec3(1.0, 1.0, 1.0))))) * vec3(1.0, 1.0, 1.0))[0], _GLF_FUZZED(-3.6), _GLF_FUZZED(-2.5)), vec3(_GLF_FUZZED((- -76.55)), ((min(vec3(1.0, 1.0, 1.0), _GLF_IDENTITY(vec3(1.0, 1.0, 1.0), max(vec3(1.0, 1.0, 1.0), vec3(1.0, 1.0, 1.0))))) * vec3(1.0, 1.0, 1.0))[1], ((min(vec3(1.0, 1.0, 1.0), _GLF_IDENTITY(vec3(1.0, 1.0, 1.0), max(vec3(1.0, 1.0, 1.0), vec3(1.0, 1.0, 1.0))))) * vec3(1.0, 1.0, 1.0))[2]), bvec3(false, true, true))), _GLF_IDENTITY((min(vec3(1.0, 1.0, 1.0), _GLF_IDENTITY(vec3(1.0, 1.0, 1.0), max(vec3(1.0, 1.0, 1.0), vec3(1.0, 1.0, 1.0))))) * vec3(1.0, 1.0, 1.0), clamp((min(vec3(1.0, 1.0, 1.0), _GLF_IDENTITY(vec3(1.0, 1.0, 1.0), max(vec3(1.0, 1.0, 1.0), vec3(1.0, 1.0, 1.0))))) * vec3(1.0, 1.0, 1.0), _GLF_IDENTITY((min(vec3(1.0, 1.0, 1.0), _GLF_IDENTITY(vec3(1.0, 1.0, 1.0), max(vec3(1.0, 1.0, 1.0), vec3(1.0, 1.0, 1.0))))) * vec3(1.0, 1.0, 1.0), min((min(vec3(1.0, 1.0, 1.0), _GLF_IDENTITY(vec3(1.0, 1.0, 1.0), max(vec3(1.0, 1.0, 1.0), vec3(1.0, 1.0, 1.0))))) * vec3(1.0, 1.0, 1.0), (min(vec3(1.0, 1.0, 1.0), _GLF_IDENTITY(vec3(1.0, 1.0, 1.0), max(vec3(1.0, 1.0, 1.0), vec3(1.0, 1.0, 1.0))))) * vec3(1.0, 1.0, 1.0))), (min(vec3(1.0, 1.0, 1.0), _GLF_IDENTITY(vec3(1.0, 1.0, 1.0), max(vec3(1.0, 1.0, 1.0), vec3(1.0, 1.0, 1.0))))) * vec3(1.0, 1.0, 1.0)))))))) / vec3(1.0, 1.0, 1.0)))[1], (_GLF_IDENTITY(vec3(1.0, 1.0, 1.0), (vec3(1.0, 1.0, 1.0)) * vec3(1.0, 1.0, 1.0)))[2]), _GLF_IDENTITY(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec3(bvec4(bvec3(false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) && true)))))), true), false)))))))))), bvec3(true)), atomicLoad(buf[_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY((_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid))), min((_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid))), _GLF_IDENTITY((_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid))), ((_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)))) + 0u))) >> 0u), (_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid))) >> _GLF_IDENTITY(0u, max(0u, 0u)))) >> 0u)], 4, 64, 0));
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | int(_GLF_ZERO(0.0, injectionSwitch.x)))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    return;
  }
 for(int _injected_loop_counter = (1 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -24279)); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  barrier();
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)); _injected_loop_counter --)
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
       return;
      }
     atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / 1)) << 0)), 4, 64, 4);
    }
   while(_GLF_WRAPPED_LOOP(false));
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(0.0, max(0.0, 0.0)) + (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(5.6)), float(injectionSwitch.y), bool(true)))))))));
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), bool(bvec4(_GLF_IDENTITY(false, false || (false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)))))).y, clamp(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)))))).y, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)))))).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)))))).y, (true ? _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)))))).y : _GLF_FUZZED(95.10)))))))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 if(subgroup_local_id + 1 < _GLF_struct_replacement_13._f3.subgroup_size)
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
            return;
          }
         barrier();
        }
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter --)
        {
         return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-9.7), _GLF_FUZZED(5.2)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(76.19)), float(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(0.6)), bool(false)))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))
          barrier();
        }
      }
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   atomicStore(checker[virtual_gid], _GLF_struct_replacement_21.read, 4, 64, 4);
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _GLF_IDENTITY(_injected_loop_counter ++, (_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) << 0)) - (0 >> _GLF_IDENTITY(int(7), int(7)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, _GLF_IDENTITY((_GLF_IDENTITY((false) && true, _GLF_IDENTITY(((false) && true) || false, (((false) && true) || false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true && ((_GLF_IDENTITY(_GLF_IDENTITY((false) && true, ! (! (_GLF_IDENTITY((false) && true, bool(bvec4((false) && true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))), _GLF_IDENTITY(((false) && true) || false, ((_GLF_IDENTITY((false), bool(bvec4((false), false, true, true))) && true) || _GLF_IDENTITY(false, (false) || false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) && true))))
      barrier();
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, true)))) && true))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
     subgroupAll(false);
    }
   else
    {
    }
  }
 else
  {
   do
    {
     atomicStore(buf[virtual_gid], _GLF_IDENTITY(_GLF_struct_replacement_21.read, max(_GLF_struct_replacement_21.read, _GLF_struct_replacement_21.read)), 4, 64, 4);
    }
   while(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) || false), ! (! (_GLF_WRAPPED_LOOP(false)))));
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
        {
        }
       else
        {
         subgroupAll(true);
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(true, ! (! (true))) && (false)), true && (_GLF_IDENTITY(false, true && (false))))))
    return;
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 for(_GLF_struct_22 _GLF_struct_replacement_22 = _GLF_struct_22(vec4(1.0), (_GLF_IDENTITY(1, (1) >> int(_GLF_ZERO(0.0, injectionSwitch.x))) | 1)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_struct_replacement_22._injected_loop_counter, (_GLF_IDENTITY(_GLF_struct_replacement_22._injected_loop_counter, _GLF_IDENTITY(0, (0) / 1) | (_GLF_struct_replacement_22._injected_loop_counter))) ^ 0) > 0); _GLF_struct_replacement_22._injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         break;
        }
       return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         break;
        }
      }
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    continue;
   do
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(bool(bvec2(! (false), true)), (bool(bvec2(! (false), true))) || false))))))))
      break;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
}
