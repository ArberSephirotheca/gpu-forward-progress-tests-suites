#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  return;
 uvec4 GLF_merged4_0_1_13_1_1_4_2_1_11_3_1_12num_workgroupreadvirtual_gidworkgroup_id;
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || false)))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     do
      {
       for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (true ? int(0) : _GLF_FUZZED(63353))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))))).x, float(mat3x4(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))))).x, 1.0, 1.0, 0.0, tan(0.0), 0.0, 0.0, abs(0.0), sin(0.0), 1.0, abs(0.0), 1.0))) > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(false))
            continue;
          }
         else
          {
           return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  return;
uint subgroup_size = 16;
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)).x, 1.0 * (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, false)), (_GLF_IDENTITY(bool(bvec3(false, true, false)), (bool(bvec3(false, true, false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) || false)), false || (false)) ? _GLF_FUZZED(_GLF_IDENTITY(log2(-2552.0177), _GLF_IDENTITY(min(_GLF_IDENTITY(log2(-2552.0177), float(float(log2(-2552.0177)))), log2(-2552.0177)), (false ? _GLF_FUZZED(14.02) : min(_GLF_IDENTITY(log2(-2552.0177), float(float(log2(-2552.0177)))), _GLF_IDENTITY(log2(-2552.0177), clamp(log2(-2552.0177), _GLF_IDENTITY(log2(-2552.0177), _GLF_IDENTITY(float(mat2(log2(-2552.0177), 1.0, 1.0, 1.0)), (false ? _GLF_FUZZED(5.0) : float(mat2(log2(-2552.0177), 1.0, 1.0, 1.0))))), log2(-2552.0177)))))))) : injectionSwitch.x), ((_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, false)), (_GLF_IDENTITY(bool(bvec3(false, true, false)), (bool(bvec3(false, true, false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) || false)), false || (false)) ? _GLF_FUZZED(_GLF_IDENTITY(log2(-2552.0177), _GLF_IDENTITY(min(_GLF_IDENTITY(log2(-2552.0177), float(float(log2(-2552.0177)))), log2(-2552.0177)), (false ? _GLF_FUZZED(14.02) : min(_GLF_IDENTITY(log2(-2552.0177), float(float(log2(-2552.0177)))), _GLF_IDENTITY(log2(-2552.0177), clamp(log2(-2552.0177), _GLF_IDENTITY(log2(-2552.0177), _GLF_IDENTITY(float(mat2(log2(-2552.0177), 1.0, 1.0, 1.0)), (false ? _GLF_FUZZED(5.0) : float(mat2(log2(-2552.0177), 1.0, 1.0, 1.0))))), log2(-2552.0177)))))))) : injectionSwitch.x)) / 1.0), _GLF_IDENTITY(float(_GLF_IDENTITY(mat3(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, false)), (_GLF_IDENTITY(bool(bvec3(false, true, false)), (bool(bvec3(false, true, false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) || false)), false || (false)) ? _GLF_FUZZED(_GLF_IDENTITY(log2(-2552.0177), _GLF_IDENTITY(min(_GLF_IDENTITY(log2(-2552.0177), float(float(log2(-2552.0177)))), log2(-2552.0177)), (false ? _GLF_FUZZED(14.02) : min(_GLF_IDENTITY(log2(-2552.0177), float(float(log2(-2552.0177)))), _GLF_IDENTITY(log2(-2552.0177), clamp(log2(-2552.0177), _GLF_IDENTITY(log2(-2552.0177), _GLF_IDENTITY(float(mat2(log2(-2552.0177), 1.0, 1.0, 1.0)), (false ? _GLF_FUZZED(5.0) : float(mat2(log2(-2552.0177), 1.0, 1.0, 1.0))))), log2(-2552.0177)))))))) : injectionSwitch.x), ((_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, false)), (_GLF_IDENTITY(bool(bvec3(false, true, false)), (bool(bvec3(false, true, false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) || false)), false || (false)) ? _GLF_FUZZED(_GLF_IDENTITY(log2(-2552.0177), _GLF_IDENTITY(min(_GLF_IDENTITY(log2(-2552.0177), float(float(log2(-2552.0177)))), log2(-2552.0177)), (false ? _GLF_FUZZED(14.02) : min(_GLF_IDENTITY(log2(-2552.0177), float(float(log2(-2552.0177)))), _GLF_IDENTITY(log2(-2552.0177), clamp(log2(-2552.0177), _GLF_IDENTITY(log2(-2552.0177), _GLF_IDENTITY(float(mat2(log2(-2552.0177), 1.0, 1.0, 1.0)), (false ? _GLF_FUZZED(5.0) : float(mat2(log2(-2552.0177), 1.0, 1.0, 1.0))))), log2(-2552.0177)))))))) : injectionSwitch.x)) / 1.0), mix(float(_GLF_FUZZED(35.06)), float(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, false)), (_GLF_IDENTITY(bool(bvec3(false, true, false)), (bool(bvec3(false, true, false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) || false)), false || (false)) ? _GLF_FUZZED(_GLF_IDENTITY(log2(-2552.0177), _GLF_IDENTITY(min(_GLF_IDENTITY(log2(-2552.0177), float(float(log2(-2552.0177)))), log2(-2552.0177)), (false ? _GLF_FUZZED(14.02) : min(_GLF_IDENTITY(log2(-2552.0177), float(float(log2(-2552.0177)))), _GLF_IDENTITY(log2(-2552.0177), clamp(log2(-2552.0177), _GLF_IDENTITY(log2(-2552.0177), _GLF_IDENTITY(float(mat2(log2(-2552.0177), 1.0, 1.0, 1.0)), (false ? _GLF_FUZZED(5.0) : float(mat2(log2(-2552.0177), 1.0, 1.0, 1.0))))), log2(-2552.0177)))))))) : injectionSwitch.x), ((_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, false)), (_GLF_IDENTITY(bool(bvec3(false, true, false)), (bool(bvec3(false, true, false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) || false)), false || (false)) ? _GLF_FUZZED(_GLF_IDENTITY(log2(-2552.0177), _GLF_IDENTITY(min(_GLF_IDENTITY(log2(-2552.0177), float(float(log2(-2552.0177)))), log2(-2552.0177)), (false ? _GLF_FUZZED(14.02) : min(_GLF_IDENTITY(log2(-2552.0177), float(float(log2(-2552.0177)))), _GLF_IDENTITY(log2(-2552.0177), clamp(log2(-2552.0177), _GLF_IDENTITY(log2(-2552.0177), _GLF_IDENTITY(float(mat2(log2(-2552.0177), 1.0, 1.0, 1.0)), (false ? _GLF_FUZZED(5.0) : float(mat2(log2(-2552.0177), 1.0, 1.0, 1.0))))), log2(-2552.0177)))))))) : injectionSwitch.x)) / 1.0), float(mat2x3(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, false)), (_GLF_IDENTITY(bool(bvec3(false, true, false)), (bool(bvec3(false, true, false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) || false)), false || (false)) ? _GLF_FUZZED(_GLF_IDENTITY(log2(-2552.0177), _GLF_IDENTITY(min(_GLF_IDENTITY(log2(-2552.0177), float(float(log2(-2552.0177)))), log2(-2552.0177)), (false ? _GLF_FUZZED(14.02) : min(_GLF_IDENTITY(log2(-2552.0177), float(float(log2(-2552.0177)))), _GLF_IDENTITY(log2(-2552.0177), clamp(log2(-2552.0177), _GLF_IDENTITY(log2(-2552.0177), _GLF_IDENTITY(float(mat2(log2(-2552.0177), 1.0, 1.0, 1.0)), (false ? _GLF_FUZZED(5.0) : float(mat2(log2(-2552.0177), 1.0, 1.0, 1.0))))), log2(-2552.0177)))))))) : injectionSwitch.x), ((_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, false)), (_GLF_IDENTITY(bool(bvec3(false, true, false)), (bool(bvec3(false, true, false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) || false)), false || (false)) ? _GLF_FUZZED(_GLF_IDENTITY(log2(-2552.0177), _GLF_IDENTITY(min(_GLF_IDENTITY(log2(-2552.0177), float(float(log2(-2552.0177)))), log2(-2552.0177)), (false ? _GLF_FUZZED(14.02) : min(_GLF_IDENTITY(log2(-2552.0177), float(float(log2(-2552.0177)))), _GLF_IDENTITY(log2(-2552.0177), clamp(log2(-2552.0177), _GLF_IDENTITY(log2(-2552.0177), _GLF_IDENTITY(float(mat2(log2(-2552.0177), 1.0, 1.0, 1.0)), (false ? _GLF_FUZZED(5.0) : float(mat2(log2(-2552.0177), 1.0, 1.0, 1.0))))), log2(-2552.0177)))))))) : injectionSwitch.x)) / 1.0), 0.0, 0.0, 0.0, 0.0, 1.0)))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 0.0, 0.0), mat3(mat4(mat3(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, false)), (_GLF_IDENTITY(bool(bvec3(false, true, false)), (bool(bvec3(false, true, false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) || false)), false || (false)) ? _GLF_FUZZED(_GLF_IDENTITY(log2(-2552.0177), _GLF_IDENTITY(min(_GLF_IDENTITY(log2(-2552.0177), float(float(log2(-2552.0177)))), log2(-2552.0177)), (false ? _GLF_FUZZED(14.02) : min(_GLF_IDENTITY(log2(-2552.0177), float(float(log2(-2552.0177)))), _GLF_IDENTITY(log2(-2552.0177), clamp(log2(-2552.0177), _GLF_IDENTITY(log2(-2552.0177), _GLF_IDENTITY(float(mat2(log2(-2552.0177), 1.0, 1.0, 1.0)), (false ? _GLF_FUZZED(5.0) : float(mat2(log2(-2552.0177), 1.0, 1.0, 1.0))))), log2(-2552.0177)))))))) : injectionSwitch.x), ((_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, false)), (_GLF_IDENTITY(bool(bvec3(false, true, false)), (bool(bvec3(false, true, false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) || false)), false || (false)) ? _GLF_FUZZED(_GLF_IDENTITY(log2(-2552.0177), _GLF_IDENTITY(min(_GLF_IDENTITY(log2(-2552.0177), float(float(log2(-2552.0177)))), log2(-2552.0177)), (false ? _GLF_FUZZED(14.02) : min(_GLF_IDENTITY(log2(-2552.0177), float(float(log2(-2552.0177)))), _GLF_IDENTITY(log2(-2552.0177), clamp(log2(-2552.0177), _GLF_IDENTITY(log2(-2552.0177), _GLF_IDENTITY(float(mat2(log2(-2552.0177), 1.0, 1.0, 1.0)), (false ? _GLF_FUZZED(5.0) : float(mat2(log2(-2552.0177), 1.0, 1.0, 1.0))))), log2(-2552.0177)))))))) : injectionSwitch.x)) / 1.0), mix(float(_GLF_FUZZED(35.06)), float(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, false)), (_GLF_IDENTITY(bool(bvec3(false, true, false)), (bool(bvec3(false, true, false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) || false)), false || (false)) ? _GLF_FUZZED(_GLF_IDENTITY(log2(-2552.0177), _GLF_IDENTITY(min(_GLF_IDENTITY(log2(-2552.0177), float(float(log2(-2552.0177)))), log2(-2552.0177)), (false ? _GLF_FUZZED(14.02) : min(_GLF_IDENTITY(log2(-2552.0177), float(float(log2(-2552.0177)))), _GLF_IDENTITY(log2(-2552.0177), clamp(log2(-2552.0177), _GLF_IDENTITY(log2(-2552.0177), _GLF_IDENTITY(float(mat2(log2(-2552.0177), 1.0, 1.0, 1.0)), (false ? _GLF_FUZZED(5.0) : float(mat2(log2(-2552.0177), 1.0, 1.0, 1.0))))), log2(-2552.0177)))))))) : injectionSwitch.x), ((_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, false)), (_GLF_IDENTITY(bool(bvec3(false, true, false)), (bool(bvec3(false, true, false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) || false)), false || (false)) ? _GLF_FUZZED(_GLF_IDENTITY(log2(-2552.0177), _GLF_IDENTITY(min(_GLF_IDENTITY(log2(-2552.0177), float(float(log2(-2552.0177)))), log2(-2552.0177)), (false ? _GLF_FUZZED(14.02) : min(_GLF_IDENTITY(log2(-2552.0177), float(float(log2(-2552.0177)))), _GLF_IDENTITY(log2(-2552.0177), clamp(log2(-2552.0177), _GLF_IDENTITY(log2(-2552.0177), _GLF_IDENTITY(float(mat2(log2(-2552.0177), 1.0, 1.0, 1.0)), (false ? _GLF_FUZZED(5.0) : float(mat2(log2(-2552.0177), 1.0, 1.0, 1.0))))), log2(-2552.0177)))))))) : injectionSwitch.x)) / 1.0), float(mat2x3(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, false)), (_GLF_IDENTITY(bool(bvec3(false, true, false)), (bool(bvec3(false, true, false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) || false)), false || (false)) ? _GLF_FUZZED(_GLF_IDENTITY(log2(-2552.0177), _GLF_IDENTITY(min(_GLF_IDENTITY(log2(-2552.0177), float(float(log2(-2552.0177)))), log2(-2552.0177)), (false ? _GLF_FUZZED(14.02) : min(_GLF_IDENTITY(log2(-2552.0177), float(float(log2(-2552.0177)))), _GLF_IDENTITY(log2(-2552.0177), clamp(log2(-2552.0177), _GLF_IDENTITY(log2(-2552.0177), _GLF_IDENTITY(float(mat2(log2(-2552.0177), 1.0, 1.0, 1.0)), (false ? _GLF_FUZZED(5.0) : float(mat2(log2(-2552.0177), 1.0, 1.0, 1.0))))), log2(-2552.0177)))))))) : injectionSwitch.x), ((_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, false)), (_GLF_IDENTITY(bool(bvec3(false, true, false)), (bool(bvec3(false, true, false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) || false)), false || (false)) ? _GLF_FUZZED(_GLF_IDENTITY(log2(-2552.0177), _GLF_IDENTITY(min(_GLF_IDENTITY(log2(-2552.0177), float(float(log2(-2552.0177)))), log2(-2552.0177)), (false ? _GLF_FUZZED(14.02) : min(_GLF_IDENTITY(log2(-2552.0177), float(float(log2(-2552.0177)))), _GLF_IDENTITY(log2(-2552.0177), clamp(log2(-2552.0177), _GLF_IDENTITY(log2(-2552.0177), _GLF_IDENTITY(float(mat2(log2(-2552.0177), 1.0, 1.0, 1.0)), (false ? _GLF_FUZZED(5.0) : float(mat2(log2(-2552.0177), 1.0, 1.0, 1.0))))), log2(-2552.0177)))))))) : injectionSwitch.x)) / 1.0), 0.0, 0.0, 0.0, 0.0, 1.0)))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 0.0, 0.0))))), min(float(_GLF_IDENTITY(mat3(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, false)), (_GLF_IDENTITY(bool(bvec3(false, true, false)), (bool(bvec3(false, true, false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) || false)), false || (false)) ? _GLF_FUZZED(_GLF_IDENTITY(log2(-2552.0177), _GLF_IDENTITY(min(_GLF_IDENTITY(log2(-2552.0177), float(float(log2(-2552.0177)))), log2(-2552.0177)), (false ? _GLF_FUZZED(14.02) : min(_GLF_IDENTITY(log2(-2552.0177), float(float(log2(-2552.0177)))), _GLF_IDENTITY(log2(-2552.0177), clamp(log2(-2552.0177), _GLF_IDENTITY(log2(-2552.0177), _GLF_IDENTITY(float(mat2(log2(-2552.0177), 1.0, 1.0, 1.0)), (false ? _GLF_FUZZED(5.0) : float(mat2(log2(-2552.0177), 1.0, 1.0, 1.0))))), log2(-2552.0177)))))))) : injectionSwitch.x), ((_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, false)), (_GLF_IDENTITY(bool(bvec3(false, true, false)), (bool(bvec3(false, true, false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) || false)), false || (false)) ? _GLF_FUZZED(_GLF_IDENTITY(log2(-2552.0177), _GLF_IDENTITY(min(_GLF_IDENTITY(log2(-2552.0177), float(float(log2(-2552.0177)))), log2(-2552.0177)), (false ? _GLF_FUZZED(14.02) : min(_GLF_IDENTITY(log2(-2552.0177), float(float(log2(-2552.0177)))), _GLF_IDENTITY(log2(-2552.0177), clamp(log2(-2552.0177), _GLF_IDENTITY(log2(-2552.0177), _GLF_IDENTITY(float(mat2(log2(-2552.0177), 1.0, 1.0, 1.0)), (false ? _GLF_FUZZED(5.0) : float(mat2(log2(-2552.0177), 1.0, 1.0, 1.0))))), log2(-2552.0177)))))))) : injectionSwitch.x)) / 1.0), mix(float(_GLF_FUZZED(35.06)), float(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, false)), (_GLF_IDENTITY(bool(bvec3(false, true, false)), (bool(bvec3(false, true, false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) || false)), false || (false)) ? _GLF_FUZZED(_GLF_IDENTITY(log2(-2552.0177), _GLF_IDENTITY(min(_GLF_IDENTITY(log2(-2552.0177), float(float(log2(-2552.0177)))), log2(-2552.0177)), (false ? _GLF_FUZZED(14.02) : min(_GLF_IDENTITY(log2(-2552.0177), float(float(log2(-2552.0177)))), _GLF_IDENTITY(log2(-2552.0177), clamp(log2(-2552.0177), _GLF_IDENTITY(log2(-2552.0177), _GLF_IDENTITY(float(mat2(log2(-2552.0177), 1.0, 1.0, 1.0)), (false ? _GLF_FUZZED(5.0) : float(mat2(log2(-2552.0177), 1.0, 1.0, 1.0))))), log2(-2552.0177)))))))) : injectionSwitch.x), ((_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, false)), (_GLF_IDENTITY(bool(bvec3(false, true, false)), (bool(bvec3(false, true, false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) || false)), false || (false)) ? _GLF_FUZZED(_GLF_IDENTITY(log2(-2552.0177), _GLF_IDENTITY(min(_GLF_IDENTITY(log2(-2552.0177), float(float(log2(-2552.0177)))), log2(-2552.0177)), (false ? _GLF_FUZZED(14.02) : min(_GLF_IDENTITY(log2(-2552.0177), float(float(log2(-2552.0177)))), _GLF_IDENTITY(log2(-2552.0177), clamp(log2(-2552.0177), _GLF_IDENTITY(log2(-2552.0177), _GLF_IDENTITY(float(mat2(log2(-2552.0177), 1.0, 1.0, 1.0)), (false ? _GLF_FUZZED(5.0) : float(mat2(log2(-2552.0177), 1.0, 1.0, 1.0))))), log2(-2552.0177)))))))) : injectionSwitch.x)) / 1.0), float(mat2x3(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, false)), (_GLF_IDENTITY(bool(bvec3(false, true, false)), (bool(bvec3(false, true, false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) || false)), false || (false)) ? _GLF_FUZZED(_GLF_IDENTITY(log2(-2552.0177), _GLF_IDENTITY(min(_GLF_IDENTITY(log2(-2552.0177), float(float(log2(-2552.0177)))), log2(-2552.0177)), (false ? _GLF_FUZZED(14.02) : min(_GLF_IDENTITY(log2(-2552.0177), float(float(log2(-2552.0177)))), _GLF_IDENTITY(log2(-2552.0177), clamp(log2(-2552.0177), _GLF_IDENTITY(log2(-2552.0177), _GLF_IDENTITY(float(mat2(log2(-2552.0177), 1.0, 1.0, 1.0)), (false ? _GLF_FUZZED(5.0) : float(mat2(log2(-2552.0177), 1.0, 1.0, 1.0))))), log2(-2552.0177)))))))) : injectionSwitch.x), ((_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, false)), (_GLF_IDENTITY(bool(bvec3(false, true, false)), (bool(bvec3(false, true, false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) || false)), false || (false)) ? _GLF_FUZZED(_GLF_IDENTITY(log2(-2552.0177), _GLF_IDENTITY(min(_GLF_IDENTITY(log2(-2552.0177), float(float(log2(-2552.0177)))), log2(-2552.0177)), (false ? _GLF_FUZZED(14.02) : min(_GLF_IDENTITY(log2(-2552.0177), float(float(log2(-2552.0177)))), _GLF_IDENTITY(log2(-2552.0177), clamp(log2(-2552.0177), _GLF_IDENTITY(log2(-2552.0177), _GLF_IDENTITY(float(mat2(log2(-2552.0177), 1.0, 1.0, 1.0)), (false ? _GLF_FUZZED(5.0) : float(mat2(log2(-2552.0177), 1.0, 1.0, 1.0))))), log2(-2552.0177)))))))) : injectionSwitch.x)) / 1.0), 0.0, 0.0, 0.0, 0.0, 1.0)))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 0.0, 0.0), mat3(mat4(mat3(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, false)), (_GLF_IDENTITY(bool(bvec3(false, true, false)), (bool(bvec3(false, true, false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) || false)), false || (false)) ? _GLF_FUZZED(_GLF_IDENTITY(log2(-2552.0177), _GLF_IDENTITY(min(_GLF_IDENTITY(log2(-2552.0177), float(float(log2(-2552.0177)))), log2(-2552.0177)), (false ? _GLF_FUZZED(14.02) : min(_GLF_IDENTITY(log2(-2552.0177), float(float(log2(-2552.0177)))), _GLF_IDENTITY(log2(-2552.0177), clamp(log2(-2552.0177), _GLF_IDENTITY(log2(-2552.0177), _GLF_IDENTITY(float(mat2(log2(-2552.0177), 1.0, 1.0, 1.0)), (false ? _GLF_FUZZED(5.0) : float(mat2(log2(-2552.0177), 1.0, 1.0, 1.0))))), log2(-2552.0177)))))))) : injectionSwitch.x), ((_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, false)), (_GLF_IDENTITY(bool(bvec3(false, true, false)), (bool(bvec3(false, true, false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) || false)), false || (false)) ? _GLF_FUZZED(_GLF_IDENTITY(log2(-2552.0177), _GLF_IDENTITY(min(_GLF_IDENTITY(log2(-2552.0177), float(float(log2(-2552.0177)))), log2(-2552.0177)), (false ? _GLF_FUZZED(14.02) : min(_GLF_IDENTITY(log2(-2552.0177), float(float(log2(-2552.0177)))), _GLF_IDENTITY(log2(-2552.0177), clamp(log2(-2552.0177), _GLF_IDENTITY(log2(-2552.0177), _GLF_IDENTITY(float(mat2(log2(-2552.0177), 1.0, 1.0, 1.0)), (false ? _GLF_FUZZED(5.0) : float(mat2(log2(-2552.0177), 1.0, 1.0, 1.0))))), log2(-2552.0177)))))))) : injectionSwitch.x)) / 1.0), mix(float(_GLF_FUZZED(35.06)), float(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, false)), (_GLF_IDENTITY(bool(bvec3(false, true, false)), (bool(bvec3(false, true, false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) || false)), false || (false)) ? _GLF_FUZZED(_GLF_IDENTITY(log2(-2552.0177), _GLF_IDENTITY(min(_GLF_IDENTITY(log2(-2552.0177), float(float(log2(-2552.0177)))), log2(-2552.0177)), (false ? _GLF_FUZZED(14.02) : min(_GLF_IDENTITY(log2(-2552.0177), float(float(log2(-2552.0177)))), _GLF_IDENTITY(log2(-2552.0177), clamp(log2(-2552.0177), _GLF_IDENTITY(log2(-2552.0177), _GLF_IDENTITY(float(mat2(log2(-2552.0177), 1.0, 1.0, 1.0)), (false ? _GLF_FUZZED(5.0) : float(mat2(log2(-2552.0177), 1.0, 1.0, 1.0))))), log2(-2552.0177)))))))) : injectionSwitch.x), ((_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, false)), (_GLF_IDENTITY(bool(bvec3(false, true, false)), (bool(bvec3(false, true, false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) || false)), false || (false)) ? _GLF_FUZZED(_GLF_IDENTITY(log2(-2552.0177), _GLF_IDENTITY(min(_GLF_IDENTITY(log2(-2552.0177), float(float(log2(-2552.0177)))), log2(-2552.0177)), (false ? _GLF_FUZZED(14.02) : min(_GLF_IDENTITY(log2(-2552.0177), float(float(log2(-2552.0177)))), _GLF_IDENTITY(log2(-2552.0177), clamp(log2(-2552.0177), _GLF_IDENTITY(log2(-2552.0177), _GLF_IDENTITY(float(mat2(log2(-2552.0177), 1.0, 1.0, 1.0)), (false ? _GLF_FUZZED(5.0) : float(mat2(log2(-2552.0177), 1.0, 1.0, 1.0))))), log2(-2552.0177)))))))) : injectionSwitch.x)) / 1.0), float(mat2x3(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, false)), (_GLF_IDENTITY(bool(bvec3(false, true, false)), (bool(bvec3(false, true, false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) || false)), false || (false)) ? _GLF_FUZZED(_GLF_IDENTITY(log2(-2552.0177), _GLF_IDENTITY(min(_GLF_IDENTITY(log2(-2552.0177), float(float(log2(-2552.0177)))), log2(-2552.0177)), (false ? _GLF_FUZZED(14.02) : min(_GLF_IDENTITY(log2(-2552.0177), float(float(log2(-2552.0177)))), _GLF_IDENTITY(log2(-2552.0177), clamp(log2(-2552.0177), _GLF_IDENTITY(log2(-2552.0177), _GLF_IDENTITY(float(mat2(log2(-2552.0177), 1.0, 1.0, 1.0)), (false ? _GLF_FUZZED(5.0) : float(mat2(log2(-2552.0177), 1.0, 1.0, 1.0))))), log2(-2552.0177)))))))) : injectionSwitch.x), ((_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, false)), (_GLF_IDENTITY(bool(bvec3(false, true, false)), (bool(bvec3(false, true, false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) || false)), false || (false)) ? _GLF_FUZZED(_GLF_IDENTITY(log2(-2552.0177), _GLF_IDENTITY(min(_GLF_IDENTITY(log2(-2552.0177), float(float(log2(-2552.0177)))), log2(-2552.0177)), (false ? _GLF_FUZZED(14.02) : min(_GLF_IDENTITY(log2(-2552.0177), float(float(log2(-2552.0177)))), _GLF_IDENTITY(log2(-2552.0177), clamp(log2(-2552.0177), _GLF_IDENTITY(log2(-2552.0177), _GLF_IDENTITY(float(mat2(log2(-2552.0177), 1.0, 1.0, 1.0)), (false ? _GLF_FUZZED(5.0) : float(mat2(log2(-2552.0177), 1.0, 1.0, 1.0))))), log2(-2552.0177)))))))) : injectionSwitch.x)) / 1.0), 0.0, 0.0, 0.0, 0.0, 1.0)))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 0.0, 0.0))))), float(_GLF_IDENTITY(mat3(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, false)), (_GLF_IDENTITY(bool(bvec3(false, true, false)), (bool(bvec3(false, true, false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) || false)), false || (false)) ? _GLF_FUZZED(_GLF_IDENTITY(log2(-2552.0177), _GLF_IDENTITY(min(_GLF_IDENTITY(log2(-2552.0177), float(float(log2(-2552.0177)))), log2(-2552.0177)), (false ? _GLF_FUZZED(14.02) : min(_GLF_IDENTITY(log2(-2552.0177), float(float(log2(-2552.0177)))), _GLF_IDENTITY(log2(-2552.0177), clamp(log2(-2552.0177), _GLF_IDENTITY(log2(-2552.0177), _GLF_IDENTITY(float(mat2(log2(-2552.0177), 1.0, 1.0, 1.0)), (false ? _GLF_FUZZED(5.0) : float(mat2(log2(-2552.0177), 1.0, 1.0, 1.0))))), log2(-2552.0177)))))))) : injectionSwitch.x), ((_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, false)), (_GLF_IDENTITY(bool(bvec3(false, true, false)), (bool(bvec3(false, true, false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) || false)), false || (false)) ? _GLF_FUZZED(_GLF_IDENTITY(log2(-2552.0177), _GLF_IDENTITY(min(_GLF_IDENTITY(log2(-2552.0177), float(float(log2(-2552.0177)))), log2(-2552.0177)), (false ? _GLF_FUZZED(14.02) : min(_GLF_IDENTITY(log2(-2552.0177), float(float(log2(-2552.0177)))), _GLF_IDENTITY(log2(-2552.0177), clamp(log2(-2552.0177), _GLF_IDENTITY(log2(-2552.0177), _GLF_IDENTITY(float(mat2(log2(-2552.0177), 1.0, 1.0, 1.0)), (false ? _GLF_FUZZED(5.0) : float(mat2(log2(-2552.0177), 1.0, 1.0, 1.0))))), log2(-2552.0177)))))))) : injectionSwitch.x)) / 1.0), mix(float(_GLF_FUZZED(35.06)), float(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, false)), (_GLF_IDENTITY(bool(bvec3(false, true, false)), (bool(bvec3(false, true, false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) || false)), false || (false)) ? _GLF_FUZZED(_GLF_IDENTITY(log2(-2552.0177), _GLF_IDENTITY(min(_GLF_IDENTITY(log2(-2552.0177), float(float(log2(-2552.0177)))), log2(-2552.0177)), (false ? _GLF_FUZZED(14.02) : min(_GLF_IDENTITY(log2(-2552.0177), float(float(log2(-2552.0177)))), _GLF_IDENTITY(log2(-2552.0177), clamp(log2(-2552.0177), _GLF_IDENTITY(log2(-2552.0177), _GLF_IDENTITY(float(mat2(log2(-2552.0177), 1.0, 1.0, 1.0)), (false ? _GLF_FUZZED(5.0) : float(mat2(log2(-2552.0177), 1.0, 1.0, 1.0))))), log2(-2552.0177)))))))) : injectionSwitch.x), ((_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, false)), (_GLF_IDENTITY(bool(bvec3(false, true, false)), (bool(bvec3(false, true, false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) || false)), false || (false)) ? _GLF_FUZZED(_GLF_IDENTITY(log2(-2552.0177), _GLF_IDENTITY(min(_GLF_IDENTITY(log2(-2552.0177), float(float(log2(-2552.0177)))), log2(-2552.0177)), (false ? _GLF_FUZZED(14.02) : min(_GLF_IDENTITY(log2(-2552.0177), float(float(log2(-2552.0177)))), _GLF_IDENTITY(log2(-2552.0177), clamp(log2(-2552.0177), _GLF_IDENTITY(log2(-2552.0177), _GLF_IDENTITY(float(mat2(log2(-2552.0177), 1.0, 1.0, 1.0)), (false ? _GLF_FUZZED(5.0) : float(mat2(log2(-2552.0177), 1.0, 1.0, 1.0))))), log2(-2552.0177)))))))) : injectionSwitch.x)) / 1.0), float(mat2x3(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, false)), (_GLF_IDENTITY(bool(bvec3(false, true, false)), (bool(bvec3(false, true, false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) || false)), false || (false)) ? _GLF_FUZZED(_GLF_IDENTITY(log2(-2552.0177), _GLF_IDENTITY(min(_GLF_IDENTITY(log2(-2552.0177), float(float(log2(-2552.0177)))), log2(-2552.0177)), (false ? _GLF_FUZZED(14.02) : min(_GLF_IDENTITY(log2(-2552.0177), float(float(log2(-2552.0177)))), _GLF_IDENTITY(log2(-2552.0177), clamp(log2(-2552.0177), _GLF_IDENTITY(log2(-2552.0177), _GLF_IDENTITY(float(mat2(log2(-2552.0177), 1.0, 1.0, 1.0)), (false ? _GLF_FUZZED(5.0) : float(mat2(log2(-2552.0177), 1.0, 1.0, 1.0))))), log2(-2552.0177)))))))) : injectionSwitch.x), ((_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, false)), (_GLF_IDENTITY(bool(bvec3(false, true, false)), (bool(bvec3(false, true, false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) || false)), false || (false)) ? _GLF_FUZZED(_GLF_IDENTITY(log2(-2552.0177), _GLF_IDENTITY(min(_GLF_IDENTITY(log2(-2552.0177), float(float(log2(-2552.0177)))), log2(-2552.0177)), (false ? _GLF_FUZZED(14.02) : min(_GLF_IDENTITY(log2(-2552.0177), float(float(log2(-2552.0177)))), _GLF_IDENTITY(log2(-2552.0177), clamp(log2(-2552.0177), _GLF_IDENTITY(log2(-2552.0177), _GLF_IDENTITY(float(mat2(log2(-2552.0177), 1.0, 1.0, 1.0)), (false ? _GLF_FUZZED(5.0) : float(mat2(log2(-2552.0177), 1.0, 1.0, 1.0))))), log2(-2552.0177)))))))) : injectionSwitch.x)) / 1.0), 0.0, 0.0, 0.0, 0.0, 1.0)))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 0.0, 0.0), mat3(mat4(mat3(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, false)), (_GLF_IDENTITY(bool(bvec3(false, true, false)), (bool(bvec3(false, true, false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) || false)), false || (false)) ? _GLF_FUZZED(_GLF_IDENTITY(log2(-2552.0177), _GLF_IDENTITY(min(_GLF_IDENTITY(log2(-2552.0177), float(float(log2(-2552.0177)))), log2(-2552.0177)), (false ? _GLF_FUZZED(14.02) : min(_GLF_IDENTITY(log2(-2552.0177), float(float(log2(-2552.0177)))), _GLF_IDENTITY(log2(-2552.0177), clamp(log2(-2552.0177), _GLF_IDENTITY(log2(-2552.0177), _GLF_IDENTITY(float(mat2(log2(-2552.0177), 1.0, 1.0, 1.0)), (false ? _GLF_FUZZED(5.0) : float(mat2(log2(-2552.0177), 1.0, 1.0, 1.0))))), log2(-2552.0177)))))))) : injectionSwitch.x), ((_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, false)), (_GLF_IDENTITY(bool(bvec3(false, true, false)), (bool(bvec3(false, true, false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) || false)), false || (false)) ? _GLF_FUZZED(_GLF_IDENTITY(log2(-2552.0177), _GLF_IDENTITY(min(_GLF_IDENTITY(log2(-2552.0177), float(float(log2(-2552.0177)))), log2(-2552.0177)), (false ? _GLF_FUZZED(14.02) : min(_GLF_IDENTITY(log2(-2552.0177), float(float(log2(-2552.0177)))), _GLF_IDENTITY(log2(-2552.0177), clamp(log2(-2552.0177), _GLF_IDENTITY(log2(-2552.0177), _GLF_IDENTITY(float(mat2(log2(-2552.0177), 1.0, 1.0, 1.0)), (false ? _GLF_FUZZED(5.0) : float(mat2(log2(-2552.0177), 1.0, 1.0, 1.0))))), log2(-2552.0177)))))))) : injectionSwitch.x)) / 1.0), mix(float(_GLF_FUZZED(35.06)), float(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, false)), (_GLF_IDENTITY(bool(bvec3(false, true, false)), (bool(bvec3(false, true, false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) || false)), false || (false)) ? _GLF_FUZZED(_GLF_IDENTITY(log2(-2552.0177), _GLF_IDENTITY(min(_GLF_IDENTITY(log2(-2552.0177), float(float(log2(-2552.0177)))), log2(-2552.0177)), (false ? _GLF_FUZZED(14.02) : min(_GLF_IDENTITY(log2(-2552.0177), float(float(log2(-2552.0177)))), _GLF_IDENTITY(log2(-2552.0177), clamp(log2(-2552.0177), _GLF_IDENTITY(log2(-2552.0177), _GLF_IDENTITY(float(mat2(log2(-2552.0177), 1.0, 1.0, 1.0)), (false ? _GLF_FUZZED(5.0) : float(mat2(log2(-2552.0177), 1.0, 1.0, 1.0))))), log2(-2552.0177)))))))) : injectionSwitch.x), ((_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, false)), (_GLF_IDENTITY(bool(bvec3(false, true, false)), (bool(bvec3(false, true, false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) || false)), false || (false)) ? _GLF_FUZZED(_GLF_IDENTITY(log2(-2552.0177), _GLF_IDENTITY(min(_GLF_IDENTITY(log2(-2552.0177), float(float(log2(-2552.0177)))), log2(-2552.0177)), (false ? _GLF_FUZZED(14.02) : min(_GLF_IDENTITY(log2(-2552.0177), float(float(log2(-2552.0177)))), _GLF_IDENTITY(log2(-2552.0177), clamp(log2(-2552.0177), _GLF_IDENTITY(log2(-2552.0177), _GLF_IDENTITY(float(mat2(log2(-2552.0177), 1.0, 1.0, 1.0)), (false ? _GLF_FUZZED(5.0) : float(mat2(log2(-2552.0177), 1.0, 1.0, 1.0))))), log2(-2552.0177)))))))) : injectionSwitch.x)) / 1.0), float(mat2x3(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, false)), (_GLF_IDENTITY(bool(bvec3(false, true, false)), (bool(bvec3(false, true, false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) || false)), false || (false)) ? _GLF_FUZZED(_GLF_IDENTITY(log2(-2552.0177), _GLF_IDENTITY(min(_GLF_IDENTITY(log2(-2552.0177), float(float(log2(-2552.0177)))), log2(-2552.0177)), (false ? _GLF_FUZZED(14.02) : min(_GLF_IDENTITY(log2(-2552.0177), float(float(log2(-2552.0177)))), _GLF_IDENTITY(log2(-2552.0177), clamp(log2(-2552.0177), _GLF_IDENTITY(log2(-2552.0177), _GLF_IDENTITY(float(mat2(log2(-2552.0177), 1.0, 1.0, 1.0)), (false ? _GLF_FUZZED(5.0) : float(mat2(log2(-2552.0177), 1.0, 1.0, 1.0))))), log2(-2552.0177)))))))) : injectionSwitch.x), ((_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, false)), (_GLF_IDENTITY(bool(bvec3(false, true, false)), (bool(bvec3(false, true, false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) || false)), false || (false)) ? _GLF_FUZZED(_GLF_IDENTITY(log2(-2552.0177), _GLF_IDENTITY(min(_GLF_IDENTITY(log2(-2552.0177), float(float(log2(-2552.0177)))), log2(-2552.0177)), (false ? _GLF_FUZZED(14.02) : min(_GLF_IDENTITY(log2(-2552.0177), float(float(log2(-2552.0177)))), _GLF_IDENTITY(log2(-2552.0177), clamp(log2(-2552.0177), _GLF_IDENTITY(log2(-2552.0177), _GLF_IDENTITY(float(mat2(log2(-2552.0177), 1.0, 1.0, 1.0)), (false ? _GLF_FUZZED(5.0) : float(mat2(log2(-2552.0177), 1.0, 1.0, 1.0))))), log2(-2552.0177)))))))) : injectionSwitch.x)) / 1.0), 0.0, 0.0, 0.0, 0.0, 1.0)))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 0.0, 0.0))))))))))) > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                continue;
               return;
              }
            }
          }
         else
          {
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true && (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 return;
                }
              }
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))))
            continue;
          }
        }
       else
        {
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & 1)); _injected_loop_counter ++)
  {
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), (! ((false))) || false))) || false)))
      break;
     do
      {
       if(_GLF_DEAD(false))
        return;
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | 1)); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          return;
        }
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
      }
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = _GLF_IDENTITY(0, _GLF_IDENTITY((_GLF_IDENTITY(0 & -29818, (0 & -29818) | (0 & -29818))) ^ (0), ((0 & -29818) ^ (0)) / 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         do
          {
           return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             continue;
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), ! (! (bool((injectionSwitch.x > injectionSwitch.y))))))))));
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             return;
            }
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(0.0, 0.0) + (injectionSwitch), min(vec2(0.0, 0.0) + (injectionSwitch), vec2(0.0, 0.0) + (injectionSwitch)))).x > injectionSwitch.y))));
  }
 if(_GLF_DEAD(false))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 GLF_merged4_0_1_13_1_1_4_2_1_11_3_1_12num_workgroupreadvirtual_gidworkgroup_id.x = num_workgroup;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y)))), _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) || false) || false)))
    {
     do
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, ~ (_GLF_IDENTITY(~ (_injected_loop_counter), ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(~ (_injected_loop_counter), (~ (_injected_loop_counter)) / 1)), _GLF_IDENTITY(int(ivec3(_GLF_IDENTITY((~ (_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(-25844) : _injected_loop_counter)))), _GLF_IDENTITY((true ? (~ (_injected_loop_counter)) : _GLF_FUZZED(-63115)), (true ? (true ? (~ (_injected_loop_counter)) : _GLF_FUZZED(-63115)) : _GLF_FUZZED(18134)))), 1, 1)), (int(ivec3(_GLF_IDENTITY((~ (_injected_loop_counter)), (true ? (~ (_injected_loop_counter)) : _GLF_FUZZED(-63115))), 1, 1))) | (int(ivec3(_GLF_IDENTITY((~ (_injected_loop_counter)), (true ? (~ (_injected_loop_counter)) : _GLF_FUZZED(-63115))), 1, 1)))))))))) | (_injected_loop_counter)) > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), 0 | (~ (0))))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), 0 | _GLF_IDENTITY((~ (0)), (false ? _GLF_FUZZED(21546) : (~ (0))))))) : _GLF_FUZZED(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> 0)))), int(_GLF_IDENTITY(_GLF_IDENTITY(int(0), (_GLF_IDENTITY(int(0), clamp(int(0), int(0), int(0)))) | (int(0))), (_GLF_IDENTITY(int(0), _GLF_IDENTITY((int(0)) | (int(0)), clamp((int(0)) | (int(0)), (int(0)) | (int(0)), (int(_GLF_IDENTITY(0, (0) - 0))) | (int(0)))))) | (_GLF_IDENTITY(int(0), (int(_GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(_GLF_IDENTITY(0, (0) | 0), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-99823) : _GLF_IDENTITY(0, (0) | 0))), _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, (0) / 1), 0, 0)))))) | (int(0)))))))); _injected_loop_counter --)
        {
         for(int _injected_loop_counter = (0 & 9270); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              continue;
             continue;
            }
           _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_4_2_1_11_3_1_12num_workgroupreadvirtual_gidworkgroup_id.w = workgroup_id, (_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_4_2_1_11_3_1_12num_workgroupreadvirtual_gidworkgroup_id.w = workgroup_id, 0u | (GLF_merged4_0_1_13_1_1_4_2_1_11_3_1_12num_workgroupreadvirtual_gidworkgroup_id.w = workgroup_id))) >> 0u);
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           for(int _injected_loop_counter = (0 & -55915); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), false, true, false)), true && (bool(bvec4(_GLF_DEAD(false), false, true, false))))))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter --)
                  {
                   return;
                  }
                }
              }
            }
          }
         if(_GLF_DEAD(false))
          break;
        }
       if(_GLF_DEAD(false))
        break;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)));
    }
   else
    {
    }
  }
 else
  {
  }
 uint workgroup_base = _GLF_IDENTITY(workgroup_size * GLF_merged4_0_1_13_1_1_4_2_1_11_3_1_12num_workgroupreadvirtual_gidworkgroup_id.w, ~ (~ (_GLF_IDENTITY(workgroup_size * _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_4_2_1_11_3_1_12num_workgroupreadvirtual_gidworkgroup_id.w, (GLF_merged4_0_1_13_1_1_4_2_1_11_3_1_12num_workgroupreadvirtual_gidworkgroup_id.w) << (151182u & 0u)), _GLF_IDENTITY(max(workgroup_size * GLF_merged4_0_1_13_1_1_4_2_1_11_3_1_12num_workgroupreadvirtual_gidworkgroup_id.w, _GLF_IDENTITY(workgroup_size * GLF_merged4_0_1_13_1_1_4_2_1_11_3_1_12num_workgroupreadvirtual_gidworkgroup_id.w, ~ (~ (workgroup_size * GLF_merged4_0_1_13_1_1_4_2_1_11_3_1_12num_workgroupreadvirtual_gidworkgroup_id.w)))), _GLF_IDENTITY((max(workgroup_size * GLF_merged4_0_1_13_1_1_4_2_1_11_3_1_12num_workgroupreadvirtual_gidworkgroup_id.w, workgroup_size * GLF_merged4_0_1_13_1_1_4_2_1_11_3_1_12num_workgroupreadvirtual_gidworkgroup_id.w)) << 0u, ~ (~ (_GLF_IDENTITY((max(workgroup_size * GLF_merged4_0_1_13_1_1_4_2_1_11_3_1_12num_workgroupreadvirtual_gidworkgroup_id.w, workgroup_size * GLF_merged4_0_1_13_1_1_4_2_1_11_3_1_12num_workgroupreadvirtual_gidworkgroup_id.w)) << 0u, ~ (_GLF_IDENTITY(~ ((max(workgroup_size * GLF_merged4_0_1_13_1_1_4_2_1_11_3_1_12num_workgroupreadvirtual_gidworkgroup_id.w, workgroup_size * GLF_merged4_0_1_13_1_1_4_2_1_11_3_1_12num_workgroupreadvirtual_gidworkgroup_id.w)) << 0u), (~ ((max(workgroup_size * GLF_merged4_0_1_13_1_1_4_2_1_11_3_1_12num_workgroupreadvirtual_gidworkgroup_id.w, workgroup_size * GLF_merged4_0_1_13_1_1_4_2_1_11_3_1_12num_workgroupreadvirtual_gidworkgroup_id.w)) << 0u)) | 0u)))))))))));
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, (true ? subgroup_local_id : _GLF_IDENTITY(_GLF_FUZZED(subgroup_id), (_GLF_FUZZED(subgroup_id)) | (0u >> _GLF_IDENTITY(uint(5u), uint(5u))))));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))) / 1.0), _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))))))
  {
  }
 else
  {
   do
    {
     do
      {
       GLF_merged4_0_1_13_1_1_4_2_1_11_3_1_12num_workgroupreadvirtual_gidworkgroup_id.z = virtual_gid;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_DEAD(false))
  return;
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size);
 uint read = atomicLoad(buf[_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_4_2_1_11_3_1_12num_workgroupreadvirtual_gidworkgroup_id, (GLF_merged4_0_1_13_1_1_4_2_1_11_3_1_12num_workgroupreadvirtual_gidworkgroup_id) ^ (uvec4(0u, 0u, 0u, 0u) << _GLF_IDENTITY(uvec4(1u), uvec4(1u)))).z], 4, 64, 0);
 for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    break;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, false || (true)), (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) < injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
      {
       if(_GLF_DEAD(false))
        break;
      }
     else
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              break;
             return;
             if(_GLF_DEAD(false))
              break;
            }
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), bool(bvec4(false, false, false, false)))))
          {
           if(_GLF_DEAD(false))
            return;
           continue;
          }
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, _GLF_IDENTITY(false, bool(bvec2(false, false))) || (_injected_loop_counter < 1))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              return;
             return;
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           break;
          }
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bool(_GLF_DEAD(false))), ! (! (_GLF_IDENTITY(bool(bool(_GLF_DEAD(false))), true && (bool(bool(_GLF_DEAD(false))))))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         return;
        }
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), true && (_GLF_WRAPPED_IF_FALSE(false))))
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          return;
         for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (_GLF_ONE(1.0, injectionSwitch.y)) - sin(0.0)))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             break;
             if(_GLF_DEAD(false))
              break;
            }
          }
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            break;
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))
              {
              }
             else
              {
               return;
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
        }
      }
     do
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(! (! (_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y)))), (! (! (_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))))) && true))))))
          return;
        }
       else
        {
        }
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), (_GLF_IDENTITY(int(7), int(7))) - 0)))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
              {
               return;
              }
             else
              {
              }
            }
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          break;
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
          return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(26.83) : injectionSwitch.x)) > injectionSwitch.y))))
        break;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y))));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        continue;
       return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       continue;
      }
     if(_GLF_DEAD(false))
      break;
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       break;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
    }
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    continue;
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
  {
   for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > (-21052 & 0)), true && (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > (-21052 & 0), (_injected_loop_counter > (-21052 & 0)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(_GLF_DEAD(false))
      break;
     GLF_merged4_0_1_13_1_1_4_2_1_11_3_1_12num_workgroupreadvirtual_gidworkgroup_id.y = read;
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
    }
  }
 do
  {
   do
    {
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, false, true), _GLF_IDENTITY(bvec3(bvec3(bvec3(true, false, true))), _GLF_IDENTITY(bvec3(bvec4(bvec3(bvec3(bvec3(true, false, true))), false)), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec4(bvec3(bvec3(bvec3(true, false, true))), false))), bvec3(bvec4(bvec3(bvec3(bvec4(bvec3(bvec3(bvec3(true, false, true))), false))), true))))))))), false, false)))))
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec2((injectionSwitch.x < injectionSwitch.y), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x < injectionSwitch.y)))))) || false))))
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          continue;
         atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
        }
      }
     else
      {
      }
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
     continue;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0))) * vec2(1.0, 1.0)).x < injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))) / 1.0) < injectionSwitch.y)))), ! (! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true && (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), (((injectionSwitch.x > injectionSwitch.y))) && true))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), (((injectionSwitch.x > injectionSwitch.y))) && true))), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), (((injectionSwitch.x > injectionSwitch.y))) && true)))) && true), true)), ! (! (bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), (((injectionSwitch.x > injectionSwitch.y))) && true))), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), (((injectionSwitch.x > injectionSwitch.y))) && true)))) && true), true)))))))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             continue;
            }
           if(_GLF_DEAD(false))
            break;
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x < injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec4(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true, true)))))))
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              continue;
             do
              {
               do
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     do
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                          {
                           if(_GLF_DEAD(false))
                            return;
                           if(_GLF_DEAD(false))
                            return;
                          }
                         if(_GLF_DEAD(false))
                          continue;
                        }
                       else
                        {
                         if(_GLF_DEAD(false))
                          break;
                         if(_GLF_DEAD(false))
                          continue;
                         return;
                        }
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x < injectionSwitch.y), true && (! (injectionSwitch.x < injectionSwitch.y)))))))))), bvec3(bvec4(bvec3(false, false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x < injectionSwitch.y), true && (! (injectionSwitch.x < injectionSwitch.y)))))))))), false)))))))
                          {
                          }
                         else
                          {
                           return;
                          }
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(false))
                        return;
                       return;
                       if(_GLF_DEAD(false))
                        continue;
                      }
                    }
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                    {
                     if(_GLF_DEAD(false))
                      continue;
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        return;
                       return;
                      }
                    }
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))));
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false))), true)), ! (! (bool(bvec2(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false))), true))))), ! (! (bool(bvec2(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false))), true))))))))
          {
           if(_GLF_DEAD(false))
            return;
           continue;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_DEAD(false))
          {
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), false || (_GLF_WRAPPED_IF_FALSE(false))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              continue;
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               return;
              }
             do
              {
               if(_GLF_DEAD(false))
                return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), mix(vec2((mat2(1.0) * (injectionSwitch))[0], (mat2(1.0) * (injectionSwitch))[1]), vec2(_GLF_FUZZED(8081.1853), _GLF_FUZZED(-8.7)), bvec2(false, false)))).x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), ((injectionSwitch) * mat2(1.0)) / vec2(1.0, 1.0))).y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(tanh(-3.2))))))))))))
          continue;
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             continue;
            }
           continue;
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            continue;
          }
         if(_GLF_DEAD(false))
          break;
        }
      }
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(subgroup_local_id + 1 < subgroup_size)
  {
   atomicStore(checker[_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_4_2_1_11_3_1_12num_workgroupreadvirtual_gidworkgroup_id, clamp(GLF_merged4_0_1_13_1_1_4_2_1_11_3_1_12num_workgroupreadvirtual_gidworkgroup_id, GLF_merged4_0_1_13_1_1_4_2_1_11_3_1_12num_workgroupreadvirtual_gidworkgroup_id, _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_4_2_1_11_3_1_12num_workgroupreadvirtual_gidworkgroup_id, _GLF_IDENTITY(uvec4(0u, 0u, 0u, 0u), ~ (~ (_GLF_IDENTITY(uvec4(0u, 0u, 0u, 0u), (uvec4(0u, 0u, 0u, 0u)) ^ uvec4(0u, 0u, 0u, 0u))))) ^ (GLF_merged4_0_1_13_1_1_4_2_1_11_3_1_12num_workgroupreadvirtual_gidworkgroup_id)))).z], GLF_merged4_0_1_13_1_1_4_2_1_11_3_1_12num_workgroupreadvirtual_gidworkgroup_id.y, 4, 64, _GLF_IDENTITY(4, (_GLF_IDENTITY(4, 0 | (4))) ^ 0));
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       do
        {
         if(_GLF_DEAD(false))
          continue;
         subgroupAll(false);
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             continue;
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
           if(_GLF_DEAD(false))
            continue;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)), true, _GLF_IDENTITY(true, bool(bool(true))), _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (_GLF_IDENTITY(_GLF_IDENTITY(! ((injectionSwitch.x < injectionSwitch.y)), bool(bvec4(! ((injectionSwitch.x < injectionSwitch.y)), true, false, false))), bool(bvec4(_GLF_IDENTITY(! ((injectionSwitch.x < injectionSwitch.y)), bool(bvec4(! ((injectionSwitch.x < injectionSwitch.y)), true, false, false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, _GLF_IDENTITY(false, false || (false)))))))))))), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))))))
                return;
               if(_GLF_DEAD(false))
                continue;
              }
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
          continue;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      continue;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
    return;
   if(_GLF_DEAD(false))
    {
     do
      {
       return;
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   atomicStore(buf[GLF_merged4_0_1_13_1_1_4_2_1_11_3_1_12num_workgroupreadvirtual_gidworkgroup_id.z], GLF_merged4_0_1_13_1_1_4_2_1_11_3_1_12num_workgroupreadvirtual_gidworkgroup_id.y, 4, 64, _GLF_IDENTITY(4, _GLF_IDENTITY(max(4, 4), (_GLF_IDENTITY(max(4, 4), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(max(4, 4), (max(4, 4)) << 0))), 0 | ((~ (_GLF_IDENTITY(max(4, 4), (max(4, 4)) << 0))))))) >> 0)));
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      return;
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               return;
              }
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                return;
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-184.333)))))))
              {
              }
             else
              {
               return;
              }
            }
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(false))
                return;
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(false))
                    return;
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    return;
                  }
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (-25728 & 0) | (_GLF_IDENTITY(int(2), (_GLF_IDENTITY(int(2), (int(2)) | 0)) - 0))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), min(_GLF_IDENTITY(int(2), int(2)), _GLF_IDENTITY(int(2), int(2))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > ((-88438 & 0) | 0)); _injected_loop_counter --)
                    {
                     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(_GLF_IDENTITY(bvec2(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true), bvec2(bvec4(bvec2(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true), false, true))))))))
                      continue;
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          {
                          }
                         else
                          {
                           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            {
                            }
                           else
                            {
                             return;
                            }
                          }
                        }
                       else
                        {
                        }
                      }
                     else
                      {
                      }
                    }
                   if(_GLF_DEAD(false))
                    return;
                  }
                 else
                  {
                  }
                }
               if(_GLF_DEAD(false))
                return;
              }
            }
          }
        }
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(faceforward(injectionSwitch, _GLF_IDENTITY(max(vec2(-2.0, 83.24), -1.0), vec2(1.0, 1.0) * (max(vec2(-2.0, 83.24), -1.0))), injectionSwitch)) : injectionSwitch)).y)))) || false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y) || false, ((injectionSwitch.x > injectionSwitch.y) || _GLF_IDENTITY(false, (false) && true)) || false))))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 return;
                }
               else
                {
                }
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  return;
                }
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 continue;
                 if(_GLF_DEAD(false))
                  break;
                }
              }
             if(_GLF_DEAD(false))
              break;
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              return;
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                break;
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    return;
                   return;
                  }
                 for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) / 1))
                  {
                   return;
                  }
                }
               else
                {
                }
              }
             else
              {
              }
            }
           return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               do
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
                  {
                  }
                 else
                  {
                   do
                    {
                     do
                      {
                       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, true && (false))), false || ((_GLF_IDENTITY(false, true && (false))))) || false)))
                        return;
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
                  }
                 return;
                 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                  return;
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        return;
                       break;
                      }
                     continue;
                    }
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                    {
                     return;
                    }
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
             else
              {
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))))
              continue;
            }
          }
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             do
              {
               do
                {
                 if(_GLF_DEAD(false))
                  return;
                 return;
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(false))
                break;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (injectionSwitch.x > injectionSwitch.y)) || false)))))));
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          return;
        }
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))
      return;
    }
   else
    {
    }
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))), true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x)))), (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))))) && true))))); _injected_loop_counter --)
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, (1) << 0)])), injectionSwitch)).y))))
        {
         if(_GLF_DEAD(false))
          break;
         for(int _injected_loop_counter = (1 | int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, true, true))), (injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(_GLF_DEAD(false))
            return;
           do
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY((false), bool(bvec4((false), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))) || false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY((false), bool(bvec4((false), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))) || false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((false), bool(bvec4((false), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))) || false, false, true, false)), bool(bvec4(bool(bvec4(_GLF_IDENTITY((false), bool(bvec4((false), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))) || false, false, true, false)), true, false, true)))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (! (_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY((false), bool(bvec4((false), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))) || false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((false), bool(bvec4((false), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))) || false, false, true, false)), bool(bvec4(bool(bvec4(_GLF_IDENTITY((false), bool(bvec4((false), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))) || false, false, true, false)), true, false, true)))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (! (bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY((false), bool(bvec4((false), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))) || false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((false), bool(bvec4((false), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))) || false, false, true, false)), bool(bvec4(bool(bvec4(_GLF_IDENTITY((false), bool(bvec4((false), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))) || false, false, true, false)), true, false, true)))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))))))
              {
               if(_GLF_DEAD(false))
                break;
               continue;
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               continue;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)))))))
              break;
             do
              {
               do
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       return;
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                 if(_GLF_DEAD(false))
                  continue;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             while(_GLF_WRAPPED_LOOP(false));
             do
              {
               if(_GLF_DEAD(false))
                break;
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       if(_GLF_DEAD(false))
        continue;
       do
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), int(ivec2(int(0), int(_GLF_ZERO(0.0, injectionSwitch.x))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             do
              {
               subgroupAll(true);
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(false))
            continue;
          }
         else
          {
           if(_GLF_DEAD(false))
            continue;
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(vec4(injectionSwitch.x, determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, cos(0.0), 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)), 1.0, 1.0))) > injectionSwitch.y))));
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))))
    return;
  }
}
