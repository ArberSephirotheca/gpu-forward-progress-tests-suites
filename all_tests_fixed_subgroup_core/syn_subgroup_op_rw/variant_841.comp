#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    break;
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
      return;
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       do
        {
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      return;
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     return;
    }
  }
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), ((! (false))) || false))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       continue;
      }
     return;
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   for(int _injected_loop_counter = (_GLF_IDENTITY(1 | 0, (1 | 0) ^ 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_DEAD(false)) || false, bool(_GLF_IDENTITY(bool((_GLF_DEAD(false)) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(bool((_GLF_DEAD(false)) || false), bool(bvec3(bool((_GLF_DEAD(false)) || false), true, false)))))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       break;
      }
     do
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY(true && (_GLF_WRAPPED_LOOP(false)), bool(_GLF_IDENTITY(bvec3(true && (_GLF_WRAPPED_LOOP(false)), false, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(true && (_GLF_WRAPPED_LOOP(false)), false, false), false)), bvec3(bvec4(bvec3(bvec4(bvec3(true && (_GLF_WRAPPED_LOOP(false)), false, false), false)), true))))))));
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               do
                {
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                  return;
                 return;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           return;
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    return;
  }
uint subgroup_size = 16;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = (((0 ^ 1) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          continue;
         break;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         break;
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = _GLF_IDENTITY(0, max(0, 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 1)); _injected_loop_counter ++)
          {
           return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     if(_GLF_DEAD(false))
      continue;
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  return;
 uint num_workgroup = _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) | 0u), 0u ^ (gl_NumWorkGroups.x));
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(false, false, _GLF_IDENTITY(true, ! (! (true))), false)), (bool(bvec4(false, false, true, false))) || false), ! _GLF_IDENTITY((! (_GLF_IDENTITY(bool(bvec4(false, false, true, false)), _GLF_IDENTITY((bool(bvec4(false, false, true, false))), bool(bvec2((bool(bvec4(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), true && (! (_GLF_IDENTITY(false, (false) || false)))))), false, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, true)), false || (bool(bvec2(true, true))))), false))), false))) || false))), ! (! ((! (_GLF_IDENTITY(bool(bvec4(false, false, _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))), false)), _GLF_IDENTITY((bool(bvec4(false, false, true, false))), bool(bvec2((bool(bvec4(false, false, true, false))), false))) || false))))))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
    }
  }
 else
  {
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(false, false, false, false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(bool(bvec4(false, false, false, false)), (bool(bvec4(false, false, false, false))) && true))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(false, false, false, false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(bool(bvec4(false, false, false, false)), (bool(bvec4(false, false, false, false))) && true))), (_GLF_IDENTITY(bool(bvec4(false, false, false, false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(bool(bvec4(false, false, false, false)), (bool(bvec4(false, false, false, false))) && true)))) && true), false, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(false, false, false, false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(bool(bvec4(false, false, false, false)), (bool(bvec4(false, false, false, false))) && true))), (_GLF_IDENTITY(bool(bvec4(false, false, false, false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(bool(bvec4(false, false, false, false)), (bool(bvec4(false, false, false, false))) && true)))) && true), false, false), true))))), (_GLF_IDENTITY(bool(bvec4(false, false, false, false)), ! (! (bool(bvec4(false, false, false, false)))))) && true)), (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, _GLF_IDENTITY(false, (false) && true), false, false)), (_GLF_IDENTITY(bool(bvec4(false, false, false, false)), ! (! (bool(bvec4(false, false, false, false)))))) && true)), (injectionSwitch.x > injectionSwitch.y)), false, false)))), true && (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(false, false, false, false)), (_GLF_IDENTITY(bool(bvec4(false, _GLF_IDENTITY(false, (false) || false), false, false)), ! (! (bool(bvec4(false, _GLF_IDENTITY(false, (false) || false), false, false)))))) && true), (_GLF_IDENTITY(bool(bvec4(false, false, false, false)), (_GLF_IDENTITY(bool(bvec4(false, _GLF_IDENTITY(false, (false) || false), false, false)), ! (_GLF_IDENTITY(! (bool(bvec4(false, _GLF_IDENTITY(false, (false) || false), false, false))), (! (bool(bvec4(false, _GLF_IDENTITY(false, (false) || false), false, false)))) && true)))) && true)) && true)), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))))
  return;
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
  }
 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), false || (_GLF_WRAPPED_LOOP(false))));
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY((subgroup_size), max(_GLF_IDENTITY((subgroup_size), min((subgroup_size), (subgroup_size))), (subgroup_size))) >> 0u, ((subgroup_size) >> 0u) / 1u)), 0u + _GLF_IDENTITY((workgroup_base + _GLF_IDENTITY(subgroup_id, ~ (~ (subgroup_id))) * _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, min(_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), subgroup_size))) >> _GLF_IDENTITY(0u, _GLF_IDENTITY(clamp(0u, 0u, 0u), (90859u & 0u) ^ (clamp(0u, 0u, 0u)))))), ~ (~ ((workgroup_base + _GLF_IDENTITY(subgroup_id, ~ (~ (subgroup_id))) * _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, min(_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), subgroup_size))) >> _GLF_IDENTITY(0u, _GLF_IDENTITY(clamp(0u, 0u, 0u), (90859u & 0u) ^ (clamp(0u, 0u, 0u)))))))))) + subgroup_local_id;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = (_GLF_IDENTITY((24364 << 93620), min(_GLF_IDENTITY((24364 << 93620), ((24364 << 93620)) | 0), (24364 << 93620))) & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), max(_GLF_IDENTITY(int(1), 0 ^ (int(1))), int(1))), int(_GLF_IDENTITY(1, 1 * (1))))) >> _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, (1) | (0 | 0)))))); _injected_loop_counter ++)
    {
     return;
    }
   if(_GLF_DEAD(false))
    return;
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bool(! (injectionSwitch.x > injectionSwitch.y))))))))))
    continue;
   do
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (false))))) && true), (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), vec2(0.0, 0.0) + ((injectionSwitch) * mat2(1.0)))).x > injectionSwitch.y)) || (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), bool(bvec4((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))), _GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y, (false ? _GLF_FUZZED(-8.0) : injectionSwitch.y))))), true && ((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_IDENTITY(_GLF_FUZZED(-8.0), max(_GLF_IDENTITY(_GLF_FUZZED(-8.0), (_GLF_FUZZED(-8.0)) + 0.0), _GLF_FUZZED(-8.0))) : injectionSwitch.y))))))) || false), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(660.965) : injectionSwitch.x)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), min(_GLF_IDENTITY(mat2(1.0) * (injectionSwitch), vec2(vec4(mat2(1.0) * (injectionSwitch), 0.0, 1.0))), mat2(1.0) * (injectionSwitch)))).x, mix(float(_GLF_FUZZED(float(105011u))), float(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), min(_GLF_IDENTITY(mat2(1.0) * (injectionSwitch), vec2(vec4(mat2(1.0) * (injectionSwitch), 0.0, 1.0))), mat2(1.0) * (injectionSwitch)))).x), bool(true))))) > injectionSwitch.y))));
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y))));
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec4(true, true, true, false)))), false || (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec4(true, true, true, false)))))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false)))))), bool(bool(false)))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         return;
         if(_GLF_DEAD(false))
          break;
        }
      }
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), ! (_GLF_IDENTITY(! (bool(false)), ! (! (! (bool(false)))))))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), false || (true))))
    {
     return;
    }
   else
    {
    }
  }
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)) + subgroup_id * subgroup_size, (workgroup_base + subgroup_id * subgroup_size) >> _GLF_IDENTITY(0u, (0u) | 0u)), ~ (~ (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + subgroup_id * subgroup_size) >> 0u)))) + _GLF_IDENTITY(((subgroup_local_id + _GLF_IDENTITY(1, clamp(1, 1, 1))) % subgroup_size), (((subgroup_local_id + 1) % subgroup_size)) | 0u);
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, bool(bvec4(false, true, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))
      return;
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
     for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(_injected_loop_counter)))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < _GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), (~ (1)) | 0)))) >> 0), ! (! (_injected_loop_counter < 1))))), _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(! (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1)))), bool(bvec4(bool(bool(! (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1)))), false, false, true))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bool(! (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1)))), bool(bvec4(bool(bool(! (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1)))), false, false, true)))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(bool(bool(! (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1)))), bool(bvec4(bool(bool(! (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1)))), false, false, true))))), bool(bool(! (! (_GLF_IDENTITY(bool(bool(! (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1)))), bool(bvec4(bool(bool(! (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1)))), false, false, true)))))))))))))))))); _GLF_IDENTITY(_injected_loop_counter ++, (_GLF_IDENTITY(_injected_loop_counter ++, _GLF_IDENTITY(0, 0 ^ (0)) + (_injected_loop_counter ++))) | (0 << _GLF_IDENTITY(int(2), int(2)))))
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           return;
          }
         while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))), bool(bvec3(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))), true, false))));
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
            continue;
           if(_GLF_DEAD(false))
            return;
          }
        }
       if(_GLF_DEAD(false))
        break;
      }
    }
  }
 else
  {
  }
 uint read = atomicLoad(buf[virtual_gid], _GLF_IDENTITY(_GLF_IDENTITY(4, max(4, 4)), (4) | _GLF_IDENTITY((4), ((4)) | ((4)))), 64, 0);
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(1, (1) | (1))), 4, 64, _GLF_IDENTITY(4, ~ (_GLF_IDENTITY(~ (4), max(~ (4), ~ (4))))));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec4(true, true, true, false)))))
  {
   if(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, ~ (~ (1))))))))) < subgroup_size, ! (! (subgroup_local_id + 1 < subgroup_size))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, ~ (~ (1))))))))) < subgroup_size, ! (! (subgroup_local_id + 1 < subgroup_size))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + _GLF_IDENTITY(length(vec2(0.0, 0.0)), clamp(length(vec2(0.0, 0.0)), length(vec2(0.0, 0.0)), length(vec2(0.0, 0.0))))) > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       do
        {
         if(_GLF_DEAD(false))
          continue;
         atomicStore(checker[virtual_gid], read, _GLF_IDENTITY(4, (4) << int(_GLF_ZERO(0.0, injectionSwitch.x))), 64, 4);
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bool(false))))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))).x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, _GLF_IDENTITY(bool(bvec4(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) || false), false, true)), ! (! (bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, false, _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, bool(bvec2(true, false))))))))))))))))
        return;
       for(int _injected_loop_counter = (68752 & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))), _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))), bool(bvec2(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))), false))), ! (! (_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6)))))))), (bool(bool(_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))), ! (! (_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), 0 ^ (int(6))))))))))) || _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false))))))), false || (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false))))))))), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false))))))), false || (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false))))))), false || (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false)))))))))) && true), false)))), bool(bvec3(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))), bool(bvec2(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))), false))), ! (! (_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6)))))))), (bool(bool(_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))), ! (! (_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), 0 ^ (int(6))))))))))) || _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false))))))), false || (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false))))))))), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false))))))), false || (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false))))))), false || (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false)))))))))) && true), false)))), false, true))))), (! (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))), false || (_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) / 1), max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) / 1), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) / 1), min(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) / 1), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) / 1), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) / 1))))))))) >> (0 << _GLF_IDENTITY(int(5), int(5))))), ! (! _GLF_IDENTITY((_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6)))), ! (_GLF_IDENTITY(! ((_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))))), ! (! (_GLF_IDENTITY(! ((_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))))), (! ((_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6)))))) || false)))))))))), (bool(bool(_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))), ! (! (_injected_loop_counter != (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), (true ? int(6) : _GLF_FUZZED(-56877))), int(6))))))))) || false)))) || false), false || (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))), ! (! (_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6)))))))), (bool(bool(_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), int(ivec3(int(6), 0, 0))))), ! (! (_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), 0 ^ _GLF_IDENTITY((int(6)), 0 ^ (_GLF_IDENTITY((int(6)), clamp(_GLF_IDENTITY((int(6)), ~ (~ ((int(6))))), (int(6)), (int(6))))))))))))))) || _GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false))))))), false || (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false)))))))))))), (! (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))), ! (! (_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6)))))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))), ! (! (_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6)))))))), _GLF_IDENTITY((bool(bool(_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), int(ivec3(int(6), 0, 0))))), ! (! (_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), 0 ^ _GLF_IDENTITY((int(6)), 0 ^ (_GLF_IDENTITY((int(6)), clamp(_GLF_IDENTITY((int(6)), ~ (~ ((int(6))))), (int(6)), (int(6))))))))))))))) || _GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false))))))), false || (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false))))))))), ! (! ((bool(bool(_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(ivec3(int(6), 0, 0))), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(int(6), int(ivec3(int(6), 0, 0))), 1, (0 >> _GLF_IDENTITY(int(3), int(3)))), (ivec3(_GLF_IDENTITY(int(6), int(ivec3(int(6), 0, 0))), 1, (0 >> _GLF_IDENTITY(int(3), int(3))))) << ivec3(0, 0, 0))), (int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(int(6), int(ivec3(int(6), 0, 0))), 1, (0 >> _GLF_IDENTITY(int(3), int(3)))), (ivec3(_GLF_IDENTITY(int(6), int(ivec3(int(6), 0, 0))), 1, (0 >> _GLF_IDENTITY(int(3), int(3))))) << ivec3(0, 0, 0)))) >> 0)))), ! (! (_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), _GLF_IDENTITY(0 ^ _GLF_IDENTITY((int(6)), 0 ^ (_GLF_IDENTITY((int(6)), clamp(_GLF_IDENTITY((int(6)), ~ (~ ((int(6))))), (int(6)), (int(6)))))), (0 ^ _GLF_IDENTITY((_GLF_IDENTITY(int(6), (int(6)) + 0)), 0 ^ (_GLF_IDENTITY((int(6)), clamp(_GLF_IDENTITY((int(6)), ~ (~ ((int(6))))), (int(6)), (int(6))))))) * 1)))))))))) || _GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false))))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false))))))), ! (! (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false))))))))))))))))))) && true), (! (_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) ^ (0 | 0))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) | (6))), int(6))), ! (! _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))), ! (! (_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(6, clamp(6, 6, 6))), int(6))), true && (_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))))))))), ! (_GLF_IDENTITY(! ((_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))))), ! _GLF_IDENTITY((! (! (_GLF_IDENTITY((_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6)))), ((_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))))) && true)))), ((! (! ((_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6)))))))) || false)))))))), _GLF_IDENTITY((bool(bool(_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) ^ _GLF_IDENTITY(0, max(0, 0)))), int(6))), ! _GLF_IDENTITY((! (_injected_loop_counter != _GLF_IDENTITY((0 << _GLF_IDENTITY(int(6), int(6))), ((0 << _GLF_IDENTITY(int(6), int(6)))) | 0))), bool(bvec3((! (_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), ! (! ((bool(bool(_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) ^ _GLF_IDENTITY(0, max(0, 0)))), int(6))), ! _GLF_IDENTITY((! (_injected_loop_counter != _GLF_IDENTITY((0 << _GLF_IDENTITY(int(6), int(6))), ((0 << _GLF_IDENTITY(int(6), int(6)))) | 0))), bool(bvec3((! (_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))) || false)))) || false))))), _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) && true)), false || (bool(_GLF_IDENTITY(false, (false) && true))))))))) || (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, 0 + (_injected_loop_counter)) != (0 << _GLF_IDENTITY(int(6), int(6))), _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))), ! (! (_injected_loop_counter != (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(6), int(6)), 0 | (0 << _GLF_IDENTITY(int(6), int(6)))))))))), (bool(bool(_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))), ! (! (_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), 0 ^ (int(6))))))))))) || _GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false))))))), false || (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false)))))))))), (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_injected_loop_counter != _GLF_IDENTITY((0 << _GLF_IDENTITY(int(6), int(6))), (false ? _GLF_FUZZED(_GLF_IDENTITY(bitCount(atomicXor(_injected_loop_counter, _injected_loop_counter)), (true ? bitCount(atomicXor(_injected_loop_counter, _injected_loop_counter)) : _GLF_FUZZED(_injected_loop_counter)))) : _GLF_IDENTITY((0 << _GLF_IDENTITY(int(6), int(6))), ((0 << _GLF_IDENTITY(int(6), int(6)))) | ((0 << _GLF_IDENTITY(int(6), int(6))))))), ! (! _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / 1)))) != (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(6), int(6)), 0 | (0 << _GLF_IDENTITY(int(6), int(6)))))), ((_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / 1)))) != (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(6), int(6)), 0 | (0 << _GLF_IDENTITY(int(6), int(6))))))) && true))))), (bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, ~ (_GLF_IDENTITY(~ (_injected_loop_counter), clamp(~ (_injected_loop_counter), ~ (_injected_loop_counter), ~ (_injected_loop_counter))))) != (0 << _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, (_GLF_IDENTITY(6, 0 ^ (6))) >> _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (false ? _GLF_FUZZED(67111) : 0)), 0)))))), ! (! (_injected_loop_counter != (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), 0 ^ (int(6)))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), 0 ^ (int(6)))), (_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), 0 ^ (int(6))))) >> 0))))))))))) || _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false))))))), bool(bool(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false)))))))))), false || (_GLF_IDENTITY(false, _GLF_IDENTITY(false, bool(bvec3(false, false, false))) || (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false))))))))))) || false))), (! (_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))), ! _GLF_IDENTITY((! _GLF_IDENTITY((_injected_loop_counter != (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) | (0))) << 0) << _GLF_IDENTITY(int(6), int(6)))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))), (_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6)))) && true))), ! (! (! ((_GLF_IDENTITY(_injected_loop_counter, int(ivec3(_injected_loop_counter, _GLF_IDENTITY((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY(int(1), _GLF_IDENTITY((int(1)), clamp(_GLF_IDENTITY((int(1)), int(ivec2((int(1)), 1))), (int(1)), _GLF_IDENTITY((int(1)), (false ? _GLF_FUZZED(26411) : (int(1)))))) | 0), max(int(1), int(1))))), ~ _GLF_IDENTITY((~ ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) | 0), max(int(1), int(1)))), (1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) | 0), max(int(1), int(1))))) ^ 0)))), int(ivec2((~ ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) | 0), max(int(1), int(1)))), (1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) | 0), max(int(1), int(1))))) ^ 0)))), 0)))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), min(int(1), _GLF_IDENTITY(int(1), max(int(1), int(1))))), int(1))), int(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY(int(1), _GLF_IDENTITY((int(1)), clamp(_GLF_IDENTITY((int(1)), int(ivec2((int(1)), 1))), (int(1)), _GLF_IDENTITY((int(1)), (false ? _GLF_FUZZED(26411) : (int(1)))))) | 0), max(int(1), int(1))))), ~ _GLF_IDENTITY((~ ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) | 0), max(int(1), int(1)))), (1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) | 0), max(int(1), int(1))))) ^ 0)))), int(ivec2((~ ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) | 0), max(int(1), int(1)))), (1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) | 0), max(int(1), int(1))))) ^ 0)))), 0)))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), min(int(1), _GLF_IDENTITY(int(1), max(int(1), int(1))))), int(1))), ~ (~ ((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY(int(1), _GLF_IDENTITY((int(1)), clamp(_GLF_IDENTITY((int(1)), int(ivec2((int(1)), 1))), (int(1)), _GLF_IDENTITY((int(1)), (false ? _GLF_FUZZED(26411) : (int(1)))))) | 0), max(int(1), int(1))))), ~ _GLF_IDENTITY((~ ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) | 0), max(int(1), int(1)))), (1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) | 0), max(int(1), int(1))))) ^ 0)))), int(ivec2((~ ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) | 0), max(int(1), int(1)))), (1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) | 0), max(int(1), int(1))))) ^ 0)))), 0)))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), min(int(1), _GLF_IDENTITY(int(1), max(int(1), int(1))))), int(1)))))))), 1))) != (_GLF_IDENTITY(0, int(_GLF_IDENTITY(ivec4(0, 1, 1, 1), ivec4(0, 0, 0, 0) + (ivec4(0, 1, 1, 1))))) << _GLF_IDENTITY(int(6), int(6))))))))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool((! _GLF_IDENTITY((_injected_loop_counter != (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) | (0))) << 0) << _GLF_IDENTITY(int(6), int(6)))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))), (_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6)))) && true))), ! (! (! ((_GLF_IDENTITY(_injected_loop_counter, int(ivec3(_injected_loop_counter, _GLF_IDENTITY((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY(int(1), _GLF_IDENTITY((int(1)), clamp(_GLF_IDENTITY((int(1)), int(ivec2((int(1)), 1))), (int(1)), _GLF_IDENTITY((int(1)), (false ? _GLF_FUZZED(26411) : (int(1)))))) | 0), max(int(1), int(1))))), ~ _GLF_IDENTITY((~ ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) | 0), max(int(1), int(1)))), (1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) | 0), max(int(1), int(1))))) ^ 0)))), int(ivec2((~ ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) | 0), max(int(1), int(1)))), (1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) | 0), max(int(1), int(1))))) ^ 0)))), 0)))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), min(int(1), _GLF_IDENTITY(int(1), max(int(1), int(1))))), int(1))), int(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY(int(1), _GLF_IDENTITY((int(1)), clamp(_GLF_IDENTITY((int(1)), int(ivec2((int(1)), 1))), (int(1)), _GLF_IDENTITY((int(1)), (false ? _GLF_FUZZED(26411) : (int(1)))))) | 0), max(int(1), int(1))))), ~ _GLF_IDENTITY((~ ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) | 0), max(int(1), int(1)))), (1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) | 0), max(int(1), int(1))))) ^ 0)))), int(ivec2((~ ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) | 0), max(int(1), int(1)))), (1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) | 0), max(int(1), int(1))))) ^ 0)))), 0)))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), min(int(1), _GLF_IDENTITY(int(1), max(int(1), int(1))))), int(1))), ~ (~ ((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY(int(1), _GLF_IDENTITY((int(1)), clamp(_GLF_IDENTITY((int(1)), int(ivec2((int(1)), 1))), (int(1)), _GLF_IDENTITY((int(1)), (false ? _GLF_FUZZED(26411) : (int(1)))))) | 0), max(int(1), int(1))))), ~ _GLF_IDENTITY((~ ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) | 0), max(int(1), int(1)))), (1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) | 0), max(int(1), int(1))))) ^ 0)))), int(ivec2((~ ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) | 0), max(int(1), int(1)))), (1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) | 0), max(int(1), int(1))))) ^ 0)))), 0)))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), min(int(1), _GLF_IDENTITY(int(1), max(int(1), int(1))))), int(1)))))))), 1))) != (_GLF_IDENTITY(0, int(_GLF_IDENTITY(ivec4(0, 1, 1, 1), ivec4(0, 0, 0, 0) + (ivec4(0, 1, 1, 1))))) << _GLF_IDENTITY(int(6), int(6)))))))))))), (bool((! _GLF_IDENTITY((_injected_loop_counter != (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) | (0))) << 0) << _GLF_IDENTITY(int(6), int(6)))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))), (_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6)))) && true))), ! (! (! ((_GLF_IDENTITY(_injected_loop_counter, int(ivec3(_injected_loop_counter, _GLF_IDENTITY((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY(int(1), _GLF_IDENTITY((int(1)), clamp(_GLF_IDENTITY((int(1)), int(ivec2((int(1)), 1))), (int(1)), _GLF_IDENTITY((int(1)), (false ? _GLF_FUZZED(26411) : (int(1)))))) | 0), max(int(1), int(1))))), ~ _GLF_IDENTITY((~ ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) | 0), max(int(1), int(1)))), (1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) | 0), max(int(1), int(1))))) ^ 0)))), int(ivec2((~ ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) | 0), max(int(1), int(1)))), (1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) | 0), max(int(1), int(1))))) ^ 0)))), 0)))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), min(int(1), _GLF_IDENTITY(int(1), max(int(1), int(1))))), int(1))), int(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY(int(1), _GLF_IDENTITY((int(1)), clamp(_GLF_IDENTITY((int(1)), int(ivec2((int(1)), 1))), (int(1)), _GLF_IDENTITY((int(1)), (false ? _GLF_FUZZED(26411) : (int(1)))))) | 0), max(int(1), int(1))))), ~ _GLF_IDENTITY((~ ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) | 0), max(int(1), int(1)))), (1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) | 0), max(int(1), int(1))))) ^ 0)))), int(ivec2((~ ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) | 0), max(int(1), int(1)))), (1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) | 0), max(int(1), int(1))))) ^ 0)))), 0)))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), min(int(1), _GLF_IDENTITY(int(1), max(int(1), int(1))))), int(1))), ~ (~ ((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY(int(1), _GLF_IDENTITY((int(1)), clamp(_GLF_IDENTITY((int(1)), int(ivec2((int(1)), 1))), (int(1)), _GLF_IDENTITY((int(1)), (false ? _GLF_FUZZED(26411) : (int(1)))))) | 0), max(int(1), int(1))))), ~ _GLF_IDENTITY((~ ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) | 0), max(int(1), int(1)))), (1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) | 0), max(int(1), int(1))))) ^ 0)))), int(ivec2((~ ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) | 0), max(int(1), int(1)))), (1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) | 0), max(int(1), int(1))))) ^ 0)))), 0)))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), min(int(1), _GLF_IDENTITY(int(1), max(int(1), int(1))))), int(1)))))))), 1))) != (_GLF_IDENTITY(0, int(_GLF_IDENTITY(ivec4(0, 1, 1, 1), ivec4(0, 0, 0, 0) + (ivec4(0, 1, 1, 1))))) << _GLF_IDENTITY(int(6), int(6))))))))))))) && true)), true && (bool(_GLF_IDENTITY(bool((! _GLF_IDENTITY((_injected_loop_counter != (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) | (0))) << 0) << _GLF_IDENTITY(int(6), int(6)))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))), (_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6)))) && true))), ! (! (! ((_GLF_IDENTITY(_injected_loop_counter, int(ivec3(_injected_loop_counter, _GLF_IDENTITY((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY(int(1), _GLF_IDENTITY((int(1)), clamp(_GLF_IDENTITY((int(1)), int(ivec2((int(1)), 1))), (int(1)), _GLF_IDENTITY((int(1)), (false ? _GLF_FUZZED(26411) : (int(1)))))) | 0), max(int(1), int(1))))), ~ _GLF_IDENTITY((~ ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) | 0), max(int(1), int(1)))), (1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) | 0), max(int(1), int(1))))) ^ 0)))), int(ivec2((~ ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) | 0), max(int(1), int(1)))), (1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) | 0), max(int(1), int(1))))) ^ 0)))), 0)))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), min(int(1), _GLF_IDENTITY(int(1), max(int(1), int(1))))), int(1))), int(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY(int(1), _GLF_IDENTITY((int(1)), clamp(_GLF_IDENTITY((int(1)), int(ivec2((int(1)), 1))), (int(1)), _GLF_IDENTITY((int(1)), (false ? _GLF_FUZZED(26411) : (int(1)))))) | 0), max(int(1), int(1))))), ~ _GLF_IDENTITY((~ ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) | 0), max(int(1), int(1)))), (1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) | 0), max(int(1), int(1))))) ^ 0)))), int(ivec2((~ ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) | 0), max(int(1), int(1)))), (1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) | 0), max(int(1), int(1))))) ^ 0)))), 0)))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), min(int(1), _GLF_IDENTITY(int(1), max(int(1), int(1))))), int(1))), ~ (~ ((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY(int(1), _GLF_IDENTITY((int(1)), clamp(_GLF_IDENTITY((int(1)), int(ivec2((int(1)), 1))), (int(1)), _GLF_IDENTITY((int(1)), (false ? _GLF_FUZZED(26411) : (int(1)))))) | 0), max(int(1), int(1))))), ~ _GLF_IDENTITY((~ ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) | 0), max(int(1), int(1)))), (1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) | 0), max(int(1), int(1))))) ^ 0)))), int(ivec2((~ ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) | 0), max(int(1), int(1)))), (1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) | 0), max(int(1), int(1))))) ^ 0)))), 0)))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), min(int(1), _GLF_IDENTITY(int(1), max(int(1), int(1))))), int(1)))))))), 1))) != (_GLF_IDENTITY(0, int(_GLF_IDENTITY(ivec4(0, 1, 1, 1), ivec4(0, 0, 0, 0) + (ivec4(0, 1, 1, 1))))) << _GLF_IDENTITY(int(6), int(6)))))))))))), (bool((! _GLF_IDENTITY((_injected_loop_counter != (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) | (0))) << 0) << _GLF_IDENTITY(int(6), int(6)))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))), (_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6)))) && true))), ! (! (! ((_GLF_IDENTITY(_injected_loop_counter, int(ivec3(_injected_loop_counter, _GLF_IDENTITY((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY(int(1), _GLF_IDENTITY((int(1)), clamp(_GLF_IDENTITY((int(1)), int(ivec2((int(1)), 1))), (int(1)), _GLF_IDENTITY((int(1)), (false ? _GLF_FUZZED(26411) : (int(1)))))) | 0), max(int(1), int(1))))), ~ _GLF_IDENTITY((~ ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) | 0), max(int(1), int(1)))), (1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) | 0), max(int(1), int(1))))) ^ 0)))), int(ivec2((~ ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) | 0), max(int(1), int(1)))), (1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) | 0), max(int(1), int(1))))) ^ 0)))), 0)))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), min(int(1), _GLF_IDENTITY(int(1), max(int(1), int(1))))), int(1))), int(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY(int(1), _GLF_IDENTITY((int(1)), clamp(_GLF_IDENTITY((int(1)), int(ivec2((int(1)), 1))), (int(1)), _GLF_IDENTITY((int(1)), (false ? _GLF_FUZZED(26411) : (int(1)))))) | 0), max(int(1), int(1))))), ~ _GLF_IDENTITY((~ ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) | 0), max(int(1), int(1)))), (1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) | 0), max(int(1), int(1))))) ^ 0)))), int(ivec2((~ ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) | 0), max(int(1), int(1)))), (1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) | 0), max(int(1), int(1))))) ^ 0)))), 0)))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), min(int(1), _GLF_IDENTITY(int(1), max(int(1), int(1))))), int(1))), ~ (~ ((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY(int(1), _GLF_IDENTITY((int(1)), clamp(_GLF_IDENTITY((int(1)), int(ivec2((int(1)), 1))), (int(1)), _GLF_IDENTITY((int(1)), (false ? _GLF_FUZZED(26411) : (int(1)))))) | 0), max(int(1), int(1))))), ~ _GLF_IDENTITY((~ ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) | 0), max(int(1), int(1)))), (1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) | 0), max(int(1), int(1))))) ^ 0)))), int(ivec2((~ ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) | 0), max(int(1), int(1)))), (1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) | 0), max(int(1), int(1))))) ^ 0)))), 0)))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), min(int(1), _GLF_IDENTITY(int(1), max(int(1), int(1))))), int(1)))))))), 1))) != (_GLF_IDENTITY(0, int(_GLF_IDENTITY(ivec4(0, 1, 1, 1), ivec4(0, 0, 0, 0) + (ivec4(0, 1, 1, 1))))) << _GLF_IDENTITY(int(6), int(6))))))))))))) && true)))))))), (bool(bool(_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))), ! (! (_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))))))))) || false)))) || false))), (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, clamp(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))), _injected_loop_counter, _injected_loop_counter)) != (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), max(int(6), int(6))), int(6))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))), _GLF_IDENTITY(! (! _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter)))) >> 0) != (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(6), int(6)), (true ? 0 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), clamp(int(6), int(6), _GLF_IDENTITY(int(6), 0 ^ (int(6))))), int(6)) : _GLF_FUZZED(_injected_loop_counter))))), ! (! ((_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter)))) >> 0) != (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(6), int(6)), (true ? 0 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), clamp(int(6), int(6), _GLF_IDENTITY(int(6), 0 ^ (int(6))))), int(6)) : _GLF_FUZZED(_injected_loop_counter))))))))), (! (! (_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6)))))) && true)))), (bool(bool(_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(6, int(ivec3(6, ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))), int(_GLF_ONE(1.0, injectionSwitch.y)))))), int(6))), ! (_GLF_IDENTITY(! (_injected_loop_counter != _GLF_IDENTITY((0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), 0 ^ (int(6))))), ((_GLF_IDENTITY(0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), 0 ^ (int(6)))), (0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), 0 ^ (int(6))))) | 0))) / 1)), false || (! (_injected_loop_counter != _GLF_IDENTITY((0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), 0 ^ (int(6))))), ((0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), 0 ^ (int(6)))))) / 1))))))))) || _GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false))))))), false || (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false)))))))))))), (! (_GLF_IDENTITY(_injected_loop_counter != (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(6), int(6)), (0 << _GLF_IDENTITY(int(6), int(6))) >> 0)), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_injected_loop_counter != _GLF_IDENTITY((0 << _GLF_IDENTITY(int(6), int(6))), clamp((0 << _GLF_IDENTITY(int(_GLF_IDENTITY(6, (true ? 6 : _GLF_FUZZED(_injected_loop_counter)))), int(6))), (0 << _GLF_IDENTITY(int(6), int(6))), (0 << _GLF_IDENTITY(int(6), int(6))))), ! (! _GLF_IDENTITY(_GLF_IDENTITY((_injected_loop_counter != (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, (6) - 0))), (0 << _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, (6) - 0)))) | (0 << _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, (6) - 0))))))), (_GLF_IDENTITY((_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, (6) - 0))))), false || ((_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, (6) - 0)))))))) || false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_injected_loop_counter != (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(6), int(6)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(0 << _GLF_IDENTITY(int(6), int(6)), 0 | (0 << _GLF_IDENTITY(int(6), int(6)))))))), ! (! ((_injected_loop_counter != (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(6, int(int(6)))), int(6)))))))), _GLF_IDENTITY(! (! (! ((_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))))))), ! (_GLF_IDENTITY(! (! (! _GLF_IDENTITY((! ((_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6)))))), true && (_GLF_IDENTITY((! ((_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6)))))), bool(bvec3((! ((_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6)))))), false, false))))))), bool(bool(! (! (! (! ((_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6)))))))))))))))))))), (bool(bool(_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))), ! (! _GLF_IDENTITY((_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6)))), _GLF_IDENTITY(! (! ((_injected_loop_counter != (_GLF_IDENTITY(0, (0) >> 0) << _GLF_IDENTITY(int(6), int(6)))))), (! (! ((_injected_loop_counter != (_GLF_IDENTITY(0, (0) >> 0) << _GLF_IDENTITY(int(6), int(6))))))) || false))))))) || false)))) || false), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != _GLF_IDENTITY((0 << _GLF_IDENTITY(int(6), int(6))), (0 ^ 0) ^ ((0 << _GLF_IDENTITY(int(6), int(6))))), _GLF_IDENTITY(bool(bvec3(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), _GLF_IDENTITY((bool(bvec3(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), ((bool(bvec3(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) || false) && true)), _GLF_IDENTITY(_GLF_IDENTITY(! (! (_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))))), bool(bvec2(! (! (_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))))), true))), (! (! (_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6)))))) && true)))), (bool(bool(_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(6, min(6, _GLF_IDENTITY(6, (6) << 0)))), int(6))), ! (_GLF_IDENTITY(! (_injected_loop_counter != _GLF_IDENTITY((0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), 0 ^ (int(_GLF_IDENTITY(6, (6) - (-60914 & 0))))))), ((0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), 0 ^ (int(_GLF_IDENTITY(6, (6) - (-60914 & 0)))))))) | ((0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), 0 ^ (int(_GLF_IDENTITY(6, (6) - (-60914 & 0)))))))))), false || (! (_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(_GLF_IDENTITY(int(6), 0 ^ (int(6))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6))), 0 ^ (int(6))), max(_GLF_IDENTITY(int(6), 0 ^ (int(6))), _GLF_IDENTITY(int(6), 0 ^ (int(6)))))), max(~ (_GLF_IDENTITY(_GLF_IDENTITY(int(6), 0 ^ (int(6))), max(_GLF_IDENTITY(int(6), 0 ^ (int(6))), _GLF_IDENTITY(int(6), 0 ^ (int(6)))))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(6), ~ (~ (int(6)))), 0 ^ (int(6))), max(_GLF_IDENTITY(int(6), 0 ^ (int(6))), _GLF_IDENTITY(_GLF_IDENTITY(int(6), min(int(6), int(6))), 0 ^ (int(6)))))))))))))))))))) || _GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), true && (_GLF_IDENTITY((false), ((false)) && true))))))))), false || (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))), _GLF_IDENTITY(bool(bool((_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(bool(bool((_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))))), ! (! (bool(bool((_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec3(false, false, true))))))))))), (_GLF_IDENTITY(bool(bool((_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))))), ! (! (bool(bool((_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))))))))) || false))))))))))))), false || (_GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))), _GLF_IDENTITY(bool(bvec3(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (bool(bvec3(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && true)), _GLF_IDENTITY(_GLF_IDENTITY(! (! (_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))))), bool(bvec2(! (! (_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))))), true))), _GLF_IDENTITY((! (! (_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6)))))), ((! (! (_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))))))) || false) && true)))), (bool(bool(_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))), ! (_GLF_IDENTITY(! (_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), 0 ^ (int(6)))))), false || (! (_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(_GLF_IDENTITY(int(6), 0 ^ (int(6))), ~ (_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(int(6), 0 ^ (int(6))), max(_GLF_IDENTITY(int(6), 0 ^ (int(_GLF_IDENTITY(6, (6) / 1)))), _GLF_IDENTITY(int(6), 0 ^ (int(6)))))), ((_GLF_IDENTITY(_GLF_IDENTITY(int(6), 0 ^ (int(6))), max(_GLF_IDENTITY(int(6), 0 ^ (int(_GLF_IDENTITY(6, (6) / 1)))), _GLF_IDENTITY(int(6), 0 ^ (int(6))))))) >> 0), max(~ (_GLF_IDENTITY(_GLF_IDENTITY(int(6), 0 ^ (int(6))), max(_GLF_IDENTITY(int(6), 0 ^ (int(_GLF_IDENTITY(6, (6) + 0)))), _GLF_IDENTITY(int(6), 0 ^ (int(6)))))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 0 : _GLF_FUZZED(_injected_loop_counter))) ^ (int(6))), max(_GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) - 0)), 0 ^ (int(6))), _GLF_IDENTITY(int(6), 0 ^ (int(6)))))))))))))))))))) || _GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), true && (_GLF_IDENTITY((false), ((false)) && true))))))))), false || (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))), _GLF_IDENTITY(bool(bool((_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))))), false || (_GLF_IDENTITY(bool(bool((_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))))), ! _GLF_IDENTITY((! (bool(bool((_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))))))), (_GLF_IDENTITY((! (bool(bool((_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))))))), ((! (bool(bool((_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec3(false, false, true))))))))))) || false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))))))), bool(bool((_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))), _GLF_IDENTITY(bool(bvec3(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (_GLF_IDENTITY(bool(bvec3(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bool(_GLF_IDENTITY(bool(bvec3(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bool(bool(bvec3(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))) && true)), _GLF_IDENTITY(_GLF_IDENTITY(! (! (_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, clamp(_GLF_IDENTITY(6, (_GLF_IDENTITY(6, (6) / 1)) - 0), 6, 6))))))), bool(bvec2(! (! (_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))))), true))), (! _GLF_IDENTITY((! (_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))))), bool(bvec4((! (_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))))), true, true, true)))) && true)))), (bool(bool(_GLF_IDENTITY(_injected_loop_counter != (_GLF_IDENTITY(0, clamp(0, 0, 0)) << _GLF_IDENTITY(int(6), int(6))), ! (_GLF_IDENTITY(! (_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), 0 ^ (int(6)))))), false || (! (_injected_loop_counter != (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(ivec3(int(6), 0, 0))), _GLF_IDENTITY(_GLF_IDENTITY(int(6), 0 ^ (int(6))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(int(6), 0 ^ (int(6))), max(_GLF_IDENTITY(int(6), 0 ^ (int(6))), _GLF_IDENTITY(int(6), 0 ^ (int(6)))))), max(~ (_GLF_IDENTITY(_GLF_IDENTITY(int(6), 0 ^ (int(6))), max(_GLF_IDENTITY(int(6), 0 ^ (int(6))), _GLF_IDENTITY(int(6), 0 ^ (int(6)))))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(int(6), 0 ^ (int(6))), max(_GLF_IDENTITY(int(6), 0 ^ (int(6))), _GLF_IDENTITY(int(6), 0 ^ (int(6)))))))))))))))))))) || _GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), true && (_GLF_IDENTITY((false), ((false)) && true))))))))), false || (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))), _GLF_IDENTITY(bool(bool((_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))))), false || (_GLF_IDENTITY(bool(bool((_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))))), ! (! _GLF_IDENTITY((bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))), bool(bvec4((_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))), false, true, true)))))), bool(_GLF_IDENTITY(bvec3((bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))), bool(bvec4((_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))), false, true, true)))))), false, false), bvec3(bvec3(bvec3((bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))), bool(bvec4((_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))), false, true, true)))))), false, false))))))))))))))))))))))))), (! (_GLF_IDENTITY(_injected_loop_counter != (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(6), int(6)), _GLF_IDENTITY((0 << _GLF_IDENTITY(int(6), int(6))) >> 0, ((0 << _GLF_IDENTITY(int(6), int(6))) >> 0) << 0))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))), ! (! _GLF_IDENTITY((_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6)))), ! (_GLF_IDENTITY(! ((_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))))), ! (! _GLF_IDENTITY((! ((_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))), bool(_GLF_IDENTITY(bvec3(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec3(bvec4(bvec3(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), true)))))))), ! (! ((! ((_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))), bool(_GLF_IDENTITY(bvec3(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec3(bvec4(bvec3(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), true))))))))))))))))), ! (! (_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))), ! (_GLF_IDENTITY(! _GLF_IDENTITY((_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6)))), ! (_GLF_IDENTITY(! ((_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))))), ! (! _GLF_IDENTITY((! ((_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))), bool(_GLF_IDENTITY(bvec3(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec3(bvec4(bvec3(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), true)))))))), ! (! ((! ((_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))), bool(_GLF_IDENTITY(bvec3(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec3(bvec4(bvec3(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), true))))))))))))))), bool(bvec3(_GLF_IDENTITY(! _GLF_IDENTITY((_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6)))), ! (_GLF_IDENTITY(! ((_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))))), ! (! _GLF_IDENTITY((! ((_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))), bool(_GLF_IDENTITY(bvec3(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec3(bvec4(bvec3(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), true)))))))), ! (! ((! ((_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))), bool(_GLF_IDENTITY(bvec3(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec3(bvec4(bvec3(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), true))))))))))))))), bool(bvec3(! _GLF_IDENTITY((_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6)))), ! (_GLF_IDENTITY(! ((_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))))), ! (! _GLF_IDENTITY((! ((_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))), bool(_GLF_IDENTITY(bvec3(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec3(bvec4(bvec3(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), true)))))))), ! (! ((! ((_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))), bool(_GLF_IDENTITY(bvec3(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec3(bvec4(bvec3(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), true))))))))))))))), true, false))), true, false)))))))))), (bool(bool(_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, min(6, 6))))), ! (! _GLF_IDENTITY((_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6)))), ! (! (_GLF_IDENTITY((_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), min(int(6), int(6)))))), _GLF_IDENTITY(bool(bool((_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), min(int(6), int(6)))))))), true && (_GLF_IDENTITY(bool(bool((_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), min(int(6), int(6)))))))), ! (! (bool(bool((_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), min(int(6), int(6)))))))))))))))))))))) || false)))) || false), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))), ! (! (_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6)))))), _GLF_IDENTITY(! (_GLF_IDENTITY(! (_injected_loop_counter != _GLF_IDENTITY((0 << _GLF_IDENTITY(int(6), int(6))), 0 + ((0 << _GLF_IDENTITY(int(6), int(6)))))), _GLF_IDENTITY(bool(bool(! (_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6)))))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(bool(bool(! (_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6)))))), ! (! (bool(bool(! (_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))))))))), true, true, true)), (bool(bvec4(bool(bool(! (_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6)))))), true, true, true))) && true)))), (! (! (_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6)))))) && true)))), (bool(bool(_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_injected_loop_counter != (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), 0 ^ (int(6)))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : 0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(_GLF_IDENTITY(int(6), (int(6)) | 0), 0 ^ (int(6)))))))), false || (! (_injected_loop_counter != (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), 0 ^ (int(6)))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : 0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY((int(6)) | 0, clamp((int(6)) | 0, (int(6)) | 0, (int(6)) | 0))), 0 ^ (int(6)))))))))), false || _GLF_IDENTITY((! (_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), 0 ^ (int(6))))))), ! (! ((! (_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), 0 ^ (int(6)))))))))))))))) || _GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(bvec4(bool(true), true, false, false))))) && (false))))), ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(true, (true) || false) && (false))))))), false || (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), true && (true && (false)))))))))))))), _GLF_IDENTITY((! (_GLF_IDENTITY(_injected_loop_counter != (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(6), int(6)), (0 << _GLF_IDENTITY(int(6), int(6))) >> 0)), _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))), ! (! _GLF_IDENTITY((_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6)))), ! (_GLF_IDENTITY(! ((_injected_loop_counter != (_GLF_IDENTITY(0, _GLF_IDENTITY(int(int(0)), max(int(int(0)), int(int(0))))) << _GLF_IDENTITY(int(6), int(6))))), ! (! (! ((_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6)))))))))))))), _GLF_IDENTITY((bool(bool(_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))), ! (! _GLF_IDENTITY((_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6)))), ! (! ((_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6)))))))))))) || false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((bool(bool(_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))), ! (! _GLF_IDENTITY((_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6)))), ! (! ((_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, 0 + (6)))))))))))))) || false))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))), ! (! _GLF_IDENTITY((_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6)))), ! (_GLF_IDENTITY(! ((_injected_loop_counter != (_GLF_IDENTITY(0, _GLF_IDENTITY(int(int(0)), max(int(int(0)), int(int(0))))) << _GLF_IDENTITY(int(6), int(6))))), ! (! (! ((_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6)))))))))))))), _GLF_IDENTITY((bool(bool(_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))), ! (! _GLF_IDENTITY((_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6)))), ! (! ((_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6)))))))))))) || false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((bool(bool(_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))), ! (! _GLF_IDENTITY((_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6)))), ! (! ((_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, 0 + (6)))))))))))))) || false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))), ! (! _GLF_IDENTITY((_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6)))), ! (_GLF_IDENTITY(! ((_injected_loop_counter != (_GLF_IDENTITY(0, _GLF_IDENTITY(int(int(0)), max(int(int(0)), int(int(0))))) << _GLF_IDENTITY(int(6), int(6))))), ! (! (! ((_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6)))))))))))))), _GLF_IDENTITY((bool(bool(_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))), ! (! _GLF_IDENTITY((_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6)))), ! (! ((_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6)))))))))))) || false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((bool(bool(_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))), ! (! _GLF_IDENTITY((_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6)))), ! (! ((_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, 0 + (6)))))))))))))) || false)))), true && (! (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))), ! (! _GLF_IDENTITY((_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6)))), ! (_GLF_IDENTITY(! ((_injected_loop_counter != (_GLF_IDENTITY(0, _GLF_IDENTITY(int(int(0)), max(int(int(0)), int(int(0))))) << _GLF_IDENTITY(int(6), int(6))))), ! (! (! ((_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6)))))))))))))), _GLF_IDENTITY((bool(bool(_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))), ! (! _GLF_IDENTITY((_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6)))), ! (! ((_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6)))))))))))) || false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((bool(bool(_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))), ! (! _GLF_IDENTITY((_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6)))), ! (! ((_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, 0 + (6)))))))))))))) || false)))))))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))), _GLF_IDENTITY(bool(bvec4((! (_GLF_IDENTITY(_injected_loop_counter != (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(6), int(6)), (0 << _GLF_IDENTITY(int(6), int(6))) >> 0)), _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))), ! (! _GLF_IDENTITY((_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6)))), ! (_GLF_IDENTITY(! ((_injected_loop_counter != (_GLF_IDENTITY(0, _GLF_IDENTITY(int(int(0)), max(int(int(0)), int(int(0))))) << _GLF_IDENTITY(int(6), int(6))))), ! (! (! ((_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6)))))))))))))), _GLF_IDENTITY((bool(bool(_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))), ! (! _GLF_IDENTITY((_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6)))), ! (! ((_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6)))))))))))) || false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((bool(bool(_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))), ! (! _GLF_IDENTITY((_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6)))), ! (! ((_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, 0 + (6)))))))))))))) || false))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))), ! (! _GLF_IDENTITY((_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6)))), ! (_GLF_IDENTITY(! ((_injected_loop_counter != (_GLF_IDENTITY(0, _GLF_IDENTITY(int(int(0)), max(int(int(0)), int(int(0))))) << _GLF_IDENTITY(int(6), int(6))))), ! (! (! ((_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6)))))))))))))), _GLF_IDENTITY((bool(bool(_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))), ! (! _GLF_IDENTITY((_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6)))), ! (! ((_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6)))))))))))) || false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((bool(bool(_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))), ! (! _GLF_IDENTITY((_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6)))), ! (! ((_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, 0 + (6)))))))))))))) || false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))), ! (! _GLF_IDENTITY((_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6)))), ! (_GLF_IDENTITY(! ((_injected_loop_counter != (_GLF_IDENTITY(0, _GLF_IDENTITY(int(int(0)), max(int(int(0)), int(int(0))))) << _GLF_IDENTITY(int(6), int(6))))), ! (! (! ((_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6)))))))))))))), _GLF_IDENTITY((bool(bool(_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))), ! (! _GLF_IDENTITY((_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6)))), ! (! ((_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6)))))))))))) || false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((bool(bool(_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))), ! (! _GLF_IDENTITY((_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6)))), ! (! ((_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, 0 + (6)))))))))))))) || false)))), true && (! (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))), ! (! _GLF_IDENTITY((_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6)))), ! (_GLF_IDENTITY(! ((_injected_loop_counter != (_GLF_IDENTITY(0, _GLF_IDENTITY(int(int(0)), max(int(int(0)), int(int(0))))) << _GLF_IDENTITY(int(6), int(6))))), ! (! (! ((_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6)))))))))))))), _GLF_IDENTITY((bool(bool(_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))), ! (! _GLF_IDENTITY((_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6)))), ! (! ((_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6)))))))))))) || false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((bool(bool(_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))), ! (! _GLF_IDENTITY((_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6)))), ! (! ((_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, 0 + (6)))))))))))))) || false)))))))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true)), ! (! (bool(bvec4((! (_GLF_IDENTITY(_injected_loop_counter != (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(6), int(6)), (0 << _GLF_IDENTITY(int(6), int(6))) >> 0)), _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))), ! (! _GLF_IDENTITY((_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6)))), ! (_GLF_IDENTITY(! ((_injected_loop_counter != (_GLF_IDENTITY(0, _GLF_IDENTITY(int(int(0)), max(int(int(0)), int(int(0))))) << _GLF_IDENTITY(int(6), int(6))))), ! (! (! ((_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6)))))))))))))), _GLF_IDENTITY((bool(bool(_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))), ! (! _GLF_IDENTITY((_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6)))), ! (! ((_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6)))))))))))) || false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((bool(bool(_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))), ! (! _GLF_IDENTITY((_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6)))), ! (! ((_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, 0 + (6)))))))))))))) || false))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))), ! (! _GLF_IDENTITY((_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6)))), ! (_GLF_IDENTITY(! ((_injected_loop_counter != (_GLF_IDENTITY(0, _GLF_IDENTITY(int(int(0)), max(int(int(0)), int(int(0))))) << _GLF_IDENTITY(int(6), int(6))))), ! (! (! ((_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6)))))))))))))), _GLF_IDENTITY((bool(bool(_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))), ! (! _GLF_IDENTITY((_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6)))), ! (! ((_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6)))))))))))) || false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((bool(bool(_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))), ! (! _GLF_IDENTITY((_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6)))), ! (! ((_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, 0 + (6)))))))))))))) || false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))), ! (! _GLF_IDENTITY((_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6)))), ! (_GLF_IDENTITY(! ((_injected_loop_counter != (_GLF_IDENTITY(0, _GLF_IDENTITY(int(int(0)), max(int(int(0)), int(int(0))))) << _GLF_IDENTITY(int(6), int(6))))), ! (! (! ((_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6)))))))))))))), _GLF_IDENTITY((bool(bool(_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))), ! (! _GLF_IDENTITY((_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6)))), ! (! ((_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6)))))))))))) || false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((bool(bool(_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))), ! (! _GLF_IDENTITY((_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6)))), ! (! ((_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, 0 + (6)))))))))))))) || false)))), true && (! (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))), ! (! _GLF_IDENTITY((_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6)))), ! (_GLF_IDENTITY(! ((_injected_loop_counter != (_GLF_IDENTITY(0, _GLF_IDENTITY(int(int(0)), max(int(int(0)), int(int(0))))) << _GLF_IDENTITY(int(6), int(6))))), ! (! (! ((_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6)))))))))))))), _GLF_IDENTITY((bool(bool(_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))), ! (! _GLF_IDENTITY((_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6)))), ! (! ((_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6)))))))))))) || false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((bool(bool(_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))), ! (! _GLF_IDENTITY((_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6)))), ! (! ((_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, 0 + (6)))))))))))))) || false)))))))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true)))))) || false), (_GLF_IDENTITY(! (_GLF_IDENTITY(_injected_loop_counter != _GLF_IDENTITY((0 << _GLF_IDENTITY(int(6), int(6))), _GLF_IDENTITY(min((0 << _GLF_IDENTITY(int(6), int(6))), (0 << _GLF_IDENTITY(int(6), int(6)))), ~ (~ (min((0 << _GLF_IDENTITY(int(6), int(6))), (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), (int(6)) | (int(6))), int(6)))))))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))), _GLF_IDENTITY(! (! (_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))))), (! (! (_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6)))))) && _GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec2(true, true)))) && true))))), (bool(bool(_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (_GLF_IDENTITY(int(6), (_GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6)))) / 1)) ^ 0))), ! (_GLF_IDENTITY(! (_injected_loop_counter != _GLF_IDENTITY((0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), 0 ^ (int(6))))), ((0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), 0 ^ (int(6)))))) * 1)), false || _GLF_IDENTITY((! (_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), 0 ^ (int(6))))))), false || (_GLF_IDENTITY((! (_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), 0 ^ (int(6))))))), ! (! (_GLF_IDENTITY((! (_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), 0 ^ (int(6))))))), ((! (_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), 0 ^ (int(6)))))))) || false)))))))))))) || _GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false))))), true && (_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((_GLF_IDENTITY(false, true && (false))), bool(bvec4((_GLF_IDENTITY(false, true && (false))), true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))), false || (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false)))))))))))), (! (_GLF_IDENTITY(_injected_loop_counter != (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(6), int(6)), (0 << _GLF_IDENTITY(int(6), int(6))) >> 0)), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))), ! (! _GLF_IDENTITY((_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, int(int(6))))))), ! (_GLF_IDENTITY(! ((_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))))), ! (! (! ((_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6)))))))))))))), (bool(bool(_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(6), clamp(int(6), int(6), _GLF_IDENTITY(int(6), (int(6)) * 1))))), int(_GLF_IDENTITY(6, (false ? _GLF_FUZZED(54051) : 6))))), _GLF_IDENTITY(! (! _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))) != (0 << _GLF_IDENTITY(int(6), int(6)))), ! (! ((_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6)))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (! _GLF_IDENTITY((_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6)))), ! (! ((_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6)))))))), (! (! _GLF_IDENTITY((_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6)))), _GLF_IDENTITY(! (! ((_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6)))))), ! (_GLF_IDENTITY(! (! (! ((_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))))))), _GLF_IDENTITY(bool(bvec2(! (! (! ((_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))))))), false)), (bool(bvec2(! (! (! ((_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))))))), false))) || false))))))) && true)), true && (_GLF_IDENTITY(! (_GLF_IDENTITY(! (! _GLF_IDENTITY((_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6)))), ! (! ((_injected_loop_counter != (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), ~ (_GLF_IDENTITY(~ (int(6)), (_GLF_IDENTITY(~ (int(6)), 0 + (~ (int(6))))) << 0))), int(6)))))))), _GLF_IDENTITY((! (! _GLF_IDENTITY((_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6)))), ! (! ((_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))))))))) && true, ! (! ((! (! _GLF_IDENTITY((_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6)))), ! (! ((_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))))))))) && true))))), bool(bvec2(! (_GLF_IDENTITY(! (! _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))), true && (_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6)))))), ! (! ((_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6)))))))), (! (! _GLF_IDENTITY((_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6)))), ! (! ((_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))))))))) && true)), false))))))))))) || false)))) || false)) && true)))), false)))))) && true)))); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(8, (8) + (0 >> _GLF_IDENTITY(int(2), int(2)))), (_GLF_IDENTITY(8, (8) + (0 >> _GLF_IDENTITY(int(2), int(2))))) + 0)), int(_GLF_IDENTITY(8, clamp(_GLF_IDENTITY(8, 0 | (8)), 8, 8)))), int(_GLF_IDENTITY(int(_GLF_IDENTITY(int(_GLF_IDENTITY(8, _GLF_IDENTITY((8), ((8)) | ((8))) + (0 >> _GLF_IDENTITY(int(2), int(2))))), int(_GLF_IDENTITY(8, clamp(_GLF_IDENTITY(8, 0 | (8)), 8, 8))))), int(ivec2(int(_GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) + (0 >> _GLF_IDENTITY(int(2), int(2))))), int(_GLF_IDENTITY(8, clamp(_GLF_IDENTITY(8, 0 | (8)), 8, 8))))), 0)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, bool(bvec4(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true))), (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                break;
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)), injectionSwitch)), (injectionSwitch) + sqrt(vec2(_GLF_IDENTITY(0.0, (0.0) - 0.0), _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, (0.0) - 0.0)))))), vec2(_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), max((injectionSwitch), _GLF_IDENTITY((injectionSwitch), mix(vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), vec2(_GLF_FUZZED(73.75), _GLF_FUZZED(-0.3)), bvec2(false, false))))), clamp((injectionSwitch), (injectionSwitch), (injectionSwitch))) - vec2(0.0, 0.0)), _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(_GLF_IDENTITY(mat2(0.0, 1.0, 0.0, length(vec3(0.0, 0.0, 0.0))), (mat2(0.0, 1.0, 0.0, length(vec3(0.0, 0.0, 0.0)))) + mat2(0.0, 0.0, 0.0, 0.0))), float(mat3x4(float(_GLF_IDENTITY(mat2(_GLF_IDENTITY(0.0, float(mat2(_GLF_IDENTITY(0.0, (0.0) * 1.0), _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0))), 1.0, 0.0, length(vec3(0.0, 0.0, 0.0))), (mat2(0.0, 1.0, 0.0, length(vec3(0.0, 0.0, 0.0)))) + mat2(0.0, 0.0, 0.0, 0.0))), 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(length(vec3(0.0, 0.0, 0.0)), min(length(vec3(0.0, 0.0, 0.0)), length(vec3(0.0, 0.0, 0.0)))), round(length(normalize(vec2(1.0, 1.0)))), 0.0, 0.0, 1.0, 0.0, 0.0)))), abs(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(distance(2472.8935, fract(533.530))) : 1.0))), 0.0, 1.0, _GLF_IDENTITY(abs(0.0), clamp(_GLF_IDENTITY(abs(0.0), _GLF_IDENTITY(float(vec4(_GLF_IDENTITY(abs(0.0), (abs(0.0)) - log(1.0)), 1.0, 1.0, sqrt(1.0))), max(float(vec4(_GLF_IDENTITY(abs(0.0), (abs(0.0)) - log(1.0)), 1.0, 1.0, sqrt(1.0))), float(vec4(_GLF_IDENTITY(abs(0.0), (abs(0.0)) - log(1.0)), 1.0, 1.0, sqrt(1.0)))))), abs(0.0), abs(0.0))), 0.0, 1.0, 1.0, 0.0, 1.0), transpose(transpose(mat4x3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), 0.0, abs(1.0), 0.0, 1.0, abs(0.0), _GLF_IDENTITY(0.0, _GLF_IDENTITY((true ? _GLF_IDENTITY(_GLF_IDENTITY(0.0, max(0.0, 0.0)), (_GLF_IDENTITY(0.0, max(0.0, 0.0))) - 0.0) : _GLF_FUZZED(vec3(-6925.8553, -68.78, 1.0).y)), _GLF_IDENTITY(((true ? _GLF_IDENTITY(0.0, max(0.0, 0.0)) : _GLF_FUZZED(vec3(-6925.8553, -68.78, 1.0).y))), float(float(((true ? _GLF_IDENTITY(0.0, max(0.0, 0.0)) : _GLF_FUZZED(vec3(-6925.8553, -68.78, 1.0).y)))))) / abs(1.0))), 1.0, 1.0, 0.0, 1.0)))))))).y))))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     return;
                     if(_GLF_DEAD(false))
                      continue;
                    }
                  }
                 return;
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   break;
                  }
                }
               else
                {
                }
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_DEAD(false))
                  return;
                }
               else
                {
                }
               continue;
              }
            }
          }
         else
          {
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(sqrt(injectionSwitch)))), injectionSwitch)).y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(sqrt(injectionSwitch)))), injectionSwitch)).y)))))))
              return;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           if(_GLF_DEAD(false))
            return;
           return;
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        return;
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) >> 0))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)), clamp(_injected_loop_counter, _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / 1), _GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / 1), 0)), 0 | (int(ivec2(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / 1), 0))))), _injected_loop_counter)) != (1 & 1)); _injected_loop_counter ++)
          {
           do
            {
             do
              {
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))) || _GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-5.8))) > injectionSwitch.y)))))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 return;
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           else
            {
            }
           return;
          }
         return;
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       subgroupAll(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), false || (false))))));
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bool(false)))))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               return;
              }
            }
           return;
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), false || (_GLF_IDENTITY(false || (false), (_GLF_IDENTITY(false || (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, false || (false)), false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), (false || (_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)))) || false)) || false))))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
              return;
             return;
            }
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             return;
            }
          }
         return;
        }
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (true ? int(5) : _GLF_FUZZED(-86768))))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(false, true && (false))) || false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                  break;
                 return;
                }
               return;
              }
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                   if(_GLF_DEAD(false))
                    continue;
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    return;
                  }
                 return;
                }
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                }
               else
                {
                }
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_DEAD(false))
                  return;
                }
               else
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true)))), true)), bool(bvec4(_GLF_IDENTITY(bool(bvec4(false, true, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true)))), true)), ! (! (bool(bvec4(false, true, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true)))), true))))), false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) && true))))))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, false)), false || (bool(bvec3(false, true, false)))))) || false)))
                    continue;
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                    {
                     return;
                    }
                  }
                 return;
                }
              }
            }
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true)))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              {
               if(_GLF_DEAD(false))
                continue;
               return;
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-49.22)), bool(false)))))))
                break;
               return;
              }
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             return;
             for(int _injected_loop_counter = (_GLF_IDENTITY(0, max(0, 0)) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  return;
                 return;
                }
              }
            }
           else
            {
             do
              {
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0), (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0)) + 0.0) > injectionSwitch.y, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0), (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0)) + 0.0), (false ? _GLF_FUZZED(3.4) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0), (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0)) + 0.0))) > injectionSwitch.y)))))))
                  return;
                }
               while(_GLF_WRAPPED_LOOP(false));
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                 if(_GLF_DEAD(false))
                  return;
                }
               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))))
                {
                 return;
                }
               else
                {
                }
              }
             if(_GLF_DEAD(false))
              return;
            }
          }
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(9.5)), vec2(_GLF_FUZZED(-3.5), _GLF_IDENTITY((injectionSwitch)[1], clamp((injectionSwitch)[1], (injectionSwitch)[1], (injectionSwitch)[_GLF_IDENTITY(1, (1) / 1)]))), bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))).y))))
          return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           return;
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && (false))), bool(bvec4(! (_GLF_IDENTITY(false, true && (false))), true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                {
                }
               else
                {
                 return;
                }
              }
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                return;
               return;
              }
             return;
             if(_GLF_DEAD(false))
              return;
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                return;
               for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter ++)
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bool(true)))))
                  {
                   do
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))).x > injectionSwitch.y))))
                      continue;
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         return;
                        }
                      }
                     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))))), true, true, true)))))
                      return;
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)), (false ? _GLF_FUZZED(max(_injected_loop_counter, -44443)) : _GLF_IDENTITY((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)), ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) - 0))))); _injected_loop_counter ++)
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                      return;
                    }
                   if(_GLF_DEAD(false))
                    return;
                  }
                 else
                  {
                  }
                }
              }
             else
              {
              }
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
            return;
           return;
          }
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           do
            {
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))), bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))), false, false, true))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0))) > injectionSwitch.y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0))) > injectionSwitch.y), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0))) > injectionSwitch.y)), bool(bool(! ((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0))) > injectionSwitch.y)))))))), true && (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0))) > injectionSwitch.y), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0))) > injectionSwitch.y)), bool(bool(! ((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0))) > injectionSwitch.y)))))))), bool(bvec3(! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0))) > injectionSwitch.y), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0))) > injectionSwitch.y)), bool(bool(! ((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0))) > injectionSwitch.y)))))))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))
                break;
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    continue;
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) || false))
                        {
                        }
                       else
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           return;
                          }
                        }
                       for(int _injected_loop_counter = (0 & -75800); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                        {
                         if(_GLF_DEAD(false))
                          return;
                        }
                       if(_GLF_DEAD(false))
                        continue;
                      }
                     do
                      {
                       if(_GLF_DEAD(false))
                        {
                         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), max(int(5), int(5))))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, min(0, 0))); _injected_loop_counter --)
                          {
                           return;
                          }
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
                      break;
                     do
                      {
                       return;
                       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) || false), true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
                        {
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, float(mat3x2(injectionSwitch.x, 0.0, 0.0, 1.0, 0.0, 0.0))) : _GLF_FUZZED(4.5))) > injectionSwitch.y))))
                            break;
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            {
                             do
                              {
                               return;
                              }
                             while(_GLF_WRAPPED_LOOP(false));
                            }
                           continue;
                          }
                         if(_GLF_DEAD(false))
                          break;
                         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
                          {
                           if(_GLF_DEAD(false))
                            break;
                           continue;
                          }
                         continue;
                         if(_GLF_DEAD(false))
                          continue;
                         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y)), (_GLF_IDENTITY(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y)), true && (_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))))) && true)); _injected_loop_counter ++)
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            return;
                          }
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                    }
                  }
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                 break;
                }
               return;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   do
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      break;
                     return;
                     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                      break;
                     if(_GLF_DEAD(false))
                      continue;
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 else
                  {
                  }
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))) / 1.0)))))
            return;
          }
         else
          {
          }
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
              return;
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                return;
               return;
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) || false))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true)))))
            return;
          }
         while(_GLF_WRAPPED_LOOP(false));
         return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
      {
      }
     else
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), (int(6)) / 1), int(6))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(~ (~ (int(6))), max(~ (~ (int(6))), _GLF_IDENTITY(~ (~ (int(6))), ~ (~ (~ (~ (int(6))))))))), _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(6, (_GLF_IDENTITY(6, 1 * (6))) ^ 0)), (true ? _GLF_IDENTITY(int(6), max(_GLF_IDENTITY(int(6), (int(6)) / 1), int(6))) : _GLF_FUZZED((~ 62829)))), clamp(int(_GLF_IDENTITY(6, (6) / 1)), int(_GLF_IDENTITY(6, (_GLF_IDENTITY(6, clamp(6, 6, 6))) ^ 0)), int(6)))))); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                 return;
                }
               if(_GLF_DEAD(false))
                return;
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || false)))))
                {
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                 if(_GLF_DEAD(false))
                  {
                   do
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      continue;
                     return;
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                  }
                 atomicStore(buf[_GLF_IDENTITY(virtual_gid, min(_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(~ (~ (virtual_gid)), (~ (~ (virtual_gid))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))), _GLF_IDENTITY(virtual_gid, _GLF_IDENTITY((virtual_gid) - 0u, ((virtual_gid) - 0u) | 0u))))], read, 4, 64, 4);
                }
               else
                {
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    break;
                   break;
                  }
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    continue;
                   break;
                  }
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
                  break;
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), clamp((_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), (_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), (_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))) * 1.0)))))
                  return;
                }
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec2(false, true))))))))
                  return;
                 return;
                }
              }
            }
          }
        }
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), ! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(true, true && (true)), false || (true))), true && ((_GLF_IDENTITY(_GLF_IDENTITY(true, true && (true)), false || (true))))))), (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-0.3) : injectionSwitch.y)))))) || false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))))) + vec2(0.0, 0.0)).x > injectionSwitch.y))))
          return;
        }
       do
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), true, false, true)), _GLF_IDENTITY(! (! (bool(bvec4(_GLF_DEAD(false), true, false, true)))), ! (! (! (! (_GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), true, false, true)), bool(bvec2(_GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), true, false, true)), bool(bvec3(_GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), true, false, true)), bool(bvec4(bool(bvec4(_GLF_DEAD(false), true, false, true)), false, false, false))), _GLF_IDENTITY(true, true && (true)), false))), false))))))))))) || false))
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             do
              {
               for(int _injected_loop_counter = (((mat2x3(-545.059, -3.4, -488.584, -5.1, -3065.6988, _GLF_IDENTITY(2688.0907, (_GLF_IDENTITY(2688.0907, clamp(2688.0907, 2688.0907, 2688.0907))) / exp(0.0))) == mat2x3(0.8, 26.35, 2.5, -8832.8781, -8.8, 3.8)) ? 47385 : -60790) & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _GLF_IDENTITY(_injected_loop_counter ++, (_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) >> 0)) ^ 0))
                {
                 for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, (0) / 1), 0)), _GLF_IDENTITY((0) - 0, max((0) - 0, (0) - 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (int(_GLF_ONE(1.0, injectionSwitch.y)) & 1)); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   if(_GLF_DEAD(false))
                    continue;
                   return;
                   if(_GLF_DEAD(false))
                    break;
                  }
                }
               if(_GLF_DEAD(false))
                return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
      {
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          return;
        }
       while(_GLF_WRAPPED_LOOP(false));
       do
        {
         if(_GLF_DEAD(false))
          return;
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-430.194) : injectionSwitch.y))))), _GLF_IDENTITY(false, false || (false)) || (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))) * (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0))), max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)), ! (! (_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)))))) && true)))))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) + int(_GLF_ZERO(0.0, injectionSwitch.x))) > 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec3(bvec3(false, true, true)))))), (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             return;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))), ! (_GLF_IDENTITY(! (! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))), ! (! (_GLF_IDENTITY(! (! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))), bool(bool(! (! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))))))))))))))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(true, (true) || false)))), false, false))), (injectionSwitch.x < injectionSwitch.y))))
              {
               return;
              }
             else
              {
               if(_GLF_DEAD(false))
                continue;
              }
            }
          }
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), _GLF_IDENTITY(bool(bvec4(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), (bool(bvec4(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))) && true))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, false || (_injected_loop_counter > 0))); _injected_loop_counter --)
              {
               return;
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))))
              return;
            }
          }
         else
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true, false)), (bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true, false))) && true)))
            return;
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, true, false)), bool(bvec2(bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, true, false)), false)))))))
            {
            }
           else
            {
             return;
            }
          }
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))))
          {
           for(int _injected_loop_counter = (_GLF_IDENTITY(0, (0) ^ 0) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(_GLF_IDENTITY(5, ~ (~ (_GLF_IDENTITY(5, (5) ^ 0))))), (int(5)) | (int(5))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(findLSB(_injected_loop_counter))))); _injected_loop_counter ++)
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           if(_GLF_DEAD(false))
            return;
          }
         return;
        }
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             return;
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(exp(2.1)) : injectionSwitch.y))))))
                return;
               return;
              }
             return;
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                return;
              }
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))))).x > injectionSwitch.y))))
                {
                 do
                  {
                   return;
                   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                    continue;
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
            return;
          }
        }
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(vec2(injectionSwitch.x, 1.0), (false ? _GLF_FUZZED(injectionSwitch) : vec2(injectionSwitch.x, 1.0)))))))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             if(_GLF_DEAD(false))
              return;
            }
           while(_GLF_WRAPPED_LOOP(false));
           continue;
          }
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          return;
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) && true), ! _GLF_IDENTITY((! (true)), ! (! ((! _GLF_IDENTITY((true), ((true)) || false))))))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               for(int _injected_loop_counter = _GLF_IDENTITY(0, (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) ^ 0), int(ivec3(_GLF_IDENTITY(0, (0) ^ 0), 1, 1)))) | _GLF_IDENTITY((_GLF_IDENTITY(0, (0) >> 0)), 0 ^ (_GLF_IDENTITY((_GLF_IDENTITY(0, (0) >> 0)), int(int((_GLF_IDENTITY(0, (0) >> 0)))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(false))
                  break;
                 subgroupAll(true);
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                    }
                   else
                    {
                     return;
                    }
                  }
                }
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && true)))
                return;
               if(_GLF_DEAD(false))
                break;
              }
             else
              {
              }
            }
           else
            {
             if(_GLF_DEAD(false))
              continue;
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         do
          {
           if(_GLF_DEAD(false))
            return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         for(int _injected_loop_counter = _GLF_IDENTITY(0, int(_GLF_IDENTITY(int(0), 1 * (int(0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), clamp(_GLF_IDENTITY(int(0), (int(0)) + 0), int(0), int(0))), _GLF_IDENTITY(int(0), _GLF_IDENTITY((int(0)), max((int(0)), (int(0)))) | (int(0))))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (false ? _GLF_FUZZED(90466) : int(_GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec4(0, 0, _GLF_IDENTITY(0, clamp(0, 0, 0)), 0)), ~ (~ (int(ivec4(0, 0, _GLF_IDENTITY(0, clamp(0, 0, 0)), 0)))))))))))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            break;
           return;
           if(_GLF_DEAD(false))
            break;
          }
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false)))))), _GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), mix(vec2(_GLF_FUZZED(-4.0), _GLF_FUZZED(-3.7)), vec2((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))[0], _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))[1], ((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))[1]) + 0.0)), bvec2(true, true)))) + vec2(0.0, 0.0)).x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), ((_GLF_IDENTITY(false, ! (! (false))))) && true))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (_GLF_IDENTITY(false, ! (! (false)))), (false || (_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), false, true, true)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (false))))) || false)), bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (_GLF_IDENTITY(false, ! (! (false)))), (false || (_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), false, true, true)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (false))))) || false)), true, true)))), (_GLF_DEAD(_GLF_IDENTITY(false, false || _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec3(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), ((! (false))) || false)), false, true)))), bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, true))))), (bool((_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, true)))))) || false)))))) && true)), (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, (false) || false), false)), (bool(bvec2(_GLF_IDENTITY(false, (false) || false), false))) && true)), ! (! (false)))))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true))))), false || (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), _GLF_IDENTITY((! (false)) && true, ! (! ((! (false)) && true)))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), _GLF_IDENTITY((! (false)) && true, ! (! ((! (false)) && true)))), ! (! (_GLF_IDENTITY(! (false), _GLF_IDENTITY((! (false)) && true, ! (! ((! (false)) && true)))))))))))))))))) && true))) && true))))))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = ((_GLF_IDENTITY(0 | 0, (_GLF_IDENTITY(0 | 0, ~ (_GLF_IDENTITY(~ (0 | 0), max(~ (0 | 0), ~ (0 | 0)))))) << 0)) << _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             return;
            }
          }
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          {
           do
            {
             return;
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true && (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
              {
               if(_GLF_DEAD(false))
                return;
              }
             else
              {
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
          return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), false || (bool(bool(false))))), true && (false)), true, true, false))))), true && (! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), ! _GLF_IDENTITY((! (_GLF_IDENTITY(false, true && (false)))), ! (! (_GLF_IDENTITY((! (_GLF_IDENTITY(false, true && (false)))), ! (_GLF_IDENTITY(! ((! (_GLF_IDENTITY(false, true && (false))))), false || (! ((! (_GLF_IDENTITY(false, true && (false))))))))))))), true, true, false)), (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), ! _GLF_IDENTITY((! (_GLF_IDENTITY(false, true && (false)))), ! (! (_GLF_IDENTITY((! (_GLF_IDENTITY(false, true && (false)))), ! (_GLF_IDENTITY(! ((! (_GLF_IDENTITY(false, true && (false))))), false || (! ((! (_GLF_IDENTITY(false, true && (false))))))))))))), true, true, false))) || false)))))))))
        return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       for(int _injected_loop_counter = (((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(5), int(5))), _GLF_IDENTITY(int(ivec3((1 << _GLF_IDENTITY(int(5), int(5))), 0, 1)), (int(ivec3((1 << _GLF_IDENTITY(int(5), int(5))), 0, 1))) + 0)) >> _GLF_IDENTITY(int(5), int(5))) << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(6, int(ivec2(_GLF_IDENTITY(6, (6) / 1), int(_GLF_ZERO(0.0, injectionSwitch.x)))))), int(6))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(1), int(1)))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(1), int(1))))))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
          break;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))), bool(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))), false, true)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
          continue;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
            continue;
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, (true) || false))))
            break;
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           do
            {
             if(_GLF_DEAD(false))
              {
               do
                {
                 do
                  {
                   return;
                  }
                 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))));
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat3(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-18.67) : injectionSwitch.x)), 1.0, 0.0, 1.0, 1.0, 0.0, sin(0.0), 1.0, _GLF_IDENTITY(dot(vec2(1.0, tan(0.0)), vec2(1.0, 0.0)), dot(vec2(1.0, tan(0.0)), vec2(1.0, 0.0)))))) > injectionSwitch.y))));
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y)))))), false || (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   return;
                  }
                }
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 return;
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(false))
                break;
              }
             else
              {
              }
            }
          }
        }
       return;
       if(_GLF_DEAD(false))
        return;
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
  }
 else
  {
   do
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (injectionSwitch.x > injectionSwitch.y)) && true)))), bool(bvec2(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (injectionSwitch.x > injectionSwitch.y)) && true)))), true)))))))))
          return;
        }
       else
        {
        }
       return;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
    }
  }
 do
  {
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, ! (_GLF_IDENTITY(! (_injected_loop_counter != 1), false || (_GLF_IDENTITY(! (_injected_loop_counter != 1), bool(bvec4(! (_injected_loop_counter != 1), false, false, true)))))))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           if(_GLF_DEAD(false))
            return;
           do
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
              {
               return;
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-955.233)), bool(false))) > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(1983.3057), _GLF_FUZZED(-2.4)), vec2(_GLF_IDENTITY((injectionSwitch)[0], float(mat2((injectionSwitch)[0], 1.0, 1.0, 0.0))), (injectionSwitch)[1]), bvec2(true, true))).y))))
                break;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, ! (! ((false) || false))))));
         if(_GLF_DEAD(false))
          return;
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
      return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
   return;
  }
}
