#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec3 GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 uvec4 GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), true, false))))), true && (_GLF_IDENTITY(false, (false) && true)))))))
      break;
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(! (! (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x < injectionSwitch.y)))), true && (! (! (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x < injectionSwitch.y)))))))))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
            barrier();
          }
         return;
        }
       else
        {
        }
      }
     barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))))))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(7, (7) + 0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ _GLF_IDENTITY(0, 1 * (_GLF_IDENTITY(0, (0) << 0))))); _injected_loop_counter ++)
  {
   GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id.z = _GLF_IDENTITY(subgroup_id, clamp(subgroup_id, _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id), (_GLF_IDENTITY((subgroup_id), uint(uvec3((subgroup_id), 0u, 0u)))) * 1u) | (subgroup_id)), subgroup_id));
  }
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & 1)), bool(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & 1)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
uint subgroup_size = 16;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y = subgroup_size;
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), false || _GLF_IDENTITY((_GLF_DEAD(false)), false || ((_GLF_DEAD(false))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(max(-4.5, 85.91)) : injectionSwitch.x)) > injectionSwitch.y))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false)))))))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      return;
    }
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), true && (_GLF_WRAPPED_IF_TRUE(true))), false, false, false)), false || (bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), true && (_GLF_WRAPPED_IF_TRUE(true))), false, false, false)))), (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), true && (_GLF_WRAPPED_IF_TRUE(true))), false, _GLF_IDENTITY(false, bool(bvec2(false, false))), false)), false || (bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), true && (_GLF_WRAPPED_IF_TRUE(true))), false, false, false))))) || false)))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     for(int _injected_loop_counter = _GLF_IDENTITY((1 & 1), ((1 & 1)) - 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   else
    {
    }
  }
 else
  {
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), true && (bool(_GLF_DEAD(false)))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(vec2(mat3x2(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), 0.0, 1.0, 1.0, exp(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-79.10)), float(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-3219.5647)))), bool(true)))))), (vec2(mat3x2(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), 0.0, 1.0, 1.0, exp(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-79.10)), float(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-3219.5647)))), bool(true))))))) / vec2(1.0, 1.0)), clamp(vec2(mat3x2(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY(0.0, (0.0) + 0.0), 1.0, 1.0, exp(0.0))), vec2(mat3x2(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0))[1])), 0.0, 1.0, 1.0, exp(0.0))), vec2(mat3x2(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), 0.0, 1.0, 1.0, exp(0.0)))))).x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-35.14)), float(injectionSwitch.y), bool(true)))))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)) != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           barrier();
          }
        }
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
   return;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || (false)))))))))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)), bool(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)), false)))))))))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)) : _GLF_FUZZED(vec2(7.5, 73.87)))), vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) + 0.0))).y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)) : _GLF_FUZZED(vec2(7.5, 73.87)))), vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) + 0.0))).y)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, _GLF_IDENTITY(false, false || (false)) || (false))), true && (bool(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), ((false)) || false))))))))))));
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        return;
      }
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (_GLF_IDENTITY(! (false), bool(bvec4(! (false), true, false, true)))) || false))), (injectionSwitch.x > injectionSwitch.y))))
    return;
   for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(7), min(int(7), int(7))), int(_GLF_IDENTITY(7, min(7, 7)))))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))))))))
          barrier();
         barrier();
        }
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) - determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0))))).y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ((false)) || false)))))
      return;
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))))))))))
      barrier();
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).x > injectionSwitch.y))))
    barrier();
  }
 for(int _injected_loop_counter = _GLF_IDENTITY(0, min(0, 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), float(mat4x3(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), float(_GLF_IDENTITY(vec3(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), mix(float(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(false ? _GLF_FUZZED(ldexp(71.98, _injected_loop_counter)) : injectionSwitch.y, (false ? _GLF_FUZZED(-2.3) : false ? _GLF_FUZZED(ldexp(71.98, _injected_loop_counter)) : injectionSwitch.y)))))), float(_GLF_FUZZED(-7.0)), bool(false))), 0.0, 1.0), (vec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (_GLF_ONE(1.0, injectionSwitch.y)) / 1.0), max(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))), _GLF_ONE(1.0, injectionSwitch.y))), mix(float(_GLF_ONE(1.0, injectionSwitch.y)), float(_GLF_IDENTITY(_GLF_FUZZED(-7.0), mix(float(_GLF_IDENTITY(_GLF_FUZZED(-7.0), mix(float(_GLF_FUZZED(7511.2106)), float(_GLF_FUZZED(-7.0)), bool(true)))), float(_GLF_FUZZED(-0.8)), bool(false)))), bool(false))), 0.0, 1.0)) - vec3(0.0, 0.0, 0.0)))), cos(0.0), _GLF_IDENTITY(cos(0.0), clamp(cos(0.0), _GLF_IDENTITY(cos(0.0), (cos(0.0)) - sqrt(0.0)), cos(0.0))), 0.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-529.523)), bool(false))), 0.0, _GLF_IDENTITY(dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, 1.0)), dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, determinant(mat4(1.0, 0.0, 0.0, log(1.0), exp(0.0), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, abs(0.0), round(length(normalize(vec2(1.0, 1.0)))), 1.0, 1.0)), 0.0, 0.0, 1.0, 0.0), (mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, determinant(mat4(1.0, 0.0, 0.0, log(1.0), exp(0.0), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, abs(0.0), round(length(normalize(vec2(1.0, 1.0)))), 1.0, 1.0)), 0.0, 0.0, 1.0, 0.0)) / mat4(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)))), 0.0, 1.0, 1.0))), 1.0, 1.0, _GLF_IDENTITY(0.0, float(mat3x2(0.0, 1.0, 1.0, 1.0, 0.0, 1.0))), log(1.0), 1.0))))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))))), _GLF_IDENTITY(false || (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))))), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))))), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)))))))))))), (false || (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))) - vec2(0.0, 0.0)), injectionSwitch)).x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(6.7)), bool(false))))) > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))))), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y, true), bvec2(bvec4(bvec2(injectionSwitch.x > injectionSwitch.y, true), _GLF_IDENTITY(false, ! (! (false))), false))))))), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))))))))))))) && true))))
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(1, _GLF_IDENTITY((1) ^ 0, ((1) ^ 0) / 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))))) - _GLF_ZERO(0.0, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y), float(mat2(_GLF_IDENTITY((injectionSwitch.y), max((injectionSwitch.y), (injectionSwitch.y))), 0.0, 0.0, length(determinant(mat3(0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))) / 1.0), injectionSwitch.y))))))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], clamp(injectionSwitch[1], injectionSwitch[1], injectionSwitch[1])))).y))))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x4(injectionSwitch, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, determinant(mat4(1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), 1.0, 0.0)), clamp(determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, determinant(mat4(1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), 1.0, 0.0)), determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, determinant(mat4(1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), 1.0, 0.0)), determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, determinant(mat4(1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), 1.0, 0.0)))), 0.0, 1.0), mat3x4(mat3x4(mat3x4(injectionSwitch, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, determinant(_GLF_IDENTITY(mat3(0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0, determinant(mat4(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-5109.7048) : 1.0)), 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), 1.0, 0.0), _GLF_IDENTITY(mat3(_GLF_IDENTITY(mat3x4(mat3(0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0, determinant(mat4(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-5109.7048) : 1.0)), 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), 1.0, 0.0)), (true ? _GLF_IDENTITY(mat3x4(mat3(0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0, determinant(mat4(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-5109.7048) : 1.0)), 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), 1.0, 0.0)), mat4(1.0) * (mat3x4(mat3(0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0, determinant(mat4(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-5109.7048) : 1.0)), 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), 1.0, 0.0)))) : _GLF_FUZZED(matrixCompMult(mat3x4(5944.5374, 430.234, -41.64, -1.7, 143.480, 8.2, -4601.8429, 501.124, -232.209, -2421.1442, 97.25, -52.19), mat3x4(-27.12, 5904.2735, 6.4, -32.18, 70.25, 422.366, -6.6, 1.7, -73.02, 8.2, -4673.9538, -45.37)))))), (mat3(_GLF_IDENTITY(mat3x4(mat3(0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0, determinant(mat4(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-5109.7048) : 1.0)), 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), 1.0, 0.0)), (true ? _GLF_IDENTITY(mat3x4(mat3(0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0, determinant(mat4(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-5109.7048) : 1.0)), 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), 1.0, 0.0)), mat4(1.0) * (mat3x4(mat3(0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0, determinant(mat4(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-5109.7048) : 1.0)), 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), 1.0, 0.0)))) : _GLF_FUZZED(matrixCompMult(mat3x4(5944.5374, 430.234, -41.64, -1.7, 143.480, 8.2, -4601.8429, 501.124, -232.209, -2421.1442, 97.25, -52.19), mat3x4(-27.12, 5904.2735, 6.4, -32.18, 70.25, 422.366, -6.6, 1.7, -73.02, 8.2, -4673.9538, -45.37))))))) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), 0.0, 1.0)))))).y))))
          return;
        }
       barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), ! (! (_GLF_IDENTITY(false, bool(bool(false))))))))
        break;
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec4(bvec3(false, false, _GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (false))))), true)))))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))), true), bvec2(bvec3(bvec2(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y)), true), true)))))))
          continue;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           barrier();
          }
         return;
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false, true))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false, true)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    break;
   GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id.w = subgroup_local_id;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 uint num_workgroup = _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], _GLF_IDENTITY(gl_NumWorkGroups[1], _GLF_IDENTITY(0u, (0u) | 0u) | (gl_NumWorkGroups[1])), gl_NumWorkGroups[2])))), (_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], _GLF_IDENTITY(gl_NumWorkGroups[1], 0u | (gl_NumWorkGroups[1])), gl_NumWorkGroups[_GLF_IDENTITY(2, ~ (_GLF_IDENTITY(~ (2), clamp(~ (2), _GLF_IDENTITY(~ (2), (true ? ~ (2) : _GLF_FUZZED(43995))), ~ (2)))))]))))) | uvec3(0u, 0u, 0u)).x;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), ! (! (false)))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   do
    {
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id.y = num_workgroup;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
  {
  }
 else
  {
   for(int _injected_loop_counter = _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), ~ (~ (~ (0)))))); _GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), bool(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), false))), (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1)) || false); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
      return;
    }
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.z = _GLF_IDENTITY(workgroup_size, ~ (~ (workgroup_size)));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-2.3))) > injectionSwitch.y))));
    }
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, true && (false))))) && _GLF_IDENTITY(true, ! (! (true))))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           break;
          }
         return;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
        continue;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (_GLF_IDENTITY(false, (false) && true))), (! (! (_GLF_IDENTITY(false, (false) && true)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))));
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y)) && (false))));
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (0) - 0)); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, ! (! (true))), (_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) : _GLF_FUZZED(262.330))) < injectionSwitch.y))))
      {
       barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        break;
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_base = GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.z * workgroup_id;
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) || false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(float(_GLF_IDENTITY(injectionSwitch.x, float(mat3x4(injectionSwitch.x, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, abs(1.0), 1.0, 0.0, 1.0)))), (float(_GLF_IDENTITY(injectionSwitch.x, float(mat3x4(injectionSwitch.x, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, abs(1.0), 1.0, 0.0, 1.0))))) - 0.0))) > injectionSwitch.y) || false)))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! _GLF_IDENTITY((! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec4((! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true, false, false))))))
        {
         if(_GLF_DEAD(false))
          return;
         break;
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_IDENTITY(1.0, 1.0 * _GLF_IDENTITY((_GLF_IDENTITY(1.0, min(1.0, 1.0))), mix(float((_GLF_IDENTITY(1.0, min(1.0, 1.0)))), float(_GLF_FUZZED(-10.19)), bool(false)))))), injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))) && true, bool(bvec4((_GLF_IDENTITY(false, false || (false))) && true, false, false, true))))))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))), _GLF_IDENTITY(true, bool(bool(true))))))))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
            continue;
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (((-38476 / 55789) | -46007) & 0)); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), ((false)) || false))));
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
       barrier();
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
    }
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), false, false))))
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(_GLF_IDENTITY(bvec3(bvec2(false, true), true), bvec3(bvec4(bvec3(bvec2(false, true), true), true)))))))))))) || false))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
         barrier();
        }
      }
     barrier();
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 uint virtual_gid = workgroup_base + _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id, (GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id) << (uvec4(0u, 0u, 0u, 0u) | uvec4(0u, 0u, 0u, 0u))).z * GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y + GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id.w;
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, 0u + (workgroup_base))) | (workgroup_base)), _GLF_IDENTITY(min(_GLF_IDENTITY(workgroup_base, (workgroup_base) * 1u), workgroup_base), 0u ^ (min(_GLF_IDENTITY(workgroup_base, (workgroup_base) * 1u), workgroup_base)))) + GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id.z * _GLF_IDENTITY(GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y, _GLF_IDENTITY(_GLF_IDENTITY(clamp(GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y, GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y, _GLF_IDENTITY(GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y, min(GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y, GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y))), _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(clamp(GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y, GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y, _GLF_IDENTITY(GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y, min(GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y, GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y))), min(clamp(GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y, GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y, _GLF_IDENTITY(GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y, min(GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y, GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y))), clamp(GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y, GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y, _GLF_IDENTITY(GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y, min(GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y, GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y))))), (0u ^ 1u), 0u)), ~ (~ (uint(uvec3(_GLF_IDENTITY(clamp(GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y, GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y, _GLF_IDENTITY(GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y, min(GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y, GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y))), min(clamp(GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y, GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y, _GLF_IDENTITY(GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y, min(GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y, GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y))), clamp(GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y, GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y, _GLF_IDENTITY(GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y, min(GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y, GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y))))), (0u ^ 1u), 0u)))))), (_GLF_IDENTITY(clamp(GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y, GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y, _GLF_IDENTITY(GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y, min(GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y, GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y))), _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(clamp(GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y, GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y, _GLF_IDENTITY(GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y, min(GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y, GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y))), min(clamp(GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y, GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y, _GLF_IDENTITY(GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y, min(GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y, GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y))), clamp(GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y, GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y, _GLF_IDENTITY(GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y, min(GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y, GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y))))), (0u ^ 1u), 0u)), ~ (~ (uint(uvec3(_GLF_IDENTITY(clamp(GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y, GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y, _GLF_IDENTITY(GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y, min(GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y, GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y))), min(clamp(GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y, GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y, _GLF_IDENTITY(GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y, min(GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y, GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y))), clamp(GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y, GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y, _GLF_IDENTITY(GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y, min(GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y, GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y))))), (0u ^ 1u), 0u))))))) | (_GLF_IDENTITY(clamp(GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y, GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y, _GLF_IDENTITY(GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y, min(GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y, GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y))), _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(clamp(GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y, GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y, _GLF_IDENTITY(GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y, min(GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y, GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y))), min(clamp(GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y, GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y, _GLF_IDENTITY(GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y, min(GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y, GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y))), clamp(GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y, GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y, _GLF_IDENTITY(GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y, min(GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y, GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y))))), (0u ^ 1u), 0u)), ~ (~ (uint(uvec3(_GLF_IDENTITY(clamp(GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y, GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y, _GLF_IDENTITY(GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y, min(GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y, GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y))), min(clamp(GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y, GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y, _GLF_IDENTITY(GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y, min(GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y, GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y))), clamp(GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y, GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y, _GLF_IDENTITY(GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y, min(GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y, GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y))))), (0u ^ 1u), 0u))))))))) + (_GLF_IDENTITY((GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id.w + 1), ((GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id.w + 1)) | 0u) % _GLF_IDENTITY(GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y, clamp(GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y, _GLF_IDENTITY(GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y, (GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y) | (GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y)), _GLF_IDENTITY(GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y, (_GLF_IDENTITY(GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y, (GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y) << 0u)) | (GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y)))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
     if(_GLF_DEAD(false))
      return;
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])) : _GLF_FUZZED(vec2(1.7)))), (_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])) : _GLF_FUZZED(vec2(1.7))))) + vec2(0.0, 0.0)) : _GLF_FUZZED(vec2(-0.8, 8669.3919)))).x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id.x = next_virtual_gid;
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), false || (! (injectionSwitch.x > injectionSwitch.y)))))))))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY((1 & _GLF_IDENTITY(1, max(1, 1))), ((1 & _GLF_IDENTITY(1, max(1, 1)))) | (_GLF_IDENTITY((1 & _GLF_IDENTITY(1, max(1, 1))), ~ (~ ((1 & _GLF_IDENTITY(1, max(1, 1))))))))); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0))), injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y))))
      barrier();
    }
   else
    {
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat2x3(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-8103.7248)), float(0.0), bool(true)))), 0.0, 0.0, _GLF_IDENTITY(tan(0.0), max(_GLF_IDENTITY(tan(0.0), mix(float(_GLF_FUZZED(40.81)), float(tan(0.0)), bool(true))), _GLF_IDENTITY(tan(0.0), (tan(0.0)) / 1.0))), log(1.0), 1.0)))))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat2x3(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-8103.7248)), float(0.0), bool(true)))), 0.0, 0.0, _GLF_IDENTITY(tan(0.0), max(_GLF_IDENTITY(tan(0.0), mix(float(_GLF_FUZZED(40.81)), float(tan(0.0)), bool(true))), tan(0.0))), log(1.0), 1.0))), true && (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat2x3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch))) - vec2(0.0, 0.0)).y, (injectionSwitch.y) - _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-8103.7248)), float(0.0), bool(true)))), 0.0, 0.0, _GLF_IDENTITY(tan(0.0), max(_GLF_IDENTITY(tan(0.0), mix(float(_GLF_FUZZED(40.81)), float(tan(0.0)), bool(true))), tan(0.0))), log(1.0), 1.0)))))))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-183.559), _GLF_IDENTITY((injectionSwitch)[1], mix(float(_GLF_FUZZED(4.7)), float((injectionSwitch)[1]), bool(true)))), vec2((injectionSwitch)[0], _GLF_FUZZED(-50.70)), bvec2(true, false)))) * vec2(1.0, 1.0)).x > _GLF_IDENTITY(injectionSwitch.y, float(mat2x3(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)), float(_GLF_FUZZED(8592.3880)), bool(false)))) - _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-8103.7248)), float(_GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))))), bool(true)))), 0.0, 0.0, _GLF_IDENTITY(tan(0.0), max(_GLF_IDENTITY(tan(0.0), mix(_GLF_IDENTITY(float(_GLF_FUZZED(_GLF_IDENTITY(40.81, mix(float(_GLF_FUZZED(-4114.7319)), float(40.81), bool(true))))), (float(_GLF_FUZZED(_GLF_IDENTITY(40.81, mix(float(_GLF_FUZZED(-4114.7319)), float(40.81), bool(true)))))) / 1.0), float(tan(0.0)), bool(true))), tan(0.0))), log(1.0), 1.0)))))))))))))
      barrier();
     barrier();
    }
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), min(mat2(1.0) * (injectionSwitch), mat2(1.0) * _GLF_IDENTITY((injectionSwitch), mix(vec2(((injectionSwitch))[0], _GLF_FUZZED(-3408.0031)), vec2(_GLF_FUZZED(-9878.9526), ((injectionSwitch))[1]), bvec2(false, true)))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bool(true))) ? injectionSwitch : _GLF_FUZZED(vec2(_GLF_IDENTITY(-6431.1899, min(-6431.1899, -6431.1899)), -479.923)), (true ? _GLF_IDENTITY(true, bool(bool(true))) ? injectionSwitch : _GLF_FUZZED(vec2(_GLF_IDENTITY(-6431.1899, min(-6431.1899, -6431.1899)), -479.923)) : _GLF_FUZZED(vec2(649.346, 2.8)))), clamp(_GLF_IDENTITY(true, bool(bool(true))) ? injectionSwitch : _GLF_FUZZED(vec2(-6431.1899, -479.923)), _GLF_IDENTITY(true, bool(bool(true))) ? injectionSwitch : _GLF_FUZZED(vec2(-6431.1899, -479.923)), _GLF_IDENTITY(true, bool(bool(true))) ? injectionSwitch : _GLF_FUZZED(vec2(-6431.1899, -479.923)))))).x > injectionSwitch.y), ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-6431.1899, -479.923)))).x > injectionSwitch.y, false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-6431.1899, -479.923)))), (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-6431.1899, -479.923))))) - vec2(0.0, 0.0)).x, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-6431.1899, -479.923)))), (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-6431.1899, -479.923))))) - vec2(0.0, 0.0)).x) - 0.0) > injectionSwitch.y)), false || (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((true ? injectionSwitch : _GLF_FUZZED(vec2(-6431.1899, -479.923))), ((true ? injectionSwitch : _GLF_FUZZED(vec2(-6431.1899, -479.923)))) / vec2(1.0, 1.0))).x > injectionSwitch.y)))) || false))))
  {
   do
    {
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! _GLF_IDENTITY((false), (_GLF_IDENTITY((false), ((false)) || false)) || false)))))), (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), max((injectionSwitch) * mat2(1.0), _GLF_IDENTITY((injectionSwitch), (true ? (injectionSwitch) : _GLF_FUZZED(vec2(-619.187, -5113.7753)))) * mat2(1.0)))), max(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), max((injectionSwitch) * mat2(1.0), _GLF_IDENTITY((injectionSwitch), (true ? (injectionSwitch) : _GLF_FUZZED(vec2(-619.187, -5113.7753)))) * mat2(1.0)))), _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), max((injectionSwitch) * mat2(1.0), _GLF_IDENTITY((injectionSwitch), (true ? (injectionSwitch) : _GLF_FUZZED(vec2(-619.187, -5113.7753)))) * mat2(1.0)))))))).x > injectionSwitch.y))));
  }
 uint read = atomicLoad(_GLF_IDENTITY(buf[_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, uint(uvec3(virtual_gid, 0u, 1u))), (_GLF_IDENTITY(virtual_gid, uint(uvec3(virtual_gid, 0u, 1u)))) | (0u << _GLF_IDENTITY(uint(5u), uint(5u))))], clamp(buf[_GLF_IDENTITY(virtual_gid, uint(_GLF_IDENTITY(uvec3(virtual_gid, 0u, 1u), (_GLF_IDENTITY(uvec3(virtual_gid, 0u, 1u), (_GLF_IDENTITY(uvec3(virtual_gid, 0u, 1u), (true ? uvec3(virtual_gid, 0u, 1u) : _GLF_FUZZED(uvec3(176819u, 65655u, 16560u))))) / uvec3(1u, 1u, 1u))) | (uvec3(virtual_gid, 0u, 1u)))))], _GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, uint(uvec3(virtual_gid, 0u, 1u)))], max(buf[_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, uint(uvec3(virtual_gid, 0u, 1u))), uint(uvec2(_GLF_IDENTITY(virtual_gid, uint(uvec3(virtual_gid, 0u, 1u))), (0u >> _GLF_IDENTITY(uint(7u), uint(7u))))))], buf[_GLF_IDENTITY(virtual_gid, uint(uvec3(virtual_gid, 0u, 1u)))])), buf[_GLF_IDENTITY(virtual_gid, uint(uvec3(virtual_gid, 0u, 1u)))])), 4, 64, 0);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.x = _GLF_IDENTITY(read, (read) | 0u);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)))), ! (! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)))))))), ! (! (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)))), ! (! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, false))))))))))))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bool(_GLF_WRAPPED_IF_TRUE(true)))))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)))))))
        return;
      }
     barrier();
    }
   return;
  }
 atomicStore(buf[GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id.x], _GLF_IDENTITY(uint(1), (uint(1)) | (_GLF_IDENTITY(_GLF_IDENTITY(uint(1), uint(_GLF_IDENTITY(uint(uint(1)), (uint(uint(1))) | (uint(uint(1)))))), 0u | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), uint(uint(uint(1)))), clamp(_GLF_IDENTITY(uint(1), uint(uint(uint(1)))), _GLF_IDENTITY(_GLF_IDENTITY(uint(1), (uint(1)) ^ 0u), uint(uint(uint(1)))), _GLF_IDENTITY(uint(1), uint(_GLF_IDENTITY(uint(uint(1)), (true ? _GLF_IDENTITY(uint(uint(1)), clamp(uint(uint(1)), uint(uint(1)), uint(uint(1)))) : _GLF_FUZZED(subgroup_size))))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), uint(uint(uint(1)))), clamp(_GLF_IDENTITY(uint(1), uint(uint(uint(1)))), _GLF_IDENTITY(_GLF_IDENTITY(uint(1), (uint(1)) ^ 0u), uint(uint(uint(1)))), _GLF_IDENTITY(uint(1), uint(_GLF_IDENTITY(uint(uint(1)), (true ? _GLF_IDENTITY(uint(uint(1)), clamp(uint(uint(1)), uint(uint(1)), uint(uint(1)))) : _GLF_FUZZED(subgroup_size))))))), _GLF_IDENTITY(_GLF_IDENTITY(uint(1), uint(uint(uint(1)))), clamp(_GLF_IDENTITY(uint(1), uint(uint(uint(1)))), _GLF_IDENTITY(_GLF_IDENTITY(uint(1), (uint(1)) ^ 0u), uint(uint(uint(1)))), _GLF_IDENTITY(uint(1), uint(_GLF_IDENTITY(uint(uint(1)), (true ? _GLF_IDENTITY(uint(uint(1)), clamp(uint(uint(1)), uint(uint(1)), uint(uint(1)))) : _GLF_FUZZED(subgroup_size))))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), uint(uint(uint(1)))), clamp(_GLF_IDENTITY(uint(1), uint(uint(uint(1)))), _GLF_IDENTITY(_GLF_IDENTITY(uint(1), (uint(1)) ^ 0u), uint(uint(uint(1)))), _GLF_IDENTITY(uint(1), uint(_GLF_IDENTITY(uint(uint(1)), (true ? _GLF_IDENTITY(uint(uint(1)), clamp(uint(uint(1)), uint(uint(1)), uint(uint(1)))) : _GLF_FUZZED(subgroup_size))))))), _GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), uint(uint(uint(1)))), clamp(_GLF_IDENTITY(uint(1), uint(uint(uint(1)))), _GLF_IDENTITY(_GLF_IDENTITY(uint(1), (uint(1)) ^ 0u), uint(uint(uint(1)))), _GLF_IDENTITY(uint(1), uint(_GLF_IDENTITY(uint(uint(1)), (true ? _GLF_IDENTITY(uint(uint(1)), clamp(uint(uint(1)), uint(uint(1)), uint(uint(1)))) : _GLF_FUZZED(subgroup_size))))))), (0u >> _GLF_IDENTITY(uint(2u), uint(2u))))), (true ? uint(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), uint(uint(uint(1)))), clamp(_GLF_IDENTITY(uint(1), uint(uint(uint(1)))), _GLF_IDENTITY(_GLF_IDENTITY(uint(1), (uint(1)) ^ 0u), uint(uint(uint(1)))), _GLF_IDENTITY(uint(1), uint(_GLF_IDENTITY(uint(uint(1)), (true ? _GLF_IDENTITY(uint(uint(1)), clamp(uint(uint(1)), uint(uint(1)), uint(uint(1)))) : _GLF_FUZZED(subgroup_size))))))), (0u >> _GLF_IDENTITY(uint(2u), uint(2u))))) : _GLF_FUZZED(workgroup_base)))))))))), 4, 64, _GLF_IDENTITY(4, (4) ^ (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(5), int(5)), (0 << _GLF_IDENTITY(int(5), int(5))) | 0))));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), _GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) || false), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(vec4(_GLF_IDENTITY(injectionSwitch.y, float(mat3x4(injectionSwitch.y, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, sqrt(0.0), 1.0, 0.0))), abs(0.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0)), float(mat4x3(_GLF_IDENTITY(float(vec4(_GLF_IDENTITY(injectionSwitch.y, float(mat3x4(injectionSwitch.y, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, sqrt(0.0), 1.0, 0.0))), abs(0.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0)), clamp(float(vec4(_GLF_IDENTITY(injectionSwitch.y, float(mat3x4(injectionSwitch.y, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, sqrt(0.0), 1.0, 0.0))), abs(0.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0)), float(vec4(_GLF_IDENTITY(injectionSwitch.y, float(mat3x4(injectionSwitch.y, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, sqrt(0.0), 1.0, 0.0))), abs(0.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0)), float(vec4(_GLF_IDENTITY(injectionSwitch.y, float(mat3x4(injectionSwitch.y, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, sqrt(0.0), 1.0, 0.0))), abs(0.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0)))), 0.0, 0.0, log(1.0), 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, tan(0.0)))))))))), (false) || false))), ! (! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, true && (true))) && true), (injectionSwitch.x < injectionSwitch.y))))), (false) || false))), ! (! _GLF_IDENTITY((! (! _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (false) || false)), bool(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (false) || false)), ! (! ((_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (false) || false))))), true))), bool(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (false) || false)), bool(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (false) || false)), ! (! ((_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (false) || false))))), true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), ! (! ((! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), _GLF_IDENTITY(bool(bvec4(bool(false), true, false, false)), (bool(bvec4(bool(false), true, false, false))) || false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY((false) || false, ! (! (_GLF_IDENTITY((false) || false, true && ((false) || false))))))), bool(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (false) || false)), ! (! ((_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (false) || false))))), true))))))))))))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, true && (true)), ! (! (true)))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
          barrier();
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)).x, clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch)))) - vec2(0.0, 0.0)).x, _GLF_IDENTITY(injectionSwitch.x, 1.0 * (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(mat3x4(injectionSwitch.x, 1.0, 1.0, round(length(normalize(1.0))), 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 1.0, 0.0, 0.0))), (_GLF_IDENTITY(injectionSwitch.x, float(mat3x4(injectionSwitch.x, 1.0, 1.0, round(length(normalize(1.0))), 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 1.0, 0.0, 0.0)))) - 0.0))))) > injectionSwitch.y))))
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))), (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)))) && true)) && true)))))
        {
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = (_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (false ? _GLF_FUZZED(mod(_GLF_IDENTITY(463.691, min(_GLF_IDENTITY(463.691, 0.0 + (463.691)), 463.691)), vec3(3.8, -40.63, 53.54)[0])) : _GLF_ZERO(0.0, injectionSwitch.x)))) & 2856, (int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (false ? _GLF_FUZZED(mod(_GLF_IDENTITY(463.691, min(_GLF_IDENTITY(463.691, 0.0 + (463.691)), 463.691)), vec3(3.8, _GLF_IDENTITY(-40.63, clamp(-40.63, -40.63, -40.63)), 53.54)[0])) : _GLF_ZERO(0.0, injectionSwitch.x)))) & 2856) - (0 >> _GLF_IDENTITY(int(4), int(4))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, int(ivec2(_injected_loop_counter, (0 >> _GLF_IDENTITY(int(3), int(3)))))) != int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), max(_GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), 0.0 + (_GLF_ONE(1.0, injectionSwitch.y))))))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           barrier();
          }
         while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(false)), ! (! (bool(_GLF_WRAPPED_LOOP(false)))))), bool(bvec3(bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(false)), ! (! (bool(_GLF_WRAPPED_LOOP(false)))))), true, false)))));
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id.w + _GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ _GLF_IDENTITY((1), 0 ^ ((1))), ~ (~ (_GLF_IDENTITY(~ (1), 1 * (~ (1)))))))) < _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y, max(GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y, GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y)), uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y, max(GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y, GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y)), 0u), (_GLF_IDENTITY(uvec2(_GLF_IDENTITY(GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y, max(GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y, GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y)), _GLF_IDENTITY(0u, 1u * (0u))), uvec2(0u, 0u) ^ (uvec2(_GLF_IDENTITY(GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y, max(GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y, GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.y)), 0u)))) - uvec2(0u, 0u)))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4(injectionSwitch, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 1.0, 1.0, determinant(mat4(1.0, 1.0, 0.0, 1.0, 0.0, exp(0.0), 0.0, 0.0, 0.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0, log(1.0), 0.0, 0.0, sqrt(0.0), 0.0), (mat4(injectionSwitch, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 1.0, 1.0, determinant(mat4(1.0, 1.0, 0.0, 1.0, 0.0, exp(0.0), 0.0, 0.0, 0.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0, log(1.0), 0.0, 0.0, sqrt(0.0), 0.0)) / mat4(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)))).y)), bool(bvec3(_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false))))), (injectionSwitch.x > injectionSwitch.y)), true, false)))))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 0)); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) >> 0))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
              continue;
             barrier();
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            break;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter --)
            {
             return;
            }
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true)))))))))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), (false ? _GLF_FUZZED(vec2(-18.02, -6.3)) : _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), injectionSwitch)))).y)), _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec2(false, false)))))) || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), false, true)), _GLF_IDENTITY(! (! (bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), false, true)))), bool(bvec4(! (! (bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), false, true)))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))))))))
        {
        }
       else
        {
         atomicStore(checker[_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, (virtual_gid) ^ 0u)) - 0u)], GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.x, 4, _GLF_IDENTITY(64, ~ (~ (64))), _GLF_IDENTITY(4, max(4, 4)));
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
            return;
           barrier();
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) + 0.0))).x < injectionSwitch.y))))
            {
             return;
            }
           else
            {
            }
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), bool(bvec2(bool(injectionSwitch.x > injectionSwitch.y), false)))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), bool(bvec2(bool(injectionSwitch.x > injectionSwitch.y), false)))), (bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), bool(bvec2(bool(injectionSwitch.x > injectionSwitch.y), false))))) && true)) || false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false)), ! (! (bool(bvec4(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false))))))))))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(false))
                break;
              }
             else
              {
               barrier();
              }
            }
           barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                break;
               barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(9576.4717)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
               break;
              }
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))))
              return;
             barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, abs(0.0) + (injectionSwitch.x)), injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
          {
           do
            {
             barrier();
            }
           while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_WRAPPED_LOOP(false)))) && true));
          }
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bool(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
          {
           for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), false || ((false)))))) && true)))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 break;
                 if(_GLF_DEAD(false))
                  continue;
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - sin(vec2(0.0, 0.0))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).y))))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                  break;
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 1.0, 1.0, exp(0.0), _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(2204.8869)), bool(false))), 1.0))))).x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(7.1) : _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))), injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-9.1) : injectionSwitch.y))))))))
                {
                }
               else
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y))))
                    continue;
                   return;
                  }
                }
              }
             if(_GLF_DEAD(false))
              continue;
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != 0, _GLF_IDENTITY(bool(bvec2(_injected_loop_counter != 0, false)), false || (bool(bvec2(_injected_loop_counter != 0, false))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != 0, (_injected_loop_counter != 0) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false || (_injected_loop_counter != 0))))); _injected_loop_counter --)
              {
               if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, false, false))))
                barrier();
              }
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
          }
         barrier();
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         subgroupAll(false);
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, true && (false)), false), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, true && (false)), false)), bvec3(bvec4(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, true && (false)), false)), true))))))))) || false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 0.0, 0.0))).x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y))))
            barrier();
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           return;
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x, min(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-983.682) : injectionSwitch.x)))), max(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), injectionSwitch.x)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), clamp(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x, _GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(length(vec4(977.293, 56.07, 5.7, 598.215))))), _GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)))))), _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))))))) / 1.0, (true ? (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))) * (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch)).x, min(injectionSwitch.x, injectionSwitch.x)), clamp(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))))), float(_GLF_IDENTITY(mat2x3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), max(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch)).x, min(injectionSwitch.x, injectionSwitch.x)), min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch)).x, min(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(float(mat4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch)).x, min(injectionSwitch.x, injectionSwitch.x)), 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0)), 0.0 + (float(mat4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch)).x, min(injectionSwitch.x, injectionSwitch.x)), 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch)).x, min(injectionSwitch.x, injectionSwitch.x)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch)).x, min(injectionSwitch.x, injectionSwitch.x))) - 0.0))), clamp(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), clamp(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))) - 0.0), _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))))))), 0.0, 0.0, 0.0, 0.0, length(sqrt(vec2(0.0, 0.0)))), (false ? _GLF_FUZZED(mat2x3(-4.1, 42.60, 1669.8984, 5.1, -1737.9009, -884.549)) : mat2x3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), max(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x, injectionSwitch.x)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(max(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch), clamp(_GLF_IDENTITY(max(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch), clamp(_GLF_IDENTITY(max(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch), (false ? _GLF_FUZZED(injectionSwitch) : max(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch))), _GLF_IDENTITY(max(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch), (true ? max(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch) : _GLF_FUZZED(injectionSwitch))), max(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch))), max(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch), max(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch)))).x, min(injectionSwitch.x, injectionSwitch.x)), clamp(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x)))))), 0.0, 0.0, 0.0, 0.0, length(sqrt(vec2(0.0, 0.0))))))))) / 1.0 : _GLF_FUZZED(asinh(-5430.7596))))) > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, true && ((false) && true)))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
         do
          {
           atomicStore(buf[virtual_gid], GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_size.x, 4, _GLF_IDENTITY(64, (64) + 0), 4);
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat2(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(vec2(injectionSwitch.x, 0.0)), clamp(float(vec2(injectionSwitch.x, 0.0)), float(vec2(injectionSwitch.x, 0.0)), float(vec2(injectionSwitch.x, 0.0))))), 1.0, 0.0, 1.0)), float(mat2x3(float(mat2(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(vec2(injectionSwitch.x, 0.0)), clamp(float(vec2(injectionSwitch.x, 0.0)), float(vec2(injectionSwitch.x, 0.0)), float(vec2(injectionSwitch.x, 0.0))))), 1.0, 0.0, 1.0)), 0.0, 0.0, 1.0, 1.0, 0.0)))) > injectionSwitch.y))))
        {
        }
       else
        {
         subgroupAll(_GLF_IDENTITY(true, (_GLF_IDENTITY(_GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true), ! (! _GLF_IDENTITY((_GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! ((_GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY((true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY((true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ((true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true))))), (_GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true), ! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! ((_GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! ((_GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), true && (! _GLF_IDENTITY((_GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(! (! ((_GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), bool(bvec3(! (! ((_GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))))) || false)))))))))) || false));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))), true && _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))), ! (! (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))))))))), ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))), ! (! (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))))))))))))) && true))))) || false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
          barrier();
         barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false))))), (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
    barrier();
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true)))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
          {
          }
         else
          {
           barrier();
          }
        }
       return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY((false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! ((false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) || false)))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, _GLF_IDENTITY(false, bool(bvec2(false, false))))))))
            barrier();
           return;
           if(_GLF_DEAD(false))
            return;
          }
        }
       else
        {
        }
       barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
      }
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), ! (! (bool(false))))), bool(bool(bool(_GLF_IDENTITY(bool(false), ! (! (bool(false))))))))), _GLF_IDENTITY(_GLF_IDENTITY(! (! (false)), bool(bvec4(! (! (false)), false, true, false))), bool(bvec2(_GLF_IDENTITY(! (! (false)), bool(bvec4(! (! (false)), false, true, false))), true))))))
        return;
       barrier();
      }
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, float(mat4(injectionSwitch.y, log(1.0), 0.0, _GLF_IDENTITY(0.0, (0.0) - tan(0.0)), 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, abs(0.0), 0.0, 1.0, 0.0, 0.0, sqrt(1.0), 0.0, 0.0)))), _GLF_IDENTITY(float(_GLF_FUZZED(83.19)), mix(float(_GLF_FUZZED((-6703.0138 * 63.32))), float(float(_GLF_FUZZED(83.19))), bool(true))), bool(_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))))), ! (! ((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, float(mat4(injectionSwitch.y, log(1.0), 0.0, _GLF_IDENTITY(0.0, (0.0) - tan(0.0)), 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, abs(0.0), 0.0, 1.0, 0.0, 0.0, sqrt(1.0), 0.0, 0.0)))), _GLF_IDENTITY(float(_GLF_FUZZED(83.19)), mix(float(_GLF_FUZZED((-6703.0138 * 63.32))), float(float(_GLF_FUZZED(83.19))), bool(true))), bool(_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))))))))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(! (! (injectionSwitch.x > injectionSwitch.y)), false || (! (! (injectionSwitch.x > injectionSwitch.y)))))))))
      {
       if(_GLF_DEAD(false))
        break;
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     return;
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, false)))))))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
      barrier();
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(false)), true && (! (_GLF_WRAPPED_IF_FALSE(false))))), false || (! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(false)), true && (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false))))))))))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), float(_GLF_FUZZED(6.4)), bool(false)))))))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
}
