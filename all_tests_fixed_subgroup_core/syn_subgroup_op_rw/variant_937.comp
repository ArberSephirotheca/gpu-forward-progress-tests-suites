#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
uint subgroup_size = 16;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             do
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                    }
                   else
                    {
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) ^ 0))
                          {
                           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(1, (1) | (1))], (injectionSwitch[_GLF_IDENTITY(1, (1) | (1))]) + 0.0), _GLF_IDENTITY(float(mat4x2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(1, (1) | (1))], 0.0 + (injectionSwitch[_GLF_IDENTITY(1, (1) | (1))])), min(injectionSwitch[_GLF_IDENTITY(1, (1) | (1))], injectionSwitch[_GLF_IDENTITY(1, (1) | (1))])), 1.0, 1.0, sqrt(1.0), sin(0.0), 0.0, 0.0, 0.0)), max(float(mat4x2(_GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(1, (1) | (1))], min(injectionSwitch[_GLF_IDENTITY(1, (1) | (1))], injectionSwitch[_GLF_IDENTITY(1, (1) | (1))])), 1.0, 1.0, sqrt(1.0), sin(0.0), 0.0, 0.0, 0.0)), _GLF_IDENTITY(float(mat4x2(_GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(1, (1) | (1))], min(injectionSwitch[_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(_injected_loop_counter) : 1))) | (1))], injectionSwitch[_GLF_IDENTITY(1, (1) | (1))])), 1.0, 1.0, _GLF_IDENTITY(sqrt(1.0), clamp(sqrt(1.0), sqrt(1.0), sqrt(1.0))), sin(0.0), 0.0, 0.0, 0.0)), clamp(_GLF_IDENTITY(float(mat4x2(_GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(1, (1) | (1))], _GLF_IDENTITY(min(injectionSwitch[_GLF_IDENTITY(1, (1) | (1))], injectionSwitch[_GLF_IDENTITY(1, _GLF_IDENTITY((1) | (1), ((1) | (1)) ^ 0))]), (false ? _GLF_FUZZED(clamp(-87.71, 9111.4335, 4.8)) : _GLF_IDENTITY(min(injectionSwitch[_GLF_IDENTITY(1, (1) | (1))], injectionSwitch[_GLF_IDENTITY(1, _GLF_IDENTITY((1) | (1), ((1) | (1)) ^ 0))]), (min(injectionSwitch[_GLF_IDENTITY(1, (1) | (1))], injectionSwitch[_GLF_IDENTITY(1, _GLF_IDENTITY((1) | (1), ((1) | (1)) ^ 0))])) - 0.0)))), 1.0, 1.0, sqrt(1.0), _GLF_IDENTITY(sin(0.0), min(sin(0.0), sin(0.0))), 0.0, 0.0, 0.0)), mix(float(_GLF_FUZZED(4.0)), _GLF_IDENTITY(float(float(mat4x2(_GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(1, (_GLF_IDENTITY(1, max(1, 1))) | (1))], min(injectionSwitch[_GLF_IDENTITY(1, (1) | (1))], injectionSwitch[_GLF_IDENTITY(1, (1) | (1))])), 1.0, 1.0, sqrt(1.0), sin(0.0), 0.0, 0.0, 0.0))), (float(float(mat4x2(_GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(1, (1) | (1))], min(injectionSwitch[_GLF_IDENTITY(_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, (1) * 1))), (1) | (1))], injectionSwitch[_GLF_IDENTITY(1, (1) | (1))])), 1.0, 1.0, sqrt(1.0), sin(0.0), 0.0, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-33.12)), float(0.0), bool(true))), 0.0, 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, exp(0.0)), (false ? _GLF_FUZZED(mat4x3(25.83, 76.04, -8.0, 99.58, -397.658, -1012.8580, -996.738, -210.113, -95.59, -4659.1952, 9618.2719, 5.5)) : mat4x3(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-33.12)), float(0.0), bool(true))), 0.0, 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec2(1.0, 1.0), _GLF_IDENTITY(vec2(0.0, 0.0), mat2(1.0) * (vec2(0.0, 0.0)))), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, exp(0.0)))))), 0.0)))) / 1.0), bool(true))), _GLF_IDENTITY(float(mat4x2(_GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(1, (1) | (1))], min(injectionSwitch[_GLF_IDENTITY(1, (1) | (1))], injectionSwitch[_GLF_IDENTITY(1, (1) | (1))])), 1.0, 1.0, sqrt(1.0), sin(0.0), 0.0, 0.0, 0.0)), clamp(float(mat4x2(_GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(1, (1) | (1))], min(injectionSwitch[_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, int(int(1))))), 1)), (1) | (1))], injectionSwitch[_GLF_IDENTITY(1, (1) | (1))])), 1.0, 1.0, sqrt(1.0), sin(_GLF_IDENTITY(0.0, float(mat2x4(0.0, round(length(normalize(vec2(1.0, 1.0)))), 0.0, 0.0, determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), sqrt(determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0))), 0.0, tan(0.0))))), _GLF_IDENTITY(0.0, float(vec3(0.0, log(1.0), 0.0))), 0.0, 0.0)), float(mat4x2(_GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(1, (1) | (1))], min(injectionSwitch[_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (1)), (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (1)), (_GLF_IDENTITY(1, (1) | (1))) ^ (0 ^ 0))) | (_GLF_IDENTITY(1, (1) | (1))))], injectionSwitch[_GLF_IDENTITY(1, (1) | (1))])), 1.0, 1.0, sqrt(1.0), sin(0.0), 0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)))), float(mat4x2(_GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(1, (1) | (1))], min(injectionSwitch[_GLF_IDENTITY(1, (1) | (1))], injectionSwitch[_GLF_IDENTITY(1, _GLF_IDENTITY((1) | (1), (_GLF_IDENTITY((1) | (1), ((_GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) | 0)) | (1)) << 0)) + 0))])), _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, max(1.0, 1.0))) - _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(0.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, 0.0 + (_GLF_IDENTITY(0.0, min(0.0, 0.0))))), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0))), 1.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0))))), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(0.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0))), 1.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0))))))), 1.0, sqrt(1.0), sin(0.0), _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(_GLF_IDENTITY(vec4(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 1.0, 1.0, tan(0.0)), clamp(vec4(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 1.0, 1.0, tan(0.0)), vec4(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 1.0, 1.0, tan(0.0)), vec4(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 1.0, 1.0, tan(0.0))))), clamp(float(_GLF_IDENTITY(vec4(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 1.0, 1.0, tan(0.0)), clamp(vec4(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 1.0, 1.0, tan(0.0)), vec4(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 1.0, 1.0, tan(0.0)), vec4(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 1.0, 1.0, tan(0.0))))), _GLF_IDENTITY(float(_GLF_IDENTITY(vec4(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 1.0, 1.0, tan(0.0)), clamp(vec4(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 1.0, 1.0, tan(0.0)), vec4(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 1.0, 1.0, tan(0.0)), vec4(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 1.0, 1.0, tan(0.0))))), mix(float(_GLF_FUZZED(1.1)), float(float(_GLF_IDENTITY(vec4(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 1.0, 1.0, tan(0.0)), clamp(vec4(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 1.0, 1.0, tan(0.0)), vec4(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 1.0, 1.0, tan(0.0)), vec4(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 1.0, 1.0, tan(0.0)))))), bool(true))), float(_GLF_IDENTITY(vec4(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 1.0, 1.0, tan(0.0)), clamp(vec4(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 1.0, 1.0, tan(0.0)), vec4(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 1.0, 1.0, tan(0.0)), vec4(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 1.0, 1.0, tan(0.0)))))))), 0.0, 0.0)))), float(mat4x2(_GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(1, (1) | _GLF_IDENTITY((1), ((1)) / int(_GLF_ONE(1.0, injectionSwitch.y))))], min(injectionSwitch[_GLF_IDENTITY(1, (1) | (1))], injectionSwitch[_GLF_IDENTITY(1, (1) | (1))])), 1.0, 1.0, sqrt(1.0), sin(0.0), 0.0, 0.0, 0.0))))))))).y))), (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[1]), mat2(1.0) * (vec2(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(4.6), _GLF_IDENTITY((injectionSwitch)[1], 0.0 + ((injectionSwitch)[1]))), vec2((injectionSwitch)[0], _GLF_FUZZED((- 6.9))), bvec2(true, false)))[0], injectionSwitch[1])))).y)))) && true))
                            {
                            }
                           else
                            {
                             if(_GLF_WRAPPED_IF_FALSE(false))
                              {
                              }
                             else
                              {
                               return;
                              }
                            }
                          }
                        }
                       else
                        {
                        }
                      }
                    }
                  }
                 else
                  {
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         else
          {
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
      }
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! (! (true))))))))))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         for(int _injected_loop_counter = (-29599 & int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           for(int _injected_loop_counter = int(_GLF_ONE(_GLF_IDENTITY(1.0, (1.0) + 0.0), injectionSwitch.y)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, false || _GLF_IDENTITY((_injected_loop_counter > 0), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_injected_loop_counter > 0), _GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(! ((_injected_loop_counter > 0)), bool(bvec2(! ((_injected_loop_counter > 0)), false))), bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY((_injected_loop_counter > 0), bool(_GLF_IDENTITY(bool((_injected_loop_counter > 0)), true && (bool((_injected_loop_counter > 0))))))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(! ((_injected_loop_counter > 0)), (! ((_GLF_IDENTITY(_injected_loop_counter > 0, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_injected_loop_counter > 0, bool(bvec3(_injected_loop_counter > 0, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), (! (_GLF_IDENTITY(_injected_loop_counter > 0, bool(bvec3(_injected_loop_counter > 0, false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))))))) || false)))))) || false), false), bvec2(bvec4(bvec2(! ((_injected_loop_counter > 0)), false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))), false)))), bool(bvec4(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(! ((_injected_loop_counter > 0)), bool(bvec2(! ((_injected_loop_counter > 0)), false))), bool(bvec2(_GLF_IDENTITY(! ((_injected_loop_counter > 0)), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(! ((_injected_loop_counter > 0)), (! ((_GLF_IDENTITY(_injected_loop_counter > 0, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_injected_loop_counter > 0, bool(bvec3(_injected_loop_counter > 0, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), (! (_GLF_IDENTITY(_injected_loop_counter > 0, bool(bvec3(_injected_loop_counter > 0, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))) || false)))))) || false), false), bvec2(bvec4(bvec2(! (_GLF_IDENTITY((_injected_loop_counter > 0), _GLF_IDENTITY(bool(bvec4((_injected_loop_counter > 0), false, true, true)), ! (! (bool(bvec4((_injected_loop_counter > 0), false, true, true))))))), false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))), false)))), ! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(! ((_injected_loop_counter > 0)), bool(bvec2(! ((_injected_loop_counter > 0)), false))), bool(bvec2(_GLF_IDENTITY(! ((_injected_loop_counter > _GLF_IDENTITY(0, (0 >> _GLF_IDENTITY(int(6), int(6))) | (0)))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(! ((_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter)) > 0)), (! ((_GLF_IDENTITY(_injected_loop_counter > 0, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_injected_loop_counter > 0, bool(bvec3(_injected_loop_counter > 0, false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(920.573)), float(injectionSwitch.y), bool(true))))))))), (! (_GLF_IDENTITY(_injected_loop_counter > 0, bool(bvec3(_injected_loop_counter > 0, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))) || false)))))) || false), false), _GLF_IDENTITY(bvec2(bvec4(bvec2(! ((_injected_loop_counter > 0)), false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), bvec2(bvec4(bvec2(bvec4(bvec2(! ((_injected_loop_counter > 0)), false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), true, false)))))), false))))))), true, _GLF_TRUE(_GLF_IDENTITY(true, true && (true)), (injectionSwitch.x < injectionSwitch.y)), true))))), bool(bvec3(! (_GLF_IDENTITY((_injected_loop_counter > 0), ! _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(! ((_injected_loop_counter > 0)), bool(bvec2(! ((_injected_loop_counter > 0)), false)))), ((_GLF_IDENTITY(! ((_injected_loop_counter > 0)), bool(bvec2(! ((_injected_loop_counter > 0)), false))))) && true), ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! ((_injected_loop_counter > 0)), (! ((_injected_loop_counter > 0))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bvec2(! (_GLF_IDENTITY((_injected_loop_counter > 0), ! (! ((_injected_loop_counter > 0))))), false))), (_GLF_IDENTITY(_GLF_IDENTITY(! ((_GLF_IDENTITY(_injected_loop_counter > 0, (_injected_loop_counter > 0) || false))), (! ((_injected_loop_counter > 0))) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(vec3(injectionSwitch.x, 0.0, 0.0)), (float(vec3(injectionSwitch.x, 0.0, 0.0))) - 0.0)) < injectionSwitch.y))), bool(bvec2(! (_GLF_IDENTITY((_injected_loop_counter > 0), ! (! ((_injected_loop_counter > 0))))), false)))) && true))) || false))), true, false))))))); _injected_loop_counter --)
            {
             for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), (! (_GLF_IDENTITY(false, ! (! (false))))) || false)))))), true, true, true)), bool(bvec4(bool(bvec4(_GLF_DEAD(false), true, true, true)), false, true, _GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec3(bvec3(false, true, true))))))))), (injectionSwitch.x > injectionSwitch.y)))))))
                return;
              }
            }
          }
        }
      }
     else
      {
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bool(! (false)))))))))))
      {
      }
     else
      {
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (! ((false)))) && true), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 do
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       do
                        {
                         return;
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                    }
                   else
                    {
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, false), _GLF_IDENTITY(bvec3(bvec3(bvec3(false, false, false))), bvec3(bvec3(bvec3(bvec3(bvec3(false, false, false))))))))))))));
                }
               else
                {
                }
              }
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
  }
 uint num_workgroup = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[_GLF_IDENTITY(_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-92658))), (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(-78254) : _GLF_IDENTITY(0, (true ? 0 : _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-92658, (_GLF_IDENTITY(-92658, (-92658) / 1)) | (-92658))), ~ (~ (_GLF_FUZZED(_GLF_IDENTITY(-92658, (_GLF_IDENTITY(-92658, (-92658) / 1)) | (-92658))))))))))], gl_NumWorkGroups[1], gl_NumWorkGroups[2])), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[_GLF_IDENTITY(_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-92658))), (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), ((_GLF_IDENTITY(false, ! (! (false))))) || false), ! (! (! (_GLF_IDENTITY(false, ! (! (false))))))))) ? _GLF_FUZZED(-78254) : _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-92658)))))], gl_NumWorkGroups[1], gl_NumWorkGroups[2])) : _GLF_FUZZED(uvec3(15401u, 143606u, 76251u)))).x, (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[_GLF_IDENTITY(_GLF_IDENTITY(0, (true ? 0 : _GLF_IDENTITY(_GLF_FUZZED(-92658), min(_GLF_IDENTITY(_GLF_FUZZED(-92658), (_GLF_FUZZED(-92658)) * 1), _GLF_FUZZED(-92658))))), (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(-78254) : _GLF_IDENTITY(0, (true ? 0 : _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-92658, (_GLF_IDENTITY(-92658, (-92658) / 1)) | (-92658))), ~ (~ (_GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(-92658, (_GLF_IDENTITY(-92658, (-92658) / 1)) | (-92658)), (_GLF_IDENTITY(-92658, (_GLF_IDENTITY(-92658, (-92658) / 1)) | (-92658))) | (_GLF_IDENTITY(-92658, (_GLF_IDENTITY(-92658, (-92658) / 1)) | (-92658))))))))))))], gl_NumWorkGroups[1], gl_NumWorkGroups[2])), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[_GLF_IDENTITY(_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-92658))), (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), ! (! ((_GLF_IDENTITY(false, ! (! (false)))))))))), ! (! (! (_GLF_IDENTITY(false, ! (! (false))))))))) ? _GLF_FUZZED(-78254) : _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-92658)))))], gl_NumWorkGroups[1], gl_NumWorkGroups[2])) : _GLF_FUZZED(uvec3(15401u, 143606u, 76251u)))).x) - 0u);
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               do
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     do
                      {
                       do
                        {
                         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(_GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(54.89)), float(0.0), bool(true))))), injectionSwitch.x))); _injected_loop_counter --)
                          {
                           if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), true && ((! (false))))) || (false))))
                            {
                             if(_GLF_WRAPPED_IF_TRUE(true))
                              {
                               do
                                {
                                 if(_GLF_WRAPPED_IF_FALSE(false))
                                  {
                                  }
                                 else
                                  {
                                   if(_GLF_WRAPPED_IF_TRUE(true))
                                    {
                                     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) - 0))
                                      {
                                       if(_GLF_WRAPPED_IF_TRUE(true))
                                        {
                                         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_FALSE(false), true, true)), (bool(bvec3(_GLF_WRAPPED_IF_FALSE(false), true, true))) || false)))
                                          {
                                          }
                                         else
                                          {
                                           if(_GLF_WRAPPED_IF_TRUE(true))
                                            {
                                             if(_GLF_WRAPPED_IF_FALSE(false))
                                              {
                                              }
                                             else
                                              {
                                               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                                {
                                                }
                                               else
                                                {
                                                 if(_GLF_WRAPPED_IF_TRUE(true))
                                                  {
                                                   return;
                                                  }
                                                 else
                                                  {
                                                  }
                                                }
                                              }
                                            }
                                           else
                                            {
                                            }
                                          }
                                        }
                                       else
                                        {
                                        }
                                      }
                                    }
                                   else
                                    {
                                    }
                                  }
                                }
                               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))));
                              }
                             else
                              {
                              }
                            }
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (_GLF_IDENTITY(! (false), ! (! (! (false))))))))));
                    }
                   else
                    {
                    }
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
             else
              {
              }
            }
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
  }
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(gl_WorkGroupSize.x), (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y)) ? uint(gl_WorkGroupSize.x) : _GLF_FUZZED(num_workgroup))), (uint(gl_WorkGroupSize.x)) / 1u), _GLF_IDENTITY(clamp(uint(gl_WorkGroupSize.x), uint(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) >> 0u), min(_GLF_IDENTITY(gl_WorkGroupSize.x, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) << uvec3(0u, 0u, 0u)).x, clamp(gl_WorkGroupSize.x, _GLF_IDENTITY(gl_WorkGroupSize.x, (_GLF_IDENTITY(gl_WorkGroupSize.x, 0u | (gl_WorkGroupSize.x))) | (gl_WorkGroupSize.x)), gl_WorkGroupSize.x)), (_GLF_IDENTITY(gl_WorkGroupSize.x, max(gl_WorkGroupSize.x, gl_WorkGroupSize.x))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), gl_WorkGroupSize.x))), _GLF_IDENTITY(uint(gl_WorkGroupSize.x), _GLF_IDENTITY((_GLF_IDENTITY(uint(gl_WorkGroupSize.x), ~ (~ (uint(gl_WorkGroupSize.x))))) << 0u, uint(uvec3((_GLF_IDENTITY(uint(gl_WorkGroupSize.x), ~ (~ (uint(gl_WorkGroupSize.x))))) << 0u, 1u, 1u))))), (clamp(uint(gl_WorkGroupSize.x), _GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (_GLF_IDENTITY(gl_WorkGroupSize, uvec3(_GLF_IDENTITY(uvec4(gl_WorkGroupSize, 1u), _GLF_IDENTITY((uvec4(gl_WorkGroupSize, 1u)) / uvec4(1u, 1u, 1u, 1u), (true ? (uvec4(gl_WorkGroupSize, 1u)) / uvec4(1u, 1u, 1u, 1u) : _GLF_FUZZED(uvec4(30775u, 158789u, 174505u, 38423u)))))))) | uvec3(_GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, (0u) | (0u)))), 0u, 0u)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (false ? _GLF_FUZZED(uvec3(93251u, 28782u, 167370u)) : gl_WorkGroupSize)), uvec3(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(gl_WorkGroupSize, (false ? _GLF_FUZZED(uvec3(93251u, 28782u, 167370u)) : gl_WorkGroupSize)), 1u), min(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (false ? _GLF_FUZZED(uvec3(93251u, 28782u, 167370u)) : gl_WorkGroupSize)), (_GLF_IDENTITY(gl_WorkGroupSize, (false ? _GLF_FUZZED(uvec3(93251u, 28782u, 167370u)) : gl_WorkGroupSize))) + (uvec3(117369u, 51399u, 60741u) & uvec3(0u, 0u, 0u))), 1u), uvec4(_GLF_IDENTITY(gl_WorkGroupSize, (false ? _GLF_FUZZED(uvec3(93251u, 28782u, 167370u)) : gl_WorkGroupSize)), 1u)))))))).x), clamp(_GLF_IDENTITY(uint(_GLF_IDENTITY(gl_WorkGroupSize, ~ (~ (gl_WorkGroupSize))).x), (_GLF_IDENTITY(uint(_GLF_IDENTITY(gl_WorkGroupSize, ~ (~ (gl_WorkGroupSize))).x), max(uint(_GLF_IDENTITY(gl_WorkGroupSize, ~ (~ (gl_WorkGroupSize))).x), uint(_GLF_IDENTITY(gl_WorkGroupSize, ~ (~ (gl_WorkGroupSize))).x)))) - 0u), _GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, clamp(gl_WorkGroupSize, gl_WorkGroupSize, gl_WorkGroupSize)), ~ (~ (gl_WorkGroupSize))).x), max(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, ~ (~ (gl_WorkGroupSize))).x, (_GLF_IDENTITY(gl_WorkGroupSize, ~ (~ (gl_WorkGroupSize))).x) | (_GLF_IDENTITY(gl_WorkGroupSize, ~ (~ (gl_WorkGroupSize))).x))), (uint(_GLF_IDENTITY(gl_WorkGroupSize, ~ (~ (gl_WorkGroupSize))).x)) - 0u), _GLF_IDENTITY(uint(_GLF_IDENTITY(gl_WorkGroupSize, ~ (_GLF_IDENTITY(~ (gl_WorkGroupSize), (~ (gl_WorkGroupSize)) | (_GLF_IDENTITY(~ (gl_WorkGroupSize), uvec3(uvec4(~ (gl_WorkGroupSize), 0u))))))).x), min(uint(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (true ? _GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) << uvec3(0u, 0u, 0u)) : _GLF_FUZZED(_GLF_IDENTITY(uvec3(98129u, 40094u, 60747u), uvec3(0u, 0u, 0u) | (_GLF_IDENTITY(uvec3(98129u, 40094u, 60747u), uvec3(1u, 1u, 1u) * (uvec3(98129u, 40094u, 60747u)))))))), ~ (~ (gl_WorkGroupSize))).x), uint(_GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY(~ (~ (gl_WorkGroupSize)), clamp(~ (~ (gl_WorkGroupSize)), _GLF_IDENTITY(~ (~ (gl_WorkGroupSize)), uvec3(0u, 0u, 0u) | (~ (~ (gl_WorkGroupSize)))), ~ (~ (gl_WorkGroupSize))))).x))))), uint(_GLF_IDENTITY(gl_WorkGroupSize, ~ (~ (gl_WorkGroupSize))).x))), _GLF_IDENTITY(uint(gl_WorkGroupSize.x), (uint(gl_WorkGroupSize.x)) << 0u))) + 0u))), (true ? uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(gl_WorkGroupSize.x), (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y)) ? uint(gl_WorkGroupSize.x) : _GLF_FUZZED(num_workgroup))), (uint(gl_WorkGroupSize.x)) / 1u), _GLF_IDENTITY(clamp(uint(gl_WorkGroupSize.x), uint(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) >> 0u), min(_GLF_IDENTITY(gl_WorkGroupSize.x, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) << uvec3(0u, 0u, 0u)).x, clamp(gl_WorkGroupSize.x, _GLF_IDENTITY(gl_WorkGroupSize.x, (_GLF_IDENTITY(gl_WorkGroupSize.x, 0u | (gl_WorkGroupSize.x))) | (gl_WorkGroupSize.x)), gl_WorkGroupSize.x)), (_GLF_IDENTITY(gl_WorkGroupSize.x, max(gl_WorkGroupSize.x, gl_WorkGroupSize.x))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), gl_WorkGroupSize.x))), _GLF_IDENTITY(uint(gl_WorkGroupSize.x), _GLF_IDENTITY((_GLF_IDENTITY(uint(gl_WorkGroupSize.x), ~ (~ (uint(gl_WorkGroupSize.x))))) << 0u, uint(uvec3((_GLF_IDENTITY(uint(gl_WorkGroupSize.x), ~ (~ (uint(gl_WorkGroupSize.x))))) << 0u, 1u, 1u))))), (clamp(uint(gl_WorkGroupSize.x), _GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (_GLF_IDENTITY(gl_WorkGroupSize, uvec3(_GLF_IDENTITY(uvec4(gl_WorkGroupSize, 1u), _GLF_IDENTITY((uvec4(gl_WorkGroupSize, 1u)) / uvec4(1u, 1u, 1u, 1u), (true ? (uvec4(gl_WorkGroupSize, 1u)) / uvec4(1u, 1u, 1u, 1u) : _GLF_FUZZED(uvec4(30775u, 158789u, 174505u, 38423u)))))))) | uvec3(_GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, (0u) | (0u)))), 0u, 0u)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (false ? _GLF_FUZZED(uvec3(93251u, 28782u, 167370u)) : gl_WorkGroupSize)), uvec3(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(gl_WorkGroupSize, (false ? _GLF_FUZZED(uvec3(93251u, 28782u, 167370u)) : gl_WorkGroupSize)), 1u), min(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (false ? _GLF_FUZZED(uvec3(93251u, 28782u, 167370u)) : gl_WorkGroupSize)), (_GLF_IDENTITY(gl_WorkGroupSize, (false ? _GLF_FUZZED(uvec3(93251u, 28782u, 167370u)) : gl_WorkGroupSize))) + (uvec3(117369u, 51399u, 60741u) & uvec3(0u, 0u, 0u))), 1u), uvec4(_GLF_IDENTITY(gl_WorkGroupSize, (false ? _GLF_FUZZED(uvec3(93251u, 28782u, 167370u)) : gl_WorkGroupSize)), 1u)))))))).x), clamp(_GLF_IDENTITY(uint(_GLF_IDENTITY(gl_WorkGroupSize, ~ (~ (gl_WorkGroupSize))).x), (_GLF_IDENTITY(uint(_GLF_IDENTITY(gl_WorkGroupSize, ~ (~ (gl_WorkGroupSize))).x), max(uint(_GLF_IDENTITY(gl_WorkGroupSize, ~ (~ (gl_WorkGroupSize))).x), uint(_GLF_IDENTITY(gl_WorkGroupSize, ~ (~ (gl_WorkGroupSize))).x)))) - 0u), _GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, clamp(gl_WorkGroupSize, gl_WorkGroupSize, gl_WorkGroupSize)), ~ (~ (gl_WorkGroupSize))).x), max(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, ~ (~ (gl_WorkGroupSize))).x, (_GLF_IDENTITY(gl_WorkGroupSize, ~ (~ (gl_WorkGroupSize))).x) | (_GLF_IDENTITY(gl_WorkGroupSize, ~ (~ (gl_WorkGroupSize))).x))), (uint(_GLF_IDENTITY(gl_WorkGroupSize, ~ (~ (gl_WorkGroupSize))).x)) - 0u), _GLF_IDENTITY(uint(_GLF_IDENTITY(gl_WorkGroupSize, ~ (_GLF_IDENTITY(~ (gl_WorkGroupSize), (~ (gl_WorkGroupSize)) | (_GLF_IDENTITY(~ (gl_WorkGroupSize), uvec3(uvec4(~ (gl_WorkGroupSize), 0u))))))).x), min(uint(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (true ? _GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) << uvec3(0u, 0u, 0u)) : _GLF_FUZZED(_GLF_IDENTITY(uvec3(98129u, 40094u, 60747u), uvec3(0u, 0u, 0u) | (_GLF_IDENTITY(uvec3(98129u, 40094u, 60747u), uvec3(1u, 1u, 1u) * (uvec3(98129u, 40094u, 60747u)))))))), ~ (~ (gl_WorkGroupSize))).x), uint(_GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY(~ (~ (gl_WorkGroupSize)), clamp(~ (~ (gl_WorkGroupSize)), _GLF_IDENTITY(~ (~ (gl_WorkGroupSize)), uvec3(0u, 0u, 0u) | (~ (~ (gl_WorkGroupSize)))), ~ (~ (gl_WorkGroupSize))))).x))))), uint(_GLF_IDENTITY(gl_WorkGroupSize, ~ (~ (gl_WorkGroupSize))).x))), _GLF_IDENTITY(uint(gl_WorkGroupSize.x), (uint(gl_WorkGroupSize.x)) << 0u))) + 0u))) : _GLF_FUZZED(bitfieldInsert(subgroup_id, subgroup_size, 90847, 44322)))));
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID.x, ~ (~ (_GLF_IDENTITY(gl_WorkGroupID.x, ~ (~ (gl_WorkGroupID.x))))));
 uint workgroup_base = workgroup_size * workgroup_id;
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(26.40)), bool(false)))))))
          {
          }
         else
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (0) << (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(0), int(0)), (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(0), int(0)), int(ivec4(0 << _GLF_IDENTITY(int(0), int(0)), 1, 1, 1)))) / 1)))); _injected_loop_counter --)
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               do
                {
                 for(int _injected_loop_counter = _GLF_IDENTITY(0, int(ivec3(0, 0, 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch)), mix(vec2(_GLF_FUZZED(float(185881u)), _GLF_FUZZED(9047.7816)), vec2(_GLF_IDENTITY((injectionSwitch), (true ? (injectionSwitch) : _GLF_FUZZED(vec2(4331.2566, 51.16))))[0], (injectionSwitch)[1]), bvec2(true, true)))) / exp(vec2(0.0, 0.0))).x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
                    {
                     do
                      {
                       do
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (injectionSwitch.x < injectionSwitch.y))))))
                              {
                               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), true && ((false)))))) && true), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(false, false, false), true)), bvec3(bvec4(bvec3(bvec4(bvec3(false, false, false), true)), true)))))), (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))))))) && true), true)), bool(bvec2(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))) && true), true)), bool(bool(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true), ! (! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true)))), true), bvec2(bvec3(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true), ! (! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true)))), true), false))))))), false))))))
                                {
                                 do
                                  {
                                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                    {
                                    }
                                   else
                                    {
                                     do
                                      {
                                       do
                                        {
                                         if(_GLF_WRAPPED_IF_TRUE(true))
                                          {
                                           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                            {
                                            }
                                           else
                                            {
                                             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)))) || false))) && true))
                                              {
                                              }
                                             else
                                              {
                                               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                                                {
                                                 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, (_injected_loop_counter < 1) || false)); _injected_loop_counter ++)
                                                  {
                                                   if(_GLF_WRAPPED_IF_TRUE(true))
                                                    {
                                                     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
                                                      {
                                                      }
                                                     else
                                                      {
                                                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter --)
                                                        {
                                                         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                                                          {
                                                           if(_GLF_WRAPPED_IF_FALSE(false))
                                                            {
                                                            }
                                                           else
                                                            {
                                                             if(_GLF_WRAPPED_IF_FALSE(false))
                                                              {
                                                              }
                                                             else
                                                              {
                                                               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec2(_GLF_WRAPPED_IF_FALSE(false), false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                                                {
                                                                }
                                                               else
                                                                {
                                                                 if(_GLF_WRAPPED_IF_TRUE(true))
                                                                  {
                                                                   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), _GLF_IDENTITY((_GLF_IDENTITY(false ? _GLF_FUZZED(51506) : int(0), clamp(false ? _GLF_IDENTITY(_GLF_FUZZED(51506), _GLF_IDENTITY(int(ivec4(_GLF_FUZZED(51506), int(_GLF_ZERO(0.0, injectionSwitch.x)), 0, 0)), (int(ivec4(_GLF_FUZZED(51506), int(_GLF_ZERO(0.0, injectionSwitch.x)), 0, 0))) >> 0)) : int(0), false ? _GLF_FUZZED(51506) : int(0), false ? _GLF_FUZZED(51506) : int(0)))), ((_GLF_IDENTITY(false ? _GLF_FUZZED(51506) : int(0), clamp(false ? _GLF_IDENTITY(_GLF_FUZZED(51506), _GLF_IDENTITY(int(ivec4(_GLF_FUZZED(51506), int(_GLF_ZERO(0.0, injectionSwitch.x)), 0, 0)), (int(ivec4(_GLF_FUZZED(51506), int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x)), 0, 0))) >> 0)) : int(0), false ? _GLF_FUZZED(51506) : int(0), _GLF_IDENTITY(false ? _GLF_FUZZED(51506) : int(0), (false ? _GLF_FUZZED(51506) : int(0)) >> 0))))) | (_GLF_IDENTITY((_GLF_IDENTITY(false ? _GLF_FUZZED(51506) : int(0), clamp(false ? _GLF_IDENTITY(_GLF_FUZZED(51506), _GLF_IDENTITY(int(ivec4(_GLF_FUZZED(51506), int(_GLF_ZERO(0.0, injectionSwitch.x)), 0, 0)), (int(ivec4(_GLF_FUZZED(51506), int(_GLF_ZERO(0.0, injectionSwitch.x)), 0, 0))) >> 0)) : int(0), false ? _GLF_FUZZED(51506) : int(0), _GLF_IDENTITY(false ? _GLF_FUZZED(51506) : int(0), (_GLF_IDENTITY(false ? _GLF_FUZZED(51506) : int(0), (false ? _GLF_FUZZED(51506) : int(0)) | 0)) - 0)))), int(int((_GLF_IDENTITY(false ? _GLF_FUZZED(51506) : int(0), clamp(false ? _GLF_IDENTITY(_GLF_FUZZED(51506), _GLF_IDENTITY(int(ivec4(_GLF_FUZZED(51506), int(_GLF_ZERO(0.0, injectionSwitch.x)), 0, 0)), (int(ivec4(_GLF_FUZZED(51506), int(_GLF_ZERO(0.0, injectionSwitch.x)), 0, 0))) >> 0)) : int(0), false ? _GLF_FUZZED(51506) : int(0), false ? _GLF_FUZZED(51506) : int(0)))))))))))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                                                                    {
                                                                     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) || false))
                                                                      {
                                                                      }
                                                                     else
                                                                      {
                                                                       do
                                                                        {
                                                                         if(_GLF_WRAPPED_IF_FALSE(false))
                                                                          {
                                                                          }
                                                                         else
                                                                          {
                                                                           for(int _injected_loop_counter = (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), clamp(_GLF_IDENTITY(int(0), (int(0)) - 0), _GLF_IDENTITY(int(0), (int(_GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, int(_GLF_IDENTITY(ivec4(0, 1, 1, 1), max(ivec4(0, 1, 1, 1), ivec4(0, 1, 1, 1))))), 0, 0)))) ^ 0), _GLF_IDENTITY(int(0), (false ? _GLF_FUZZED(_injected_loop_counter) : int(0))))), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                                                                            {
                                                                             do
                                                                              {
                                                                               do
                                                                                {
                                                                                 if(_GLF_WRAPPED_IF_FALSE(false))
                                                                                  {
                                                                                  }
                                                                                 else
                                                                                  {
                                                                                   for(int _injected_loop_counter = _GLF_IDENTITY(1, 0 ^ (1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                                                                                    {
                                                                                     do
                                                                                      {
                                                                                       if(_GLF_WRAPPED_IF_TRUE(true))
                                                                                        {
                                                                                         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), clamp((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0)))).y))))
                                                                                          {
                                                                                          }
                                                                                         else
                                                                                          {
                                                                                           for(int _injected_loop_counter = (_GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), clamp(~ (0), ~ (0), ~ (0))))))) << _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
                                                                                            {
                                                                                             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
                                                                                              {
                                                                                               return;
                                                                                              }
                                                                                             else
                                                                                              {
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                       else
                                                                                        {
                                                                                        }
                                                                                      }
                                                                                     while(_GLF_WRAPPED_LOOP(false));
                                                                                    }
                                                                                  }
                                                                                }
                                                                               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec4(injectionSwitch, 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-7.7)), bool(false)))), float(_GLF_FUZZED(56.58)), bool(false))), 0.0, 1.0, determinant(mat2(0.0, 0.0, 1.0, 0.0)), 0.0, 1.0, _GLF_IDENTITY(0.0, (0.0) / 1.0), 1.0))), max(vec4(injectionSwitch, 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0))), determinant(mat2(0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, (0.0) - 0.0))), 0.0, 1.0, 0.0, 1.0))), vec4(injectionSwitch, 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, determinant(mat2(0.0, 0.0, 1.0, 0.0)), 0.0, _GLF_IDENTITY(1.0, float(vec4(1.0, 1.0, 1.0, 0.0))), 0.0, 1.0))))))).y))));
                                                                              }
                                                                             while(_GLF_WRAPPED_LOOP(false));
                                                                            }
                                                                          }
                                                                        }
                                                                       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false))))), true && (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, bool(bool(false)))))))), true && (! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false)))))))))))));
                                                                      }
                                                                    }
                                                                  }
                                                                 else
                                                                  {
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                   else
                                                    {
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                         else
                                          {
                                          }
                                        }
                                       while(_GLF_WRAPPED_LOOP(false));
                                      }
                                     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), bool(bvec4((! (false)), true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), (_GLF_WRAPPED_LOOP(false)) && true));
                                    }
                                  }
                                 while(_GLF_WRAPPED_LOOP(false));
                                }
                              }
                             else
                              {
                              }
                            }
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   else
                    {
                    }
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
          }
        }
       else
        {
        }
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, max(workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, min(_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u), subgroup_size)), workgroup_base + _GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * subgroup_size)), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, 0u | (workgroup_base + subgroup_id * subgroup_size)), min(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, 0u | (workgroup_base + subgroup_id * subgroup_size)), _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, 0u | (workgroup_base + subgroup_id * subgroup_size))))) >> 0u) + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, (subgroup_id) / ((1u << _GLF_IDENTITY(uint(5u), uint(5u))) >> _GLF_IDENTITY(uint(5u), uint(5u))))) / 1u) * subgroup_size + ((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u));
 uint read = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) >> 0u), 4, 64, 0);
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) << (0 >> _GLF_IDENTITY(int(0), int(0)))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) || false), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) || false)) || false, false || (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) || false)) || false, bool(bvec4((_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) || false)) || false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true)))))))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter --)
            {
             do
              {
               do
                {
                 do
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          {
                          }
                         else
                          {
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (1 ^ 1)); _injected_loop_counter --)
                              {
                               if(_GLF_WRAPPED_IF_FALSE(false))
                                {
                                }
                               else
                                {
                                 if(_GLF_WRAPPED_IF_TRUE(true))
                                  {
                                   for(int _injected_loop_counter = _GLF_IDENTITY(1, max(1, 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & 14873)); _injected_loop_counter --)
                                    {
                                     atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
                                    }
                                  }
                                 else
                                  {
                                  }
                                }
                              }
                            }
                          }
                        }
                       else
                        {
                        }
                      }
                    }
                   else
                    {
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
            }
          }
         else
          {
          }
        }
       else
        {
        }
      }
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(subgroup_local_id + 1 < subgroup_size)
    {
     do
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             do
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 atomicStore(checker[virtual_gid], read, 4, 64, 4);
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           else
            {
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), ~ (~ _GLF_IDENTITY((int(5)), clamp(_GLF_IDENTITY((int(5)), int(_GLF_IDENTITY(int((int(5))), (false ? _GLF_FUZZED(-42597) : int((int(5))))))), (int(5)), (int(5))))))))); _injected_loop_counter --)
      {
       do
        {
         subgroupAll(false);
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != _GLF_IDENTITY(int(_GLF_ZERO(_GLF_IDENTITY(0.0, float(mat3x2(0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, sin(0.0), 1.0))), injectionSwitch.x)), (int(_GLF_ZERO(_GLF_IDENTITY(0.0, float(mat3x2(0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, sin(0.0), 1.0))), injectionSwitch.x))) | (_GLF_IDENTITY(int(_GLF_ZERO(_GLF_IDENTITY(0.0, float(mat3x2(0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, sin(0.0), 1.0))), injectionSwitch.x)), (_GLF_IDENTITY(int(_GLF_ZERO(_GLF_IDENTITY(0.0, float(mat3x2(0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, sin(0.0), 1.0))), injectionSwitch.x)), (int(_GLF_ZERO(_GLF_IDENTITY(0.0, float(mat3x2(_GLF_IDENTITY(0.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 1.0 * (0.0)) : _GLF_FUZZED(-7.7))), _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, sin(0.0), 1.0))), injectionSwitch.x))) - 0)) >> 0))), ! _GLF_IDENTITY((! (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | 0) != int(_GLF_ZERO(_GLF_IDENTITY(0.0, float(mat3x2(0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, sin(0.0), 1.0))), injectionSwitch.x)))), ! (! ((! (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | 0) != int(_GLF_ZERO(_GLF_IDENTITY(0.0, float(mat3x2(0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, sin(0.0), 1.0))), injectionSwitch.x))))))))); _GLF_IDENTITY(_injected_loop_counter --, (-75381 & 0) ^ (_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) - 0))))
      {
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((1 ^ 0), ((1 ^ 0)) | ((1 ^ 0)))); _injected_loop_counter ++)
        {
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), min(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (int(_GLF_ZERO(0.0, injectionSwitch.x))) | (0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) ^ 0)), (_GLF_IDENTITY(int(6), (int(6)) >> 0)) | 0)))), _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (int(_GLF_ZERO(0.0, injectionSwitch.x))) + 0)))); _injected_loop_counter --)
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)))))))
                    {
                    }
                   else
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) && _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) && true)) && true)))))))
                      {
                       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                        {
                         do
                          {
                           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                            {
                             if(_GLF_WRAPPED_IF_TRUE(true))
                              {
                               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                                {
                                 if(_GLF_WRAPPED_IF_FALSE(false))
                                  {
                                  }
                                 else
                                  {
                                   do
                                    {
                                     if(_GLF_WRAPPED_IF_FALSE(false))
                                      {
                                      }
                                     else
                                      {
                                       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                                        {
                                         if(_GLF_WRAPPED_IF_FALSE(false))
                                          {
                                          }
                                         else
                                          {
                                           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec2(injectionSwitch), _GLF_IDENTITY((vec2(injectionSwitch)) * mat2(1.0), mix(vec2(_GLF_FUZZED((vec3(789.411, 4.1, 2.3) / 2668.8606).r), _GLF_FUZZED(-77.93)), vec2((_GLF_IDENTITY((vec2(injectionSwitch)), ((vec2(injectionSwitch))) / vec2(1.0, 1.0)) * mat2(1.0))[0], (_GLF_IDENTITY((vec2(injectionSwitch)), (false ? _GLF_FUZZED(vec2(-2.1, 57.45)) : (vec2(injectionSwitch)))) * mat2(1.0))[1]), bvec2(_GLF_IDENTITY(true, false || (true)), true)))))).y))))
                                            {
                                             if(_GLF_WRAPPED_IF_FALSE(false))
                                              {
                                              }
                                             else
                                              {
                                               return;
                                              }
                                            }
                                           else
                                            {
                                            }
                                          }
                                        }
                                      }
                                    }
                                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                  }
                                }
                              }
                             else
                              {
                              }
                            }
                          }
                         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                        }
                      }
                     else
                      {
                      }
                    }
                  }
                }
              }
             else
              {
              }
            }
           else
            {
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
    }
   else
    {
     atomicStore(buf[_GLF_IDENTITY(virtual_gid, max(virtual_gid, virtual_gid))], read, 4, 64, 4);
     for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       subgroupAll(true);
      }
    }
  }
 else
  {
  }
}
