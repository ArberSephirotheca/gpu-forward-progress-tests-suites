#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, true && (false))))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (int(_GLF_ZERO(0.0, injectionSwitch.x))) << 0)); _injected_loop_counter --)
      {
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(false)), false || (! (_GLF_DEAD(false)))), (! (_GLF_DEAD(false))) || false))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, ! (_GLF_IDENTITY(! ((false) || false), (! ((false) || false)) || false)))), (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) * vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))).x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + determinant(mat2(0.0, length(vec2(0.0, 0.0)), 1.0, abs(0.0))))))))
        barrier();
       barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = _GLF_IDENTITY(0, _GLF_IDENTITY(1 * (0), (false ? _GLF_FUZZED(-71986) : 1 * (0)))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), true && (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, true, false))), (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, false)), true && (_GLF_IDENTITY(bool(bvec3(false, true, false)), false || (bool(bvec3(false, true, false))))))), ! (! (_GLF_IDENTITY(false, bool(bvec3(false, true, false))))))) && true) || (false))) || false, true && _GLF_IDENTITY(((_GLF_IDENTITY(false, _GLF_IDENTITY(false, bool(bvec3(false, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(true), ! (! (bool(true)))), ! (! (bool(true))))), true && (bool(_GLF_IDENTITY(bool(true), _GLF_IDENTITY(! (! (bool(true))), ! (! (! (! (bool(true))))))))))), false))) || (false))) || false), true && ((_GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(true), ! (! (bool(true))))), true && (bool(_GLF_IDENTITY(bool(true), ! _GLF_IDENTITY((! (bool(true))), ! (! ((! (bool(true))))))))))), false), bvec3(_GLF_IDENTITY(bvec3(bvec3(false, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(true), ! (! (_GLF_IDENTITY(bool(true), (bool(true)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), true && _GLF_IDENTITY((bool(_GLF_IDENTITY(bool(true), ! (! (bool(true)))))), ((bool(_GLF_IDENTITY(bool(true), ! (! (bool(true))))))) || false))), false)), bvec3(bvec3(bvec3(bvec3(false, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(true), ! (! (bool(true))))), _GLF_IDENTITY(true && (bool(_GLF_IDENTITY(bool(true), ! (! (bool(true)))))), (true && (bool(_GLF_IDENTITY(bool(true), ! (! (bool(true))))))) || false))), false))))))))) || (false))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(false, _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(true), ! (! (bool(true))))), true && (bool(_GLF_IDENTITY(bool(true), ! _GLF_IDENTITY((! (bool(true))), ! (! ((! (bool(true))))))))))), false), bvec3(_GLF_IDENTITY(bvec3(bvec3(false, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(true), ! (! (_GLF_IDENTITY(bool(true), (bool(true)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), true && _GLF_IDENTITY((bool(_GLF_IDENTITY(bool(true), ! (! (bool(true)))))), ((bool(_GLF_IDENTITY(bool(true), ! (! (bool(true))))))) || false))), false)), bvec3(bvec3(bvec3(bvec3(false, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(true), ! (! (bool(true))))), _GLF_IDENTITY(true && (bool(_GLF_IDENTITY(bool(true), ! (! (bool(true)))))), (true && (bool(_GLF_IDENTITY(bool(true), ! (! (bool(true))))))) || false))), false))))))))) || (false)))), (! ((_GLF_IDENTITY(false, _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(true), ! (! (bool(true))))), true && (bool(_GLF_IDENTITY(bool(true), ! _GLF_IDENTITY((! (bool(true))), ! (! ((! (bool(true))))))))))), false), bvec3(_GLF_IDENTITY(bvec3(bvec3(false, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(true), ! (! (_GLF_IDENTITY(bool(true), (bool(true)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), true && _GLF_IDENTITY((bool(_GLF_IDENTITY(bool(true), ! (! (bool(true)))))), ((bool(_GLF_IDENTITY(bool(true), ! (! (bool(true))))))) || false))), false)), bvec3(bvec3(bvec3(bvec3(false, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(true), ! (! (bool(true))))), _GLF_IDENTITY(true && (bool(_GLF_IDENTITY(bool(true), ! (! (bool(true)))))), (true && (bool(_GLF_IDENTITY(bool(true), ! (! (bool(true))))))) || false))), false))))))))) || (false))))) || false))) || false)))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, true))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false))), ! (! (false)))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       barrier();
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec3(false, true, true))))))) || _GLF_IDENTITY(false, bool(bool(false))))));
      }
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, ~ (~ (0))), 0, 0))); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
  }
uint subgroup_size = 16;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-0.1) : _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), _GLF_IDENTITY(bool(bvec4(bool(bool(false)), true, false, true)), bool(bvec3(bool(bvec4(bool(bool(false)), true, false, true)), false, _GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups)).x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) * 1)) | (_injected_loop_counter)), clamp(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)), _injected_loop_counter, _injected_loop_counter)) < (1 & _GLF_IDENTITY(1, ~ (~ (1))))); _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = _GLF_IDENTITY(0, ~ (~ (0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bool(_GLF_DEAD(false))), (_GLF_IDENTITY(bool(bool(_GLF_DEAD(false))), bool(bvec3(bool(bool(_GLF_DEAD(false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(_GLF_IDENTITY(1, (_GLF_IDENTITY(true, ! (! (true))) ? _GLF_IDENTITY(1, int(ivec3(1, 1, 1))) : _GLF_FUZZED(_injected_loop_counter))))))))); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       for(int _injected_loop_counter = (((_GLF_IDENTITY((_GLF_IDENTITY((0 ^ _GLF_IDENTITY(1, 1 * (1))), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)) ? _GLF_FUZZED(-24986) : (0 ^ 1))) << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(3), max(int(3), int(3))), ~ (~ (_GLF_IDENTITY(int(3), max(int(3), int(3)))))), _GLF_IDENTITY(int(3), min(int(3), int(3))))), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2((_GLF_IDENTITY((0 ^ _GLF_IDENTITY(1, 1 * (1))), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)) ? _GLF_FUZZED(-24986) : (0 ^ 1))) << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(3), max(int(3), int(3))), ~ (~ (_GLF_IDENTITY(int(3), max(int(3), int(3)))))), _GLF_IDENTITY(int(_GLF_IDENTITY(3, clamp(3, 3, _GLF_IDENTITY(3, (3) ^ 0)))), min(int(3), int(3))))), 1), (ivec2((_GLF_IDENTITY(_GLF_IDENTITY((0 ^ _GLF_IDENTITY(1, 1 * (1))), int(int((0 ^ _GLF_IDENTITY(1, 1 * (1)))))), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)) ? _GLF_FUZZED(-24986) : (0 ^ 1))) << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(3), max(int(3), int(3))), ~ (~ (_GLF_IDENTITY(int(3), max(int(3), int(3)))))), _GLF_IDENTITY(int(3), min(int(_GLF_IDENTITY(3, (3) << 0)), int(3))))), 1)) << ivec2(0, 0))), int(ivec4(int(_GLF_IDENTITY(ivec2((_GLF_IDENTITY((0 ^ _GLF_IDENTITY(1, 1 * (1))), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y) && true))) ? _GLF_FUZZED(-24986) : (0 ^ 1))) << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(3, ~ (_GLF_IDENTITY(~ (3), int(ivec3(~ (3), 1, 1)))))), max(int(3), int(3))), ~ (~ (_GLF_IDENTITY(int(3), max(int(_GLF_IDENTITY(3, min(_GLF_IDENTITY(3, clamp(_GLF_IDENTITY(3, (3) | 0), 3, _GLF_IDENTITY(3, (3) | 0))), 3))), int(3)))))), _GLF_IDENTITY(int(3), min(int(3), int(3))))), 1), (ivec2((_GLF_IDENTITY((0 ^ _GLF_IDENTITY(1, 1 * (1))), _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)) ? _GLF_FUZZED(_GLF_IDENTITY(-24986, (-24986) << 0)) : (0 ^ 1)), clamp((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)) ? _GLF_FUZZED(_GLF_IDENTITY(-24986, (-24986) << 0)) : (0 ^ 1)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)) ? _GLF_FUZZED(_GLF_IDENTITY(-24986, (-24986) << 0)) : (0 ^ 1)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)) ? _GLF_FUZZED(_GLF_IDENTITY(-24986, (-24986) << 0)) : (0 ^ 1))))) << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(ivec2(_GLF_IDENTITY(int(3), clamp(int(3), int(3), int(3))), 0))), max(int(3), int(3))), ~ (~ (_GLF_IDENTITY(int(3), max(int(3), int(3)))))), _GLF_IDENTITY(int(3), min(int(3), int(3))))), 1)) << ivec2(0, 0))), 1, 0, 1)))) >> _GLF_IDENTITY(int(3), int(3))) << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(8), int(8)))); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             else
              {
              }
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ((false)) && true) && _GLF_IDENTITY(true, (true) && true))))
            barrier();
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), bool(bvec3(bool(false), true, false)))))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(vec3(28.07, 6860.2804, 8.3).p)), bool(false))) > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x, mix(_GLF_IDENTITY(float(injectionSwitch.x), clamp(float(injectionSwitch.x), float(injectionSwitch.x), float(injectionSwitch.x))), float(_GLF_FUZZED(vec3(28.07, 6860.2804, 8.3).p)), bool(false))) > injectionSwitch.y)))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 for(int _injected_loop_counter = ((1 | 1) & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(false))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, exp(_GLF_IDENTITY(vec2(0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED((+ -68.93))), bool(false)))), vec2(0.0, 0.0) + (vec2(0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED((+ -68.93))), bool(false))))))) * (injectionSwitch)), 1.0, 1.0, sin(0.0), 1.0))).y))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(770.082), _GLF_FUZZED(277.706)), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))).x > injectionSwitch.y))) || false)))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          barrier();
        }
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(6.7)), float(injectionSwitch.y), bool(true))), injectionSwitch.y)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     else
      {
      }
    }
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec3(bvec3(false, false, true))))))))
          barrier();
         barrier();
        }
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint workgroup_base = _GLF_IDENTITY(workgroup_size, (true ? workgroup_size : _GLF_FUZZED(subgroup_id))) * _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, ~ (_GLF_IDENTITY(~ (workgroup_id), max(~ (workgroup_id), ~ (workgroup_id))))), uint(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, ~ (_GLF_IDENTITY(~ (workgroup_id), max(~ (workgroup_id), ~ (workgroup_id))))), max(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, ~ (_GLF_IDENTITY(~ (workgroup_id), max(~ (workgroup_id), ~ (workgroup_id))))), ~ (~ (_GLF_IDENTITY(workgroup_id, ~ (_GLF_IDENTITY(~ (workgroup_id), max(~ (workgroup_id), ~ (workgroup_id)))))))), _GLF_IDENTITY(workgroup_id, ~ (_GLF_IDENTITY(~ (workgroup_id), max(~ (workgroup_id), ~ (workgroup_id))))))), 0u)));
 uint virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(workgroup_base, uint(_GLF_IDENTITY(uint(workgroup_base), ~ (~ (uint(workgroup_base)))))) : _GLF_FUZZED(workgroup_base))) + subgroup_id * subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (subgroup_size)), 1u), max(_GLF_IDENTITY(uvec2(workgroup_base + subgroup_id * subgroup_size, 1u), _GLF_IDENTITY((_GLF_IDENTITY(uvec2(workgroup_base + subgroup_id * subgroup_size, 1u), (uvec2(workgroup_base + subgroup_id * subgroup_size, 1u)) >> uvec2(0u, 0u))) / uvec2(1u, 1u), ((uvec2(workgroup_base + subgroup_id * subgroup_size, 1u)) / _GLF_IDENTITY(_GLF_IDENTITY(uvec2(1u, 1u), (_GLF_IDENTITY(uvec2(1u, 1u), (uvec2(1u, 1u)) ^ uvec2(0u, 0u))) | (uvec2(1u, 1u))), (uvec2(1u, 1u)) - uvec2(0u, 0u))) | _GLF_IDENTITY(uvec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))), injectionSwitch)).x)), clamp(uvec2(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, injectionSwitch.x)) * 1.0), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)).x)), uvec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)).x)), _GLF_IDENTITY(uvec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)).x)), (uvec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)).x, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)).x) * 1.0)))) << uvec2(0u, 0u)))))), uvec2(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | (_GLF_IDENTITY(subgroup_id * subgroup_size, clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size)))), _GLF_IDENTITY(_GLF_IDENTITY(1u, 0u | (1u)), (_GLF_IDENTITY(_GLF_IDENTITY(1u, ~ (_GLF_IDENTITY(~ (1u), (~ (1u)) << 0u))), clamp(1u, _GLF_IDENTITY(1u, uint(uvec4(1u, 1u, 1u, 1u))), 1u))) << 0u))))), clamp(uint(_GLF_IDENTITY(uvec2(workgroup_base + subgroup_id * subgroup_size, 1u), max(_GLF_IDENTITY(uvec2(workgroup_base + subgroup_id * subgroup_size, 1u), _GLF_IDENTITY((_GLF_IDENTITY(uvec2(workgroup_base + subgroup_id * subgroup_size, 1u), (uvec2(workgroup_base + subgroup_id * subgroup_size, 1u)) >> uvec2(0u, 0u))) / uvec2(1u, 1u), ((uvec2(_GLF_IDENTITY(workgroup_base, (true ? workgroup_base : _GLF_FUZZED(workgroup_size))) + subgroup_id * subgroup_size, 1u)) / _GLF_IDENTITY(uvec2(1u, 1u), (uvec2(1u, 1u)) - uvec2(0u, 0u))) | uvec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)).x)))), uvec2(workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, clamp(1u, _GLF_IDENTITY(1u, uint(uvec4(1u, 1u, 1u, 1u))), 1u))) << 0u))))), uint(_GLF_IDENTITY(uvec2(workgroup_base + subgroup_id * subgroup_size, 1u), max(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(workgroup_base + subgroup_id * subgroup_size, 1u), (true ? uvec2(workgroup_base + subgroup_id * subgroup_size, 1u) : _GLF_FUZZED(uvec2(68034u, 106990u)))), _GLF_IDENTITY((_GLF_IDENTITY(uvec2(workgroup_base + subgroup_id * subgroup_size, 1u), (uvec2(workgroup_base + subgroup_id * subgroup_size, 1u)) >> uvec2(0u, 0u))) / uvec2(1u, 1u), ((uvec2(workgroup_base + _GLF_IDENTITY(subgroup_id, max(_GLF_IDENTITY(subgroup_id, clamp(subgroup_id, subgroup_id, subgroup_id)), subgroup_id)) * subgroup_size, 1u)) / _GLF_IDENTITY(uvec2(1u, 1u), (uvec2(1u, 1u)) - uvec2(0u, 0u))) | uvec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)).x)))), uvec2(workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, clamp(1u, _GLF_IDENTITY(1u, uint(uvec4(1u, 1u, 1u, 1u))), 1u))) << 0u), uint(uint(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, clamp(1u, _GLF_IDENTITY(1u, uint(uvec4(1u, 1u, 1u, 1u))), 1u))) << 0u)))))))), uint(_GLF_IDENTITY(uvec2(workgroup_base + subgroup_id * subgroup_size, 1u), max(_GLF_IDENTITY(uvec2(workgroup_base + subgroup_id * subgroup_size, 1u), _GLF_IDENTITY((_GLF_IDENTITY(uvec2(workgroup_base + subgroup_id * subgroup_size, 1u), (uvec2(workgroup_base + subgroup_id * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(subgroup_size, uint(uint(subgroup_size))))), (uint(uint(_GLF_IDENTITY(subgroup_size, uint(uint(subgroup_size)))))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))), (subgroup_size) ^ 0u), 1u)) >> uvec2(0u, 0u))) / uvec2(1u, _GLF_IDENTITY(1u, 0u | (1u))), ((uvec2(workgroup_base + subgroup_id * subgroup_size, 1u)) / _GLF_IDENTITY(uvec2(1u, _GLF_IDENTITY(1u, min(1u, 1u))), (uvec2(1u, 1u)) - uvec2(0u, 0u))) | uvec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)).x)))), uvec2(workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, clamp(1u, _GLF_IDENTITY(1u, uint(uvec4(1u, 1u, 1u, 1u))), 1u))) << 0u)))))))) + subgroup_local_id;
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             barrier();
            }
          }
         barrier();
        }
       else
        {
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))))))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))
    barrier();
  }
 else
  {
   for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), int(int(int(3)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, (1) * 1)); _injected_loop_counter ++)
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(7621.1401)), bool(false)))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           do
            {
             do
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED((+ 32.18))), float(injectionSwitch.y), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true && (injectionSwitch.x > injectionSwitch.y))))))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && _GLF_IDENTITY((! (false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((! (false)))))))))
                  barrier();
                 barrier();
                }
               barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   barrier();
                  }
                 barrier();
                }
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                barrier();
               do
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                  {
                   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec2(bvec2(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_DEAD(false)), ! (! (_GLF_IDENTITY((_GLF_DEAD(false)), ((_GLF_DEAD(false))) && true)))) && true, bool(bvec4(_GLF_IDENTITY((_GLF_DEAD(false)), ! (! (_GLF_IDENTITY((_GLF_DEAD(false)), ((_GLF_DEAD(false))) && true)))) && true, true, false, true)))))))
                    {
                     do
                      {
                       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                        barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))) && true)))))))
                      barrier();
                     barrier();
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(false, ! (! (false))) || (false)), (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), _GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || (bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))))
                      barrier();
                     barrier();
                    }
                   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))
                    {
                     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec3(true, false, false)))))
                        {
                         barrier();
                        }
                       else
                        {
                        }
                      }
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     barrier();
                    }
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
               do
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
                barrier();
              }
             while(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY(false, (false) && true) || (_GLF_WRAPPED_LOOP(false))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), false || (_GLF_WRAPPED_LOOP(false))), false), true, false))))))), _GLF_IDENTITY(! (! (_GLF_WRAPPED_LOOP(false))), _GLF_IDENTITY(! (! (! (! (_GLF_WRAPPED_LOOP(false))))), (! (! (! (! (_GLF_WRAPPED_LOOP(false)))))) || false))));
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(false, ! (! (false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
              {
               for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(0, (0) | _GLF_IDENTITY((0), 0 ^ ((0)))) ^ 1)); _injected_loop_counter ++)
                {
                 barrier();
                }
              }
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), bool(bvec3(_GLF_IDENTITY(false, (false) && true), false, false)))));
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec4(true, false, false, true)))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           barrier();
          }
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, ! (_GLF_IDENTITY(! ((false) || false), true && (! ((false) || false))))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       barrier();
      }
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false))))), (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))))) && true)))));
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), true && (bool(true)))))))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (true ? injectionSwitch[1] : _GLF_FUZZED(-0.1))))), vec2(mat3x2(injectionSwitch, 0.0, 0.0, 1.0, 0.0))), injectionSwitch))) + abs(vec2(0.0, 0.0)), min((_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (true ? injectionSwitch[1] : _GLF_FUZZED(-0.1))))), vec2(mat3x2(injectionSwitch, 0.0, 0.0, 1.0, 0.0))), injectionSwitch))) + abs(vec2(0.0, 0.0)), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (true ? injectionSwitch[1] : _GLF_FUZZED(-0.1))))), vec2(mat3x2(injectionSwitch, 0.0, 0.0, 1.0, 0.0))), injectionSwitch))) + abs(vec2(0.0, 0.0)), ((_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (true ? injectionSwitch[1] : _GLF_FUZZED(-0.1))))), vec2(mat3x2(injectionSwitch, 0.0, 0.0, 1.0, 0.0))), injectionSwitch))) + abs(vec2(0.0, 0.0))) - vec2(0.0, 0.0))))).x > injectionSwitch.y)), _GLF_IDENTITY(bool(bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], max(injectionSwitch[1], injectionSwitch[1])))).x > injectionSwitch.y)))), _GLF_IDENTITY(bool(bvec3(bool(bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bvec2(! (injectionSwitch.x > injectionSwitch.y), true))))))))))), false, false)), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, false)), (bool(bvec3(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, false))) && true), ! (! (_GLF_IDENTITY(bool(bvec3(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, false)), (bool(bvec3(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, false))) && true)))), true), bvec2(bvec2(bvec2(_GLF_IDENTITY(bool(bvec3(bool(bool(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y)))), false, false)), (bool(bvec3(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, false))) && true), _GLF_IDENTITY(true, ! (! (true)))))))))))))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
      {
       barrier();
      }
     else
      {
      }
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(((subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY(min(1, 1), (min(1, 1)) | (min(1, 1))))) % subgroup_size), _GLF_IDENTITY(((_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), _GLF_IDENTITY(uint(uint((subgroup_local_id + 1))), 0u ^ (uint(uint((subgroup_local_id + 1)))))) % subgroup_size, 1u * ((subgroup_local_id + 1) % subgroup_size)))), min((((subgroup_local_id + 1) % subgroup_size)), (_GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), (_GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), (((subgroup_local_id + 1) % subgroup_size)) | 0u)) - (0u & 30630u))))) | (_GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), uint(_GLF_IDENTITY(uvec2(((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (subgroup_size) >> 0u)), (0u >> _GLF_IDENTITY(uint(8u), uint(8u)))), (_GLF_IDENTITY(uvec2(((subgroup_local_id + 1) % subgroup_size), (0u >> _GLF_IDENTITY(uint(8u), uint(8u)))), _GLF_IDENTITY(uvec2(uvec2(_GLF_IDENTITY(uvec2(((subgroup_local_id + 1) % subgroup_size), (0u >> _GLF_IDENTITY(uint(8u), uint(8u)))), (false ? _GLF_FUZZED(uvec2(97177u, 50418u)) : uvec2((_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, 1u * ((subgroup_local_id + 1) % subgroup_size))) | 0u, ((_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, 1u * ((subgroup_local_id + 1) % subgroup_size))) | 0u) / 1u))), (0u >> _GLF_IDENTITY(uint(8u), uint(8u)))))))), (uvec2(uvec2(_GLF_IDENTITY(uvec2(((subgroup_local_id + 1) % subgroup_size), (0u >> _GLF_IDENTITY(uint(8u), uint(8u)))), (false ? _GLF_FUZZED(uvec2(97177u, 50418u)) : uvec2((_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, 1u * ((subgroup_local_id + 1) % subgroup_size))) | 0u, ((_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, 1u * ((subgroup_local_id + 1) % subgroup_size))) | 0u) / 1u))), (0u >> _GLF_IDENTITY(uint(8u), uint(8u))))))))) | (uvec2(uvec2(_GLF_IDENTITY(uvec2(((subgroup_local_id + 1) % subgroup_size), (_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(8u), uint(8u)), (0u >> _GLF_IDENTITY(uint(8u), uint(8u))) | (0u >> _GLF_IDENTITY(uint(8u), uint(8u)))))), (false ? _GLF_FUZZED(uvec2(97177u, 50418u)) : uvec2((_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, min(1, 1))) % subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, 1u * ((subgroup_local_id + 1) % subgroup_size))) | 0u, ((_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, 1u * ((subgroup_local_id + 1) % subgroup_size))) | 0u) / 1u))), (0u >> _GLF_IDENTITY(uint(8u), uint(8u)))))))))))) | (uvec2(((subgroup_local_id + 1) % subgroup_size), (0u >> _GLF_IDENTITY(uint(8u), uint(8u)))))))))), (workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, (0u & 51568u) ^ (subgroup_id * subgroup_size)) + ((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, 0u | (_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)))))) << 0u);
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y))))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
  barrier();
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), (_GLF_IDENTITY(bool(bvec2(false, true)), false || (bool(bvec2(false, true))))) && true))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y)))))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    barrier();
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(33176) : int(4))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         barrier();
        }
      }
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     for(int _injected_loop_counter = _GLF_IDENTITY(1, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(21478) : _GLF_IDENTITY(1, (1) * 1))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > (_GLF_IDENTITY(0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(8), (true ? _GLF_IDENTITY(int(8), ~ (_GLF_IDENTITY(~ (int(8)), max(~ (int(8)), ~ (int(8)))))) : _GLF_FUZZED(85665))), int(8)), 0 | (_GLF_IDENTITY(0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(8), (true ? _GLF_IDENTITY(int(8), ~ (_GLF_IDENTITY(~ (int(8)), max(~ (int(8)), ~ (int(8)))))) : _GLF_FUZZED(85665))), int(8)), (true ? 0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(8), (true ? _GLF_IDENTITY(int(8), ~ (_GLF_IDENTITY(~ (int(8)), max(~ (int(8)), ~ (int(8)))))) : _GLF_FUZZED(85665))), int(8)) : _GLF_FUZZED(68702)))))), false || (_injected_loop_counter > (0 >> _GLF_IDENTITY(int(8), int(8)))))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
      }
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(injectionSwitch[_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0))))], injectionSwitch[1]), (_GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[1]), min(vec2(injectionSwitch[_GLF_IDENTITY(0, 1 * (_GLF_IDENTITY(0, (1 ^ 0) * (0))))], injectionSwitch[1]), vec2(injectionSwitch[0], injectionSwitch[1])))) * vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)))).y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(false))), (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat3x4(injectionSwitch.x, 1.0, 1.0, 1.0, tan(0.0), 1.0, 1.0, _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * _GLF_IDENTITY(mat2(1.0), (mat2(1.0)) - mat2(0.0, 0.0, 0.0, 0.0))).y), 1.0, 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, float(mat3x2(_GLF_IDENTITY(0.0, 0.0 + (0.0)), 0.0, 0.0, 1.0, 1.0, 1.0))))))), 0.0)), 1.0, 0.0))), 1.0, 1.0, 1.0)), 0.0)), mix(float(_GLF_FUZZED(1.7)), float(float(mat3x4(injectionSwitch.x, 1.0, 1.0, 1.0, tan(0.0), 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))) + 0.0), determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(max(_GLF_IDENTITY(0.0, float(mat3(0.0, 0.0, _GLF_IDENTITY(cos(0.0), (false ? _GLF_FUZZED(intBitsToFloat(-77186)) : cos(0.0))), 0.0, abs(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(vec3(0.0, 0.0, 0.0)), 1.0 * (float(vec3(0.0, 0.0, 0.0)))))) / 1.0)), 0.0, 1.0, 0.0, tan(0.0)))), 0.0), min(_GLF_IDENTITY(max(_GLF_IDENTITY(0.0, float(mat3(0.0, 0.0, cos(_GLF_IDENTITY(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, _GLF_IDENTITY((0.0), (_GLF_IDENTITY((0.0), mix(float(_GLF_FUZZED(-43.54)), float((0.0)), bool(true)))) * determinant(mat3(1.0, 1.0, 1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 0.0, 1.0))) - 0.0)) + 0.0), min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0.0, (0.0) / 1.0), (_GLF_IDENTITY(0.0, (0.0) - 0.0)) + 0.0), (true ? _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (0.0) - 0.0)) + 0.0) : _GLF_FUZZED(0.0))), _GLF_IDENTITY(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (0.0) - 0.0)) + 0.0), (_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, _GLF_IDENTITY((0.0) - 0.0, clamp(_GLF_IDENTITY((0.0) - 0.0, 0.0 + ((0.0) - 0.0)), _GLF_IDENTITY((0.0) - 0.0, (true ? (0.0) - 0.0 : _GLF_FUZZED(-6.2))), (0.0) - 0.0)))) + 0.0)) - 0.0)))), 0.0, _GLF_IDENTITY(abs(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(83.93)), bool(false)))), (false ? _GLF_FUZZED(-8.2) : abs(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(83.93)), bool(false)))))), 0.0, 1.0, 0.0, tan(0.0)))), 0.0), _GLF_IDENTITY(float(vec2(max(_GLF_IDENTITY(_GLF_IDENTITY(0.0, 0.0 + (_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(550.156))))), float(mat3(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(7.1) : 0.0)), 0.0, cos(0.0), _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)))), abs(0.0), 0.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 0.0, tan(0.0)))), _GLF_IDENTITY(0.0, 1.0 * (0.0))), 1.0)), min(float(vec2(max(_GLF_IDENTITY(0.0, float(mat3(0.0, 0.0, _GLF_IDENTITY(cos(0.0), max(cos(0.0), cos(0.0))), 0.0, abs(0.0), 0.0, 1.0, 0.0, _GLF_IDENTITY(tan(0.0), _GLF_IDENTITY(clamp(tan(0.0), _GLF_IDENTITY(tan(0.0), max(tan(0.0), tan(0.0))), tan(0.0)), clamp(clamp(tan(0.0), _GLF_IDENTITY(tan(0.0), max(tan(0.0), tan(0.0))), tan(0.0)), _GLF_IDENTITY(clamp(tan(0.0), _GLF_IDENTITY(tan(0.0), max(tan(0.0), tan(0.0))), tan(0.0)), mix(float(_GLF_FUZZED(-24.67)), float(_GLF_IDENTITY(clamp(tan(0.0), _GLF_IDENTITY(tan(0.0), max(tan(0.0), tan(0.0))), tan(0.0)), max(clamp(tan(0.0), _GLF_IDENTITY(tan(0.0), max(tan(0.0), tan(0.0))), tan(0.0)), clamp(tan(0.0), _GLF_IDENTITY(tan(0.0), max(tan(0.0), tan(0.0))), tan(0.0))))), bool(true))), clamp(tan(0.0), _GLF_IDENTITY(tan(0.0), max(tan(0.0), tan(0.0))), tan(0.0)))))))), 0.0), 1.0)), float(vec2(max(_GLF_IDENTITY(0.0, float(mat3(0.0, 0.0, cos(0.0), 0.0, abs(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED((+ -1698.1383)) : 0.0))), 0.0, 1.0, 0.0, tan(0.0)))), 0.0), 1.0))))), max(_GLF_IDENTITY(0.0, float(mat3(0.0, 0.0, cos(_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, float(mat2x3(0.0, 1.0, 1.0, 0.0, 0.0, 1.0))), 0.0))), 0.0, abs(_GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, float(mat3x4(0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0)))))), float(_GLF_FUZZED(41.50)), bool(false)))), 0.0, 1.0, 0.0, tan(0.0)))), 0.0)))), _GLF_IDENTITY(dot(vec3(0.0, _GLF_IDENTITY(1.0, (1.0) + 0.0), 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(0.0, 1.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(_GLF_IDENTITY((671.456 - -93.87), max(_GLF_IDENTITY((671.456 - -93.87), mix(float(_GLF_IDENTITY((671.456 - -93.87), ((671.456 - -93.87)) * 1.0)), float(_GLF_FUZZED(float(true))), bool(false))), (671.456 - -93.87))))), float(0.0), bool(true)))), vec3(0.0, 1.0, 0.0))), 1.0, 1.0, 1.0)), 0.0))), bool(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, ! (! (true))))))))) > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4(injectionSwitch, 0.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(sqrt(0.0), 1.0)), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(sqrt(0.0), 1.0)), min(dot(vec2(0.0, 1.0), vec2(sqrt(0.0), 1.0)), dot(vec2(0.0, 1.0), vec2(sqrt(0.0), 1.0))))), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(asin(8603.4371)) : _GLF_IDENTITY(1.0, (1.0) + _GLF_ZERO(0.0, injectionSwitch.x)))), 0.0, 1.0, 0.0, cos(0.0), 1.0, 0.0, 1.0)), clamp(vec2(mat4(injectionSwitch, 0.0, 0.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(distance(vec4(6.1, -9.2, 7.1, 4.6), vec4(-6.3, -1.9, 5.9, -8.2))) : _GLF_IDENTITY(1.0, min(1.0, 1.0)))), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(sqrt(0.0), 1.0)), _GLF_IDENTITY(dot(_GLF_IDENTITY(vec2(0.0, 1.0), (true ? vec2(0.0, 1.0) : _GLF_IDENTITY(_GLF_FUZZED(vec2(68.76, 2.7)), vec2(mat2x3(_GLF_FUZZED(vec2(68.76, 2.7)), 0.0, 0.0, log(1.0), 0.0))))), vec2(sqrt(0.0), 1.0)), min(dot(vec2(0.0, 1.0), vec2(sqrt(0.0), 1.0)), dot(vec2(0.0, 1.0), vec2(sqrt(0.0), 1.0))))), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, 1.0, 0.0, 1.0, 0.0, cos(_GLF_IDENTITY(0.0, (0.0) / 1.0)), 1.0, 0.0, 1.0)), vec2(mat4(injectionSwitch, 0.0, 0.0, 1.0, _GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(sqrt(0.0), 1.0)), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(sqrt(_GLF_IDENTITY(0.0, (0.0) * 1.0)), 1.0)), min(dot(vec2(0.0, 1.0), vec2(sqrt(_GLF_IDENTITY(0.0, float(vec4(0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(5.9))), 0.0, 0.0)))), 1.0)), dot(vec2(0.0, 1.0), vec2(sqrt(0.0), 1.0))))), float(mat3x2(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(sqrt(0.0), 1.0)), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(sqrt(_GLF_IDENTITY(0.0, (0.0) * 1.0)), 1.0)), min(dot(vec2(0.0, 1.0), vec2(sqrt(_GLF_IDENTITY(0.0, float(vec4(0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(5.9))), 0.0, 0.0)))), 1.0)), dot(vec2(0.0, 1.0), vec2(sqrt(0.0), 1.0))))), 0.0, 0.0, 0.0, 1.0, 1.0))), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, 1.0, 0.0, 1.0, 0.0, cos(_GLF_IDENTITY(0.0, max(0.0, 0.0))), 1.0, 0.0, 1.0)), vec2(mat4(injectionSwitch, 0.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(_GLF_IDENTITY(sqrt(0.0), (false ? _GLF_FUZZED(32.70) : sqrt(0.0))), 1.0)), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(sqrt(0.0), 1.0)), min(dot(vec2(0.0, 1.0), vec2(sqrt(0.0), 1.0)), dot(vec2(0.0, 1.0), vec2(sqrt(0.0), 1.0))))), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0, 0.0, 1.0, 0.0, cos(0.0), 1.0, 0.0, 1.0))))).y))))
    {
     for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), ~ (~ (int(5)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       barrier();
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true))))), ! (! (! (! _GLF_IDENTITY((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true)))), bool(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true)))), ! (! ((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true))))))), true)))))))), (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4x2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), 1.0, 1.0, 0.0, tan(0.0), _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(1.7))), 1.0)), (vec2(mat4x2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), 1.0, 1.0, 0.0, tan(0.0), 1.0, 1.0))) / vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)))).y))))
      barrier();
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, int(ivec3(_injected_loop_counter, _GLF_IDENTITY(0, int(int(0))), 0))) != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         barrier();
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) && true));
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_IDENTITY(false, ! (! (false))))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(workgroup_size) : next_virtual_gid))], uint(_GLF_IDENTITY(1, _GLF_IDENTITY(0 + (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) | (1)), _GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(35561)))) + 0, 0 | (_GLF_IDENTITY((_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(35561)))) + 0, ((_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(35561)))) + 0) ^ 0)))))), 1))) | _GLF_IDENTITY(0, ~ (~ (0))))), clamp(0 + (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) | (1)), _GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(35561)))) + 0, 0 | (_GLF_IDENTITY((_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(35561)))) + 0, ((_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(35561)))) + 0) ^ 0)))))), 1))) | _GLF_IDENTITY(0, ~ (~ (0))))), 0 + (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) | (1)), _GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(35561)))) + 0, 0 | (_GLF_IDENTITY((_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(35561)))) + 0, ((_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(35561)))) + 0) ^ 0)))))), 1))) | _GLF_IDENTITY(0, ~ (~ (0))))), _GLF_IDENTITY(0 + (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) | (1)), _GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(35561)))) + 0, 0 | (_GLF_IDENTITY((_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(35561)))) + 0, ((_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(35561)))) + 0) ^ 0)))))), 1))) | _GLF_IDENTITY(0, ~ (~ (0))))), ~ (~ (0 + (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) | (1)), _GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(35561)))) + 0, 0 | (_GLF_IDENTITY((_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(35561)))) + 0, ((_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(35561)))) + 0) ^ 0)))))), 1))) | _GLF_IDENTITY(0, ~ (~ (0)))))))))))), 4, 64, 4);
         if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-8.5)), bool(false))))))))))
          barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         do
          {
           do
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                }
               barrier();
              }
            }
          }
         else
          {
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), mix(vec2(_GLF_FUZZED(-0.5), _GLF_FUZZED((_GLF_IDENTITY(737.721 + -1657.6997, min(_GLF_IDENTITY(_GLF_IDENTITY(737.721 + -1657.6997, _GLF_IDENTITY(float(_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(737.721 + -1657.6997, max(737.721 + -1657.6997, 737.721 + -1657.6997)), 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), sin(0.0), 1.0, 0.0), mat3(1.0) * (mat4x3(_GLF_IDENTITY(737.721 + -1657.6997, max(737.721 + -1657.6997, 737.721 + -1657.6997)), 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), sin(0.0), 1.0, 0.0)))), (float(_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(737.721 + -1657.6997, max(737.721 + -1657.6997, 737.721 + -1657.6997)), 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), sin(0.0), 1.0, 0.0), mat3(1.0) * (mat4x3(_GLF_IDENTITY(737.721 + -1657.6997, max(737.721 + -1657.6997, 737.721 + -1657.6997)), 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), sin(0.0), 1.0, 0.0))))) * determinant(mat2(1.0, 0.0, 0.0, 1.0)))), max(737.721 + -1657.6997, 737.721 + -1657.6997)), _GLF_IDENTITY(737.721 + -1657.6997, 1.0 * (737.721 + -1657.6997))))))), vec2((mat2(1.0) * (injectionSwitch))[0], (mat2(1.0) * (injectionSwitch))[1]), bvec2(true, true)))).x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))) : _GLF_FUZZED((vec2(-9.5, 5969.8766) * mat2(3787.1456, 0.7, 1568.7248, 5.0))))), injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_IDENTITY(1.0, min(1.0, 1.0)))))).y, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat3(injectionSwitch.x, 1.0, 1.0, length(vec3(0.0, 0.0, 0.0)), abs(0.0), sin(0.0), 1.0, 1.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-881.574)), float(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-27.12)), float(0.0), bool(true)))), bool(true)))), transpose(transpose(mat3(injectionSwitch.x, 1.0, 1.0, length(vec3(0.0, 0.0, 0.0)), abs(0.0), sin(0.0), 1.0, 1.0, 0.0)))))) > injectionSwitch.y)), bool(bool(bool(bool(_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat3(injectionSwitch.x, 1.0, 1.0, length(vec3(0.0, 0.0, 0.0)), abs(0.0), sin(0.0), 1.0, 1.0, 0.0), transpose(transpose(mat3(injectionSwitch.x, 1.0, 1.0, length(vec3(0.0, 0.0, 0.0)), abs(0.0), sin(0.0), 1.0, 1.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(7486.7850) : 0.0)))))))) > injectionSwitch.y))))))), bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), mix(vec2(_GLF_FUZZED(-0.5), _GLF_FUZZED((737.721 + -1657.6997))), vec2(_GLF_IDENTITY((mat2(1.0) * (injectionSwitch)), (false ? _GLF_FUZZED(vec2(-0.8, 5.3)) : _GLF_IDENTITY(_GLF_IDENTITY((mat2(1.0) * (injectionSwitch)), mix(vec2(_GLF_FUZZED(50.57), ((mat2(1.0) * (injectionSwitch)))[1]), vec2(((mat2(1.0) * (injectionSwitch)))[0], _GLF_FUZZED(3.4)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))), mat2(1.0) * ((mat2(1.0) * (injectionSwitch))))))[_GLF_IDENTITY(0, (0) << 0)], (mat2(1.0) * (injectionSwitch))[1]), bvec2(true, true)))).x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))).y, bool(bool(_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat3(injectionSwitch.x, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)))), 1.0, length(vec3(0.0, 0.0, 0.0)), _GLF_IDENTITY(abs(0.0), clamp(abs(0.0), abs(0.0), abs(0.0))), sin(0.0), 1.0, 1.0, 0.0), transpose(transpose(mat3(injectionSwitch.x, 1.0, 1.0, length(vec3(0.0, 0.0, 0.0)), abs(0.0), sin(0.0), _GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, 0.0)))))) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (_GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (mat2(1.0) * (injectionSwitch)) * mat2(1.0))) * mat2(1.0))).y, max(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (_GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (mat2(1.0) * (injectionSwitch)) * mat2(1.0))) * mat2(1.0))).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (_GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (mat2(1.0) * (injectionSwitch)) * mat2(1.0))) * mat2(1.0))).y, mix(float(_GLF_FUZZED(-1.5)), float(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (_GLF_IDENTITY(mat2(1.0) * (injectionSwitch), _GLF_IDENTITY((mat2(1.0) * (injectionSwitch)) * mat2(1.0), (false ? _GLF_FUZZED(unpackUnorm2x16(subgroup_size)) : (mat2(1.0) * (injectionSwitch)) * mat2(1.0))))) * mat2(1.0))).y), bool(true)))))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(bool((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), mix(vec2(_GLF_FUZZED(-0.5), _GLF_FUZZED((737.721 + -1657.6997))), vec2((mat2(1.0) * (injectionSwitch))[0], (mat2(1.0) * (injectionSwitch))[1]), bvec2(true, true)))).x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), mix(vec2(_GLF_FUZZED(float(42085u)), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))[1]), vec2((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))[0], _GLF_FUZZED(vec4(9208.7768, -16.03, -88.29, 0.5).x)), bvec2(true, false))), injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))).y, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat3(injectionSwitch.x, 1.0, 1.0, length(vec3(0.0, 0.0, 0.0)), abs(0.0), sin(0.0), 1.0, 1.0, 0.0), transpose(transpose(mat3(injectionSwitch.x, 1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), length(vec3(0.0, 0.0, 0.0)), abs(0.0), sin(0.0), 1.0, 1.0, 0.0)))))) > injectionSwitch.y), false || (bool(_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat3(injectionSwitch.x, 1.0, 1.0, length(vec3(0.0, 0.0, 0.0)), abs(0.0), sin(0.0), 1.0, 1.0, 0.0), transpose(transpose(mat3(injectionSwitch.x, 1.0, 1.0, length(vec3(0.0, 0.0, 0.0)), abs(0.0), sin(0.0), 1.0, 1.0, 0.0)))))) > injectionSwitch.y))))))), true && (bool((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), mix(vec2(_GLF_FUZZED(-0.5), _GLF_FUZZED((737.721 + -1657.6997))), vec2((mat2(1.0) * (injectionSwitch))[0], (mat2(1.0) * (injectionSwitch))[1]), bvec2(true, true)))).x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), mix(vec2(_GLF_FUZZED(float(42085u)), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))[1]), vec2((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))[0], _GLF_FUZZED(vec4(9208.7768, -16.03, -88.29, 0.5).x)), bvec2(true, false))), injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))).y, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat3(injectionSwitch.x, 1.0, 1.0, length(vec3(0.0, 0.0, 0.0)), abs(0.0), sin(0.0), 1.0, 1.0, 0.0), transpose(transpose(mat3(injectionSwitch.x, 1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), length(vec3(0.0, 0.0, 0.0)), abs(0.0), sin(0.0), 1.0, 1.0, 0.0)))))) > injectionSwitch.y), false || (bool(_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat3(injectionSwitch.x, 1.0, 1.0, length(vec3(0.0, 0.0, 0.0)), abs(0.0), sin(0.0), 1.0, 1.0, 0.0), transpose(transpose(mat3(injectionSwitch.x, 1.0, 1.0, length(vec3(0.0, 0.0, 0.0)), abs(0.0), sin(0.0), 1.0, 1.0, 0.0)))))) > injectionSwitch.y))))))))))))))));
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), false, true))))))))), (_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), false, true)))))))))) || false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
      {
      }
     else
      {
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(false || (true), bool(bvec2(false || (true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! (! (true))))))), false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-9.5)), vec2(_GLF_FUZZED(-5528.3305), (injectionSwitch)[1]), bvec2(false, true))).x > injectionSwitch.y))))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, true, true)), bool(bvec3(bool(bvec4(false, false, true, true)), false, true))))), bool(bvec2(! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, true, true)), bool(bvec3(bool(bvec4(false, false, true, true)), false, true))))), true)))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))) && true)))))) && true), (false) && true)))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec4(true, false, true, true)))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), _GLF_IDENTITY((int(7)) << 0, (_GLF_IDENTITY((int(7)) << 0, min((int(7)) << 0, (int(7)) << 0))) | ((int(7)) << 0)))) | 0))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), max(int(7), int(7))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         barrier();
        }
       else
        {
        }
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, ! (! (_GLF_IDENTITY(_injected_loop_counter > 0, (_injected_loop_counter > 0) && true))))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))) * vec2(1.0, 1.0)).x > injectionSwitch.y)))))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), ((false)) && true)))), ! (! ((! (_GLF_IDENTITY(false, false || _GLF_IDENTITY(_GLF_IDENTITY((false), ((false)) && true), false || (_GLF_IDENTITY((false), ((false)) && true))))))))))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x4(injectionSwitch, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0, 1.0, 0.0, 1.0, 1.0)), (false ? _GLF_FUZZED(vec2(89.40, -5.5)) : vec2(mat2x4(injectionSwitch, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0))))))).y)), _GLF_IDENTITY(true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0) > _GLF_IDENTITY(injectionSwitch.y, float(vec3(injectionSwitch.y, 1.0, 0.0))))))))))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec2(_GLF_WRAPPED_IF_TRUE(true), true)))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec2(_GLF_WRAPPED_IF_TRUE(true), true)))), (bool(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec2(_GLF_WRAPPED_IF_TRUE(true), true))))) && true)) || false))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           else
            {
            }
          }
        }
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), 1.0, 0.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)), 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, cos(0.0), 1.0, 0.0, 1.0), transpose(transpose(mat4(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), 1.0, 0.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)), 0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0, 1.0, 1.0, cos(0.0), 1.0, 0.0, 1.0)))))).y), bool(_GLF_IDENTITY(bvec3((injectionSwitch.x > injectionSwitch.y), true, false), bvec3(bvec4(bvec3((injectionSwitch.x > injectionSwitch.y), true, false), true))))))))
    barrier();
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, (_injected_loop_counter != 0) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))); _injected_loop_counter --)
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) | (0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       barrier();
      }
     for(int _injected_loop_counter = (_GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (false ? _GLF_FUZZED((_injected_loop_counter)) : _GLF_IDENTITY(0, max(0, 0))))) | (_GLF_IDENTITY(0, (0) ^ 0))), max(0, 0)) ^ 0); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> 0) != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
          {
           barrier();
          }
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
         barrier();
        }
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
  {
   if(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, max(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) >> 0u), subgroup_local_id + 1)) < subgroup_size, true && (_GLF_IDENTITY(subgroup_local_id + 1, max(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) >> 0u), subgroup_local_id + 1)) < subgroup_size)))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat3x4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(smoothstep(792.626, -7351.0063, injectionSwitch)) : injectionSwitch)), (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(smoothstep(792.626, -7351.0063, injectionSwitch)) : injectionSwitch))) / sqrt(vec2(1.0, 1.0))), _GLF_IDENTITY(vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(smoothstep(792.626, -7351.0063, injectionSwitch)) : injectionSwitch))), min(vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(smoothstep(792.626, -7351.0063, injectionSwitch)) : injectionSwitch))), vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(smoothstep(792.626, -7351.0063, injectionSwitch)) : injectionSwitch)))))), abs(1.0), 0.0, 0.0, 1.0, 0.0, abs(0.0), _GLF_ZERO(0.0, injectionSwitch.x), 1.0, determinant(mat2(_GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 1.0)), 0.0))).y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     atomicStore(checker[virtual_gid], read, _GLF_IDENTITY(_GLF_IDENTITY(4, _GLF_IDENTITY(0 | (4), (0 & -82866) ^ (0 | (4)))), ~ (~ (4))), 64, 4);
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        barrier();
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || _GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false))))))), bool(bvec2((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false))))))), _GLF_TRUE(_GLF_IDENTITY(true, (true) && true), (injectionSwitch.x < injectionSwitch.y))))), bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || _GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false))))))), bool(bvec2((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false))))))), _GLF_TRUE(_GLF_IDENTITY(true, (true) && true), (injectionSwitch.x < injectionSwitch.y))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || _GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false))))))), bool(bvec2((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false))))))), _GLF_TRUE(_GLF_IDENTITY(true, (true) && true), (injectionSwitch.x < injectionSwitch.y)))))) && true), false)))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       else
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2x4(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-5254.0768)), float(1.0), bool(true))), determinant(mat2(0.0, 0.0, 0.0, 0.0)), 1.0, sqrt(0.0), 0.0), (false ? _GLF_FUZZED(mat2x4(-74.40, 4.8, -776.350, -331.823, -701.377, -8.0, -989.056, 8882.7192)) : mat2x4(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 1.0, 1.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), 1.0, sqrt(0.0), 0.0))))).y))))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           barrier();
          }
         for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(1), int(1))), (_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(1), int(1))), 0 ^ ((0 >> _GLF_IDENTITY(int(1), int(1)))))) / int(_GLF_ONE(1.0, injectionSwitch.y))), 0 ^ (_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(1), int(1))), _GLF_IDENTITY((_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(1), int(1))), 0 ^ ((0 >> _GLF_IDENTITY(int(1), int(1)))))), ((_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(1), int(1))), 0 ^ ((0 >> _GLF_IDENTITY(int(1), int(1))))))) | 0) / int(_GLF_ONE(1.0, injectionSwitch.y))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           barrier();
          }
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec3(bvec3(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)), _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, false, true))), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), true, false, true))))))) || _GLF_IDENTITY(false, (false) || false))), false)))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
         barrier();
         do
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       barrier();
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false))))) && _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(! (true), ! (! (! (true)))), true), bvec2(bvec2(bvec2(_GLF_IDENTITY(! (true), ! (! (! (true)))), true))))))))))
      barrier();
     subgroupAll(false);
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   else
    {
     do
      {
       for(int _injected_loop_counter = _GLF_IDENTITY(0, min(0, 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY(int(ivec3(1, (1 ^ 0), 1)), int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(int(ivec3(1, (1 ^ _GLF_IDENTITY(0, 0 | (0))), 1)), 0 + (int(ivec3(1, (1 ^ 0), 1)))), 0, 1), ~ (~ (_GLF_IDENTITY(ivec3(_GLF_IDENTITY(int(ivec3(1, (1 ^ 0), 1)), 0 + (int(ivec3(1, (1 ^ 0), 1)))), 0, 1), (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, true), bvec2(_GLF_IDENTITY(bvec2(bvec2(true, true)), bvec2(bvec2(bvec2(bvec2(true, true))))))))) ? ivec3(_GLF_IDENTITY(int(ivec3(1, (_GLF_IDENTITY(1 ^ 0, 0 ^ (1 ^ 0))), 1)), 0 + (int(ivec3(1, (1 ^ 0), 1)))), 0, 1) : _GLF_FUZZED(ivec3(89236, -19055, 74049))))))))), 1 * (int(ivec3(1, (_GLF_IDENTITY(1 ^ 0, (1 ^ 0) / (1 | 0))), 1))))), (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY(int(ivec3(1, (1 ^ 0), 1)), int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(int(ivec3(1, (1 ^ 0), 1)), _GLF_IDENTITY(0, (0) >> 0) + (int(ivec3(1, (_GLF_IDENTITY(_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) / 1), 1)), int(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) / 1), 1)), (_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) / 1), 1))) | (_GLF_IDENTITY(_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) / 1), 1)), int(ivec4(_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) / 1), 1)), 0, 0, 1))))), 0))) ^ 0), 1)))), 0, 1), ~ (~ (_GLF_IDENTITY(ivec3(_GLF_IDENTITY(int(ivec3(1, (1 ^ 0), 1)), 0 + (int(ivec3(1, (1 ^ 0), 1)))), 0, 1), (true ? ivec3(_GLF_IDENTITY(int(ivec3(1, (1 ^ 0), 1)), 0 + (int(ivec3(1, (1 ^ _GLF_IDENTITY(0, (0) | (0))), 1)))), 0, 1) : _GLF_FUZZED(ivec3(89236, -19055, 74049))))))))), 1 * (int(ivec3(1, (1 ^ 0), 1))))), (_GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(ivec3(1, (1 ^ 0), 1)), (_GLF_IDENTITY(int(ivec3(1, (1 ^ 0), 1)), min(int(_GLF_IDENTITY(ivec3(1, (1 ^ 0), 1), ivec3(ivec3(ivec3(1, (1 ^ 0), 1))))), _GLF_IDENTITY(int(ivec3(1, (1 ^ 0), 1)), min(int(ivec3(1, (1 ^ 0), 1)), int(ivec3(1, (1 ^ 0), 1))))))) | (int(ivec3(1, (1 ^ 0), 1)))), int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(int(ivec3(1, (1 ^ 0), 1)), 0 + (int(ivec3(1, (1 ^ 0), 1)))), 0, 1), ~ (~ (_GLF_IDENTITY(ivec3(_GLF_IDENTITY(int(ivec3(1, (1 ^ 0), 1)), 0 + (int(ivec3(1, (_GLF_IDENTITY(1 ^ 0, ~ (~ (1 ^ 0)))), 1)))), 0, 1), (_GLF_IDENTITY(true ? ivec3(_GLF_IDENTITY(int(ivec3(1, (1 ^ 0), 1)), 0 + (int(ivec3(_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, 1)), clamp(_GLF_IDENTITY(int(ivec2(1, 1)), clamp(int(ivec2(1, 1)), int(ivec2(1, 1)), int(ivec2(1, 1)))), int(ivec2(1, 1)), int(ivec2(1, 1))))), _GLF_IDENTITY((1 ^ 0), _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((1 ^ 0), ~ (~ (_GLF_IDENTITY((1 ^ 0), 1 * ((1 ^ 0))))))), (~ (_GLF_IDENTITY((1 ^ 0), ~ (~ (_GLF_IDENTITY((1 ^ 0), 1 * ((1 ^ 0)))))))) + 0)), 0 | (~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((1 ^ 0), ~ (~ (_GLF_IDENTITY((1 ^ 0), 1 * ((1 ^ 0))))))), (~ (_GLF_IDENTITY((1 ^ 0), ~ (~ (_GLF_IDENTITY((1 ^ 0), 1 * ((1 ^ 0)))))))) + 0))))), 1)))), 0, 1) : _GLF_FUZZED(ivec3(89236, -19055, 74049)), clamp(true ? ivec3(_GLF_IDENTITY(int(ivec3(1, (1 ^ 0), 1)), 0 + (int(ivec3(_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, 1)), clamp(_GLF_IDENTITY(int(ivec2(1, 1)), clamp(int(ivec2(1, 1)), int(ivec2(1, 1)), int(ivec2(1, 1)))), int(ivec2(1, 1)), int(ivec2(1, 1))))), _GLF_IDENTITY((1 ^ 0), _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((1 ^ 0), ~ (~ (_GLF_IDENTITY((1 ^ 0), 1 * ((1 ^ 0))))))), (~ (_GLF_IDENTITY((1 ^ 0), ~ (~ (_GLF_IDENTITY((1 ^ 0), 1 * ((1 ^ 0)))))))) + 0)), 0 | (~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((1 ^ 0), ~ (~ (_GLF_IDENTITY((1 ^ 0), 1 * ((1 ^ 0))))))), (~ (_GLF_IDENTITY((1 ^ 0), ~ (~ (_GLF_IDENTITY((1 ^ 0), 1 * ((1 ^ 0)))))))) + 0))))), 1)))), 0, 1) : _GLF_FUZZED(ivec3(89236, -19055, 74049)), true ? ivec3(_GLF_IDENTITY(int(ivec3(1, (1 ^ 0), 1)), 0 + (int(ivec3(_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, 1)), clamp(_GLF_IDENTITY(int(ivec2(1, 1)), clamp(int(ivec2(1, 1)), int(ivec2(1, 1)), int(ivec2(1, 1)))), int(ivec2(1, 1)), int(ivec2(1, 1))))), _GLF_IDENTITY((1 ^ 0), _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((1 ^ 0), ~ (~ (_GLF_IDENTITY((1 ^ 0), 1 * ((1 ^ 0))))))), (~ (_GLF_IDENTITY((1 ^ 0), ~ (~ (_GLF_IDENTITY((1 ^ 0), 1 * ((1 ^ 0)))))))) + 0)), 0 | (~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((1 ^ 0), ~ (~ (_GLF_IDENTITY((1 ^ 0), 1 * ((1 ^ 0))))))), (~ (_GLF_IDENTITY((1 ^ 0), ~ (~ (_GLF_IDENTITY((1 ^ 0), 1 * ((1 ^ 0)))))))) + 0))))), 1)))), 0, 1) : _GLF_FUZZED(ivec3(89236, -19055, 74049)), _GLF_IDENTITY(true ? ivec3(_GLF_IDENTITY(int(ivec3(1, (1 ^ 0), 1)), 0 + (int(ivec3(_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, 1)), clamp(_GLF_IDENTITY(int(ivec2(1, 1)), clamp(int(ivec2(1, 1)), int(ivec2(1, 1)), int(ivec2(1, 1)))), int(ivec2(1, 1)), int(ivec2(1, 1))))), _GLF_IDENTITY((1 ^ 0), _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((1 ^ 0), ~ (~ (_GLF_IDENTITY((1 ^ 0), 1 * ((1 ^ 0))))))), (~ (_GLF_IDENTITY((1 ^ 0), ~ (~ (_GLF_IDENTITY((1 ^ 0), 1 * ((1 ^ 0)))))))) + 0)), 0 | (~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((1 ^ 0), ~ (~ (_GLF_IDENTITY((1 ^ 0), 1 * ((1 ^ 0))))))), (~ (_GLF_IDENTITY((1 ^ 0), ~ (~ (_GLF_IDENTITY((1 ^ 0), 1 * ((1 ^ 0)))))))) + 0))))), 1)))), 0, 1) : _GLF_FUZZED(ivec3(89236, -19055, 74049)), (_GLF_IDENTITY(true ? ivec3(_GLF_IDENTITY(int(ivec3(1, (1 ^ 0), 1)), 0 + (int(ivec3(_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, 1)), clamp(_GLF_IDENTITY(int(ivec2(1, 1)), clamp(int(ivec2(1, 1)), int(ivec2(1, 1)), int(ivec2(1, 1)))), int(ivec2(1, 1)), int(ivec2(1, 1))))), _GLF_IDENTITY((1 ^ 0), _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((1 ^ 0), ~ (~ (_GLF_IDENTITY((1 ^ 0), 1 * ((1 ^ 0))))))), (~ (_GLF_IDENTITY((1 ^ 0), ~ (~ (_GLF_IDENTITY((1 ^ 0), 1 * ((1 ^ 0)))))))) + 0)), 0 | (~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((1 ^ 0), ~ (~ (_GLF_IDENTITY((1 ^ 0), 1 * ((1 ^ 0))))))), (~ (_GLF_IDENTITY((1 ^ 0), ~ (~ (_GLF_IDENTITY((1 ^ 0), 1 * ((1 ^ 0)))))))) + 0))))), 1)))), 0, 1) : _GLF_FUZZED(ivec3(89236, -19055, 74049)), (true ? ivec3(_GLF_IDENTITY(int(ivec3(1, (1 ^ 0), 1)), 0 + (int(ivec3(_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, 1)), clamp(_GLF_IDENTITY(int(ivec2(1, 1)), clamp(int(ivec2(1, 1)), int(ivec2(1, 1)), int(ivec2(1, 1)))), int(ivec2(1, 1)), int(ivec2(1, 1))))), _GLF_IDENTITY((1 ^ 0), _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((1 ^ 0), ~ (~ (_GLF_IDENTITY((1 ^ 0), 1 * ((1 ^ 0))))))), (~ (_GLF_IDENTITY((1 ^ 0), ~ (~ (_GLF_IDENTITY((1 ^ 0), 1 * ((1 ^ 0)))))))) + 0)), 0 | (~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((1 ^ 0), ~ (~ (_GLF_IDENTITY((1 ^ 0), 1 * ((1 ^ 0))))))), (~ (_GLF_IDENTITY((1 ^ 0), ~ (~ (_GLF_IDENTITY((1 ^ 0), 1 * ((1 ^ 0)))))))) + 0))))), 1)))), 0, 1) : _GLF_FUZZED(ivec3(89236, -19055, 74049))) >> ivec3(0, 0, 0))) / ivec3(1, 1, 1))))))))))), 1 * (int(ivec3(1, (1 ^ 0), 1)))))) >> 0)) << 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, false)), (bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, false))) && true))), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               do
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), false, false)))))))
                        barrier();
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                          }
                         else
                          {
                          }
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                           barrier();
                          }
                         barrier();
                        }
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       barrier();
                      }
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   else
                    {
                    }
                   barrier();
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             else
              {
              }
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)))))))
                barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
                {
                 barrier();
                }
               else
                {
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
              }
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           atomicStore(buf[virtual_gid], read, 4, _GLF_IDENTITY(64, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((64), ((64)) | 0) ^ 0, ((64) ^ 0) / ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(7), int(7)), 0 + (1 << _GLF_IDENTITY(int(7), int(7))))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), ~ (~ _GLF_IDENTITY((int(7)), ((int(7))) - _GLF_IDENTITY((0 | 0), ~ (~ ((0 | 0)))))))))), ((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(_GLF_IDENTITY(int(7), 0 ^ (int(7))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(int(7), 0 ^ (int(7))), min(_GLF_IDENTITY(int(7), 0 ^ (int(7))), _GLF_IDENTITY(int(7), 0 ^ (int(7))))), _GLF_IDENTITY(_GLF_IDENTITY(int(7), 0 ^ (int(7))), (_GLF_IDENTITY(int(7), 0 ^ (int(7)))) - 0), _GLF_IDENTITY(int(7), 0 ^ (int(7))))))) >> _GLF_IDENTITY(int(7), int(7))) * (_GLF_IDENTITY(_GLF_IDENTITY((64), ((64)) | 0) ^ 0, ((64) ^ 0) / ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(int(7), (int(7)) - (0 ^ 0))), _GLF_IDENTITY(((int(7))), int(ivec2(((int(7))), _GLF_IDENTITY(0, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(0, 1), (true ? ivec2(0, 1) : _GLF_FUZZED(ivec2(-38839, 17441))))), (_GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(0, 1), (true ? ivec2(0, 1) : _GLF_FUZZED(ivec2(-38839, 17441))))), 0 ^ (int(_GLF_IDENTITY(ivec2(0, 1), (true ? ivec2(0, 1) : _GLF_FUZZED(ivec2(-38839, 17441)))))))) | (int(_GLF_IDENTITY(ivec2(0, 1), (true ? ivec2(0, 1) : _GLF_FUZZED(ivec2(-38839, 17441))))))))))) - _GLF_IDENTITY((0 | 0), ~ (~ ((0 | 0))))))))))))), 4);
           do
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
              barrier();
             do
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false)))
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    {
                     do
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
                     barrier();
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), true, false, false)))))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
     subgroupAll(true);
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
  }
}
