#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
uint subgroup_size = 16;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size);
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 0);
 atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
 if(subgroup_local_id + 1 < subgroup_size)
  {
   atomicStore(checker[virtual_gid], read, 4, 64, 4);
   subgroupAll(false);
  }
 else
  {
   switch(_GLF_SWITCH((0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), max(int(4), _GLF_IDENTITY(int(4), (int(4)) ^ 0)))))))
    {
     case 26:
     while(true)
      {
       mat2(-52.27, 8.1, -813.307, 77.42);
       vec3(-46.60, 26.08, 8108.3248);
       uint _GLF_SWITCH_0_0v[47], _GLF_SWITCH_0_1v;
       ivec4(-79476, -87290, 78896, -75404);
       ivec4(-39873, 35480, -19247, 76772);
       for(       mat3x4(-0.9, -253.298, -712.789, 848.655, -998.741, 5.3, -5.4, 87.69, 4.5, 7.6, 8227.1227, 7866.8094);
 true; subgroup_size)
        {
         while((mat2(8558.4421, 1800.5297, -8.7, 30.29) == mat2(2099.9348, -69.79, 4732.9761, 35.58)))
          {
           (reflect(vec2(18.80, -1.7), vec2(-2.7, -224.587)) / -5.2);
           uint _GLF_SWITCH_0_2v;
           mat3(6.5, 0.3, -400.746, -9409.0551, -3.6, 9678.1270, -1.4, 2430.1899, -19.92);
           true;
           (next_virtual_gid & uvec3(87875u, 93805u, 73530u));
           uvec4 _GLF_SWITCH_0_3v, _GLF_SWITCH_0_4v, _GLF_SWITCH_0_5v;
          }
         (mat4x2(-6963.4479, 8.7, 4.1, 2.6, -816.205, -940.598, -8.4, -7.1) , reflect(vec3(-6.1, -88.02, 3889.4262), vec3(-8.8, -96.83, -588.619)));
         mat4x2((mat3x2(8.8, 6.3, -82.34, 1.8, -1.6, -1.7) * vec3(-467.495, -65.18, -327.889)), vec2(7344.6709, 961.210), injectionSwitch, mix(vec2(376.424, -6280.0495), vec2(307.827, 4.1), vec2(8.7, 9.9)));
         bvec2(true, false);
         outerProduct(vec4(169.289, -2413.9293, 5.2, 8.5), vec3(-9745.0511, -55.51, 0.2));
         uvec3 _GLF_SWITCH_0_6v[90];
         mat3(442.685, -3.7, 6.8, -8.2, 4018.5071, 11.46, 2.3, -411.798, 5230.1338);
        }
       for(mat4x3 _GLF_SWITCH_0_7v[76], _GLF_SWITCH_0_8v, _GLF_SWITCH_0_9v; ((ivec2(50592, 50072) - 8047) != ivec2(10266, 33664)); mat4x2(-4.6, -101.474, 4075.5493, 90.27, -8.8, 70.73, 3635.1948, -68.44))
        {
         for(         (mat3x2(-8.0, -35.23, 463.533, 9821.1232, 821.470, 917.669));
 true; (transpose(_GLF_SWITCH_0_8v) * matrixCompMult(mat2x3(-52.71, 83.22, -9.7, -6.9, 3014.3647, 71.09), mat2x3(-9.1, 216.872, 7564.9468, 22.11, -864.513, 8.5))))
          {
           vec3(-1.0, 89.64, -243.075);
           mat4x3(mat3x2(5.9, -7289.8765, 6.2, 3635.2420, -7.5, 649.141));
           vec4 _GLF_SWITCH_0_10v;
           (mat3x4(-7.4, 9555.7399, 147.224, -8.4, -972.773, 563.098, -163.907, 4.5, -12.95, 9.4, 6.2, 42.70) == mat3x4(-3.4, -175.384, 8244.7977, -74.67, 2767.4946, 8.6, 7146.3605, -275.274, -2746.9511, -55.07, 9074.8096, -0.4));
           ;
           atanh(-115.679);
          }
         mat3x2(-2.9, 9.4, -5.7, -611.978, 0.2, 86.71);
        }
       vec3(-9.8, -0.0, 80.13);
       bool _GLF_SWITCH_0_11v;
      }
     case 46:
     mat3x2 _GLF_SWITCH_0_12v[53];
     case 0:
     case 84:
     case 33:
     case 97:
     atomicStore(buf[virtual_gid], read, 4, 64, 4);
     case 82:
     case 68:
     case 44:
     subgroupAll(true);
     break;
     default:
     1;
    }
  }
}
