#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 do
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))));
     barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(_GLF_IDENTITY(mat2(injectionSwitch.x, 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0))))), (mat2(injectionSwitch.x, 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))))) / mat2(1.0, 1.0, 1.0, 1.0)), transpose(transpose(_GLF_IDENTITY(mat2(injectionSwitch.x, 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0))))), (mat2(injectionSwitch.x, 0.0, 1.0, round(_GLF_IDENTITY(length(normalize(vec3(1.0, 1.0, 1.0))), max(length(normalize(vec3(1.0, 1.0, 1.0))), length(normalize(vec3(1.0, 1.0, 1.0)))))))) / mat2(1.0, 1.0, 1.0, 1.0))))))) > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), (true ? _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0) : _GLF_FUZZED(2.3))), _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))) + 0.0))), bool(bvec4(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat2(injectionSwitch.x, 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0))))), (mat2(injectionSwitch.x, 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))))) / mat2(1.0, 1.0, 1.0, 1.0)))) > injectionSwitch.y)), false, false, true)))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), false || (bool(bvec2(false, true)))))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bvec2(! (injectionSwitch.x > injectionSwitch.y), true)))))))));
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   else
    {
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec2(! (false), true))))), false)), ! (! (bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec2(! (false), true))))), false))))), (_GLF_IDENTITY(bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false)), bool(_GLF_IDENTITY(bvec3(bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false)), false, true), bvec3(bvec4(bvec3(bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false)), false, true), true)))))) || false)))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x < injectionSwitch.y), true && (_GLF_IDENTITY(! (injectionSwitch.x < injectionSwitch.y), true && (! (injectionSwitch.x < injectionSwitch.y)))))))), bool(bvec2((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x < injectionSwitch.y), true && (_GLF_IDENTITY(! (injectionSwitch.x < injectionSwitch.y), true && (! (injectionSwitch.x < injectionSwitch.y)))))))), false))))))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, bool(bool(false))), false, true), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, bool(bool(false))), false, true), false)))))));
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       barrier();
      }
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             barrier();
            }
          }
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 uint subgroup_id = gl_SubgroupID;
uint subgroup_size = 16;
 for(int _injected_loop_counter = _GLF_IDENTITY((((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (true ? _GLF_IDENTITY(int(4), (true ? int(4) : _GLF_FUZZED(-52775))) : _GLF_FUZZED(-89834))))) & 1), ((((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))) & 1)) ^ 0); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, bool(bvec4(_injected_loop_counter > 0, true, true, false)))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 1)); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         do
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))
    {
     barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   do
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           do
            {
             for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-5.9) : injectionSwitch.y))))))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (_GLF_IDENTITY(! (bool(bvec4(_GLF_DEAD(false), true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! (! (! (bool(bvec4(_GLF_DEAD(false), true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))
  barrier();
 do
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(_injected_loop_counter) : _injected_loop_counter)) != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
        }
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           else
            {
            }
          }
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / 1) != (1 & 1)); _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY(int(ivec4(_injected_loop_counter, 0, 1, 0)), max(int(ivec4(_injected_loop_counter, 0, 1, 0)), int(ivec4(_injected_loop_counter, 0, 1, 0))))) < (1 & 1), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY(int(ivec4(_injected_loop_counter, 0, 1, 0)), max(int(ivec4(_injected_loop_counter, 0, 1, 0)), int(ivec4(_injected_loop_counter, 0, 1, 0))))) < (1 & 1), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (1 ^ 1)), _GLF_IDENTITY(int(ivec4(_injected_loop_counter, 0, 1, 0)), max(int(ivec4(_injected_loop_counter, 0, 1, 0)), int(ivec4(_injected_loop_counter, 0, 1, 0))))) < (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, max(1, 1))) >> 0) & 1), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), false)))))); _injected_loop_counter ++)
        {
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
    {
    }
   else
    {
     barrier();
    }
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
    {
     barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))
  barrier();
 uint next_virtual_gid = workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, uint(uvec4(subgroup_size, 0u, 1u, 1u))) + _GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) / 1u)) % _GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY((subgroup_size) | (subgroup_size), (_GLF_IDENTITY((subgroup_size) | (subgroup_size), min((subgroup_size) | (subgroup_size), (subgroup_size) | _GLF_IDENTITY((subgroup_size), ((subgroup_size)) | (_GLF_IDENTITY((subgroup_size), ~ (~ ((subgroup_size))))))))) >> 0u), (_GLF_IDENTITY((subgroup_size) | (subgroup_size), (_GLF_IDENTITY((subgroup_size) | (subgroup_size), min((subgroup_size) | (subgroup_size), (subgroup_size) | _GLF_IDENTITY((subgroup_size), ((subgroup_size)) | (_GLF_IDENTITY((subgroup_size), ~ (~ ((subgroup_size))))))))) >> 0u)) << (0u ^ 0u))), subgroup_size, subgroup_size))), 1u * (_GLF_IDENTITY(((subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(-21926)))) | (1))) % subgroup_size), (_GLF_IDENTITY(_GLF_IDENTITY(false ? _GLF_IDENTITY(_GLF_FUZZED(subgroup_size), (_GLF_FUZZED(subgroup_size)) | _GLF_IDENTITY((_GLF_FUZZED(subgroup_size)), ((_GLF_FUZZED(subgroup_size))) | 0u)) : (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), max((subgroup_local_id + 1), (subgroup_local_id + 1))) % subgroup_size, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(workgroup_base) : (subgroup_local_id + 1) % subgroup_size)), (false ? _GLF_FUZZED(bitfieldReverse(packUnorm4x8(vec4(989.783, 96.66, 366.339, -18.13)))) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), max((subgroup_local_id + 1), (subgroup_local_id + 1))) % subgroup_size, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(workgroup_base) : (subgroup_local_id + 1) % subgroup_size)), (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), max((subgroup_local_id + 1), (subgroup_local_id + 1))) % subgroup_size, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(workgroup_base) : (subgroup_local_id + 1) % subgroup_size))) / 1u)))), (_GLF_IDENTITY(false ? _GLF_IDENTITY(_GLF_FUZZED(subgroup_size), (_GLF_FUZZED(subgroup_size)) | _GLF_IDENTITY((_GLF_FUZZED(subgroup_size)), ((_GLF_FUZZED(subgroup_size))) | 0u)) : (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(workgroup_base) : (subgroup_local_id + 1) % subgroup_size))), 0u | (false ? _GLF_IDENTITY(_GLF_FUZZED(subgroup_size), (_GLF_FUZZED(subgroup_size)) | _GLF_IDENTITY((_GLF_FUZZED(subgroup_size)), ((_GLF_FUZZED(subgroup_size))) | 0u)) : (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(workgroup_base) : (subgroup_local_id + 1) % subgroup_size)))))) | (false ? _GLF_IDENTITY(_GLF_FUZZED(subgroup_size), (_GLF_FUZZED(subgroup_size)) | _GLF_IDENTITY((_GLF_FUZZED(subgroup_size)), ((_GLF_FUZZED(subgroup_size))) | 0u)) : (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(workgroup_base) : (subgroup_local_id + 1) % subgroup_size))))), _GLF_IDENTITY((_GLF_IDENTITY(false ? _GLF_IDENTITY(_GLF_FUZZED(subgroup_size), (_GLF_FUZZED(subgroup_size)) | _GLF_IDENTITY((_GLF_FUZZED(subgroup_size)), ((_GLF_FUZZED(subgroup_size))) | 0u)) : (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_GLF_IDENTITY(workgroup_base, min(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)), _GLF_IDENTITY(workgroup_base, (workgroup_base) ^ 0u)))) : (subgroup_local_id + 1) % subgroup_size))), (false ? _GLF_IDENTITY(_GLF_FUZZED(subgroup_size), (_GLF_FUZZED(subgroup_size)) | _GLF_IDENTITY(_GLF_IDENTITY((_GLF_FUZZED(subgroup_size)), (false ? _GLF_FUZZED((workgroup_id - virtual_gid)) : _GLF_IDENTITY((_GLF_FUZZED(subgroup_size)), max((_GLF_FUZZED(subgroup_size)), (_GLF_FUZZED(subgroup_size)))))), ((_GLF_FUZZED(subgroup_size))) | 0u)) : (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(workgroup_base) : (subgroup_local_id + 1) % subgroup_size)))) | (false ? _GLF_IDENTITY(_GLF_FUZZED(subgroup_size), (_GLF_FUZZED(subgroup_size)) | _GLF_IDENTITY((_GLF_FUZZED(subgroup_size)), ((_GLF_FUZZED(subgroup_size))) | 0u)) : (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(workgroup_base) : (subgroup_local_id + 1) % subgroup_size)))))) >> (0u | 0u), max((_GLF_IDENTITY(false ? _GLF_IDENTITY(_GLF_FUZZED(subgroup_size), (_GLF_FUZZED(subgroup_size)) | _GLF_IDENTITY((_GLF_FUZZED(subgroup_size)), ((_GLF_FUZZED(subgroup_size))) | 0u)) : (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_GLF_IDENTITY(workgroup_base, min(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)), _GLF_IDENTITY(workgroup_base, (workgroup_base) ^ 0u)))) : (subgroup_local_id + 1) % subgroup_size))), (false ? _GLF_IDENTITY(_GLF_FUZZED(subgroup_size), (_GLF_FUZZED(subgroup_size)) | _GLF_IDENTITY(_GLF_IDENTITY((_GLF_FUZZED(subgroup_size)), (false ? _GLF_FUZZED((workgroup_id - virtual_gid)) : _GLF_IDENTITY((_GLF_FUZZED(subgroup_size)), max((_GLF_FUZZED(subgroup_size)), (_GLF_FUZZED(subgroup_size)))))), ((_GLF_FUZZED(subgroup_size))) | 0u)) : (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(workgroup_base) : (subgroup_local_id + 1) % subgroup_size)))) | (false ? _GLF_IDENTITY(_GLF_FUZZED(subgroup_size), (_GLF_FUZZED(subgroup_size)) | _GLF_IDENTITY((_GLF_FUZZED(subgroup_size)), ((_GLF_FUZZED(subgroup_size))) | 0u)) : (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(workgroup_base) : (subgroup_local_id + 1) % subgroup_size)))))) >> (0u | 0u), (_GLF_IDENTITY(false ? _GLF_IDENTITY(_GLF_FUZZED(subgroup_size), (_GLF_FUZZED(subgroup_size)) | _GLF_IDENTITY((_GLF_FUZZED(subgroup_size)), ((_GLF_FUZZED(subgroup_size))) | 0u)) : (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_GLF_IDENTITY(workgroup_base, min(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)), _GLF_IDENTITY(workgroup_base, (workgroup_base) ^ 0u)))) : (subgroup_local_id + 1) % subgroup_size))), (false ? _GLF_IDENTITY(_GLF_FUZZED(subgroup_size), (_GLF_FUZZED(subgroup_size)) | _GLF_IDENTITY(_GLF_IDENTITY((_GLF_FUZZED(subgroup_size)), (false ? _GLF_FUZZED((workgroup_id - virtual_gid)) : _GLF_IDENTITY((_GLF_FUZZED(subgroup_size)), max((_GLF_FUZZED(subgroup_size)), (_GLF_FUZZED(subgroup_size)))))), ((_GLF_FUZZED(subgroup_size))) | 0u)) : (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(workgroup_base) : (subgroup_local_id + 1) % subgroup_size)))) | (false ? _GLF_IDENTITY(_GLF_FUZZED(subgroup_size), (_GLF_FUZZED(subgroup_size)) | _GLF_IDENTITY((_GLF_FUZZED(subgroup_size)), ((_GLF_FUZZED(subgroup_size))) | 0u)) : (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(workgroup_base) : (subgroup_local_id + 1) % subgroup_size)))))) >> (0u | 0u))))))));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     do
      {
       for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), false, false, true)))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y))));
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))));
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mix(vec2(_GLF_FUZZED(-4719.7239), _GLF_IDENTITY((injectionSwitch), clamp((injectionSwitch), _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) / vec2(1.0, 1.0)), vec2(mat2((injectionSwitch), 0.0, 1.0))), (injectionSwitch)))[1]), vec2(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch)[0], _GLF_IDENTITY(float(_GLF_IDENTITY(vec3((injectionSwitch)[0], 1.0, 0.0), min(_GLF_IDENTITY(vec3((injectionSwitch)[0], 1.0, 0.0), (vec3((injectionSwitch)[0], 1.0, 0.0)) - vec3(0.0, 0.0, 0.0)), _GLF_IDENTITY(vec3((injectionSwitch)[0], 1.0, 0.0), _GLF_IDENTITY(mat3(1.0) * (vec3((injectionSwitch)[0], 1.0, 0.0)), min(mat3(1.0) * (vec3((injectionSwitch)[0], 1.0, 0.0)), mat3(1.0) * (vec3((injectionSwitch)[0], 1.0, 0.0)))))))), min(float(_GLF_IDENTITY(vec3((injectionSwitch)[0], 1.0, 0.0), min(_GLF_IDENTITY(vec3(_GLF_IDENTITY((injectionSwitch)[0], clamp((injectionSwitch)[0], (injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[0], mix(float(_GLF_IDENTITY(_GLF_FUZZED(-6.4), (_GLF_FUZZED(-6.4)) / _GLF_IDENTITY(dot(vec4(0.0, 0.0, abs(1.0), 0.0), vec4(length(vec4(0.0, 0.0, 0.0, 0.0)), determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0)), 1.0, 0.0)), dot(vec4(0.0, 0.0, abs(1.0), 0.0), vec4(length(vec4(0.0, 0.0, 0.0, 0.0)), determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0)), 1.0, 0.0))))), float((injectionSwitch)[0]), bool(true))))), 1.0, 0.0), (vec3((injectionSwitch)[0], 1.0, 0.0)) - vec3(0.0, 0.0, 0.0)), vec3((injectionSwitch)[0], 1.0, 0.0)))), float(_GLF_IDENTITY(vec3((injectionSwitch)[0], 1.0, 0.0), min(_GLF_IDENTITY(vec3((injectionSwitch)[0], 1.0, 0.0), _GLF_IDENTITY((vec3((injectionSwitch)[0], 1.0, 0.0)), min((vec3((injectionSwitch)[0], 1.0, 0.0)), (vec3((injectionSwitch)[0], 1.0, 0.0)))) - vec3(0.0, 0.0, 0.0)), vec3((injectionSwitch)[0], 1.0, 0.0))))))), (true ? _GLF_IDENTITY((injectionSwitch)[0], _GLF_IDENTITY(float(_GLF_IDENTITY(vec3((injectionSwitch)[0], 1.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-8629.4579) : 0.0)), 0.0))), min(_GLF_IDENTITY(vec3((injectionSwitch)[0], 1.0, 0.0), (vec3((injectionSwitch)[0], 1.0, 0.0)) - vec3(0.0, 0.0, 0.0)), _GLF_IDENTITY(vec3((injectionSwitch)[0], 1.0, 0.0), _GLF_IDENTITY(mat3(1.0) * (vec3((injectionSwitch)[0], 1.0, 0.0)), min(mat3(1.0) * (vec3((injectionSwitch)[0], _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-70.60)), float(_GLF_IDENTITY(1.0, (1.0) + _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))))), bool(true))), 0.0)), mat3(1.0) * (vec3((injectionSwitch)[0], 1.0, 0.0)))))))), min(float(_GLF_IDENTITY(vec3((injectionSwitch)[0], 1.0, 0.0), min(_GLF_IDENTITY(vec3(_GLF_IDENTITY((injectionSwitch)[0], clamp((injectionSwitch)[0], (injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[0], mix(float(_GLF_FUZZED(-6.4)), float((injectionSwitch)[0]), bool(true))))), 1.0, 0.0), (vec3((injectionSwitch)[0], 1.0, 0.0)) - vec3(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 0.0)), vec3((injectionSwitch)[0], 1.0, 0.0)))), float(_GLF_IDENTITY(vec3((injectionSwitch)[0], 1.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0))), min(_GLF_IDENTITY(vec3((injectionSwitch)[0], 1.0, 0.0), _GLF_IDENTITY((vec3((injectionSwitch)[0], 1.0, 0.0)), min((vec3((injectionSwitch)[0], 1.0, 0.0)), (vec3((injectionSwitch)[0], 1.0, 0.0)))) - vec3(0.0, 0.0, 0.0)), vec3((injectionSwitch)[0], 1.0, 0.0))))))) : _GLF_FUZZED(-59.52))), _GLF_FUZZED((9862.3408 - vec4(-8.9, -795.917, 7843.0783, _GLF_IDENTITY(31.51, _GLF_IDENTITY(0.0 + (_GLF_IDENTITY(31.51, (false ? _GLF_FUZZED((false , 4281.8471)) : 31.51))), clamp(0.0 + (_GLF_IDENTITY(31.51, (false ? _GLF_FUZZED((false , 4281.8471)) : 31.51))), 0.0 + (_GLF_IDENTITY(31.51, (false ? _GLF_FUZZED((false , 4281.8471)) : 31.51))), 0.0 + (_GLF_IDENTITY(31.51, (false ? _GLF_FUZZED((false , 4281.8471)) : 31.51))))))).z))), bvec2(true, false)), vec2(mat4(mix(vec2(_GLF_FUZZED(-4719.7239), _GLF_IDENTITY((injectionSwitch), clamp((injectionSwitch), _GLF_IDENTITY((injectionSwitch), vec2(mat2((injectionSwitch), _GLF_IDENTITY(0.0, (0.0) - 0.0), 1.0))), (injectionSwitch)))[1]), vec2(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch)[0], _GLF_IDENTITY(float(_GLF_IDENTITY(vec3((injectionSwitch)[0], _GLF_IDENTITY(1.0, (1.0) - 0.0), 0.0), min(_GLF_IDENTITY(vec3((injectionSwitch)[0], _GLF_IDENTITY(1.0, float(mat2x3(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, float(vec3(1.0, 0.0, 0.0))), 1.0)), 0.0, 0.0, 0.0, 1.0, 0.0))), 0.0), (vec3((injectionSwitch)[0], 1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)))) - vec3(0.0, 0.0, 0.0)), _GLF_IDENTITY(vec3((injectionSwitch)[0], 1.0, 0.0), _GLF_IDENTITY(_GLF_IDENTITY(mat3(1.0) * (vec3((injectionSwitch)[0], 1.0, 0.0)), min(mat3(1.0) * (vec3((injectionSwitch)[0], 1.0, 0.0)), mat3(1.0) * (vec3((injectionSwitch)[0], 1.0, 0.0)))), (_GLF_IDENTITY(_GLF_IDENTITY(mat3(1.0) * (vec3((injectionSwitch)[0], 1.0, 0.0)), min(mat3(1.0) * (vec3((injectionSwitch)[0], 1.0, 0.0)), mat3(1.0) * (vec3((injectionSwitch)[0], 1.0, 0.0)))), clamp(_GLF_IDENTITY(mat3(1.0) * (vec3((injectionSwitch)[0], 1.0, 0.0)), min(mat3(1.0) * (vec3((injectionSwitch)[0], 1.0, 0.0)), mat3(1.0) * (vec3((injectionSwitch)[0], 1.0, 0.0)))), _GLF_IDENTITY(mat3(1.0) * (vec3((injectionSwitch)[0], 1.0, 0.0)), min(mat3(1.0) * (vec3((injectionSwitch)[0], 1.0, 0.0)), mat3(1.0) * (vec3((injectionSwitch)[0], 1.0, 0.0)))), _GLF_IDENTITY(mat3(1.0) * (vec3((injectionSwitch)[0], 1.0, 0.0)), min(mat3(1.0) * (vec3((injectionSwitch)[0], 1.0, 0.0)), mat3(1.0) * (vec3((injectionSwitch)[0], 1.0, 0.0))))))) / vec3(1.0, 1.0, 1.0)))))), min(float(_GLF_IDENTITY(vec3((injectionSwitch)[0], 1.0, 0.0), min(_GLF_IDENTITY(vec3(_GLF_IDENTITY((injectionSwitch)[0], clamp((injectionSwitch)[0], (injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[0], mix(float(_GLF_FUZZED(-6.4)), float((injectionSwitch)[0]), bool(true))))), 1.0, 0.0), (vec3((injectionSwitch)[0], 1.0, 0.0)) - vec3(0.0, 0.0, 0.0)), vec3((injectionSwitch)[0], 1.0, 0.0)))), float(_GLF_IDENTITY(vec3((injectionSwitch)[0], 1.0, 0.0), min(_GLF_IDENTITY(vec3((injectionSwitch)[0], 1.0, 0.0), _GLF_IDENTITY((vec3((injectionSwitch)[0], 1.0, 0.0)), min((vec3((injectionSwitch)[0], 1.0, 0.0)), (vec3((injectionSwitch)[0], 1.0, 0.0)))) - vec3(0.0, 0.0, 0.0)), vec3((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))[0], 1.0, 0.0))))))), (true ? _GLF_IDENTITY((injectionSwitch)[0], _GLF_IDENTITY(float(_GLF_IDENTITY(vec3((injectionSwitch)[0], 1.0, 0.0), min(_GLF_IDENTITY(vec3((injectionSwitch)[0], 1.0, 0.0), (vec3((injectionSwitch)[0], 1.0, 0.0)) - vec3(0.0, 0.0, 0.0)), _GLF_IDENTITY(vec3((injectionSwitch)[0], 1.0, 0.0), _GLF_IDENTITY(mat3(1.0) * (vec3((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(abs(vec2(-71.05, 7.7))) : injectionSwitch)))[0], 1.0, 0.0)), min(mat3(1.0) * (vec3((injectionSwitch)[0], _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-70.60)), float(_GLF_IDENTITY(1.0, (1.0) + _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))))), bool(true))), 0.0)), mat3(1.0) * (vec3((injectionSwitch)[0], 1.0, 0.0)))))))), min(float(_GLF_IDENTITY(vec3((injectionSwitch)[0], 1.0, 0.0), min(_GLF_IDENTITY(vec3(_GLF_IDENTITY((injectionSwitch)[0], clamp((injectionSwitch)[0], (injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[0], mix(float(_GLF_FUZZED(-6.4)), float((injectionSwitch)[0]), bool(true))))), 1.0, 0.0), (vec3((injectionSwitch)[0], 1.0, 0.0)) - vec3(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 0.0)), vec3((injectionSwitch)[0], 1.0, 0.0)))), float(_GLF_IDENTITY(vec3((injectionSwitch)[0], 1.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0))), min(_GLF_IDENTITY(vec3((injectionSwitch)[0], 1.0, 0.0), _GLF_IDENTITY((vec3((injectionSwitch)[0], 1.0, 0.0)), min((vec3((injectionSwitch)[0], 1.0, 0.0)), (vec3((injectionSwitch)[0], 1.0, 0.0)))) - vec3(0.0, 0.0, 0.0)), vec3((injectionSwitch)[0], 1.0, 0.0))))))) : _GLF_FUZZED(-59.52))), _GLF_FUZZED((9862.3408 - vec4(-8.9, -795.917, 7843.0783, _GLF_IDENTITY(31.51, 0.0 + (_GLF_IDENTITY(31.51, (false ? _GLF_FUZZED((false , 4281.8471)) : 31.51))))).z))), bvec2(true, false)), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 1.0, sqrt(1.0), 1.0, 0.0, tan(0.0), round(length(normalize(1.0))), 1.0, abs(1.0), abs(0.0), determinant(mat2(1.0, 0.0, tan(0.0), 1.0)), 0.0)))).y))))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)) > 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                barrier();
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))));
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (false)))), (! (false)) || false)))))
                  {
                   for(int _injected_loop_counter = ((_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), clamp(_GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), mix(float(_GLF_FUZZED(707.186)), float(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), float(vec3(_GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0)))), bool(true))), _GLF_ONE(1.0, injectionSwitch.y)))) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (true ? int(5) : _GLF_FUZZED((-58479 - -10585))))), int(_GLF_IDENTITY(ivec4(int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), clamp(_GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), mix(float(_GLF_FUZZED(707.186)), float(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), float(vec3(_GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0)))), bool(true))), _GLF_ONE(1.0, injectionSwitch.y)))) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (true ? int(5) : _GLF_FUZZED((-58479 - -10585))))), 0, 0, (0 ^ 1)), min(ivec4(int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), clamp(_GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), mix(float(_GLF_FUZZED(707.186)), float(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), float(vec3(_GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0)))), bool(true))), _GLF_ONE(1.0, injectionSwitch.y)))) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (true ? int(5) : _GLF_FUZZED((-58479 - -10585))))), 0, 0, (0 ^ 1)), _GLF_IDENTITY(ivec4(int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), clamp(_GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), mix(float(_GLF_FUZZED(707.186)), float(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), float(vec3(_GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0)))), bool(true))), _GLF_ONE(1.0, injectionSwitch.y)))) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (true ? int(5) : _GLF_FUZZED((-58479 - -10585))))), 0, 0, (0 ^ 1)), ivec4(1, 1, 1, 1) * (ivec4(int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), clamp(_GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), mix(float(_GLF_FUZZED(707.186)), float(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), float(vec3(_GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0)))), bool(true))), _GLF_ONE(1.0, injectionSwitch.y)))) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (true ? int(5) : _GLF_FUZZED((-58479 - -10585))))), 0, 0, (0 ^ 1))))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) ^ 0), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                    {
                     do
                      {
                       barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                  }
                }
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               else
                {
                }
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                barrier();
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y)))))))
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bool(_GLF_WRAPPED_LOOP(false)))));
                }
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(! (! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))), bool(bool(_GLF_IDENTITY(! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(331.520)), vec2(_GLF_FUZZED(751.346), (injectionSwitch)[1]), bvec2(false, true))) : _GLF_FUZZED(vec2(-22.20, -0.4)))).y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && _GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (true)))), ! (! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))))), (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)), ! (! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), ! (! (! (! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))))))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       barrier();
                      }
                     do
                      {
                       barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   else
                    {
                    }
                  }
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             do
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - sin(vec2(0.0, 0.0))), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(434.102), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch), mat2(1.0) * (_GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch)))))[0], _GLF_IDENTITY(_GLF_FUZZED(2.7), min(_GLF_FUZZED(2.7), _GLF_FUZZED(2.7)))), bvec2(true, false))))).x > injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     do
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   else
                    {
                     barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                }
               else
                {
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         else
          {
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
      }
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), vec2(mat3x4((injectionSwitch) * mat2(1.0), 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, determinant(mat3(1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0))))), ((injectionSwitch) * mat2(1.0)) / vec2(1.0, 1.0))).x > injectionSwitch.y))))
    {
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), _GLF_IDENTITY(bool(bvec4(bool(bvec2(false, true)), true, true, false)), ! (! (bool(bvec4(bool(bvec2(false, true)), true, true, false)))))))))));
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
    {
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 0);
 do
  {
   atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(_GLF_IDENTITY(1, (1) ^ 0)), ~ (~ (uint(_GLF_IDENTITY(1, (1) ^ 0))))), 4, 64, 4);
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 else
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_WRAPPED_LOOP(false));
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-1077.8544) : injectionSwitch.y)), (false ? _GLF_FUZZED(9.5) : _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-1077.8544) : injectionSwitch.y))))))) && true)))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          barrier();
         barrier();
        }
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(subgroup_local_id + _GLF_IDENTITY(1, (1) << 0) < subgroup_size)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       do
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (0) | _GLF_IDENTITY((0), ((0)) | ((0))))); _injected_loop_counter --)
          {
           atomicStore(checker[_GLF_IDENTITY(virtual_gid, (virtual_gid) / uint(_GLF_ONE(1.0, injectionSwitch.y)))], read, 4, 64, 4);
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) - 0))
              {
               barrier();
              }
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY((((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(_GLF_IDENTITY(2, _GLF_IDENTITY((2), _GLF_IDENTITY(1 * ((2)), (_GLF_IDENTITY(1 * ((2)), (_GLF_IDENTITY(1 * ((2)), clamp(1 * ((2)), 1 * ((2)), 1 * ((2))))) | (1 * ((2))))) ^ 0)) + 0)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(min(int(2), int(2)), 0 ^ (min(int(2), int(2)))), (_GLF_IDENTITY(min(int(2), int(2)), 0 ^ (min(int(2), int(2))))) << 0), (_GLF_IDENTITY(_GLF_IDENTITY(min(int(2), int(2)), 0 ^ (min(int(2), int(2)))), max(_GLF_IDENTITY(min(int(2), int(2)), 0 ^ (min(int(2), int(2)))), _GLF_IDENTITY(_GLF_IDENTITY(min(int(2), int(2)), 0 ^ (min(int(2), int(2)))), max(_GLF_IDENTITY(min(int(2), int(2)), 0 ^ (min(int(2), int(2)))), _GLF_IDENTITY(min(int(2), int(2)), 0 ^ (min(int(2), int(2))))))))) | (_GLF_IDENTITY(_GLF_IDENTITY(min(int(2), int(2)), 0 ^ (min(int(2), int(2)))), (_GLF_IDENTITY(min(int(2), int(2)), 0 ^ (min(int(2), int(2))))) << 0)))))) >> _GLF_IDENTITY(int(2), int(2))) ^ 0), ((_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, (2) | (2))) + 0)), _GLF_IDENTITY(min(int(2), int(2)), 0 ^ (min(int(2), int(2))))))) >> _GLF_IDENTITY(int(2), int(2))), int(ivec4(_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, (2) | (2))) + 0)), _GLF_IDENTITY(min(int(2), int(2)), 0 ^ (min(int(2), int(2))))))) >> _GLF_IDENTITY(int(2), int(2))), _GLF_IDENTITY(int(ivec2(((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, (2) | (2))) + 0)), _GLF_IDENTITY(min(int(2), int(2)), 0 ^ (min(int(2), int(2))))))) >> _GLF_IDENTITY(int(2), int(2))), 1)), clamp(int(ivec2(((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, (2) | (2))) + 0)), _GLF_IDENTITY(min(int(2), int(2)), 0 ^ (min(int(2), int(2))))))) >> _GLF_IDENTITY(int(2), int(2))), 1)), int(ivec2(((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, (2) | (2))) + 0)), _GLF_IDENTITY(min(int(2), int(2)), 0 ^ (min(int(2), int(2))))))) >> _GLF_IDENTITY(int(2), int(2))), 1)), int(ivec2(((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, (2) | (2))) + 0)), _GLF_IDENTITY(min(int(2), int(2)), 0 ^ (min(int(2), int(2))))))) >> _GLF_IDENTITY(int(2), int(2))), 1))))), 0, 1, 1))) ^ 0)) - (0 | 0))); _injected_loop_counter ++)
          {
           do
            {
             subgroupAll(false);
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             else
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                {
                 for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                        }
                       else
                        {
                         barrier();
                        }
                      }
                     do
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         barrier();
                        }
                       else
                        {
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))));
                    }
                  }
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), false))))));
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
          barrier();
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     do
                      {
                       barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   do
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                       if(_GLF_DEAD(false))
                        {
                         do
                          {
                           barrier();
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                      }
                     else
                      {
                       barrier();
                      }
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                }
               else
                {
                 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), false || (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))), (_GLF_WRAPPED_IF_FALSE(false)) || false))))
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                    }
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * abs(1.0))))))))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         barrier();
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                      }
                    }
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec4(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 1.0, 0.0, exp(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY(dot(vec3(1.0, 1.0, 1.0), vec3(0.0, 0.0, 0.0)), dot(vec3(1.0, 1.0, 1.0), vec3(0.0, 0.0, 0.0)))))).y, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && true)), true && (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(_GLF_IDENTITY(mat4(injectionSwitch, exp(0.0), _GLF_IDENTITY(dot(vec4(0.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 0.0, 0.0), vec4(0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0)), dot(vec4(0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(4.3)), float(1.0), bool(true))), 0.0, 0.0), vec4(0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0))), 1.0, 0.0, 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(8.0))), 0.0)))), 1.0, abs(0.0), 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0)), 0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) / 1.0), 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(21.50) : _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(45.16)), bool(false))))), 1.0), (_GLF_IDENTITY(mat4(injectionSwitch, exp(0.0), _GLF_IDENTITY(dot(vec4(0.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 0.0, 0.0), vec4(0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0)), dot(vec4(0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(4.3)), float(1.0), bool(true))), 0.0, 0.0), vec4(0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0))), 1.0, 0.0, 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(8.0))), 0.0)))), 1.0, abs(0.0), 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0)), 0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) / 1.0), 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(21.50) : _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(45.16)), bool(false))))), 1.0), transpose(transpose(mat4(injectionSwitch, exp(0.0), _GLF_IDENTITY(dot(vec4(0.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 0.0, 0.0), vec4(0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0)), dot(vec4(0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(4.3)), float(1.0), bool(true))), 0.0, 0.0), vec4(0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0))), 1.0, 0.0, 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(8.0))), 0.0)))), 1.0, abs(0.0), 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0)), 0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) / 1.0), 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(21.50) : _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(45.16)), bool(false))))), 1.0))))) / mat4(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)), (mat4(injectionSwitch, exp(0.0), _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0))), 1.0, 0.0, 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, abs(0.0), 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0)), 0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) / cos(determinant(mat2(0.0, 0.0, 0.0, 0.0)))), 1.0)) / mat4(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))), mix(_GLF_IDENTITY(vec2(_GLF_FUZZED(2768.0194), _GLF_FUZZED(-991.735)), (vec2(_GLF_FUZZED(2768.0194), _GLF_FUZZED(-991.735))) - vec2(0.0, 0.0)), vec2((vec2(_GLF_IDENTITY(mat4(injectionSwitch, exp(0.0), _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0))), 1.0, 0.0, 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, abs(0.0), 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0)), 0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) / 1.0), 1.0, 0.0, 0.0, 0.0, 1.0), (mat4(injectionSwitch, exp(0.0), _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (false ? _GLF_FUZZED(mod(-3003.8939, (-828.768 * 267.577))) : _GLF_ZERO(0.0, injectionSwitch.x))), 0.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, _GLF_ZERO(_GLF_IDENTITY(0.0, float(mat4(0.0, length(_GLF_IDENTITY(vec4(0.0, 0.0, 0.0, 0.0), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(reflect(vec4(-8.0, -7.5, -4419.7314, -6.9), vec4(4.9, 210.606, -58.47, -603.794))) : vec4(0.0, 0.0, 0.0, 0.0)))), tan(_GLF_IDENTITY(dot(vec3(0.0, 1.0, 1.0), vec3(1.0, 0.0, 0.0)), dot(vec3(0.0, 1.0, 1.0), vec3(1.0, 0.0, 0.0)))), 1.0, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))))), 1.0, 0.0, _GLF_ZERO(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED((vec3(9448.2665, 8251.4030, -678.294).t - -578.629))), float(_GLF_IDENTITY(0.0, float(float(_GLF_IDENTITY(0.0, max(0.0, 0.0)))))), bool(true))), injectionSwitch.x), 0.0, 0.0, 1.0, sin(log(1.0)), sqrt(0.0), sqrt(0.0), 0.0, exp(0.0)))), injectionSwitch.x), 0.0))), 1.0, 0.0, 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, abs(0.0), 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0)), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)) / mat4(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))))[0], (_GLF_IDENTITY(vec2(_GLF_IDENTITY(mat4(injectionSwitch, exp(0.0), _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0))), 1.0, 0.0, 1.0, determinant(_GLF_IDENTITY(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, abs(0.0), 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0), (mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, abs(0.0), 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0)) * mat4(1.0))), 0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) / 1.0), 1.0, 0.0, 0.0, 0.0, 1.0), (mat4(injectionSwitch, exp(0.0), _GLF_IDENTITY(dot(vec4(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-26.66)), bool(false)))) + tan(0.0)), 1.0, 0.0, 0.0), vec4(0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0)), dot(vec4(0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0))), vec4(0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0))), 1.0, 0.0, 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, abs(0.0), _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, float(vec3(0.0, _GLF_IDENTITY(determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0)), float(mat4x3(_GLF_IDENTITY(determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0)), max(determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0)), determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0)))), 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0))), 1.0)))) / 1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-1.3)), float(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, 1.0 * (1.0)), 1.0, 1.0))), bool(true))))), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)) / mat4(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))), clamp(vec2(_GLF_IDENTITY(mat4(injectionSwitch, exp(0.0), _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0))), 1.0, 0.0, 1.0, determinant(_GLF_IDENTITY(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, abs(0.0), 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0), (mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, abs(0.0), 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0)) * mat4(1.0))), 0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) / 1.0), 1.0, 0.0, 0.0, 0.0, 1.0), (mat4(injectionSwitch, exp(0.0), _GLF_IDENTITY(dot(vec4(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-26.66)), bool(false)))) + tan(0.0)), 1.0, 0.0, 0.0), vec4(0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0)), dot(vec4(0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0))), vec4(0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0))), 1.0, 0.0, 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, abs(0.0), _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, float(vec3(0.0, _GLF_IDENTITY(determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0)), float(mat4x3(_GLF_IDENTITY(determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0)), max(determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0)), determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0)))), 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0))), 1.0)))) / 1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-1.3)), float(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, 1.0 * (1.0)), 1.0, 1.0))), bool(true))))), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)) / mat4(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))), _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat4(injectionSwitch, exp(0.0), _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0))), 1.0, 0.0, 1.0, determinant(_GLF_IDENTITY(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, abs(0.0), 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0), (mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, abs(0.0), 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0)) * mat4(1.0))), 0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) / 1.0), 1.0, 0.0, 0.0, 0.0, 1.0), (mat4(injectionSwitch, exp(0.0), _GLF_IDENTITY(dot(vec4(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-26.66)), bool(false)))) + tan(0.0)), 1.0, 0.0, 0.0), vec4(0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0)), dot(vec4(0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0))), vec4(0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0))), 1.0, 0.0, 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, abs(0.0), _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, float(vec3(0.0, _GLF_IDENTITY(determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0)), float(mat4x3(_GLF_IDENTITY(determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0)), max(determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0)), determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0)))), 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0))), 1.0)))) / 1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-1.3)), float(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, 1.0 * (1.0)), 1.0, 1.0))), bool(true))))), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)) / mat4(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))), min(vec2(_GLF_IDENTITY(mat4(injectionSwitch, exp(0.0), _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0))), 1.0, 0.0, 1.0, determinant(_GLF_IDENTITY(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, abs(0.0), 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0), (mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, abs(0.0), 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0)) * mat4(1.0))), 0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) / 1.0), 1.0, 0.0, 0.0, 0.0, 1.0), (mat4(injectionSwitch, exp(0.0), _GLF_IDENTITY(dot(vec4(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-26.66)), bool(false)))) + tan(0.0)), 1.0, 0.0, 0.0), vec4(0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0)), dot(vec4(0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0))), vec4(0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0))), 1.0, 0.0, 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, abs(0.0), _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, float(vec3(0.0, _GLF_IDENTITY(determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0)), float(mat4x3(_GLF_IDENTITY(determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0)), max(determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0)), determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0)))), 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0))), 1.0)))) / 1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-1.3)), float(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, 1.0 * (1.0)), 1.0, 1.0))), bool(true))))), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)) / mat4(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))), vec2(_GLF_IDENTITY(mat4(injectionSwitch, exp(0.0), _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0))), 1.0, 0.0, 1.0, determinant(_GLF_IDENTITY(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, abs(0.0), 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0), (mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, abs(0.0), 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0)) * mat4(1.0))), 0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) / 1.0), 1.0, 0.0, 0.0, 0.0, 1.0), (mat4(injectionSwitch, exp(0.0), _GLF_IDENTITY(dot(vec4(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-26.66)), bool(false)))) + tan(0.0)), 1.0, 0.0, 0.0), vec4(0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0)), dot(vec4(0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0))), vec4(0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0))), 1.0, 0.0, 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, abs(0.0), _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, float(vec3(0.0, _GLF_IDENTITY(determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0)), float(mat4x3(_GLF_IDENTITY(determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0)), max(determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0)), determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0)))), 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0))), 1.0)))) / 1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-1.3)), float(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, 1.0 * (1.0)), 1.0, 1.0))), bool(true))))), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)) / mat4(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))))), _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat4(injectionSwitch, exp(0.0), _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0))), 1.0, 0.0, 1.0, determinant(_GLF_IDENTITY(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, abs(0.0), 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0), (mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, abs(0.0), 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0)) * mat4(1.0))), 0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) / 1.0), 1.0, 0.0, 0.0, 0.0, 1.0), (mat4(injectionSwitch, exp(0.0), _GLF_IDENTITY(dot(vec4(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-26.66)), bool(false)))) + tan(0.0)), 1.0, 0.0, 0.0), vec4(0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0)), dot(vec4(0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0))), vec4(0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0))), 1.0, 0.0, 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, abs(0.0), _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, float(vec3(0.0, _GLF_IDENTITY(determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0)), float(mat4x3(_GLF_IDENTITY(determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0)), max(determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0)), determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0)))), 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0))), 1.0)))) / 1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-1.3)), float(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, 1.0 * (1.0)), 1.0, 1.0))), bool(true))))), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)) / mat4(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))), (vec2(_GLF_IDENTITY(mat4(injectionSwitch, exp(0.0), _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0))), 1.0, 0.0, 1.0, determinant(_GLF_IDENTITY(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, abs(0.0), 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0), (mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, abs(0.0), 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0)) * mat4(1.0))), 0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) / 1.0), 1.0, 0.0, 0.0, 0.0, 1.0), (mat4(injectionSwitch, exp(0.0), _GLF_IDENTITY(dot(vec4(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-26.66)), bool(false)))) + tan(0.0)), 1.0, 0.0, 0.0), vec4(0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0)), dot(vec4(0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0))), vec4(0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0))), 1.0, 0.0, 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, abs(0.0), _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, float(vec3(0.0, _GLF_IDENTITY(determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0)), float(mat4x3(_GLF_IDENTITY(determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0)), max(determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0)), determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0)))), 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0))), 1.0)))) / 1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-1.3)), float(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, 1.0 * (1.0)), 1.0, 1.0))), bool(true))))), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)) / mat4(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)))) / vec2(1.0, 1.0)))))[1]), bvec2(true, true)))).x > injectionSwitch.y))), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), true))))))), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                           if(_GLF_DEAD(false))
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              barrier();
                             do
                              {
                               do
                                {
                                 barrier();
                                }
                               while(_GLF_WRAPPED_LOOP(false));
                              }
                             while(_GLF_WRAPPED_LOOP(false));
                            }
                          }
                         else
                          {
                           barrier();
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             if(_GLF_DEAD(false))
                              barrier();
                            }
                           if(_GLF_DEAD(false))
                            barrier();
                           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat4x3(injectionSwitch, 0.0, sin(0.0), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, 1.0, abs(1.0), 1.0)), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, 1.0, abs(1.0), 1.0)), (dot(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, 1.0, abs(1.0), 1.0))) + 0.0)), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, round(length(normalize(vec2(1.0, 1.0))))))).x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                            {
                             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                              {
                               barrier();
                              }
                            }
                          }
                        }
                       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | (1))) - (0 << _GLF_IDENTITY(int(5), int(5))))); _injected_loop_counter ++)
                        {
                         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                          {
                           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              barrier();
                            }
                           else
                            {
                            }
                           barrier();
                           if(_GLF_DEAD(false))
                            barrier();
                          }
                        }
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       if(_GLF_DEAD(false))
                        {
                         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                          {
                           barrier();
                          }
                        }
                      }
                     if(_GLF_DEAD(false))
                      barrier();
                     for(int _injected_loop_counter = (1 & (0 ^ ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(int(4), int(4)), 0)), 0 | (int(ivec2(_GLF_IDENTITY(int(4), int(4)), 0))))), 1, 1), (ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(int(4), int(4)), 0)), 0 | (int(ivec2(_GLF_IDENTITY(int(4), int(4)), 0))))), 1, 1)) / ivec3(1, 1, 1)))))); _injected_loop_counter --)
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             barrier();
                            }
                          }
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           barrier();
                          }
                         else
                          {
                          }
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                        }
                      }
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     else
                      {
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                        }
                       else
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         if(_GLF_DEAD(false))
                          {
                           do
                            {
                             do
                              {
                               do
                                {
                                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                  {
                                   if(_GLF_DEAD(false))
                                    {
                                     for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (int(_GLF_ZERO(0.0, injectionSwitch.x))) | (int(_GLF_ZERO(0.0, injectionSwitch.x)))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), true && (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))); _injected_loop_counter ++)
                                      {
                                       barrier();
                                      }
                                    }
                                   do
                                    {
                                     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                                      {
                                       do
                                        {
                                         do
                                          {
                                           barrier();
                                          }
                                         while(_GLF_WRAPPED_LOOP(false));
                                        }
                                       while(_GLF_WRAPPED_LOOP(false));
                                      }
                                    }
                                   while(_GLF_WRAPPED_LOOP(false));
                                  }
                                 else
                                  {
                                  }
                                }
                               while(_GLF_WRAPPED_LOOP(false));
                              }
                             while(_GLF_WRAPPED_LOOP(false));
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                          }
                        }
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(8), int(8))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                          {
                           if(_GLF_DEAD(false))
                            {
                             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                              {
                               if(_GLF_WRAPPED_IF_FALSE(false))
                                {
                                }
                               else
                                {
                                 if(_GLF_DEAD(false))
                                  barrier();
                                 if(_GLF_WRAPPED_IF_FALSE(false))
                                  {
                                  }
                                 else
                                  {
                                   barrier();
                                  }
                                }
                              }
                             else
                              {
                              }
                             if(_GLF_DEAD(false))
                              {
                               for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) | (int(4))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                                {
                                 barrier();
                                }
                              }
                            }
                           if(_GLF_DEAD(false))
                            barrier();
                          }
                        }
                       else
                        {
                        }
                       barrier();
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         do
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
                            {
                             do
                              {
                               barrier();
                               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                barrier();
                              }
                             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                            }
                          }
                         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                        }
                       else
                        {
                        }
                       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
                        {
                         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                          {
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             if(_GLF_WRAPPED_IF_TRUE(true))
                              {
                               barrier();
                              }
                             else
                              {
                              }
                            }
                          }
                         else
                          {
                          }
                         for(int _injected_loop_counter = (_GLF_IDENTITY(1 | 1, (1 | 1) >> 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                          }
                        }
                      }
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec3(injectionSwitch.x < injectionSwitch.y, false, false)))))))
                      {
                       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (0) >> 0)); _injected_loop_counter --)
                        {
                         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                          {
                           if(_GLF_DEAD(false))
                            {
                             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 ^ 0)); _injected_loop_counter --)
                              {
                               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))))
                                barrier();
                              }
                             barrier();
                            }
                          }
                        }
                      }
                     else
                      {
                      }
                    }
                  }
                 atomicStore(buf[virtual_gid], read, 4, 64, 4);
                 do
                  {
                   if(_GLF_DEAD(false))
                    {
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))); _injected_loop_counter --)
                      {
                       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                        barrier();
                      }
                     barrier();
                    }
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     do
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           barrier();
                          }
                         else
                          {
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              barrier();
                            }
                          }
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   do
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(_GLF_IDENTITY(int(6), min(int(6), _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(ivec3(int(6), 1, 0)), (false ? _GLF_FUZZED(-90906) : int(ivec3(int(6), 1, 0))))))), (int(6)) - 0))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != (1 | (0 << _GLF_IDENTITY(int(5), int(5)))), (_injected_loop_counter != (_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, (1) ^ 0))) | (0 << _GLF_IDENTITY(int(5), int(5))))) || false)); _injected_loop_counter ++)
                        {
                         barrier();
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             barrier();
                            }
                           else
                            {
                            }
                          }
                        }
                      }
                     else
                      {
                      }
                    }
                   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_LOOP(false), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), ! (! (_GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_LOOP(false), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), bool(bvec4(bool(bvec4(_GLF_WRAPPED_LOOP(false), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), false, false, false))))))));
                  }
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                  {
                   barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                }
              }
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    {
                     do
                      {
                       barrier();
                      }
                     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), false || (_GLF_WRAPPED_LOOP(false))));
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                }
               if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (! ((_GLF_IDENTITY(false, false || (false)))))) && _GLF_TRUE(_GLF_IDENTITY(true, (true) || false), (injectionSwitch.x < injectionSwitch.y)))))
                {
                 do
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     barrier();
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(8), int(8))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | 1)); _injected_loop_counter ++)
                {
                 barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
              barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), clamp(int(3), int(3), int(3)))), (_GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), clamp(int(3), int(3), int(3)))), (_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(_GLF_IDENTITY(3, ~ (~ (3)))), clamp(int(3), int(3), int(3))))) >> 0)) ^ 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _GLF_IDENTITY(_injected_loop_counter --, 0 | _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) + 0)), ((_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) + 0))) ^ 0)))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         else
          {
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
             for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) | int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))) | 1)); _injected_loop_counter ++)
              {
               barrier();
              }
            }
           barrier();
          }
        }
       for(int _injected_loop_counter = ((_GLF_IDENTITY(((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(5), int(5)), ~ (~ (1 << _GLF_IDENTITY(int(5), int(5)))))) >> _GLF_IDENTITY(int(5), int(5))), int(_GLF_ONE(1.0, injectionSwitch.y)) * (((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(5), int(5)), ~ (~ (1 << _GLF_IDENTITY(int(5), int(5)))))) >> _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, (5) + 0)))))) << _GLF_IDENTITY(int(_GLF_IDENTITY(1, ~ (~ (1)))), int(_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, 1, 1)), min(_GLF_IDENTITY(1, _GLF_IDENTITY(clamp(1, 1, 1), (clamp(1, 1, 1)) / 1)), _GLF_IDENTITY(1, clamp(1, 1, 1))))))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) ^ 0))), 0, 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 1)); _injected_loop_counter ++)
            {
             barrier();
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
              {
               do
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(bool(false))), true, true, true))), (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         else
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              barrier();
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), bool(bvec3(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), false, true)))), _GLF_IDENTITY(bool(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))), false)), bool(_GLF_IDENTITY(bvec2(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), bool(bvec4(_GLF_IDENTITY(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), (bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))) && true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false))), false), true, true))))))))
                barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     do
                      {
                       do
                        {
                         do
                          {
                           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), min(int(6), int(6)))))); _injected_loop_counter --)
                            {
                             if(_GLF_DEAD(false))
                              {
                               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bool(true)))))
                                {
                                 barrier();
                                }
                               else
                                {
                                }
                              }
                            }
                           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))
                            barrier();
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-1736.6314)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y))));
                    }
                   for(int _injected_loop_counter = ((0 ^ 1) | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                    {
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       barrier();
                      }
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                }
               barrier();
              }
            }
           do
            {
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) && true), (injectionSwitch.x < injectionSwitch.y))))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
           subgroupAll(true);
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           do
            {
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                {
                 barrier();
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                    {
                     barrier();
                    }
                  }
                 else
                  {
                  }
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
              barrier();
             do
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                }
              }
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(_GLF_IDENTITY(float(injectionSwitch.x), exp(0.0) * (_GLF_IDENTITY(float(injectionSwitch.x), min(float(injectionSwitch.x), _GLF_IDENTITY(float(injectionSwitch.x), (true ? float(injectionSwitch.x) : _GLF_FUZZED(-264.414))))))), float(_GLF_FUZZED(0.1)), bool(false))) > injectionSwitch.y, _GLF_IDENTITY(true && (injectionSwitch.x > injectionSwitch.y), ! (! (true && (injectionSwitch.x > injectionSwitch.y))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(0.1)), bool(false))) > injectionSwitch.y, _GLF_IDENTITY(true && _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), ! (! (true && (injectionSwitch.x > injectionSwitch.y))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(0.1)), bool(false))) > injectionSwitch.y, _GLF_IDENTITY(true && (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, 1.0, 1.0))).y), ! (! (_GLF_IDENTITY(true, ! (! (true))) && (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))))))))))))))
          barrier();
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                  {
                   barrier();
                  }
                }
               do
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) << 0))) != _GLF_IDENTITY(int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x)), ~ (~ _GLF_IDENTITY((int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(((-105.277 + 3.7)))), bool(false)))))), ~ (_GLF_IDENTITY(~ ((int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(((-105.277 + 3.7)))), bool(false))))))), (true ? ~ ((int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(((-105.277 + 3.7)))), bool(false))))))) : _GLF_FUZZED(_injected_loop_counter)))))))); _injected_loop_counter --)
              {
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           for(int _injected_loop_counter = ((1 & _GLF_IDENTITY(1, (false ? _GLF_FUZZED(findLSB(read)) : 1))) ^ ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY(1, int(ivec2(1, 1))), (_GLF_IDENTITY(1, int(ivec2(1, 1)))) | (_GLF_IDENTITY(1, int(ivec2(1, 1))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec3(true, false, false)))), false || (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec3(true, false, false)))), true && (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec3(true, false, false)))))))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
              }
             if(_GLF_DEAD(false))
              barrier();
             for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), 0 ^ (int(2))))) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter ++)
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! _GLF_IDENTITY((! (true)), ((! (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))), true && (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))), bool(bvec3(_GLF_IDENTITY(true, bool(bvec4(true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))), false, true))), true), bvec2(bvec3(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))), bool(bvec3(_GLF_IDENTITY(true, bool(bvec4(true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))), false, true))), true), true)))), (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))), bool(bvec3(_GLF_IDENTITY(true, bool(bvec4(true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))), false, true))), true), bvec2(bvec3(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))), bool(bvec3(_GLF_IDENTITY(true, bool(bvec4(true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))), false, true))), true), true))))) || false))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
                {
                 barrier();
                }
               else
                {
                }
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (! (_GLF_IDENTITY(false, (false) && true)))))))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (! (_GLF_IDENTITY(false, (false) && true)))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (! (_GLF_IDENTITY(false, (false) && true)))), (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (! (_GLF_IDENTITY(false, (false) && true))))) && true)) && true)))))) || false))
                barrier();
               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec2(true, false)))), (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec2(true, false))))) || false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                }
              }
             else
              {
              }
            }
          }
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | int(_GLF_ONE(1.0, injectionSwitch.y)))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       do
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       do
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bvec2(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false))))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 barrier();
                }
              }
             barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
           else
            {
            }
          }
         else
          {
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        {
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           barrier();
          }
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), false || (_GLF_IDENTITY(false, true && (false))))))));
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))) || false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))) || false, false || ((_GLF_IDENTITY(false, false || (false))) || false)), true), bvec2(bvec3(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))) || false, false || ((_GLF_IDENTITY(false, false || (false))) || false)), true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), min(int(5), int(5))))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     for(int _injected_loop_counter = int(_GLF_ONE(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-2.8)), bool(false))), injectionSwitch.y)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, bool(bvec4(_GLF_IDENTITY(_injected_loop_counter > 0, bool(bool(_injected_loop_counter > 0))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)), false, false)))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), false || (bool(bvec4(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
         do
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec2(false, true)))))))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, ~ (_GLF_IDENTITY(~ (_injected_loop_counter), ~ (~ (~ (_injected_loop_counter)))))) != 0); _injected_loop_counter --)
                  {
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                }
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
              {
               for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (0) >> 0)); _injected_loop_counter --)
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) << 0))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
                    {
                     barrier();
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                  }
                }
              }
            }
           for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat4(injectionSwitch.y, 1.0, 1.0, 0.0, tan(0.0), 0.0, 0.0, sqrt(1.0), 1.0, 1.0, exp(0.0), log(exp(0.0)), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0), (mat4(injectionSwitch.y, 1.0, 1.0, 0.0, tan(0.0), 0.0, 0.0, sqrt(1.0), _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (1.0) * 1.0)) + 0.0), 1.0, exp(0.0), log(exp(0.0)), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0)) - mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))))))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 barrier();
                }
              }
            }
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_TRUE(true)), bool(bvec4(! (_GLF_WRAPPED_IF_TRUE(true)), false, true, false))))))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & 1)); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
            barrier();
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))));
              }
            }
           do
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY((_GLF_IDENTITY(0, (0) >> 0) << _GLF_IDENTITY(int(0), int(0))), (true ? (0 << _GLF_IDENTITY(int(0), int(0))) : _GLF_FUZZED(76061)))); _injected_loop_counter --)
              {
               barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
    }
  }
 else
  {
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bool(_GLF_DEAD(false))), true && (bool(bool(_GLF_DEAD(false)))))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(7.2))) > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(false ? _GLF_FUZZED(-66.70) : injectionSwitch.y, mix(float(false ? _GLF_FUZZED(-66.70) : injectionSwitch.y), float(_GLF_FUZZED(3.6)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter)))) < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(clamp(-1.8, -2.1, 6489.2466)) : injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).y))) || false)))
          barrier();
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
            {
             do
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 else
                  {
                  }
                }
               else
                {
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         else
          {
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false))))))))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         else
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | _GLF_IDENTITY(0, ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))) * (0)))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
                {
                 do
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), max(int(7), int(7)))))); _injected_loop_counter --)
                  {
                   barrier();
                  }
                }
              }
             else
              {
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
        }
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 & (-13109 - (~ 48564)))); _injected_loop_counter --)
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, clamp(1, 1, 1))); _injected_loop_counter ++)
            {
             barrier();
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   barrier();
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       barrier();
      }
     barrier();
    }
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
}
