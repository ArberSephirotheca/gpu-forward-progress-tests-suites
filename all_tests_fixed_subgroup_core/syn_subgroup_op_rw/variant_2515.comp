#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   return;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false, true)))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false, true))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false, true)))) || false))) || false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_DEAD(false))
      barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY(_GLF_IDENTITY((! (false)), ((! (false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY((! (false)), ((! (false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((! (false)), ((! (false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-64.87)), vec2(_GLF_FUZZED(-44.31), (injectionSwitch)[1]), bvec2(false, true))), injectionSwitch)).x > injectionSwitch.y, _GLF_IDENTITY(! (! (injectionSwitch.x > injectionSwitch.y)), (! (! (injectionSwitch.x > injectionSwitch.y))) && true))))))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)), (_GLF_DEAD(_GLF_IDENTITY(false, (false) && true))) || false))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))
        return;
       if(_GLF_DEAD(false))
        barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) || false))), ! (! (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) || false))))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(false), false)), ! (! (bool(bvec2(_GLF_DEAD(false), false)))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) > injectionSwitch.y))))
    return;
   return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
    return;
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  return;
uint subgroup_size = 16;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       return;
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY((gl_NumWorkGroups) ^ _GLF_IDENTITY(uvec3(0u, 0u, 0u), max(uvec3(0u, 0u, 0u), uvec3(_GLF_IDENTITY(0u, clamp(0u, 0u, _GLF_IDENTITY(0u, max(0u, 0u)))), 0u, _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) + (0u << _GLF_IDENTITY(uint(5u), uint(5u))))) | (0u))))), (_GLF_IDENTITY(_GLF_IDENTITY((gl_NumWorkGroups) ^ _GLF_IDENTITY(uvec3(0u, 0u, 0u), max(uvec3(0u, 0u, 0u), uvec3(_GLF_IDENTITY(0u, clamp(0u, 0u, _GLF_IDENTITY(0u, max(0u, 0u)))), 0u, 0u))), ((gl_NumWorkGroups) ^ _GLF_IDENTITY(uvec3(0u, 0u, 0u), max(uvec3(0u, 0u, 0u), uvec3(_GLF_IDENTITY(0u, clamp(0u, 0u, _GLF_IDENTITY(0u, max(0u, 0u)))), 0u, 0u)))) >> (uvec3(0u, 0u, 0u) & uvec3(28883u, 51159u, 72818u))), min((gl_NumWorkGroups) ^ _GLF_IDENTITY(uvec3(0u, 0u, 0u), max(uvec3(0u, 0u, 0u), uvec3(_GLF_IDENTITY(0u, clamp(0u, 0u, _GLF_IDENTITY(0u, max(0u, 0u)))), 0u, 0u))), (gl_NumWorkGroups) ^ _GLF_IDENTITY(uvec3(_GLF_IDENTITY(0u, (0u) << 0u), 0u, 0u), max(uvec3(0u, 0u, 0u), uvec3(_GLF_IDENTITY(0u, clamp(0u, 0u, _GLF_IDENTITY(0u, max(0u, 0u)))), 0u, 0u)))))) | ((gl_NumWorkGroups) ^ _GLF_IDENTITY(uvec3(0u, 0u, 0u), max(uvec3(0u, 0u, 0u), uvec3(_GLF_IDENTITY(0u, clamp(0u, 0u, _GLF_IDENTITY(0u, max(0u, 0u)))), _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(subgroup_size) : 0u))) | (0u)), 0u)))))).x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     return;
    }
   return;
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 0.0, 1.0, 0.0, 0.0))))))).y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
        barrier();
       return;
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, false))), (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     return;
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, true && (true)))))
    return;
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), _GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, true && (true)))) && (_GLF_DEAD(false))), _GLF_IDENTITY(true, false || (true))))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), true, true)), (bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), true, true))) || false)))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), bool(bvec3(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), _GLF_IDENTITY(true, ! (! (true))), true))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), (_GLF_DEAD(_GLF_IDENTITY(false, false || (false)))) && true))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), clamp(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(_GLF_IDENTITY(vec2(-1662.9456, -53.03), (vec2(-1662.9456, -53.03)) / vec2(1.0, 1.0))))).x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))) || false))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bool(! (injectionSwitch.x > injectionSwitch.y))), bool(bool(bool(bool(! (injectionSwitch.x > injectionSwitch.y)))))))))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      barrier();
     return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      barrier();
     return;
    }
   return;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_id * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, 0u | (subgroup_size)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(uvec2(subgroup_size, 0u)), (uint(uvec2(subgroup_size, 0u))) ^ 0u)), 0u | (subgroup_size))))) + subgroup_local_id, max(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, ~ (~ (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, min(workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY(workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), 0u | (~ (subgroup_size))))), _GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size) / 1u, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (workgroup_base + subgroup_id * subgroup_size) / 1u : _GLF_FUZZED(subgroup_size))))))))) + subgroup_local_id, _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, clamp(subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id * subgroup_size, max(subgroup_id * subgroup_size, subgroup_id * subgroup_size)), subgroup_id * subgroup_size)) + subgroup_local_id, clamp(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id, workgroup_base + subgroup_id * subgroup_size + subgroup_local_id, workgroup_base + subgroup_id * subgroup_size + subgroup_local_id))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     barrier();
    }
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), (_GLF_DEAD(_GLF_IDENTITY(false, false || (false)))) && _GLF_IDENTITY(true, bool(bool(true)))))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  barrier();
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, clamp(workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, 0u | (subgroup_size)), workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size)) + (_GLF_IDENTITY((subgroup_local_id + 1) % _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)) ^ 0u), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)) ^ 0u)), (~ (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)) ^ 0u))) - 0u))), max(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size) ^ 0u, (_GLF_IDENTITY((subgroup_size), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((subgroup_size), uint(uvec4((subgroup_size), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))))), 0u | (~ (_GLF_IDENTITY((subgroup_size), uint(uvec4((subgroup_size), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))))))))) ^ 0u) / 1u))) ^ 0u), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)) ^ 0u), max(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)) ^ 0u, clamp((_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)) ^ 0u, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)) ^ 0u, 0u + ((_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)) ^ 0u)), (_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)) ^ 0u))), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)) ^ 0u, clamp((_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)) ^ 0u, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)) ^ 0u, 0u + ((_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)) ^ 0u)), (_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)) ^ 0u))), (true ? _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)) ^ 0u, clamp((_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)) ^ 0u, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)) ^ 0u, 0u + ((_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size), ~ (~ ((subgroup_size)))) ^ 0u)) ^ 0u)), (_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)) ^ 0u))) : _GLF_FUZZED(uvec3(151428u, 169971u, 176237u).x)))) + (42819u & (0u >> _GLF_IDENTITY(uint(4u), uint(4u))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)) ^ 0u), ~ (~ (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)) ^ 0u)))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)) ^ 0u), ~ (~ (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)) ^ 0u)))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)) ^ 0u), ~ (~ (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)) ^ 0u)))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)) ^ 0u), ~ (~ (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)) ^ 0u)))))))) ^ 0u)) | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)) ^ 0u), ~ (~ (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)) ^ 0u)))))))))), max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)) ^ 0u), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)) ^ 0u)), (~ (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)) ^ 0u))) - 0u))), max(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size) ^ 0u, (_GLF_IDENTITY((subgroup_size), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((subgroup_size), uint(uvec4((subgroup_size), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))))), 0u | (~ (_GLF_IDENTITY((subgroup_size), uint(uvec4((subgroup_size), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))))))))) ^ 0u) / 1u))) ^ 0u), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)) ^ 0u), max(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)) ^ 0u, clamp((_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)) ^ 0u, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)) ^ 0u, 0u + ((_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)) ^ 0u)), (_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)) ^ 0u))), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)) ^ 0u, clamp((_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)) ^ 0u, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)) ^ 0u, 0u + ((_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)) ^ 0u)), (_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)) ^ 0u))), (true ? _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)) ^ 0u, clamp((_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)) ^ 0u, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)) ^ 0u, 0u + ((_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size), ~ (~ ((subgroup_size)))) ^ 0u)) ^ 0u)), (_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)) ^ 0u))) : _GLF_FUZZED(uvec3(151428u, 169971u, 176237u).x)))) + (42819u & (0u >> _GLF_IDENTITY(uint(4u), uint(4u))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)) ^ 0u), ~ (~ (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)) ^ 0u)))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)) ^ 0u), ~ (~ (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)) ^ 0u)))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)) ^ 0u), ~ (~ (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)) ^ 0u)))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)) ^ 0u), ~ (~ (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)) ^ 0u)))))))) ^ 0u)) | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)) ^ 0u), ~ (~ (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)) ^ 0u)))))))))), (false ? _GLF_FUZZED(packHalf2x16(injectionSwitch)) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)) ^ 0u), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)) ^ 0u)), (~ (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)) ^ 0u))) - 0u))), max(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size) ^ 0u, (_GLF_IDENTITY((subgroup_size), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((subgroup_size), uint(uvec4((subgroup_size), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))))), 0u | (~ (_GLF_IDENTITY((subgroup_size), uint(uvec4((subgroup_size), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))))))))) ^ 0u) / 1u))) ^ 0u), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)) ^ 0u), max(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)) ^ 0u, clamp((_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)) ^ 0u, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)) ^ 0u, 0u + ((_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)) ^ 0u)), (_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)) ^ 0u))), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)) ^ 0u, clamp((_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)) ^ 0u, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)) ^ 0u, 0u + ((_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)) ^ 0u)), (_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)) ^ 0u))), (true ? _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)) ^ 0u, clamp((_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)) ^ 0u, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)) ^ 0u, 0u + ((_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size), ~ (~ ((subgroup_size)))) ^ 0u)) ^ 0u)), (_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)) ^ 0u))) : _GLF_FUZZED(uvec3(151428u, 169971u, 176237u).x)))) + (42819u & (0u >> _GLF_IDENTITY(uint(4u), uint(4u))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)) ^ 0u), ~ (~ (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)) ^ 0u)))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)) ^ 0u), ~ (~ (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)) ^ 0u)))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)) ^ 0u), ~ (~ (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)) ^ 0u)))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)) ^ 0u), ~ (~ (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)) ^ 0u)))))))) ^ 0u)) | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)) ^ 0u), ~ (~ (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)) ^ 0u)))))))))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)) ^ 0u), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)) ^ 0u)), (~ (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)) ^ 0u))) - 0u))), max(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size) ^ 0u, (_GLF_IDENTITY((subgroup_size), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((subgroup_size), uint(uvec4((subgroup_size), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))))), 0u | (~ (_GLF_IDENTITY((subgroup_size), uint(uvec4((subgroup_size), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))))))))) ^ 0u) / 1u))) ^ 0u), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)) ^ 0u), max(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)) ^ 0u, clamp((_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)) ^ 0u, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)) ^ 0u, 0u + ((_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)) ^ 0u)), (_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)) ^ 0u))), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)) ^ 0u, clamp((_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)) ^ 0u, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)) ^ 0u, 0u + ((_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)) ^ 0u)), (_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)) ^ 0u))), (true ? _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)) ^ 0u, clamp((_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)) ^ 0u, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)) ^ 0u, 0u + ((_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size), ~ (~ ((subgroup_size)))) ^ 0u)) ^ 0u)), (_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)) ^ 0u))) : _GLF_FUZZED(uvec3(151428u, 169971u, 176237u).x)))) + (42819u & (0u >> _GLF_IDENTITY(uint(4u), uint(4u))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)) ^ 0u), ~ (~ (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)) ^ 0u)))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)) ^ 0u), ~ (~ (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)) ^ 0u)))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)) ^ 0u), ~ (~ (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)) ^ 0u)))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)) ^ 0u), ~ (~ (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)) ^ 0u)))))))) ^ 0u)) | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)) ^ 0u), ~ (~ (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)) ^ 0u)))))))))))), (true ? (subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u) : _GLF_FUZZED(atomicMax(workgroup_size, _GLF_IDENTITY(187105u, 0u + (_GLF_IDENTITY(_GLF_IDENTITY(187105u, (187105u) | (187105u)), 0u + (_GLF_IDENTITY(187105u, _GLF_IDENTITY(uint(uvec2(187105u, 1u)), max(uint(uvec2(187105u, 1u)), uint(uvec2(187105u, 1u))))))))))))));
 uint read = atomicLoad(buf[virtual_gid], 4, _GLF_IDENTITY(64, int(int(64))), 0);
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, (_GLF_IDENTITY((false) && true, ((false) && true) && true)) && true))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(1, 0 + (1))), 4, _GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(-49445))), 4);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(false, bool(bool(false))) || (injectionSwitch.x > injectionSwitch.y))))))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_DEAD(false))
      barrier();
    }
   barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_IDENTITY(_GLF_IDENTITY(true, (true) && true), bool(_GLF_IDENTITY(bvec2(true, _GLF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY((true), bool(_GLF_IDENTITY(bvec2((true), true), bvec2(bvec4(bvec2((true), true), true, true))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).y))), bvec2(bvec3(bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true))))), true)))))
    return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (_GLF_IDENTITY(! _GLF_IDENTITY((! (_GLF_DEAD(false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((! (_GLF_DEAD(false))), (_GLF_IDENTITY((! (_GLF_DEAD(false))), ((! (_GLF_DEAD(false)))) && true)) || false)), bool(bvec2(! (_GLF_IDENTITY((! (_GLF_DEAD(false))), (_GLF_IDENTITY((! (_GLF_DEAD(false))), ((! (_GLF_DEAD(false)))) && true)) || false)), true))))), bool(bvec4(! (! (_GLF_DEAD(false))), false, false, true))))))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
    barrier();
   return;
  }
 if(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1 < _GLF_IDENTITY(subgroup_size, (subgroup_size) | 0u), (_GLF_IDENTITY(subgroup_local_id + 1 < subgroup_size, bool(bvec4(_GLF_IDENTITY(subgroup_local_id + 1 < subgroup_size, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(subgroup_local_id + 1 < subgroup_size, (_GLF_IDENTITY(subgroup_local_id + 1 < subgroup_size, (subgroup_local_id + 1 < subgroup_size) && true)) && true), false)), ! (! (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(subgroup_local_id + 1 < subgroup_size, (_GLF_IDENTITY(subgroup_local_id + 1 < subgroup_size, (subgroup_local_id + 1 < subgroup_size) && true)) && true), false)), (bool(bvec2(_GLF_IDENTITY(subgroup_local_id + 1 < subgroup_size, (_GLF_IDENTITY(subgroup_local_id + 1 < subgroup_size, (subgroup_local_id + 1 < subgroup_size) && true)) && true), false))) && true))))), false, false, true)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(subgroup_local_id + 1 < subgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) >> 0u), 0u, 0u, 0u)), uint(uvec4(uint(uvec4(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) >> 0u), 0u, 0u, 0u)), 1u, 0u, 0u)))) + _GLF_IDENTITY(1, clamp(1, 1, 1)) < subgroup_size, bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1 < subgroup_size, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(subgroup_local_id + 1 < subgroup_size, (subgroup_local_id + 1 < subgroup_size) || false))), bool(bvec2(_GLF_IDENTITY(subgroup_local_id + 1 < subgroup_size, (subgroup_local_id + 1 < subgroup_size) && true), false))), false, false, true)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0)) / 1.0) > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(8.9)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   atomicStore(checker[virtual_gid], _GLF_IDENTITY(read, (read) * 1u), 4, 64, 4);
   subgroupAll(false);
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   atomicStore(buf[virtual_gid], read, 4, 64, 4);
   if(_GLF_DEAD(false))
    return;
   subgroupAll(_GLF_IDENTITY(true, true && (true)));
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
        return;
       barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mix(vec2((injectionSwitch)[0], _GLF_FUZZED(9.0)), vec2(_GLF_FUZZED(-1990.8292), (injectionSwitch)[1]), bvec2(_GLF_IDENTITY(false, (false) || false), true)), (mix(vec2((injectionSwitch)[0], _GLF_FUZZED(9.0)), vec2(_GLF_FUZZED(-1990.8292), (injectionSwitch)[1]), bvec2(_GLF_IDENTITY(false, (false) || false), true))) / vec2(1.0, 1.0))).x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true)))))) && true)))
  barrier();
}
