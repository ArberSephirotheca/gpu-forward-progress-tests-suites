#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
uint subgroup_size = 16;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) ^ 0)), int(ivec2(0 >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) ^ 0)), 0))))), false || (_GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY((_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) ^ 0)), (0 >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) ^ 0))) | (0 >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) ^ 0))))), ((0 >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) ^ 0)))) | ((0 >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) ^ 0)))))))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(mat2(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).x, 1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 0.0))), mix(float(_GLF_FUZZED(-507.373)), float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / round(length(normalize(1.0))))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
    }
  }
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups, max(_GLF_IDENTITY(gl_NumWorkGroups, (true ? _GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], gl_NumWorkGroups[2])) : _GLF_FUZZED((159873u * uvec3(107304u, 11732u, 46032u))))), gl_NumWorkGroups)).x;
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(93.64)), float(injectionSwitch.y), bool(true))), mix(float(injectionSwitch.y), float(_GLF_FUZZED(-895.625)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))), bool(bvec3(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(6.9), _GLF_FUZZED(6.9)), bvec2(false, false))).x, exp(log(1.0)) * (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(3.2)), _GLF_IDENTITY(bool(false), (bool(false)) || false))))) > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], max(injectionSwitch[1], _GLF_IDENTITY(injectionSwitch[1], min(injectionSwitch[1], injectionSwitch[1])))))), injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))).y), true && ((_GLF_IDENTITY(injectionSwitch.x, exp(log(1.0)) * (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(3.2)), _GLF_IDENTITY(bool(false), (bool(false)) || false))))) > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(clamp(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], max(injectionSwitch[1], _GLF_IDENTITY(injectionSwitch[1], min(injectionSwitch[1], injectionSwitch[1])))))), injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0))), vec2(_GLF_IDENTITY(vec2(_GLF_IDENTITY(clamp(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], max(injectionSwitch[1], _GLF_IDENTITY(injectionSwitch[1], min(injectionSwitch[1], injectionSwitch[1])))))), injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0))), (clamp(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], max(injectionSwitch[1], _GLF_IDENTITY(injectionSwitch[1], min(injectionSwitch[1], injectionSwitch[1])))))), injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))) * mat2(1.0))), (vec2(_GLF_IDENTITY(clamp(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], max(injectionSwitch[1], _GLF_IDENTITY(injectionSwitch[1], min(injectionSwitch[1], injectionSwitch[1])))))), injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0))), (clamp(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], max(injectionSwitch[1], _GLF_IDENTITY(injectionSwitch[1], min(injectionSwitch[1], injectionSwitch[1])))))), injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))) * mat2(1.0)))) / vec2(1.0, 1.0))))).y)))), false, _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! _GLF_IDENTITY((false), false || ((false)))) || false))))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
      }
     else
      {
       return;
      }
    }
   if(_GLF_DEAD(false))
    continue;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec3(true, false, true)))) && true), (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))) * vec2(1.0, 1.0)), injectionSwitch, injectionSwitch)).y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, ! (! (false)))))), (_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, ! (! (false))))))) || false)), false))), false || (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, ! (! (false))))))), false))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat2x3(injectionSwitch.x, sqrt(1.0), 0.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y)))) > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))
        {
        }
       else
        {
         do
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, true, false))))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
              {
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0), injectionSwitch.x)) > injectionSwitch.y))))
                {
                }
               else
                {
                 return;
                }
              }
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               return;
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
      }
     do
      {
       if(_GLF_DEAD(false))
        return;
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y))))
        {
         if(_GLF_DEAD(false))
          continue;
         continue;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec2(false, true)))) && true, bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec2(false, true)))) && true, bool(bvec2((_GLF_IDENTITY(false, bool(bvec2(false, true)))) && true, true))), true, false, _GLF_IDENTITY(true, true && (true)))))), (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), false, false))), true, false)))))) && true), (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(false, true)))) && true), (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(false, bool(bool(false))) || (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(false, true)))) && true), (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(false, ! (! (false)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
            {
            }
           else
            {
             return;
            }
          }
         else
          {
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         else
          {
          }
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
    }
  }
 else
  {
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y))))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))), true, true, true)))))))
  return;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 uint workgroup_base = _GLF_IDENTITY(workgroup_size * _GLF_IDENTITY(workgroup_id, (workgroup_id) | 0u), _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(workgroup_size * workgroup_id, (_GLF_IDENTITY(workgroup_size, clamp(workgroup_size, workgroup_size, _GLF_IDENTITY(workgroup_size, (workgroup_size) ^ 0u))) * workgroup_id) | (workgroup_size * workgroup_id))), min(uint(_GLF_IDENTITY(workgroup_size * workgroup_id, (workgroup_size * workgroup_id) | (workgroup_size * workgroup_id))), uint(_GLF_IDENTITY(workgroup_size * workgroup_id, _GLF_IDENTITY((workgroup_size * workgroup_id), clamp((workgroup_size * workgroup_id), (workgroup_size * workgroup_id), (workgroup_size * workgroup_id))) | (workgroup_size * workgroup_id)))))), max(_GLF_IDENTITY(_GLF_IDENTITY(uint(uint(workgroup_size * workgroup_id)), (uint(uint(workgroup_size * workgroup_id))) | 0u), (_GLF_IDENTITY(uint(uint(workgroup_size * workgroup_id)), (uint(uint(workgroup_size * workgroup_id))) | 0u)) >> 0u), uint(uint(workgroup_size * workgroup_id)))));
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false))))), bool(bvec4(false, false, false, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), clamp((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0))), min(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), clamp((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0))), _GLF_IDENTITY((injectionSwitch) * mat2(1.0), clamp((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0)))))).y)))))), true, true, false)), ! (! (bool(bvec4(_GLF_DEAD(false), true, true, false)))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat2x3(injectionSwitch.y, _GLF_IDENTITY(dot(vec3(1.0, 0.0, log(1.0)), vec3(1.0, tan(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)))), dot(vec3(1.0, 0.0, log(1.0)), vec3(1.0, tan(0.0), length(vec4(0.0, 0.0, 0.0, 0.0))))), 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))), determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0)), 0.0)), clamp(float(mat2x3(injectionSwitch.y, _GLF_IDENTITY(dot(vec3(1.0, 0.0, log(1.0)), vec3(1.0, tan(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)))), dot(vec3(1.0, 0.0, log(1.0)), vec3(1.0, tan(0.0), length(vec4(0.0, 0.0, 0.0, 0.0))))), 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))), determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0)), 0.0)), float(mat2x3(injectionSwitch.y, _GLF_IDENTITY(dot(vec3(1.0, 0.0, log(1.0)), vec3(1.0, tan(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)))), dot(vec3(1.0, 0.0, log(1.0)), vec3(1.0, tan(0.0), length(vec4(0.0, 0.0, 0.0, 0.0))))), 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))), determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0)), 0.0)), float(mat2x3(injectionSwitch.y, _GLF_IDENTITY(dot(vec3(1.0, 0.0, log(1.0)), vec3(1.0, tan(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)))), dot(vec3(1.0, 0.0, log(1.0)), vec3(1.0, tan(0.0), length(vec4(0.0, 0.0, 0.0, 0.0))))), 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))), determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0)), 0.0))))))))))), true, true, false)), ! (! (bool(bvec4(_GLF_DEAD(false), _GLF_IDENTITY(true, false || (true)), true, _GLF_IDENTITY(false, ! (! (false))))))))))), _GLF_IDENTITY(bool(bvec4((! (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat2x3(injectionSwitch.y, _GLF_IDENTITY(dot(vec3(1.0, 0.0, log(1.0)), vec3(1.0, tan(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)))), dot(vec3(1.0, 0.0, log(1.0)), vec3(1.0, tan(0.0), length(vec4(0.0, 0.0, 0.0, 0.0))))), 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))), determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0)), 0.0)), clamp(float(mat2x3(injectionSwitch.y, _GLF_IDENTITY(dot(vec3(1.0, 0.0, log(1.0)), vec3(1.0, tan(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)))), dot(vec3(1.0, 0.0, log(1.0)), vec3(1.0, tan(0.0), length(vec4(0.0, 0.0, 0.0, 0.0))))), 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))), determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0)), 0.0)), float(mat2x3(injectionSwitch.y, _GLF_IDENTITY(dot(vec3(1.0, 0.0, log(1.0)), vec3(1.0, tan(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)))), dot(vec3(1.0, 0.0, log(1.0)), vec3(1.0, tan(0.0), length(vec4(0.0, 0.0, 0.0, 0.0))))), 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))), determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0)), 0.0)), float(mat2x3(injectionSwitch.y, _GLF_IDENTITY(dot(vec3(1.0, 0.0, log(1.0)), vec3(1.0, tan(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)))), dot(vec3(1.0, 0.0, log(1.0)), vec3(1.0, tan(0.0), length(vec4(0.0, 0.0, 0.0, 0.0))))), 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))), determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0)), 0.0))))))))))), true, true, false)), ! (! (bool(bvec4(_GLF_DEAD(false), _GLF_IDENTITY(true, false || (true)), true, _GLF_IDENTITY(false, ! (! (false))))))))))), false, _GLF_IDENTITY(true, true && (true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(bool(bool(bool(bvec4((! (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat2x3(injectionSwitch.y, _GLF_IDENTITY(dot(vec3(1.0, 0.0, log(1.0)), vec3(1.0, tan(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)))), dot(vec3(1.0, 0.0, log(1.0)), vec3(1.0, tan(0.0), length(vec4(0.0, 0.0, 0.0, 0.0))))), 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))), determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0)), 0.0)), clamp(float(mat2x3(injectionSwitch.y, _GLF_IDENTITY(dot(vec3(1.0, 0.0, log(1.0)), vec3(1.0, tan(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)))), dot(vec3(1.0, 0.0, log(1.0)), vec3(1.0, tan(0.0), length(vec4(0.0, 0.0, 0.0, 0.0))))), 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))), determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0)), 0.0)), float(mat2x3(injectionSwitch.y, _GLF_IDENTITY(dot(vec3(1.0, 0.0, log(1.0)), vec3(1.0, tan(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)))), dot(vec3(1.0, 0.0, log(1.0)), vec3(1.0, tan(0.0), length(vec4(0.0, 0.0, 0.0, 0.0))))), 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))), determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0)), 0.0)), float(mat2x3(injectionSwitch.y, _GLF_IDENTITY(dot(vec3(1.0, 0.0, log(1.0)), vec3(1.0, tan(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)))), dot(vec3(1.0, 0.0, log(1.0)), vec3(1.0, tan(0.0), length(vec4(0.0, 0.0, 0.0, 0.0))))), 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))), determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0)), 0.0))))))))))), true, true, false)), ! (! (bool(bvec4(_GLF_DEAD(false), _GLF_IDENTITY(true, false || (true)), true, _GLF_IDENTITY(false, ! (! (false))))))))))), false, _GLF_IDENTITY(true, true && (true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), (bool(bool(bool(bvec4((! (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat2x3(injectionSwitch.y, _GLF_IDENTITY(dot(vec3(1.0, 0.0, log(1.0)), vec3(1.0, tan(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)))), dot(vec3(1.0, 0.0, log(1.0)), vec3(1.0, tan(0.0), length(vec4(0.0, 0.0, 0.0, 0.0))))), 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))), determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0)), 0.0)), clamp(float(mat2x3(injectionSwitch.y, _GLF_IDENTITY(dot(vec3(1.0, 0.0, log(1.0)), vec3(1.0, tan(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)))), dot(vec3(1.0, 0.0, log(1.0)), vec3(1.0, tan(0.0), length(vec4(0.0, 0.0, 0.0, 0.0))))), 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))), determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0)), 0.0)), float(mat2x3(injectionSwitch.y, _GLF_IDENTITY(dot(vec3(1.0, 0.0, log(1.0)), vec3(1.0, tan(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)))), dot(vec3(1.0, 0.0, log(1.0)), vec3(1.0, tan(0.0), length(vec4(0.0, 0.0, 0.0, 0.0))))), 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))), determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0)), 0.0)), float(mat2x3(injectionSwitch.y, _GLF_IDENTITY(dot(vec3(1.0, 0.0, log(1.0)), vec3(1.0, tan(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)))), dot(vec3(1.0, 0.0, log(1.0)), vec3(1.0, tan(0.0), length(vec4(0.0, 0.0, 0.0, 0.0))))), 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))), determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0)), 0.0))))))))))), true, true, false)), ! (! (bool(bvec4(_GLF_DEAD(false), _GLF_IDENTITY(true, false || (true)), true, _GLF_IDENTITY(false, ! (! (false))))))))))), false, _GLF_IDENTITY(true, true && (true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) || false))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! ((! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec2(bvec2(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))))))), true, true, false)), ! (! (bool(bvec4(_GLF_DEAD(false), true, true, false)))))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec2(bvec2(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))))))), true, true, false)), ! (! (bool(bvec4(_GLF_DEAD(false), true, true, false)))))), false || (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec2(bvec2(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))))))), true, true, false)), ! (! (bool(bvec4(_GLF_DEAD(false), true, true, false)))))))), true, true)))))), false || (! ((! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, _GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))) + sqrt(0.0)))))))), true, true, false)), ! (! (bool(bvec4(_GLF_DEAD(false), true, true, _GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), (_GLF_IDENTITY(bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false))), false, false, _GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true))), (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], 1.0 * (_GLF_IDENTITY(injectionSwitch[0], min(injectionSwitch[0], injectionSwitch[0])))), injectionSwitch[1])).x > injectionSwitch.y)), false || (_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), _GLF_IDENTITY(bvec2(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), true)), bvec2(bvec2(bvec2(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), true))))))), true && (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), _GLF_IDENTITY(bvec2(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), true)), bvec2(bvec2(bvec2(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), true))))))), (bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), _GLF_IDENTITY(bvec2(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), true)), bvec2(bvec2(bvec2(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), true)))))))) && true))))), true))), (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], 1.0 * _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch[0], min(injectionSwitch[0], injectionSwitch[0]))), max((_GLF_IDENTITY(injectionSwitch[0], min(injectionSwitch[0], injectionSwitch[0]))), (_GLF_IDENTITY(injectionSwitch[0], min(injectionSwitch[0], injectionSwitch[0])))))), injectionSwitch[1])).x > injectionSwitch.y)))))))), true, true, false)), ! (! (bool(bvec4(_GLF_DEAD(false), true, true, false)))))) && _GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), ((_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, _GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false))), _GLF_IDENTITY(true, false || (true))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], mix(float(injectionSwitch[0]), float(_GLF_FUZZED(-3.3)), bool(false))), injectionSwitch[1])).y)))))), true, true, false)), ! (! (bool(bvec4(_GLF_DEAD(false), true, true, false))))), (_GLF_IDENTITY(bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0))), true, false))), false, false, _GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bvec2(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true))), (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], 1.0 * (_GLF_IDENTITY(injectionSwitch[0], min(injectionSwitch[0], injectionSwitch[0])))), injectionSwitch[1])).x > injectionSwitch.y)))))), true, true, false)), ! (! (bool(bvec4(_GLF_DEAD(false), true, true, false)))))) && true)))) || false))))), (! ((! (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y)))))), true, true, false)), ! (! (bool(bvec4(_GLF_DEAD(false), true, true, false)))))))))) && _GLF_IDENTITY(true, (_GLF_IDENTITY(true, _GLF_IDENTITY(true, false || (true)) && (true))) && true)))))))))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), min(int(_GLF_IDENTITY(2, _GLF_IDENTITY((2), ((2)) * 1) | (_GLF_IDENTITY(2, clamp(2, 2, 2))))), int(2))))), (((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), min(int(_GLF_IDENTITY(2, _GLF_IDENTITY((2), ((2)) * 1) | (_GLF_IDENTITY(2, clamp(2, 2, 2))))), int(2)))))) * 1)); _GLF_IDENTITY(_injected_loop_counter ++, (_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) >> _GLF_IDENTITY(0, (0) / int(_GLF_ONE(1.0, injectionSwitch.y))))) >> 0))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
      }
    }
  }
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), 0u ^ ((subgroup_local_id + 1))), ((subgroup_local_id + 1)) - 0u) % subgroup_size), _GLF_IDENTITY(_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, (0u) / 1u), 0u, 0u)), 0u)), uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, (0u) / 1u), 0u, 0u)), 0u)), _GLF_IDENTITY((_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, (0u) / 1u), 0u, 0u)), 0u))), ~ (~ ((_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, (0u) / 1u), 0u, 0u)), 0u)))))) >> 0u)))) + (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1), _GLF_IDENTITY(((subgroup_local_id + 1)), (((subgroup_local_id + 1))) - 0u) - 0u) % subgroup_size), min((_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) - 0u) % subgroup_size), (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) - 0u) % subgroup_size))), uint(uvec2(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1), ((_GLF_IDENTITY(subgroup_local_id, 0u | _GLF_IDENTITY((subgroup_local_id), clamp((subgroup_local_id), (subgroup_local_id), _GLF_IDENTITY((subgroup_local_id), max((subgroup_local_id), (subgroup_local_id)))))) + 1)) - 0u) % subgroup_size), _GLF_IDENTITY(min((_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) - 0u) % subgroup_size), (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) - 0u) % subgroup_size)), (_GLF_IDENTITY(min((_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) - 0u) % subgroup_size), (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) - 0u) % subgroup_size)), clamp(_GLF_IDENTITY(min((_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) - 0u) % subgroup_size), (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) - 0u) % subgroup_size)), min(min((_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) - 0u) % subgroup_size), (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) - 0u) % subgroup_size)), min((_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) - 0u) % subgroup_size), (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) - 0u) % subgroup_size)))), min((_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) - 0u) % subgroup_size), (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) - 0u) % subgroup_size)), min((_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) - 0u) % subgroup_size), (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) - 0u) % subgroup_size))))) | (min((_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) - 0u) % subgroup_size), (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) - 0u) % subgroup_size))))), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1), ((_GLF_IDENTITY(subgroup_local_id, 0u | _GLF_IDENTITY((subgroup_local_id), clamp((subgroup_local_id), (subgroup_local_id), _GLF_IDENTITY((subgroup_local_id), max((subgroup_local_id), (subgroup_local_id)))))) + 1)) - 0u) % subgroup_size), _GLF_IDENTITY(min((_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) - 0u) % subgroup_size), (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) - 0u) % subgroup_size)), (_GLF_IDENTITY(min((_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) - 0u) % subgroup_size), (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) - 0u) % subgroup_size)), clamp(_GLF_IDENTITY(min((_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) - 0u) % subgroup_size), (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) - 0u) % subgroup_size)), min(min((_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) - 0u) % subgroup_size), (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) - 0u) % subgroup_size)), min((_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) - 0u) % subgroup_size), (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) - 0u) % subgroup_size)))), min((_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) - 0u) % subgroup_size), (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) - 0u) % subgroup_size)), min((_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) - 0u) % subgroup_size), (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) - 0u) % subgroup_size))))) | (min((_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) - 0u) % subgroup_size), (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) - 0u) % subgroup_size))))), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u, 1u), (uvec4(_GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1), ((_GLF_IDENTITY(subgroup_local_id, 0u | _GLF_IDENTITY((subgroup_local_id), clamp((subgroup_local_id), (subgroup_local_id), _GLF_IDENTITY((subgroup_local_id), max((subgroup_local_id), (subgroup_local_id)))))) + 1)) - 0u) % subgroup_size), _GLF_IDENTITY(min((_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) - 0u) % subgroup_size), (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) - 0u) % subgroup_size)), (_GLF_IDENTITY(min((_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) - 0u) % subgroup_size), (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) - 0u) % subgroup_size)), clamp(_GLF_IDENTITY(min((_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) - 0u) % subgroup_size), (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) - 0u) % subgroup_size)), min(min((_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) - 0u) % subgroup_size), (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) - 0u) % subgroup_size)), min((_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) - 0u) % subgroup_size), (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) - 0u) % subgroup_size)))), min((_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) - 0u) % subgroup_size), (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) - 0u) % subgroup_size)), min((_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) - 0u) % subgroup_size), (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) - 0u) % subgroup_size))))) | (min((_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) - 0u) % subgroup_size), (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) - 0u) % subgroup_size))))), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u, 1u)) | uvec4(0u, 0u, 0u, 0u))), (uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1), ((_GLF_IDENTITY(subgroup_local_id, 0u | _GLF_IDENTITY((subgroup_local_id), clamp((subgroup_local_id), (subgroup_local_id), _GLF_IDENTITY((subgroup_local_id), max((subgroup_local_id), (subgroup_local_id)))))) + 1)) - 0u) % subgroup_size), _GLF_IDENTITY(min((_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) - 0u) % subgroup_size), (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) - 0u) % subgroup_size)), (_GLF_IDENTITY(min((_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) - 0u) % subgroup_size), (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) - 0u) % subgroup_size)), clamp(_GLF_IDENTITY(min((_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) - 0u) % subgroup_size), (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) - 0u) % subgroup_size)), min(min((_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) - 0u) % subgroup_size), (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) - 0u) % subgroup_size)), min((_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) - 0u) % subgroup_size), (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) - 0u) % subgroup_size)))), min((_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) - 0u) % subgroup_size), (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) - 0u) % subgroup_size)), min((_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) - 0u) % subgroup_size), (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) - 0u) % subgroup_size))))) | (min((_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) - 0u) % subgroup_size), (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) - 0u) % subgroup_size))))), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u, 1u), (uvec4(_GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1), ((_GLF_IDENTITY(subgroup_local_id, 0u | _GLF_IDENTITY((subgroup_local_id), clamp((subgroup_local_id), (subgroup_local_id), _GLF_IDENTITY((subgroup_local_id), max((subgroup_local_id), (subgroup_local_id)))))) + 1)) - 0u) % subgroup_size), _GLF_IDENTITY(min((_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) - 0u) % subgroup_size), (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) - 0u) % subgroup_size)), (_GLF_IDENTITY(min((_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) - 0u) % subgroup_size), (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) - 0u) % subgroup_size)), clamp(_GLF_IDENTITY(min((_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) - 0u) % subgroup_size), (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) - 0u) % subgroup_size)), min(min((_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) - 0u) % subgroup_size), (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) - 0u) % subgroup_size)), min((_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) - 0u) % subgroup_size), (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) - 0u) % subgroup_size)))), min((_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) - 0u) % subgroup_size), (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) - 0u) % subgroup_size)), min((_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) - 0u) % subgroup_size), (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) - 0u) % subgroup_size))))) | (min((_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) - 0u) % subgroup_size), (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) - 0u) % subgroup_size))))), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u, 1u)) | uvec4(0u, 0u, 0u, 0u)))) - 0u)), _GLF_IDENTITY(0u, (0u) / 1u))))));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY((false), true && ((false))) || false, (_GLF_IDENTITY((false), true && ((false))) || _GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false))))), false || (_GLF_IDENTITY(false, false || (false))))) && true))))
    return;
  }
 else
  {
  }
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(normalize(injectionSwitch)) : injectionSwitch)).y), float(_GLF_FUZZED((- -0.3))), bool(false)))))))
  {
  }
 else
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (-60329 & 0)); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) / 1))
    {
     do
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false)), false || (bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false))))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false)), false || (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false)), (bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false))) && true))))) && true), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false)), false || (bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, bool(bvec3(false, false, true))), false, true))), (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false)))))) && true)));
    }
   if(_GLF_DEAD(false))
    return;
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) | (_GLF_IDENTITY(next_virtual_gid, (0u ^ 0u) ^ (_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) << 0u)))))], uint(_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-67585) : 1)), clamp(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-67585) : 1)), _GLF_IDENTITY(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-67585) : 1)), max(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-67585) : 1)), _GLF_IDENTITY(1, (false ? _GLF_FUZZED(-67585) : 1)))), _GLF_IDENTITY(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-67585) : 1)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-67585) : 1)), (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-67585) : 1))) - 0), _GLF_IDENTITY(1, (false ? _GLF_FUZZED(-67585) : 1)), _GLF_IDENTITY(1, (false ? _GLF_FUZZED(-67585) : 1))))))))), 4, _GLF_IDENTITY(64, clamp(_GLF_IDENTITY(64, (_GLF_IDENTITY(64, (64) ^ 0)) ^ 0), 64, _GLF_IDENTITY(64, 0 + (64)))), _GLF_IDENTITY(4, (4) << 0));
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))));
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
    return;
  }
 do
  {
   if(_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec4(1, 1, 1, _GLF_IDENTITY(0, (0) << ((1 ^ 1) << _GLF_IDENTITY(int(3), int(3)))))), 1 * (_GLF_IDENTITY(int(ivec4(1, 1, 1, 0)), int(_GLF_IDENTITY(ivec3(int(ivec4(1, 1, 1, 0)), 1, 1), min(ivec3(int(ivec4(1, 1, 1, 0)), 1, 1), _GLF_IDENTITY(ivec3(int(ivec4(1, 1, 1, 0)), 1, 1), (ivec3(int(ivec4(1, 1, 1, 0)), 1, 1)) >> ivec3(0, 0, _GLF_IDENTITY(0, clamp(0, 0, 0))))))))))), _GLF_IDENTITY(max(subgroup_local_id + 1, subgroup_local_id + 1), (_GLF_IDENTITY(max(subgroup_local_id + 1, subgroup_local_id + 1), _GLF_IDENTITY(0u | (_GLF_IDENTITY(max(subgroup_local_id + 1, subgroup_local_id + 1), clamp(max(subgroup_local_id + 1, subgroup_local_id + 1), _GLF_IDENTITY(max(subgroup_local_id + 1, subgroup_local_id + 1), min(max(subgroup_local_id + 1, subgroup_local_id + 1), _GLF_IDENTITY(max(subgroup_local_id + 1, subgroup_local_id + 1), 0u | (max(subgroup_local_id + 1, subgroup_local_id + 1))))), max(subgroup_local_id + 1, subgroup_local_id + 1)))), (0u | (_GLF_IDENTITY(max(subgroup_local_id + 1, subgroup_local_id + 1), clamp(max(subgroup_local_id + 1, subgroup_local_id + 1), max(subgroup_local_id + 1, subgroup_local_id + 1), max(subgroup_local_id + 1, subgroup_local_id + 1))))) ^ 0u))) >> 0u)) < subgroup_size)
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(float(-54675)), _GLF_FUZZED(vec3(705.208, 942.039, -8668.6296).r)), bvec2(false, false))).x > injectionSwitch.y))));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
         if(_GLF_DEAD(false))
          break;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     do
      {
       atomicStore(checker[virtual_gid], read, 4, 64, 4);
      }
     while(_GLF_WRAPPED_LOOP(false));
     for(int _injected_loop_counter = (0 | _GLF_IDENTITY(0, (0) ^ 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 | 1)); _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         do
          {
           for(int _injected_loop_counter = (((0 | _GLF_IDENTITY(1, max(1, 1))) << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), max(int(0), int(0))))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | _GLF_IDENTITY(_GLF_IDENTITY(0, (0) >> 0), (0) | 0))); _injected_loop_counter --)
            {
             subgroupAll(false);
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
    }
   else
    {
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(_GLF_IDENTITY(3, clamp(3, 3, 3))), max(int(3), int(3)))))); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(false, _GLF_IDENTITY((false), _GLF_IDENTITY(bool(bool((false))), (bool(bool((false)))) && true)) && true)), false || (! (_GLF_IDENTITY(false, (false) && true)))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), false || (! (_GLF_IDENTITY(false, (false) && true)))), true, _GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec4(false, true, _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))), false))))), (false) || false), false)), (bool(bvec4(_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), false || (! (_GLF_IDENTITY(false, (false) && true)))), true, _GLF_IDENTITY(false, (false) || false), false))) || false))))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(_GLF_IDENTITY(bvec3(bvec2(false, false), true), bvec3(bvec4(bvec3(bvec2(false, false), true), false)))))))))
          {
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch)).y, (true ? _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch)).y : _GLF_FUZZED(7.4))))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > ((0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(8, 0 | (8))), int(8))) >> _GLF_IDENTITY(int(7), int(7)))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > ((0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(8, 0 | (8))), int(8))) >> _GLF_IDENTITY(int(7), int(7))))))); _injected_loop_counter --)
            {
             return;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        continue;
       atomicStore(buf[virtual_gid], _GLF_IDENTITY(read, _GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (read), 0u ^ (~ (read))), max(~ (read), ~ _GLF_IDENTITY((read), ~ (~ (_GLF_IDENTITY((read), ~ (_GLF_IDENTITY(~ _GLF_IDENTITY(((read)), uint(uvec3(_GLF_IDENTITY(((read)), (_GLF_IDENTITY(((read)), uint(uvec2(((read)), 0u)))) * 1u), 1u, 1u))), (~ ((read))) | (~ ((read)))))))))))), ~ (_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(~ _GLF_IDENTITY((read), uint(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY((read), (_GLF_IDENTITY((read), ((read)) ^ 0u)) + 0u))), ~ (~ (_GLF_IDENTITY(~ (read), (~ (read)) | 0u)))), max(~ (read), ~ (read))))), (_GLF_IDENTITY(~ _GLF_IDENTITY((~ (_GLF_IDENTITY(~ (read), max(~ (_GLF_IDENTITY(read, (read) | 0u)), ~ (read))))), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))) + 0.0))) ? _GLF_FUZZED(subgroup_local_id) : (~ (_GLF_IDENTITY(~ (read), max(~ (read), ~ _GLF_IDENTITY((read), ((read)) << 0u))))))), (false ? _GLF_FUZZED(workgroup_id) : ~ (~ (_GLF_IDENTITY(~ (read), _GLF_IDENTITY(max(~ (read), ~ (read)), uint(uvec2(max(_GLF_IDENTITY(~ (read), uint(uvec2(~ (read), 0u))), ~ (read)), 1u))))))))) | 0u))), ~ _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(~ _GLF_IDENTITY((read), clamp(_GLF_IDENTITY((_GLF_IDENTITY(read, max(read, read))), 1u * ((_GLF_IDENTITY(read, max(read, read))))), (read), (_GLF_IDENTITY(read, max(read, _GLF_IDENTITY(read, min(read, _GLF_IDENTITY(read, max(read, read))))))))), max(~ (read), ~ (read))), 0u ^ (_GLF_IDENTITY(~ _GLF_IDENTITY((read), clamp(_GLF_IDENTITY((_GLF_IDENTITY(read, max(read, read))), 1u * ((_GLF_IDENTITY(read, max(read, read))))), (read), (_GLF_IDENTITY(read, max(read, _GLF_IDENTITY(read, min(read, _GLF_IDENTITY(read, max(read, read))))))))), max(~ (read), ~ (read)))))), ~ (~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (read), _GLF_IDENTITY(max(~ (read), ~ (read)), uint(uint(max(~ (read), ~ (read))))))), (~ (_GLF_IDENTITY(~ (read), max(~ _GLF_IDENTITY((read), (_GLF_IDENTITY((read), (_GLF_IDENTITY((read), max((read), (read)))) - 0u)) << 0u), ~ (read))))) ^ 0u))))), ~ (~ (~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ _GLF_IDENTITY((read), clamp((read), (read), (_GLF_IDENTITY(read, max(read, read))))), _GLF_IDENTITY(max(~ (read), ~ (read)), (max(~ (read), ~ (read))) | (max(~ (read), ~ (read)))))), ~ (~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (read), max(~ (read), ~ (read))), 0u ^ (_GLF_IDENTITY(~ (read), max(~ (read), ~ _GLF_IDENTITY((read), ~ (~ ((read))))))))), _GLF_IDENTITY((~ (_GLF_IDENTITY(~ (read), max(~ (read), ~ (read))))) ^ 0u, ((~ (_GLF_IDENTITY(~ (read), max(~ (read), ~ (read))))) ^ 0u) + 0u)))))))))), ~ (~ ((_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(~ _GLF_IDENTITY((read), clamp(_GLF_IDENTITY((_GLF_IDENTITY(read, max(read, read))), 1u * ((_GLF_IDENTITY(read, max(read, read))))), (read), (_GLF_IDENTITY(read, max(read, _GLF_IDENTITY(read, min(read, _GLF_IDENTITY(read, max(read, read))))))))), max(~ (read), ~ (read))), 0u ^ (_GLF_IDENTITY(~ _GLF_IDENTITY((read), clamp(_GLF_IDENTITY((_GLF_IDENTITY(read, max(read, read))), 1u * ((_GLF_IDENTITY(read, max(read, read))))), (read), (_GLF_IDENTITY(read, max(read, _GLF_IDENTITY(read, min(read, _GLF_IDENTITY(read, max(read, read))))))))), max(~ (read), ~ (read)))))), ~ (~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (read), _GLF_IDENTITY(max(~ (read), ~ (read)), uint(uint(max(~ (read), ~ (read))))))), (~ (_GLF_IDENTITY(~ (read), max(~ _GLF_IDENTITY((read), (_GLF_IDENTITY((read), (_GLF_IDENTITY((read), max((read), (read)))) - 0u)) << 0u), ~ (read))))) ^ 0u))))), ~ (~ (~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ _GLF_IDENTITY((read), clamp((read), (read), (_GLF_IDENTITY(read, max(read, read))))), _GLF_IDENTITY(max(~ (read), ~ (read)), (max(~ (read), ~ (read))) | (max(~ (read), ~ (read)))))), ~ (~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (read), max(~ (read), ~ (read))), 0u ^ (_GLF_IDENTITY(~ (read), max(~ (read), ~ _GLF_IDENTITY((read), ~ (~ ((read))))))))), _GLF_IDENTITY((~ (_GLF_IDENTITY(~ (read), max(~ (read), ~ (read))))) ^ 0u, ((~ (_GLF_IDENTITY(~ (read), max(~ (read), ~ (read))))) ^ 0u) + 0u))))))))))))), (_GLF_IDENTITY(true, ! (! (true))) ? (~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(read, (true ? _GLF_IDENTITY(read, (true ? read : _GLF_FUZZED(subgroup_local_id))) : _GLF_FUZZED(read)))), _GLF_IDENTITY(clamp((read), (read), (read)), min(clamp((read), (read), (read)), clamp((read), (read), (read))))), max(~ _GLF_IDENTITY((read), 0u | ((read))), ~ (read)))), ~ (~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (read), max(~ (read), ~ _GLF_IDENTITY((_GLF_IDENTITY(read, (read) / _GLF_IDENTITY(1u, 0u | (_GLF_IDENTITY(1u, min(_GLF_IDENTITY(1u, (1u) << 0u), 1u)))))), ~ (~ ((_GLF_IDENTITY(read, (read) / 1u)))))))), (~ (_GLF_IDENTITY(~ (read), max(~ (_GLF_IDENTITY(read, 0u ^ (_GLF_IDENTITY(read, clamp(read, _GLF_IDENTITY(read, _GLF_IDENTITY((read) << 0u, (true ? (read) << 0u : _GLF_FUZZED(workgroup_size)))), read))))), ~ (_GLF_IDENTITY(read, (read) >> 0u)))))) ^ 0u)))))) : _GLF_FUZZED(subgroup_local_id))))), 4, 64, 4);
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) || false)) && true, ! (_GLF_IDENTITY(! ((_GLF_WRAPPED_IF_FALSE(false)) && true), ! (! (! ((_GLF_WRAPPED_IF_FALSE(false)) && true))))))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         subgroupAll(true);
        }
       else
        {
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
}
