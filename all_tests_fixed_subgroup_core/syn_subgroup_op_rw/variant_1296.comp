#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(7, (_GLF_IDENTITY(7, (7) | int(_GLF_ZERO(0.0, injectionSwitch.x)))) | (_GLF_IDENTITY(7, (true ? 7 : _GLF_FUZZED(23462))))), (_GLF_IDENTITY(7, (_GLF_IDENTITY(7, (7) | int(_GLF_ZERO(0.0, injectionSwitch.x)))) | (_GLF_IDENTITY(7, (true ? 7 : _GLF_FUZZED(23462)))))) << int(_GLF_ZERO(0.0, injectionSwitch.x)))), int(7))), ~ (~ ((1 << _GLF_IDENTITY(int(7), int(7)))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(7, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(7, ~ (~ (7)))), ~ (~ (~ (_GLF_IDENTITY(7, ~ (~ (7)))))))))), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) + 0))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)), vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
  }
 uvec4 GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_size;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-8626.4259)), bool(false))) > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_injected_loop_counter != 0, (_injected_loop_counter != 0) || false)), ! (! (! (_GLF_IDENTITY(_injected_loop_counter != 0, (_injected_loop_counter != 0) || false)))))))); _injected_loop_counter --)
    {
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false)))))), false, true, false)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(false, false, true, false)), true && (_GLF_IDENTITY(bool(bvec4(false, false, true, false)), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(bool(bvec4(false, false, true, false)), true && (bool(bvec4(false, false, true, false)))))), false || (bool(bool(_GLF_IDENTITY(bool(bvec4(false, false, true, false)), true && (bool(bvec4(false, false, true, false))))))))))), (bool(bvec4(false, _GLF_IDENTITY(false, ! (! (false))), true, false))) && true)), ! (! ((_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(false, false, true, false)), true && (_GLF_IDENTITY(bool(bvec4(false, false, true, false)), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(bool(bvec4(false, false, true, false)), true && (bool(bvec4(false, false, true, false)))))), false || (bool(bool(_GLF_IDENTITY(bool(bvec4(false, false, true, false)), true && (bool(bvec4(false, false, true, false))))))))))), (bool(bvec4(false, _GLF_IDENTITY(false, ! (! (false))), true, false))) && true))))) && true), (_GLF_IDENTITY(bool(bvec4(false, false, true, false)), (_GLF_IDENTITY(bool(bvec4(false, false, true, false)), (bool(bvec4(false, false, true, false))) && true)) && true)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true)), _GLF_IDENTITY((bool(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(false, false, true, false)), (_GLF_IDENTITY(bool(bvec4(false, false, true, false)), (bool(bvec4(false, false, true, false))) && true)) && true), (_GLF_IDENTITY(bool(bvec4(false, false, true, false)), (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(false, false, true, false)), ! (! (bool(bvec4(false, false, true, false))))), (bool(bvec4(false, false, true, false))) && true)) && true)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true))), _GLF_IDENTITY(false || ((bool(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(false, false, true, false)), (_GLF_IDENTITY(bool(bvec4(false, false, true, false)), (bool(bvec4(false, false, true, false))) && true)) && true), (_GLF_IDENTITY(bool(bvec4(false, false, true, false)), (_GLF_IDENTITY(bool(bvec4(false, false, true, false)), (bool(bvec4(false, false, true, false))) && true)) && true)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true)))), bool(bvec4(false || ((bool(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(false, false, true, false)), (_GLF_IDENTITY(bool(bvec4(false, false, true, false)), (bool(bvec4(false, false, true, false))) && true)) && true), (_GLF_IDENTITY(bool(bvec4(false, false, true, false)), (_GLF_IDENTITY(bool(bvec4(false, false, true, false)), (bool(bvec4(false, false, true, false))) && true)) && true)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true)))), true, false, false)))) && true))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY((false) || false, (_GLF_IDENTITY((false) || false, false || ((false) || false))) && true), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((false) || false, _GLF_IDENTITY(! (! (_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))) || false, ! (_GLF_IDENTITY(! ((false) || false), (_GLF_IDENTITY(! ((false) || false), (! ((false) || false)) && true)) || false))))), ! (! (! (! (_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))) || false, ! (_GLF_IDENTITY(! ((false) || false), _GLF_IDENTITY((_GLF_IDENTITY(! ((false) || false), (! ((false) || false)) && true)) || false, true && ((_GLF_IDENTITY(_GLF_IDENTITY(! ((false) || false), (! ((false) || false)) || false), (! ((false) || false)) && true)) || false)))))))))))), ! (! (! (_GLF_IDENTITY((false) || _GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), true, true))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY((false) || false, ! (_GLF_IDENTITY(! ((false) || false), (_GLF_IDENTITY(! ((false) || false), _GLF_IDENTITY((! ((false) || _GLF_IDENTITY(false, (false) || false))), bool(bvec4((! ((false) || false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true)) || false))), bool(bool(_GLF_IDENTITY((false) || false, ! (_GLF_IDENTITY(! ((false) || false), (_GLF_IDENTITY(! ((false) || false), _GLF_IDENTITY((! ((false) || _GLF_IDENTITY(false, (false) || false))), bool(bvec4((! ((false) || false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true)) || false))))))))))))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
      {
      }
     else
      {
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat4x2(injectionSwitch.y, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0)), mix(float(float(mat4x2(injectionSwitch.y, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0))), float(_GLF_FUZZED(7817.0494)), bool(false))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))) - 0.0)))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 uvec2 GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size;
 if(_GLF_DEAD(false))
  return;
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      return;
    }
   return;
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY((_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), false || (! (! _GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true)), bool(_GLF_IDENTITY(bvec3((_GLF_IDENTITY(false, (false) && true)), false, false), bvec3(bvec3(bvec3((_GLF_IDENTITY(false, (false) && true)), false, false)))))))))))) || false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(! (false), ! (! (! (false))))) || false, ((_GLF_IDENTITY(! (false), ! (! (! (false))))) || false) || false)), bool(bool(! (_GLF_IDENTITY((_GLF_IDENTITY(! (false), ! (! (! _GLF_IDENTITY((false), ((false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))) || false, ((_GLF_IDENTITY(! (false), ! (! (! (false))))) || false) || false))))))))))))
    {
     if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), ! (! (_GLF_DEAD(false)))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), ! (! (_GLF_DEAD(false))))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
        barrier();
      }
     else
      {
       barrier();
      }
     if(_GLF_DEAD(false))
      return;
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(0.5), _GLF_FUZZED(-8268.2999)), bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).y, clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(0.5), _GLF_FUZZED(-8268.2999)), bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).y, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(0.5), _GLF_FUZZED(-8268.2999)), bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).y, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(0.5), _GLF_FUZZED(-8268.2999)), bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).y)))), false, true)))))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       continue;
      }
     return;
    }
  }
uint subgroup_size = 16;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   for(int _injected_loop_counter = (0 | (0 | 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
    }
   GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_size.w = subgroup_size;
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
      {
       if(_GLF_DEAD(false))
        break;
       break;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      {
       if(_GLF_DEAD(false))
        continue;
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, float(mat3x2(injectionSwitch.y, 0.0, 1.0, 0.0, 1.0, 1.0)))), float(_GLF_FUZZED(-93.80)), bool(false))), injectionSwitch.y))))))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       for(int _injected_loop_counter = (_GLF_IDENTITY(0, max(0, 0)) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(_GLF_IDENTITY(3, (3) | (3))), (int(3)) << 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(7.2)), bool(false)))) - length(vec2(0.0, 0.0))))) || (false)), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(7.2)), bool(false)))) - length(vec2(0.0, 0.0))))) || (false)), (_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(7.2)), bool(false)))) - length(vec2(0.0, 0.0))))) || (false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), ! (_GLF_IDENTITY(! (bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(7.2)), bool(false)))) - length(vec2(0.0, 0.0))))) || (false)), (_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(7.2)), bool(false)))) - length(vec2(0.0, 0.0))))) || (false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), bool(bvec4(! (bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(7.2)), bool(false)))) - length(vec2(0.0, 0.0))))) || (false)), (_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(7.2)), bool(false)))) - length(vec2(0.0, 0.0))))) || (false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), false, true, false))))))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))))
            barrier();
           continue;
          }
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     else
      {
      }
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups.x, max(_GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) >> 0u), gl_NumWorkGroups.x));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, false, true, true)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
  }
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _GLF_IDENTITY(_injected_loop_counter --, (_GLF_IDENTITY(_injected_loop_counter --, (false ? _GLF_FUZZED(90942) : _injected_loop_counter --))) >> int(_GLF_ZERO(0.0, injectionSwitch.x))))
  {
   GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_size.y = num_workgroup;
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-1955.3368), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-52.63)), bvec2(true, false))))).y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize.x, clamp(gl_WorkGroupSize.x, _GLF_IDENTITY(gl_WorkGroupSize.x, uint(uvec4(gl_WorkGroupSize.x, 1u, 1u, _GLF_IDENTITY(1u, max(1u, 1u))))), _GLF_IDENTITY(gl_WorkGroupSize.x, ~ (~ (gl_WorkGroupSize.x)))));
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  barrier();
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   return;
  }
 GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.y = workgroup_size;
 uint workgroup_id = gl_WorkGroupID.x;
 GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x = workgroup_id;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))), (! (_GLF_IDENTITY(false, bool(bvec4(false, true, false, false))))) && true)))))), (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      return;
    }
   else
    {
    }
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, false || (false)))))) && true), true && (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x < injectionSwitch.y), true && (! (injectionSwitch.x < injectionSwitch.y))))))))) && true))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
         return;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   do
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, false, true, false))), _GLF_IDENTITY(true && (true), ! (! (_GLF_IDENTITY(true && (true), ! (! (true && (true)))))))), true, false)))), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, false, true, false))), _GLF_IDENTITY(true && (true), ! (! (_GLF_IDENTITY(true && (true), ! (! (true && (true)))))))), true, false)))), false || (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, false, true, false))), _GLF_IDENTITY(true && (true), ! (! (_GLF_IDENTITY(true && (true), ! (! (true && (true)))))))), true, false)))))), true))))
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(float(min(_GLF_IDENTITY(-44515, int(_GLF_ONE(1.0, injectionSwitch.y)) * (-44515)), 68757))) : injectionSwitch.x)) > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
          barrier();
         barrier();
        }
      }
     barrier();
    }
   do
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
      barrier();
     if(_GLF_DEAD(false))
      break;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)));
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
       if(_GLF_DEAD(false))
        return;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false)))))), true && (false)), true && (_GLF_IDENTITY(false, true && (false))))))
      {
      }
     else
      {
       return;
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), true && (false))))))
      {
      }
     else
      {
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))))))
          barrier();
         if(_GLF_DEAD(false))
          return;
         return;
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (! (false))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(true, bool(bvec4(true, false, true, true))) && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, float(vec2(injectionSwitch.x, 1.0))), _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))) || false, ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x, min(_GLF_IDENTITY(injectionSwitch.x, float(vec2(injectionSwitch.x, 1.0))), _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y, _GLF_IDENTITY(bool(bool(injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (bool(bool(injectionSwitch.x > injectionSwitch.y))), bool(bvec4(! (bool(bool(injectionSwitch.x > injectionSwitch.y))), true, true, true))))))) || false) && _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! (! (true))))))))))))))
      barrier();
    }
   else
    {
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true, true)))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)))))))
      {
       if(_GLF_DEAD(false))
        break;
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 uint workgroup_base = GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.y * _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x, _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size, min(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size, GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size)).x), 0u | (_GLF_IDENTITY(uint(_GLF_IDENTITY(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size, min(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size, GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size)).x), max(uint(_GLF_IDENTITY(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size, min(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size, GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size)).x), uint(_GLF_IDENTITY(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size, min(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size, GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size)).x))))), uint(_GLF_IDENTITY(uint(uint(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x)), clamp(uint(uint(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x)), uint(uint(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x)), _GLF_IDENTITY(uint(uint(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x)), (uint(uint(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x))) ^ 0u)))))), (uint(_GLF_IDENTITY(uint(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x), uint(_GLF_IDENTITY(uint(uint(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x)), clamp(uint(uint(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x)), uint(uint(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x)), _GLF_IDENTITY(uint(uint(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x)), (uint(uint(_GLF_IDENTITY(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x, 0u ^ (_GLF_IDENTITY(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x, ~ (~ (GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x)))))))) ^ 0u))))))) >> 0u), ~ (_GLF_IDENTITY(~ _GLF_IDENTITY((uint(_GLF_IDENTITY(uint(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x), uint(uint(uint(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x)))))), (true ? (uint(_GLF_IDENTITY(uint(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x), uint(uint(uint(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x)))))) : _GLF_FUZZED(subgroup_size))), (~ (uint(_GLF_IDENTITY(_GLF_IDENTITY(uint(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x), (uint(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x)) ^ 0u), uint(uint(uint(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x))))))) >> 0u)))), (true ? _GLF_IDENTITY(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x, _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x, (GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x) | (GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x))), _GLF_IDENTITY(_GLF_IDENTITY(uint(uint(uint(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x))), ~ (~ (_GLF_IDENTITY(uint(uint(uint(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x))), (uint(uint(uint(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x)))) >> 0u)))), (_GLF_IDENTITY(uint(uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size, _GLF_IDENTITY(uvec2(uvec3(_GLF_IDENTITY(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size, max(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size, GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size)), 1u)), min(uvec2(uvec3(_GLF_IDENTITY(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size, max(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size, GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size)), 1u)), uvec2(uvec3(_GLF_IDENTITY(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size, max(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size, GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size)), 1u))))).x), max(uint(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x), uint(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x))))), (uint(uint(uint(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x)))) | (uint(uint(uint(_GLF_IDENTITY(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size, ~ (~ (GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size))).x)))))) ^ 0u))), ~ (_GLF_IDENTITY(~ (uint(_GLF_IDENTITY(uint(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x), uint(uint(uint(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x)))))), (~ (uint(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size, max(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size, GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size)), max(_GLF_IDENTITY(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size, max(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size, GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size)), _GLF_IDENTITY(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size, max(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size, GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size)))).x), (_GLF_IDENTITY(uint(_GLF_IDENTITY(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size, max(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size, GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size)).x), clamp(uint(_GLF_IDENTITY(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size, max(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size, GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size)).x), _GLF_IDENTITY(uint(_GLF_IDENTITY(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size, max(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size, GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size)).x), 0u ^ (uint(_GLF_IDENTITY(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size, max(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size, GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size)).x))), uint(_GLF_IDENTITY(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size, max(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size, GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size)).x)))) | (uint(_GLF_IDENTITY(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size, max(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size, GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size)).x))), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(uint(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x), clamp(uint(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x), uint(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x), uint(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x))))), clamp(uint(uint(_GLF_IDENTITY(uint(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x), clamp(uint(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x), uint(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x), uint(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x))))), uint(uint(_GLF_IDENTITY(uint(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x), clamp(uint(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x), uint(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x), uint(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x))))), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(uint(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x), clamp(uint(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x), uint(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x), uint(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x))))), ~ (~ (uint(uint(_GLF_IDENTITY(uint(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x), clamp(uint(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x), uint(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x), uint(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x)))))))))))))) >> 0u))), max(_GLF_IDENTITY(uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x, (GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x) | (GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x))), _GLF_IDENTITY(_GLF_IDENTITY(uint(uint(uint(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x))), ~ (~ (_GLF_IDENTITY(uint(uint(uint(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x))), (uint(uint(uint(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x)))) >> 0u)))), (_GLF_IDENTITY(uint(uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size, _GLF_IDENTITY(uvec2(uvec3(_GLF_IDENTITY(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size, max(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size, GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size)), 1u)), min(uvec2(uvec3(_GLF_IDENTITY(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size, max(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size, GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size)), 1u)), uvec2(uvec3(_GLF_IDENTITY(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size, max(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size, GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size)), 1u))))).x), max(uint(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x), uint(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x))))), (uint(uint(uint(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x)))) | (uint(uint(uint(_GLF_IDENTITY(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size, ~ (~ (GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size))).x)))))) ^ 0u))), ~ (_GLF_IDENTITY(~ (uint(_GLF_IDENTITY(uint(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x), uint(uint(uint(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x)))))), (~ (uint(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size, max(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size, GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size)), max(_GLF_IDENTITY(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size, max(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size, GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size)), _GLF_IDENTITY(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size, max(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size, GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size)))).x), (_GLF_IDENTITY(uint(_GLF_IDENTITY(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size, max(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size, GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size)).x), clamp(uint(_GLF_IDENTITY(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size, max(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size, GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size)).x), _GLF_IDENTITY(uint(_GLF_IDENTITY(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size, max(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size, GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size)).x), 0u ^ (uint(_GLF_IDENTITY(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size, max(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size, GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size)).x))), uint(_GLF_IDENTITY(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size, max(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size, GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size)).x)))) | (uint(_GLF_IDENTITY(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size, max(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size, GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size)).x))), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(uint(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x), clamp(uint(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x), uint(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x), uint(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x))))), clamp(uint(uint(_GLF_IDENTITY(uint(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x), clamp(uint(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x), uint(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x), uint(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x))))), uint(uint(_GLF_IDENTITY(uint(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x), clamp(uint(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x), uint(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x), uint(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x))))), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(uint(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x), clamp(uint(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x), uint(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x), uint(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x))))), ~ (~ (uint(uint(_GLF_IDENTITY(uint(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x), clamp(uint(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x), uint(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x), uint(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x)))))))))))))) >> 0u))), _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x, (GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x) | (GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x))), _GLF_IDENTITY(_GLF_IDENTITY(uint(uint(uint(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x))), ~ (~ (_GLF_IDENTITY(uint(uint(uint(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x))), (uint(uint(uint(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x)))) >> 0u)))), (_GLF_IDENTITY(uint(uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size, _GLF_IDENTITY(uvec2(uvec3(_GLF_IDENTITY(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size, max(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size, GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size)), 1u)), min(uvec2(uvec3(_GLF_IDENTITY(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size, max(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size, GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size)), 1u)), uvec2(uvec3(_GLF_IDENTITY(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size, max(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size, GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size)), 1u))))).x), max(uint(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x), uint(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x))))), (uint(uint(uint(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x)))) | (uint(uint(uint(_GLF_IDENTITY(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size, ~ (~ (GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size))).x)))))) ^ 0u))), ~ (_GLF_IDENTITY(~ (uint(_GLF_IDENTITY(uint(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x), uint(uint(uint(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x)))))), (~ (uint(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size, max(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size, GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size)), max(_GLF_IDENTITY(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size, max(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size, GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size)), _GLF_IDENTITY(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size, max(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size, GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size)))).x), (_GLF_IDENTITY(uint(_GLF_IDENTITY(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size, max(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size, GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size)).x), clamp(uint(_GLF_IDENTITY(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size, max(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size, GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size)).x), _GLF_IDENTITY(uint(_GLF_IDENTITY(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size, max(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size, GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size)).x), 0u ^ (uint(_GLF_IDENTITY(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size, max(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size, GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size)).x))), uint(_GLF_IDENTITY(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size, max(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size, GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size)).x)))) | (uint(_GLF_IDENTITY(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size, max(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size, GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size)).x))), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(uint(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x), clamp(uint(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x), uint(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x), uint(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x))))), clamp(uint(uint(_GLF_IDENTITY(uint(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x), clamp(uint(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x), uint(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x), uint(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x))))), uint(uint(_GLF_IDENTITY(uint(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x), clamp(uint(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x), uint(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x), uint(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x))))), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(uint(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x), clamp(uint(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x), uint(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x), uint(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x))))), ~ (~ (uint(uint(_GLF_IDENTITY(uint(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x), clamp(uint(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x), uint(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x), uint(GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x)))))))))))))) >> 0u)))))) : _GLF_FUZZED(atomicExchange(subgroup_local_id, subgroup_size))));
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
  {
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))) && true))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         do
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-7.4)), float(injectionSwitch.x), bool(true)))), clamp((_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-7.4)), float(injectionSwitch.x), bool(true)))), (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-7.4)), float(injectionSwitch.x), bool(true)))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-7.4)), float(injectionSwitch.x), bool(true)))), clamp((_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-7.4)), float(injectionSwitch.x), bool(true)))), (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-7.4)), float(injectionSwitch.x), bool(true)))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-7.4)), float(injectionSwitch.x), bool(true)))), (false ? _GLF_FUZZED(-8.8) : (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-7.4)), float(injectionSwitch.x), bool(true)))))))))) / _GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)))), 1.0))), min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-7.4)), float(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))), bool(true)))) / 1.0), (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-7.4)), float(injectionSwitch.x), bool(true)))) / 1.0)) / _GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(97.54))) : _GLF_FUZZED(faceforward(-5.8, -6753.7174, 1.4))))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-7.4)), float(injectionSwitch.x), bool(true)))) / 1.0), clamp(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-7.4)), float(injectionSwitch.x), bool(true)))) / 1.0), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-7.4)), float(injectionSwitch.x), bool(_GLF_IDENTITY(true, ! (! (true))))))) / 1.0), mix(float(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-7.4)), float(injectionSwitch.x), bool(true)))) / 1.0)), float(_GLF_FUZZED(-89.91)), bool(false))), _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, mix(_GLF_IDENTITY(float(_GLF_FUZZED(_GLF_IDENTITY(-7.4, clamp(_GLF_IDENTITY(-7.4, min(-7.4, _GLF_IDENTITY(-7.4, min(-7.4, -7.4)))), _GLF_IDENTITY(-7.4, (-7.4) * _GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(-7.4, (_GLF_IDENTITY(-7.4, min(-7.4, -7.4))) - 0.0))))), (_GLF_IDENTITY(float(_GLF_FUZZED(_GLF_IDENTITY(-7.4, clamp(_GLF_IDENTITY(-7.4, min(-7.4, _GLF_IDENTITY(-7.4, min(-7.4, -7.4)))), _GLF_IDENTITY(-7.4, (-7.4) * _GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(-7.4, (_GLF_IDENTITY(-7.4, min(-7.4, -7.4))) - 0.0))))), max(float(_GLF_FUZZED(_GLF_IDENTITY(-7.4, clamp(_GLF_IDENTITY(-7.4, min(-7.4, _GLF_IDENTITY(-7.4, min(-7.4, -7.4)))), _GLF_IDENTITY(-7.4, (-7.4) * _GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(-7.4, (_GLF_IDENTITY(-7.4, min(-7.4, -7.4))) - 0.0))))), float(_GLF_FUZZED(_GLF_IDENTITY(-7.4, clamp(_GLF_IDENTITY(-7.4, min(-7.4, _GLF_IDENTITY(-7.4, min(-7.4, -7.4)))), _GLF_IDENTITY(-7.4, (-7.4) * _GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(-7.4, (_GLF_IDENTITY(-7.4, min(-7.4, -7.4))) - 0.0)))))))) - sin(0.0)), float(injectionSwitch.x), bool(true)))) / 1.0))))) > injectionSwitch.y))))
            {
             do
              {
               if(_GLF_DEAD(false))
                barrier();
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_IDENTITY(_GLF_FUZZED(injectionSwitch.t), (false ? _GLF_FUZZED(2.2) : _GLF_FUZZED(injectionSwitch.t))) : _GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, 1.0, 1.0, 1.0)))))))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false, (false) && true) || (false))))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), ! (! (bool(bvec4(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))), bool(bvec3(false, true, true))), true, false, false)))))
                continue;
               return;
              }
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), clamp(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch)))))).y))) || _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)).x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)))), injectionSwitch)).x > injectionSwitch.y))) && true), false), true))))))))
              break;
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               barrier();
              }
            }
           for(int _injected_loop_counter = _GLF_IDENTITY(0, max(0, 0)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y)), bool(bvec4(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y)), true, false, true))), (_GLF_IDENTITY(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y)), bool(bvec4(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y)), true, false, true)))) && true)); _injected_loop_counter ++)
            {
             barrier();
            }
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (_GLF_IDENTITY(false, true && (false)))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool((! (_GLF_IDENTITY(false, true && (false))))), true && (bool((! (_GLF_IDENTITY(false, true && (false)))))))), (bool(_GLF_IDENTITY(bool((! (_GLF_IDENTITY(false, true && (false))))), true && (bool((! (_GLF_IDENTITY(false, true && (false))))))))) || false)))))
            barrier();
           break;
          }
        }
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
        break;
      }
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          continue;
         barrier();
        }
      }
     do
      {
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  return;
 uint virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_id * GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_size.w, ~ (_GLF_IDENTITY(~ (subgroup_id * GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_size.w), (~ (subgroup_id * GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_size.w)) * 1u))) + subgroup_local_id;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
  return;
 uint next_virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_id * GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_size.w, (subgroup_id * GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_size.w) | (_GLF_IDENTITY(subgroup_id * GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_size.w, (_GLF_IDENTITY(subgroup_id * GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_size.w, (true ? subgroup_id * GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_size.w : _GLF_FUZZED(virtual_gid)))) - 0u))) + ((subgroup_local_id + 1) % _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_size.w, max(GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_size.w, GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_size.w)));
 GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_size.x = next_virtual_gid;
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 0);
 GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_size.z = read;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 atomicStore(buf[_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_size, (GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_size) | (GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_size)).x], uint(1), 4, 64, 4);
 if(_GLF_DEAD(false))
  return;
 if(subgroup_local_id + _GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, 0 ^ (1))))))) < GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_size.w)
  {
   atomicStore(checker[virtual_gid], GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_size.z, 4, 64, 4);
   subgroupAll(false);
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         barrier();
        }
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
            barrier();
          }
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)))), ! (! _GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)), bool(bvec4(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)), true, true, false)))))), true && (_GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)), bool(bvec4(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)), true, true, false)))))), true && ((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)), bool(bvec4(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)), true, true, false))))))))))))))
          {
           if(_GLF_DEAD(false))
            barrier();
           return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY(_GLF_FUZZED(5017.0701), _GLF_IDENTITY(float(float(_GLF_IDENTITY(_GLF_FUZZED(5017.0701), 1.0 * (_GLF_FUZZED(5017.0701))))), max(float(float(_GLF_IDENTITY(_GLF_FUZZED(5017.0701), 1.0 * (_GLF_FUZZED(5017.0701))))), float(float(_GLF_IDENTITY(_GLF_FUZZED(5017.0701), 1.0 * (_GLF_FUZZED(5017.0701)))))))), _GLF_FUZZED(8.5)), vec2((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)), max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(_GLF_IDENTITY(0.0, (0.0) * 1.0), _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED((- 8.1))), bool(false))))), injectionSwitch)))[0], (injectionSwitch)[1]), bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))).y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))
        barrier();
       barrier();
      }
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)))) > injectionSwitch.y))))
        barrier();
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(4225.4574)), vec2(_GLF_FUZZED(-5713.0360), (injectionSwitch)[1]), bvec2(false, true)))) * vec2(1.0, 1.0)).y, _GLF_IDENTITY((injectionSwitch.y) / 1.0, _GLF_IDENTITY(float(mat2x4((injectionSwitch.y) / 1.0, 0.0, 0.0, 0.0, 1.0, sqrt(0.0), determinant(mat4(0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, sin(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, sqrt(0.0))), 0.0)), mix(float(_GLF_FUZZED(-4.3)), float(float(mat2x4((injectionSwitch.y) / 1.0, _GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat3x2(0.0, 1.0, 1.0, 1.0, 0.0, 0.0)), mix(float(_GLF_FUZZED(-5.2)), float(float(mat3x2(0.0, 1.0, 1.0, 1.0, 0.0, 0.0))), bool(true)))) : _GLF_FUZZED(-9.9))), 0.0, 0.0, 1.0, sqrt(0.0), determinant(mat4(0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, sin(0.0), 0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 0.0, 0.0, 0.0, 0.0, sqrt(0.0))), 0.0))), bool(true)))))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))) - vec2(0.0, 0.0)).y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED((-9614.7682))), bool(false))))), true, _GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, ! (! (false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, ! (! (false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec4(bvec2(_GLF_IDENTITY(false, ! (! (false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false)))))))) ? _GLF_FUZZED(refract(injectionSwitch, injectionSwitch, -0.2)) : _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) - vec2(0.0, 0.0), ((injectionSwitch) - vec2(0.0, 0.0)) - vec2(0.0, 0.0)))))) * exp(vec2(0.0, 0.0))).x < injectionSwitch.y), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, ! (! (false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, ! (! (false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec4(bvec2(_GLF_IDENTITY(false, ! (! (false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false)))))))) ? _GLF_FUZZED(refract(injectionSwitch, injectionSwitch, -0.2)) : _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) - vec2(0.0, 0.0), ((injectionSwitch) - vec2(0.0, 0.0)) - vec2(0.0, 0.0)))))) * exp(vec2(0.0, 0.0))).x < injectionSwitch.y), true && ((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, ! (! (false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, ! (! (false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec4(bvec2(_GLF_IDENTITY(false, ! (! (false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false)))))))) ? _GLF_FUZZED(refract(injectionSwitch, injectionSwitch, -0.2)) : _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) - vec2(0.0, 0.0), ((injectionSwitch) - vec2(0.0, 0.0)) - vec2(0.0, 0.0)))))) * exp(vec2(0.0, 0.0))).x < injectionSwitch.y)))) || false)))))))
      return;
     return;
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     atomicStore(buf[virtual_gid], GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_size.z, 4, 64, 4);
    }
   for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) - 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
     subgroupAll(true);
    }
   do
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       for(int _injected_loop_counter = ((67068 & 0) | int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, bool(bvec3(true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (injectionSwitch.x < injectionSwitch.y))))
            {
             do
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
              return;
             return;
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, true, false))))
            barrier();
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(vec3(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)), _GLF_IDENTITY(1.0, (1.0) / 1.0)))).x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-693.666), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-4.4)), bvec2(true, false))).y, false || (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(vec3(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)), _GLF_IDENTITY(1.0, (1.0) / 1.0)))).x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-693.666), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-4.4)), bvec2(true, false))).y, false || (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(vec3(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)), _GLF_IDENTITY(1.0, (1.0) / 1.0)))).x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-693.666), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-4.4)), bvec2(true, false))).y, false || (injectionSwitch.x > injectionSwitch.y))))), false)), (bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(vec3(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)), _GLF_IDENTITY(1.0, (1.0) / 1.0)))).x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-693.666), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-4.4)), bvec2(true, false))).y, false || (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(vec3(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)), _GLF_IDENTITY(1.0, (1.0) / 1.0)))).x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-693.666), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-4.4)), bvec2(true, false))).y, false || (injectionSwitch.x > injectionSwitch.y))))), false))) || false))))))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(true && (_GLF_DEAD(false)), (true && (_GLF_DEAD(false))) && true)))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), _GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), true, true, false)))), bvec2(bvec3(bvec2(_GLF_DEAD(false), false), false)))))) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat2x4(injectionSwitch.x, 0.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)), 1.0, 0.0, 0.0, 1.0, 0.0), transpose(transpose(mat2x4(injectionSwitch.x, 0.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)), 1.0, 0.0, 0.0, 1.0, 0.0)))))))) < injectionSwitch.y))))))), _GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))), bvec2(bvec3(bvec2(bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), _GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), true, true, false)))), bvec2(bvec3(bvec2(_GLF_DEAD(false), false), false)))))) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat2x4(injectionSwitch.x, 0.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)), 1.0, 0.0, 0.0, 1.0, 0.0), transpose(transpose(mat2x4(injectionSwitch.x, 0.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)), 1.0, 0.0, 0.0, 1.0, 0.0)))))))) < injectionSwitch.y))))))), _GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))), false)))), ! (! (bool(_GLF_IDENTITY(bvec2(bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), false), _GLF_IDENTITY(bvec2(bvec3(bvec2(_GLF_DEAD(false), false), false)), bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec3(bvec2(_GLF_DEAD(false), false), false)), _GLF_IDENTITY(bvec2(bvec4(bvec2(bvec3(bvec2(_GLF_DEAD(false), false), false)), false, true)), bvec2(bvec2(bvec2(bvec4(bvec2(bvec3(bvec2(_GLF_DEAD(false), false), false)), false, true)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))) && _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))), false), bvec2(_GLF_IDENTITY(bvec2(bvec2(bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), false), _GLF_IDENTITY(bvec2(bvec3(bvec2(_GLF_DEAD(false), false), false)), bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec3(bvec2(_GLF_DEAD(false), false), false)), _GLF_IDENTITY(bvec2(bvec4(bvec2(bvec3(bvec2(_GLF_DEAD(false), false), false)), false, true)), bvec2(bvec2(bvec2(bvec4(bvec2(bvec3(bvec2(_GLF_DEAD(false), false), false)), false, true)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))) && _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))), false)), _GLF_IDENTITY(bvec2(bvec2(bvec2(bvec2(bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), false), _GLF_IDENTITY(bvec2(bvec3(bvec2(_GLF_DEAD(false), false), false)), bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec3(bvec2(_GLF_DEAD(false), false), false)), _GLF_IDENTITY(bvec2(bvec4(bvec2(bvec3(bvec2(_GLF_DEAD(false), false), false)), false, true)), bvec2(bvec2(bvec2(bvec4(bvec2(bvec3(bvec2(_GLF_DEAD(false), false), false)), false, true)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))) && _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))), false)))), bvec2(bvec2(bvec2(bvec2(bvec2(bvec2(bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), false), _GLF_IDENTITY(bvec2(bvec3(bvec2(_GLF_DEAD(false), false), false)), bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec3(bvec2(_GLF_DEAD(false), false), false)), _GLF_IDENTITY(bvec2(bvec4(bvec2(bvec3(bvec2(_GLF_DEAD(false), false), false)), false, true)), bvec2(bvec2(bvec2(bvec4(bvec2(bvec3(bvec2(_GLF_DEAD(false), false), false)), false, true)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))) && _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))), false)))))))))))))))))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    {
                     do
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec2(false, false)))));
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                 else
                  {
                  }
                }
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
               return;
              }
            }
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), false || (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, float(mat3(injectionSwitch.y, sqrt(0.0), _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 0.0, 1.0, 1.0, 1.0))))) && (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bool(false)))))))), (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
                barrier();
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(true, (true) || false), true))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true))), true, false)), false || (bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true))), true, false)))))) || false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true))), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(true, (true) || false), true))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true))), true, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) && true))), false || (bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)) && true)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true))), true, false)))))) || false))))), ! (_GLF_IDENTITY(! (! (! (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, true)))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch, injectionSwitch)).x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))) && true), _GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(true, (true) || false)))), true), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED((true ? -43.72 : -7.0))), vec2(_GLF_FUZZED(21.23), (injectionSwitch)[1]), bvec2(false, true))).y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true), _GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(true, (true) || false)))), true))))))))), false || (! (! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, _GLF_IDENTITY(true, ! (! (true))))))))))))))))
                  barrier();
                }
               for(int _injected_loop_counter = (0 & 33266); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY((1 ^ 0), ~ (~ ((1 ^ 0))))); _injected_loop_counter ++)
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0))) * vec2(1.0, 1.0)).x))); _injected_loop_counter --)
                  {
                   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), false || (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), true && (_GLF_WRAPPED_IF_FALSE(false))))))
                    {
                    }
                   else
                    {
                     return;
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))) || false), true, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))) || false), true, false), false)))), false || (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))) || false), true, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))) || false), true, false), false))))))))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 if(_GLF_DEAD(false))
                  return;
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 break;
                }
              }
             else
              {
              }
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               do
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 1)); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bool(_GLF_WRAPPED_IF_TRUE(true)))))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   else
                    {
                    }
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_IDENTITY(_GLF_FUZZED(7.3), (_GLF_FUZZED(7.3)) - 0.0)), bool(false))), 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, 0.0, sin(0.0), sqrt(1.0), 0.0)))))));
               if(_GLF_DEAD(false))
                return;
              }
             else
              {
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
            }
          }
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (false))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) * 1))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         do
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
            break;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(7556.4697)), bool(false)))), float(_GLF_FUZZED(450.871)), bool(false)))), float(_GLF_FUZZED(7.1)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec4(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false)))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || (false)))), (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - _GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0))) > injectionSwitch.y))))))))))), ! (! (_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y))))))))) && true))))))
              return;
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              break;
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               return;
              }
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_IDENTITY(true, bool(bool(true))))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         break;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
      }
     do
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), min(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch)))).x > injectionSwitch.y))));
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
}
