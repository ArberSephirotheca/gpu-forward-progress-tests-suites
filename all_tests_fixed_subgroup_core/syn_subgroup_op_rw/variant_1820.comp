#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-9.9), _GLF_FUZZED(6.3)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).x, clamp(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(14.78) : injectionSwitch.x)), injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, (false) || false), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(false, (false) || false), false), true)))))))
        return;
       break;
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       do
        {
         do
          {
           do
            {
             do
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false))))
                  {
                   if(_GLF_DEAD(false))
                    {
                     do
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          {
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             return;
                            }
                           else
                            {
                            }
                          }
                         return;
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                     barrier();
                    }
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                }
               else
                {
                }
               if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false))))))
                barrier();
               for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    return;
                   barrier();
                  }
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 continue;
                }
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  return;
                }
               else
                {
                }
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 return;
                 if(_GLF_DEAD(false))
                  return;
                }
               else
                {
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)))), _GLF_IDENTITY(bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, false)), bool(bool(bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, false)))))))))), _GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED((- -2.5))), bool(false))) > injectionSwitch.y), true && (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 0.0, 1.0, 0.0, 0.0), mat3x2(mat3x2(mat3x2(injectionSwitch, 0.0, 1.0, 0.0, 0.0))))))) - vec2(0.0, 0.0)).x), float(_GLF_FUZZED((- -2.5))), bool(false))) > injectionSwitch.y), true && ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED((- -2.5))), bool(false))) > injectionSwitch.y, bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED((- -2.5))), bool(false))) > injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED((- -2.5))), bool(false))) > injectionSwitch.y, false, true))))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, mix(_GLF_IDENTITY(float(injectionSwitch.x), clamp(float(injectionSwitch.x), _GLF_IDENTITY(float(injectionSwitch.x), clamp(_GLF_IDENTITY(float(injectionSwitch.x), mix(float(float(injectionSwitch.x)), float(_GLF_FUZZED(85.67)), bool(false))), float(injectionSwitch.x), float(injectionSwitch.x))), float(injectionSwitch.x))), float(_GLF_FUZZED((- -2.5))), bool(false))) > injectionSwitch.y), true && (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED((- -2.5))), bool(false))) > injectionSwitch.y), _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, true)), false || (bool(bvec2(true, true)))))))) && ((_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, round(length(normalize(sqrt(vec3(1.0, 1.0, 1.0))))) * (injectionSwitch.x))), float(_GLF_FUZZED((- -2.5))), bool(false))) > injectionSwitch.y)))))))), false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false || (bool(bvec4(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(float(5787))), float(injectionSwitch.x), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), float(vec4(injectionSwitch.x, sqrt(0.0), _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-524.493)), float(1.0), bool(true))))))), 0.0))) > injectionSwitch.y)), false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))));
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            break;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(733.957)), float(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(70.35) : injectionSwitch.y))), bool(true))), injectionSwitch.y)), float(mat2x4(injectionSwitch.y, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0)))))));
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y))))
      break;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) | (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), int(ivec2(int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y)), 1))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x)), false || (_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))))); _injected_loop_counter --)
        {
         for(int _injected_loop_counter = (-73634 & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            return;
          }
         return;
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             return;
            }
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false, true)))), bool(bvec3(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false, true)))), true, false)))))))
        break;
      }
    }
   if(_GLF_DEAD(false))
    break;
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bool(_GLF_WRAPPED_LOOP(false)))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     barrier();
    }
   else
    {
    }
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   return;
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), bool(bvec4(_GLF_IDENTITY(false, (false) && true), false, true, true)))))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
  return;
uint subgroup_size = 16;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), false || (false)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), _GLF_IDENTITY(false || (false), (false || (_GLF_IDENTITY(false, false || (false)))) || false)))))))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-6.6), _GLF_FUZZED(-3.9)), bvec2(false, false))).x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))).x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))) / vec2(1.0, 1.0)), clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))).y)))))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false)) && true), (false) || false)))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
      {
      }
     else
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
      }
    }
   return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), clamp((injectionSwitch), (injectionSwitch), (injectionSwitch))) * vec2(1.0, 1.0)).x > injectionSwitch.y, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x > injectionSwitch.y, true && (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x > injectionSwitch.y, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), (injectionSwitch) * vec2(1.0, 1.0)).x, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), (injectionSwitch) * vec2(1.0, 1.0)).x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), (injectionSwitch) * vec2(1.0, 1.0)).x, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), (injectionSwitch) * vec2(1.0, 1.0)).x, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), (injectionSwitch) * vec2(1.0, 1.0)).x) / 1.0))) > injectionSwitch.y)))))) && true)))))), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x > injectionSwitch.y, _GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * _GLF_IDENTITY(vec2(1.0, 1.0), (false ? _GLF_FUZZED(vec2(6.0, 43.22)) : vec2(1.0, 1.0)))).x > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x > injectionSwitch.y))) && true))), ! (! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * _GLF_IDENTITY(_GLF_IDENTITY(vec2(1.0, 1.0), min(vec2(1.0, 1.0), vec2(1.0, 1.0))), (false ? _GLF_FUZZED(vec2(6.0, 43.22)) : vec2(1.0, 1.0)))).x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), injectionSwitch))) + vec2(0.0, 0.0)).y, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x > injectionSwitch.y) && true), true && (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x > injectionSwitch.y))) && true))))))))))))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false))))), false || (false))))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, false, true))), false))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (false) && _GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y))), (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(false || ((injectionSwitch.x < injectionSwitch.y)), bool(bvec4(false || ((injectionSwitch.x < injectionSwitch.y)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))) && true)))))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
      barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_IDENTITY(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, false || (true))) && true), (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true))), bool(bvec4(_GLF_IDENTITY(false, bool(bvec3(false, true, true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), false, true))))), _GLF_IDENTITY(true, bool(bvec4(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(bool(bvec3((injectionSwitch.x < injectionSwitch.y), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (bool(bvec3((injectionSwitch.x < injectionSwitch.y), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))))), true && (_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize, uvec3(gl_WorkGroupSize[0], gl_WorkGroupSize[_GLF_IDENTITY(1, 0 + (1))], _GLF_IDENTITY(gl_WorkGroupSize[_GLF_IDENTITY(2, (0 | _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), int(ivec3(_GLF_IDENTITY(~ (0), (~ (0)) ^ 0), 1, 0)))))) ^ (_GLF_IDENTITY(2, (2) >> 0)))], max(gl_WorkGroupSize[2], gl_WorkGroupSize[2])))).x;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0))), injectionSwitch)).y))))
      {
      }
     else
      {
       return;
      }
    }
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       barrier();
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true)), (bool(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false || (bool(bvec3(_GLF_TRUE(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, false || (true)))), (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-787.334)), float(injectionSwitch.y), bool(true))))), true, true)))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y)))))))), true, true)), false || (bool(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true)))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true)), false || (bool(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true)), false || (bool(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true))))), bool(bvec2(! (_GLF_IDENTITY(bool(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true)), false || (bool(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true))))), false)))), (! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true)), false || (bool(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true))))), bool(bvec2(! (_GLF_IDENTITY(bool(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true)), false || (bool(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true))))), false))))) || false))), bool(bvec2(! (_GLF_IDENTITY(bool(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true)), false || (bool(bvec3(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x < injectionSwitch.y)), true, true))))), false))))), false, true, false))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(5.0))) > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(bvec3(false, false, false))), true, true, true)))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
          barrier();
        }
       else
        {
         return;
        }
      }
     barrier();
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(! (! ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(! (! (! (_GLF_IDENTITY(! ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec4(! ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), true && (_GLF_IDENTITY(! (! (! (_GLF_IDENTITY(! ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec4(! ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), false || (! (! (! (_GLF_IDENTITY(! ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec4(! ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))))) || false)))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(false, ! (! (false))) || (injectionSwitch.x > injectionSwitch.y))))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))))), true && (! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-763.198)), bool(false)))))))))))))))))))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(_GLF_IDENTITY(1, (1) ^ 0), (_GLF_IDENTITY(true ? 1 : _GLF_FUZZED(_GLF_IDENTITY(95070, 0 ^ (95070))), ~ (~ (_GLF_IDENTITY(true ? 1 : _GLF_FUZZED(95070), (true ? 1 : _GLF_FUZZED(95070)) * 1))))))); _injected_loop_counter ++)
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (bool(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && true))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(false, false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(false, false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
              {
               for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)))), bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(6, ~ (_GLF_IDENTITY(~ (6), (~ (6)) / 1)))), int(6))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(6), (int(6)) ^ 0), int(6)))), true, true, false))); _injected_loop_counter ++)
                {
                 barrier();
                }
              }
            }
           else
            {
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(87.77)), bool(false))), max(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(87.77)), bool(false))), _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(87.77)), bool(false))))) : _GLF_FUZZED(272.776)))))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, (injectionSwitch.y) / 1.0)))))
                barrier();
               break;
              }
             return;
            }
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (_GLF_IDENTITY(false, ! (! (false)))))))))))
            break;
           if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             break;
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            continue;
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), int(ivec3(int(5), 0, 1)))))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0) * (injectionSwitch), clamp(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch), _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), _GLF_IDENTITY(vec2(mat2x4(mat2(1.0) * (injectionSwitch), 1.0, 0.0, _GLF_IDENTITY(dot(vec4(determinant(mat2(1.0, 0.0, 1.0, 1.0)), 0.0, 1.0, 1.0), vec4(tan(0.0), 1.0, 0.0, 0.0)), dot(vec4(determinant(mat2(1.0, 0.0, 1.0, 1.0)), 0.0, 1.0, 1.0), vec4(tan(0.0), 1.0, 0.0, 0.0))), _GLF_ZERO(0.0, injectionSwitch.x), exp(0.0), 0.0)), vec2(mat3x2(vec2(mat2x4(mat2(1.0) * (injectionSwitch), 1.0, 0.0, _GLF_IDENTITY(dot(vec4(determinant(mat2(1.0, 0.0, 1.0, 1.0)), 0.0, 1.0, 1.0), vec4(tan(0.0), 1.0, 0.0, 0.0)), dot(vec4(determinant(mat2(1.0, 0.0, 1.0, 1.0)), 0.0, 1.0, 1.0), vec4(tan(0.0), 1.0, 0.0, 0.0))), _GLF_ZERO(0.0, injectionSwitch.x), exp(0.0), 0.0)), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0)))))), clamp(_GLF_IDENTITY(mat2(1.0) * (injectionSwitch), clamp(mat2(1.0) * (injectionSwitch), mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), injectionSwitch))), mat2(1.0) * (injectionSwitch))), _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), clamp(mat2(1.0) * (injectionSwitch), mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec2(injectionSwitch), (false ? _GLF_FUZZED(injectionSwitch) : vec2(injectionSwitch)))))), mat2(1.0) * (injectionSwitch))), _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), _GLF_IDENTITY(clamp(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch)), (false ? _GLF_FUZZED(step(injectionSwitch, injectionSwitch)) : _GLF_IDENTITY(clamp(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch)), max(clamp(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch)), clamp(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch)))))))))).x > injectionSwitch.y))))
              barrier();
            }
          }
        }
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false, false, false))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) | 0u) + subgroup_id * subgroup_size, (false ? _GLF_FUZZED((subgroup_local_id % workgroup_id)) : _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) | 0u) + subgroup_id * subgroup_size, 1u * (_GLF_IDENTITY(workgroup_base, (workgroup_base) | 0u) + subgroup_id * subgroup_size)))) + subgroup_local_id;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         do
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       if(_GLF_DEAD(false))
        return;
      }
    }
  }
 else
  {
  }
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, (true ? _GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, 1u * (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), max((subgroup_local_id + 1), _GLF_IDENTITY((subgroup_local_id + 1), (_GLF_IDENTITY((subgroup_local_id + 1), max((subgroup_local_id + 1), (subgroup_local_id + 1)))) | 0u))), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), max((subgroup_local_id + 1), _GLF_IDENTITY((subgroup_local_id + 1), _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1), max((subgroup_local_id + 1), (subgroup_local_id + 1)))), ((_GLF_IDENTITY((subgroup_local_id + 1), max((subgroup_local_id + 1), (subgroup_local_id + 1))))) ^ 0u) | 0u))), min(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), max((subgroup_local_id + 1), _GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, clamp(1, 1, 1)), 1))), (_GLF_IDENTITY((subgroup_local_id + 1), max((subgroup_local_id + 1), (subgroup_local_id + 1)))) | 0u))), uint(uvec4(_GLF_IDENTITY((subgroup_local_id + 1), max((subgroup_local_id + 1), _GLF_IDENTITY((subgroup_local_id + 1), (_GLF_IDENTITY((subgroup_local_id + 1), max((subgroup_local_id + 1), (subgroup_local_id + 1)))) | 0u))), 1u, 0u, 0u))), _GLF_IDENTITY((subgroup_local_id + 1), max((subgroup_local_id + 1), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1))), (_GLF_IDENTITY((subgroup_local_id + 1), max((subgroup_local_id + 1), (subgroup_local_id + 1)))) | 0u))))))) % subgroup_size), ((_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), max((subgroup_local_id + 1), _GLF_IDENTITY((subgroup_local_id + 1), (_GLF_IDENTITY((subgroup_local_id + 1), max((subgroup_local_id + 1), (subgroup_local_id + 1)))) | 0u))), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), max((subgroup_local_id + 1), _GLF_IDENTITY((subgroup_local_id + 1), _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1), max((subgroup_local_id + 1), (subgroup_local_id + 1)))), ((_GLF_IDENTITY((subgroup_local_id + 1), max((subgroup_local_id + 1), (subgroup_local_id + 1))))) ^ 0u) | 0u))), min(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), max((subgroup_local_id + 1), _GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, clamp(1, 1, 1)), 1))), (_GLF_IDENTITY((subgroup_local_id + 1), max((subgroup_local_id + 1), (subgroup_local_id + 1)))) | 0u))), uint(uvec4(_GLF_IDENTITY((subgroup_local_id + 1), max((subgroup_local_id + 1), _GLF_IDENTITY((subgroup_local_id + 1), (_GLF_IDENTITY((subgroup_local_id + 1), max((subgroup_local_id + 1), (subgroup_local_id + 1)))) | 0u))), 1u, 0u, 0u))), _GLF_IDENTITY((subgroup_local_id + 1), max((subgroup_local_id + 1), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1))), (_GLF_IDENTITY((subgroup_local_id + 1), max((subgroup_local_id + 1), (subgroup_local_id + 1)))) | 0u))))))) % subgroup_size)) / 1u) * 1u))) : _GLF_FUZZED(workgroup_id))));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 uint read = atomicLoad(buf[_GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid)))], _GLF_IDENTITY(4, 0 | (4)), 64, 0);
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, false)), ! (! (bool(bvec3(false, false, false))))))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    return;
   do
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         barrier();
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
  }
 do
  {
   atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(1), min(_GLF_IDENTITY(uint(1), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(true, ! _GLF_IDENTITY((! (true)), true && ((! _GLF_IDENTITY((true), bool(_GLF_IDENTITY(bvec2((true), false), bvec2(bvec4(bvec2((true), false), true, true))))))))) ? uint(1) : _GLF_FUZZED(packSnorm4x8(vec4(22.42, 7.8, 7.1, -3245.7444)))), 0u + ((true ? uint(1) : _GLF_FUZZED(packSnorm4x8(vec4(22.42, 7.8, 7.1, -3245.7444)))))), uint(uvec2(_GLF_IDENTITY((_GLF_IDENTITY(true, ! (! (true))) ? uint(1) : _GLF_FUZZED(packSnorm4x8(vec4(_GLF_IDENTITY(22.42, _GLF_IDENTITY(float(vec3(22.42, sqrt(1.0), _GLF_ONE(1.0, injectionSwitch.y))), float(mat3x2(float(vec3(22.42, sqrt(1.0), _GLF_ONE(1.0, injectionSwitch.y))), 1.0, 1.0, 0.0, 0.0, 1.0)))), _GLF_IDENTITY(7.8, float(_GLF_IDENTITY(mat4x2(7.8, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0), mat4x2(mat4(mat4x2(7.8, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0)))))), 7.1, -3245.7444)))), 0u + ((true ? uint(1) : _GLF_FUZZED(packSnorm4x8(vec4(22.42, 7.8, 7.1, -3245.7444)))))), 0u)))), uint(_GLF_IDENTITY(1, max(1, 1))))), 4, 64, 4);
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))))
  return;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     do
      {
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))));
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(3), int(3)), (1 << _GLF_IDENTITY(int(3), int(3))) + 0)) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), 0 + (_GLF_IDENTITY(int(3), (int(3)) / 1))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(_GLF_IDENTITY(0.0, 1.0 * (0.0)), _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(unpackUnorm2x16(next_virtual_gid)) : injectionSwitch)))).x))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
          }
        }
      }
     else
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), vec2(mat2x3(mat2(1.0) * (injectionSwitch), 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0)))).x, injectionSwitch.x)) < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bool(_GLF_DEAD(false))), true && _GLF_IDENTITY((bool(bool(_GLF_DEAD(false)))), bool(bvec4(_GLF_IDENTITY((bool(bool(_GLF_DEAD(false)))), ! (! (_GLF_IDENTITY((bool(bool(_GLF_DEAD(false)))), false || ((bool(bool(_GLF_DEAD(false))))))))), true, true, false))))))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              barrier();
             return;
            }
           else
            {
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, false || (false)), true, true, true)))))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          return;
         do
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
        barrier();
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(1, int(int(1)))), int(1)))); _injected_loop_counter --)
      {
       return;
       if(_GLF_DEAD(false))
        break;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      return;
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bvec4(! (_GLF_DEAD(false)), false, true, false))))))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 else
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           return;
          }
        }
       return;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), (_GLF_DEAD(false)) || false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * _GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, float(mat4(injectionSwitch.y, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(7802.3592)), bool(false))), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0))) : _GLF_IDENTITY(_GLF_FUZZED(478.003), max(_GLF_FUZZED(478.003), _GLF_FUZZED(478.003)))))))))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (false)))), (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 do
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_IF_TRUE(true), true, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bvec3(bvec3(bvec3(_GLF_WRAPPED_IF_TRUE(true), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           return;
          }
         return;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, (false) && true), true)))))
        return;
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) - 0))
      {
       if(_GLF_IDENTITY(subgroup_local_id + 1, 0u ^ (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(uint(uint(subgroup_local_id)), uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (uint(uint(subgroup_local_id))))) + _GLF_IDENTITY(1, (false ? _GLF_FUZZED(72859) : _GLF_IDENTITY(1, max(1, 1)))))) < subgroup_size)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(true, true && (true)) && (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) || false), false, false, false)))) && true), (_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) || false), false, false, false)))) && true), (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false)))))))))) || false), false, false, false)))) && true)) || false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))), ! (! (false))), _GLF_IDENTITY(false, false || (false)) || (_GLF_IDENTITY(false, ! (! (false)))))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             do
              {
               return;
              }
             while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false));
            }
           for(int _injected_loop_counter = _GLF_IDENTITY((_GLF_IDENTITY(0 ^ _GLF_IDENTITY(_GLF_IDENTITY(0, (0) | (0)), (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), ~ (_GLF_IDENTITY(~ (int(5)), 0 + (~ (int(5)))))), int(5))) ^ (_GLF_IDENTITY(0, (0) | (0)))), min(0 ^ _GLF_IDENTITY(_GLF_IDENTITY(0, (0) | (0)), (0 << _GLF_IDENTITY(int(5), int(5))) ^ (_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) >> 0))))), 0 ^ _GLF_IDENTITY(_GLF_IDENTITY(0, (0) | (0)), (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, max(0, 0)))) << _GLF_IDENTITY(int(5), int(5))) ^ (_GLF_IDENTITY(0, (0) | (0))))))), int(ivec2((_GLF_IDENTITY(0 ^ _GLF_IDENTITY(_GLF_IDENTITY(0, (0) | (0)), (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), ~ (~ (int(5)))), _GLF_IDENTITY(int(5), (int(5)) | (int(5))))) ^ (_GLF_IDENTITY(0, (0) | (0)))), min(0 ^ _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, 0 + (0)), (0) | (0)), (0 << _GLF_IDENTITY(int(5), int(5))) ^ (_GLF_IDENTITY(0, (0) | (0)))), 0 ^ _GLF_IDENTITY(_GLF_IDENTITY(0, (0) | (0)), (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(5), int(5)), int(ivec2(0 << _GLF_IDENTITY(int(5), int(5)), 0)))) ^ (_GLF_IDENTITY(0, (0) | (0))))))), int(_GLF_ZERO(0.0, injectionSwitch.x))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY((_injected_loop_counter), (false ? _GLF_FUZZED(23241) : (_injected_loop_counter))) >> 0) != 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, bool(bvec2(false, true))) || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-3.7), _GLF_FUZZED(3.6)), bvec2(false, false))), injectionSwitch)).y, max(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-3.7), _GLF_FUZZED(3.6)), bvec2(false, false))), injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-3.7), _GLF_FUZZED(3.6)), bvec2(false, false))), injectionSwitch)).y))))) || false)))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true)), bool(bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x > injectionSwitch.y), bool(bool((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x > injectionSwitch.y)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec2(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x > injectionSwitch.y), bool(bool((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x > injectionSwitch.y)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))))))))
                  break;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, max(0, 0))); _injected_loop_counter --)
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (false) && true)))
                          barrier();
                         return;
                        }
                       barrier();
                       if(_GLF_DEAD(false))
                        return;
                      }
                    }
                   else
                    {
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(5599.8836)), float(injectionSwitch.x), bool(true))), 1.0 * (injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(6.5) : injectionSwitch.x)))) > injectionSwitch.y))))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                      }
                     else
                      {
                       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 | 1)); _injected_loop_counter ++)
                        {
                         return;
                        }
                      }
                     if(_GLF_DEAD(false))
                      {
                       do
                        {
                         barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_DEAD(false))
                        return;
                      }
                    }
                  }
                 barrier();
                }
              }
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(40.44)), float(injectionSwitch.x), bool(true))))) < injectionSwitch.y)), bool(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             return;
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
            }
          }
         atomicStore(checker[virtual_gid], read, 4, 64, 4);
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))), true))))))
            continue;
           if(_GLF_DEAD(false))
            barrier();
           break;
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               do
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   return;
                  }
                 else
                  {
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), (true ? _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, abs(vec2(0.0, 0.0)) + (injectionSwitch)))) : _GLF_FUZZED((+ vec2(179.233, -6.9))))).x > injectionSwitch.y))));
              }
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) && true)))))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (0 | 1)); _injected_loop_counter ++)
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
             else
              {
              }
            }
           if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
            barrier();
           if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
            continue;
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bool(true)))))
              {
               return;
              }
             else
              {
              }
            }
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec2(! (false), false)))))))
            break;
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, true && (true)), (injectionSwitch.x < injectionSwitch.y))))
                {
                 barrier();
                }
               else
                {
                }
              }
             return;
            }
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(42.01)), bool(false))))) < injectionSwitch.y))))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).x > injectionSwitch.y))))
                {
                }
               else
                {
                 barrier();
                }
              }
             continue;
            }
          }
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             return;
            }
          }
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), true && (_GLF_WRAPPED_IF_TRUE(true))))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, false || (true)))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               return;
              }
            }
          }
         subgroupAll(false);
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(8520.1117) : injectionSwitch.x)) > injectionSwitch.y))))
          break;
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            break;
           return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             continue;
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           do
            {
             if(_GLF_DEAD(false))
              {
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           do
            {
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = (1 ^ ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) | 0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(5), int(5)), (false ? _GLF_FUZZED(4159) : 1 << _GLF_IDENTITY(int(5), int(5))))) >> _GLF_IDENTITY(int(5), int(5))) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter ++)
                {
                 return;
                }
              }
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec3(_GLF_IDENTITY(bvec3(false, false, true), _GLF_IDENTITY(bvec3(bvec4(bvec3(false, false, true), true)), bvec3(bvec3(bvec3(bvec4(bvec3(false, false, true), true)))))))))))));
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          continue;
         for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(int(8), ~ (~ (_GLF_IDENTITY(int(8), (int(8)) >> 0)))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & ((_GLF_IDENTITY(1, min(_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), 0 ^ (_GLF_IDENTITY(1, ~ (~ (1))))), _GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, (1) ^ 0))))) << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), ~ (~ (_GLF_IDENTITY(int(6), int(6)))))))); _GLF_IDENTITY(_injected_loop_counter ++, ((1 & 1) ^ 1) + (_injected_loop_counter ++)))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(false))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               return;
              }
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))
          return;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (true)), (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch)).x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
           atomicStore(buf[virtual_gid], read, 4, _GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(clamp(-81372, (-31255 >> -61195), 53531)))), 4);
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 return;
                }
               else
                {
                }
              }
             break;
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
              {
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))), true, false, false)), (_GLF_IDENTITY(bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))), true, false, false)), (bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))), true, false, false))) || false)) || false)))
                barrier();
               for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(6, (_GLF_IDENTITY(6, int(ivec4(6, 1, 0, 1)))) / 1)), int(6))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 return;
                }
              }
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               return;
              }
             else
              {
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-7402.8928) : injectionSwitch.y))))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
              return;
            }
           barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))
            barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) && true))), _GLF_IDENTITY(true && (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-93.22)), float(injectionSwitch.x), bool(true)))) * 1.0))) < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y)))))), ! (! (true && (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(mix(float(_GLF_FUZZED(-93.22)), float(injectionSwitch.x), bool(true)), exp(0.0) * (mix(float(_GLF_FUZZED(-93.22)), float(injectionSwitch.x), bool(true)))))) * 1.0))) < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y)))))))))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
              continue;
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), ! (! (_GLF_IDENTITY(false, bool(bool(false))))))) || false), true && (_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) || false), ! (! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) || false))))))))
              {
               if(_GLF_DEAD(false))
                break;
               break;
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               do
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   barrier();
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
             else
              {
              }
             return;
            }
           for(int _injected_loop_counter = (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), min(int(5), int(5)))), max((1 << _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, _GLF_IDENTITY(int(_GLF_IDENTITY(int(_GLF_IDENTITY(5, (5) * 1)), (_GLF_IDENTITY(int(_GLF_IDENTITY(5, (5) * 1)), (int(_GLF_IDENTITY(5, (5) * 1))) >> 0)) | (int(_GLF_IDENTITY(5, (5) * 1))))), min(int(_GLF_IDENTITY(int(_GLF_IDENTITY(5, (5) * 1)), (_GLF_IDENTITY(int(_GLF_IDENTITY(5, (5) * 1)), (int(_GLF_IDENTITY(5, (5) * 1))) >> 0)) | (int(_GLF_IDENTITY(5, (5) * 1))))), int(_GLF_IDENTITY(int(_GLF_IDENTITY(5, (5) * 1)), (_GLF_IDENTITY(int(_GLF_IDENTITY(5, (5) * 1)), (int(_GLF_IDENTITY(5, (5) * 1))) >> 0)) | (int(_GLF_IDENTITY(5, (5) * 1))))))))))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), min(int(5), int(5)))), _GLF_IDENTITY((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), min(int(5), int(_GLF_IDENTITY(5, min(5, _GLF_IDENTITY(5, int(ivec2(_GLF_IDENTITY(5, (5) - 0), 1))))))))), ~ (~ (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), min(int(5), int(5)))), max((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), min(int(5), int(5)))), (_GLF_IDENTITY(1, max(1, 1)) << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), min(int(5), int(5)))))))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             do
              {
               subgroupAll(true);
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true)));
            }
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), ! (! (bool(_GLF_DEAD(false))))))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                  {
                   barrier();
                  }
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 for(int _injected_loop_counter = int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((true ? 275.535 : -6901.9671)), _GLF_FUZZED((9.5 / -6877.3659))), vec2(_GLF_IDENTITY((injectionSwitch)[_GLF_IDENTITY(0, max(0, 0))], clamp((injectionSwitch)[0], (injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch), mat2(1.0) * ((injectionSwitch)))[0])), (injectionSwitch)[_GLF_IDENTITY(1, min(1, 1))]), bvec2(true, true))).y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                  {
                   barrier();
                  }
                }
              }
             barrier();
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  return;
                }
               continue;
              }
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
              break;
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y)), ! (! (_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y)))))); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                   barrier();
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_DEAD(false))
                  {
                   do
                    {
                     return;
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, true && (false)), true, false)), ! (! (bool(bvec3(_GLF_IDENTITY(false, true && (false)), true, false)))))), (injectionSwitch.x > injectionSwitch.y))));
                  }
                }
               return;
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                continue;
               continue;
              }
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(false)), true && (! (_GLF_WRAPPED_IF_FALSE(false)))))))
              {
              }
             else
              {
               return;
              }
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), false || (_GLF_IDENTITY(false, (false) || false))))))))
                {
                }
               else
                {
                 barrier();
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))) * (_injected_loop_counter)) < _GLF_IDENTITY(1, _GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) + 0), 0)) + (1))); _injected_loop_counter ++)
              {
               return;
              }
            }
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false || (! ((injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bvec3(false || (! ((injectionSwitch.x > injectionSwitch.y))), true, true), bvec3(bvec3(bvec3(false || (! ((injectionSwitch.x > injectionSwitch.y))), true, true))))))))))))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             do
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-0.3)), vec2(_GLF_FUZZED(40.78), _GLF_IDENTITY((injectionSwitch)[1], float(mat3x4((injectionSwitch)[1], 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0)))), bvec2(false, true))), injectionSwitch)).x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    break;
                   barrier();
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                 barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, true, _GLF_IDENTITY(true, bool(bool(true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(bool(bool(false)), true && _GLF_IDENTITY((bool(bool(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec3(bvec3(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))))))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((bool(bool(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec3(bvec3(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))))))), bool(bvec3((bool(bool(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec3(bvec3(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))))))), true, false))), false, true, true)), bool(bvec3(bool(bvec4(_GLF_IDENTITY((bool(bool(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec3(bvec3(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))))))), bool(bvec3((bool(bool(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec3(bvec3(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))))))), true, false))), false, true, true)), false, false)))))))))));
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))))
                barrier();
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 do
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (_GLF_IDENTITY(! (false), ! (! (! (false))))) && true)))))
                    barrier();
                   barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               barrier();
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y)), ! (! (_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y)))))); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec2(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), true))), true)))))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                        }
                       else
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 0.0, sqrt(1.0), 1.0, cos(0.0)))).x > injectionSwitch.y))))
                          barrier();
                        }
                      }
                     else
                      {
                       barrier();
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        continue;
                      }
                    }
                  }
                 else
                  {
                  }
                 barrier();
                }
               if(_GLF_DEAD(false))
                break;
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
                barrier();
               break;
              }
             if(_GLF_DEAD(false))
              break;
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
              }
             else
              {
              }
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                continue;
               barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(false))
                return;
               break;
              }
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false))))), false || (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false)))))))))
                    return;
                  }
                }
              }
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, false))), ! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec2(false, false)))), ((_GLF_IDENTITY(false, bool(bvec2(false, false))))) || false), bool(bool(! (_GLF_IDENTITY(false, bool(bvec2(false, false))))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec2(false, false)))), bool(bool(! (_GLF_IDENTITY(false, bool(bvec2(false, false)))))))))), true && (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec2(false, false)))), bool(bool(! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), true && (_GLF_IDENTITY(bool(bvec2(false, false)), ! (! (bool(bvec2(false, false)))))))))))))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec2(false, false)))), bool(bool(! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), true && (_GLF_IDENTITY(bool(bvec2(false, false)), ! (! (bool(bvec2(false, false)))))))))))))), false, true, false))))))))))
              continue;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   return;
                  }
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], min(injectionSwitch[1], injectionSwitch[1])))).y))));
                }
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 continue;
                }
               return;
              }
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false)))
                  barrier();
                 break;
                }
               if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (! (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))))))))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_IDENTITY(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), false || ((injectionSwitch.x < injectionSwitch.y)))), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) || false)))
                  {
                   return;
                  }
                 else
                  {
                  }
                }
              }
             else
              {
               if(_GLF_DEAD(false))
                return;
              }
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             break;
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          {
           do
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              {
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           return;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           return;
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), true && ((! (false)))))))
          break;
         if(_GLF_DEAD(false))
          return;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))))) - length(vec2(0.0, 0.0))) > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)) || false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-56.97)), float(injectionSwitch.y), bool(true)))) * 1.0))), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))) || false), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), false, _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, false || (true))), (! (_GLF_IDENTITY(true, false || (true)))) || false))))))) || false), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat4(injectionSwitch.y, _GLF_IDENTITY(dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(0.0, abs(0.0), exp(0.0), abs(1.0))), _GLF_IDENTITY(dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(0.0, abs(0.0), exp(0.0), abs(1.0))), (dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(0.0, abs(0.0), exp(0.0), abs(1.0)))) - 0.0)), 0.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)), dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0))), 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, exp(0.0), 1.0, 1.0, 0.0, 1.0)), _GLF_IDENTITY(mix(float(float(mat4(injectionSwitch.y, _GLF_IDENTITY(dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(0.0, abs(0.0), exp(0.0), abs(1.0))), _GLF_IDENTITY(dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(0.0, abs(0.0), exp(0.0), abs(1.0))), (dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(0.0, abs(0.0), exp(0.0), abs(1.0)))) - 0.0)), 0.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)), dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0))), 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, exp(0.0), 1.0, 1.0, 0.0, 1.0))), float(_GLF_FUZZED(502.179)), bool(false)), (mix(float(float(mat4(injectionSwitch.y, _GLF_IDENTITY(dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(0.0, abs(0.0), exp(0.0), abs(1.0))), _GLF_IDENTITY(dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(0.0, abs(0.0), exp(0.0), abs(1.0))), (dot(_GLF_IDENTITY(vec4(1.0, 1.0, 0.0, 0.0), (_GLF_IDENTITY(vec4(1.0, 1.0, 0.0, 0.0), (vec4(1.0, 1.0, 0.0, 0.0)) - vec4(0.0, 0.0, 0.0, 0.0))) + vec4(0.0, 0.0, 0.0, 0.0)), vec4(0.0, abs(0.0), exp(0.0), abs(1.0)))) - 0.0)), 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec3(0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) * 1.0)), vec3(1.0, 1.0, 1.0)), dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0))), 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, exp(0.0), 1.0, 1.0, 0.0, 1.0))), float(_GLF_FUZZED(502.179)), bool(false))) + 0.0))))), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(961.951)), bool(false))), ! (_GLF_IDENTITY(! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(961.951)), bool(false)))), ! (! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(961.951)), bool(false)))))))))))) || false)))), ! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x > injectionSwitch.y))) || false)) || false), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x > injectionSwitch.y))) || false)) || false), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false))), true, true))))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))));
        }
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         return;
        }
      }
     for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
            {
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = _GLF_IDENTITY(((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), 1 * (int(7))))) >> _GLF_IDENTITY(int(7), int(7))), int(ivec3(((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), 1 * (int(7))))) >> _GLF_IDENTITY(int(7), int(7))), 1, 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 ^ _GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, ~ (~ (1)))), (~ (_GLF_IDENTITY(1, ~ (~ (1))))) - 0)))) ^ 0)) | 0)); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               barrier();
              }
            }
           else
            {
             return;
             if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 barrier();
                }
              }
            }
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(0, clamp(0, 0, 0))], (injectionSwitch[_GLF_IDENTITY(0, clamp(0, 0, 0))]) - log(1.0)), injectionSwitch[1])).x > injectionSwitch.y, true && (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(0, clamp(0, 0, 0))], (injectionSwitch[_GLF_IDENTITY(0, clamp(0, 0, 0))]) - log(1.0)), injectionSwitch[1])).x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(0, clamp(0, 0, 0))], (injectionSwitch[_GLF_IDENTITY(0, clamp(0, 0, 0))]) - log(1.0)), injectionSwitch[1])).x > injectionSwitch.y))))))))
      barrier();
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), bool(bvec2(bool(bvec4(false, true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - sqrt(sin(vec2(0.0, 0.0)))).x > injectionSwitch.y)), false)), true))))))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), bool(bvec3(bool(false), false, true)))))))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           barrier();
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false)))))))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             barrier();
            }
          }
        }
       else
        {
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bool(injectionSwitch.x < injectionSwitch.y))))) && (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3x4(injectionSwitch.y, 1.0, 1.0, determinant(mat4(0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)))) : _GLF_FUZZED(fract(-63.61)))), sqrt(0.0), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-67.68)))), float(_GLF_FUZZED(-7.8)), bool(false))), 0.0)), 1.0, 0.0, 0.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0)), 0.0, 0.0, sqrt(1.0), 0.0)), max(float(mat3x4(injectionSwitch.y, 1.0, 1.0, determinant(mat4(0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, sqrt(0.0), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(_GLF_IDENTITY(dot(_GLF_IDENTITY(vec2(1.0, 0.0), _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3(vec2(1.0, 0.0), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0), (mat3(vec2(1.0, 0.0), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), (vec2(_GLF_IDENTITY(mat3(vec2(1.0, 0.0), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0), (mat3(vec2(1.0, 0.0), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))) / vec2(1.0, 1.0))), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), clamp(_GLF_IDENTITY(dot(_GLF_IDENTITY(vec2(1.0, 0.0), _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3(vec2(1.0, 0.0), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0), (mat3(vec2(1.0, 0.0), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), (vec2(_GLF_IDENTITY(mat3(vec2(1.0, 0.0), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0), (mat3(vec2(1.0, 0.0), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))) / vec2(1.0, 1.0))), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), _GLF_IDENTITY(dot(_GLF_IDENTITY(vec2(1.0, 0.0), _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3(vec2(1.0, 0.0), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0), (mat3(vec2(1.0, 0.0), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), (vec2(_GLF_IDENTITY(mat3(vec2(1.0, 0.0), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0), (mat3(vec2(1.0, 0.0), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))) / vec2(1.0, 1.0))), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), _GLF_IDENTITY(_GLF_IDENTITY(dot(_GLF_IDENTITY(vec2(1.0, 0.0), _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3(vec2(1.0, 0.0), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0), (mat3(vec2(1.0, 0.0), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), (vec2(_GLF_IDENTITY(mat3(vec2(1.0, 0.0), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0), (mat3(vec2(1.0, 0.0), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))) / vec2(1.0, 1.0))), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), mix(float(_GLF_IDENTITY(dot(_GLF_IDENTITY(vec2(1.0, 0.0), _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3(vec2(1.0, 0.0), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0), (mat3(vec2(1.0, 0.0), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), (vec2(_GLF_IDENTITY(mat3(vec2(1.0, 0.0), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0), (mat3(vec2(1.0, 0.0), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))) / vec2(1.0, 1.0))), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0)))), float(_GLF_FUZZED(2.0)), bool(false))))), 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0)), 0.0, 0.0, sqrt(1.0), 0.0)), float(mat3x4(injectionSwitch.y, 1.0, 1.0, determinant(mat4(0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, sqrt(0.0), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 0.0, 0.0, 0.0)), 1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, log(abs(1.0)) + (_GLF_IDENTITY(0.0, max(0.0, 0.0)))), 0.0, _GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), (dot(vec2(1.0, 0.0), vec2(1.0, 0.0))) - 0.0), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0)), 0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), sqrt(1.0), 0.0)))))))), ! (_GLF_IDENTITY(! (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bool(injectionSwitch.x < injectionSwitch.y))))) && (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3x4(injectionSwitch.y, 1.0, 1.0, determinant(mat4(0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)))) : _GLF_FUZZED(fract(-63.61)))), sqrt(0.0), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-67.68)))), float(_GLF_FUZZED(-7.8)), bool(false))), 0.0)), 1.0, 0.0, 0.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0)), 0.0, 0.0, sqrt(1.0), 0.0)), max(float(mat3x4(injectionSwitch.y, 1.0, 1.0, determinant(mat4(0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, sqrt(0.0), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(_GLF_IDENTITY(dot(_GLF_IDENTITY(vec2(1.0, 0.0), _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3(vec2(1.0, 0.0), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0), (mat3(vec2(1.0, 0.0), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), (vec2(_GLF_IDENTITY(mat3(vec2(1.0, 0.0), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0), (mat3(vec2(1.0, 0.0), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))) / vec2(1.0, 1.0))), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), clamp(_GLF_IDENTITY(dot(_GLF_IDENTITY(vec2(1.0, 0.0), _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3(vec2(1.0, 0.0), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0), (mat3(vec2(1.0, 0.0), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), (vec2(_GLF_IDENTITY(mat3(vec2(1.0, 0.0), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0), (mat3(vec2(1.0, 0.0), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))) / vec2(1.0, 1.0))), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), _GLF_IDENTITY(dot(_GLF_IDENTITY(vec2(1.0, 0.0), _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3(vec2(1.0, 0.0), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0), (mat3(vec2(1.0, 0.0), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), (vec2(_GLF_IDENTITY(mat3(vec2(1.0, 0.0), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0), (mat3(vec2(1.0, 0.0), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))) / vec2(1.0, 1.0))), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), _GLF_IDENTITY(_GLF_IDENTITY(dot(_GLF_IDENTITY(vec2(1.0, 0.0), _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3(vec2(1.0, 0.0), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0), (mat3(vec2(1.0, 0.0), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), (vec2(_GLF_IDENTITY(mat3(vec2(1.0, 0.0), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0), (mat3(vec2(1.0, 0.0), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))) / vec2(1.0, 1.0))), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), mix(float(_GLF_IDENTITY(dot(_GLF_IDENTITY(vec2(1.0, 0.0), _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3(vec2(1.0, 0.0), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0), (mat3(vec2(1.0, 0.0), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), (vec2(_GLF_IDENTITY(mat3(vec2(1.0, 0.0), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0), (mat3(vec2(1.0, 0.0), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))) / vec2(1.0, 1.0))), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0)))), float(_GLF_FUZZED(2.0)), bool(false))))), 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0)), 0.0, 0.0, sqrt(1.0), 0.0)), float(mat3x4(injectionSwitch.y, 1.0, 1.0, determinant(mat4(0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, sqrt(0.0), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 0.0, 0.0, 0.0)), 1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, log(abs(1.0)) + (_GLF_IDENTITY(0.0, max(0.0, 0.0)))), 0.0, _GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), (dot(vec2(1.0, 0.0), vec2(1.0, 0.0))) - 0.0), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0)), 0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), sqrt(1.0), 0.0))))))))), (! (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bool(injectionSwitch.x < injectionSwitch.y))))) && (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3x4(injectionSwitch.y, 1.0, 1.0, determinant(mat4(0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)))) : _GLF_FUZZED(fract(-63.61)))), sqrt(0.0), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-67.68)))), float(_GLF_FUZZED(-7.8)), bool(false))), 0.0)), 1.0, 0.0, 0.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 1.0, 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(7.1) : 1.0)), 1.0)), 0.0, 0.0, sqrt(1.0), 0.0)), max(float(mat3x4(injectionSwitch.y, 1.0, 1.0, determinant(mat4(0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, sqrt(0.0), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(_GLF_IDENTITY(dot(_GLF_IDENTITY(_GLF_IDENTITY(vec2(1.0, 0.0), _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3(vec2(1.0, 0.0), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0), (mat3(vec2(1.0, 0.0), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), (vec2(_GLF_IDENTITY(mat3(vec2(1.0, 0.0), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0), (mat3(vec2(1.0, 0.0), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))) / vec2(1.0, 1.0))), (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(_GLF_IDENTITY(vec2(1.0, 0.0), _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3(vec2(1.0, 0.0), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0), (mat3(vec2(1.0, 0.0), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), (vec2(_GLF_IDENTITY(mat3(vec2(1.0, 0.0), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0), (mat3(vec2(1.0, 0.0), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))) / vec2(1.0, 1.0))), mix(vec2((_GLF_IDENTITY(vec2(1.0, 0.0), _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3(vec2(1.0, 0.0), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0), (mat3(vec2(1.0, 0.0), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), (vec2(_GLF_IDENTITY(mat3(vec2(1.0, 0.0), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0), (mat3(vec2(1.0, 0.0), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))) / vec2(1.0, 1.0))))[0], _GLF_FUZZED((+ 1.6))), vec2(_GLF_FUZZED(-3.5), (_GLF_IDENTITY(vec2(1.0, 0.0), _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3(vec2(1.0, 0.0), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0), (mat3(vec2(1.0, 0.0), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), (vec2(_GLF_IDENTITY(mat3(vec2(1.0, 0.0), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0), (mat3(vec2(1.0, 0.0), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))) / vec2(1.0, 1.0))))[1]), bvec2(false, true))))), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(dot(_GLF_IDENTITY(vec2(1.0, 0.0), _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3(vec2(1.0, 0.0), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0), (mat3(vec2(1.0, 0.0), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), (vec2(_GLF_IDENTITY(mat3(vec2(1.0, 0.0), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0), (mat3(vec2(1.0, 0.0), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))) / vec2(1.0, 1.0))), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(dot(_GLF_IDENTITY(vec2(1.0, 0.0), _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3(vec2(1.0, 0.0), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0), (mat3(vec2(1.0, 0.0), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), (vec2(_GLF_IDENTITY(mat3(vec2(1.0, 0.0), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0), (mat3(vec2(1.0, 0.0), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))) / vec2(1.0, 1.0))), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), min(_GLF_IDENTITY(dot(_GLF_IDENTITY(vec2(1.0, 0.0), _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3(vec2(1.0, 0.0), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0), (mat3(vec2(1.0, 0.0), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), (vec2(_GLF_IDENTITY(mat3(vec2(1.0, 0.0), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0), (mat3(vec2(1.0, 0.0), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))) / vec2(1.0, 1.0))), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), _GLF_IDENTITY(dot(_GLF_IDENTITY(vec2(1.0, 0.0), _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3(vec2(1.0, 0.0), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0), (mat3(vec2(1.0, 0.0), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), (vec2(_GLF_IDENTITY(mat3(vec2(1.0, 0.0), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0), (mat3(vec2(1.0, 0.0), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))) / vec2(1.0, 1.0))), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))))), _GLF_IDENTITY(_GLF_IDENTITY(dot(_GLF_IDENTITY(vec2(1.0, 0.0), _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3(vec2(1.0, 0.0), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0), (mat3(vec2(1.0, 0.0), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), (vec2(_GLF_IDENTITY(mat3(vec2(1.0, 0.0), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0), (mat3(vec2(1.0, 0.0), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))) / vec2(1.0, 1.0))), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), (_GLF_IDENTITY(dot(_GLF_IDENTITY(vec2(1.0, 0.0), _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3(vec2(1.0, 0.0), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0), (mat3(vec2(1.0, 0.0), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), (vec2(_GLF_IDENTITY(mat3(vec2(1.0, 0.0), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0), (mat3(vec2(1.0, 0.0), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))) / vec2(1.0, 1.0))), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0)))) - 0.0), _GLF_IDENTITY(dot(_GLF_IDENTITY(vec2(1.0, 0.0), _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3(vec2(1.0, 0.0), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0), (mat3(vec2(1.0, 0.0), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), (vec2(_GLF_IDENTITY(mat3(vec2(1.0, 0.0), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0), (mat3(vec2(1.0, 0.0), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))) / vec2(1.0, 1.0))), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))))), _GLF_IDENTITY(dot(_GLF_IDENTITY(vec2(1.0, 0.0), _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3(vec2(1.0, _GLF_IDENTITY(0.0, float(float(0.0)))), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0), (mat3(vec2(1.0, 0.0), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)) - _GLF_IDENTITY(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0), (mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), (vec2(_GLF_IDENTITY(mat3(vec2(1.0, 0.0), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0), (mat3(vec2(1.0, 0.0), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))) / vec2(1.0, 1.0))), vec2(1.0, _GLF_IDENTITY(0.0, float(vec4(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-9.4))), 0.0, 1.0, 0.0))))), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), _GLF_IDENTITY(_GLF_IDENTITY(dot(_GLF_IDENTITY(vec2(1.0, 0.0), _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3(vec2(1.0, 0.0), 1.0, _GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, (1.0) + 0.0), 1.0)), 1.0, 0.0, 0.0, 0.0, 1.0), (mat3(vec2(1.0, 0.0), 1.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, 1.0)) - mat3(0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(7.8)), bool(false)))) - 0.0), 0.0, 0.0, 0.0, 0.0, 0.0))), (vec2(_GLF_IDENTITY(mat3(vec2(1.0, 0.0), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0), (mat3(vec2(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(injectionSwitch[1]) : 1.0)))), 0.0), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))) / vec2(1.0, 1.0))), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), mix(float(_GLF_IDENTITY(dot(_GLF_IDENTITY(vec2(1.0, 0.0), _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3(_GLF_IDENTITY(vec2(1.0, 0.0), (false ? _GLF_FUZZED(injectionSwitch) : vec2(1.0, 0.0))), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0), (mat3(vec2(1.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)) - mat3(0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, 1.0 * (0.0)), 0.0, 0.0, 0.0, 0.0))), (vec2(_GLF_IDENTITY(mat3(vec2(1.0, 0.0), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0), (mat3(vec2(1.0, 0.0), 1.0, 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-548.773)))) - 0.0), 0.0)), 1.0)) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))) / vec2(1.0, 1.0))), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0)))), float(_GLF_FUZZED(2.0)), bool(false))))), 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0)), 0.0, 0.0, sqrt(1.0), 0.0)), float(mat3x4(injectionSwitch.y, 1.0, 1.0, determinant(mat4(0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, sqrt(0.0), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 0.0, 0.0, 0.0)), 1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, log(abs(1.0)) + (_GLF_IDENTITY(0.0, max(0.0, 0.0)))), 0.0, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), (dot(vec2(1.0, 0.0), vec2(1.0, 0.0))) - 0.0), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), exp(0.0) * (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), (dot(vec2(1.0, 0.0), vec2(1.0, 0.0))) - 0.0), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), mix(float(_GLF_FUZZED(-5.0)), float(_GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), (dot(vec2(1.0, 0.0), vec2(1.0, 0.0))) - 0.0), dot(vec2(1.0, 0.0), vec2(1.0, 0.0)))), bool(true))))), 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0)), 0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), sqrt(1.0), 0.0)))))))))) || false))))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y, _GLF_IDENTITY(float(_GLF_IDENTITY(mat4(injectionSwitch.y, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 0.0, 1.0, 1.0, tan(length(vec3(0.0, 0.0, 0.0))), 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-1962.4132)), float(injectionSwitch.y), bool(true)))), 1.0, _GLF_ZERO(0.0, injectionSwitch.x)), (mat4(injectionSwitch.y, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 0.0, 1.0, 1.0, tan(length(vec3(0.0, 0.0, 0.0))), 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), _GLF_ONE(1.0, injectionSwitch.y), 1.0, _GLF_ZERO(0.0, injectionSwitch.x))) / mat4(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, (1.0) * abs(1.0)), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0), 1.0))), min(float(_GLF_IDENTITY(mat4(injectionSwitch.y, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 0.0, 1.0, 1.0, tan(length(_GLF_IDENTITY(vec3(0.0, 0.0, 0.0), max(vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0))))), 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), 1.0, _GLF_ZERO(0.0, injectionSwitch.x)), (mat4(injectionSwitch.y, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 0.0, 1.0, 1.0, tan(length(vec3(0.0, 0.0, 0.0))), _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(9.9)), float(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(672.166)))), bool(true))), 0.0)), 1.0, _GLF_IDENTITY(round(length(normalize(vec3(1.0, 1.0, 1.0)))), mix(float(_GLF_FUZZED(float(false))), float(_GLF_IDENTITY(round(length(normalize(vec3(1.0, 1.0, 1.0)))), mix(float(round(length(normalize(vec3(1.0, 1.0, 1.0))))), float(_GLF_FUZZED(-548.488)), bool(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, true && (false)), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(false, true && (false)), false), true))))))))), bool(true))), _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(1.0, max(1.0, 1.0)), _GLF_ZERO(0.0, injectionSwitch.x))) / mat4(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, 1.0, 1.0, 1.0, 1.0))), float(_GLF_IDENTITY(mat4(injectionSwitch.y, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 0.0, 1.0, 1.0, tan(length(vec3(0.0, 0.0, 0.0))), 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), _GLF_ONE(1.0, injectionSwitch.y), 1.0, _GLF_ZERO(0.0, injectionSwitch.x)), (mat4(injectionSwitch.y, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), tan(length(vec3(0.0, 0.0, 0.0))), 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0)))))), _GLF_ONE(1.0, injectionSwitch.y), 1.0, _GLF_ZERO(0.0, injectionSwitch.x))) / mat4(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))))))))))
            return;
           if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
            {
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (1) << 0), 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 return;
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_DEAD(false))
              return;
             barrier();
             if(_GLF_DEAD(false))
              return;
            }
           do
            {
             if(_GLF_DEAD(false))
              continue;
             return;
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x4(injectionSwitch, 1.0, 0.0, 0.0, 1.0, length(vec2(0.0, 0.0)), 0.0)), max(vec2(mat2x4(injectionSwitch, 1.0, 0.0, 0.0, 1.0, length(vec2(0.0, 0.0)), 0.0)), vec2(mat2x4(injectionSwitch, 1.0, 0.0, 0.0, 1.0, length(vec2(0.0, 0.0)), 0.0))))))).y))))
                barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
                continue;
               break;
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            return;
          }
        }
       else
        {
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             return;
            }
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(0.8), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-3.4)), bvec2(true, false)))) / vec2(1.0, 1.0)).x > injectionSwitch.y))))
          return;
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y))))
            {
             barrier();
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               do
                {
                 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) && true))
                  barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))))))
                    {
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter --)
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          {
                           for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-268.618) : injectionSwitch.y))))); _GLF_IDENTITY(_injected_loop_counter ++, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _injected_loop_counter ++ : _GLF_FUZZED(atomicAnd(_injected_loop_counter, -9728)))))
                            {
                             return;
                            }
                          }
                         barrier();
                        }
                      }
                     continue;
                    }
                   return;
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      return;
                    }
                   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), 0 + (_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), 1 * (_GLF_IDENTITY(int(0), int(0))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter --)
                    {
                     if(_GLF_DEAD(false))
                      return;
                    }
                  }
                 if(_GLF_DEAD(false))
                  break;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3x4(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-6469.0662, -634.557)) : injectionSwitch)), 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0), (mat3x4(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-6469.0662, -634.557)) : injectionSwitch)), 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0)) * mat3(1.0))), (vec2(_GLF_IDENTITY(mat3x4(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-6469.0662, -634.557)) : injectionSwitch)), 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0), (mat3x4(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-6469.0662, -634.557)) : injectionSwitch)), 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0)) * mat3(1.0)))) * mat2(1.0))).x < injectionSwitch.y))))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             do
              {
               barrier();
               if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bvec4(_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bvec2(! (_GLF_DEAD(false)), false))), true, false, false))))))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
            }
          }
         else
          {
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true && (false), false || (_GLF_IDENTITY(true && (false), (true && (false)) || false)))), false || (! (_GLF_IDENTITY(true && (false), false || (_GLF_IDENTITY(true && (false), (true && (false)) || false)))))))))))
        {
         for(int _injected_loop_counter = ((0 | int(_GLF_ONE(1.0, injectionSwitch.y))) & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
}
