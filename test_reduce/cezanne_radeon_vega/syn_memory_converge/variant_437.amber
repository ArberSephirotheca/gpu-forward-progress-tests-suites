#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((((false) && ((injectionSwitch.x < injectionSwitch.y)))))
  barrier();
 if((false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((((((mat2(1.0) * (vec2(mat2x4(injectionSwitch, 0.0, abs(0.0), 0.0, 0.0, 1.0, 1.0))))).x > injectionSwitch.y))))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if((false))
  barrier();
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 if((false))
  barrier();
 if((((((injectionSwitch.x > injectionSwitch.y)) && true))))
  barrier();
 if((((injectionSwitch.x > (1.0 * (injectionSwitch.y))))))
  {
   if(((((min(injectionSwitch, (clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(((! (! (false)))))
  barrier();
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(((bool(bvec4(((false) || false), false, false, true)))))
  barrier();
 if(((! (! (false)))))
  barrier();
 if((((((false) || false)) && (! ((bool(bvec4(! (true), false, true, true))))))))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * (min(workgroup_id, workgroup_id));
 uint virtual_gid = (min((uint(uint(((true ? workgroup_base + ((((subgroup_id * subgroup_size) | (subgroup_id * subgroup_size))) + 0u) + (((((0u | (subgroup_local_id))) ^ 0u)) ^ 0u) : (workgroup_size)))))), (clamp(((false ? (((8747u) ^ 0u)) : (~ ((~ (~ (~ (workgroup_base)))))) + (((((min((clamp((clamp(subgroup_id, subgroup_id, subgroup_id)), subgroup_id, subgroup_id)), subgroup_id)) * subgroup_size) | (subgroup_id * subgroup_size))) + 0u) + subgroup_local_id)), ((false ? ((((((false ? (subgroup_local_id) : ((0u ^ (((max((8747u), (8747u))) ^ 0u))) ^ 0u))))) ^ 0u)) : ((workgroup_base + ((clamp((max(((((min((clamp((clamp(subgroup_id, subgroup_id, subgroup_id)), subgroup_id, subgroup_id)), subgroup_id)) * subgroup_size) | (subgroup_id * subgroup_size))), ((((min((clamp((clamp(subgroup_id, subgroup_id, subgroup_id)), subgroup_id, subgroup_id)), subgroup_id)) * subgroup_size) | (subgroup_id * subgroup_size))))), ((((min((clamp((clamp(subgroup_id, subgroup_id, subgroup_id)), subgroup_id, subgroup_id)), subgroup_id)) * subgroup_size) | (subgroup_id * subgroup_size))), ((((min((clamp((clamp(subgroup_id, subgroup_id, subgroup_id)), subgroup_id, subgroup_id)), subgroup_id)) * subgroup_size) | (subgroup_id * subgroup_size))))) + 0u) + subgroup_local_id) << 0u))), ((false ? (((8747u) ^ (~ (~ ((0u + (0u))))))) : workgroup_base + (((((min((clamp((clamp(subgroup_id, ((subgroup_id) * 1u), subgroup_id)), subgroup_id, subgroup_id)), subgroup_id)) * subgroup_size) | (subgroup_id * subgroup_size))) + 0u) + subgroup_local_id))))));
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
   if((false))
    barrier();
  }
 if((false))
  barrier();
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(((((vec2(mat3(injectionSwitch, (((true ? injectionSwitch.y : (- 4042.3039)))), 1.0, 1.0, 1.0, sqrt(0.0), 0.0, 1.0))).x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   barrier();
  }
 if(((false || ((false || (((injectionSwitch.x > injectionSwitch.y))))))))
  barrier();
 if((((((injectionSwitch.x > injectionSwitch.y) || false)))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((((false ? (467.563) : ((mix(float((5.5)), float(float(mat4(injectionSwitch.x, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0))), bool(true)))))) > injectionSwitch.y))))
    {
     if((false))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > (mix(float((- 338.931)), float(injectionSwitch.y), bool(true)))))))
    barrier();
   if((((false)) || false))
    {
     if((((((injectionSwitch.x > (((false ? (94.40) : float(((true ? (transpose(transpose(mat4x2(((injectionSwitch.y) - 0.0), 1.0, sin(0.0), 1.0, 1.0, 1.0, cos(0.0), 1.0)))) : (mat4x2(- 6.9, - 882.085, 44.63, 5.5, 7843.0158, 0.2, 1.9, - 3.3))))))))))) && true)))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((! (! ((false)))))
    {
     if((false))
      barrier();
     if((false))
      {
       if((((((false ? (((false ? vec4(4075.9361, 737.263, - 2183.4754, 228.759) : vec4(- 5.1, - 7.6, - 3.2, 3.1)) * mat2x4(30.02, 8416.2903, - 49.09, - 4.8, - 987.842, - 29.44, 5.0, - 771.693))) : injectionSwitch)).x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if((false))
      barrier();
     barrier();
    }
   barrier();
   if((false))
    barrier();
  }
 atomicStore(write_val, uint(virtual_gid), (max(4, (~ (~ (4))))), 64, (int(ivec2(0, 0))));
 if((((injectionSwitch.x > (((max(injectionSwitch.y, injectionSwitch.y))) / 1.0)))))
  barrier();
 if((false))
  barrier();
 buf[virtual_gid] = uint(subgroupAllEqual(write_val));
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((true && ((false))))
  {
   if(((! (! ((((max(injectionSwitch, (vec2(injectionSwitch[0], injectionSwitch[1])))).x > injectionSwitch.y)))))))
    barrier();
   if((false))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
