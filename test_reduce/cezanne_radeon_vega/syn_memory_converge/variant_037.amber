#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = (max((((((((((0.0 + ((((0.0 + (injectionSwitch.x))) * cos(0.0)))) > injectionSwitch.y) || ((injectionSwitch.x > injectionSwitch.y))))) ? (uvec3((clamp(82779u, 82779u, 82779u)), 178972u, 57359u)) : gl_WorkGroupSize) | (((injectionSwitch.x > injectionSwitch.y)) ? (uvec3((clamp((((((mix(float((2.7)), float(injectionSwitch.x), bool(true))) < injectionSwitch.y)) ? 82779u : (170528u))), 82779u, ((((82779u) - 0u)) >> 0u))), 178972u, 57359u)) : gl_WorkGroupSize)))), (~ (~ (((uvec3(uvec3((((uvec3(((uvec4((((((((injectionSwitch.x > injectionSwitch.y)) ? ((uvec3((injectionSwitch.x), (injectionSwitch.x), (injectionSwitch.x)) | (uvec3(82779u, ((((((178972u) | (178972u)))) << 0u) << 0u), (((uint(uint(57359u))) | 0u)))))) : ((false ? (uvec3(140710u, 52778u, 151429u)) : ((true ? gl_WorkGroupSize : (uvec3(179920u, 159150u, 20704u))))))))) | ((max(((((injectionSwitch.x > injectionSwitch.y)) ? (uvec3(((((82779u) / 1u)) | (82779u)), 178972u, (((0u | (57359u))) + 0u))) : gl_WorkGroupSize)), ((((((injectionSwitch) * mat2(1.0)).x > injectionSwitch.y)) ? (uvec3(82779u, 178972u, 57359u)) : gl_WorkGroupSize))))))), (0u >> (uint(0u))))) ^ uvec4(0u, 0u, 0u, 0u)))) >> uvec3(0u, 0u, 0u))))))) - (uvec3(uvec3(((uvec3(0u, 0u, ((0u) | 0u))) / uvec3(1u, 1u, 1u)))))))))).x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = (max(workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size)) + subgroup_local_id;
 atomicStore(write_val, uint(virtual_gid), 4, 64, 0);
 buf[virtual_gid] = uint(subgroupAllEqual(write_val));
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
