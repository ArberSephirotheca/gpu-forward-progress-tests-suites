#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((false))
  barrier();
 if(false)
  {
  }
 else
  {
   if((false))
    {
     do
      {
       barrier();
      }
     while(false);
     if((false))
      barrier();
     if((false))
      barrier();
    }
  }
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
 if((! (! (((injectionSwitch.x < injectionSwitch.y))))))
  {
   if((false))
    barrier();
  }
 else
  {
  }
 if((false))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   if(((! (! (false)))))
    {
     if((((((! (! (bool(bvec4(((injectionSwitch.x > (max((mat2(1.0) * (injectionSwitch)), injectionSwitch)).y)), false, ((injectionSwitch.x > injectionSwitch.y)), false)))))) && true))))
      barrier();
     barrier();
     if((false))
      barrier();
    }
   barrier();
   if((false))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
  }
 if((false))
  barrier();
 if((false))
  {
   if(((bool(bvec3(((injectionSwitch.x > injectionSwitch.y)), false, false)))))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if((false))
  barrier();
 if(((bool(bvec3(false, false, false)))))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 if((((true && ((injectionSwitch.x > injectionSwitch.y))))))
  {
   if(((bool(bool(false)))))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   if(false)
    {
     for(int _injected_loop_counter = (0 >> (int(0))); _injected_loop_counter < 1; _injected_loop_counter ++)
      {
       if((false))
        {
         if((((injectionSwitch.x > (vec2(((vec2(((clamp((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0)))))) / abs(vec2(1.0, 1.0))))).y))))
          barrier();
         barrier();
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
    }
   else
    {
     if((false))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     if((false))
      barrier();
    }
   barrier();
   if((false))
    barrier();
   if(false)
    {
    }
   else
    {
     if((false))
      barrier();
    }
   if((false))
    barrier();
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     barrier();
    }
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 if((((injectionSwitch.x > ((injectionSwitch.y) - 0.0)))))
  barrier();
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((! (! ((false)))))
  {
   if((false))
    {
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     do
      {
       barrier();
      }
     while((! (! (((injectionSwitch.x > injectionSwitch.y))))));
    }
   barrier();
  }
 if((false))
  barrier();
 do
  {
   if((false))
    barrier();
   if((false))
    barrier();
   if(((bool(bvec3(((injectionSwitch.x > injectionSwitch.y)), true, false)))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     barrier();
    }
  }
 while(((false) && true));
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(((((! (! (((injectionSwitch.x > (vec2(vec2(injectionSwitch))).y) && true))))))))
  {
   if(false)
    {
    }
   else
    {
     barrier();
    }
  }
 if((((injectionSwitch.x > (max(injectionSwitch.y, injectionSwitch.y))))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((false))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   if((((false) && true)))
    barrier();
   barrier();
   if((false))
    barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint virtual_gid = (min((max(workgroup_base + (0u ^ ((uint(uint(subgroup_id * subgroup_size))))) + ((clamp((0u ^ ((((((subgroup_local_id) | (subgroup_local_id))) / 1u)))), (((((subgroup_local_id) | (subgroup_local_id))) / 1u)), (((((((0u ^ ((subgroup_local_id)))) >> 0u) | (subgroup_local_id))) / 1u)))) ^ ((~ ((min((((((0u ^ (~ (uint((clamp((injectionSwitch.x), ((max(injectionSwitch.x, (min(injectionSwitch.x, injectionSwitch.x))))), (injectionSwitch.x)))))))) - 0u)) * 1u), (0u ^ (~ (uint((clamp((injectionSwitch.x), ((max(injectionSwitch.x, (min(injectionSwitch.x, injectionSwitch.x))))), (injectionSwitch.x))))))))))) ^ 0u)), workgroup_base + (0u ^ ((uint(uint(subgroup_id * subgroup_size))))) + ((clamp((0u ^ ((((((subgroup_local_id) | (subgroup_local_id))) / 1u)))), (((((subgroup_local_id) | (subgroup_local_id))) / 1u)), (((((~ (~ ((subgroup_local_id) | (clamp((subgroup_local_id), (subgroup_local_id), (~ (((~ ((subgroup_local_id))) >> 0u)))))))))) / 1u)))) ^ ((~ ((0u ^ (~ (uint((clamp((injectionSwitch.x), ((max(injectionSwitch.x, (min(((injectionSwitch) * vec2(1.0, 1.0)).x, injectionSwitch.x))))), (injectionSwitch.x))))))))) ^ 0u)))), ((workgroup_base + (0u ^ ((uint(uint(subgroup_id * subgroup_size))))) + ((clamp((0u ^ ((((((subgroup_local_id) | (((subgroup_local_id)) | (((true ? (subgroup_local_id) : (atomicMin(workgroup_size, workgroup_base)))))))) / 1u)))), ((((0u ^ (((((subgroup_local_id) | (subgroup_local_id))) / 1u)))) >> 0u)), (((((subgroup_local_id) | (subgroup_local_id))) / 1u)))) ^ ((~ ((0u ^ (~ (uint((clamp((injectionSwitch.x), ((true ? ((max(injectionSwitch.x, (min(injectionSwitch.x, injectionSwitch.x))))) : (float(38583)))), (injectionSwitch.x))))))))) ^ 0u))) | (workgroup_base + (0u ^ ((uint(uint(subgroup_id * subgroup_size))))) + ((clamp((0u ^ ((((((subgroup_local_id) | (subgroup_local_id))) / 1u)))), (((((subgroup_local_id) | (subgroup_local_id))) / 1u)), (((((subgroup_local_id) | (subgroup_local_id))) / 1u)))) ^ ((~ ((((0u) * uint((injectionSwitch.y))) ^ (~ (uint((clamp((mix(float((injectionSwitch.x)), float((21.43)), bool(false))), ((max(injectionSwitch.x, (min(injectionSwitch.x, injectionSwitch.x))))), (injectionSwitch.x))))))))) ^ 0u))))));
 for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   do
    {
     if((false))
      barrier();
     if((false))
      barrier();
     if(((false || (false))))
      {
       if((false))
        barrier();
       if((false))
        barrier();
       if((false))
        {
         do
          {
           if((false))
            barrier();
           barrier();
          }
         while((! (! (false))));
        }
       do
        {
         if((false))
          barrier();
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((((injectionSwitch.x > ((float(vec3(min((mix(float((min(injectionSwitch.y, injectionSwitch.y))), float((mix(float((- 8.6)), float((- 1.6)), bool(((injectionSwitch.x < injectionSwitch.y)))))), bool(false))), (min((min(injectionSwitch.y, injectionSwitch.y)), (mix(float(injectionSwitch.y), float((vec4(- 26.85, 623.546, 6124.1338, - 80.27).q)), bool(false)))))), 1.0, 1.0))))))))
        {
         if((((false) || false)))
          barrier();
         if(false)
          {
          }
         else
          {
           barrier();
          }
        }
       if(((bool(bvec3((bool(bvec3((true && ((injectionSwitch.x < injectionSwitch.y))), true, false))), true, true)))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          {
           if(true)
            {
             barrier();
            }
           else
            {
            }
          }
         barrier();
        }
       else
        {
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if((false))
      barrier();
     if((((! (! (bool(bvec4(false, true, true, false))))))))
      barrier();
    }
   while(false);
   if((false))
    {
     if((false))
      barrier();
     barrier();
     if((false))
      {
       do
        {
         barrier();
        }
       while(false);
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   do
    {
     for(int _injected_loop_counter = (1 & 1); _injected_loop_counter != 0; _injected_loop_counter --)
      {
       if((((false || (false))) && true))
        {
         if(((true && (false))))
          barrier();
         if(true)
          {
           if(((! (! (((injectionSwitch.x > injectionSwitch.y))))) || ((! (! ((false)))))))
            {
             if((false))
              {
               if(((false || (false))))
                barrier();
               barrier();
              }
             if((false))
              barrier();
             barrier();
            }
          }
         else
          {
          }
        }
       else
        {
         if((false))
          barrier();
         atomicStore(write_val, uint(virtual_gid), 4, 64, 0);
         if((false))
          {
           do
            {
             if((false))
              barrier();
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
           do
            {
             for(int _injected_loop_counter = ((0 ^ (0)) << (int(8))); _injected_loop_counter < 1; _injected_loop_counter ++)
              {
               barrier();
              }
            }
           while(false);
          }
        }
      }
    }
   while(false);
  }
 if((false))
  barrier();
 if((false))
  {
   if(((((injectionSwitch.x > injectionSwitch.y)) || (false))))
    barrier();
   if(true)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
    }
   else
    {
    }
   barrier();
  }
 buf[virtual_gid] = ((1u ^ 1u) + ((1u * (uint(subgroupAllEqual(write_val))))));
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
