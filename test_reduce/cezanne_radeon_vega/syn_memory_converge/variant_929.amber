#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((false))
  return;
 if(((! ((true && (! (false || ((false)))))))))
  return;
 if((false || ((false))))
  {
   if((false))
    return;
   if((false))
    {
     if((false))
      return;
     return;
    }
   if((false))
    {
     if((((! (! (((min(injectionSwitch.x, (mix(float(injectionSwitch.x), float((- 3.4)), bool(false))))) > injectionSwitch.y)))))))
      return;
     return;
     if((false))
      return;
    }
   if((false))
    return;
   if((false))
    {
     if((false))
      return;
     return;
    }
   if((false))
    return;
   return;
   if((false))
    {
     if((false))
      return;
     if((false))
      {
       if((((false) || false)))
        return;
       return;
      }
     return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if((false))
  {
   if((false))
    return;
   return;
  }
 uint subgroup_id = gl_SubgroupID;
 if((false))
  return;
 if(((((clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
  return;
 if((false))
  return;
 if((((true && ((false))) || false)))
  {
   if((false))
    return;
   if((false))
    return;
   return;
  }
 if((((((true && (false))) && true) || (false))))
  return;
 if(((! (! ((bool(bool((((((! (! (false)))) || false))))))))) && true))
  {
   if((false))
    return;
   return;
  }
 if((false))
  return;
 if((false))
  {
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
   if((false))
    return;
  }
 uint subgroup_size = gl_SubgroupSize;
 if((((! ((false || (! ((injectionSwitch.x > injectionSwitch.y)))))))))
  return;
 if((false))
  return;
 if((false))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((false))
  return;
 if(((true && (false))))
  {
   if((! (! ((((injectionSwitch.x > injectionSwitch.y)))))))
    return;
   if((((! (! ((injectionSwitch.x > injectionSwitch.y)))))))
    return;
   return;
   if((false))
    return;
  }
 if(((bool(bvec3(false, false, true)))))
  return;
 if((((bool(bvec4((true && ((false))), false, false, true)))) || false))
  {
   if((false))
    return;
   if((false))
    {
     if((false))
      return;
     return;
    }
   return;
  }
 uint num_workgroup = (max((clamp((~ ((max((uvec3(((uvec3(((~ (gl_NumWorkGroups)) + uvec3(0u, 0u, 0u)))) | (uvec3(~ (gl_NumWorkGroups)))))), (uvec3(uvec3(~ (gl_NumWorkGroups)))))))), (((~ ((uvec3(uvec3(~ (gl_NumWorkGroups))))))) | ((clamp((~ ((uvec3(uvec3(~ (gl_NumWorkGroups)))))), (~ ((uvec3(uvec3(~ (gl_NumWorkGroups)))))), (~ ((uvec3(uvec3(~ (gl_NumWorkGroups)))))))))), (~ ((((((uvec3(uvec3(~ (gl_NumWorkGroups)))) / uvec3(1u, 1u, 1u))) >> uvec3(0u, 0u, 0u))))))), gl_NumWorkGroups)).x;
 if((false))
  return;
 if((((injectionSwitch.x > ((false ? (9.3) : (mix(float(injectionSwitch.y), float((3.7)), bool(false)))))))))
  {
   if((false))
    return;
   return;
  }
 uint workgroup_size = (uvec3((min(((true ? ((gl_WorkGroupSize[(~ (~ (0)))]) - (((0u ^ ((min(((0u) >> 0u), 0u))))) - 0u)) : ((clamp(write_val, write_val, write_val))))), gl_WorkGroupSize[0])), (min(gl_WorkGroupSize[1], gl_WorkGroupSize[((1) | (1))])), gl_WorkGroupSize[2])).x;
 if((false))
  return;
 if((((injectionSwitch.x > (min(injectionSwitch, injectionSwitch)).y)) || ((bool(bvec3((((((injectionSwitch.x > injectionSwitch.y)) || (bool(bvec4(false, ((injectionSwitch.x > injectionSwitch.y)), false, true)))))), false, false))))))
  {
   if((false))
    return;
   if((false))
    return;
   if((false))
    {
     if((false))
      return;
     return;
    }
   if((false))
    return;
   if((false))
    return;
   if((false))
    {
     if(((false || ((! (! (((injectionSwitch.x > injectionSwitch.y)))))))))
      return;
     return;
    }
   return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if(((((clamp((vec2(0.0, 0.0) + (((min((min(((((injectionSwitch.x < injectionSwitch.y)) ? ((false ? (vec2(- 4983.7232, 6901.5669)) : (vec2(vec3(((max(vec2(mat2((true ? injectionSwitch : ((((vec2(vec4((vec2(mat3(vec2((mix(vec3((2610.0843), (- 2.9), (2.4)), vec3((vec3((injectionSwitch), 1.0))[0], (vec3((injectionSwitch), 1.0))[1], (vec3((injectionSwitch), 1.0))[2]), bvec3(((injectionSwitch.x < injectionSwitch.y)), true, true)))), 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0))), 0.0, 1.0)))) / vec2((injectionSwitch.y), (injectionSwitch.y))))), 1.0, 0.0)), vec2(mat2((true ? injectionSwitch : ((((vec2(vec4((vec2(mat3(vec2((mix(vec3((2610.0843), (- 2.9), (2.4)), vec3((vec3((injectionSwitch), 1.0))[0], (vec3((injectionSwitch), 1.0))[1], (vec3((injectionSwitch), 1.0))[2]), bvec3(((injectionSwitch.x < injectionSwitch.y)), true, true)))), 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0))), 0.0, 1.0)))) / vec2((injectionSwitch.y), (injectionSwitch.y))))), 1.0, 0.0))))), 1.0))))) : (vec4(- 22.29, 205.316, 851.338, - 5.4).yz))), ((((injectionSwitch.x < injectionSwitch.y)) ? ((false ? (vec2(- 4983.7232, 6901.5669)) : (vec2(vec3(((max(vec2(mat2((true ? injectionSwitch : ((((vec2(vec4((vec2(mat3(vec2((mix(vec3((2610.0843), (- 2.9), (2.4)), vec3((vec3((injectionSwitch), 1.0))[0], (vec3((injectionSwitch), 1.0))[1], (vec3((injectionSwitch), 1.0))[2]), bvec3(((injectionSwitch.x < injectionSwitch.y)), true, true)))), 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0))), 0.0, 1.0)))) / vec2((injectionSwitch.y), (injectionSwitch.y))))), 1.0, 0.0)), vec2(mat2((true ? injectionSwitch : ((((vec2(vec4((vec2(mat3(vec2((mix(vec3((2610.0843), (- 2.9), (2.4)), vec3((vec3((injectionSwitch), 1.0))[0], (vec3((injectionSwitch), 1.0))[1], (vec3((injectionSwitch), 1.0))[2]), bvec3(((injectionSwitch.x < injectionSwitch.y)), true, true)))), 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0))), 0.0, 1.0)))) / vec2((injectionSwitch.y), (injectionSwitch.y))))), 1.0, 0.0))))), 1.0))))) : (vec4(- 22.29, 205.316, 851.338, - 5.4).yz))))), ((max(((true ? injectionSwitch : (injectionSwitch))) + vec2((max(0.0, ((0.0) + 0.0))), 0.0), ((((((true ? injectionSwitch : (injectionSwitch))) - vec2(0.0, 0.0))) - abs(vec2(0.0, 0.0)))) + vec2(0.0, 0.0))))))))).x, (vec2(((false ? (- 95.85) : (mix(float((mix(float((- 641.518)), float(0.0), bool(true)))), float(((- 1.5 * - 2.0))), bool(false))))), 0.0) + ((vec2((mat4x2(mat4x2(mat4x2((min((max(((min((vec2(vec3((min(((false ? (injectionSwitch) : (vec2((transpose(transpose(mat2((true ? injectionSwitch : ((((vec2(mat3x2(injectionSwitch, 1.0, 1.0, 0.0, 1.0))) / vec2(1.0, 1.0))))), 1.0, 0.0)))))))), ((false ? (injectionSwitch) : (vec2((transpose(transpose(mat2((true ? injectionSwitch : (injectionSwitch)), 1.0, 0.0)))))))))), (mix(float(((false ? (- 97.83) : 1.0))), float((- 287.680)), bool(false)))))), (min((((true ? injectionSwitch : (injectionSwitch))) + vec2((clamp((min(0.0, 0.0)), 0.0, 0.0)), 0.0)), ((min(mat2(1.0) * ((((true ? injectionSwitch : (injectionSwitch))) + vec2((clamp((min(0.0, 0.0)), 0.0, 0.0)), 0.0))), mat2(1.0) * ((((true ? injectionSwitch : (injectionSwitch))) + vec2((clamp((min((sin(0.0) + ((0.0 + (0.0)))), 0.0)), 0.0, 0.0)), 0.0))))))))))), ((min((vec2(vec3((min(((false ? (injectionSwitch) : (max((((vec2((transpose(transpose(mat2((true ? injectionSwitch : (injectionSwitch)), 1.0, 0.0))))))) / cos(vec2(0.0, 0.0))), (vec2((mat2x3(mat4(mat2x3((vec2((transpose(transpose(mat2((true ? injectionSwitch : (injectionSwitch)), 1.0, 0.0)))))), 0.0, 0.0, 1.0, 1.0)))))))))), ((false ? (injectionSwitch) : (vec2((transpose(transpose(mat2((true ? injectionSwitch : (injectionSwitch)), 1.0, 0.0)))))))))), 1.0))), ((max(min((((true ? injectionSwitch : (injectionSwitch))) + vec2((clamp((min(0.0, 0.0)), 0.0, 0.0)), 0.0)), ((min(mat2(1.0) * ((((true ? injectionSwitch : (injectionSwitch))) + vec2((clamp((min(0.0, 0.0)), 0.0, 0.0)), 0.0))), mat2(1.0) * ((((true ? injectionSwitch : (injectionSwitch))) + vec2((clamp((min(0.0, 0.0)), 0.0, 0.0)), 0.0))))))), (vec2(vec2(min((((true ? injectionSwitch : (injectionSwitch))) + vec2((clamp((min(0.0, 0.0)), 0.0, 0.0)), 0.0)), ((min(mat2(1.0) * ((((true ? injectionSwitch : (injectionSwitch))) + vec2((clamp((min(0.0, 0.0)), 0.0, 0.0)), 0.0))), mat2(1.0) * ((((true ? injectionSwitch : (injectionSwitch))) + vec2((clamp((min(0.0, 0.0)), 0.0, 0.0)), 0.0)))))))))))))))))), ((min((vec2(vec3((min((((false || (false)) ? (injectionSwitch) : (vec2((transpose(transpose(mat2((true ? (min(injectionSwitch, injectionSwitch)) : (injectionSwitch)), 1.0, 0.0)))))))), ((false ? (injectionSwitch) : (vec2((transpose((mat2(1.0) * (transpose(mat2((true ? injectionSwitch : (injectionSwitch)), 1.0, 0.0)))))))))))), 1.0))), (min((((((true ? injectionSwitch : (((((false ? (injectionSwitch) : injectionSwitch))) - vec2(0.0, 0.0))))) + vec2((clamp((((max(((true ? float(mat2x4(((false ? (- 10.62) : min(0.0, 0.0))), 0.0, 0.0, 0.0, (dot(vec2(determinant(mat3(1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0), vec2(1.0, 0.0))), 1.0, 0.0, 0.0)) : (689.871))), float(mat2x4(((false ? (- 10.62) : min(0.0, 0.0))), 0.0, 0.0, 0.0, (dot(vec2(determinant(mat3(1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0), vec2(1.0, 0.0))), 1.0, 0.0, 0.0)))))), ((0.0) - 0.0), 0.0)), 0.0))) / sqrt(vec2(1.0, 1.0))), ((min(mat2(1.0) * ((((true ? injectionSwitch : (injectionSwitch))) + vec2((clamp((min(0.0, 0.0)), 0.0, 0.0)), 0.0))), mat2(1.0) * ((((true ? injectionSwitch : (injectionSwitch))) + vec2((clamp((min(0.0, 0.0)), 0.0, 0.0)), 0.0))))))))))))), 1.0, 0.0, 0.0, 0.0, 0.0, determinant(mat2(1.0, log(1.0), 1.0, 1.0)))))))))).x, (vec2(0.0, 0.0) + (mat2(1.0) * ((((min((vec2(vec3((vec2(((mat2(mat2x3(mat2(mat4x3(mat2((true ? (min((((max(((false ? (vec2(- 5994.6072, 7.1)) : ((false ? (vec2(65.66, 6.4)) : injectionSwitch)))), ((false ? (vec2(65.66, 6.4)) : injectionSwitch))))) - vec2(((0.0) - 0.0), 0.0)), injectionSwitch)) : (injectionSwitch)), 1.0, 0.0))))))))), 1.0))), ((((mix(vec2((((true ? injectionSwitch : (injectionSwitch))))[0], (6787.2627)), vec2((- 8.3), (((true ? injectionSwitch : (injectionSwitch))))[1]), bvec2(false, true))) * mat2(1.0))) + vec2((float(mat3x4(0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0))), 0.0))))))))).x)) > injectionSwitch.y))))
  {
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((((((injectionSwitch.x > injectionSwitch.y)) && true))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        return;
       return;
      }
     return;
    }
   if((false))
    return;
   if((false))
    {
     if((false))
      {
       if((false))
        return;
       return;
       if((false))
        return;
      }
     return;
    }
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      return;
     return;
     if((false))
      return;
     if((((false)) && true))
      {
       if((false))
        return;
       return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   return;
  }
 uint workgroup_id = ((gl_WorkGroupID) >> uvec3((injectionSwitch.x), (injectionSwitch.x), (injectionSwitch.x))).x;
 if((false))
  return;
 if((false))
  {
   if((((bool(((bvec3(bvec4(bvec3(bvec4(bvec3((false) || ((bool(bvec4(((bool(bvec4((((false || (bool(bvec2(bool(bvec3(((false) && true), false, (! ((true && ((false || (! ((false || (false))))))))))), false))))) || false), false, true, (((((! (! (injectionSwitch.x > injectionSwitch.y)))) || false))))))), true, true, false)))), true, false), true)), (((injectionSwitch.x > injectionSwitch.y)) || (false)))))))))))
    {
     if((false))
      {
       if((false))
        return;
       return;
      }
     if((false))
      {
       if((false))
        return;
       return;
      }
     if((false))
      return;
     return;
    }
   if((false))
    return;
   if(((! (! (false)))))
    return;
   if((false))
    return;
   if((false))
    return;
   return;
  }
 uint workgroup_base = ((workgroup_size * workgroup_id) | (workgroup_size * workgroup_id));
 uint virtual_gid = workgroup_base + (max(subgroup_id, ((subgroup_id) - 0u))) * subgroup_size + subgroup_local_id;
 if((false))
  {
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     return;
    }
   return;
  }
 if((false))
  return;
 if((false))
  {
   if((false))
    return;
   if((false))
    return;
   return;
  }
 if((false))
  return;
 if(((((injectionSwitch.x < injectionSwitch.y)) && (((bool(bvec2(bool(bvec2((false || (false)), true)), false))))))))
  return;
 atomicStore(write_val, uint(virtual_gid), 4, (0 | (64)), (min(0, 0)));
 if((false))
  return;
 if((false))
  return;
 if((false || ((false))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     return;
    }
   if((((((injectionSwitch.x > injectionSwitch.y)) || false))))
    {
     if((false))
      return;
     return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if((false))
  return;
 if((false))
  return;
 if((false))
  return;
 ((false ? (num_workgroup) : buf[virtual_gid] = ((uint(subgroupAllEqual(write_val))) + uint(((max(injectionSwitch.x, injectionSwitch.x)))))));
 if((false))
  return;
 if((((((injectionSwitch.x) * 1.0) > injectionSwitch.y))))
  {
   if((false))
    return;
   return;
  }
 if((false))
  {
   if((false))
    return;
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   return;
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
