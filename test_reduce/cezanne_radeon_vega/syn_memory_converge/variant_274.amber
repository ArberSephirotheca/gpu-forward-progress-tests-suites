#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = (((max((clamp(((((((0u ^ (((bool(bvec3((bool(((bool((((injectionSwitch.x < injectionSwitch.y)) && true))) && true))), ((false || (true)) && (true)), true)))) ? ((clamp(((workgroup_size * workgroup_id) >> 0u), workgroup_size * workgroup_id, (((((~ (~ (uint(uvec3(((0u + ((clamp(workgroup_size * workgroup_id, workgroup_size * workgroup_id, workgroup_size * workgroup_id)))) / 1u), 1u, 1u))))))) >> 0u))))) + 0u : (workgroup_size))))) << 0u))), ((((0u ^ (((bool(bvec3((bool(((((bool(bvec3((((bool(((mat2(1.0) * (injectionSwitch)).x < injectionSwitch.y))) || false)) && true, false, false))) || false))))), true, true)))) ? ((1u * ((((clamp(((workgroup_size * workgroup_id) >> 0u), workgroup_size * workgroup_id, workgroup_size * workgroup_id))) | ((clamp(((workgroup_size * workgroup_id) >> 0u), workgroup_size * workgroup_id, workgroup_size * workgroup_id))))))) + 0u : (workgroup_size)))))), ((((((0u ^ (((bool(bvec3((bool(((bool((injectionSwitch.x < injectionSwitch.y))) && (bool(bvec3(true, (bool(bvec3(false, false, true))), true)))))), true, true)))) ? ((clamp(((uint(((uint((workgroup_size * workgroup_id))) | 0u))) >> 0u), workgroup_size * workgroup_id, workgroup_size * ((((workgroup_id) / 1u)) | (workgroup_id))))) + 0u : (workgroup_size)))) | ((0u ^ ((! ((true && (! (((bool(bvec3((bool(((bool((injectionSwitch.x < injectionSwitch.y))) && true))), true, true))))))))) ? (~ ((clamp(~ ((1u * (((clamp(((workgroup_size * workgroup_id) >> 0u), (min(workgroup_size, workgroup_size)) * workgroup_id, workgroup_size * workgroup_id)))))), ~ ((1u * (((clamp(((((uint(uvec2((workgroup_size * workgroup_id) >> 0u, 0u)))) ^ (0u >> (uint(5u))))), (min(workgroup_size, workgroup_size)) * workgroup_id, workgroup_size * workgroup_id)))))), ~ ((1u * ((((((1u << (uint(0u))) >> (uint(0u))) * (clamp(((workgroup_size * workgroup_id) >> 0u), (min(workgroup_size, workgroup_size)) * workgroup_id, workgroup_size * workgroup_id)))))))))))) + 0u : (workgroup_size)))))))))), ((((((0u ^ (((bool((bvec3(bvec4(bvec3((bool((false || ((bool(bvec4(((bool((injectionSwitch.x < injectionSwitch.y))) && true), false, false, false))))))), true, true), true)))))) ? ((clamp(((workgroup_size * (clamp(workgroup_id, ((workgroup_id) * 1u), workgroup_id))) >> 0u), workgroup_size * workgroup_id, ((false ? ((++ workgroup_id)) : workgroup_size * workgroup_id))))) + 0u : (workgroup_size))))))) - 0u)))) + 0u);
 uint virtual_gid = (0u | (workgroup_base + subgroup_id * subgroup_size)) + subgroup_local_id;
 atomicStore(write_val, ((uint(virtual_gid)) * 1u), (0 ^ ((min(((4) | (4)), 4)))), 64, 0);
 buf[virtual_gid] = ((((uint(subgroupAllEqual((((((((((1u * (max((write_val) / ((1u) * ((1u << (uint(0u))) >> (0u + ((uint(0u)))))), (write_val) / ((((1u) * ((1u << (uint(0u))) >> (0u + ((uint(0u))))))) | ((1u * (((1u) * ((1u << (uint(0u))) >> (0u + ((uint(0u))))))))))))))) * ((1u << (uint(4u))) >> (uint(4u))))) - (1u ^ 1u))) / 1u))))) - (0u + (0u ^ ((((((((min(((187468u) * uint((injectionSwitch.y))) & 0u, 187468u & 0u)))) << 0u))) - 0u))))) << 0u));
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
