#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = (((((((vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y)) ? (clamp(((uvec3(126867u, 89209u, 60643u) ^ write_val)), ((uvec3(126867u, 89209u, 60643u) ^ write_val)), ((uvec3(126867u, 89209u, 60643u) ^ write_val)))) : (uvec3(uvec3(gl_WorkGroupSize))))) / uvec3(1u, 1u, 1u))).x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = workgroup_base + subgroup_id * ((max(((clamp(((clamp((subgroup_size), (subgroup_size), (subgroup_size))) + 0u), clamp((subgroup_size), (subgroup_size), (subgroup_size)), clamp((subgroup_size), (subgroup_size), (subgroup_size))))), (subgroup_size))) - 0u) + (min(((true ? (clamp((~ (~ (((true ? ((min((((subgroup_local_id)) | ((subgroup_local_id))), (((subgroup_local_id)) << 0u))) | 0u) : (subgroup_size)))))), ((((uint(uvec4(~ (~ ((((0u << ((0u ^ (uint(7u))))) + ((max((true ? ((((subgroup_local_id) | 0u) * 1u)) : (subgroup_size)), (true ? ((((((((subgroup_local_id)) | 0u)) << uint((injectionSwitch.x))) | 0u) * 1u)) : (subgroup_size))))))))), 1u, ((1u << (uint(4u))) >> (uint(4u))), 1u))))) | ((~ (~ ((((0u << ((0u ^ (uint(7u))))) + ((max((true ? ((((subgroup_local_id) | 0u) * 1u)) : (subgroup_size)), (1u * ((true ? ((((subgroup_local_id) | 0u) * (((((clamp((clamp(1u, 1u, 1u)), (clamp(1u, 1u, 1u)), (((clamp(1u, 1u, 1u))) | 0u)))) >> 0u)) ^ 0u))) : (~ (~ ((subgroup_size))))))))))))))))), (~ (max(((((min(~ ((~ (~ (((true ? ((subgroup_local_id) | 0u) : (subgroup_size))))))), (1u * (~ (((true ? ((subgroup_local_id) | 0u) : (((((subgroup_size)) | ((subgroup_size)))) + (0u | 0u))))))))))) | (((min(~ ((~ (~ (((true ? ((subgroup_local_id) | 0u) : (subgroup_size))))))), (1u * (~ (((true ? ((subgroup_local_id) | 0u) : (((((subgroup_size)) | ((subgroup_size)))) + (0u | 0u)))))))))))), ((min(~ ((~ (~ (((true ? ((subgroup_local_id) | 0u) : (subgroup_size))))))), (1u * (~ (((true ? ((subgroup_local_id) | 0u) : (((((subgroup_size)) | ((subgroup_size)))) + (0u | 0u))))))))))))))) : (num_workgroup))), ((true ? (~ (~ (((true ? ((subgroup_local_id) | (uint(uint(0u)))) : (subgroup_size)))))) : ((true ? (workgroup_base) : (subgroup_id)))))));
 atomicStore(write_val, ((((max(max(uint(virtual_gid), (~ ((max(~ (uint(virtual_gid)), ~ (uint(virtual_gid))))))), max(uint(virtual_gid), (~ ((max(~ (uint(virtual_gid)), ~ (uint(virtual_gid))))))))))) | ((((0u | (((max(max(uint(virtual_gid), (~ ((max(~ (uint(virtual_gid)), ~ (uint(virtual_gid))))))), max(uint(virtual_gid), (~ ((max(~ (uint(virtual_gid)), ~ (uint(virtual_gid))))))))))))) ^ uint((injectionSwitch.x))))), 4, ((0 | (((0 << (int(6))) ^ (((int(ivec3(64, 1, 0)))))))) | 0), 0);
 buf[virtual_gid] = uint(subgroupAllEqual(write_val));
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
