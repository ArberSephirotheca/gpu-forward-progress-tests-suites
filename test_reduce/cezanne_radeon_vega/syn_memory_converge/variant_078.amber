#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

struct _GLF_struct_0 {
 mat2 _f0;
 uint _f1;
 uint workgroup_base;
 float _f2;
 mat4x3 _f3;
} ;

struct _GLF_struct_1 {
 uvec4 _f0;
 _GLF_struct_0 _f1;
 vec3 _f2;
 vec2 _f3;
 vec2 _f4;
} ;

struct _GLF_struct_2 {
 _GLF_struct_1 _f0;
} ;

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = ((gl_NumWorkGroups.x) | (uint(uvec2(((0u) - (0u & 142286u)), ((1u << (uint(1u))) >> (uint(1u)))))));
 uint workgroup_size = (((clamp(gl_WorkGroupSize.x, (clamp(((gl_WorkGroupSize.x) << 0u), ((((gl_WorkGroupSize.x) << 0u)) | 0u), ((gl_WorkGroupSize.x) << 0u))), (((min((clamp((clamp(gl_WorkGroupSize, gl_WorkGroupSize, gl_WorkGroupSize)), gl_WorkGroupSize, gl_WorkGroupSize)).x, (clamp((clamp(gl_WorkGroupSize, gl_WorkGroupSize, gl_WorkGroupSize)), gl_WorkGroupSize, gl_WorkGroupSize)).x))) - 0u))) / 1u));
 uint workgroup_id = ((((~ (~ (uint(((((((uvec4(gl_WorkGroupID.x, ((0u) - 0u), 1u, 1u)) / uvec4(1u, 1u, 1u, 1u))) - uvec4(((vec2(((mix(vec2((342.974), (81.65)), vec2((mat2(1.0) * (injectionSwitch))[0], (mat2(1.0) * (injectionSwitch))[1]), bvec2(true, true))))[0], injectionSwitch[1])).x), (injectionSwitch.x), (injectionSwitch.x), (injectionSwitch.x)))) | (((((uvec4(gl_WorkGroupID.x, 0u, 1u, 1u)) / uvec4(1u, 1u, 1u, 1u))) - uvec4(((vec2(injectionSwitch[0], injectionSwitch[1])).x), (injectionSwitch.x), (injectionSwitch.x), (injectionSwitch.x))))))))))) / 1u);
 _GLF_struct_2 _GLF_struct_replacement_2 = _GLF_struct_2(_GLF_struct_1(((false ? (((uvec4((uint((uvec4(0u, 0u, 0u, 0u) ^ (((uvec4(181525u, 1u, 1u, uint((injectionSwitch.y)))) << uvec4(0u, 0u, 0u, 0u)))))), 40303u, (((max(146921u, 146921u))) - (1u ^ 1u)), 156672u)) / uvec4(1u, 1u, 1u, 1u))) : uvec4(1u))), _GLF_struct_0(mat2(1.0), (((clamp((clamp(((false ? (subgroup_size) : ((min(~ (~ (1u)), ~ ((((((false ? (uint(false)) : (uint(uint((uint(uvec3((~ (1u)), 1u, 0u))) | (((~ (1u)) >> 0u)))))))) * 1u)))))))), (((~ ((1u * (((((~ (uint((((uvec3(uvec3(uvec3((0u ^ (((~ (~ (1u)))) - 0u)), 0u, (((0u | (0u))) / ((1u) | (1u)))))))) + uvec3(0u, 0u, (max(0u, (max(0u, 0u))))))))))) >> 0u))) >> 0u)))), (~ (~ (1u))))), 1u, 1u)) | (clamp(((~ (~ (clamp((~ (~ (1u))), ((~ (~ ((min((((uint((injectionSwitch.y)) * (~ (~ (((((((((((bool(((bvec2(bvec3(bvec2(bvec4(((bvec2(bvec2(bvec2(bvec2(bvec2((bool(bvec2(true, true))), false))))))), true, true)), false))))))) && true) ? (1u) : (((0u << (uint(0u))) + (((subgroup_local_id) / 1u)))))) << 0u))) * (~ (~ ((1u & uint((injectionSwitch.y)))))))) - 0u)))))), ((~ (~ ((((((true ? (1u) : (((subgroup_local_id) | (subgroup_local_id)))))) - 0u)) << 0u))))))))) - (max(0u, 0u))), (~ (((((clamp((~ (~ ((((((~ (1u))) << 0u)) + 0u)))), (((~ (1u))) << 0u), (((~ (1u))) << 0u)))) | (0u >> (uint(2u)))) ^ 0u)))))))), 1u, 1u)))), (max((~ (~ (((workgroup_size * workgroup_id) | ((0u ^ ((true ? (clamp((workgroup_size), (workgroup_size), (workgroup_size))) : (subgroup_size)))) * workgroup_id))))), (~ (~ (((workgroup_size * workgroup_id) | ((0u ^ ((true ? (clamp((workgroup_size), (workgroup_size), (workgroup_size))) : (subgroup_size)))) * workgroup_id))))))), 1.0, mat4x3((float(((mat2x4(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0)) * mat2(1.0)))))), vec3(1.0), vec2(1.0), ((((false ? (vec2(528.385, 8.5)) : false ? (injectionSwitch) : vec2(1.0)))))));
 uint virtual_gid = (0u ^ ((((((false ? (80102u) : (max(~ (~ (_GLF_struct_replacement_2._f0._f1.workgroup_base)), ~ (~ (_GLF_struct_replacement_2._f0._f1.workgroup_base))))))) + subgroup_id * subgroup_size) ^ uint((injectionSwitch.x))))) + subgroup_local_id;
 atomicStore(write_val, uint((clamp(virtual_gid, (0u + (((((((((injectionSwitch.x > injectionSwitch.y)) ? (workgroup_id) : (0u | (virtual_gid))))) >> 0u)) << 0u))), virtual_gid))), 4, 64, ((0) - 0));
 buf[virtual_gid] = (((((0u ^ (((false ? (((((((((((injectionSwitch.x > injectionSwitch.y)) ? (injectionSwitch) : (vec2(injectionSwitch[0], injectionSwitch[1])))).x > (max(((false ? (- 8373.6334) : injectionSwitch.y)), injectionSwitch.y)))) ? (subgroup_local_id) : subgroup_id) - 0u)))) : uint(subgroupAllEqual(((((((((write_val)) - (0u + (0u))))) - 0u) << 0u) / (~ (~ (1u))))))))))) | ((0u) | (0u))) - 0u));
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
