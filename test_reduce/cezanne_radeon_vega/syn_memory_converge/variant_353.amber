#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((((true && (bool(bvec2(false, false)))))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 uint subgroup_id = gl_SubgroupID;
 if((((((injectionSwitch.x > injectionSwitch.y) && true)))))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 uint subgroup_size = gl_SubgroupSize;
 if((false))
  return;
 if(((((true && (injectionSwitch.x > injectionSwitch.y))))))
  return;
 if((false))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((((bool(bvec3((((injectionSwitch.x > injectionSwitch.y) && ((injectionSwitch.x < injectionSwitch.y)))), true, false))))))
  {
   if((false))
    return;
   if((false))
    return;
   return;
   if((false))
    return;
  }
 if((false))
  return;
 if((false))
  return;
 if(((((bool(bvec2(false, true))))) || false))
  return;
 if((false))
  return;
 if(((((bool(bool(false))))) || false))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = (uint(uvec4((0u + (gl_WorkGroupSize.x)), uint((injectionSwitch.x)), 1u, 1u)));
 if(((((bool(((bool(bool((bool((((clamp(((injectionSwitch.x > injectionSwitch.y)) ? (- 7.1) : injectionSwitch.x, ((injectionSwitch.x > injectionSwitch.y)) ? (- 7.1) : injectionSwitch.x, (clamp((false || (((injectionSwitch.x > injectionSwitch.y)))) ? (- 7.1) : injectionSwitch.x, ((injectionSwitch.x > ((false ? (injectionSwitch) : (mat2(1.0) * (injectionSwitch)))).y)) ? (- 7.1) : injectionSwitch.x, (((clamp(((true ? injectionSwitch.x : (- 802.566))), injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)) ? (- 7.1) : ((true ? injectionSwitch.x : (- 5.1))))))))) > injectionSwitch.y))))) || false)))))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    return;
   return;
   if((false))
    return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((true && ((false))))
  return;
 if((false))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 if((false))
  return;
 if((false))
  {
   if((false))
    return;
   if((false))
    return;
   if((false))
    return;
   if((((((injectionSwitch.x > injectionSwitch.y)) || (true && (! ((bool(bvec2(! ((false)), true))))))))))
    {
     if((false))
      return;
     if((false))
      return;
     return;
    }
   return;
  }
 if((false))
  return;
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 if((false))
  return;
 uint virtual_gid = ((min(0u, (((min(0u, 0u)) ^ 0u)))) + (((0u ^ ((min((workgroup_base + (max(((max((((false ? ((min((((~ (~ (subgroup_id))))), (min(((subgroup_id)), ((subgroup_id)))))) * 1u) : subgroup_id)) * subgroup_size), (((((false ? ((min(((((uint((injectionSwitch.x)) >> (((uint(8u)) | (uint(8u))))) | ((((min((~ (~ (subgroup_id))), (~ (~ (subgroup_id)))))) >> 0u))))), (min(((subgroup_id)), ((subgroup_id)))))) * 1u) : subgroup_id)) * subgroup_size)) - 0u))) | (((false ? (workgroup_size) : ((false ? ((false ? (workgroup_id) : (subgroup_id))) : subgroup_id)) * subgroup_size)))), ((false ? (subgroup_id) : subgroup_id)) * subgroup_size)) + subgroup_local_id), (((workgroup_base + ((((false) && true) ? (((0u | (uint(uvec4((0u | (((subgroup_id) ^ 0u))), 1u, 0u, 0u)))))) : subgroup_id)) * subgroup_size + subgroup_local_id)) ^ 0u))))) << 0u)));
 if((false))
  return;
 atomicStore(write_val, uint((max(virtual_gid, ((virtual_gid) | (0u >> (uint(7u))))))), 4, 64, 0);
 if((false))
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((((false || ((injectionSwitch.x > injectionSwitch.y))))))
      return;
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   return;
   if((false))
    return;
  }
 if((((injectionSwitch.x > (float(mat3x4((mix(float((clamp(((injectionSwitch.y) - 0.0), ((injectionSwitch.y) - 0.0), ((injectionSwitch.y) - 0.0)))), float(((min(50.06, 50.06)))), bool(false))), 0.0, 1.0, (min((max(length(vec4(0.0, 0.0, 0.0, 0.0)), (clamp(length(vec4(0.0, 0.0, 0.0, 0.0)), length(vec4(0.0, 0.0, 0.0, 0.0)), length(vec4(0.0, 0.0, 0.0, 0.0)))))), length(vec4(0.0, (min(0.0, (min(((0.0) / 1.0), 0.0)))), 0.0, 0.0)))), 0.0, 1.0, 0.0, round(length(normalize(1.0))), 1.0, 0.0, 0.0, 1.0)))))))
  {
   if((! (! ((true && ((((injectionSwitch.x > injectionSwitch.y)))))))))
    return;
   if((false))
    return;
   if((((bool(bool(((! (! (false))))))) && true)))
    return;
   return;
   if((true && ((false))))
    return;
   if(((! ((((false || (! (((((injectionSwitch.x) - 0.0) > injectionSwitch.y)))))) || false)))))
    return;
   if((false))
    return;
  }
 if((! (((((! (true && (((((bool(bvec4((! (true && ((! (((((((bool(bvec3(! (! (bool(bvec2((! (! (((injectionSwitch.x > injectionSwitch.y))))), ((injectionSwitch.x > injectionSwitch.y)))))), false, false))))) || false)))))))), true, ((injectionSwitch.x > injectionSwitch.y)), false))))) && true)))) || false)) || false))))
  {
   if((false))
    return;
   return;
  }
 if((((injectionSwitch.x > (clamp(injectionSwitch, (max(injectionSwitch, injectionSwitch)), injectionSwitch)).y))))
  return;
 if((false))
  {
   if((false))
    return;
   if((false))
    {
     if((false))
      return;
     return;
    }
   if((false))
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((false))
        return;
       return;
      }
     return;
    }
   return;
  }
 buf[virtual_gid] = uint(subgroupAllEqual(write_val));
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
