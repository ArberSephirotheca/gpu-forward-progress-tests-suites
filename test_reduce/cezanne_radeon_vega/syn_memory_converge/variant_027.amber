#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((false || (((true && (((false))))) || false)))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     barrier();
    }
   barrier();
   if((false))
    barrier();
  }
 if((false))
  barrier();
 if((((((! (! (bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, (((true && (bool(bvec2((false) || false, true)))))), true))))))))))
  {
   if((false))
    barrier();
   barrier();
  }
 if((((false || (((clamp(((injectionSwitch) / vec2(1.0, 1.0)), (mix(vec2((injectionSwitch)[(~ (~ ((clamp(0, 0, (int(ivec2(0, 1))))))))], (- 333.953)), vec2((1739.9006), (injectionSwitch)[((((max(int(int(1)), int(int(1)))))) / 1)]), bvec2(false, true))), injectionSwitch)).x > injectionSwitch.y))))))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((false))
  barrier();
 if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
 if((((injectionSwitch.x > (clamp(injectionSwitch, injectionSwitch, (min(injectionSwitch, injectionSwitch)))).y))))
  barrier();
 if((false))
  {
   if((((bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, true, false))))))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   barrier();
  }
 if(((((((! ((! ((! (! (! (((! ((max(((injectionSwitch) * mat2(((1.0) - 0.0))).x, ((clamp((injectionSwitch), (injectionSwitch), (mix(vec2(((injectionSwitch))[0], (6.7)), vec2((43.88), ((injectionSwitch))[1]), bvec2(false, true))))) * mat2(((1.0) - (max((float((transpose(transpose(mat4(0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, (dot(vec3(((((true ? 1.0 : (7.9)))) / 1.0), 1.0, 0.0), vec3(0.0, 0.0, 1.0))), sin(0.0), 1.0, 1.0, (injectionSwitch.y))))))), 0.0))))).x)) > injectionSwitch.y)) || false))))))))))))) && true))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((bool(bvec3((! (! ((! (! (((! (! (((injectionSwitch.x > injectionSwitch.y)))))))))))), false, ((injectionSwitch.x > injectionSwitch.y))))))
    barrier();
   if((((((false) && true) || false))))
    barrier();
   if((false))
    barrier();
   if((((((injectionSwitch.x) - (dot(vec2(sqrt(1.0), 0.0), vec2(0.0, 1.0)))) > ((mix(float((- 5292.8669)), float((false ? (1.0 * ((mix(float(((false ? (9.3) : (8.0)))), float((5.2)), bool(true))))) : injectionSwitch.y)), bool(((injectionSwitch.x < injectionSwitch.y))))))))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    {
     if((((false) || false)))
      barrier();
     barrier();
    }
  }
 if((false))
  {
   if((((injectionSwitch.x > ((((false ? (tan(atan(- 54.10))) : ((true ? ((true ? injectionSwitch : (vec2(- 6.8, 226.168)))) : (vec2(0.5, 8.8)))).y))) * 1.0)))))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(((bool(bvec3((true && (false)), false, ((injectionSwitch.x < injectionSwitch.y)))))))
        barrier();
       barrier();
      }
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(((((max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
      barrier();
    }
   if((((bool((bvec2((bvec2(bvec4((bvec2(bvec4(bvec2((bvec2(bvec2(bvec2(((bool(bvec3(false, false, false)))), true))))), false, false))), true, false)))))))) || ((injectionSwitch.x > ((max((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0)))).y))))
    {
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if((((bool(bvec2((false || (bool(bool(false)))), true))))))
  barrier();
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((false))
  {
   if(((! (! (false)))))
    {
     if((false))
      barrier();
     if((((((true && ((injectionSwitch.x > injectionSwitch.y)))) || false))))
      barrier();
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   barrier();
   if((false))
    barrier();
  }
 if((((true && ((injectionSwitch.x > ((min(mix(float((- 6.9)), float(injectionSwitch.y), ((((true && ((! (((injectionSwitch.x > injectionSwitch.y)) || ((! (((true && (bool(true))))))))) && true))) || ((injectionSwitch.x > injectionSwitch.y))))), mix(float((- 6.9)), float(injectionSwitch.y), bool(true)))))))))))
  {
   if((false))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false || ((false))))
    {
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(((! (! (false)))))
    {
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     if((false))
      barrier();
     barrier();
    }
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     barrier();
    }
   barrier();
   if((bool((bvec2(bvec4(bvec2((false), false), true, true))))))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    {
     if((false))
      barrier();
     barrier();
     if((false))
      barrier();
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  {
   if(((true && ((false || (false))))))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   barrier();
   if((! (((! ((false))) || false))))
    barrier();
   if((false))
    barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if(((bool(bvec3(false, true, false)))))
    {
     if((false))
      barrier();
     barrier();
    }
   if(((((((false || (((injectionSwitch) * mat2(1.0)).x > injectionSwitch.y)))))) && true))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(((true && (((false) && true)))))
      barrier();
     barrier();
    }
   barrier();
  }
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(((true && ((bool(bvec4(((false) || false), false, false, false)))))))
  barrier();
 if(((! (! (false)))))
  {
   if((false))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   barrier();
  }
 if(((bool(bool(false)))))
  barrier();
 if((false))
  barrier();
 uint workgroup_base = (((clamp(workgroup_size, (0u | (workgroup_size)), workgroup_size))) + 0u) * (((max((~ ((((((injectionSwitch.x > injectionSwitch.y)) ? (write_val) : ((min(~ ((((~ (~ (max((workgroup_id), (((workgroup_id)) / 1u)))))) << 0u)), ~ (((max((workgroup_id), (((((((((workgroup_id)) | ((workgroup_id))) ^ 0u))) / 1u)) - 0u))) << 0u))))))) * 1u))), ((((max((workgroup_id), ((~ (~ (((workgroup_id)) / ((clamp((1u) | (1u), ((true ? (1u) | (1u) : (subgroup_id))), (1u) | (1u)))))))))) * 1u)) << 0u)))) + ((clamp(0u & 118674u, ((true ? 0u & 118674u : (subgroup_local_id))), ((((1u & uint(((mix(vec2(((clamp(0.0, 0.0, 0.0)) + ((injectionSwitch)[0])), (injectionSwitch)[1]), vec2((- 92.28), ((- 760.156 * 85.13))), bvec2(false, false))).y))) * (0u & 118674u))) / 1u)))));
 if((((((injectionSwitch.x > (vec2(injectionSwitch[0], injectionSwitch[1])).y)))) || false))
  {
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((false || ((((injectionSwitch.x > injectionSwitch.y))))))
  barrier();
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 atomicStore(write_val, uint(virtual_gid), 4, ((64) | (64)), 0);
 if((bool((! ((bool(bvec3(! (bool(((false || (bool(bool((false || ((((((! ((! (((! ((true && (! ((injectionSwitch.x > injectionSwitch.y)))))) && true)))))) && true)))))))))))), false, false))))))))
  barrier();
 if((! ((false || (! ((((((min((min((vec2(injectionSwitch[0], injectionSwitch[((1) >> 0)])), injectionSwitch)).x, (((min((vec2(injectionSwitch[0], injectionSwitch[((1) >> 0)])), injectionSwitch)).x) / 1.0)))) / 1.0) < (((((clamp(injectionSwitch, injectionSwitch, injectionSwitch))) / abs((vec2(((mat4(sqrt(vec2(1.0, 1.0)), 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0)) + mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))))) * mat2(1.0)).y))))))))
  {
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   buf[virtual_gid] = uint(subgroupAllEqual(write_val));
  }
 else
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
