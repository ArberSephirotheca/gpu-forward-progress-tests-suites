#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((false))
  {
   if(((! (((! (((injectionSwitch.x > injectionSwitch.y)))) || false)))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     return;
    }
   if((bool((bvec3(bvec4((bvec3(bvec3(bvec3((false), true, false)))), true))))))
    barrier();
   barrier();
  }
 if((false))
  {
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(((bool(bvec3((true && (false)), (((false || (injectionSwitch.x > injectionSwitch.y)))), true)))))
  barrier();
 if((false))
  return;
 if((false))
  {
   if((false))
    return;
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    return;
   if((false))
    barrier();
   if((false))
    return;
   if((false))
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((false))
        barrier();
       barrier();
      }
     if((false))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     return;
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
       if((false))
        barrier();
       return;
      }
    }
   barrier();
   if((false))
    {
     if((false))
      barrier();
     return;
    }
  }
 if((false))
  barrier();
 if((false))
  {
   if((false))
    {
     if((false))
      return;
     barrier();
     if((false))
      barrier();
    }
   if((false))
    barrier();
   return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if(((bool(bvec4(((injectionSwitch.x > injectionSwitch.y)), (((max(injectionSwitch, (clamp(injectionSwitch, injectionSwitch, ((injectionSwitch) / vec2(1.0, 1.0)))))).x < injectionSwitch.y)), false, true)))))
    barrier();
   if((false))
    barrier();
   return;
  }
 if((false))
  return;
 if(((bool(bvec3(((injectionSwitch.x > injectionSwitch.y)), false, true)))))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if((false))
  {
   if((((false) && true)))
    barrier();
   barrier();
   if((false))
    barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   if((false))
    barrier();
   barrier();
   if((false))
    barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   if((((((injectionSwitch.x > injectionSwitch.y))) || false)))
    barrier();
   if((false))
    return;
   if((false))
    barrier();
   return;
  }
 if(((true && (false))))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  {
   if(((bool((bool(bvec3(bool((true && (false))), true, true)))))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 if(((true && (false))))
  return;
 uint subgroup_size = gl_SubgroupSize;
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  {
   if((((((bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, true))))) && true)))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  {
   if((false))
    barrier();
   return;
  }
 if((false))
  barrier();
 if((true && ((((((((float(mat3x2(injectionSwitch.x, 0.0, ((mix(float((float(- 2801))), float(((dot(vec2(1.0, 0.0), vec2(1.0, 0.0))))), bool(true))) - 0.0), (0.0 + (1.0)), 0.0, 1.0))) < injectionSwitch.y)) && ((false || ((((clamp(((injectionSwitch) * vec2(1.0, 1.0)), injectionSwitch, injectionSwitch)).x > ((clamp(((true ? (mix(float(float(mat4x3((max((min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)), 0.0, 1.0, 1.0, 0.0, tan((mix(float(0.0), float(((7862.9145 + - 182.259))), bool(((injectionSwitch.x > injectionSwitch.y)))))), (min(0.0, (max(0.0, 0.0)))), 0.0, 1.0, 1.0, 0.0, 1.0))), float((5352.8733)), bool(false))) : (degrees(- 27.69)))), float(mat4x3((max((min((min(injectionSwitch, (((((false ? (vec2(1.9, - 13.21)) : min(((true ? injectionSwitch : (injectionSwitch))), injectionSwitch)))) - vec2(0.0, 0.0))))).y, injectionSwitch.y)), (mix(float((7.6)), float(injectionSwitch.y), bool(true))))), 0.0, 1.0, 1.0, 0.0, tan(0.0), 0.0, 0.0, 1.0, 1.0, 0.0, 1.0)), float(mat4x3((max((min((max(injectionSwitch, injectionSwitch)).y, injectionSwitch.y)), injectionSwitch.y)), 0.0, 1.0, 1.0, (mix(float((- 3760.4107)), float(0.0), bool(true))), tan(0.0), 0.0, 0.0, (1.0 * (1.0)), 1.0, 0.0, 1.0)))))) || ((injectionSwitch.x > injectionSwitch.y)))))))))))))
  {
   if((((injectionSwitch.x > (float(vec2(injectionSwitch.y, (dot(vec4(abs(1.0), 1.0, 1.0, 0.0), vec4(0.0, 0.0, 0.0, 1.0))))))))))
    {
     if((false))
      barrier();
     if(((bool(bvec2(((injectionSwitch.x > injectionSwitch.y)), ((injectionSwitch.x > injectionSwitch.y)))))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
     if((false))
      barrier();
    }
   if((false))
    return;
   barrier();
   if(((((injectionSwitch.x < injectionSwitch.y)) && (false))))
    barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((false))
  return;
 if((false))
  return;
 if(((! (! ((((! (! (injectionSwitch.x > ((false ? (- 6.4) : injectionSwitch.y))))))))))))
  {
   if((false))
    barrier();
   barrier();
   if((false))
    barrier();
  }
 uint num_workgroup = (((((true ? (gl_NumWorkGroups.x) : (30573u))) / (max(1u, 1u)))) / 1u);
 if(((! ((true && (! (false)))))))
  return;
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if(((bool(bvec4(false, false, true, false)))))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     if((((false) && true)))
      barrier();
     return;
    }
   if((false))
    return;
   if((false))
    {
     if((false))
      barrier();
     return;
    }
   return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if((false))
  barrier();
 if(((((injectionSwitch.x < injectionSwitch.y)) && ((bool(bvec3(false, ((injectionSwitch.x < injectionSwitch.y)), true)))))))
  {
   if((false))
    return;
   if(((! ((! (! ((! (! (! (false)))))))))))
    return;
   if((false))
    barrier();
   if((false))
    return;
   barrier();
  }
 if(((false || ((((bool((bvec2(bvec3(bvec2(false, false), true)))))) || false)))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(((((((false || (injectionSwitch.x > injectionSwitch.y)))) && true))))
  return;
 if((false))
  barrier();
 if((((! (bool(bvec3((! (((max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))), false, true)))))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   barrier();
   if((false))
    barrier();
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    return;
   if((bool((true && (bool((((injectionSwitch.x > injectionSwitch.y)))))))))
    return;
   if((false))
    {
     if(((! (! ((! (! (false))))))))
      return;
     barrier();
    }
   return;
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if((((((injectionSwitch.x > injectionSwitch.y)) && true))))
  {
   if((false))
    return;
   if(((true && (false))))
    barrier();
   if((false))
    barrier();
   barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((bool(bvec4((false), true, false, false))))
  {
   if((false))
    barrier();
   return;
  }
 if((false))
  barrier();
 if(((((0.0 + (injectionSwitch.x)) > (min(injectionSwitch.y, injectionSwitch.y))))))
  {
   if((false))
    {
     if((false))
      barrier();
     if((false))
      barrier();
     return;
    }
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
 uint workgroup_base = (uint(uvec3(workgroup_size * workgroup_id, 1u, (1u & 1u))));
 uint virtual_gid = ((((workgroup_base + subgroup_id * subgroup_size + subgroup_local_id) / 1u)) | (((workgroup_base + subgroup_id * subgroup_size + subgroup_local_id) / 1u)));
 if((false))
  {
   if((((false) && true)))
    barrier();
   if(((((bool(bvec4(((injectionSwitch.x > injectionSwitch.y)), false, true, ((injectionSwitch.x > (float((min(vec3((vec2(mat4x2(injectionSwitch, 1.0, 0.0, 1.0, 1.0, sqrt(1.0), 0.0))).y, 0.0, 1.0), vec3((vec2(mat4x2(injectionSwitch, 1.0, 0.0, 1.0, 1.0, sqrt(1.0), 0.0))).y, 0.0, 1.0)))))))))))) && true))
    {
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
     if((false))
      {
       if(((((false) || false) || (false))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
       if((false))
        return;
      }
     if((false))
      {
       if(((false || ((((bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, false, false)))))))))
        barrier();
       return;
      }
     barrier();
    }
   if((false))
    barrier();
   if((false))
    {
     if((false))
      {
       if((false))
        return;
       if((false))
        barrier();
       return;
      }
     return;
     if((false))
      barrier();
    }
   if((false))
    barrier();
   if((false))
    return;
   if((((false || ((false))) || false)))
    return;
   if((false))
    barrier();
   if((false))
    return;
   if((false))
    {
     if((false))
      barrier();
     return;
    }
   return;
   if((((injectionSwitch.x > ((true ? injectionSwitch.y : (length(vec4(825.320, 35.10, 774.685, - 9033.7895)))))))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 atomicStore(write_val, uint(virtual_gid), 4, 64, 0);
 if((((false) && true)))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    {
     if((false))
      return;
     barrier();
    }
   return;
  }
 if(((! ((true && (! ((true && ((! (! (false))))))))))))
  {
   if((false))
    {
     if((false))
      barrier();
     if((false))
      return;
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          return;
         barrier();
        }
       return;
       if((false))
        return;
      }
     if((((((((injectionSwitch.x > ((false ? (vec2(7.4, - 7.5)) : injectionSwitch)).y))) && true)) && true)))
      barrier();
     if((false))
      {
       if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
        barrier();
       barrier();
      }
     barrier();
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   return;
   if(((false || (((injectionSwitch.x > injectionSwitch.y))))))
    barrier();
  }
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
   if((false))
    return;
  }
 if((false))
  {
   if((false))
    {
     if(((bool(bvec3(false, (! (! (((true) || false)))), true)))))
      barrier();
     if((false))
      return;
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     return;
     if((false))
      {
       if((false))
        return;
       barrier();
      }
     if(((bool(bvec2((bool(bvec3(((injectionSwitch.x > injectionSwitch.y)), false, ((injectionSwitch.x > injectionSwitch.y))))), true)))))
      barrier();
    }
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   barrier();
  }
 if(((((bool((! (! (bool((! (! ((vec2(1.0, (mix(float((float(mat2(1.0, 0.0, (injectionSwitch.x), 0.0)))), float((- 7.6)), bool(false)))) * (injectionSwitch)).x > (min((vec2(mat4x2(injectionSwitch, 1.0, 1.0, 1.0, 1.0, 1.0, abs(1.0)))), (mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2((28.43), (11.34)), bvec2(false, false))))).y)))))))))))))
  {
   if((false))
    barrier();
   if((false))
    return;
   if(((! (! (false)))))
    {
     if((! (! ((false)))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
       if(((((true && (false))) || false)))
        {
         if(((((false || (((injectionSwitch.x > injectionSwitch.y) || false)))))))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if(((! (! (false)))))
          return;
         return;
        }
       return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         barrier();
        }
      }
     if((((injectionSwitch.x > (mix(float(injectionSwitch.y), float((- 300.972)), bool(false)))))))
      {
       if((false))
        barrier();
       return;
      }
     if(((((! (! ((! (! (injectionSwitch.x > injectionSwitch.y))))))))))
      {
       if((false))
        {
         if((false))
          barrier();
         return;
        }
       if((false))
        barrier();
       barrier();
       if((((false)) && true))
        barrier();
      }
     if((false))
      barrier();
     if((((((vec2(mat2x3(vec2((transpose(transpose(mat2x3((max((vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)), 1.0, 1.0, 1.0, 1.0))))), 0.0, 0.0, 1.0, 0.0)))).x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       return;
      }
     if((((injectionSwitch.x > (min(injectionSwitch.y, injectionSwitch.y))))))
      {
       if((false))
        barrier();
       return;
      }
     if((false))
      {
       if((false))
        return;
       barrier();
       if((false))
        barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((((false) && true)))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
     barrier();
     if((false))
      return;
    }
   return;
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      return;
     barrier();
    }
  }
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 if(((bool(bvec2(false, true)))))
  return;
 if((! (! (((bool(bvec3(false, true, false))))))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    return;
   if((false))
    barrier();
   barrier();
   if((false))
    barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(((((injectionSwitch.x < injectionSwitch.y)) && ((! (! (false)))))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    {
     if((false))
      {
       if((bool(bvec2((false), false))))
        barrier();
       return;
      }
     barrier();
     if((false))
      barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   return;
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if((false))
    barrier();
  }
 if((false))
  barrier();
 if((false))
  return;
 if((false))
  barrier();
 buf[virtual_gid] = (0u ^ ((uint((injectionSwitch.x)) | (uint(subgroupAllEqual(((write_val) << 0u)))))));
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if(((((mix(vec2((8.9), (1.7)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).x > ((injectionSwitch) / vec2(1.0, 1.0)).y))))
  {
   if((false))
    return;
   return;
  }
 if((false))
  return;
 if((false))
  return;
 if((((false || (! (! (((! (! ((((((false ? (2.5) : injectionSwitch.x)) > injectionSwitch.y)) || false))))))))))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((((true && ((false)))) && ((injectionSwitch.x < injectionSwitch.y))))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    return;
   if((false))
    {
     if((false))
      barrier();
     return;
    }
   return;
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   if(((! (! ((bool(bool(false))))))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 if((false))
  return;
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
