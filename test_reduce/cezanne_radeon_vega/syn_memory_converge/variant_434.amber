#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = ((gl_NumWorkGroups) << uvec3((injectionSwitch.x), (injectionSwitch.x), (injectionSwitch.x))).x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = (min(gl_WorkGroupID.x, (0u ^ (gl_WorkGroupID.x))));
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = ((max((((workgroup_base + subgroup_id * subgroup_size)) | (0u >> (uint(1u)))) | (((workgroup_base + ((((subgroup_id * ((((false ? (subgroup_local_id) : uint(uvec4(((! (! ((((! ((bool(bvec3(! (! ((false || (! ((true)))))), true, false))))))) || ((injectionSwitch.x > injectionSwitch.y))))) ? subgroup_size : (subgroup_local_id)), 0u, 1u, 0u))))))) ^ 0u)) | (((false ? (num_workgroup) : subgroup_id * ((((false ? (subgroup_local_id) : uint(uvec4(((! (! (((! ((false || (! ((true))))))) || ((((injectionSwitch.x) + 0.0) > injectionSwitch.y))))) ? subgroup_size : (subgroup_local_id)), 0u, 1u, 0u)))))))))))) | 0u), (max(((min(((workgroup_base + (uint(uint(subgroup_id))) * subgroup_size) | ((min((clamp(((max((((uint(((uvec2(((uint(uint(((workgroup_base + subgroup_id * subgroup_size)) * 1u)))), 1u)) | (uvec2((((workgroup_base + subgroup_id * subgroup_size)) * 1u), 1u))))) | (1u ^ 1u))), (workgroup_base + subgroup_id * subgroup_size)))), (0u ^ (((max((((uint(((uvec2(((uint(uint(((workgroup_base + subgroup_id * subgroup_size)) * 1u)))), 1u)) | (uvec2((((workgroup_base + subgroup_id * subgroup_size)) * 1u), 1u))))) | (1u ^ 1u))), (workgroup_base + subgroup_id * subgroup_size)))))), ((max((((uint(((uvec2(((uint(uint(((workgroup_base + subgroup_id * subgroup_size)) * 1u)))), 1u)) | (uvec2((((workgroup_base + subgroup_id * subgroup_size)) * 1u), 1u))))) | (1u ^ 1u))), (workgroup_base + subgroup_id * subgroup_size)))))), ((max((((uint(((uvec2((((workgroup_base + subgroup_id * subgroup_size)) * 1u), 1u)) | (uvec2((((workgroup_base + subgroup_id * subgroup_size)) * 1u), 1u))))) | (1u ^ 1u))), (workgroup_base + subgroup_id * subgroup_size)))))) | ((workgroup_base + subgroup_id * subgroup_size)))) | ((workgroup_base + subgroup_id * subgroup_size) | (max((workgroup_base + (~ (~ (subgroup_id * (~ (~ (max((subgroup_size), (subgroup_size))))))))), (workgroup_base + (~ (~ (subgroup_id * (~ (~ (((false ? (subgroup_size) : max((subgroup_size), (subgroup_size)))))))))))))), ((((workgroup_base + (0u | ((uint(uint(subgroup_id))) * subgroup_size))) | (((max((((((workgroup_base + subgroup_id * subgroup_size)) * 1u) | (1u ^ 1u))), (workgroup_base + subgroup_id * subgroup_size)))) | ((workgroup_base + subgroup_id * subgroup_size)))) | ((((workgroup_base + ((subgroup_id) >> 0u) * subgroup_size) | ((~ (~ (max((workgroup_base + (~ (~ (subgroup_id * (~ (~ (max((subgroup_size), (subgroup_size))))))))), (workgroup_base + (~ (~ (subgroup_id * (~ (((~ (max((subgroup_size), (subgroup_size)))) ^ (min(0u, 0u))))))))))))))) / 1u))) | ((0u | ((((((((max(workgroup_base, workgroup_base)) + (uint(uint(subgroup_id))) * subgroup_size) | (((max((((((((workgroup_base + subgroup_id * subgroup_size))) | 0u) * 1u) | (1u ^ 1u))), ((uint((injectionSwitch.x)) | (workgroup_base)) + subgroup_id * subgroup_size)))) | ((workgroup_base + subgroup_id * subgroup_size))))) | ((((max(workgroup_base, workgroup_base)) + (uint(uint(subgroup_id))) * subgroup_size) | (((max((((((((workgroup_base + subgroup_id * subgroup_size))) | 0u) * 1u) | (1u ^ 1u))), ((uint((injectionSwitch.x)) | (workgroup_base)) + subgroup_id * subgroup_size)))) | ((workgroup_base + subgroup_id * subgroup_size))))))) / 1u))) | (((clamp((max(workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size)), workgroup_base + subgroup_id * subgroup_size, ((true ? workgroup_base + subgroup_id * subgroup_size : (write_val)))))) | (max((workgroup_base + (~ ((0u ^ (((~ (subgroup_id * (~ (~ (max((subgroup_size), (subgroup_size)))))))) << 0u))))), (workgroup_base + (~ (((false ? (max((((subgroup_size)) << 0u), (min((subgroup_size), (subgroup_size))))) : ~ (subgroup_id * (~ (~ (max((subgroup_size), (subgroup_size))))))))))))))))))), ((((min(((workgroup_base + (uint(uint(subgroup_id))) * subgroup_size) | (((max((((((workgroup_base + subgroup_id * subgroup_size)) * 1u) | (1u ^ 1u))), (workgroup_base + subgroup_id * subgroup_size)))) | (((clamp(((workgroup_base) / ((1u << (uint(4u))) >> (uint(4u)))), workgroup_base, workgroup_base)) + subgroup_id * subgroup_size)))) | ((workgroup_base + subgroup_id * (max(subgroup_size, subgroup_size))) | (max(((~ (~ ((min(workgroup_base + (~ ((max(~ (subgroup_id * (~ (~ (max((subgroup_size), (subgroup_size)))))), ~ (subgroup_id * (~ (~ (max((subgroup_size), (subgroup_size)))))))))), workgroup_base + (~ (~ (subgroup_id * (~ (~ (max((subgroup_size), (subgroup_size)))))))))))))), (workgroup_base + (~ (~ (subgroup_id * (~ (((~ (min((max((subgroup_size), (subgroup_size))), (max((subgroup_size), (subgroup_size))))))) - 0u))))))))), ((((workgroup_base + (0u | ((uint(uint(((subgroup_id) | (subgroup_id))))) * subgroup_size))) | (((max((((((workgroup_base + subgroup_id * subgroup_size)) * 1u) | (1u ^ 1u))), (workgroup_base + subgroup_id * subgroup_size)))) | ((workgroup_base + subgroup_id * subgroup_size)))) | ((workgroup_base + subgroup_id * subgroup_size) | ((~ (~ (max((workgroup_base + (~ (~ (subgroup_id * (~ (~ (max((subgroup_size), (subgroup_size))))))))), (workgroup_base + (~ (~ (subgroup_id * ((false ? (num_workgroup) : (~ (((~ (max((0u | ((subgroup_size))), (subgroup_size)))) ^ 0u)))))))))))))))) | (((workgroup_base + (uint(uint((min(subgroup_id, subgroup_id))))) * subgroup_size) | (((max((((((workgroup_base + subgroup_id * subgroup_size)) * 1u) | (1u ^ 1u))), (workgroup_base + subgroup_id * subgroup_size)))) | ((workgroup_base + subgroup_id * subgroup_size)))) | (((clamp((max(workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size)), workgroup_base + subgroup_id * subgroup_size, ((true ? workgroup_base + subgroup_id * subgroup_size : (write_val)))))) | (max((workgroup_base + ((uint((injectionSwitch.x)) | (~ (((~ (subgroup_id * (~ (~ (max((subgroup_size), (subgroup_size)))))))) << 0u))))), (workgroup_base + (~ (((false ? (subgroup_size) : ~ (subgroup_id * (~ (~ (max((subgroup_size), (((uint(uvec3(uint((clamp(uvec3(subgroup_size, 0u, 0u), uvec3(subgroup_size, 0u, 0u), uvec3(subgroup_size, 0u, 0u)))), 0u, 0u)))))))))))))))))))))))) >> (1u ^ 1u))))))) + (clamp(subgroup_local_id, subgroup_local_id, (0u ^ (subgroup_local_id))));
 atomicStore(write_val, uint(virtual_gid), 4, 64, 0);
 buf[virtual_gid] = uint(subgroupAllEqual(write_val));
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
