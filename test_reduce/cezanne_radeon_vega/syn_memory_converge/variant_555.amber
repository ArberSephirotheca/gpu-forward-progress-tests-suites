#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = (max((((uvec3(0u, 0u, 0u) << (uvec3(0u))) | uvec3(0u, 0u, 0u)) + (((gl_WorkGroupID) >> uvec3(0u, 0u, 0u)))), ((gl_WorkGroupID) + uvec3((injectionSwitch.x), (((true ? injectionSwitch.x : (- 931.623)))), (injectionSwitch.x))))).x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((((0u ^ ((((subgroup_local_id)) + 0u) >> 0u))) / 1u));
 if(((! (! (((mix((min(float((max(((min(((min(mix(float((2.1)), float(((((mat2((float(mat4x2(1.0, 1.0, 1.0, (min((min(1.0, 1.0)), 1.0)), 1.0, 0.0, ((true ? 1.0 : (- 0.1))), (dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, sin(0.0)))))))) * (((false ? (vec2(- 9.7, - 43.68)) : injectionSwitch))))) * mat2(1.0)).x)), bool(true)), ((mix(float((2.1)), float(((((mat2((float(mat4x2(1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, (dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, sin(0.0)))))))) * (((false ? (vec2(- 9.7, - 43.68)) : injectionSwitch))))) * mat2(1.0)).x)), bool(true))) - 0.0)))), (((min(min(mix(float((2.1)), float(((((mat2((float(mat4x2(1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, (dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, sin(0.0)))))))) * (((false ? (vec2(- 9.7, - 43.68)) : injectionSwitch))))) * mat2(1.0)).x)), bool(true)), ((mix(float((2.1)), float(((((mat2((float(mat4x2(1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, (dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, sin(0.0)))))))) * (((false ? (vec2(- 9.7, - 43.68)) : injectionSwitch))))) * mat2(1.0)).x)), bool(true))) - 0.0)), min(mix(float((2.1)), float(((((mat2((float(mat4x2(1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, (dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, sin(0.0)))))))) * (((false ? (vec2(- 9.7, - 43.68)) : injectionSwitch))))) * mat2(1.0)).x)), bool(true)), ((mix(float((2.1)), float(((((mat2((float(mat4x2(1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, (dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, sin(0.0)))))))) * (((false ? (vec2(- 9.7, - 43.68)) : injectionSwitch))))) * mat2(1.0)).x)), bool(true))) - 0.0)))))))) / 1.0), (((((clamp((min((((mat2(1.0)) - mat2(0.0, 0.0, 0.0, 0.0)) * (vec2(1.0, 1.0) * ((min((injectionSwitch), (injectionSwitch)))))), ((false ? (vec2(1330.3807, - 7240.1388)) : (max((mat2(1.0) * (injectionSwitch)), (mat2(1.0) * (injectionSwitch)))))))), ((true ? (((mat2(1.0) * (vec2(0.0, 0.0) + ((injectionSwitch)))) * vec2(1.0, 1.0))) : ((vec2(- 8.3, (float(mat4x3(315.510, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, (injectionSwitch.x), 0.0, 0.0, 0.0, 1.0)))) / injectionSwitch)))), ((transpose(((false ? (mat2((((mat3(mat4(mat3(949.930, 42.52, - 3.2, 3.6, 9552.8419, 0.6, 2459.3641, 8.0, - 5.0))))) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)))) : transpose(mat2(1.0)))))) * (injectionSwitch))))) * mat2(1.0)).x) / 1.0)))), float((max(((min(((min(mix(float((2.1)), float(((((mat2((float(mat4x2(1.0, 1.0, 1.0, (min((min(1.0, 1.0)), 1.0)), 1.0, 0.0, ((true ? 1.0 : (- 0.1))), (dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, sin(0.0)))))))) * (((false ? (vec2(- 9.7, - 43.68)) : injectionSwitch))))) * mat2(1.0)).x)), bool(true)), ((mix(float((2.1)), float(((((mat2((float(mat4x2(1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, (dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, sin(0.0)))))))) * (((false ? (vec2(- 9.7, - 43.68)) : injectionSwitch))))) * mat2(1.0)).x)), bool(true))) - 0.0)))), (((min(min(mix(float((2.1)), float(((((mat2((float(mat4x2(1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, (dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, sin(0.0)))))))) * (((false ? (vec2(- 9.7, - 43.68)) : injectionSwitch))))) * mat2(1.0)).x)), bool(true)), ((mix(float((2.1)), float(((((mat2((float(mat4x2(1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, (dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, sin(0.0)))))))) * (((false ? (vec2(- 9.7, - 43.68)) : injectionSwitch))))) * mat2(1.0)).x)), bool(true))) - 0.0)), min(mix(float((2.1)), float(((((mat2((float(mat4x2(1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, (dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, sin(0.0)))))))) * (((false ? (vec2(- 9.7, - 43.68)) : injectionSwitch))))) * mat2(1.0)).x)), bool(true)), ((mix(float((2.1)), float(((((mat2((float(mat4x2(1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, (dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, sin(0.0)))))))) * (((false ? (vec2(- 9.7, - 43.68)) : injectionSwitch))))) * mat2(1.0)).x)), bool(true))) - 0.0)))))))) / 1.0), (((((clamp((min((((mat2(1.0)) - mat2(0.0, 0.0, 0.0, 0.0)) * (vec2(1.0, 1.0) * ((min((injectionSwitch), (injectionSwitch)))))), ((false ? (vec2(1330.3807, - 7240.1388)) : (max((mat2(1.0) * (injectionSwitch)), (mat2(1.0) * (injectionSwitch)))))))), ((true ? (((mat2(1.0) * (vec2(0.0, 0.0) + ((injectionSwitch)))) * vec2(1.0, 1.0))) : ((vec2(- 8.3, (float(mat4x3(315.510, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, (injectionSwitch.x), 0.0, 0.0, 0.0, 1.0)))) / injectionSwitch)))), ((transpose(((false ? (mat2((((mat3(mat4(mat3(949.930, 42.52, - 3.2, 3.6, 9552.8419, 0.6, 2459.3641, 8.0, - 5.0))))) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)))) : transpose(mat2(1.0)))))) * (injectionSwitch))))) * mat2(1.0)).x) / 1.0)))))), float((((((mix(float(false ? ((clamp(- 8.7, - 8.7, - 8.7))) : (- 935.245)), float((6.2)), bool(false)))) / (clamp(sqrt(1.0), sqrt(1.0), sqrt(1.0))))))), ((bool((! (! (false))))) && true))) > ((false ? (injectionSwitch) : injectionSwitch)).y))))))
  {
  }
 else
  {
   atomicStore(write_val, uint(virtual_gid), 4, ((((((max(((((int((max(int(((64) | 0)), int(((64) | 0))))))) ^ 0)), ((0 | ((((int((max(int(((64) | 0)), int(((64) | 0))))))) ^ 0))))))) - 0) | 0) / ((1) | ((int(int(1))))))), 0);
  }
 ((buf[virtual_gid] = uint(subgroupAllEqual(write_val))) ^ 0u);
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
