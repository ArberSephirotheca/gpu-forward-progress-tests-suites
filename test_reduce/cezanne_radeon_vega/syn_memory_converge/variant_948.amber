#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 do
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 while(false);
 if((false))
  barrier();
 if(((bool(bvec2(false, true)))))
  barrier();
 uvec2 GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size;
 if(((! (! (false)))))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  {
   if(false)
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(false)
        {
        }
       else
        {
         barrier();
        }
      }
     if((false))
      barrier();
    }
   else
    {
     do
      {
       barrier();
      }
     while(false);
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
    {
     for(int _injected_loop_counter = ((1 << (int(3))) >> (int(3))); _injected_loop_counter != 0; _injected_loop_counter --)
      {
       if(true)
        {
         if(((false || (false))))
          barrier();
         if((false))
          barrier();
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
    }
   barrier();
  }
 uvec4 GLF_merged2_0_2_49_2_2_51GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidGLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id;
 if(true)
  {
   for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           barrier();
          }
        }
       for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
        {
         for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         barrier();
        }
      }
     if((false))
      barrier();
     if(false)
      {
       if((false))
        barrier();
      }
     else
      {
       if((false))
        barrier();
       if((((! (! (bool(bool(false))))))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
       if((false))
        barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      {
       if(true)
        {
         if((false))
          barrier();
         barrier();
        }
       else
        {
        }
       for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if((false))
        barrier();
      }
    }
  }
 else
  {
  }
 if((false))
  {
   for(int _injected_loop_counter = 1; _injected_loop_counter > (0 << (((0 & 96836) | (int(4))))); _injected_loop_counter --)
    {
     do
      {
       if((false))
        barrier();
       barrier();
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
      }
     while(false);
    }
   if((false))
    barrier();
  }
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  {
   for(int _injected_loop_counter = 0; _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
    {
     barrier();
     if((false))
      {
       if((false))
        {
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           if((false))
            barrier();
           barrier();
          }
         else
          {
          }
        }
       barrier();
      }
    }
   if((false))
    {
     for(int _injected_loop_counter = 1; _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
      {
       barrier();
      }
    }
  }
 if((false))
  barrier();
 if(((bool(bvec3(false, false, false)))))
  {
   if((! (! (((injectionSwitch.x > injectionSwitch.y))))))
    {
     if(((! (! (false)))))
      barrier();
    }
   else
    {
     if(false)
      {
      }
     else
      {
       if((false))
        {
         for(int _injected_loop_counter = (0 | 0); _injected_loop_counter != 1; _injected_loop_counter ++)
          {
           barrier();
          }
        }
      }
     if((false))
      barrier();
     if((false))
      barrier();
     barrier();
     if((false))
      barrier();
    }
  }
 uvec2 GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if(true)
  {
   if((false))
    barrier();
  }
 else
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if((false))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      {
       if((false))
        barrier();
       for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != (0 << ((~ (~ (int(6)))))); _injected_loop_counter --)
        {
         if((false))
          barrier();
         barrier();
        }
      }
     barrier();
    }
   barrier();
   if((false))
    barrier();
  }
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 do
  {
   if(false)
    {
    }
   else
    {
     GLF_merged2_0_2_49_2_2_51GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidGLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.zw = GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id;
    }
  }
 while(((injectionSwitch.x > injectionSwitch.y)));
 if((false))
  {
   do
    {
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
       if((false))
        barrier();
       if((false))
        {
         do
          {
           barrier();
          }
         while(false);
        }
       if(((bool(bvec4(((injectionSwitch.x > injectionSwitch.y)), true, false, false)))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           barrier();
           if((false))
            {
             if(false)
              {
              }
             else
              {
               barrier();
              }
            }
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            barrier();
          }
        }
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         for(int _injected_loop_counter = (0 ^ (1 ^ 1)); _injected_loop_counter < ((1 << (int(0))) >> ((0 ^ (int(0))))); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       do
        {
         barrier();
         do
          {
           if(((bool((bvec3(bvec3(bvec3(false, false, false))))))))
            {
             for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
              {
               if(true)
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if((false))
                  {
                   if((false))
                    barrier();
                   if(((injectionSwitch.x < injectionSwitch.y)))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                 if((! (! (((injectionSwitch.x < injectionSwitch.y))))))
                  {
                   if(((bool(bvec3(false, false, false)))))
                    barrier();
                   do
                    {
                     if(false)
                      {
                      }
                     else
                      {
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        {
                         if((((true && (bool(bvec4(false, false, true, ((injectionSwitch.x < injectionSwitch.y)))))))))
                          barrier();
                         barrier();
                        }
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        {
                         if(((injectionSwitch.x < injectionSwitch.y)))
                          {
                           barrier();
                          }
                         else
                          {
                          }
                        }
                      }
                    }
                   while(false);
                   barrier();
                  }
                 else
                  {
                  }
                }
               else
                {
                }
              }
             if((false))
              barrier();
            }
          }
         while(false);
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(false);
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
       do
        {
         if((false))
          barrier();
        }
       while(false);
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
       if((false))
        barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(false);
   if((((false) || false)))
    {
     if((false))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   if(true)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       barrier();
      }
    }
   else
    {
    }
  }
 if((false))
  {
   do
    {
     if((false))
      {
       do
        {
         barrier();
        }
       while(false);
      }
     barrier();
     if((false))
      barrier();
     if(((bool(bvec2(false, false)))))
      {
       if((false))
        barrier();
       barrier();
      }
    }
   while(false);
   if((false))
    {
     for(int _injected_loop_counter = 0; _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   if((false))
    {
     if(true)
      {
       barrier();
      }
     else
      {
      }
    }
  }
 do
  {
   if((((false) || false)))
    barrier();
   if((false))
    barrier();
   do
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
       barrier();
      }
    }
   while(false);
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 while(false);
 for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != 1; _injected_loop_counter ++)
  {
   if((false))
    barrier();
  }
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 uvec2 GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid;
 if((false))
  {
   if((false))
    {
     if(true)
      {
       barrier();
      }
     else
      {
      }
    }
   if(true)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
     if((false))
      barrier();
    }
   else
    {
    }
   barrier();
  }
 if((false))
  {
   if((false))
    barrier();
   if((false))
    {
     do
      {
       if(false)
        {
        }
       else
        {
         barrier();
        }
      }
     while(false);
    }
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = (0 ^ 0); _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      {
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         barrier();
        }
       else
        {
        }
      }
     if((false))
      barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if((false))
        barrier();
       if((false))
        {
         if((bool((bvec2(bvec4(bvec2(false, false), true, true))))))
          {
           if((false))
            barrier();
          }
         else
          {
           barrier();
           if(false)
            {
            }
           else
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
        }
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         if((false))
          barrier();
         barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     else
      {
       if((false))
        barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if(((true && (((injectionSwitch.x > injectionSwitch.y))))))
      barrier();
     if(((bool(bvec3(false, true, true)))))
      barrier();
     if((false))
      barrier();
     if((false))
      barrier();
    }
   if((false))
    barrier();
   barrier();
   if(((! (! (false)))))
    barrier();
   if((false))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(true)
      {
       if((false))
        barrier();
       barrier();
      }
     else
      {
      }
     if((false))
      barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 GLF_merged2_0_2_49_2_2_51GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidGLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.xy = GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if(true)
  {
   if((false))
    {
     if(true)
      {
       if((false))
        barrier();
      }
     else
      {
      }
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       barrier();
      }
     else
      {
       if((false))
        barrier();
      }
    }
  }
 else
  {
  }
 if((false))
  barrier();
 uvec4 GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_13num_workgroupsubgroup_idsubgroup_local_idsubgroup_size;
 uint subgroup_id = gl_SubgroupID;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if(false)
    {
    }
   else
    {
     barrier();
    }
  }
 if((false))
  barrier();
 if(((true) && true))
  {
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    barrier();
  }
 else
  {
   for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
    {
     if((false))
      barrier();
    }
  }
 if((false))
  barrier();
 for(int _injected_loop_counter = 0; _injected_loop_counter != (1 ^ 0); _injected_loop_counter ++)
  {
   GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_13num_workgroupsubgroup_idsubgroup_local_idsubgroup_size.y = subgroup_id;
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((false))
  {
   if((false))
    {
     if(true)
      {
       barrier();
      }
     else
      {
      }
    }
   barrier();
  }
 uint subgroup_size = gl_SubgroupSize;
 if(((injectionSwitch.x < injectionSwitch.y)))
  {
   if(false)
    {
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
    }
   else
    {
     GLF_merged2_0_2_49_2_2_51GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidGLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.xy.x = subgroup_size;
     for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != 1; _injected_loop_counter ++)
        {
         if((false))
          barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
    }
   if((false))
    {
     if((((false) && true)))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
  }
 GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_13num_workgroupsubgroup_idsubgroup_local_idsubgroup_size.w = GLF_merged2_0_2_49_2_2_51GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidGLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.xy.x;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((false))
  barrier();
 if((false))
  {
   if(true)
    {
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
    }
  }
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if(false)
    {
     if((false))
      barrier();
    }
   else
    {
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        {
         for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
          {
           if((false))
            barrier();
          }
         barrier();
        }
       if((false))
        barrier();
       for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > (0 << (int(5))); _injected_loop_counter --)
        {
         barrier();
        }
      }
     if((false))
      barrier();
     if((false))
      barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if((false))
  barrier();
 if(true)
  {
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
  }
 else
  {
  }
 if((false))
  barrier();
 if((false))
  {
   if(true)
    {
     if((false))
      barrier();
    }
   else
    {
    }
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(true)
          {
           barrier();
          }
         else
          {
          }
        }
       barrier();
      }
     for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
            {
             barrier();
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          barrier();
         if((false))
          {
           if((false))
            barrier();
           if((false))
            barrier();
           barrier();
          }
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
     if(true)
      {
       if((false))
        {
         if((false))
          barrier();
         barrier();
         if((false))
          barrier();
        }
      }
     else
      {
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       barrier();
      }
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(((false || (false))))
    {
     if((false))
      barrier();
     barrier();
    }
   barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      {
       if((((((injectionSwitch.x > injectionSwitch.y))) || false)))
        {
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           barrier();
          }
        }
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = (0 << (int(0))); _injected_loop_counter != ((1 << (int(6))) >> (int(6))); _injected_loop_counter ++)
      {
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         do
          {
           if((false))
            barrier();
           if((false))
            barrier();
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             do
              {
               if((false))
                barrier();
              }
             while(false);
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           else
            {
            }
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
        }
       if((false))
        barrier();
      }
    }
   if((false))
    barrier();
  }
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 do
  {
   GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_13num_workgroupsubgroup_idsubgroup_local_idsubgroup_size.z = subgroup_local_id;
  }
 while(false);
 if((false))
  barrier();
 if((false))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     barrier();
    }
   barrier();
  }
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((false))
  barrier();
 if(true)
  {
   if(false)
    {
     if((false))
      barrier();
     if((false))
      barrier();
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        {
         if(true)
          {
           barrier();
          }
         else
          {
          }
        }
       if(((bool(bvec4(bool((bvec2(bvec3(bvec2(true, true), false)))), false, true, true)))))
        {
         barrier();
        }
       else
        {
        }
      }
     do
      {
       if((false))
        barrier();
       if((false))
        barrier();
      }
     while(false);
     if((false))
      barrier();
    }
  }
 else
  {
  }
 do
  {
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
     if((false))
      barrier();
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_13num_workgroupsubgroup_idsubgroup_local_idsubgroup_size.x = num_workgroup;
    }
  }
 while(false);
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     for(int _injected_loop_counter = 0; _injected_loop_counter != ((1 << ((int(int(((int(4)) / 1)))))) >> (((true ? int(4) : (- 47096))))); _injected_loop_counter ++)
      {
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     for(int _injected_loop_counter = 0; _injected_loop_counter < (1 & 1); _injected_loop_counter ++)
      {
       if((false))
        barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(true)
        {
         barrier();
        }
       else
        {
        }
      }
     barrier();
    }
   if((false))
    barrier();
   if(true)
    {
     for(int _injected_loop_counter = (0 ^ 1); _injected_loop_counter > 0; _injected_loop_counter --)
      {
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(((! (! ((true && (false)))))))
        barrier();
      }
     do
      {
       barrier();
      }
     while(false);
    }
   else
    {
    }
  }
 if((false))
  barrier();
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    {
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       barrier();
      }
    }
   if((false))
    {
     for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < (0 | 1); _injected_loop_counter ++)
      {
       if(true)
        {
         if((false))
          {
           do
            {
             barrier();
            }
           while(false);
          }
        }
       else
        {
        }
      }
     barrier();
    }
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     barrier();
     if((false))
      barrier();
     if((false))
      barrier();
     for(int _injected_loop_counter = 1; _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
      {
       if((false))
        barrier();
      }
     if((false))
      barrier();
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       if((false))
        barrier();
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(((! (! (false)))))
      barrier();
    }
   if((false))
    barrier();
   if(true)
    {
     do
      {
       if((false))
        barrier();
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
    }
   else
    {
    }
   if(((! (! (false)))))
    barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((false))
  {
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   barrier();
  }
 if((false))
  barrier();
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if((false))
  {
   for(int _injected_loop_counter = ((0) - 0); _injected_loop_counter != ((1 << (int(5))) >> (int(5))); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size.y = workgroup_size;
 if(((injectionSwitch.x > injectionSwitch.y)))
  {
  }
 else
  {
   for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(false)
      {
       if((false))
        barrier();
      }
     else
      {
       if(((true && (false))))
        barrier();
       if((false))
        barrier();
      }
     if((false))
      barrier();
    }
  }
 if(((injectionSwitch.x < injectionSwitch.y)))
  {
   do
    {
     do
      {
       if(((true && (false))))
        {
         if((false))
          {
           for(int _injected_loop_counter = (((true ? (0 & - 16689) : (67225))) << (int(2))); _injected_loop_counter < 1; _injected_loop_counter ++)
            {
             barrier();
            }
          }
         if(false)
          {
           do
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if(false)
                {
                }
               else
                {
                 barrier();
                }
              }
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
          }
         else
          {
           if(false)
            {
            }
           else
            {
             barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           if((false))
            {
             if((false))
              barrier();
             barrier();
            }
          }
         if((((false) || false)))
          barrier();
        }
      }
     while(false);
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      {
       if((true && (true)))
        {
         if((false))
          {
           if((false))
            barrier();
           if((false))
            barrier();
           barrier();
           if((false))
            barrier();
          }
        }
       else
        {
         if((((false) || false)))
          barrier();
         if((false))
          barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       barrier();
      }
     if((false))
      barrier();
     if((false))
      barrier();
     if((false))
      {
       for(int _injected_loop_counter = ((1 << (int(6))) >> (int(6))); _injected_loop_counter > (0 << (int(4))); _injected_loop_counter --)
        {
         barrier();
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
  }
 else
  {
  }
 if((false))
  {
   if((false))
    barrier();
   do
    {
     if((false))
      barrier();
     if((false))
      barrier();
     if((false))
      barrier();
     barrier();
     if((false))
      {
       if((false))
        barrier();
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
     if((false))
      barrier();
    }
   while(false);
   if((false))
    {
     if((false))
      barrier();
     for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > (81215 & 0); _injected_loop_counter --)
      {
       barrier();
       if((false))
        barrier();
      }
    }
  }
 if((false))
  {
   if((false))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     barrier();
     if(true)
      {
       if((false))
        barrier();
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
      }
     else
      {
      }
     if((false))
      barrier();
    }
   do
    {
     barrier();
    }
   while(false);
   if((false))
    barrier();
   if(false)
    {
    }
   else
    {
     if((false))
      barrier();
    }
  }
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if((false))
  {
   if(true)
    {
     barrier();
    }
   else
    {
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  {
   if((false))
    barrier();
   if((! (! (true))))
    {
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if((false))
    barrier();
   barrier();
  }
 if(((! (! (false)))))
  {
   if((false))
    {
     if(true)
      {
       if(false)
        {
        }
       else
        {
         barrier();
        }
      }
     else
      {
      }
     if((false))
      barrier();
    }
   barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if((false))
  barrier();
 if(((false) && true))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
  }
 else
  {
   for(int _injected_loop_counter = 1; _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         barrier();
        }
       while(false);
      }
    }
   if(true)
    {
     if((false))
      barrier();
    }
   else
    {
     if((false))
      barrier();
    }
   GLF_merged2_0_2_49_2_2_51GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidGLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.zw.y = workgroup_id;
   if((false))
    barrier();
   for(int _injected_loop_counter = ((1 & 1) ^ 0); _injected_loop_counter > (0 >> (((int(2)) / 1))); _injected_loop_counter --)
    {
     if((false))
      {
       if((false))
        barrier();
       if((false))
        barrier();
       if((false))
        barrier();
       barrier();
      }
     if((false))
      barrier();
    }
   if((bool(bvec4(false, ((injectionSwitch.x < injectionSwitch.y)), ((injectionSwitch.x < injectionSwitch.y)), false))))
    {
    }
   else
    {
     if((false))
      {
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
         if((false))
          barrier();
        }
       else
        {
         barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           barrier();
          }
        }
       if((false))
        barrier();
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       for(int _injected_loop_counter = (0 ^ 0); _injected_loop_counter < 1; _injected_loop_counter ++)
        {
         if((false))
          barrier();
        }
       if((false))
        barrier();
       if((false))
        barrier();
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   if(true)
    {
     if(true)
      {
       if((false))
        barrier();
       for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if(true)
            {
             barrier();
            }
           else
            {
            }
          }
         if(false)
          {
          }
         else
          {
           do
            {
             if((false))
              {
               for(int _injected_loop_counter = (0 << (int(4))); _injected_loop_counter != ((1 << (int(2))) >> (int(2))); _injected_loop_counter ++)
                {
                 for(int _injected_loop_counter = 1; _injected_loop_counter != (0 << (((int(1)) >> 0))); _injected_loop_counter --)
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                    {
                     barrier();
                    }
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                }
               if(((! (! (false)))))
                barrier();
               if((false))
                barrier();
              }
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
              }
             else
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
            }
           while(false);
          }
        }
      }
     else
      {
       if((false))
        barrier();
      }
    }
   else
    {
    }
   if(false)
    {
    }
   else
    {
     if((false))
      barrier();
    }
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(false)
    {
    }
   else
    {
     if(true)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         barrier();
        }
       while((((bool(bvec2(false, true)))) || false));
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       barrier();
      }
     if((false))
      barrier();
     if((false))
      barrier();
    }
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((! (! (false))))
        {
        }
       else
        {
         barrier();
        }
      }
     barrier();
     if((false))
      barrier();
    }
  }
 if((false))
  barrier();
 if((false))
  barrier();
 do
  {
   if(true)
    {
     if((false))
      barrier();
    }
   else
    {
    }
  }
 while(((injectionSwitch.x > injectionSwitch.y)));
 do
  {
   if((false))
    barrier();
  }
 while(((injectionSwitch.x > injectionSwitch.y)));
 uint workgroup_base = GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size.y * GLF_merged2_0_2_49_2_2_51GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidGLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.zw.y;
 if((((false) || ((injectionSwitch.x > injectionSwitch.y)))))
  barrier();
 if((false))
  {
   if((false))
    {
     do
      {
       barrier();
       if((false))
        barrier();
      }
     while(false);
     if((false))
      barrier();
    }
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     if(false)
      {
      }
     else
      {
       barrier();
       if(true)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
      }
    }
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     barrier();
    }
   else
    {
     if((false))
      barrier();
    }
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(true)
      {
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   barrier();
   if((false))
    {
     if(false)
      {
      }
     else
      {
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   if(((bool((bvec2(bvec2(bvec2(false, false))))))))
    barrier();
  }
 if((false))
  barrier();
 GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size.x = workgroup_base;
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       if((false))
        barrier();
       barrier();
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
     if((false))
      barrier();
    }
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     if(false)
      {
      }
     else
      {
       barrier();
      }
     if((false))
      barrier();
    }
   else
    {
    }
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       barrier();
       if((false))
        barrier();
      }
     else
      {
      }
     if((false))
      barrier();
     if((false))
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       barrier();
      }
    }
   if(true)
    {
     if((false))
      {
       if(false)
        {
        }
       else
        {
         barrier();
        }
      }
     if(false)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   else
    {
     if((false))
      barrier();
    }
  }
 for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != 1; _injected_loop_counter ++)
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     do
      {
       barrier();
      }
     while(false);
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    {
     if(false)
      {
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(true)
      {
       if((false))
        {
         if((false))
          {
           if(false)
            {
            }
           else
            {
             barrier();
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(((false || (false))))
          barrier();
         barrier();
        }
      }
     else
      {
      }
     if(false)
      {
      }
     else
      {
       barrier();
      }
     if((false))
      {
       do
        {
         barrier();
        }
       while((true && (false)));
      }
    }
   if(((bool(bool(((injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
   if(false)
    {
    }
   else
    {
     GLF_merged2_0_2_49_2_2_51GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidGLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.zw.x = GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size.x;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(false)
        {
        }
       else
        {
         do
          {
           if((false))
            barrier();
           barrier();
           if((false))
            barrier();
          }
         while(false);
        }
      }
     if((false))
      barrier();
     if((false))
      {
       do
        {
         barrier();
        }
       while(false);
      }
     if((((false) && true)))
      {
       if((false))
        barrier();
       for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
        {
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
            {
             barrier();
            }
          }
         barrier();
        }
      }
     barrier();
     if((false))
      barrier();
     for(int _injected_loop_counter = 1; _injected_loop_counter > (int(ivec2((0 | (0)), 1))); _injected_loop_counter --)
      {
       do
        {
         if((false))
          barrier();
        }
       while(false);
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     if((false))
      barrier();
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if(true)
    {
     barrier();
    }
   else
    {
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   if((((false) && true)))
    {
     if(((bool(bvec3(false, false, false)))))
      barrier();
     barrier();
    }
   barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 do
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 while(false);
 uint virtual_gid = GLF_merged2_0_2_49_2_2_51GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidGLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.zw.x + GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_13num_workgroupsubgroup_idsubgroup_local_idsubgroup_size.y * GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_13num_workgroupsubgroup_idsubgroup_local_idsubgroup_size.w + GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_13num_workgroupsubgroup_idsubgroup_local_idsubgroup_size.z;
 if(((false || (false))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if(((bool(bvec4(false, true, true, true)))))
    {
     for(int _injected_loop_counter = 1; _injected_loop_counter > (0 >> (int(8))); _injected_loop_counter --)
      {
       if((false))
        barrier();
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if((false))
    barrier();
  }
 if((false))
  barrier();
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   for(int _injected_loop_counter = (0 & - 85812); _injected_loop_counter < (1 & (1 ^ 0)); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if(true)
    {
     if((false))
      {
       do
        {
         barrier();
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if((false))
      barrier();
    }
   else
    {
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(((bool(bool(false)))))
    {
     if((false))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       barrier();
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
    }
  }
 GLF_merged2_0_2_49_2_2_51GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidGLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.xy.y = virtual_gid;
 if((false))
  {
   for(int _injected_loop_counter = 0; _injected_loop_counter < (1 & 1); _injected_loop_counter ++)
    {
     for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
      {
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if((false))
      barrier();
     if((false))
      {
       do
        {
         barrier();
        }
       while((bool(bool(false))));
      }
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 do
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != 1; _injected_loop_counter ++)
    {
     for(int _injected_loop_counter = ((1 << (int(6))) >> (((int(6)) - 0))); _injected_loop_counter > (clamp(0, 0, 0)); _injected_loop_counter --)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(((true && (false))))
        barrier();
      }
    }
  }
 while(false);
 do
  {
   if(true)
    {
     do
      {
       if(((true && (((false) || false)))))
        barrier();
       do
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             barrier();
            }
           while(false);
          }
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
       if((false))
        barrier();
      }
     while(false);
    }
   else
    {
    }
  }
 while(((injectionSwitch.x > injectionSwitch.y)));
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   barrier();
  }
 if((false))
  barrier();
 do
  {
   do
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     atomicStore(write_val, uint(GLF_merged2_0_2_49_2_2_51GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidGLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.xy.y), 4, 64, 0);
     if((false))
      barrier();
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         for(int _injected_loop_counter = 0; _injected_loop_counter < (1 ^ 0); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = (int((ivec4(0, 0, 0, 0) | (ivec4(1, (0 | 1), 0, 0))))); _injected_loop_counter != 0; _injected_loop_counter --)
          {
           barrier();
           for(int _injected_loop_counter = 0; _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
            {
             if((false))
              barrier();
            }
          }
        }
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          barrier();
         if((false))
          barrier();
         do
          {
           if((false))
            barrier();
           barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         while(false);
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
         if((false))
          {
           for(int _injected_loop_counter = (((1 | 1) << (int(2))) >> (((int(2)) << 0))); _injected_loop_counter > 0; _injected_loop_counter --)
            {
             barrier();
            }
          }
        }
      }
    }
   while(false);
  }
 while(((injectionSwitch.x > injectionSwitch.y)));
 if((false))
  barrier();
 if((false))
  barrier();
 if(((injectionSwitch.x < injectionSwitch.y)))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
  }
 if(true)
  {
   if(true)
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       for(int _injected_loop_counter = (0 | int((injectionSwitch.x))); _injected_loop_counter < 1; _injected_loop_counter ++)
        {
         if(false)
          {
          }
         else
          {
           if((false))
            barrier();
          }
         if((false))
          barrier();
        }
       if((false))
        barrier();
       barrier();
       if((false))
        barrier();
      }
    }
   else
    {
    }
  }
 else
  {
  }
 if((bool(bool(true))))
  {
   if((false))
    barrier();
  }
 else
  {
   if((false))
    barrier();
  }
 if((false))
  barrier();
 if(true)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(false)
      {
      }
     else
      {
       barrier();
      }
    }
   if((((false) || false)))
    {
     do
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(((((injectionSwitch.x > injectionSwitch.y))) || false));
     if((false))
      barrier();
     barrier();
    }
   if((false))
    {
     if(false)
      {
      }
     else
      {
       barrier();
      }
    }
  }
 else
  {
  }
 if((false))
  barrier();
 if((false))
  barrier();
 if(((! (! (false)))))
  barrier();
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   barrier();
  }
 if((false))
  {
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false || (false)))
      {
      }
     else
      {
       do
        {
         do
          {
           barrier();
           if((false))
            barrier();
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
        }
       while(false);
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if((false))
    {
     if(false)
      {
       if(false)
        {
        }
       else
        {
         if((false))
          barrier();
        }
      }
     else
      {
       if(((! (! (false)))))
        barrier();
       barrier();
      }
    }
   if(false)
    {
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != 0; _injected_loop_counter --)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            {
             if((false))
              barrier();
             for(int _injected_loop_counter = 0; _injected_loop_counter < ((1 << (int(2))) >> (((int(2)) - 0))); _injected_loop_counter ++)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(((injectionSwitch.x > injectionSwitch.y)))
                {
                }
               else
                {
                 barrier();
                }
              }
            }
           if((false))
            barrier();
          }
         barrier();
        }
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
        }
       if((bool(bvec3(true, true, true))))
        {
         if((false))
          barrier();
        }
       else
        {
        }
       if((false))
        barrier();
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if((false))
      barrier();
    }
   if((false))
    barrier();
   for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
    {
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     if((false))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     do
      {
       if((false))
        barrier();
       if((false))
        barrier();
      }
     while(false);
     if((false))
      barrier();
     if((false))
      {
       do
        {
         if((false))
          barrier();
         barrier();
        }
       while(false);
      }
     for(int _injected_loop_counter = ((0 << (int(7))) | 0); _injected_loop_counter < 1; _injected_loop_counter ++)
      {
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
       if((false))
        barrier();
       if((false))
        barrier();
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
       do
        {
         if((false))
          barrier();
        }
       while((! ((! (! (! (false)))))));
       if((false))
        barrier();
       if((false))
        barrier();
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
       if(((! (! (false)))))
        barrier();
       if(true)
        {
         if((false))
          barrier();
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
           do
            {
             if((false))
              barrier();
            }
           while(false);
          }
         else
          {
           if((false))
            barrier();
           if((false))
            barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = 0; _injected_loop_counter != (0 | 1); _injected_loop_counter ++)
            {
             barrier();
             if((false))
              {
               if(((injectionSwitch.x > injectionSwitch.y)))
                {
                }
               else
                {
                 barrier();
                }
              }
            }
          }
         barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if((false))
        {
         if((false))
          {
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             barrier();
            }
           else
            {
            }
          }
         if(false)
          {
          }
         else
          {
           barrier();
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
      }
     for(int _injected_loop_counter = (int((injectionSwitch.x)) >> (int(7))); _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
      {
       do
        {
         do
          {
           if(true)
            {
             if((false))
              barrier();
             if(false)
              {
              }
             else
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((false))
                  {
                   if((false))
                    barrier();
                   do
                    {
                     barrier();
                    }
                   while(false);
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 barrier();
                 if(false)
                  {
                  }
                 else
                  {
                   if((false))
                    barrier();
                  }
                 if((false))
                  barrier();
                }
              }
            }
           else
            {
            }
          }
         while(false);
         if((false))
          barrier();
         if(((bool(bvec2(false, false)))))
          {
           if((false))
            barrier();
           if((false))
            barrier();
           barrier();
          }
        }
       while(false);
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     if((false))
      barrier();
    }
   else
    {
    }
   if((false))
    barrier();
   if((false))
    {
     do
      {
       barrier();
      }
     while(((((injectionSwitch.x > injectionSwitch.y))) && true));
    }
  }
 if(((injectionSwitch.x < injectionSwitch.y)))
  {
   if(false)
    {
     do
      {
       if((false))
        barrier();
      }
     while(false);
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       do
        {
         barrier();
        }
       while((false || (false)));
       if((false))
        barrier();
      }
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       if((false))
        barrier();
      }
    }
   else
    {
     if(true)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
         if((false))
          barrier();
        }
       else
        {
         if((false))
          barrier();
        }
      }
     else
      {
      }
     if((false))
      barrier();
     if(true)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 0; _injected_loop_counter < (1 | 1); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       if((false))
        {
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           barrier();
          }
         else
          {
          }
        }
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(false)
          {
          }
         else
          {
           if((false))
            barrier();
           if((false))
            {
             if((false))
              barrier();
             do
              {
               if((false))
                barrier();
               barrier();
              }
             while(((injectionSwitch.x > injectionSwitch.y)));
            }
          }
         if((false))
          barrier();
         if((((false) || false)))
          barrier();
         if(true)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              barrier();
             do
              {
               if(((false || (false))))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             while(false);
             if((false))
              {
               if(true)
                {
                 if((false))
                  barrier();
                }
               else
                {
                }
               barrier();
              }
             if((false))
              barrier();
             do
              {
               if((false))
                barrier();
               if(true)
                {
                 for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                  {
                   if((false))
                    barrier();
                  }
                 barrier();
                }
               else
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               if((false))
                barrier();
               if((false))
                {
                 do
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 while(false);
                 barrier();
                }
               if((false))
                barrier();
              }
             while(false);
             if(true)
              {
               if((false))
                {
                 if(true)
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
              }
             else
              {
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           do
            {
             if((false))
              {
               if(((bool((bvec2(bvec3(bvec2(false, true), false)))))))
                barrier();
               barrier();
              }
             if((false))
              barrier();
             buf[GLF_merged2_0_2_49_2_2_51GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidGLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.xy.y] = uint(subgroupAllEqual(write_val));
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((false))
              {
               if((false))
                barrier();
               if(true)
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   do
                    {
                     if((false))
                      barrier();
                     barrier();
                     if((false))
                      barrier();
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                   while(false);
                   if((false))
                    barrier();
                  }
                }
               else
                {
                }
               barrier();
              }
             if((false))
              barrier();
             if((false))
              barrier();
            }
           while(false);
           if((false))
            {
             if(false)
              {
              }
             else
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((false))
                  barrier();
                 barrier();
                 if((false))
                  barrier();
                 if((false))
                  {
                   if((false))
                    barrier();
                   barrier();
                  }
                 if(((true && (false))))
                  barrier();
                 if(((! (! (false)))))
                  barrier();
                 if(((bool(bvec2(false, true)))))
                  {
                   do
                    {
                     if(true)
                      {
                       if((false))
                        barrier();
                      }
                     else
                      {
                      }
                     if((false))
                      barrier();
                    }
                   while(false);
                   if((false))
                    barrier();
                   if(false)
                    {
                    }
                   else
                    {
                     barrier();
                    }
                  }
                }
              }
             if((false))
              barrier();
             barrier();
            }
           if((false))
            barrier();
           if(true)
            {
             for(int _injected_loop_counter = 0; _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
              {
               if((false))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < (1 ^ 0); _injected_loop_counter ++)
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    {
                     do
                      {
                       if((false))
                        barrier();
                      }
                     while(false);
                     barrier();
                    }
                  }
                 if(false)
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
              }
            }
           else
            {
            }
           if(false)
            {
            }
           else
            {
             if((false))
              {
               for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                {
                 barrier();
                }
              }
            }
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
          }
         if((false))
          {
           do
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(true)
              {
               if((false))
                barrier();
               barrier();
              }
             else
              {
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((false))
              {
               if(((injectionSwitch.x > injectionSwitch.y)))
                {
                }
               else
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               barrier();
              }
             if((false))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((false))
              {
               if((false))
                barrier();
               for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                {
                 barrier();
                }
              }
            }
           while((((false || (false))) && true));
          }
         if((false))
          {
           for(int _injected_loop_counter = 0; _injected_loop_counter != ((1 << (int(4))) >> ((~ (~ (int(4)))))); _injected_loop_counter ++)
            {
             barrier();
            }
          }
         if((false))
          {
           if(((true && (((injectionSwitch.x > injectionSwitch.y))))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           do
            {
             barrier();
            }
           while(false);
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             for(int _injected_loop_counter = 1; _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
              {
               barrier();
              }
            }
          }
         if(false)
          {
          }
         else
          {
           if((false))
            {
             if((false))
              barrier();
             barrier();
            }
          }
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             if((false))
              barrier();
             if((false))
              barrier();
            }
           while(false);
           if((false))
            barrier();
           barrier();
          }
        }
       else
        {
         if((false))
          {
           if(false)
            {
            }
           else
            {
             barrier();
            }
          }
        }
       if((false))
        barrier();
       if((false))
        {
         for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
          {
           barrier();
          }
        }
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        {
         if(true)
          {
           barrier();
          }
         else
          {
          }
         if((false))
          barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
        {
         if((false))
          {
           do
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           while(false);
           if((false))
            barrier();
           if((false))
            {
             if((false))
              barrier();
             barrier();
            }
           barrier();
          }
        }
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         do
          {
           barrier();
          }
         while(false);
        }
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
   if((false))
    {
     if((false))
      {
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
         if((false))
          barrier();
        }
       else
        {
         barrier();
        }
      }
     for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = (0 << (int(1))); _injected_loop_counter < 1; _injected_loop_counter ++)
        {
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if((false))
      barrier();
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
