#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(((false || ((false || ((true && (! ((bool(bvec3(! ((true && ((((false || (((((! (bool(bvec3((true && (((! (((! (! ((((injectionSwitch.x > injectionSwitch.y)) || ((bool(bool((((bool(bool(((bool(bool(bool((bvec2((bvec3(bvec3(bvec3(bvec2(false, ((injectionSwitch.x > injectionSwitch.y))), false)))))))))) || false)))))))))))))) || false)))))), ((injectionSwitch.x < injectionSwitch.y)), false))))) || false))))) || ((injectionSwitch.x > (((float(mat3x2((float(mat4(injectionSwitch.y, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, determinant(mat2(1.0, 1.0, 0.0, 1.0)), 1.0))), 0.0, determinant(mat4(0.0, abs(0.0), 0.0, 0.0, 0.0, sqrt(0.0), 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0)), 0.0, abs(1.0), 1.0))) - 0.0)))))))), true, true))))))))))))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    return;
   return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  return;
 if(((! (! ((((bool(bvec2(false, false))))) && true)))))
  return;
 uint subgroup_id = gl_SubgroupID;
 if(((bool((bool(bool((! (! ((((false || ((bool(bvec2(bool(false), false))) || (! (! (false)))))))))))))))))
  {
   if((false))
    return;
   if(((((((false) || false) || (injectionSwitch.x > injectionSwitch.y))))))
    return;
   return;
  }
 if((false))
  {
   if((false))
    return;
   return;
  }
 if((bool(bvec2((false), true))))
  return;
 uint subgroup_size = gl_SubgroupSize;
 if(((! (! (false)))))
  return;
 if(((! ((false || (! (((bool(bvec2(false, true))) || (false)))))))))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((false))
  return;
 if(((((max(((injectionSwitch) - vec2(((((0.0) / 1.0)) - tan(0.0)), (((max(0.0, ((false ? (7.6) : 0.0))))) / 1.0))), injectionSwitch)).x > injectionSwitch.y))))
  return;
 if((false))
  return;
 uint num_workgroup = gl_NumWorkGroups.x;
 if((false))
  return;
 if(((! (! (! ((! (! (! ((true && ((true && ((! (! ((false))))))))))))))))))
  {
   if((false))
    {
     if((false))
      return;
     return;
    }
   return;
   if((((false) && true)))
    return;
   if((false))
    return;
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if((false))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 if((false))
  return;
 uint virtual_gid = (((uint((injectionSwitch.y)) * (((47636u & (((max(0u, 0u))) | ((max((uint(uvec4((max(0u, 0u)), 1u, 0u, 0u))), (max(0u, 0u))))))) | ((clamp(workgroup_base, workgroup_base, (clamp(((workgroup_base) | (((((true ? 0u : (atomicMax(workgroup_base, workgroup_id))))) << 0u) | 0u)), (((max(workgroup_base, (min(workgroup_base, ((workgroup_base) | (workgroup_base))))))) - 0u), workgroup_base))))))))) / 1u) + (uint(uvec2(subgroup_id, (((((1u) << 0u) ^ 0u)) / 1u)))) * subgroup_size + subgroup_local_id;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 uint next_virtual_gid = (~ (~ (workgroup_base))) + (~ (~ ((1u ^ 1u) ^ ((max((max((subgroup_id), (subgroup_id))), (max((subgroup_id), (subgroup_id))))))))) * (0u | (((((((((subgroup_size) ^ 0u)) | (((subgroup_size) ^ 0u))))) | ((((((clamp((clamp(((max(((subgroup_size) ^ 0u), ((subgroup_size) ^ 0u)))) / 1u, ((max(((subgroup_size) ^ 0u), ((subgroup_size) ^ 0u)))) / 1u, ((max(((subgroup_size) ^ 0u), ((subgroup_size) ^ 0u)))) / 1u)), (~ (~ (((max(((subgroup_size) ^ 0u), ((subgroup_size) ^ 0u)))) / 1u))), ((max(((subgroup_size) ^ 0u), ((subgroup_size) ^ 0u)))) / 1u))))) | 0u)))) >> 0u)) + (((clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)) + 1) % subgroup_size);
 if((false))
  {
   if(((((((((injectionSwitch.x < injectionSwitch.y) && true))) && ((! (! (true && ((injectionSwitch.x > injectionSwitch.y)))))))))))
    return;
   return;
  }
 if((false))
  {
   if((false))
    return;
   return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    return;
   return;
  }
 if(((! (! ((((injectionSwitch.x < injectionSwitch.y)) && (false)))))))
  {
   if((false))
    return;
   return;
  }
 if((false))
  return;
 if((false))
  return;
 buf[virtual_gid] = 1;
 if((1u * (subgroup_local_id + 1)) < subgroup_size)
  {
   buf[next_virtual_gid] = 2;
   subgroupAll(false);
   if((false))
    return;
  }
 else
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   buf[next_virtual_gid] = ((false ? (min(- 70040, 10961)) : 2));
   subgroupAll(true);
  }
 if(((((float(((vec3(((clamp((((((injectionSwitch) / vec2(1.0, 1.0))) * mat2(1.0)).x), (((((injectionSwitch) / vec2(1.0, 1.0))) * mat2(1.0)).x), (((((injectionSwitch) / vec2(1.0, 1.0))) * mat2(1.0)).x))) - 0.0), ((cos(length(0.0))) + log(1.0)), (float((mat3(1.0) * (vec3(0.0, 1.0, 0.0))))))) - vec3(0.0, 0.0, 0.0)))) > injectionSwitch.y))))
  return;
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
