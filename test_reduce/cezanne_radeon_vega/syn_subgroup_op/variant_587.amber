#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = (((~ (~ (uvec3((((~ ((((min(~ (uvec3(((uvec3(0u, 0u, 0u)) >> uvec3((((clamp(0u, 0u, 0u))) ^ 0u), 0u, 0u)) ^ (gl_NumWorkGroups))), ~ (clamp(((false ? ((subgroup_local_id - uvec3(158191u, 27944u, 192374u))) : (uvec3(uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups))))), (uvec3(uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups))), (uvec3(uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups))))))))) - uvec3(0u, 0u, 0u)))) >> (uvec3(1u, (((~ (~ (1u))) ^ uint((injectionSwitch.x)))), ((0u >> ((max(uint(4u), uint(4u))))) ^ (((((1u) * ((1u << (uint(1u))) >> (uint(1u)))) / 1u))))) ^ uvec3(1u, ((((1u) - 0u)) << 0u), 1u))))))))).x;
 uint workgroup_size = ((uint(uvec2((((((! ((true && (! ((clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x < (mix(vec2((max((injectionSwitch)[0], (injectionSwitch)[0])), (injectionSwitch)[1]), vec2((- 5655.2253), (7234.5297)), bvec2(false, false))).y))))))) ? (((((~ (~ (uint((((((bool(bvec2(bool((bvec3(bvec3(bvec3((((true && (bool(bvec4(true, false, true, ((injectionSwitch.x < injectionSwitch.y))))))) || false), false, false))))), false))))) ? (uint(uint(uint((((uvec3(gl_WorkGroupSize[0], ((true ? (0u | (gl_WorkGroupSize[1])) : (subgroup_size))), gl_WorkGroupSize[2])) | (uvec3(0u, 0u, 0u) >> (uvec3(2u))))).x)))) : (((((atomicAnd(subgroup_size, 55946u)) - 0u)) - 0u))))))))) | 0u))) * 1u : (subgroup_local_id))), (0u ^ (((true ? 1u : (subgroup_size)))))))));
 uint workgroup_id = (max(((((true ? gl_WorkGroupID : (((max((((false ? ((uvec3(46874u, 187303u, 20946u) - num_workgroup)) : uvec3(64119u, 132325u, 164998u))).bgr), (((false ? ((uvec3(46874u, 187303u, 20946u) - num_workgroup)) : uvec3(64119u, 132325u, 164998u))).bgr)))) | ((clamp((((false ? ((uvec3(46874u, 187303u, 20946u) - num_workgroup)) : uvec3(64119u, 132325u, 164998u))).bgr), (((false ? ((uvec3(46874u, 187303u, 20946u) - num_workgroup)) : uvec3(64119u, 132325u, 164998u))).bgr), (((false ? ((uvec3(46874u, 187303u, 20946u) - num_workgroup)) : uvec3(64119u, 132325u, 164998u))).bgr)))))))) | (gl_WorkGroupID)), gl_WorkGroupID)).x;
 uint workgroup_base = (clamp(workgroup_size, workgroup_size, ((workgroup_size) + 0u))) * workgroup_id;
 uint virtual_gid = workgroup_base + ((0u ^ (1u * (((subgroup_id)) / 1u)))) * subgroup_size + (0u ^ (subgroup_local_id));
 uint next_virtual_gid = (0u | (((workgroup_base + subgroup_id * (clamp((min(subgroup_size, subgroup_size)), subgroup_size, subgroup_size)))) | ((workgroup_base + (((min(subgroup_id, subgroup_id))) / 1u) * (clamp(subgroup_size, subgroup_size, subgroup_size)))))) + ((~ (~ ((subgroup_local_id + 1) % ((subgroup_size) >> 0u)))));
 buf[virtual_gid] = 1;
 if(subgroup_local_id + 1 < subgroup_size)
  {
   ((buf[next_virtual_gid] = 2) / 1u);
   subgroupAll((((((injectionSwitch.x > injectionSwitch.y)) || ((false || (bool(bool(false))))))) || ((((! (! (((injectionSwitch.x > injectionSwitch.y)) || (((((bool(bvec2(false, true))) && ((true && (((injectionSwitch.x > ((false ? (injectionSwitch) : injectionSwitch)).y)) || ((((! (! (true)))) || false))))))) || false))))))))));
  }
 else
  {
   ((~ (((~ ((((buf[next_virtual_gid] = 2) << 0u) ^ uint((injectionSwitch.x))))) - 0u))));
   subgroupAll(true);
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
