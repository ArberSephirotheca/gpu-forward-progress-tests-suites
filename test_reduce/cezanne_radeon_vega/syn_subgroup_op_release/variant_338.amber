#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((false))
  barrier();
 if((false))
  return;
 if(((! ((! (! (((! (false)) || false))))))))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     return;
    }
   barrier();
  }
 if((false))
  {
   if((false))
    {
     if((false))
      barrier();
     return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
   if((false))
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     if((false))
      barrier();
     return;
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      return;
    }
   if((false))
    barrier();
  }
 if((false))
  return;
 if(((((bool(bvec2((bool(bool(false))), false)))) || (true && (false)))))
  {
   if(((false || ((! (! (false)))))))
    {
     if((((injectionSwitch.x > (((vec2(injectionSwitch[0], injectionSwitch[1]))) - vec2(0.0, 0.0)).y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     barrier();
     if((false))
      return;
    }
   return;
  }
 uint subgroup_size = gl_SubgroupSize;
 if((false))
  return;
 if(((true && (false))))
  barrier();
 if((! (! ((false)))))
  {
   if((false))
    return;
   if((((! (((((! (bool(bool(false)))) || false)) && true))))))
    {
     if((false))
      barrier();
     if((false))
      return;
     if((false))
      barrier();
     return;
    }
   if((false))
    barrier();
   if((false))
    {
     if((! (! ((((injectionSwitch.x > injectionSwitch.y)))))))
      return;
     if((false))
      barrier();
     barrier();
     if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
      barrier();
    }
   if(((((true) || false) && ((bool(bvec3(false, false, false)))))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      return;
     if((false))
      {
       if((false))
        {
         if((false))
          return;
         barrier();
         if((false))
          barrier();
        }
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if((false))
          barrier();
         if((false))
          {
           if((false))
            return;
           if((false))
            barrier();
           barrier();
           if((false))
            return;
          }
         if((false))
          return;
         barrier();
        }
       if((false))
        barrier();
       if((((injectionSwitch.x > (mix(float(injectionSwitch.y), (max(float((8211.4000)), float((8211.4000)))), bool(false)))))))
        {
         if((false))
          return;
         if((false))
          barrier();
         if((false))
          return;
         if((false))
          barrier();
         return;
         if((false))
          return;
        }
       if((false))
        return;
       if((false))
        {
         if((true && ((false))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              return;
             barrier();
            }
           return;
          }
         barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
       return;
       if((false))
        {
         if((false))
          barrier();
         if((false))
          return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
         if((((bool(bvec4((((injectionSwitch) + vec2(0.0, 0.0)).x > injectionSwitch.y), false, false, (((bool(bvec4(true, false, false, true))) || false))))))))
          return;
        }
       if((false))
        {
         if((false))
          barrier();
         return;
        }
      }
     if((false))
      return;
     if((false))
      barrier();
     if(((bool(bvec4((false || ((bool(bvec3(false, true, true))))), false, false, false)))))
      barrier();
     if((false))
      barrier();
     barrier();
     if((false))
      {
       if((false))
        return;
       barrier();
      }
     if((false))
      barrier();
    }
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(((((vec2(injectionSwitch[0], injectionSwitch[1])).x > ((mat2(1.0) * ((false ? (((injectionSwitch)) * mat2(1.0)) : injectionSwitch)))).y))))
    return;
   if((false))
    {
     if((false))
      return;
     return;
    }
   if(((false || (false))))
    barrier();
   if(((! (! (bool(bool((((injectionSwitch.x > injectionSwitch.y))))))))))
    {
     if((false))
      barrier();
     if((false))
      return;
     if((false))
      {
       if((false))
        return;
       barrier();
      }
     if((((true && (((! (! ((min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)))))))))
      {
       if((false))
        return;
       if((((false || (! (! (((((injectionSwitch.x > injectionSwitch.y))) || false))))))))
        return;
       barrier();
       if((! (! ((((injectionSwitch.x > injectionSwitch.y)))))))
        return;
      }
     if(((! (! (bool(bvec4((((injectionSwitch.x > injectionSwitch.y))), false, true, true)))))))
      {
       if((false))
        return;
       return;
      }
     if(((((min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
      barrier();
     if(((false || (false))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     if((false))
      barrier();
     barrier();
     if((false))
      return;
    }
   return;
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false || ((false))))
        barrier();
       return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((false))
        barrier();
      }
     return;
    }
   if((false))
    return;
   if((false))
    return;
   if((false))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     return;
    }
   if((false))
    {
     if((false))
      barrier();
     barrier();
     if((bool(bvec3((bool(bool((((injectionSwitch.x > (clamp(injectionSwitch.y, (0.0 + (injectionSwitch.y)), injectionSwitch.y)))))))), false, true))))
      return;
    }
   if((false))
    return;
   return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     if((false))
      {
       if(((((! (! (injectionSwitch.x > injectionSwitch.y)))))))
        barrier();
       return;
      }
     return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if((false))
  return;
 if((false))
  {
   if((false))
    return;
   if((bool(bvec4((false), true, false, false))))
    return;
   if(((false || (false))))
    return;
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
     if((false))
      return;
     if((bool(bvec4((false), ((injectionSwitch.x < injectionSwitch.y)), false, true))))
      return;
     if((false))
      return;
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(((true && (false))))
        return;
       barrier();
      }
     if((false))
      return;
     return;
    }
   if((false))
    barrier();
   if((false))
    return;
   barrier();
  }
 if((false))
  barrier();
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 if((false))
  return;
 if((false))
  barrier();
 if((false || (((true && ((true && (bool(bool((((! (! (bool(bool(false)))))))))))))))))
  {
   if((false))
    {
     if((false))
      return;
     barrier();
    }
   if((((((false) || false)) || (((bool(bvec4(false, false, true, true)))) && true))))
    return;
   if((false))
    barrier();
   if(((((true && (((! (((! ((! (! (! ((! ((! (! (! (bool(bvec3(! (((bool((bvec2(bvec4(bvec2(false, true), false, true))))) && true)), true, false)))))))))))))))))))))) && true))
    {
     if((false))
      barrier();
     return;
    }
   return;
  }
 if(((! (! ((! (! (((((! (! ((((injectionSwitch.x > injectionSwitch.y))))))) || false) || false)))))))))
  return;
 if((false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(((! ((true && (! (false)))))))
  return;
 if((false))
  {
   if((false))
    barrier();
   return;
  }
 if((bool(bvec4((((injectionSwitch.x > injectionSwitch.y))), false, true, (((vec2(injectionSwitch[0], injectionSwitch[1])).x < injectionSwitch.y))))))
  {
   if((false))
    return;
   if((false))
    {
     if(((true && (false))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     return;
    }
   barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if((((bool(bvec4((((injectionSwitch.x > injectionSwitch.y)) || false), ((injectionSwitch.x < injectionSwitch.y)), (true && (true)), true))))))
  {
   if((false))
    barrier();
   if((false))
    {
     if(((bool(bool(false)))))
      {
       if((false))
        {
         if(((! (! (false)))))
          barrier();
         return;
        }
       if((false))
        barrier();
       barrier();
      }
     barrier();
    }
   return;
  }
 if(((((clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
  return;
 if(((((bool(bool((! ((bool(bvec3(! (injectionSwitch.x > injectionSwitch.y), true, false))))))))))))
  return;
 if(((! (! (bool(bvec4((((injectionSwitch.x > injectionSwitch.y))), true, true, true)))))))
  {
   if((false))
    return;
   return;
  }
 if(((((((((bool(bvec4(((bool(bvec4((! (! (true && (false)))), ((injectionSwitch.x > injectionSwitch.y)), false, false)))), true, true, true))) && true)))) || (((max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)))) && ((injectionSwitch.x < injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
 if((false))
  {
   if((false))
    {
     if((false))
      barrier();
     return;
    }
   if((false))
    barrier();
   if((false))
    {
     if(((false || ((! (! (false)))))))
      barrier();
     return;
    }
   if((false))
    {
     if((false))
      barrier();
     if((false))
      return;
     barrier();
    }
   if(((bool((bvec2(bvec3(bvec2(false, true), true)))))))
    return;
   barrier();
   if((false))
    barrier();
  }
 if(((true && (false))))
  barrier();
 if(((false || (false))))
  barrier();
 if((false))
  return;
 if((false))
  barrier();
 if((false))
  return;
 if(((true && (((injectionSwitch.x > injectionSwitch.y))))))
  barrier();
 if((((false)) || false))
  barrier();
 if(((((! (! ((! (! (! (((true && (! ((((min(((min((injectionSwitch) * (transpose(transpose(mat2(1.0)))), (injectionSwitch) * (transpose(transpose(mat2(1.0))))))).x, injectionSwitch.x)) > injectionSwitch.y))))))))))))))) && true))
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      barrier();
     if((! (! ((false)))))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(((! (! (false)))))
      return;
     return;
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        return;
       barrier();
      }
     if((false))
      return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    return;
   if((false))
    barrier();
   barrier();
  }
 if((false))
  return;
 if(((! ((! (! (! (((injectionSwitch.x > injectionSwitch.y))))))))))
  return;
 if(((! ((false || (! (! ((! (false))))))))))
  return;
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(((! ((bool(bool(! (false || ((false || ((false))))))))))))
    {
     if((false))
      barrier();
     if((((injectionSwitch.x > (max(injectionSwitch.y, injectionSwitch.y))))))
      return;
     return;
     if((false))
      barrier();
    }
   if((false))
    return;
   if((false))
    barrier();
   return;
  }
 if((false))
  barrier();
 if((false))
  return;
 if((((false) || false)))
  {
   if((false))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     return;
    }
   if(((bool(bvec3(false, false, false)))))
    barrier();
   barrier();
   if((false))
    barrier();
  }
 if((false || ((false))))
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
     if((false))
      barrier();
    }
   if((false))
    return;
   barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if((true && ((false))))
  {
   if((false))
    return;
   barrier();
  }
 if((false))
  {
   if(((! ((! (! (! (false))))))))
    return;
   barrier();
   if((false))
    barrier();
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if((false))
  {
   if((false))
    return;
   barrier();
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if((((bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, false, true))))))
  return;
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  {
   if((((((false) && true)) || (bool(bool(false))))))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   if((false))
    {
     if((((injectionSwitch.x < injectionSwitch.y)) && ((((((((injectionSwitch.x > injectionSwitch.y) || false)) || false)))))))
      return;
     if((false))
      return;
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
       if((false))
        return;
       if((false))
        barrier();
       if((false))
        return;
       if((false))
        barrier();
       return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   if((false))
    {
     if((false))
      {
       if((false))
        barrier();
       return;
      }
     if(((bool(bvec4(false, false, (! (! (((true) && true)))), ((injectionSwitch.x > ((false ? (vec2(7.5, - 4.2)) : ((injectionSwitch) * vec2(1.0, 1.0)))).y)))))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((false))
    {
     if((((false) && true)))
      return;
     return;
    }
   if((false))
    barrier();
   return;
   if((false))
    barrier();
  }
 if((false))
  return;
 uint workgroup_id = (uvec3(uvec4(((gl_WorkGroupID) - uvec3((((((((false ? (subgroup_local_id) : 0u))) | 0u) ^ ((~ (~ (((~ (~ ((0u)))) / 1u))))))) ^ 0u), 0u, 0u)), 1u))).x;
 uint workgroup_base = workgroup_size * (max(workgroup_id, workgroup_id));
 if(((bool(bvec3(false, false, true)))))
  barrier();
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   return;
   if((false))
    barrier();
  }
 if((false))
  return;
 if((! (! ((false)))))
  {
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   if(((true && (false))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if((false))
      return;
     if((false))
      return;
     return;
    }
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      return;
     if(((((true && (injectionSwitch.x > ((injectionSwitch.y) / 1.0)))))))
      barrier();
     if(((false || (((injectionSwitch.x > injectionSwitch.y))))))
      barrier();
     barrier();
    }
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((bool((bvec2(bvec2(bvec2((false), true)))))))
    {
     if((! (! ((false)))))
      {
       if((false))
        barrier();
       return;
      }
     barrier();
    }
   if((((false) || false)))
    {
     if((false))
      {
       if((false))
        return;
       if(((! (! ((true && (! ((! ((! (! (((false) || false))))))))))))))
        return;
       return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      return;
     if((false))
      {
       if(((bool((bool(bvec2(bool(false), true)))))))
        return;
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
       if((false))
        barrier();
       if((false))
        return;
       return;
       if((false))
        barrier();
      }
     if(((! (! (false)))))
      return;
     return;
     if((false))
      barrier();
     if(((false || (false))))
      {
       if((false))
        barrier();
       return;
      }
     if((false))
      return;
    }
   return;
   if((false))
    barrier();
  }
 if((false))
  {
   if(((! (! (false)))))
    barrier();
   return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if((((((injectionSwitch) * mat2(1.0)).x > injectionSwitch.y))))
    {
     if((false))
      return;
     return;
    }
   if((false))
    {
     if((((injectionSwitch.x > ((((injectionSwitch.x > injectionSwitch.y)) ? (- 5.0) : injectionSwitch.y))))))
      return;
     return;
    }
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
   if((false))
    barrier();
  }
 if((false))
  barrier();
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  {
   if((false))
    barrier();
   return;
  }
 if((false))
  return;
 uint virtual_gid = ((clamp((((~ (~ (((0u ^ (((workgroup_base + (~ (~ ((0u | (subgroup_id * subgroup_size)))))) - 0u))) + subgroup_local_id))))) * 1u), (((((workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)) | ((((true ? workgroup_base : (atomicMax(subgroup_size, subgroup_local_id)))) + subgroup_id * subgroup_size + subgroup_local_id)))) ^ 0u), (uint(uvec2(((((((max(workgroup_base + subgroup_id * subgroup_size, workgroup_base + (max(subgroup_id, subgroup_id)) * subgroup_size))) | (workgroup_base + subgroup_id * subgroup_size)) + subgroup_local_id) + 0u)), 1u))))) | (workgroup_base + subgroup_id * subgroup_size + subgroup_local_id));
 if(((! (! (bool(bvec3((((false)) && true), false, false)))))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((((false)) && ((injectionSwitch.x < ((clamp((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0)))).y))))
    barrier();
   if((false))
    return;
   return;
   if((false))
    barrier();
  }
 if(((((true && (((false || (! (! (false)))) && ((injectionSwitch.x < injectionSwitch.y)))))))))
  {
   if((((((injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y))))
    {
     if(((((bool((bvec3(bvec3(bvec3(injectionSwitch.x > injectionSwitch.y, true, false))))))))))
      {
       if((false))
        return;
       return;
      }
     barrier();
     if((false))
      return;
    }
   return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    {
     if((((! ((false || (! ((false || ((true && ((false)))))))))) && true)))
      {
       if((false))
        return;
       if(((! (! (bool(bool((! (! ((false)))))))))))
        {
         if((false))
          barrier();
         if((false))
          barrier();
         if((((false)) || ((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           if((false))
            barrier();
           if((false))
            return;
           return;
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
        }
       barrier();
      }
     if((false))
      return;
     if((false))
      {
       if((false))
        {
         if((false))
          barrier();
         return;
         if((false))
          barrier();
        }
       if(((bool(bvec4(false, ((injectionSwitch.x < injectionSwitch.y)), false, true)))))
        return;
       if(((((((((clamp(((true ? (mix(vec2((779.395), (517.362)), vec2((injectionSwitch)[0], (((((injectionSwitch)[1]) / 1.0)) - 0.0)), bvec2(true, true))).x : (distance(vec4(- 8907.1307, (min(- 2.6, - 2.6)), 514.010, 0.5), vec4(224.472, 6.2, - 199.061, 0.9))))), (mix(vec2((779.395), (517.362)), vec2((injectionSwitch)[0], (((injectionSwitch)[1]) / 1.0)), bvec2(true, true))).x, (float(mat3((max((mix(vec2((779.395), (517.362)), vec2((injectionSwitch)[0], (((injectionSwitch)[1]) / 1.0)), bvec2(true, true))).x, (mix(vec2((779.395), (517.362)), vec2((injectionSwitch)[0], (((injectionSwitch)[1]) / 1.0)), bvec2(true, true))).x)), length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0))))) > ((true ? injectionSwitch.y : (1.4))))) && true))) && true)))
        return;
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     return;
     if((false))
      {
       if((false))
        return;
       return;
       if((false))
        return;
      }
    }
   if((false))
    {
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((! (! ((false)))))
      return;
     if((false))
      return;
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     return;
    }
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    {
     if((false))
      return;
     if(((((((0.0 + (injectionSwitch.x)) > injectionSwitch.y)))) || false))
      return;
     if((false))
      return;
     if((false))
      return;
     barrier();
     if((((((injectionSwitch.x) - (clamp((0.0 + (((false ? (- 4.1) : 0.0)))), 0.0, (clamp(0.0, 0.0, (mix(float((42.49)), float(0.0), bool(true)))))))) > injectionSwitch.y))))
      {
       if((false))
        barrier();
       return;
      }
    }
   return;
  }
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((1u * ((subgroup_local_id + 1))) % subgroup_size);
 if((false))
  {
   if((false))
    return;
   if((false))
    {
     if((false))
      return;
     if((false))
      {
       if((false))
        return;
       return;
      }
     barrier();
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      return;
    }
   if((false))
    {
     if(((false || ((bool(bool(false)))))))
      barrier();
     if((false))
      return;
     barrier();
    }
   if((false))
    {
     if(((bool(bvec2(false, false)))))
      {
       if((! (! (((bool(((bool(false)) || (true && (false))))))))))
        return;
       if((false))
        barrier();
       barrier();
      }
     return;
     if((false))
      barrier();
    }
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    return;
   return;
   if((false))
    return;
   if((false))
    {
     if((false))
      return;
     barrier();
    }
   if((false))
    return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((((false)) || false)) || false))
    barrier();
   if((false))
    barrier();
   if((! (((! ((false))) && true))))
    {
     if((false))
      return;
     if(((! (! (false)))))
      barrier();
     if((((! (! ((injectionSwitch.x > injectionSwitch.y)))))))
      return;
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      return;
     if((false))
      return;
     if((false))
      return;
    }
   if((false))
    return;
   if((false))
    {
     if((false))
      barrier();
     return;
    }
   if((! (! ((((((bool(bool(! (! (false))))) && true))))))))
    barrier();
   barrier();
   if((false || ((! (! ((false)))))))
    barrier();
  }
 if(((((false || (((injectionSwitch.x > injectionSwitch.y)))) || false))))
  return;
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(((((max(injectionSwitch.x, ((clamp((injectionSwitch.x), (1.0 * ((injectionSwitch.x))), (min(((((bool((false || (bool(((true) && true)))))) ? ((injectionSwitch) - vec2(0.0, 0.0)) : (vec2(8276.8547, 5.1)))).x), ((((false ? (- 4.3) : (injectionSwitch.x))) * 1.0)))))) - 0.0))) > injectionSwitch.y))))
  return;
 if((false))
  {
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    return;
   return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if((false))
  barrier();
 if((false))
  barrier();
 if((((bool(bool((((((injectionSwitch.x > injectionSwitch.y)))) && ((injectionSwitch.x < injectionSwitch.y)))))) || false)))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    return;
   if((false))
    {
     if((false))
      barrier();
     return;
    }
   return;
   if((false))
    return;
  }
 if((((((((((! (! ((bool(bvec4(bool(bvec4(injectionSwitch.x > (min((max(injectionSwitch, injectionSwitch)).y, injectionSwitch.y)), false, true, (! (! ((true && (((injectionSwitch.x > injectionSwitch.y))))))))), false, true, false))))))) && true)) || ((injectionSwitch.x > injectionSwitch.y))))))))
  {
   if((false))
    return;
   barrier();
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(((false || (bool(bvec3((((injectionSwitch.x > injectionSwitch.y))), false, false))))))
  {
   if(((((max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
    return;
   if((((injectionSwitch.x > (clamp(injectionSwitch.y, injectionSwitch.y, (min((mix(float(injectionSwitch.y), float((727.974)), bool(false))), ((float(vec4((max((false ? (42.73) : injectionSwitch.y), (false ? (42.73) : injectionSwitch.y))), 0.0, 0.0, cos(0.0)))))))))))))
    {
     if((false))
      {
       if((false))
        {
         if(((((! (! (((injectionSwitch.x > injectionSwitch.y)))))) || false)))
          barrier();
         return;
        }
       barrier();
      }
     return;
    }
   return;
  }
 ((buf[virtual_gid] = 1) * 1u);
 if(subgroup_local_id + 1 < subgroup_size)
  {
   if((false))
    return;
   if((false))
    return;
   if((((injectionSwitch.x > (clamp((min(injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)).y))))
    return;
   if((false))
    return;
   if((false))
    return;
   if(((bool(bool(false)))))
    return;
   if((false))
    {
     if((false))
      return;
     if((false))
      {
       if((false))
        barrier();
       if((false))
        barrier();
       if((false))
        {
         if((false))
          return;
         if((false))
          barrier();
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
       if((false))
        barrier();
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         return;
        }
       barrier();
       if((true && ((! (! ((false)))))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if((false))
      {
       if((((injectionSwitch.x > (vec2(injectionSwitch[0], injectionSwitch[1])).y))))
        barrier();
       if((false))
        barrier();
       return;
      }
     barrier();
    }
   if((false))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
   if((false))
    barrier();
   if((false))
    return;
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if(((bool(bvec3(false, true, true)))))
    {
     if((false))
      return;
     return;
    }
   if(((((mix(vec2((- 49.77), (- 4.5)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).x > injectionSwitch.y))))
    {
     if((false))
      {
       if((false))
        barrier();
       if((false))
        {
         if(((true && (((injectionSwitch.x > injectionSwitch.y))))))
          {
           if((false))
            barrier();
           barrier();
          }
         return;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((((injectionSwitch.x) / 1.0) > injectionSwitch.y))))
          return;
         barrier();
        }
       if((false))
        return;
       if(((false || (false))))
        barrier();
       if((false))
        {
         if(((false || (false))))
          return;
         return;
        }
       if((((bool(bvec2((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y))))))))
        return;
       if((false))
        barrier();
       return;
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(((((injectionSwitch.x > injectionSwitch.y)) || (((false)) && true))))
          return;
         return;
         if((false))
          barrier();
        }
      }
     if((false))
      {
       if((false))
        barrier();
       if((! ((true && ((! (! (! ((((injectionSwitch.x > injectionSwitch.y))))))))))))
        barrier();
       if((false))
        return;
       return;
      }
     if(((((bool(bvec2(injectionSwitch.x > injectionSwitch.y, ((injectionSwitch.x < injectionSwitch.y)))))))))
      return;
     barrier();
    }
   if((false))
    {
     if((false))
      return;
     barrier();
    }
   if((false))
    return;
   if((false))
    return;
   if(((! (! (false)))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      return;
     if((false))
      {
       if((false))
        barrier();
       return;
      }
     barrier();
    }
   if(((! ((bool(bool((! ((bool(bvec4(! ((((false || (! (false)))) && ((injectionSwitch.x < injectionSwitch.y)))), (((! (! ((false || ((true && (injectionSwitch.x < injectionSwitch.y))))))))), true, (((true && (false))) || false)))))))))))))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   if((((false) && ((injectionSwitch.x < injectionSwitch.y)))))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false || ((false))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    return;
   if((false))
    barrier();
   subgroupAll(false);
   if((false))
    barrier();
   if((! (! ((false)))))
    {
     if((false))
      barrier();
     return;
    }
   if((false))
    barrier();
   if((false))
    {
     if((false))
      return;
     if((false))
      barrier();
     return;
    }
   if((false))
    return;
   if((false))
    barrier();
   if((false))
    barrier();
   if((((false || (((! (! (bool((bvec2(bvec3(((bvec2(bvec4(bvec2(bvec4(bvec2((false), true), true, true)), true, true)))), false))))))))))) && true))
    {
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if((false))
    {
     if((! ((true && ((bool(bool(! (((bool(bool(false)))))))))))))
      return;
     if((((false) && true)))
      {
       if((false))
        {
         if((false))
          barrier();
         return;
        }
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
         if(((((mix(float(((9.3 - - 9.9))), float((min(injectionSwitch.x, injectionSwitch.x))), bool(true))) > injectionSwitch.y))))
          return;
        }
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(((((injectionSwitch.x < injectionSwitch.y)) && (((injectionSwitch.x > injectionSwitch.y))))))
      {
       if((false))
        {
         if((((injectionSwitch.x > ((injectionSwitch.y) + 0.0)))))
          return;
         if((false))
          barrier();
         barrier();
        }
       barrier();
      }
     if(((((! (! (false || ((((((false) || false)) && true)))))) && true))))
      return;
     if((false))
      barrier();
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(((! (! (false)))))
      return;
    }
   if((true && ((((injectionSwitch.x > injectionSwitch.y))))))
    {
     if((false))
      return;
     if((false))
      {
       if((false))
        {
         if((false))
          return;
         barrier();
        }
       if((false))
        return;
       barrier();
       if((false))
        barrier();
       if((false))
        return;
      }
     return;
     if((false))
      {
       if((false))
        return;
       return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false || ((false))))
    {
     if((((false) && ((injectionSwitch.x < injectionSwitch.y)))))
      barrier();
     if((false))
      return;
     if((false))
      barrier();
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      return;
     if((false))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       if((false))
        barrier();
       return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     return;
    }
  }
 else
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((((injectionSwitch.x > injectionSwitch.y)) && true))))
    {
     if((false))
      barrier();
     if(((! ((false || (! (false)))))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if(((true && ((! (! (bool(bvec2(((! (! (false)))), true)))))))))
        return;
       if(((((vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
        return;
       if(((bool(bvec2(false, false)))))
        {
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           return;
          }
         return;
         if((false))
          barrier();
        }
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
       if((! (! ((false)))))
        barrier();
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          {
           if((false))
            return;
           return;
          }
         if(((((bool(bool(((injectionSwitch.x > injectionSwitch.y)))))) || false)))
          {
           if((false))
            barrier();
           barrier();
          }
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
       return;
       if((((false || ((injectionSwitch.x > injectionSwitch.y))))))
        {
         if((false))
          {
           if((false))
            return;
           barrier();
          }
         if(((false || ((false || (((injectionSwitch.x > injectionSwitch.y))))))))
          return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            return;
           barrier();
          }
         if((false))
          {
           if((false))
            return;
           return;
          }
         barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            return;
           barrier();
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      {
       if((false))
        return;
       if((false))
        return;
       if((false))
        return;
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       barrier();
      }
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     if((false))
      return;
     if((false))
      return;
     if((false))
      return;
     if((false))
      return;
     barrier();
     if(((! ((bool(bvec4(! (false), false, true, true)))))))
      {
       if((false))
        return;
       if((false))
        barrier();
       if((false))
        barrier();
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          return;
         return;
        }
       if((false))
        barrier();
      }
     if(((((true && (((injectionSwitch.x > injectionSwitch.y) && true)))))))
      {
       if((false))
        {
         if((false))
          return;
         if((false))
          barrier();
         if((false))
          barrier();
         if((false))
          barrier();
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           return;
           if((((((false) || false)) && true)))
            return;
          }
         return;
         if((false))
          return;
        }
       if(((((false || (injectionSwitch.x > injectionSwitch.y))))))
        return;
       if((((((true) && true) && ((((((injectionSwitch.x > injectionSwitch.y)))) || false)))) && true))
        {
         if((false))
          return;
         if((false))
          barrier();
         if((((injectionSwitch.x > (mix(float((max((clamp(injectionSwitch.y, injectionSwitch.y, (mat2((injectionSwitch.y)) * (injectionSwitch)).y)), injectionSwitch.y))), float((3656.8606)), bool(false)))))))
          {
           if((false))
            return;
           barrier();
          }
         if((false))
          {
           if(((((injectionSwitch.x > injectionSwitch.y)) || (false))))
            barrier();
           return;
          }
         return;
        }
       if(((! (! ((true && (false)))))))
        {
         if((false))
          return;
         barrier();
        }
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(((((float(mat2x4(injectionSwitch.x, sqrt(0.0), 1.0, cos(0.0), length(vec2(0.0, 0.0)), 1.0, 0.0, 1.0))) > (min((max(injectionSwitch, injectionSwitch)), (max(injectionSwitch, injectionSwitch)))).y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         barrier();
        }
      }
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     if((false))
      barrier();
     if((false))
      return;
    }
   atomicStore(buf[next_virtual_gid], ((clamp(uint(uvec2(uint(((2) >> 0)), uint((injectionSwitch.x)))), uint(uvec2(uint(((2) >> 0)), uint((injectionSwitch.x)))), uint(uvec2(uint(((((2) ^ 0)) >> 0)), uint((injectionSwitch.x))))))), ((4) + 0), 64, 4);
   if(((((bool(bvec3(bool(bvec3((bool(((bvec2(bvec3(bvec2(bvec3((bvec2(bvec4(bvec2(((((! (! (injectionSwitch.x > injectionSwitch.y))))) || false), ((injectionSwitch.x > injectionSwitch.y))), true, false))), true)), false)))))), true, true)), false, false)))))))
    {
     if((false))
      return;
     barrier();
    }
   if((false))
    {
     if((((((injectionSwitch.x > injectionSwitch.y))) || false)))
      return;
     if((false))
      {
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
       return;
      }
     barrier();
    }
   if((false))
    {
     if((false))
      {
       if((false))
        barrier();
       return;
      }
     return;
    }
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    {
     if(((bool(bool(false)))))
      barrier();
     return;
    }
   if((false))
    {
     if((false))
      return;
     barrier();
    }
   subgroupAll(true);
   if((false))
    barrier();
  }
 if((false))
  {
   if((false))
    barrier();
   return;
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
