#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = ((((gl_NumWorkGroups.x) / 1u)) | (gl_NumWorkGroups.x));
 uint workgroup_size = (0u | (~ ((~ (~ (~ ((min((gl_WorkGroupSize.x), (((0u ^ ((gl_WorkGroupSize.x)))) + 0u))))))))));
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = (((((max(workgroup_base + (~ (~ (((subgroup_id * (((clamp(subgroup_size, ((subgroup_size) >> 0u), subgroup_size))) | (subgroup_size))) / 1u)))) + subgroup_local_id, workgroup_base + ((subgroup_id * subgroup_size) / 1u) + subgroup_local_id))) - 0u)) | ((max((~ (~ ((((min(workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size))) - 0u)))) + subgroup_local_id, (clamp((((max(workgroup_base, workgroup_base))) | (workgroup_base)) + subgroup_id * subgroup_size, ((workgroup_base + subgroup_id * subgroup_size) | (workgroup_base + subgroup_id * subgroup_size)), workgroup_base + subgroup_id * subgroup_size)) + subgroup_local_id))));
 uint next_virtual_gid = (clamp(workgroup_base, workgroup_base, workgroup_base)) + subgroup_id * subgroup_size + (((((((min((((((1u * (((((~ (~ ((((((injectionSwitch.x < injectionSwitch.y)) ? max((((clamp(((true ? (uint(uvec2((~ (~ ((subgroup_local_id) | (0u << (uint(((0u) + 0u))))))), (0u | 0u)))) : (subgroup_local_id))), ((true ? (uint(uvec2((~ (~ ((subgroup_local_id) | (0u << (uint(((0u) + 0u))))))), (0u | 0u)))) : (subgroup_local_id))), ((true ? (uint(uvec2((~ (~ ((subgroup_local_id) | (0u << (uint(((0u) + 0u))))))), (0u | 0u)))) : (subgroup_local_id)))))) + 1), (subgroup_local_id + 1)) : (bitfieldReverse(subgroup_id))))))))) ^ 0u)) << 0u))) % subgroup_size)) >> 0u), (((1u * (((((~ (~ ((((((((injectionSwitch.x < injectionSwitch.y)) && ((injectionSwitch.x < injectionSwitch.y)))) ? max((((((! (! (true))) ? (uint(uvec2((~ (~ ((subgroup_local_id) | (0u << (uint(((((0u)) ^ uint((injectionSwitch.x))) + 0u))))))), (0u | 0u)))) : (subgroup_local_id)))) + 1), (subgroup_local_id + 1)) : (bitfieldReverse(subgroup_id))))))))) ^ 0u)) << 0u))) % subgroup_size)))) ^ 0u)) - 0u)) << 0u);
 buf[virtual_gid] = 1;
 if((true && ((~ (~ ((clamp(((((subgroup_local_id) | (subgroup_local_id))) ^ 0u), ((((subgroup_local_id) | (subgroup_local_id))) ^ 0u), ((((subgroup_local_id) | ((true ? (subgroup_local_id) : (atomicXor(subgroup_local_id, workgroup_id)))))) ^ 0u))) + 1))) < subgroup_size)))
  {
   atomicStore(buf[next_virtual_gid], uint((((false || (false)) ? (((((((min(int(ivec2((((min((clamp(- 26100, - 26100, - 26100)), - 26100)))) | 0, int((clamp((injectionSwitch.x), (injectionSwitch.x), (injectionSwitch.x)))))), int(ivec2((((min((clamp(- 26100, - 26100, - 26100)), - 26100)))) | 0, int((injectionSwitch.x)))))))))) >> 0) << ((clamp(0, ((0) ^ 0), 0)) >> ((false ? (findLSB(((1 * (int(ivec3((17854 >> ((- 47114) >> 0)), 0, 0))))))) : (~ (~ ((int(2))))))))) : (clamp(2, 2, 2))))), ((max((4) | 0, (4) | 0))), 64, 4);
   subgroupAll((((true) || false) && (false)));
  }
 else
  {
   atomicStore(buf[next_virtual_gid], uint(2), 4, 64, (max((1 * (((4) << 0))), 4)));
   subgroupAll((true && (true)));
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
