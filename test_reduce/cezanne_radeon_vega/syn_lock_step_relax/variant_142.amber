#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = (((max(false ? (min((uvec3(28324u, 199256u, 107938u)), (uvec3(28324u, 199256u, 107938u)))) : gl_NumWorkGroups, (true && (((false) && true))) ? (min((uvec3(28324u, 199256u, 107938u)), (uvec3(28324u, 199256u, ((((((107938u) | (0u & 194053u))) / 1u)) << 0u))))) : gl_NumWorkGroups)))).x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = ((0u | (((clamp(workgroup_size * workgroup_id, (min(workgroup_size * ((workgroup_id) | ((1u * (workgroup_id)))), ((workgroup_size) >> (0u ^ 0u)) * workgroup_id)), (max(workgroup_size * workgroup_id, (min(workgroup_size, (min(workgroup_size, workgroup_size)))) * workgroup_id)))) / (max(1u, (0u ^ (1u))))))));
 uint virtual_gid = workgroup_base + (((~ (~ ((((max(subgroup_id, ((max(min(subgroup_id, subgroup_id), min(subgroup_id, subgroup_id))))))) | 0u) * subgroup_size)))) << 0u) + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_id * ((subgroup_size) | (((subgroup_size) ^ uint((injectionSwitch.x))))) + ((0u | (((((max(((((subgroup_local_id + 1) - 0u) >> uint((injectionSwitch.x)))), (~ ((true ? (min((~ (((((subgroup_local_id + 1) - 0u))) << 0u)), (~ (((subgroup_local_id + 1) - 0u))))) : (atomicAdd(workgroup_id, subgroup_id)))))))) % subgroup_size) + (0u ^ 0u)))));
 if(((bool(bvec3((bool(bvec3((((((! (((false || (((! (! (! (((bool(bvec4(! ((! (! ((bool((bvec2(bvec2(bvec2(! (false), false)))))))))), false, (! (! ((true && (false))))), true))) || false))))))))) && (! (! (true)))))))) && true), false, false))), (! (! ((((((injectionSwitch) * mat2(1.0)).x > injectionSwitch.y)) || (false))))), false)))))
  return;
 buf[virtual_gid] = 1;
 atomicStore(buf[((clamp(max(next_virtual_gid, (0u | ((((0u ^ (next_virtual_gid))) + 0u)))), max(next_virtual_gid, (((0u ^ ((false ? (next_virtual_gid) : (next_virtual_gid))))) + 0u)), max(next_virtual_gid, (((((0u ^ (next_virtual_gid))) + 0u)) | ((clamp((((0u ^ (next_virtual_gid))) + ((0u) >> 0u)), (((0u ^ (next_virtual_gid))) + 0u), (((0u ^ (next_virtual_gid))) + 0u)))))))))], uint(2), 4, 64, ((0) << 0));
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
