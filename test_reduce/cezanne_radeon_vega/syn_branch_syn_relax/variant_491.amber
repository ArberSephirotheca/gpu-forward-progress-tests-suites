#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 430

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if((((! (! ((injectionSwitch.x > injectionSwitch.y)))))))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 if((false))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   if((bool(bvec4((((injectionSwitch.x > injectionSwitch.y))), ((injectionSwitch.x > injectionSwitch.y)), true, false))))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 uint workgroup_size = (min(gl_WorkGroupSize, gl_WorkGroupSize)).x;
 if((true && ((false))))
  barrier();
 if((false))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = (uint(uvec2(workgroup_size, (((bool(bvec4(true, true, (true && (false)), true))) ? 0u : (atomicMax(workgroup_id, subgroup_local_id))))))) * (((min((uint((min(((uint(workgroup_id)) - (0u & 179924u)), uint(workgroup_id))))), (clamp((uint((min(((uint(workgroup_id)) - (0u & 179924u)), uint(workgroup_id))))), (uint((min(((uint(workgroup_id)) - (0u & 179924u)), uint(workgroup_id))))), (uint((min(((uint(workgroup_id)) - (0u & 179924u)), uint(workgroup_id)))))))))) / 1u);
 if((((injectionSwitch.x > ((injectionSwitch.y) * 1.0)))))
  barrier();
 if((false))
  barrier();
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 if((false))
  barrier();
 if(((! (! ((false || (bool((((! (! (((((! (! (false)))) && true) || ((true && (bool((bool(((bvec2((bvec3(bvec4(bvec3(bvec2(bvec2(bvec2(((true && (((((bool(bvec3(true && ((false || (false || (! (! (((((false))) || (! (! ((! (! (false))))))))))))), true, false)))))))) || (((((! (! (((((injectionSwitch.x > injectionSwitch.y)) || false))))) ? ((vec2(vec2(injectionSwitch)))) : ((clamp((max((vec2(((mat3(clamp(injectionSwitch, ((true ? injectionSwitch : (injectionSwitch))), injectionSwitch), 0.0, 1.0, 1.0, 1.0, 0.0, abs(1.0), 1.0)) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)))), clamp((max(injectionSwitch, ((injectionSwitch) * vec2((injectionSwitch.y), (injectionSwitch.y))))), ((true ? ((injectionSwitch) * vec2(1.0, 1.0)) : ((max(((((injectionSwitch)) - vec2(0.0, 0.0)) * vec2(1.0, 1.0)), injectionSwitch))))), (((clamp(injectionSwitch, injectionSwitch, injectionSwitch))) + vec2(0.0, 0.0))))), ((vec2(vec3((clamp(injectionSwitch, ((true ? injectionSwitch : ((sqrt(sqrt(vec2(1.0, 1.0))) * (injectionSwitch))))), injectionSwitch)) * mat2(1.0), (injectionSwitch.y))))), clamp(injectionSwitch, ((true ? injectionSwitch : (injectionSwitch))), injectionSwitch)))))).x > injectionSwitch.y))), (bool(bool(true)))))), true), true))))))))))))))))) && true)))))))))
  {
   if((false))
    {
     if((false))
      barrier();
     if((((((true ? (clamp(((true ? injectionSwitch.x : (- 4118.7805))), injectionSwitch.x, injectionSwitch.x)) : (2.1))) > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + (((clamp(((min(((((max(0u ^ ((((subgroup_local_id + 1) % subgroup_size)) - 0u), 0u ^ ((((subgroup_local_id + 1) % subgroup_size)) - 0u))))) | (((max(0u ^ (((((false ? (143441u) : (subgroup_local_id + 1))) % subgroup_size)) - 0u), 0u ^ ((((subgroup_local_id + 1) % ((subgroup_size) | 0u))) - 0u)))))), (subgroup_local_id + (max(1, ((1) * ((((1) << 0) << (int(5))) >> (int(5))))))) % (max(subgroup_size, subgroup_size))))), (~ (~ (((min(((((max(0u ^ ((((subgroup_local_id + 1) % subgroup_size)) - 0u), 0u ^ (((min(((((((subgroup_local_id + 1) % subgroup_size)) - 0u)) + 0u), ((((subgroup_local_id + 1) % subgroup_size)) - 0u)))) ^ 0u))))) | (((max(0u ^ (((((false ? (143441u) : (subgroup_local_id + 1))) % subgroup_size)) - 0u), 0u ^ ((max((uint(uvec3((((subgroup_local_id + 1) % ((subgroup_size) | 0u))), 0u, 1u))), (((subgroup_local_id + 1) % ((subgroup_size) | 0u))))) - 0u)))))), (subgroup_local_id + (max(1, ((1) * ((1 << (((int(5)) << (0 >> ((0 + (int(2)))))))) >> (int(5))))))) % (max((max(subgroup_size, subgroup_size)), subgroup_size)))))))), ((min(((((max(0u ^ ((((subgroup_local_id + 1) % subgroup_size)) - 0u), 0u ^ ((((subgroup_local_id + 1) % subgroup_size)) - 0u))))) | (((max(0u ^ (((((false ? (143441u) : (subgroup_local_id + 1))) % subgroup_size)) - 0u), 0u ^ ((((subgroup_local_id + 1) % ((subgroup_size) | 0u))) - 0u)))))), (subgroup_local_id + (max(1, ((1) * ((1 << ((clamp((~ (((~ (int(5))) ^ 0))), int(5), int(5))))) >> (int(5))))))) % (max(subgroup_size, subgroup_size)))))))) | 0u);
 buf[virtual_gid] = (((min(1, 1)) * int((injectionSwitch.y))));
 if((true && (((subgroup_local_id + 1 < subgroup_size) || ((((true ? injectionSwitch : (injectionSwitch))).x > injectionSwitch.y))))))
  {
   if((((injectionSwitch.x > (float(vec2(injectionSwitch.y, sqrt(0.0))))))))
    barrier();
   if((false))
    barrier();
   int i = 0;
   if((! ((((! (! (! ((bool(bool((((false)) && true))))))))) || false))))
    barrier();
   atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 0);
   if((false))
    barrier();
  }
 else
  {
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((bool(bvec4((false), false, (false || ((! (! ((((max(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y))))))), true))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > (vec2(injectionSwitch[0], injectionSwitch[1])).y))))
        barrier();
       if((false))
        barrier();
       barrier();
      }
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     barrier();
     if((false))
      barrier();
    }
   atomicStore(buf[((false ? (subgroup_size) : (clamp(next_virtual_gid, next_virtual_gid, (1u * (next_virtual_gid))))))], uint(2), (max(((true ? (~ (~ (4))) : (49779))), (0 ^ (4)))), 64, 0);
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
