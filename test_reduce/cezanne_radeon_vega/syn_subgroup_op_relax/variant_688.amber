#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((((false)) && true))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((! (! (! (! ((! ((bool(bvec2(! (((((! ((true && ((false || (! ((! (! (false)))))))))) || (bool(bool((false)))))))), true)))))))))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if((false))
  return;
 if((false))
  return;
 uint subgroup_id = gl_SubgroupID;
 if((false))
  return;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 if((false))
  {
   if((false))
    return;
   return;
  }
 if((false))
  return;
 uint workgroup_size = gl_WorkGroupSize.x;
 if((false))
  return;
 uint workgroup_id = (clamp((clamp(gl_WorkGroupID.x, gl_WorkGroupID.x, gl_WorkGroupID.x)), (((~ (~ (gl_WorkGroupID.x)))) - (min(0u, 0u))), (max(gl_WorkGroupID.x, gl_WorkGroupID.x))));
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 uint workgroup_base = (((((false ? ((mat2(829.629, 636.875, - 9137.7666, - 0.4) , 138448u)) : ((uint(uint((min(workgroup_size, workgroup_size)))))) | 0u))) ^ 0u)) * (max((clamp((0u + (workgroup_id)), workgroup_id, workgroup_id)), workgroup_id));
 uint virtual_gid = workgroup_base + (~ (~ (subgroup_id * subgroup_size))) + ((max(((uint(uint(subgroup_local_id)))), (subgroup_local_id))) << 0u);
 uint next_virtual_gid = (((~ (~ (uint(uvec2(((uint(((uvec2((clamp((uint(uvec4(((max(true ? (((((uint(((uvec2((workgroup_base), ((1u << (uint(1u))) >> (uint(1u))))) >> uvec2(0u, 0u)))) >> 0u)) | (((uint(((uvec2((workgroup_base), ((1u << (uint(1u))) >> (uint(1u))))) >> uvec2(0u, 0u)))) >> 0u)))) : (bitfieldInsert(workgroup_id, num_workgroup, 74483, - 18423)), true ? (((((uint(((uvec2((workgroup_base), ((1u << (uint(1u))) >> (uint(1u))))) >> uvec2(0u, 0u)))) >> 0u)) | (((uint(((uvec2((workgroup_base), ((1u << (uint(1u))) >> (uint(1u))))) >> uvec2(0u, 0u)))) >> 0u)))) : (bitfieldInsert(workgroup_id, num_workgroup, 74483, - 18423))))), 1u, 1u, 1u))), ((max(true ? (((((uint(((uvec2((workgroup_base), ((1u << (uint(1u))) >> (uint(1u))))) >> uvec2(0u, 0u)))) >> 0u)) | (((uint(((uvec2((workgroup_base), ((1u << (uint(1u))) >> (uint(1u))))) >> uvec2(0u, 0u)))) >> 0u)))) : (bitfieldInsert(workgroup_id, num_workgroup, 74483, - 18423)), true ? (((((uint(((uvec2((workgroup_base), ((1u << (uint(1u))) >> (uint(1u))))) >> uvec2(0u, 0u)))) >> 0u)) | (((uint(((uvec2((workgroup_base), ((1u << (uint(1u))) >> (uint(1u))))) >> uvec2(0u, 0u)))) >> 0u)))) : (bitfieldInsert(workgroup_id, num_workgroup, 74483, - 18423))))), ((max(true ? (((((uint(((uvec2((workgroup_base), ((1u << (uint(1u))) >> (uint(1u))))) >> uvec2(0u, 0u)))) >> 0u)) | (((uint(((uvec2((workgroup_base), ((1u << (uint(1u))) >> (uint(1u))))) >> uvec2(0u, 0u)))) >> 0u)))) : (bitfieldInsert(workgroup_id, num_workgroup, 74483, - 18423)), true ? (((((uint(((uvec2((workgroup_base), ((1u << (uint(1u))) >> (uint(1u))))) >> uvec2(0u, 0u)))) >> 0u)) | (((uint(((uvec2((workgroup_base), ((1u << (uint(1u))) >> (uint(1u))))) >> uvec2(0u, 0u)))) >> 0u)))) : (bitfieldInsert(workgroup_id, num_workgroup, 74483, - 18423))))))), (1u ^ 0u))) >> uvec2(0u, 0u))))), (0u | 0u))))))) ^ uint((max((injectionSwitch.x), (injectionSwitch.x))))) + ((subgroup_id * subgroup_size) - 0u) + ((subgroup_local_id + 1) % subgroup_size);
 if((false))
  return;
 if((false))
  return;
 (((((~ (((~ (true ? (((((true ? ~ (~ (((((buf[virtual_gid] = 1) / 1u)) / 1u))) : (num_workgroup))))) * 1u) : (atomicOr(workgroup_base, 187585u)))) - 0u)))))) - ((0u) | (0u)));
 if(subgroup_local_id + 1 < subgroup_size)
  {
   atomicStore(buf[(1u * (((next_virtual_gid) + 0u)))], (((false ? (workgroup_base) : ((0u + (((true ? ((0u ^ (((clamp((max(uint(2), uint((0 | (2))))), (max(uint(2), uint(2))), (max(uint(2), uint(2)))))) ^ 0u))) : ((((true ? (num_workgroup) : (num_workgroup)))) << 0u)))))) >> 0u))), 4, (max(64, 64)), 0);
   if((((injectionSwitch.x > (min((min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))))
    return;
   subgroupAll(false);
   if(((((false || (injectionSwitch.x > injectionSwitch.y))))))
    return;
  }
 else
  {
   atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 0);
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   subgroupAll(true);
   if((false))
    return;
   if((((false) && true)))
    return;
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
