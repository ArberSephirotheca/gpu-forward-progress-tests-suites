#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 uint subgroup_id = gl_SubgroupID;
 if((bool(bool((bool(bvec2((false || (((((! (! (((injectionSwitch.x > (vec2((transpose(transpose(mat3x4(injectionSwitch, 0.0, 1.0, 1.0, 1.0, 1.0, log(1.0), 1.0, 0.0, 0.0, 1.0)))))).y))))))) || (((bool((bvec3(bvec4(bvec3(false, false, false), true))))) || false))))), false)))))))
  return;
 uint subgroup_size = gl_SubgroupSize;
 if((false))
  return;
 if((false))
  {
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if((false))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 if((false))
  return;
 if((false))
  {
   if((false))
    return;
   return;
  }
 if((false))
  {
   if((true && ((false))))
    return;
   return;
  }
 if((false))
  return;
 if((false))
  return;
 if((false))
  return;
 uint workgroup_size = ((gl_WorkGroupSize) >> uvec3(0u, 0u, 0u)).x;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    return;
   if((false))
    {
     if((false))
      {
       if((false || ((true && ((false))))))
        return;
       return;
      }
     return;
     if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
      return;
    }
   return;
  }
 if((false))
  return;
 if(((true && ((true && (((((injectionSwitch.x > injectionSwitch.y))) && true)))))))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if((false))
  {
   if(((! (! ((bool(bvec3(((((bool(bvec4(bool(bvec2(false, true)), true, false, true)))) || false)), false, false))))))))
    return;
   if((false))
    return;
   if((false))
    return;
   if((((injectionSwitch.x > (min(injectionSwitch, injectionSwitch)).y))))
    {
     if((false))
      return;
     return;
    }
   return;
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 if((false))
  return;
 uint virtual_gid = ((clamp(max(((workgroup_base + (~ (~ (subgroup_id * subgroup_size))) + subgroup_local_id) >> 0u), (uint(uvec3(workgroup_base + (~ (~ ((uint(uvec2(subgroup_id, 1u))) * subgroup_size))) + subgroup_local_id, ((1u) ^ 0u), ((1u) | (uint((injectionSwitch.x)) ^ (((((((true ? true ? (0u ^ (((true ? ((min(1u, ((false ? (subgroup_local_id) : 1u))))) : (102128u))))) : (subgroup_size) : (subgroup_size)))) / 1u)))))))))), max(((workgroup_base + (~ (~ (subgroup_id * subgroup_size))) + subgroup_local_id) >> 0u), (uint(uvec3(workgroup_base + (~ (~ (subgroup_id * (~ (~ (((subgroup_size) >> 0u))))))) + subgroup_local_id, ((1u) ^ 0u), ((1u) | (uint((injectionSwitch.x)) ^ (((true ? ((true ? ((min(1u, ((false ? (subgroup_local_id) : 1u))))) : (102128u))) : (subgroup_size)))))))))), max(((workgroup_base + (~ (clamp((~ (subgroup_id * subgroup_size)), (~ (((subgroup_id) | 0u) * subgroup_size)), (~ (subgroup_id * subgroup_size))))) + subgroup_local_id) >> 0u), (uint(uvec3(workgroup_base + (~ (~ (subgroup_id * subgroup_size))) + subgroup_local_id, ((1u) ^ 0u), ((1u) | (uint((injectionSwitch.x)) ^ (((true ? ((true ? ((min(1u, ((false ? (subgroup_local_id) : 1u))))) : (102128u))) : (subgroup_size)))))))))))));
 if((false))
  {
   if((false))
    return;
   return;
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((((injectionSwitch.x > ((injectionSwitch) - vec2(0.0, 0.0)).y))))
    return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  return;
 if(((((vec2(mat3x2(injectionSwitch, 0.0, 1.0, 0.0, 1.0))).x > ((clamp(float(mat4(injectionSwitch.y, 1.0, 0.0, 0.0, 1.0, sqrt(0.0), 1.0, 1.0, 0.0, 1.0, ((((injectionSwitch.x > injectionSwitch.y)) ? (dot(vec3(35.15, - 3.1, - 24.34), vec3(67.95, 6.8, - 67.77))) : (0.0 + (1.0)))), 0.0, 0.0, exp(0.0), 0.0, 1.0)), float(mat4(injectionSwitch.y, 1.0, 0.0, 0.0, 1.0, sqrt(0.0), (clamp(1.0, 1.0, 1.0)), 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, exp(0.0), 0.0, 1.0)), (float(mat2x3(float(mat4(injectionSwitch.y, 1.0, 0.0, 0.0, 1.0, sqrt(0.0), 1.0, 1.0, 0.0, 1.0, (clamp((max(1.0, 1.0)), 1.0, 1.0)), 0.0, 0.0, exp(0.0), 0.0, 1.0)), 1.0, 0.0, 1.0, 0.0, 1.0))))))))))
  return;
 if((false))
  return;
 if((((false || ((((false || ((((((false ? (vec2(- 8.5, - 188.431)) : injectionSwitch))) + vec2(0.0, 0.0)).x > injectionSwitch.y)))) || false))))))
  return;
 if((false))
  return;
 if((false))
  return;
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((((false ? (((atomicExchange(subgroup_size, (+ 148340u)))) + 0u) : ((((((! (! (false))) ? (subgroup_id) : (subgroup_local_id + 1) % ((subgroup_size) ^ (max(0u, 0u))))) | ((uint(uvec3(((! (! (false))) ? ((max(subgroup_id, subgroup_id))) : (((((((((subgroup_local_id + 1)) >> 0u) ^ 0u)) | (((subgroup_local_id + 1)) >> 0u)))) | ((min((subgroup_local_id + 1), (subgroup_local_id + 1))))) % subgroup_size), 0u, 1u)))))))) >> (0u << (uint(2u))))));
 buf[virtual_gid] = 1;
 if((false))
  return;
 if(((((bool(bvec4(false, false, false, false)))) || false)))
  return;
 if((false))
  return;
 if((((false) || false)))
  return;
 if(subgroup_local_id + 1 < ((((0u >> (uint(8u))) ^ ((clamp(subgroup_size, subgroup_size, subgroup_size))))) + 0u))
  {
   atomicStore(buf[next_virtual_gid], uint((((min(2, 2))) >> ((false ? (- 81795) : (max((min(0, 0)), 0)))))), 4, (0 ^ (64)), ((0) - (((clamp(false ? (- 5623) : 0, false ? (- 5623) : 0, false ? (- 5623) : 0))))));
   if((false))
    return;
   subgroupAll((false || ((! (! (false))))));
   if((false))
    {
     if((false))
      {
       if((false))
        return;
       return;
      }
     return;
     if((false))
      return;
    }
  }
 else
  {
   if((((((false) && true)) || false)))
    {
     if((false))
      {
       if(((bool(bvec4(false, true, false, false)))))
        return;
       return;
       if(((true && (((injectionSwitch.x > injectionSwitch.y))))))
        return;
      }
     return;
    }
   atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 0);
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      return;
     return;
    }
   subgroupAll(true);
  }
 if((false))
  return;
 if((false))
  return;
 if((false))
  return;
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
