#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec2 GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base;
 uint subgroup_id = gl_SubgroupID;
 if((false))
  return;
 if(((false || (false))))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((false))
  return;
 uint num_workgroup = (~ (~ (gl_NumWorkGroups))).x;
 if((false))
  return;
 if((true && ((false))))
  return;
 if((false || (((((! ((bool(bool(! (injectionSwitch.x > injectionSwitch.y))))))))))))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 uint workgroup_size = (min((clamp(((gl_WorkGroupSize.x) - 0u), (((min(gl_WorkGroupSize.x, gl_WorkGroupSize.x))) | 0u), gl_WorkGroupSize.x)), (min(((gl_WorkGroupSize.x) << ((max((0u) * 1u, (0u) * 1u)))), gl_WorkGroupSize.x))));
 uint workgroup_id = gl_WorkGroupID.x;
 if((! (((! ((bool((bvec2(bvec3(bvec2((false), false), true))))))) && true))))
  {
   if(((((mix(((vec2((1.8), (float(4643)))) - vec2(0.0, 0.0)), (min(vec2((injectionSwitch)[0], ((false ? (3699.4565) : (((injectionSwitch)[((true ? (int(ivec3(1, 1, 0))) : (40094)))]) / 1.0)))), (max(vec2((injectionSwitch)[0], ((false ? (3699.4565) : (((clamp((injectionSwitch)[1], (injectionSwitch)[1], ((false ? (22.47) : (injectionSwitch)[1]))))) / 1.0)))), ((false ? (fma(injectionSwitch, injectionSwitch, injectionSwitch)) : vec2((injectionSwitch)[0], ((float(mat4x2((false ? (3699.4565) : (((injectionSwitch)[1]) / 1.0)), ((0.0) * 1.0), 0.0, 1.0, 1.0, 1.0, 1.0, 0.0))))))))))), bvec2(true, true))).x > injectionSwitch.y))))
    return;
   if((false))
    return;
   return;
  }
 if((false))
  return;
 uint workgroup_base = ((((workgroup_size)) | 0u) << 0u) * (uint((uvec3(uvec3(uvec3(((((true ? 0u ^ (((uint(uint(workgroup_id)))) - 0u) : (workgroup_size))))), 1u, 1u))))));
 GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y = workgroup_base;
 if((false))
  return;
 if((false))
  return;
 if((false))
  return;
 uint virtual_gid = ((GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y) ^ ((0u) * 1u)) + subgroup_id * subgroup_size + subgroup_local_id;
 GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.x = virtual_gid;
 if(((! (! (false)))))
  return;
 if((false))
  {
   if((true && ((false))))
    return;
   return;
  }
 if((false))
  {
   if((((((injectionSwitch.x > injectionSwitch.y))) && true)))
    {
     if((((false) && true)))
      return;
     return;
    }
   if((true && ((((! (! ((((((injectionSwitch.x > ((((false) && ((injectionSwitch.x < injectionSwitch.y))) ? (75.65) : injectionSwitch.y))) && true)))))))) || false))))
    return;
   if(((((((false ? (normalize(vec2(77.49, - 2736.7764))) : clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).x > (float(vec3(injectionSwitch.y, 0.0, 0.0)))))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if((false))
    {
     if((false))
      return;
     return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((((((((((bool(bool(bool(bvec4((false || (bool(bool((false))))), false, false, true)))))) || false)))) && true)) || false))
    {
     if((false))
      return;
     return;
     if((false))
      return;
    }
   return;
   if((((((false || (bool(bool((! ((((injectionSwitch.x > ((min((min(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch))), mat2(1.0) * (injectionSwitch)))).y)) || (! ((bool(bvec2((bool(bvec2(((false || (bool(bvec2(false, false))))), true))), true))))))))))))) || false))))
    return;
  }
 atomicStore(write_val, uint(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.x), 4, 64, 0);
 if((false))
  return;
 uint read_val = atomicLoad(write_val, 4, 64, 0);
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 buf[GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.x] = uint(subgroupAllEqual(read_val));
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
