#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((false))
  barrier();
 if((((bool(bvec2(bool((bvec2(bvec4(bvec2(((injectionSwitch.x > injectionSwitch.y)), true), true, true)))), false))))))
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
  }
 if(((false) || false))
  {
   if(((((true && ((! (! (false)))))) || false)))
    barrier();
  }
 else
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(((! (! (((! ((false || (! (((false || ((! (! ((((bool(bvec4((! ((((! (! (false || (((bool(bvec3(! (false), false, false)))))))) || ((injectionSwitch.x > injectionSwitch.y)))))), true, true, false)))) || false))))))))))))) && true)))))
    {
     if(((bool(bvec4(false, false, (((true && (true))) && true), false)))))
      barrier();
     do
      {
       if((((((((injectionSwitch.x > injectionSwitch.y)) || ((bool(bvec2(((false) || false), false)))))) && true) || false)))
        {
         for(int _injected_loop_counter = 0; (int(int(_injected_loop_counter))) != 1; _injected_loop_counter ++)
          {
           if((false))
            barrier();
          }
        }
       else
        {
         if(false)
          {
          }
         else
          {
           for(int _injected_loop_counter = (((0) | 0) & int((float(mat4(- 7.7, 1.0, (dot(vec2(1.0, tan(0.0)), vec2(1.0, length(vec4(0.0, 0.0, 0.0, 0.0))))), 0.0, sqrt(0.0), sqrt(0.0), 1.0, 1.0, 0.0, determinant(mat3(sqrt(0.0), abs(0.0), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, (dot(vec3(0.0, ((0.0) / 1.0), 1.0), vec3(0.0, 0.0, 1.0))), 0.0, 1.0, 0.0))))); (int(int(_injected_loop_counter))) < ((1 << (int(5))) >> (int(5))); _injected_loop_counter ++)
            {
             if((! (! (true))))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(((injectionSwitch.x < injectionSwitch.y)))
                {
                 barrier();
                 if((false))
                  barrier();
                 if((false))
                  {
                   if(((true && (false))))
                    barrier();
                   barrier();
                  }
                 if((false))
                  barrier();
                 for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
                  {
                   if((false))
                    {
                     if(((true && ((((true) || false)))) || false))
                      {
                       barrier();
                      }
                     else
                      {
                      }
                    }
                  }
                }
               else
                {
                 if((((((injectionSwitch) / abs(vec2(1.0, 1.0))).x > injectionSwitch.y))))
                  barrier();
                }
              }
             else
              {
              }
             if((((bool(bvec4((! (! (bool(bvec3(false, false, false))))), false, true, false))))))
              {
               if(((injectionSwitch.x < (mix(vec2((((injectionSwitch) + vec2(0.0, 0.0)))[0], (3.5)), vec2((- 32.90), (((injectionSwitch) + vec2(0.0, 0.0)))[1]), bvec2(false, true))).y)))
                {
                 if((false))
                  barrier();
                 if(((((float(mat2x4((min(injectionSwitch.x, injectionSwitch.x)), 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0))) > (vec2(mat3x4(((injectionSwitch) - vec2(0.0, 0.0)), determinant(mat3(0.0, 0.0, 0.0, 1.0, length(vec2(0.0, 0.0)), 0.0, 0.0, 1.0, 0.0)), 0.0, (injectionSwitch.x), 1.0, sqrt(1.0), 1.0, 0.0, 0.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, sqrt(1.0), 1.0, 0.0, 1.0)), 0.0))).y))))
                  barrier();
                }
               else
                {
                 if((false))
                  barrier();
                }
               barrier();
              }
             if((false))
              barrier();
            }
          }
         if(((((max(((injectionSwitch) + (min(vec2(((mix(float(((false ? (185.877) : 1.0))), float((- 668.970)), bool(false))) * (0.0)), 0.0), vec2((1.0 * (0.0)), 0.0)))), injectionSwitch)).x > ((injectionSwitch.y) / 1.0)))))
          {
           if((((((! (! (((false || (((injectionSwitch.x > injectionSwitch.y) && true)))))))))) || false))
            barrier();
           barrier();
          }
        }
       if((false))
        barrier();
      }
     while(false);
     if((false))
      barrier();
     if(((((true && (injectionSwitch.x > injectionSwitch.y))))))
      barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 if(((! (! ((((mix((mix(vec2((4095.3962), ((2.5))), vec2((vec2((injectionSwitch)[0], (injectionSwitch)[1]))[0], (min((vec2((injectionSwitch)[0], (injectionSwitch)[1]))[1], (vec2((injectionSwitch)[0], (injectionSwitch)[1]))[1]))), bvec2(((injectionSwitch.x < injectionSwitch.y)), true))), vec2((171.015), ((true ? 9922.9661 : - 1.3))), (bvec2(((bvec2(bvec2(bvec2(bvec4(bvec2(bvec2(false, ((injectionSwitch.x > injectionSwitch.y)))), false, true)))))))))).x > injectionSwitch.y)))))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(((false || (false))))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if((bool(bool(false))))
  {
  }
 else
  {
   if((false))
    {
     if(((((bool(bvec2(((((injectionSwitch.x > injectionSwitch.y))) && true), ((injectionSwitch.x > injectionSwitch.y))))) || false))))
      barrier();
     if((false || ((false))))
      barrier();
     barrier();
     if((false))
      barrier();
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 if((false))
  barrier();
 if((((injectionSwitch.x > (0.0 + (injectionSwitch.y))))))
  barrier();
 if((((((((((bool(bvec3(((false || (false))), true, false))) || false))) || false)) && true)) || ((injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
    {
     barrier();
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(((! (((! (! (! ((((bool(bvec4(! ((bool(bvec4(((! (false)) && true), true, true, false)))), ((injectionSwitch.x > injectionSwitch.y)), false, false)))) && true))))))))))
  {
   if(((bool((bvec3((bvec3(bvec4(bvec3(bvec3(((injectionSwitch.x > injectionSwitch.y)), ((injectionSwitch.x < injectionSwitch.y)), true)), false)))))))))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   do
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   while(((((true && (true && (((injectionSwitch.x > injectionSwitch.y) || false))))))));
   if((! (! ((! (! ((false))))))))
    barrier();
   if(((! (! ((injectionSwitch.x < injectionSwitch.y))))))
    {
     if((false))
      barrier();
     if((false))
      {
       if((false))
        {
         if((! ((bool(bvec4((false || (! ((((injectionSwitch.x > injectionSwitch.y)) || ((false)))))), true, false, true))))))
          barrier();
         barrier();
        }
       for(int _injected_loop_counter = 0; _injected_loop_counter != ((((((- 88481 & 0) | ((((0 ^ 0) + (int(ivec2((1 << ((min(int(4), int(4))))) >> (int(4)), 0))))))) - 0)) | 0)); _injected_loop_counter ++)
        {
         barrier();
        }
      }
    }
   else
    {
    }
  }
 if((false))
  {
   if(false)
    {
     if(((((min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     if(((false || (bool(bool((false)))))))
      barrier();
    }
   if((false))
    {
     if((false))
      barrier();
     for(int _injected_loop_counter = ((int(int((- 18314 - 53746)))) & 0); _injected_loop_counter != ((((1 << (int(3))) | (1 << (int(3))))) >> (((int(3)) + (clamp(0, 0, 0))))); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   barrier();
  }
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 if((false))
  barrier();
 uint virtual_gid = ((((~ (~ (min((min(workgroup_base + subgroup_id * subgroup_size, ((workgroup_base) - uint((injectionSwitch.x))) + subgroup_id * subgroup_size)) + subgroup_local_id, workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)))))) << 0u);
 if(true)
  {
   if((((((injectionSwitch.x > (((max(false ? (- 4.7) : ((false ? (normalize(- 62.25)) : injectionSwitch.y)), false ? (- 4.7) : ((false ? (normalize(- 62.25)) : injectionSwitch.y)))))))) && (! (bool((bvec3(bvec4(bvec3((! (((! ((bool(bvec2((! (((((mix(float((vec4(3.9, - 3178.0187, - 5.8, - 90.32).t)), float(min(injectionSwitch.x, injectionSwitch.x)), bool(true)))) < injectionSwitch.y)))), true))))) || false))), true, true), false))))))))))
    {
     if((false))
      barrier();
     barrier();
    }
  }
 else
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if((((false)) && true))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  {
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((bool((true && (bool(((bool(bvec3(bool(bvec4(((((true && ((true))) || false)) || false), false, true, ((((((((injectionSwitch.x > injectionSwitch.y)) || (true && (((((((true ? (mat2(1.0) * (((max((mix(vec2((mat2(1.0) * (clamp((vec2(1.0, 1.0) * ((injectionSwitch))), (injectionSwitch), (injectionSwitch))))[0], (96.32)), vec2((- 185.945), (clamp((mat2(1.0) * (injectionSwitch))[1], (mat2(1.0) * (injectionSwitch))[1], (mat2(1.0) * (injectionSwitch))[1]))), bvec2(false, true))), mat2(1.0) * (injectionSwitch)))))) : (vec2(- 1980.8100, - 131.574)))).x > (((mix(vec2((injectionSwitch)[0], (36.31)), vec2((- 7566.6310), (injectionSwitch)[1]), bvec2((bool(bool(false))), true)))) + vec2(0.0, (clamp(0.0, 0.0, 0.0)))).y))) && true)))) && true)) || false))))), false, false))))))))))
    {
     if((false))
      barrier();
     if((((! (! ((((injectionSwitch.x > injectionSwitch.y)) && true)))))))
      {
       if((false))
        barrier();
       barrier();
      }
     if(true)
      {
       do
        {
         barrier();
        }
       while(((false) || ((injectionSwitch.x > injectionSwitch.y))));
      }
     else
      {
      }
    }
   else
    {
     if((false))
      barrier();
     for(int _injected_loop_counter = ((max(((true ? 0 : (((max(- 76731, - 89648))) | ((max(- 76731, - 89648)))))), 0)) >> (int(1))); _injected_loop_counter != ((1 << (int(3))) >> ((((0 ^ (int(3)))) | (int(3))))); _injected_loop_counter ++)
      {
       if((false))
        barrier();
      }
    }
  }
 if(((! (! (false)))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y)) || ((false))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 atomicStore(write_val, uint(virtual_gid), ((min(0 | (4), 0 | (4)))), 64, (min(0, ((0) << 0))));
 uint read_val = atomicLoad(write_val, 4, 64, 0);
 do
  {
   do
    {
     if((bool((bvec3(bvec3((bvec3(bvec3(bvec3((((injectionSwitch.x > injectionSwitch.y))), false, true))))))))))
      barrier();
     do
      {
       if(((bool((bvec2(bvec3(bvec2((injectionSwitch.x < injectionSwitch.y), true), true)))))))
        {
         do
          {
           if(((((max(((injectionSwitch.x) / 1.0), injectionSwitch.x)) > ((clamp(float(mat4((mix(float(((false ? (min(- 9.1, - 9.1)) : - 8.0))), float(injectionSwitch.y), bool(true))), 1.0, 1.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, 1.0, 1.0, cos(0.0), 0.0, 1.0, 1.0, 1.0, 0.0, sqrt(0.0))), float(mat4((mix(float(((false ? (min(- 9.1, - 9.1)) : - 8.0))), float(injectionSwitch.y), bool(true))), 1.0, 1.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, 1.0, 1.0, cos(0.0), 0.0, 1.0, 1.0, 1.0, 0.0, sqrt(0.0))), float(mat4((mix(float(((false ? (min(- 9.1, - 9.1)) : - 8.0))), float(injectionSwitch.y), bool(true))), 1.0, 1.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, 1.0, 1.0, cos(0.0), 0.0, 1.0, 1.0, 1.0, 0.0, sqrt(0.0))))))))))
            {
             if((((injectionSwitch.x > (min(injectionSwitch, injectionSwitch)).y))))
              {
               if((false))
                barrier();
               if(false)
                {
                }
               else
                {
                 barrier();
                }
              }
             if((false))
              barrier();
             barrier();
             if((false))
              barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            barrier();
           buf[virtual_gid] = (((1u * (0u ^ ((((((((uint(subgroupAllEqual(read_val))) | 0u)) | 0u)) * uint((injectionSwitch.y)))) << (0u >> (uint(0u))))))));
           if((false))
            barrier();
          }
         while(false);
        }
       else
        {
         if((false))
          barrier();
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
         if((((injectionSwitch.x > (min(injectionSwitch, injectionSwitch)).y))))
          barrier();
         if((false))
          barrier();
         if((false))
          barrier();
        }
       if((false))
        barrier();
       if((false))
        barrier();
      }
     while((((((min(injectionSwitch.x, injectionSwitch.x)) > (float(mat4(injectionSwitch.y, 0.0, 0.0, tan(0.0), 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, log(1.0), (((dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0))) / 1.0)), 1.0, 0.0, log(1.0), 1.0)))))) && true));
     if((false))
      barrier();
     for(int _injected_loop_counter = 1; (! ((! (! (! ((false || (_injected_loop_counter > (clamp(0, 0, 0)))))))))); _injected_loop_counter --)
      {
       if((false))
        {
         if(true)
          {
           barrier();
          }
         else
          {
           if((false))
            barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
    }
   while(((! (! (bool(bool(((((mix(float((float(false))), float((clamp(min(((true ? injectionSwitch.x : (- 178.965))), injectionSwitch.x), min(((true ? injectionSwitch.x : (- 178.965))), injectionSwitch.x), (min(min(((true ? injectionSwitch.x : (- 178.965))), injectionSwitch.x), min(((true ? injectionSwitch.x : (- 178.965))), injectionSwitch.x)))))), bool(((injectionSwitch.x < injectionSwitch.y)))))) > injectionSwitch.y)))))))));
  }
 while(false);
 if((false))
  {
   if(false)
    {
    }
   else
    {
     barrier();
    }
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
