#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((false))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if((false))
  barrier();
 if((false || ((((false) || false)))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if(((bool(bvec4(false, true, false, ((false) && true))))))
  barrier();
 if((false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((false))
  barrier();
 if((false))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 if((((((false) || false))) || false))
  barrier();
 if((((((false || (bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)))))))))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(((((true && (((bool(bvec2(((bool(bvec4(false, ((injectionSwitch.x < injectionSwitch.y)), true, false)))), false)))) || false))) && true)))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if((false))
    barrier();
  }
 if(((bool((bvec3(bvec4(bvec3(false, true, false), true)))))))
  barrier();
 if((((((injectionSwitch.x > injectionSwitch.y)) || ((((injectionSwitch.x > injectionSwitch.y)) || false))))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     barrier();
    }
   barrier();
  }
 if((false))
  barrier();
 if((((false)) || false))
  barrier();
 if((false))
  {
   if(((((bool(bvec2((bool(((bool(((bool(bvec2(((((! (! ((((min((min(injectionSwitch.x, ((false ? (- 9.8) : injectionSwitch.x)))), (max(injectionSwitch, injectionSwitch)).x)) > injectionSwitch.y) && true))))))), false)))) && true)) || false))), false))))) && true))
    barrier();
   if((false))
    {
     if((false))
      {
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
       barrier();
       if((((((injectionSwitch.x > injectionSwitch.y) && true)))))
        barrier();
      }
     if(((true && (((injectionSwitch.x > injectionSwitch.y))))))
      barrier();
     barrier();
    }
   return;
  }
 if((((! ((true && (! ((true && ((false)))))))) || false)))
  {
   if((false))
    barrier();
   barrier();
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if((false))
  barrier();
 uint workgroup_id = (min(((gl_WorkGroupID.x) ^ 0u), ((max((((((false ? (num_workgroup) : ((((uvec3(0u, 0u, 0u) | uvec3(0u, 0u, 0u)) + (gl_WorkGroupID)).x) * 1u)))) << uint((injectionSwitch.x)))), ((0u ^ 0u) + ((gl_WorkGroupID.x))))) ^ 0u)));
 if((false))
  barrier();
 if((false || ((false))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((! (true && ((! ((! (! (((! (! (((bool(bvec2((false), false))) || false))))))))))))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(((! (! (false)))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if((((false) || false)))
    barrier();
   if((true && (((((max((min(injectionSwitch, injectionSwitch)).x, (min(injectionSwitch, injectionSwitch)).x)) > injectionSwitch.y))))))
    {
     if(((! (((! (((injectionSwitch.x > injectionSwitch.y))))) || false))))
      barrier();
     barrier();
    }
  }
 if(((false || ((! (! ((! (! (false || (! (! (((((((injectionSwitch.x > (((bool(bvec4(false, true, true, false))) ? (float(true)) : injectionSwitch.y)))) && ((injectionSwitch.x < injectionSwitch.y)))))))))))))))))))
  {
   if(((((! (! (injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
  }
 uint workgroup_base = (((((~ (~ (((workgroup_size * workgroup_id)))))) | 0u) >> 0u) | (((((((workgroup_size)) + uint((injectionSwitch.x)))) | ((workgroup_size))) | 0u) * workgroup_id));
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 uint virtual_gid = workgroup_base + (min(((subgroup_id) | (subgroup_id)), (min(subgroup_id, subgroup_id)))) * subgroup_size + (((((max(subgroup_local_id, subgroup_local_id)))) | (((max(subgroup_local_id, (min(subgroup_local_id, subgroup_local_id))))))) - (max(((0u) << (uint((injectionSwitch.x)) | (0u))), ((0u) << 0u))));
 if((false))
  barrier();
 if(((((bool((bvec2(bvec2(((bvec2(bvec3(bvec2(bvec2(bvec2(((((injectionSwitch.x > injectionSwitch.y))) && true), ((injectionSwitch.x < injectionSwitch.y))))), true))))))))))) || false))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((false))
  {
   if((((false || ((injectionSwitch.x > (vec2(1.0, 1.0) * (mix(vec2((- 6611.9741), (((min(injectionSwitch, injectionSwitch))))[1]), vec2((((min(injectionSwitch, injectionSwitch))))[0], (6.2)), bvec2(true, false)))).y))))))
    barrier();
   if((false))
    barrier();
   if(((! (! (false)))))
    {
     if((false))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if((false))
    barrier();
   if((false))
    barrier();
   barrier();
  }
 atomicStore(write_val, uint((max(virtual_gid, virtual_gid))), 4, ((((true) && true) ? 64 : ((0 + (38350))))), 0);
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  {
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   barrier();
  }
 if((false))
  barrier();
 if(((((((! (! (true && (((((mix(float(injectionSwitch.x), float((- 4.0)), bool(false))) > injectionSwitch.y)) || false) || false))))))))))
  {
   if((false))
    barrier();
   barrier();
  }
 uint read_val = atomicLoad((~ (~ (((0u ^ (((((~ (((~ (((write_val) * 1u))) << (0u << (uint(2u)))))) * ((uint(uvec2((((max(uint(((vec2(mat4x3(injectionSwitch, tan(0.0), 1.0, 1.0, 1.0, 1.0, 1.0, determinant(mat2(1.0, 1.0, 0.0, 1.0)), 0.0, 0.0, log(1.0)))).y)) & 1u, uint(((vec2(mat4x3(injectionSwitch, tan((clamp(0.0, 0.0, 0.0))), 1.0, 1.0, 1.0, 1.0, 1.0, determinant(mat2(1.0, 1.0, 0.0, 1.0)), 0.0, 0.0, log(1.0)))).y)) & 1u))) | (uint(((vec2(mat4x3(injectionSwitch, tan(0.0), 1.0, 1.0, 1.0, 1.0, 1.0, determinant(mat2(1.0, (max(1.0, 1.0)), 0.0, 1.0)), 0.0, 0.0, log(1.0)))).y)) & 1u)), 0u)))))) >> (0u << (uint(3u)))))))))), ((4) >> (((clamp(((false ? (((((sign(45319)) | (sign(((((int(int(((int(ivec4(45319, 1, 0, 1))) | 0))))) / 1))))))) * 1) : ((0 ^ ((clamp((0) | (0), (0) | (0), (0) | (0)))))))), 0, (((max(0, 0))) / ((int((injectionSwitch.y)) << (int(2))) >> (int(2))))))) | 0)), 64, ((0) | 0));
 buf[virtual_gid] = uint(subgroupAllEqual((max((uint(uint(((((((false ? (write_val) : (~ (~ ((~ (~ (read_val)))))))) * ((1u << (uint(7u))) >> (uint(7u)))))) | (((((false ? (write_val) : (~ (((clamp((~ ((~ (((~ (read_val)) - 0u))))), (~ (((clamp(~ (((~ (read_val)) - 0u)), ~ (((~ (read_val)) - 0u)), ~ (((~ (read_val)) - 0u))))))), (~ ((~ (((~ (read_val)) - 0u)))))))) | ((clamp((~ ((~ (((~ (read_val)) - 0u))))), (~ (((clamp(~ (((~ (read_val)) - 0u)), ~ (((~ (read_val)) - 0u)), ~ (((~ (read_val)) - 0u))))))), (~ ((~ (((~ (read_val)) - 0u)))))))))))) ^ 0u))))))), ((false ? (write_val) : (~ ((clamp(((false ? (subgroup_id) : ~ (((~ (((~ ((((read_val)) >> 0u))) | (~ ((((read_val)) >> 0u)))))) - 0u)))), ((~ (((~ (((~ ((((read_val)) >> 0u))) | (~ ((((read_val)) >> 0u)))))) - 0u))) | (~ (((~ (((~ ((((read_val)) >> 0u))) | (~ ((((read_val)) >> 0u)))))) - 0u)))), ~ (((~ (((~ ((((read_val)) >> 0u))) | (~ ((((read_val)) >> 0u)))))) - 0u))))))))))));
 if(((false || (false))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((false) || false)))
    barrier();
   if((false))
    {
     if(((false || (((injectionSwitch.x > injectionSwitch.y))))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(((! (true && ((((! ((((float(mat3x2((vec2(injectionSwitch[0], injectionSwitch[1])).x, 1.0, 1.0, ((false ? (((- 0.5) - determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, log(1.0), 0.0)))) : 1.0)), 1.0, round(length(normalize(1.0)))))) > injectionSwitch.y)))) || false)))))))
          barrier();
         barrier();
         if((((false) || false)))
          barrier();
        }
       barrier();
       if((false))
        barrier();
      }
     barrier();
     if((! (! ((false)))))
      barrier();
     if((false))
      barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     barrier();
    }
   barrier();
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
 if((bool((bvec3(bvec3(bvec3((((injectionSwitch.x > injectionSwitch.y))), true, false)))))))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   if((((false) && true)))
    barrier();
   barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     barrier();
    }
   barrier();
  }
 if((((! (! ((injectionSwitch.x > injectionSwitch.y)))))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((false))
  barrier();
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
