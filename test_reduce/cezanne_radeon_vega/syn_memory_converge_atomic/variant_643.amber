#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 uint num_workgroup = (~ (((~ ((((max((0u ^ (((false ? (write_val) : ((gl_NumWorkGroups) - (((((uvec3((uint(uint(0u))), 0u, 0u) >> ((((false ? (uvec3(143864u, 25038u, 79359u)) : uvec3((((uvec3(0u, (clamp(0u, ((0u) | (0u)), (~ (~ (0u))))), 0u) ^ (false ? (min((uvec3(192345u, 186771u, 150385u)), (((uvec3(192345u, 186771u, 150385u))) / uvec3(1u, 1u, 1u)))) : uvec3(uvec3(5u)))))))))))) >> uvec3(0u, 0u, 0u))) - uvec3(0u, 0u, 0u)))).x)))), ((((((uvec3(0u, 0u, ((0u) + 0u)) + ((true ? ((gl_NumWorkGroups)) : ((uvec3(2657u, 127747u, 145018u) * subgroup_local_id)))))) / uvec3(1u, 1u, 1u)) - (uvec3((0u | (0u)), ((true ? 0u : (subgroup_local_id))), 0u) >> (uvec3(5u))))) ^ uvec3(0u, 0u, 0u)).x))) >> 0u))) / 1u)));
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = ((((workgroup_size * workgroup_id) << 0u)) | (0u >> (uint(3u))));
 uint virtual_gid = workgroup_base + subgroup_id * (min(subgroup_size, subgroup_size)) + (max((((((~ (~ ((min(uint((clamp(uvec4((subgroup_local_id), 0u, 1u, 1u), uvec4((subgroup_local_id), 0u, 1u, 1u), uvec4((subgroup_local_id), 0u, 1u, 1u)))), uint((clamp(uvec4((subgroup_local_id), 0u, 1u, 1u), uvec4((subgroup_local_id), 0u, 1u, 1u), uvec4((subgroup_local_id), 0u, 1u, 1u))))))))))) | ((subgroup_local_id))) - 0u), subgroup_local_id));
 atomicStore(write_val, uint(virtual_gid), 4, 64, ((((0) - 0)) ^ 0));
 if((false))
  return;
 uint read_val = atomicLoad(write_val, (0 | (4)), 64, (((int(ivec3(0, 0, 1)))) >> 0));
 buf[virtual_gid] = uint(subgroupAllEqual(read_val));
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
