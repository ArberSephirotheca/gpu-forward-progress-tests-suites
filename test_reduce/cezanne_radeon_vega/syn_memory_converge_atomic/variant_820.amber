#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if((((injectionSwitch.x > ((((injectionSwitch.x > injectionSwitch.y)) ? (vec2(- 1.8, - 1.0)) : ((injectionSwitch) / vec2(1.0, 1.0)))).y))))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   barrier();
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 if((bool((bvec3(bvec3(bvec3((false), true, true)))))))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if((false))
  barrier();
 if((false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 if((((((true ? injectionSwitch.x : (92.01))) > (min(injectionSwitch.y, injectionSwitch.y))))))
  barrier();
 uint workgroup_size = ((uvec3(0u, 0u, 0u) ^ (((((min(gl_WorkGroupSize, gl_WorkGroupSize))) / uvec3(1u, 1u, 1u))))) ^ (uvec3(0u, 0u, 0u) | (uvec3(0u, 0u, 0u)))).x;
 uint workgroup_id = (0u ^ (gl_WorkGroupID.x));
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_base = ((workgroup_size) | 0u) * ((0u | (((((mix(((((false ? (reflect(- 68.61, - 858.667)) : float((max(injectionSwitch.x, (0.0 + (injectionSwitch.x)))))))) * exp(tan(0.0))), float(((- vec2(- 90.73, (mix(float(- 2.1), float((4.1)), bool(((injectionSwitch.x > injectionSwitch.y)))))).r))), bool(false))) < injectionSwitch.y)) ? (((uint(uvec4(workgroup_id, 1u, 0u, 1u))))) : (12738u)))) / 1u);
 if(((true && ((false || (! ((! (! ((((((! (! (((true && (bool(bvec2(! (((((injectionSwitch.x < injectionSwitch.y)) && (false)))), false)))))))) || false))))))) && ((injectionSwitch.x < injectionSwitch.y)))))))))
  {
   if((false))
    barrier();
   barrier();
  }
 uint virtual_gid = workgroup_base + (max((((((((false ? (subgroup_id) : (~ (~ (((0u >> (0u ^ ((uint(uvec2((uint(1u)), 0u)))))) | ((((((min((min(((max((((0u) ^ 0u) ^ 0u), ((min(0u + ((0u) ^ 0u), 0u + ((0u) ^ 0u))))))), ((0u) ^ 0u))), (~ ((0u + (~ (0u)))))))) * uint((injectionSwitch.y))))) >> 0u)) ^ (subgroup_id))))))))) / 1u) - (((1u ^ 1u)) - 0u)), subgroup_id)) * subgroup_size + ((((1u * (min(subgroup_local_id, subgroup_local_id)))) - 0u));
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 atomicStore(write_val, (~ (~ (uint(((((virtual_gid) >> 0u)) - 0u))))), (((0 + (((4)) + (- 29094 & 0)))) | ((0 + (4)))), 64, 0);
 if((false))
  barrier();
 if((((! (((false || ((false || ((true && (false)) || ((bool(bvec4(((! ((bool(bool(((((vec2(((injectionSwitch[0]) / determinant(mat2(1.0, 0.0, 0.0, 1.0))), (max(injectionSwitch[1], injectionSwitch[1])))).x > injectionSwitch.y)) && ((((bool(bool((injectionSwitch.x < injectionSwitch.y)))) && true))))))))) || false), true, true, true))))))))))))))
  barrier();
 if((false))
  barrier();
 uint read_val = atomicLoad(write_val, (int(int((((~ (~ (4)))) | ((clamp(4, 4, 4))))))), 64, 0);
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 (((~ (~ (buf[virtual_gid] = ((true ? (0u ^ (uint(subgroupAllEqual(read_val)))) : (((subgroup_local_id) | ((max(subgroup_local_id, subgroup_local_id))))))))))) << (max(0u, 0u)));
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if((((((((injectionSwitch.x > (vec2(((injectionSwitch[0]) / 1.0), injectionSwitch[1])).y) || false))))) && true))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
   if((false))
    barrier();
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
