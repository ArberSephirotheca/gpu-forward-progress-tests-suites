#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(((true && (((injectionSwitch.x > injectionSwitch.y))))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((! (! ((false)))))
  barrier();
 uvec3 GLF_merged3_0_1_11_1_1_17_2_1_12subgroup_idsubgroup_local_idworkgroup_id;
 uvec3 GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_base;
 if((false))
  barrier();
 if(((false || (((false)) && true))))
  barrier();
 if((false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if((((! (! (bool((bvec3(bvec4(bvec3((! (! ((! (! (false)))))), false, true), false))))))))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   if(((false || ((false || (false))))))
    barrier();
   if(((! (! (false)))))
    barrier();
   if(((((((clamp(((max(mat2(1.0) * (((injectionSwitch) / vec2(1.0, 1.0))), mat2(1.0) * (((injectionSwitch)) * mat2(1.0))))).x, (mix(float(((max(mat2(((((true ? 1.0 : (3301.2553)))) / sqrt(1.0))) * (injectionSwitch), mat2(1.0) * (((injectionSwitch)) * mat2(1.0))))).x), float(((mix(float(float(mat2x4((- 666.099), abs(length(vec4(0.0, 0.0, 0.0, 0.0))), 1.0, 1.0, 0.0, 0.0, 0.0, 0.0))), float((6805.8437)), bool(false))))), bool(false))), ((max(vec2((mat3x4((mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat4((mat3x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat3x4((((clamp(((max(mat2(1.0) * (injectionSwitch), mat2(1.0) * (((injectionSwitch)) * mat2(1.0))))), ((max(mat2(1.0) * (injectionSwitch), mat2(1.0) * (((injectionSwitch)) * mat2(1.0))))), ((max(mat2(1.0) * (injectionSwitch), mat2(1.0) * (((injectionSwitch)) * mat2(1.0)))))))) * vec2(1.0, 1.0)), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0))))))))), vec2((mat3x4((mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat4((mat3x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat3x4((((clamp(((max(mat2(1.0) * (injectionSwitch), mat2(1.0) * (((injectionSwitch)) * mat2(1.0))))), ((max(mat2(1.0) * (injectionSwitch), mat2(1.0) * (((injectionSwitch)) * mat2(1.0))))), ((max(mat2(1.0) * (injectionSwitch), mat2(1.0) * (((injectionSwitch)) * mat2(1.0)))))))) * vec2(1.0, 1.0)), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0)))))))))))).x)) > injectionSwitch.y) && true)))))
    barrier();
   if(((((bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)))))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 GLF_merged3_0_1_11_1_1_17_2_1_12subgroup_idsubgroup_local_idworkgroup_id.x = subgroup_id;
 uint subgroup_size = gl_SubgroupSize;
 if((false))
  barrier();
 if((((bool(bool(bool(bvec2(bool(bvec4((false || ((((injectionSwitch.x > injectionSwitch.y))))), true, false, false)), false))))))))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  {
   if(((bool((bvec3(bvec4((bvec3(bvec3(bvec3(false, false, ((injectionSwitch.x > injectionSwitch.y)))))), false)))))))
    barrier();
   barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(((bool((bvec3(bvec4(bvec3(false, false, ((bool((bvec3(bvec3(bvec3((injectionSwitch.x > injectionSwitch.y), false, false)))))))), true)))))))
  barrier();
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 GLF_merged3_0_1_11_1_1_17_2_1_12subgroup_idsubgroup_local_idworkgroup_id.y = subgroup_local_id;
 if((((false) && true)))
  barrier();
 GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_base.y = (((~ ((~ (~ (~ (GLF_merged3_0_1_11_1_1_17_2_1_12subgroup_idsubgroup_local_idworkgroup_id.y))))))) | (GLF_merged3_0_1_11_1_1_17_2_1_12subgroup_idsubgroup_local_idworkgroup_id.y));
 if((false))
  {
   if((! (! ((false)))))
    barrier();
   barrier();
  }
 if((false))
  {
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(((((((bool(bvec3(bool(bvec2((injectionSwitch.x > injectionSwitch.y), true)), false, true)))) || false)))))
      barrier();
     if((false))
      barrier();
     barrier();
    }
   barrier();
   if((((injectionSwitch.x > (float(((vec3(((true ? injectionSwitch.y : (- 6.6))), 1.0, 1.0)) + vec3(0.0, 0.0, 0.0))))))))
    barrier();
  }
 if((false))
  barrier();
 if((false))
  barrier();
 uint num_workgroup = ((~ (~ ((0u << (uint(3u)))))) | ((true ? ((clamp(gl_NumWorkGroups.x, ((((gl_NumWorkGroups.x) << 0u)) - 0u), (uvec3(uvec4(gl_NumWorkGroups, 1u))).x))) : (subgroup_local_id))));
 if((false))
  barrier();
 if(((false || (false))))
  barrier();
 if((false))
  barrier();
 if((((false)) || false))
  barrier();
 if(((bool(bvec3(((((((((injectionSwitch) * mat2(1.0)).x < (clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y)) && (((((clamp((mix(vec2(((786.989)), (injectionSwitch)[1]), vec2((injectionSwitch)[0], (22.10)), bvec2(true, false))), injectionSwitch, injectionSwitch)).x > (max(injectionSwitch, injectionSwitch)).y))))))) && ((((injectionSwitch.x < injectionSwitch.y))) || false)), false, false))) || false))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_base.x = num_workgroup;
 if(((false || (bool(bool((true && ((false)))))))))
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
     barrier();
    }
   barrier();
   if((false))
    barrier();
   if((false))
    barrier();
  }
 if((false))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 if((false))
  barrier();
 if(((((((! (! (bool(bool(((((((true && ((true)))) && true) || false) && ((! ((! (! ((true && (! ((bool(bvec3(((false) && true), ((injectionSwitch.x > injectionSwitch.y)), false))))))))))))))))))) || false))) || false)))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   barrier();
   if((false))
    barrier();
  }
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 if((false))
  {
   if(((true && (false))))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 GLF_merged3_0_1_11_1_1_17_2_1_12subgroup_idsubgroup_local_idworkgroup_id.z = (((max(workgroup_id, workgroup_id))) | ((clamp((1u * (workgroup_id)), ((workgroup_id) | (workgroup_id)), workgroup_id))));
 if((false))
  barrier();
 uint workgroup_base = (clamp(workgroup_size * GLF_merged3_0_1_11_1_1_17_2_1_12subgroup_idsubgroup_local_idworkgroup_id.z, ((uint(uvec2(0u | (workgroup_size * GLF_merged3_0_1_11_1_1_17_2_1_12subgroup_idsubgroup_local_idworkgroup_id.z), 0u)))), workgroup_size * GLF_merged3_0_1_11_1_1_17_2_1_12subgroup_idsubgroup_local_idworkgroup_id.z));
 GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_base.z = workgroup_base;
 if((false))
  barrier();
 if((false))
  barrier();
 if(((! (! ((bool((bvec2(bvec2(bvec2(false, false)))))))))))
  barrier();
 if((((((injectionSwitch.x > injectionSwitch.y) && true)))))
  {
   if((((injectionSwitch.x > injectionSwitch.y)) || ((false))))
    barrier();
   if((false || (((((((false || (! (! ((bool(bvec3(((! (! (((((((false))) || ((injectionSwitch.x > injectionSwitch.y))) || (bool(bvec4((true && (false)), ((injectionSwitch.x > injectionSwitch.y)), false, false))))) || false)))), true, true))))))))) && true) && true)))))
    {
     if((! (! ((false)))))
      {
       if((false))
        barrier();
       if((false))
        barrier();
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(((true && ((true && (false))))))
        barrier();
       if((((false) && true)))
        barrier();
       barrier();
      }
     if((false))
      barrier();
     barrier();
    }
  }
 uint virtual_gid = GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_base.z + ((GLF_merged3_0_1_11_1_1_17_2_1_12subgroup_idsubgroup_local_idworkgroup_id.x * subgroup_size) << 0u) + GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_base.y;
 atomicStore(write_val, uint((~ (~ (virtual_gid)))), 4, ((64) | (((clamp((((0 | ((((64) | (0 ^ (0))))))) ^ 0), (((((64) | 0))) - 0), (((64) | 0))))) | ((((64) | 0))))), ((0) - 0));
 uint read_val = atomicLoad((((min(((write_val) | ((((0u) | ((max(0u, 0u)))) | (write_val)))), write_val))) >> 0u), 4, 64, 0);
 if((false))
  {
   if(((((tan(0.0) + (injectionSwitch.x)) > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   barrier();
  }
 if((false))
  {
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 buf[virtual_gid] = uint(subgroupAllEqual(read_val));
 if((false || ((false))))
  barrier();
 if(((bool(bvec3((! (! (false))), false, false)))))
  barrier();
 if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
  barrier();
 if((((((! (! (injectionSwitch.x < injectionSwitch.y))))) && (((((((! (! (false)))) && true) || ((((true && (bool(bool(true && ((! (! (true && (((bool(bvec4(false, false, true, false)))))))))))))))))) && true)))))
  barrier();
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
