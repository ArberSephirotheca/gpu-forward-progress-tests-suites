#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((((false)) && true))
  barrier();
 if((false))
  barrier();
 if(((bool(bvec4(((injectionSwitch.x > injectionSwitch.y)), false, false, false)))))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  {
   if((false))
    {
     if((false))
      barrier();
     if((false))
      barrier();
     barrier();
     if((false))
      barrier();
    }
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if((false))
  barrier();
 if((false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if((false))
  barrier();
 if(((((bool((bvec2(bvec2(bvec2((bool(bvec4(((injectionSwitch.x > injectionSwitch.y)), false, false, true))), true)))))) || false))))
  {
   if((false))
    barrier();
   barrier();
  }
 uint subgroup_size = gl_SubgroupSize;
 if((false))
  barrier();
 if((((((injectionSwitch.x > injectionSwitch.y))) && true)))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   barrier();
   if((false))
    barrier();
   if((false))
    barrier();
  }
 if((false))
  {
   if((false))
    {
     if((false))
      barrier();
     if((false))
      barrier();
     if((false))
      barrier();
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    {
     if((((((injectionSwitch.x > injectionSwitch.y))) || false)))
      barrier();
     barrier();
     if((false))
      barrier();
    }
   if((false))
    barrier();
   barrier();
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(((! (! (false)))))
  barrier();
 if(((true && (! (! ((! ((((bool(bvec4(! (((((bool(bool((true && (false))))))) && ((((true ? injectionSwitch.x : (pow(87.23, 527.688)))) < injectionSwitch.y)))), true, true, ((injectionSwitch.x < injectionSwitch.y))))) || false))))))))))
  barrier();
 if((false))
  barrier();
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     barrier();
    }
   barrier();
  }
 if((((((bool(bvec4(bool(bool((((((max(((vec2(0.0, 0.0) + ((max(((((mat2(1.0) * (injectionSwitch)))) * mat2(1.0)), (mix(vec2((max(((injectionSwitch))[0], (clamp((clamp(((injectionSwitch))[0], ((injectionSwitch))[0], ((injectionSwitch))[0])), ((injectionSwitch))[0], ((injectionSwitch))[0])))), (2.4)), vec2((- 6140.1856), (((min(injectionSwitch, injectionSwitch))))[1]), bvec2(false, true))))) * mat2(1.0)))).x, (float(vec3((((mix(vec2(((mix(float(- 753.631), float((float(false))), bool(false)))), ((false ? (650.047) : (vec2(0.0, 0.0))[1]))), vec2((vec2(0.0, 0.0))[0], (47.01)), bvec2(((injectionSwitch.x < injectionSwitch.y)), false))) + ((max((((injectionSwitch)) * mat2(1.0)), (mix(vec2(((false ? (3.2) : ((injectionSwitch))[0])), (2.4)), vec2((- 6140.1856), ((injectionSwitch))[1]), bvec2(false, true))))) * mat2(1.0)))).x, 1.0, 1.0))))) > (mix(float((61.96)), float(injectionSwitch.y), bool(true)))) && true)) && true))), false, false, false))))))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   if((false || ((bool(bool((false)))))))
    {
     if((false))
      barrier();
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(((((((! (! ((false || ((! (! (injectionSwitch.x > ((false ? (546.278) : injectionSwitch.y)))))))))))))) || (bool(bvec4(false, true, false, true)))))
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
       if((false))
        barrier();
      }
     if((((false)) || false))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   barrier();
   if((((false || ((injectionSwitch.x > injectionSwitch.y))))))
    barrier();
   if((false))
    barrier();
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if((false))
    barrier();
  }
 if((false))
  barrier();
 if((! ((false || (! ((false)))))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   barrier();
  }
 if((((false) || false)))
  barrier();
 if((bool(bool((((((injectionSwitch.x > injectionSwitch.y)))) && true)))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((true && (((false || (false))))))
  {
   if((false))
    {
     if((false))
      barrier();
     if(((bool(bool((bool(bvec3(false, true, true))))))))
      barrier();
     if((false))
      barrier();
     barrier();
    }
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((false || ((injectionSwitch.x > ((true ? injectionSwitch : (injectionSwitch))).y))))))
    {
     if((false))
      {
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         barrier();
        }
       if((false))
        barrier();
       barrier();
       if((false))
        barrier();
      }
     if((false))
      barrier();
     if(((bool(((bvec2(bvec3((bvec2(bvec2(bvec2((bvec2((bvec2(bvec2(bvec2(bvec2(bvec2((((((vec2(mat2x4(injectionSwitch, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0))).x > injectionSwitch.y) || false))), true)))))))))))), false))))))))
      {
       if((((false)) && true))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     barrier();
     if((false))
      {
       if((false))
        barrier();
       if((false))
        barrier();
       barrier();
       if((false))
        barrier();
      }
    }
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if((! (! ((! (((! ((((((false) && true)) || false)))) || false)))))))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(((! (! (bool(bool((false))))))))
  {
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if((false))
  barrier();
 if((false))
  barrier();
 if((false || ((false))))
  {
   if(((false || (false))))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   barrier();
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if((false))
  barrier();
 if((false))
  {
   if((((true && ((false || ((bool(bool(((max(injectionSwitch, ((injectionSwitch) - vec2(0.0, 0.0)))).x > injectionSwitch.y)))))))))))
    {
     if((false))
      barrier();
     if(((bool(bvec3((false || (false)), true, true)))))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       barrier();
      }
     barrier();
    }
   if((false))
    barrier();
   barrier();
  }
 uint workgroup_base = ((~ (~ (clamp(workgroup_size * workgroup_id, (min(workgroup_size * workgroup_id, workgroup_size * workgroup_id)), workgroup_size * workgroup_id)))));
 if(((! (! (false)))))
  barrier();
 if((false))
  barrier();
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((0u + ((0u | 0u))) ^ ((clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id))));
 if((false))
  barrier();
 if((false))
  barrier();
 if((((((injectionSwitch.x > injectionSwitch.y) && ((injectionSwitch.x < injectionSwitch.y)))))))
  {
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((false))
  {
   if((false))
    {
     if((((false) || false)))
      barrier();
     if((false))
      barrier();
     if((false))
      barrier();
     barrier();
    }
   barrier();
  }
 if((false))
  barrier();
 if(((! (! ((bool(bvec4((((! ((false || (! (false)))))) || false), false, false, false))))))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
  }
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 atomicStore(write_val, ((uint(virtual_gid)) * (0u ^ 1u)), 4, 64, 0);
 if((false))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   barrier();
   if((false))
    barrier();
  }
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   barrier();
  }
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if(((bool(bool(false)))))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     barrier();
    }
   if((false))
    barrier();
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   if((((false) && true)))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   barrier();
   if((false))
    barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((((bool(bvec4(((mix(float(injectionSwitch.x), ((min(1.0, ((1.0) - 0.0))) * (float((408.282)))), (! (! ((false || (bool((bool(((bool(false)) || false))))))))))) > (max(injectionSwitch, injectionSwitch)).y), true, false, true))))))
  {
   if((false))
    barrier();
   if((((true && ((bool(bvec3((((false || ((bool(bool(false || (false))))))) && true), false, true))))))))
    {
     if(((((max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
      barrier();
     if(((! (! (false)))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(((! (((! (false)) || false)))))
      barrier();
     if((false))
      barrier();
     if((false))
      barrier();
     barrier();
     if((false))
      barrier();
    }
   if((false))
    barrier();
   barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   if((! ((((! (! (! ((((((((injectionSwitch.x > (clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))))) || false)) && true)))))) && true))))
    barrier();
   if((false))
    barrier();
   if((false))
    {
     if(((bool(bvec4((bool(bvec4((bool(bvec2(((injectionSwitch.x > injectionSwitch.y)), false))), false, false, false))), true, false, true)))))
      {
       if(((bool(bvec3(false, false, false)))))
        barrier();
       barrier();
      }
     barrier();
    }
   if((((false)) && true))
    barrier();
   if((false))
    barrier();
   if(((false || (false))))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
     barrier();
     if((false))
      barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if((false))
  barrier();
 uint read_val = atomicLoad(write_val, 4, 64, (max((~ (~ (0))), (clamp(0, 0, 0)))));
 if(((((((bool(bvec3(! (! (true && (false))), ((true) || false), false))))) || false))))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   if((bool(bool((((injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
   barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     barrier();
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   barrier();
  }
 buf[virtual_gid] = uint(subgroupAllEqual(read_val));
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((((((! (! ((injectionSwitch.x > injectionSwitch.y))))) || false))))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   if(((false || (((((injectionSwitch.x < injectionSwitch.y)) && ((((((((injectionSwitch.x > ((((injectionSwitch.y) / sqrt(1.0))) / 1.0))) && true))) || false))))) && true))))
    barrier();
   barrier();
   if((false))
    {
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 if((((injectionSwitch.x > (min(((((mix(float(mix(float((mix(float((- 505.523)), float(injectionSwitch.y), bool(true)))), float((664.011)), bool(((injectionSwitch.x > injectionSwitch.y))))), float((45.69)), bool(((injectionSwitch.x > injectionSwitch.y))))))) + 0.0), ((((mix(float(mix(float((mix(float((- 505.523)), float(injectionSwitch.y), bool(true)))), float((664.011)), bool(((injectionSwitch.x > injectionSwitch.y))))), float((45.69)), bool(((injectionSwitch.x > injectionSwitch.y))))))) + 0.0)))))))
  {
   if((false))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
