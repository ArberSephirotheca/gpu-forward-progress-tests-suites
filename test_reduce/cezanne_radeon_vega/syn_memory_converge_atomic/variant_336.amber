#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((false))
  {
   if((false))
    return;
   barrier();
  }
 if((false))
  return;
 if((false))
  {
   if((false))
    return;
   barrier();
  }
 if((((((((injectionSwitch.x) - 0.0)) + ((0.0) - 0.0)) > injectionSwitch.y))))
  {
   if((! (! ((false || ((! (! ((false))))))))))
    return;
   if((false))
    barrier();
   if((false))
    barrier();
   return;
   if((false))
    {
     if((false))
      barrier();
     if((false))
      barrier();
     if((false))
      return;
     if((false))
      barrier();
     barrier();
     if((false))
      barrier();
    }
  }
 if(((bool(bvec2((! (! (false))), false)))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 if((((false) || false)))
  barrier();
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    return;
   barrier();
  }
 if((false))
  {
   if((false))
    barrier();
   if((false))
    return;
   if((false))
    return;
   if((false))
    barrier();
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((((((((injectionSwitch.x > injectionSwitch.y)))) && true)) && true))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 if((false))
  {
   if(((((((float(vec3((((float(vec4(injectionSwitch.x, 0.0, 1.0, 1.0)))) - 0.0), determinant(mat3(0.0, cos(0.0), 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, sin(0.0))), cos(0.0)))) > injectionSwitch.y))) && true)))
    {
     if((false))
      barrier();
     barrier();
    }
   barrier();
  }
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((((injectionSwitch.x < injectionSwitch.y)) && ((false))))
  barrier();
 if((false))
  barrier();
 if((false))
  return;
 uint subgroup_size = gl_SubgroupSize;
 if((((! (! ((((injectionSwitch.x > injectionSwitch.y)) || ((false))))))) || false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(((! (! (((bool(bool(((injectionSwitch.x > injectionSwitch.y)) || (false))))))))))
  barrier();
 if((false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((false))
  barrier();
 if((false))
  {
   if((false))
    return;
   return;
   if((false))
    barrier();
  }
 if((false))
  {
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if((false))
  barrier();
 if((false))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 if((false))
  barrier();
 if((((true && ((((false)) && true)))) && true))
  return;
 if(((! (! (false)))))
  return;
 if((false))
  barrier();
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(((! (bool(bvec3((((! (false))) || false), true, false))))))
  {
   if((false))
    barrier();
   barrier();
  }
 uint workgroup_size = ((((gl_WorkGroupSize.x) >> 0u)) / 1u);
 uint workgroup_id = gl_WorkGroupID.x;
 if((false))
  barrier();
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    {
     if((false))
      barrier();
     return;
    }
   barrier();
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    {
     if(((! (! (false)))))
      return;
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((false || ((((injectionSwitch.x > injectionSwitch.y))))))
  {
   if((false))
    {
     if((false))
      {
       if((false))
        barrier();
       barrier();
       if((false))
        barrier();
      }
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((((false) || false)))
      return;
     return;
     if((false))
      barrier();
     if((((injectionSwitch.x > (mix(vec2((injectionSwitch)[0], (- 297.443)), vec2((- 129.777), (injectionSwitch)[1]), bvec2(((injectionSwitch.x > injectionSwitch.y)), true))).y))))
      return;
     if((false))
      barrier();
     if((false))
      {
       if((false))
        {
         if((false))
          barrier();
         return;
        }
       return;
      }
     if((false))
      return;
    }
   if((false))
    return;
   if((false))
    {
     if((false))
      return;
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if((false))
      return;
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        {
         if((false))
          barrier();
         return;
        }
       return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((false))
  return;
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id) | ((min(subgroup_local_id, subgroup_local_id))));
 if((false))
  {
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
     if((((false) && true)))
      barrier();
    }
   if((false))
    {
     if((! (((! ((false))) && true))))
      barrier();
     if((false))
      return;
     return;
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   return;
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    return;
   if((false))
    {
     if((false))
      {
       if((false))
        barrier();
       return;
      }
     barrier();
    }
  }
 if((false))
  barrier();
 atomicStore(write_val, ((uint(virtual_gid)) << 0u), (0 + ((int(ivec4(4, 1, 1, 1))))), 64, 0);
 if((false))
  barrier();
 if((false))
  return;
 if((false))
  {
   if((! ((! (! (! ((false))))))))
    {
     if(((! (! (false)))))
      barrier();
     if(((((! (((! (injectionSwitch.x > injectionSwitch.y)) || false)))))))
      {
       if(((! ((true && (! (false)))))))
        barrier();
       return;
      }
     if((false))
      barrier();
     if((false))
      return;
     return;
    }
   if((false))
    {
     if((((false) && true)))
      barrier();
     return;
    }
   if((false))
    {
     if((false))
      barrier();
     return;
    }
   barrier();
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((((injectionSwitch.x > ((min(vec2(mat4x2((min((((max(injectionSwitch, injectionSwitch))) + vec2(0.0, 0.0)), injectionSwitch)), 1.0, 1.0, 1.0, 1.0, tan(0.0), 0.0)), vec2(mat4x2((min((((((((((injectionSwitch.x > injectionSwitch.y)) ? (exp(injectionSwitch)) : max(injectionSwitch, injectionSwitch))))) + vec2(0.0, 0.0)) / vec2(1.0, 1.0))), injectionSwitch)), 1.0, 1.0, 1.0, 1.0, tan(0.0), 0.0))))).y))))
  return;
 if((false))
  return;
 if((false))
  barrier();
 if(((! ((! (! (! (false))))))))
  {
   if((false))
    {
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           return;
          }
         barrier();
        }
       barrier();
      }
     return;
     if((((false)) || ((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if((false))
    barrier();
   barrier();
   if((bool((bvec3(bvec3(bvec3(((! (! (((injectionSwitch.x > injectionSwitch.y)))))), ((injectionSwitch.x > injectionSwitch.y)), true)))))))
    return;
  }
 if((! (! ((false || ((false)))))))
  barrier();
 if((((injectionSwitch.x > (max((min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))))
  barrier();
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  return;
 if((false))
  barrier();
 if((false))
  return;
 if((((false) && true)))
  {
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   if(((false || ((bool(bvec2(((false) && (((bool(bvec2(true, true)))) || false)), (((min(injectionSwitch, injectionSwitch)).x < injectionSwitch.y)))))))))
    barrier();
   if((false))
    {
     if((false))
      return;
     if((false))
      barrier();
     if((false))
      return;
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(((bool((! (! (((bool(false))) && true)))))))
    return;
   return;
  }
 if((false))
  {
   if((false))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
  }
 if((false))
  barrier();
 if((false))
  return;
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   if(((! (! (false)))))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    return;
   if((false))
    return;
   barrier();
   if((false || ((false))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
  }
 if((false))
  barrier();
 if((bool(bvec4((! (((! ((bool(bvec4((false), false, (((injectionSwitch.x > (mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2((243.328), (float(52167u))), bvec2(false, false))).y)) || (true)), false))))) || false))), false, true, ((injectionSwitch.x > injectionSwitch.y))))))
  {
   if((false))
    return;
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      return;
     barrier();
    }
   if((false))
    return;
   if((false))
    return;
   if((false))
    barrier();
   barrier();
   if((false))
    return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  {
   if((false))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     return;
    }
   barrier();
  }
 if(((((mix(float(((injectionSwitch.x) + 0.0)), float((- 9646.8132)), bool(((injectionSwitch.x > injectionSwitch.y))))) > injectionSwitch.y))))
  {
   if((((((true ? injectionSwitch : (injectionSwitch))).x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    return;
   return;
   if((false))
    return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
 if((false))
  {
   if((false))
    {
     if((((false) && true)))
      barrier();
     return;
    }
   return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  return;
 if((false))
  return;
 if((! (! ((false)))))
  {
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if(((bool(bvec2((false || (false)), false)))))
    {
     if((false))
      {
       if((false))
        return;
       return;
      }
     barrier();
    }
   if((false))
    barrier();
   if((false))
    return;
   if(((false || (false))))
    return;
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    return;
   barrier();
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   if((((false) && (false || ((bool(bvec3(true, true, true))))))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    barrier();
   if((((((injectionSwitch.x > (vec2(injectionSwitch[0], injectionSwitch[1])).y))) && true)))
    return;
  }
 uint read_val = atomicLoad(write_val, 4, 64, 0);
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  {
   if((false))
    barrier();
   if(((false || (false))))
    {
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   barrier();
  }
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if((! (! ((false)))))
    {
     if((false))
      {
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     if((false))
      {
       if((false))
        barrier();
       if((((injectionSwitch.x > ((min(vec2((mat2(1.0) * (vec2(injectionSwitch)))), (mix(vec2((- 4.9), (vec2((mat2(1.0) * (vec2(injectionSwitch)))))[1]), vec2((vec2((mat2(1.0) * (vec2(injectionSwitch)))))[0], (0.8)), bvec2(true, false)))))).y))))
        return;
       if((false))
        barrier();
       if((false))
        {
         if((false))
          return;
         if((! (! ((((injectionSwitch.x > injectionSwitch.y)))))))
          barrier();
         return;
        }
       barrier();
       if(((false || (((injectionSwitch.x > injectionSwitch.y))))))
        barrier();
       if((false))
        return;
       if((false))
        return;
      }
     if((((((false ? (37.84) : ((injectionSwitch) / vec2(1.0, 1.0)).x)) > injectionSwitch.y))))
      {
       if((false))
        return;
       if((false))
        {
         if((false))
          return;
         barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       return;
       if((((injectionSwitch.x > (vec2((transpose((mat4x3(mat4x3(transpose(mat3x4((min(injectionSwitch, injectionSwitch)), 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0))))))))).y))))
        return;
       if((false))
        barrier();
      }
     if((false))
      barrier();
     if((false))
      return;
     if(((((bool(bvec2((((injectionSwitch.x > injectionSwitch.y)) || (false)) || ((injectionSwitch.x > injectionSwitch.y)), ((injectionSwitch.x < injectionSwitch.y)))))))))
      {
       if((false))
        barrier();
       barrier();
      }
     if((! (((! ((false))) || false))))
      barrier();
     return;
     if(((true && (false))))
      {
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if((((false) || ((injectionSwitch.x > injectionSwitch.y)))))
      {
       if((false))
        return;
       if((false))
        return;
       barrier();
      }
    }
   return;
   if((false))
    return;
   if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
    {
     if(((((! ((bool((bvec3(bvec4(bvec3(! ((((! (! ((true && ((bool(bvec4((true && ((true && (injectionSwitch.x > injectionSwitch.y)))), false, true, true)))))))))) || false), true, true), true)))))))))))
      barrier();
     barrier();
     if((false))
      return;
     if((false))
      return;
     if((false))
      barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    barrier();
   return;
  }
 if(((bool(bool(false)))))
  {
   if((false))
    {
     if((false))
      barrier();
     if(((! ((! (! (! (false))))))))
      return;
     return;
     if(((((bool(bvec4(false, false, false, false))) || false))))
      return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if((false))
    return;
   if((false))
    return;
   return;
   if(((! (! (false)))))
    barrier();
   if((false))
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     barrier();
    }
   if((false))
    {
     if((false))
      return;
     if((false))
      barrier();
     barrier();
    }
   if((false))
    {
     if((false))
      barrier();
     if((false))
      return;
     barrier();
    }
  }
 if((false))
  return;
 if((false))
  {
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    return;
   return;
  }
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 if(((((((((! (! (((false || ((injectionSwitch.x > ((false ? (max((mix(float((clamp((intBitsToFloat(- 68408)), ((mix(float((min((((- 0.9)) - 0.0), (- 0.9)))), float((max(intBitsToFloat(- 68408), intBitsToFloat(- 68408)))), bool(true)))), (intBitsToFloat(- 68408))))), float((((((float(((transpose(transpose(mat3(1.0)))) * (mat4x3((2.3), 1.0, 0.0, 1.0, 0.0, 0.0, ((clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y), 0.0, cos(0.0), 1.0, 0.0, 0.0))))) * 1.0)) / 1.0))), bool((false || ((((bool(bool(false))) && true))))))), (intBitsToFloat(- 68408)))) : (min((clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)).y))))))))) || false)) || false) || false)))))
  {
   if(((((max(injectionSwitch.x, ((true ? injectionSwitch.x : (9.8))))) > injectionSwitch.y))))
    {
     if((false))
      barrier();
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     barrier();
    }
   if(((((false || ((true && (false))))) && true)))
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
       if((false))
        {
         if((false))
          return;
         return;
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
       if((((((injectionSwitch.x > injectionSwitch.y)) && true))))
        return;
      }
     if((false))
      return;
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      barrier();
     return;
     if((false))
      {
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
    }
   barrier();
   if(((((((float((mat2(mat3(mat2(injectionSwitch.x, 1.0, sqrt(1.0), 1.0))))))) - 0.0) > injectionSwitch.y))))
    barrier();
  }
 if((false))
  barrier();
 if((false))
  {
   if(((bool((((injectionSwitch.x < injectionSwitch.y)) && (bool(false)))))))
    barrier();
   if((((false) && true)))
    barrier();
   barrier();
   if((false))
    barrier();
   if((false))
    return;
   if((false))
    return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(((bool(bvec3((bool(bvec4(false, false, true, false))), false, ((injectionSwitch.x > injectionSwitch.y)))))))
    {
     if((((injectionSwitch.x > ((injectionSwitch) / vec2((injectionSwitch.y), (injectionSwitch.y))).y))))
      {
       if(((bool(bvec3(false, false, true)))))
        barrier();
       return;
      }
     return;
    }
   return;
  }
 if((false))
  {
   if((false))
    return;
   barrier();
   if((false))
    barrier();
  }
 if((((((injectionSwitch) * vec2(1.0, (float(vec2((min(1.0, 1.0)), determinant(mat2(0.0, 1.0, 0.0, 0.0))))))).x > injectionSwitch.y))))
  {
   if(((((bool(bvec4((bool(bvec4(false, false, false, false))), true, true, (! (! (false)))))) || false))))
    barrier();
   return;
  }
 if(((((true && (false))) && (! (! ((bool((! ((bool(bvec2((! (! (! (bool(((bool(((bool(((vec2((((((bool(bool((bool(bvec4(true, true, false, true)))))) || false)) ? injectionSwitch[0] : (- 637.507))), injectionSwitch[1])).x < injectionSwitch.y))) || (((true && (false))) && ((injectionSwitch.x < injectionSwitch.y)))))))))))), true)))))))))))))
  {
   if((false))
    barrier();
   if((false))
    return;
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if(((false || (false))))
    {
     if((false))
      {
       if(((true && (false))))
        barrier();
       barrier();
      }
     return;
    }
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     barrier();
    }
   if(((bool(bvec2((! ((! (! (! (false)))))), (bool(bvec3(true, ((injectionSwitch.x > injectionSwitch.y)), false))))))))
    {
     if((((injectionSwitch.x < injectionSwitch.y)) && ((((injectionSwitch.x > injectionSwitch.y))))))
      barrier();
     barrier();
    }
   if((false))
    {
     if((false))
      return;
     barrier();
    }
   if((false))
    barrier();
   if((false))
    {
     if((false))
      return;
     return;
     if((((false) && true)))
      barrier();
    }
   if((false))
    return;
   if((false))
    barrier();
   if((false))
    {
     if((false))
      return;
     if((false))
      return;
     if((false))
      {
       if(((bool(bvec3(false, false, ((injectionSwitch.x < injectionSwitch.y)))))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     if((false))
      return;
     if((false))
      {
       if((false))
        barrier();
       if((false))
        barrier();
       return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         if((false))
          return;
         barrier();
         if((((((injectionSwitch.x) / 1.0) > injectionSwitch.y))))
          return;
        }
       if((false))
        barrier();
      }
     if((false))
      barrier();
     barrier();
    }
   if((false))
    return;
   if((((((true ? ((injectionSwitch.x) * 1.0) : (0.1))) > ((mat2(1.0) * ((false ? (injectionSwitch) : injectionSwitch)))).y))))
    return;
   return;
   if((false))
    return;
   if((false))
    {
     if((false))
      return;
     barrier();
    }
   if((false))
    barrier();
   if((false))
    return;
  }
 buf[virtual_gid] = uint(subgroupAllEqual(read_val));
 if((false))
  barrier();
 if((((! (! (bool(bool((! (! (((injectionSwitch.x > injectionSwitch.y)))))))))))))
  return;
 if((false))
  {
   if((((! (! ((injectionSwitch.x > injectionSwitch.y)))))))
    return;
   barrier();
  }
 if((false))
  {
   if((false))
    {
     if((false || ((false))))
      return;
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      barrier();
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((false) && true)))
        {
         if((false))
          return;
         if((false))
          barrier();
         barrier();
        }
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if((false))
      barrier();
    }
   if((false))
    barrier();
   if((false))
    {
     if((false))
      return;
     barrier();
    }
   return;
  }
 if(((! ((! (! (! (false))))))))
  barrier();
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if(((! (! ((bool(bvec2(false, true))))))))
    return;
   barrier();
   if(((true && ((bool(bool(bool((bool(bvec4(bool((false)), true, false, ((injectionSwitch.x < injectionSwitch.y)))))))))))))
    barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((((bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, ((injectionSwitch.x > injectionSwitch.y))))))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     return;
    }
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if(((! (! (false)))))
    return;
   if((false))
    return;
   if((((((true && (bool(bvec4(injectionSwitch.x > injectionSwitch.y, ((injectionSwitch.x > injectionSwitch.y)), false, true)))))))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((((false) && true)))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(((bool(bool(false)))))
      barrier();
     if((false))
      return;
    }
   if((false))
    barrier();
   if((false))
    return;
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      {
       if((false))
        barrier();
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        return;
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     if(((! (bool(bvec4((! (false)), true, false, false))))))
      {
       if((false))
        barrier();
       if((((((false ? (6.8) : injectionSwitch.x)) > ((((false ? (885.715) : injectionSwitch.y))) / 1.0)))))
        {
         if(((((((max(injectionSwitch.x, injectionSwitch.x))) - determinant(mat4(0.0, 1.0, abs(1.0), 0.0, 0.0, 0.0, 0.0, 0.0, (max(0.0, (min(0.0, 0.0)))), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, determinant(mat3(0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0))))) > injectionSwitch.y))))
          {
           if((false))
            {
             if(((! (((! (((injectionSwitch.x > injectionSwitch.y)))) || false)))))
              barrier();
             barrier();
            }
           if((false))
            return;
           barrier();
          }
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
         if((false))
          {
           if((false))
            barrier();
           return;
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(((((bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)))))))
          return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if(((((true && ((! (! (bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, true)))))))))))
        {
         if((! (! ((false)))))
          {
           if((((((injectionSwitch.x > injectionSwitch.y)) || false))))
            return;
           if((((false) && true)))
            return;
           barrier();
          }
         return;
         if((false))
          return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(((bool(bool(false)))))
          return;
        }
       if((false))
        {
         if((false))
          barrier();
         if((false))
          return;
         return;
         if((false))
          barrier();
        }
       return;
      }
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          barrier();
         barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           return;
          }
         if((((injectionSwitch.x > (clamp(injectionSwitch, ((injectionSwitch) / vec2(1.0, 1.0)), injectionSwitch)).y))))
          barrier();
        }
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    barrier();
   barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
  }
 if(((bool(bool(false)))))
  {
   if((false))
    {
     if((((false) || false)))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       return;
      }
     barrier();
    }
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   if((true && ((bool(bvec2((false), true))))))
    return;
   return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
