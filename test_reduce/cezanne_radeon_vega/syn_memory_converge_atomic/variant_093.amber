#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = (1u * ((uvec3(gl_NumWorkGroups[((0) | ((~ (~ (0)))))], (((min((uvec3(uvec3(gl_NumWorkGroups))), gl_NumWorkGroups))[1]) + 0u), (((((((0u << (uint(((8u) | 0u)))) | (max(gl_NumWorkGroups[((true ? 2 : (- 20439)))], gl_NumWorkGroups[2]))) | ((0u << (uint(8u))) | (max(gl_NumWorkGroups[2], gl_NumWorkGroups[2]))))) + 0u))))).x));
 uint workgroup_size = (((uvec3(gl_WorkGroupSize[0], gl_WorkGroupSize[1], gl_WorkGroupSize[2])).x) >> ((~ (~ ((clamp(0u, 0u, ((((0u) >> 0u)) - 0u)))))) >> (uint(7u))));
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = ((((workgroup_size) | (((workgroup_size) | (workgroup_size)))) * workgroup_id) | ((((~ ((((max((0u | (~ (0u ^ ((((((((max(((0u) / 1u), ((0u) + 0u))) | (((min((max(((~ (~ (workgroup_size))) * ((((((workgroup_id) | (workgroup_id))) | 0u)) - 0u)), ((~ (~ (workgroup_size))) * ((((((workgroup_id) | (workgroup_id))) | 0u)) - 0u)))), ((~ (~ (workgroup_size))) * ((((((workgroup_id) | (workgroup_id))) | 0u)) - 0u)))) ^ 0u))))) | 0u)) | ((((((max(((0u) / 1u), ((0u) + 0u))) | (((min((max(((~ (~ (workgroup_size))) * ((((((workgroup_id) | (workgroup_id))) | 0u)) - 0u)), ((~ (~ (workgroup_size))) * ((((((workgroup_id) | (workgroup_id))) | 0u)) - 0u)))), ((~ (~ (workgroup_size))) * ((((((workgroup_id) | (workgroup_id))) | 0u)) - 0u)))) ^ 0u))))) | 0u))))))), (0u | (~ (0u ^ ((((((max(((0u) / 1u), ((0u) + 0u))) | (((min((max(((~ (~ (workgroup_size))) * ((((((workgroup_id) | (workgroup_id))) | 0u)) - 0u)), ((~ (~ (workgroup_size))) * (((((((clamp(((workgroup_id) | (workgroup_id)), ((workgroup_id) | (workgroup_id)), ((workgroup_id) | (workgroup_id))))) | (((workgroup_id) | (workgroup_id))))) | 0u)) - (uint(uvec3(0u, 1u, 0u))))))), ((~ (~ ((uint((max(((uvec2(workgroup_size, 1u)) | uvec2(0u, 0u)), uvec2(workgroup_size, 1u)))))))) * ((((((workgroup_id) | (workgroup_id))) | 0u)) - 0u)))) ^ 0u))))) | 0u)))))))) ^ 0u)))) / ((((1u << (0u | ((uint(3u))))) >> (~ ((0u ^ (~ (((false ? (subgroup_size) : (uint(3u)))))))))) / 1u)))));
 uint virtual_gid = (max((clamp(workgroup_base, workgroup_base, workgroup_base)) + (clamp(subgroup_id * subgroup_size, subgroup_id * (min(subgroup_size, (uint((max(uint(subgroup_size), ((true ? uint(subgroup_size) : (workgroup_size))))))))), subgroup_id * (~ ((uint(uint(~ (subgroup_size)))))))) + subgroup_local_id, workgroup_base + ((false ? (subgroup_local_id) : (min((clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * (~ (~ (subgroup_size))))), (clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * (~ (~ (subgroup_size))))))))) + subgroup_local_id));
 atomicStore(write_val, uint(virtual_gid), (((((0 ^ (4))) ^ 0)) / (1 * (1))), 64, ((((0) / 1)) << 0));
 uint read_val = atomicLoad(write_val, (clamp(4, 4, ((4) / 1))), (((((~ (~ (((0) / (((min(int(int((1 << (int(0))) >> (int(0)))), (clamp(int(int((1 << (int(0))) >> (int(0)))), int(int((1 << (int(0))) >> (int(0)))), int(int((1 << (int(0))) >> (int(0)))))))))))))) ^ ((~ (((~ (((((0) / 1)) | (((0) | (0)))))) | 0))) + (((((0 ^ ((64)))) | ((64)))) << (0 >> (int(4))))))) | (((0 + (64)) ^ (0 >> (int(5))))))), 0);
 buf[virtual_gid] = uint(subgroupAllEqual((min(((read_val) + 0u), read_val))));
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
