#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
 if(false)
  {
   if((false))
    barrier();
  }
 else
  {
   if((false))
    barrier();
  }
 uvec3 GLF_merged3_0_1_17_1_1_14_2_1_12subgroup_local_idworkgroup_baseworkgroup_id;
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  {
   for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
    {
     barrier();
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 for(int _injected_loop_counter = 1; _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
  {
   if(true)
    {
     for(int _injected_loop_counter = (0 << ((clamp(int(7), int(7), int(7))))); _injected_loop_counter < (1 | 0); _injected_loop_counter ++)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = (1 ^ int((injectionSwitch.y))); _injected_loop_counter < 1; _injected_loop_counter ++)
          {
           barrier();
          }
        }
      }
    }
   else
    {
    }
  }
 if((false))
  barrier();
 if(((bool(bvec4((! (! (false))), true, true, false)))))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 uvec4 GLF_merged4_0_1_13_1_1_8_2_1_11_3_1_17num_workgroupread_valsubgroup_idsubgroup_local_id;
 do
  {
   if((false))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if((false))
      barrier();
    }
   for(int _injected_loop_counter = (0 >> (int(4))); _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
    {
     if((false))
      barrier();
     if((false))
      {
       if((false))
        {
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           barrier();
           if((false))
            barrier();
          }
         else
          {
          }
         if((false))
          barrier();
        }
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
       if((false))
        barrier();
       for(int _injected_loop_counter = ((1 << (int(0))) >> (int(0))); _injected_loop_counter != (1 ^ ((true ? 1 : (_injected_loop_counter)))); _injected_loop_counter --)
        {
         if((false))
          {
           if((false))
            barrier();
           if(true)
            {
             if((false))
              barrier();
            }
           else
            {
            }
           if(false)
            {
             if((false))
              barrier();
            }
           else
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                barrier();
               barrier();
              }
            }
           if(true)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                barrier();
               if(true)
                {
                 if(true)
                  {
                   if(true)
                    {
                     barrier();
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                   else
                    {
                    }
                   if((false))
                    barrier();
                   if((false))
                    {
                     if(false)
                      {
                      }
                     else
                      {
                       barrier();
                      }
                    }
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 else
                  {
                  }
                }
               else
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
            }
           else
            {
            }
           if((false))
            barrier();
           if(false)
            {
            }
           else
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(((injectionSwitch.x < injectionSwitch.y)))
              {
               if((false))
                {
                 if((false))
                  barrier();
                 barrier();
                }
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
              }
             else
              {
              }
            }
           if((false))
            barrier();
           barrier();
          }
        }
       barrier();
      }
    }
  }
 while(false);
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(true)
  {
   for(int _injected_loop_counter = 1; _injected_loop_counter != (0 >> (int(6))); _injected_loop_counter --)
    {
     if((false))
      {
       for(int _injected_loop_counter = 0; _injected_loop_counter != (1 | 1); _injected_loop_counter ++)
        {
         if((false))
          barrier();
        }
       if(((bool(bvec4(false, false, true, false)))))
        barrier();
       barrier();
      }
     if(((((false || (false))) || false)))
      barrier();
    }
  }
 else
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uvec4 GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_12num_workgroupsubgroup_idsubgroup_local_idworkgroup_id;
 if((false))
  {
   do
    {
     barrier();
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
  }
 uvec4 GLF_merged4_0_1_11_1_1_11_2_1_14_3_1_12subgroup_idvirtual_gidworkgroup_baseworkgroup_id;
 do
  {
   if(true)
    {
     if((false))
      {
       if((((false || (false))) && true))
        {
        }
       else
        {
         for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            barrier();
          }
         barrier();
        }
      }
     if((false))
      barrier();
    }
   else
    {
     if((false))
      barrier();
    }
  }
 while(false);
 if((false))
  barrier();
 if(((injectionSwitch.x < injectionSwitch.y)))
  {
   if((false))
    {
     if((false))
      barrier();
     for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
      {
       if((false))
        barrier();
       do
        {
         if((false))
          {
           if(true)
            {
             do
              {
               if((false))
                {
                 if((((false) && true)))
                  barrier();
                 barrier();
                }
              }
             while(false);
             if((false))
              barrier();
             if((false))
              barrier();
             barrier();
             if((false))
              barrier();
            }
           else
            {
            }
           if((false))
            barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(false);
       if((false))
        barrier();
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
     if((false))
      barrier();
     do
      {
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         do
          {
           barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         while(false);
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          barrier();
        }
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
    }
  }
 else
  {
  }
 if((false))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((false))
  {
   do
    {
     barrier();
     if((false))
      barrier();
    }
   while(false);
  }
 if(true)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     barrier();
    }
  }
 else
  {
   if((false))
    barrier();
  }
 if((false))
  barrier();
 if((false))
  barrier();
 if(false)
  {
   if(((bool(bool(false)))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 else
  {
   if(false)
    {
    }
   else
    {
     if((((false) || false)))
      {
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   if((false))
    barrier();
  }
 do
  {
   do
    {
     for(int _injected_loop_counter = (0 | 0); _injected_loop_counter < (~ (~ (1))); _injected_loop_counter ++)
      {
       if((false))
        barrier();
       if(((bool(bvec4(false, true, ((injectionSwitch.x > injectionSwitch.y)), false)))))
        barrier();
       if(true)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           barrier();
          }
         if((false))
          {
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             barrier();
             if((false))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
            }
           if((false))
            barrier();
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             do
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             while(false);
             barrier();
            }
          }
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
      }
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 while(false);
 if((false))
  barrier();
 if(((injectionSwitch.x > injectionSwitch.y)))
  {
   if((false))
    {
     for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != 0; _injected_loop_counter --)
      {
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
     barrier();
     if((false))
      barrier();
    }
  }
 else
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(false)
    {
    }
   else
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       do
        {
         if(false)
          {
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            barrier();
          }
        }
       while((bool(bool(false))));
       for(int _injected_loop_counter = 0; _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
        {
         if((false))
          barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
       if((false))
        barrier();
       if(false)
        {
        }
       else
        {
         if((! (! (((injectionSwitch.x < injectionSwitch.y))))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               do
                {
                 barrier();
                }
               while(false);
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               do
                {
                 for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                  {
                   barrier();
                   if((false))
                    barrier();
                  }
                 if((false))
                  barrier();
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if((false))
                  barrier();
                }
               while(false);
               if((false))
                barrier();
              }
             if(((injectionSwitch.x < injectionSwitch.y)))
              {
               if(true)
                {
                 if(((((injectionSwitch.x > injectionSwitch.y))) || false))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                 if((false))
                  barrier();
                }
               else
                {
                }
               if(((bool(bvec4(false, false, ((injectionSwitch.x < injectionSwitch.y)), true)))))
                barrier();
              }
             else
              {
              }
            }
          }
         else
          {
          }
        }
       barrier();
       do
        {
         if(true)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = (0 | 0); _injected_loop_counter != 1; _injected_loop_counter ++)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if(false)
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
               if((false))
                barrier();
               if((false))
                {
                 if((false))
                  barrier();
                 barrier();
                }
              }
             barrier();
            }
           if((false))
            barrier();
          }
         else
          {
           if(((false || (false))))
            barrier();
          }
         if((false))
          barrier();
        }
       while((false || (false)));
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
      }
    }
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     do
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
          {
           barrier();
          }
        }
       if((false))
        barrier();
      }
     while(false);
     barrier();
    }
   if(true)
    {
     if((false))
      {
       if((false))
        barrier();
       for(int _injected_loop_counter = ((- 78774 & int((injectionSwitch.x))) | (0 ^ 0)); _injected_loop_counter != ((1 << (((int(5)) - int((injectionSwitch.x))))) >> (int(5))); _injected_loop_counter ++)
        {
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
        }
       if((false))
        barrier();
       barrier();
      }
     if((bool(bool(false))))
      {
      }
     else
      {
       if(((false || (false))))
        barrier();
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
      }
     if((false))
      barrier();
     if((false))
      barrier();
     for(int _injected_loop_counter = 1; _injected_loop_counter != (0 << ((max(int(4), int(4))))); _injected_loop_counter --)
      {
       if((false))
        {
         if((false))
          barrier();
         if(false)
          {
           if((false))
            barrier();
           do
            {
             if(((false || (false))))
              barrier();
            }
           while(false);
          }
         else
          {
           if((false))
            {
             for(int _injected_loop_counter = 0; _injected_loop_counter != (((1 << (int(2))) >> (int(2))) & 1); _injected_loop_counter ++)
              {
               barrier();
              }
            }
          }
         if(false)
          {
          }
         else
          {
           if((false))
            barrier();
          }
         barrier();
        }
      }
    }
   else
    {
    }
   if((false))
    {
     if((false))
      barrier();
     do
      {
       if((false))
        barrier();
       do
        {
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
           if((false))
            barrier();
           if((false))
            barrier();
          }
         else
          {
           do
            {
             if((false))
              {
               for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                {
                 barrier();
                 if((false))
                  barrier();
                }
              }
             if((false))
              barrier();
            }
           while(false);
          }
        }
       while(false);
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
       for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = (((~ (~ (1))) << (int(2))) >> (int(2))); _injected_loop_counter > (int((injectionSwitch.x)) << (int(5))); _injected_loop_counter --)
            {
             if(((bool(bvec2(false, true)))))
              barrier();
             if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
              barrier();
            }
           barrier();
          }
        }
       if((false))
        {
         do
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
         if((false))
          barrier();
         if((false))
          {
           for(int _injected_loop_counter = 0; _injected_loop_counter != (1 & 1); _injected_loop_counter ++)
            {
             barrier();
            }
           if((false))
            barrier();
          }
        }
       if((false))
        barrier();
      }
     while(false);
     if((false))
      barrier();
     if((false))
      barrier();
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
       if((false))
        barrier();
      }
     else
      {
       barrier();
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(((injectionSwitch.x < injectionSwitch.y)))
  {
   for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(true)
      {
       if((((false) || false)))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 else
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uvec4 GLF_merged4_0_1_13_1_1_8_2_1_17_3_1_13num_workgroupread_valsubgroup_local_idsubgroup_size;
 uint subgroup_id = gl_SubgroupID;
 do
  {
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
    }
   else
    {
     for(int _injected_loop_counter = (0 << (int(8))); _injected_loop_counter != 1; _injected_loop_counter ++)
      {
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
        }
       else
        {
         do
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if(false)
              {
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(false)
                  {
                  }
                 else
                  {
                   if((false))
                    barrier();
                   if(((false || (((injectionSwitch.x > injectionSwitch.y))))))
                    barrier();
                   if((false))
                    barrier();
                   barrier();
                  }
                }
              }
             else
              {
               do
                {
                 barrier();
                }
               while(((injectionSwitch.x > injectionSwitch.y)));
               if((false))
                barrier();
              }
            }
          }
         while(false);
        }
      }
    }
  }
 while(false);
 for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < 1; _injected_loop_counter ++)
  {
   if((false))
    barrier();
  }
 if(((injectionSwitch.x < injectionSwitch.y)))
  {
   if(false)
    {
    }
   else
    {
     if((false))
      barrier();
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
       barrier();
      }
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
     for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < 1; _injected_loop_counter ++)
      {
       if((false))
        {
         if(false)
          {
           if((false))
            barrier();
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       if((false))
        barrier();
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       GLF_merged4_0_1_13_1_1_8_2_1_11_3_1_17num_workgroupread_valsubgroup_idsubgroup_local_id.z = subgroup_id;
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((((false) && true)))
          barrier();
         barrier();
        }
       if((false))
        barrier();
      }
     if((false))
      barrier();
     if((false))
      barrier();
    }
  }
 else
  {
  }
 if(false)
  {
  }
 else
  {
   do
    {
     if((false))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
  }
 if(true)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
  }
 GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_12num_workgroupsubgroup_idsubgroup_local_idworkgroup_id.y = GLF_merged4_0_1_13_1_1_8_2_1_11_3_1_17num_workgroupread_valsubgroup_idsubgroup_local_id.z;
 do
  {
   if(true)
    {
     if((false))
      barrier();
     if(true)
      {
       if((bool(bvec2(((injectionSwitch.x < injectionSwitch.y)), true))))
        {
         if((false))
          barrier();
         if((false))
          barrier();
         if((false))
          barrier();
        }
       else
        {
        }
      }
     else
      {
      }
    }
   else
    {
    }
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     if((! (! ((! (! (true)))))))
      {
       if(false)
        {
        }
       else
        {
         for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
          {
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             GLF_merged4_0_1_11_1_1_11_2_1_14_3_1_12subgroup_idvirtual_gidworkgroup_baseworkgroup_id.x = GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_12num_workgroupsubgroup_idsubgroup_local_idworkgroup_id.y;
            }
           else
            {
            }
          }
        }
      }
     else
      {
       for(int _injected_loop_counter = (int((injectionSwitch.x)) >> (int(1))); _injected_loop_counter != (1 | 1); _injected_loop_counter ++)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
         if((false))
          barrier();
        }
       if(((! (! (false)))))
        barrier();
       if(true)
        {
         if((false))
          {
           if(false)
            {
            }
           else
            {
             if((false))
              barrier();
             barrier();
             if((false))
              barrier();
            }
          }
        }
       else
        {
        }
       if(true)
        {
         if((false))
          barrier();
        }
       else
        {
        }
      }
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
    }
  }
 while(false);
 if((false))
  {
   do
    {
     barrier();
    }
   while(false);
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   do
    {
     if((false))
      {
       for(int _injected_loop_counter = (1 | 0); _injected_loop_counter > (0 << (int(6))); _injected_loop_counter --)
        {
         barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       barrier();
      }
     do
      {
       if((false))
        barrier();
       for(int _injected_loop_counter = ((1 << (int(0))) >> (int(0))); _injected_loop_counter > (0 & - 15208); _injected_loop_counter --)
        {
         if((((((false) && true)) && true)))
          {
           if(true)
            {
             barrier();
            }
           else
            {
             if(((((! (! (((injectionSwitch.x > injectionSwitch.y)))))) && true)))
              barrier();
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           barrier();
          }
        }
      }
     while(false);
     if((false))
      barrier();
     for(int _injected_loop_counter = (0 >> (int(8))); _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
      {
       if((false))
        barrier();
      }
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
   if(true)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(false)
      {
       if((false))
        barrier();
       for(int _injected_loop_counter = ((1 << (int(1))) >> (int(1))); _injected_loop_counter != 0; _injected_loop_counter --)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if((false))
        barrier();
       if((false))
        barrier();
      }
     else
      {
       if((false))
        barrier();
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
       if(false)
        {
        }
       else
        {
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             do
              {
               barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             while(false);
            }
           do
            {
             barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           while(false);
          }
        }
      }
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if((false))
    barrier();
   if((false))
    barrier();
   barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(false)
      {
      }
     else
      {
       if((false))
        barrier();
       barrier();
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     do
      {
       barrier();
       if(((true && (false))))
        barrier();
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(false);
    }
  }
 if((false))
  barrier();
 if((false))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if(((true && (false))))
  barrier();
 if((false))
  barrier();
 if(false)
  {
  }
 else
  {
   GLF_merged4_0_1_13_1_1_8_2_1_17_3_1_13num_workgroupread_valsubgroup_local_idsubgroup_size.w = subgroup_size;
  }
 if((false))
  barrier();
 for(int _injected_loop_counter = (1 & 1); _injected_loop_counter != 0; _injected_loop_counter --)
  {
   if(false)
    {
     if((false))
      barrier();
     if((false))
      barrier();
    }
   else
    {
     if((false))
      barrier();
     for(int _injected_loop_counter = (0 | (((false ? (97970) : 0)))); _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
      {
       if((false))
        barrier();
       if(true)
        {
         if((false))
          {
           do
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           while(false);
           do
            {
             if((false))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                barrier();
               barrier();
              }
             barrier();
            }
           while(false);
          }
        }
       else
        {
         if(((true && (false))))
          barrier();
        }
      }
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   for(int _injected_loop_counter = 0; _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
    {
     if((false))
      barrier();
     if(((! (! ((bool(bvec4(false, true, true, true))))))))
      barrier();
     barrier();
     if((false))
      barrier();
    }
   if((false))
    barrier();
  }
 if(false)
  {
   if((false))
    barrier();
  }
 else
  {
   if((false))
    barrier();
  }
 if((false))
  barrier();
 for(int _injected_loop_counter = 1; _injected_loop_counter != (- 9290 & 0); _injected_loop_counter --)
  {
   if((false))
    barrier();
   if(((! (! (false)))))
    barrier();
  }
 do
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     for(int _injected_loop_counter = 0; _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
      {
       if((false))
        {
         if(((true) || false))
          {
           if((false))
            barrier();
           do
            {
             do
              {
               barrier();
              }
             while(false);
            }
           while(false);
          }
         else
          {
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     if((false))
      barrier();
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
    }
  }
 while(false);
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((false))
  {
   if(true)
    {
     if((false))
      barrier();
     barrier();
    }
   else
    {
    }
  }
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 GLF_merged3_0_1_17_1_1_14_2_1_12subgroup_local_idworkgroup_baseworkgroup_id.x = subgroup_local_id;
 if((false))
  barrier();
 do
  {
   if((false))
    barrier();
  }
 while(false);
 GLF_merged4_0_1_13_1_1_8_2_1_11_3_1_17num_workgroupread_valsubgroup_idsubgroup_local_id.w = GLF_merged3_0_1_17_1_1_14_2_1_12subgroup_local_idworkgroup_baseworkgroup_id.x;
 if((false))
  barrier();
 if(true)
  {
   if(false)
    {
    }
   else
    {
     if((false))
      barrier();
     for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
        {
         if((false))
          barrier();
         do
          {
           GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_12num_workgroupsubgroup_idsubgroup_local_idworkgroup_id.z = GLF_merged4_0_1_13_1_1_8_2_1_11_3_1_17num_workgroupread_valsubgroup_idsubgroup_local_id.w;
           if((false))
            barrier();
          }
         while(false);
        }
      }
    }
  }
 else
  {
  }
 if((false))
  barrier();
 if(((! (! (false)))))
  barrier();
 if(true)
  {
   if(((true) && true))
    {
     if((false))
      barrier();
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
       for(int _injected_loop_counter = ((1 << (int(0))) >> (int(0))); _injected_loop_counter != (0 & 71716); _injected_loop_counter --)
        {
         if((false))
          barrier();
        }
      }
     else
      {
       if((false))
        {
         if((false))
          barrier();
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
         if((false))
          barrier();
         if((false))
          barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(false)
      {
       if((false))
        barrier();
      }
     else
      {
       do
        {
         if((false))
          barrier();
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           if((false))
            barrier();
           if((false))
            {
             if((false))
              {
               if((false))
                barrier();
               do
                {
                 barrier();
                }
               while(false);
              }
             barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if(true)
              {
               do
                {
                 barrier();
                }
               while(false);
              }
             else
              {
               if((false))
                barrier();
              }
            }
          }
        }
       while((bool(bvec3(false, false, ((injectionSwitch.x < injectionSwitch.y))))));
       if((false))
        barrier();
      }
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if((false))
        barrier();
       if((false))
        {
         if((false))
          barrier();
         if((false))
          barrier();
         do
          {
           if(false)
            {
             if((false))
              barrier();
            }
           else
            {
             if((false))
              barrier();
             barrier();
            }
          }
         while(false);
        }
      }
     else
      {
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(false)
          {
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
        }
       if((false))
        barrier();
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
       if((false))
        barrier();
       do
        {
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           barrier();
          }
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
       if(false)
        {
         if((false))
          barrier();
        }
       else
        {
         if((false))
          {
           for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
            {
             if(true)
              {
               if((false))
                barrier();
               barrier();
              }
             else
              {
              }
            }
          }
         if(false)
          {
          }
         else
          {
           barrier();
           if((false))
            barrier();
           if((false))
            {
             if((false))
              barrier();
             barrier();
            }
          }
        }
      }
     for(int _injected_loop_counter = (0 & - 96727); _injected_loop_counter < 1; _injected_loop_counter ++)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if(false)
            {
            }
           else
            {
             barrier();
             if((false))
              barrier();
            }
          }
        }
      }
     GLF_merged4_0_1_13_1_1_8_2_1_17_3_1_13num_workgroupread_valsubgroup_local_idsubgroup_size.z = GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_12num_workgroupsubgroup_idsubgroup_local_idworkgroup_id.z;
    }
   else
    {
     if((false))
      {
       for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
        {
         barrier();
        }
      }
     if((false))
      barrier();
    }
  }
 else
  {
  }
 if(((bool((true && (bool(false)))))))
  {
   if(true)
    {
     barrier();
     if((false))
      barrier();
    }
   else
    {
    }
  }
 if(false)
  {
  }
 else
  {
   if((false))
    {
     do
      {
       if((false))
        {
         for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
          {
           barrier();
          }
         if((false))
          barrier();
        }
       if((false))
        barrier();
      }
     while(false);
     barrier();
    }
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 for(int _injected_loop_counter = (((0 ^ 1) | 0) ^ 0); _injected_loop_counter != 0; _injected_loop_counter --)
  {
   if((false))
    barrier();
  }
 for(int _injected_loop_counter = (1 ^ int((injectionSwitch.y))); _injected_loop_counter != (1 & int((injectionSwitch.y))); _injected_loop_counter ++)
  {
   for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != (0 << (((int(1)) | (int(1))))); _injected_loop_counter --)
    {
     GLF_merged4_0_1_13_1_1_8_2_1_11_3_1_17num_workgroupread_valsubgroup_idsubgroup_local_id.x = num_workgroup;
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(((injectionSwitch.x > injectionSwitch.y)))
  {
  }
 else
  {
   for(int _injected_loop_counter = ((1 << (((false ? (- 85919) : int(6))))) >> (int(6))); _injected_loop_counter != 0; _injected_loop_counter --)
    {
     if((false))
      barrier();
     if((false))
      {
       if(((bool((bvec3(bvec3(bvec3(false, true, false))))))))
        barrier();
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       barrier();
       if((false))
        barrier();
      }
     if((false))
      barrier();
     if(((bool((bvec3(bvec3(bvec3(false, true, true))))))))
      {
       for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < 1; _injected_loop_counter ++)
        {
         barrier();
        }
       if((false))
        barrier();
      }
     do
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         barrier();
        }
      }
     while(false);
     if((false))
      barrier();
     for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
      {
       do
        {
         if((false))
          {
           if((false))
            {
             if((false))
              barrier();
             barrier();
            }
           barrier();
          }
         for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
          {
           if((false))
            {
             if((false))
              {
               if((false))
                barrier();
               if((false))
                barrier();
               if(false)
                {
                }
               else
                {
                 barrier();
                }
              }
             barrier();
            }
           if(((bool(bvec3(false, false, false)))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
          }
         if((false))
          barrier();
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
       for(int _injected_loop_counter = (- 142 & (0 << (int(5)))); _injected_loop_counter != 1; _injected_loop_counter ++)
        {
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
        }
       if((false))
        {
         if(false)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
           if((false))
            barrier();
           barrier();
          }
        }
      }
     do
      {
       do
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          barrier();
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
       for(int _injected_loop_counter = (0 >> (((int(7)) | (int(7))))); _injected_loop_counter != ((1 << (int(0))) >> (((int(0)) ^ 0))); _injected_loop_counter ++)
        {
         if((false))
          {
           if((false))
            barrier();
           for(int _injected_loop_counter = (1 ^ 1); _injected_loop_counter < ((1 << (int(0))) >> ((clamp((min(int(0), int(0))), int(0), int(0))))); _injected_loop_counter ++)
            {
             barrier();
            }
          }
        }
       if((false))
        barrier();
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
     GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_12num_workgroupsubgroup_idsubgroup_local_idworkgroup_id.x = GLF_merged4_0_1_13_1_1_8_2_1_11_3_1_17num_workgroupread_valsubgroup_idsubgroup_local_id.x;
    }
  }
 if(((injectionSwitch.x < injectionSwitch.y)))
  {
   if((false))
    {
     if((false))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     barrier();
    }
  }
 else
  {
  }
 do
  {
   if(true)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       for(int _injected_loop_counter = ((1 << (int(7))) >> (int(7))); _injected_loop_counter > (0 ^ (0 >> (int(4)))); _injected_loop_counter --)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          barrier();
         if(false)
          {
          }
         else
          {
           if((false))
            barrier();
           if((false))
            barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          barrier();
        }
       if((false))
        barrier();
      }
     do
      {
       do
        {
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
        }
       while(false);
      }
     while(false);
    }
   else
    {
     if((false))
      barrier();
     if((false))
      barrier();
     for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
      {
       if((false))
        {
         for(int _injected_loop_counter = 1; _injected_loop_counter != (0 >> (int(3))); _injected_loop_counter --)
          {
           barrier();
          }
         if((false))
          barrier();
        }
      }
     if((false))
      barrier();
    }
  }
 while(false);
 if((false))
  barrier();
 for(int _injected_loop_counter = ((1 << (int(4))) >> (int(4))); _injected_loop_counter != (0 ^ 0); _injected_loop_counter --)
  {
   if((false))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     if(false)
      {
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if((false))
          {
           if((bool(bvec4(false, false, true, true))))
            {
             if((false))
              barrier();
            }
           else
            {
             barrier();
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(((injectionSwitch.x > injectionSwitch.y)))
                {
                }
               else
                {
                 barrier();
                }
              }
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            barrier();
          }
        }
       else
        {
        }
      }
     else
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(false)
          {
           if((false))
            barrier();
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           do
            {
             if((false))
              {
               if((false))
                barrier();
               if(true)
                {
                 if((false))
                  barrier();
                 for(int _injected_loop_counter = (1 | 1); _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
                  {
                   if((false))
                    barrier();
                   for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
                    {
                     barrier();
                     if((false))
                      barrier();
                    }
                   if((false))
                    barrier();
                  }
                }
               else
                {
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
             if((false))
              barrier();
            }
           else
            {
             if((false))
              barrier();
             if((false))
              barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              barrier();
             barrier();
            }
          }
         barrier();
        }
       if((false))
        barrier();
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         if((true && (((injectionSwitch.x > injectionSwitch.y)))))
          {
          }
         else
          {
           do
            {
             if((false))
              {
               if((false))
                barrier();
               barrier();
              }
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
           do
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(((((! (! (false)))) || false)))
              barrier();
             if((false))
              {
               if((false))
                {
                 if(((injectionSwitch.x > injectionSwitch.y)))
                  {
                  }
                 else
                  {
                   if(((injectionSwitch.x > injectionSwitch.y)))
                    {
                    }
                   else
                    {
                     if(true)
                      {
                       barrier();
                      }
                     else
                      {
                       if((false))
                        barrier();
                      }
                    }
                  }
                }
               barrier();
               for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
                {
                 if((false))
                  barrier();
                 if((false))
                  {
                   for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                    {
                     if((false))
                      barrier();
                     barrier();
                     if((false))
                      barrier();
                    }
                  }
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             if((false))
              barrier();
             for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < 1; _injected_loop_counter ++)
              {
               if((false))
                barrier();
              }
             if(((! (! ((bool(bvec3(false, true, false))))))))
              barrier();
            }
           while(false);
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(true)
        {
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(false)
            {
            }
           else
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
        }
       else
        {
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = ((1 << (int(5))) >> (int(5))); _injected_loop_counter != 0; _injected_loop_counter --)
          {
           barrier();
          }
        }
      }
     do
      {
       barrier();
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
     for(int _injected_loop_counter = (1 | int((injectionSwitch.y))); _injected_loop_counter != (0 | 0); _injected_loop_counter --)
      {
       if(((bool(bvec2(false, false)))))
        barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(((! (! (false)))))
    barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 do
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
    {
     if((false))
      barrier();
     if((false))
      {
       if(true)
        {
         barrier();
        }
       else
        {
        }
      }
     if((false))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != 1; _injected_loop_counter ++)
        {
         if((false))
          barrier();
         barrier();
        }
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       barrier();
      }
     barrier();
    }
   if((false))
    barrier();
   if((false))
    barrier();
   if(false)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(false)
      {
      }
     else
      {
       do
        {
         if((false))
          {
           if(false)
            {
            }
           else
            {
             for(int _injected_loop_counter = (((((1 << (int(6))) >> (int(6))) & 1) << (int(6))) >> ((clamp(int(6), (~ (~ (int(6)))), int(6))))); _injected_loop_counter > 0; _injected_loop_counter --)
              {
               do
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   do
                    {
                     barrier();
                    }
                   while(false);
                  }
                }
               while(false);
               if((false))
                {
                 do
                  {
                   barrier();
                  }
                 while(((injectionSwitch.x > injectionSwitch.y)));
                }
               if((false))
                barrier();
               if(((injectionSwitch.x > injectionSwitch.y)))
                {
                 if((((false) || false)))
                  barrier();
                }
               else
                {
                 if((false))
                  barrier();
                 for(int _injected_loop_counter = ((0 ^ 1) | 1); _injected_loop_counter > 0; _injected_loop_counter --)
                  {
                   if((false))
                    barrier();
                   if((false))
                    {
                     for(int _injected_loop_counter = (0 | 0); _injected_loop_counter < 1; _injected_loop_counter ++)
                      {
                       barrier();
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        {
                         if(false)
                          {
                          }
                         else
                          {
                           barrier();
                          }
                        }
                       if(((bool(bvec4(false, ((injectionSwitch.x < injectionSwitch.y)), true, true)))))
                        barrier();
                      }
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                   if(((false || (false))))
                    barrier();
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    {
                     if((false))
                      {
                       for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
                        {
                         barrier();
                        }
                      }
                     for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
                      {
                       if((false))
                        barrier();
                       barrier();
                       if((false))
                        barrier();
                      }
                     if(((false || (false))))
                      barrier();
                    }
                  }
                }
               if((false))
                {
                 if((false))
                  {
                   if(((injectionSwitch.x > injectionSwitch.y)))
                    {
                    }
                   else
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     barrier();
                     if((false))
                      barrier();
                    }
                  }
                 if(((injectionSwitch.x > injectionSwitch.y)))
                  {
                  }
                 else
                  {
                   if((false))
                    barrier();
                   if((false))
                    barrier();
                  }
                 if(false)
                  {
                  }
                 else
                  {
                   for(int _injected_loop_counter = (0 | 0); _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
                    {
                     do
                      {
                       barrier();
                       if((false))
                        barrier();
                      }
                     while(false);
                    }
                  }
                 if((false))
                  {
                   if(((injectionSwitch.x < injectionSwitch.y)))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                }
              }
            }
           barrier();
          }
         if((false))
          {
           if(true)
            {
             barrier();
            }
           else
            {
            }
          }
        }
       while(false);
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
          }
         if((false || (true)))
          {
           if(false)
            {
            }
           else
            {
             barrier();
            }
          }
         else
          {
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           barrier();
          }
         while(false);
         if((false))
          barrier();
        }
       if((false))
        barrier();
      }
    }
   else
    {
     if((false))
      {
       if(true)
        {
         barrier();
        }
       else
        {
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
        barrier();
      }
     if((false))
      barrier();
     if(false)
      {
      }
     else
      {
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
         if(((true && ((bool(bvec3(((injectionSwitch.x > injectionSwitch.y)), true, false)))))))
          barrier();
        }
       else
        {
         if(((false || (false))))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(true)
        {
         if((false))
          barrier();
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
        }
       else
        {
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 while(false);
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(true)
    {
     barrier();
    }
   else
    {
    }
  }
 do
  {
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
    }
   else
    {
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
        {
         for(int _injected_loop_counter = ((1 << (int(1))) >> ((~ (~ (int(1)))))); _injected_loop_counter > 0; _injected_loop_counter --)
          {
           GLF_merged4_0_1_13_1_1_8_2_1_17_3_1_13num_workgroupread_valsubgroup_local_idsubgroup_size.x = GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_12num_workgroupsubgroup_idsubgroup_local_idworkgroup_id.x;
          }
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if((false))
          barrier();
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           if(false)
            {
            }
           else
            {
             for(int _injected_loop_counter = (1 ^ 0); _injected_loop_counter != 0; _injected_loop_counter --)
              {
               if((false))
                barrier();
               if((false))
                barrier();
              }
             if((false))
              barrier();
             if((false))
              barrier();
             if((false))
              {
               if(((injectionSwitch.x < injectionSwitch.y)))
                {
                 barrier();
                 if((false))
                  barrier();
                }
               else
                {
                }
              }
             do
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
              }
             while(((injectionSwitch.x > injectionSwitch.y)));
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if((false))
                {
                 if((false))
                  {
                   if((false))
                    barrier();
                   do
                    {
                     if((false))
                      {
                       if(((injectionSwitch.x < injectionSwitch.y)))
                        {
                         barrier();
                        }
                       else
                        {
                        }
                       if((false))
                        barrier();
                      }
                     barrier();
                    }
                   while(false);
                  }
                 if(true)
                  {
                   if((false))
                    {
                     if((false))
                      barrier();
                     barrier();
                    }
                  }
                 else
                  {
                  }
                 if((false))
                  barrier();
                 barrier();
                }
               if((false))
                barrier();
               if((false))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((false))
                  barrier();
                 if(false)
                  {
                  }
                 else
                  {
                   if((false))
                    barrier();
                   barrier();
                  }
                }
               if((false))
                {
                 if((false))
                  barrier();
                 if(((! (! (false)))))
                  {
                   if((false))
                    barrier();
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    {
                     if((false))
                      {
                       if((false))
                        barrier();
                       barrier();
                      }
                     barrier();
                    }
                   barrier();
                  }
                 if(false)
                  {
                   if((false))
                    {
                     if(((injectionSwitch.x < injectionSwitch.y)))
                      {
                       barrier();
                       if((false))
                        barrier();
                      }
                     else
                      {
                      }
                    }
                  }
                 else
                  {
                   for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(((true && (false))))
                        barrier();
                       barrier();
                      }
                     if((false))
                      barrier();
                     barrier();
                    }
                  }
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
                {
                 for(int _injected_loop_counter = (1 ^ 1); _injected_loop_counter != (~ (~ (((((1 << (int(1))) >> (int(1)))) | (((1 << (int(1))) >> (int(1)))))))); _injected_loop_counter ++)
                  {
                   barrier();
                   if((false))
                    barrier();
                  }
                }
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               do
                {
                 if(((injectionSwitch.x > injectionSwitch.y)))
                  {
                  }
                 else
                  {
                   barrier();
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if((false))
                    barrier();
                  }
                }
               while(false);
              }
            }
          }
         else
          {
           if((false))
            barrier();
           if(true)
            {
             if((false))
              barrier();
            }
           else
            {
            }
          }
         if((false))
          barrier();
        }
       if((false))
        barrier();
       if((false))
        barrier();
       if((false))
        barrier();
       for(int _injected_loop_counter = (1 & (((1 & 1) << (int(6))) >> (int(6)))); _injected_loop_counter != (0 ^ (0 << (int(8)))); _injected_loop_counter --)
        {
         if((false))
          barrier();
         if((false))
          barrier();
        }
       if((false))
        barrier();
      }
    }
  }
 while(false);
 if((false))
  barrier();
 if(true)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
  {
   for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
    {
     if((false))
      barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   for(int _injected_loop_counter = (int((injectionSwitch.x)) & (ivec2(- 23160, 5456).y - - 95469)); _injected_loop_counter != ((1 << ((min(int(2), int(2))))) >> (int(2))); _injected_loop_counter ++)
    {
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if((false))
        barrier();
       if((false))
        barrier();
       do
        {
         for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            barrier();
           if(((false || (false))))
            barrier();
          }
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
      }
     else
      {
       if((false))
        barrier();
      }
    }
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if((false))
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       do
        {
         barrier();
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
       if((false))
        barrier();
      }
     while(false);
    }
   if(true)
    {
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = ((false ? (87624) : 1)); _injected_loop_counter > ((0 | (0 >> (int(6)))) >> (int(4))); _injected_loop_counter --)
        {
         if((false))
          barrier();
         barrier();
        }
      }
    }
   else
    {
    }
   if((bool(bool(false))))
    {
    }
   else
    {
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if((false))
  {
   do
    {
     barrier();
    }
   while(false);
  }
 if((false))
  barrier();
 if(true)
  {
   if(false)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     for(int _injected_loop_counter = (0 | 0); _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
      {
       do
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           barrier();
          }
         if((false))
          barrier();
         for(int _injected_loop_counter = 1; _injected_loop_counter != (0 >> ((~ (((~ (int(4))) + 0))))); _injected_loop_counter --)
          {
           if((false))
            barrier();
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if(((injectionSwitch.x < injectionSwitch.y)))
              {
               if(true)
                {
                 if((false))
                  barrier();
                 for(int _injected_loop_counter = 0; _injected_loop_counter != (1 | 0); _injected_loop_counter ++)
                  {
                   barrier();
                   if((false))
                    barrier();
                  }
                }
               else
                {
                }
               if((false))
                barrier();
              }
             else
              {
              }
            }
           if(true)
            {
             if((false))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
              }
             else
              {
               if((false))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((false))
                  barrier();
                 for(int _injected_loop_counter = ((1 << ((max(int(3), int(3))))) >> (int(3))); _injected_loop_counter > 0; _injected_loop_counter --)
                  {
                   if((false))
                    barrier();
                   barrier();
                  }
                }
              }
            }
           else
            {
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          barrier();
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
       if(((bool(bool(false)))))
        barrier();
       for(int _injected_loop_counter = ((1 << (int(4))) >> (int(4))); _injected_loop_counter > 0; _injected_loop_counter --)
        {
         do
          {
           if((false))
            {
             for(int _injected_loop_counter = ((0 ^ 1) ^ 1); _injected_loop_counter != 1; _injected_loop_counter ++)
              {
               if((false))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
               barrier();
              }
            }
          }
         while(false);
        }
      }
     if((((bool(bool(bool(bvec3(false, true, false))))))))
      barrier();
    }
   for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if((false))
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((false))
    barrier();
  }
 else
  {
   if(false)
    {
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      {
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         barrier();
        }
       else
        {
         if((false))
          barrier();
        }
      }
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 do
  {
   if((false))
    barrier();
  }
 while(false);
 uint workgroup_id = gl_WorkGroupID.x;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   do
    {
     if(((! (! (false)))))
      barrier();
     for(int _injected_loop_counter = ((1 << ((((max(int(6), int(6)))) >> 0))) >> (int(6))); _injected_loop_counter != 0; _injected_loop_counter --)
      {
       if((false))
        barrier();
       barrier();
      }
    }
   while(false);
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(false)
  {
   if((false))
    barrier();
  }
 else
  {
   if((false))
    {
     if(((true) && ((injectionSwitch.x < injectionSwitch.y))))
      {
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
      }
    }
   if(false)
    {
    }
   else
    {
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       if((false))
        barrier();
       do
        {
         for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < 1; _injected_loop_counter ++)
          {
           if((false))
            barrier();
          }
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           if((true && (false)))
            {
             if((false))
              barrier();
            }
           else
            {
             for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != ((+ 54938) & 0); _injected_loop_counter --)
              {
               GLF_merged3_0_1_17_1_1_14_2_1_12subgroup_local_idworkgroup_baseworkgroup_id.z = workgroup_id;
              }
             if((false))
              barrier();
             if(false)
              {
               if((false))
                barrier();
              }
             else
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
            }
           if((false))
            barrier();
          }
        }
       while(false);
       if((false))
        barrier();
      }
     if((false))
      barrier();
     if((false))
      {
       if(false)
        {
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
    }
   if((false))
    barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   barrier();
   if((false))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(false)
      {
       if(((bool(bool(false)))))
        barrier();
      }
     else
      {
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
      }
    }
  }
 if(((((false || (false))) && true)))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 1; _injected_loop_counter != (0 >> (int(8))); _injected_loop_counter --)
      {
       if((false))
        barrier();
       barrier();
      }
    }
   if((false))
    barrier();
   do
    {
     if(true)
      {
       if((false))
        barrier();
       do
        {
         if((false))
          {
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
             barrier();
            }
           if((false))
            barrier();
          }
         if(((true && (false))))
          barrier();
         if((false))
          {
           if((false))
            barrier();
           if(true)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(false)
            {
             if((false))
              barrier();
            }
           else
            {
             for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
              {
               if(((false) && true))
                {
                 if((false))
                  barrier();
                }
               else
                {
                 if((false))
                  barrier();
                 if((false))
                  barrier();
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(((injectionSwitch.x < injectionSwitch.y)))
                  {
                   for(int _injected_loop_counter = 1; _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
                    {
                     if(((! (! (false)))))
                      barrier();
                    }
                   for(int _injected_loop_counter = 0; _injected_loop_counter != ((1 << (int(3))) >> (int(3))); _injected_loop_counter ++)
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     barrier();
                    }
                  }
                 else
                  {
                   if((false))
                    {
                     if((false))
                      barrier();
                     if((false))
                      barrier();
                     if(true)
                      {
                       barrier();
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                      }
                     else
                      {
                       if((false))
                        barrier();
                      }
                    }
                  }
                }
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
         if((false))
          {
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
        }
       while(false);
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       if((false))
        barrier();
      }
     if((false))
      barrier();
    }
   while(false);
   if((false))
    barrier();
   barrier();
   if((false))
    barrier();
  }
 if((false))
  barrier();
 for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != 1; _injected_loop_counter ++)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       if((false))
        barrier();
      }
     while(false);
     if((false))
      barrier();
     for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
      {
       if((false))
        barrier();
       if((false))
        barrier();
       barrier();
       if(true)
        {
         if((false))
          barrier();
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     if((false))
      barrier();
    }
  }
 if((false))
  {
   if((false))
    barrier();
   barrier();
   if(false)
    {
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 if((false))
  barrier();
 if((false))
  barrier();
 for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < 1; _injected_loop_counter ++)
  {
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    barrier();
  }
 GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_12num_workgroupsubgroup_idsubgroup_local_idworkgroup_id.w = GLF_merged3_0_1_17_1_1_14_2_1_12subgroup_local_idworkgroup_baseworkgroup_id.z;
 if(true)
  {
   GLF_merged4_0_1_11_1_1_11_2_1_14_3_1_12subgroup_idvirtual_gidworkgroup_baseworkgroup_id.w = GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_12num_workgroupsubgroup_idsubgroup_local_idworkgroup_id.w;
   if((false))
    barrier();
  }
 else
  {
  }
 if(((! ((! (! (! (false))))))))
  barrier();
 uint workgroup_base = workgroup_size * GLF_merged4_0_1_11_1_1_11_2_1_14_3_1_12subgroup_idvirtual_gidworkgroup_baseworkgroup_id.w;
 if((false))
  barrier();
 if(((true && (false))))
  barrier();
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   do
    {
     if((true && (((injectionSwitch.x < injectionSwitch.y)))))
      {
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
      }
     if((false))
      barrier();
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
   if((false))
    barrier();
   barrier();
   if((false))
    barrier();
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(false)
  {
   if((false))
    barrier();
  }
 else
  {
   if((false))
    barrier();
   GLF_merged3_0_1_17_1_1_14_2_1_12subgroup_local_idworkgroup_baseworkgroup_id.y = workgroup_base;
  }
 do
  {
   if((false))
    {
     if((false))
      barrier();
     do
      {
       if((false))
        barrier();
       if((false))
        {
         if(false)
          {
          }
         else
          {
           do
            {
             barrier();
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
          }
        }
      }
     while(false);
     barrier();
    }
  }
 while(false);
 do
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 1; _injected_loop_counter != (1 ^ 1); _injected_loop_counter --)
      {
       if(false)
        {
        }
       else
        {
         if(true)
          {
           if((false))
            barrier();
           barrier();
          }
         else
          {
          }
        }
      }
    }
  }
 while(((injectionSwitch.x > injectionSwitch.y)));
 if((false))
  barrier();
 if(false)
  {
  }
 else
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(((true && (((injectionSwitch.x > injectionSwitch.y))))))
    barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(((injectionSwitch.x < injectionSwitch.y)))
  {
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
    }
   else
    {
     for(int _injected_loop_counter = 0; _injected_loop_counter != (1 | 1); _injected_loop_counter ++)
      {
       if((false))
        barrier();
       do
        {
         do
          {
           for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > 0; _injected_loop_counter --)
            {
             if((false))
              {
               if((false))
                {
                 if(((injectionSwitch.x > injectionSwitch.y)))
                  {
                  }
                 else
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 barrier();
                }
               if((false))
                {
                 if((false))
                  barrier();
                 barrier();
                }
               for(int _injected_loop_counter = (0 << (int(8))); _injected_loop_counter != 1; _injected_loop_counter ++)
                {
                 for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < 1; _injected_loop_counter ++)
                  {
                   if((false))
                    barrier();
                  }
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if((false))
                  {
                   if((false))
                    barrier();
                   barrier();
                  }
                 if((((false) || false)))
                  {
                   if((false))
                    barrier();
                   barrier();
                  }
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(((injectionSwitch.x < injectionSwitch.y)))
                {
                 if(true)
                  {
                   barrier();
                   if((false))
                    {
                     if(((injectionSwitch.x < injectionSwitch.y)))
                      {
                       barrier();
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                      }
                     else
                      {
                      }
                    }
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 else
                  {
                   if((false))
                    {
                     if(true)
                      {
                       barrier();
                       if((false))
                        barrier();
                      }
                     else
                      {
                      }
                    }
                   if((false))
                    barrier();
                   if((false))
                    {
                     if((((false || (bool(bvec3(false, true, false)))))))
                      barrier();
                     if(false)
                      {
                      }
                     else
                      {
                       barrier();
                      }
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     if((false))
                      barrier();
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     if(false)
                      {
                       if((false))
                        barrier();
                      }
                     else
                      {
                       barrier();
                      }
                    }
                   if((false))
                    barrier();
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                }
               else
                {
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if((false))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((false))
                  barrier();
                 barrier();
                }
              }
             for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < 1; _injected_loop_counter ++)
              {
               if((false))
                barrier();
               if(true)
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if((false))
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if(((injectionSwitch.x < injectionSwitch.y)))
                    {
                     barrier();
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     if((false))
                      barrier();
                     if((false))
                      barrier();
                    }
                   else
                    {
                    }
                  }
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if((false))
                    barrier();
                   barrier();
                  }
                 if((false))
                  barrier();
                }
               else
                {
                }
              }
             if((((false) && true)))
              {
               if((false))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
             for(int _injected_loop_counter = 1; _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
              {
               for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != (0 ^ 1); _injected_loop_counter ++)
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if((false))
                  {
                   if(true)
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                }
               if(true)
                {
                 if((false))
                  {
                   if(true)
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                   else
                    {
                    }
                   barrier();
                  }
                }
               else
                {
                }
              }
             if(false)
              {
              }
             else
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if((false))
                {
                 do
                  {
                   if((false))
                    barrier();
                   barrier();
                  }
                 while(((injectionSwitch.x > injectionSwitch.y)));
                }
               do
                {
                 GLF_merged4_0_1_11_1_1_11_2_1_14_3_1_12subgroup_idvirtual_gidworkgroup_baseworkgroup_id.z = GLF_merged3_0_1_17_1_1_14_2_1_12subgroup_local_idworkgroup_baseworkgroup_id.y;
                }
               while(false);
               do
                {
                 if((false))
                  barrier();
                }
               while(false);
              }
             for(int _injected_loop_counter = (1 | 1); _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
              {
               if((false))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if((false))
                    barrier();
                   barrier();
                  }
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if((false))
                  {
                   if((false))
                    barrier();
                   if((false))
                    {
                     do
                      {
                       do
                        {
                         if(false)
                          {
                          }
                         else
                          {
                           barrier();
                          }
                         do
                          {
                           if((false))
                            barrier();
                          }
                         while(((injectionSwitch.x > injectionSwitch.y)));
                        }
                       while(((false) || false));
                      }
                     while(false);
                    }
                   for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
                    {
                     for(int _injected_loop_counter = 0; _injected_loop_counter < ((1 << (int(4))) >> (int(4))); _injected_loop_counter ++)
                      {
                       barrier();
                       if((false))
                        barrier();
                      }
                     if((false))
                      barrier();
                    }
                  }
                 if((false))
                  {
                   if((false))
                    barrier();
                   barrier();
                  }
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if((false))
                  {
                   do
                    {
                     if((false))
                      barrier();
                     if((false))
                      barrier();
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      {
                       do
                        {
                         barrier();
                         if((false))
                          barrier();
                        }
                       while(false);
                      }
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                   while(false);
                   barrier();
                  }
                 if(((injectionSwitch.x > injectionSwitch.y)))
                  {
                  }
                 else
                  {
                   if((false))
                    barrier();
                  }
                 do
                  {
                   if((false))
                    barrier();
                   if(((injectionSwitch.x < injectionSwitch.y)))
                    {
                     do
                      {
                       barrier();
                      }
                     while(((injectionSwitch.x > injectionSwitch.y)));
                     if((false))
                      barrier();
                     if((false))
                      barrier();
                    }
                   else
                    {
                     if((false))
                      barrier();
                    }
                  }
                 while(false);
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             do
              {
               do
                {
                 if((false))
                  {
                   if((false))
                    barrier();
                   for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
                    {
                     barrier();
                    }
                  }
                 if((false))
                  barrier();
                 if((false))
                  {
                   if(false)
                    {
                    }
                   else
                    {
                     barrier();
                    }
                  }
                 if((false))
                  {
                   if((false))
                    barrier();
                   barrier();
                  }
                 if(true)
                  {
                   if((false))
                    barrier();
                   for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != (int((injectionSwitch.y)) | 1); _injected_loop_counter ++)
                    {
                     do
                      {
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                      }
                     while(((injectionSwitch.x > injectionSwitch.y)));
                     if((false))
                      barrier();
                    }
                  }
                 else
                  {
                  }
                 if(true)
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    {
                     if((false))
                      barrier();
                     barrier();
                    }
                   if(((! (! (((false) && true))))))
                    barrier();
                   if(false)
                    {
                    }
                   else
                    {
                     for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > 0; _injected_loop_counter --)
                      {
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        {
                         if((((false) && true)))
                          barrier();
                         do
                          {
                           if(((injectionSwitch.x < injectionSwitch.y)))
                            {
                             for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                              {
                               if((((injectionSwitch.x > injectionSwitch.y))))
                                barrier();
                               barrier();
                               if((false))
                                barrier();
                              }
                            }
                           else
                            {
                            }
                          }
                         while(false);
                        }
                      }
                    }
                  }
                 else
                  {
                  }
                }
               while(false);
               if((false))
                barrier();
              }
             while(false);
             if((false))
              barrier();
            }
          }
         while(false);
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
      }
     if((false))
      barrier();
     if((false))
      barrier();
    }
  }
 else
  {
   if(true)
    {
     if((false))
      {
       for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
        {
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          barrier();
        }
       if(false)
        {
        }
       else
        {
         barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
    }
   else
    {
    }
   if((false))
    barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if((false))
    {
     do
      {
       barrier();
      }
     while(false);
    }
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   for(int _injected_loop_counter = (0 ^ 1); _injected_loop_counter != 0; _injected_loop_counter --)
    {
     barrier();
     if(true)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
       if((false))
        barrier();
      }
     else
      {
      }
    }
   if((false))
    barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(((true && (false))))
  {
   if((false))
    {
     if((false))
      barrier();
     if((false))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           barrier();
          }
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     do
      {
       if((false))
        {
         for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
          {
           barrier();
          }
         if((false))
          barrier();
        }
       barrier();
      }
     while(false);
    }
   if(true)
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   else
    {
     if((false))
      barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   for(int _injected_loop_counter = (~ (~ (1))); _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
    {
     do
      {
       barrier();
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
    }
  }
 if(((injectionSwitch.x < injectionSwitch.y)))
  {
   do
    {
     for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
      {
       if((false))
        barrier();
      }
     if((false))
      barrier();
     if(true)
      {
       if((false))
        {
         if((((false) && true)))
          {
           if((false))
            barrier();
           if(false)
            {
            }
           else
            {
             barrier();
            }
          }
         do
          {
           barrier();
           if((false))
            barrier();
          }
         while(false);
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
      }
     if(false)
      {
      }
     else
      {
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          {
           if((false))
            barrier();
           if((false))
            barrier();
           barrier();
           if((false))
            barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
            {
             for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < 1; _injected_loop_counter ++)
              {
               do
                {
                 for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
                  {
                   if(false)
                    {
                    }
                   else
                    {
                     barrier();
                    }
                  }
                }
               while(false);
              }
            }
          }
         if(false)
          {
          }
         else
          {
           if((false))
            barrier();
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(false)
              {
              }
             else
              {
               if((false))
                barrier();
               barrier();
               if((false))
                barrier();
              }
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if((false))
          {
           do
            {
             barrier();
            }
           while(false);
          }
         if((false))
          {
           if((false))
            {
             if((false || (false)))
              {
              }
             else
              {
               barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
            }
           if(true)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((false))
              barrier();
             do
              {
               if((false))
                {
                 if((false))
                  barrier();
                 barrier();
                }
               if((false))
                barrier();
               barrier();
              }
             while(false);
            }
           else
            {
            }
           if((false))
            barrier();
          }
         if((false))
          barrier();
        }
      }
     do
      {
       if((false))
        {
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           barrier();
          }
        }
       for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
        {
         for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
          {
           if((false))
            barrier();
           if((false))
            barrier();
           if((false))
            {
             if((false))
              {
               if((false))
                barrier();
               if(false)
                {
                }
               else
                {
                 barrier();
                 if((false))
                  barrier();
                }
               if((false))
                barrier();
              }
             if((false))
              barrier();
             if((false))
              barrier();
             if(false)
              {
               if((false))
                barrier();
              }
             else
              {
               if(((true) || false))
                {
                 barrier();
                }
               else
                {
                }
               if(((! (! (false)))))
                {
                 if(false)
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
               if((false))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             if((false))
              barrier();
            }
           if((false))
            barrier();
          }
        }
      }
     while(false);
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if((false))
      {
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         barrier();
        }
       else
        {
        }
      }
     if((false))
      {
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         barrier();
        }
       else
        {
         if((false))
          barrier();
        }
       if((false))
        barrier();
       if((false))
        barrier();
      }
     if((false))
      barrier();
     do
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           barrier();
          }
         if((((((injectionSwitch.x > injectionSwitch.y))) || false)))
          barrier();
         for(int _injected_loop_counter = 0; _injected_loop_counter != (1 | int((injectionSwitch.y))); _injected_loop_counter ++)
          {
           if(false)
            {
             if((false))
              barrier();
            }
           else
            {
             barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
         if((false))
          barrier();
        }
      }
     while(false);
    }
   while(false);
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
     barrier();
     if((false))
      barrier();
    }
   if((false))
    {
     for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        {
         if(true)
          {
           barrier();
          }
         else
          {
          }
        }
      }
     if(true)
      {
       for(int _injected_loop_counter = (0 | (0)); _injected_loop_counter < (1 & int((injectionSwitch.y))); _injected_loop_counter ++)
        {
         if(false)
          {
          }
         else
          {
           barrier();
          }
         if((false))
          barrier();
        }
       if((false))
        barrier();
      }
     else
      {
      }
     if((false))
      barrier();
    }
  }
 else
  {
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
  }
 uint virtual_gid = GLF_merged4_0_1_11_1_1_11_2_1_14_3_1_12subgroup_idvirtual_gidworkgroup_baseworkgroup_id.z + GLF_merged4_0_1_11_1_1_11_2_1_14_3_1_12subgroup_idvirtual_gidworkgroup_baseworkgroup_id.x * GLF_merged4_0_1_13_1_1_8_2_1_17_3_1_13num_workgroupread_valsubgroup_local_idsubgroup_size.w + GLF_merged4_0_1_13_1_1_8_2_1_17_3_1_13num_workgroupread_valsubgroup_local_idsubgroup_size.z;
 if(((injectionSwitch.x > injectionSwitch.y)))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       barrier();
      }
     while(false);
    }
  }
 else
  {
   if((false))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    {
     if((! (! (true))))
      {
       if((false))
        barrier();
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 0; _injected_loop_counter != ((1 ^ 0) & 1); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       if((false))
        barrier();
      }
     else
      {
      }
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
    }
  }
 if((false))
  barrier();
 if(((injectionSwitch.x > injectionSwitch.y)))
  {
   if((false))
    barrier();
   if(false)
    {
    }
   else
    {
     if(true)
      {
       if((false))
        barrier();
       if(((false || (false))))
        {
         if((false))
          barrier();
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           barrier();
          }
         else
          {
          }
        }
       if((false))
        barrier();
       if((false))
        barrier();
      }
     else
      {
      }
    }
   if((false))
    barrier();
  }
 else
  {
   for(int _injected_loop_counter = 1; _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
    {
     if((false))
      {
       if((false))
        {
         for(int _injected_loop_counter = (((0 | 1) << (((((int(7)) | (int(7)))) >> 0))) >> (int(7))); _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
          {
           barrier();
          }
        }
       do
        {
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
        }
       while(false);
       barrier();
       if((false))
        barrier();
       if((false))
        barrier();
      }
     GLF_merged4_0_1_11_1_1_11_2_1_14_3_1_12subgroup_idvirtual_gidworkgroup_baseworkgroup_id.y = virtual_gid;
     for(int _injected_loop_counter = 1; _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(true)
      {
       for(int _injected_loop_counter = (75185 & ((0 >> (int(7))) >> (int(0)))); _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
        {
         if((false))
          {
           do
            {
             if((false))
              barrier();
            }
           while(false);
           if(true)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                barrier();
               barrier();
              }
             if((false))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                barrier();
               if(true)
                {
                 if((false))
                  barrier();
                 barrier();
                }
               else
                {
                 if((false))
                  barrier();
                }
              }
             if((false))
              barrier();
             for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
              {
               if((false))
                barrier();
               if(false)
                {
                 if((false))
                  {
                   if((false))
                    barrier();
                   barrier();
                  }
                }
               else
                {
                 barrier();
                 if((false))
                  barrier();
                 if(((! (! (false)))))
                  {
                   if(false)
                    {
                    }
                   else
                    {
                     barrier();
                    }
                  }
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               if((false))
                barrier();
              }
            }
           else
            {
             if((false))
              barrier();
             if((false))
              barrier();
            }
           if((false))
            {
             do
              {
               if(((injectionSwitch.x > injectionSwitch.y)))
                {
                }
               else
                {
                 if((false))
                  {
                   for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != 0; _injected_loop_counter --)
                    {
                     barrier();
                    }
                  }
                 barrier();
                 if((false))
                  {
                   if(false)
                    {
                    }
                   else
                    {
                     barrier();
                    }
                  }
                }
               if((false))
                barrier();
              }
             while(((injectionSwitch.x > injectionSwitch.y)));
             if((false || (false)))
              {
              }
             else
              {
               if((false))
                barrier();
              }
            }
           if((false))
            barrier();
           if((false))
            {
             if(true)
              {
               if((false))
                barrier();
               if(false)
                {
                 if((false))
                  barrier();
                }
               else
                {
                 if((false))
                  barrier();
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if((! (((! (false)) || false))))
                    {
                    }
                   else
                    {
                     barrier();
                     if((false))
                      barrier();
                    }
                  }
                 barrier();
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
              }
             else
              {
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if((false))
            barrier();
          }
        }
      }
     else
      {
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if((false))
  barrier();
 for(int _injected_loop_counter = (33860 & 0); _injected_loop_counter != 1; _injected_loop_counter ++)
  {
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = ((0 | 0) << (int(7))); _injected_loop_counter < 1; _injected_loop_counter ++)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
  }
 do
  {
   if(((((injectionSwitch.x > injectionSwitch.y)) || (false))))
    {
     if(false)
      {
       if(((false || (false))))
        barrier();
      }
     else
      {
       barrier();
      }
    }
  }
 while(false);
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 for(int _injected_loop_counter = 1; _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
  {
   atomicStore(write_val, uint(GLF_merged4_0_1_11_1_1_11_2_1_14_3_1_12subgroup_idvirtual_gidworkgroup_baseworkgroup_id.y), 4, 64, 0);
   if((false))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(false)
      {
       if(((! (! (false)))))
        {
         if((((((false) && true)) && true)))
          barrier();
         barrier();
        }
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       do
        {
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          barrier();
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
      }
     do
      {
       do
        {
         barrier();
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
         if((false))
          barrier();
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
      }
     while(false);
    }
   if((((false) || false)))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(((injectionSwitch.x > injectionSwitch.y)))
  {
  }
 else
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(false)
    {
     for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > 0; _injected_loop_counter --)
      {
       if((((false) && true)))
        {
         if(true)
          {
           if((false))
            barrier();
           for(int _injected_loop_counter = 1; _injected_loop_counter != (1 ^ (1 | 0)); _injected_loop_counter --)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             do
              {
               barrier();
              }
             while(false);
             for(int _injected_loop_counter = 0; _injected_loop_counter != ((1 << (int(6))) >> (((false ? (- 91676) : int(6))))); _injected_loop_counter ++)
              {
               if(((false || (false))))
                barrier();
              }
             if((false))
              barrier();
            }
          }
         else
          {
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(false)
        {
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if((false))
        barrier();
      }
     for(int _injected_loop_counter = ((0 & - 44067) ^ 0); _injected_loop_counter != 1; _injected_loop_counter ++)
      {
       if(((true && (false))))
        barrier();
       if((false))
        barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       do
        {
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(false);
       do
        {
         barrier();
        }
       while(false);
      }
     if((false))
      {
       do
        {
         barrier();
         if((false))
          barrier();
        }
       while(false);
      }
    }
   else
    {
     do
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
         for(int _injected_loop_counter = 1; _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
          {
           barrier();
          }
         do
          {
           if((false))
            barrier();
          }
         while(false);
        }
       do
        {
         if((false))
          barrier();
        }
       while(false);
       if((false))
        {
         if((false))
          {
           for(int _injected_loop_counter = 1; _injected_loop_counter != ((true ? 0 : (60019))); _injected_loop_counter --)
            {
             barrier();
            }
          }
         barrier();
         if((false))
          barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         do
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(true)
            {
             barrier();
            }
           else
            {
            }
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
         if((false))
          barrier();
        }
       if((false))
        barrier();
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if((false))
      barrier();
     if((false))
      barrier();
     do
      {
       for(int _injected_loop_counter = 0; _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
        {
         if(false)
          {
          }
         else
          {
           if((false))
            {
             if((false))
              barrier();
             barrier();
            }
          }
        }
       if((false))
        {
         for(int _injected_loop_counter = (37332 & 0); _injected_loop_counter < ((1 << (int(1))) >> (int(1))); _injected_loop_counter ++)
          {
           do
            {
             barrier();
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         if(true)
          {
           if((false))
            {
             if((false))
              barrier();
             barrier();
            }
           if(true)
            {
             for(int _injected_loop_counter = 0; _injected_loop_counter < (((true ? 0 : (17575))) | 1); _injected_loop_counter ++)
              {
               if((false))
                barrier();
              }
             if((false))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               do
                {
                 if((((false) && true)))
                  barrier();
                 for(int _injected_loop_counter = ((1 << (int(4))) >> (int(4))); _injected_loop_counter != 0; _injected_loop_counter --)
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if((false))
                    {
                     if((false))
                      barrier();
                     if(true)
                      {
                       if((false))
                        barrier();
                       if((false))
                        barrier();
                      }
                     else
                      {
                      }
                     barrier();
                    }
                   if((false))
                    barrier();
                  }
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   for(int _injected_loop_counter = 0; _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
                    {
                     if((false))
                      barrier();
                    }
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   do
                    {
                     if(false)
                      {
                      }
                     else
                      {
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       barrier();
                      }
                    }
                   while(false);
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
                  {
                   if((false))
                    barrier();
                  }
                 if((false))
                  barrier();
                 if(false)
                  {
                  }
                 else
                  {
                   if((false))
                    {
                     if((false))
                      {
                       if((false))
                        barrier();
                       if(false)
                        {
                        }
                       else
                        {
                         barrier();
                        }
                      }
                     barrier();
                    }
                   if((false))
                    barrier();
                   if(true)
                    {
                     if((false))
                      {
                       if((false))
                        {
                         if((false))
                          barrier();
                         if((false))
                          barrier();
                         barrier();
                        }
                       if((false))
                        {
                         if(((injectionSwitch.x < injectionSwitch.y)))
                          {
                           for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
                            {
                             for(int _injected_loop_counter = (8302 & 0); _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
                              {
                               if((((injectionSwitch.x > injectionSwitch.y))))
                                {
                                 if(false)
                                  {
                                  }
                                 else
                                  {
                                   if((false))
                                    {
                                     if((false))
                                      barrier();
                                     if(true)
                                      {
                                       if((((injectionSwitch.x > injectionSwitch.y))))
                                        barrier();
                                       barrier();
                                      }
                                     else
                                      {
                                      }
                                    }
                                   barrier();
                                  }
                                }
                               if((false))
                                barrier();
                              }
                             do
                              {
                               if((false))
                                {
                                 if((true && (true)))
                                  {
                                   barrier();
                                  }
                                 else
                                  {
                                  }
                                 if((((injectionSwitch.x > injectionSwitch.y))))
                                  barrier();
                                }
                               barrier();
                              }
                             while(false);
                             if((false))
                              barrier();
                             if((bool((bvec3(bvec3(bvec3(true, false, true)))))))
                              {
                               if((false))
                                barrier();
                              }
                             else
                              {
                              }
                             for(int _injected_loop_counter = (clamp(1, 1, 1)); _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
                              {
                               if((false))
                                {
                                 if((false))
                                  barrier();
                                 if((false))
                                  barrier();
                                 barrier();
                                }
                              }
                             if((false))
                              {
                               if(false)
                                {
                                }
                               else
                                {
                                 barrier();
                                }
                              }
                            }
                          }
                         else
                          {
                          }
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          {
                           if(((injectionSwitch.x < injectionSwitch.y)))
                            {
                             barrier();
                            }
                           else
                            {
                            }
                          }
                         do
                          {
                           if((((injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                           for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > (40671 & 0); _injected_loop_counter --)
                            {
                             if((((injectionSwitch.x > injectionSwitch.y))))
                              {
                               if((false))
                                barrier();
                               barrier();
                              }
                             if((((injectionSwitch.x > injectionSwitch.y))))
                              barrier();
                             if((false))
                              barrier();
                            }
                          }
                         while((bool(bvec2(false, false))));
                         if((false))
                          barrier();
                        }
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        {
                         if(true)
                          {
                           barrier();
                          }
                         else
                          {
                          }
                        }
                       if((false))
                        barrier();
                       if((false))
                        {
                         if(true)
                          {
                           barrier();
                           if((false))
                            barrier();
                          }
                         else
                          {
                           if((false))
                            barrier();
                          }
                        }
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       barrier();
                      }
                    }
                   else
                    {
                     if((false))
                      {
                       if(((injectionSwitch.x < injectionSwitch.y)))
                        {
                         barrier();
                        }
                       else
                        {
                        }
                      }
                    }
                   if((false))
                    {
                     do
                      {
                       if((false))
                        barrier();
                       if(true)
                        {
                         if((false))
                          barrier();
                         do
                          {
                           barrier();
                           if((false))
                            barrier();
                          }
                         while(false);
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          {
                           if((false))
                            barrier();
                           barrier();
                          }
                        }
                       else
                        {
                        }
                       if((false))
                        barrier();
                      }
                     while(false);
                     for(int _injected_loop_counter = 0; _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
                      {
                       if((false))
                        barrier();
                      }
                    }
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   do
                    {
                     if(false)
                      {
                      }
                     else
                      {
                       if((false))
                        barrier();
                       for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                        {
                         barrier();
                        }
                      }
                    }
                   while(((injectionSwitch.x > injectionSwitch.y)));
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    {
                     for(int _injected_loop_counter = 1; _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
                      {
                       if((false))
                        barrier();
                      }
                     if((false))
                      barrier();
                     do
                      {
                       if((((false) && true)))
                        barrier();
                      }
                     while(false);
                     do
                      {
                       barrier();
                      }
                     while((! (((! (false)) && true))));
                     if((false))
                      barrier();
                    }
                  }
                 if((false))
                  barrier();
                 if((false))
                  barrier();
                }
               while(false);
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
                {
                 if((false))
                  barrier();
                 if((false))
                  barrier();
                }
               for(int _injected_loop_counter = (0 << (int(8))); _injected_loop_counter != 1; _injected_loop_counter ++)
                {
                 if((false))
                  {
                   if((false))
                    barrier();
                   if((false))
                    {
                     if(false)
                      {
                      }
                     else
                      {
                       barrier();
                      }
                    }
                   for(int _injected_loop_counter = 0; _injected_loop_counter != (1 | 1); _injected_loop_counter ++)
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      {
                       if((false))
                        barrier();
                       barrier();
                      }
                     if((false))
                      barrier();
                     if(true)
                      {
                       if((false))
                        barrier();
                      }
                     else
                      {
                      }
                     if((false))
                      barrier();
                     if((false))
                      barrier();
                     if(((injectionSwitch.x > injectionSwitch.y)))
                      {
                      }
                     else
                      {
                       if((false))
                        barrier();
                       if((false))
                        {
                         if(((injectionSwitch.x > injectionSwitch.y)))
                          {
                           if((((injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                          }
                         else
                          {
                           barrier();
                           if(false)
                            {
                             if((false))
                              barrier();
                            }
                           else
                            {
                             if((false))
                              barrier();
                             if((((injectionSwitch.x > injectionSwitch.y))))
                              {
                               if((((injectionSwitch.x > injectionSwitch.y))))
                                barrier();
                               barrier();
                              }
                             if((false))
                              barrier();
                            }
                          }
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                        }
                      }
                     for(int _injected_loop_counter = ((1 << (int(7))) >> (int(7))); _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
                      {
                       if((false))
                        {
                         if((false))
                          barrier();
                         barrier();
                        }
                       if((false))
                        barrier();
                      }
                    }
                   if(true)
                    {
                     if(false)
                      {
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                      }
                     else
                      {
                       if((false))
                        {
                         if((false))
                          barrier();
                         barrier();
                        }
                       barrier();
                       if((false))
                        {
                         if((false))
                          barrier();
                         if(((injectionSwitch.x < injectionSwitch.y)))
                          {
                           barrier();
                          }
                         else
                          {
                          }
                         if((false))
                          barrier();
                        }
                      }
                    }
                   else
                    {
                    }
                   if((false))
                    barrier();
                   if((false))
                    barrier();
                   for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
                    {
                     for(int _injected_loop_counter = 1; _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
                      {
                       if((false))
                        barrier();
                       if((false))
                        {
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                         if((false))
                          {
                           if((false))
                            barrier();
                           if(false)
                            {
                            }
                           else
                            {
                             if((((injectionSwitch.x > injectionSwitch.y))))
                              barrier();
                             barrier();
                             if((false))
                              barrier();
                            }
                          }
                         if((false))
                          {
                           if((false))
                            {
                             if((((injectionSwitch.x > injectionSwitch.y))))
                              barrier();
                             barrier();
                            }
                           barrier();
                          }
                         if(false)
                          {
                          }
                         else
                          {
                           barrier();
                          }
                        }
                      }
                     if((false))
                      barrier();
                     if((false))
                      {
                       if((false))
                        barrier();
                       barrier();
                      }
                    }
                  }
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((false))
                  barrier();
                 barrier();
                }
               do
                {
                 if((false))
                  barrier();
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               while(false);
              }
            }
           else
            {
             if(((true && (false))))
              barrier();
            }
           if((false))
            {
             if((false))
              barrier();
             barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
           if((false))
            barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           barrier();
          }
        }
      }
     while(false);
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       barrier();
      }
     if(false)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   if((false))
    barrier();
   if(true)
    {
     if(((false || (false))))
      barrier();
    }
   else
    {
    }
  }
 uint read_val = atomicLoad(write_val, 4, 64, 0);
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      {
       if(true)
        {
         barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
      }
     barrier();
     if((false))
      barrier();
    }
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
    }
   else
    {
     if((false))
      barrier();
     if((false))
      {
       if(false)
        {
        }
       else
        {
         barrier();
        }
      }
    }
   if(false)
    {
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      {
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         barrier();
         if((false))
          barrier();
        }
      }
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 if((false))
  barrier();
 for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < 1; _injected_loop_counter ++)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   GLF_merged4_0_1_13_1_1_8_2_1_11_3_1_17num_workgroupread_valsubgroup_idsubgroup_local_id.y = read_val;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if((false))
        barrier();
       if((false))
        barrier();
      }
     else
      {
      }
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if((((false) && true)))
        barrier();
       barrier();
      }
     else
      {
      }
    }
  }
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 do
  {
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         do
          {
           if(false)
            {
            }
           else
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((false))
              barrier();
            }
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
         if((false))
          {
           do
            {
             barrier();
             if((false))
              barrier();
            }
           while(false);
          }
         barrier();
        }
       if(((bool(bvec2(false, true)))))
        barrier();
      }
     else
      {
       if(false)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(((bool(bvec3(false, false, false)))))
        {
         if((false))
          barrier();
         barrier();
        }
       if((false))
        {
         if(((bool(bvec3(false, false, true)))))
          barrier();
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           barrier();
          }
        }
       if(true)
        {
         barrier();
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(((bool(bvec2(false, true)))))
          barrier();
         for(int _injected_loop_counter = ((1 << (((false ? (- 9273) : int(2))))) >> (int(2))); _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
          {
           barrier();
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
      }
    }
  }
 while(((injectionSwitch.x > injectionSwitch.y)));
 GLF_merged4_0_1_13_1_1_8_2_1_17_3_1_13num_workgroupread_valsubgroup_local_idsubgroup_size.y = GLF_merged4_0_1_13_1_1_8_2_1_11_3_1_17num_workgroupread_valsubgroup_idsubgroup_local_id.y;
 if(true)
  {
   buf[GLF_merged4_0_1_11_1_1_11_2_1_14_3_1_12subgroup_idvirtual_gidworkgroup_baseworkgroup_id.y] = uint(subgroupAllEqual(GLF_merged4_0_1_13_1_1_8_2_1_17_3_1_13num_workgroupread_valsubgroup_local_idsubgroup_size.y));
   if((false))
    barrier();
  }
 else
  {
  }
 if((false))
  barrier();
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
