#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(((false) && true))
  {
  }
 else
  {
   for(int _injected_loop_counter = 1; _injected_loop_counter > (0 | int((injectionSwitch.x))); _injected_loop_counter --)
    {
     do
      {
       if(true)
        {
         if((bool((bool(bvec4(bool((true && (true))), true, true, true))))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         else
          {
          }
        }
       else
        {
        }
       if((false))
        continue;
      }
     while(false);
    }
  }
 uint subgroup_id = gl_SubgroupID;
 do
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 while(false);
 uint subgroup_size = gl_SubgroupSize;
 do
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 while(false);
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 if((false))
  {
   if(((injectionSwitch.x < ((true ? injectionSwitch.y : (dot(2290.2001, - 0.5)))))))
    {
     return;
    }
   else
    {
    }
  }
 if(true)
  {
   for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
    {
     do
      {
       if(true)
        {
         if((false))
          break;
         if((false))
          return;
         if((false))
          return;
        }
       else
        {
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
           return;
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         if(((((bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)))))))
          continue;
        }
      }
     while(false);
    }
  }
 else
  {
  }
 do
  {
   do
    {
     if(((((! (! ((injectionSwitch.x > injectionSwitch.y))))) || ((injectionSwitch.x > injectionSwitch.y)))))
      {
      }
     else
      {
       do
        {
         if((false))
          {
           for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > 0; _injected_loop_counter --)
            {
             return;
            }
          }
         if((false))
          continue;
        }
       while(false);
      }
    }
   while(false);
  }
 while(false);
 uint workgroup_id = ((gl_WorkGroupID.x) >> 0u);
 if((false || (((((false) || false)) || (! (! (false)))))))
  {
  }
 else
  {
   for(int _injected_loop_counter = 0; ((_injected_loop_counter < 1) || false); ((_injected_loop_counter ++) << int((injectionSwitch.x))))
    {
     for(int _injected_loop_counter = (((93524 & (min(0, 0))) << 0)); _injected_loop_counter != int((injectionSwitch.y)); (0 | (((((_injected_loop_counter ++) ^ 0)) + int((injectionSwitch.x))))))
      {
       if(false)
        {
        }
       else
        {
         if(((bool((! (! (bool(false))))))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if(false)
              {
              }
             else
              {
               return;
              }
            }
           return;
          }
        }
       if((false))
        break;
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             if(((! (! (false)))))
              return;
            }
           while(false);
           if((false))
            {
             if(((injectionSwitch.x < (max(injectionSwitch, injectionSwitch)).y)))
              {
               if((((((injectionSwitch.x > injectionSwitch.y))) || false)))
                {
                 if(((((false || (false))) && true)))
                  return;
                 continue;
                }
               return;
              }
             else
              {
              }
             if((false))
              break;
            }
           continue;
           if((((bool(bvec4((! (! ((injectionSwitch.x > injectionSwitch.y)))), true, true, ((injectionSwitch.x < injectionSwitch.y))))))))
            break;
          }
         return;
        }
       if((false))
        break;
       if((false))
        break;
      }
     do
      {
       if((false))
        {
         if((true && (true)))
          {
           if((false))
            continue;
           return;
          }
         else
          {
          }
        }
      }
     while(false);
     if((false))
      break;
    }
  }
 if((false))
  return;
 uint workgroup_base = workgroup_size * workgroup_id;
 if(((injectionSwitch.x > injectionSwitch.y)))
  {
  }
 else
  {
   if((false))
    {
     for(int _injected_loop_counter = ((clamp(((min(0, 0))), ((min(0, 0))), ((min(0, 0))))) / 1); _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(((true) && true))
        {
         for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
          {
           if((false))
            continue;
           for(int _injected_loop_counter = 1; ((((_injected_loop_counter > int(((clamp((vec2((mat3x4(mat3x4(mat3x4(injectionSwitch, 0.0, 1.0, 0.0, 1.0, abs(1.0), 0.0, 0.0, 1.0, 1.0, 0.0)))))), injectionSwitch, injectionSwitch)).x))) && true)) && true); _injected_loop_counter --)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                return;
               continue;
              }
             return;
             if((false))
              return;
            }
          }
         if((false))
          break;
         do
          {
           if((((((injectionSwitch.x > injectionSwitch.y)))) && true))
            {
             if(true)
              {
               return;
              }
             else
              {
              }
            }
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
        }
       else
        {
         if((false))
          break;
        }
      }
     if((false))
      {
       if((((! (! (bool(bool(((false) || false)))))))))
        {
         if((false))
          return;
         return;
        }
       do
        {
         return;
        }
       while(false);
      }
    }
  }
 uint virtual_gid = (min((((((((injectionSwitch.x > injectionSwitch.y)) ? (subgroup_local_id) : uint(uint(((clamp((max((~ (~ ((workgroup_base)))), (workgroup_base))), (workgroup_base), ((true ? (workgroup_base) : (129722u))))) << 0u)))))) / 1u)), ((workgroup_base) << 0u))) + subgroup_id * subgroup_size + subgroup_local_id;
 if((false))
  {
   if(true)
    {
     do
      {
       if(((! (! (bool(bvec3(false, ((injectionSwitch.x < injectionSwitch.y)), true)))))))
        {
         if((false))
          continue;
        }
       else
        {
         for(int _injected_loop_counter = 0; _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
          {
           return;
          }
        }
      }
     while(false);
    }
   else
    {
    }
  }
 atomicStore(write_val, (max(((uint(virtual_gid)) * 1u), ((uint(virtual_gid)) + (0u ^ 0u)))), 4, ((true ? 64 : (2754))), 0);
 uint read_val = atomicLoad(write_val, 4, 64, 0);
 if((bool(bvec2((false), false))))
  {
   for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
    {
     return;
    }
  }
 do
  {
   if((((((false) && true)) || false)))
    {
     if(true)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if(true)
        {
         do
          {
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             do
              {
               if(true)
                {
                 if(false)
                  {
                  }
                 else
                  {
                   if((((((((injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : (vec2(982.078, 89.39)))).x > injectionSwitch.y))))
                    return;
                   do
                    {
                     if(false)
                      {
                      }
                     else
                      {
                       return;
                      }
                    }
                   while(false);
                  }
                 if((false))
                  break;
                 if((((bool(bvec3(bool(bvec4(false, true, false, false)), false, true))))))
                  continue;
                }
               else
                {
                 if(((! (! (false)))))
                  break;
                }
              }
             while(false);
            }
          }
         while(((false) || false));
        }
       else
        {
        }
      }
     else
      {
      }
    }
  }
 while(false);
 if(false)
  {
  }
 else
  {
   buf[virtual_gid] = uint(subgroupAllEqual((((uint(uvec4(((((((max(min(((read_val) ^ 0u), (uint(uvec3(read_val, 1u, 0u)))), (0u + ((max((~ ((uint(uvec4(~ (min(((read_val) ^ 0u), (uint(uvec3(read_val, 1u, 0u))))), 0u, 1u, 0u))))), min(((read_val) ^ 0u), (uint(uvec3(read_val, 1u, 0u))))))))))) | 0u))) >> 0u), 1u, 0u, 0u))) >> 0u))));
  }
 for(int _injected_loop_counter = ((0 ^ (1)) & 1); _injected_loop_counter > int(((false ? (- 304.470) : ((1.0 * (injectionSwitch.x)))))); _injected_loop_counter --)
  {
   if((false))
    break;
   if(true)
    {
     if(true)
      {
       for(int _injected_loop_counter = int(((cos(0.0) * (injectionSwitch.x)))); (((bool(bvec4(_injected_loop_counter != 1, true, true, true)))) && true); _injected_loop_counter ++)
        {
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
           return;
          }
         if((false))
          break;
        }
      }
     else
      {
      }
     if((((false) && true)))
      break;
    }
   else
    {
    }
  }
 if((false))
  return;
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
