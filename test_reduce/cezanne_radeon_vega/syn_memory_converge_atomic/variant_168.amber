#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((false))
  barrier();
 if((false))
  {
   if(((bool(bool(false)))))
    barrier();
   for(int _injected_loop_counter = 1; _injected_loop_counter > (max((0 & (~ (~ (- 83168)))), (((0 & - 83168)) | ((0 & - 83168))))); _injected_loop_counter --)
    {
     barrier();
    }
  }
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   return;
  }
 if(((! (! (false)))))
  barrier();
 if(((((((clamp((clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x, (clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x, (clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x)) > injectionSwitch.y))) && true)))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    return;
   if((false))
    {
     if((false))
      barrier();
     return;
     if((false))
      barrier();
    }
   return;
   if((false))
    barrier();
   for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
    {
     if(((false || (false))))
      barrier();
     if((false))
      barrier();
    }
   if((false))
    return;
   if(false)
    {
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       barrier();
      }
    }
   if((false))
    return;
  }
 if((false))
  barrier();
 if((false))
  {
   if((false))
    {
     if((false))
      {
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         barrier();
        }
      }
     do
      {
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         return;
        }
      }
     while(false);
    }
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
    }
   else
    {
     if((false))
      return;
    }
   for(int _injected_loop_counter = (1 & 1); _injected_loop_counter > 0; _injected_loop_counter --)
    {
     if(((! (! (false)))))
      {
       if((true && ((! (! ((bool(bvec3(true, false, false)))))))))
        {
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
         if(false)
          {
          }
         else
          {
           return;
           if((false))
            barrier();
          }
         do
          {
           for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
            {
             do
              {
               if((false))
                {
                 if((false))
                  barrier();
                 barrier();
                }
              }
             while(false);
            }
          }
         while((((mix(float((- 5.1)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y)));
         if((false))
          continue;
        }
       else
        {
        }
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if((false))
    barrier();
  }
 if((false))
  {
   if(true)
    {
     if((false))
      {
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         return;
        }
       else
        {
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   else
    {
    }
   if(true)
    {
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
    }
  }
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(false)
  {
  }
 else
  {
   if(false)
    {
    }
   else
    {
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     if((false))
      barrier();
    }
  }
 if((false))
  barrier();
 if((false))
  {
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     barrier();
     if((false))
      barrier();
    }
   else
    {
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uint subgroup_size = gl_SubgroupSize;
 do
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 while(((injectionSwitch.x > injectionSwitch.y)));
 if(((false || ((bool(bvec2(false, true)))))))
  {
   if((bool(bvec3((bool(bvec4((false), true, true, false))), true, false))))
    {
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(false)
        {
        }
       else
        {
         barrier();
        }
      }
     return;
     if((false))
      barrier();
    }
   if(((! (! (false)))))
    barrier();
   if(((false) && true))
    {
    }
   else
    {
     return;
    }
  }
 if(((! (! (false)))))
  {
   if((false))
    barrier();
   return;
  }
 if(true)
  {
   if((false))
    return;
  }
 else
  {
   if((false))
    barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((true && (((injectionSwitch.x > (mix(float((1.9)), float(injectionSwitch.y), bool(true))))))))
  {
   do
    {
     if((false))
      {
       if(((! (! (false)))))
        barrier();
       for(int _injected_loop_counter = 1; _injected_loop_counter > (0 ^ (0 | 0)); _injected_loop_counter --)
        {
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           barrier();
          }
        }
      }
    }
   while(false);
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     return;
     if((false))
      barrier();
    }
  }
 else
  {
   if((false))
    {
     if((false))
      barrier();
     if(((! ((bool(bvec2((bool(bool(! (false)))), false)))))))
      {
       if(((bool(bvec4((! (! (false))), false, ((injectionSwitch.x < injectionSwitch.y)), ((injectionSwitch.x < injectionSwitch.y)))))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         for(int _injected_loop_counter = 1; _injected_loop_counter != (int((injectionSwitch.x)) >> (int(1))); _injected_loop_counter --)
          {
           barrier();
          }
        }
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         barrier();
        }
      }
     if((((! (! ((false)))) || false)))
      return;
     if((false))
      barrier();
     for(int _injected_loop_counter = (((0) - 0) ^ ((clamp(1, 1, 1)))); _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
      {
       if(true)
        {
         return;
         if((false))
          {
           if(true)
            {
             if(((false) && true))
              {
              }
             else
              {
               return;
              }
            }
           else
            {
            }
          }
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
         if((false))
          {
           for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > 0; _injected_loop_counter --)
            {
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
              }
             else
              {
               return;
              }
            }
          }
         if((((! (! (((clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > ((false ? (5194.2793) : injectionSwitch.y)))))))))
          {
           if((false))
            {
             if(true)
              {
               barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             else
              {
              }
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             return;
            }
           barrier();
           if((false))
            barrier();
          }
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           return;
          }
        }
      }
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           return;
          }
         while(((injectionSwitch.x > (clamp(((true ? injectionSwitch : (injectionSwitch))), injectionSwitch, (clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).y)));
        }
       return;
      }
     if(((bool(((((bool(false)) && true)) && true)))))
      {
       if((false))
        {
         if(false)
          {
          }
         else
          {
           barrier();
          }
        }
       if((false))
        barrier();
       if(true)
        {
         if((false))
          barrier();
         barrier();
        }
       else
        {
         if((false))
          return;
        }
       if((false))
        barrier();
      }
     if((false))
      return;
     if(((((false || (injectionSwitch.x > injectionSwitch.y))))))
      {
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        return;
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(false)
          {
          }
         else
          {
           if((((! (! ((((false)) || false))))) || ((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         for(int _injected_loop_counter = (~ (~ (0))); _injected_loop_counter < 1; _injected_loop_counter ++)
          {
           if(((((vec2(1.0, 1.0) * (injectionSwitch)).x > ((injectionSwitch) * (transpose((mat2(((mat4(transpose((transpose(transpose(mat2(1.0))))))) - mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))))).y))))
            {
             if((false))
              return;
             barrier();
             if((false))
              barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         barrier();
        }
       return;
       if((false))
        barrier();
       for(int _injected_loop_counter = 0; _injected_loop_counter != ((min(1, ((- 46559 & 0) ^ (1)))) | 1); _injected_loop_counter ++)
        {
         if((false))
          barrier();
        }
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 0; _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       if((false))
        barrier();
       if(true)
        {
         if((false))
          return;
         if(((false) && true))
          {
          }
         else
          {
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             if((false))
              return;
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           else
            {
             for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
              {
               if(false)
                {
                }
               else
                {
                 if((false))
                  {
                   if(true)
                    {
                     return;
                    }
                   else
                    {
                    }
                  }
                }
               if((false))
                barrier();
              }
            }
          }
         if((false))
          return;
        }
       else
        {
        }
       if(false)
        {
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             barrier();
            }
           while((((vec2(mat2x4(injectionSwitch, sin(0.0), 0.0, (injectionSwitch.x), 1.0, sin(0.0), 0.0))).x > injectionSwitch.y)));
          }
        }
      }
     if(false)
      {
       if((false))
        barrier();
      }
     else
      {
       if((false))
        barrier();
       for(int _injected_loop_counter = ((1 << (((int(1)) ^ 0))) >> ((max(int(1), int(1))))); _injected_loop_counter > 0; ((_injected_loop_counter --) << 0))
        {
         if(((((! (! (injectionSwitch.x > ((injectionSwitch.y) - 0.0))))))))
          barrier();
        }
      }
    }
   if((false))
    barrier();
   if(((bool(bvec4(((injectionSwitch.x > injectionSwitch.y)), ((injectionSwitch.x > ((true ? (mix(vec2((injectionSwitch)[0], (8466.4402)), vec2((3511.4738), (injectionSwitch)[1]), bvec2(false, true))).y : (- 4.5))))), false, true)))))
    return;
   if((((false) && true)))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     return;
     if((false))
      barrier();
    }
  }
 if(((! (((! (false)) && true)))))
  barrier();
 uint num_workgroup = ((gl_NumWorkGroups.x) | (gl_NumWorkGroups.x));
 do
  {
   if((false))
    barrier();
   if(((! (! (false)))))
    {
     if((bool(bvec2(false, (((true && (injectionSwitch.x < injectionSwitch.y))))))))
      {
      }
     else
      {
       barrier();
      }
     if((false))
      barrier();
    }
   if((false))
    barrier();
   do
    {
     if(((bool((true && (bool((true && (false)))))))))
      {
       if(true)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
       if((false))
        barrier();
       return;
      }
     if((true && ((false))))
      continue;
     if((((((! (! ((true && ((injectionSwitch.x > (vec2(0.0, 0.0) + ((((((min(injectionSwitch, injectionSwitch))) + vec2(0.0, 0.0))) * vec2((mix(float(1.0), float((881.142)), bool(false))), 1.0)))).y))))))) || false))))
      {
       if((false))
        continue;
       do
        {
         if((false))
          break;
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           break;
          }
         if(false)
          {
          }
         else
          {
           if(((! (! (false)))))
            {
             if((false))
              barrier();
             break;
            }
           if((false))
            {
             if(false)
              {
              }
             else
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
           if((false))
            barrier();
           return;
          }
         if((false))
          {
           for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
            {
             barrier();
            }
          }
         if((false))
          break;
         if((false))
          {
           if((false))
            barrier();
           break;
          }
         if(((bool(bvec4(false, false, true, false)))))
          continue;
        }
       while(((bool(bvec3((false || ((injectionSwitch.x > (vec2((((mat3((transpose(transpose(mat3x4(mat3(injectionSwitch, 0.0, 1.0, tan(0.0), determinant(mat4(0.0, 1.0, 0.0, abs(1.0), 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, determinant(mat3(1.0, 0.0, exp(0.0), 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), determinant(mat2(1.0, 0.0, 1.0, 1.0)), 0.0, 0.0, round(length(normalize(((clamp((vec3(1.0, 1.0, 1.0)) * mat3(1.0), (vec3(1.0, 1.0, 1.0)) * mat3(1.0), (vec3(1.0, 1.0, 1.0)) * mat3(1.0))))))))), 0.0))))))) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))).y))), true, true)))));
      }
     for(int _injected_loop_counter = 0; _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
      {
       if((false))
        barrier();
      }
     if(((! (! (bool(bvec3((false), true, true)))))))
      barrier();
    }
   while(((((true && ((! (! ((! (! (bool(((bool(((false) || false))) || false))))))))))) && true)));
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 while(((false) || false));
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    {
     for(int _injected_loop_counter = int((injectionSwitch.y)); (true && (_injected_loop_counter != 0)); _injected_loop_counter --)
      {
       barrier();
      }
    }
   for(int _injected_loop_counter = (1 | 0); _injected_loop_counter > 0; _injected_loop_counter --)
    {
     if(((true && (false))))
      barrier();
     if(((! (! (((((bool(bvec4(bool(bvec4(false, false, true, true)), true, true, (((mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2((8156.2437), (30.58)), bvec2(false, false))).x > injectionSwitch.y)))))))) || false)))))
      {
       if((false))
        barrier();
       barrier();
      }
     return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(((true && (false))))
      {
       if((false))
        {
         do
          {
           barrier();
          }
         while(false);
        }
       barrier();
      }
     for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
      {
       if((false))
        {
         do
          {
           return;
          }
         while(false);
        }
      }
    }
  }
 uint workgroup_size = (clamp((min(gl_WorkGroupSize, ((clamp(uvec3(1u, 1u, (uint(uvec2(((1u) + (0u >> (uint(7u)))), 1u)))), uvec3(1u, 1u, 1u), uvec3(1u, 1u, 1u))) * (gl_WorkGroupSize)))), (min(gl_WorkGroupSize, ((clamp(uvec3(1u, 1u, (uint(uvec2(((1u) + (0u >> (uint(7u)))), 1u)))), uvec3(1u, 1u, 1u), uvec3(1u, 1u, 1u))) * (gl_WorkGroupSize)))), (min(gl_WorkGroupSize, ((clamp(uvec3(1u, 1u, (uint(uvec2(((1u) + (0u >> (uint(7u)))), 1u)))), uvec3(1u, 1u, 1u), uvec3(1u, 1u, 1u))) * (gl_WorkGroupSize)))))).x;
 if((((false || ((! ((! (! (! (bool(bvec2((false || ((((max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)))), ((injectionSwitch.x < injectionSwitch.y)))))))))))))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_id = (uvec3((uvec3((injectionSwitch.x), (injectionSwitch.x), (injectionSwitch.x)) + ((~ (~ (gl_WorkGroupID)))))[0], (((uvec3(((uvec3(gl_WorkGroupID)) | uvec3(0u, 0u, 0u)))) << uvec3(0u, 0u, 0u)))[1], gl_WorkGroupID[2])).x;
 for(int _injected_loop_counter = (1 ^ 1); _injected_loop_counter < (max((1 ^ 0), (1 ^ 0))); _injected_loop_counter ++)
  {
   if(true)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(false)
        {
        }
       else
        {
         barrier();
         if((false))
          barrier();
        }
      }
     if((false))
      {
       if((false))
        {
         if((false))
          barrier();
         return;
        }
       if(((((! ((bool(bvec2(! (bool(bvec2((! ((! (! (! ((injectionSwitch.x > injectionSwitch.y))))))), true))), false)))))))))
        {
         do
          {
           for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
            {
             barrier();
             if((false))
              barrier();
            }
          }
         while(false);
        }
       if(((! ((bool(bvec3(! (false), true, true)))))))
        {
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           if(((((injectionSwitch.x > injectionSwitch.y))) && ((injectionSwitch.x < injectionSwitch.y))))
            {
            }
           else
            {
             if((false))
              barrier();
             if(((bool((bvec2(bvec4((bvec2(bvec2(bvec2((false || (false)), true)))), false, ((injectionSwitch.x < injectionSwitch.y)))))))))
              {
               if(false)
                {
                }
               else
                {
                 if(true)
                  {
                   barrier();
                  }
                 else
                  {
                  }
                 if((false))
                  barrier();
                }
              }
             if((false))
              {
               if((false))
                barrier();
               return;
              }
             for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
              {
               if((((! (((bool(bvec4(false, true, ((injectionSwitch.x < injectionSwitch.y)), true))) || ((true && (! (((! (! (false)))) && true))))))))))
                return;
              }
            }
          }
         else
          {
          }
         if((! (! ((true && ((((injectionSwitch.x > injectionSwitch.y)))))))))
          return;
         if((false))
          {
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             if((false))
              barrier();
             if(((! ((bool(bvec3(! ((true && (false))), true, false)))))))
              {
               if((false))
                barrier();
               barrier();
              }
            }
           do
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
              {
               if((false))
                break;
               if((false))
                barrier();
               return;
               if((false))
                barrier();
               if((false))
                continue;
               if(((bool(bvec3((! (! (false))), false, false)))))
                barrier();
              }
            }
           while((bool(bvec3((false || (false)), ((injectionSwitch.x < injectionSwitch.y)), false))));
           if((false))
            barrier();
          }
         barrier();
         if(((((bool(((bvec2(bvec4(bvec2(bvec3(bvec2((! (! (false))), false), false)), true, true)))))) || false))))
          barrier();
        }
       for(int _injected_loop_counter = ((1 << (int(0))) >> (int(0))); (false || (_injected_loop_counter != ((0 << (int(4))) << (int(5))))); _injected_loop_counter --)
        {
         if((((bool(bvec3(! (! (false)), false, true))))))
          {
           if((false))
            {
             for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != (((0) - 0) ^ (0 >> ((int(ivec2(int(8), 0)))))); _injected_loop_counter --)
              {
               if((((((injectionSwitch.x > injectionSwitch.y) && true)))))
                {
                 if((false))
                  return;
                 if(false)
                  {
                   if((false))
                    barrier();
                  }
                 else
                  {
                   do
                    {
                     barrier();
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      return;
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     if((((false) || false)))
                      barrier();
                     if((false))
                      barrier();
                    }
                   while(((injectionSwitch.x > injectionSwitch.y)));
                  }
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   do
                    {
                     barrier();
                    }
                   while(((injectionSwitch.x > injectionSwitch.y)));
                  }
                }
              }
             if((false))
              {
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(((! (! (bool(bvec4((false), false, false, true)))))))
                  {
                   if((false))
                    barrier();
                   return;
                  }
                 if((false))
                  barrier();
                 if((false))
                  {
                   if((false))
                    barrier();
                   return;
                  }
                 barrier();
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               do
                {
                 if(true)
                  {
                   if((false))
                    return;
                  }
                 else
                  {
                  }
                }
               while(false);
               for(int _injected_loop_counter = (((((0 << (int(6)))) ^ 0)) + 0); _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
                {
                 if((false))
                  barrier();
                }
               do
                {
                 if(false)
                  {
                   if((false))
                    {
                     do
                      {
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       barrier();
                      }
                     while(false);
                    }
                   if((false))
                    barrier();
                   if((bool(bvec2((false), false))))
                    {
                     if(((((false || ((true && (false))))) || false)))
                      {
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        {
                         if((false))
                          barrier();
                         return;
                        }
                       barrier();
                      }
                     if((((injectionSwitch.x > (vec2((mat3x2(((true ? mat3(mat3x2(injectionSwitch, length(0.0), 0.0, length((clamp(vec4(0.0, 0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0)))), 1.0)) : (mat3(- 537.015, - 77.53, 55.44, 873.668, - 511.773, 0.2, 56.06, 2.5, - 27.50)))))))).y))))
                      {
                       do
                        {
                         do
                          {
                           barrier();
                           if((false))
                            barrier();
                          }
                         while((false || (false)));
                        }
                       while((((float(((vec2(injectionSwitch.x, (injectionSwitch.y))) * mat2(1.0)))) > (clamp(injectionSwitch.y, (mix(float((- 7.1)), float(injectionSwitch.y), bool(true))), injectionSwitch.y)))));
                      }
                     if(true)
                      {
                       if((false))
                        return;
                      }
                     else
                      {
                      }
                     if(((injectionSwitch.x > injectionSwitch.y)))
                      {
                      }
                     else
                      {
                       if(true)
                        {
                         if(true)
                          {
                           if((false))
                            barrier();
                          }
                         else
                          {
                          }
                         if(true)
                          {
                           if((false))
                            barrier();
                          }
                         else
                          {
                          }
                         barrier();
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                         if((false))
                          barrier();
                        }
                       else
                        {
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                         if((false))
                          {
                           if(true)
                            {
                             barrier();
                            }
                           else
                            {
                            }
                          }
                         for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
                          {
                           if((((injectionSwitch.x > injectionSwitch.y))))
                            return;
                          }
                        }
                      }
                    }
                   if((true && (((((((injectionSwitch.x < injectionSwitch.y))) && true)) || false))))
                    {
                     if((false))
                      {
                       if((((false) || false)))
                        barrier();
                       barrier();
                      }
                    }
                   else
                    {
                    }
                   if((false))
                    barrier();
                   if((false))
                    return;
                   if(((((! ((false || (! (injectionSwitch.x > injectionSwitch.y)))))))))
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     barrier();
                    }
                  }
                 else
                  {
                   if((false))
                    barrier();
                   return;
                   if((false))
                    {
                     if((false))
                      {
                       for(int _injected_loop_counter = (1 | 0); (! ((false || ((bool(bvec2(! (_injected_loop_counter > 0), true))))))); _injected_loop_counter --)
                        {
                         if((false))
                          {
                           if((false))
                            barrier();
                           barrier();
                          }
                        }
                       barrier();
                      }
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(true)
                        {
                         return;
                        }
                       else
                        {
                        }
                       if((false))
                        barrier();
                      }
                     for(int _injected_loop_counter = 1; _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
                      {
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        {
                         if((false))
                          barrier();
                         return;
                        }
                       if((false))
                        {
                         if(((! (! ((bool(bvec2(((injectionSwitch.x > injectionSwitch.y)), true))))))))
                          {
                           if(false)
                            {
                            }
                           else
                            {
                             barrier();
                            }
                          }
                         break;
                        }
                       return;
                      }
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(((((false || (((injectionSwitch.x > injectionSwitch.y))))) && true)))
                        barrier();
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        return;
                       return;
                      }
                    }
                   if((false))
                    {
                     if((false))
                      {
                       if((false))
                        return;
                       barrier();
                      }
                     return;
                    }
                   if(((injectionSwitch.x < injectionSwitch.y)))
                    {
                     for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != 0; _injected_loop_counter --)
                      {
                       if(((! (! (false)))))
                        {
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                         barrier();
                        }
                      }
                    }
                   else
                    {
                    }
                  }
                }
               while(false);
              }
             if((false))
              {
               if((false))
                {
                 if((false))
                  barrier();
                 return;
                }
               barrier();
              }
             if(((false) && true))
              {
               if(((bool(bvec4(false, true, true, true)))))
                return;
               if(((((1.0 * ((clamp(((injectionSwitch.x) - 0.0), injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y))))
                return;
               for(int _injected_loop_counter = (0 << (int(0))); _injected_loop_counter < (1 | int((injectionSwitch.y))); _injected_loop_counter ++)
                {
                 if((false))
                  {
                   if(((false || (((injectionSwitch.x > injectionSwitch.y))))))
                    barrier();
                   barrier();
                  }
                 if((false))
                  {
                   if((false))
                    {
                     if(false)
                      {
                      }
                     else
                      {
                       barrier();
                      }
                    }
                   return;
                  }
                }
              }
             else
              {
               if((false))
                {
                 if((false))
                  {
                   for(int _injected_loop_counter = ((0 >> (int(7))) >> ((0 ^ (int(2))))); _injected_loop_counter != 1; _injected_loop_counter ++)
                    {
                     if((false))
                      barrier();
                     barrier();
                    }
                  }
                 if(false)
                  {
                  }
                 else
                  {
                   for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
                    {
                     if((false))
                      {
                       if(false)
                        {
                        }
                       else
                        {
                         return;
                         if((((false) || false)))
                          barrier();
                        }
                      }
                    }
                   if((false))
                    barrier();
                  }
                 do
                  {
                   if((false))
                    barrier();
                   if((false))
                    barrier();
                  }
                 while(((false) && true));
                 return;
                 if(((bool(bvec2(false, false)))))
                  barrier();
                 if((false))
                  barrier();
                }
               if(true)
                {
                 barrier();
                }
               else
                {
                }
               if((false))
                barrier();
               if((false))
                return;
               if((false))
                barrier();
              }
            }
           if((false || (true)))
            {
             do
              {
               if(false)
                {
                }
               else
                {
                 if(((((false || ((mat2((mix(float(((80.64 - - 28.16))), float(1.0), bool(((injectionSwitch.x < injectionSwitch.y)))))) * (injectionSwitch)).x > ((clamp((max(vec2(0.0, 0.0) + (injectionSwitch), vec2(0.0, 0.0) + (injectionSwitch))), (vec2(0.0, 0.0) + (vec2(0.0, 0.0) + ((clamp(injectionSwitch, injectionSwitch, injectionSwitch))))), vec2(0.0, 0.0) + (injectionSwitch)))).y))))))
                  {
                   if(true)
                    {
                     if(false)
                      {
                      }
                     else
                      {
                       barrier();
                      }
                     if((((false) && true)))
                      {
                       if((false))
                        barrier();
                       if((false))
                        barrier();
                       barrier();
                       if(((! (! (false)))))
                        barrier();
                      }
                    }
                   else
                    {
                    }
                  }
                }
              }
             while((((((bool(bvec3(false, true, true)))) || false)) || ((injectionSwitch.x > injectionSwitch.y))));
             if((((((false)) && true)) || false))
              barrier();
             if(true)
              {
               if((((false) || false)))
                barrier();
              }
             else
              {
               if((false))
                barrier();
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
               return;
              }
            }
           else
            {
             if((bool(bvec2((false), ((injectionSwitch.x > injectionSwitch.y))))))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(false)
                {
                 if((false))
                  barrier();
                }
               else
                {
                 if((false))
                  barrier();
                 return;
                }
              }
            }
           if(true)
            {
             if((false))
              barrier();
             return;
            }
           else
            {
            }
           if((false))
            barrier();
           do
            {
             if((false))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((false))
              barrier();
             do
              {
               if((false))
                {
                 for(int _injected_loop_counter = 0; (! (((! (_injected_loop_counter != 1)) || false))); _injected_loop_counter ++)
                  {
                   do
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     if((false))
                      {
                       if((false))
                        barrier();
                       return;
                      }
                    }
                   while(false);
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if(((((false ? ((false ? vec2(- 4.9, 55.20) : injectionSwitch)) : (mat2(1.0) * (injectionSwitch)))).x < injectionSwitch.y)))
                    {
                     return;
                    }
                   else
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                  }
                }
              }
             while(false);
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                barrier();
               barrier();
              }
             if((false))
              break;
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           while(false);
           if(false)
            {
             if((false))
              barrier();
            }
           else
            {
             for(int _injected_loop_counter = (1 ^ 1); _injected_loop_counter < (max(1, 1)); _injected_loop_counter ++)
              {
               if(((bool((((bvec3(bvec4(bvec3(bvec4(bvec3(bvec4(bvec3(false, false, false), false)), true)), false)))))))))
                barrier();
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
        }
       if((((false || (! (! (((injectionSwitch.x > injectionSwitch.y)))))))))
        barrier();
       if((((false)) || false))
        {
         if((false))
          barrier();
         return;
        }
       if((false))
        {
         if((false))
          return;
         do
          {
           return;
          }
         while((((injectionSwitch.x < injectionSwitch.y)) && (false)));
         for(int _injected_loop_counter = ((1 << (int(4))) >> (((int(4)) | 0))); _injected_loop_counter != ((0) / 1); _injected_loop_counter --)
          {
           if((false))
            barrier();
           if((false))
            barrier();
          }
         if((bool(bvec3(((bool(bvec2(false, true)))), true, true))))
          {
           if((false))
            barrier();
           if((false))
            barrier();
           barrier();
          }
        }
       if(((false) && true))
        {
        }
       else
        {
         if((((false) && true)))
          barrier();
         do
          {
           if((false))
            return;
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
        }
       if((false))
        {
         if((false))
          {
           if((false))
            return;
           barrier();
          }
         return;
        }
       for(int _injected_loop_counter = 1; _injected_loop_counter > (clamp(0, 0, (0 | (((((max((0), ((((injectionSwitch.x < injectionSwitch.y)) ? (0) : ((_injected_loop_counter - _injected_loop_counter))))))) | 0) | (0)))))); _injected_loop_counter --)
        {
         if((false))
          barrier();
         if((false))
          break;
         return;
         if((false))
          barrier();
        }
       if((false))
        barrier();
       if((false))
        {
         if((false))
          return;
         return;
        }
      }
     if((false))
      barrier();
     if((false))
      barrier();
     if((false))
      return;
     if(((false || (false))))
      return;
    }
   else
    {
    }
  }
 if((((false) && true)))
  {
   if((false))
    barrier();
   return;
  }
 if(((true && (! (! ((false)))))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   if(((bool(((bool(((injectionSwitch.x > injectionSwitch.y)))) || false)))))
    barrier();
   if(((false) && true))
    {
    }
   else
    {
     barrier();
    }
   if((false))
    barrier();
  }
 if((false))
  barrier();
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(true)
      {
       barrier();
      }
     else
      {
      }
    }
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
    }
   else
    {
     if((false || (((true) && true))))
      {
       do
        {
         if((false))
          return;
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
      }
     else
      {
      }
    }
   if(false)
    {
    }
   else
    {
     return;
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_base = workgroup_size * workgroup_id;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if(false)
  {
  }
 else
  {
   if((false))
    {
     if((false))
      barrier();
     if((false))
      {
       if(false)
        {
        }
       else
        {
         barrier();
         if(((bool(bvec4(false, true, false, true)))))
          barrier();
        }
      }
     do
      {
       if((false))
        barrier();
       if((! (! ((false)))))
        {
         if(((false || (false))))
          barrier();
         if((bool(bvec4(true, false, false, false))))
          {
           if((false))
            barrier();
          }
         else
          {
          }
         barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     if((((((false || (injectionSwitch.x > injectionSwitch.y))) || false))))
      {
      }
     else
      {
       if((false))
        barrier();
       return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        {
         if((! (! (true))))
          {
           barrier();
           if((false))
            barrier();
          }
         else
          {
          }
        }
      }
     do
      {
       if((((((bool(((bool((false) && true)) && true)))) && true))))
        {
         if((false))
          barrier();
         do
          {
           if((false))
            barrier();
           do
            {
             return;
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
          }
         while(false);
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     while(false);
    }
  }
 uint virtual_gid = (0u | (((((max(0u | ((~ (~ (((((workgroup_base) | (((((! (! (false))) ? ((min(workgroup_base, (clamp(workgroup_base, workgroup_base, workgroup_base))))) : (true ? workgroup_base : (workgroup_base))))))))) | ((((workgroup_base) | (((true ? workgroup_base : (workgroup_base)))))))))) + subgroup_id * subgroup_size + subgroup_local_id), 0u | ((~ (~ (((((workgroup_base) | (((((! (! (false))) ? ((min(workgroup_base, (clamp(workgroup_base, workgroup_base, workgroup_base))))) : (true ? workgroup_base : (workgroup_base))))))))) | ((((workgroup_base) | (((true ? workgroup_base : (workgroup_base)))))))))) + subgroup_id * subgroup_size + subgroup_local_id)))) / 1u))));
 if((false))
  barrier();
 if(((true && (false))))
  barrier();
 if(((! (! (false || (((((vec2((transpose(((true ? transpose(mat4x3(injectionSwitch, determinant(mat2(1.0, 1.0, 0.0, 1.0)), 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, abs(1.0), round(length((min(normalize(1.0), normalize(1.0))))), (dot(vec3(1.0, 1.0, cos(0.0)), vec3(0.0, 0.0, 0.0))))) : (mat3x4(6.9, 2.8, - 1484.1168, - 6.7, - 4.7, - 3.4, 77.97, - 286.279, - 77.16, 72.90, 7583.2962, 6791.5842)))))))).x > injectionSwitch.y)))))))))
  {
   if((false))
    barrier();
   if(((injectionSwitch.x < ((false ? (((- 7.9) * 1.0)) : (min(injectionSwitch.y, injectionSwitch.y)))))))
    {
     if((((((true && (((log(1.0) + (((injectionSwitch.x) * 1.0))) > injectionSwitch.y)))))) || false))
      {
       if((((injectionSwitch.x > (min((((((((bool(bvec3(bool(bvec4(bool(bvec3(true, false, true)), false, false, false)), true, true)))))) || false) ? injectionSwitch.y : (- 30.94))), (0.0 + ((clamp(injectionSwitch.y, injectionSwitch.y, (float(mat2x3(injectionSwitch.y, 0.0, 0.0, 0.0, (mix(float((- 9.0)), float((float(mat4(0.0, 0.0, 0.0, 1.0, 0.0, (min(1.0, 1.0)), 0.0, 1.0, 0.0, length((min(vec3((float(((vec2(((0.0) - 0.0), 0.0)) * vec2(1.0, 1.0)))), 0.0, 0.0), vec3((float(((vec2(((0.0) - 0.0), 0.0)) * vec2(1.0, 1.0)))), 0.0, 0.0)))), ((0.0) / 1.0), 0.0, 0.0, 0.0, (max(1.0, 1.0)), 0.0)))), bool(true))), 0.0)))))))))))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         for(int _injected_loop_counter = ((clamp(1 & 1, 1 & 1, 1 & ((1) >> 0)))); _injected_loop_counter > int((mix(float((922.301)), float(((true ? (clamp((injectionSwitch.x), (injectionSwitch.x), (injectionSwitch.x))) : (8.4)))), (false || (bool(true)))))); _injected_loop_counter --)
          {
           return;
           if((false))
            barrier();
          }
        }
       return;
      }
     do
      {
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if((false))
          return;
        }
       else
        {
        }
      }
     while(false);
    }
   else
    {
     if(false)
      {
      }
     else
      {
       if(((false || (false))))
        barrier();
      }
    }
   return;
   if((false))
    barrier();
  }
 if(((injectionSwitch.x < (mix(vec2(((+ 354.267)), (3.8)), vec2((float(mat3x4((injectionSwitch)[0], 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0))), (injectionSwitch)[1]), bvec2(true, ((injectionSwitch.x < injectionSwitch.y))))).y)))
  {
   if(true)
    {
     if((false))
      barrier();
     if((false))
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if((false))
          barrier();
         barrier();
        }
       else
        {
        }
      }
    }
   else
    {
     if((false))
      barrier();
    }
  }
 else
  {
  }
 if(((true && (false))))
  barrier();
 for(int _injected_loop_counter = (int((injectionSwitch.x)) << (int(((8) | 0)))); _injected_loop_counter != 1; _injected_loop_counter ++)
  {
   if((false))
    barrier();
   if((false))
    {
     if((false))
      {
       if((false))
        {
         if(false)
          {
          }
         else
          {
           barrier();
          }
        }
       barrier();
      }
     if((false))
      break;
     do
      {
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
       if((false))
        barrier();
      }
     while(false);
     return;
    }
  }
 if(true)
  {
   if((false))
    {
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       barrier();
       if((bool(bvec4((((injectionSwitch.x > injectionSwitch.y))), false, true, false))))
        {
         if((false))
          barrier();
         for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
          {
           return;
          }
         if((false))
          {
           if(true)
            {
             for(int _injected_loop_counter = (0 << (((int(3)) / 1))); _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
              {
               barrier();
              }
            }
           else
            {
            }
          }
        }
      }
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((bool(bvec2(true, true))))
      {
       if(((((float(float(injectionSwitch.x))) > (tan(0.0) + ((clamp(injectionSwitch.y, (mix(float((- 294.549)), float(injectionSwitch.y), bool(true))), injectionSwitch.y))))))))
        return;
      }
     else
      {
      }
    }
  }
 else
  {
  }
 if(true)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = (0 | int((injectionSwitch.x))); _injected_loop_counter < 1; _injected_loop_counter ++)
      {
       barrier();
      }
    }
   if(true)
    {
     if((false))
      {
       do
        {
         return;
         for(int _injected_loop_counter = ((0) * 1); _injected_loop_counter < 1; _injected_loop_counter ++)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(false);
      }
    }
   else
    {
    }
  }
 else
  {
  }
 if((false || ((((false)) && true))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(((bool((! (! ((false || (bool(((injectionSwitch.x > (clamp(injectionSwitch, (vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)).y))))))))))))
    return;
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(((((bool(bvec3(injectionSwitch.x < injectionSwitch.y, false, false))))) && ((false))))
      barrier();
     barrier();
    }
   barrier();
  }
 do
  {
   atomicStore(write_val, uint(virtual_gid), ((0 | 0) | (4)), 64, ((~ (~ ((((0) | (1 * ((0 >> (((0 | 0) ^ ((max((((max((clamp(int(1), int(1), int(1))), (clamp(int(1), int(1), int(1))))))) | 0, (((max((clamp(int(1), int(1), int(1))), (clamp(int(1), int(1), int(1))))))) | 0))))))))) * (0 ^ 1)))))));
   if((false))
    barrier();
  }
 while(((injectionSwitch.x > injectionSwitch.y)));
 if(((injectionSwitch.x > injectionSwitch.y)))
  {
  }
 else
  {
   if((false))
    barrier();
  }
 for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
  {
   if((false))
    {
     if(false)
      {
      }
     else
      {
       return;
      }
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(false)
  {
  }
 else
  {
   if((false))
    barrier();
  }
 uint read_val = atomicLoad(write_val, 4, 64, 0);
 if(false)
  {
  }
 else
  {
   if(false)
    {
    }
   else
    {
     if((false))
      barrier();
     buf[virtual_gid] = uint(subgroupAllEqual(read_val));
    }
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
