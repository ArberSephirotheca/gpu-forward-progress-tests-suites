#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((false))
  barrier();
 if((false || ((true && ((! (! ((false)))))))))
  barrier();
 if(((((! (! (false)))) && true)))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   barrier();
  }
 if((bool((bvec3(bvec4(bvec3((false), ((injectionSwitch.x < injectionSwitch.y)), true), true))))))
  {
   if((false))
    barrier();
   barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 uint num_workgroup = (min((clamp(gl_NumWorkGroups, ((true ? ((true ? gl_NumWorkGroups : (uvec3((((((true ? (156898u) : (subgroup_id)))) << 0u) | (((156898u) | (((156898u) / 1u))))), 65962u, 2340u)))) : (uvec3(137180u, 2086u, ((38801u) / ((1u << (uint(1u))) >> (uint(1u)))))))), gl_NumWorkGroups)).x, (((max((clamp(gl_NumWorkGroups, ((true ? gl_NumWorkGroups : (uvec3(((156898u) | (156898u)), (1u * (65962u)), 2340u)))), gl_NumWorkGroups)), (clamp((uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], gl_NumWorkGroups[2])), ((true ? gl_NumWorkGroups : (uvec3(((156898u) | (156898u)), 65962u, 2340u)))), gl_NumWorkGroups))))) << uvec3(0u, 0u, 0u)).x));
 if((false))
  barrier();
 uint workgroup_size = ((gl_WorkGroupSize.x) - 0u);
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   if(((((! (bool(((bool((! (injectionSwitch.x > injectionSwitch.y)))) && true))))))))
    {
     if((false))
      barrier();
     barrier();
     if((((((false) && true) && true))))
      barrier();
    }
   barrier();
  }
 uint workgroup_base = (1u * ((clamp((min(((workgroup_size * ((workgroup_id) | (workgroup_id))) << 0u), workgroup_size * workgroup_id)), (min(((workgroup_size * (clamp(((false ? (subgroup_local_id) : ((false ? (num_workgroup) : workgroup_id)))), workgroup_id, workgroup_id))) << 0u), ((workgroup_size * workgroup_id) << 0u))), (min(((workgroup_size * workgroup_id) << 0u), (~ (~ (((workgroup_size * workgroup_id) | (workgroup_size * workgroup_id)))))))))));
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(((((vec2(vec3((max(injectionSwitch, injectionSwitch)), 0.0))).x > ((injectionSwitch.y) + length(vec4(0.0, 0.0, 0.0, 0.0)))))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if((false))
    barrier();
  }
 if((false))
  barrier();
 if((false || (((((bool(bvec3(false, false, true)))) || false) || ((bool(bvec4((((injectionSwitch.x > injectionSwitch.y))), false, false, false))))))))
  {
   if(((((((mix(float((- 6.9)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y))) && true)))
    barrier();
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 uint virtual_gid = (min((((max(workgroup_base + ((subgroup_id * (0u | ((clamp((((0u + (subgroup_size)) ^ 0u)), ((true ? subgroup_size : (((subgroup_size)) >> 0u))), subgroup_size))))) | ((~ (~ (subgroup_id * ((~ ((min(~ (clamp((0u + (subgroup_size)), ((true ? subgroup_size : (subgroup_size))), subgroup_size)), ~ (clamp((0u + (subgroup_size)), ((true ? subgroup_size : (subgroup_size))), subgroup_size)))))))))))) + subgroup_local_id, workgroup_base + subgroup_id * (clamp((0u + (subgroup_size)), ((0u ^ ((true ? subgroup_size : (subgroup_size))))), subgroup_size)) + subgroup_local_id))) ^ 0u), (max(workgroup_base + ((subgroup_id * (0u | ((clamp((0u + (subgroup_size)), ((true ? subgroup_size : (((((0u | 0u) + (((subgroup_size))))) >> 0u) >> 0u))), subgroup_size))))) | ((~ (~ (subgroup_id * ((~ ((min(~ (clamp((0u + (subgroup_size)), ((true ? subgroup_size : (subgroup_size))), subgroup_size)), ~ (clamp((0u + (subgroup_size)), ((true ? subgroup_size : (subgroup_size))), subgroup_size)))))))))))) + subgroup_local_id, workgroup_base + subgroup_id * (clamp((0u + (subgroup_size)), ((0u ^ ((true ? subgroup_size : (subgroup_size))))), subgroup_size)) + subgroup_local_id))));
 atomicStore(write_val, ((uint(virtual_gid)) << (max((max(uint((injectionSwitch.x)), uint((injectionSwitch.x)))), uint((injectionSwitch.x))))), 4, 64, 0);
 if((false))
  {
   if(((! (! (((injectionSwitch.x > (vec2(injectionSwitch[0], injectionSwitch[1])).y)))))))
    barrier();
   barrier();
   if((false))
    barrier();
  }
 if(((true && (((injectionSwitch.x > injectionSwitch.y))))))
  {
   if((false))
    barrier();
   if(((! (((! ((true && ((true && (((injectionSwitch.x > injectionSwitch.y)))))))) || false)))))
    barrier();
   barrier();
  }
 if((((bool(bvec4(false || (((injectionSwitch.x > injectionSwitch.y))), true, true, true))))))
  {
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((false)) && true))
    {
     if((false))
      barrier();
     barrier();
    }
   barrier();
  }
 uint read_val = atomicLoad(write_val, 4, 64, 0);
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   barrier();
  }
 (((0u) ^ 0u) | ((0u ^ (((buf[virtual_gid] = uint(subgroupAllEqual(((true ? ((((((read_val) / 1u)) + 0u) ^ (min(0u, 0u)))) : (mix((((false ? ((workgroup_size)) : (subgroup_id) | (0u << (((((uint(6u)) | 0u))) ^ 0u))))), (min(virtual_gid, virtual_gid)), true))))))) - 0u)))));
 if((false))
  barrier();
 if((false))
  {
   if((((! (! ((((injectionSwitch.x > injectionSwitch.y))))))) && true))
    barrier();
   barrier();
  }
 if((false))
  {
   if(((((((! (! (injectionSwitch.x > injectionSwitch.y)))) && true)))))
    barrier();
   barrier();
  }
 if((false))
  {
   if((false))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     if(((! (((! (false)) && ((bool(bvec4((! (! (bool(((bool(((true) || false))) || false))))), true, true, false)))))))))
      {
       if((false))
        barrier();
       if((false))
        barrier();
       barrier();
      }
     barrier();
    }
   if((false))
    barrier();
   if((! (! ((false)))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     if((false))
      barrier();
     barrier();
    }
   if((false))
    {
     if(((! (! (false)))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     barrier();
    }
   if((false))
    barrier();
   if((((false) && true)))
    barrier();
   if((false))
    barrier();
   barrier();
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
