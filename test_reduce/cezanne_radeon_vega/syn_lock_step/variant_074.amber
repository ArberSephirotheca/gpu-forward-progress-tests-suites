#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = ((((((((clamp(uint(uvec3(gl_NumWorkGroups.x, (1u * (0u)), 1u)), uint(uvec3(gl_NumWorkGroups.x, 0u, ((1u) | (0u >> (uint(6u)))))), uint((uvec3(0u, 0u, 0u) + (uvec3(gl_NumWorkGroups.x, 0u, 1u)))))))) - 0u)) ^ uint((injectionSwitch.x))) ^ ((false ? (subgroup_id) : uint((injectionSwitch.x))))));
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = ((~ ((false ? ((num_workgroup - uint(- 76430))) : (~ (uint(uvec4(workgroup_size * workgroup_id, (((((uint(uvec4((((((false) || (((bool(bvec3(false, true, false)))) && true)) ? (max((~ (~ (((0u | (17866u)))))), (0u + (clamp((max(((17866u)), ((17866u)))), ((17866u)), (max(((17866u)), ((false ? (num_workgroup) : ((17866u))))))))))) : (((0u | (0u))) / 1u) | ((0u + (((uint(((uint(1u)) ^ 0u))) << 0u))))))), 1u, 0u, 0u)))) << 0u) << 0u)), 1u, 1u))))))));
 uint virtual_gid = workgroup_base + (0u | ((clamp(subgroup_id * subgroup_size, ((((clamp(0u, 0u, 0u)) + (subgroup_id * subgroup_size)) - uint((injectionSwitch.x)))), subgroup_id * ((subgroup_size) + 0u))))) + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + ((false ? (virtual_gid) : ((uint(uvec4((min(0u, 0u)), 1u, 1u, 0u))) ^ ((((uint(uint((min(subgroup_id * subgroup_size, subgroup_id * subgroup_size)))))) | 0u))))) + ((((~ (((true ? ~ (0u) : (workgroup_size))))) | (((min((((((((subgroup_local_id + 1)) + 0u) % subgroup_size))) << 0u), ((((((((uint(uvec3(subgroup_local_id, 0u, 1u))) ^ 0u)) + 1) % subgroup_size) | uint((((injectionSwitch.x) - 0.0))))))))) | ((((clamp((((subgroup_local_id + 1) % subgroup_size)), (((((subgroup_local_id) << (0u | 0u)) + 1) % subgroup_size)), (((uint(uvec2((uint(uvec2((((((((subgroup_local_id + 1)) + 0u) % subgroup_size))) ^ 0u), 1u))), 0u)))) * (max(((true ? ((1u) + 0u) : (workgroup_size))), 1u))))) << (uint(uint(0u))))))))) >> 0u);
 ((((((~ (~ ((((0u ^ ((clamp(0u, ((0u) / 1u), 0u)) | ((((~ (~ ((0u ^ (((buf[virtual_gid] = 1) | ((true ? 0u : (atomicOr(workgroup_base, workgroup_size))))))))))) >> 0u))))) >> 0u))))))) - 0u) / 1u);
 ((buf[next_virtual_gid] = 2) - uint((injectionSwitch.x)));
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
