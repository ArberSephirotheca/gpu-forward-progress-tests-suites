#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if((((false)) || false))
  barrier();
 if(((true && (((injectionSwitch.x > injectionSwitch.y))))))
  barrier();
 if((((((injectionSwitch.x > injectionSwitch.y)))) || false))
  {
   if((false))
    {
     if((((! (! ((false || ((injectionSwitch.x > injectionSwitch.y)))))))))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   barrier();
  }
 uint subgroup_size = gl_SubgroupSize;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(((((((injectionSwitch.x < injectionSwitch.y)) && (injectionSwitch.x > injectionSwitch.y))))))
  barrier();
 uint num_workgroup = ((((gl_NumWorkGroups.x)) / ((1u) | (1u ^ uint((injectionSwitch.y))))) + 0u);
 if((false || ((bool(bvec2((false), true))))))
  barrier();
 if(((true && ((((bool(bvec4(false, true, false, ((injectionSwitch.x < injectionSwitch.y)))))) || false)))))
  {
   if((false))
    barrier();
   barrier();
  }
 if((true && (! (((((injectionSwitch.x < injectionSwitch.y)) && (((! (! (! (((false)))))))))) && true))))
  barrier();
 uint workgroup_size = (~ ((~ (~ ((((((clamp(~ (gl_WorkGroupSize), ~ (gl_WorkGroupSize), (uvec3(uvec3(((false ? (uvec3(132154u, 166168u, 40693u)) : ~ (gl_WorkGroupSize)))))))))) / uvec3(1u, 1u, 1u)) << uvec3(0u, 0u, 0u))))))).x;
 if((((false) && ((injectionSwitch.x < injectionSwitch.y)))))
  barrier();
 if((false))
  barrier();
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(((! (! (false)))))
    barrier();
  }
 if((false))
  barrier();
 if((false))
  barrier();
 if((((! (! (((((false || (injectionSwitch.x > injectionSwitch.y))))))))) && true))
  barrier();
 if((((injectionSwitch.x > (float((max(float((clamp(injectionSwitch, injectionSwitch, (((min(injectionSwitch, injectionSwitch))) + vec2(0.0, 0.0)))).y), float((clamp(injectionSwitch, injectionSwitch, (((min(injectionSwitch, injectionSwitch))) + vec2(0.0, 0.0)))).y)))))))))
  barrier();
 if((false))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 if((((! (! ((injectionSwitch.x > injectionSwitch.y)))))))
  barrier();
 if(((! ((true && (! (false)))))))
  barrier();
 if((false))
  barrier();
 if((true && ((((injectionSwitch.x > injectionSwitch.y))))))
  barrier();
 if((bool((bvec3(bvec4((bvec3(bvec3((bvec3(bvec4(bvec3((((injectionSwitch.x > injectionSwitch.y))), true, true), true)))))), false))))))
  barrier();
 if((true && ((false))))
  {
   if((((((injectionSwitch.x > injectionSwitch.y)) || false))))
    barrier();
   barrier();
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 if((((((injectionSwitch.x > injectionSwitch.y) || false)))))
  barrier();
 uint virtual_gid = (((((uint(uvec3(workgroup_base, ((1u << (uint(1u))) >> (uint(1u))), ((((false ? (workgroup_size) : 1u))) ^ 0u)))) * 1u)) << 0u)) + subgroup_id * subgroup_size + subgroup_local_id;
 uint next_virtual_gid = ((((max((1u | 1u), (clamp((1u | 1u), (~ (~ ((1u | 1u)))), (1u | 1u))))) * (workgroup_base)) + subgroup_id * subgroup_size + ((((((clamp((subgroup_local_id + 1), (((bool((bvec2(bvec4(bvec2(true, true), false, true))))) ? (subgroup_local_id + 1) : (virtual_gid))), (((((((subgroup_local_id + 1)) ^ 0u)) | ((0u + ((((((((~ ((((~ (~ (((~ (clamp((clamp(((true ? (((0u | (subgroup_local_id + 1)) ^ 0u)) : (atomicAnd(num_workgroup, num_workgroup)))), (((((0u | (subgroup_local_id + 1)) ^ 0u))) / (((1u ^ 0u)) * 1u)), (((0u | (subgroup_local_id + 1)) ^ 0u)))), subgroup_local_id + 1, subgroup_local_id + 1))) / 1u))))) | 0u)))))) >> uint((injectionSwitch.x))))))) ^ (max(0u, 0u))))) | ((((subgroup_local_id + 1)) >> (164673u & 0u))))))) << 0u) >> 0u)) % subgroup_size)) * ((false ? (workgroup_id) : 1u)));
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 if(((((((! (! (false))))) || false) && true)))
  barrier();
 if((! (! ((((bool(bvec2((((injectionSwitch.x) / 1.0) > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)))))))))))
  barrier();
 if((((((! (! (((((false || ((bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, true, false))))))) && true))))) && true))))
  {
   if((false))
    barrier();
   if(((false || (((false) && true)))))
    {
     if((false))
      barrier();
     barrier();
     if(((((true && (false)))) && true))
      barrier();
    }
   if((false))
    barrier();
   barrier();
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    {
     if((((true && ((true && (bool(bool(false)))))))))
      barrier();
     if((false))
      barrier();
     barrier();
    }
  }
 if(((! (! (((bool(bvec4(false, true, true, false))) || (false)))))))
  {
   if((bool(bvec4((false), true, true, false))))
    {
     if((false))
      barrier();
     barrier();
    }
   barrier();
  }
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((((false) || false)))
  {
   if((false))
    barrier();
   if((! ((bool(((bool(! ((bool(bvec4((false), true, true, false)))))) && true))))))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   if(((! (! ((((injectionSwitch.x < injectionSwitch.y)))))) || false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      {
       if(((true && (false))))
        barrier();
       if((((injectionSwitch.x > (clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))))
        barrier();
       if((false))
        barrier();
       if((false))
        barrier();
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     barrier();
    }
   else
    {
     if((false))
      barrier();
    }
   if(((((max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(((! (! (false)))))
  {
   if((false))
    barrier();
   if((((((injectionSwitch.x > (clamp((float(vec3(injectionSwitch.y, 0.0, 0.0))), injectionSwitch.y, injectionSwitch.y))))) && true)))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
  }
 if(((bool(bool(((((injectionSwitch.x > ((1.0 * (0.0)) + (1.0 * ((injectionSwitch.y))))))) && (bool(bvec3(true, false, true)))))))))
  {
   if((((! (! (bool(bvec2((true && (((injectionSwitch.x > injectionSwitch.y)))), true))))))))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   barrier();
  }
 buf[virtual_gid] = (((false ? (- 92426) : int(ivec3(1, 0, 1)))));
 if((false))
  barrier();
 if(((injectionSwitch.x < injectionSwitch.y)))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(subgroup_local_id + (clamp(((1) * 1), 1, 1)) < subgroup_size)
    {
     int i = 0;
     if(true)
      {
       atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
       if((false))
        {
         if((false))
          barrier();
         if((false))
          barrier();
         barrier();
         if(((((max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
          {
           if((false))
            {
             if((false))
              barrier();
             if((false))
              barrier();
             if((false))
              barrier();
             barrier();
            }
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              barrier();
             barrier();
            }
           barrier();
          }
        }
       if((false))
        {
         if((false))
          barrier();
         if(((! (! (((! (! (false || (false))))))))))
          barrier();
         barrier();
        }
       if(((! (! (false)))))
        {
         if(((bool(bvec4(((injectionSwitch.x > injectionSwitch.y)), true, false, true)))))
          barrier();
         barrier();
         if((false))
          barrier();
         if((false))
          {
           if((false))
            {
             if((false))
              barrier();
             barrier();
            }
           barrier();
          }
        }
       if(((false || (((injectionSwitch.x > injectionSwitch.y))))))
        {
         if((false))
          barrier();
         barrier();
        }
       if((false))
        barrier();
      }
     else
      {
      }
     if((false))
      barrier();
     if((false))
      barrier();
    }
   else
    {
     if(false)
      {
       if((false))
        barrier();
      }
     else
      {
       if((false))
        barrier();
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y)) || ((bool(bvec2(((false || (bool(bvec2((false), true))))), true))))))
        barrier();
       if((false))
        barrier();
       if(false)
        {
         if((bool(bvec3((false), false, true))))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          {
           if((((((((false) && true) || false)) && true))))
            barrier();
           barrier();
          }
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                barrier();
               if((false))
                barrier();
               barrier();
              }
             if((false))
              barrier();
             barrier();
            }
           barrier();
          }
        }
       else
        {
         if(((bool(bvec2(false, true)))))
          barrier();
         if((false))
          {
           if((false))
            barrier();
           if((false))
            barrier();
           barrier();
           if((false))
            barrier();
           if((((false || (((0.0 + (injectionSwitch.x)) > injectionSwitch.y))))))
            {
             if(((bool(bvec3(false, false, false)))))
              barrier();
             barrier();
            }
          }
         if((false))
          barrier();
        }
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if((((false) || false)))
        {
         if((((injectionSwitch.x > ((max(((((vec2(injectionSwitch[0], injectionSwitch[1]))) + vec2(0.0, 0.0))), ((((vec2(injectionSwitch[0], injectionSwitch[1]))) + vec2(0.0, 0.0))))) - vec2(0.0, 0.0)).y))))
          barrier();
         if((false))
          {
           if((false))
            {
             if((((((((injectionSwitch.x > injectionSwitch.y) && true)) || false)))))
              barrier();
             barrier();
            }
           if((false))
            barrier();
           barrier();
          }
         barrier();
         if(((((clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
          barrier();
         if((false))
          barrier();
        }
      }
     if((false))
      barrier();
     atomicStore(buf[next_virtual_gid], (((((clamp(((true ? uint(2) : (((subgroup_size)) | 0u))), (0u ^ (uint(2))), uint(2))) | (clamp(((true ? uint(2) : (((subgroup_size)) | 0u))), (0u ^ (uint(2))), uint(2))))) >> 0u)), (~ ((int(int(~ (4)))))), ((64) | (64)), 4);
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((((false ? (29.27) : (mix(float((- 55.41)), float(injectionSwitch.x), bool(true))))) > (vec2(injectionSwitch[0], (clamp((clamp(injectionSwitch[1], (clamp(injectionSwitch[1], injectionSwitch[1], (max(injectionSwitch[1], (max(injectionSwitch[1], injectionSwitch[1])))))), injectionSwitch[1])), (clamp(injectionSwitch[1], (clamp(injectionSwitch[1], injectionSwitch[1], (max(injectionSwitch[1], (max(injectionSwitch[1], injectionSwitch[1])))))), ((injectionSwitch[1]) / (injectionSwitch.y)))), (clamp(injectionSwitch[1], (clamp(injectionSwitch[1], injectionSwitch[1], (((((injectionSwitch.x < injectionSwitch.y)) ? (((false ? (- 2348.2480) : float(mat3((max(max(injectionSwitch[1], (max(injectionSwitch[1], injectionSwitch[((1) ^ 0)]))), max(injectionSwitch[1], (max(injectionSwitch[1], injectionSwitch[1]))))), 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0))))) : (4.0)))))), injectionSwitch[1])))))).y))))
    barrier();
  }
 else
  {
   if((false))
    {
     if((false))
      barrier();
     if((bool(bvec2((false), true))))
      {
       if((false))
        barrier();
       barrier();
      }
     barrier();
    }
  }
 if(((! (! ((((! (! (((((false || ((true && (((((mat2(1.0) * (injectionSwitch)).x > (((float(mat4x3((((true ? false ? (7.8) : float(vec3(((injectionSwitch.y) - 0.0), 0.0, 0.0)) : (9.6)))), ((1.0) / sqrt(1.0)), (clamp(1.0, 1.0, 1.0)), 1.0, 0.0, (min(0.0, 0.0)), (injectionSwitch.x), 1.0, 0.0, exp(0.0), 0.0, 0.0))))))) && true) && true))))))))))) || false))))))
  barrier();
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y)) || ((true && (((false || (((((((((! (! (bool(bool(! (! (! ((! (! ((! ((((((mix(float(true ? 0.0 : (vec3(- 962.949, - 81.47, - 7310.1980)[2])), float((63.67)), bool(false))))) + (injectionSwitch.x)) > injectionSwitch.y) && true))))))))))))))) || ((((injectionSwitch.x > (vec2(injectionSwitch[0], injectionSwitch[1])).y)) && true)))))))))))))))
  barrier();
 if((false))
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
