#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = ((gl_NumWorkGroups.x) / 1u);
 uint workgroup_size = (clamp(gl_WorkGroupSize, gl_WorkGroupSize, (~ (~ (gl_WorkGroupSize))))).x;
 uint workgroup_id = (min(gl_WorkGroupID.x, (uint(((uvec4(gl_WorkGroupID.x, 0u, 0u, 0u)) * (uvec4(1u, 1u, 1u, 1u) | uvec4((injectionSwitch.y), (injectionSwitch.y), (injectionSwitch.y), (injectionSwitch.y))))))));
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = ((true ? (((((((min((((0u | 0u)) ^ 0u), (0u | 0u))) << (((uint((0u + ((((uint(uvec4(6u, 0u, 0u, 0u))) | 0u)))))) ^ (0u | 0u)))) | ((false ? (atomicMin(subgroup_local_id, 81417u)) : (workgroup_base)))) + subgroup_id * subgroup_size + subgroup_local_id)) ^ 0u) + 0u) : (workgroup_id)));
 uint next_virtual_gid = (uint((~ (~ (uvec3(workgroup_base + subgroup_id * ((0u | 0u) ^ (subgroup_size)) + (uint(uvec2((0u | (((subgroup_local_id + 1) % subgroup_size))), 0u))), 1u, 1u))))));
 buf[virtual_gid] = ((1) | (1));
 if(subgroup_local_id + 1 < subgroup_size)
  {
   int i = 0;
   atomicStore(buf[(~ (((~ (((((((0u ^ ((0u ^ ((next_virtual_gid))))) | (0u << (uint(2u)))) | ((0u ^ ((0u ^ ((next_virtual_gid))))) | (0u << (uint(2u))))))) | (((0u ^ ((0u ^ ((next_virtual_gid))))) | (0u << (uint(2u)))))))) << uint((injectionSwitch.x)))))], ((uint(2)) * 1u), (((bool(bool(true))) ? ((4) | 0) : (i))), 64, 4);
  }
 else
  {
   atomicStore(buf[(clamp(((((next_virtual_gid) / (~ (~ (1u))))) >> (0u << ((((~ (~ ((0u | ((0u | (0u))))))) ^ ((uint(8u)))) - (((0u) | 0u) | 0u))))), ((((next_virtual_gid) / 1u)) >> (0u << ((((0u | (0u)) ^ ((uint(8u)))) - (((0u) | 0u) | 0u))))), ((((next_virtual_gid) / 1u)) >> (0u << ((((0u | (0u)) ^ ((uint(8u)))) - ((clamp(((0u) | 0u) | 0u, ((0u) | 0u) | 0u, ((0u) | 0u) | 0u)))))))))], (max(uint(((((((true ? 2 : (76861))) | ((((true ? 2 : (76861))) | ((true ? 2 : (76861)))))))) | 0)), ((false ? (((subgroup_size) / (1u & 1u))) : uint(((((((true && (injectionSwitch.x > injectionSwitch.y)))) ? ((((max(53980, 53980))) | 0)) : (((((((true ? 2 : (76861))))) | ((((((true ? 2 : (76861)))) | (((true ? 2 : (76861))))))))) / 1))) | 0)))))), 4, 64, (((((((((max(((1 * (1 << (int(2))))), ((((true ? 1 * (1 << (int(2))) : (- 41002))))))) >> (int(2))) * (4)) | (((max((((1 << ((((false ? (- 59199) : int(int(int(2)))))))) >> (int(2))) * (4)) + 0, (((1 << ((((false ? (- 59199) : int(int(int(2)))))))) >> (int(2))) * (4)) + 0)))))) | (((1 << (((int(2))) | ((((int(2))) - 0)))) >> (int(2))) * (4)))) << (~ (~ (0))))));
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
