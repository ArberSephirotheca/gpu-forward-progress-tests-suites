#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if(((bool(bvec4(false, true, true, false)))))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((false))
  barrier();
 uint num_workgroup = (uint((uvec3(0u, 0u, 0u) + (uvec3(((gl_NumWorkGroups.x) | (gl_NumWorkGroups.x)), 1u, 1u)))));
 if(((((! ((true && (! ((((bool(bool(((false ? ((max(injectionSwitch, injectionSwitch))) : ((mix(vec2(((injectionSwitch) - vec2(0.0, 0.0))[0], (- 24.27)), vec2(((- 84.13 * 58.35)), ((injectionSwitch) - vec2(0.0, 0.0))[1]), bvec2(false, (bool(bvec3(((injectionSwitch.x < injectionSwitch.y)), true, true))))))))).x > injectionSwitch.y)))) || false))))))))))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 if((((injectionSwitch.x > (max((float(mat4(injectionSwitch.y, 1.0, 1.0, (mix(float((6.2)), float(tan(0.0)), bool(((injectionSwitch.x < injectionSwitch.y))))), 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, (max(0.0, 0.0))))), injectionSwitch.y))))))
  barrier();
 if((((injectionSwitch.x > (mix(float((5315.8968)), float((clamp(injectionSwitch.y, ((injectionSwitch.y) + 0.0), (min(injectionSwitch.y, injectionSwitch.y))))), bool(((injectionSwitch.x < injectionSwitch.y)))))))))
  barrier();
 uint workgroup_base = workgroup_size * workgroup_id;
 if((false))
  barrier();
 if((false))
  barrier();
 uint virtual_gid = ((((~ ((~ (~ (~ (max((~ (((~ ((~ (((~ ((((((clamp((((uint(uvec3((uint(uint(workgroup_base))), 0u, 0u))) + subgroup_id * subgroup_size) << 0u), ((workgroup_base + subgroup_id * subgroup_size) << 0u), ((((true ? ((workgroup_base) + 0u) : (atomicAnd(num_workgroup, subgroup_size)))) + ((~ ((uint(uvec3(~ (uint(uvec3(subgroup_id, 0u, (max(0u, (~ ((uint(uint(~ (0u))))))))))), 1u, 0u)))))) * subgroup_size) << 0u)))) ^ ((0u) | (0u)))) / 1u))) >> 0u))))) >> 0u))), workgroup_base + subgroup_id * (max((min(subgroup_size, subgroup_size)), subgroup_size)))))))))) ^ (min(0u, 0u)))) + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + ((((subgroup_id * subgroup_size) | (subgroup_id * subgroup_size))) << 0u) + ((max((((subgroup_local_id) >> 0u) + 1) % subgroup_size, (((subgroup_local_id) >> 0u) + 1) % subgroup_size)));
 buf[virtual_gid] = 1;
 if((false))
  barrier();
 if(subgroup_local_id + 1 < (min(subgroup_size, subgroup_size)))
  {
   int i = 0;
   if((false))
    {
     if(((! (! ((! (! (false))))))))
      barrier();
     if((((! ((bool(bvec2(! ((injectionSwitch.x > injectionSwitch.y)), false))))))))
      barrier();
     barrier();
     if((false))
      barrier();
    }
   atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
   if((false))
    barrier();
  }
 else
  {
   if((true && ((((injectionSwitch.x > injectionSwitch.y))))))
    {
     if(((bool(bvec4(false, true, true, false)))))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((((false || ((injectionSwitch.x > injectionSwitch.y))))))
    barrier();
   if(((bool(bvec2(((false) || false), false)))))
    barrier();
   if((((false) || false)))
    barrier();
  }
 if((false))
  barrier();
 if((true && (((! (! ((! (! (false))))))))))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
