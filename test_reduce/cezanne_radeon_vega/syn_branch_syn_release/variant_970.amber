#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 if((false))
  {
   if((((! (! (((min(injectionSwitch, injectionSwitch)).x > ((mix(float(((clamp(float(mat3x4(clamp((float(mat3(injectionSwitch.y, 0.0, ((determinant(mat2(0.0, 0.0, 1.0, 0.0))) - 0.0), sqrt(1.0), 0.0, 0.0, 0.0, 0.0, 1.0))), injectionSwitch.y, (max(injectionSwitch.y, injectionSwitch.y))), 0.0, exp(0.0), 0.0, exp(0.0), ((true ? 1.0 : (3.4))), 1.0, sin(0.0), 0.0, 1.0, 1.0, (1.0 * (((((injectionSwitch.x < injectionSwitch.y)) ? 0.0 : (- 3.2))))))), float(mat3x4(clamp((((float(mat3(injectionSwitch.y, 0.0, determinant(mat2(0.0, 0.0, 1.0, 0.0)), sqrt(1.0), 0.0, 0.0, 0.0, 0.0, 1.0))) - 0.0)), injectionSwitch.y, (max(injectionSwitch.y, injectionSwitch.y))), 0.0, exp(0.0), 0.0, exp(0.0), 1.0, 1.0, sin(0.0), 0.0, 1.0, 1.0, 0.0)), float(mat3x4(clamp((float(mat3(injectionSwitch.y, 0.0, determinant(mat2(0.0, 0.0, 1.0, 0.0)), sqrt(1.0), 0.0, 0.0, 0.0, 0.0, 1.0))), injectionSwitch.y, (max(injectionSwitch.y, injectionSwitch.y))), 0.0, exp(0.0), 0.0, exp(0.0), 1.0, 1.0, sin(0.0), 0.0, 1.0, 1.0, 0.0)))))), float((0.2)), bool(false)))))))))))
    return;
   return;
   if((false))
    return;
  }
 uint workgroup_size = (((min(((gl_WorkGroupSize) | (gl_WorkGroupSize)), gl_WorkGroupSize)).x) | ((((((0u | (((((((clamp(((~ (~ (((1u * (max((0u | 0u), (0u | 0u)))))))) ^ 0u), (((1u * (max((0u | ((false ? (num_workgroup) : 0u))), ((clamp(0u, ((0u) | (0u)), 0u)) | 0u))))) ^ 0u), (min((((uint(uvec2((max((1u * (max((0u | 0u), (0u | 0u)))), (1u * (max((0u | 0u), (0u | 0u)))))), 0u)))) ^ 0u), (((true ? ((1u * (max((0u | 0u), (0u | 0u))))) ^ 0u : (packSnorm2x16(vec2(- 0.5, - 1.9))))))))))) ^ 0u))) | (((((clamp((((1u * (max((0u | 0u), (0u | 0u))))) ^ 0u), (((1u * (max((((true ? (~ (~ (0u | 0u))) : ((subgroup_size))))), (0u | 0u))))) ^ 0u), (min((((1u * (max((0u | 0u), (0u | ((0u) | (0u))))))) ^ 0u), (((1u * (max((0u | (0u | (((0u) / 1u)))), (0u | 0u))))) ^ 0u)))))) ^ 0u)))))) >> (uint(7u)))) | (((0u | (((((((clamp((((1u * (max((0u | 0u), (0u | 0u))))) ^ 0u), (((1u * (max((0u | 0u), (0u | 0u))))) ^ 0u), (((min((((1u * (max((0u | 0u), (0u | 0u))))) ^ 0u), (((1u * (max((0u | 0u), (0u | 0u))))) ^ 0u)))) - 0u)))) ^ 0u))) | ((((((0u ^ (((clamp((((1u * (max((0u | 0u), (0u | 0u))))) ^ 0u), (((1u * (max((0u | 0u), (0u | 0u))))) ^ 0u), (min((((((true ? 1u * (max((0u | 0u), (0u | 0u))) : (subgroup_size))))) ^ 0u), (((1u * (max((0u | 0u), ((max(0u | 0u, 0u | 0u))))))) ^ 0u))))))))) | (((clamp((((1u * (max((0u | 0u), (0u | 0u))))) ^ 0u), (((1u * (max((0u | 0u), (0u | 0u))))) ^ 0u), (min((((((true ? 1u * (max((0u | 0u), (0u | 0u))) : (subgroup_size))))) ^ 0u), (((1u * (max((0u | 0u), ((max(0u | 0u, 0u | 0u))))))) ^ 0u)))))))) ^ 0u)))))) >> (uint(7u)))))) >> 0u));
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 if((false))
  return;
 if((bool((! (((! (bool((false)))) && true))))))
  {
   if((((true && ((false)))) && true))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        return;
       return;
      }
     return;
     if((false))
      return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((false) && true)))
      return;
     return;
    }
   return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 uint virtual_gid = workgroup_base + subgroup_id * (((((min((((true ? (subgroup_size) : (subgroup_local_id))) - 0u), ((1u ^ 1u) ^ ((((true ? ((0u + (subgroup_size))) : (subgroup_local_id))) - 0u)))))) | (((((true ? (true ? (subgroup_size) : (subgroup_local_id)) : (subgroup_local_id)))) - 0u)))) ^ (max(0u, 0u))) + subgroup_local_id;
 if((false))
  return;
 if((false))
  {
   if((((false)) && true))
    return;
   return;
  }
 uint next_virtual_gid = (((bool(bvec4((! (! (((true) && true)))), false, true, false))) ? ((workgroup_base + ((((subgroup_id) | 0u)) + 0u) * subgroup_size) >> 0u) : (atomicOr(workgroup_size, subgroup_local_id)))) + (((clamp((((uint(((uvec2((0u ^ (subgroup_local_id)), 0u)) | uvec2(0u, 0u))))) | 0u) + 1, subgroup_local_id + (clamp(1, 1, 1)), subgroup_local_id + 1))) % subgroup_size);
 ((buf[virtual_gid] = 1) << 0u);
 if(subgroup_local_id + 1 < ((true ? (min(subgroup_size, (0u + (subgroup_size)))) : (subgroup_id))))
  {
   if((false))
    {
     if((((false || ((((injectionSwitch.x > injectionSwitch.y) && true)))))))
      return;
     return;
    }
   if(((((injectionSwitch.x < injectionSwitch.y)) && (! (! ((false)))))))
    return;
   if((((false) || false)))
    {
     if(((false || ((((! (! (false))))) || false))))
      {
       if((false))
        return;
       return;
      }
     if((! (! ((((injectionSwitch.x > injectionSwitch.y)))))))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
       if((false))
        {
         if((false))
          return;
         return;
        }
      }
    }
   int i = 0;
   if((false))
    return;
   if((false))
    {
     if((false))
      return;
     return;
    }
   if((false))
    return;
   atomicStore(buf[(min(next_virtual_gid, next_virtual_gid))], uint(2), 4, (((clamp(((64) << 0), 64, 64))) / ((1 << (int(0))) >> ((min(int(0), int(0)))))), 4);
   if((false))
    return;
   if((false))
    return;
   if((false))
    return;
  }
 else
  {
   if((! (! ((((injectionSwitch.x > injectionSwitch.y)))))))
    return;
   if((false))
    return;
   atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    return;
  }
 if((((injectionSwitch.x > (mix(float((float(vec2(injectionSwitch.y, 1.0)))), float((float(- 83193))), bool(false)))))))
  return;
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(((! (! (false)))))
  return;
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
