#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

struct _GLF_struct_49 {
 mat3x4 _f0;
} ;

struct _GLF_struct_50 {
 _GLF_struct_49 _f0;
 mat4x2 _f1;
 uvec3 _f2;
 mat2 _f3;
 float _f4;
} ;

struct _GLF_struct_51 {
 ivec3 _f0;
 _GLF_struct_50 _f1;
 uint next_virtual_gid;
} ;

struct _GLF_struct_47 {
 uvec2 _f0;
 mat3x4 _f1;
 mat2 _f2;
 mat3x2 _f3;
} ;

struct _GLF_struct_45 {
 ivec4 _f0;
 uvec2 _f1;
 mat3x4 _f2;
 uint _f3;
 uvec3 _f4;
 vec3 _f5;
} ;

struct _GLF_struct_44 {
 bool _f0;
 uvec3 _f1;
 bool _f2;
 mat4x2 _f3;
} ;

struct _GLF_struct_43 {
 float _f0;
 ivec4 _f1;
 mat2x4 _f2;
 bvec4 _f3;
 mat2x4 _f4;
 vec4 _f5;
} ;

struct _GLF_struct_42 {
 uvec4 _f0;
 uvec4 _f1;
 mat2x3 _f2;
} ;

struct _GLF_struct_41 {
 ivec2 _f0;
 ivec2 _f1;
 mat3x2 _f2;
 float _f3;
} ;

struct _GLF_struct_46 {
 _GLF_struct_41 _f0;
 _GLF_struct_42 _f1;
 _GLF_struct_43 _f2;
 mat3x4 _f3;
 _GLF_struct_44 _f4;
 _GLF_struct_45 _f5;
} ;

struct _GLF_struct_39 {
 bvec3 _f0;
} ;

struct _GLF_struct_40 {
 _GLF_struct_39 _f0;
 bvec4 _f1;
 ivec3 _f2;
} ;

struct _GLF_struct_37 {
 bvec3 _f0;
 float _f1;
 uvec2 _f2;
 vec2 _f3;
 ivec2 _f4;
} ;

struct _GLF_struct_38 {
 int _injected_loop_counter;
 _GLF_struct_37 _f0;
} ;

struct _GLF_struct_35 {
 mat2x3 _f0;
 bvec2 _f1;
} ;

struct _GLF_struct_36 {
 _GLF_struct_35 _f0;
} ;

struct _GLF_struct_33 {
 ivec4 _f0;
} ;

struct _GLF_struct_34 {
 mat4x3 _f0;
 _GLF_struct_33 _f1;
 float _f2;
} ;

struct _GLF_struct_48 {
 _GLF_struct_34 _f0;
 _GLF_struct_36 _f1;
 float _f2;
 _GLF_struct_38 _f3;
 _GLF_struct_40 _f4;
 _GLF_struct_46 _f5;
 _GLF_struct_47 _f6;
} ;

struct _GLF_struct_30 {
 ivec2 _f0;
 bvec2 _f1;
 mat2 _f2;
 vec4 _f3;
} ;

struct _GLF_struct_29 {
 vec3 _f0;
 uvec2 _f1;
 bvec4 _f2;
} ;

struct _GLF_struct_31 {
 uvec2 _f0;
 _GLF_struct_29 _f1;
 _GLF_struct_30 _f2;
 ivec3 _f3;
 vec4 _f4;
 uvec2 _f5;
} ;

struct _GLF_struct_27 {
 uvec4 _f0;
} ;

struct _GLF_struct_28 {
 mat2 _f0;
 _GLF_struct_27 _f1;
} ;

struct _GLF_struct_25 {
 bool _f0;
} ;

struct _GLF_struct_26 {
 _GLF_struct_25 _f0;
 mat4x2 _f1;
 mat3x2 _f2;
 ivec4 _f3;
 bvec4 _f4;
} ;

struct _GLF_struct_23 {
 mat3 _f0;
 bvec2 _f1;
 int _f2;
 vec2 _f3;
 mat3 _f4;
} ;

struct _GLF_struct_22 {
 mat3 _f0;
 vec2 _f1;
 bvec4 _f2;
} ;

struct _GLF_struct_24 {
 _GLF_struct_22 _f0;
 _GLF_struct_23 _f1;
 mat4 _f2;
} ;

struct _GLF_struct_32 {
 mat4x3 _f0;
 _GLF_struct_24 _f1;
 mat2 _f2;
 _GLF_struct_26 _f3;
 _GLF_struct_28 _f4;
 bvec3 _f5;
 _GLF_struct_31 _f6;
 uint num_workgroup;
} ;

struct _GLF_struct_19 {
 uint _f0;
 vec4 _f1;
 uvec2 _f2;
 bvec4 _f3;
 uvec3 _f4;
 uint _f5;
} ;

struct _GLF_struct_18 {
 vec3 _f0;
 mat3 _f1;
 mat3x4 _f2;
} ;

struct _GLF_struct_17 {
 mat4 _f0;
 bvec2 _f1;
 bool _f2;
 ivec3 _f3;
 vec4 _f4;
 vec2 _f5;
 mat4x2 _f6;
} ;

struct _GLF_struct_20 {
 _GLF_struct_17 _f0;
 mat4x3 _f1;
 _GLF_struct_18 _f2;
 vec4 _f3;
 _GLF_struct_19 _f4;
 uvec2 _f5;
 mat2x4 _f6;
} ;

struct _GLF_struct_21 {
 uint workgroup_size;
 _GLF_struct_20 _f0;
 mat2x3 _f1;
 vec4 _f2;
 mat2x3 _f3;
 bvec3 _f4;
} ;

struct _GLF_struct_15 {
 ivec4 _f0;
 bvec4 _f1;
 mat2 _f2;
} ;

struct _GLF_struct_16 {
 mat4x2 _f0;
 int _f1;
 _GLF_struct_15 _f2;
 mat4x2 _f3;
 bvec2 _f4;
 uint workgroup_id;
} ;

struct _GLF_struct_14 {
 ivec3 _f0;
 uint subgroup_id;
} ;

struct _GLF_struct_11 {
 bvec3 _f0;
} ;

struct _GLF_struct_10 {
 bool _f0;
 uvec4 _f1;
 bvec4 _f2;
 uvec4 _f3;
} ;

struct _GLF_struct_12 {
 _GLF_struct_10 _f0;
 _GLF_struct_11 _f1;
} ;

struct _GLF_struct_8 {
 mat4x2 _f0;
 uvec4 _f1;
} ;

struct _GLF_struct_9 {
 int _f0;
 _GLF_struct_8 _f1;
 ivec4 _f2;
 uvec3 _f3;
} ;

struct _GLF_struct_6 {
 mat3x2 _f0;
 mat3 _f1;
 mat2 _f2;
 mat3x2 _f3;
 vec3 _f4;
 vec3 _f5;
 float _f6;
} ;

struct _GLF_struct_5 {
 mat4x3 _f0;
} ;

struct _GLF_struct_7 {
 _GLF_struct_5 _f0;
 uvec3 _f1;
 float _f2;
 _GLF_struct_6 _f3;
 uvec3 _f4;
} ;

struct _GLF_struct_13 {
 uint virtual_gid;
 ivec2 _f0;
 float _f1;
 _GLF_struct_7 _f2;
 _GLF_struct_9 _f3;
 _GLF_struct_12 _f4;
} ;

struct _GLF_struct_3 {
 uvec3 _f0;
 ivec2 _f1;
} ;

struct _GLF_struct_2 {
 uint subgroup_local_id;
 bvec4 _f0;
 mat4x2 _f1;
 uvec4 _f2;
} ;

struct _GLF_struct_1 {
 mat3x2 _f0;
} ;

struct _GLF_struct_0 {
 mat2x4 _f0;
 mat4 _f1;
 mat2x4 _f2;
} ;

struct _GLF_struct_4 {
 _GLF_struct_0 _f0;
 mat2x4 _f1;
 _GLF_struct_1 _f2;
 _GLF_struct_2 _f3;
 bvec4 _f4;
 _GLF_struct_3 _f5;
} ;

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 _GLF_struct_14 _GLF_struct_replacement_14 = _GLF_struct_14(ivec3(1), gl_SubgroupID);
 if((false))
  return;
 do
  {
   if((false))
    {
     if((false))
      {
       if((false))
        barrier();
       do
        {
         barrier();
        }
       while(false);
      }
     if(((((true && ((bool(bvec3((bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, false, false))), true, (((mix(float(((true ? injectionSwitch.x : (9.6)))), float((- 1.6)), bool(false))) > injectionSwitch.y)))))))))))
      barrier();
     for(int _injected_loop_counter = 1; _injected_loop_counter > (0 >> ((int(int(int(5)))))); _injected_loop_counter --)
      {
       if((false))
        continue;
       return;
      }
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
    }
  }
 while(((injectionSwitch.x > injectionSwitch.y)));
 if((false))
  {
   if(true)
    {
     barrier();
    }
   else
    {
    }
  }
 if((false))
  {
   if((bool(bvec4(false, false, ((injectionSwitch.x < injectionSwitch.y)), true))))
    {
    }
   else
    {
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if((false))
  {
   if((false))
    {
     for(int _injected_loop_counter = ((1 << (int(6))) >> (int(6))); _injected_loop_counter != 0; _injected_loop_counter --)
      {
       return;
      }
    }
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
      {
       do
        {
         barrier();
        }
       while(false);
      }
    }
   barrier();
  }
 uint subgroup_size = gl_SubgroupSize;
 _GLF_struct_4 _GLF_struct_replacement_4 = _GLF_struct_4(_GLF_struct_0(mat2x4(((true ? 1.0 : (- 4643.4106)))), mat4(1.0), mat2x4(1.0)), mat2x4(1.0), _GLF_struct_1(mat3x2((0.0 + (1.0)))), _GLF_struct_2(gl_SubgroupInvocationID, bvec4((bool(bvec4((! (((! (true)) && true))), false, true, false)))), mat4x2(1.0), uvec4(1u)), bvec4(true), _GLF_struct_3(uvec3(1u), ivec2(1)));
 if(((true && (false))))
  barrier();
 if((false))
  {
   for(int _injected_loop_counter = 0; ((_injected_loop_counter < (0 | 1)) && ((injectionSwitch.x < injectionSwitch.y))); _injected_loop_counter ++)
    {
     return;
    }
  }
 if(((injectionSwitch.x < injectionSwitch.y)))
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      {
       if(((false || (false))))
        barrier();
       if((false))
        {
         if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
          return;
         barrier();
        }
       if((false))
        barrier();
       return;
      }
     if((false))
      return;
     if((false))
      barrier();
     if((false))
      return;
     return;
     if((false))
      barrier();
     if((false))
      {
       if(false)
        {
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           barrier();
          }
        }
       if((false))
        return;
       if((false))
        barrier();
       barrier();
      }
    }
  }
 else
  {
  }
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(false);
   return;
  }
 for(int _injected_loop_counter = 1; _injected_loop_counter != (0 >> (int(6))); _injected_loop_counter --)
  {
   if((false))
    return;
  }
 if(((injectionSwitch.x < injectionSwitch.y)))
  {
   if((false))
    {
     do
      {
       barrier();
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
    }
  }
 else
  {
  }
 if(((bool(bvec3(((injectionSwitch.x > injectionSwitch.y)), true, true)))))
  barrier();
 if((! (! ((false)))))
  {
   if((false))
    {
     if((false))
      barrier();
     do
      {
       return;
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
    }
   return;
   if((false))
    barrier();
  }
 if((false))
  return;
 if((bool((bvec3((bvec3(bvec3(bvec3(bvec3((! (! ((false)))), false, false))))))))))
  return;
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   for(int _injected_loop_counter = (0 ^ 0); _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
    {
     do
      {
       if((false))
        break;
       do
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           return;
          }
        }
       while(false);
      }
     while((bool(bool(false))));
    }
   if((false))
    {
     if((bool(bvec2((false), false))))
      barrier();
     return;
    }
   return;
   for(int _injected_loop_counter = (1 | 0); _injected_loop_counter != 0; _injected_loop_counter --)
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(true)
        {
         barrier();
         if(true)
          {
           if(((bool(bvec2(((injectionSwitch.x > injectionSwitch.y)), true)))))
            {
             if((false))
              {
               if(((injectionSwitch.x < injectionSwitch.y)))
                {
                 barrier();
                }
               else
                {
                }
              }
             return;
            }
          }
         else
          {
          }
        }
       else
        {
        }
      }
    }
  }
 if(((((((injectionSwitch.x > injectionSwitch.y)) || (bool(bvec3(injectionSwitch.x < injectionSwitch.y, false, true))))))))
  {
   if((bool(bvec3((((injectionSwitch.x > injectionSwitch.y))), false, true))))
    return;
  }
 else
  {
  }
 if((false))
  barrier();
 if((false))
  {
   if((((false) && true)))
    {
     if(false)
      {
      }
     else
      {
       barrier();
      }
    }
   if((false))
    barrier();
   return;
   if((false))
    return;
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    {
     if((! (! (((false) && true)))))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 if((false))
  barrier();
 _GLF_struct_32 _GLF_struct_replacement_32 = _GLF_struct_32(mat4x3(1.0), _GLF_struct_24(_GLF_struct_22(mat3(1.0), vec2(1.0), bvec4((bool(bvec3(true, false, ((injectionSwitch.x < injectionSwitch.y))))))), _GLF_struct_23(mat3((mix(float((6.6)), float((clamp(((mix(float((clamp(max(1.0, 1.0), ((true ? max(1.0, 1.0) : (- 4.8))), max(1.0, 1.0)))), float((740.255)), bool(false)))), 1.0, 1.0))), bool(true)))), bvec2(true), 1, vec2(1.0), mat3(1.0)), ((mat4(1.0)) * mat4(1.0))), mat2(1.0), _GLF_struct_26(_GLF_struct_25(true), mat4x2(1.0), mat3x2(1.0), ivec4(1), bvec4(true)), _GLF_struct_28(mat2(1.0), _GLF_struct_27(uvec4(1u))), bvec3(true), _GLF_struct_31(uvec2(((1u) + 0u)), _GLF_struct_29(vec3(((true ? ((1.0) - 0.0) : (8.2)))), uvec2(1u), bvec4(true)), _GLF_struct_30(ivec2(1), bvec2(true), mat2(1.0), vec4(1.0)), ivec3(1), vec4(1.0), uvec2(1u)), gl_NumWorkGroups.x);
 for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
  {
   if((((injectionSwitch.x > (max(injectionSwitch.y, injectionSwitch.y))))))
    return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     if(((! (! (false)))))
      {
       if((false))
        return;
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        return;
       if((false))
        barrier();
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             return;
            }
           while(false);
          }
        }
       return;
      }
    }
   else
    {
    }
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(true)
  {
   if((false))
    barrier();
   if((false))
    return;
  }
 else
  {
  }
 if((false))
  {
   if((((bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, true, true))))))
    barrier();
   for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
    {
     if((false))
      break;
     return;
    }
  }
 if((((false) && true)))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 do
  {
   for(_GLF_struct_48 _GLF_struct_replacement_48 = _GLF_struct_48(_GLF_struct_34(mat4x3(((true ? (max(1.0, (mix(float((- 2.6)), float(1.0), bool(true))))) : (degrees(- 7304.7331))))), _GLF_struct_33(ivec4(1)), 1.0), _GLF_struct_36(_GLF_struct_35(mat2x3(1.0), bvec2(true))), 1.0, _GLF_struct_38(1, _GLF_struct_37(bvec3(true), 1.0, uvec2(((1u) << (0u | 0u))), (vec2(0.0, 0.0) + (vec2(1.0))), ivec2(1))), _GLF_struct_40(_GLF_struct_39(bvec3((false || ((! (! (true))))))), bvec4(true), ivec3(1)), _GLF_struct_46(_GLF_struct_41(((ivec2(1)) << ivec2((((int(ivec4((~ (~ (0))), 0, int((injectionSwitch.y)), int((injectionSwitch.y))))) | (int(ivec4((~ (~ (0))), 0, int((injectionSwitch.y)), int((injectionSwitch.y))))))), 0)), ivec2(1), mat3x2(1.0), 1.0), _GLF_struct_42(uvec4(1u), uvec4(1u), mat2x3(1.0)), _GLF_struct_43(1.0, ivec4(1), mat2x4(1.0), bvec4(true), mat2x4(1.0), vec4(((false ? (83.61) : 1.0)))), mat3x4(1.0), _GLF_struct_44((bool(bvec2((true && (true)), true))), uvec3(1u), true, mat4x2(1.0)), _GLF_struct_45(ivec4(1), uvec2(1u), mat3x4((exp(0.0) * (1.0))), 1u, uvec3(1u), vec3(1.0))), _GLF_struct_47((~ (~ (uvec2(1u)))), mat3x4(1.0), mat2(1.0), mat3x2(1.0))); _GLF_struct_replacement_48._f3._injected_loop_counter > 0; ((true ? _GLF_struct_replacement_48._f3._injected_loop_counter -- : (95468))))
    {
     if((false))
      barrier();
     if((false))
      break;
     if((false))
      barrier();
     if(false)
      {
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         break;
        }
       if((false))
        {
         if((false))
          barrier();
         if(true)
          {
           barrier();
          }
         else
          {
          }
         if((false))
          return;
        }
      }
     if((false))
      {
       if((! (! ((((false)) || false)))))
        {
         do
          {
           if((false))
            barrier();
          }
         while(false);
         barrier();
        }
       if((false))
        {
         for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
       for(int _injected_loop_counter = (0 & (~ - 50894)); _injected_loop_counter < 1; _injected_loop_counter ++)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       for(int _injected_loop_counter = (- 58886 & 0); _injected_loop_counter != 1; _injected_loop_counter ++)
        {
         if((((((injectionSwitch.x > injectionSwitch.y)))) && true))
          {
           if((false))
            barrier();
           barrier();
          }
        }
       return;
      }
     if((false))
      barrier();
     if((false))
      break;
     for(int _injected_loop_counter = (1 & 1); ((false ? (int(atomicExchange(subgroup_size, 32464u))) : _injected_loop_counter)) != ((((0 ^ (0 << (int(3))))) << 0)); ((_injected_loop_counter --) << 0))
      {
       if(((((injectionSwitch.x > injectionSwitch.y)) || ((! (! (false)))))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            break;
           barrier();
          }
         if(((bool(bool(false)))))
          barrier();
         if((false))
          continue;
         continue;
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          {
           if((false))
            barrier();
           if((false))
            continue;
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > 0; _injected_loop_counter --)
              {
               if(false)
                {
                }
               else
                {
                 barrier();
                }
              }
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
           for(int _injected_loop_counter = 1; _injected_loop_counter != (0 >> (int(4))); _injected_loop_counter --)
            {
             return;
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
            }
          }
         if(((true && (false))))
          barrier();
         for(int _injected_loop_counter = (0 ^ 0); _injected_loop_counter < 1; _injected_loop_counter ++)
          {
           if((false))
            return;
          }
         if((false))
          barrier();
         if((false))
          barrier();
        }
       if((false))
        {
         if((false))
          continue;
         if(false)
          {
          }
         else
          {
           if((false))
            barrier();
          }
         if((false))
          {
           if((false))
            break;
           break;
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          {
           if(false)
            {
            }
           else
            {
             if((false))
              return;
            }
           continue;
          }
         if((((false) || false)))
          {
           if((false))
            barrier();
           if((false))
            barrier();
           if(((((! (((! (false)) && true))) && ((injectionSwitch.x < injectionSwitch.y))))))
            {
             if(((! (! (false)))))
              {
               if((! (! (true))))
                {
                 return;
                }
               else
                {
                }
              }
             if((false))
              continue;
             continue;
             if((bool((bvec2(bvec3(bvec2((((injectionSwitch.x > injectionSwitch.y))), true), true))))))
              {
               if(true)
                {
                 for(int _injected_loop_counter = ((0 | 0) >> (int(8))); _injected_loop_counter != 1; _injected_loop_counter ++)
                  {
                   barrier();
                  }
                }
               else
                {
                }
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
            }
           for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
            {
             do
              {
               if((false))
                barrier();
               if(false)
                {
                }
               else
                {
                 do
                  {
                   barrier();
                  }
                 while(false);
                }
               if((false))
                {
                 if((false))
                  barrier();
                 if(true)
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if((((false) && true)))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   return;
                  }
                 if((false))
                  barrier();
                 break;
                }
               if((false))
                break;
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if((false))
                {
                 for(int _injected_loop_counter = 0; _injected_loop_counter != ((1 & 1) ^ 0); _injected_loop_counter ++)
                  {
                   barrier();
                  }
                }
              }
             while(false);
            }
           for(int _injected_loop_counter = 0; _injected_loop_counter < (1 ^ 0); _injected_loop_counter ++)
            {
             if((false))
              {
               if((false))
                return;
               barrier();
              }
            }
           if((bool(bool(false))))
            {
            }
           else
            {
             if((false))
              barrier();
            }
           if((false))
            return;
           do
            {
             if((false))
              barrier();
            }
           while(false);
           if((false))
            continue;
           do
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
                {
                 barrier();
                }
              }
            }
           while(false);
           if((false))
            barrier();
           if(false)
            {
            }
           else
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           if((false))
            {
             if((false))
              barrier();
             if((bool(bvec4((true && ((bool(bvec3(false, true, false))))), false, false, ((injectionSwitch.x > injectionSwitch.y))))))
              {
               if((false))
                barrier();
              }
             else
              {
               do
                {
                 barrier();
                }
               while(false);
              }
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            continue;
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                barrier();
               continue;
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                break;
               break;
              }
             continue;
            }
           if(false)
            {
            }
           else
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if(true)
                {
                 barrier();
                }
               else
                {
                }
              }
            }
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((false))
              break;
             if((false))
              barrier();
             if((false))
              {
               if(((((vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
                barrier();
               if((false))
                continue;
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               for(int _injected_loop_counter = (((1 << (int(0))) >> (int(0))) ^ 0); _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
                {
                 if((false))
                  return;
                }
               barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             return;
            }
           for(int _injected_loop_counter = 1; _injected_loop_counter > (26674 & 0); _injected_loop_counter --)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if((false))
            barrier();
          }
         if((false))
          return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           if((false))
            barrier();
           continue;
           if((false))
            return;
           if((false))
            barrier();
          }
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if(false)
                {
                }
               else
                {
                 if((false))
                  barrier();
                }
               barrier();
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
             barrier();
            }
           continue;
          }
         if((false))
          {
           do
            {
             if((((false) && true)))
              {
               for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
                {
                 if(false)
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
              }
            }
           while(((((false || (bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))))))));
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
             if((false))
              barrier();
            }
           else
            {
             if((false))
              barrier();
             return;
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            {
             if((false))
              {
               do
                {
                 barrier();
                }
               while(((injectionSwitch.x > injectionSwitch.y)));
              }
             if(true)
              {
               barrier();
               if((false))
                break;
              }
             else
              {
              }
             if((false))
              barrier();
            }
           return;
          }
         if((false))
          {
           for(int _injected_loop_counter = 0; (bool(bvec2(_injected_loop_counter < int((injectionSwitch.y)), true))); _injected_loop_counter ++)
            {
             barrier();
            }
          }
         if(((true && (((injectionSwitch.x > injectionSwitch.y))))))
          barrier();
         if((false))
          barrier();
         if((false))
          break;
         if((false))
          {
           if((false))
            return;
           continue;
          }
         return;
         if((false))
          {
           for(int _injected_loop_counter = (0 >> (int(3))); _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
            {
             barrier();
            }
          }
         if((bool(bool(false))))
          {
          }
         else
          {
           for(int _injected_loop_counter = 0; _injected_loop_counter != (~ (~ (1))); _injected_loop_counter ++)
            {
             if(((((clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > (max(injectionSwitch, injectionSwitch)).y))))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(((injectionSwitch.x > injectionSwitch.y)))
                {
                }
               else
                {
                 if(false)
                  {
                  }
                 else
                  {
                   if(true)
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                }
               if((false))
                {
                 if((false))
                  break;
                 barrier();
                }
               if((false))
                {
                 for(int _injected_loop_counter = ((1 << (int(6))) >> (int(6))); _injected_loop_counter != 0; _injected_loop_counter --)
                  {
                   barrier();
                  }
                }
              }
             if((((false)) || ((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((false))
              return;
            }
          }
         if((false))
          {
           for(int _injected_loop_counter = (0 >> (int(7))); _injected_loop_counter < ((1 << (int(7))) >> (int(7))); _injected_loop_counter ++)
            {
             return;
            }
          }
         if((false))
          {
           if((bool((false || (bool((! ((bool(bool(! ((((injectionSwitch.x > injectionSwitch.y)))))))))))))))
            break;
           barrier();
           if((((false) && true)))
            barrier();
          }
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             do
              {
               barrier();
              }
             while(((injectionSwitch.x > injectionSwitch.y)));
            }
           return;
          }
         for(int _injected_loop_counter = ((1 << (int(5))) >> (int(5))); _injected_loop_counter > 0; _injected_loop_counter --)
          {
           if(((false || (false))))
            {
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
              }
             else
              {
               if((false))
                continue;
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if((false))
                  {
                   if((((injectionSwitch.x < injectionSwitch.y)) && ((false))))
                    continue;
                   barrier();
                  }
                 return;
                }
              }
             if((false))
              break;
             return;
             if((false))
              break;
            }
          }
         if((false))
          {
           if((false))
            barrier();
           if((false))
            barrier();
           if(false)
            {
            }
           else
            {
             barrier();
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           if((false))
            {
             if((false))
              barrier();
             break;
            }
           continue;
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           break;
          }
        }
       do
        {
         if((false))
          barrier();
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(false)
            {
            }
           else
            {
             barrier();
            }
          }
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((false))
        {
         if(false)
          {
          }
         else
          {
           if(((((injectionSwitch.x < injectionSwitch.y)) && (((false) && true)))))
            {
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
              }
             else
              {
               if(false)
                {
                }
               else
                {
                 barrier();
                }
              }
            }
          }
         continue;
        }
       if((false))
        continue;
       if((false))
        barrier();
       if((false))
        {
         if((((((injectionSwitch.x > injectionSwitch.y)) || false))))
          barrier();
         if((false))
          continue;
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if((false))
        barrier();
       if((false))
        break;
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           barrier();
          }
         else
          {
          }
        }
       if((((injectionSwitch.x > ((vec2(1.0, 1.0) * ((injectionSwitch) * mat2((injectionSwitch.y))))).y))))
        continue;
       if((false))
        continue;
       if((false))
        barrier();
       if((false))
        {
         if((! ((((! (! (! (((! (! ((true && ((bool(bvec4(false, false, false, false)))))))))))))) || false))))
          {
           if((false))
            break;
           break;
          }
         break;
         if(((false || (false))))
          barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if((false))
      continue;
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
     if(false)
      {
      }
     else
      {
       do
        {
         if((((! ((false || (! ((injectionSwitch.x > injectionSwitch.y)))))))))
          barrier();
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
      }
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        break;
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(true)
          {
           barrier();
          }
         else
          {
          }
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
       continue;
      }
     if((false))
      barrier();
    }
  }
 while(false);
 if((false || ((false))))
  {
   if((false))
    return;
   barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if((false))
  {
   if((false))
    barrier();
   return;
  }
 _GLF_struct_21 _GLF_struct_replacement_21 = _GLF_struct_21(gl_WorkGroupSize.x, _GLF_struct_20(_GLF_struct_17(mat4(1.0), bvec2(true), true, ivec3(1), vec4(1.0), vec2(1.0), mat4x2(1.0)), mat4x3(1.0), _GLF_struct_18(vec3(1.0), mat3(1.0), mat3x4(1.0)), vec4(1.0), _GLF_struct_19(1u, vec4(1.0), uvec2(1u), bvec4(true), uvec3(1u), 1u), uvec2(1u), mat2x4(1.0)), mat2x3(1.0), vec4(1.0), mat2x3(1.0), bvec3(true));
 if((false))
  barrier();
 if((false))
  {
   if((false))
    {
     if((false))
      return;
     if((false))
      barrier();
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       if((false))
        {
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           return;
          }
         else
          {
          }
        }
      }
     if(false)
      {
      }
     else
      {
       if((false))
        barrier();
       barrier();
      }
    }
   if((false))
    return;
   if((false))
    {
     if((false))
      barrier();
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       return;
      }
    }
   barrier();
  }
 if((false))
  barrier();
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(false)
      {
      }
     else
      {
       return;
      }
    }
   return;
  }
 if((false))
  {
   if((false))
    {
     if(false)
      {
      }
     else
      {
       if(true)
        {
         return;
        }
       else
        {
        }
      }
    }
   if(((false || (false))))
    return;
   barrier();
   if((false))
    barrier();
  }
 if(((injectionSwitch.x > injectionSwitch.y)))
  {
   if((false))
    barrier();
  }
 else
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      return;
     barrier();
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = (0 << ((((max(int(8), int(8)))) << 0))); (bool(bvec2(_injected_loop_counter != (1 ^ int((injectionSwitch.x))), true))); _injected_loop_counter ++)
        {
         barrier();
        }
      }
     return;
    }
   if((false))
    barrier();
  }
 if((false))
  return;
 if((false || (true)))
  {
   for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != 1; ((_injected_loop_counter ++) << 0))
    {
     if(false)
      {
      }
     else
      {
       if((false))
        barrier();
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     do
      {
       return;
      }
     while(false);
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
  }
 _GLF_struct_16 _GLF_struct_replacement_16 = _GLF_struct_16(mat4x2(1.0), 1, _GLF_struct_15(ivec4(1), bvec4(true), mat2(1.0)), mat4x2(1.0), bvec2(true), gl_WorkGroupID.x);
 if(((! (! ((bool((bvec2(bvec2(bvec2(false, false)))))))))))
  {
   do
    {
     if((false))
      barrier();
    }
   while(false);
   do
    {
     if((false))
      barrier();
    }
   while(false);
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if(((((injectionSwitch.x < injectionSwitch.y)) && (false))))
    return;
   if((false))
    barrier();
   return;
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
    }
   else
    {
    }
  }
 uint workgroup_base = _GLF_struct_replacement_21.workgroup_size * _GLF_struct_replacement_16.workgroup_id;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 for(int _injected_loop_counter = ((1 << (int(3))) >> (int(3))); _injected_loop_counter > 0; _injected_loop_counter --)
  {
   if((false))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       break;
      }
     do
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
     if(((! (! (false)))))
      {
       for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != 1; _injected_loop_counter ++)
        {
         return;
        }
      }
     if((false))
      barrier();
     if((bool(bvec4(true, true, (! (! (false))), false))))
      {
       return;
       if((false))
        barrier();
      }
     else
      {
      }
     if((false))
      barrier();
     if((((injectionSwitch.x > ((injectionSwitch.y) - 0.0)))))
      {
       if((false))
        barrier();
       break;
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(true)
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
         break;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         if((false))
          {
           if((false))
            break;
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                {
                 if(((injectionSwitch.x > injectionSwitch.y)))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
               barrier();
              }
             barrier();
             if((false))
              break;
            }
           if((true && ((false))))
            continue;
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              barrier();
             do
              {
               if(((injectionSwitch.x < injectionSwitch.y)))
                {
                 if((false))
                  return;
                }
               else
                {
                }
               barrier();
              }
             while(false);
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               return;
              }
            }
           if((false))
            break;
           barrier();
           if((false))
            {
             if((false))
              barrier();
             do
              {
               if((false))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                continue;
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                break;
              }
             while(((injectionSwitch.x > injectionSwitch.y)));
            }
           if((false))
            barrier();
           if((false))
            return;
          }
         if((false))
          return;
         if((false))
          barrier();
         if(((((min(injectionSwitch, injectionSwitch)).x > (mix(float((vec4(- 78.68, - 54.26, - 0.9, - 6.4).b)), float(injectionSwitch.y), bool(true)))))))
          barrier();
         if((false))
          return;
         if(true)
          {
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
          }
         else
          {
          }
         if((false))
          {
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             for(int _injected_loop_counter = 0; _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
              {
               barrier();
              }
            }
           else
            {
            }
          }
         if((false))
          {
           if(false)
            {
            }
           else
            {
             barrier();
            }
          }
         barrier();
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
      }
     else
      {
       if((false))
        barrier();
      }
    }
  }
 _GLF_struct_13 _GLF_struct_replacement_13 = _GLF_struct_13((uint((~ (~ (uvec3(workgroup_base, 1u, 0u)))))) + _GLF_struct_replacement_14.subgroup_id * subgroup_size + _GLF_struct_replacement_4._f3.subgroup_local_id, ivec2(1), 1.0, _GLF_struct_7(_GLF_struct_5(mat4x3(1.0)), (max(uvec3(1u), (uvec3(0u, 0u, 0u) ^ (uvec3(((1u) ^ 0u)))))), 1.0, _GLF_struct_6(mat3x2((min((float(mat3(1.0, 0.0, 0.0, (min((float(mat4x3(0.0, 1.0, 0.0, 0.0, (0.0 + ((0.0 + (0.0)))), round(length(normalize(1.0))), 1.0, 0.0, 1.0, 0.0, (dot(vec3(0.0, 0.0, 0.0), vec3((max(1.0, 1.0)), 1.0, 1.0))), 0.0))), 0.0)), 1.0, 1.0, ((1.0) / exp(0.0)), 0.0, 0.0))), 1.0))), mat3(1.0), mat2(1.0), mat3x2(1.0), vec3(1.0), vec3(1.0), 1.0), ((uvec3(1u)) | (uvec3(1u)))), _GLF_struct_9(1, _GLF_struct_8(mat4x2(1.0), (max(uvec4(1u), uvec4(1u)))), ivec4(1), uvec3(1u)), _GLF_struct_12(_GLF_struct_10(true, uvec4(1u), bvec4(true), uvec4(1u)), _GLF_struct_11(bvec3(true))));
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    return;
   barrier();
   if((false))
    barrier();
  }
 if(false)
  {
  }
 else
  {
   if((false))
    {
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       return;
      }
     else
      {
      }
    }
  }
 if((false))
  {
   if((((false) || false)))
    barrier();
   if(false)
    {
    }
   else
    {
     barrier();
    }
  }
 if(((((bool(bool(injectionSwitch.x > injectionSwitch.y)))))))
  {
   do
    {
     if((false))
      {
       if((false))
        barrier();
       if((false))
        barrier();
       continue;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      {
       if((false))
        {
         if((false))
          {
           if((false))
            barrier();
           break;
          }
         barrier();
        }
       break;
       if((false))
        return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      break;
     if(((((! ((! (! (! (injectionSwitch.x > injectionSwitch.y))))))))))
      {
       if((((! (! (true && (false)))))))
        {
         if(((false || (((injectionSwitch.x > injectionSwitch.y))))))
          barrier();
         barrier();
        }
       if((false))
        barrier();
       if((false))
        {
         if((false))
          barrier();
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           return;
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         return;
        }
       if((false))
        break;
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(((true && (false))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if(true)
        {
         if((((false) || false)))
          break;
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       else
        {
         if(((false || (false))))
          barrier();
        }
       if(true)
        {
         if((false))
          barrier();
        }
       else
        {
        }
       if(true)
        {
         if((false))
          barrier();
        }
       else
        {
        }
       if((false))
        barrier();
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
    }
   while(false);
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    {
     if(((! ((bool(bool(! (false))))))))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   if((false))
    {
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
      }
     if(((bool(bvec3(false, true, true)))))
      {
       if((false))
        {
         if(((((bool(bvec2(false, false)))) || false)))
          barrier();
         if((false))
          return;
         if((false))
          barrier();
         barrier();
        }
       barrier();
      }
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
     return;
     if((false))
      return;
     if(((! (! ((bool(bool(false))))))))
      barrier();
    }
   if((false))
    return;
   do
    {
     if((false))
      break;
     if((false))
      continue;
     if((false))
      {
       if(((bool(bvec2(bool(bvec4((! (! ((((injectionSwitch.x > injectionSwitch.y)))))), true, true, true)), false)))))
        {
         if(((true && (((injectionSwitch.x > injectionSwitch.y))))))
          return;
         break;
        }
       break;
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(true)
          {
           barrier();
          }
         else
          {
          }
        }
      }
     if((false))
      barrier();
     if((false))
      barrier();
     do
      {
       if(false)
        {
         if((false))
          return;
        }
       else
        {
         barrier();
        }
       if((false))
        break;
      }
     while(((! (! ((false)))) || false));
     if((false))
      barrier();
     if((false))
      barrier();
     if((false))
      {
       if((false))
        break;
       if((false))
        {
         do
          {
           if((false))
            barrier();
           barrier();
           if((false))
            continue;
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
        }
       if((false))
        break;
       if(((((true && (bool(bvec4((bool(bvec3(false, true, true))), ((injectionSwitch.x > injectionSwitch.y)), false, false))))) || ((false || (false))))))
        {
         if(((((bool(bool(false))) || false))))
          barrier();
         if((false))
          break;
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         continue;
         if((false))
          barrier();
         if((false))
          {
           if((((false) || ((injectionSwitch.x > injectionSwitch.y)))))
            barrier();
           break;
          }
        }
       if((false))
        barrier();
       if((false))
        barrier();
       barrier();
      }
     if((false))
      continue;
     if((false))
      barrier();
     if((false))
      {
       for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > 0; _injected_loop_counter --)
        {
         barrier();
        }
      }
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
       barrier();
      }
     if(((! (! (false)))))
      {
       for(int _injected_loop_counter = 0; _injected_loop_counter < (0 ^ 1); _injected_loop_counter ++)
        {
         if((false))
          barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
       for(int _injected_loop_counter = 0; _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
        {
         barrier();
        }
      }
     if((((! ((bool(bvec4(! (bool(bool(false))), true, ((injectionSwitch.x > injectionSwitch.y)), false))))))))
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(((false || (false))))
        barrier();
       if((false))
        return;
       if(((((vec2(0.0, 0.0) + (injectionSwitch)).x > injectionSwitch.y))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
       barrier();
      }
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while((((vec2(mat4x2(injectionSwitch, 0.0, (dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0))), (injectionSwitch.y), 1.0, 1.0, ((true ? (mix(float((8.8)), float(0.0), bool((! (! ((((bool(bvec4(injectionSwitch.x < injectionSwitch.y, true, false, false))))))))))) : (73.14)))))).x > injectionSwitch.y)));
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if(false)
    {
    }
   else
    {
     if((false))
      {
       if((false))
        return;
       barrier();
      }
    }
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    {
     if((false))
      barrier();
     return;
    }
   if(false)
    {
    }
   else
    {
     if((false))
      return;
    }
   if(((bool(bvec4(false, true, true, true)))))
    barrier();
   barrier();
  }
 if((false))
  {
   if(true)
    {
     if((false))
      barrier();
    }
   else
    {
    }
   if((false))
    barrier();
   if(true)
    {
     if((false))
      {
       if((false))
        return;
       if((false))
        barrier();
       return;
       if((false))
        return;
      }
    }
   else
    {
    }
   if((false))
    {
     do
      {
       return;
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
    }
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       if(true)
        {
         barrier();
        }
       else
        {
        }
      }
     while(false);
    }
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
    }
   else
    {
     if(((bool(bvec4(false, ((injectionSwitch.x < injectionSwitch.y)), false, true)))))
      return;
    }
   do
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      continue;
    }
   while(false);
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
     if((((injectionSwitch.x > (max(injectionSwitch.y, injectionSwitch.y))))))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(false)
        {
        }
       else
        {
         if((false))
          {
           if(false)
            {
            }
           else
            {
             barrier();
            }
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((((injectionSwitch.x > injectionSwitch.y)) || false))))
          barrier();
         barrier();
        }
       barrier();
      }
    }
   else
    {
     if((false))
      {
       if((false))
        return;
       return;
       if(((! (! ((((injectionSwitch.x > injectionSwitch.y))) && true)))))
        {
        }
       else
        {
         if(((((! (! (((false) || false))))) || false)))
          {
           if(((true && (((! (! (bool(bvec2(false, true))))))))))
            {
             if(((injectionSwitch.x < injectionSwitch.y)))
              {
               if((false))
                barrier();
              }
             else
              {
              }
             if(((injectionSwitch.x < injectionSwitch.y)))
              {
               do
                {
                 return;
                }
               while(((injectionSwitch.x > injectionSwitch.y)));
              }
             else
              {
              }
            }
           if(false)
            {
            }
           else
            {
             barrier();
            }
          }
        }
       if((false))
        return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     while(false);
     if((false))
      barrier();
    }
   barrier();
   if(((! (! ((! (! (false))))))))
    return;
  }
 if((! (! ((false)))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y)) || (true)))
      {
       if((false))
        barrier();
      }
     else
      {
      }
     return;
    }
   if((false))
    return;
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 1; _injected_loop_counter > (0 | 0); _injected_loop_counter --)
      {
       barrier();
      }
    }
   if((false))
    barrier();
   if((((bool(bool((injectionSwitch.x > injectionSwitch.y)))))))
    {
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       barrier();
      }
    }
   do
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          {
           if(((! ((true && (! (false)))))))
            barrier();
           if((false))
            {
             if((false))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           if((false))
            barrier();
           return;
           if((false))
            barrier();
          }
         if((false))
          barrier();
         return;
         if((false))
          barrier();
        }
       for(int _injected_loop_counter = ((1 << (int(4))) >> (int(4))); _injected_loop_counter != 0; _injected_loop_counter --)
        {
         if((false))
          return;
        }
       if((false))
        continue;
       if((false))
        {
         if((false))
          return;
         break;
        }
       if((((injectionSwitch.x > ((true ? injectionSwitch.y : (- 415.450)))))))
        barrier();
       for(int _injected_loop_counter = ((((int(int(((false ? (82849) : 0 >> (~ (~ ((clamp((int(4)), (int(4)), (int(4))))))))))))) / 1)); _injected_loop_counter < (clamp(1, 1, 1)); _injected_loop_counter ++)
        {
         if(true)
          {
           if((false))
            barrier();
          }
         else
          {
          }
         if(((true && ((! ((! (! (! (false))))))))))
          {
           if((false))
            {
             if(true)
              {
               if((false))
                barrier();
              }
             else
              {
              }
             continue;
            }
           barrier();
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        break;
       return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((false)) || false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       continue;
      }
    }
   while((((false || ((true && (injectionSwitch.x > injectionSwitch.y)))))));
   if((false))
    barrier();
   return;
   if((false))
    return;
   if((false))
    barrier();
  }
 if((false))
  {
   if(true)
    {
     if((false))
      {
       if((false))
        {
         if(false)
          {
          }
         else
          {
           barrier();
          }
        }
       barrier();
      }
    }
   else
    {
    }
   return;
  }
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 for(int _injected_loop_counter = 0; _injected_loop_counter != ((((1 << (int(6))) >> (int(6))) << (int(5))) >> (int(5))); _injected_loop_counter ++)
  {
   if((((true && ((((false || (! ((bool(bool(! (false))))))))))) && true)))
    {
     for(int _injected_loop_counter = ((1 << (int(4))) >> (((0 + ((int((clamp((0 + (4)), 4, 4)))))) | 0))); _injected_loop_counter != 0; _injected_loop_counter --)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         if((((((injectionSwitch.x > injectionSwitch.y))) && true)))
          continue;
         if((((((false) || false)) || false)))
          break;
         barrier();
         if((false))
          barrier();
        }
      }
     if(false)
      {
      }
     else
      {
       if((false))
        {
         do
          {
           return;
          }
         while((false || (false)));
        }
      }
     barrier();
    }
  }
 if((false))
  return;
 _GLF_struct_51 _GLF_struct_replacement_51 = _GLF_struct_51(ivec3(1), _GLF_struct_50(_GLF_struct_49(mat3x4(1.0)), mat4x2(1.0), uvec3((min(((1u) * 1u), 1u))), mat2(1.0), 1.0), workgroup_base + _GLF_struct_replacement_14.subgroup_id * subgroup_size + ((_GLF_struct_replacement_4._f3.subgroup_local_id + (int(ivec2(1, 1)))) % subgroup_size));
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  barrier();
 if((false))
  {
   if((false))
    return;
   barrier();
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   if(false)
    {
    }
   else
    {
     if((false))
      barrier();
    }
   if((false))
    return;
   if((false))
    barrier();
   if((((false) && true)))
    barrier();
   if(((false || (((injectionSwitch.x > injectionSwitch.y))))))
    barrier();
   if(false)
    {
    }
   else
    {
     if((false))
      return;
    }
   if((! (! ((false)))))
    {
     if((false))
      {
       if(true)
        {
         return;
        }
       else
        {
        }
      }
     return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   if((false))
    barrier();
   if(((injectionSwitch.x < ((injectionSwitch) * mat2(1.0)).y)))
    {
     if((false))
      {
       if((false))
        barrier();
       if(true)
        {
         if((false))
          {
           if((false))
            {
             for(int _injected_loop_counter = 0; _injected_loop_counter != (1 & 1); _injected_loop_counter ++)
              {
               return;
              }
            }
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               do
                {
                 barrier();
                }
               while(false);
              }
             return;
            }
           barrier();
           if((false))
            {
             do
              {
               return;
              }
             while(false);
            }
          }
        }
       else
        {
        }
       if((false))
        barrier();
       return;
      }
    }
   else
    {
    }
   if((false))
    barrier();
   if((false))
    return;
   if((((injectionSwitch.x > (float(((false ? (abs(injectionSwitch)) : vec2(injectionSwitch.y, 0.0)))))))))
    {
     if((false))
      {
       for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
        {
         return;
        }
      }
     barrier();
    }
   if((false))
    {
     if((false))
      barrier();
     return;
    }
   return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(false)
      {
      }
     else
      {
       barrier();
      }
    }
   if((false))
    {
     if(false)
      {
      }
     else
      {
       if((false))
        {
         if((false))
          barrier();
         return;
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
  }
 if(((bool(bvec4(false, true, false, true)))))
  return;
 if((((false) && true)))
  barrier();
 if(true)
  {
   if(((((false || (injectionSwitch.x > injectionSwitch.y))))))
    {
     if((((false) || false)))
      barrier();
     if((false))
      barrier();
     barrier();
    }
  }
 else
  {
  }
 if(((bool((bvec2(bvec3(bvec2(false, ((injectionSwitch.x < injectionSwitch.y))), false)))))))
  {
   if((false))
    barrier();
   barrier();
   if(false)
    {
    }
   else
    {
     if(true)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
      }
    }
   if(((true && ((bool(bvec3(((injectionSwitch.x > injectionSwitch.y)), false, false)))))))
    {
     if((false))
      barrier();
     for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
      {
       return;
      }
    }
  }
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(false)
  {
  }
 else
  {
   if((false))
    {
     for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
      {
       barrier();
      }
    }
  }
 if((false))
  {
   if((false))
    {
     for(int _injected_loop_counter = (0 >> (int(8))); _injected_loop_counter != 1; _injected_loop_counter ++)
      {
       barrier();
      }
    }
   barrier();
  }
 if((false))
  {
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     if(false)
      {
      }
     else
      {
       return;
       if((false))
        barrier();
      }
    }
   barrier();
   if((false))
    barrier();
  }
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   return;
  }
 if((false))
  return;
 if((false))
  return;
 if((false))
  {
   if((false))
    return;
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if((false))
      barrier();
     if((false))
      {
       if(((bool(bvec3(false, false, true)))))
        barrier();
       return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(((false) || false))
        {
        }
       else
        {
         if((false))
          barrier();
         return;
        }
      }
     if((false))
      {
       if((false))
        return;
       barrier();
      }
     if((false))
      return;
     return;
    }
   if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
   if(true)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         barrier();
         if((false))
          barrier();
        }
       while(false);
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         if((false))
          barrier();
        }
       while((bool(bool((! (((! (false)) && true)))))));
       if((false))
        {
         if(((! (((! ((false || (false)))) && true)))))
          return;
         if((false))
          {
           if((false))
            barrier();
           if((false))
            return;
           if((false))
            {
             if(true)
              {
               barrier();
              }
             else
              {
              }
            }
           barrier();
           if((false))
            barrier();
          }
         if((false))
          {
           if(false)
            {
            }
           else
            {
             return;
            }
          }
         return;
        }
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          return;
         return;
        }
       if((false))
        {
         for(int _injected_loop_counter = ((int((injectionSwitch.y))) ^ int((injectionSwitch.x))); _injected_loop_counter > 0; _injected_loop_counter --)
          {
           if((false))
            barrier();
          }
         if((false))
          {
           if((false))
            {
             if((false))
              {
               if((false))
                barrier();
               return;
              }
             if((false))
              barrier();
             barrier();
            }
           return;
           if((false))
            {
             do
              {
               barrier();
              }
             while(((injectionSwitch.x > injectionSwitch.y)));
            }
          }
         barrier();
        }
       if((false))
        return;
       if((((! (! ((true && (((true && (false)))))))) || false)))
        {
         if(false)
          {
          }
         else
          {
           if(((true && (false))))
            {
             if((false))
              return;
             barrier();
            }
          }
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
         for(int _injected_loop_counter = 1; _injected_loop_counter > (0 << (int(0))); _injected_loop_counter --)
          {
           if((false))
            return;
          }
         return;
        }
       if((false))
        barrier();
       if((((((injectionSwitch.x > injectionSwitch.y))) && true)))
        barrier();
       return;
       if((false))
        return;
       if((false))
        barrier();
      }
     if(true)
      {
       if((false))
        barrier();
      }
     else
      {
      }
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         barrier();
        }
       while(((false) && true));
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
    }
   if(((false || (((injectionSwitch.x > injectionSwitch.y))))))
    {
     for(int _injected_loop_counter = int((injectionSwitch.y)); (true && (_injected_loop_counter > (0 >> (int(8))))); _injected_loop_counter --)
      {
       if((false))
        barrier();
      }
     if(true)
      {
       barrier();
      }
     else
      {
      }
    }
   for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
    {
     if((false))
      continue;
     if((false))
      return;
     if((false))
      barrier();
     for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != (- 52107 & int((injectionSwitch.x))); _injected_loop_counter --)
      {
       return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      break;
     if((false))
      {
       if((false))
        break;
       for(int _injected_loop_counter = 1; (0 | (_injected_loop_counter)) != (clamp((- 72509 & (0 & 31716)), (- 72509 & (0 & 31716)), ((false ? (77860) : (- 72509 & (0 & 31716)))))); _injected_loop_counter --)
        {
         if((false))
          return;
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = 0; ((_injected_loop_counter < int((((injectionSwitch.y)) + 0.0))) || false); _injected_loop_counter ++)
            {
             if((false))
              {
               if((false))
                barrier();
               for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
                {
                 if((false))
                  barrier();
                }
               if((false))
                barrier();
               return;
               if((false))
                return;
               if((false))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             if((false))
              continue;
            }
           if((((false) && true)))
            barrier();
           barrier();
           if((false))
            barrier();
           if((false))
            continue;
           if((false))
            barrier();
          }
         if(true)
          {
           if(((((injectionSwitch.x > injectionSwitch.y)) || (false))))
            {
             do
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             while(false);
             if((false))
              barrier();
             barrier();
            }
          }
         else
          {
          }
         if((false))
          barrier();
         if((false))
          {
           if((false))
            barrier();
           return;
          }
         if((false))
          barrier();
         if((false))
          {
           if((false))
            {
             if((false))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if(true)
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if((false))
                  barrier();
                }
               else
                {
                }
               continue;
              }
             if((false))
              barrier();
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               continue;
              }
             barrier();
             if((false))
              barrier();
             if((! ((true && (! ((false)))))))
              break;
            }
           if((false))
            barrier();
           if(((! (! (((false) || false))))))
            return;
           if((false))
            {
             if((false))
              {
               for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                {
                 return;
                }
              }
             do
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             while(false);
             break;
             if((false))
              {
               if(true)
                {
                 barrier();
                }
               else
                {
                }
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
            }
           if((false))
            {
             if((false))
              {
               if((false))
                {
                 if(true)
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
               continue;
              }
             do
              {
               barrier();
              }
             while(false);
            }
           for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
            {
             if((false))
              return;
            }
           continue;
          }
         if((false))
          {
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             barrier();
            }
           else
            {
            }
          }
         if((false))
          break;
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(((((clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
          break;
         barrier();
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              barrier();
             break;
            }
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                barrier();
               break;
              }
             barrier();
            }
           if((false))
            barrier();
           if((false))
            return;
           for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
            {
             if((false))
              {
               for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
                {
                 return;
                }
              }
            }
           break;
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
          }
         if((false))
          {
           if((false))
            {
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
              }
             else
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             if(false)
              {
              }
             else
              {
               return;
              }
            }
           if((((true && ((true && ((injectionSwitch.x > injectionSwitch.y))))))))
            barrier();
           continue;
           if((false))
            barrier();
          }
         if((false))
          barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            break;
           barrier();
          }
         continue;
         if((false))
          {
           do
            {
             if((false))
              barrier();
            }
           while(false);
           break;
          }
        }
       if((false))
        barrier();
      }
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     if(((false || (! (! ((bool(bvec3((((bool(bool(bool((bvec2(bvec4(bvec2(false, false), false, true))))))))), false, false)))))))))
      break;
     if((false))
      {
       if(((bool((bvec3(bvec4(bvec3(false, true, true), true)))))))
        continue;
       if(true)
        {
         barrier();
        }
       else
        {
        }
      }
     for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
      {
       if((false))
        barrier();
       if(((! (! (false)))))
        barrier();
       if(((true && (false))))
        barrier();
      }
     if((false))
      barrier();
    }
   do
    {
     if((false))
      barrier();
    }
   while(false);
   if((false))
    {
     for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
      {
       if((false))
        return;
      }
     if(((true) && true))
      {
       if((bool(bvec4((((injectionSwitch.x > injectionSwitch.y))), ((injectionSwitch.x < injectionSwitch.y)), ((injectionSwitch.x > injectionSwitch.y)), false))))
        return;
      }
     else
      {
      }
     do
      {
       if(true)
        {
         if(((bool(bvec3((true && (false)), ((injectionSwitch.x > (mix(float(((injectionSwitch.y) + 0.0)), float((4.9)), bool(false))))), false)))))
          {
           if(((((! (! (false)))) && true)))
            return;
           if((false))
            return;
           barrier();
           if((false))
            continue;
           if((false))
            barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
        }
       else
        {
        }
      }
     while(false);
     if((false))
      {
       do
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             barrier();
            }
           else
            {
            }
          }
        }
       while((bool(bool(false))));
       return;
      }
     return;
    }
   if(((true && ((bool(bvec3(false, true, true)))))))
    barrier();
  }
 if((false))
  {
   if((false))
    return;
   barrier();
   if((false))
    barrier();
  }
 if(((((! (! (bool(bvec4((bool(bvec4(((((min((min(injectionSwitch.x, injectionSwitch.x)), (clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y)) || false), true, true, true))), true, true, true)))))))))
  {
   if((false))
    return;
   barrier();
   if((false))
    barrier();
  }
 if((false))
  {
   if((false))
    return;
   if(((bool(bvec3(false, true, ((injectionSwitch.x < injectionSwitch.y)))))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
     if((false))
      return;
     barrier();
    }
   barrier();
  }
 if(((true && (false))))
  barrier();
 if((false))
  {
   if(true)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = (int(int(0))); _injected_loop_counter < 1; _injected_loop_counter ++)
        {
         return;
        }
      }
    }
   else
    {
    }
   barrier();
   if((false))
    barrier();
   if((false))
    return;
  }
 if((false))
  {
   for(int _injected_loop_counter = 0; _injected_loop_counter < (((1 & ((1 << (int(1))) >> (int(1)))) << (int(7))) >> (((int(7)) / 1))); _injected_loop_counter ++)
    {
     if((false))
      {
       if(false)
        {
        }
       else
        {
         if((false))
          barrier();
        }
       return;
      }
    }
   return;
  }
 if((false))
  barrier();
 if((false))
  barrier();
 if(((((((((mix(vec2((injectionSwitch)[0], (1405.8799)), vec2((- 7043.7579), (injectionSwitch)[1]), bvec2(false, ((injectionSwitch.x < injectionSwitch.y))))).x > injectionSwitch.y))) || false)) || false)))
  {
   if((false))
    {
     if((false))
      {
       for(int _injected_loop_counter = 0; _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
        {
         barrier();
        }
      }
     return;
    }
   if((false))
    barrier();
   for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 if((false))
  return;
 if((false))
  return;
 if(((false || (false))))
  {
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     return;
    }
   else
    {
    }
  }
 ((((((false ? (subgroup_size) : (0u ^ ((~ (~ (buf[_GLF_struct_replacement_13.virtual_gid] = (0 ^ (1)))))))))) - uint((injectionSwitch.x)))) - 0u);
 do
  {
   if((false))
    {
     if(false)
      {
      }
     else
      {
       if((false))
        {
         if((false))
          barrier();
         return;
        }
      }
     barrier();
     if((false))
      barrier();
    }
  }
 while(((injectionSwitch.x > injectionSwitch.y)));
 if((false))
  {
   if((((injectionSwitch.x > (min(injectionSwitch.y, injectionSwitch.y))))))
    {
     if((false))
      {
       do
        {
         return;
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
      }
     barrier();
    }
   if((false))
    {
     for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != 1; _injected_loop_counter ++)
      {
       barrier();
      }
    }
   return;
  }
 if((false))
  {
   if((false))
    {
     for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
      {
       return;
      }
    }
   return;
  }
 if((false))
  return;
 if(_GLF_struct_replacement_4._f3.subgroup_local_id + 1 < subgroup_size)
  {
   if((false))
    {
     if((false))
      barrier();
     if((false))
      barrier();
     if((false))
      {
       if(false)
        {
        }
       else
        {
         return;
        }
      }
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if((false))
        barrier();
       if(false)
        {
        }
       else
        {
         if((false))
          {
           if(((false || (((false) || false)))))
            {
             do
              {
               barrier();
              }
             while(((injectionSwitch.x > injectionSwitch.y)));
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           for(int _injected_loop_counter = ((1 << (int(0))) >> ((clamp(((int(0)) | (int(0))), int(0), int(0))))); _injected_loop_counter != (int((injectionSwitch.x)) << (((int((min(6, (clamp(6, 6, ((false ? ((false ? (_injected_loop_counter) : (_injected_loop_counter))) : 6)))))))) | (((int((min(6, (clamp(6, 6, ((false ? ((false ? (_injected_loop_counter) : (_injected_loop_counter))) : 6)))))))) | (int((min(6, (clamp(6, 6, ((false ? ((false ? (_injected_loop_counter) : (_injected_loop_counter))) : 6))))))))))))); _injected_loop_counter --)
            {
             if((false))
              {
               if((! (! ((((injectionSwitch.x > injectionSwitch.y)))))))
                barrier();
               return;
              }
            }
           if((false))
            return;
           for(int _injected_loop_counter = 0; ((((false || (bool(bvec4(_injected_loop_counter != (clamp(1, 1, 1)), false, true, false)))))) || false); _injected_loop_counter ++)
            {
             if(true)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               return;
              }
             else
              {
              }
             for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
              {
               if((false))
                barrier();
              }
            }
           if((false))
            return;
           if((false))
            {
             for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
              {
               barrier();
              }
            }
           if((false))
            barrier();
           if((false))
            {
             if((false))
              {
               if((false))
                return;
               do
                {
                 barrier();
                 if((! (! ((true && ((bool(bvec3(true, true, true)))))))))
                  {
                   if((false))
                    barrier();
                  }
                 else
                  {
                  }
                }
               while((false || (false)));
              }
             if((false))
              barrier();
             if((true && (((bool((false || (bool(! (! ((false))))))))))))
              barrier();
             for(int _injected_loop_counter = ((((0 >> (int(8))) | 1)) << 0); _injected_loop_counter > ((0 << (int(2))) << (int(4))); _injected_loop_counter --)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if((false))
                {
                 if((true && ((((injectionSwitch.x > injectionSwitch.y))))))
                  barrier();
                 for(int _injected_loop_counter = 0; _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 return;
                 if((false))
                  barrier();
                }
              }
             barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
        }
       if((false))
        return;
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
        {
         if((false))
          return;
        }
       if((false))
        {
         if(true)
          {
           return;
          }
         else
          {
          }
        }
      }
     else
      {
      }
     if((((((injectionSwitch.x > injectionSwitch.y))) || false)))
      {
       if(((! (((((false || (bool(bool(! (false))))))) || false)))))
        return;
       if((bool(bvec4(false, false, false, false))))
        {
        }
       else
        {
         if((false))
          barrier();
        }
       return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     barrier();
     if((false))
      barrier();
    }
   if(true)
    {
     for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((bool(bvec3(false, false, true))))
          {
           if((false))
            return;
          }
         else
          {
           barrier();
          }
         if((((false) || false)))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             barrier();
            }
           while(false);
          }
        }
       if((false))
        break;
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   else
    {
    }
   if(((bool(bvec2(false, true)))))
    barrier();
   if((false))
    {
     if((false))
      {
       if(((false || (false))))
        return;
       if((false))
        barrier();
       return;
      }
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if(((! (! ((((max((0.0 + ((min(injectionSwitch.x, injectionSwitch.x)))), injectionSwitch.x)) > injectionSwitch.y)))))))
        {
         if((false))
          barrier();
         do
          {
           for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
              {
               return;
              }
            }
          }
         while((bool(bool(false))));
        }
      }
     else
      {
      }
     if((false))
      barrier();
     return;
     if((false))
      return;
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(((! (! (false)))))
    {
     if((false))
      barrier();
     if((false))
      {
       do
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              {
               do
                {
                 if((false))
                  break;
                 return;
                }
               while(((injectionSwitch.x > injectionSwitch.y)));
               if((false))
                {
                 for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != 0; _injected_loop_counter --)
                  {
                   barrier();
                  }
                }
              }
             barrier();
            }
           if(((bool(bool(false)))))
            barrier();
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             if((false))
              barrier();
             return;
            }
           else
            {
             if(((((true && (((injectionSwitch.x > injectionSwitch.y) || false)))))))
              barrier();
            }
           if((false))
            return;
           do
            {
             if((false))
              barrier();
            }
           while(((! (! ((bool(bool((injectionSwitch.x > injectionSwitch.y)))))))));
          }
        }
       while(false);
       if((false))
        return;
       if(true)
        {
         if(((((1.0 * (injectionSwitch.x)) > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
       if(false)
        {
        }
       else
        {
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            barrier();
           if(true)
            {
             return;
            }
           else
            {
            }
           if((false))
            {
             for(int _injected_loop_counter = 1; _injected_loop_counter != ((0 << (int(1))) >> (int(0))); _injected_loop_counter --)
              {
               if((false))
                barrier();
              }
             return;
            }
          }
        }
       if(((bool(bvec3(false, false, false)))))
        barrier();
       if(false)
        {
         if((false))
          barrier();
         if((false))
          {
           if((false))
            {
             if((false))
              return;
             return;
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if(true)
            {
             if((false))
              barrier();
            }
           else
            {
            }
           return;
          }
         do
          {
           if((false))
            return;
          }
         while(false);
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
        }
       else
        {
         do
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         while(false);
         for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
          {
           if(true)
            {
             if(((bool(bvec3(false, true, false)))))
              barrier();
             if((((injectionSwitch.x > (mix(float((- 77.74)), float(((true ? injectionSwitch.y : (- 4365.3977)))), bool(true)))))))
              return;
            }
           else
            {
            }
          }
         if((false))
          return;
         if((false))
          {
           do
            {
             barrier();
            }
           while(false);
          }
         if(true)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           if((false))
            barrier();
           barrier();
          }
         else
          {
          }
        }
       if((((false) || false)))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((! (! ((false)))))
        return;
      }
     for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
      {
       do
        {
         if(((((mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y))))
          {
           if((false))
            {
             if((false))
              break;
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
              }
             else
              {
               if((true && (false)))
                {
                }
               else
                {
                 if((false))
                  barrier();
                }
              }
             return;
             if((false))
              return;
            }
           if((false))
            {
             if((false))
              return;
             if((false))
              barrier();
             barrier();
            }
           if((false))
            {
             if((false))
              barrier();
             continue;
             if((false))
              continue;
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if(((false) && true))
                {
                }
               else
                {
                 barrier();
                }
              }
            }
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(((! (! (false)))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if(false)
                {
                }
               else
                {
                 barrier();
                }
              }
             continue;
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           continue;
           if((false))
            barrier();
          }
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            {
             if((false))
              barrier();
             continue;
            }
           barrier();
           if((false))
            barrier();
           if((false))
            barrier();
          }
         if((false))
          {
           if((false))
            continue;
           barrier();
          }
         do
          {
           barrier();
          }
         while(false);
         if((false))
          barrier();
         if((false))
          break;
        }
       while(false);
      }
     do
      {
       if((((((injectionSwitch.x > injectionSwitch.y)) || false))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if(true)
            {
             return;
             if(((false || (false))))
              return;
            }
           else
            {
            }
          }
         if(((((false || (injectionSwitch.x > injectionSwitch.y))))))
          {
           if(((bool(bvec3(false, false, false)))))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
           if(((((! ((bool(bvec3(! ((bool(bool(injectionSwitch.x > injectionSwitch.y)))), false, false)))))))))
            {
             for(int _injected_loop_counter = (1 ^ 1); _injected_loop_counter < 1; _injected_loop_counter ++)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              barrier();
             barrier();
            }
           if((false))
            barrier();
           do
            {
             barrier();
            }
           while(false);
          }
         if((false))
          barrier();
         barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if(((bool(bvec3(false, ((((injectionSwitch.x < injectionSwitch.y))) || false), false)))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
             return;
            }
           barrier();
          }
        }
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
     do
      {
       if((false))
        barrier();
       if((false))
        {
         if(((bool(bvec4(((false) || false), false, true, false)))))
          continue;
         if((false))
          continue;
         if((true && ((! (! (((((true && (injectionSwitch.x > ((injectionSwitch.y) + 0.0))))))))))))
          barrier();
         barrier();
        }
       if((false))
        {
         if((false))
          break;
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           break;
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(((((max((clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), (mix(float((3.3)), float(injectionSwitch.x), bool(true))))) > injectionSwitch.y))))
          return;
         return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             barrier();
            }
           else
            {
            }
          }
        }
      }
     while(((((injectionSwitch.x > injectionSwitch.y)) || false)));
     if((false))
      barrier();
     if((false))
      return;
     if(false)
      {
      }
     else
      {
       if((((false)) && true))
        barrier();
      }
     if((((injectionSwitch.x > ((clamp((min(vec2(mat2(((true ? injectionSwitch : (injectionSwitch))), 1.0, 0.0)), vec2(mat2(((true ? injectionSwitch : ((vec2(vec3(mat2(1.0) * ((injectionSwitch)), 0.0)))))), 1.0, 0.0)))), vec2(mat2(((true ? injectionSwitch : (injectionSwitch))), 1.0, 0.0)), vec2(mat2(((true ? injectionSwitch : (injectionSwitch))), 1.0, 0.0))))).y))))
      {
       if(((bool(bvec3(false, false, true)))))
        {
         if((false))
          barrier();
         barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if(false)
        {
        }
       else
        {
         return;
        }
      }
     if((false))
      barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((bool(bvec2(false, true))))
      {
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     do
      {
       barrier();
      }
     while(false);
    }
   if((false))
    {
     if(false)
      {
      }
     else
      {
       barrier();
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    return;
   int i = 0;
   for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < 1; _injected_loop_counter ++)
    {
     if((false))
      barrier();
    }
   if((false))
    barrier();
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((((injectionSwitch.x > injectionSwitch.y)))) && true))
      return;
     if((((((injectionSwitch.x > injectionSwitch.y)) && true))))
      barrier();
     return;
     if((false))
      {
       if((false))
        barrier();
       return;
      }
    }
   if((false))
    {
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       barrier();
      }
    }
   if(true)
    {
     if(true)
      {
       if((false))
        {
         if((false))
          {
           do
            {
             return;
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
          }
         if((false))
          barrier();
         for(int _injected_loop_counter = (0 >> ((max(int(0), int(0))))); _injected_loop_counter != 1; _injected_loop_counter ++)
          {
           if((false))
            return;
           return;
          }
        }
      }
     else
      {
      }
     if((((bool(bvec3((injectionSwitch.x > injectionSwitch.y), false, true))))))
      barrier();
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       if((false))
        {
         if(false)
          {
          }
         else
          {
           if((false))
            barrier();
          }
         if((false))
          {
           if((false))
            barrier();
           return;
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           barrier();
          }
         if((false))
          {
           if(((false || (false))))
            barrier();
           return;
          }
         barrier();
         do
          {
           if((false))
            {
             for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
              {
               barrier();
              }
            }
          }
         while(((((false) && true)) || false));
        }
      }
     for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          break;
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          {
           if((false))
            barrier();
           break;
          }
         if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if((false))
          barrier();
         if((((false) && true)))
          {
           if((((false || (bool(bvec3(false, false, true)))))))
            {
             if((false))
              barrier();
             barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           return;
          }
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          break;
         barrier();
        }
      }
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
    }
   else
    {
     if((((bool(bvec3(true, false, false))) && (((false) || false)))))
      {
       if(false)
        {
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       barrier();
      }
    }
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   do
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
   do
    {
     if((false))
      {
       for(int _injected_loop_counter = (0 ^ 0); _injected_loop_counter < (1 | 1); _injected_loop_counter ++)
        {
         do
          {
           return;
          }
         while(false);
        }
      }
     if((false))
      break;
     buf[_GLF_struct_replacement_51.next_virtual_gid] = 2;
    }
   while((bool(bvec4(false, true, true, false))));
   for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > (0 << (int(7))); _injected_loop_counter --)
    {
     do
      {
       if((false))
        barrier();
      }
     while(false);
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      {
       if(false)
        {
        }
       else
        {
         if((false))
          {
           if((false))
            {
             if((false))
              barrier();
             return;
            }
           barrier();
           if((false))
            barrier();
          }
         if((false))
          return;
         return;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 0; _injected_loop_counter < (1 & 1); (~ (~ (_injected_loop_counter ++))))
          {
           return;
          }
        }
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
      }
     if((((false || ((injectionSwitch.x > injectionSwitch.y))))))
      barrier();
     if((false))
      {
       if((bool(bool((false || ((false || ((false)))))))))
        barrier();
       if((false))
        barrier();
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         barrier();
        }
       else
        {
        }
       if(((true && (false))))
        barrier();
      }
     if((false))
      {
       if((false))
        return;
       barrier();
      }
     if((false))
      return;
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if((false))
    {
     if(false)
      {
      }
     else
      {
       return;
      }
    }
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      {
       if((false))
        barrier();
       if(false)
        {
        }
       else
        {
         if(false)
          {
          }
         else
          {
           if((false))
            return;
          }
         return;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          return;
         barrier();
        }
      }
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if(false)
      {
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(((! (! (false)))))
        barrier();
      }
     if((false))
      return;
     for(int _injected_loop_counter = 0; _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
      {
       if((false))
        barrier();
      }
     return;
     if((false))
      barrier();
     if(((((true && (injectionSwitch.x > injectionSwitch.y))))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 else
  {
   if(((true && (false))))
    {
     do
      {
       if((false))
        return;
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
     if((false))
      barrier();
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       barrier();
      }
     else
      {
      }
    }
   if((false))
    {
     if((false))
      barrier();
     return;
    }
   if(((true && (false))))
    return;
   if((false))
    {
     if((false))
      barrier();
     if(((false || (false))))
      barrier();
     if(false)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
      }
     else
      {
       if((false))
        barrier();
       if(((! ((bool(bvec4(! (false), true, true, true)))))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if(true)
          {
           return;
          }
         else
          {
           if((false))
            barrier();
          }
        }
       if((false))
        return;
       barrier();
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(true)
          {
           if((((false) || false)))
            barrier();
           if((((injectionSwitch.x > ((mix(vec2((((false ? (injectionSwitch) : vec2(mat3x4(injectionSwitch, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0)))))[0], (- 76.01)), vec2((vec3(4.6, 36.35, - 983.135).y), (((false ? (injectionSwitch) : vec2(mat3x4(injectionSwitch, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0)))))[1]), bvec2(false, ((injectionSwitch.x < injectionSwitch.y)))))).y))))
            {
             for(int _injected_loop_counter = (1 | 0); _injected_loop_counter != (~ ((clamp(~ (0), ~ (0), ~ (0))))); _injected_loop_counter --)
              {
               if((false))
                barrier();
              }
             if((! (! ((false)))))
              {
               for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
                {
                 return;
                }
              }
             return;
            }
           if((false))
            {
             if((((((false) || false)) && true)))
              return;
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               return;
              }
             barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
           if((false))
            barrier();
          }
         barrier();
         if((false))
          {
           if(false)
            {
            }
           else
            {
             barrier();
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       if((false))
        {
         if((false))
          barrier();
         if(((! (! (false)))))
          return;
         if(true)
          {
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             return;
            }
           if(true)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           else
            {
            }
           if((false))
            barrier();
          }
         else
          {
          }
        }
      }
     if((false))
      barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   buf[_GLF_struct_replacement_51.next_virtual_gid] = 2;
   if((false))
    barrier();
   do
    {
     if((false))
      barrier();
     if((false))
      {
       for(int _injected_loop_counter = ((false ? (5078) : 0)); _injected_loop_counter < ((1) ^ 0); _injected_loop_counter ++)
        {
         if((false))
          barrier();
        }
       if((false))
        {
         do
          {
           barrier();
          }
         while(false);
        }
       barrier();
       if((false))
        barrier();
      }
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       if((false))
        return;
       if((false))
        barrier();
       if((false))
        {
         if((false))
          return;
         barrier();
        }
       if((false))
        barrier();
       if((false))
        break;
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       do
        {
         barrier();
        }
       while(false);
       if((false))
        barrier();
      }
     if((false))
      {
       if((((false) && true)))
        barrier();
       if(false)
        {
        }
       else
        {
         if((false))
          {
           if((false))
            {
             if((false || (false)))
              {
              }
             else
              {
               barrier();
              }
            }
           break;
          }
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
        }
       if(true)
        {
         if((false))
          barrier();
        }
       else
        {
        }
       continue;
      }
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
   for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != ((1 << (((((true ? int(7) : (- 45031)))) + 0))) >> (int(7))); _injected_loop_counter ++)
    {
     if((false))
      barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       return;
      }
     else
      {
      }
    }
   if((false))
    barrier();
   if((false))
    {
     if((false))
      {
       for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
        {
         return;
        }
      }
     barrier();
    }
   if(true)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
    }
   if(true)
    {
     if((false))
      {
       if(false)
        {
        }
       else
        {
         barrier();
        }
      }
    }
   else
    {
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((((! (! ((! (! ((((injectionSwitch.x > injectionSwitch.y)))))))))) && true))
    return;
   if((false))
    {
     if((false))
      {
       do
        {
         if(((((false || (injectionSwitch.x > injectionSwitch.y))))))
          {
           if(false)
            {
            }
           else
            {
             barrier();
            }
          }
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           return;
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
        }
       while(false);
       if((false))
        barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if(true)
  {
   if((false))
    {
     if(((bool((bvec2(bvec2(bvec2((bool(bvec3((! (! (false))), false, false))), false))))))))
      return;
     if((false))
      return;
     if((false))
      barrier();
     return;
     for(int _injected_loop_counter = 1; _injected_loop_counter > (0 << (int(0))); _injected_loop_counter --)
      {
       if((false))
        barrier();
      }
    }
  }
 else
  {
   if((false))
    barrier();
  }
 if((false))
  return;
 if((false))
  {
   if((false))
    {
     for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
      {
       barrier();
      }
    }
   return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    {
     if((false))
      {
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         barrier();
        }
      }
     barrier();
    }
   barrier();
  }
 do
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 while(false);
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 do
  {
   if((false))
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
        }
       for(int _injected_loop_counter = 1; _injected_loop_counter != (0 << (int(8))); _injected_loop_counter --)
        {
         return;
        }
      }
     if((false))
      barrier();
     if((false))
      return;
     for(int _injected_loop_counter = 1; _injected_loop_counter > ((((((true ? (clamp(0, 0, 0)) : (69583))) ^ ((((((((bool(bvec4((! (! (true))), false, true, false))) || false)) ? 0 << (int(7)) : ((max(- 74510, ((true ? - 74510 : (99238))))))))) << 0))))) << 0); _injected_loop_counter --)
      {
       if((((bool(bvec3((injectionSwitch.x > injectionSwitch.y), false, false))))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
       return;
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
        }
       for(int _injected_loop_counter = 1; _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
        {
         if((false))
          barrier();
        }
       if((false))
        barrier();
       if((false))
        barrier();
      }
    }
  }
 while(false);
 if((false))
  {
   if(false)
    {
    }
   else
    {
     if((false))
      {
       if((false))
        {
         for(int _injected_loop_counter = 0; _injected_loop_counter != (1 | 1); _injected_loop_counter ++)
          {
           return;
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if(false)
              {
              }
             else
              {
               barrier();
              }
            }
          }
        }
       if((false))
        return;
       return;
       if((false))
        return;
      }
    }
   if((false))
    {
     if((false))
      {
       if(false)
        {
        }
       else
        {
         if((false))
          barrier();
        }
       return;
      }
     if((false))
      barrier();
     if((false))
      return;
     barrier();
    }
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(false)
        {
        }
       else
        {
         barrier();
        }
      }
     return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   return;
  }
 if(((! (! (false)))))
  barrier();
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
