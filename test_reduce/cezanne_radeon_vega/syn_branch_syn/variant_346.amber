#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

struct _GLF_struct_3 {
 int _f0;
} ;

struct _GLF_struct_4 {
 ivec3 _f0;
 _GLF_struct_3 _f1;
} ;

struct _GLF_struct_2 {
 uvec4 _f0;
} ;

struct _GLF_struct_0 {
 mat3x2 _f0;
 mat4 _f1;
 mat3x4 _f2;
 int _f3;
 ivec2 _f4;
} ;

struct _GLF_struct_1 {
 _GLF_struct_0 _f0;
 vec4 _f1;
 vec3 _f2;
 mat2x3 _f3;
 float _f4;
 uint _f5;
} ;

struct _GLF_struct_5 {
 uvec3 _f0;
 _GLF_struct_1 _f1;
 _GLF_struct_2 _f2;
 uint workgroup_base;
 _GLF_struct_4 _f3;
 uvec4 _f4;
 uint _f5;
 mat4x2 _f6;
} ;

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(((((vec2(mat2((min(injectionSwitch, injectionSwitch)), 1.0, 1.0))).x > ((clamp((((false ? (injectionSwitch) : (clamp(injectionSwitch, ((injectionSwitch) * vec2(1.0, 1.0)), injectionSwitch))) * vec2(1.0, 1.0))), (((false ? (injectionSwitch) : injectionSwitch) * vec2(1.0, 1.0))), (((false ? (injectionSwitch) : injectionSwitch) * vec2(1.0, 1.0)))))).y))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 if((false))
  barrier();
 _GLF_struct_5 _GLF_struct_replacement_5 = _GLF_struct_5(uvec3(1u), _GLF_struct_1(_GLF_struct_0(mat3x2(1.0), (mat4(1.0) * (((mat4(1.0)) / mat4(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, (clamp((1.0 * (1.0)), (1.0 * (1.0)), (1.0 * (1.0)))), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)))), mat3x4(1.0), (max(1, 1)), ivec2(1)), (clamp(vec4((clamp(((1.0) - 0.0), (max((0.0 + ((clamp(1.0, 1.0, 1.0)))), 1.0)), 1.0))), vec4(1.0), vec4(1.0))), vec3(1.0), mat2x3(1.0), 1.0, 1u), _GLF_struct_2(((uvec4(1u)) / ((uvec4(1u, 1u, 1u, 1u) << (uvec4(1u))) >> (uvec4(1u))))), workgroup_size * workgroup_id, _GLF_struct_4(((ivec3(0, 0, 0) ^ ivec3(0, 0, 0)) | (ivec3(1))), _GLF_struct_3(1)), uvec4(1u), 1u, mat4x2(1.0));
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint virtual_gid = _GLF_struct_replacement_5.workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 if((false))
  barrier();
 uint next_virtual_gid = ((((0u | (0u | (_GLF_struct_replacement_5.workgroup_base + subgroup_id * (uint(((false ? ((uvec4(171950u, 60130u, 135896u, 85442u) / atomicMin(workgroup_id, subgroup_id))) : ((uvec4(0u, 0u, 0u, 0u) + ((max(max(uvec4(subgroup_size, 0u, 1u, 1u), (max(uvec4(subgroup_size, 0u, 1u, 1u), uvec4(subgroup_size, 0u, 1u, 1u)))), max(uvec4(subgroup_size, 0u, 1u, 1u), (max(uvec4(subgroup_size, 0u, 1u, 1u), uvec4(subgroup_size, 0u, (max(1u, 1u)), 1u))))))))))))) + ((true ? ((true ? (((true ? (((((((((subgroup_local_id + 1) % subgroup_size)) | (((subgroup_local_id + 1) % subgroup_size)))) / ((((1u) | (1u))) ^ 0u))) - 0u) << 0u) : (subgroup_local_id)))) : (subgroup_size))) : (workgroup_id))))))) * (0u ^ 1u)));
 if(((bool(bvec3(false, false, false)))))
  {
   if((false))
    barrier();
   if((bool(bvec4((((((injectionSwitch.x > injectionSwitch.y)))) && ((injectionSwitch.x < injectionSwitch.y))), false, true, ((injectionSwitch.x > injectionSwitch.y))))))
    barrier();
   if((((injectionSwitch.x > (max(injectionSwitch.y, injectionSwitch.y))))))
    {
     if((false))
      barrier();
     if((false))
      barrier();
     if((bool((bvec2(bvec4(((bvec2(bvec4(bvec2(bvec4(bvec2((! (! ((false)))), false), true, false)), ((injectionSwitch.x < injectionSwitch.y)), true)))), true, ((false) || false)))))))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   barrier();
  }
 buf[virtual_gid] = 1;
 if((false))
  barrier();
 if((((((injectionSwitch.x > injectionSwitch.y)) ? (subgroup_size) : (subgroup_local_id))) + 0u) + 1 < ((((subgroup_size)) >> 0u) >> 0u))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(((((((((((! (! (! ((false || ((! (false)))))))) || (true && (false)))) && true)) || false)) && true))))
    {
     if((((((! (((! (! (! (((((((clamp(mix(float((5.0)), float(((injectionSwitch.x) / 1.0)), bool(true)), mix(float((5.0)), float(((injectionSwitch.x) / 1.0)), bool(true)), mix(float((5.0)), float(((injectionSwitch.x) / 1.0)), bool(true))))) > injectionSwitch.y))) || false))))) && true)))) && true))))
      barrier();
     barrier();
    }
   if(((((true && (injectionSwitch.x > injectionSwitch.y))))))
    {
     if((((injectionSwitch.x > ((injectionSwitch.y) * 1.0)))))
      barrier();
     barrier();
    }
   if((false))
    {
     if(((((mix(vec2(((max(((injectionSwitch)[0]) / 1.0, ((injectionSwitch)[0]) / 1.0))), (3.1)), vec2((vec2(- 64.34, 7876.1361).g), (injectionSwitch)[1]), bvec2(false, true))).x > (clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))))
      barrier();
     if((false))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   int i = (int(ivec3(((((injectionSwitch.x < injectionSwitch.y)) ? 0 : (- 28361))), (((1 | 0)) / 1), ((1 << (int(5))) >> (int(5))))));
   if((false))
    barrier();
   buf[next_virtual_gid] = 2;
   if(((false || (false))))
    barrier();
   if((bool(bvec2((true && ((false))), true))))
    barrier();
  }
 else
  {
   if((false))
    barrier();
   if((true && ((false || ((bool(bvec3((! (true && ((! ((((false) || (bool(bool(false)))))))))), true, true))))))))
    barrier();
   if((false))
    barrier();
   (0u + (buf[next_virtual_gid] = 2));
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   if(((true && (((((true && ((! (! (bool(bvec4((true && (((false) || false))), (true && (false)), false, false))))))) && true)))))))
    {
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     barrier();
    }
   if((false))
    barrier();
   if((false))
    {
     if((false))
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if(((bool(bvec3(false, false, true)))))
        barrier();
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
     return;
     if((false))
      barrier();
    }
  }
 if(((true && ((bool(bvec4(false, true, false, true)))))))
  {
   if((false))
    barrier();
   barrier();
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
