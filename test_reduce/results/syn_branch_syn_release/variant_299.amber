#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(((true && (true && (((bool(bvec4(false, true, true, true)))))))))
  barrier();
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       return;
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
    }
   for(int _injected_loop_counter = 1; _injected_loop_counter > (max(((0 >> (int(0))) << ((min(int(1), int(1))))), ((0 >> (int(0))) << ((min(int(1), int(1))))))); _injected_loop_counter --)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   barrier();
   if(((((vec2(0.0, 0.0) + (injectionSwitch)).x > injectionSwitch.y))))
    barrier();
  }
 if((((! ((true && (! (bool(bool(((injectionSwitch.x > injectionSwitch.y))))))))))))
  return;
 if(((injectionSwitch.x < injectionSwitch.y)))
  {
   if((false))
    barrier();
   if(true)
    {
     if((false))
      {
       if((((((injectionSwitch) + vec2(0.0, 0.0)).x > (vec2(mat4(((false ? (vec2(73.63, - 458.281)) : injectionSwitch)), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, sqrt(1.0), 1.0, 0.0, 1.0, 0.0, 1.0, exp(determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0))), 1.0))).y))))
        barrier();
       return;
      }
     if((false))
      return;
    }
   else
    {
     if(((false) || false))
      {
      }
     else
      {
       if((false))
        {
         if((false))
          barrier();
         if(false)
          {
          }
         else
          {
           return;
          }
        }
      }
    }
  }
 else
  {
  }
 if((false))
  return;
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  {
   for(int _injected_loop_counter = 0; (true && ((! (! (_injected_loop_counter != 1))))); _injected_loop_counter ++)
    {
     return;
    }
  }
 if((false))
  {
   for(int _injected_loop_counter = (0 >> (int(((0) ^ 0)))); _injected_loop_counter != 1; _injected_loop_counter ++)
    {
     return;
    }
  }
 uint subgroup_id = gl_SubgroupID;
 if((false))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      return;
     barrier();
     if((false))
      barrier();
    }
  }
 for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
  {
   if((false))
    barrier();
  }
 for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if((false))
  {
   if((((injectionSwitch.x > ((min(float(float(injectionSwitch.y)), float(float(injectionSwitch.y)))))))))
    barrier();
   return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    {
     for(int _injected_loop_counter = (((true ? 1 : (92571))) | 1); _injected_loop_counter > (max(0, 0)); _injected_loop_counter --)
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
          {
           return;
          }
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     for(int _injected_loop_counter = 0; _injected_loop_counter < (0 ^ 1); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   for(int _injected_loop_counter = ((((0 << (((int(2)) | (int(2)))))) / ((1 << (int(0))) >> (int(0)))) >> (int(2))); _injected_loop_counter < 1; _injected_loop_counter ++)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        return;
       if((false || (((false) && true))))
        {
        }
       else
        {
         return;
        }
      }
    }
   if((((! (! (false))) || ((true && ((((bool(bool(injectionSwitch.x > injectionSwitch.y)))))))))))
    {
     if(true)
      {
       if((false))
        {
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           if((false))
            {
             for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
              {
               barrier();
              }
            }
          }
         barrier();
        }
      }
     else
      {
      }
     barrier();
    }
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     for(int _injected_loop_counter = (0 >> (int(0))); _injected_loop_counter != 1; _injected_loop_counter ++)
      {
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if((false))
    barrier();
   if(((true) || false))
    {
     for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
      {
       if((true && (((((min(((false ? (324.466) : injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y))))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = (min(1, (clamp(1, 1, 1)))); (((0 | (((true ? _injected_loop_counter : (_injected_loop_counter)))))) << 0) > 0; _injected_loop_counter --)
              {
               barrier();
              }
            }
           return;
           if((false))
            {
             if(true)
              {
               barrier();
              }
             else
              {
              }
            }
          }
         do
          {
           if((! (! ((false || (false))))))
            {
            }
           else
            {
             if((! (! (false))))
              {
              }
             else
              {
               barrier();
              }
            }
          }
         while(false);
        }
      }
     if(false)
      {
      }
     else
      {
       if((false))
        {
         if((! (! ((((((injectionSwitch.x > injectionSwitch.y))) || false))))))
          return;
         return;
         if((bool((bvec2(bvec4(bvec2(((((true && (false))) && true)), true), true, ((injectionSwitch.x > injectionSwitch.y))))))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           return;
          }
        }
      }
     if((false))
      barrier();
     return;
     if((false))
      {
       if((false))
        barrier();
       return;
      }
    }
   else
    {
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 do
  {
   if((false))
    {
     if((((injectionSwitch.x > (vec2(injectionSwitch[0], injectionSwitch[1])).y))))
      barrier();
     barrier();
    }
  }
 while(false);
 uint num_workgroup = ((gl_NumWorkGroups.x) | 0u);
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if(((! ((! (! (! (false))))))))
    return;
   if((false))
    return;
   barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(((false || ((((min(injectionSwitch, ((false ? (step(vec2(1378.2271, 4177.5329), injectionSwitch)) : injectionSwitch)))).x > injectionSwitch.y))))))
  {
   if((false))
    barrier();
   return;
  }
 if((false))
  {
   do
    {
     if(((((((((injectionSwitch.x < injectionSwitch.y)) ? clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x) : (- 4.9)))) > injectionSwitch.y))))
      return;
    }
   while(false);
   if((false))
    barrier();
   if((false))
    {
     if(true)
      {
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
      }
    }
   barrier();
  }
 if(false)
  {
  }
 else
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(((! ((bool(bvec2(! (false), false)))))))
      return;
     if((false))
      {
       if((false))
        return;
       if(false)
        {
        }
       else
        {
         return;
        }
      }
     barrier();
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if((false))
  {
   for(int _injected_loop_counter = int((injectionSwitch.x)); (! ((bool(bvec4(! (_injected_loop_counter < 1), false, true, true))))); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 if((((false)) && true))
  {
   do
    {
     if((((bool(bool((false))))) || (true && (false))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         barrier();
        }
       return;
       if((! (! (false))))
        {
        }
       else
        {
         if((false))
          barrier();
        }
      }
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
   if((false))
    barrier();
   if(((true && (false))))
    {
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       return;
      }
    }
   if((false))
    return;
   for(int _injected_loop_counter = 0; _injected_loop_counter != ((1) << 0); _injected_loop_counter ++)
    {
     return;
    }
   if(((((injectionSwitch.x < injectionSwitch.y))) && ((injectionSwitch.x < injectionSwitch.y))))
    {
     if((false))
      return;
    }
   else
    {
    }
   if(((((! ((! (! (! (injectionSwitch.x > injectionSwitch.y))))))))))
    barrier();
   if((false))
    {
     if(false)
      {
      }
     else
      {
       if((false))
        {
         if((false))
          return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            return;
           if(false)
            {
            }
           else
            {
             return;
            }
           if(((bool(bvec4(false, false, false, false)))))
            barrier();
          }
         if((false))
          {
           for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
            {
             barrier();
            }
          }
         if((false))
          return;
         return;
        }
      }
     barrier();
     if((false))
      return;
    }
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if((false))
  return;
 uint workgroup_base = workgroup_size * workgroup_id;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  {
   if((false))
    barrier();
   return;
  }
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 do
  {
   if((false))
    {
     if((false))
      {
       for(int _injected_loop_counter = 0; _injected_loop_counter < (((1 & 1) << (int(0))) >> (int(0))); _injected_loop_counter ++)
        {
         barrier();
        }
      }
     continue;
    }
   if((((bool((bool(bvec2(bool((false)), false))))) || false)))
    {
     if((false))
      return;
     if((! (! ((((injectionSwitch.x > injectionSwitch.y)))))))
      {
       if((false))
        barrier();
       if((false))
        continue;
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
         barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             return;
            }
           while(false);
          }
        }
       for(int _injected_loop_counter = ((0) - 0); (true && ((! (! (_injected_loop_counter < ((true ? (1 & ((((injectionSwitch.x < (min(injectionSwitch, injectionSwitch)).y)) ? ((1) | (clamp((0 | ((1))), (0 | ((1))), (0 | ((1)))))) : (_injected_loop_counter)))) : (42648)))))))); (~ (((~ (((false ? (max(31325, _injected_loop_counter)) : _injected_loop_counter ++)))) - 0))))
        {
         if((false))
          break;
         do
          {
           if((! (! (true))))
            {
             if((false))
              {
               if((false))
                {
                 if((false))
                  barrier();
                 if((((true && (bool((bvec2(bvec2(bvec2(((false) && true), ((injectionSwitch.x < injectionSwitch.y))))))))))))
                  continue;
                 return;
                }
               if(false)
                {
                }
               else
                {
                 barrier();
                }
              }
             if((false))
              {
               do
                {
                 if((((true && ((((injectionSwitch.x > injectionSwitch.y) && true)))))))
                  barrier();
                }
               while(false);
               return;
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             if((false))
              barrier();
             if((((! (! ((injectionSwitch.x > injectionSwitch.y)))))))
              barrier();
             if((false))
              break;
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               for(int _injected_loop_counter = int(((false ? (- 396.257) : ((min((max(injectionSwitch.y, (1.0 * (injectionSwitch.y)))), injectionSwitch.y)))))); _injected_loop_counter > 0; _injected_loop_counter --)
                {
                 barrier();
                 if((((injectionSwitch.x > (1.0 * (injectionSwitch.y))))))
                  continue;
                }
              }
            }
           else
            {
            }
           if((false))
            return;
           if((false))
            barrier();
          }
         while(false);
         barrier();
        }
      }
     if(((! ((! ((! (! ((false || (! (! ((! (((! ((((((max((mix(vec2((5.1), (- 9.5)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), ((false ? (injectionSwitch) : ((injectionSwitch) - vec2(0.0, 0.0)))))).x > injectionSwitch.y))) && true))) || false))))))))))))))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
      }
     return;
    }
   if((((bool(bvec4(bool(bool(false)), true, false, false))))))
    barrier();
  }
 while(((injectionSwitch.x > injectionSwitch.y)));
 if((false || ((false))))
  {
   do
    {
     return;
    }
   while(false);
  }
 do
  {
   if((((! (! (bool(bvec4(false, true, false, true))))))))
    {
     if(((true && (false))))
      return;
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if((((injectionSwitch.x > (mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2((- 7.3), (- 767.784)), bvec2(false, false))).y))))
      barrier();
     if((false))
      return;
     for(int _injected_loop_counter = 1; _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
      {
       if(((true && (false))))
        {
         if((false))
          barrier();
         break;
        }
       barrier();
       if(((false || (false))))
        {
         if(true)
          {
           if((false))
            continue;
           if((false))
            break;
           barrier();
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
          }
         if((false))
          {
           if(((false || (((! (! (bool(bvec2(false, true))))))))))
            barrier();
           break;
          }
        }
       if((false))
        break;
      }
     if((false))
      barrier();
     if(true)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        continue;
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         if((((bool(bvec4(false, true, true, true)))) || false))
          {
          }
         else
          {
           barrier();
          }
        }
      }
     else
      {
       if((((injectionSwitch.x > (min((min(injectionSwitch, injectionSwitch)), injectionSwitch)).y))))
        barrier();
      }
    }
   if((false))
    barrier();
  }
 while(false);
 if(((true && (false))))
  return;
 uint virtual_gid = (max(workgroup_base + subgroup_id * subgroup_size, ((workgroup_base + subgroup_id * subgroup_size) << 0u))) + ((subgroup_local_id) / 1u);
 if(((! ((bool(bvec2(! ((! (! (false)))), true)))))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  barrier();
 uint next_virtual_gid = ((workgroup_base + subgroup_id * subgroup_size) / 1u) + ((0u ^ ((((subgroup_local_id + 1)) * 1u) % subgroup_size)));
 if((((false) || false)))
  return;
 for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
  {
   buf[virtual_gid] = 1;
   if((false))
    {
     if((((((injectionSwitch.x > injectionSwitch.y) && true)))))
      continue;
     if(false)
      {
      }
     else
      {
       barrier();
      }
     if((((false) && true)))
      {
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         barrier();
        }
       else
        {
        }
      }
     if((false))
      return;
    }
  }
 if((false))
  barrier();
 do
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        return;
       barrier();
      }
     if((false))
      barrier();
     if(true)
      {
       if((false))
        barrier();
       if(false)
        {
        }
       else
        {
         barrier();
        }
       if((false))
        barrier();
      }
     else
      {
       if(((bool((! (! (bool(false))))))))
        barrier();
       if((((bool(bvec4((false || ((injectionSwitch.x > injectionSwitch.y))), false, true, false))))))
        break;
      }
    }
  }
 while((! ((! (((false || (bool(bvec3(((! (! (false))) || false), ((injectionSwitch.x < injectionSwitch.y)), false))))))))));
 if(true)
  {
   if(((! (! ((! (! (! (! ((false)))))))))))
    return;
  }
 else
  {
  }
 if(((bool(bvec4(((false || ((false || ((((injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y)))))), false, false, true)))))
  {
   if((false))
    {
     for(int _injected_loop_counter = (0 >> (int(4))); _injected_loop_counter < ((1 << (((false ? (82453) : (((~ (~ (int(7))))) * 1))))) >> (int(7))); _injected_loop_counter ++)
      {
       return;
      }
    }
   barrier();
  }
 if(false)
  {
  }
 else
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(true)
  {
   if((false))
    {
     for(int _injected_loop_counter = 1; _injected_loop_counter > ((max(int((injectionSwitch.x)), ((int((injectionSwitch.x))) - 0))) ^ 0); _injected_loop_counter --)
      {
       if((false))
        barrier();
      }
     if((false))
      return;
     if((false))
      {
       if((false))
        return;
       barrier();
      }
     if(((bool((bool(bvec3(bool(((injectionSwitch.x > injectionSwitch.y))), ((injectionSwitch.x < injectionSwitch.y)), true)))))))
      {
       for(int _injected_loop_counter = int((injectionSwitch.y)); ((_injected_loop_counter) * 1) > 0; _injected_loop_counter --)
        {
         barrier();
        }
      }
     return;
     if((((injectionSwitch.x > (min(injectionSwitch.y, injectionSwitch.y))))))
      return;
    }
  }
 else
  {
  }
 if((false))
  {
   for(int _injected_loop_counter = 1; (true && (((((true && ((((_injected_loop_counter != (0 ^ (((false ? (_injected_loop_counter) : (min((((max(((0) / 1), 0)) | 0) << ((max((clamp((clamp((int(ivec2(int(6), 0))), int(6), (int(ivec4(int(6), 1, 0, 1))))), int(6), int(6))), int(6))))), (((((max(0, 0)) | 0) << ((max((clamp(int(6), int(6), int(6))), int(6)))))) | (((true ? ((true ? ((false ? (77293) : (((max(0, 0)) | 0) << ((max(((((1 * (clamp(int(6), int(6), int(6))))) - 0)), int(6))))))) : (_injected_loop_counter))) : (- 3541))))))))))))) || false)))) || false) || ((injectionSwitch.x > injectionSwitch.y))))); _injected_loop_counter --)
    {
     barrier();
     if(true)
      {
       if((false))
        return;
      }
     else
      {
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      {
       if((! (! (false))))
        {
        }
       else
        {
         if((false))
          barrier();
         barrier();
         if((false))
          break;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
   if((((false)) && true))
    return;
  }
 if((false))
  return;
 if(((injectionSwitch.x > injectionSwitch.y)))
  {
   if(((((clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     return;
    }
   for(int _injected_loop_counter = (max(((1) | (1)), ((1) | (1)))); _injected_loop_counter > (int(((min((clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)).x)) << (int(1))); _injected_loop_counter --)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 else
  {
   if((false))
    return;
   if(subgroup_local_id + 1 < subgroup_size)
    {
     if(false)
      {
      }
     else
      {
       if((! (! (! ((! ((bool(bvec2((false), false))))))))))
        {
         if(((((float((mat2(mat4x2((transpose(transpose(mat2(((injectionSwitch.x) - 0.0), abs(cos(0.0)), sqrt(0.0), 1.0))))))))) > injectionSwitch.y))))
          return;
         return;
        }
       if((false))
        barrier();
       if((false))
        return;
      }
     if(((bool(bool(false)))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         if((false))
          {
           if(((! (! (false)))))
            {
             if(true)
              {
               barrier();
              }
             else
              {
              }
            }
           if((false))
            return;
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             do
              {
               barrier();
              }
             while(false);
            }
           return;
          }
        }
       while((false || (true && ((false)))));
       if((((true && (bool(bool(((injectionSwitch.x > injectionSwitch.y)))))))))
        barrier();
       if(true)
        {
         barrier();
        }
       else
        {
        }
      }
     int i = (clamp(0, 0, 0));
     if((false))
      return;
     do
      {
       if((false))
        barrier();
       if(((((bool(bvec4(false, false, true, true)))) || false)))
        barrier();
       atomicStore(buf[next_virtual_gid], (((((uint(uvec4((min(uint(2), uint(2))), 0u, 1u, 0u))) - 0u)) | 0u)), (int(ivec2(4, 0))), 64, 4);
      }
     while((((((true ? (injectionSwitch.x) : (- 86.09))) * 1.0) > injectionSwitch.y)));
     if(((((min(injectionSwitch.x, ((true ? injectionSwitch.x : (515.023))))) > injectionSwitch.y))))
      {
       if(((! (! (false)))))
        return;
       if((false))
        barrier();
       if(false)
        {
        }
       else
        {
         barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     do
      {
       if((! (! ((((false) && ((injectionSwitch.x < injectionSwitch.y))))))))
        {
         do
          {
           do
            {
             if((((injectionSwitch.x > (clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))))
              continue;
             if(((! (! (false)))))
              return;
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           while(false);
           if((false))
            barrier();
           if((false))
            {
             if((false))
              continue;
             if((false))
              break;
             barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if(true)
                {
                 barrier();
                }
               else
                {
                }
              }
             if(((false || (((false) && true)))))
              return;
            }
           if((((! ((bool(bvec4((! (! (! ((injectionSwitch.x < injectionSwitch.y))))), true, true, true)))))) && ((false || (bool(bool(((false)))))))))
            {
             if(((bool(bvec2(((bool(bvec2((((false)) || false), false))) && true), true)))))
              break;
             if((false))
              return;
             if((false))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(true)
              {
               barrier();
              }
             else
              {
              }
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            return;
           if((false))
            barrier();
           if(((bool((bvec2((bvec3(bvec3(bvec3(bvec2((! ((bool(bool((true && (! (((injectionSwitch.x > injectionSwitch.y)))))))))), true), true))))))))))
            continue;
           if((false))
            {
             if((bool(bvec2(true, true))))
              {
               if((false))
                barrier();
              }
             else
              {
              }
             return;
            }
           if((false))
            barrier();
           if((bool((bvec3(bvec3(bvec3((bool(bvec2((false), true))), (! (! (true))), false)))))))
            {
             for(int _injected_loop_counter = 0; _injected_loop_counter != (clamp(1, (int(ivec3(1, 1, 1))), ((1) << 0))); _injected_loop_counter ++)
              {
               return;
              }
            }
           if((false))
            break;
           if((! (! ((false)))))
            barrier();
          }
         while((false || ((bool(bvec4((! (! ((bool(bool(false)))))), true, false, true))))));
         if((! ((! (! (! ((((bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, true))))))))))))
          barrier();
         if((false))
          return;
         for(int _injected_loop_counter = 0; _injected_loop_counter < ((1 << (int((~ (~ (7)))))) >> (int(7))); _injected_loop_counter ++)
          {
           if((((! (! (false))) || ((true && (false))))))
            barrier();
          }
         if(((injectionSwitch.x > (min(injectionSwitch, injectionSwitch)).y)))
          {
          }
         else
          {
           barrier();
          }
         if((false))
          return;
         if((false))
          {
           if((bool(bool((false)))))
            barrier();
           if((false))
            return;
           return;
          }
        }
      }
     while(false);
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((((((injectionSwitch.x > injectionSwitch.y)) || ((injectionSwitch.x > injectionSwitch.y))))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(true)
          {
           return;
          }
         else
          {
          }
        }
       if((false))
        {
         do
          {
           barrier();
          }
         while(false);
        }
       if((false))
        {
         for(int _injected_loop_counter = int((injectionSwitch.y)); (bool(bvec2(_injected_loop_counter > (0 >> ((~ (~ (int(0)))))), true))); _injected_loop_counter --)
          {
           return;
          }
        }
       return;
       if((false))
        barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     if((true && (((((false || (false)))) && true))))
      barrier();
     atomicStore(buf[(max(next_virtual_gid, next_virtual_gid))], uint(((((injectionSwitch.x < injectionSwitch.y)) ? (max(2, 2)) : (floatBitsToInt(- 655.315))))), (clamp((((int((int(ivec2(int(4), 1)))))) + 0), (((int((int(ivec2(int(4), 1)))))) + 0), (((int((int(ivec2(int(4), 1)))))) + 0))), (min(((64) << 0), 64)), 4);
     if((false))
      return;
     for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
      {
       if((false))
        barrier();
      }
     if((((mix(float(((injectionSwitch.x) / 1.0)), float((float(12289u))), bool(false))) < injectionSwitch.y)))
      {
       if(((((injectionSwitch.x < injectionSwitch.y)) && (true)) && (false)))
        {
        }
       else
        {
         if((false))
          {
           for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
            {
             if((false))
              barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           if((false))
            {
             if((false))
              barrier();
             if(true)
              {
               return;
               if(((false || ((false || (false))))))
                return;
              }
             else
              {
              }
            }
           if((((((bool((bvec3(bvec4(bvec3((injectionSwitch.x > (float(vec2((mix(float((- 553.437)), (clamp((float(mat2x3(float(injectionSwitch.y), 1.0, 0.0, 0.0, 0.0, 0.0))), (clamp((min((max((float(mat3x4((clamp(float(injectionSwitch.y), float(injectionSwitch.y), float(injectionSwitch.y))), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, (injectionSwitch.y), 1.0, 1.0, 0.0))), float(injectionSwitch.y))), float(injectionSwitch.y))), float(injectionSwitch.y), float(injectionSwitch.y))), float(injectionSwitch.y))), bool(((injectionSwitch.x < injectionSwitch.y))))), 0.0)))), true, true), true)))))))) || false))
            {
             if((false))
              {
               if((true && (true)))
                {
                 if((false))
                  barrier();
                }
               else
                {
                }
               barrier();
              }
             if((false))
              return;
             if((false))
              barrier();
             barrier();
            }
           barrier();
          }
        }
       if((((bool(bool(((false || (((false || (bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))))))))))))))
        barrier();
       if((false))
        barrier();
      }
     else
      {
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           return;
          }
         if(false)
          {
           if((false))
            barrier();
          }
         else
          {
           barrier();
          }
        }
       return;
      }
     if((bool(bvec4((((((injectionSwitch.x > injectionSwitch.y)))) || false), (true && (true)), false, true))))
      {
       if((false))
        barrier();
       barrier();
      }
    }
  }
 if((false))
  barrier();
 if(((! (! (((false) && true))))))
  barrier();
 if((false))
  {
   for(int _injected_loop_counter = 0; ((_injected_loop_counter) ^ 0) < (0 | ((0 + (1)))); _injected_loop_counter ++)
    {
     barrier();
    }
   if((false))
    barrier();
  }
 for(int _injected_loop_counter = (max(((1 << (int((int((injectionSwitch.y)) * (2))))) >> ((clamp(int(2), int(2), int(2))))), ((1 << (int(2))) >> ((clamp(int(2), int(2), int(2))))))); _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
  {
   if((false))
    {
     for(int _injected_loop_counter = 1; (false || ((((true && ((bool(bvec4(_injected_loop_counter > 0, true, true, true)))))) && true))); _injected_loop_counter --)
      {
       if((false))
        {
         if((false))
          continue;
         if((false))
          {
           if(true)
            {
             if(((((mix(vec2((0.4), (- 4.8)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, ((injectionSwitch.x < injectionSwitch.y))))).x > injectionSwitch.y))))
              {
               if((false))
                barrier();
               return;
              }
             if((false))
              barrier();
             barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                {
                 do
                  {
                   barrier();
                  }
                 while(false);
                }
               continue;
              }
            }
           else
            {
             if((false))
              barrier();
            }
          }
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
           if((false))
            break;
          }
         else
          {
           do
            {
             barrier();
            }
           while(false);
          }
        }
       if((false))
        barrier();
       if(((((min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
        break;
       if(((((! (! (injectionSwitch.x > injectionSwitch.y)))))))
        {
         if((false))
          break;
         return;
        }
       if((false))
        barrier();
       do
        {
         if(((((((bool((bvec2(bvec4(bvec2((! (! (injectionSwitch.x > injectionSwitch.y))), true), false, true)))))) && (false || (true)))))))
          {
           if((false))
            barrier();
           return;
          }
        }
       while(false);
       if(((! (! (false)))))
        barrier();
       do
        {
         barrier();
        }
       while(false);
      }
     do
      {
       if((false))
        barrier();
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
     if((false))
      {
       do
        {
         if((false))
          return;
        }
       while(false);
       barrier();
       if((false))
        barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(true)
        {
         barrier();
        }
       else
        {
        }
      }
     if((false))
      {
       if((false))
        {
         if(false)
          {
          }
         else
          {
           barrier();
          }
        }
       continue;
      }
    }
  }
 for(int _injected_loop_counter = 0; _injected_loop_counter != (min(1, 1)); _injected_loop_counter ++)
  {
   if((bool(bvec4((((injectionSwitch.x > injectionSwitch.y))), ((injectionSwitch.x < injectionSwitch.y)), false, true))))
    {
     if(((bool(bvec2((! (! ((false || (false))))), true)))))
      barrier();
     return;
    }
   if((false))
    {
     for(int _injected_loop_counter = 1; _injected_loop_counter > (min(0, 0)); _injected_loop_counter --)
      {
       if((false))
        return;
       barrier();
       if((false))
        barrier();
      }
    }
   if((false))
    continue;
   if((! (! ((false)))))
    {
     if(((true) || false))
      {
       barrier();
      }
     else
      {
      }
    }
   if((((((injectionSwitch.x > injectionSwitch.y)) || (((! (! (false))))))) || false))
    barrier();
  }
 if(((false || (false))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(((! ((true && (! (((injectionSwitch.x > injectionSwitch.y)))))))))
  {
   if(true)
    {
     if((false))
      {
       if((false))
        barrier();
       return;
      }
    }
   else
    {
    }
   barrier();
  }
 if((bool(bvec4((false), true, true, false))))
  {
   if((false))
    {
     if((((injectionSwitch.x > (((true ? mat2(1.0) * (injectionSwitch) : (vec2(- 803.346, 39.21))))).y))))
      barrier();
     return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(false)
      {
      }
     else
      {
       return;
      }
    }
   if(false)
    {
    }
   else
    {
     do
      {
       if((false))
        {
         if((((false) || false)))
          continue;
         break;
        }
       for(int _injected_loop_counter = (0 ^ 1); _injected_loop_counter > 0; _injected_loop_counter --)
        {
         return;
        }
      }
     while(false);
    }
  }
 for(int _injected_loop_counter = 1; ((! (! (bool((bvec3(bvec4(bvec3(_injected_loop_counter != ((0 >> (int(1))) & 51759), false, false), true)))))))); _injected_loop_counter --)
  {
   if((false))
    barrier();
  }
 if((false))
  return;
 if((false))
  return;
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
