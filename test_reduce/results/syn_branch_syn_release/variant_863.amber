#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = ((uint(uvec2((max((((clamp((~ (((~ (((uint(uvec3((((clamp(gl_NumWorkGroups.x, gl_NumWorkGroups.x, gl_NumWorkGroups.x))) ^ (0u & 179984u)), 0u, 0u))) ^ 0u)))) / 1u)), (gl_NumWorkGroups.x) ^ (0u & 179984u), (gl_NumWorkGroups.x) ^ ((((min(0u & ((179984u) / ((((1u << ((max(uint(4u), uint(4u))))) ^ 0u)) >> (uint(4u)))), (max(0u & ((179984u) / ((1u << ((max(uint(4u), uint(4u))))) >> (uint(4u)))), (0u ^ (0u & ((179984u) / ((1u << (uint(4u))) >> (uint(4u))))))))))) >> 0u))))) - 0u), (clamp((~ (((~ (((uint(uvec3((((clamp(gl_NumWorkGroups.x, gl_NumWorkGroups.x, gl_NumWorkGroups.x))) ^ (0u & 179984u)), 0u, 0u))) ^ 0u)))) / 1u)), (gl_NumWorkGroups.x) ^ (0u & 179984u), (gl_NumWorkGroups.x) ^ ((((min(0u & ((179984u) / ((((1u << ((max(uint(4u), uint(4u))))) ^ 0u)) >> (uint(4u)))), (max(0u & ((179984u) / ((1u << ((max(uint(4u), uint(4u))))) >> (uint(4u)))), (0u ^ (0u & ((179984u) / ((1u << (uint(4u))) >> (uint(4u))))))))))) >> 0u)))))), (((max(1u, ((1u) | (1u)))) << 0u))))));
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = (max(workgroup_size, (max((((0u | (workgroup_size))) - (0u | 0u)), ((uint(uint(0u | (workgroup_size))))))))) * workgroup_id;
 uint virtual_gid = ((((workgroup_base) ^ (((((0u | 0u)) >> 0u)) << 0u))) | (((workgroup_base) ^ (0u | 0u)))) + ((~ (~ ((subgroup_id * ((false ? (workgroup_size) : ((false ? ((((0u ^ (139234u)) | (0u ^ (139234u))))) : subgroup_size))))) ^ 0u)))) + (0u ^ ((~ (((((max(0u, 0u))) | (((0u) ^ (0u & 99183u)))) + ((uint(uvec2((((true ? ~ (~ (0u)) : (workgroup_id)))) | ((((0u | ((~ (subgroup_local_id)))) ^ 0u))), 1u)))))))));
 uint next_virtual_gid = (max(workgroup_base, (((1u ^ 1u) + (max(workgroup_base, workgroup_base)))))) + subgroup_id * (min(((((subgroup_size) << 0u)) - 0u), ((((subgroup_size) << 0u)) - 0u))) + (0u | (((((subgroup_local_id + 1)) | ((subgroup_local_id + 1))) % subgroup_size)));
 buf[virtual_gid] = 1;
 if(((subgroup_local_id + 1 < (min(subgroup_size, (uint(((uint(((subgroup_size) * 1u))) >> 0u)))))) || false))
  {
   int i = 0;
   atomicStore(buf[((next_virtual_gid) ^ (~ (~ (0u))))], uint(((((((~ (((true ? ~ ((int(ivec4(((false ? ((max(int(int((min((min((i), (i))), (clamp((i), (clamp((i), (i), (i))), (i))))))), int(int((min((min((i), (i))), (clamp((i), (i), (i)))))))))) : ((max(2, (min(2, 2))))) | ((0) * 1))), 1, (((int(ivec3((min(((((0) << 0)) | 0), ((0) << 0))), 0, 0)))) - 0), ((1 << (((int(6)) * (1 | 0)))) >> (int(6))))))) : (i))))) >> 0)) - 0)))), 4, 64, 4);
  }
 else
  {
   atomicStore(buf[next_virtual_gid], uint(((max((min((((false ? ((81078 * - 99229)) : (((false ? (50857) : (((((((((2) / 1)) ^ 0)) | ((((false || (false)) ? (75403) : 2))))) | ((((clamp(2, 2, 2))) / int((injectionSwitch.y)))))))) >> 0)))), (((false ? (clamp(((81078 * - 99229)), ((81078 * - 99229)), ((81078 * - 99229)))) : (((false ? (50857) : (((((2) | (((false ? (75403) : 2))))) | (2))))) >> 0)))))) ^ 0, (int(int((min((((false ? ((81078 * - 99229)) : (((false ? (50857) : (((((((((2) / 1)) ^ 0)) | ((((false || (false)) ? (75403) : 2))))) | ((((clamp(2, 2, 2))) / int((injectionSwitch.y)))))))) >> 0)))), (((false ? (clamp(((81078 * - 99229)), ((81078 * - 99229)), ((81078 * - 99229)))) : (((false ? (50857) : (((((2) | (((false ? (75403) : 2))))) | (2))))) >> 0)))))) ^ 0))))))), (((((((clamp(((4) | 0), (clamp((((clamp(4, 4, (min(((4) | (4)), (int(ivec3(4, 1, 1)))))))) >> 0), 4, 4)), 4))) | 0)) | ((clamp(((4) | 0), (clamp(((4) >> 0), 4, 4)), 4))))) | 0), ((64) >> ((0) - 0)), (((min(((((4) - 0) >> 0)), 4)) | 0)));
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
