#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = (((0u | ((((min((false ? (subgroup_local_id) : ((min((((((true ? ((((true ? ((0u | (gl_NumWorkGroups.x))) : (packUnorm2x16(injectionSwitch))))) * 1u) : (subgroup_id))) >> 0u)) - uint((min((injectionSwitch.x), (injectionSwitch.x))))), (0u | (gl_NumWorkGroups.x)))) >> 0u)), (false ? (subgroup_local_id) : ((min((((((true ? ((((true ? ((0u | (gl_NumWorkGroups.x))) : (packUnorm2x16(injectionSwitch))))) * 1u) : (subgroup_id))) >> 0u)) - uint((min((injectionSwitch.x), (injectionSwitch.x))))), (0u | (gl_NumWorkGroups.x)))) >> 0u))))))))) - (0u ^ 0u));
 uint workgroup_size = (~ ((uvec3(1u, 1u, 1u) * ((((((min((uvec3(uvec4(~ ((max(((gl_WorkGroupSize) | (gl_WorkGroupSize)), gl_WorkGroupSize))), 1u))) + uvec3(0u, 0u, 0u), (uvec3(uvec4(~ ((max(((gl_WorkGroupSize) | (gl_WorkGroupSize)), gl_WorkGroupSize))), 1u))) + uvec3(0u, 0u, 0u))))))) ^ uvec3(0u, 0u, 0u))))).x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = ((((injectionSwitch.x > injectionSwitch.y)) ? ((workgroup_size * subgroup_id)) : ((workgroup_base) * uint((injectionSwitch.y))))) + ((subgroup_id * subgroup_size) * 1u) + subgroup_local_id;
 uint next_virtual_gid = (clamp(((((workgroup_base)) - 0u) * ((true ? 1u : (subgroup_size)))), workgroup_base, workgroup_base)) + (clamp(subgroup_id, subgroup_id, (~ (((false ? (subgroup_id) : ((~ (subgroup_id)) | (((false ? (subgroup_size) : ~ ((max(subgroup_id, subgroup_id))))))))))))) * subgroup_size + ((((min(((((false ? (991u) : clamp(((subgroup_local_id) + 0u), (((((injectionSwitch.x < injectionSwitch.y)) ? ((max(subgroup_local_id, subgroup_local_id))) : (188286u))) + 0u), ((subgroup_local_id) + 0u))))) | (clamp(((subgroup_local_id) + 0u), (((((injectionSwitch.x < injectionSwitch.y)) ? ((max(subgroup_local_id, subgroup_local_id))) : (188286u))) + 0u), ((subgroup_local_id) + 0u)))), clamp(((max((subgroup_local_id), (subgroup_local_id))) + 0u), (((((((false ? (- 913.610) : ((max(float(mat2x3(((false ? (- 343.391) : injectionSwitch.x)), 1.0, 1.0, 1.0, 0.0, 0.0)), float(mat2x3(((false ? (- 343.391) : injectionSwitch.x)), 1.0, 1.0, 1.0, 0.0, 0.0))))))) < injectionSwitch.y)) ? ((max(subgroup_local_id, subgroup_local_id))) : (188286u))) + 0u), ((subgroup_local_id) + 0u))))) + ((((int((clamp(ivec2((((((clamp(((max((max((clamp(1, 1, 1)), (clamp(1, 1, 1)))), (clamp(1, 1, 1))))) | (1), ((max((max((clamp(1, 1, 1)), (clamp(1, 1, 1)))), (clamp(1, 1, 1))))) | (1), ((max((max((clamp(1, 1, 1)), (clamp(1, 1, 1)))), (clamp(1, 1, 1))))) | (1)))) >> (0 ^ 0))) << 0), 0), ivec2((((int(ivec2((~ (~ (int(ivec2(((clamp(((max((((((max((clamp(1, 1, 1)), (clamp(1, 1, 1)))) << (0 << (int(0))))) + 0)), (clamp(1, 1, (~ (~ (1)))))))) | (1), ((max((max((clamp(1, 1, 1)), (clamp(1, 1, 1)))), (clamp(1, 1, 1))))) | (1), ((max((max((clamp(1, 1, 1)), (clamp(1, 1, 1)))), (clamp(1, 1, 1))))) | (1)))), 1))))), 1)))) << 0), 0), (clamp(ivec2((((clamp(((max((max((clamp(1, 1, 1)), (~ (~ ((clamp(1, 1, 1))))))), (clamp(1, 1, 1))))) | (1), ((max(((~ (~ (max((clamp(1, 1, 1)), (clamp(1, 1, 1))))))), (clamp(1, 1, 1))))) | (1), ((max((max((clamp(1, 1, 1)), ((min((max(clamp(1, 1, 1), clamp(1, 1, 1))), ((((clamp(1, 1, 1)) - 0)) - 0)))))), (clamp(1, 1, 1))))) | (1)))) << 0), 0), ivec2((((clamp(((max((max((clamp(1, ((1) | ((((int(int(1)))) << 0))), 1)), (clamp(1, 1, 1)))), (clamp(1, 1, 1))))) | (1), ((max((max((clamp(1, 1, 1)), ((true ? (clamp(1, 1, 1)) : (- 63551))))), (clamp(1, 1, 1))))) | (1), ((max((1 * ((max((clamp(1, (~ (~ (1))), 1)), (clamp(1, 1, 1)))))), (clamp((min((clamp(1, 1, 1)), (clamp(1, 1, 1)))), (clamp(1, 1, 1)), (clamp(1, 1, 1))))))) | (1)))) << 0), 0), ivec2((((clamp(((max((max((clamp(1, 1, 1)), (clamp(1, 1, 1)))), (clamp(1, 1, 1))))) | (1), ((max((max((clamp(1, 1, 1)), (clamp(1, 1, 1)))), (clamp(1, 1, 1))))) | (1), ((max((max((clamp(1, 1, 1)), (clamp(1, 1, 1)))), (clamp(1, 1, 1))))) | (1)))) << 0), 0))))))) - 0)))) % subgroup_size);
 buf[virtual_gid] = ((((true ? 1 : (- 34420)))) << 0);
 if(subgroup_local_id + ((false ? ((48703 + 84811)) : ((0 & 23774) ^ ((min(((((((((0 ^ ((0 ^ (((int(ivec3((clamp(1, ((1) | (1)), 1)), 0, 0)))) ^ 0))))) - 0)))) * ((((injectionSwitch.x > injectionSwitch.y)) ? (- 20118) : (((1 & 1)) * int((injectionSwitch.y))))))) / 1, ((((((0 ^ (clamp(1, ((1) | (1)), 1)))))) * (((1 & 1)) >> (int(((ivec3(0, (28781 & ((0) | (0 << (int(2))))), 1)) << ivec3(0, 0, 0))))))) / 1)))))) < (max(subgroup_size, subgroup_size)))
  {
   int i = 0;
   atomicStore(buf[next_virtual_gid], (((uint((0u | (uint(uint(((2) ^ (clamp((((((1 << (clamp((int(7)), ((true ? (clamp((((clamp((int(7)), (int(7)), (int(7))))) + 0), (clamp((int(7)), (int(7)), (int(7)))), (clamp((int(7)), (int(7)), (int(7)))))) : (i))), (int(7))))) >> (((int(7)) * (1 ^ 0)))) * (false ? (i) : 0)))), ((false ? (i) : 0)), ((min((min(0, 0)), 0)) | (((false ? (- 63591) : ((((false) && true) ? (i) : 0))))))))))))))) >> (min(((false ? (subgroup_size) : 0u)), (((uint(uvec3(0u, 0u, 0u))) | (uint(uvec3(0u, 0u, 0u))))))))), ((((4) | (4))) | 0), ((64) >> 0), 4);
  }
 else
  {
   atomicStore(buf[next_virtual_gid], (~ (~ (uint(2)))), (clamp((((int(int(4)))) * 1), 4, 4)), 64, 4);
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
