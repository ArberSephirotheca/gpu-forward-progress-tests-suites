#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 if((false))
  return;
 uint workgroup_size = ((0u << (uint((1u * (1u))))) + (gl_WorkGroupSize.x));
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * (max(workgroup_id, workgroup_id));
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 uint next_virtual_gid = ((((false ? (((~ (~ ((workgroup_size))))) ^ 0u) : workgroup_base))) ^ (((max(0u, 0u))) * 1u)) + subgroup_id * subgroup_size + (((((~ (~ ((max(uint(uvec2((((((subgroup_local_id + 1) * 1u))) * 1u), 0u)), (max(uint(uvec2((((((subgroup_local_id + 1) * 1u))) * 1u), 0u)), uint(uvec2((((((subgroup_local_id + 1) * 1u))) * 1u), 0u))))))))) ^ 0u))) % subgroup_size);
 buf[virtual_gid] = 1;
 if(subgroup_local_id + 1 < subgroup_size)
  {
   int i = 0;
   if(((((bool((bvec3(bvec4((bvec3(bvec3(bvec3((float(mat4(injectionSwitch.x, 0.0, log(1.0), 1.0, 0.0, 0.0, (mix(float((- 81.75)), float(1.0), bool(true))), 0.0, 1.0, 1.0, 1.0, length(vec2(0.0, 0.0)), 0.0, 0.0, 1.0, 0.0))) > (clamp(((injectionSwitch) * mat2(1.0)), (mix(vec2((((((true ? injectionSwitch : (vec2(38.30, 99.85))))) * mat2(1.0)))[0], (((injectionSwitch) * mat2(1.0)))[1]), vec2((- 4.6), (- 1116.5729)), bvec2(false, false))), ((injectionSwitch) * mat2(1.0)))).y, true, true)))), true)))))))))
    return;
   atomicStore(buf[(clamp(((((next_virtual_gid) ^ 0u)) | 0u), ((next_virtual_gid) ^ 0u), ((0u + ((((((next_virtual_gid) ^ 0u) / 1u) ^ 0u)))))))], uint(2), ((max(0, 0)) ^ (4)), 64, 4);
  }
 else
  {
   if((((false || (((((bool(bool(((min(injectionSwitch, injectionSwitch)).x > (((true && (true)) ? (mix(float((6.5)), float(injectionSwitch.y), bool((! ((true && (! (true)))))))) : (929.764))))))))) && true)))) && true))
    {
    }
   else
    {
     if(((((! (! ((bool((bvec2(bvec4(bvec2((true && ((bool(((bvec2((bvec3(bvec4((bvec3(bvec4(bvec3((bvec2(bvec2(bvec2(bvec3((bvec2(bvec2(bvec2((((false || ((bool(bvec4(false, false, ((! ((false || (! (true))))) && (true)), true))) || false)))), ((((((true)) && true) && true)) && ((injectionSwitch.x < injectionSwitch.y))))))), ((injectionSwitch.x > injectionSwitch.y))))))), false), true))), false)))))))))), false), false, false))))))))) && ((bool(bvec2((((((false) || false) || (! ((false || (! (! ((! ((! (! ((((((((bool(bvec4((bool(bvec4((((bool(bvec3(true, (! ((true && ((true && (! (false))))))), false)))) || false), false, (true && (true)), false))), false, false, ((injectionSwitch.x > (float(vec3(injectionSwitch.y, 1.0, abs(sqrt(1.0))))))))))) || ((false) && true))) && true)) || false)))))))))))))) || false), true)))))))
      {
       if((false || (true)))
        {
         barrier();
        }
       else
        {
        }
      }
    }
   do
    {
     if(((bool(bvec2(((injectionSwitch.x < injectionSwitch.y)) && (true), true)))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       atomicStore(buf[next_virtual_gid], uint((((min((clamp(2, (1 * (2)), 2)), ((false ? (- 40810) : 2))))) | ((clamp((min((clamp(2, (1 * (2)), ((2) << 0))), (((false ? (- 34056) : (max((false ? ((false ? (57839) : (max((- 40810), (- 40810))))) : 2), (false ? ((false ? (57839) : (max((- 40810), (- 40810))))) : 2)))))))), (((min((clamp(2, (1 * (2)), ((2) << 0))), (((false ? (- 34056) : (max((false ? ((false ? (57839) : (max((- 40810), (- 40810))))) : 2), (false ? ((false ? (57839) : (max((- 40810), (- 40810))))) : 2))))))))) | 0), (min((clamp(2, (1 * (2)), ((2) << 0))), (((false ? (- 34056) : (max((false ? ((false ? (57839) : (max((- 40810), (- 40810))))) : 2), (false ? ((false ? (57839) : (max((- 40810), (- 40810))))) : 2))))))))))))), 4, 64, (min(4, 4)));
      }
     else
      {
      }
    }
   while((! (! (! (! ((((false) && ((true) || false)))))))));
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
