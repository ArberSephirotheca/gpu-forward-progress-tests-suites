#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((false))
  barrier();
 if(((true && (((! (! ((injectionSwitch.x > ((injectionSwitch) / vec2(1.0, 1.0)).y)))))))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 if(((true && (! (((bool(bvec3((! ((false))), false, (bool(bvec2(((injectionSwitch.x > injectionSwitch.y)), false)))))) && true))))))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   if(((false || (((injectionSwitch.x > injectionSwitch.y))))))
    barrier();
   barrier();
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
  }
 if((false))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if((((injectionSwitch.x > (mix(float((min(injectionSwitch, (clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).y), float((5.5)), bool((false || (false)))))))))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(((bool(bvec3(false, (true && (((! (! (true))) && (true)))), true)))))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if((false))
  barrier();
 if((((injectionSwitch.x > (max(injectionSwitch, injectionSwitch)).y))))
  barrier();
 if((true && ((true && (((((! (! (bool(bvec3((false), true, true)))))))) && true)))))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 if((! (! ((false)))))
  barrier();
 if((((false) && true)))
  {
   if((false))
    {
     if(((bool(bvec2(((injectionSwitch.x > injectionSwitch.y)), false)))))
      {
       if((false))
        barrier();
       barrier();
       if((false))
        barrier();
      }
     if((false))
      barrier();
     barrier();
    }
   barrier();
  }
 if((((bool(bvec2(((((min((clamp(injectionSwitch.x, injectionSwitch.x, ((injectionSwitch.x) - 0.0))), (1.0 * (injectionSwitch.x))))) - (injectionSwitch.x)) > injectionSwitch.y), false))))))
  barrier();
 if((false))
  barrier();
 if((((injectionSwitch.x > (vec2(1.0, 1.0) * ((mix(vec2((- 3334.3938), (677.116)), vec2((injectionSwitch)[0], (float(((mat3x4((injectionSwitch)[((1) / 1)], 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0)) - mat3x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))), bvec2(true, true))))).y))))
  {
   if((((bool(bvec2((injectionSwitch.x > injectionSwitch.y), false))))))
    barrier();
   barrier();
  }
 uint workgroup_base = (0u | ((~ (((~ ((((((~ (~ (workgroup_size))) * workgroup_id)) + 0u)) + uint((injectionSwitch.x)))) | 0u)))));
 if(((bool((! (! (bool(false))))))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   if(((((true && ((! (! (false)))))) && true)))
    barrier();
   barrier();
  }
 if(((((vec2(mat2x3((vec2(injectionSwitch[0], injectionSwitch[1])), 1.0, 1.0, sqrt(0.0), 1.0))).x > injectionSwitch.y))))
  barrier();
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + (min(subgroup_local_id, subgroup_local_id));
 if((true && ((false))))
  barrier();
 uint next_virtual_gid = ((((clamp((((((((false ? (virtual_gid) : ((true ? (~ (~ ((min(workgroup_base, workgroup_base)) + subgroup_id * subgroup_size))) + (((((min(subgroup_local_id, subgroup_local_id)) + 1) | 0u)) % subgroup_size) : (num_workgroup))))) - 0u) | (((false ? (virtual_gid) : ((true ? (~ (~ ((min(workgroup_base, workgroup_base)) + subgroup_id * subgroup_size))) + ((((((0u | (min(subgroup_local_id, subgroup_local_id)))) + 1) | 0u)) % subgroup_size) : (num_workgroup))))) - 0u)))) - 0u), (false ? (virtual_gid) : ((true ? (min(workgroup_base, workgroup_base)) + (max(subgroup_id, subgroup_id)) * subgroup_size + ((subgroup_local_id + 1) % ((true ? subgroup_size : (workgroup_size)))) : ((false ? (workgroup_size) : (num_workgroup)))))), ((max(uint(uvec2((false ? (virtual_gid) : ((true ? (((true ? max(((((false ? (subgroup_size) : ((((0u | (((uint(uvec2((((true ? 0u : (workgroup_id))) + 0u), 0u))) << 0u)))))) ^ 0u))) + ((~ (~ (((clamp(min(workgroup_base, workgroup_base), min(workgroup_base, workgroup_base), min(workgroup_base, workgroup_base)))) + subgroup_id * subgroup_size + ((((uint(uvec3((subgroup_local_id + 1) % subgroup_size, 1u, 1u)))) / 1u))))))), (0u + ((~ (~ ((min(workgroup_base, workgroup_base)) + subgroup_id * subgroup_size + (uint((((~ (~ (uvec3(((subgroup_local_id + 1) % subgroup_size), 0u, 1u))))) >> uvec3(0u, 0u, 0u)))))))))) : (virtual_gid)))) : (num_workgroup)))), 0u)), ((uint(uvec2((false ? (virtual_gid) : ((true ? (((true ? max(((((false ? (subgroup_size) : ((((0u | (true ? 0u : (workgroup_id)))))) ^ 0u))) + ((~ (~ ((min(workgroup_base, workgroup_base)) + subgroup_id * subgroup_size + ((((uint(uvec3(((clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1))) % subgroup_size, 1u, 1u)))) / 1u))))))), (0u + ((~ (~ ((min(workgroup_base, workgroup_base)) + subgroup_id * subgroup_size + (uint((((~ (~ (uvec3(((subgroup_local_id + 1) % subgroup_size), 0u, 1u))))) >> uvec3(((0u) | 0u), 0u, 0u)))))))))) : (virtual_gid)))) : (num_workgroup)))), 0u))) | ((uint(uint(uint(uvec2((false ? (virtual_gid) : ((true ? (((true ? max(((((false ? (subgroup_size) : (((uint(uvec2((((~ (~ (0u | (true ? 0u : (workgroup_id))))))), 0u))))) ^ 0u))) + ((~ (~ ((min(workgroup_base, workgroup_base)) + subgroup_id * subgroup_size + ((((uint(uvec3((subgroup_local_id + 1) % subgroup_size, 1u, 1u)))) / 1u))))))), (0u + ((~ (~ ((min(workgroup_base, workgroup_base)) + subgroup_id * subgroup_size + (uint((((~ (~ ((max(uvec3(((subgroup_local_id + 1) % subgroup_size), 0u, 1u), uvec3(((subgroup_local_id + 1) % subgroup_size), 0u, 1u))))))) >> uvec3(0u, 0u, 0u)))))))))) : (virtual_gid)))) : (num_workgroup)))), 0u)))))))))))))) << 0u);
 buf[virtual_gid] = 1;
 if((false))
  barrier();
 if(((bool(bvec3((((bool(bvec2((false || (((injectionSwitch.x > injectionSwitch.y)))), false)))) && true), false, ((injectionSwitch.x < injectionSwitch.y)))))))
  barrier();
 if(((bool(bvec4((((bool(bvec4(((((((! (! ((((((true && (false || (((injectionSwitch.x < injectionSwitch.y)) && (bool(bool((bool(bvec2((vec2(mat3x2(injectionSwitch, 0.0, 0.0, 1.0, 1.0))).x > injectionSwitch.y, true)))))))))))) || false)))))))) || false), false, false, false)))) && true), true, ((true) || false), false)))))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   if((((false) || ((injectionSwitch.x > injectionSwitch.y)))))
    barrier();
   barrier();
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
     if(((bool(bool(false)))))
      barrier();
     barrier();
    }
   barrier();
   if(((((mix(vec2((injectionSwitch)[0], ((- 4.8 * - 3.0))), (((bool(bvec2(true, true))) ? vec2((1135.1965), ((true ? (injectionSwitch)[1] : ((min(- 7295.5254, - 7295.5254)))))) : (injectionSwitch))), bvec2(false, true))).x > injectionSwitch.y))))
    barrier();
  }
 if(((! (((! (false)) && true)))))
  barrier();
 if(((bool(bool((true && (((! (! ((false))))))) && ((injectionSwitch.x < injectionSwitch.y)))))))
  {
   if((((((injectionSwitch.x > injectionSwitch.y))) || false)))
    barrier();
   barrier();
  }
 if((((injectionSwitch.x > (((true ? vec2(((true ? injectionSwitch[0] : (- 6.5))), injectionSwitch[1]) : (vec2(26.03, 4.8))))).y))))
  barrier();
 if(((((false || (injectionSwitch.x > injectionSwitch.y))))))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 if(((((vec2(0.0, 0.0) + ((vec2(injectionSwitch[0], injectionSwitch[1])))).x > injectionSwitch.y))))
  barrier();
 if(((((0u | 0u) | ((((max(subgroup_local_id, subgroup_local_id))) + 0u))) >> 0u)) + 1 < ((subgroup_size) * (1u ^ 0u)))
  {
   int i = 0;
   atomicStore(buf[next_virtual_gid], (min((min((~ (~ (uint(2)))), uint(2))), (min((~ (~ (uint(2)))), uint(2))))), (((((! ((((true && (! (((true && (! (! ((bool(((bool(injectionSwitch.x < ((injectionSwitch) - vec2(0.0, 0.0)).y)) && true)))))))))))) && true))))) ? (((((1 * (((int(ivec4(clamp((0 | (4)), 4, 4), 1, ((1) - 0), ((1 << (int(4))) >> (int(4)))))) | 0)))) / 1))) : (atomicAdd(i, (11198 ^ i))))), (((((((int(ivec2(64, 0))))) >> 0)) - 0) - 0), 4);
  }
 else
  {
   atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
  }
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((((bool((bvec2(bvec4((bvec2(bvec3((bvec2(bvec4(bvec2(((! (! ((bool(bvec3(((false)) || false, false, true))))))), false), false, true))), (bool(bvec2((((vec2(1.0, 1.0) * (injectionSwitch)).x > injectionSwitch.y)), true)))))), true, false))))) && true)))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   if((((false) && true)))
    {
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
     barrier();
     if((false))
      barrier();
    }
   if((false))
    barrier();
   barrier();
   if(((bool(bvec3(false, true, false)))))
    barrier();
  }
 if(((((! (! (true))) && ((injectionSwitch.x > injectionSwitch.y))))))
  barrier();
 if((((((injectionSwitch.x) - 0.0) > injectionSwitch.y))))
  barrier();
 if((((false || ((true && ((injectionSwitch.x > ((injectionSwitch.y) - 0.0)))))))))
  barrier();
 if((((((injectionSwitch.x > injectionSwitch.y))) && true)))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
