#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(true)
  {
   if((false))
    {
     if(false)
      {
      }
     else
      {
       if((false))
        return;
      }
     return;
    }
  }
 else
  {
  }
 uvec3 GLF_merged3_0_1_13_1_1_14_2_1_14num_workgroupworkgroup_baseworkgroup_size;
 if((false))
  {
   if(((bool(bvec4(false, true, false, false)))))
    {
     if((true && ((false))))
      {
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         for(int _injected_loop_counter = 1; _injected_loop_counter > (1 ^ 1); (~ (~ (_injected_loop_counter --))))
          {
           if((false))
            barrier();
           return;
          }
        }
       else
        {
        }
      }
     barrier();
     if((false))
      return;
    }
   if((false))
    return;
   return;
   for(int _injected_loop_counter = ((+ (int(ivec3(89816, (1 & 1), 1)))) & 0); _injected_loop_counter < 1; _injected_loop_counter ++)
    {
     if(((((vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
      {
       if((false || (false)))
        {
        }
       else
        {
         if((false))
          {
           if((false))
            {
             if(((injectionSwitch.x < injectionSwitch.y)))
              {
               barrier();
              }
             else
              {
              }
            }
           if((false))
            return;
           if(true)
            {
             if(false)
              {
              }
             else
              {
               if((((((false) || ((injectionSwitch.x > injectionSwitch.y)))) && true)))
                {
                 do
                  {
                   return;
                  }
                 while(false);
                }
              }
             do
              {
               return;
              }
             while(false);
             if((false))
              return;
            }
           else
            {
            }
          }
        }
       if((false))
        {
         if(false)
          {
           if((false))
            barrier();
          }
         else
          {
           return;
          }
        }
       return;
      }
    }
  }
 uvec3 GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id;
 if((false))
  {
   for(int _injected_loop_counter = 0; _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
    {
     if(true)
      {
       if((((((true ? injectionSwitch : (vec2(- 3.1, - 2.8)))).x > injectionSwitch.y))))
        {
         do
          {
           if((! (! ((bool(bvec4((false), true, false, false)))))))
            barrier();
          }
         while(false);
         if(true)
          {
           if((false))
            continue;
           return;
          }
         else
          {
           if((false))
            return;
          }
        }
       do
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       while(false);
      }
     else
      {
      }
    }
   if(((! (! (false)))))
    return;
   if((false))
    {
     do
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        {
         for(int _injected_loop_counter = 0; _injected_loop_counter != ((1 << (int(5))) >> (int(5))); _injected_loop_counter ++)
          {
           return;
          }
        }
      }
     while(false);
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if((false))
      {
       if(true)
        {
         return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
      }
    }
   if((false))
    {
     for(int _injected_loop_counter = 1; _injected_loop_counter != (0 ^ ((int(int(((int((injectionSwitch.x))) << 0)))))); _injected_loop_counter --)
      {
       return;
      }
    }
   for(int _injected_loop_counter = 0; _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
    {
     return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(false)
  {
  }
 else
  {
   if((((((bool(bvec2(((bool((bool(bvec2((true && (bool(false))), false)))))), true))) && true))) && true))
    barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 if(true)
  {
   if(false)
    {
    }
   else
    {
     ((GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y = subgroup_id) * ((1u) ^ 0u));
     if((false))
      return;
    }
  }
 else
  {
  }
 if(true)
  {
   if((false))
    {
     do
      {
       if((false))
        return;
      }
     while(((false) && true));
     barrier();
    }
  }
 else
  {
  }
 if(true)
  {
   if((false))
    {
     if(((((true && (((injectionSwitch.x < injectionSwitch.y)) && (false)))) && true)))
      {
      }
     else
      {
       if((((vec2(mat2x4(injectionSwitch, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0))).x > injectionSwitch.y)))
        {
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if((false))
          barrier();
         do
          {
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             if((! (! ((false)))))
              {
               if(((injectionSwitch.x > injectionSwitch.y)))
                {
                }
               else
                {
                 barrier();
                }
              }
             if((false))
              return;
             if((((injectionSwitch.x > ((min(float(mat2x3(injectionSwitch.y, 0.0, 0.0, 1.0, 1.0, sqrt(length(0.0)))), ((float(mat2x3(injectionSwitch.y, 0.0, 0.0, 1.0, 1.0, sqrt(length(0.0))))) - 0.0))))))))
              return;
            }
          }
         while(false);
         if(true)
          {
           if((false))
            return;
          }
         else
          {
          }
        }
      }
     if(((((max((float((transpose(transpose(mat3(injectionSwitch.x, 1.0, 0.0, (injectionSwitch.x), 1.0, 1.0, 1.0, 0.0, sin(0.0))))))), injectionSwitch.x)) > injectionSwitch.y))))
      {
       if((false))
        {
         for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
          {
           for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
            {
             return;
            }
           if((false))
            barrier();
          }
        }
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         return;
         if((((false || ((false || ((false) || false)))))))
          {
           for(int _injected_loop_counter = (((0 | 0) | (0 | 0))); _injected_loop_counter < 1; _injected_loop_counter ++)
            {
             barrier();
            }
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     return;
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if((false))
        {
         do
          {
           return;
          }
         while(false);
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if((false))
          return;
        }
      }
     else
      {
      }
     if((false))
      barrier();
    }
  }
 else
  {
  }
 if((false))
  {
   do
    {
     if((false))
      barrier();
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
   if((false))
    return;
   return;
  }
 if((false))
  barrier();
 if((false))
  {
   if(((true && (false))))
    return;
   if((false))
    {
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       return;
      }
     else
      {
      }
    }
   if(false)
    {
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
  }
 if((false))
  return;
 uint subgroup_size = gl_SubgroupSize;
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if(((bool(bool(false)))))
  {
   if(((((injectionSwitch.x < injectionSwitch.y) || false))))
    {
     return;
    }
   else
    {
    }
  }
 if(((true && ((! (! (((injectionSwitch.x > (max(injectionSwitch.y, injectionSwitch.y)))))))))))
  {
   if((false))
    return;
   if((false))
    barrier();
   for(int _injected_loop_counter = 1; _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
    {
     if((false))
      return;
    }
   for(int _injected_loop_counter = 1; _injected_loop_counter > (0 ^ 0); _injected_loop_counter --)
    {
     if((false))
      barrier();
     return;
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((false))
  {
   if((false))
    return;
   if((false))
    {
     do
      {
       return;
      }
     while(false);
    }
   barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if((false))
  {
   do
    {
     return;
     if((false))
      barrier();
    }
   while(false);
  }
 GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.z = subgroup_local_id;
 if(((injectionSwitch.x < injectionSwitch.y)))
  {
   if((false))
    return;
   if((false))
    {
     if((false))
      {
       if((bool((false || (bool(true))))))
        {
         if((false))
          return;
        }
       else
        {
        }
       do
        {
         return;
        }
       while(false);
      }
     if(true)
      {
       if((false))
        return;
       return;
       if(((true && (false))))
        barrier();
      }
     else
      {
      }
    }
  }
 else
  {
  }
 if(((((! (! (injectionSwitch.x > (clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))))))))
  {
   do
    {
     if(false)
      {
       if((false))
        {
         if((false))
          break;
         barrier();
        }
      }
     else
      {
       return;
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
         if((false))
          break;
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         if((false))
          return;
        }
       if((false))
        barrier();
      }
     if((((false)) || ((injectionSwitch.x > injectionSwitch.y))))
      break;
    }
   while((! ((false || (! ((false || (((injectionSwitch.x > injectionSwitch.y))))))))));
   if(((((clamp(((true ? injectionSwitch.x : (- 1372.0315))), injectionSwitch.x, (float(mat2x3(injectionSwitch.x, cos(0.0), 1.0, 0.0, 1.0, 1.0))))) > injectionSwitch.y))))
    return;
   if((false))
    barrier();
  }
 if(((true) && true))
  {
   do
    {
     if((false))
      break;
     if(true)
      {
       if((false))
        return;
      }
     else
      {
      }
    }
   while(false);
   if((false))
    {
     if((false))
      {
       do
        {
         if(true)
          {
           return;
          }
         else
          {
          }
        }
       while(false);
      }
     barrier();
    }
  }
 else
  {
   if((false))
    barrier();
   if(false)
    {
    }
   else
    {
     if((false))
      barrier();
     if((((true && (bool((bvec3(bvec4(bvec3((((bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, true, true))))), true, true), true)))))))))
      return;
    }
  }
 if(false)
  {
   for(int _injected_loop_counter = 0; ((_injected_loop_counter) - 0) < 1; _injected_loop_counter ++)
    {
     if((false))
      return;
    }
  }
 else
  {
   if((((injectionSwitch.x > (mix(float(injectionSwitch.y), float((82.01)), bool(false)))))))
    return;
   if(true)
    {
     if((false))
      return;
     if((false))
      return;
    }
   else
    {
    }
  }
 if((false))
  {
   if(true)
    {
     return;
    }
   else
    {
    }
  }
 if(((true && (((((bool(bvec3((! ((bool(bvec4(! (! (! (((false || ((injectionSwitch.x > injectionSwitch.y))))))), false, ((injectionSwitch.x < injectionSwitch.y)), ((injectionSwitch.x > injectionSwitch.y))))))), true, false))) && true)))))))
  {
   if((true && (false)))
    {
    }
   else
    {
     barrier();
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(true)
  {
   if((false))
    return;
  }
 else
  {
  }
 uint num_workgroup = (clamp(gl_NumWorkGroups.x, gl_NumWorkGroups.x, gl_NumWorkGroups.x));
 do
  {
   for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
    {
     for(int _injected_loop_counter = 1; _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
      {
       if(false)
        {
        }
       else
        {
         if(((((! (((! ((min(injectionSwitch, ((((injectionSwitch) * mat2(1.0))) * mat2(1.0)))).x > (clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y)) || false)))))))
          {
           do
            {
             return;
            }
           while(false);
          }
        }
      }
    }
   GLF_merged3_0_1_13_1_1_14_2_1_14num_workgroupworkgroup_baseworkgroup_size.x = (((min(num_workgroup, num_workgroup))) ^ 0u);
  }
 while((((vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y)));
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 do
  {
   if((false))
    return;
  }
 while(false);
 if((false))
  {
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     for(int _injected_loop_counter = ((0 | (0 >> (int(2)))) >> (int(3))); _injected_loop_counter < (min(((((1 << ((clamp(int(7), int(7), int(7))))) >> (int(7)))) * 1), ((1 << ((clamp(int(7), int(7), int(7))))) >> (int(7))))); _injected_loop_counter ++)
      {
       if((((false) || false)))
        {
         if((false))
          return;
         return;
        }
      }
     if(true)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
      }
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
       if((false))
        return;
      }
     else
      {
       return;
      }
    }
   else
    {
     if((false))
      {
       if(true)
        {
         return;
        }
       else
        {
        }
      }
    }
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
  {
   do
    {
     if(((true) && true))
      {
       do
        {
         if((false))
          return;
        }
       while(false);
       if((false))
        return;
       if(((true && (true && (((bool(bvec4(true, true, true, true))) && (false || ((((! (! (((((! (! (false))) || (injectionSwitch.x > injectionSwitch.y)))))))))))))))))
        {
         do
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if(((((max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
              break;
             if((false))
              return;
             if((false))
              {
               if((false))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                break;
               break;
              }
             if(true)
              {
               if(true)
                {
                 return;
                }
               else
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
              }
             else
              {
               if((! (! ((false)))))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 if((false))
                  barrier();
                 continue;
                }
               if((((injectionSwitch.x > (mix(float((3545.0512)), float((1.0 * ((((mat2(1.0) * (vec2(mat4(clamp(injectionSwitch, ((injectionSwitch) + vec2(0.0, 0.0)), injectionSwitch), 1.0, 0.0, 1.0, 0.0, 0.0, log(cos(0.0)), sqrt(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, (injectionSwitch.x), 1.0)))))).y))), bool(true)))))))
                {
                 if((false))
                  barrier();
                 continue;
                }
               if(false)
                {
                 if((false))
                  barrier();
                 if((false))
                  break;
                 if((false))
                  barrier();
                }
               else
                {
                 if((false))
                  return;
                 if(((! (! (false)))))
                  barrier();
                }
              }
            }
          }
         while(((bool((bvec2(bvec4((bvec2(bvec4(bvec2((false) && ((injectionSwitch.x < injectionSwitch.y)), true), false, true))), true, false)))))));
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = (int(int(1))); _injected_loop_counter > 0; _injected_loop_counter --)
              {
               if(true)
                {
                 if(((((injectionSwitch.x > injectionSwitch.y))) && true))
                  {
                  }
                 else
                  {
                   return;
                  }
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  return;
                 if((false))
                  {
                   if(false)
                    {
                    }
                   else
                    {
                     return;
                    }
                  }
                }
               else
                {
                 for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
                  {
                   if(((! (! (false)))))
                    return;
                  }
                }
              }
             do
              {
               if((false))
                return;
              }
             while(false);
            }
           if(((false || (false))))
            return;
          }
         else
          {
           if((false))
            barrier();
           if((false))
            return;
          }
         if(false)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
           if((false))
            return;
          }
         return;
         if((false))
          {
           if(true)
            {
             if((false))
              {
               for(int _injected_loop_counter = ((((0 & - 41291) << 0)) | 0); _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
                {
                 do
                  {
                   barrier();
                  }
                 while(false);
                }
              }
            }
           else
            {
            }
           for(int _injected_loop_counter = (1 & 1); _injected_loop_counter != 0; _injected_loop_counter --)
            {
             return;
            }
          }
         for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
          {
           do
            {
             if((false))
              return;
            }
           while(false);
          }
        }
      }
     else
      {
       if((false))
        {
         do
          {
           if((((((injectionSwitch.x > injectionSwitch.y)) || (injectionSwitch.x > injectionSwitch.y)))))
            {
            }
           else
            {
             return;
            }
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
        }
      }
    }
   while(false);
  }
 if((false))
  {
   if((false))
    barrier();
   do
    {
     return;
    }
   while(false);
  }
 if((false))
  {
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
    }
   else
    {
     for(int _injected_loop_counter = (0 << (int(1))); _injected_loop_counter < 1; _injected_loop_counter ++)
      {
       if((false))
        {
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           return;
          }
         else
          {
          }
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if((false))
    {
     if(((! (((! (false)) || false)))))
      barrier();
     return;
    }
   if(true)
    {
     return;
    }
   else
    {
    }
   if(true)
    {
     if((false))
      return;
    }
   else
    {
    }
  }
 if((bool((false || (bool((((injectionSwitch.x > injectionSwitch.y)))))))))
  return;
 if(((injectionSwitch.x > injectionSwitch.y)))
  {
  }
 else
  {
   GLF_merged3_0_1_13_1_1_14_2_1_14num_workgroupworkgroup_baseworkgroup_size.z = ((workgroup_size) - 0u);
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if(((((true && (((injectionSwitch.x > injectionSwitch.y) || false)))))))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 if((false))
  return;
 if(((bool((bvec2((bvec3(bvec4(bvec3(bvec2(false, false), false), false)))))))))
  {
   for(int _injected_loop_counter = ((((((int((injectionSwitch.y))) << 0)) >> 0)) | 0); _injected_loop_counter != (0 & 91087); _injected_loop_counter --)
    {
     if(false)
      {
      }
     else
      {
       if((false))
        return;
      }
    }
   if(((true && (false))))
    return;
   if((false))
    {
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       return;
       if((false))
        barrier();
      }
     else
      {
      }
    }
   if((false))
    {
     for(int _injected_loop_counter = 1; _injected_loop_counter > (0 | 0); _injected_loop_counter --)
      {
       if((false))
        {
         for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
          {
           return;
          }
        }
      }
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       if(false)
        {
        }
       else
        {
         do
          {
           for(int _injected_loop_counter = 1; _injected_loop_counter != (0 << (int(4))); _injected_loop_counter --)
            {
             return;
            }
           if((false))
            break;
          }
         while(false);
        }
      }
     if((false))
      {
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         if((bool(bool(true))))
          {
           return;
          }
         else
          {
          }
        }
      }
    }
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
     for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
      {
       do
        {
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           barrier();
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
          }
         if((false))
          break;
        }
       while((((float(((mat3x4(injectionSwitch.x, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, (injectionSwitch.y), 1.0, 1.0, length(0.0))) * mat3(1.0)))) > injectionSwitch.y)));
      }
    }
  }
 uint workgroup_base = GLF_merged3_0_1_13_1_1_14_2_1_14num_workgroupworkgroup_baseworkgroup_size.z * workgroup_id;
 if((false))
  return;
 do
  {
   if((((bool(bool((true && ((injectionSwitch.x > injectionSwitch.y)))))))))
    {
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      continue;
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         for(int _injected_loop_counter = (1 ^ (0 >> (int(2)))); _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
          {
           for(int _injected_loop_counter = (0 ^ ((1 << (int(1))) >> (int(1)))); _injected_loop_counter > 0; _injected_loop_counter --)
            {
             barrier();
            }
          }
        }
       return;
      }
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     break;
    }
   for(int _injected_loop_counter = 0; _injected_loop_counter < (0 ^ 1); _injected_loop_counter ++)
    {
     GLF_merged3_0_1_13_1_1_14_2_1_14num_workgroupworkgroup_baseworkgroup_size.y = workgroup_base;
    }
   if(((true && (((max((vec2((max(injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1])), injectionSwitch)).x < injectionSwitch.y)))))
    {
     if((false))
      continue;
     if((false))
      {
       if((false))
        barrier();
       if((false))
        {
         if((false))
          return;
         if((false))
          continue;
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           barrier();
          }
         else
          {
          }
         if((false))
          barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          break;
         do
          {
           if((false))
            barrier();
           barrier();
          }
         while(false);
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           for(int _injected_loop_counter = (0 & ((22022) - 0)); _injected_loop_counter != 1; _injected_loop_counter ++)
            {
             return;
            }
          }
         if((false))
          break;
         if((false))
          continue;
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         if((false))
          barrier();
         if((false))
          break;
        }
       else
        {
        }
       if((bool(bvec3(true, false, false))))
        {
         if((false))
          return;
        }
       else
        {
        }
       if((false))
        break;
       if((false))
        return;
       if(((false || ((true && (((injectionSwitch.x > injectionSwitch.y))))))))
        {
         if((false))
          {
           do
            {
             barrier();
             if((false))
              barrier();
            }
           while(false);
          }
         break;
        }
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
         break;
        }
       for(int _injected_loop_counter = 1; _injected_loop_counter > (((int((injectionSwitch.y)) << (int(5))) >> (int(5))) ^ 1); _injected_loop_counter --)
        {
         for(int _injected_loop_counter = ((int((injectionSwitch.y)) * ((~ (~ (0))))) | 0); _injected_loop_counter < 1; _injected_loop_counter ++)
          {
           if((false))
            return;
          }
        }
      }
    }
   else
    {
    }
   if(false)
    {
    }
   else
    {
     for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
      {
       if((false))
        {
         if((((injectionSwitch.x > (clamp((mix(vec2((9219.9171), (injectionSwitch)[1]), vec2((injectionSwitch)[0], ((true ? - 2941.7801 : 652.904))), bvec2(true, false))), (mat2(1.0) * (injectionSwitch)), injectionSwitch)).y))))
          continue;
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = ((0 << (int(2))) ^ 1); _injected_loop_counter != 0; _injected_loop_counter --)
            {
             barrier();
            }
          }
         continue;
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if((false))
        break;
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((false))
        {
         if((false))
          return;
         if(false)
          {
          }
         else
          {
           do
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           while(false);
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         do
          {
           do
            {
             do
              {
               if((false))
                return;
               return;
              }
             while(false);
            }
           while(false);
          }
         while(false);
         if((false))
          {
           if((false))
            break;
           barrier();
          }
        }
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         return;
        }
      }
    }
   if((false))
    {
     if((false))
      break;
     return;
    }
  }
 while(((((injectionSwitch) - (vec2(0.0, 0.0) + ((min(vec2(0.0, ((false ? (- 26.87) : (clamp(0.0, 0.0, ((0.0) * 1.0)))))), vec2(0.0, ((false ? (mix(float((- 26.87)), float((1564.0286)), bool(false))) : (clamp(0.0, 0.0, ((0.0) * 1.0))))))))))).x > injectionSwitch.y)));
 if((false))
  return;
 do
  {
   if(true)
    {
     if((! ((((bool(bvec4(((! ((false))) && true), true, true, false)))) && (((bool(bvec4(true, false, false, true)))) || false)))))
      {
       if((false || (true)))
        {
         if(false)
          {
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             if((((injectionSwitch.x > (((((true ? float((mat4(1.0) * (((mat4(injectionSwitch.y, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, determinant(mat2(1.0, 0.0, sqrt(0.0), 1.0)), 0.0, 0.0, 0.0, 1.0, 0.0)) / mat4(1.0, 1.0, 1.0, (clamp((float((mat4x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat4x3(1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, (dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0))), 1.0, 0.0, sqrt(0.0), cos(0.0)))))), (1.0 * (1.0)), 1.0)), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))))) : (- 81.88)))) - 0.0))))))
              return;
            }
           else
            {
            }
          }
         else
          {
           barrier();
          }
        }
       else
        {
        }
       if(((((! (! (false)))) || false)))
        barrier();
      }
    }
   else
    {
    }
  }
 while((false || (false)));
 uint virtual_gid = (uvec3(uvec4(GLF_merged3_0_1_13_1_1_14_2_1_14num_workgroupworkgroup_baseworkgroup_size, uint(((max(((((((false ? (- 39.71) : (min(clamp((float(vec3(float((min(vec4((mix(float((0.8)), float(injectionSwitch.x), bool(true))), abs(0.0), 1.0, (mix(float(1.0), float((- 0.0)), bool(false)))), vec4((mix(float((0.8)), ((float(injectionSwitch.x)) * 1.0), (! ((false || (! (bool(true)))))))), abs(0.0), 1.0, 1.0)))), 1.0, 0.0))), float((min(vec4((mix(float((0.8)), float((min(((injectionSwitch) / vec2(1.0, 1.0)), injectionSwitch)).x), bool(true))), abs(((((0.0) / 1.0)) + 0.0)), 1.0, 1.0), vec4((mix(float((0.8)), float(injectionSwitch.x), bool(true))), abs(0.0), 1.0, 1.0)))), float((min(vec4((mix(float((0.8)), float(injectionSwitch.x), bool(true))), abs(0.0), 1.0, 1.0), vec4((mix(float(((mix(float(0.8), float((- 34.92)), bool(false))))), float(injectionSwitch.x), bool(true))), abs(0.0), 1.0, 1.0))))), clamp((float(vec3(float((min(vec4((mix(float((0.8)), float(injectionSwitch.x), bool(true))), abs(0.0), 1.0, (mix(float(1.0), float((- 0.0)), bool(false)))), vec4((mix(float((0.8)), ((float(injectionSwitch.x)) * 1.0), (! ((false || (! (bool(true)))))))), abs(0.0), 1.0, 1.0)))), 1.0, 0.0))), float((min(vec4((mix(float((0.8)), float((min(((injectionSwitch) / vec2(1.0, 1.0)), injectionSwitch)).x), bool(true))), abs(((((0.0) / 1.0)) + 0.0)), 1.0, 1.0), vec4((mix(float((0.8)), float(injectionSwitch.x), bool(true))), abs(0.0), 1.0, 1.0)))), float((min(vec4((mix(float((0.8)), float(injectionSwitch.x), bool(true))), abs(0.0), 1.0, 1.0), vec4((mix(float(((mix(float(0.8), float((- 34.92)), bool(false))))), float(injectionSwitch.x), bool(true))), abs(0.0), 1.0, 1.0)))))))))))) / 1.0), (float(float(injectionSwitch.x)))))))))).y + GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size + GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.z;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 uint next_virtual_gid = (0u + (GLF_merged3_0_1_13_1_1_14_2_1_14num_workgroupworkgroup_baseworkgroup_size.y)) + GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.y * subgroup_size + (0u + (((((((GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.z + 1)) * 1u) % subgroup_size))) | ((((((GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.z + 1)) * 1u) % subgroup_size)))));
 if((((bool((! (! (bool(bool((bool((injectionSwitch.x > injectionSwitch.y)))))))))))))
  {
   if((false))
    return;
   return;
  }
 if((false))
  return;
 if(true)
  {
   if(true)
    {
     do
      {
       if(true)
        {
         do
          {
           if((((bool(bool(true))) && true)))
            {
             GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.x = next_virtual_gid;
            }
           else
            {
            }
           if(((false || (false))))
            break;
           for(int _injected_loop_counter = 1; _injected_loop_counter != (0 >> (int(7))); _injected_loop_counter --)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               for(int _injected_loop_counter = 1; ((_injected_loop_counter) * 1) > 0; _injected_loop_counter --)
                {
                 if(false)
                  {
                  }
                 else
                  {
                   return;
                  }
                }
              }
            }
           if((false))
            break;
          }
         while(false);
        }
       else
        {
        }
      }
     while(false);
    }
   else
    {
    }
  }
 else
  {
   if((false))
    return;
  }
 if((false))
  {
   if((((((injectionSwitch.x > injectionSwitch.y)) || ((injectionSwitch.x > injectionSwitch.y))))))
    return;
   if((false))
    return;
   if((false))
    {
     if((false))
      barrier();
     return;
    }
   return;
  }
 for(int _injected_loop_counter = ((0 + (~ (~ (((1)) >> 0))))); (min(_injected_loop_counter, _injected_loop_counter)) > int(((max(((((injectionSwitch.x < injectionSwitch.y)) ? (clamp(injectionSwitch.x, ((vec2(0.0, 0.0) + (mat2(1.0) * (injectionSwitch)))).x, injectionSwitch.x)) : (atanh(acos(- 52.03))))), injectionSwitch.x)))); _injected_loop_counter --)
  {
   if(false)
    {
    }
   else
    {
     if((((injectionSwitch.x > (mix(float((- 3.9)), float((max(injectionSwitch.y, injectionSwitch.y))), bool(((injectionSwitch.x < injectionSwitch.y)))))))))
      return;
    }
   if((false))
    continue;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      break;
     if(((((((! (! (false || (injectionSwitch.x < injectionSwitch.y)))))) || false))))
      {
       if((false))
        break;
       if(((bool((bvec2(bvec2(bvec2(false, false))))))))
        barrier();
       return;
      }
     else
      {
       if(((((mix(vec2((- 907.330), (- 14.68)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).x > injectionSwitch.y))))
        break;
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
       if((((((injectionSwitch.x > injectionSwitch.y))) || false)))
        return;
       if((((! ((false || (! ((((! (! (((! ((! ((injectionSwitch.x > (vec2(((mat4x2(injectionSwitch, 1.0, 0.0, tan(0.0), 0.0, abs(1.0), 0.0)) - mat4x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))).y))))) || false))))) && true)))))))))
        continue;
       if((false))
        barrier();
       if((false))
        {
         if((false))
          {
           if(false)
            {
            }
           else
            {
             if(true)
              {
               if(((injectionSwitch.x < injectionSwitch.y)))
                {
                 if((false))
                  barrier();
                 if((((false) || false)))
                  return;
                }
               else
                {
                }
              }
             else
              {
              }
            }
           barrier();
          }
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y)) || ((bool(bool((false)))))))
            continue;
           if((false))
            barrier();
           if((false))
            break;
           if((false))
            continue;
           continue;
           if((false))
            break;
          }
         break;
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      break;
     if((((injectionSwitch.x > ((false ? (- 22.08) : injectionSwitch.y))))))
      {
       do
        {
         if((false))
          return;
        }
       while(false);
       continue;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      break;
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       for(int _injected_loop_counter = (0 ^ 0); (! ((! (! (! ((bool(bvec3((! (! ((true && (_injected_loop_counter < int((injectionSwitch.y))))))), false, true))))))))); _injected_loop_counter ++)
        {
         for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
          {
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
             barrier();
            }
           if(((! (! (false)))))
            continue;
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              break;
             if((((((true ? injectionSwitch : (injectionSwitch))).x > ((injectionSwitch) - vec2(0.0, 0.0)).y))))
              return;
             for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
              {
               if((((false)) && true))
                barrier();
              }
             for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
              {
               return;
              }
            }
           if((false))
            {
             for(int _injected_loop_counter = 0; _injected_loop_counter < (1 & (((0 ^ 1) << (int(7))) >> (int(7)))); _injected_loop_counter ++)
              {
               return;
              }
            }
          }
        }
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = (0 ^ 1); _injected_loop_counter != 0; _injected_loop_counter --)
      {
       if((false))
        {
         do
          {
           return;
          }
         while(false);
        }
      }
     break;
    }
   if((false))
    break;
   if((false))
    barrier();
   if((false))
    break;
  }
 if(true)
  {
   if(((false || (false))))
    barrier();
  }
 else
  {
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if(true)
  {
   for(int _injected_loop_counter = 0; _injected_loop_counter < ((0 << (int(4))) ^ ((1 << (((((int((clamp(ivec4(((true ? (int(6)) : (_injected_loop_counter))), 1, 0, 1), ivec4(((true ? (int(6)) : (_injected_loop_counter))), 1, 0, 1), ivec4(((true ? (int(6)) : (_injected_loop_counter))), 1, 0, 1))))) | 0)) * 1))) >> (int(6)))); _injected_loop_counter ++)
    {
     if((((min(injectionSwitch.x, (min(injectionSwitch.x, injectionSwitch.x)))) < injectionSwitch.y)))
      {
       buf[virtual_gid] = 1;
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        {
         if((false))
          break;
         continue;
        }
      }
     else
      {
       if((false))
        barrier();
      }
    }
  }
 else
  {
  }
 if((false))
  return;
 if((false))
  {
   if(false)
    {
    }
   else
    {
     barrier();
    }
  }
 for(int _injected_loop_counter = (~ (~ (0))); (~ (~ (_injected_loop_counter))) != (1 | 1); _injected_loop_counter ++)
  {
   for(int _injected_loop_counter = (int(int(1))); (bool(bool(_injected_loop_counter != (((clamp((max(0, 0)), 0, ((0) | (0))))) ^ 0)))); _injected_loop_counter --)
    {
     if((false))
      break;
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((bool((bvec2(bvec4(bvec2((false), true), (bool(bvec4(((injectionSwitch.x > injectionSwitch.y)), false, true, false))), false))))))
      {
       if((false))
        barrier();
       continue;
      }
     if(((! (! ((((((bool(bvec2((true && (false)), false)))) || false)) && true))))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((false))
        barrier();
       break;
       if((false))
        barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      break;
     if((false))
      break;
     if((false))
      barrier();
     if(GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.z + 1 < ((subgroup_size) * 1u))
      {
       if((false))
        {
         if((false))
          continue;
         continue;
        }
       if((bool(bool((false)))))
        break;
       int i = 0;
       if((false))
        return;
       if((false))
        barrier();
       for(int _injected_loop_counter = (0 ^ (0 ^ (1))); _injected_loop_counter > (0 | 0); _injected_loop_counter --)
        {
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           atomicStore(buf[GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.x], uint(2), 4, 64, 4);
          }
         else
          {
          }
        }
       if((false))
        {
         if(true)
          {
           if((false))
            {
             if(false)
              {
              }
             else
              {
               return;
              }
            }
           return;
          }
         else
          {
           if((false))
            break;
          }
         if((false))
          return;
         if((false))
          {
           if(((((injectionSwitch.x < injectionSwitch.y))) && true))
            {
             barrier();
            }
           else
            {
            }
          }
        }
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
       if((false))
        continue;
       if((((mix(float((- 552.072)), float((clamp((mix(float(injectionSwitch.x), float((916.401)), bool(false))), injectionSwitch.x, injectionSwitch.x))), bool(true))) > ((((true ? injectionSwitch.y : (length(- 1765.6567))))) - 0.0))))
        {
        }
       else
        {
         if((false))
          return;
        }
       atomicStore(buf[(clamp(((GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id) * uvec3(1u, 1u, (max(((1u) + 0u), 1u)))).x, GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.x, GLF_merged3_0_1_16_1_1_11_2_1_17next_virtual_gidsubgroup_idsubgroup_local_id.x))], uint(2), 4, 64, 4);
      }
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
       for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
        {
         if((false))
          {
           if((false))
            return;
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           if((false))
            return;
           if((false))
            {
             if(true)
              {
               return;
              }
             else
              {
              }
            }
           return;
          }
        }
       if((false))
        continue;
       for(int _injected_loop_counter = 0; _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
        {
         if((false))
          break;
         barrier();
        }
      }
     if(false)
      {
      }
     else
      {
       if((false))
        {
         if(false)
          {
          }
         else
          {
           return;
          }
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(((bool((true && (bool(((((((injectionSwitch.x > injectionSwitch.y))) || false)) && true))))))))
      {
       if((false))
        break;
       break;
       if((false))
        return;
      }
    }
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
