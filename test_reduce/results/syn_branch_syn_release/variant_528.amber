#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((false))
  {
   if(true)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
    }
   barrier();
  }
 if((false))
  barrier();
 if((false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if((false))
  barrier();
 if((false))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   return;
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((false))
  return;
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 if(((((max(((true ? injectionSwitch.x : (80.38))), injectionSwitch.x)) > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(((bool((bvec2(bvec2((bvec2(bvec4(((bvec2(bvec4(bvec2(bvec2(bvec2(((false) && true), false))), true, true)))), false, false))))))))))
  {
   for(int _injected_loop_counter = 0; _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   do
    {
     if(false)
      {
      }
     else
      {
       barrier();
      }
    }
   while(false);
  }
 if((false))
  barrier();
 if((false))
  {
   for(int _injected_loop_counter = 0; _injected_loop_counter < (1 ^ 0); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 if((true && (((! (! (((((injectionSwitch.x > (vec2(mat2x3(injectionSwitch, 0.0, 1.0, 0.0, 0.0))).y) || false))))))))))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
 if((false))
  {
   if((false))
    {
     if(((bool((bvec2(bvec2(bvec2(false, true))))))))
      barrier();
     if((((false || (bool(bvec4(false, true, true, true)))))))
      return;
     if((false))
      barrier();
     barrier();
    }
   if((false))
    {
     if(false)
      {
      }
     else
      {
       for(int _injected_loop_counter = 1; _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
        {
         barrier();
        }
      }
     if((((injectionSwitch.x > (float(mat3(injectionSwitch.y, 0.0, determinant(mat4(0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 0.0, 0.0, length(0.0), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)), 0.0, abs(1.0), tan(0.0), round(length(normalize(1.0))), 0.0, 1.0)))))))
      return;
     if((false))
      barrier();
    }
   return;
   if((false))
    barrier();
  }
 if((false))
  return;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(((! (! ((true && (false)))))))
  return;
 if((false))
  {
   if((false))
    return;
   if((false))
    barrier();
   barrier();
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(((((! (! (injectionSwitch.x > injectionSwitch.y)))))))
  barrier();
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y)) || ((((false) || false)))))
  barrier();
 if((false))
  barrier();
 if(((true && (false))))
  {
   if((false))
    {
     if(((((0.0 + (injectionSwitch.x)) > injectionSwitch.y))))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   do
    {
     barrier();
    }
   while(false);
   if((false))
    barrier();
  }
 uint workgroup_base = (((uint(uvec4(workgroup_size * workgroup_id, 1u, 1u, 0u))) | (uint(uvec4(workgroup_size * workgroup_id, 1u, 1u, 0u)))));
 if((false))
  barrier();
 uint virtual_gid = workgroup_base + (0u ^ ((((((clamp(true ? subgroup_id : (workgroup_size), true ? subgroup_id : (workgroup_size), true ? subgroup_id : (workgroup_size)))) ^ uint((injectionSwitch.x))))))) * (min(subgroup_size, (max(subgroup_size, subgroup_size)))) + subgroup_local_id;
 if(((((clamp(injectionSwitch.x, (min(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y))))
  {
   if(false)
    {
    }
   else
    {
     return;
    }
  }
 if((false))
  {
   if(true)
    {
     if((false))
      return;
    }
   else
    {
    }
   if((false))
    {
     if((false))
      {
       if((false))
        barrier();
       return;
      }
     if((false))
      barrier();
     barrier();
    }
   barrier();
  }
 if((! ((bool(bvec3((false || ((bool(bvec3(! ((false)), (((! ((bool(bvec2(! (injectionSwitch.x < injectionSwitch.y), true))))))), true))))), true, (bool(bool(true)))))))))
  {
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    {
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(((true) && true))
          {
           barrier();
          }
         else
          {
          }
        }
       barrier();
      }
     if((false))
      barrier();
     return;
    }
   if((false))
    barrier();
   if((false))
    return;
   barrier();
  }
 uint next_virtual_gid = workgroup_base + (uint(uvec4(((subgroup_id) << 0u), 1u, 0u, 1u))) * subgroup_size + ((((((((subgroup_local_id) - 0u) + ((1) ^ 0)) % subgroup_size)) ^ uint(((max(injectionSwitch.x, injectionSwitch.x)))))) << 0u);
 if((bool(bvec2((false), true))))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  {
   for(int _injected_loop_counter = (min(1, ((false ? ((injectionSwitch , - 38294)) : 1)))); _injected_loop_counter > 0; _injected_loop_counter --)
    {
     if((false))
      {
       if((false))
        return;
       barrier();
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 if((false))
  barrier();
 if(false)
  {
  }
 else
  {
   (((~ (~ (0u ^ ((buf[virtual_gid] = 1)))))) - (40108u & 0u));
  }
 if((false))
  {
   if((((bool(bool((((injectionSwitch.x > injectionSwitch.y)))))) || false)))
    return;
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((((false)) || false))
  {
   if(true)
    {
     if((false))
      barrier();
     barrier();
     if((((false) || false)))
      barrier();
    }
   else
    {
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  barrier();
 do
  {
   if((false))
    barrier();
  }
 while(false);
 if((false))
  return;
 if((false))
  barrier();
 if(false)
  {
  }
 else
  {
   if((false))
    barrier();
  }
 if(true)
  {
   if((((injectionSwitch.x > (0.0 + (injectionSwitch.y))))))
    barrier();
   if((false))
    {
     if((false))
      {
       do
        {
         barrier();
        }
       while(false);
      }
     barrier();
    }
   if((false))
    barrier();
   if((((bool(bvec4(((! (! (bool(bvec2((injectionSwitch.x > injectionSwitch.y), false)))))), false, ((injectionSwitch.x < injectionSwitch.y)), false))))))
    {
     for(int _injected_loop_counter = 0; (false || (_injected_loop_counter < 1)); _injected_loop_counter ++)
      {
       if(((true && (((injectionSwitch.x > injectionSwitch.y))))))
        barrier();
       barrier();
      }
     if(((! (! (false)))))
      return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       barrier();
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
    }
   if(((((! (! (((injectionSwitch.x > injectionSwitch.y)))))) || false)))
    barrier();
   if((false))
    barrier();
   if((((min(true ? subgroup_local_id + 1 : (max(((((min(subgroup_size, (((0u ^ ((0u + (subgroup_size)))) << (0u | 0u))))))) << (0u | 0u)), (subgroup_size))), (((min(true ? subgroup_local_id + 1 : (((((uint(uint((clamp((max((((subgroup_size)) << (0u | 0u)), (subgroup_size))), (max((((subgroup_size)) << (0u | (max(0u, ((0u << (uint(2u))) ^ (0u)))))), (subgroup_size))), (max((((subgroup_size)) << ((min((~ (~ (((0u | 0u) | (0u | 0u))))), 0u | 0u)))), (subgroup_size)))))))) >> 0u))) >> (0u | 0u)), true ? subgroup_local_id + 1 : (max((((subgroup_size)) << (0u | 0u)), (subgroup_size)))))) | 0u))))) < subgroup_size)
    {
     if(true)
      {
       if((false))
        {
         if((false))
          barrier();
         if((((true && (((! (! (false)))) || false)))))
          barrier();
         if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
          return;
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            {
             if(((((injectionSwitch.x > injectionSwitch.y)) || (false))))
              {
               if((false))
                barrier();
               return;
              }
             barrier();
            }
           return;
           if((false))
            barrier();
          }
         if(((! (! (false)))))
          barrier();
         if((false))
          {
           if(true)
            {
             return;
             if((false))
              barrier();
            }
           else
            {
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((((false) || (((mix(float(injectionSwitch.x), float((- 1796.4516)), bool(false))) > injectionSwitch.y)))))
            barrier();
          }
         barrier();
        }
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if(false)
            {
            }
           else
            {
             barrier();
            }
          }
         barrier();
        }
      }
     if((false))
      {
       if((false))
        barrier();
       return;
      }
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     if((false))
      barrier();
     if((false))
      {
       if((bool(bvec3((((((false) && true)) || false)), false, false))))
        barrier();
       if(((! (! ((! ((true && (! ((((false || (false))) && true)))))))))))
        return;
       if((false))
        barrier();
       do
        {
         if((false))
          barrier();
         if((false))
          barrier();
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
       if((false))
        barrier();
       if((false))
        barrier();
       if(true)
        {
         barrier();
        }
       else
        {
        }
       if((false))
        barrier();
      }
     switch(int((injectionSwitch.x)))
      {
       case 40:
       {
        if((false))
         {
          if((false))
           {
            if((false))
             barrier();
            barrier();
           }
          if(((injectionSwitch.x > injectionSwitch.y)))
           {
           }
          else
           {
            if((((injectionSwitch.x > injectionSwitch.y))))
             barrier();
           }
          if((false))
           {
            if((false))
             {
              if((((false)) && true))
               return;
              barrier();
              if(true)
               {
                if((false))
                 barrier();
               }
              else
               {
               }
             }
            return;
            if((false))
             barrier();
           }
          return;
          if((false))
           {
            if((false))
             return;
            barrier();
            if((false))
             barrier();
           }
         }
        if((((injectionSwitch.x > injectionSwitch.y))))
         return;
        if((((((true && (((bool(bool(((((((injectionSwitch.x > injectionSwitch.y)))) && ((injectionSwitch.x < injectionSwitch.y)))) && true))) || false)))))) && ((injectionSwitch.x < injectionSwitch.y))))
         {
          for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
           {
            if((((injectionSwitch.x > injectionSwitch.y))))
             barrier();
           }
          if((((injectionSwitch.x > injectionSwitch.y))))
           barrier();
          if((((injectionSwitch.x > (min(((false ? (injectionSwitch) : injectionSwitch)), injectionSwitch)).y))))
           return;
          barrier();
          if((((injectionSwitch.x > injectionSwitch.y))))
           barrier();
         }
        if((false))
         barrier();
       }
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         if((false))
          barrier();
         do
          {
           barrier();
          }
         while(false);
        }
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          return;
         barrier();
        }
       if((false))
        barrier();
       for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
        {
         if((((bool(bool(bool(bool(false))))))))
          {
           if((false))
            barrier();
           if((false))
            {
             if((false))
              barrier();
             return;
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            {
             if((false))
              {
               if((false))
                barrier();
               if((false))
                barrier();
               if((false))
                barrier();
               if((false))
                barrier();
               return;
              }
             if((false))
              {
               if((false))
                barrier();
               barrier();
              }
             barrier();
            }
           if(((! (! ((false || (false)))))))
            barrier();
           if((false))
            {
             if(((! (! (((((injectionSwitch.x > injectionSwitch.y))) && true))))))
              return;
             barrier();
            }
           if((false || ((! (! ((false)))))))
            barrier();
           if((false))
            barrier();
           if((false))
            {
             if((false))
              barrier();
             return;
            }
           if((false))
            {
             if((false))
              barrier();
             barrier();
            }
           barrier();
          }
        }
       if((false))
        barrier();
       case 67:
       int _GLF_SWITCH_0_0v, _GLF_SWITCH_0_1v, _GLF_SWITCH_0_2v;
       if(((((clamp(injectionSwitch, (max(injectionSwitch, injectionSwitch)), injectionSwitch)).x > injectionSwitch.y))))
        barrier();
       if((false || ((bool(bvec3((bool(bvec2((((injectionSwitch.x > (vec2(injectionSwitch[0], injectionSwitch[1])).y))), true))), false, false))))))
        {
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         else
          {
          }
         if((false))
          barrier();
         if(((bool((((! (! ((bool(bool(bool((true && (((injectionSwitch.x > injectionSwitch.y)))))))))))) && true)))))
          return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       case 0:
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       case 84:
       if((false))
        {
         if(((! (! (false)))))
          return;
         barrier();
        }
       case 55:
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
       if(((true && (false))))
        barrier();
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            {
             if(true)
              {
               if((((false) && true)))
                barrier();
              }
             else
              {
              }
             return;
            }
           return;
           if((false))
            barrier();
          }
         if(((false || (false))))
          return;
         barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       if(((((max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
       case 50:
       if(((true && (false))))
        barrier();
       if((((false) || false)))
        {
         if(true)
          {
           barrier();
          }
         else
          {
          }
        }
       if((false))
        return;
       if((((((injectionSwitch.x > injectionSwitch.y))) || false)))
        {
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           return;
          }
         if(true)
          {
           if(((((min(injectionSwitch.x, (0.0 + ((min(injectionSwitch.x, injectionSwitch.x)))))) > injectionSwitch.y))))
            {
             if(((true && (false))))
              barrier();
             barrier();
            }
          }
         else
          {
          }
         if((false))
          barrier();
         if((false))
          {
           if((false))
            barrier();
           if((false))
            return;
           barrier();
          }
         for(int _injected_loop_counter = (1 & 1); _injected_loop_counter != 0; _injected_loop_counter --)
          {
           return;
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         if((false))
          return;
         barrier();
        }
       case 45:
       if((false))
        {
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           return;
          }
         barrier();
        }
       case 71:
       if((false))
        barrier();
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(true)
          {
           barrier();
          }
         else
          {
          }
         if((false))
          return;
         if((false))
          barrier();
        }
       case 9:
       if((false))
        barrier();
       for(int _injected_loop_counter = (clamp(0, 0, 0)); _injected_loop_counter < ((1) << 0); _injected_loop_counter ++)
        {
         if(((((mix(vec2(((- 45.90 * 74.29)), (injectionSwitch)[1]), vec2(((mix(vec2((injectionSwitch)[0], (434.291)), vec2((1.4), (injectionSwitch)[((clamp(0, 0, 0)) | (1))]), bvec2(false, true))))[0], (- 9889.3376)), (bvec2(bvec3((bvec2(bvec2(bvec2((false || ((bool(bvec2(true, false))))), false)))), true))))).x > (clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
          {
           if((false))
            barrier();
           if((false))
            return;
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           return;
           if((false))
            {
             if((false))
              barrier();
             return;
            }
           if((false))
            barrier();
          }
        }
       if((false))
        {
         if((false))
          return;
         barrier();
        }
       if((false))
        barrier();
       if((false))
        barrier();
       int i = 0;
       if((false))
        return;
       if((((false) || false)))
        {
         if((false))
          {
           do
            {
             barrier();
            }
           while(false);
          }
         for(int _injected_loop_counter = 0; _injected_loop_counter != (1 | 1); _injected_loop_counter ++)
          {
           if((false))
            barrier();
           if((false))
            {
             if((false))
              barrier();
             if(((! (! (false)))))
              barrier();
             if((bool(bvec3((false), true, ((injectionSwitch.x > injectionSwitch.y))))))
              barrier();
             return;
            }
           if((false))
            barrier();
          }
         if(((((true && ((! (! ((true && (false)))))))) || false)))
          barrier();
         if((true && ((false))))
          return;
         if((false))
          barrier();
         barrier();
        }
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          return;
         barrier();
        }
       if((false))
        barrier();
       case 27:
       case 85:
       if((false))
        return;
       case 43:
       if((false))
        barrier();
       if((false))
        barrier();
       if((! (! ((false)))))
        {
         do
          {
           if(((bool(bvec2(false, ((injectionSwitch.x < injectionSwitch.y)))))))
            barrier();
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
       for(int _injected_loop_counter = (0 | ((true ? (((1) - 0)) : ((_GLF_SWITCH_0_1v))))); (((injectionSwitch.x > injectionSwitch.y)) || (_injected_loop_counter > 0)); _injected_loop_counter --)
        {
         if((false))
          barrier();
         for(int _injected_loop_counter = 1; ((_injected_loop_counter) | (_injected_loop_counter)) != 0; (~ (((~ (_injected_loop_counter --)) / 1))))
          {
           if((false))
            {
             if((false))
              barrier();
             if((! (! ((((injectionSwitch.x > injectionSwitch.y)))))))
              barrier();
             if(((! (! (false)))))
              {
               if(((((mix(vec2((((injectionSwitch)[0]) * 1.0), ((6.5 * - 30.03))), vec2((0.4), (injectionSwitch)[1]), bvec2(false, true))).x > injectionSwitch.y))))
                barrier();
               if((false))
                barrier();
               if(((injectionSwitch.x > injectionSwitch.y)))
                {
                }
               else
                {
                 barrier();
                }
               if((((injectionSwitch.x < injectionSwitch.y)) && ((false))))
                break;
              }
             if((false))
              barrier();
             barrier();
             if((false))
              barrier();
            }
           if((((injectionSwitch.x > (vec2(vec4(injectionSwitch, 0.0, 1.0))).y))))
            return;
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             break;
            }
           if(((((max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
            {
             if((false))
              barrier();
             barrier();
            }
           if((false))
            barrier();
           if((false))
            {
             if((false))
              {
               if((false))
                {
                 if((false))
                  continue;
                 barrier();
                 if((false))
                  barrier();
                }
               barrier();
              }
             if((false))
              barrier();
             break;
             if((false))
              continue;
            }
           if((false))
            barrier();
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
             if((bool((bool((bvec2(bvec4(bvec2(bool((bool(bvec2((false), false)))), false), false, false))))))))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
             break;
             if((false))
              barrier();
            }
          }
         atomicStore(buf[next_virtual_gid], ((false ? (subgroup_size) : (((((~ (~ (uint(((2) / int(((max((mix(vec2((- 85.04), (injectionSwitch)[1]), vec2((injectionSwitch)[0], (5.8)), bvec2(true, false))), injectionSwitch)).y)))))))) - 0u)) | 0u))), 4, 64, 4);
         if(((bool(bvec3(false, true, false)))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
        }
       if(((bool(bool(false)))))
        {
         if((false))
          return;
         if((false))
          barrier();
         return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       break;
       case 21:
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if((false))
          barrier();
         barrier();
        }
       vec3(- 892.547, - 33.06, (clamp(((- 43.88) * 1.0), (mix(float((- 5.2)), float(((- 43.88) * 1.0)), bool(true))), ((- 43.88) * 1.0))));
       if((false))
        barrier();
       if((! (! (((! (! (false))))))))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          {
           if((false))
            barrier();
           if(((((((true && ((max((vec2(vec2(injectionSwitch))), ((injectionSwitch) * vec2(1.0, 1.0)))).x > injectionSwitch.y))) || false)))))
            {
             for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
              {
               barrier();
              }
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           for(int _injected_loop_counter = 1; _injected_loop_counter != (0 & (min((int(ivec4(55357, 1, 1, 0))), 55357))); _injected_loop_counter --)
            {
             return;
            }
           if((bool(bvec2((true && ((false))), true))))
            return;
          }
         return;
         for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if((false))
          barrier();
        }
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           barrier();
          }
         if((((((((((! (! (bool(bvec3((! (! (((false) || false)))) || (bool(bool(((injectionSwitch.x > injectionSwitch.y) || false)))), false, true)))))))))) && true))))
          return;
         return;
        }
       if((bool(bool((false)))))
        return;
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         if((false))
          {
           if((false))
            barrier();
           if((false))
            {
             for(int _injected_loop_counter = ((1 << (int(4))) >> (int(4))); _injected_loop_counter != 0; _injected_loop_counter --)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if((false))
                barrier();
               if((false))
                return;
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
       if((false))
        {
         if(false)
          {
          }
         else
          {
           barrier();
          }
        }
       if(((! (((! (((! ((! (! (false))))) && true))) || (! (false)))))))
        {
         if((false))
          {
           if(((bool(bvec2(false, (bool(bvec3(true, true, true))))))))
            barrier();
           barrier();
          }
         return;
         if(((bool(bvec4(false, ((injectionSwitch.x > injectionSwitch.y)), false, false)))))
          barrier();
        }
       if((false))
        barrier();
       if(((! (! (false)))))
        {
         if((false))
          return;
         for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > 0; _injected_loop_counter --)
          {
           barrier();
          }
        }
       if((false))
        barrier();
       case 89:
       if(((bool(bool((false || (((false) && true))))))))
        barrier();
       if((false))
        barrier();
       if((false))
        {
         if((false))
          barrier();
         if((false))
          {
           if(((((injectionSwitch.x < injectionSwitch.y)) && (false))))
            barrier();
           barrier();
          }
         barrier();
        }
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(((true && (((false) || false)))))
        {
         if((((injectionSwitch.x > (mix(float((clamp((- 2.6), (- 2.6), (max((- 2.6), (- 2.6)))))), float(((injectionSwitch.y) / 1.0)), bool(true)))))))
          {
           if((false))
            barrier();
           barrier();
          }
         if((false))
          return;
         if(((! ((! (! ((! (! (! (false)))))))))))
          {
           if((false))
            barrier();
           for(int _injected_loop_counter = (1 & (((1 ^ 0) << (int(2))) >> (int(2)))); _injected_loop_counter != 0; _injected_loop_counter --)
            {
             return;
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(((((float(((mat3x2(injectionSwitch.x, 1.0, 1.0, round(length(normalize(1.0))), 1.0, 1.0)) * mat3(1.0)))) > injectionSwitch.y))))
          return;
         do
          {
           barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((((((injectionSwitch) * vec2(1.0, 1.0)).x > injectionSwitch.y))))
            {
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
              }
             else
              {
               barrier();
              }
            }
          }
         while((! (! (! (((! (! (! (false))))))))));
        }
       if((false))
        {
         if((((false)) && true))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
       if((false))
        barrier();
       if(((((true && (((injectionSwitch.x > injectionSwitch.y)))))) && true))
        barrier();
       if((false))
        barrier();
       uint _GLF_SWITCH_0_3v[42], _GLF_SWITCH_0_4v, _GLF_SWITCH_0_5v;
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          barrier();
         if(((true && (false))))
          barrier();
         return;
        }
       if(((((bool((bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, ((injectionSwitch.x < injectionSwitch.y)), ((injectionSwitch.x > injectionSwitch.y))), true)))))))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       default:
       do
        {
         if((false))
          barrier();
         if((false))
          barrier();
         1;
        }
       while(false);
       if((false))
        {
         do
          {
           barrier();
          }
         while(false);
        }
      }
     if((false))
      barrier();
     if(((! (! ((! (! (false))))))))
      return;
     do
      {
       if((false))
        barrier();
      }
     while(false);
     for(int _injected_loop_counter = (max(1, 1)); _injected_loop_counter != (((false ? (_injected_loop_counter) : (- 69895 * 88519))) & 0); _injected_loop_counter --)
      {
       if((((((injectionSwitch.x > injectionSwitch.y))) || ((injectionSwitch.x > injectionSwitch.y)))))
        return;
       if((false))
        barrier();
       if(((! (! ((true)))) || false))
        {
         if((((((bool((bvec2(bvec4((bvec2(bvec3(bvec2((injectionSwitch.x > injectionSwitch.y), false), false))), true, true))))) || false)))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
        }
       else
        {
        }
      }
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      {
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         barrier();
        }
       else
        {
        }
      }
     if((((injectionSwitch.x < injectionSwitch.y)) && ((((((injectionSwitch.x > injectionSwitch.y)))) || false))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   else
    {
     if((false))
      barrier();
     atomicStore(buf[(0u + (next_virtual_gid))], uint(2), 4, (~ (~ ((((max(64, 64))) | (64))))), 4);
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     do
      {
       barrier();
      }
     while(((injectionSwitch.x > (float(vec4((float(vec4(injectionSwitch.y, 1.0, 0.0, 0.0))), abs(1.0), 1.0, (max(((1.0) / abs(1.0)), 1.0))))))));
     if((false))
      barrier();
    }
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    return;
   if(true)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(((((clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > (clamp(injectionSwitch.y, injectionSwitch.y, (vec2(mat3x2(injectionSwitch, 0.0, 1.0, 1.0, (injectionSwitch.y)))).y))))))
      {
       if((false))
        barrier();
       return;
      }
    }
   else
    {
     if((false))
      barrier();
    }
   if((false))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 else
  {
   if((! (! (((bool((bvec3(bvec4((bvec3(bvec3(bvec3(false, true, false)))), true))))))))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     if(true)
      {
       return;
      }
     else
      {
      }
    }
   if((false))
    {
     if((false))
      barrier();
     if((false))
      barrier();
     for(int _injected_loop_counter = 1; _injected_loop_counter != (0 << (int(5))); _injected_loop_counter --)
      {
       barrier();
      }
    }
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
