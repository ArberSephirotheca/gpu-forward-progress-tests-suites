#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
  {
   for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
    {
     if(true)
      {
       if(((bool(bool(false)))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             do
              {
               if(((injectionSwitch.x > injectionSwitch.y)))
                {
                 if((false))
                  barrier();
                }
               else
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   do
                    {
                     barrier();
                    }
                   while(false);
                  }
                }
               if(true)
                {
                 barrier();
                }
               else
                {
                }
              }
             while(((injectionSwitch.x > injectionSwitch.y)));
            }
           while(false);
          }
         if(false)
          {
          }
         else
          {
           barrier();
          }
        }
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
  }
 if((false))
  barrier();
 if(true)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       barrier();
       if((false))
        barrier();
      }
     while(false);
    }
   if(true)
    {
     if((((false) || false)))
      {
       if((false))
        {
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       barrier();
       for(int _injected_loop_counter = 1; _injected_loop_counter != (min((0 << (int(7))), (0 << (int(7))))); _injected_loop_counter --)
        {
         if((false))
          barrier();
        }
      }
     if((false))
      barrier();
    }
   else
    {
     if((false))
      {
       if((false))
        barrier();
       if(true)
        {
         barrier();
        }
       else
        {
        }
      }
    }
  }
 else
  {
  }
 uvec2 GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 0; _injected_loop_counter < (0 | 1); _injected_loop_counter ++)
    {
     if(true)
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if((false))
        barrier();
      }
     else
      {
       if((false))
        barrier();
      }
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 uint subgroup_id = gl_SubgroupID;
 if(true)
  {
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
    }
   else
    {
     do
      {
       for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         for(int _injected_loop_counter = 1; _injected_loop_counter > (int(int(0))); _injected_loop_counter --)
          {
           if((false))
            {
             if((false))
              barrier();
             if(((((bool(bool(false)))) && true)))
              {
               if((false))
                {
                 if(((injectionSwitch.x < injectionSwitch.y)))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
               if(false)
                {
                 if((false))
                  barrier();
                }
               else
                {
                 for(int _injected_loop_counter = 1; _injected_loop_counter != (int((injectionSwitch.x)) >> (((int(6)) | (int(6))))); _injected_loop_counter --)
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if((((false) && true)))
                    {
                     if((false))
                      barrier();
                     barrier();
                    }
                  }
                }
               if((false))
                barrier();
               if(false)
                {
                 if((false))
                  barrier();
                }
               else
                {
                 if((false))
                  barrier();
                 barrier();
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if((false))
                  barrier();
                 if((false))
                  barrier();
                 if((false))
                  barrier();
                }
              }
             for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
              {
               for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != 0; _injected_loop_counter --)
                {
                 if(false)
                  {
                  }
                 else
                  {
                   if((false))
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     if(true)
                      {
                       if(true)
                        {
                         do
                          {
                           if(((injectionSwitch.x > injectionSwitch.y)))
                            {
                            }
                           else
                            {
                             if((((injectionSwitch.x > injectionSwitch.y))))
                              barrier();
                            }
                           if(false)
                            {
                             if((false))
                              barrier();
                            }
                           else
                            {
                             barrier();
                            }
                          }
                         while(false);
                        }
                       else
                        {
                        }
                      }
                     else
                      {
                      }
                     if((false))
                      barrier();
                    }
                  }
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(true)
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   do
                    {
                     if(true)
                      {
                       if((false))
                        {
                         for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                          {
                           barrier();
                          }
                        }
                      }
                     else
                      {
                      }
                    }
                   while(((injectionSwitch.x > injectionSwitch.y)));
                  }
                 else
                  {
                  }
                 if((false))
                  barrier();
                 do
                  {
                   if(((injectionSwitch.x > injectionSwitch.y)))
                    {
                    }
                   else
                    {
                     if((false))
                      barrier();
                     if((false))
                      {
                       if((false))
                        barrier();
                       if(((injectionSwitch.x < injectionSwitch.y)))
                        {
                         if(((injectionSwitch.x > injectionSwitch.y)))
                          {
                          }
                         else
                          {
                           if(false)
                            {
                            }
                           else
                            {
                             barrier();
                            }
                           if((((injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                          }
                        }
                       else
                        {
                        }
                      }
                    }
                  }
                 while(((injectionSwitch.x > injectionSwitch.y)));
                }
              }
             if((false))
              barrier();
             for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != 1; _injected_loop_counter ++)
              {
               if(false)
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if((false))
                  barrier();
                }
               else
                {
                 if(true)
                  {
                   if(false)
                    {
                    }
                   else
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      {
                       do
                        {
                         if(((injectionSwitch.x < injectionSwitch.y)))
                          {
                           barrier();
                          }
                         else
                          {
                          }
                         if((false))
                          barrier();
                        }
                       while(false);
                      }
                    }
                  }
                 else
                  {
                  }
                }
               barrier();
              }
            }
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(false);
    }
   if((false))
    barrier();
  }
 else
  {
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if((false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(((injectionSwitch.x > injectionSwitch.y)))
  {
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if(false)
    {
    }
   else
    {
     if((((false) && true)))
      {
       do
        {
         if((false))
          barrier();
         for(int _injected_loop_counter = 1; _injected_loop_counter > ((0 >> (int(0))) | 0); _injected_loop_counter --)
          {
           if((false))
            {
             if(false)
              {
               if((false))
                barrier();
              }
             else
              {
               if((false))
                {
                 if(((injectionSwitch.x > injectionSwitch.y)))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
               barrier();
              }
            }
           if((true && (true)))
            {
             if((false))
              {
               if((false))
                barrier();
               barrier();
               if((false))
                {
                 if((! (! (false))))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
              }
            }
           else
            {
            }
          }
        }
       while(false);
       barrier();
      }
    }
  }
 else
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     do
      {
       do
        {
         for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
          {
           for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
            {
             do
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if(((injectionSwitch.x < injectionSwitch.y)))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               if((false))
                barrier();
              }
             while((true && (false)));
            }
           if((false))
            {
             if((false))
              barrier();
             barrier();
            }
           barrier();
           if((false))
            barrier();
           if((false))
            {
             if(true)
              {
               if((false))
                barrier();
               barrier();
              }
             else
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
            }
          }
        }
       while(false);
      }
     while(false);
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(false)
      {
      }
     else
      {
       if((false))
        barrier();
      }
     do
      {
       if((false))
        barrier();
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           if((false))
            barrier();
          }
         else
          {
           if((false))
            barrier();
          }
        }
      }
     while(false);
    }
  }
 if((false))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 if((false))
  barrier();
 for(int _injected_loop_counter = 1; _injected_loop_counter > (- 47331 & 0); _injected_loop_counter --)
  {
   do
    {
     do
      {
       for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
        {
         for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
          {
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   barrier();
                  }
                 if(true)
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
               if(((true && (false))))
                barrier();
               barrier();
              }
            }
           else
            {
            }
          }
        }
      }
     while(false);
    }
   while(false);
  }
 if(true)
  {
   for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != 0; _injected_loop_counter --)
    {
     do
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
            {
             if(false)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             else
              {
               do
                {
                 for(int _injected_loop_counter = 1; _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
                  {
                   barrier();
                   if((false))
                    barrier();
                  }
                }
               while(false);
              }
            }
          }
         else
          {
          }
        }
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(true)
          {
           barrier();
           if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
            barrier();
          }
         else
          {
           if((false))
            barrier();
          }
        }
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if((false))
    barrier();
  }
 else
  {
   if((false))
    {
     for(int _injected_loop_counter = 0; _injected_loop_counter != ((1 << ((max(int(5), int(5))))) >> (int(5))); _injected_loop_counter ++)
      {
       barrier();
      }
    }
  }
 if(((injectionSwitch.x > injectionSwitch.y)))
  {
  }
 else
  {
   if((false))
    barrier();
   for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
    {
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     do
      {
       do
        {
         do
          {
           do
            {
             if(true)
              {
               do
                {
                 if((false))
                  barrier();
                 if((false))
                  barrier();
                 if(false)
                  {
                  }
                 else
                  {
                   for(int _injected_loop_counter = 0; _injected_loop_counter < ((1 << (int(0))) >> (int(0))); _injected_loop_counter ++)
                    {
                     if((((false) && true)))
                      barrier();
                     if((false))
                      {
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       barrier();
                      }
                     for(int _injected_loop_counter = 0; _injected_loop_counter < ((1 << (int(1))) >> (int(1))); _injected_loop_counter ++)
                      {
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        {
                         if((false))
                          {
                           if(false)
                            {
                            }
                           else
                            {
                             barrier();
                            }
                          }
                         do
                          {
                           for(int _injected_loop_counter = 0; _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
                            {
                             if(false)
                              {
                              }
                             else
                              {
                               for(int _injected_loop_counter = 1; _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
                                {
                                 if((false))
                                  {
                                   do
                                    {
                                     if((false))
                                      barrier();
                                     for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
                                      {
                                       for(int _injected_loop_counter = ((1 << (int(7))) >> (int(7))); _injected_loop_counter != 0; _injected_loop_counter --)
                                        {
                                         if(((injectionSwitch.x > injectionSwitch.y)))
                                          {
                                          }
                                         else
                                          {
                                           for(int _injected_loop_counter = 1; _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
                                            {
                                             if(false)
                                              {
                                              }
                                             else
                                              {
                                               if(true)
                                                {
                                                 if((false))
                                                  {
                                                   if((false))
                                                    barrier();
                                                   do
                                                    {
                                                     do
                                                      {
                                                       barrier();
                                                      }
                                                     while(false);
                                                    }
                                                   while(false);
                                                  }
                                                }
                                               else
                                                {
                                                }
                                              }
                                             barrier();
                                            }
                                          }
                                        }
                                      }
                                    }
                                   while(false);
                                  }
                                }
                               if((((injectionSwitch.x > injectionSwitch.y))))
                                {
                                 if(true)
                                  {
                                   if(false)
                                    {
                                    }
                                   else
                                    {
                                     for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
                                      {
                                       barrier();
                                      }
                                    }
                                  }
                                 else
                                  {
                                  }
                                }
                               if((((injectionSwitch.x > injectionSwitch.y))))
                                barrier();
                              }
                             if((((false) || false)))
                              barrier();
                            }
                          }
                         while(false);
                         if((false))
                          barrier();
                         for(int _injected_loop_counter = ((0 << (int(2))) << (int(5))); _injected_loop_counter < (1 | 1); _injected_loop_counter ++)
                          {
                           if((((injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                           for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < 1; _injected_loop_counter ++)
                            {
                             do
                              {
                               if(false)
                                {
                                 if((((injectionSwitch.x > injectionSwitch.y))))
                                  barrier();
                                }
                               else
                                {
                                 if(false)
                                  {
                                   if((false))
                                    barrier();
                                  }
                                 else
                                  {
                                   if((false))
                                    barrier();
                                  }
                                 if((((injectionSwitch.x > injectionSwitch.y))))
                                  barrier();
                                 if((((injectionSwitch.x > injectionSwitch.y))))
                                  barrier();
                                 barrier();
                                 if((false))
                                  barrier();
                                 if((false))
                                  barrier();
                                 if((false))
                                  barrier();
                                 if((false))
                                  barrier();
                                }
                              }
                             while(((injectionSwitch.x > injectionSwitch.y)));
                            }
                          }
                         if(true)
                          {
                           if((((false || (bool(bvec3((false || (false)), true, true)))))))
                            barrier();
                          }
                         else
                          {
                          }
                        }
                      }
                    }
                  }
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(false)
                    {
                    }
                   else
                    {
                     barrier();
                    }
                  }
                 for(int _injected_loop_counter = 1; _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
                  {
                   if(((injectionSwitch.x > injectionSwitch.y)))
                    {
                    }
                   else
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     for(int _injected_loop_counter = (17936 & 0); _injected_loop_counter < 1; _injected_loop_counter ++)
                      {
                       do
                        {
                         if((false))
                          {
                           if((((injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                           if((((injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                           if(false)
                            {
                            }
                           else
                            {
                             if((((injectionSwitch.x > injectionSwitch.y))))
                              barrier();
                             barrier();
                            }
                           if((((injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                          }
                        }
                       while(false);
                      }
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                   do
                    {
                     if((false))
                      barrier();
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                   while(false);
                   if(false)
                    {
                     if((false))
                      barrier();
                    }
                   else
                    {
                     if(false)
                      {
                      }
                     else
                      {
                       do
                        {
                         for(int _injected_loop_counter = 0; _injected_loop_counter < (1 & 1); _injected_loop_counter ++)
                          {
                           if((false))
                            barrier();
                          }
                        }
                       while(((injectionSwitch.x > injectionSwitch.y)));
                      }
                     do
                      {
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        {
                         if((false))
                          barrier();
                         if((false))
                          barrier();
                         do
                          {
                           if(true)
                            {
                             if((((injectionSwitch.x > injectionSwitch.y))))
                              {
                               if(((injectionSwitch.x < injectionSwitch.y)))
                                {
                                 for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
                                  {
                                   barrier();
                                  }
                                 if(false)
                                  {
                                  }
                                 else
                                  {
                                   if((false))
                                    {
                                     if(((injectionSwitch.x < injectionSwitch.y)))
                                      {
                                       barrier();
                                      }
                                     else
                                      {
                                      }
                                    }
                                  }
                                }
                               else
                                {
                                 if((((! (! (true)))) && true))
                                  {
                                   if((((injectionSwitch.x > injectionSwitch.y))))
                                    barrier();
                                   if((((injectionSwitch.x > injectionSwitch.y))))
                                    barrier();
                                  }
                                 else
                                  {
                                   if((false))
                                    barrier();
                                  }
                                }
                              }
                            }
                           else
                            {
                            }
                           for(int _injected_loop_counter = 0; _injected_loop_counter != ((1 << (int(6))) >> (int(6))); _injected_loop_counter ++)
                            {
                             barrier();
                            }
                          }
                         while(false);
                         if((false))
                          barrier();
                        }
                       if((false))
                        barrier();
                      }
                     while(((injectionSwitch.x > injectionSwitch.y)));
                    }
                   if((false))
                    {
                     if(false)
                      {
                      }
                     else
                      {
                       barrier();
                      }
                    }
                  }
                }
               while(false);
              }
             else
              {
              }
             if((false))
              barrier();
            }
           while(false);
          }
         while((! (! (((injectionSwitch.x > injectionSwitch.y))))));
        }
       while(false);
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
     if((false))
      barrier();
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if(true)
    {
     do
      {
       if((false))
        barrier();
       if(false)
        {
        }
       else
        {
         barrier();
        }
      }
     while(false);
    }
   else
    {
    }
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(((injectionSwitch.x > injectionSwitch.y)))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
   if((false))
    barrier();
   for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != 1; _injected_loop_counter ++)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       if((false))
        barrier();
      }
     for(int _injected_loop_counter = ((1 << (int(2))) >> (((int(2)) >> (0 & 7480)))); _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
      {
       GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.y = workgroup_size;
      }
    }
  }
 do
  {
   if(((true && (false))))
    {
     for(int _injected_loop_counter = 0; _injected_loop_counter != (1 | 1); _injected_loop_counter ++)
      {
       if(((bool(bvec3(false, true, false)))))
        barrier();
      }
     if((false || (((false) && true))))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 while(false);
 if((false))
  barrier();
 for(int _injected_loop_counter = 0; _injected_loop_counter < ((1) - 0); _injected_loop_counter ++)
  {
   if((false))
    barrier();
   if((false))
    barrier();
  }
 if(((bool(bool(false)))))
  {
   do
    {
     barrier();
     if((false))
      {
       if((false))
        barrier();
       if((false))
        barrier();
       barrier();
      }
    }
   while(false);
  }
 if((false))
  barrier();
 for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
  {
   if((false))
    {
     if(false)
      {
      }
     else
      {
       do
        {
         if(false)
          {
          }
         else
          {
           do
            {
             barrier();
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
          }
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
      }
    }
  }
 if((false))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 if((false))
  barrier();
 uint workgroup_base = GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.y * workgroup_id;
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   do
    {
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(false);
  }
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(((injectionSwitch.x > injectionSwitch.y)))
  {
  }
 else
  {
   do
    {
     if((false))
      barrier();
     if(true)
      {
       if((false))
        barrier();
       if((false))
        barrier();
      }
     else
      {
      }
     if((false))
      barrier();
     if((false))
      {
       if(true)
        {
         do
          {
           barrier();
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
        }
       else
        {
         for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
          {
           if((false))
            barrier();
          }
        }
      }
    }
   while(false);
  }
 do
  {
   for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
    {
     if(true)
      {
       if(false)
        {
         if((false))
          barrier();
        }
       else
        {
         if(false)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
           if(false)
            {
            }
           else
            {
             do
              {
               do
                {
                 do
                  {
                   do
                    {
                     if((false))
                      barrier();
                     if((false))
                      barrier();
                    }
                   while(false);
                  }
                 while(false);
                }
               while(((injectionSwitch.x > injectionSwitch.y)));
              }
             while(false);
             GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.x = virtual_gid;
            }
          }
         if(true)
          {
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(true)
              {
               barrier();
              }
             else
              {
              }
            }
          }
         else
          {
          }
        }
       if((false))
        barrier();
      }
     else
      {
      }
    }
  }
 while(false);
 if(false)
  {
  }
 else
  {
   if(((true && (((injectionSwitch.x > injectionSwitch.y))))))
    barrier();
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if((false))
  {
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
    }
   else
    {
     barrier();
    }
  }
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size);
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(((injectionSwitch.x < injectionSwitch.y)))
  {
   if(true)
    {
     for(int _injected_loop_counter = (0 & 50239); _injected_loop_counter != (1 ^ 0); _injected_loop_counter ++)
      {
       if((false))
        barrier();
       for(int _injected_loop_counter = (0 << (int(8))); _injected_loop_counter != 1; _injected_loop_counter ++)
        {
         if((false))
          {
           if((false))
            barrier();
           for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
            {
             barrier();
            }
          }
        }
      }
     do
      {
       for(int _injected_loop_counter = 0; _injected_loop_counter != (1 | 1); _injected_loop_counter ++)
        {
         do
          {
           for(int _injected_loop_counter = (ivec4(15196, 31675, 88956, 39318).p & 0); _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
            {
             if(((injectionSwitch.x < injectionSwitch.y)))
              {
               if(false)
                {
                }
               else
                {
                 if(((injectionSwitch.x > injectionSwitch.y)))
                  {
                  }
                 else
                  {
                   if((false))
                    barrier();
                   buf[GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.x] = 1;
                  }
                }
               if((false))
                barrier();
              }
             else
              {
               if((false))
                barrier();
               if((false))
                {
                 if((false))
                  barrier();
                 barrier();
                }
               if((false))
                barrier();
              }
             if((false))
              {
               if(true)
                {
                 barrier();
                }
               else
                {
                }
              }
            }
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(false)
        {
        }
       else
        {
         barrier();
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = 0; _injected_loop_counter != ((int((injectionSwitch.y)) << (((int(3)) ^ 0))) >> (int(3))); _injected_loop_counter ++)
      {
       if(false)
        {
         if((false))
          barrier();
        }
       else
        {
         if(false)
          {
           if((false))
            barrier();
          }
         else
          {
           for(int _injected_loop_counter = ((1 << (int(5))) >> (int(5))); _injected_loop_counter > ((0 & - 37433) >> (int(5))); _injected_loop_counter --)
            {
             if((false))
              {
               for(int _injected_loop_counter = (1 & 1); _injected_loop_counter > 0; _injected_loop_counter --)
                {
                 barrier();
                 if((false))
                  barrier();
                }
               for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
                {
                 if(((injectionSwitch.x > injectionSwitch.y)))
                  {
                   if((false))
                    barrier();
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 else
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    {
                     do
                      {
                       barrier();
                      }
                     while(((injectionSwitch.x > injectionSwitch.y)));
                    }
                  }
                 if((false))
                  barrier();
                }
              }
            }
          }
        }
      }
     if(true)
      {
       if((false))
        {
         for(int _injected_loop_counter = 1; _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
          {
           barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if((false))
        {
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           if(((true && (false))))
            {
             if((false))
              {
               if((false))
                {
                 do
                  {
                   do
                    {
                     barrier();
                    }
                   while(false);
                  }
                 while(false);
                }
               barrier();
               if((false))
                barrier();
              }
             for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
              {
               do
                {
                 if(((injectionSwitch.x > injectionSwitch.y)))
                  {
                  }
                 else
                  {
                   if((! (! (false))))
                    {
                    }
                   else
                    {
                     barrier();
                    }
                   do
                    {
                     if((false))
                      {
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        {
                         if(((true && (false))))
                          barrier();
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          {
                           for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
                            {
                             barrier();
                             if((((injectionSwitch.x > injectionSwitch.y))))
                              barrier();
                            }
                          }
                         if((false))
                          barrier();
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                         if((false))
                          barrier();
                         if(false)
                          {
                          }
                         else
                          {
                           if((false))
                            barrier();
                           if(((false) || false))
                            {
                            }
                           else
                            {
                             barrier();
                            }
                          }
                        }
                       barrier();
                      }
                    }
                   while(false);
                  }
                }
               while(((injectionSwitch.x > injectionSwitch.y)));
               if((false))
                barrier();
              }
            }
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             do
              {
               for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if((false))
                  barrier();
                 barrier();
                }
              }
             while(false);
            }
           for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(false)
              {
              }
             else
              {
               barrier();
              }
            }
           if((false))
            {
             for(int _injected_loop_counter = (0 | (int(6578.0131) & 0)); _injected_loop_counter != 1; _injected_loop_counter ++)
              {
               barrier();
              }
            }
           for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
            {
             if(true)
              {
               if(false)
                {
                 if((false))
                  barrier();
                }
               else
                {
                 if((false))
                  barrier();
                }
              }
             else
              {
              }
            }
           if((false))
            barrier();
           if((false))
            barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     else
      {
       if((false))
        barrier();
      }
     if((false))
      barrier();
    }
   else
    {
     if((((((false) && true)) && true)))
      barrier();
    }
  }
 else
  {
  }
 if((false))
  barrier();
 if(((false || (false))))
  barrier();
 do
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(((! (! ((! (! (false))))))))
    barrier();
  }
 while(((injectionSwitch.x > injectionSwitch.y)));
 for(int _injected_loop_counter = 0; _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
  {
   do
    {
     if((false))
      barrier();
     for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
      {
       if((false))
        {
         do
          {
           if(false)
            {
            }
           else
            {
             if(true)
              {
               if((false))
                barrier();
               for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
                {
                 for(int _injected_loop_counter = 0; _injected_loop_counter < ((1 << (((int(0)) ^ 0))) >> (((int(0)) << 0))); _injected_loop_counter ++)
                  {
                   barrier();
                  }
                }
              }
             else
              {
              }
             if((false))
              barrier();
            }
           if((false))
            barrier();
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   while(false);
  }
 if(false)
  {
  }
 else
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(subgroup_local_id + 1 < subgroup_size)
  {
   int i = 0;
   if((false))
    barrier();
   if(true)
    {
     if((false))
      barrier();
     for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
      {
       if((false))
        barrier();
      }
    }
   else
    {
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = 1; _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
      {
       if((false))
        barrier();
       if((false))
        {
         if(true)
          {
           if(true)
            {
             barrier();
            }
           else
            {
            }
          }
         else
          {
          }
        }
       if((false))
        barrier();
       do
        {
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           if((false))
            barrier();
           if((false))
            {
             do
              {
               barrier();
               if((false))
                {
                 if(false)
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             while(false);
            }
          }
        }
       while((! (! (((false) || false)))));
       do
        {
         barrier();
         if((false))
          {
           if(((bool(bool(((injectionSwitch.x > injectionSwitch.y)))))))
            barrier();
           if(false)
            {
            }
           else
            {
             for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < ((1 << (int(4))) >> (int(4))); _injected_loop_counter ++)
              {
               for(int _injected_loop_counter = ((false ? (69661) : 0)); _injected_loop_counter != 1; _injected_loop_counter ++)
                {
                 if((false))
                  barrier();
                 if((((false) && true)))
                  {
                   if(true)
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                 barrier();
                }
              }
            }
           if(true)
            {
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 for(int _injected_loop_counter = (0 << (int(2))); _injected_loop_counter != 1; _injected_loop_counter ++)
                  {
                   barrier();
                  }
                }
               if(false)
                {
                 if((false))
                  barrier();
                }
               else
                {
                 for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                  {
                   barrier();
                  }
                 if(((false || (false))))
                  barrier();
                }
              }
            }
           else
            {
            }
          }
        }
       while(false);
      }
     if((false))
      barrier();
     if((false))
      barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if(false)
        {
        }
       else
        {
         if(true)
          {
           do
            {
             barrier();
            }
           while(false);
          }
         else
          {
          }
        }
      }
     else
      {
      }
    }
   if(false)
    {
    }
   else
    {
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(((false) || false))
        {
        }
       else
        {
         if((false))
          barrier();
        }
       barrier();
      }
     if((false))
      {
       if(((! ((false || (! (false)))))))
        {
         if((false))
          barrier();
         barrier();
        }
       if(true)
        {
         for(int _injected_loop_counter = ((1 << (int(3))) >> (int(3))); _injected_loop_counter != ((true ? int((injectionSwitch.x)) : (i))); _injected_loop_counter --)
          {
           if((false))
            {
             do
              {
               barrier();
              }
             while(false);
            }
          }
        }
       else
        {
        }
       barrier();
      }
    }
   if((false))
    barrier();
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   do
    {
     if((false))
      barrier();
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       do
        {
         if((false))
          barrier();
         atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
        }
       while(false);
      }
     else
      {
      }
     if((false))
      barrier();
    }
   while(false);
  }
 else
  {
   do
    {
     if((false))
      barrier();
    }
   while(false);
   atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if(true)
    {
     if(true)
      {
       do
        {
         for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
          {
           barrier();
           do
            {
             do
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             while(false);
            }
           while(false);
          }
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
      }
     else
      {
      }
     if((false))
      barrier();
    }
   else
    {
    }
   if(((! (! (((false) && true))))))
    barrier();
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
