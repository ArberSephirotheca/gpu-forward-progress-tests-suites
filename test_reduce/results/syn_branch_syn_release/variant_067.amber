#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((false))
  barrier();
 if((false))
  {
   if((((injectionSwitch.x < injectionSwitch.y)) && ((false || ((((injectionSwitch.x > (float(mat4(injectionSwitch.y, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, length(vec3(0.0, 0.0, 0.0)), 1.0, sqrt(0.0), 0.0, 0.0, 0.0)))))))))))
    barrier();
   if(((bool(bvec3(((true && ((injectionSwitch.x > injectionSwitch.y)))), false, false)))))
    {
     if((false))
      barrier();
     barrier();
     if((((true && (bool((bvec2(bvec3(bvec2((bool(bvec3(((injectionSwitch.x > injectionSwitch.y)), true, false))), false), ((injectionSwitch.x < injectionSwitch.y)))))))))))
      return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    barrier();
   return;
  }
 if(((! (! (false)))))
  return;
 if(((! (! (false)))))
  barrier();
 if((((((injectionSwitch.x > injectionSwitch.y))) || false)))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((false))
  return;
 if((((bool(bool(bool(bool(false))))))))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if((false))
  {
   if((((injectionSwitch.x > (vec2(vec3((vec2(injectionSwitch[0], injectionSwitch[1])), 0.0))).y))))
    return;
   if((false))
    barrier();
   if((((((injectionSwitch) * mat2((injectionSwitch.y))).x > injectionSwitch.y))))
    return;
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > ((injectionSwitch.y) * 1.0)))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   if((false))
    barrier();
   if(((! (((false || (bool(bvec4(! (false), true, false, false)))))))))
    {
     if(((! (! (bool((bvec3(bvec4(bvec3((((bool(bvec3((false), true, false)))) && true), true, ((! (! (bool(bvec4(true, true, (false || (false)), false))))))), ((true) || false))))))))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if((((injectionSwitch.x > ((mix(float((875.192)), float((injectionSwitch.y)), bool(true))) + 0.0)))))
      barrier();
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((((false)) && true))
      return;
     if((false))
      barrier();
    }
   if((((injectionSwitch.x > (clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))))
    return;
   return;
   if((false))
    {
     if((false))
      barrier();
     if(((bool(bvec4(false, false, ((((bool(bvec2(bool(bvec3((! (! (false))), false, true)), false))) && true))), true)))))
      {
       if((false))
        barrier();
       barrier();
      }
     return;
    }
   if((false))
    barrier();
   if((((false)) || (bool(bvec4(false, false, false, false)))))
    return;
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
  }
 if((false))
  {
   if((false))
    barrier();
   return;
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
  }
 uint subgroup_size = gl_SubgroupSize;
 if((false))
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   barrier();
   if((! (! ((((injectionSwitch.x > (mix(float(injectionSwitch.y), float((- 6777.8308)), bool(false))))))))))
    return;
  }
 if((false))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   if(((bool(bvec3(false, ((((injectionSwitch) * mat2((injectionSwitch.y))).x < injectionSwitch.y)), ((injectionSwitch.x < injectionSwitch.y)))))))
    return;
   if((false))
    return;
   barrier();
  }
 if((false))
  barrier();
 if((false))
  return;
 if((bool(bvec4((((injectionSwitch.x > injectionSwitch.y))), ((injectionSwitch.x > injectionSwitch.y)), true, ((injectionSwitch.x < injectionSwitch.y))))))
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if(((! (! (false)))))
      barrier();
     return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(((! (! (false || ((false)))))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
  }
 if(((false || (((injectionSwitch.x > injectionSwitch.y))))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  barrier();
 if((false))
  return;
 if((false))
  barrier();
 if((false))
  {
   if((bool(bool((false)))))
    return;
   if((false))
    {
     if(((! (! (false)))))
      barrier();
     barrier();
    }
   if(((true && (((injectionSwitch.x > injectionSwitch.y))))))
    return;
   if((bool(bvec4((false), true, true, ((injectionSwitch.x < injectionSwitch.y))))))
    barrier();
   barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((((injectionSwitch.x > (mix(vec2((5861.9134), (injectionSwitch)[1]), vec2((injectionSwitch)[0], ((664.160))), bvec2(((! (! ((injectionSwitch.x < injectionSwitch.y))))), false))).y))))
  return;
 if((bool(bvec3((false), true, ((injectionSwitch.x > injectionSwitch.y))))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    return;
   if(((bool(bool(((injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   if((true && ((((injectionSwitch.x > (max((vec2(injectionSwitch[0], injectionSwitch[1])), ((injectionSwitch) * mat2(1.0)))).y))))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     barrier();
     if((((bool((bvec3(bvec4(bvec3((((injectionSwitch.x > injectionSwitch.y))), (bool(bvec2(true, false))), true), true))))) && ((injectionSwitch.x < injectionSwitch.y)))))
      barrier();
    }
   return;
   if((false))
    barrier();
   if((false))
    return;
   if((false))
    barrier();
  }
 if((false))
  barrier();
 if((false))
  {
   if((false || ((false))))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((false))
  {
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        return;
       if((((((! (! (true))) && (injectionSwitch.x > injectionSwitch.y))))))
        barrier();
       barrier();
      }
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if((false))
      barrier();
     if((false))
      return;
     barrier();
     if((false))
      return;
    }
   return;
   if((false))
    barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    return;
   barrier();
  }
 uint num_workgroup = (min(gl_NumWorkGroups, ((~ (~ (uvec3(uvec4(gl_NumWorkGroups, 1u)))))))).x;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if(((bool(bvec2((((bool(bool(false))) && true)), true)))))
    return;
   if((bool(bvec4((((true && ((((! ((false || ((! (! (! (((bool(bvec2(false, true)))))))))))) && true))))) || false), true, true, true))))
    {
     if((((injectionSwitch.x > (clamp(injectionSwitch, injectionSwitch, ((false ? (vec2(4.0, 4.8)) : injectionSwitch)))).y))))
      return;
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       return;
      }
     if((((false)) || false))
      barrier();
     barrier();
     if((false))
      {
       if((false))
        {
         if((((((injectionSwitch.x > injectionSwitch.y) && true)))))
          barrier();
         return;
        }
       if((false))
        barrier();
       barrier();
      }
    }
   if((false))
    return;
   return;
   if((false))
    barrier();
  }
 if(((false || (false))))
  {
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    return;
   if((((true && ((false))) && true)))
    return;
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    return;
   return;
   if((false))
    barrier();
  }
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  return;
 if((false))
  barrier();
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(((false || ((((bool(bvec3(false, false, ((injectionSwitch.x > injectionSwitch.y)))))) || false)))))
  barrier();
 uint workgroup_size = (((1u * (gl_WorkGroupSize.x))) + 0u);
 if((bool(bvec3((false), ((injectionSwitch.x < injectionSwitch.y)), ((injectionSwitch.x < injectionSwitch.y))))))
  return;
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
 if(((((mix(float((- 6160.1950)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y))))
  {
   if((false))
    {
     if((((injectionSwitch.x > (((max(injectionSwitch, injectionSwitch))) / vec2(1.0, 1.0)).y))))
      barrier();
     return;
    }
   return;
  }
 if((false))
  {
   if((((((clamp(float(mat3((((min(injectionSwitch, injectionSwitch)).x) / 1.0), sin(0.0), length(0.0), tan(0.0), 0.0, sqrt(0.0), 1.0, 0.0, 0.0)), float(mat3((((min(injectionSwitch, injectionSwitch)).x) / 1.0), sin(0.0), length(0.0), tan(0.0), 0.0, sqrt(0.0), 1.0, 0.0, 0.0)), (clamp(float(mat3((((min(injectionSwitch, injectionSwitch)).x) / 1.0), sin(0.0), length(0.0), tan(0.0), 0.0, sqrt(0.0), 1.0, 0.0, 0.0)), float(mat3((((min(injectionSwitch, injectionSwitch)).x) / 1.0), sin(0.0), length(0.0), tan(0.0), 0.0, sqrt(0.0), 1.0, 0.0, 0.0)), float(mat3((((min(injectionSwitch, injectionSwitch)).x) / 1.0), sin(0.0), length(0.0), tan(0.0), 0.0, sqrt(0.0), 1.0, 0.0, 0.0))))))) > injectionSwitch.y))))
    return;
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((! (! (((false || (false)))))))
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   return;
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if((false))
  {
   if((false))
    barrier();
   return;
  }
 uint workgroup_base = (clamp(workgroup_size, workgroup_size, workgroup_size)) * workgroup_id;
 if(((! ((bool(bvec3(! (false), true, true)))))))
  {
   if((false))
    {
     if((false))
      barrier();
     return;
    }
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y)) || ((((false)) && true))))
  barrier();
 if(((((bool(bvec2(false, true)))) && true)))
  return;
 if((false))
  barrier();
 if((((((injectionSwitch) * vec2(1.0, 1.0)).x > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
 if((false))
  {
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     barrier();
    }
   return;
  }
 if((! (! ((false)))))
  {
   if((false))
    barrier();
   return;
  }
 if((((! ((bool(bvec3(! ((injectionSwitch.x > injectionSwitch.y)), (bool(bvec4(false, false, false, ((injectionSwitch.x > injectionSwitch.y))))), (((! (! ((true && ((false || (false)))))))) || false)))))))))
  {
   if((((false) && true)))
    barrier();
   if((false))
    barrier();
   if((((! (! ((bool(bool(((bool(bvec3((bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, true))), false, true)))))))))))))
    {
     if((false))
      barrier();
     if((false))
      barrier();
     if((false))
      barrier();
     barrier();
    }
   barrier();
   if((false))
    {
     if(((true && ((! ((! (! (! (((bool((bool(bvec2(bool((false)), false))))) || false)))))))))))
      return;
     return;
    }
   if((! (! ((bool(bvec3((false), false, true)))))))
    return;
   if((((true && ((false)))) || ((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   if((false))
    return;
   if((false))
    barrier();
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   barrier();
  }
 if((((false) && true)))
  return;
 if((((! (! (((min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)))))))
  {
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   return;
  }
 if((false))
  {
   if(((! (! (false)))))
    {
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if((((false) && true)))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if((false))
    {
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   return;
  }
 if((false))
  {
   if((false))
    return;
   barrier();
  }
 if((false))
  return;
 if((false))
  {
   if((! (((bool(bvec2(bool(bvec3(! ((false)), true, true)), false)))))))
    barrier();
   barrier();
  }
 if((false))
  {
   if((bool(bvec4((false), ((injectionSwitch.x > injectionSwitch.y)), ((injectionSwitch.x > injectionSwitch.y)), true))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   barrier();
  }
 if((false))
  barrier();
 if((false))
  {
   if((false))
    return;
   if((false))
    barrier();
   return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   return;
  }
 if(((true && (bool(bvec3((false), false, ((injectionSwitch.x < injectionSwitch.y))))))))
  {
   if((false))
    barrier();
   return;
  }
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 if(((true && (false))))
  return;
 uint virtual_gid = workgroup_base + subgroup_id * (clamp(((false ? (subgroup_local_id) : (0u | (subgroup_size)))), subgroup_size, subgroup_size)) + subgroup_local_id;
 uint next_virtual_gid = ((workgroup_base) | (workgroup_base)) + (0u | ((max(subgroup_id * subgroup_size, (min(subgroup_id * subgroup_size, ((((((0u | (((0u ^ (((((((((subgroup_id) | (((subgroup_id) | ((min((clamp((uint(uvec2(subgroup_id, 0u))), subgroup_id, subgroup_id)), subgroup_id)))))) * subgroup_size) | (subgroup_id * subgroup_size)))) >> 0u)) | 0u)))))) | (0u | 0u)) | (subgroup_id * subgroup_size))) << 0u))))))) + ((1u * ((((subgroup_local_id + 1) % (((((~ (~ ((uint((((0u | (((max((uint(subgroup_size)) - 0u, (uint(subgroup_size)) - 0u)) | (max((uint(subgroup_size)) - 0u, (uint(subgroup_size)) - 0u))))))))))))) - 0u)) | ((~ (((true ? ~ ((uint(((uint(subgroup_size)) - 0u)))) : (subgroup_size))))))))) | (((false ? (((atomicMin(subgroup_size, num_workgroup))) - uint((injectionSwitch.x))) : ((~ (~ ((((subgroup_local_id + 1) % (((((~ (~ ((uint(((max((uint(subgroup_size)) - 0u, (uint(subgroup_size)) - 0u))))))))) - 0u)) | ((~ (~ ((uint((((false ? (num_workgroup) : (uint(subgroup_size)))) - 0u)))))))))) | (((clamp((subgroup_local_id + 1), (subgroup_local_id + 1), (subgroup_local_id + 1))) % (((((~ (~ ((uint(((max((uint(subgroup_size)) - 0u, (0u | ((uint(subgroup_size)))) - 0u))))))))) - 0u)) | (((~ ((~ (((~ (~ (~ (((~ ((uint(((uint(subgroup_size)) - 0u))))) * 1u))))) >> 0u))))))))))))))))))));
 if((true && ((bool(bool(((((min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)))))))))
  {
   if(((bool(bvec3((true && (((injectionSwitch.x > injectionSwitch.y)))), true, false)))))
    return;
   return;
  }
 if((false))
  return;
 if((false))
  {
   if((((true && ((injectionSwitch.x > injectionSwitch.y))))))
    barrier();
   barrier();
  }
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 buf[virtual_gid] = ((1) - 0);
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false || (((((true && (false))) && ((true) && true))))))
    {
     if((false))
      barrier();
     barrier();
    }
   if(((false || (false))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       return;
      }
     if((false))
      barrier();
     if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
      {
       if((false))
        barrier();
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((((injectionSwitch.x > (clamp(injectionSwitch.y, injectionSwitch.y, (max(((injectionSwitch.y) * 1.0), injectionSwitch.y))))))))
        return;
       if((false))
        barrier();
       if((((((false || ((false || ((! (! ((((injectionSwitch.x > (mix(vec2(((min(mix(float((injectionSwitch)[0]), float((0.5)), bool(false)), mix(float((injectionSwitch)[0]), float((0.5)), bool(false))))), (injectionSwitch)[((1) ^ 0)]), vec2((3139.0222), (- 686.169)), bvec2(false, false))).y))))))))))) || false)) && true))
        barrier();
       return;
      }
     if(((! (! (false)))))
      {
       if((false))
        barrier();
       if((! (! ((((injectionSwitch.x > injectionSwitch.y)))))))
        return;
       barrier();
       if((false))
        barrier();
      }
     return;
    }
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   if((((((true ? ((true ? injectionSwitch : (log2(injectionSwitch)))) : ((((mat2((injectionSwitch.y)) * (injectionSwitch))) - vec2(0.0, 0.0))))).x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
   if((((false || ((injectionSwitch.x > injectionSwitch.y))))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    return;
   if((false))
    barrier();
   if(((((! (bool(((bool((! (((injectionSwitch.x > injectionSwitch.y)))))) && true)))) || false))))
    {
     if((false))
      {
       if((bool(bvec3((false), true, true))))
        barrier();
       return;
      }
     return;
    }
   if((false))
    barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if(subgroup_local_id + 1 < subgroup_size)
  {
   if((false))
    {
     if(((bool(bvec3(false, false, true)))))
      {
       if((false))
        barrier();
       return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       barrier();
      }
     if((false))
      return;
     if((false))
      return;
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
     if(((! ((false || ((! (! (! ((! ((bool(bool(! (((injectionSwitch.x > injectionSwitch.y))))))))))))))))))
      barrier();
     barrier();
    }
   if((false))
    {
     if(((bool(bool(false)))))
      barrier();
     return;
    }
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   if((false))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     return;
    }
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((((false)) || (! (! (false)))))
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
       return;
       if((false))
        barrier();
      }
     if((false))
      barrier();
     if((false))
      return;
     return;
    }
   if((bool(bool(((bool(bvec3(false, true, true))))))))
    {
     if((false))
      return;
     if(((! (! (false)))))
      return;
     if(((! (! (false)))))
      return;
     if(((false || (false))))
      barrier();
     return;
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
    }
   if(((! (((((! (false)) && true)) || ((injectionSwitch.x > (mix(vec2(((4.5 / 4885.3975)), (injectionSwitch)[1]), vec2((injectionSwitch)[0], (- 66.71)), bvec2(((injectionSwitch.x < injectionSwitch.y)), false))).y)))))))
    {
     if((false))
      barrier();
     return;
    }
   if((false))
    return;
   if(((bool(bvec3(((injectionSwitch.x > injectionSwitch.y)), true, true)))))
    {
     if((false))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y)) || ((((injectionSwitch.x < injectionSwitch.y)) && ((false))))))
    {
     if((false))
      barrier();
     barrier();
     if((false))
      barrier();
    }
   if((false))
    {
     if((false))
      {
       if((false))
        return;
       return;
       if((false))
        barrier();
      }
     if((((injectionSwitch.x > (((float(((true ? mat2x4(injectionSwitch.y, 1.0, round(length(normalize(abs(vec3(1.0, 1.0, 1.0))))), 0.0, 1.0, 1.0, 1.0, 0.0) : (mat2x4(9.8, - 8368.8779, - 2.3, - 9.8, - 72.22, - 69.93, 8012.9679, 5683.0619)))))) / (dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)))))))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
       if((((((injectionSwitch.x) - 0.0) > (min((float(mat3((float(float(injectionSwitch.y))), 0.0, 0.0, (max(1.0, 1.0)), 0.0, 0.0, 0.0, 1.0, 1.0))), (min(injectionSwitch.y, injectionSwitch.y))))))))
        barrier();
       barrier();
      }
     if((false))
      return;
     return;
     if((false))
      {
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((false))
        barrier();
       return;
      }
     if((! (! ((false)))))
      barrier();
    }
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      return;
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   int i = 0;
   atomicStore(buf[next_virtual_gid], ((1u * (0u | ((uint(uvec3((1u * (((false ? (subgroup_id) : uint(2))))), 1u, 0u))))))), 4, 64, (clamp(4, (max(4, 4)), ((4) ^ 0))));
   if((false))
    return;
   if((false))
    {
     if((false))
      {
       if((false))
        barrier();
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
       barrier();
      }
     if((((((bool((bvec2(bvec3(bvec2(! (! (false)), false), true)))))) && true))))
      barrier();
     return;
     if((false))
      barrier();
     if((false))
      return;
    }
   if((false))
    {
     if((false))
      barrier();
     if((false))
      {
       if((((false) || false)))
        barrier();
       if((false))
        {
         if((false))
          return;
         return;
        }
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
       if((false))
        barrier();
       if((false))
        barrier();
       return;
       if((false))
        barrier();
      }
     if((false))
      {
       if((((true && (bool(((bvec2(bvec4(bvec2(bvec4(bvec2(((injectionSwitch.x > injectionSwitch.y)), false), false, true)), true, false))))))))))
        barrier();
       return;
      }
     if((false))
      {
       if(((bool(((bool(false)) && (bool(bvec4(true, false, true, false))))))))
        return;
       barrier();
       if(((((mix(float(injectionSwitch.x), float(((8.6 - 56.33))), bool(false))) > (min((clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)).y))))
        barrier();
      }
     if((false))
      return;
     if((bool(bvec3((bool(bvec3((((((! (! ((injectionSwitch.x > injectionSwitch.y))))) || ((injectionSwitch.x > injectionSwitch.y))))), true, true))), false, true))))
      {
       if((false))
        {
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              barrier();
             if((((injectionSwitch.x > (mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2((- 566.317), (5284.9541)), bvec2(false, false))).y))))
              {
               if(((false || ((((true && (((true ? injectionSwitch : (vec2(- 6.5, - 3606.9722)))).x > injectionSwitch.y))))))))
                barrier();
               barrier();
              }
             return;
            }
           return;
          }
         barrier();
        }
       if(((((bool(bvec4(false, true, ((injectionSwitch.x > injectionSwitch.y)), true))) && true))))
        return;
       if((((((false ? (inversesqrt(- 762.338)) : (mix(float((- 9382.2415)), float((max(((injectionSwitch) + vec2(0.0, 0.0)), injectionSwitch)).x), bool(true))))) > injectionSwitch.y))))
        barrier();
       return;
       if((false))
        return;
      }
     if((false))
      {
       if((((((((clamp(injectionSwitch, injectionSwitch, injectionSwitch))) * vec2(1.0, 1.0)).x < injectionSwitch.y)) && (((injectionSwitch.x > injectionSwitch.y))))))
        barrier();
       if((false))
        barrier();
       if((false || ((! (! ((false)))))))
        {
         if((false))
          barrier();
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              return;
             return;
            }
           barrier();
           if(((true && ((true && (false))))))
            return;
          }
         return;
        }
       barrier();
      }
     barrier();
     if((false))
      barrier();
     if((false || ((false))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   if((false))
    return;
   if((false))
    barrier();
   if(((false || (bool(bool(((((true && (true && (bool(bool(((bool(bvec4(bool(bvec3(false, true, false)), false, false, true))))))))))))))))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
     if((false))
      barrier();
    }
  }
 else
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((false)) || false))
      return;
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((false))
        {
         if((false))
          barrier();
         return;
        }
       if((false))
        barrier();
       if((! (! ((((injectionSwitch.x > injectionSwitch.y)))))))
        barrier();
       if(((! (! (false)))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if((((((injectionSwitch.x > injectionSwitch.y)))) && true))
          {
           if(((! (! ((((injectionSwitch.x < injectionSwitch.y)) && (false)))))))
            return;
           barrier();
           if((false))
            barrier();
          }
         return;
        }
       if((((((true ? ((false ? (- 30.97) : ((mix(float((- 7.1)), float(min(injectionSwitch.x, injectionSwitch.x)), bool(((true) || false))))))) : (456.261))) > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
       return;
       if((false))
        return;
       if(((! ((bool(bvec3((! (! (! (((injectionSwitch.x > injectionSwitch.y)))))), false, false)))))))
        barrier();
       if((false))
        barrier();
       if((((! (! ((bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, ((injectionSwitch.x > injectionSwitch.y)), true)))))))))
        {
         if((false))
          barrier();
         if(((true && (false))))
          return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
     barrier();
     if((false))
      {
       if((false))
        return;
       if((false))
        barrier();
       if((false))
        {
         if((false))
          barrier();
         return;
        }
       if((false))
        barrier();
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if((false))
      {
       if((false))
        return;
       barrier();
      }
    }
   atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
   if((((false) && true)))
    barrier();
   if((false))
    barrier();
   if((false))
    return;
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     return;
    }
  }
 if((false))
  barrier();
 if((((false) && true)))
  return;
 if(((true && (((false) && true)))))
  return;
 if((false))
  {
   if(((! (((! (((true && ((bool(bvec3((false) && true, false, true)))))))) && true)))))
    barrier();
   if(((true && (false))))
    return;
   return;
  }
 if(((false || (false))))
  {
   if(((! (((! (! (true))) && (! ((bool(bool((false || (((injectionSwitch.x > injectionSwitch.y))))))))))))))
    {
     if(((false || (false))))
      {
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     barrier();
     if((((((injectionSwitch.x > injectionSwitch.y))) || false)))
      barrier();
     if((false))
      barrier();
    }
   if((false))
    barrier();
   if(((! (! (false)))))
    return;
   if((false))
    {
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(((bool(bvec4(((injectionSwitch.x > injectionSwitch.y)), ((injectionSwitch.x > injectionSwitch.y)), false, true)))))
          return;
         barrier();
        }
       return;
      }
     return;
    }
   if((false))
    barrier();
   if((false))
    {
     if(((! (((! (false)) || false)))))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   if((false))
    return;
   if((bool((bvec3(bvec3(bvec3((false), true, false)))))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if((false))
      barrier();
     if((false))
      {
       if(((false || (false))))
        barrier();
       barrier();
      }
    }
   if((((false || ((((injectionSwitch.x > (max(injectionSwitch.y, (clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))))))))) || false))
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          {
           if(((bool(bool(false)))))
            return;
           barrier();
          }
         if((false))
          {
           if((false))
            barrier();
           return;
          }
         barrier();
        }
       if(((bool(bvec3(false, false, ((injectionSwitch.x > injectionSwitch.y)))))))
        barrier();
       barrier();
       if(((! (! ((false || (false)))))))
        {
         if(((! (! (false)))))
          barrier();
         return;
        }
      }
     if((false))
      barrier();
     return;
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       barrier();
      }
    }
   if((false))
    return;
   if((false))
    barrier();
   if((false))
    barrier();
   if(((false || (false))))
    {
     if((false))
      {
       if((false))
        barrier();
       return;
      }
     return;
     if(((bool(bvec4((! (! (false))), ((injectionSwitch.x > injectionSwitch.y)), true, false)))))
      barrier();
    }
   if((false))
    {
     if((! (! ((false)))))
      {
       if((false))
        {
         if((false))
          barrier();
         if(((false || (false))))
          barrier();
         barrier();
        }
       if((false))
        barrier();
       return;
       if((false))
        barrier();
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
       if((false))
        barrier();
       if((! (! ((((((injectionSwitch.x > (((clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))) + 0.0))))) || false)))))
        return;
      }
     if(((bool(bvec3(false, false, false)))))
      return;
     if((false))
      barrier();
     if((((((((injectionSwitch.x) - 0.0)) / 1.0) > injectionSwitch.y))))
      {
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     return;
     if(((! (! (false)))))
      {
       if((false))
        barrier();
       barrier();
      }
     if(((((((! ((bool((bvec3(bvec4(bvec3(((! (injectionSwitch.x > injectionSwitch.y)) && true), true, true), true)))))))) || false)))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(((((injectionSwitch.x < injectionSwitch.y)) && (false))))
        {
         if((false))
          barrier();
         return;
        }
       if(((((true && (injectionSwitch.x > injectionSwitch.y))))))
        barrier();
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((false))
        barrier();
       return;
       if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           return;
           if((false))
            barrier();
          }
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if((false))
        {
         if((((false)) || ((false) || false)))
          return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            return;
           barrier();
          }
         if((false))
          return;
         return;
        }
      }
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         if(((bool(bvec2((false || ((((bool((false || (bool(injectionSwitch.x > injectionSwitch.y))))))))), true)))))
          return;
         if((false))
          return;
         barrier();
         if((false))
          barrier();
        }
       if(((bool(bvec2((! (! (false))), true)))))
        barrier();
       if((false))
        barrier();
       barrier();
      }
     if((false))
      barrier();
    }
   if((((! (! ((injectionSwitch.x > injectionSwitch.y)))))))
    {
     if((false))
      {
       if((false))
        {
         if((false))
          barrier();
         if((false))
          return;
         barrier();
        }
       return;
       if((((((false)) || false)) && true))
        barrier();
      }
     if((false))
      barrier();
     if((! (! ((((false || ((injectionSwitch.x > injectionSwitch.y)))))))))
      return;
     if((false))
      return;
     if((false))
      {
       if((false))
        {
         if((false))
          return;
         barrier();
        }
       if((false))
        barrier();
       if((false))
        {
         if((false))
          barrier();
         return;
        }
       barrier();
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((false))
        barrier();
      }
     if((false))
      barrier();
     barrier();
     if((false))
      {
       if(((! (! (((! (! ((! (! ((false))))))) || false))))))
        return;
       barrier();
      }
     if((((((true ? injectionSwitch.x : (uintBitsToFloat(subgroup_id)))) > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
     if((false))
      barrier();
    }
   if((false))
    {
     if((false))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     if(((((float(mat4x2((min(injectionSwitch, (mix(vec2((- 4.5), (6.7)), vec2((injectionSwitch)[0], ((((clamp((vec2(((vec2(injectionSwitch)) * mat2(1.0)))) * mat2(1.0), (vec2(((vec2(injectionSwitch)) * mat2(1.0)))) * mat2(1.0), (vec2(((vec2(injectionSwitch)) * mat2(1.0)))) * mat2(1.0))))))[1]), bvec2(true, true))))).x, (dot(vec4(0.0, exp(0.0), 0.0, 0.0), ((false ? (vec4(- 6.3, - 436.332, 1.7, 8121.1827)) : vec4(0.0, 1.0, 0.0, 0.0))))), 1.0, abs(1.0), 1.0, 1.0, (min((dot(vec2((max(0.0, 0.0)), 1.0), vec2(1.0, 0.0))), (dot(vec2((max(0.0, 0.0)), 1.0), vec2(1.0, 0.0))))), 1.0))) > injectionSwitch.y))))
      {
       if((false))
        barrier();
       if((false))
        return;
       barrier();
       if((false))
        barrier();
      }
     barrier();
     if((false))
      return;
     if((((((injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y))))
      barrier();
    }
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 if((((false) || false)))
  barrier();
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
