#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    return;
   return;
  }
 if((false))
  return;
 if((false))
  barrier();
 if(true)
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       return;
      }
     if((false))
      return;
     barrier();
    }
   if((false))
    barrier();
  }
 else
  {
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if((false))
  {
   if((false))
    return;
   barrier();
  }
 if((false))
  return;
 if((false))
  {
   if((false))
    barrier();
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     if((false))
      barrier();
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if(((! (! ((bool(bvec3(false, true, true))))))))
        barrier();
       if((false))
        return;
       barrier();
       if((false))
        barrier();
      }
     else
      {
      }
     if((false))
      barrier();
    }
   if((((false)) || (! (! (false)))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if((((bool(bvec2(bool(bvec4(((injectionSwitch.x > injectionSwitch.y)), false, false, ((injectionSwitch.x > injectionSwitch.y)))), true))))))
    {
     if((false))
      return;
     if((false))
      {
       if((false))
        return;
       barrier();
      }
     return;
    }
   barrier();
  }
 for(int _injected_loop_counter = int((((injectionSwitch) / vec2(1.0, 1.0)).y)); _injected_loop_counter > ((min(0, (min(0, 0)))) >> (int(7))); _injected_loop_counter --)
  {
   if(((((max(((false ? (175.887) : (max(injectionSwitch.x, (clamp(injectionSwitch.x, injectionSwitch.x, (float(mat3x4(injectionSwitch.x, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0))))))))), injectionSwitch.x)) > injectionSwitch.y))))
    {
     if(false)
      {
       if((false))
        return;
      }
     else
      {
       if(((false || (false))))
        barrier();
       if(((bool(bvec3(false, false, true)))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          return;
         return;
        }
       barrier();
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 uint subgroup_size = gl_SubgroupSize;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(((bool(bvec4(((injectionSwitch.x > injectionSwitch.y)), (bool(bvec3((bool(bvec2(true, false))), ((((bool(bvec2(bool(bvec4(false, true, true, ((injectionSwitch.x < injectionSwitch.y)))), true)))) || false)), false))), false, true)))))
  {
   if(((bool(bool(false)))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     barrier();
    }
   if((((false) && true)))
    barrier();
   barrier();
   if((false))
    return;
  }
 if((false))
  return;
 if((((true && ((false))) && true)))
  {
   if((false))
    return;
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
    }
   else
    {
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(((bool((bvec2(bvec3(bvec2(((((bool(bool((injectionSwitch.x > injectionSwitch.y)))) && true))), false), false)))))))
    {
     if((false))
      barrier();
     if((false))
      {
       if((((false) || false)))
        return;
       if((((((injectionSwitch.x > injectionSwitch.y)))) || false))
        return;
       return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     for(int _injected_loop_counter = 1; _injected_loop_counter != (0 >> (int(4))); _injected_loop_counter --)
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
         if((false))
          return;
         barrier();
        }
      }
     if((false))
      barrier();
     do
      {
       return;
      }
     while((true && (false)));
    }
   if((false))
    return;
   if((false))
    barrier();
   if((false))
    {
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
         if((false))
          return;
        }
      }
     else
      {
      }
     return;
     if((false))
      return;
     if((false))
      return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if((((((injectionSwitch.x > injectionSwitch.y)))) || false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if(false)
      {
       if((false))
        return;
      }
     else
      {
       if((false))
        return;
       barrier();
      }
     if((((! (! ((injectionSwitch.x > injectionSwitch.y)))))))
      return;
    }
   if(true)
    {
     if((false))
      barrier();
     if((false))
      barrier();
     barrier();
    }
   else
    {
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    return;
   return;
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 if((((false) || false)))
  {
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
    {
     if((false))
      {
       if((false))
        barrier();
       if((false))
        return;
       if((((((injectionSwitch.x > injectionSwitch.y) || ((injectionSwitch.x > injectionSwitch.y)))))))
        return;
       barrier();
      }
    }
   if(true)
    {
     barrier();
    }
   else
    {
    }
  }
 for(int _injected_loop_counter = ((0 | (int((injectionSwitch.x)) & 44475))); (max(_injected_loop_counter, ((_injected_loop_counter) ^ 0))) != (max(int(((clamp(injectionSwitch, ((false ? (injectionSwitch) : injectionSwitch)), injectionSwitch)).y)), (1 * (int((injectionSwitch.y)))))); _injected_loop_counter ++)
  {
   for(int _injected_loop_counter = 0; _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
  }
 if((false))
  return;
 uint workgroup_base = workgroup_size * workgroup_id;
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if(((((injectionSwitch.x < injectionSwitch.y)) && (((injectionSwitch.x > injectionSwitch.y))))))
    return;
   if((false))
    barrier();
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    return;
   barrier();
  }
 if((false))
  return;
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     barrier();
    }
   if((false))
    barrier();
   return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   if((false))
    return;
   return;
  }
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 uint next_virtual_gid = ((((((clamp((min((0u ^ (min(workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size), workgroup_base + subgroup_id * subgroup_size + ((((subgroup_local_id + (int(ivec3(1, 0, 0)))) % subgroup_size)) * 1u)))), min(workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size), workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size)))), (min((0u ^ (min(workgroup_base + subgroup_id * subgroup_size + ((uint((~ (~ (uint((((subgroup_local_id + 1) % subgroup_size) + 0u)))))))), workgroup_base + subgroup_id * subgroup_size + ((((subgroup_local_id + (int(ivec3(1, 0, 0)))) / 1u)) % subgroup_size)))), min(workgroup_base + subgroup_id * subgroup_size + (uint(uint(((subgroup_local_id + 1) % subgroup_size)))), workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size)))), (min((0u ^ (clamp((min(workgroup_base + subgroup_id * subgroup_size + (clamp((max(((subgroup_local_id + 1) % subgroup_size), ((subgroup_local_id + 1) % subgroup_size))), ((subgroup_local_id + 1) % subgroup_size), ((subgroup_local_id + 1) % subgroup_size))), workgroup_base + subgroup_id * (((min(subgroup_size, subgroup_size))) | (subgroup_size)) + ((subgroup_local_id + (int(ivec3(1, 0, 0)))) % subgroup_size))), (min(workgroup_base + subgroup_id * subgroup_size + (clamp((max(((subgroup_local_id + 1) % subgroup_size), ((subgroup_local_id + 1) % subgroup_size))), ((subgroup_local_id + 1) % subgroup_size), ((subgroup_local_id + 1) % subgroup_size))), workgroup_base + subgroup_id * (((min(subgroup_size, subgroup_size))) | (subgroup_size)) + ((subgroup_local_id + (int(ivec3(1, 0, 0)))) % subgroup_size))), (clamp((min(workgroup_base + subgroup_id * subgroup_size + (clamp((max(((subgroup_local_id + 1) % subgroup_size), ((subgroup_local_id + 1) % subgroup_size))), ((subgroup_local_id + 1) % subgroup_size), ((subgroup_local_id + 1) % subgroup_size))), workgroup_base + subgroup_id * (((min(subgroup_size, subgroup_size))) | (subgroup_size)) + ((subgroup_local_id + (int(ivec3(1, 0, 0)))) % subgroup_size))), (min(workgroup_base + subgroup_id * subgroup_size + (clamp((max(((subgroup_local_id + 1) % subgroup_size), ((subgroup_local_id + 1) % subgroup_size))), ((subgroup_local_id + 1) % subgroup_size), ((subgroup_local_id + 1) % subgroup_size))), workgroup_base + subgroup_id * (((min(subgroup_size, subgroup_size))) | (subgroup_size)) + ((subgroup_local_id + (int(ivec3(1, 0, 0)))) % subgroup_size))), (min(workgroup_base + subgroup_id * subgroup_size + (clamp((max(((subgroup_local_id + 1) % subgroup_size), ((subgroup_local_id + 1) % subgroup_size))), ((subgroup_local_id + 1) % subgroup_size), ((subgroup_local_id + 1) % subgroup_size))), workgroup_base + subgroup_id * (((min(subgroup_size, subgroup_size))) | (subgroup_size)) + ((subgroup_local_id + (int(ivec3(1, 0, 0)))) % subgroup_size)))))))), min(workgroup_base + subgroup_id * subgroup_size + (((max(subgroup_local_id + 1, subgroup_local_id + 1))) % subgroup_size), workgroup_base + subgroup_id * subgroup_size + (((uint(uvec3(subgroup_local_id + 1, (1u | 1u), 1u)))) % subgroup_size))))))) + 0u))) * 1u);
 if((false))
  return;
 if(((bool(bool(false)))))
  barrier();
 if(((((((((injectionSwitch.x < injectionSwitch.y))) || false) && true)) || false)))
  {
   if((false))
    return;
   if((false))
    return;
   if((false))
    return;
  }
 else
  {
  }
 if((((injectionSwitch.x > (min(injectionSwitch, injectionSwitch)).y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    return;
   barrier();
  }
 do
  {
   if((false))
    continue;
   buf[virtual_gid] = 1;
   if((false))
    {
     if((false))
      return;
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      break;
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((((false) && true)))
    continue;
  }
 while(((injectionSwitch.x > injectionSwitch.y)));
 if((false))
  return;
 if(false)
  {
  }
 else
  {
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
     if((false))
      {
       if((false))
        return;
       barrier();
      }
     if((false))
      return;
     if((false))
      barrier();
     if((false))
      {
       if(false)
        {
        }
       else
        {
         return;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if((false))
      return;
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if((false))
      barrier();
     if((! (! ((false)))))
      barrier();
     if(true)
      {
       if((((bool(bvec2((bool(bool((((injectionSwitch.x > injectionSwitch.y)))))), false))) && true)))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        return;
       if((false))
        return;
      }
     else
      {
       if((false))
        {
         if((false))
          {
           if((false))
            return;
           return;
          }
         if(true)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            return;
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           if((false))
            return;
           return;
           if((false))
            return;
          }
         else
          {
          }
         if((false))
          return;
         if((false))
          barrier();
         if((false))
          barrier();
         if(false)
          {
          }
         else
          {
           if((((injectionSwitch.x > ((((injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : (injectionSwitch))).y))))
            {
             if(((((injectionSwitch.x > injectionSwitch.y)) || ((((true && ((! (! (false)))))) && true)))))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
              {
               return;
              }
            }
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   else
    {
     if((((((injectionSwitch.x > (vec2(0.0, 0.0) + (injectionSwitch)).y) || false)))))
      return;
     for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
      {
       if(subgroup_local_id + 1 < subgroup_size)
        {
         if((false))
          break;
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if(((bool(bvec4(false, true, true, false)))))
            barrier();
           if(false)
            {
             if((false))
              barrier();
            }
           else
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
             return;
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if((false))
          barrier();
         if((false))
          {
           if((false))
            return;
           if((false))
            barrier();
           barrier();
           if((false))
            barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            return;
           if(((injectionSwitch.x > ((injectionSwitch.y) - 0.0))))
            {
             if(((false || (false))))
              return;
            }
           else
            {
             return;
            }
          }
         for(int _injected_loop_counter = 1; ((! (! (false || (_injected_loop_counter > 0))))); _injected_loop_counter --)
          {
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
             if((false))
              {
               if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
                return;
               barrier();
              }
            }
           else
            {
             if((false))
              {
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if((false))
                    continue;
                   if(((! (! (false)))))
                    break;
                   barrier();
                  }
                 barrier();
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((false))
                  continue;
                 if((false))
                  break;
                 continue;
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                continue;
               barrier();
              }
             if((false))
              {
               if((false))
                return;
               barrier();
              }
             if(((! (! ((injectionSwitch.x < injectionSwitch.y))))))
              {
               if((false))
                return;
               if((false))
                {
                 if((false))
                  return;
                 barrier();
                }
               atomicStore(buf[next_virtual_gid], uint((int(ivec2(((2) | (2)), 0)))), 4, 64, 4);
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             else
              {
               if((false))
                barrier();
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
             if((false))
              continue;
             if((false))
              {
               if((false))
                barrier();
               if((false))
                return;
               barrier();
              }
            }
           if((false))
            continue;
           if(((((float(mat4(injectionSwitch.x, 1.0, 1.0, (injectionSwitch.x), (dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0))), 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, (dot(vec4(1.0, 0.0, 0.0, 1.0), vec4(0.0, 1.0, 1.0, 0.0))), (min((injectionSwitch.y), (injectionSwitch.y))), 1.0, 1.0, length(vec3(0.0, 0.0, 0.0))))) > injectionSwitch.y))))
            {
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                break;
               return;
              }
             continue;
             if((false))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
             if((false))
              break;
            }
           if((((injectionSwitch.x > ((((injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch.y : (- 4198.3227)))))))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         if((false))
          {
           if((false))
            return;
           barrier();
          }
         if((((bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, false, false))))))
          {
           if(((injectionSwitch.x > (min(injectionSwitch, ((injectionSwitch) - vec2(0.0, 0.0)))).y)))
            {
            }
           else
            {
             if((false))
              {
               if((false))
                break;
               if((((injectionSwitch.x > injectionSwitch.y))))
                continue;
               barrier();
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             return;
             for(int _injected_loop_counter = 0; _injected_loop_counter < ((1 << (int(6))) >> (int(6))); _injected_loop_counter ++)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                break;
               if((false))
                barrier();
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                {
                 if((false))
                  continue;
                 return;
                }
               return;
              }
             if((false))
              return;
             if((false))
              barrier();
            }
           if((false))
            return;
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((false))
              barrier();
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
              }
             else
              {
               if(((! (! (false)))))
                {
                 if((false))
                  barrier();
                 if(((bool(((bool(false)) || false)))))
                  break;
                 barrier();
                 if(((! (! (false)))))
                  continue;
                 if((false))
                  return;
                }
               if((false))
                return;
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if((false))
                    barrier();
                   barrier();
                  }
                 return;
                }
               if((false))
                {
                 if((false))
                  return;
                 barrier();
                }
              }
             if((false))
              return;
             return;
             if((false))
              barrier();
            }
          }
         subgroupAll(false);
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((((false) || false)))
            {
             if((false))
              continue;
             break;
            }
           barrier();
          }
         if(true)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         else
          {
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
           barrier();
          }
         if(true)
          {
           if(true)
            {
             if(((((((injectionSwitch.x > injectionSwitch.y)) || ((! (! (false)))))) && true)))
              barrier();
            }
           else
            {
            }
          }
         else
          {
           if((false))
            {
             if((false))
              return;
             barrier();
            }
          }
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           return;
          }
         if((false))
          barrier();
        }
       else
        {
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if((false))
          barrier();
         if((false))
          barrier();
         if((! ((bool((bvec2(bvec3(bvec2(! ((((injectionSwitch.x > injectionSwitch.y)))), false), false))))))))
          {
           if((false))
            {
             if((false))
              continue;
             barrier();
            }
           if((false))
            {
             if(false)
              {
              }
             else
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                break;
               return;
              }
            }
           barrier();
           if((false))
            {
             do
              {
               barrier();
              }
             while(((injectionSwitch.x > injectionSwitch.y)));
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
            }
           if((false))
            break;
          }
         if((((false)) && true))
          return;
         do
          {
           for(int _injected_loop_counter = (1 ^ 0); _injected_loop_counter != 0; _injected_loop_counter --)
            {
             if((((((injectionSwitch.x > injectionSwitch.y))) || false)))
              {
               do
                {
                 barrier();
                }
               while(false);
              }
             if((false))
              {
               if((false))
                {
                 if(((bool(bvec3(((injectionSwitch.x > injectionSwitch.y)), true, ((injectionSwitch.x < injectionSwitch.y)))))))
                  {
                   if((false))
                    break;
                   barrier();
                  }
                 return;
                }
               if(((! (! (false)))))
                barrier();
               for(int _injected_loop_counter = ((1 << ((max(int(2), (min(int(2), int(2))))))) >> (int(2))); _injected_loop_counter > (0 >> (int(int((int(0)))))); _injected_loop_counter --)
                {
                 barrier();
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                return;
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                {
                 if((false))
                  continue;
                 barrier();
                }
               barrier();
              }
             if((((false) && true)))
              barrier();
            }
          }
         while(false);
         if((false))
          {
           do
            {
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if(((((true && (false))) || false)))
                  continue;
                 return;
                }
               barrier();
              }
             for(int _injected_loop_counter = 1; _injected_loop_counter != (0 << (int(8))); ((_injected_loop_counter --) >> 0))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((false))
                  continue;
                 barrier();
                }
               if((((false)) && true))
                barrier();
              }
            }
           while(false);
           if(true)
            {
             if((((false) || false)))
              return;
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             return;
             if((false))
              return;
             if((false))
              barrier();
            }
           else
            {
            }
          }
         if((false))
          {
           if((false))
            return;
           break;
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          {
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                break;
               barrier();
              }
             barrier();
            }
          }
         if((false))
          barrier();
         if((false))
          barrier();
         if((false))
          return;
         if((false))
          barrier();
         if((false))
          return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         atomicStore(buf[next_virtual_gid], uint(2), 4, ((64) >> 0), 4);
         if((false))
          {
           if(((false || (false))))
            {
             if(((true && (false))))
              break;
             if(true)
              {
               return;
              }
             else
              {
              }
            }
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
             return;
            }
           return;
           if((false))
            {
             if(true)
              {
               barrier();
               if((false))
                return;
              }
             else
              {
              }
            }
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
             if((false))
              barrier();
             barrier();
            }
          }
         if((((((false)) && true) || false)))
          {
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
           if((((! (! ((injectionSwitch.x > injectionSwitch.y)))))))
            return;
           barrier();
           if((((((false) || (((vec2(mat4(injectionSwitch, 0.0, 0.0, (injectionSwitch.y), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, exp(0.0), 1.0, 1.0, 0.0))).x > injectionSwitch.y))) || false))))
            {
             if((false))
              barrier();
             barrier();
            }
           if((false))
            barrier();
          }
         if((! (! ((((injectionSwitch.x > injectionSwitch.y)))))))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if(((bool(bvec4(((injectionSwitch.x > injectionSwitch.y)), false, true, true)))))
            continue;
           barrier();
          }
         if((false || ((! (! (true))))))
          {
           subgroupAll(true);
          }
         else
          {
           if((false))
            return;
           if((false))
            barrier();
           if((false))
            return;
           if((false))
            barrier();
           if((false))
            continue;
           if((((false)) || false))
            barrier();
           if((false))
            break;
          }
         if((false))
          return;
         if((false))
          {
           if(((! (! (false)))))
            barrier();
           if(false)
            {
            }
           else
            {
             barrier();
             if(((bool(bvec3(((false) || false), false, false)))))
              barrier();
             if((false))
              break;
            }
           if((false))
            break;
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(false)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         else
          {
           do
            {
             if((false))
              {
               if((false))
                break;
               if((false))
                return;
               barrier();
              }
             if((false))
              barrier();
            }
           while(false);
           if(((true && (false))))
            barrier();
           if((false))
            return;
           if((false))
            {
             if((false))
              continue;
             if((false))
              continue;
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             do
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                break;
               if(((! (! (false)))))
                continue;
               if((false))
                barrier();
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 return;
                 if((false))
                  break;
                 if((false))
                  continue;
                }
              }
             while(false);
             if((false))
              barrier();
             barrier();
            }
           if((false))
            return;
          }
         if((false))
          continue;
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        {
         do
          {
           return;
          }
         while((((true && (injectionSwitch.x > injectionSwitch.y)))));
        }
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
       if((false))
        barrier();
       if(false)
        {
        }
       else
        {
         if(((bool(bvec4(false, false, true, false)))))
          {
           if((false))
            barrier();
           do
            {
             return;
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           while((bool(bvec2((bool(bvec4(false, false, true, true))), true))));
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            return;
           barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
        }
      }
     if((((injectionSwitch.x > (min(injectionSwitch.y, injectionSwitch.y))))))
      return;
     if((false))
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
        }
       barrier();
      }
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(((! (! (false)))))
        barrier();
       if((false))
        barrier();
       return;
      }
     if((false))
      barrier();
     if((false))
      barrier();
     if((((((injectionSwitch.x > injectionSwitch.y))) || false)))
      {
       if((false))
        barrier();
       if((false))
        return;
       barrier();
      }
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
