#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = workgroup_base + (((((uint(uvec2((uint(uvec4((min(((subgroup_id * (((clamp(subgroup_size, ((true ? subgroup_size : (81540u))), subgroup_size))) - 0u)) >> (((min(0u, 0u))) ^ 0u)), ((uint(uvec2(min(subgroup_id * subgroup_size, (uint((max((injectionSwitch.x), (injectionSwitch.x)))) ^ (subgroup_id * subgroup_size))), (uint((injectionSwitch.x)) ^ 0u))))))), 0u, 0u, 1u))), 1u))) - 0u)) - 0u)) + subgroup_local_id;
 uint next_virtual_gid = (max(((false ? (workgroup_base) : (((0u + (workgroup_base))) / 1u))), ((false ? (workgroup_base) : ((workgroup_base) / 1u))))) + subgroup_id * subgroup_size + ((((0u | ((min((subgroup_local_id + 1) % subgroup_size, (max((subgroup_local_id + 1), (subgroup_local_id + 1))) % ((subgroup_size) - ((0u >> (uint(5u))) << (uint(7u))))))))) | (((max(0u, 0u)) - 0u))));
 buf[virtual_gid] = 1;
 do
  {
   if(subgroup_local_id + ((~ (~ (int(ivec2(1, 1)))))) < subgroup_size)
    {
     if((((! (! (((injectionSwitch.x < injectionSwitch.y)))))) && true))
      {
       if(((true) || false))
        {
         for(int _injected_loop_counter = ((clamp(((((0 | (((((0 ^ ((int((injectionSwitch.y))) / 1)))) << (int(int(int((injectionSwitch.x)))))))) << (((((int(1)) | (int(1)))) - 0)))) >> 0) >> (((clamp((int(1)) / (0 ^ 1), (int(1)) / (((0 ^ 1) - (0 & 30067))), (int(1)) / (((0) << (int(((int(0)) ^ 0)))) ^ 1))))), (((((((((int((injectionSwitch.y))) / 1)) << ((((true ? int((injectionSwitch.x)) : (46571)))) << 0)) << (((((int(1)) | (max((int(1)), (int(1)))))) - 0)))) * 1) >> (((clamp((int(1)) / (0 ^ 1), (int(1)) / (0 ^ 1), (int(1)) / (clamp(((((~ (~ (0 ^ 1)))) + 0)), ((((~ (~ (0 ^ 1)))) + 0)), ((((~ (~ (0 ^ 1)))) + 0))))))))) | 0), (((~ (~ ((((((~ (~ (((((((int(ivec3(((int(((((clamp((min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y))) - determinant(mat4(0.0, 0.0, 0.0, (injectionSwitch.x), 0.0, 0.0, 0.0, 0.0, 0.0, (mix(float((109.010)), float((((dot(vec4(0.0, 0.0, 0.0, (((min(true ? ((false ? (- 9.7) : 1.0)) : (8.5), true ? ((false ? (- 9.7) : 1.0)) : (8.5)))))), vec4((max(1.0, 1.0)), 1.0, 1.0, 0.0)))) + 0.0)), bool(((injectionSwitch.x < injectionSwitch.y))))), 0.0, 0.0, 0.0, log(1.0), 1.0, 0.0)))))) / 1), 1, 1))) | 0))) << int((injectionSwitch.x))) << (((max(((((max(int(ivec2((int(1)), 0)), int(ivec2((int(1)), 0))))) | (int(1)))), ((((max(int(ivec2((int(1)), 0)), int(ivec2((max((int(1)), (int(1)))), 0))))) | (int(1)))))) - 0)))))) | 0))) / 1))))) ^ 0) >> (((clamp((int(1)) / ((0 | (((0) | (0)) ^ ((((1) >> 0)) | 0)))), (int(1)) / (0 ^ 1), (int(1)) / (0 ^ 1)))))))); (true && ((bool(bvec3(_injected_loop_counter != 0, true, false))))); _injected_loop_counter --)
          {
           atomicStore(buf[next_virtual_gid], uint(2), (0 | ((0 | (4)))), (min(64, 64)), 4);
          }
        }
       else
        {
        }
      }
     else
      {
      }
     subgroupAll(false);
    }
   else
    {
     atomicStore(buf[next_virtual_gid], ((((true ? uint(2) : (num_workgroup)))) | (uint(2))), 4, 64, (((int(ivec3(4, 0, (~ (~ (1))))))) >> (min(((false ? (83700) : 0)), 0))));
     do
      {
       for(int _injected_loop_counter = 1; _injected_loop_counter != int(((vec2(mat3x2((max(injectionSwitch, injectionSwitch)), log(1.0), 1.0, 0.0, 1.0))).x)); _injected_loop_counter --)
        {
         for(int _injected_loop_counter = (0 << (int(8))); _injected_loop_counter != ((1 << (int(3))) >> (((((min(((int(ivec4(int(3), (int(((ivec3(1, 1, 1)) | (ivec3(1, 1, 1))))), 0, 0)))) | ((int(ivec4(int(3), (int(((ivec3(1, 1, 1)) | (ivec3(1, 1, 1))))), 0, 0)))), ((int(ivec4(int(3), (int(((ivec3(1, 1, 1)) | (ivec3(1, 1, 1))))), 0, 0)))) | ((int(ivec4(int(3), (int(((ivec3(1, 1, 1)) | (ivec3(1, 1, 1))))), 0, 0)))))))) >> 0))); (((false || ((! (! (false))))) ? (_injected_loop_counter) : _injected_loop_counter ++)))
          {
           subgroupAll(true);
          }
        }
      }
     while(false);
    }
  }
 while(false);
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
