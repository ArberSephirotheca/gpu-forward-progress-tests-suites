#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 if((false))
  return;
 if((((((false || (((! (((! (false))) || false))) && ((injectionSwitch.x < injectionSwitch.y)))))) || false)))
  return;
 if((false))
  return;
 uint workgroup_base = (max(workgroup_size, ((true ? workgroup_size : (subgroup_local_id))))) * workgroup_id;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if(((((max(((mix(float((786.115)), float(float(vec2(injectionSwitch.x, abs(0.0)))), bool(true)))), injectionSwitch.x)) > (vec2(injectionSwitch[0], injectionSwitch[1])).y))))
  return;
 if(((! ((((true && (! (((bool((bvec2(bvec4(((bvec2(bvec4(bvec2(bvec4(bvec2((false), true), false, false)), false, true)))), false, true)))))))))) && true))) || false))
  {
   if((false))
    return;
   if((false))
    {
     if((! (! (((((bool(bvec3(injectionSwitch.x > ((((((((injectionSwitch) / vec2(1.0, 1.0))) - vec2(0.0, 0.0)).x > injectionSwitch.y)) ? (exp2(vec2(- 9589.3298, 3517.7338))) : ((true ? ((injectionSwitch) * vec2(1.0, 1.0)) : (injectionSwitch))))).y, false, true))))))))))
      return;
     if((((((false) || false) && true))))
      return;
     return;
    }
   return;
  }
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 uint next_virtual_gid = (uint(uint(workgroup_base + (uint(((uvec2((((min(subgroup_id, subgroup_id)) * subgroup_size) | ((min(subgroup_id, subgroup_id)) * ((subgroup_size) >> uint((injectionSwitch.x))))), ((1u) | (1u)))) | uvec2(0u, 0u))))))) + (max((((true ? (max(0u, (clamp(0u, 0u, 0u)))) : ((((clamp(virtual_gid, (0u ^ (virtual_gid)), (min(virtual_gid, virtual_gid))))) ^ (0u >> (uint(1u))))))) ^ (((subgroup_local_id + 1) % subgroup_size))), (((true ? 0u : (virtual_gid))) ^ (((((true ? (0u ^ (subgroup_local_id + 1)) : (((atomicOr(workgroup_base, workgroup_base)) ^ 0u))))) % subgroup_size)))));
 if((false))
  {
   if((((! ((true && (! ((bool(((bvec3(bvec4((bvec3(bvec3(bvec3(bvec3(bvec3((! (! (((bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, false, true))))))), false, true)))))), true))))))))))))))
    return;
   return;
  }
 if((((((injectionSwitch.x > injectionSwitch.y)))) && true))
  {
   if((((((injectionSwitch.x > injectionSwitch.y) && true)))))
    return;
   return;
  }
 buf[virtual_gid] = (max(1, 1));
 if((false))
  return;
 if(((((! (! (injectionSwitch.x > injectionSwitch.y)))))))
  return;
 if(subgroup_local_id + ((((0 | ((((~ (~ ((((int((ivec4(0, 0, 0, 0) | (ivec4((1), 0, 1, 0)))))) | ((((1))) ^ 0))))))) ^ 0))) * 1) ^ 0) < subgroup_size)
  {
   atomicStore(buf[next_virtual_gid], uint(((2) << 0)), (max(4, 4)), 64, (~ (min(((0 ^ (~ ((((clamp((((((int(ivec3(4, 1, 0)))) << 0)) - 0), (((((int(ivec3(4, 1, 0)))) << 0)) - 0), ((0 ^ (((((int(ivec3(4, 1, 0)))) << 0)) - 0)))))) | ((((((int(ivec3(4, 1, 0)))) << 0)) - 0))))))), (((min((((int((min(int(0), int(0))))) - 0)), 0)) ^ (~ (((((((max((clamp((min(((((int(ivec3(((min(0 | (4), 0 | (4)))), 1, 0))))) | (((int(ivec3(((min(0 | (4), 0 | (4)))), 1, 0)))))), ((((int(ivec3(4, 1, 0))))) | 0))), ((int(ivec3(4, 1, 0)))), ((int(ivec3(4, 1, 0)))))), (clamp((min(((((int(ivec3(((min(0 | (4), 0 | (4)))), 1, 0))))) | (((int(ivec3(((min(0 | (4), 0 | (4)))), 1, 0)))))), ((((int(ivec3(4, 1, 0))))) | 0))), ((int(ivec3(4, 1, 0)))), ((int(ivec3(4, 1, 0))))))))) | ((clamp((min(((((int(ivec3(((min(0 | (4), 0 | (4)))), 1, 0))))) | (((int(ivec3(((min(0 | (4), 0 | (4)))), 1, 0)))))), ((((int(ivec3(4, 1, 0))))) | 0))), ((int(ivec3(4, 1, 0)))), ((int(ivec3(4, 1, 0)))))))) << 0)) - 0)))))))));
   subgroupAll(false);
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
   atomicStore(buf[(((min(next_virtual_gid, next_virtual_gid))) | 0u)], (((~ (((~ (uint(2))) >> 0u))) + 0u)), 4, 64, 4);
   if(((! (! (true))) && ((true && (((false || (false))))))))
    return;
   if((((false) || ((injectionSwitch.x > (vec2((clamp(injectionSwitch[0], injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1])).y)))))
    return;
   subgroupAll((true && ((((((false || (true)) || ((injectionSwitch.x > injectionSwitch.y))))) || (((! (((! (injectionSwitch.x > injectionSwitch.y)) || false)))))))));
   if((((bool(bvec4(bool(bvec4(false, (((injectionSwitch.x > (mix(vec2((injectionSwitch)[0], (7.4)), vec2((9.4), (injectionSwitch)[1]), bvec2(false, true))).y)) || (false)), true, true)), false, (! ((((((bool(bvec3(! (false), true, false)))) && true)) || false))), true))))))
    return;
   if(((((clamp(injectionSwitch, injectionSwitch, (((clamp(mix(vec2(((max((1668.5179), (((((1668.5179)) - 0.0)) / 1.0)))), ((injectionSwitch))[1]), vec2(((injectionSwitch))[0], (- 684.218)), bvec2(((injectionSwitch.x < injectionSwitch.y)), false)), (clamp((min(mix(vec2(((max((1668.5179), (((((1668.5179)) - 0.0)) / 1.0)))), ((injectionSwitch))[1]), vec2(((injectionSwitch))[0], (- 684.218)), bvec2(((injectionSwitch.x < injectionSwitch.y)), false)), (min(mix(vec2(((max((1668.5179), (((((1668.5179)) - 0.0)) / 1.0)))), ((injectionSwitch))[1]), vec2(((injectionSwitch))[0], (- 684.218)), bvec2(((injectionSwitch.x < injectionSwitch.y)), false)), mix(vec2(((max((1668.5179), (((((1668.5179)) - 0.0)) / 1.0)))), ((injectionSwitch))[1]), vec2(((injectionSwitch))[0], (- 684.218)), bvec2(((injectionSwitch.x < injectionSwitch.y)), false)))))), mix(vec2(((max((1668.5179), (((((1668.5179)) - 0.0)) / 1.0)))), ((injectionSwitch))[1]), vec2(((injectionSwitch))[0], (- 684.218)), bvec2(((injectionSwitch.x < injectionSwitch.y)), false)), ((true ? mix(vec2(((max((1668.5179), (((((1668.5179)) - 0.0)) / 1.0)))), ((injectionSwitch))[1]), vec2(((injectionSwitch))[0], (- 684.218)), bvec2(((injectionSwitch.x < injectionSwitch.y)), false)) : (refract(vec2(9.9, 5.5), injectionSwitch, - 4965.2742)))))), mix(vec2(((max((1668.5179), (((((1668.5179)) - 0.0)) / 1.0)))), ((injectionSwitch))[1]), vec2(((injectionSwitch))[0], (- 684.218)), bvec2(((injectionSwitch.x < injectionSwitch.y)), false))))) / ((mix(vec2((clamp(((vec2(1.0, 1.0)) * mat2(1.0)), vec2(1.0, 1.0), vec2(1.0, 1.0)))[0], (clamp(((vec2(1.0, 1.0)) * mat2(1.0)), vec2(1.0, 1.0), vec2(1.0, 1.0)))[1]), vec2(((- 64.24 * 6.0)), (((clamp(17.51 / 5768.4853, (mix(float(17.51 / 5768.4853), float((- 409.098)), bool(false))), 17.51 / 5768.4853))))), bvec2(false, false))))))).x > injectionSwitch.y))))
    {
     if((((false) && true)))
      return;
     return;
     if((false))
      return;
    }
   if((false))
    return;
   if((false))
    return;
   if((false))
    {
     if((((false)) || ((injectionSwitch.x > (mix(float((((true ? (0.0 + (max((float((((transpose(transpose(mat4(injectionSwitch.y, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, 0.0, abs(0.0), sqrt(1.0), 0.0, 0.0, 1.0, tan(0.0), 1.0, sqrt(1.0), 0.0, 0.0, 0.0, sqrt(1.0)))))) - mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), injectionSwitch.y))) : (- 8.2))))), (clamp(float((2.4)), float((2.4)), ((float((2.4))) - 0.0))), (false || ((! (false || ((! (bool(bvec4(((false || (bool((bool(bvec3(false, false, true))))))), false, true, true)))))))))))))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     return;
    }
   if((false))
    return;
   if((((injectionSwitch.x > (min((float(float(injectionSwitch.y))), ((injectionSwitch.y) / 1.0)))))))
    return;
   if((false))
    return;
  }
 if((false))
  return;
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
