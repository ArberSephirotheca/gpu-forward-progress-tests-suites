#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((false))
  return;
 if((false))
  {
   if((false))
    return;
   return;
  }
 if((bool(((bvec3((bvec3(bvec4((bvec3(bvec3(bvec3(bvec3((bvec3(bvec3(bvec3(bvec3((((false)) && ((true) || false)), true, ((true) || (! (! ((! (! (((injectionSwitch.x > injectionSwitch.y))))))))))))))))))), false)))))))))
  return;
 uint subgroup_id = gl_SubgroupID;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  return;
 if(((((! (((! (((! ((bool(bvec4(false, false, false, true))))) || false))) || (! ((((mix(float((- 6.2)), float((min(injectionSwitch.x, injectionSwitch.x))), bool(true)))) / sqrt(sqrt(1.0))) > injectionSwitch.y)))))))))
  {
   if((false))
    return;
   return;
  }
 if((false))
  return;
 if((false))
  {
   if((false))
    return;
   if(((bool((bvec2(bvec3(bvec2(false, false), (! (! (true))))))))))
    {
     if((false))
      return;
     return;
    }
   if((false))
    return;
   if((false))
    return;
   return;
   if((((((injectionSwitch.x) - (injectionSwitch.x)) > injectionSwitch.y))))
    return;
   if((false))
    return;
  }
 if((false))
  {
   if((false))
    return;
   return;
  }
 if(((true && (((injectionSwitch.x > injectionSwitch.y))))))
  return;
 if((false))
  return;
 if((((((true && (((true && (bool(((bvec2(bvec4(bvec2(bvec3(bvec2((injectionSwitch.x > injectionSwitch.y), true), true)), true, false)))))))))) && true)))))
  return;
 if(((! ((! (! (! ((bool(bvec2(false, true)))))))))))
  return;
 uint subgroup_size = gl_SubgroupSize;
 if((false))
  return;
 if((false))
  {
   if((false))
    return;
   if((false))
    return;
   return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(((((((((min((max(injectionSwitch, injectionSwitch)), injectionSwitch)).x > injectionSwitch.y)) || false)))) || false))
  {
   if((((injectionSwitch.x > (vec2(injectionSwitch[0], injectionSwitch[1])).y))))
    return;
   return;
  }
 if((false))
  return;
 uint num_workgroup = (((~ (~ ((clamp(((false ? (uvec3(111768u, 112042u, 73393u)) : (~ (~ ((uvec3(((uvec3(gl_NumWorkGroups)) >> uvec3(0u, 0u, 0u))))))))), (clamp(((((min(~ ((~ (~ (~ (~ ((clamp(~ ((gl_NumWorkGroups)), ~ ((gl_NumWorkGroups)), ~ ((gl_NumWorkGroups)))))))))), ~ (~ (gl_NumWorkGroups))))) - uvec3((injectionSwitch.x), (min((injectionSwitch.x), ((true ? (injectionSwitch.x) : (- 93.22))))), ((true ? ((max(injectionSwitch, injectionSwitch)).x) : (- 819.186)))))), ((((((~ (~ ((((((((true && ((! (! (injectionSwitch.x < injectionSwitch.y))))))) ? ((((~ (~ (gl_NumWorkGroups)))) | uvec3(0u, 0u, 0u)) << uvec3(0u, 0u, 0u)) : (uvec3(120498u, 94836u, 25731u))))) ^ uvec3((injectionSwitch.x), (injectionSwitch.x), (((false ? (injectionSwitch) : injectionSwitch)).x)))))))) * uvec3(1u, 1u, 1u))) | (((~ (~ ((((((((true && ((! (! (injectionSwitch.x < injectionSwitch.y))))))) ? ((((~ (~ (gl_NumWorkGroups)))) | uvec3(0u, 0u, 0u)) << uvec3(0u, 0u, 0u)) : (uvec3(120498u, 94836u, 25731u))))) ^ uvec3((injectionSwitch.x), (injectionSwitch.x), (((false ? (injectionSwitch) : injectionSwitch)).x))))))))), (~ (~ (gl_NumWorkGroups))))), (((uvec3(((uvec3((uvec3(0u, 0u, 0u) | ((((~ (~ (gl_NumWorkGroups))) / uvec3(1u, ((1u) + 0u), 1u))))))) ^ uvec3(0u, 0u, 0u))))) / uvec3(1u, 1u, 1u)))))))) - uvec3((((false ? (157128u) : (((((max((((0u << (uint((((min(2u, 2u))) | (2u))))) ^ (0u))), (((0u << (uint(2u))) ^ (0u))))) << 0u) | ((max((((((max((0u << ((~ (~ (uint(2u)))))), (0u << ((~ (~ (uint(2u)))))))) ^ (0u)))) + (0u | 0u)), (((0u << (uint(2u))) ^ (0u))))) << 0u))) >> 0u)))), (clamp((min(0u, 0u)), (((((0u ^ (0u))) | (((true ? (min((~ (~ ((~ (~ (0u)))))), 0u)) : (((subgroup_id)) - 0u)))))) | (0u)), 0u)), 0u)).x;
 if((((((injectionSwitch.x < injectionSwitch.y)) && ((injectionSwitch.x > injectionSwitch.y))))))
  return;
 uint workgroup_size = gl_WorkGroupSize.x;
 if((((false)) && true))
  {
   if((false))
    {
     if((false))
      return;
     return;
    }
   if(((((false || (injectionSwitch.x > injectionSwitch.y))))))
    return;
   if((false))
    return;
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((((false) || false)))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = (clamp(((workgroup_size * workgroup_id) << (~ (~ ((((((((uint(((uvec3(0u, 0u, 0u) >> (uvec3(0u))) | (uvec3(0u, 0u, ((1u << (uint(4u))) >> (uint(4u)))))))) / 1u)) | 0u))) ^ 0u))))), (((0u) << 0u) + (((workgroup_size * workgroup_id) << (((((((uint(((uvec3(0u, 0u, 0u) >> (clamp((uvec3(0u)), (uvec3(0u)), (uvec3(0u))))) | (uvec3(0u, 0u, ((1u << (uint(4u))) >> (max((uint(4u)), (uint(4u)))))))))) / 1u)) | 0u))) ^ 0u)))), (0u | (((workgroup_size * ((((1u | 1u) << (uint(4u))) >> (uint(4u))) * (workgroup_id))) << (((((((uint(((uvec3(0u, 0u, 0u) >> (uvec3(0u))) | (uvec3(0u, 0u, ((1u << (uint(4u))) >> (uint(4u)))))))) / 1u)) | 0u))) ^ 0u))))));
 uint virtual_gid = (0u + (workgroup_base)) + ((max(~ (~ ((true ? (subgroup_id * subgroup_size) : (workgroup_size)))), ~ (~ ((true ? ((max(subgroup_id, subgroup_id)) * subgroup_size) : (workgroup_size))))))) + subgroup_local_id;
 uint next_virtual_gid = (((((true ? min(((workgroup_base) >> 0u) + subgroup_id * subgroup_size, workgroup_base + (((false ? (atomicAnd(subgroup_size, subgroup_size)) : (clamp(0u, 0u, 0u)))) ^ (subgroup_id * subgroup_size))) : (subgroup_id)))) + ((subgroup_local_id + 1) % subgroup_size)) + uint((injectionSwitch.x)));
 ((0u & 16823u) | (((buf[virtual_gid] = 1) - (0u & 14314u))));
 if((max(subgroup_local_id + 1, subgroup_local_id + 1)) < subgroup_size)
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   atomicStore(buf[next_virtual_gid], uint(2), 4, (~ (~ (int(int((clamp(((((int(int(64))) * 1))), ((((int(int(64))) * 1))), ((((int(int(64))) * 1)))))))))), (~ (((int(ivec3((max((~ ((0 ^ (4)))) - 0, (~ (4)) - 0)), 1, 1)))))));
   if((false))
    return;
   subgroupAll(false);
  }
 else
  {
   atomicStore(buf[next_virtual_gid], ((((1u * (1u * ((max((clamp(uint(((2) << 0)), uint(((2) << 0)), ((uint(((2) << 0))) | (uint(((2) << 0)))))), uint(((2) << 0))))))))) >> (0u >> ((((injectionSwitch.x < injectionSwitch.y)) ? (uint(6u)) : (workgroup_id))))), 4, 64, 4);
   if((bool(bvec3((false), false, ((injectionSwitch.x < injectionSwitch.y))))))
    {
     if((true && ((((((false)) || false))) && true)))
      return;
     return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    return;
   subgroupAll((true && (true)));
  }
 if((false))
  return;
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
