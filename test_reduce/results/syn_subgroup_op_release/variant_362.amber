#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((false))
  barrier();
 uvec3 GLF_merged3_0_1_13_1_1_11_2_1_13num_workgroupsubgroup_idsubgroup_size;
 if((false))
  barrier();
 if((false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if((false))
  barrier();
 GLF_merged3_0_1_13_1_1_11_2_1_13num_workgroupsubgroup_idsubgroup_size.y = subgroup_id;
 if((((injectionSwitch.x > injectionSwitch.y)) || ((false))))
  return;
 if((((false) && true)))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  {
   if((false))
    return;
   barrier();
  }
 if((bool(bvec3((! (! (! ((bool((true && (bool((! (((true && (bool((bvec3(bvec3(bvec3((false), ((injectionSwitch.x < injectionSwitch.y)), true))))))))))))))))))), false, true))))
  {
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   return;
  }
 uint subgroup_size = gl_SubgroupSize;
 if((false))
  barrier();
 if((false))
  barrier();
 GLF_merged3_0_1_13_1_1_11_2_1_13num_workgroupsubgroup_idsubgroup_size.z = subgroup_size;
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 if((false))
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      return;
     barrier();
    }
   barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 GLF_merged3_0_1_13_1_1_11_2_1_13num_workgroupsubgroup_idsubgroup_size.x = num_workgroup;
 uint workgroup_size = ((((false) || false) ? ((~ (~ (min((GLF_merged3_0_1_13_1_1_11_2_1_13num_workgroupsubgroup_idsubgroup_size.x), (((GLF_merged3_0_1_13_1_1_11_2_1_13num_workgroupsubgroup_idsubgroup_size.x)) * 1u)))))) : gl_WorkGroupSize.x));
 if((false))
  {
   if(((((clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
    barrier();
   if((bool(bvec3((bool(bvec4((false), true, true, false))), ((injectionSwitch.x > injectionSwitch.y)), ((injectionSwitch.x < injectionSwitch.y))))))
    {
     if((false))
      return;
     return;
    }
   barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     barrier();
    }
  }
 if((false))
  {
   if((false))
    {
     if((false))
      barrier();
     return;
    }
   return;
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    {
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if((false))
  barrier();
 uint workgroup_base = workgroup_size * workgroup_id;
 if((false))
  {
   if(((! (bool(bvec3(((bool(bvec4(! (((injectionSwitch.x > injectionSwitch.y))), true, true, true)))), true, false))))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((((false) || false)))
  return;
 if((false))
  {
   if((false))
    {
     if((((((injectionSwitch.x) * 1.0) > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(((bool(bvec4(((false) || false), false, true, false)))))
      return;
     return;
    }
   if((((((injectionSwitch.x > injectionSwitch.y)))) || false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   if((false))
    barrier();
   if(((((bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)))))))
    {
     if((false))
      barrier();
     barrier();
    }
   return;
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
  }
 if((false))
  barrier();
 if(((! (! ((false || (false)))))))
  {
   if((false))
    barrier();
   barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     barrier();
    }
  }
 if(((true && (false))))
  {
   if((false))
    barrier();
   if((false))
    {
     if((false))
      return;
     barrier();
    }
   if((false))
    {
     if((false))
      return;
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   if((((false)) && true))
    {
     if((false))
      barrier();
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     barrier();
    }
   barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(((((bool(bvec3(false, true, true))) && true))))
    barrier();
  }
 if((((false)) && true))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(((bool(bvec2(false, false)))))
    return;
   return;
  }
 uint virtual_gid = workgroup_base + GLF_merged3_0_1_13_1_1_11_2_1_13num_workgroupsubgroup_idsubgroup_size.y * GLF_merged3_0_1_13_1_1_11_2_1_13num_workgroupsubgroup_idsubgroup_size.z + subgroup_local_id;
 if((false))
  barrier();
 if(((bool((bvec2(bvec4(bvec2(bool(bvec3((false), ((injectionSwitch.x > injectionSwitch.y)), true)), false), ((injectionSwitch.x > injectionSwitch.y)), false)))))))
  {
   if((false))
    barrier();
   return;
   if((false))
    barrier();
  }
 if(((! ((bool(bvec3(((! (((! (! (bool((bvec3(bvec4(bvec3((((bool(bvec3(bool(bool(false)), false, false)))) || (false)), ((! ((bool(bvec2(! (true && ((! (! (false))))), true)))))), true), true))))))))))) && ((((injectionSwitch.x) - (injectionSwitch.x)) < injectionSwitch.y)), true, true)))))))
  {
   if((false))
    {
     if((false))
      barrier();
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
       if((((injectionSwitch.x > (vec2(injectionSwitch[0], (mix(float(injectionSwitch[1]), float((89.94)), bool(false))))).y))))
        return;
       if((false))
        barrier();
       return;
      }
     return;
    }
   if((((false)) || false))
    barrier();
   return;
   if((false))
    barrier();
   if((false))
    return;
   if((false))
    barrier();
  }
 if((false))
  barrier();
 if((false))
  {
   if((false))
    {
     if((false))
      barrier();
     return;
    }
   if(((((max(injectionSwitch.x, (clamp(injectionSwitch.x, injectionSwitch.x, ((false ? (mod(injectionSwitch, unpackSnorm2x16(workgroup_base))) : injectionSwitch)).x)))) > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((true && ((false))))
    barrier();
   barrier();
  }
 if((false || (((bool(bvec2((((! (! (bool(bvec2(((! (! ((false || (((injectionSwitch.x > injectionSwitch.y)))))))), ((injectionSwitch.x < injectionSwitch.y)))))))) || false), true)))))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    {
     if((false))
      barrier();
     return;
    }
   barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(((bool(bvec4(false, true, true, false)))))
  {
   if((false))
    {
     if((false))
      return;
     if((false))
      barrier();
     barrier();
    }
   if((! (! ((false)))))
    {
     if((false))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       return;
      }
     barrier();
     if(((false || (false))))
      barrier();
     if((((((injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       barrier();
      }
     if((false))
      barrier();
     if((false))
      barrier();
    }
   if((bool(bvec4((false), true, false, ((injectionSwitch.x < injectionSwitch.y))))))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    {
     if((false))
      barrier();
     if((((false)) && true))
      return;
     return;
    }
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      {
       if((false))
        return;
       barrier();
      }
     return;
     if((false))
      return;
    }
   if(((bool(bvec4(false, true, false, true)))))
    return;
   if(((bool(bool(false)))))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((((((injectionSwitch.x > injectionSwitch.y))) || false)))
    barrier();
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint next_virtual_gid = workgroup_base + GLF_merged3_0_1_13_1_1_11_2_1_13num_workgroupsubgroup_idsubgroup_size.y * ((((GLF_merged3_0_1_13_1_1_11_2_1_13num_workgroupsubgroup_idsubgroup_size.z) + 0u)) | ((((false ? (virtual_gid) : (GLF_merged3_0_1_13_1_1_11_2_1_13num_workgroupsubgroup_idsubgroup_size.z))) + 0u))) + ((subgroup_local_id + 1) % ((((GLF_merged3_0_1_13_1_1_11_2_1_13num_workgroupsubgroup_idsubgroup_size.z) - 0u)) | (GLF_merged3_0_1_13_1_1_11_2_1_13num_workgroupsubgroup_idsubgroup_size.z)));
 if((false))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   barrier();
   if((false))
    return;
  }
 if((false))
  barrier();
 if((false))
  barrier();
 buf[virtual_gid] = 1;
 if(subgroup_local_id + 1 < GLF_merged3_0_1_13_1_1_11_2_1_13num_workgroupsubgroup_idsubgroup_size.z)
  {
   if((false))
    {
     if(((! (! ((! (! (((false) || false)))))))))
      {
       if((false))
        barrier();
       barrier();
      }
     barrier();
    }
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   atomicStore(buf[next_virtual_gid], uint(2), (0 ^ ((max((~ (~ ((~ (~ (4)))))), 4)))), 64, (int((ivec2(ivec3(ivec2((clamp(4, 4, 4)), 0), 0))))));
   if((false))
    {
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false || (((((false || ((! ((! (! ((! (! (! (bool(bvec2((((! (! ((true && (((bool(bool(((false))))) || ((injectionSwitch.x > injectionSwitch.y))))))))) || false), ((injectionSwitch.x < injectionSwitch.y)))))))))))))))) || ((injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     barrier();
    }
   if((! ((! (! (! ((bool(bool((((((injectionSwitch.x > injectionSwitch.y)))) && true)))))))))))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   if((false))
    return;
   subgroupAll(false);
   if((false))
    barrier();
   if((false))
    barrier();
  }
 else
  {
   if((false))
    barrier();
   if((bool(bvec2(((! (! (bool(bvec4((((injectionSwitch.x > injectionSwitch.y))), false, ((injectionSwitch.x < injectionSwitch.y)), false)))))), ((false) && true)))))
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     if((false))
      barrier();
     if((false))
      barrier();
     barrier();
    }
   if((((false) && true)))
    barrier();
   atomicStore(buf[next_virtual_gid], ((false ? (virtual_gid) : uint((max((min(2, 2)), (min(2, 2))))))), 4, 64, 4);
   if((((true) && true) && ((false))))
    {
     if(((((((injectionSwitch.x > injectionSwitch.y)) || (injectionSwitch.x > injectionSwitch.y))))))
      {
       if(((((max(((false ? (- 7.5) : injectionSwitch.x)), ((injectionSwitch.x) / (((float(mat4x2(1.0, 0.0, 1.0, 0.0, 0.0, round(length(normalize(1.0))), 0.0, 0.0))) - 0.0))))) > injectionSwitch.y))))
        barrier();
       return;
      }
     if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
      barrier();
     if((false))
      {
       if((((((injectionSwitch.x > injectionSwitch.y))) && true)))
        barrier();
       barrier();
      }
     barrier();
    }
   subgroupAll(true);
   if(((! ((! (! (! ((! ((bool(bvec2(((! (((((((bool(bvec4(bool(bvec3(injectionSwitch.x > (clamp((float(vec4(injectionSwitch.y, 1.0, 0.0, 0.0))), (min(injectionSwitch.y, (clamp(((((injectionSwitch.y) * (max(1.0, (max(1.0, 1.0)))))) * 1.0), ((true ? ((injectionSwitch.y) * 1.0) : (3.6))), (((max(injectionSwitch.y, injectionSwitch.y))) * 1.0))))), injectionSwitch.y)), false, true)), true, false, true))))))) || false))) && true), false)))))))))))))
    {
     if(((true && ((((! ((bool(bvec4(! (false), false, true, true)))))) || false)))))
      {
       if(((true && ((((((injectionSwitch.x < injectionSwitch.y)) && ((true && ((! (! (false)))))))) && true)))))
        barrier();
       if(((((((mat2(1.0) * (injectionSwitch)) * vec2(1.0, 1.0))).x > injectionSwitch.y))))
        {
         if((false))
          return;
         barrier();
         if((false))
          barrier();
        }
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
       if((false))
        barrier();
       if((false))
        return;
       if(((((((bool(bvec2(false, false)))) || (bool(bool(false))))) && true)))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
       barrier();
      }
     return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((((bool(bvec3(true && (false), false, false))))))
      barrier();
     if((((((((injectionSwitch.x > injectionSwitch.y)) ? (atanh(vec2(9.0, - 6.0))) : (clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
    }
   if(((! (! (bool(((bvec2(bvec4((bvec2(bvec2(((bvec2(bvec3(bvec2(bvec3((bvec2(bvec3(bvec2(bvec3(bvec2(((! (! (false)))), true), true)), true))), false)), true))))))), true, false))))))))))
    {
     if((false))
      {
       if((false))
        {
         if((false))
          barrier();
         if((false))
          return;
         barrier();
        }
       barrier();
      }
     if((false))
      return;
     if((false))
      {
       if((((((((true ? injectionSwitch : (injectionSwitch)))) - vec2(0.0, 0.0)).x > (max(injectionSwitch, ((true ? injectionSwitch : (vec2(- 3.4, - 3.9)))))).y))))
        barrier();
       if((false))
        barrier();
       barrier();
      }
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
       if((false))
        barrier();
       barrier();
      }
     if((false))
      barrier();
     if(((true && (((injectionSwitch.x > injectionSwitch.y))))))
      barrier();
     barrier();
    }
  }
 if((false))
  barrier();
 if((false))
  barrier();
 if((((((injectionSwitch.x > injectionSwitch.y))) || false)))
  {
   if(((false || ((! (! (false)))))))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   return;
   if((((injectionSwitch.x > (min(injectionSwitch, injectionSwitch)).y))))
    return;
   if((false))
    barrier();
  }
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   if((false))
    {
     if(((((! (! ((((! ((! (! (! (injectionSwitch.x > injectionSwitch.y))))))) && true))))))))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   return;
  }
 if((false))
  barrier();
 if((false))
  return;
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
