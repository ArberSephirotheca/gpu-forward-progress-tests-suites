#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((((false) || false)))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((false || ((false))))
  {
   if((false))
    {
     if(((! (! (false)))))
      {
       if((((false) && true)))
        barrier();
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     barrier();
    }
   if((false))
    barrier();
   barrier();
   if((false))
    barrier();
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = ((max((gl_WorkGroupSize) | (gl_WorkGroupSize), (gl_WorkGroupSize) | (gl_WorkGroupSize)))).x;
 uint workgroup_id = gl_WorkGroupID.x;
 if((false))
  barrier();
 uint workgroup_base = (clamp(((workgroup_size * workgroup_id) >> 0u), workgroup_size * workgroup_id, (min(workgroup_size * workgroup_id, workgroup_size * workgroup_id))));
 uint virtual_gid = workgroup_base + ((subgroup_id) - 0u) * subgroup_size + subgroup_local_id;
 if(((bool(bool(false)))))
  barrier();
 if((((((injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
 if(((((false || ((true && ((bool((false || (bool(((((true && (bool(bool(injectionSwitch.x > injectionSwitch.y)))))) || false))))))))))))))
  {
   if((false))
    barrier();
   barrier();
   if((((! ((true && (! ((injectionSwitch.x > (vec2(((mat2x3(injectionSwitch, 0.0, 1.0, 1.0, 1.0)) * mat2(1.0)))).y)))))))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 uint next_virtual_gid = ((((true ? ((true ? (((((min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)) ? (atomicCompSwap(subgroup_local_id, workgroup_base, 189064u)) : (~ ((false ? (workgroup_id) : (~ ((min(workgroup_base + (0u | (subgroup_id)) * subgroup_size, workgroup_base + (0u | (subgroup_id)) * subgroup_size))))))))) + ((((subgroup_local_id + 1) % subgroup_size) | ((min((((subgroup_local_id + 1) << (1u ^ (uint(uvec3(1u, 0u, 0u)))))) % subgroup_size, (((subgroup_local_id + 1) % subgroup_size) + 0u)))))) : (num_workgroup))) : (workgroup_base)))) | 0u);
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   if((((((injectionSwitch.x < injectionSwitch.y)) && ((((injectionSwitch.x < injectionSwitch.y)) && ((injectionSwitch.x > injectionSwitch.y))))))))
    barrier();
   barrier();
  }
 if((((false) || false)))
  barrier();
 if(((((! ((! (! (! (injectionSwitch.x > injectionSwitch.y))))))))))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   barrier();
  }
 ((buf[virtual_gid] = ((1) >> int((injectionSwitch.x)))) >> ((0u | 0u) << (uint(3u))));
 if(((bool(bvec2((((false || (! (! ((bool(bvec2(false, true)))))))) || (((((((((injectionSwitch.x < injectionSwitch.y)) ? min(vec2(mat3x2(injectionSwitch, 0.0, ((0.0) + 0.0), 0.0, tan(0.0))), vec2(mat3x2(injectionSwitch, 0.0, 0.0, 0.0, tan(0.0)))) : (injectionSwitch))))).x > (min(injectionSwitch.y, (max(injectionSwitch.y, injectionSwitch.y)))))))), (((! (! (true)))) && true))))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((((((((false ? (vec2(868.135, 160.587)) : injectionSwitch) * mat2(1.0)))).x > injectionSwitch.y))))
  barrier();
 if(((bool(bool(((injectionSwitch.x > injectionSwitch.y)))))))
  barrier();
 if(((((((false) || false)) && true) || (false))))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 if(subgroup_local_id + ((((max((((1)) >> 0), (1))) >> 0) + 0)) < subgroup_size)
  {
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    {
     if((false))
      {
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
       barrier();
      }
     barrier();
    }
   atomicStore(buf[next_virtual_gid], uint((((((int(ivec3(((true ? 2 : (- 66550))), int((min((injectionSwitch.x), (0.0 + ((injectionSwitch.x)))))), 1))) ^ 0)) << 0))), 4, (0 | ((min((~ (((true ? (clamp(~ (64), ~ (64), ((true ? ((~ (64)) | (~ (64))) : (34716))))) : ((int(ivec3(73984, 1, 0)))))))), (0 ^ ((int(ivec2((~ (((true ? (clamp(~ (64), ~ (64), ((true ? ((~ (64)) | (~ (64))) : (34716))))) : ((int(ivec3(73984, 1, 0)))))))), 0))))))))), 4);
   subgroupAll(false);
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   if((false))
    barrier();
  }
 else
  {
   atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
   if((true && (true && (((false))))))
    barrier();
   if((false))
    {
     if(((! (((! (false)) || false)))))
      barrier();
     barrier();
    }
   if((((((injectionSwitch.x > injectionSwitch.y)))) && true))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   for(int _injected_loop_counter = (((~ (1 * ((~ (1 << ((int(((int((min(int(7), int(7))))) ^ 0)))))))))) >> ((((~ (min((~ (int(7))), (~ (int(7)))))))) * 1)); _injected_loop_counter > 0; _injected_loop_counter --)
    {
     if((false))
      barrier();
     if(((true && (false))))
      barrier();
     if((true && ((false))))
      barrier();
     subgroupAll(true);
     if((((((true && ((! (! (bool((bvec3(bvec3(bvec3(((false)), false, true))))))))))) || false)) || false))
      barrier();
    }
   if((false))
    barrier();
   if(((false || (((! (! ((injectionSwitch.x > injectionSwitch.y)))))))))
    barrier();
  }
 if((false))
  {
   if(((false || ((! (! ((! (! (false))))))))))
    barrier();
   barrier();
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
