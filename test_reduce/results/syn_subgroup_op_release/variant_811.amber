#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((false))
  {
   if((false))
    return;
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if((false))
    barrier();
   if((false))
    barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 if((false))
  barrier();
 if((false))
  {
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((((bool(bool((injectionSwitch.x > (min(injectionSwitch, (vec2(vec2(injectionSwitch))))).y)))))))
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   if((((((false ? (- 5.9) : ((injectionSwitch.x) + 0.0))) > injectionSwitch.y))))
    {
     if((false))
      barrier();
     return;
    }
   barrier();
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if((false))
  return;
 if(((! (! (false)))))
  {
   if((false))
    {
     if(((((! (! (((injectionSwitch.x > injectionSwitch.y)))))) && true)))
      barrier();
     return;
    }
   if((false))
    return;
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((false))
    {
     if((((((injectionSwitch.x < injectionSwitch.y)) && ((injectionSwitch.x > injectionSwitch.y))))))
      barrier();
     return;
    }
   return;
   if((false))
    return;
   if((false))
    barrier();
  }
 if((false))
  barrier();
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if(((((max((1.0 * ((clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))), injectionSwitch.x)) > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       return;
      }
     barrier();
    }
   if((false))
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     return;
    }
   return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((((((injectionSwitch.x > injectionSwitch.y))) && ((injectionSwitch.x < injectionSwitch.y)))))
      barrier();
     if(((true && (false))))
      barrier();
     return;
    }
   if((false))
    return;
   if(((! (! (false)))))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    barrier();
  }
 if(((! (! (false)))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   return;
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   if((false || (((bool((true && (((bool(((((min(float(mat3x4((max(injectionSwitch.x, injectionSwitch.x)), 1.0, 0.0, sin(0.0), 1.0, 0.0, cos(0.0), (dot(vec2(1.0, 0.0), vec2(0.0, round(length(normalize(1.0)))))), 1.0, 0.0, 1.0, 0.0)), float(mat3x4(injectionSwitch.x, 1.0, 0.0, sin(0.0), 1.0, 0.0, cos(0.0), (dot(vec2(1.0, 0.0), vec2(0.0, round(length(normalize(1.0)))))), (max(1.0, 1.0)), 0.0, 1.0, 0.0))))) > injectionSwitch.y)))) || false)))))))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(((((! (! ((! (! (injectionSwitch.x > injectionSwitch.y))))))))))
      barrier();
     if(((! (! (false)))))
      return;
     barrier();
    }
   barrier();
  }
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(((bool(bvec4(((false) && true), ((injectionSwitch.x < injectionSwitch.y)), false, true)))))
  {
   if((false))
    barrier();
   return;
  }
 if(((bool((! (! (bool(false))))))))
  return;
 if((false))
  {
   if(((((clamp(injectionSwitch, injectionSwitch, ((injectionSwitch) - vec2(0.0, 0.0)))).x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if((false))
    barrier();
  }
 uint subgroup_size = gl_SubgroupSize;
 if((false))
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   if((false))
    barrier();
   return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if((((! (! (bool((bool(bvec3(bool(((injectionSwitch.x > injectionSwitch.y))), true, true))))))))))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     barrier();
     if((((((bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, false)))) || false))))
      return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((false))
  {
   if((false))
    return;
   if((((false)) || ((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   if((((false) && ((injectionSwitch.x < injectionSwitch.y)))))
    return;
   if((false))
    barrier();
   if((false))
    barrier();
   if((((false) || false)))
    barrier();
   barrier();
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    return;
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     return;
    }
   return;
  }
 if(((true && (false))))
  {
   if(((true && (false))))
    barrier();
   if((false))
    barrier();
   if((false))
    return;
   if((false))
    return;
   if((false))
    barrier();
   return;
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       barrier();
      }
     barrier();
    }
  }
 if((false))
  {
   if(((! (((! ((! (! ((false || (false))))))) || false)))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 if(((true && (false))))
  barrier();
 if(((((((((((injectionSwitch.x) - 0.0) < injectionSwitch.y) && true)) && true))) && ((((mix(float((float((- 8214 < - 19293)))), float(injectionSwitch.x), bool(true))) > injectionSwitch.y))))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 if((false))
  return;
 if((false))
  return;
 if((false))
  {
   if(((false || (false))))
    {
     if((bool(bvec2((false), false))))
      return;
     return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(((! (! (false)))))
      barrier();
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 if(((bool(bool((true && (false)))))))
  barrier();
 if(((false || (bool(bvec2((false), false))))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  {
   if((false))
    barrier();
   return;
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((false))
  barrier();
 if((false))
  return;
 if((false))
  {
   if((false))
    barrier();
   return;
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if((false))
  return;
 if(((! (! ((((false || (bool((bvec2(bvec4(bvec2(((! (! (false)))), true), true, false)))))))) || false)))))
  {
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if((false))
  {
   if((false))
    {
     if((true && ((false))))
      {
       if((false))
        barrier();
       return;
      }
     barrier();
    }
   if((false))
    barrier();
   barrier();
   if((false))
    barrier();
  }
 if((((injectionSwitch.x > ((false ? (18.00) : (1.0 * (injectionSwitch.y))))))))
  {
   if((false))
    barrier();
   if((((((injectionSwitch.x > injectionSwitch.y)))) || false))
    barrier();
   if((((((injectionSwitch) - sqrt(tan(vec2(0.0, 0.0)))).x > injectionSwitch.y))))
    barrier();
   if((false))
    return;
   barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   if((false))
    {
     if((false))
      return;
     barrier();
     if((false))
      barrier();
    }
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if((false))
  barrier();
 uint workgroup_base = ((true ? workgroup_size : ((true ? subgroup_id : atomicOr(subgroup_size, num_workgroup))))) * ((true ? (min(workgroup_id, workgroup_id)) : (workgroup_id)));
 if(((! (! (((bool(bvec4(bool(bvec2(false, true)), true, false, true)))))))))
  {
   if((false))
    barrier();
   barrier();
  }
 if(((((false || (injectionSwitch.x > ((injectionSwitch) * mat2(1.0)).y))))))
  {
   if((false))
    barrier();
   if((false))
    return;
   return;
  }
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 uint virtual_gid = ((clamp((0u ^ ((workgroup_base) << 0u)), (~ ((~ (~ (~ ((workgroup_base) << 0u)))))), (min((workgroup_base) << 0u, ((uint(uint(((workgroup_base) ^ 0u))))) << 0u))))) + (max(((subgroup_id) + 0u) * subgroup_size, ((subgroup_id) + 0u) * subgroup_size)) + subgroup_local_id;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((((bool((bvec3(bvec4(bvec3((injectionSwitch.x > injectionSwitch.y), true, true), false))))))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    barrier();
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  return;
 if((false))
  barrier();
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
 if(((! (! (false)))))
  return;
 if((false))
  barrier();
 if((false))
  return;
 if((false))
  {
   if((false))
    return;
   if((false))
    return;
   return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size);
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   return;
  }
 if((((false) || false)))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
  }
 buf[virtual_gid] = 1;
 if((false))
  return;
 if((false))
  barrier();
 if((false))
  {
   if((false))
    {
     if((false))
      return;
     barrier();
    }
   return;
   if((false))
    return;
  }
 if((false))
  {
   if((false))
    barrier();
   if((((injectionSwitch.x > (clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))))
    {
     if(((bool(bvec3(((false || ((false || (false || (false)))))), true, false)))))
      {
       if((false))
        barrier();
       return;
      }
     return;
     if((false))
      barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    return;
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   if((false))
    {
     if((false))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       return;
      }
     barrier();
    }
   if((false))
    {
     if((false))
      barrier();
     if((false))
      barrier();
     if((false))
      barrier();
     if((((injectionSwitch.x > (min(((injectionSwitch) + vec2(0.0, 0.0)), injectionSwitch)).y))))
      {
       if(((true && (false))))
        barrier();
       if((((! (! ((false))))) && true))
        return;
       return;
      }
     if((false))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       if(((true && (false))))
        return;
       if((false))
        barrier();
       barrier();
      }
     if((((((injectionSwitch.x > injectionSwitch.y) || false)))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        {
         if((((false) || false)))
          barrier();
         barrier();
        }
       if((false))
        {
         if((false))
          barrier();
         return;
        }
       if((false))
        barrier();
       if((false))
        {
         if((false))
          barrier();
         if((false))
          barrier();
         return;
        }
       barrier();
       if((false))
        barrier();
      }
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     if((false))
      return;
     if((! (! ((false || ((((injectionSwitch.x > injectionSwitch.y)))))))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     if((false))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      barrier();
     if((false))
      barrier();
     if((false))
      {
       if((((((((injectionSwitch.x > (clamp(injectionSwitch, ((injectionSwitch) + vec2(0.0, 0.0)), injectionSwitch)).y)))) && true)) || false))
        barrier();
       if((((false)) && true))
        barrier();
       return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(((false || (false))))
        barrier();
      }
     if(((((! (! (((injectionSwitch.x > (mat2(1.0) * (injectionSwitch)).y)))))) || false)))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          barrier();
         return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      {
       if((false))
        return;
       if(((bool(bool(false)))))
        barrier();
       return;
      }
     if((false))
      barrier();
     if((false))
      barrier();
     if(((bool(bool(((injectionSwitch.x > injectionSwitch.y)))))))
      {
       if(((false || (bool(bool((false)))))))
        barrier();
       return;
      }
     if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     if((false))
      barrier();
     if(((((true && (false))) && true)))
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       barrier();
      }
     if((bool(bvec4((false), ((injectionSwitch.x < injectionSwitch.y)), true, true))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       barrier();
       if(((true && (((false) && true)))))
        {
         if((false))
          barrier();
         return;
        }
      }
     if((false))
      barrier();
     if(((bool(bvec2((! ((bool(bool(! ((! (! (false))))))))), (! (! ((bool(bvec3(false, false, true)))))))))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       return;
       if((false))
        return;
      }
     barrier();
    }
   if((false))
    barrier();
   if((false))
    return;
   if((false))
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
   if((false))
    {
     if((((injectionSwitch.x > ((injectionSwitch) / vec2(1.0, 1.0)).y))))
      barrier();
     return;
    }
   if((false))
    barrier();
   if(((bool(bvec2(false, false)))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((false))
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         return;
         if((false))
          barrier();
        }
       if((false))
        {
         if((((bool((bvec3(bvec4(bvec3((false), false, false), true)))))) || false))
          return;
         return;
        }
       if(((((injectionSwitch.x < (max((mix(float((- 4.6)), float(injectionSwitch.y), bool(true))), (max(injectionSwitch.y, injectionSwitch.y)))))) && (false))))
        barrier();
       if((false))
        barrier();
       barrier();
       if((false))
        barrier();
      }
     if((false))
      barrier();
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 if(subgroup_local_id + 1 < subgroup_size)
  {
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      {
       if(((bool(bvec4(false, false, false, ((injectionSwitch.x > injectionSwitch.y)))))))
        barrier();
       barrier();
      }
     barrier();
    }
   if(((bool(bvec2(((injectionSwitch.x > injectionSwitch.y)), false)))))
    {
     if((((bool((bvec2(bvec4(bvec2((injectionSwitch.x > injectionSwitch.y), false), true, true))))))))
      barrier();
     if((bool(bvec4((false), (! (! ((((! (! (injectionSwitch.x < injectionSwitch.y)))))))), false, false))))
      return;
     barrier();
     if((false))
      barrier();
    }
   if((false))
    barrier();
   if(((! (! (((bool(bvec2(((((! (((! (injectionSwitch.x > injectionSwitch.y)) || false)))) && true)), (! (! (false))))))))))))
    return;
   if((((false) || false)))
    barrier();
   atomicStore(buf[next_virtual_gid], (((~ (~ ((max(((uint(2)) | (uint(2))), uint(((2) | (2))))))))) / 1u), (((~ (~ (4))) | (~ (~ (4))))), 64, 4);
   if((false))
    return;
   if((false))
    {
     if((false))
      return;
     if((false))
      return;
     if((false))
      barrier();
     if((false))
      barrier();
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if((((false)) && true))
      return;
     barrier();
    }
   if((((((! (! (bool(bvec4(((! (((! ((injectionSwitch.x > injectionSwitch.y))) && true))) || false), false, false, false))))))))))
    {
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((true && (((! (! (false)))))))
    {
     if((false))
      {
       if(((((((min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))) && true)))
        {
         if((false))
          {
           if((false))
            {
             if((false))
              return;
             return;
            }
           if(((false || ((true && (false))))))
            {
             if((false))
              barrier();
             return;
            }
           if((false))
            barrier();
           barrier();
           if((false))
            barrier();
          }
         if((false))
          barrier();
         barrier();
         if((false))
          barrier();
         if((false))
          return;
         if((false))
          barrier();
        }
       if((false))
        {
         if((false))
          barrier();
         return;
        }
       barrier();
      }
     if((false))
      return;
     if((false))
      return;
     barrier();
     if((false))
      return;
    }
   if((false))
    {
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       return;
      }
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
    }
   subgroupAll(false);
   if((false))
    {
     if(((! (! (false)))))
      barrier();
     if((false))
      {
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           return;
          }
         if((false))
          return;
         if((((((! (! (bool(bool(false)))))) || ((injectionSwitch.x > injectionSwitch.y))))))
          barrier();
         return;
         if((false))
          barrier();
        }
       if((false))
        barrier();
       if((false))
        barrier();
       barrier();
      }
     if((false))
      barrier();
     if((! ((bool(bvec4(! ((false)), false, false, false))))))
      {
       if((false))
        barrier();
       if((false))
        {
         if((false))
          {
           if((false))
            barrier();
           return;
          }
         return;
         if((false))
          return;
        }
       if((false))
        barrier();
       if((false))
        barrier();
       if((((false) || ((false) && true))))
        return;
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          barrier();
         if((false))
          return;
         return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           return;
          }
        }
       if((false))
        barrier();
       if((false))
        {
         if((false))
          {
           if((false))
            barrier();
           return;
          }
         barrier();
        }
       if((false))
        {
         if((false))
          barrier();
         return;
        }
       if(((bool(bvec3(false, false, true)))))
        barrier();
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         if(((true && (false))))
          return;
         barrier();
        }
      }
     if((false))
      {
       if((false))
        barrier();
       return;
      }
     if((false))
      {
       if((false))
        return;
       if((false))
        barrier();
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          barrier();
         return;
        }
       return;
      }
     if((false))
      barrier();
     barrier();
     if((false))
      return;
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      return;
     if((false))
      {
       if((false))
        barrier();
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
         if((false))
          barrier();
        }
       if((false))
        return;
       if((false))
        barrier();
       barrier();
      }
     if((false))
      barrier();
     if((((((true ? (vec2(mat4(injectionSwitch, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0))) : (injectionSwitch))).x > injectionSwitch.y))))
      barrier();
     if((((injectionSwitch.x > (mat2(1.0) * (injectionSwitch)).y))))
      {
       if((false))
        barrier();
       barrier();
      }
    }
   if((false))
    {
     if((false))
      return;
     if((false))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if((false))
      return;
     barrier();
    }
   if((false))
    barrier();
   if((false))
    barrier();
   if((((! ((! ((! (! (! ((! (! (! ((injectionSwitch.x > injectionSwitch.y))))))))))))))))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   if(((((false || (! (! ((injectionSwitch.x > injectionSwitch.y)))))))))
    {
     if(((! ((bool(bvec3(((! (false)) && true), true, false)))))))
      barrier();
     return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if((((false) || false)))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((((((injectionSwitch.x > injectionSwitch.y))) || false)))
      barrier();
     if((false))
      {
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
       barrier();
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
       if((false))
        barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
     if((false))
      return;
     return;
    }
   if((false))
    barrier();
   if(((((true && (false))) && true)))
    barrier();
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if((false))
      return;
     if((false))
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       return;
       if((false))
        barrier();
      }
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     if(((((((bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)))) || false)))))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       return;
      }
     if((false))
      barrier();
     if((false))
      {
       if(((! (! ((false || (false)))))))
        barrier();
       if((false))
        barrier();
       return;
      }
     if((false))
      {
       if(((((injectionSwitch.x > injectionSwitch.y)) || (false))))
        barrier();
       return;
      }
     if((false))
      barrier();
     if((false))
      barrier();
     return;
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     if(((! (! (false)))))
      barrier();
     if((false))
      barrier();
     if((false))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       return;
      }
    }
  }
 else
  {
   if((false))
    {
     if((false))
      barrier();
     if((false))
      {
       if((false))
        {
         if(((((mix(float((((mix(vec2((- 632.642), (injectionSwitch)[1]), vec2((((injectionSwitch)[0]) + 0.0), (1.9)), bvec2(((injectionSwitch.x < injectionSwitch.y)), ((injectionSwitch.x > injectionSwitch.y))))).x) / 1.0)), float((5834.2164)), bool(false))) > injectionSwitch.y))))
          {
           if((false))
            barrier();
           barrier();
          }
         barrier();
        }
       return;
      }
     if((false))
      {
       if((false))
        return;
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         if((false))
          barrier();
         return;
        }
       if((false))
        barrier();
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
       if((((injectionSwitch.x > (clamp((vec2(injectionSwitch[0], injectionSwitch[1])).y, (mix(vec2((injectionSwitch)[0], ((true ? (injectionSwitch)[1] : (6274.9712)))), vec2((- 9649.6718), (6708.1757)), bvec2(false, false))).y, injectionSwitch.y))))))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((false))
        barrier();
       barrier();
       if((false))
        barrier();
       if((false))
        return;
       if((false))
        barrier();
       if((! (! ((false)))))
        barrier();
       if((false))
        barrier();
      }
     if((false))
      barrier();
     return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      {
       if((false))
        barrier();
       if((false))
        return;
       return;
      }
     if((((((! (! (bool(bvec2((! (! ((! (! (injectionSwitch.x > injectionSwitch.y)))))), ((injectionSwitch.x < injectionSwitch.y))))))))))))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           return;
          }
        }
       barrier();
      }
     if(((((bool(bvec2((! (! (injectionSwitch.x > injectionSwitch.y))), true)))))))
      barrier();
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if((false))
      barrier();
     if(((bool(bvec4(false, true, false, false)))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        return;
       barrier();
       if((false))
        return;
      }
     if((false))
      barrier();
     barrier();
    }
   atomicStore(buf[next_virtual_gid], ((uint(2)) ^ 0u), 4, 64, 4);
   if((false))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     return;
    }
   if((false))
    barrier();
   if((false))
    barrier();
   subgroupAll(true);
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
     return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    {
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
     if((((injectionSwitch.x > (vec2(mat4(injectionSwitch, log(1.0), tan(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, exp(0.0), 1.0, 1.0, 1.0, determinant(mat3(0.0, 0.0, sin(0.0), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)), (injectionSwitch.x)))).y))))
      barrier();
     if((false))
      barrier();
     if((false))
      return;
     if((false))
      barrier();
     return;
    }
   if((false))
    return;
   if((false))
    return;
   if((false))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     barrier();
     if((false))
      barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       barrier();
      }
     if((false))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       return;
      }
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      return;
     if(((((min(injectionSwitch.x, injectionSwitch.x)) > ((((injectionSwitch.y) * 1.0)) + 0.0)))))
      barrier();
     if((false))
      return;
     if((((false) && true)))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       if((false))
        barrier();
       barrier();
       if((false))
        {
         if((((((injectionSwitch.x > injectionSwitch.y))) && true)))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          barrier();
         return;
        }
      }
     if(((! (! (false)))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(((! (! (false)))))
      return;
     if((false))
      barrier();
     if((false))
      {
       if((false))
        return;
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y)) || ((bool(bool((true && ((false)))))))))
      barrier();
     if((((bool(bvec2(bool(bool(false)), true))))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       return;
       if(((false || (((injectionSwitch.x > injectionSwitch.y))))))
        return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     barrier();
     if((false))
      barrier();
     if((false))
      barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      {
       if((false))
        barrier();
       if((false))
        return;
       return;
       if((false))
        barrier();
      }
     return;
     if((false))
      return;
    }
  }
 if((false))
  {
   if((false))
    barrier();
   return;
  }
 if((false))
  barrier();
 if((((false) || false)))
  return;
 if((false))
  {
   if((false))
    return;
   if((false))
    barrier();
   return;
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
