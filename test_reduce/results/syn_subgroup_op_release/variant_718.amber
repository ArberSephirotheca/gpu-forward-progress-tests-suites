#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 for(int _injected_loop_counter = 1; _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    break;
  }
 do
  {
   if((false))
    return;
  }
 while(false);
 for(int _injected_loop_counter = 0; _injected_loop_counter != ((1 << (((int(4)) | 0))) >> (int(4))); _injected_loop_counter ++)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    break;
   if((false))
    {
     if((false))
      barrier();
     return;
    }
   if((false))
    break;
  }
 if((false))
  return;
 if((false))
  return;
 if((false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if((false))
  return;
 for(int _injected_loop_counter = 1; _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
  {
   if(false)
    {
    }
   else
    {
     for(int _injected_loop_counter = ((1 << (int(2))) >> (int(2))); _injected_loop_counter != 0; _injected_loop_counter --)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if((false))
      continue;
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(true)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
            {
             barrier();
             if((false))
              return;
             if((false))
              return;
            }
           if((false))
            continue;
          }
        }
       else
        {
         if((false))
          break;
        }
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         if((false))
          continue;
         barrier();
         if((false))
          continue;
        }
      }
     if((false))
      continue;
     if((false))
      {
       if((((false) || false)))
        {
         if((false))
          continue;
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         break;
        }
       if((false))
        {
         if((! (! (false))))
          {
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             if((false))
              barrier();
             return;
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                return;
               if((((injectionSwitch.x > injectionSwitch.y))))
                continue;
               do
                {
                 return;
                }
               while((true && (false)));
               if((false))
                return;
              }
            }
          }
         else
          {
           if((false))
            break;
           if((false))
            return;
           return;
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              return;
             if((((false) && true)))
              continue;
             for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
              {
               barrier();
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
            }
           if((false))
            {
             if((false))
              continue;
             break;
            }
           if((false))
            break;
          }
        }
       if((false))
        {
         if((false))
          continue;
         if((false))
          continue;
         break;
        }
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
       if((false))
        break;
       if((false))
        {
         if((false))
          break;
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if((false))
          continue;
         barrier();
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           if(((((bool(bvec2(false, true)))) || false)))
            barrier();
          }
         else
          {
          }
        }
       barrier();
       if(((((bool(bool(false))) && true))))
        {
         if(((true && (false))))
          break;
         barrier();
        }
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      continue;
     if((false))
      continue;
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        continue;
       if((false))
        return;
       return;
      }
     if((false))
      {
       if(((! (! ((! (! (false))))))))
        continue;
       return;
      }
     do
      {
       if((false))
        return;
      }
     while(false);
     if(((bool(bvec2(false, true)))))
      break;
     if((false))
      continue;
     for(int _injected_loop_counter = 1; _injected_loop_counter != ((0) ^ 0); _injected_loop_counter --)
      {
       do
        {
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              return;
             if((false))
              return;
             barrier();
            }
           if((false))
            barrier();
           if(false)
            {
            }
           else
            {
             if((false))
              {
               if((false))
                break;
               return;
              }
             if((false))
              return;
            }
           do
            {
             if((false))
              barrier();
             if((false))
              barrier();
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
           if(false)
            {
             if((false))
              {
               if((false))
                break;
               continue;
              }
             if((false))
              barrier();
            }
           else
            {
             if((false))
              barrier();
             if((false))
              break;
            }
           return;
           for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < 1; _injected_loop_counter ++)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             if((false))
              barrier();
            }
           if((false))
            return;
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             return;
            }
           if((false))
            break;
           if((false))
            barrier();
          }
        }
       while(false);
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
      }
    }
  }
 do
  {
   if((false))
    return;
   if((false))
    return;
   if((false))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      break;
     if((false))
      break;
     break;
     if((false))
      continue;
    }
  }
 while(false);
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  {
   do
    {
     barrier();
     if((false))
      {
       if((false))
        continue;
       break;
      }
    }
   while((! (! (false))));
  }
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 do
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        {
         if((false))
          return;
         break;
        }
       return;
      }
     if((false))
      break;
     return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    continue;
  }
 while((! (! (((injectionSwitch.x > injectionSwitch.y))))));
 if(((injectionSwitch.x > injectionSwitch.y)))
  {
   if((false))
    return;
  }
 else
  {
   if((false))
    return;
   if((false))
    {
     if((false))
      {
       if((false))
        return;
       barrier();
      }
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 uint subgroup_size = gl_SubgroupSize;
 if((false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((false))
  return;
 if((false))
  {
   if((false))
    return;
   return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  {
   do
    {
     barrier();
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if((false))
  {
   if((false))
    barrier();
   do
    {
     return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      continue;
    }
   while(false);
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if((false))
      {
       for(int _injected_loop_counter = 0; _injected_loop_counter != ((1 << ((min(int(3), int(3))))) >> (int(3))); _injected_loop_counter ++)
        {
         barrier();
        }
      }
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((((injectionSwitch.x > injectionSwitch.y))) || false)))
    return;
   if((false))
    {
     if((false))
      return;
     return;
    }
   if(((! (! (false)))))
    barrier();
   if((false))
    return;
   do
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        return;
       barrier();
      }
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if(false)
        {
        }
       else
        {
         if((false))
          {
           for(int _injected_loop_counter = ((- 44699 & 0) & 19462); _injected_loop_counter != (1 ^ 0); _injected_loop_counter ++)
            {
             barrier();
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
        }
       if((false))
        return;
       continue;
       if((false))
        return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       if((false))
        continue;
       if((false))
        barrier();
       return;
       if((false))
        break;
       do
        {
         if((false))
          {
           do
            {
             barrier();
             if((false))
              return;
             if((false))
              break;
            }
           while(false);
          }
        }
       while(false);
       if((false))
        break;
       if(((bool(bvec3(false, false, false)))))
        return;
       if((false))
        break;
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
      }
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      continue;
    }
   while(false);
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    barrier();
  }
 if((false))
  {
   if((false))
    return;
   return;
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
   if(false)
    {
    }
   else
    {
     for(int _injected_loop_counter = 0; _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
      {
       if((false))
        return;
       if((false))
        break;
      }
     if((false))
      {
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
         if((false))
          return;
        }
       else
        {
         if((false))
          return;
         barrier();
        }
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
      }
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
    }
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
  }
 if((false))
  return;
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          return;
         return;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        return;
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
     do
      {
       return;
       if((false))
        return;
      }
     while(false);
     if((false))
      return;
     if((false))
      {
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         return;
         if((false))
          return;
         if((((false) || false)))
          return;
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
        }
      }
     if((false))
      barrier();
     if((false))
      return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(((false || (false))))
      return;
     return;
    }
   if((false))
    {
     for(int _injected_loop_counter = 0; _injected_loop_counter < (1 ^ 0); _injected_loop_counter ++)
      {
       return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
      }
    }
   if((false))
    {
     if((false))
      return;
     return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   if(false)
    {
    }
   else
    {
     if((false))
      return;
     for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        break;
      }
    }
  }
 do
  {
   if((false))
    break;
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    break;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        break;
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      continue;
     break;
    }
   if((bool(bool((! (! (true)))))))
    {
     if((false))
      barrier();
    }
   else
    {
     if((false))
      return;
     if(((true && (false))))
      barrier();
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
       break;
      }
    }
   if((false))
    {
     if((false))
      {
       if((false))
        {
         if((false))
          continue;
         barrier();
        }
       if((false))
        break;
       break;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        continue;
       barrier();
       if((false))
        return;
      }
     if((false))
      {
       if((false))
        continue;
       barrier();
       if((false))
        continue;
       if((false))
        return;
      }
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        {
         if((false))
          break;
         barrier();
        }
       if((false))
        continue;
       return;
       if((false))
        continue;
      }
     if((((false) || false)))
      break;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      continue;
     return;
    }
   if((false))
    return;
   if((false))
    break;
   if((false))
    continue;
   if((((injectionSwitch.x > injectionSwitch.y))))
    continue;
   if((false))
    {
     if((false))
      break;
     if((false))
      barrier();
     barrier();
    }
   if((false))
    return;
  }
 while(false);
 if((false))
  return;
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    return;
   return;
  }
 if((false))
  {
   if((false))
    return;
   barrier();
  }
 if((false))
  {
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   return;
   if((false))
    barrier();
   if((false))
    return;
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if((((false) && true)))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   if((false))
    {
     if((false))
      return;
     return;
    }
   barrier();
  }
 if((false))
  return;
 if((false))
  {
   if((false))
    return;
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((bool(bvec4(((injectionSwitch.x > injectionSwitch.y)), true, false, true))))
    {
    }
   else
    {
     if((false))
      return;
     if((false))
      return;
     barrier();
    }
  }
 for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
  {
   if((false))
    break;
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(((! (! (false)))))
      continue;
     return;
    }
  }
 if((false))
  barrier();
 if((false))
  return;
 if((false))
  {
   if((false))
    return;
   do
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      continue;
     for(int _injected_loop_counter = 0; _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
      {
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if((false))
          barrier();
         if((false))
          {
           if((false))
            break;
           if((false))
            return;
           barrier();
          }
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           if((false))
            return;
          }
        }
       else
        {
         if((false))
          {
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             break;
            }
           for(int _injected_loop_counter = (1 | 0); _injected_loop_counter != ((0) << 0); _injected_loop_counter --)
            {
             barrier();
             if((false))
              return;
            }
           if((false))
            return;
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if((false))
          {
           if((false))
            break;
           if(false)
            {
            }
           else
            {
             if((false))
              return;
             return;
            }
          }
         do
          {
           if((false))
            barrier();
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
        }
      }
    }
   while(false);
   barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    return;
   if(false)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       barrier();
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
  }
 for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
  {
   if((false))
    return;
  }
 if((false))
  return;
 if(false)
  {
   if((false))
    return;
   if((false))
    {
     if((false))
      barrier();
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(false)
    {
     if((false))
      return;
    }
   else
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        return;
       if((false))
        barrier();
       for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > (0 ^ 0); _injected_loop_counter --)
        {
         if((false))
          {
           if((false))
            return;
           return;
          }
         barrier();
        }
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
   if((false))
    return;
   if((false))
    {
     if((false))
      return;
     if(((false) && true))
      {
      }
     else
      {
       if((! (! (true))))
        {
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           if((false))
            return;
           return;
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          return;
         if((false))
          {
           if((false))
            return;
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              return;
             return;
             if((false))
              return;
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           if((false))
            {
             if(false)
              {
              }
             else
              {
               if((false))
                return;
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  return;
                 return;
                }
              }
             barrier();
            }
           if(true)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if(((injectionSwitch.x < injectionSwitch.y)))
                {
                 if((false))
                  return;
                 barrier();
                }
               else
                {
                }
              }
             barrier();
             if((false))
              return;
             if((false))
              return;
            }
           else
            {
             if((false))
              return;
             if((false))
              return;
             if((false))
              return;
            }
          }
        }
       else
        {
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      barrier();
     if(true)
      {
       if((false))
        return;
       return;
      }
     else
      {
      }
    }
   if((false))
    return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if(false)
  {
   if((false))
    {
     for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
      {
       barrier();
      }
    }
  }
 else
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      barrier();
     if((false))
      return;
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       return;
      }
     if((false))
      return;
    }
   if((false))
    return;
   if((false))
    return;
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 if(((bool(bvec3((! (! (false))), false, false)))))
  {
   if((false))
    return;
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    return;
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = (0 >> (int(3))); _injected_loop_counter < 1; _injected_loop_counter ++)
      {
       if((false))
        continue;
       if((false))
        {
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           barrier();
          }
         if((false || (false)))
          {
          }
         else
          {
           if((((((injectionSwitch.x > injectionSwitch.y))) && true)))
            {
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
              }
             else
              {
               barrier();
              }
            }
           if(((false || ((true && (false))))))
            barrier();
           if((false))
            barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         if((false))
          {
           if((false))
            {
             if((false))
              continue;
             continue;
            }
           break;
          }
         do
          {
           for(int _injected_loop_counter = 1; _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
            {
             for(int _injected_loop_counter = 0; _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((false))
                  break;
                 barrier();
                }
              }
             return;
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
             if((false))
              continue;
            }
           if((false))
            continue;
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          continue;
        }
       if(((true && ((! (! (((injectionSwitch.x > injectionSwitch.y)))))))))
        barrier();
      }
     if((false))
      return;
     if((false))
      {
       if((false))
        return;
       return;
      }
     if(false)
      {
      }
     else
      {
       barrier();
      }
     if((false))
      barrier();
     if((false))
      return;
     if((false))
      {
       if((false))
        barrier();
       return;
      }
     if((false))
      return;
     if((false))
      {
       if((false))
        return;
       barrier();
      }
    }
   for(int _injected_loop_counter = (0 << (int(4))); _injected_loop_counter != (1 & 1); _injected_loop_counter ++)
    {
     if(((((bool(bvec2(false, true)))) || false)))
      {
       for(int _injected_loop_counter = ((1 << (int(0))) >> (int(0))); _injected_loop_counter != 0; _injected_loop_counter --)
        {
         barrier();
         if((false))
          continue;
        }
      }
     return;
     if((false))
      barrier();
     if((false))
      {
       if((false))
        return;
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         barrier();
         if((false))
          continue;
        }
       else
        {
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
      }
    }
   if((false))
    {
     if(((! (! (false)))))
      barrier();
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if((false))
    return;
   if((false))
    {
     if((false))
      barrier();
     if(true)
      {
       if((false))
        barrier();
       return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          return;
         return;
        }
      }
     else
      {
      }
     if((false))
      return;
    }
   if((false))
    return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    barrier();
   barrier();
   if((false))
    return;
  }
 if((false))
  return;
 if((false))
  return;
 if((false))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 if((false))
  {
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     return;
     if((false))
      return;
    }
   else
    {
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(false)
  {
  }
 else
  {
   do
    {
     if((false))
      {
       if((((false) || false)))
        continue;
       if((false))
        {
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
           break;
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         break;
        }
       if(true)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           continue;
          }
         if((false))
          return;
         barrier();
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(((bool(bool(((injectionSwitch.x > injectionSwitch.y)))))))
          barrier();
         if((false))
          {
           if((false))
            return;
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           break;
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
        }
       if((false))
        {
         if((false))
          return;
         if((false))
          {
           if((false))
            barrier();
           break;
           if((false))
            return;
          }
         if((false))
          return;
         continue;
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
        }
       if(true)
        {
         if((false))
          barrier();
        }
       else
        {
        }
       if((false))
        barrier();
      }
     if((false))
      continue;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
      {
       if((false))
        barrier();
       if((false))
        {
         if((false))
          return;
         if((false))
          continue;
         if((false))
          barrier();
         if((false))
          break;
         if(false)
          {
           if((false))
            continue;
          }
         else
          {
           if((false))
            return;
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         do
          {
           barrier();
           if((false))
            return;
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
        }
      }
     if((false))
      {
       if((false))
        {
         if((false))
          {
           if((false))
            break;
           continue;
          }
         barrier();
        }
       barrier();
      }
     if((false))
      continue;
    }
   while(false);
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if(true)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(true)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     else
      {
      }
    }
  }
 else
  {
  }
 if((false))
  barrier();
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 if((false))
  return;
 if((false))
  return;
 if((false))
  return;
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size);
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  return;
 for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
  {
   if(true)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      {
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
         if((false))
          return;
        }
       else
        {
         if((false))
          {
           if((false))
            break;
           barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
       if((false))
        break;
       continue;
      }
     if((false))
      return;
     if((false))
      {
       if((false))
        {
         if((false))
          break;
         barrier();
        }
       if((false))
        return;
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         continue;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
         barrier();
        }
       if((false))
        continue;
       for(int _injected_loop_counter = 0; _injected_loop_counter < ((1 << (int(6))) >> (int(6))); _injected_loop_counter ++)
        {
         if((false))
          return;
         if((false))
          break;
         if((false))
          break;
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
         return;
        }
       if((false))
        return;
      }
     do
      {
       if((false))
        return;
      }
     while(false);
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     buf[virtual_gid] = 1;
     if((false))
      {
       if((false))
        continue;
       barrier();
      }
     if(true)
      {
       if((false))
        {
         if((false))
          return;
         if((false))
          barrier();
         for(int _injected_loop_counter = 1; _injected_loop_counter != (0 << (int(6))); _injected_loop_counter --)
          {
           return;
           if((false))
            {
             if((false))
              continue;
             continue;
            }
          }
        }
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
      }
     else
      {
       if((false))
        break;
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
       return;
      }
     if((false))
      break;
     if((false))
      barrier();
     if((false))
      return;
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
       continue;
      }
     if((false))
      break;
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(((! (! (false)))))
      break;
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     if((false))
      break;
     if((false))
      barrier();
     if((false))
      continue;
     if((false))
      break;
     if((false))
      return;
     if(true)
      {
       if((false))
        {
         if((false))
          continue;
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         barrier();
        }
       if((false))
        break;
       if(true)
        {
         if(((true && (false))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            barrier();
           do
            {
             if((((false) && true)))
              break;
             if((false))
              {
               do
                {
                 if((false))
                  break;
                 barrier();
                }
               while(false);
              }
            }
           while(false);
           if(true)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
              }
             else
              {
               return;
               if((false))
                return;
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if((false))
                return;
               if((false))
                return;
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if((false))
                return;
               if((((injectionSwitch.x > injectionSwitch.y))))
                return;
              }
            }
           else
            {
             if((false))
              return;
            }
          }
         if((false))
          {
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
             return;
            }
          }
        }
       else
        {
         if((false))
          return;
         if((false))
          continue;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
       if((false))
        barrier();
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      continue;
     if((false))
      {
       if((false))
        continue;
       do
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            break;
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if(((bool(bool(((injectionSwitch.x > injectionSwitch.y)))))))
              continue;
             barrier();
            }
           return;
          }
         if((false))
          {
           if((false))
            continue;
           if((false))
            {
             if((false))
              break;
             barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
            }
           if((false))
            barrier();
           if((false))
            return;
           barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(((false || ((false || (false))))))
            return;
          }
         if((false))
          return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
         if((false))
          barrier();
         if((false))
          continue;
        }
       while(false);
       if((false))
        continue;
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         if((false))
          {
           if((false))
            barrier();
           if((false))
            continue;
           return;
          }
        }
       else
        {
         if((false))
          continue;
         if((false))
          {
           if(true)
            {
             barrier();
            }
           else
            {
            }
          }
        }
       if((false))
        barrier();
      }
     if((false))
      break;
    }
  }
 if((false))
  barrier();
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    return;
   return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if(false)
  {
  }
 else
  {
   if(false)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      return;
     if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
      return;
     for(int _injected_loop_counter = (1 | 0); _injected_loop_counter != (0 >> (int(1))); _injected_loop_counter --)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        continue;
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
       if(((((injectionSwitch.x > injectionSwitch.y)) || (false))))
        return;
      }
    }
   else
    {
     if(subgroup_local_id + 1 < subgroup_size)
      {
       if(true)
        {
         if((false))
          {
           if((false))
            {
             do
              {
               if((((false) || false)))
                break;
               if((false))
                continue;
               barrier();
              }
             while(false);
            }
           barrier();
          }
         do
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             barrier();
            }
           if((false))
            return;
          }
         while(false);
         do
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
             barrier();
            }
          }
         while(false);
        }
       else
        {
         if((false))
          return;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           return;
          }
         if((false))
          return;
        }
       do
        {
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
           break;
          }
         for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
          {
           atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
          }
        }
       while(false);
       if(((! (((! ((! (! (false))))) && true)))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if((false))
          return;
         if((false))
          barrier();
         for(int _injected_loop_counter = 0; _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
          {
           if((false))
            barrier();
           if((false))
            continue;
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                {
                 if((false))
                  break;
                 do
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    return;
                   barrier();
                  }
                 while(false);
                }
               if((false))
                continue;
               break;
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(false)
              {
               if((false))
                {
                 if((false))
                  break;
                 barrier();
                }
               if((false))
                continue;
               if((false))
                break;
              }
             else
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                continue;
               if((false))
                {
                 if((false))
                  return;
                 break;
                }
               barrier();
              }
            }
           if((((((injectionSwitch.x > injectionSwitch.y))) && true)))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((false))
              continue;
             barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = 1; _injected_loop_counter > (int((injectionSwitch.x)) >> (int(0))); _injected_loop_counter --)
              {
               if((false))
                continue;
               return;
              }
             if((false))
              return;
            }
           if((false))
            {
             if((false))
              return;
             continue;
            }
           if(((! (! (false)))))
            return;
           if((false))
            {
             if((false))
              break;
             if((((false) && true)))
              break;
             return;
            }
           if((false))
            barrier();
           if((false))
            {
             if((false))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if(((! (! ((bool(bool(false))))))))
                continue;
               if((bool(bool(false))))
                {
                }
               else
                {
                 return;
                }
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                return;
               break;
              }
             barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
           barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
           if((false))
            {
             if((false))
              continue;
             if((false))
              break;
             continue;
             if((false))
              {
               if((false))
                break;
               barrier();
              }
            }
          }
         if((false))
          return;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        {
         if((false))
          return;
         barrier();
        }
       if((false))
        {
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           barrier();
          }
         return;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((false))
        {
         if((false))
          return;
         if((false))
          {
           if((false))
            return;
           return;
           if((false))
            return;
          }
         if((false))
          return;
         if((false))
          barrier();
         if(((false || (false))))
          return;
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           barrier();
           if((false))
            return;
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             barrier();
            }
           if((false))
            return;
          }
         else
          {
           if((false))
            {
             if((false))
              return;
             barrier();
            }
           if((false))
            return;
          }
         if((false))
          {
           if((((false) && true)))
            return;
           return;
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
          }
        }
       if((false))
        return;
       subgroupAll(false);
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if((false))
          barrier();
         if(false)
          {
           if((false))
            return;
          }
         else
          {
           if((false))
            return;
           return;
           if((false))
            return;
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              {
               if((false))
                return;
               return;
              }
             if((false))
              return;
             barrier();
            }
           if((false))
            {
             if((false))
              return;
             barrier();
             if((false))
              return;
            }
           if((false))
            return;
          }
        }
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((false))
        {
         if(((false || (false))))
          return;
         if((false))
          barrier();
         if((false))
          return;
         return;
        }
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             barrier();
            }
           while(false);
          }
        }
       else
        {
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = (0 << (int(7))); _injected_loop_counter < 1; _injected_loop_counter ++)
          {
           if((false))
            barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            return;
           return;
          }
         if((! (! (false))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         else
          {
           if(((bool(bvec4((true && (false)), true, true, true)))))
            {
             if((false))
              return;
             return;
            }
           barrier();
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          return;
         barrier();
        }
       do
        {
         if(false)
          {
           if((false))
            break;
          }
         else
          {
           if((false))
            {
             if((false))
              barrier();
             if(((bool((bvec3(bvec4(bvec3(((injectionSwitch.x > injectionSwitch.y)), true, true), false)))))))
              return;
             for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                break;
               return;
               if((false))
                return;
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                break;
               continue;
              }
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              continue;
             if((false))
              return;
             if((false))
              {
               if((false))
                break;
               if((false))
                barrier();
               if(true)
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if((false))
                    barrier();
                   if((false))
                    return;
                   barrier();
                   if((false))
                    continue;
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    continue;
                  }
                 if((false))
                  barrier();
                 return;
                }
               else
                {
                }
               if(((true && (false))))
                break;
              }
             if((false))
              {
               if((false))
                return;
               return;
              }
             barrier();
            }
           if((false))
            continue;
          }
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
      }
     else
      {
       if((false))
        return;
       if((false))
        return;
       if((false))
        return;
       if((false))
        {
         if(((false || (false))))
          return;
         if((false))
          return;
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if(((! (! (false)))))
              return;
             return;
            }
           if((false))
            return;
           if((false))
            barrier();
           return;
           if((false))
            return;
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if(false)
              {
              }
             else
              {
               if((false))
                return;
               barrier();
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           for(int _injected_loop_counter = 1; _injected_loop_counter > (int((injectionSwitch.y)) ^ 1); _injected_loop_counter --)
            {
             if((false))
              break;
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             if((false))
              break;
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             if((false))
              {
               if((false))
                barrier();
               if((false))
                barrier();
               return;
              }
            }
           barrier();
          }
         return;
        }
       if((false))
        barrier();
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if((false))
          return;
         if((false))
          {
           if((false))
            return;
           if(((bool(bool(false)))))
            return;
           return;
           if(((! (! (false)))))
            return;
          }
         for(int _injected_loop_counter = 1; _injected_loop_counter != (1 ^ 1); _injected_loop_counter --)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = (1 ^ 1); _injected_loop_counter < ((1 << (int(6))) >> (int(6))); _injected_loop_counter ++)
              {
               if((false))
                return;
               if((false))
                barrier();
               if((false))
                break;
              }
             if((false))
              break;
             continue;
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           do
            {
             return;
             if((false))
              barrier();
             if((false))
              continue;
             if((false))
              return;
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                break;
               barrier();
              }
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
           if((false))
            {
             if((false))
              break;
             if((false))
              barrier();
             continue;
            }
           if((false))
            {
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
              }
             else
              {
               barrier();
              }
            }
          }
        }
       do
        {
         if((false))
          {
           if((false))
            {
             if((false))
              return;
             if((false))
              barrier();
             do
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if((((((injectionSwitch.x > injectionSwitch.y))) && true)))
                continue;
               if((false))
                break;
               if((false))
                {
                 if((false))
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   continue;
                  }
                 barrier();
                }
               barrier();
               if((false))
                continue;
               if((false))
                continue;
              }
             while(false);
             if((false))
              return;
            }
           if((false))
            return;
           if((false))
            {
             if((false))
              continue;
             break;
            }
           if((false))
            return;
           if(false)
            {
             if(false)
              {
               if((false))
                break;
              }
             else
              {
               if((false))
                {
                 if((false))
                  break;
                 if((false))
                  break;
                 barrier();
                }
              }
             if(((bool(bvec2(false, ((injectionSwitch.x < injectionSwitch.y)))))))
              continue;
            }
           else
            {
             if((false))
              {
               if(((false || (false))))
                break;
               barrier();
              }
             barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((false))
              barrier();
             if(((true && (false))))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
           if(false)
            {
             if((false))
              continue;
            }
           else
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((false))
                  continue;
                 return;
                }
               return;
              }
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             if(true)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             else
              {
               if((false))
                continue;
              }
             if((false))
              {
               if((false))
                return;
               return;
              }
             if((false))
              barrier();
            }
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
             if((false))
              return;
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           else
            {
             if((false))
              {
               if((false))
                return;
               if(((true && (false))))
                return;
               if((false))
                barrier();
               return;
              }
            }
           if((false))
            barrier();
          }
        }
       while(false);
       if((false))
        return;
       if((false))
        {
         do
          {
           barrier();
          }
         while(false);
         if((((false) || false)))
          return;
         if((false))
          return;
        }
       if(true)
        {
         for(int _injected_loop_counter = 1; _injected_loop_counter > (((int((injectionSwitch.y)) << (int(5))) >> (int(5))) ^ 1); _injected_loop_counter --)
          {
           if((false))
            continue;
           atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
        }
       if((false))
        return;
       if(false)
        {
         if((false))
          return;
        }
       else
        {
         if((false))
          return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           return;
          }
        }
       if(((((! (! (false)))) && true)))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            {
             if((false))
              barrier();
             return;
            }
           if((false))
            return;
           if(true)
            {
             barrier();
            }
           else
            {
            }
          }
         do
          {
           if((false))
            break;
           if((false))
            {
             if((false))
              barrier();
             return;
             if((false))
              continue;
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
         for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
          {
           if((false))
            barrier();
          }
         return;
         if((false))
          return;
         for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
          {
           if((false))
            return;
           if((false))
            barrier();
          }
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           barrier();
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          return;
         barrier();
        }
       do
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              return;
             barrier();
            }
           if((false))
            continue;
           if((false))
            continue;
           return;
           if((false))
            continue;
          }
        }
       while(false);
       if((false))
        {
         if(((true && (false))))
          return;
         if((false))
          return;
         barrier();
         if(((((! (! (false)))) && true)))
          barrier();
        }
       if((false))
        return;
       do
        {
         if((false))
          {
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
             barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              return;
             break;
            }
           return;
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           if((false))
            return;
           barrier();
           if((false))
            continue;
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                break;
               return;
              }
             barrier();
            }
           if((false))
            break;
          }
         if((false))
          break;
         if((((((injectionSwitch.x > injectionSwitch.y))) || false)))
          return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         subgroupAll(true);
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if((false))
          barrier();
         if((((false) || false)))
          continue;
         for(int _injected_loop_counter = 0; _injected_loop_counter < (1 ^ 0); _injected_loop_counter ++)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            return;
           do
            {
             if((false))
              return;
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             if((false))
              barrier();
             if((false))
              break;
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                continue;
               break;
              }
            }
           while(false);
           if((false))
            continue;
           if((false))
            {
             if(((true && (((injectionSwitch.x > injectionSwitch.y))))))
              break;
             continue;
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                continue;
               continue;
              }
             barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              barrier();
             if((false))
              continue;
             return;
            }
           for(int _injected_loop_counter = (0 | 0); _injected_loop_counter < (1 & 1); _injected_loop_counter ++)
            {
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
               if((false))
                barrier();
              }
             else
              {
               do
                {
                 if((false))
                  continue;
                 if((false))
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    {
                     if((false))
                      return;
                     barrier();
                    }
                   barrier();
                  }
                 if((false))
                  return;
                }
               while((! (! (false))));
               if((((injectionSwitch.x > injectionSwitch.y))))
                return;
              }
            }
           if((false))
            {
             do
              {
               do
                {
                 if((false))
                  {
                   do
                    {
                     if(((injectionSwitch.x > injectionSwitch.y)))
                      {
                      }
                     else
                      {
                       if((false))
                        barrier();
                       if(((bool(bvec4(false, true, true, false)))))
                        {
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          {
                           if((false))
                            return;
                           barrier();
                          }
                         return;
                        }
                       if((false))
                        barrier();
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        return;
                       if((false))
                        {
                         if((false))
                          barrier();
                         barrier();
                        }
                      }
                    }
                   while(((false) || false));
                   if((false))
                    {
                     if((false))
                      break;
                     barrier();
                    }
                   barrier();
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    return;
                   if(((bool(bvec2((! (! (false))), true)))))
                    barrier();
                   do
                    {
                     if((false))
                      barrier();
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      return;
                    }
                   while(false);
                   if((false))
                    {
                     if((false))
                      {
                       for(int _injected_loop_counter = 1; _injected_loop_counter != (0 << (int(2))); _injected_loop_counter --)
                        {
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          break;
                         barrier();
                        }
                      }
                     return;
                    }
                  }
                }
               while(((injectionSwitch.x > injectionSwitch.y)));
              }
             while(false);
             barrier();
            }
           do
            {
             if((false))
              barrier();
             if((false))
              {
               if((false))
                break;
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
               barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                break;
              }
             if((false))
              barrier();
            }
           while(false);
           if((false))
            {
             if((false))
              barrier();
             continue;
            }
           if((false))
            break;
          }
         if((false))
          continue;
        }
       while(false);
       if((false))
        {
         if((false))
          return;
         barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          {
           if((false))
            return;
           return;
          }
         if(((false || (false))))
          return;
         for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
          {
           if((false))
            break;
           if(((bool(bvec3(false, true, true)))))
            return;
          }
         return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          return;
        }
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if((false))
          {
           if((false))
            return;
           if(false)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           else
            {
             if((false))
              return;
             if(false)
              {
              }
             else
              {
               barrier();
               if((((false) && true)))
                return;
              }
            }
          }
         do
          {
           if((false))
            continue;
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             barrier();
            }
          }
         while(false);
         if(((true && (false))))
          return;
         if((false))
          return;
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           return;
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if((false))
          barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        {
         if((false))
          {
           if((false))
            return;
           barrier();
          }
         return;
         if((false))
          return;
        }
       if((false))
        barrier();
       if((false))
        return;
      }
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         return;
        }
      }
    }
  }
 if((false))
  {
   if((false))
    return;
   barrier();
  }
 if((false))
  {
   if((false))
    barrier();
   return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    return;
  }
 if((false))
  {
   if((false))
    return;
   barrier();
  }
 for(int _injected_loop_counter = 0; _injected_loop_counter != ((1 << (int(2))) >> (int(2))); _injected_loop_counter ++)
  {
   if(false)
    {
    }
   else
    {
     if((false))
      barrier();
     if((false))
      break;
    }
   if((false))
    {
     if((false))
      {
       if((false))
        barrier();
       break;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      continue;
     barrier();
     for(int _injected_loop_counter = 1; _injected_loop_counter > (clamp(0, 0, ((0) | (0)))); _injected_loop_counter --)
      {
       if((((false) || false)))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
         barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
      }
    }
   if((false))
    return;
   if((false))
    barrier();
   if((false))
    {
     if((false))
      {
       if((false))
        return;
       barrier();
      }
     if((false))
      {
       if(((bool((bvec2(bvec3(bvec2(false, true), false)))))))
        barrier();
       if((false))
        break;
       continue;
       if((false))
        {
         if((false))
          break;
         continue;
        }
      }
     if((false))
      continue;
     break;
    }
  }
 if((false))
  {
   do
    {
     return;
    }
   while(false);
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 do
  {
   if(((((bool((bvec2(bvec2(bvec2(false, true)))))) && true))))
    {
     if(true)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
        }
       if((false))
        return;
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
       return;
      }
     if((false))
      return;
     barrier();
     if((false))
      {
       if((false))
        return;
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      break;
    }
  }
 while(false);
 for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != (((56435 ^ 83187) >> 92949) & int((injectionSwitch.x))); _injected_loop_counter --)
  {
   if((false))
    break;
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          return;
         break;
        }
       for(int _injected_loop_counter = 1; _injected_loop_counter != (0 & 81157); _injected_loop_counter --)
        {
         return;
         if((false))
          continue;
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
       if(((false || (false))))
        barrier();
       if(((! (! (false)))))
        continue;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        {
         if(((true && (false))))
          break;
         if((false))
          return;
         return;
         if((false))
          break;
        }
       if((false))
        return;
       barrier();
       if((false))
        break;
      }
     if((false))
      return;
     if((false))
      break;
     if(false)
      {
      }
     else
      {
       if((false))
        {
         if(true)
          {
           if(true)
            {
             for(int _injected_loop_counter = (0 << (int(0))); _injected_loop_counter < 1; _injected_loop_counter ++)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                break;
               do
                {
                 if((false))
                  return;
                 for(int _injected_loop_counter = (((0 ^ 1) << (int(0))) >> (int(0))); _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
                  {
                   if((false))
                    continue;
                   if((false))
                    barrier();
                   if((false))
                    {
                     if((false))
                      break;
                     return;
                    }
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    continue;
                  }
                 if((false))
                  return;
                 if(true)
                  {
                   if((false))
                    barrier();
                  }
                 else
                  {
                  }
                 return;
                }
               while(false);
               if((((false) || false)))
                return;
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  break;
                 barrier();
                }
               if((false))
                continue;
              }
            }
           else
            {
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           if((false))
            break;
          }
         else
          {
          }
        }
      }
     if((false))
      {
       if((false))
        {
         if((false))
          barrier();
         return;
         if((false))
          break;
        }
       barrier();
      }
     if((bool(bvec2((! (! (true))), true))))
      {
       if((false))
        {
         if((false))
          return;
         barrier();
         if((false))
          break;
        }
      }
     else
      {
      }
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       if((false))
        return;
       if((false))
        {
         if(true)
          {
           for(int _injected_loop_counter = 1; _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                return;
               break;
              }
             barrier();
             if((false))
              {
               do
                {
                 if((false))
                  return;
                 barrier();
                }
               while(false);
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
         else
          {
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            break;
           break;
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     if((((false) || false)))
      {
       if(true)
        {
         if((false))
          barrier();
         return;
         if((false))
          return;
         if((false))
          break;
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         if(true)
          {
           if((false))
            barrier();
          }
         else
          {
          }
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           if((false))
            continue;
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              break;
             barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
            }
           if((false))
            barrier();
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if(((! (! (false)))))
                break;
               break;
              }
             if(((injectionSwitch.x < injectionSwitch.y)))
              {
               barrier();
              }
             else
              {
              }
            }
           if((false))
            {
             if((false))
              return;
             if((((false) || false)))
              barrier();
             continue;
            }
          }
         else
          {
          }
         if((false))
          {
           if((false))
            break;
           break;
          }
         if((false))
          barrier();
         if((false))
          continue;
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           if(true)
            {
             barrier();
            }
           else
            {
            }
           if((false))
            return;
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          break;
         if((false))
          {
           if(((true && (((false) && true)))))
            continue;
           return;
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
         do
          {
           if(((bool(bvec2(false, true)))))
            break;
           if((false))
            barrier();
           if((false))
            {
             if((false))
              barrier();
             if(((false || (((injectionSwitch.x > injectionSwitch.y))))))
              barrier();
             barrier();
            }
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
        }
      }
    }
   else
    {
     if((false))
      barrier();
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    return;
   for(int _injected_loop_counter = (~ (~ (0))); _injected_loop_counter < ((1 << (((false ? (9489) : ((int(5)) << 0))))) >> (int(5))); _injected_loop_counter ++)
    {
     if((false))
      {
       for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
        {
         barrier();
        }
      }
     if((false))
      return;
     barrier();
     if((false))
      {
       if((false))
        break;
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
       break;
       if((false))
        break;
      }
    }
   if((false))
    return;
   if((false))
    return;
  }
 if((false))
  {
   do
    {
     barrier();
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
  }
 if((false))
  {
   if((false))
    barrier();
   if((false))
    return;
   if((false))
    {
     if((false))
      barrier();
     barrier();
     if((false))
      {
       for(int _injected_loop_counter = 0; _injected_loop_counter < (1 & ((1 << (int(7))) >> (int(7)))); _injected_loop_counter ++)
        {
         barrier();
        }
      }
    }
   barrier();
   if((false))
    barrier();
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      return;
     for(int _injected_loop_counter = 0; _injected_loop_counter < (0 ^ (1)); _injected_loop_counter ++)
      {
       if((false))
        continue;
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(true)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          return;
         return;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     else
      {
      }
     if(((true && (false))))
      barrier();
     if((false))
      return;
    }
   if((false))
    return;
   if((false))
    return;
  }
 if(((injectionSwitch.x > injectionSwitch.y)))
  {
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     return;
    }
   if((false))
    return;
   if((false))
    return;
  }
 else
  {
   if((false))
    {
     if((false))
      {
       if((false))
        {
         if((false))
          return;
         return;
        }
       if(((false || (false))))
        return;
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
        }
       return;
      }
     if((false))
      return;
     do
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(true)
        {
         if((false))
          barrier();
         if((false))
          barrier();
         if((false))
          {
           if((false))
            barrier();
           return;
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              continue;
             barrier();
            }
          }
         barrier();
         if(false)
          {
          }
         else
          {
           if((false))
            {
             if((false))
              break;
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                break;
               if((false))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((false))
                  return;
                 break;
                }
               barrier();
              }
             if(true)
              {
               if((false))
                continue;
               return;
              }
             else
              {
              }
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            continue;
           return;
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
        }
      }
     while(false);
     if((false))
      {
       if((false))
        barrier();
       if((false))
        return;
       return;
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
      }
     if((false))
      return;
     if((false))
      return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if((false))
  {
   if(((! (! ((bool(bvec3(false, true, true))))))))
    barrier();
   barrier();
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
