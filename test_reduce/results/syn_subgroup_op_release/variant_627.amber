#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec3 GLF_merged3_0_1_16_1_1_13_2_1_11next_virtual_gidnum_workgroupvirtual_gid;
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 GLF_merged3_0_1_16_1_1_13_2_1_11next_virtual_gidnum_workgroupvirtual_gid.y = num_workgroup;
 uint workgroup_size = (min(gl_WorkGroupSize, ((((uvec3(uvec3(uvec3(uvec4(((((gl_WorkGroupSize) | (gl_WorkGroupSize))) >> uvec3(0u, 0u, 0u)), 1u)))))) ^ uvec3(0u, ((0u) - 0u), 0u))))).x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = (clamp(workgroup_size, ((workgroup_size) | uint((injectionSwitch.x))), workgroup_size)) * workgroup_id;
 uint virtual_gid = (0u | (workgroup_base + subgroup_id * subgroup_size + (((min(subgroup_local_id, subgroup_local_id)) | 0u))));
 GLF_merged3_0_1_16_1_1_13_2_1_11next_virtual_gidnum_workgroupvirtual_gid.z = (~ (~ (virtual_gid)));
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((uint(uvec4((subgroup_local_id + 1) % ((subgroup_size) | (uint((~ (((clamp(max(~ (min((max((((true ? uint((uint(uint((((((((0u | (uint(uvec2(((subgroup_size)) | 0u, 1u))))) ^ 0u)) + 0u))))))) : (workgroup_id)))), (((true ? uint((uint(uint((((((((0u | (uint(uvec2(((subgroup_size)) | 0u, 1u))))) ^ 0u)) + 0u))))))) : (workgroup_id)))))), (((true ? uint((uint(uint((((((((0u | (uint(uvec2(((subgroup_size)) | 0u, 1u))))) ^ 0u)) + 0u))))))) : (workgroup_id)))))), ~ (((true ? uint((uint(uint((((0u | (uint(uvec2(((subgroup_size)) | 0u, 1u)))))))))) : (workgroup_id))))), max(~ (((true ? uint((uint(uint((((((0u | (uint(uvec2(((subgroup_size)) | 0u, 1u))))))) / (1u ^ 0u)))))) : ((min(workgroup_id, workgroup_id)))))), ~ (((true ? uint((uint(uint((((0u | (~ ((min(~ ((uint(uvec2((((((uint(uint(subgroup_size))) | ((0u | (uint(uint(subgroup_size))))))))) | 0u, 1u)))), (max(~ ((uint(uvec2(((subgroup_size)) | 0u, 1u)))), ~ ((uint(uvec2(((subgroup_size)) | 0u, 1u))))))))))))))))) : (workgroup_id))))), max(((~ (((true ? uint((uint(uint((((0u | (((uint(uvec2(((((subgroup_size))) >> 0u) | 0u, 1u))) << 0u))))))))) : (workgroup_id))))) ^ 0u), ~ (((true ? uint((uint(uint((((((0u | (uint(uvec2(((subgroup_size)) | 0u, 1u)))) | (0u | (uint(uvec2(((subgroup_size)) | 0u, (~ (~ (1u))))))))))))))) : (workgroup_id))))))))))))), 0u, 0u, 1u))));
 GLF_merged3_0_1_16_1_1_13_2_1_11next_virtual_gidnum_workgroupvirtual_gid.x = next_virtual_gid;
 buf[GLF_merged3_0_1_16_1_1_13_2_1_11next_virtual_gidnum_workgroupvirtual_gid.z] = 1;
 if(subgroup_local_id + 1 < subgroup_size)
  {
   atomicStore(buf[(uvec3((max(GLF_merged3_0_1_16_1_1_13_2_1_11next_virtual_gidnum_workgroupvirtual_gid[0], GLF_merged3_0_1_16_1_1_13_2_1_11next_virtual_gidnum_workgroupvirtual_gid[0])), GLF_merged3_0_1_16_1_1_13_2_1_11next_virtual_gidnum_workgroupvirtual_gid[((1) | (0 >> (clamp((int(1)), ((true ? (int(1)) : (- 62915))), (((int(1))) ^ 0)))))], GLF_merged3_0_1_16_1_1_13_2_1_11next_virtual_gidnum_workgroupvirtual_gid[2])).x], uint(2), 4, 64, 4);
   subgroupAll(false);
  }
 else
  {
   atomicStore(buf[((((injectionSwitch.x < injectionSwitch.y)) ? (~ (~ ((((~ (~ ((((((0u ^ (((min((GLF_merged3_0_1_16_1_1_13_2_1_11next_virtual_gidnum_workgroupvirtual_gid.x), (~ (~ ((GLF_merged3_0_1_16_1_1_13_2_1_11next_virtual_gidnum_workgroupvirtual_gid.x))))))) | ((GLF_merged3_0_1_16_1_1_13_2_1_11next_virtual_gidnum_workgroupvirtual_gid.x))))) | (GLF_merged3_0_1_16_1_1_13_2_1_11next_virtual_gidnum_workgroupvirtual_gid.x)) + 0u))))) - ((min(0u, 0u)) >> (uint((uint(uint(3u))))))))))) : (workgroup_id)))], uint(2), 4, 64, 4);
   subgroupAll(true);
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
