#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((false))
  barrier();
 if((((false || (bool(bool(false)))))))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if((false))
  barrier();
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(((true && (false))))
  {
   if((false))
    barrier();
   barrier();
   if((false))
    barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((((injectionSwitch.x > (0.0 + (injectionSwitch.y))))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint num_workgroup = ((gl_NumWorkGroups.x) ^ 0u);
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   barrier();
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if((false))
  barrier();
 if((false))
  {
   if((false))
    {
     if((false))
      barrier();
     if((false))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   barrier();
   if((((false) && true)))
    barrier();
   if((false))
    barrier();
  }
 if(((((vec2((clamp(injectionSwitch[0], injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1])).x > (clamp(injectionSwitch, (mat2(1.0) * (injectionSwitch)), injectionSwitch)).y))))
  barrier();
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     barrier();
    }
   barrier();
  }
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = (~ (((~ (((workgroup_base) | (1u ^ 1u)))) | (~ (((workgroup_base) | (1u ^ 1u))))))) + (max((clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size)), subgroup_id * subgroup_size)) + subgroup_local_id;
 if((false))
  barrier();
 if((! (! ((((injectionSwitch.x > injectionSwitch.y)))))))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((bool(bvec4((false || ((((((false || ((((bool(bvec3(((bool(bvec3((((max(injectionSwitch.x, (min(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y)), true, true)))) && true, true, true))))) || false))) || false))))), false, false, true))))
  {
   if((false))
    barrier();
   if((true && ((((injectionSwitch.x > injectionSwitch.y))))))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 uint next_virtual_gid = (max((0u ^ (workgroup_base)), workgroup_base)) + ((((clamp((subgroup_id) >> 0u, (subgroup_id) >> 0u, (subgroup_id) >> 0u)))) | ((0u ^ (subgroup_id)))) * (clamp((1u * ((uint(uvec3(subgroup_size, 1u, 0u))))), (uint(uvec3(subgroup_size, 1u, 0u))), (uint(uvec3(subgroup_size, 1u, 0u))))) + ((subgroup_local_id + 1) % ((((((injectionSwitch.x < injectionSwitch.y)) ? ((max((((min((subgroup_size) / 1u, (subgroup_size) / 1u))) | ((subgroup_size) / 1u)), (subgroup_size) / 1u))) : (subgroup_id))) >> 0u)));
 if(((((mix(vec2((injectionSwitch)[0], (980.563)), vec2((- 6635.8506), (injectionSwitch)[1]), bvec2(((injectionSwitch.x > injectionSwitch.y)), true))).x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   barrier();
  }
 buf[virtual_gid] = 1;
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 if((! (! ((false)))))
  {
   if(((bool(bool(((! (! (bool(bvec3(false, false, true)))))))))))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((false))
  barrier();
 if((((false) || false)))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 if((((((! (! ((false) && true))))) && true)))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((false))
  barrier();
 if((((injectionSwitch.x > (max(injectionSwitch.y, injectionSwitch.y))))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   barrier();
  }
 if((bool((bvec3(bvec4(bvec3((bool((bvec3(bvec3(bvec3((bool(bool((clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1)) < subgroup_size))), true, false)))))), ((injectionSwitch.x > injectionSwitch.y)), false), true))))))
  {
   if(((bool((false || (((bool(((injectionSwitch.x > injectionSwitch.y))))) || false))))))
    barrier();
   if(((true && (false))))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     if((bool(bvec4((false), true, true, true))))
      barrier();
     if((((false) || false)))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   atomicStore(buf[(~ ((min(~ (next_virtual_gid), ~ (next_virtual_gid)))))], uint(2), (int(ivec4((min((max((int(int(4))), (int(int(4))))), (int(int(4))))), 0, 1, 0))), 64, 4);
   subgroupAll((! (! ((bool(bool(false)))))));
   if((false))
    {
     if(((bool(bvec4((false || (((injectionSwitch.x > injectionSwitch.y)))), false, true, false)))))
      {
       if((false))
        barrier();
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
    }
   if((((injectionSwitch.x > (((float(mat2x4(injectionSwitch.y, 0.0, 0.0, 1.0, 1.0, (injectionSwitch.x), 1.0, 0.0)))) / 1.0)))))
    barrier();
  }
 else
  {
   if((false))
    barrier();
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(((((mix(float((4978.3204)), float(((false ? (4.8) : injectionSwitch.x))), bool(true))) > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   atomicStore(buf[next_virtual_gid], uint(2), ((4) | 0), (clamp(64, 64, 64)), 4);
   subgroupAll((true && ((! (! (true))))));
   if(((! (! (((injectionSwitch.x > (vec2(1.0, 1.0) * (injectionSwitch)).y)))))))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   if(((bool(bvec2((bool(bvec3(false, false, false))), true)))))
    barrier();
  }
 if((true && ((false))))
  barrier();
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
