#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

struct _GLF_struct_3 {
 mat3x4 _f0;
 mat2x4 _f1;
 mat2 _f2;
 mat2x3 _f3;
 bool _f4;
 vec2 _f5;
} ;

struct _GLF_struct_4 {
 _GLF_struct_3 _f0;
 uvec3 _f1;
} ;

struct _GLF_struct_1 {
 mat4x3 _f0;
 mat4 _f1;
 ivec4 _f2;
} ;

struct _GLF_struct_0 {
 vec4 _f0;
 mat3 _f1;
} ;

struct _GLF_struct_2 {
 mat2 _f0;
 ivec3 _f1;
 _GLF_struct_0 _f2;
 bvec4 _f3;
 uvec3 _f4;
 _GLF_struct_1 _f5;
} ;

struct _GLF_struct_5 {
 _GLF_struct_2 _f0;
 _GLF_struct_4 _f1;
 uint next_virtual_gid;
} ;

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(false)
  {
  }
 else
  {
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 if(((injectionSwitch.x < injectionSwitch.y)))
  {
   if((false))
    barrier();
  }
 else
  {
  }
 if((false))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if((false))
  {
   do
    {
     barrier();
    }
   while(false);
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     barrier();
    }
   else
    {
    }
  }
 if(false)
  {
   if((false))
    barrier();
  }
 else
  {
   if((false))
    {
     if((false))
      {
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
       barrier();
      }
     for(int _injected_loop_counter = 1; _injected_loop_counter != (- 86705 & 0); _injected_loop_counter --)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   if((false))
    {
     do
      {
       barrier();
      }
     while(false);
    }
   if(false)
    {
    }
   else
    {
     do
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if(false)
            {
            }
           else
            {
             barrier();
            }
          }
         if(false)
          {
          }
         else
          {
           for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
            {
             barrier();
            }
           if((false))
            barrier();
          }
         if((false))
          barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((false) || false)))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(true)
          {
           for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
            {
             do
              {
               barrier();
               if((false))
                barrier();
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
              }
             while(false);
            }
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         for(int _injected_loop_counter = ((0) | 0); _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
          {
           if((false))
            barrier();
          }
         if(false)
          {
          }
         else
          {
           if((false))
            barrier();
          }
        }
      }
     while(false);
    }
   if((false))
    barrier();
   do
    {
     if((false))
      barrier();
     if((false))
      barrier();
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if((false))
  {
   for(int _injected_loop_counter = (0 & - 2402); _injected_loop_counter != (0 ^ 1); _injected_loop_counter ++)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(((injectionSwitch.x < injectionSwitch.y)))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      {
       if((false))
        barrier();
       if(false)
        {
        }
       else
        {
         barrier();
         if((false))
          barrier();
        }
      }
     if((false))
      {
       if((false))
        {
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           barrier();
          }
         else
          {
           if((false))
            barrier();
          }
        }
       barrier();
      }
     if((false))
      barrier();
     if((false))
      barrier();
     barrier();
    }
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
 uint workgroup_base = workgroup_size * workgroup_id;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    {
     for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
      {
       barrier();
      }
    }
   if(((true && ((false || (false))))))
    barrier();
   barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       barrier();
      }
     while(false);
    }
  }
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 if(true)
  {
   if(true)
    {
     do
      {
       do
        {
         if((false))
          barrier();
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
      }
     while(false);
    }
   else
    {
    }
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
  }
 if(((injectionSwitch.x < injectionSwitch.y)))
  {
   if(((! (! (false)))))
    {
     if(((! (! (false)))))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(false)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if((false))
          {
           if((false))
            {
             do
              {
               barrier();
              }
             while(false);
            }
           barrier();
           if((false))
            barrier();
          }
         if((false || (true)))
          {
           if((false))
            {
             if(((injectionSwitch.x < injectionSwitch.y)))
              {
               do
                {
                 if(true)
                  {
                   barrier();
                   if((false))
                    barrier();
                  }
                 else
                  {
                  }
                }
               while(false);
              }
             else
              {
              }
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if(((injectionSwitch.x < injectionSwitch.y)))
              {
               barrier();
              }
             else
              {
              }
            }
           for(int _injected_loop_counter = 1; _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
            {
             if((false))
              barrier();
             barrier();
            }
           if(true)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               do
                {
                 do
                  {
                   barrier();
                  }
                 while(false);
                }
               while(((injectionSwitch.x > injectionSwitch.y)));
              }
             if((false))
              barrier();
             if((false))
              barrier();
            }
           else
            {
            }
          }
         else
          {
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
      }
     if((false))
      {
       do
        {
         barrier();
        }
       while(false);
      }
     if(false)
      {
      }
     else
      {
       do
        {
         if((false))
          barrier();
         if((false))
          barrier();
        }
       while(false);
       for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           barrier();
          }
         if((false))
          {
           if((false))
            barrier();
           if((((false) || false)))
            barrier();
           barrier();
          }
         if((false))
          {
           if((false))
            barrier();
           if((! (! (true))))
            {
             barrier();
            }
           else
            {
             if((false))
              barrier();
             do
              {
               if((false))
                barrier();
              }
             while(false);
            }
          }
         if(true)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(false)
            {
            }
           else
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
          }
         if((false))
          barrier();
        }
       if((false))
        barrier();
       barrier();
      }
     if((false))
      {
       if(true)
        {
         barrier();
        }
       else
        {
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
          }
        }
      }
    }
  }
 else
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   if(((! (! (false)))))
    barrier();
   if((false))
    barrier();
  }
 if((false))
  barrier();
 if(((injectionSwitch.x < injectionSwitch.y)))
  {
   if((! ((! (! (! (false)))))))
    {
     if((false))
      barrier();
    }
   else
    {
     if((false))
      barrier();
     if((false))
      barrier();
     if((false))
      {
       do
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             do
              {
               barrier();
              }
             while(false);
            }
           while(false);
          }
         barrier();
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(false);
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
  }
 _GLF_struct_5 _GLF_struct_replacement_5 = _GLF_struct_5(_GLF_struct_2(mat2(1.0), ivec3(1), _GLF_struct_0(vec4(1.0), mat3(1.0)), bvec4(true), uvec3(1u), _GLF_struct_1(mat4x3(1.0), mat4(1.0), ivec4(1))), _GLF_struct_4(_GLF_struct_3(mat3x4(1.0), mat2x4(1.0), mat2(1.0), mat2x3(1.0), true, vec2(1.0)), uvec3(1u)), workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size));
 if((false))
  barrier();
 for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
  {
   if(true)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = (0 | (0 << ((0 ^ (int(6)))))); _injected_loop_counter < 1; _injected_loop_counter ++)
      {
       if(false)
        {
         if((false))
          barrier();
        }
       else
        {
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((false))
              barrier();
             barrier();
             if((false))
              {
               if((false))
                barrier();
               barrier();
              }
            }
           if((false))
            barrier();
          }
         else
          {
          }
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(false)
        {
        }
       else
        {
         if(true)
          {
           if(true)
            {
             for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
              {
               if((false))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if(true)
                  {
                   for(int _injected_loop_counter = (0 >> (int(5))); _injected_loop_counter != 1; _injected_loop_counter ++)
                    {
                     barrier();
                    }
                  }
                 else
                  {
                  }
                 for(int _injected_loop_counter = 1; _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
                  {
                   for(int _injected_loop_counter = ((1 << (((int(3)) | (int(3))))) >> (int(3))); _injected_loop_counter > 0; _injected_loop_counter --)
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                  }
                }
              }
             if((false))
              {
               if((false))
                barrier();
               barrier();
              }
             if(false)
              {
              }
             else
              {
               for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > (0 << (int(3))); _injected_loop_counter --)
                {
                 if(((injectionSwitch.x > injectionSwitch.y)))
                  {
                   if((false))
                    barrier();
                  }
                 else
                  {
                   if((false))
                    {
                     for(int _injected_loop_counter = 1; _injected_loop_counter != (1 * (0)); _injected_loop_counter --)
                      {
                       if((false))
                        {
                         if(false)
                          {
                          }
                         else
                          {
                           barrier();
                          }
                        }
                      }
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(false)
                        {
                        }
                       else
                        {
                         if((false))
                          {
                           if((((injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                           barrier();
                          }
                         if((false))
                          barrier();
                         barrier();
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                        }
                      }
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(((injectionSwitch.x < injectionSwitch.y)))
                        {
                         if((false))
                          barrier();
                         if(((injectionSwitch.x > injectionSwitch.y)))
                          {
                          }
                         else
                          {
                           barrier();
                           if((false))
                            barrier();
                          }
                        }
                       else
                        {
                         if((false))
                          barrier();
                        }
                      }
                     if((false))
                      barrier();
                     if((false))
                      {
                       if(((! (! (false)))))
                        barrier();
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        {
                         for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                          {
                           barrier();
                          }
                        }
                       barrier();
                      }
                     if(((injectionSwitch.x > injectionSwitch.y)))
                      {
                      }
                     else
                      {
                       barrier();
                      }
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(((injectionSwitch.x < injectionSwitch.y)))
                        {
                         barrier();
                        }
                       else
                        {
                        }
                      }
                    }
                  }
                 if(((bool(bvec4(false, true, false, true)))))
                  {
                   if((false))
                    barrier();
                   barrier();
                  }
                 if((false))
                  {
                   for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != 0; _injected_loop_counter --)
                    {
                     barrier();
                    }
                  }
                 if((false))
                  barrier();
                 if((false))
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   barrier();
                  }
                 if((false))
                  barrier();
                 if((false))
                  barrier();
                }
              }
             for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 for(int _injected_loop_counter = (1 | 1); _injected_loop_counter != (int((injectionSwitch.x)) << (int(7))); _injected_loop_counter --)
                  {
                   if((false))
                    barrier();
                   if((false))
                    barrier();
                   if((((((injectionSwitch.x > injectionSwitch.y))) && true)))
                    barrier();
                  }
                 do
                  {
                   if((false))
                    {
                     if((false))
                      {
                       for(int _injected_loop_counter = 1; _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
                        {
                         barrier();
                        }
                      }
                     if(false)
                      {
                      }
                     else
                      {
                       if(false)
                        {
                         if((false))
                          barrier();
                        }
                       else
                        {
                         if((false))
                          barrier();
                         if((false))
                          {
                           if(false)
                            {
                            }
                           else
                            {
                             barrier();
                            }
                          }
                         for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != ((0 >> (int(8))) | 1); _injected_loop_counter ++)
                          {
                           barrier();
                          }
                         if((false))
                          barrier();
                        }
                      }
                    }
                  }
                 while((true && (false)));
                 if((false))
                  barrier();
                 do
                  {
                   barrier();
                  }
                 while(false);
                 if((false))
                  barrier();
                }
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((false))
              barrier();
             if((false))
              {
               if((((false) && true)))
                {
                 if((false))
                  barrier();
                 for(int _injected_loop_counter = (1 & 1); _injected_loop_counter != 0; _injected_loop_counter --)
                  {
                   barrier();
                  }
                }
               for(int _injected_loop_counter = 0; _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
                {
                 for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
                  {
                   if((false))
                    barrier();
                   if((false))
                    barrier();
                  }
                 if((false))
                  {
                   if(((injectionSwitch.x > injectionSwitch.y)))
                    {
                    }
                   else
                    {
                     if(true)
                      {
                       barrier();
                      }
                     else
                      {
                      }
                    }
                   if((false))
                    barrier();
                  }
                }
               if(((injectionSwitch.x < injectionSwitch.y)))
                {
                 if((false))
                  barrier();
                }
               else
                {
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if(false)
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
               if((false))
                {
                 if((false))
                  barrier();
                 for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != ((1 << (int(2))) >> ((min(int(2), int(2))))); _injected_loop_counter ++)
                  {
                   barrier();
                   for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     if((false))
                      barrier();
                    }
                  }
                 if((false))
                  barrier();
                }
               for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != 1; _injected_loop_counter ++)
                {
                 if((bool(bvec4(false, false, true, true))))
                  {
                  }
                 else
                  {
                   if((false))
                    barrier();
                  }
                 if((false))
                  {
                   if((false))
                    barrier();
                   if(((injectionSwitch.x > injectionSwitch.y)))
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                   else
                    {
                     if((false))
                      barrier();
                     if((false))
                      {
                       if(true)
                        {
                         barrier();
                        }
                       else
                        {
                         if((false))
                          barrier();
                        }
                       if((false))
                        {
                         if(((false) || false))
                          {
                          }
                         else
                          {
                           if((((injectionSwitch.x > injectionSwitch.y))))
                            {
                             if((false))
                              barrier();
                             barrier();
                            }
                          }
                         if(((bool(bool(false)))))
                          barrier();
                         barrier();
                        }
                      }
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     if((! (! (false))))
                      {
                      }
                     else
                      {
                       if(((bool(bool(false)))))
                        barrier();
                       barrier();
                       if((false))
                        {
                         if(false)
                          {
                          }
                         else
                          {
                           if((false))
                            barrier();
                           if((false))
                            barrier();
                          }
                         if((false))
                          barrier();
                         barrier();
                        }
                      }
                    }
                   if((false))
                    barrier();
                  }
                 if((false))
                  barrier();
                }
               if((false))
                barrier();
               if(true)
                {
                 do
                  {
                   if((false))
                    barrier();
                   if((false))
                    barrier();
                   if(true)
                    {
                     if((false))
                      barrier();
                     if(false)
                      {
                      }
                     else
                      {
                       barrier();
                      }
                    }
                   else
                    {
                    }
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    {
                     do
                      {
                       if((false))
                        barrier();
                       barrier();
                      }
                     while(false);
                    }
                  }
                 while(((injectionSwitch.x > injectionSwitch.y)));
                }
               else
                {
                 if((false))
                  barrier();
                }
               if((false))
                barrier();
               if((false))
                barrier();
              }
            }
           else
            {
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
              }
             else
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
                  {
                   if(true)
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      {
                       do
                        {
                         for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != 1; _injected_loop_counter ++)
                          {
                           barrier();
                          }
                        }
                       while(((injectionSwitch.x > injectionSwitch.y)));
                      }
                    }
                   else
                    {
                    }
                   barrier();
                  }
                }
              }
             for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
              {
               if(((injectionSwitch.x > injectionSwitch.y)))
                {
                }
               else
                {
                 if(((false || (((false) && true)))))
                  barrier();
                 if((false))
                  {
                   if((false))
                    barrier();
                   if((false))
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     if((false))
                      {
                       if((false))
                        barrier();
                       if((false))
                        barrier();
                       barrier();
                       if((false))
                        barrier();
                      }
                     barrier();
                    }
                   if((false))
                    barrier();
                   for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                    {
                     barrier();
                     if((false))
                      barrier();
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(true)
                        {
                         barrier();
                         if((false))
                          barrier();
                        }
                       else
                        {
                         if((false))
                          barrier();
                        }
                      }
                    }
                  }
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   for(int _injected_loop_counter = (0 | 0); _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     barrier();
                    }
                  }
                }
              }
            }
          }
         else
          {
          }
        }
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(((! (! (false)))))
        barrier();
       if((false))
        {
         for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
          {
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != 1; _injected_loop_counter ++)
              {
               for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
                {
                 barrier();
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
            }
          }
         barrier();
         if((false))
          barrier();
        }
      }
     if((false))
      barrier();
    }
   else
    {
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = (1 ^ 1); _injected_loop_counter < (1 & 1); _injected_loop_counter ++)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        {
         if(false)
          {
          }
         else
          {
           barrier();
          }
        }
      }
    }
  }
 for(int _injected_loop_counter = 1; _injected_loop_counter > (0 ^ 0); _injected_loop_counter --)
  {
   for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
    {
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
       if((false))
        barrier();
      }
     else
      {
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
      {
       buf[virtual_gid] = 1;
       do
        {
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             if((false))
              barrier();
             barrier();
            }
           while(false);
          }
        }
       while(false);
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
  }
 for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
  {
   if(false)
    {
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if((false))
      {
       if(false)
        {
        }
       else
        {
         barrier();
        }
      }
    }
   else
    {
     if((false))
      barrier();
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       if((false))
        {
         if(true)
          {
           if((false))
            barrier();
          }
         else
          {
          }
         do
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
               if((false))
                barrier();
              }
             else
              {
               if((((((injectionSwitch.x > injectionSwitch.y))) && true)))
                barrier();
              }
             if((false))
              barrier();
             barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            {
             if((false))
              barrier();
             barrier();
            }
          }
         while(false);
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           barrier();
           if(((bool(bvec3(false, false, true)))))
            barrier();
          }
         else
          {
           if(((bool(bvec3(((injectionSwitch.x > injectionSwitch.y)), false, true)))))
            barrier();
           if((false))
            barrier();
          }
        }
      }
    }
   for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
    {
     if((false))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       if((false))
        barrier();
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
         if((false))
          {
           for(int _injected_loop_counter = ((1 << (int(5))) >> (int(5))); _injected_loop_counter != 0; _injected_loop_counter --)
            {
             if((false))
              {
               if(true)
                {
                 do
                  {
                   barrier();
                  }
                 while(false);
                }
               else
                {
                }
              }
             do
              {
               barrier();
               if((false))
                barrier();
              }
             while(((injectionSwitch.x > injectionSwitch.y)));
            }
           if((false))
            barrier();
          }
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          barrier();
         if((false))
          barrier();
         if((false))
          barrier();
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          barrier();
         do
          {
           barrier();
          }
         while(false);
         do
          {
           if((false))
            {
             if((false))
              barrier();
             if((false))
              barrier();
             barrier();
            }
           if((false))
            barrier();
          }
         while(false);
         if((false))
          barrier();
         if((false))
          barrier();
        }
       if(true)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
       if((false))
        {
         if(true)
          {
           if((false))
            barrier();
           if((false))
            barrier();
          }
         else
          {
          }
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           barrier();
          }
         if((false))
          barrier();
         barrier();
         if((false))
          barrier();
        }
      }
     if((false))
      barrier();
     if((false))
      barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(subgroup_local_id + 1 < subgroup_size)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   do
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         barrier();
        }
       else
        {
        }
      }
     if((false))
      barrier();
     if(false)
      {
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         if((false))
          {
           do
            {
             barrier();
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
          }
         if(false)
          {
           if((false))
            {
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
               if((false))
                barrier();
              }
             else
              {
               barrier();
              }
            }
          }
         else
          {
           barrier();
           if((false))
            barrier();
          }
        }
       if((false))
        barrier();
      }
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
   if(true)
    {
     if((false))
      {
       do
        {
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
          }
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
      }
     if((false))
      {
       for(int _injected_loop_counter = ((0 << (int(7))) << (int(7))); _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
        {
         do
          {
           for(int _injected_loop_counter = 0; _injected_loop_counter < ((1 << (int(2))) >> (int(2))); _injected_loop_counter ++)
            {
             do
              {
               if(((false || (false))))
                {
                 if((false))
                  barrier();
                 barrier();
                }
               if((false))
                barrier();
               if((false))
                {
                 if((false))
                  barrier();
                 barrier();
                }
               if((false))
                {
                 for(int _injected_loop_counter = 1; _injected_loop_counter > (0 ^ 0); _injected_loop_counter --)
                  {
                   barrier();
                  }
                }
               if(false)
                {
                }
               else
                {
                 barrier();
                }
               do
                {
                 for(int _injected_loop_counter = 0; _injected_loop_counter != ((1) | (1)); _injected_loop_counter ++)
                  {
                   if((false))
                    barrier();
                   if((false))
                    {
                     if(false)
                      {
                       if((false))
                        barrier();
                      }
                     else
                      {
                       barrier();
                       if((false))
                        barrier();
                      }
                    }
                  }
                }
               while(false);
               if((false))
                barrier();
               if((false))
                barrier();
               if((false))
                barrier();
               if(((! (! (false)))))
                {
                 if(false)
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
              }
             while(false);
            }
           if((false))
            {
             if((false))
              barrier();
             barrier();
            }
           if(true)
            {
             if((false))
              {
               do
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               while(((injectionSwitch.x > injectionSwitch.y)));
               do
                {
                 do
                  {
                   barrier();
                   if(true)
                    {
                     if((false))
                      barrier();
                    }
                   else
                    {
                    }
                  }
                 while(false);
                }
               while(false);
              }
            }
           else
            {
            }
           if((false))
            barrier();
           for(int _injected_loop_counter = (0 << (int(6))); _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
            {
             if((false))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if((((false) || false)))
            barrier();
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
        }
      }
    }
   else
    {
     if((false))
      {
       if((bool((bool(bvec3(bool(false), true, true))))))
        {
        }
       else
        {
         barrier();
        }
      }
     if((false))
      barrier();
     if((false))
      {
       do
        {
         barrier();
        }
       while(false);
      }
    }
   for(int _injected_loop_counter = ((1 << (int(2))) >> (int(2))); _injected_loop_counter > (0 ^ 0); _injected_loop_counter --)
    {
     if((false))
      barrier();
     if((false))
      {
       if((false))
        {
         if(((false || (((injectionSwitch.x > injectionSwitch.y))))))
          barrier();
         barrier();
        }
       barrier();
      }
    }
   if((false))
    barrier();
   if(((bool(bool(false)))))
    {
     if((false))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        {
         for(int _injected_loop_counter = (0 & ivec2(- 3274, 3122).y); _injected_loop_counter != 1; _injected_loop_counter ++)
          {
           barrier();
          }
        }
       if(false)
        {
        }
       else
        {
         if(true)
          {
           barrier();
          }
         else
          {
          }
         if((false))
          barrier();
        }
       if((false))
        barrier();
       if((false))
        {
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           barrier();
          }
         else
          {
          }
        }
      }
     if(false)
      {
      }
     else
      {
       for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
        {
         barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(true)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             do
              {
               if((false))
                barrier();
              }
             while(((injectionSwitch.x > injectionSwitch.y)));
             barrier();
            }
          }
         else
          {
          }
        }
       if((false))
        barrier();
      }
     if((false))
      barrier();
    }
   do
    {
     atomicStore(buf[_GLF_struct_replacement_5.next_virtual_gid], uint(2), 4, 64, 4);
    }
   while(false);
   if((false))
    {
     do
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     while(false);
    }
   do
    {
     for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             barrier();
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
          }
        }
       if((false))
        barrier();
       if(true)
        {
         for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > (7134 & int((injectionSwitch.x))); _injected_loop_counter --)
          {
           if((false))
            barrier();
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                barrier();
               barrier();
              }
             barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((false))
              barrier();
            }
          }
        }
       else
        {
        }
       if((false))
        {
         do
          {
           barrier();
          }
         while(false);
         if((false))
          barrier();
        }
      }
     if(((true && (false))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(false);
   if((false))
    {
     if((false))
      barrier();
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       barrier();
       if((false))
        barrier();
      }
     else
      {
      }
    }
   if(true)
    {
     if(true)
      {
       if(false)
        {
         if((false))
          barrier();
         if(true)
          {
           if((false))
            barrier();
          }
         else
          {
           if((false))
            barrier();
          }
         if((false))
          {
           do
            {
             if((false))
              barrier();
             if((false))
              barrier();
             barrier();
            }
           while(false);
          }
         if((false))
          {
           if((false))
            barrier();
           if((false))
            barrier();
           for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
            {
             if((false))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
          }
        }
       else
        {
         if(((! (! ((false || (false)))))))
          barrier();
         subgroupAll(false);
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if(true)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              barrier();
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
              }
             else
              {
               if(((bool(bvec3(false, true, ((injectionSwitch.x < injectionSwitch.y)))))))
                {
                 if(false)
                  {
                  }
                 else
                  {
                   if((false))
                    barrier();
                  }
                 barrier();
                }
              }
             if((false))
              barrier();
             do
              {
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
               barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if((false))
                {
                 if((false))
                  barrier();
                 for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
                  {
                   if((false))
                    {
                     do
                      {
                       for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != ((1 << (int(0))) >> (int(0))); _injected_loop_counter ++)
                        {
                         if((false))
                          barrier();
                         for(int _injected_loop_counter = 1; _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
                          {
                           if((((injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                           barrier();
                          }
                         if((false))
                          barrier();
                        }
                      }
                     while(false);
                    }
                  }
                 for(int _injected_loop_counter = 0; _injected_loop_counter != (1 & 1); _injected_loop_counter ++)
                  {
                   barrier();
                   if((false))
                    barrier();
                  }
                }
              }
             while(false);
            }
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
          {
           if((false))
            barrier();
          }
         for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
          {
           do
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
            }
           while(false);
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((false))
                  barrier();
                 barrier();
                }
               do
                {
                 do
                  {
                   barrier();
                  }
                 while(((injectionSwitch.x > injectionSwitch.y)));
                }
               while(false);
              }
            }
           else
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((false))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if(true)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               do
                {
                 if((false))
                  barrier();
                 barrier();
                }
               while(((injectionSwitch.x > injectionSwitch.y)));
              }
            }
           else
            {
            }
          }
        }
      }
     else
      {
      }
     if((false))
      barrier();
    }
   else
    {
    }
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   for(int _injected_loop_counter = 1; _injected_loop_counter != (int(ivec2(0, 1))); _injected_loop_counter --)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
     if((false))
      barrier();
    }
  }
 else
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     if((false))
      barrier();
     if(((false) && true))
      {
      }
     else
      {
       barrier();
      }
    }
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
      {
       do
        {
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           if(true)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 do
                  {
                   barrier();
                  }
                 while(false);
                }
               barrier();
              }
            }
           else
            {
            }
          }
         if((false))
          barrier();
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
       if((false))
        barrier();
      }
     if(false)
      {
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(true)
        {
         if((false))
          barrier();
         if((false))
          barrier();
         for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
          {
           if((false))
            barrier();
           if(false)
            {
             if((false))
              barrier();
            }
           else
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if(true)
                {
                 barrier();
                }
               else
                {
                }
              }
            }
           barrier();
          }
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if((false))
        barrier();
      }
    }
   for(int _injected_loop_counter = ((0 << (int(1))) & 48475); _injected_loop_counter < ((1 << (int(4))) >> (int(4))); _injected_loop_counter ++)
    {
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
       if(false)
        {
        }
       else
        {
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           if((false))
            barrier();
          }
        }
      }
     else
      {
       if((false))
        {
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          barrier();
         barrier();
        }
       if((false))
        {
         if((bool(bvec4((bool(bvec2(false, false))), false, false, true))))
          {
          }
         else
          {
           if((false))
            barrier();
           if(true)
            {
             if((false))
              {
               for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
                {
                 barrier();
                }
              }
            }
           else
            {
            }
           if((false))
            {
             if((false))
              barrier();
             barrier();
            }
          }
         if(false)
          {
           if((false))
            {
             if(false)
              {
               if((false))
                barrier();
              }
             else
              {
               barrier();
              }
            }
          }
         else
          {
           barrier();
          }
        }
       if(false)
        {
        }
       else
        {
         if((false))
          barrier();
        }
      }
    }
   do
    {
     do
      {
       if((false))
        {
         do
          {
           barrier();
          }
         while(((false) || false));
        }
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if((false))
          barrier();
         if(false)
          {
           if((false))
            barrier();
           if(((false || (false))))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             do
              {
               barrier();
              }
             while(false);
            }
          }
         else
          {
           if(true)
            {
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(true)
                {
                 if(((injectionSwitch.x < injectionSwitch.y)))
                  {
                   if((false))
                    barrier();
                   barrier();
                   if((false))
                    barrier();
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 else
                  {
                  }
                }
               else
                {
                 if((false))
                  barrier();
                }
              }
             if((false))
              barrier();
            }
           else
            {
            }
          }
         if((false))
          barrier();
         for(int _injected_loop_counter = (((1 ^ 0) << (int(6))) >> (int(6))); _injected_loop_counter > (0 << ((clamp((max(int(2), int(2))), ((int(2)) | (int(2))), int(2))))); _injected_loop_counter --)
          {
           do
            {
             if(true)
              {
               if(true)
                {
                 if((false))
                  barrier();
                }
               else
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             else
              {
              }
             atomicStore(buf[_GLF_struct_replacement_5.next_virtual_gid], uint(2), 4, 64, 4);
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
          }
         if((false))
          barrier();
         if((false))
          {
           for(int _injected_loop_counter = (0 ^ 0); _injected_loop_counter != 1; _injected_loop_counter ++)
            {
             for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
              {
               barrier();
              }
            }
          }
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          barrier();
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             do
              {
               do
                {
                 barrier();
                 if((false))
                  barrier();
                }
               while(((false) && true));
              }
             while(((injectionSwitch.x > injectionSwitch.y)));
            }
           barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
     do
      {
       if((false))
        {
         do
          {
           if(false)
            {
            }
           else
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
        }
      }
     while(((false) && true));
    }
   while(false);
   if((((injectionSwitch.x < injectionSwitch.y)) && (true)))
    {
     subgroupAll(true);
    }
   else
    {
    }
   if((false))
    {
     for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
      {
       barrier();
      }
    }
   if((false))
    barrier();
  }
 do
  {
   if((((((injectionSwitch.x > injectionSwitch.y))) && true)))
    barrier();
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     if(true)
      {
       if((false))
        barrier();
       do
        {
         barrier();
         if((false))
          barrier();
        }
       while(false);
      }
     else
      {
      }
    }
   if((false))
    {
     if(true)
      {
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       if(((! (! (false)))))
        barrier();
      }
    }
  }
 while(((injectionSwitch.x > injectionSwitch.y)));
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
