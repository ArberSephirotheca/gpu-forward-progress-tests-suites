#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = (((((clamp((((clamp((((((true ? ((false ? (uvec3(153330u, 93780u, 71016u)) : uvec3(uvec3((uvec3((((min(((0u) >> 0u), 0u))) | (((0u) - 0u))), 0u, 0u) | (((((gl_NumWorkGroups)) ^ uvec3(0u, 0u, 0u))) | uvec3(0u, 0u, 0u)))))) / uvec3(1u, 1u, 1u)) : (uvec3(116971u, 163014u, 189643u))))))), (((false ? (uvec3(153330u, 93780u, 71016u)) : uvec3(uvec3((uvec3((((min((0u ^ (((0u) >> 0u))), 0u))) | (((0u) - 0u))), 0u, 0u) | ((~ (~ (((((gl_NumWorkGroups)) ^ uvec3(0u, 0u, 0u))) | uvec3(0u, 0u, 0u))))))))))), (((false ? (uvec3(153330u, 93780u, 71016u)) : uvec3(uvec3((uvec3((((min(((0u) >> 0u), 0u))) | ((((0u ^ (0u))) - 0u))), 0u, 0u) | (((((gl_NumWorkGroups)) ^ uvec3(0u, 0u, 0u))) | uvec3(0u, 0u, 0u))))))))))) << uvec3(0u, 0u, 0u)), (uvec3((((min(((0u) >> 0u), 0u))) | (((0u) - 0u))), 0u, 0u) | (gl_NumWorkGroups)), (~ (~ ((((uvec3((((min(((0u) >> 0u), 0u))) | (((0u) - 0u))), 0u, 0u)) - uvec3(0u, 0u, 0u)) | (gl_NumWorkGroups)))))))) | (uvec3(0u, ((0u) - 0u), 0u) | uvec3(0u, 0u, ((0u) | ((((~ (~ (0u)))) - 0u))))))) >> ((clamp(uvec3(0u, 0u, 0u), ((false ? (uvec3(173376u, 2382u, 112011u)) : ((uvec3(0u, 0u, 0u)) ^ (uvec3(48569u, 69634u, 59301u) & uvec3(0u, 0u, 0u))))), uvec3(0u, 0u, 0u))) | (uvec3(0u, 0u, 0u)))).x;
 uint workgroup_size = ((true ? gl_WorkGroupSize : (bitfieldInsert(uvec4(99855u, 248u, 22842u, 148289u), uvec4(156142u, 56963u, 176192u, 40349u), - 22021, 19824).yxy))).x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = (0u ^ (workgroup_size)) * workgroup_id;
 uint virtual_gid = workgroup_base + ((((subgroup_id) ^ (0u << (((((uint(5u))) | ((uint(5u))))) + uint((injectionSwitch.x))))) * subgroup_size) | (((clamp((1u * ((subgroup_id))), ((uint((injectionSwitch.x)) + (subgroup_id))), (subgroup_id))) ^ (0u << (clamp((((false ? (workgroup_size) : uint(5u)))), (clamp((((uint(5u))) << 0u), (uint(5u)), (uint(5u)))), (uint(5u)))))) * subgroup_size)) + ((true ? subgroup_local_id : (num_workgroup)));
 uint next_virtual_gid = (0u + (((((((workgroup_base + subgroup_id * subgroup_size + ((~ (((true ? ~ ((subgroup_local_id + (min((clamp((clamp(1, 1, 1)), (clamp(1, 1, 1)), (clamp(1, 1, (min(1, 1)))))), (int(((ivec4(1, 0, 0, 0)) | (ivec4(1, 0, 0, 0)))))))) % subgroup_size) : (num_workgroup))))))) * ((max(1u, (max(1u, 1u)))) & 1u)) / uint((injectionSwitch.y)))) | ((workgroup_base + subgroup_id * subgroup_size + ((~ (((true ? ~ ((subgroup_local_id + (min((clamp((clamp(1, 1, 1)), (clamp(1, 1, 1)), (clamp(1, 1, (min(1, 1)))))), (int(((ivec4(1, 0, 0, 0)) | (ivec4(1, 0, 0, 0)))))))) % subgroup_size) : (num_workgroup))))))) * ((max(1u, (max(1u, 1u)))) & 1u))))));
 buf[virtual_gid] = 1;
 if(((((true ? ((max((min(clamp(subgroup_local_id + 1, ((uint(uint(uint(uvec3(((subgroup_local_id + 1) * 1u), 0u, 1u)))))), (0u | (subgroup_local_id)) + (clamp(1, (~ (~ (1))), 1))), clamp(subgroup_local_id + 1, ((uint(uint(uint(uvec3(((subgroup_local_id + 1) * 1u), 0u, 1u)))))), (0u | (subgroup_local_id)) + (clamp(1, (~ (~ (1))), 1))))), clamp(subgroup_local_id + 1, ((uint(uint(uint(uvec3(((subgroup_local_id + 1) * 1u), 0u, 1u)))))), (0u | (subgroup_local_id)) + (clamp(1, (~ (~ (1))), 1)))))) : (workgroup_size))) | ((0u) << 0u))) < subgroup_size)
  {
   atomicStore(buf[next_virtual_gid], ((max((uint(2)), (min((min((uint(2)), (uint(((((! ((! (! (! ((true))))))) && true) ? 2 : (20587))))))), (uint(2)))))) | 0u), 4, 64, 4);
   subgroupAll(false);
  }
 else
  {
   atomicStore(buf[next_virtual_gid], ((max(min(uint(2), uint(2)), ((min(uint(2), uint(2))) | (0u & 194691u))))), 4, (((max(64, (int(int(64))))) << 0)), (~ (((((int(ivec2((~ (4)) | 0, 0))))) | (~ (4))))));
   subgroupAll((! (((bool(((bool(true && (! (((! (! (true && (true))))))))) || false)))))));
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
