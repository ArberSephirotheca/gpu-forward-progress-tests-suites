#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = (~ (~ ((uvec3((~ (~ (uvec4(gl_NumWorkGroups, 0u)))))).x)));
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = ((gl_WorkGroupID) | (gl_WorkGroupID)).x;
 uint workgroup_base = (((((0u ^ ((~ (~ ((((~ (~ (workgroup_size * workgroup_id))) ^ 0u) << (0u << (uint(4u)))) | (1u ^ 1u))))))))));
 uint subgroup_base = (uint((((uvec2(uvec3(uvec2(subgroup_id, uint((((clamp((clamp(min((mat2(1.0) * (injectionSwitch)).x, (((mat2(1.0) * (injectionSwitch)).x) - 0.0)), min(((clamp(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch), (min(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch)))))).x, (mat2(1.0) * (injectionSwitch)).x), (clamp(min((mat2(1.0) * (injectionSwitch)).x, (mat2(1.0) * (injectionSwitch)).x), min((clamp((mat2(1.0) * (injectionSwitch)).x, (mat2(1.0) * (injectionSwitch)).x, (max(((false ? (- 271.906) : (mat2(1.0) * (injectionSwitch)).x)), (mat2(1.0) * (injectionSwitch)).x)))), (mat2(1.0) * (injectionSwitch)).x), (min(min((mat2(1.0) * ((((mix(vec2((injectionSwitch)[0], (3.7)), vec2((55.21), (injectionSwitch)[1]), bvec2(false, true)))) - vec2(0.0, 0.0)))).x, (mat2(1.0) * (injectionSwitch)).x), min((mat2(1.0) * (injectionSwitch)).x, (mat2(1.0) * (injectionSwitch)).x))))))), (max(min((mat2(1.0) * (((true ? injectionSwitch : (injectionSwitch))))).x, (mat2(1.0) * (injectionSwitch)).x), min((((max(vec2((mat2x3(mat4x3(mat2x3(mat2(1.0) * (injectionSwitch), 0.0, 0.0, tan(0.0), (dot(vec2(0.0, 0.0), vec2(1.0, 1.0)))))))), vec2((mat2x3(mat4x3(mat2x3(mat2(1.0) * (injectionSwitch), 0.0, 0.0, tan(0.0), (dot(vec2(0.0, 0.0), vec2(1.0, 1.0)))))))))))).x, (mat2((clamp(1.0, 1.0, 1.0))) * (injectionSwitch)).x))), (((false ? (- 6.7) : (min(max(min((mat2((max(((1.0) * abs(1.0)), 1.0))) * (injectionSwitch)).x, (mat2(1.0) * (injectionSwitch)).x), (clamp(min((mat2(1.0) * (injectionSwitch)).x, (mat2(1.0) * (injectionSwitch)).x), min((mat2(1.0) * (injectionSwitch)).x, (mat2(1.0) * (injectionSwitch)).x), min((mat2(1.0) * (injectionSwitch)).x, (mat2(1.0) * ((min(vec2((mat2x3(mat4(mat2x3(((mat2(1.0) * (injectionSwitch))), sqrt(0.0), 0.0, 0.0, 1.0))))), vec2((mat2x3(mat4(mat2x3(((mat2(1.0) * (injectionSwitch))), sqrt(0.0), 0.0, 0.0, 1.0))))))))).x)))), max(min((mat2((max(((1.0) * abs(1.0)), 1.0))) * (injectionSwitch)).x, (mat2(1.0) * (injectionSwitch)).x), (clamp(min((mat2(1.0) * (injectionSwitch)).x, (mat2(1.0) * (injectionSwitch)).x), min((mat2(1.0) * (injectionSwitch)).x, (mat2(1.0) * (injectionSwitch)).x), min((mat2(1.0) * (injectionSwitch)).x, (mat2(1.0) * ((min(vec2((mat2x3(mat4(mat2x3(((mat2(1.0) * (injectionSwitch))), sqrt(0.0), 0.0, 0.0, 1.0))))), vec2((mat2x3(mat4(mat2x3(((mat2(1.0) * (injectionSwitch))), sqrt(0.0), 0.0, 0.0, 1.0))))))))).x))))))))))))))), 1u)))) | (((uvec2(subgroup_id, uint((((clamp((clamp(min((mat2(1.0) * (injectionSwitch)).x, (mat2(1.0) * (injectionSwitch)).x), min(((clamp(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch), (min(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch)))))).x, ((mat2(0.0, 0.0, 0.0, 0.0) + (mat2(1.0))) * (injectionSwitch)).x), (clamp(min((mat2(1.0) * (injectionSwitch)).x, ((mat2((mat3(1.0) * (mat2x3(mat2(1.0)))))) * (injectionSwitch)).x), min((clamp((mat2(1.0) * (injectionSwitch)).x, (mat2(1.0) * (injectionSwitch)).x, (max(((false ? (- 271.906) : (((false ? (mat2(74.52, 70.62, 9747.2993, - 9.0)) : mat2(1.0))) * (injectionSwitch)).x)), (mat2(1.0) * (injectionSwitch)).x)))), (mat2(1.0) * (injectionSwitch)).x), (min(min((mat2(1.0) * (injectionSwitch)).x, (mat2(1.0) * (injectionSwitch)).x), min((mat2(1.0) * (injectionSwitch)).x, (mat2(1.0) * (injectionSwitch)).x))))))), (max(min((mat2(1.0) * (((true ? injectionSwitch : (injectionSwitch))))).x, (mat2(1.0) * (injectionSwitch)).x), min((((max(vec2((mat2x3(mat4x3(mat2x3(mat2(1.0) * (injectionSwitch), 0.0, 0.0, tan((max(((0.0) + 0.0), 0.0))), (dot(vec2(0.0, 0.0), vec2(1.0, 1.0)))))))), vec2((mat2x3(mat4x3(mat2x3(mat2(1.0) * (injectionSwitch), 0.0, 0.0, tan(0.0), (dot(vec2(0.0, 0.0), vec2(1.0, 1.0)))))))))))).x, (mat2(1.0) * (injectionSwitch)).x))), (((false ? (- 6.7) : max(min((mat2((max(((1.0) * abs(1.0)), 1.0))) * (injectionSwitch)).x, (mat2(1.0) * (injectionSwitch)).x), (mix(float((clamp(min((mat2(1.0) * (injectionSwitch)).x, (mat2(1.0) * (injectionSwitch)).x), min((mat2(1.0) * (injectionSwitch)).x, (mat2(1.0) * (injectionSwitch)).x), min((mat2(1.0) * (injectionSwitch)).x, (mat2(1.0) * ((min(vec2((mat2x3(mat4(mat2x3(((mat2(1.0) * (injectionSwitch))), sqrt(0.0), 0.0, 0.0, 1.0))))), vec2((mat2x3(mat4(mat2x3(((mat2(1.0) * (injectionSwitch))), sqrt(0.0), 0.0, 0.0, 1.0))))))))).x)))), float((2.6)), bool(false)))))))))))))) | (uvec2(subgroup_id, uint(((((((min(clamp((clamp(min((mat2(1.0) * (injectionSwitch)).x, (mat2(1.0) * (injectionSwitch)).x), min(((clamp(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch), (min(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch)))))).x, (mat2(1.0) * (injectionSwitch)).x), (clamp(min((mat2(1.0) * (injectionSwitch)).x, (mat2(1.0) * (injectionSwitch)).x), min((clamp((mat2(1.0) * (injectionSwitch)).x, (mat2(1.0) * (injectionSwitch)).x, (max(((false ? (- 271.906) : (mat2(1.0) * (injectionSwitch)).x)), (mat2(1.0) * (injectionSwitch)).x)))), (mat2(1.0) * (injectionSwitch)).x), (min(min((mat2(1.0) * (injectionSwitch)).x, (mat2(1.0) * (injectionSwitch)).x), min((mat2(1.0) * (injectionSwitch)).x, (mat2(1.0) * (injectionSwitch)).x))))))), (max(min((mat2(1.0) * (((true ? injectionSwitch : (injectionSwitch))))).x, (mat2(1.0) * (injectionSwitch)).x), min((((max(vec2((mat2x3(mat4x3(mat2x3(mat2(1.0) * (injectionSwitch), 0.0, 0.0, tan(0.0), (dot(vec2(0.0, 0.0), vec2(1.0, 1.0)))))))), vec2((mat2x3(mat4x3(mat2x3(mat2(1.0) * (injectionSwitch), 0.0, 0.0, tan(0.0), (dot(vec2(0.0, 0.0), vec2(1.0, 1.0)))))))))))).x, (mat2(1.0) * (injectionSwitch)).x))), (((false ? (- 6.7) : max(min((mat2((max(((1.0) * abs(1.0)), 1.0))) * (injectionSwitch)).x, (mat2(1.0) * (injectionSwitch)).x), (clamp(min((mat2(1.0) * (injectionSwitch)).x, (mat2(1.0) * (injectionSwitch)).x), min((mat2(1.0) * (injectionSwitch)).x, (mat2(1.0) * (injectionSwitch)).x), min((mat2(1.0) * (injectionSwitch)).x, (mat2(1.0) * ((min(vec2((mat2x3(mat4(mat2x3(((mat2(1.0) * (injectionSwitch))), sqrt(0.0), 0.0, 0.0, 1.0))))), vec2((mat2x3(mat4(mat2x3(((mat2(1.0) * (injectionSwitch))), sqrt(0.0), 0.0, 0.0, 1.0))))))))).x)))))))), clamp((clamp(min((mat2(1.0) * (injectionSwitch)).x, (mat2(1.0) * (injectionSwitch)).x), min(((clamp(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch), (min(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch)))))).x, (mat2(1.0) * (injectionSwitch)).x), (clamp(min((mat2(1.0) * (injectionSwitch)).x, (mat2(1.0) * (injectionSwitch)).x), min((clamp((mat2(1.0) * (injectionSwitch)).x, (mat2(1.0) * (injectionSwitch)).x, (max(((false ? (- 271.906) : (mat2(1.0) * (injectionSwitch)).x)), (mat2(1.0) * (injectionSwitch)).x)))), (mat2(1.0) * (injectionSwitch)).x), (min(min((mat2(1.0) * (injectionSwitch)).x, (mat2(1.0) * (injectionSwitch)).x), min((mat2(1.0) * (injectionSwitch)).x, (mat2(1.0) * (injectionSwitch)).x))))))), (max(min((mat2(1.0) * (((true ? injectionSwitch : (injectionSwitch))))).x, (mat2(1.0) * (injectionSwitch)).x), min((((max(vec2((mat2x3(mat4x3(mat2x3(mat2(1.0) * (injectionSwitch), 0.0, 0.0, tan(0.0), (dot(vec2(0.0, 0.0), vec2(1.0, 1.0)))))))), vec2((mat2x3(mat4x3(mat2x3(mat2(1.0) * (injectionSwitch), 0.0, 0.0, tan(0.0), (dot(vec2(0.0, 0.0), vec2(1.0, 1.0)))))))))))).x, (mat2(1.0) * (injectionSwitch)).x))), (((false ? (- 6.7) : max(min((mat2((max(((1.0) * abs(1.0)), 1.0))) * (injectionSwitch)).x, (mat2(1.0) * (injectionSwitch)).x), (clamp(min((mat2(1.0) * (injectionSwitch)).x, (mat2(1.0) * (injectionSwitch)).x), min((mat2(1.0) * (injectionSwitch)).x, (mat2(1.0) * (injectionSwitch)).x), min((mat2(1.0) * (injectionSwitch)).x, (mat2(1.0) * ((min(vec2((mat2x3(mat4(mat2x3(((mat2(1.0) * (injectionSwitch))), sqrt(0.0), 0.0, 0.0, 1.0))))), vec2((mat2x3(mat4(mat2x3(((mat2(1.0) * (injectionSwitch))), sqrt(0.0), 0.0, 0.0, 1.0))))))))).x))))))))))) / abs(1.0))))))))))))) * subgroup_size;
 uint virtual_gid = (((clamp(((true ? workgroup_base + subgroup_base : (workgroup_base))), workgroup_base + subgroup_base, workgroup_base + subgroup_base))) | ((clamp(((((true ? (clamp(((((true ? workgroup_base : (workgroup_size))) + subgroup_base) / 1u), workgroup_base + subgroup_base, workgroup_base + subgroup_base)) : (workgroup_base)))) ^ 0u), (min((~ (~ (((workgroup_base + subgroup_base) ^ 0u)))), workgroup_base + subgroup_base)), (min(((((~ (~ ((min((((workgroup_base + subgroup_base) | (workgroup_base + subgroup_base))), (((workgroup_base + subgroup_base) | (workgroup_base + subgroup_base)))))))) << (0u << (~ (~ ((uint(4u)))))))) - (19869u & 0u)), ((~ (~ ((min((((workgroup_base + subgroup_base) | (workgroup_base + subgroup_base))), (((workgroup_base + subgroup_base) | (workgroup_base + subgroup_base)))))))) << (0u << (~ (~ ((uint(4u))))))))))))) + subgroup_local_id;
 atomicStore(write_val, uint((0u | (virtual_gid))), 4, ((((0 << (int(8)))) / 1) | (64)), 4);
 uint read_val = atomicLoad(write_val, 4, ((false ? (((- 75406)) | ((- 75406))) : 64)), 2);
 buf[virtual_gid] = ((uint(subgroupAllEqual((((bool((bvec3(bvec4((bvec3(bvec4(bvec3((! (! (((injectionSwitch.x > injectionSwitch.y))))), ((injectionSwitch.x < injectionSwitch.y)), true), true))), false))))) ? (subgroup_local_id) : read_val))))) ^ 0u);
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
