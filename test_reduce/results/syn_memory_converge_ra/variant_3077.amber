#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((((false)) || false))
  {
   if((false))
    {
     if((false))
      return;
     barrier();
    }
   barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if((((injectionSwitch.x > ((injectionSwitch.y) / 1.0)))))
  barrier();
 if((((injectionSwitch.x > (mix(vec2((injectionSwitch)[((0) ^ (0 >> (int(0))))], ((((false ? (mix(float(((- 4.6))), float((tanh(8.3))), bool(true))) : (float(mat4x3((injectionSwitch)[1], length((((false ? (vec2(- 4.7, 95.57)) : (vec2(vec4((vec2((log(exp(0.0)) + ((max(((0.0) / 1.0), 0.0)))), 0.0)), 1.0, 0.0))))) + log(vec2(1.0, 1.0)))), 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0)))))) * 1.0)), vec2(((mix(float((3916.8221)), float((- - 8.0)), bool(((injectionSwitch.x < ((min((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0)))).y)))))), ((((true ? (float(mat4x3(((float(((mat4((min(6.6, ((false ? (56.12) : 6.6)))), 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, log(1.0), (injectionSwitch.y), 0.0, 1.0, (dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, abs(1.0), (injectionSwitch.x)))), 1.0, 1.0, 0.0)) * mat4(1.0))))), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, sqrt(1.0), 1.0, 1.0, (injectionSwitch.x)))) : (787.326)))) + 0.0)), bvec2(false, false))).y))))
  barrier();
 if(((false || (false))))
  {
   if((false))
    return;
   barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   if((false))
    return;
   barrier();
  }
 if((false))
  {
   if((false))
    return;
   barrier();
   if((false))
    barrier();
  }
 if((((bool(bvec3((((injectionSwitch.x > injectionSwitch.y) && true)), false, true))))))
  barrier();
 if((false))
  barrier();
 if((false || ((((((((false ? ((- 40.28 / 2996.5471)) : injectionSwitch.x)) > injectionSwitch.y))) && (true && ((bool(bvec4(true, ((false) || false), true, false))))))))))
  {
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((((((! (((((! (true)) || false)) && (((((vec2(0.0, 0.0) + (((injectionSwitch) * mat2(1.0)) * mat2(1.0))))).x < injectionSwitch.y)))))) || false) && (false))))
    barrier();
   if((false))
    return;
   if(((bool(bvec4(false, true, ((injectionSwitch.x > injectionSwitch.y)), false)))))
    barrier();
   barrier();
  }
 if((((injectionSwitch.x > ((injectionSwitch) * sqrt(vec2(1.0, 1.0))).y))))
  barrier();
 if((false))
  barrier();
 uint num_workgroup = (~ (((~ (~ (((clamp(~ (gl_NumWorkGroups.x), (uint(uvec4(~ ((((((uint(uint(gl_NumWorkGroups.x)))) << (0u << (uint(3u)))))) >> 0u), 0u, 1u, 0u))), ~ (gl_NumWorkGroups.x))) - 0u)))))));
 uint workgroup_size = ((((gl_WorkGroupSize.x) << (clamp((max(0u, 0u)), 0u, 0u))) | ((gl_WorkGroupSize.x) << (clamp(0u, 0u, 0u)))));
 if(((bool((bvec3(bvec4(bvec3(false, false, ((injectionSwitch.x > injectionSwitch.y))), true)))))))
  barrier();
 if((! (! (((true && (((! (! ((bool(bvec3((false), false, ((false) || false)))))))) && true)))))))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   if(((((mix(float((- 7.1)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y))))
    {
     if((bool(bvec4((! (! ((false)))), false, false, true))))
      return;
     barrier();
    }
   if((((false || ((((! (! ((bool(bool((bool(bvec2((! (! (false))) || ((false || (false))), true)))))))))) || false))))))
    barrier();
   barrier();
   if((false))
    return;
  }
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 uint workgroup_id = (~ (~ (((gl_WorkGroupID.x) | (0u | ((((clamp((gl_WorkGroupID.x), (gl_WorkGroupID.x), (gl_WorkGroupID.x)))) | ((gl_WorkGroupID.x)))))))));
 if((false))
  barrier();
 if(((((! (! ((mix(float(((+ - 7.6))), float(injectionSwitch.x), bool(true))) > injectionSwitch.y)))))))
  barrier();
 if((false))
  barrier();
 if((((injectionSwitch.x > (max(injectionSwitch, injectionSwitch)).y))))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   return;
  }
 if((((false)) || false))
  barrier();
 if((((((injectionSwitch.x) / round(length(normalize(1.0)))) > injectionSwitch.y))))
  return;
 if((false))
  {
   if((false))
    {
     if((false))
      barrier();
     return;
    }
   if((((bool(bvec4((false), false, true, true)))) || false))
    {
     if((false))
      barrier();
     barrier();
    }
   barrier();
   if((((((clamp((injectionSwitch.x), (((injectionSwitch.x)) * 1.0), (injectionSwitch.x))) - 0.0) > (clamp((((((max(injectionSwitch.y, injectionSwitch.y)))) / 1.0) + 0.0), injectionSwitch.y, injectionSwitch.y))))))
    {
     if((false))
      barrier();
     if((! ((false || (! ((false)))))))
      return;
     barrier();
    }
   if((false))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   if((false))
    {
     if((false || ((((injectionSwitch.x > injectionSwitch.y))))))
      barrier();
     barrier();
    }
   if((((false) && true)))
    barrier();
  }
 if((false))
  {
   if((! (! ((bool(bvec2(((! ((bool((bvec2(bvec4(bvec2(! ((! ((! (! (bool(bvec4(((! (! (! (false))))), (((bool(bvec3(injectionSwitch.x < injectionSwitch.y, false, true))))), false, false)))))))), false), ((true) && true), true)))))))), true)))))))
    {
     if((false))
      barrier();
     if(((((mix(vec2((float(- 26978)), (injectionSwitch)[1]), vec2((((injectionSwitch)[0]) - 0.0), (189.839)), bvec2(true, ((injectionSwitch.x > injectionSwitch.y))))).x > injectionSwitch.y))))
      return;
     barrier();
    }
   if((false))
    {
     if((((((injectionSwitch.x > injectionSwitch.y)) || false))))
      {
       if((false))
        barrier();
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
       barrier();
      }
     if((false))
      barrier();
     return;
     if((false))
      barrier();
    }
   return;
   if((bool(bvec3((false), false, false))))
    {
     if((false))
      return;
     barrier();
    }
  }
 if((false))
  {
   if((false))
    barrier();
   if((bool(bvec2((false), true))))
    barrier();
   barrier();
  }
 if((! (! ((((injectionSwitch.x > injectionSwitch.y)))))))
  return;
 if(((((injectionSwitch.x > injectionSwitch.y)) || (((! (! (bool(bvec2(false, true))))))))))
  {
   if((false))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
  }
 uint workgroup_base = (0u ^ (workgroup_size)) * ((workgroup_id) << 0u);
 if((false))
  barrier();
 if((((false || ((true && ((injectionSwitch.x > injectionSwitch.y))))))))
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   if((((injectionSwitch.x < injectionSwitch.y)) && ((false || ((false))))))
    barrier();
   if((false))
    {
     if((false))
      {
       if((false))
        barrier();
       return;
      }
     if((false))
      {
       if(((true && (false))))
        {
         if((false))
          return;
         barrier();
        }
       if((false))
        barrier();
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if((false))
      barrier();
     return;
     if((((bool(bvec3(! (((! (false))) || false), false, false))))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
       if((((injectionSwitch.x > (float((mat3x2(((mat3x4(mat3x2((vec2(injectionSwitch[0], injectionSwitch[1])).y, 0.0, 0.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, sin(0.0), (injectionSwitch.y), 0.0, 1.0, 0.0)), 1.0, 0.0))) - mat3x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))))))))
        barrier();
      }
     if((false))
      return;
    }
   if((bool(bool((false)))))
    {
     if(((! ((true && (! (false)))))))
      barrier();
     if((false))
      return;
     if(((((bool((bvec2(bvec4((bvec2(bvec2((bvec2(bvec4((bvec2(bvec2(bvec2(false, false)))), true, true)))))), false, true)))))) || false)))
      barrier();
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if((false))
    barrier();
   barrier();
   if(((! (! (false)))))
    barrier();
  }
 if((false))
  barrier();
 if((false))
  {
   if((((false) || false)))
    barrier();
   return;
  }
 if((((! (! (bool((false || ((bool(bvec3(bool(false), false, false))))))))))))
  return;
 if((false))
  {
   if((false))
    {
     if(((false || ((false || (false))))))
      barrier();
     barrier();
    }
   barrier();
  }
 if((false))
  barrier();
 if((false))
  return;
 if(((((! (! (false))))) && true))
  {
   if((false))
    return;
   return;
  }
 if((false))
  {
   if((false))
    barrier();
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((bool((! (((! (bool(((((((bool(bvec4(bool((bvec3(bvec3(bvec3((! (! ((((injectionSwitch.x > injectionSwitch.y)))))), ((injectionSwitch.x > injectionSwitch.y)), false))))), false, true, ((injectionSwitch.x < injectionSwitch.y))))))) || false)) || false)))) && true))))))
  {
   if(((((max(injectionSwitch.x, (clamp((((clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) - 0.0), injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y))))
    return;
   if((false))
    barrier();
   if((false))
    {
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     return;
    }
   barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   if(((((mix(float(((((max((clamp(46.28, (min((min(((false ? (- 7174.8009) : ((46.28) / 1.0))), 46.28)), (clamp(46.28, 46.28, 46.28)))), 46.28)), 46.28))) / 1.0))), float(injectionSwitch.x), bool(true))) > ((injectionSwitch.y) + 0.0)))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(((true && (false))))
    return;
   if((false))
    barrier();
   if((((injectionSwitch.x > (float(float((max(injectionSwitch, ((false ? ((false ? (asinh(vec2(86.72, 1898.9222))) : (vec2(9.7, - 670.532)))) : (vec2(1.0, 1.0) * ((max(injectionSwitch, injectionSwitch)))))))).y)))))))
    {
     if((false))
      barrier();
     barrier();
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  {
   if(((false || ((! (! ((bool(bvec2(false, false))))))))))
    return;
   barrier();
  }
 if((false))
  {
   if((false))
    barrier();
   if((false))
    return;
   return;
  }
 if((false))
  barrier();
 if((false))
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      return;
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     barrier();
     if((false))
      return;
    }
   return;
   if((false))
    barrier();
   if(((false || (false))))
    {
     if((false))
      barrier();
     if((false))
      barrier();
     barrier();
     if((false))
      barrier();
    }
   if(((! (((! ((true && (! (bool(bvec3(! (false), (bool(bvec2((! (! (false))), false))), false))))))))))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if(((bool(bvec2(((false) || false), ((injectionSwitch.x > injectionSwitch.y)))))))
    {
     if((false))
      return;
     if((((((injectionSwitch.x > injectionSwitch.y)))) || false))
      {
       if((false))
        barrier();
       if((false))
        barrier();
       barrier();
      }
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if((false))
      barrier();
     return;
     if(((bool(bvec4(((((false) && true)) && (! ((bool(bvec2((bool(bvec2(((! (true)) && true), true))), true)))))), false, true, false)))))
      barrier();
    }
   if((((((((injectionSwitch.x > injectionSwitch.y) && true) && true))))))
    {
     if((false))
      return;
     barrier();
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_base = subgroup_id * (max((((false ? (subgroup_size) : (((((((subgroup_size) | 0u)) | 0u)) >> (0u >> (uint(7u))))) * 1u))), subgroup_size));
 if((((false || ((false))) || false)))
  barrier();
 uint virtual_gid = ((false ? (subgroup_size) : workgroup_base)) + ((false ? (workgroup_base) : ((subgroup_base) | 0u))) + subgroup_local_id;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 atomicStore(write_val, ((((true ? uint((((max(virtual_gid, virtual_gid))) * ((1u << (uint(3u))) >> (uint(3u))))) : ((++ num_workgroup))))) << 0u), (~ (~ ((0 ^ (4))))), (~ (~ (64))), 4);
 if((false))
  {
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   return;
  }
 if((false))
  barrier();
 uint read_val = (((clamp((~ (~ ((((uint(((uvec2(((false ? (virtual_gid) : atomicLoad(write_val, 4, 64, 2))), 0u)) << uvec2(0u, 0u)))) - 0u))))), atomicLoad(write_val, ((4) >> (0 >> (int(2)))), 64, 2), (0u | (((uint(uint((atomicLoad(write_val, 4, 64, 2)))))) | (((uint(uvec4(0u | ((atomicLoad(write_val, 4, 64, 2))), 1u, 0u, 0u))))))))) >> 0u));
 if((bool(bool((false || (((! (! ((bool(bvec4((true && (false)), false, true, false)))))))))))))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(((((mix(vec2((6.0), (injectionSwitch)[1]), (mat2(1.0) * (vec2((injectionSwitch)[0], (- 4317.4944)))), bvec2(true, false))).x > (min(injectionSwitch.y, (max((max(injectionSwitch.y, (clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))), (float(vec4(injectionSwitch.y, 1.0, 0.0, 0.0)))))))))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   barrier();
   if((false))
    barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((((injectionSwitch.x > ((true ? ((min((min(mix(vec2((injectionSwitch)[0], (768.517)), vec2((((max(4404.5571 - - 29.29, 4404.5571 - - 29.29)))), (injectionSwitch)[1]), bvec2(false, (! (((! (true)) && true))))), mix(vec2(((false ? (4464.9727) : (injectionSwitch)[0])), (768.517)), vec2(((4404.5571 - - 29.29)), (injectionSwitch)[1]), bvec2(false, true)))), (clamp(mix(vec2((injectionSwitch)[0], (768.517)), vec2(((4404.5571 - - 29.29)), ((true ? (injectionSwitch)[1] : (13.59)))), bvec2(false, true)), mix(vec2((injectionSwitch)[0], (768.517)), vec2(((4404.5571 - - 29.29)), (injectionSwitch)[1]), bvec2(false, true)), mix(vec2((injectionSwitch)[0], ((max(768.517, (clamp(768.517, 768.517, 768.517)))))), vec2(((4404.5571 - - 29.29)), ((((min((vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)))) * mat2(1.0))[1]), bvec2(false, true))))))).y : (max(0.8, 39.42))))))))
  {
   if(((! ((bool(bvec4(! (((((injectionSwitch.x > injectionSwitch.y))) || false)), true, true, ((! (! (bool(bvec3(true, true, false)))))))))))))
    {
     if((true && (((! (! (bool(bool((false))))))))))
      barrier();
     barrier();
     if(((((! (! (injectionSwitch.x > injectionSwitch.y))))) || ((bool(bvec4((false), false, true, true))))))
      barrier();
     if((false))
      return;
    }
   if((false))
    barrier();
   if(((bool(bool(false)))))
    barrier();
   if((false))
    barrier();
   if(((! (! (false)))))
    barrier();
   return;
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
  }
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if((((injectionSwitch.x > (mix(vec2((- 11.51), (injectionSwitch)[1]), vec2((max((injectionSwitch)[0], (injectionSwitch)[0])), (float(false))), bvec2(true, false))).y))))
  {
   if((false))
    return;
   barrier();
  }
 if(((((clamp(injectionSwitch.x, injectionSwitch.x, (clamp((vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch, injectionSwitch)).x)) > injectionSwitch.y))))
  {
   if((((! ((! (! (! (true && (false))))))))))
    barrier();
   return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    {
     if((false))
      return;
     barrier();
    }
  }
 buf[virtual_gid] = uint(subgroupAllEqual(read_val));
 if((false))
  {
   if((false))
    return;
   barrier();
  }
 if((false))
  barrier();
 if((((((injectionSwitch.x > injectionSwitch.y) || false)))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  return;
 if((false))
  barrier();
 if((false))
  return;
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
