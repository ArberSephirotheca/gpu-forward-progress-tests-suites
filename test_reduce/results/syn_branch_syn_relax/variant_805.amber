#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 430

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if((true && ((false))))
  barrier();
 if((false))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if((((false) && (! ((! (! (! (true)))))))))
  {
   if((bool(bvec2((false), ((injectionSwitch.x > injectionSwitch.y))))))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 if((((((bool(bool(((1.0 * (injectionSwitch.x)) > injectionSwitch.y)))) && true)))))
  {
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(((((true && (((injectionSwitch.x) - 0.0) > injectionSwitch.y))))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
   if((false))
    barrier();
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = (clamp((min((((true ? (gl_WorkGroupID) : (uvec3(73373u, 137061u, 5451u)))) | ((max(gl_WorkGroupID, (min(gl_WorkGroupID, (min(gl_WorkGroupID, (uvec3(0u, 0u, 0u) ^ (gl_WorkGroupID)))))))))), ((((((gl_WorkGroupID) | ((max((max(gl_WorkGroupID, (max((min(gl_WorkGroupID, gl_WorkGroupID)), (min(gl_WorkGroupID, gl_WorkGroupID)))))), (max(gl_WorkGroupID, (max((min(gl_WorkGroupID, gl_WorkGroupID)), (min(gl_WorkGroupID, gl_WorkGroupID)))))))))) ^ uvec3(0u, 0u, 0u))) * uvec3((injectionSwitch.y), (injectionSwitch.y), (injectionSwitch.y)))))).x, (min((((true ? (gl_WorkGroupID) : (uvec3(73373u, 137061u, 5451u)))) | ((max(gl_WorkGroupID, (min(gl_WorkGroupID, (min(gl_WorkGroupID, (uvec3(0u, 0u, 0u) ^ (gl_WorkGroupID)))))))))), ((((((gl_WorkGroupID) | ((max((max(gl_WorkGroupID, (max((min(gl_WorkGroupID, gl_WorkGroupID)), (min(gl_WorkGroupID, gl_WorkGroupID)))))), (max(gl_WorkGroupID, (max((min(gl_WorkGroupID, gl_WorkGroupID)), (min(gl_WorkGroupID, gl_WorkGroupID)))))))))) ^ uvec3(0u, 0u, 0u))) * uvec3((injectionSwitch.y), (injectionSwitch.y), (injectionSwitch.y)))))).x, (min((((true ? (gl_WorkGroupID) : (uvec3(73373u, 137061u, 5451u)))) | ((max(gl_WorkGroupID, (min(gl_WorkGroupID, (min(gl_WorkGroupID, (uvec3(0u, 0u, 0u) ^ (gl_WorkGroupID)))))))))), ((((((gl_WorkGroupID) | ((max((max(gl_WorkGroupID, (max((min(gl_WorkGroupID, gl_WorkGroupID)), (min(gl_WorkGroupID, gl_WorkGroupID)))))), (max(gl_WorkGroupID, (max((min(gl_WorkGroupID, gl_WorkGroupID)), (min(gl_WorkGroupID, gl_WorkGroupID)))))))))) ^ uvec3(0u, 0u, 0u))) * uvec3((injectionSwitch.y), (injectionSwitch.y), (injectionSwitch.y)))))).x));
 if((false))
  barrier();
 uint workgroup_base = ((((((injectionSwitch.x > injectionSwitch.y))) || ((injectionSwitch.x > injectionSwitch.y))) ? (workgroup_size) : workgroup_size * ((workgroup_id) | 0u)));
 if((((! (! (bool(bvec2(false, true))))))))
  barrier();
 if(((! (! (false)))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint virtual_gid = (uint((uvec4(0u, 0u, 0u, 0u) + (uvec4(((((workgroup_base)) << 0u) ^ 0u), 0u, 0u, uint((injectionSwitch.y))))))) + subgroup_id * subgroup_size + subgroup_local_id;
 if((false))
  barrier();
 uint next_virtual_gid = (clamp(workgroup_base, workgroup_base, workgroup_base)) + subgroup_id * subgroup_size + ((min(((uint((max(uvec4((uint(((((uvec2(0u, 0u) | (uvec2(uvec4(((false ? (uvec2(27167u, 196078u)) : (((min(uvec2((0u | (subgroup_local_id)), 0u), uvec2((0u | (subgroup_local_id)), 0u)))) ^ uvec2(0u, 0u)))), 0u, 0u)))))) - uvec2(0u, 0u)))) + 1, (0u << (uint(3u))), (0u << (uint(2u))), 0u), ((uvec4((uint(((false ? (uvec2(27167u, ((196078u) ^ 0u))) : uvec2((0u | (subgroup_local_id)), 0u))))) + 1, (0u << (((uint(3u)) * (1u & 1u)))), (0u << (uint(2u))), 0u)) / uvec4(1u, 1u, (clamp(1u, (min(1u, 1u)), 1u)), 1u))))))) % subgroup_size, ((((uint((max(uvec4((uint(((false ? (uvec2(27167u, 196078u)) : uvec2((0u | (((subgroup_local_id)) | ((subgroup_local_id)))), 0u))))) + 1, ((((0u | (0u << (uint(3u))))) | ((((~ (~ (0u))) << (uint(3u))) | 0u)))), (0u << (uint(2u))), 0u), ((((uvec4((uint(((false ? ((uvec2(0u, 0u) | (uvec2(27167u, 196078u)))) : uvec2((0u | (subgroup_local_id)), 0u))))) + 1, (0u << (uint(3u))), ((clamp(0u, (0u | (0u)), 0u)) << (uint(((false ? (atomicExchange(subgroup_size, num_workgroup)) : 2u))))), 0u)) ^ uvec4(0u, 0u, 0u, 0u))) / uvec4(((((1u) | (1u))) >> 0u), 1u, 1u, 1u)))))) >> (0u >> (uint(2u)))))) % subgroup_size)));
 if((((bool(bvec4((! (! ((injectionSwitch.x > (min(((((injectionSwitch.x < injectionSwitch.y)) ? (min(injectionSwitch, injectionSwitch)) : (vec2(- 817.234, - 272.346)))), injectionSwitch)).y)))), false, ((injectionSwitch.x > injectionSwitch.y)), true))))))
  barrier();
 ((buf[virtual_gid] = (((0 ^ (1))) | (((1)) << 0))) / 1u);
 if((false))
  barrier();
 if((false))
  barrier();
 if(((((! (((! ((true && ((((injectionSwitch.x > injectionSwitch.y)) || ((true && ((true && (injectionSwitch.x > injectionSwitch.y)))))))))) || false)))))))
  barrier();
 if(subgroup_local_id + 1 < subgroup_size)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   int i = 0;
   if((false))
    barrier();
   atomicStore(buf[(~ ((min(~ ((min(next_virtual_gid, (0u + (next_virtual_gid))))), ~ ((min(next_virtual_gid, ((uint(uvec3(0u + (next_virtual_gid), uint((injectionSwitch.x)), 0u)))))))))))], (~ (((~ (uint(2))) / (clamp(((1u) << 0u), 1u, (((0u + (1u))) >> 0u)))))), 4, 64, 0);
  }
 else
  {
   atomicStore(buf[next_virtual_gid], uint(2), 4, (((int(ivec3((clamp(64, ((64) | (64)), 64)), 1, 0))) * 1)), 0);
  }
 if((false))
  barrier();
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
