#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 430

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = (max(gl_WorkGroupID.x, gl_WorkGroupID.x));
 uint workgroup_base = ((workgroup_size * workgroup_id) << 0u);
 uint virtual_gid = ((~ ((max(~ ((((workgroup_base) | (workgroup_base)) + (min((min(subgroup_id, subgroup_id)) * (0u | (subgroup_size)), subgroup_id * (0u | (((((subgroup_size) / 1u))) ^ uint((injectionSwitch.x)))))))), ~ ((workgroup_base + (min((min(subgroup_id, subgroup_id)) * (0u | (subgroup_size)), subgroup_id * (((0u | (((((subgroup_size) / 1u))) ^ uint((injectionSwitch.x)))) | (0u | (((((subgroup_size) / 1u))) ^ uint((injectionSwitch.x)))))))))))))) * (~ ((uint(uvec4((0u + (~ (((1u) + 0u)))), 0u, 0u, 0u)))))) + (clamp(subgroup_local_id, subgroup_local_id, (uint(uvec4(subgroup_local_id, 0u, 0u, 0u)))));
 uint next_virtual_gid = (((min((min(workgroup_base, ((workgroup_base) / 1u))), workgroup_base)) + (((~ (~ ((uint(uvec3((((uint(uvec3(subgroup_id * subgroup_size, 0u, 1u)))) - 0u), 0u, 0u))))))) | ((0u ^ ((~ (~ ((uint((clamp(uvec3(subgroup_id * subgroup_size, 0u, (((uint(uvec3(((false ? (subgroup_local_id) : 0u)), 1u, 1u)))) - 0u)), (uvec3(uvec3(uvec3(subgroup_id * subgroup_size, 0u, (((uint(uvec3(((false ? (subgroup_local_id) : 0u)), 1u, 1u)))) - 0u))))), ((uvec3(subgroup_id * subgroup_size, 0u, (((uint(uvec3(((((((false ? (subgroup_local_id) : 0u) << 0u)) | 0u))), 1u, ((1u) | (1u)))))) - 0u))) | (((((uvec3(subgroup_id * subgroup_size, 0u, (((uint(uvec3(((((((false ? (subgroup_local_id) : 0u) << 0u)) | 0u))), 1u, ((1u) | (1u)))))) - 0u))) << uvec3(0u, 0u, 0u))) - uvec3(0u, 0u, 0u))))))))))))))) + ((subgroup_local_id + 1) % subgroup_size)) ^ ((0u) | (0u)));
 ((((false ? (workgroup_base) : ((buf[virtual_gid] = 1) | (0u << (uint(7u))))))) << uint(((sqrt(1.0) * ((max(injectionSwitch, injectionSwitch)).x)))));
 if(((bool((bvec2(bvec3((bvec2((bvec2(bvec2(bvec2((bvec2(bvec4((bvec2((bvec3(bvec4(bvec3(bvec2(((uint(uvec2(subgroup_local_id + 1, 1u))) < subgroup_size) && (((bool(bvec3((false || (true)), true, ((injectionSwitch.x > injectionSwitch.y))))) && true)), true), true), false))))), true, true))))))))), true)))))))
  {
   int i = 0;
   atomicStore(buf[(max((((max((((true ? 0u : ((atomicCompSwap(next_virtual_gid, subgroup_size, subgroup_local_id) / 59945u)))) ^ (next_virtual_gid)), ((next_virtual_gid) / 1u)))) >> 0u), next_virtual_gid))], uint(((clamp(1 * ((clamp(2, 2, 2))), 1 * ((((clamp(2, 2, 2)) | ((0 + (clamp(2, 2, 2))))))), 1 * ((clamp(2, 2, 2))))))), 4, 64, 0);
  }
 else
  {
   atomicStore(buf[((true ? next_virtual_gid : (workgroup_base)))], uint(2), 4, 64, 0);
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
