#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 430

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if((((injectionSwitch.x > (((((min(injectionSwitch.y, injectionSwitch.y))) - 0.0)) - 0.0)))))
  return;
 uint subgroup_size = gl_SubgroupSize;
 if((false))
  return;
 if(((! (((! (false)) || false)))))
  {
   if((false))
    {
     if(((! (! (false)))))
      return;
     return;
    }
   return;
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((false))
  {
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if((((((false || (((bool(bvec3(false || ((bool(bvec4((((false || (((bool(bvec2((((injectionSwitch.x > injectionSwitch.y)) && true), true)))) || ((injectionSwitch.x > injectionSwitch.y)))))) || ((((! (! (injectionSwitch.x > injectionSwitch.y)))))), true, false, true)))), true, false))))))) && (((bool(bvec2((min(injectionSwitch, (vec2(mat3(injectionSwitch, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0))))).x < injectionSwitch.y, true)))))))))
  {
   if(((false || (false))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      {
       if((false))
        return;
       return;
      }
     return;
    }
   if((false))
    return;
   if((false))
    return;
   return;
   if((false))
    {
     if((false))
      return;
     if((false))
      return;
     return;
    }
   if((! (! ((((false)) && ((injectionSwitch.x < injectionSwitch.y)))))))
    return;
   if((false))
    return;
   if((! (((! ((false)))) && true)))
    return;
  }
 if((((true && ((((bool(bvec3(bool(bvec3(((! (! (true && (false))))), (((((injectionSwitch.x > injectionSwitch.y)) || (! (((! (((! (((((bool(bvec4((! ((false || (! ((! (! (bool((bvec2(bvec4(bvec2(((false || ((bool(bvec4((! (injectionSwitch.x < (float(vec3(injectionSwitch.y, 1.0, 0.0))))), false, true, true)))))) && (true && (true)), false), false, true)))))))))))), true, false, false))))) && true)))))) || false)))))), false)), (! (! (false))), true))) && true)))))))
  {
   if((false))
    return;
   return;
  }
 if((((injectionSwitch.x > ((false ? (8.8) : injectionSwitch.y))))))
  return;
 if((false))
  {
   if(((true && ((false || (false))))))
    return;
   return;
  }
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    return;
   return;
  }
 if((false))
  return;
 uint workgroup_size = gl_WorkGroupSize.x;
 if((false))
  return;
 if((false))
  return;
 if((false))
  return;
 if((false))
  return;
 if(((true && (((((((vec2(mat3x4(mat2(1.0) * ((((true ? (injectionSwitch) : (vec2(68.98, 11.35))))) - vec2(0.0, 0.0)), 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, (injectionSwitch.y))))).x) - (injectionSwitch.x)) > injectionSwitch.y))))))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 if((false))
  return;
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
   if((((! ((bool(bvec4((bool(bvec4(! (((! (! (false)))) && true), false, true, true))), true, true, false))))))))
    return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((true && (! (! (false)))))))
    return;
   return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  return;
 if((false))
  return;
 if((false))
  return;
 if((false))
  {
   if((false))
    return;
   return;
  }
 if((((injectionSwitch.x > ((((false ? (377.337) : injectionSwitch.y)) - 0.0))))))
  {
   if((false))
    return;
   if(((((injectionSwitch.x < injectionSwitch.y)) && (false))))
    {
     if((false))
      return;
     if(((! (! (((injectionSwitch.x > (max(injectionSwitch, injectionSwitch)).y)))))))
      return;
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     return;
    }
   return;
  }
 if((false))
  return;
 if((false))
  return;
 if((false))
  {
   if((false))
    {
     if((false))
      return;
     return;
    }
   if((((((((injectionSwitch.x > injectionSwitch.y) && true))))) && true))
    return;
   if((((injectionSwitch.x > (min(((injectionSwitch) * mat2(1.0)), (vec2(injectionSwitch[0], injectionSwitch[1])))).y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   return;
   if(((((clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
    return;
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 uint virtual_gid = (1u * (((~ (~ ((((workgroup_base + ((((true ? ((subgroup_id) + 0u) : (subgroup_local_id)))) | (((subgroup_id) + 0u))) * (max(subgroup_size, (max(subgroup_size, ((subgroup_size) * 1u)))))) - ((min(((false ? (((workgroup_base) << 0u)) : ((true ? 166598u : ((true ? (workgroup_size) : (atomicXor(num_workgroup, atomicCompSwap(num_workgroup, num_workgroup, workgroup_size))))))))) & 0u, (((false ? (num_workgroup) : 0u | (166598u & 0u))))))))) ^ 0u)))))) + subgroup_local_id;
 if((false))
  return;
 if(((bool(bool((((vec2(1.0, 1.0) * ((vec2(1.0, 1.0) * (injectionSwitch)))).x > injectionSwitch.y)))))))
  return;
 if((((injectionSwitch.x > (clamp(((false ? (vec2(- 9.5, - 3691.4299)) : injectionSwitch)), injectionSwitch, injectionSwitch)).y))))
  return;
 if((false))
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    return;
   if(((true && (false))))
    {
     if(((((bool((bvec2(bvec2(bvec2((! (! (false))), (((max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)))))))) && true))))
      return;
     if((false))
      return;
     return;
    }
   if(((bool(bvec4(((injectionSwitch.x > injectionSwitch.y)), false, false, true)))))
    {
     if((false))
      return;
     return;
    }
   if(((((! (! (injectionSwitch.x > injectionSwitch.y)))))))
    return;
   if((false))
    return;
   if((((((false)) && true)) || false))
    return;
   if((false))
    return;
   if((((((bool(bool(bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, true, true))))))))))
    return;
   if((false))
    {
     if((false))
      return;
     return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 uint next_virtual_gid = (((0u + (0u << (uint((((uint((injectionSwitch.x)) | (8u))) >> 0u)))))) | ((((((uint((max(uvec4(workgroup_base, 0u, ((1u << (uint(0u))) >> (uint(0u))), (min((clamp(0u, 0u, 0u)), (max(0u, 0u))))), (min(uvec4(workgroup_base, 0u, ((1u << (uint(0u))) >> (uint(0u))), (min((clamp(0u, 0u, (((0u | (0u))) >> 0u))), (max(0u, 0u))))), uvec4(workgroup_base, 0u, ((1u << (uint(0u))) >> (uint(0u))), (min((clamp(0u, 0u, 0u)), (max(0u, 0u)))))))))))) | ((~ (((~ ((uint(uvec4(workgroup_base, ((false ? (atomicAdd(subgroup_local_id, workgroup_base)) : (0u ^ (((0u)) | 0u)))), (((((max(1u << (uint(0u)), (0u | (1u << (uint(0u))))))) >> (uint(0u)))) << (0u ^ 0u)), 0u))))) / 1u))))) + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size)) | (workgroup_base + (0u ^ (subgroup_id * subgroup_size)) + ((subgroup_local_id + 1) % (((clamp(subgroup_size, subgroup_size, subgroup_size))) | ((uint(uvec3(subgroup_size, 0u, 0u))))))))));
 if((false))
  {
   if((false))
    return;
   return;
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
  }
 if((false))
  return;
 if((((((! ((! ((true && (! (! ((((injectionSwitch.x > ((injectionSwitch) - vec2((injectionSwitch.x), (injectionSwitch.x))).y)) || false)))))))))) && true))))
  {
   if(((((clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
    {
     if((false))
      {
       if((((false) && ((injectionSwitch.x < injectionSwitch.y)))))
        return;
       return;
      }
     return;
    }
   if((false))
    return;
   if((false))
    {
     if((false))
      return;
     if((false))
      {
       if((((injectionSwitch.x > (clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
        return;
       return;
      }
     if((false))
      return;
     if((false || ((false))))
      return;
     if((bool(bvec3((((injectionSwitch.x > injectionSwitch.y))), true, false))))
      return;
     if((false))
      return;
     return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
   if((false))
    return;
  }
 if((((false)) && true))
  {
   if((false))
    {
     if((! (! (((((! (((! ((vec2(vec3(((false ? (injectionSwitch) : injectionSwitch)), 1.0))).x > injectionSwitch.y)) || false))))))))))
      return;
     if((false))
      {
       if((false))
        {
         if((false))
          return;
         return;
        }
       if((false))
        return;
       if((false))
        {
         if((false))
          return;
         return;
        }
       if((false))
        return;
       if((false))
        return;
       if(((((0.0 + (injectionSwitch.x)) > injectionSwitch.y))))
        return;
       return;
      }
     if((false))
      return;
     if(((false || (((injectionSwitch.x > injectionSwitch.y))))))
      return;
     return;
     if(((false || (false))))
      {
       if((false))
        return;
       if((false))
        return;
       return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      return;
    }
   return;
   if(((false || (((injectionSwitch.x > injectionSwitch.y))))))
    return;
   if((false))
    return;
   if((false))
    {
     if((false))
      return;
     return;
    }
   if((((((((injectionSwitch.x > injectionSwitch.y))) || false)) && true)))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    return;
   if((false))
    return;
   if((false))
    return;
  }
 if((false))
  return;
 if((false))
  return;
 if((((((bool(bool(((((bool(bvec4(false, false, false, (! (! (true)))))) || false)) || (bool(bvec2(false, false)))))))) || false))))
  return;
 buf[virtual_gid] = 1;
 if((false))
  return;
 if((bool(bvec2((false || ((false))), true))))
  return;
 if((bool((((true && (bool((false))))) && true))))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if(subgroup_local_id + 1 < subgroup_size)
  {
   if((false))
    {
     if((false))
      return;
     if((((((max(((((min((vec2(mat3(injectionSwitch, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0))), (max(injectionSwitch, injectionSwitch)))))) / vec2(1.0, 1.0)), (vec2(mat4x2((injectionSwitch), 0.0, (clamp(0.0, ((0.0) + 0.0), 0.0)), 0.0, 0.0, sqrt(1.0), 0.0))))) * vec2(1.0, 1.0)).x > injectionSwitch.y))))
      {
       if((false))
        return;
       return;
      }
     if((false))
      {
       if((false))
        return;
       return;
      }
     if((false))
      {
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     return;
     if((((((! (! (((bool(bvec2(((injectionSwitch.x > injectionSwitch.y)), true))) && true)))))) || false)))
      return;
     if((((bool((bvec2(bvec4(bvec2(bool(bvec4(false, false, ((injectionSwitch.x < injectionSwitch.y)), true)), true), false, false))))))))
      return;
     if((((true && ((((false || ((bool(bvec2((injectionSwitch.x > injectionSwitch.y), true)))))) && true))))))
      return;
     if((((injectionSwitch.x > ((vec2(0.0, 0.0) + (((true ? clamp(((true ? injectionSwitch : (radians(vec2(- 38.31, 519.010))))), (max((mat2(1.0) * (injectionSwitch)), (mat2(1.0) * (injectionSwitch)))), injectionSwitch) : (injectionSwitch)))))).y))))
      {
       if((false))
        return;
       if(((bool(bvec3(((injectionSwitch.x > injectionSwitch.y)), true, true)))))
        {
         if((false))
          return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
       if((false))
        return;
       return;
      }
     if((false))
      return;
    }
   if((false))
    return;
   if((false))
    return;
   if((false))
    {
     if((false))
      return;
     if((false))
      return;
     return;
    }
   int i = 0;
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((((false) || false)))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(((! (! (false)))))
        return;
       return;
      }
     if((false))
      return;
     if((false))
      return;
     return;
    }
   if((((((((injectionSwitch.x > (((max(injectionSwitch, injectionSwitch))) / exp(vec2(0.0, 0.0))).y) || false)))) && true)))
    {
     if(((((! (! (false))) || (bool(bvec2(false, true)))))))
      return;
     if(((false || (false))))
      return;
     if(((((1.0 * (injectionSwitch.x)) > injectionSwitch.y))))
      return;
     if(((((float(vec3((clamp(injectionSwitch.x, (1.0 * (injectionSwitch.x)), injectionSwitch.x)), ((1.0 * (dot(vec2(0.0, 1.0), vec2(0.0, 1.0))))), 0.0))) > injectionSwitch.y))))
      return;
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     return;
     if((((injectionSwitch.x > ((injectionSwitch.y) + 0.0)))))
      {
       if((false))
        return;
       return;
      }
     if((false))
      return;
    }
   if((false))
    {
     if((false))
      {
       if((false))
        return;
       return;
      }
     return;
    }
   if((false))
    return;
   if((! (! ((false)))))
    {
     if((false))
      return;
     if((false))
      return;
     if((false))
      return;
     if((false))
      return;
     if(((true && (((false) || false)))))
      {
       if((false))
        return;
       return;
      }
     return;
    }
   if((((injectionSwitch.x > (clamp((1.0 * (injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y))))))
    {
     if((false))
      return;
     if((((false) || false)))
      return;
     return;
    }
   atomicStore(buf[next_virtual_gid], uint(((2) >> 0)), (0 ^ (((0 | ((((int((injectionSwitch.x)) ^ ((min((int(ivec4((4), 0, 1, 0))), (int(ivec4((4), 0, 1, 0)))))))) | ((((4) | (0 | 0))))))) | (0 | ((((int((injectionSwitch.x)) ^ ((min((int(ivec4((4), 0, 1, 0))), (int(ivec4((4), 0, 1, 0)))))))) | (((((clamp(4, 4, 4))) | (0 | 0)))))))))), (0 ^ (min((((((((((64) - ((true ? 0 : (23447)))) / 1)))) >> 0)) | 0), (((((((((64) - 0) / 1)))) >> 0)) | 0)))), 0);
   if((false))
    return;
   if((false))
    return;
   if((false))
    return;
   if((false))
    return;
   if((false))
    {
     if((false))
      return;
     if((false))
      {
       if((false))
        return;
       if((false))
        return;
       return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      return;
     return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if((bool(bvec4((false), true, true, true))))
    {
     if((false))
      return;
     if((false))
      return;
     return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if((false))
    return;
   if((false))
    return;
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    return;
   if((((((injectionSwitch.x > ((injectionSwitch) * mat2(1.0)).y) || ((injectionSwitch.x > injectionSwitch.y)))))))
    {
     if((false))
      return;
     return;
     if(((true && (false))))
      return;
    }
   if((false))
    return;
   if((false))
    {
     if((false))
      return;
     return;
    }
   if((! ((! (! ((! (! (! ((bool((bool(bool(bool((true && ((bool(bvec4((false), true, (bool(bvec4(true, false, true, true))), true)))))))))))))))))))))
    {
     if(((! (! (false)))))
      return;
     if((false))
      return;
     return;
    }
   if((((((((injectionSwitch.x < injectionSwitch.y)) ? (float(mat4((max(injectionSwitch.x, (max(injectionSwitch.x, injectionSwitch.x)))), 0.0, sin(0.0), determinant(mat2(0.0, 0.0, 1.0, 0.0)), 0.0, round(length(normalize(1.0))), determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0)), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0))) : (- 83.69))) > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if(((((! (! (injectionSwitch.x > ((injectionSwitch) * mat2(1.0)).y)))))))
      {
       if((false))
        return;
       return;
       if((false))
        return;
       if((false))
        return;
       if(((bool(bvec3(false, false, true)))))
        return;
      }
     if((false))
      return;
     if((false))
      return;
     if((false))
      return;
     return;
     if((false))
      return;
    }
   if((((false) && true)))
    return;
   if((false))
    {
     if((false))
      return;
     if((false))
      {
       if((false))
        return;
       return;
      }
     return;
    }
   if((false))
    return;
   if((((false)) || ((injectionSwitch.x > injectionSwitch.y))))
    return;
   if(((((! (! (false)))) || ((((injectionSwitch.x > (exp(abs(0.0)) * ((float(mat4x2(injectionSwitch.y, (min(0.0, 0.0)), 1.0, 1.0, 0.0, 1.0, 0.0, (max((float(mat3x2((max(1.0, 1.0)), determinant(mat3(1.0, 1.0, 0.0, 0.0, 1.0, 1.0, (clamp(0.0, 0.0, ((0.0) / 1.0))), 0.0, 1.0)), 1.0, 0.0, 1.0, 0.0))), (min(1.0, 1.0)))))))))))) && true))))
    {
     if((bool(bvec4((false), false, false, ((injectionSwitch.x > injectionSwitch.y))))))
      {
       if((((injectionSwitch.x > (((vec2(injectionSwitch[0], injectionSwitch[1]))) - tan(vec2(0.0, 0.0))).y))))
        return;
       return;
      }
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if((false))
    {
     if((bool(bool((false)))))
      return;
     return;
    }
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        return;
       return;
      }
     if((false))
      return;
     return;
     if(((((((float(mat2x3(injectionSwitch.x, (clamp((injectionSwitch.y), (injectionSwitch.y), (injectionSwitch.y))), determinant(mat3(0.0, 1.0, 1.0, log(1.0), 0.0, ((true ? (max(1.0, 1.0)) : (274.884))), 0.0, (max(0.0, 0.0)), (injectionSwitch.x))), 1.0, 1.0, 1.0))) + 0.0)) > injectionSwitch.y))))
      return;
    }
   if((((false)) && true))
    return;
  }
 else
  {
   if((false))
    return;
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((((false) && true)))
      {
       if((false))
        return;
       if((((((injectionSwitch) - vec2(0.0, 0.0)).x > (clamp(((false ? (vec2(811.950, ((true ? - 8695.2506 : (float(45046)))))) : injectionSwitch)), injectionSwitch, injectionSwitch)).y))))
        return;
       return;
       if((false))
        {
         if((false))
          return;
         if((false || (((! (! (bool(bool((false))))))))))
          return;
         if((false))
          return;
         if((false))
          return;
         return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
        }
      }
     if((((((((((true) && true) ? false ? (injectionSwitch) : injectionSwitch : (injectionSwitch))))).x > injectionSwitch.y))))
      {
       if((false))
        {
         if((false))
          return;
         return;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if((((bool(bvec2(((((max(float(mat2x4(min(injectionSwitch.x, injectionSwitch.x), 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0)), float(mat2x4(min(injectionSwitch.x, injectionSwitch.x), 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0)))))) > injectionSwitch.y), false))))))
    return;
   if((false))
    return;
   atomicStore(buf[next_virtual_gid], (clamp(uint((min((clamp(2, 2, 2)), 2))), ((((uint(2)) >> (~ ((0u + ((clamp(~ (((true ? (max(0u, 0u)) : (191703u)))), ~ (((true ? (max(0u, 0u)) : (191703u)))), ~ (((true ? (max(0u, 0u)) : (191703u)))))))))))) >> 0u), uint(2))), 4, 64, 0);
  }
 if((false))
  return;
 if((true && ((false))))
  {
   if(((! (! (false)))))
    {
     if((((! (! (bool(bvec2(false, true))))))))
      return;
     return;
    }
   return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  return;
 if((((((injectionSwitch.x) / 1.0) > injectionSwitch.y))))
  return;
 if((false))
  return;
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
