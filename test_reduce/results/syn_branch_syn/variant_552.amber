#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = (((uint((uvec2(0u, 0u) | (uvec2(max(((~ ((((((max((~ ((0u | (((((false ? (subgroup_id) : ~ (~ (gl_WorkGroupSize.x))))) | 0u))))), ~ ((max(((gl_WorkGroupSize.x) | (gl_WorkGroupSize.x)), gl_WorkGroupSize.x))))))) + 0u)) | (((max((~ ((0u | (((((false ? (subgroup_id) : ~ (~ (gl_WorkGroupSize.x))))) | 0u))))), ~ ((max(((gl_WorkGroupSize.x) | (gl_WorkGroupSize.x)), gl_WorkGroupSize.x)))))))))), ((~ ((((((max((~ ((0u | (((((false ? (subgroup_id) : ~ (~ (gl_WorkGroupSize.x))))) | 0u))))), ~ ((max(((gl_WorkGroupSize.x) | (gl_WorkGroupSize.x)), gl_WorkGroupSize.x))))))) + 0u)) | (((max((~ ((0u | (((((false ? (subgroup_id) : ~ (~ (gl_WorkGroupSize.x))))) | 0u))))), ~ ((max(((gl_WorkGroupSize.x) | (gl_WorkGroupSize.x)), gl_WorkGroupSize.x))))))))))), 1u)))))) | (gl_WorkGroupSize.x));
 uint workgroup_id = ((false ? (bitfieldReverse(atomicAnd(subgroup_size, subgroup_local_id))) : ((false ? (subgroup_size) : ((true ? gl_WorkGroupID.x : (workgroup_size)))))));
 uint workgroup_base = ((((workgroup_size * ((clamp(clamp((((false ? (workgroup_id) : (clamp(((0u ^ (workgroup_id))) - (min(0u, 0u)), ((0u ^ ((((injectionSwitch.x < injectionSwitch.y)) ? (workgroup_id) : (subgroup_local_id))))) - (min(0u, 0u)), ((0u ^ (workgroup_id))) - (min((clamp(0u, 0u, 0u)), 0u))))))), workgroup_id, ((((((((false ? (158630u) : 1u * (((~ (~ (true ? (((bool(bvec2((false || (false)), true))) ? (subgroup_local_id) : workgroup_id)) : (workgroup_id)))) * 1u))))) << 0u)))))), clamp((((0u ^ (workgroup_id))) - ((max(min(0u, 0u), (~ (~ (min(0u, 0u)))))))), workgroup_id, (((((~ (~ (true ? (((bool(bvec2((false || (bool(bvec3((false), true, ((injectionSwitch.x > injectionSwitch.y)))))), true))) ? (subgroup_local_id) : workgroup_id)) : (workgroup_id)))) | (~ (~ (true ? (((bool(bvec2((false || (false)), true))) ? (subgroup_local_id) : workgroup_id)) : (workgroup_id))))))))), clamp((((0u ^ (workgroup_id))) - (min(0u, 0u))), workgroup_id, (((~ (((~ (uint(uvec4(((true ? (true ? (((bool(bvec2((false || (false)), true))) ? (subgroup_local_id) : ((workgroup_id) / 1u))) : (((workgroup_id) / 1u))) : (subgroup_id))), 0u, 1u, (~ (~ (0u)))))))) >> 0u))))))))) >> (0u | 0u)) - 0u));
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + (((((injectionSwitch.x > injectionSwitch.y)) || ((! ((! (! (! (false)))))))) ? (((((((((((((~ (~ (false ? (((((injectionSwitch.x < injectionSwitch.y)) ? ((num_workgroup) | 0u) : (workgroup_base)))) : ((-- workgroup_size)))))) | 0u)))) << 0u)) ^ 0u) << 0u)) - 0u)) : ((subgroup_id) * ((min((1u << (uint(3u))) >> ((0u ^ (((uint(3u)) << 0u)))), (1u << (uint(3u))) >> ((0u ^ (uint(3u)))))))))) * subgroup_size + ((((((((((subgroup_local_id + (clamp(1, 1, (min((int(int(1))), ((((1) / 1)) - 0)))))) | ((~ ((0u ^ (~ (((false ? (subgroup_local_id) : subgroup_local_id + (((((clamp(1, 1, (min((int(int(1))), ((1) / 1)))))) | ((clamp(1, 1, (min((int(int(1))), ((1) / 1)))))))) - (0 & int(161202u))))))))))))) % subgroup_size) | 0u) / (~ (~ (1u)))))) - 0u));
 buf[virtual_gid] = 1;
 if((true && ((bool(bvec2((((! (! (((! (! ((((false || ((subgroup_local_id + 1 < subgroup_size))) && true)) || false)))) && true))))), ((injectionSwitch.x > ((false ? ((true ? (injectionSwitch) : (injectionSwitch))) : injectionSwitch)).y))))))))
  {
   int i = 0;
   buf[next_virtual_gid] = 2;
  }
 else
  {
   buf[next_virtual_gid] = 2;
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
