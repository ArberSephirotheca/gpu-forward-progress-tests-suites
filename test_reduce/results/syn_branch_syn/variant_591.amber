#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

struct _GLF_struct_1 {
 mat4 _f0;
 vec4 _f1;
} ;

struct _GLF_struct_0 {
 uint _f0;
 uint subgroup_id;
} ;

struct _GLF_struct_2 {
 _GLF_struct_0 _f0;
 _GLF_struct_1 _f1;
} ;

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((false) || ((injectionSwitch.x > injectionSwitch.y)))))
        barrier();
       barrier();
      }
     barrier();
    }
   if((false))
    barrier();
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((((false)) && true))
  barrier();
 _GLF_struct_2 _GLF_struct_replacement_2 = _GLF_struct_2(_GLF_struct_0(1u, gl_SubgroupID), _GLF_struct_1(mat4(((false ? (27.27) : 1.0))), (clamp(vec4(1.0), vec4(((1.0) - 0.0)), vec4(1.0)))));
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   if((false))
    {
     if((false))
      {
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
       if((false))
        barrier();
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     barrier();
    }
   if((((injectionSwitch.x > (mix(float(((min(vec2(mat2x4(((((true ? injectionSwitch : (vec2(- 6117.3755, 4.0))) - vec2(0.0, 0.0)))), 0.0, 0.0, (max(abs(1.0), abs(1.0))), 1.0, 1.0, (dot(vec2(abs(1.0), 0.0), vec2(determinant(mat2(1.0, 0.0, 0.0, 1.0)), 0.0))))), ((true ? vec2(mat2x4(((true ? injectionSwitch : (vec2((((clamp(- 6117.3755, (max(- 6117.3755, - 6117.3755)), - 6117.3755))) / determinant(mat3(1.0, 1.0, 1.0, log(1.0), 1.0, 0.0, 0.0, 0.0, 1.0))), 4.0)))), 0.0, (max(0.0, (0.0 + (0.0)))), abs((mix(float(1.0), float((5.1)), bool(false)))), 1.0, 1.0, (dot(vec2(abs(1.0), 0.0), vec2(determinant(mat2(1.0, 0.0, 0.0, 1.0)), 0.0))))) : (injectionSwitch)))))).y), float((- 8738.8210)), bool(false)))))))
    {
     if((((((injectionSwitch.x) - 0.0) > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     barrier();
    }
   if((false))
    barrier();
   if((bool(bvec2((((injectionSwitch.x > injectionSwitch.y))), (! (! (true)))))))
    barrier();
   if((! (((! ((false))) || (true && (false))))))
    barrier();
   if((false))
    barrier();
   if((false))
    {
     if((false))
      {
       if((false))
        barrier();
       if((((false) || ((injectionSwitch.x > (max(injectionSwitch.y, injectionSwitch.y)))))))
        barrier();
       if((false || ((false))))
        barrier();
       barrier();
      }
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(((! (! (((((((! (! ((injectionSwitch.x > injectionSwitch.y)))) && true))) || (! (! (false || ((((false) && true)))))))))))))
    {
     if((false))
      barrier();
     barrier();
    }
   barrier();
   if(((((true && (((mix(float(float(mat3x2(injectionSwitch.x, 0.0, 1.0, 1.0, (dot(vec4((float(mat2(determinant(mat2(0.0, 1.0, 0.0, 0.0)), 0.0, 1.0, 0.0))), 0.0, determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 1.0), vec4(0.0, 0.0, 0.0, (max(1.0, 1.0))))), determinant(mat2(0.0, 0.0, 1.0, 0.0))))), float((6919.4504)), bool(false)))) > (max((min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))))))
    {
     if(((! ((true && (! (false)))))))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   if((false))
    barrier();
  }
 uint subgroup_size = gl_SubgroupSize;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((false))
  {
   if(((! (bool((bvec3(bvec3(bvec3((! (false)), true, false)))))))))
    barrier();
   if((false))
    barrier();
   if((((((! (! ((false) && true))))) && true)))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   if((false))
    barrier();
   if((bool(bool((false)))))
    barrier();
   if((((! (! (((false) && true)))) || (false))))
    barrier();
   barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((false)) || ((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = ((gl_NumWorkGroups.x) ^ 0u);
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if((false))
  barrier();
 uint workgroup_size = (uvec3((uvec4(0u, 0u, 0u, 0u) | ((uvec4(0u, 0u, 0u, 0u) | (((((true ? uvec4((uvec3(gl_WorkGroupSize[0], gl_WorkGroupSize[1], gl_WorkGroupSize[(0 ^ (2))])), 0u) : (uvec4(185893u, 74979u, 99682u, 21905u))))) | (uvec4((uvec3(gl_WorkGroupSize[0], gl_WorkGroupSize[1], gl_WorkGroupSize[2])), 0u))))))))).x;
 if((false || ((false))))
  {
   if((false))
    barrier();
   if((! (! ((false)))))
    barrier();
   barrier();
   if((false))
    barrier();
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   barrier();
  }
 if((false))
  {
   if((false))
    barrier();
   barrier();
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(((false || (false))))
  {
   if((false || ((((injectionSwitch.x > injectionSwitch.y))))))
    {
     if((! (! ((false)))))
      {
       if(((bool(bool(((injectionSwitch.x > injectionSwitch.y)))))))
        barrier();
       barrier();
       if((false))
        barrier();
      }
     if((false))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   barrier();
  }
 if(((! (! (((((injectionSwitch.x) / 1.0) > injectionSwitch.y)))))))
  barrier();
 if((false))
  barrier();
 if(((bool(bool((bool(bool(((injectionSwitch.x > injectionSwitch.y))))))))))
  barrier();
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 if((false))
  barrier();
 if(((! ((! (! (! (((injectionSwitch.x > injectionSwitch.y))))))))))
  barrier();
 if(((false || (((false) || false)))))
  barrier();
 uint virtual_gid = ((workgroup_base) | 0u) + ((_GLF_struct_replacement_2._f0.subgroup_id) | (_GLF_struct_replacement_2._f0.subgroup_id)) * ((subgroup_size) | (subgroup_size)) + subgroup_local_id;
 if((bool(bvec3((((injectionSwitch.x < injectionSwitch.y)) && (((! (! (false)))))), false, true))))
  {
   if((false))
    barrier();
   barrier();
   if((false))
    barrier();
  }
 uint next_virtual_gid = (((((false ? (packUnorm2x16(vec2(- 16.18, 4.0))) : ((((false ? (workgroup_id) : min((((true ? max((0u | (((((workgroup_base)) | 0u)) * 1u)), workgroup_base) : (workgroup_base)))), workgroup_base))))) | ((min((((((true ? max((0u | (workgroup_base)), workgroup_base) : (workgroup_base)))) * 1u)), workgroup_base)))))) ^ 0u)) + _GLF_struct_replacement_2._f0.subgroup_id * subgroup_size + (((~ ((uint(uvec4(~ ((min((clamp((((((0u | (((true ? uint(((((((true ? (min(uvec4((subgroup_local_id), 0u, 0u, 1u), (uvec4(0u, 0u, 0u, 0u) ^ (uvec4((subgroup_local_id), 0u, 0u, 1u))))) : (uvec4(149600u, 188335u, 126553u, (max(((87240u) | (87240u)), 87240u)))))) >> uvec4(0u, 0u, 0u, 0u)))) - uvec4(0u, 0u, 0u, 0u))) : (73681u))))) + 1) % subgroup_size)) / 1u), ((((injectionSwitch.x > injectionSwitch.y)) ? (workgroup_id) : (((0u | (subgroup_local_id)) + 1) % subgroup_size))), (((0u | (subgroup_local_id)) + 1) % subgroup_size))), (((((((0u | (false ? (workgroup_base) : (0u | (subgroup_local_id))))) - ((0u << (uint(6u))) >> (uint(1u)))))) + 1) % subgroup_size))) | ((min((((true ? ((uint(uvec3((~ (~ (((((uint(uint(false ? (bitfieldReverse(workgroup_id)) : subgroup_local_id + (int(int(1))))))) | (false ? (bitfieldReverse(workgroup_id)) : subgroup_local_id + (int(int(1))))))))), 1u, 1u)))) : (122220u)))) % (((uint((injectionSwitch.x)) | (subgroup_size))) | (subgroup_size)), ((((((max(subgroup_local_id, ((((((max(0u, 0u))) + 0u)) / 1u) | ((min(~ (~ ((subgroup_local_id))), (uint(((uint(((~ (~ ((subgroup_local_id)))) | 0u))) | (uint(((~ (~ ((subgroup_local_id)))) | 0u))))))))))))) - 0u) + 1) * 1u)) % subgroup_size)))), 1u, 1u, 1u)))))));
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
 buf[virtual_gid] = 1;
 if((false))
  barrier();
 if(((true && (false))))
  barrier();
 if((((0u >> (uint(4u))) ^ ((clamp(((uint(((uint((max(((((true) || ((injectionSwitch.x > injectionSwitch.y))) ? (min(subgroup_local_id, subgroup_local_id)) : (subgroup_local_id))), ((subgroup_local_id) - 0u))) + 1)) >> 0u))) - 0u), (max(((uint(((uint((max((min(subgroup_local_id, subgroup_local_id)), ((subgroup_local_id) - 0u))) + 1)) >> 0u))) - 0u), ((uint(((uint((max((min((min(subgroup_local_id, subgroup_local_id)), (min(subgroup_local_id, subgroup_local_id)))), ((subgroup_local_id) - 0u))) + 1)) >> 0u))) - 0u))), ((uint(((uint((((max((min(subgroup_local_id, subgroup_local_id)), ((subgroup_local_id) - 0u))) + 1) - (0u << (uint(4u)))))) >> 0u))) - 0u)))))) < subgroup_size)
  {
   if((false))
    {
     if((((((false ? (injectionSwitch) : (vec2(mat3x2(injectionSwitch, 0.0, 0.0, 0.0, 1.0))))).x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(((bool((! (! (bool(false))))))))
    {
     if((false))
      barrier();
     if(((((! ((true && (! (injectionSwitch.x > injectionSwitch.y)))))))))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   if((false))
    {
     if((((false) || false)))
      {
       if((false))
        barrier();
       if(((((((min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))) && true)))
        {
         if((false))
          barrier();
         barrier();
        }
       if((false))
        barrier();
       if((false))
        barrier();
       barrier();
       if((false))
        barrier();
      }
     barrier();
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     if((false))
      barrier();
     if((((injectionSwitch.x > (vec2(injectionSwitch[0], injectionSwitch[1])).y))))
      barrier();
    }
   int i = 0;
   if((false))
    {
     if(((((! (! (injectionSwitch.x > injectionSwitch.y)))))))
      barrier();
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
    }
   (((((false || (((true && ((! ((! (! ((bool(bvec2(! (true && (((injectionSwitch.x < injectionSwitch.y)))), true)))))))))))))) && true) ? (~ (((~ (((true ? buf[next_virtual_gid] = ((2) ^ 0) : (workgroup_id)))))) | (0u >> ((uint((~ (~ (uint(uint(0u))))))))))) : (workgroup_id)));
   if((false))
    barrier();
  }
 else
  {
   if((false))
    {
     if((false))
      barrier();
     barrier();
     if((false))
      barrier();
    }
   buf[next_virtual_gid] = ((2) | ((int(int(2)))));
  }
 if((false))
  barrier();
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
