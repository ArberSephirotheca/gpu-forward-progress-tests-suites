#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = (uvec3(gl_WorkGroupSize[0], (clamp(gl_WorkGroupSize, (max(((((gl_WorkGroupSize) | (gl_WorkGroupSize)) << uvec3(0u, 0u, 0u))), gl_WorkGroupSize)), (((uvec3(0u, 0u, 0u) + ((clamp(gl_WorkGroupSize, gl_WorkGroupSize, gl_WorkGroupSize))))) / uvec3((((0u ^ (1u))) | uint((injectionSwitch.x))), 1u, 1u))))[1], gl_WorkGroupSize[(0 + (2))])).x;
 if((false))
  barrier();
 uint workgroup_id = ((gl_WorkGroupID.x) ^ 0u);
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = workgroup_base + ((((false ? (num_workgroup) : subgroup_id))) | (subgroup_id)) * subgroup_size + subgroup_local_id;
 uint next_virtual_gid = (min(workgroup_base + ((((((0u + ((((subgroup_id) >> 0u))))) | ((((subgroup_id) >> 0u)))) / ((uint((injectionSwitch.y)) << ((min(uint(2u), uint(2u))))) >> (uint(2u))))) ^ 0u) * subgroup_size + (((clamp(((subgroup_local_id + ((1) ^ 0)) ^ 0u), ((subgroup_local_id + ((1) ^ 0)) ^ 0u), ((subgroup_local_id + ((1) ^ 0)) ^ 0u)))) % subgroup_size), workgroup_base + ((((((subgroup_id) >> 0u)) / ((uint((injectionSwitch.y)) << ((min(uint(2u), uint(2u))))) >> (uint(2u))))) ^ 0u) * subgroup_size + (((((0u + (subgroup_local_id + ((1) ^ 0)))) ^ 0u)) % subgroup_size)));
 buf[virtual_gid] = 1;
 if(subgroup_local_id + 1 < (min(((~ (((~ (((((0u) + 0u)) + 0u)))) * 1u)) | (0u ^ ((subgroup_size)))), ((((subgroup_size) | (subgroup_size)) + 0u)))))
  {
   int i = ((((0 ^ (((((~ (~ ((int(((int((((0 | (((max((0), (0)))) * 1))) >> 0))) ^ 0))) * 1)))) + (int(ivec4(0, 0, int((((injectionSwitch) * mat2(1.0)).y)), (1 ^ 1)))))))) ^ 0)));
   buf[next_virtual_gid] = 2;
  }
 else
  {
   (((0u ^ ((~ (~ (((buf[next_virtual_gid] = 2) - ((uint(uvec2(0u, 1u))) >> ((clamp((clamp(uint((((clamp(((0u | (((false ? (mix(workgroup_id, packUnorm4x8(vec4(- 2.8, - 569.013, 188.608, - 9.6)), true)) : ((0u | ((0u | (0u))))))))) | ((((((uint(uvec2(((0u ^ ((~ (~ (0u))))) | (0u)), 0u)))) | (((0u ^ ((~ (~ (0u))))) | (0u))))) << 0u))), (1u * ((max((min((0u + (0u)), ((((0u) | (0u))) | 0u))), (min(((min(0u + (0u), ((false ? (virtual_gid) : 0u + (0u)))))), ((((0u) | (0u))) | 0u))))))), (((max(0u, 0u)) - 0u))))) | (((0u) << 0u)))), uint((((clamp(((0u | (((0u | ((0u | (0u))))))) | (((0u ^ ((~ (~ (0u))))) | (0u)))), (max((min((0u + (0u)), ((((0u) | (0u))) | 0u))), (min((0u + (0u)), ((((0u) | (0u))) | 0u))))), (((max(0u, ((0u) - 0u))) - 0u))))) | (((0u) << 0u)))), uint((((clamp(((0u | (((((0u | ((0u | (0u)))) >> 0u))))) | (((0u ^ ((~ (~ (0u))))) | (0u)))), (max((min((((0u + (0u)) - 0u)), ((((0u) | (((0u)) | ((0u))))) | 0u))), (min((0u + (0u)), ((((0u) | (0u))) | 0u))))), (((max(0u, 0u)) - 0u))))) | (((0u) << 0u)))))), uint(0u), uint(0u))))))))))) + ((0u >> (uint(6u))) >> (uint(7u)))));
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
