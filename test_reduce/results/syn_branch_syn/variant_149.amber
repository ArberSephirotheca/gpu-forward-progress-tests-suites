#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if((! (! ((! (! (((false || ((((false || (! (! (false))))) || (false))))))))))))
  return;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = (((~ (~ ((! (! (false))) ? ((~ (~ (41159u)))) : gl_NumWorkGroups.x)))));
 if((((injectionSwitch.x > injectionSwitch.y)) || ((bool(bool((false)))))))
  return;
 uint workgroup_size = ((((false ? (packHalf2x16(vec2(- 3.7, - 89.19))) : gl_WorkGroupSize.x))) >> uint((injectionSwitch.x)));
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = ((workgroup_size) << uint((injectionSwitch.x))) * (uint(uvec2((clamp(workgroup_id, workgroup_id, workgroup_id)), 0u)));
 uint virtual_gid = workgroup_base + subgroup_id * (max(((true ? subgroup_size : (subgroup_size))), subgroup_size)) + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + ((1u | 1u) * ((0u ^ ((clamp((((uint(uvec2(subgroup_id, 1u))) * subgroup_size)), (((((uint(uvec2(subgroup_id, 1u))) * subgroup_size))) ^ 0u), (((uint(uvec2(subgroup_id, 1u))) * subgroup_size)))) >> 0u)))) + (min(((clamp(((uint(((uvec3((min(((((min((~ ((max(~ (((min((clamp(subgroup_local_id, subgroup_local_id, (~ (~ (subgroup_local_id))))), subgroup_local_id)) + (((1 * (((1) ^ 0)))) | (1))) % subgroup_size), ~ (((min(subgroup_local_id, subgroup_local_id)) + (((1 * (((1) ^ 0)))) | (1))) % subgroup_size))))), ((min(subgroup_local_id, subgroup_local_id)) + ((((max(1, 1)) * (((1) ^ 0)))) | (1))) % subgroup_size))) - ((0u) * ((1u << (uint(0u))) >> (uint(0u)))))), ((((min((~ ((max(~ (((min((clamp(subgroup_local_id, subgroup_local_id, (~ (~ (subgroup_local_id))))), subgroup_local_id)) + (((1 * (((1) ^ 0)))) | (1))) % subgroup_size), ~ (((min(subgroup_local_id, subgroup_local_id)) + (((1 * (((1) ^ 0)))) | (1))) % subgroup_size))))), ((min(subgroup_local_id, subgroup_local_id)) + ((((max(1, 1)) * (((1) ^ 0)))) | (1))) % subgroup_size))) - ((0u) * ((1u << (uint(0u))) >> (uint(0u)))))))), 0u, uint((injectionSwitch.x)))) / uvec3(1u, 1u, 1u)))) * ((0u >> (uint(0u))) | (1u))), (((min((~ ((max(~ (((min(subgroup_local_id, subgroup_local_id)) + (((1 * (((1) ^ 0)))) | (1))) % subgroup_size), ~ (((min(subgroup_local_id, subgroup_local_id)) + (((1 * (((1) ^ 0)))) | (1))) % subgroup_size))))), ((min(subgroup_local_id, subgroup_local_id)) + (((1 * (((1) ^ 0)))) | (1))) % subgroup_size))) - 0u), (min((((min((~ ((max(~ (((min(subgroup_local_id, (1u * ((uint(((uvec2(subgroup_local_id, 1u)) / uvec2(1u, 1u)))))))) + (((1 * (((1) ^ 0)))) | (1))) % subgroup_size), ~ (((min(subgroup_local_id, subgroup_local_id)) + (((((1 * (((1) ^ 0)))) | (1)) | int((injectionSwitch.x))))) % subgroup_size))))), ((min(subgroup_local_id, subgroup_local_id)) + (((false ? (- 3536) : ((1 * (((1) ^ 0)))))) | (1))) % subgroup_size))) - 0u), (((min((~ ((max(~ (((min(subgroup_local_id, subgroup_local_id)) + (((1 * (((1) ^ 0)))) | (1))) % subgroup_size), ((~ (((min(subgroup_local_id, subgroup_local_id)) + (((1 * (((1) ^ 0)))) | (1))) % subgroup_size)) * 1u))))), ((min(subgroup_local_id, subgroup_local_id)) + (((1 * (((1) ^ 0)))) | (1))) % subgroup_size))) - 0u)))))), ((((min(0u ^ ((((0u ^ (min(((min(subgroup_local_id, subgroup_local_id)) + (((1 * (((1) ^ 0)))) | (1))) % subgroup_size, ((min(subgroup_local_id, subgroup_local_id)) + (((1 * (((1) ^ 0)))) | (1))) % subgroup_size))))) - 0u), 0u ^ ((((0u ^ (min(((min(subgroup_local_id, subgroup_local_id)) + (((1 * (((1) ^ 0)))) | (1))) % subgroup_size, ((min(subgroup_local_id, subgroup_local_id)) + (((1 * (((1) ^ 0)))) | (1))) % subgroup_size))))) - 0u))))))));
 buf[virtual_gid] = 1;
 if((! (! ((! (! (! ((! (subgroup_local_id + 1 < (uint((~ (~ (uint(subgroup_size))))))))))))))))
  {
   int i = 0;
   buf[next_virtual_gid] = ((94331 & 0) ^ ((((0 | ((~ (~ (int((injectionSwitch.x)) ^ 1)))))) * (2))));
  }
 else
  {
   ((((((((((((true ? (((((((1u * (buf[next_virtual_gid] = (~ (~ (((2) ^ 0))))))) / 1u)) | 0u))) ^ uint((injectionSwitch.x)) : (atomicAdd(subgroup_size, subgroup_local_id)))))) << 0u) << 0u)) - 0u)) << uint((min((((injectionSwitch.x)) + 0.0), (((injectionSwitch.x)) + 0.0)))))) / uint((injectionSwitch.y)));
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
