#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

struct _GLF_struct_20 {
 mat3 _f0;
 uvec3 _f1;
 ivec4 _f2;
 bool _f3;
 bool _f4;
} ;

struct _GLF_struct_19 {
 vec3 _f0;
 vec3 _f1;
 uint _f2;
 mat4x2 _f3;
} ;

struct _GLF_struct_21 {
 _GLF_struct_19 _f0;
 _GLF_struct_20 _f1;
 mat2x4 _f2;
 ivec3 _f3;
} ;

struct _GLF_struct_22 {
 bvec4 _f0;
 _GLF_struct_21 _f1;
 uint workgroup_base;
} ;

struct _GLF_struct_16 {
 mat3x2 _f0;
 uint _f1;
} ;

struct _GLF_struct_15 {
 bvec2 _f0;
 bvec2 _f1;
} ;

struct _GLF_struct_17 {
 mat2 _f0;
 ivec3 _f1;
 _GLF_struct_15 _f2;
 _GLF_struct_16 _f3;
} ;

struct _GLF_struct_13 {
 vec2 _f0;
 bvec2 _f1;
 int _f2;
 bool _f3;
 mat2x4 _f4;
 uvec4 _f5;
} ;

struct _GLF_struct_12 {
 uvec2 _f0;
 ivec3 _f1;
 mat3x4 _f2;
 uvec4 _f3;
} ;

struct _GLF_struct_14 {
 int _injected_loop_counter;
 _GLF_struct_12 _f0;
 _GLF_struct_13 _f1;
 uint _f2;
} ;

struct _GLF_struct_18 {
 _GLF_struct_14 _f0;
 _GLF_struct_17 _f1;
} ;

struct _GLF_struct_9 {
 int i;
 bvec2 _f0;
} ;

struct _GLF_struct_10 {
 int _f0;
 uint _f1;
 bvec2 _f2;
 _GLF_struct_9 _f3;
 uvec2 _f4;
 mat2x4 _f5;
} ;

struct _GLF_struct_8 {
 mat4x3 _f0;
} ;

struct _GLF_struct_6 {
 vec4 _f0;
 uvec4 _f1;
 vec2 _f2;
} ;

struct _GLF_struct_7 {
 mat2x3 _f0;
 mat2 _f1;
 _GLF_struct_6 _f2;
} ;

struct _GLF_struct_11 {
 _GLF_struct_7 _f0;
 mat3 _f1;
 mat3x2 _f2;
 _GLF_struct_8 _f3;
 _GLF_struct_10 _f4;
} ;

struct _GLF_struct_3 {
 vec4 _f0;
 mat3x4 _f1;
 uvec4 _f2;
 bvec2 _f3;
 ivec4 _f4;
 uint _f5;
} ;

struct _GLF_struct_2 {
 mat2x4 _f0;
 bvec3 _f1;
 mat3 _f2;
 bvec3 _f3;
 int _f4;
} ;

struct _GLF_struct_1 {
 mat3x4 _f0;
 vec2 _f1;
 mat2x4 _f2;
} ;

struct _GLF_struct_0 {
 int _f0;
} ;

struct _GLF_struct_4 {
 _GLF_struct_0 _f0;
 int _f1;
 _GLF_struct_1 _f2;
 vec4 _f3;
 _GLF_struct_2 _f4;
 _GLF_struct_3 _f5;
} ;

struct _GLF_struct_5 {
 uint subgroup_local_id;
 _GLF_struct_4 _f0;
} ;

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((false))
  {
   if((false))
    barrier();
   for(int _injected_loop_counter = (int(ivec2(0, 0))); _injected_loop_counter != (int((injectionSwitch.y)) & 1); _injected_loop_counter ++)
    {
     do
      {
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
          {
           if((false))
            barrier();
           if((false))
            barrier();
           do
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                barrier();
               if(true)
                {
                 barrier();
                }
               else
                {
                }
              }
             if(((injectionSwitch.x < injectionSwitch.y)))
              {
               barrier();
              }
             else
              {
              }
             if((false))
              barrier();
             if(false)
              {
              }
             else
              {
               if((false))
                {
                 do
                  {
                   barrier();
                  }
                 while(((injectionSwitch.x > injectionSwitch.y)));
                }
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(false)
                    {
                    }
                   else
                    {
                     barrier();
                    }
                  }
                 barrier();
                }
               do
                {
                 if((false))
                  {
                   if(false)
                    {
                    }
                   else
                    {
                     if((false))
                      barrier();
                    }
                   barrier();
                  }
                }
               while(false);
              }
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = (0 ^ 0); _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
            {
             if((false))
              barrier();
             if(((injectionSwitch.x < injectionSwitch.y)))
              {
               barrier();
              }
             else
              {
              }
            }
          }
         if((false))
          barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       do
        {
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
      }
     while(false);
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((! (! ((false || (true))))))
      {
       barrier();
      }
     else
      {
      }
    }
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     do
      {
       if(true)
        {
         barrier();
        }
       else
        {
        }
      }
     while(false);
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(true)
    {
     barrier();
     if((false))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       if((false))
        {
         do
          {
           if((false))
            barrier();
          }
         while(false);
         barrier();
         if((false))
          barrier();
        }
       barrier();
      }
    }
   else
    {
     if(((bool(bvec3(false, false, false)))))
      barrier();
    }
   if((false))
    barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 0; _injected_loop_counter != ((1 << (int(7))) >> (((int(7)) | (int(7))))); _injected_loop_counter ++)
    {
     if(false)
      {
      }
     else
      {
       if((false))
        barrier();
       barrier();
      }
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 do
  {
   for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < 1; _injected_loop_counter ++)
    {
     do
      {
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(false)
          {
          }
         else
          {
           if((false))
            {
             if((false))
              barrier();
             if((false))
              barrier();
             barrier();
            }
           if((false))
            {
             if((false))
              barrier();
             if(true)
              {
               if((false))
                {
                 if(((injectionSwitch.x < injectionSwitch.y)))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
              }
             else
              {
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((false))
              barrier();
             if((false))
              barrier();
             if((! (! (((true) || false)))))
              {
               do
                {
                 barrier();
                }
               while(false);
              }
             else
              {
              }
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            {
             if((false))
              {
               for(int _injected_loop_counter = ((1 << (int(5))) >> (int(5))); _injected_loop_counter != (0 << (int(7))); _injected_loop_counter --)
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
              }
             if((((false) && true)))
              {
               do
                {
                 if(true)
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 else
                  {
                  }
                 barrier();
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               while(((injectionSwitch.x > injectionSwitch.y)));
              }
             if((false))
              barrier();
             if(((false || (false))))
              barrier();
             if((false))
              barrier();
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
              }
             else
              {
               barrier();
              }
            }
          }
        }
      }
     while(false);
    }
   if(true)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((bool(bvec3(true, true, ((injectionSwitch.x > injectionSwitch.y))))))
        {
         if((false))
          barrier();
        }
       else
        {
        }
       barrier();
      }
    }
   else
    {
    }
   if((false))
    {
     if((false))
      barrier();
     if((false))
      barrier();
     if((false))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       barrier();
       for(int _injected_loop_counter = ((1 << ((~ ((clamp(~ (int(7)), ~ (int(7)), ~ (int(7)))))))) >> (int(7))); _injected_loop_counter != 0; _injected_loop_counter --)
        {
         for(int _injected_loop_counter = ((0) | (0)); _injected_loop_counter < 1; _injected_loop_counter ++)
          {
           if((false))
            barrier();
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
          }
        }
      }
     while(false);
     if((false))
      barrier();
    }
   if((false))
    {
     if((! (! (false))))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 while(false);
 if(false)
  {
  }
 else
  {
   if((false))
    {
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           barrier();
          }
         while((((bool(bool(false)))) && true));
        }
      }
     else
      {
       barrier();
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 do
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      {
       do
        {
         if((false))
          {
           if(true)
            {
             barrier();
            }
           else
            {
            }
          }
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
       for(int _injected_loop_counter = 1; _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
        {
         if((false))
          barrier();
         barrier();
        }
      }
     do
      {
       barrier();
      }
     while(false);
    }
  }
 while(((injectionSwitch.x > injectionSwitch.y)));
 if((false))
  {
   if(false)
    {
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   barrier();
  }
 if(false)
  {
  }
 else
  {
   if((false))
    {
     if((! ((bool(bool(! (false)))))))
      {
      }
     else
      {
       barrier();
      }
    }
   if(true)
    {
     if(false)
      {
       if((false))
        barrier();
      }
     else
      {
       if((((false) || false)))
        barrier();
       if(true)
        {
         for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
          {
           for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
            {
             if((false))
              {
               for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                {
                 barrier();
                }
              }
             for(int _injected_loop_counter = 0; _injected_loop_counter < ((int((injectionSwitch.y)) << (int(1))) >> (int(1))); _injected_loop_counter ++)
              {
               if((false))
                barrier();
               if((false))
                barrier();
              }
            }
           do
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           while(false);
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               for(int _injected_loop_counter = 1; _injected_loop_counter > (0 >> (((min(int(ivec2(int(2), 1)), int(ivec2(int(2), 1))))))); _injected_loop_counter --)
                {
                 for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
                  {
                   barrier();
                  }
                }
              }
             barrier();
             for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != 0; _injected_loop_counter --)
              {
               if((false))
                barrier();
              }
             if((false))
              {
               for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
                {
                 barrier();
                }
              }
            }
           if((false))
            {
             if((false))
              barrier();
             barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             do
              {
               barrier();
              }
             while(false);
            }
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             do
              {
               if((false))
                {
                 if((false))
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if(true)
                    {
                     barrier();
                    }
                   else
                    {
                    }
                   if((false))
                    barrier();
                  }
                 do
                  {
                   if((false))
                    {
                     for(int _injected_loop_counter = 0; _injected_loop_counter < ((1 << (int(1))) >> (int(1))); _injected_loop_counter ++)
                      {
                       barrier();
                      }
                    }
                  }
                 while(false);
                 barrier();
                 if((false))
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   barrier();
                  }
                }
              }
             while(false);
            }
           else
            {
            }
          }
        }
       else
        {
        }
      }
    }
   else
    {
    }
  }
 if((false))
  barrier();
 if((false))
  {
   if((false))
    {
     if(true)
      {
       barrier();
      }
     else
      {
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       barrier();
      }
     while(false);
    }
   barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if(true)
    {
     barrier();
    }
   else
    {
    }
  }
 _GLF_struct_5 _GLF_struct_replacement_5 = _GLF_struct_5(gl_SubgroupInvocationID, _GLF_struct_4(_GLF_struct_0(1), 1, _GLF_struct_1(mat3x4(1.0), vec2(1.0), mat2x4(1.0)), vec4(1.0), _GLF_struct_2(mat2x4(1.0), bvec3(true), mat3(1.0), bvec3(true), 1), _GLF_struct_3(vec4(1.0), mat3x4(1.0), uvec4(1u), bvec2(true), ivec4(1), 1u)));
 if((false))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
  {
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
    }
   else
    {
     if((false))
      {
       for(int _injected_loop_counter = (0 | 0); _injected_loop_counter != 1; _injected_loop_counter ++)
        {
         do
          {
           for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
            {
             if((false))
              barrier();
             barrier();
            }
          }
         while(false);
        }
      }
    }
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(true)
  {
   if(true)
    {
     for(int _injected_loop_counter = (0 ^ (0 ^ 0)); _injected_loop_counter != (1 | 0); _injected_loop_counter ++)
      {
       do
        {
         if((false))
          barrier();
        }
       while(false);
       if(false)
        {
        }
       else
        {
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           barrier();
          }
         if((false))
          barrier();
        }
      }
    }
   else
    {
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
  }
 uint workgroup_id = gl_WorkGroupID.x;
 for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if((false))
  barrier();
 if((false))
  barrier();
 for(int _injected_loop_counter = (0 >> (int(8))); _injected_loop_counter < 1; _injected_loop_counter ++)
  {
   if(true)
    {
     if((false))
      barrier();
     if(true)
      {
       if((false))
        {
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           if(true)
            {
             barrier();
            }
           else
            {
            }
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             if((false))
              barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if((false))
          barrier();
        }
      }
     else
      {
      }
    }
   else
    {
    }
  }
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 _GLF_struct_22 _GLF_struct_replacement_22 = _GLF_struct_22(bvec4(true), _GLF_struct_21(_GLF_struct_19(vec3(1.0), vec3(1.0), 1u, mat4x2(1.0)), _GLF_struct_20(mat3(1.0), uvec3(1u), ivec4(1), true, true), mat2x4(1.0), ivec3(1)), workgroup_size * workgroup_id);
 for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
  {
   if((false))
    {
     for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
      {
       barrier();
      }
    }
  }
 uint virtual_gid = _GLF_struct_replacement_22.workgroup_base + subgroup_id * subgroup_size + _GLF_struct_replacement_5.subgroup_local_id;
 if((false))
  {
   do
    {
     do
      {
       barrier();
      }
     while((! (! (false))));
    }
   while(false);
  }
 uint next_virtual_gid = _GLF_struct_replacement_22.workgroup_base + subgroup_id * subgroup_size + ((_GLF_struct_replacement_5.subgroup_local_id + 1) % subgroup_size);
 if((false))
  {
   if(((bool((bvec2(bvec4(bvec2(false, false), true, false)))))))
    {
     if(false)
      {
      }
     else
      {
       barrier();
      }
    }
   barrier();
  }
 if((false))
  barrier();
 do
  {
   if((false))
    {
     if(true)
      {
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          barrier();
         if(((false || (false))))
          barrier();
        }
       else
        {
        }
      }
     else
      {
      }
     for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < 1; _injected_loop_counter ++)
      {
       barrier();
       if((false))
        barrier();
      }
    }
  }
 while(((injectionSwitch.x > injectionSwitch.y)));
 buf[virtual_gid] = 1;
 if(true)
  {
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     if(true)
      {
       if((false))
        barrier();
      }
     else
      {
      }
     if((false))
      {
       do
        {
         barrier();
         if((false))
          barrier();
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
      }
     if(_GLF_struct_replacement_5.subgroup_local_id + 1 < subgroup_size)
      {
       _GLF_struct_11 _GLF_struct_replacement_11 = _GLF_struct_11(_GLF_struct_7(mat2x3(1.0), mat2(1.0), _GLF_struct_6(vec4(1.0), uvec4(1u), vec2(1.0))), mat3(1.0), mat3x2(1.0), _GLF_struct_8(mat4x3(1.0)), _GLF_struct_10(1, 1u, bvec2(true), _GLF_struct_9(0, bvec2(true)), uvec2(1u), mat2x4(1.0)));
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          {
           for(int _injected_loop_counter = 1; _injected_loop_counter != (0 | 0); _injected_loop_counter --)
            {
             barrier();
            }
          }
         barrier();
        }
       if((false))
        barrier();
       for(int _injected_loop_counter = (0 >> (int(2))); _injected_loop_counter != 1; _injected_loop_counter ++)
        {
         if((false))
          barrier();
         do
          {
           if((false))
            barrier();
           if((false))
            barrier();
           if((false))
            {
             if((false))
              barrier();
             for(int _injected_loop_counter = 1; _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
              {
               if((false))
                {
                 if(((false || (false))))
                  barrier();
                 barrier();
                }
               if(false)
                {
                }
               else
                {
                 barrier();
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
            }
          }
         while((false || (false)));
        }
       do
        {
         if((false))
          {
           if(false)
            {
            }
           else
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           if((false))
            barrier();
          }
         if(true)
          {
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(true)
            {
             if(false)
              {
              }
             else
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
            }
           else
            {
            }
          }
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
       if((false))
        {
         do
          {
           if(false)
            {
            }
           else
            {
             barrier();
            }
          }
         while(false);
        }
       do
        {
         if(false)
          {
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         do
          {
           if((false))
            {
             if(true)
              {
               barrier();
               if((false))
                barrier();
              }
             else
              {
              }
             if((false))
              barrier();
            }
           if(true)
            {
             do
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((false))
                  {
                   if((false))
                    {
                     if(false)
                      {
                      }
                     else
                      {
                       if((bool(bvec4(true, true, true, false))))
                        {
                         if(true)
                          {
                           do
                            {
                             if((false))
                              barrier();
                            }
                           while(false);
                          }
                         else
                          {
                          }
                         barrier();
                         if((false))
                          barrier();
                        }
                       else
                        {
                         if((false))
                          barrier();
                         do
                          {
                           if(false)
                            {
                             if(((bool(bool(false)))))
                              barrier();
                            }
                           else
                            {
                             if((((injectionSwitch.x > injectionSwitch.y))))
                              barrier();
                             if((((injectionSwitch.x > injectionSwitch.y))))
                              {
                               if(((injectionSwitch.x < injectionSwitch.y)))
                                {
                                 barrier();
                                }
                               else
                                {
                                }
                              }
                            }
                          }
                         while(false);
                        }
                      }
                     if((false))
                      barrier();
                    }
                   if(((injectionSwitch.x < injectionSwitch.y)))
                    {
                     for(int _injected_loop_counter = 1; _injected_loop_counter != (((1 << (int(5))) >> (int(5))) ^ 1); _injected_loop_counter --)
                      {
                       do
                        {
                         barrier();
                        }
                       while(((injectionSwitch.x > injectionSwitch.y)));
                       if((false))
                        {
                         if(((injectionSwitch.x > injectionSwitch.y)))
                          {
                          }
                         else
                          {
                           barrier();
                          }
                        }
                      }
                    }
                   else
                    {
                    }
                   if((false))
                    {
                     do
                      {
                       barrier();
                      }
                     while(((false) && ((injectionSwitch.x < injectionSwitch.y))));
                    }
                  }
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if((false))
                  barrier();
                 if(((bool(bvec4(false, ((injectionSwitch.x > injectionSwitch.y)), ((injectionSwitch.x > injectionSwitch.y)), false)))))
                  barrier();
                 barrier();
                 for(int _injected_loop_counter = ((0) / 1); _injected_loop_counter < 1; _injected_loop_counter ++)
                  {
                   if((false))
                    {
                     if(((injectionSwitch.x > injectionSwitch.y)))
                      {
                      }
                     else
                      {
                       barrier();
                      }
                    }
                  }
                }
               if((false))
                barrier();
              }
             while(false);
            }
           else
            {
            }
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(false)
            {
            }
           else
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           do
            {
             if(false)
              {
               if((false))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               do
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if((false))
                    barrier();
                   if(true)
                    {
                     if(true)
                      {
                       if(false)
                        {
                        }
                       else
                        {
                         barrier();
                         if((false))
                          barrier();
                        }
                       if((false))
                        barrier();
                      }
                     else
                      {
                       if((false))
                        barrier();
                       if((false))
                        barrier();
                      }
                    }
                   else
                    {
                    }
                  }
                }
               while(((injectionSwitch.x > injectionSwitch.y)));
              }
             else
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((false))
                  barrier();
                 barrier();
                }
               do
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   for(int _injected_loop_counter = 1; _injected_loop_counter != (0 >> (int(8))); _injected_loop_counter --)
                    {
                     if(((bool(bvec4(false, true, true, ((injectionSwitch.x < injectionSwitch.y)))))))
                      barrier();
                    }
                   do
                    {
                     if(false)
                      {
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       if((false))
                        barrier();
                      }
                     else
                      {
                       if(false)
                        {
                        }
                       else
                        {
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                         barrier();
                        }
                      }
                    }
                   while(false);
                  }
                }
               while(false);
               do
                {
                 if(((! (! (false)))))
                  {
                   if((false))
                    {
                     if(((bool(bvec2(((injectionSwitch.x > injectionSwitch.y)), true)))))
                      barrier();
                     barrier();
                    }
                   if(((false || (false))))
                    {
                     if((false))
                      barrier();
                     barrier();
                    }
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    {
                     if((false))
                      barrier();
                     if((false))
                      {
                       for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
                        {
                         barrier();
                        }
                      }
                     for(int _injected_loop_counter = (0 << (int(7))); _injected_loop_counter < 1; _injected_loop_counter ++)
                      {
                       if(true)
                        {
                         if(((! (! (false)))))
                          {
                           do
                            {
                             barrier();
                            }
                           while(false);
                          }
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                        }
                       else
                        {
                        }
                       barrier();
                      }
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                   do
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     if(false)
                      {
                       do
                        {
                         if((false))
                          barrier();
                        }
                       while(((injectionSwitch.x > injectionSwitch.y)));
                       if((false))
                        {
                         if(false)
                          {
                          }
                         else
                          {
                           if((false))
                            {
                             if(false)
                              {
                              }
                             else
                              {
                               barrier();
                              }
                            }
                          }
                         barrier();
                        }
                       if((false))
                        barrier();
                       if((false))
                        {
                         do
                          {
                           if((((injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                           barrier();
                           if((false))
                            {
                             do
                              {
                               barrier();
                              }
                             while(((injectionSwitch.x > injectionSwitch.y)));
                            }
                          }
                         while(false);
                        }
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        {
                         if((false))
                          barrier();
                         barrier();
                        }
                       if((false))
                        barrier();
                      }
                     else
                      {
                       if((false))
                        barrier();
                       if((false))
                        barrier();
                       if(((injectionSwitch.x < injectionSwitch.y)))
                        {
                         if((false))
                          {
                           if(true)
                            {
                             if((bool(bvec4(((injectionSwitch.x > injectionSwitch.y)), true, true, false))))
                              {
                              }
                             else
                              {
                               barrier();
                               if((false))
                                barrier();
                              }
                             for(int _injected_loop_counter = (1 & 1); _injected_loop_counter != (((0 >> (int(8))) | (0 | 0)) ^ 0); _injected_loop_counter --)
                              {
                               for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
                                {
                                 if((((injectionSwitch.x > injectionSwitch.y))))
                                  barrier();
                                }
                              }
                             if((false))
                              barrier();
                             if((false))
                              {
                               do
                                {
                                 barrier();
                                }
                               while(false);
                              }
                            }
                           else
                            {
                             if(((bool(bvec2(false, false)))))
                              barrier();
                             do
                              {
                               if((! (! (((injectionSwitch.x > injectionSwitch.y))))))
                                {
                                }
                               else
                                {
                                 if((((injectionSwitch.x > injectionSwitch.y))))
                                  barrier();
                                 if((false))
                                  {
                                   if((false))
                                    barrier();
                                   barrier();
                                  }
                                 if((false))
                                  {
                                   do
                                    {
                                     barrier();
                                    }
                                   while(((injectionSwitch.x > injectionSwitch.y)));
                                   if((((injectionSwitch.x > injectionSwitch.y))))
                                    barrier();
                                  }
                                 if((false))
                                  barrier();
                                 do
                                  {
                                   if((false))
                                    {
                                     if(true)
                                      {
                                       barrier();
                                      }
                                     else
                                      {
                                      }
                                    }
                                  }
                                 while(false);
                                }
                              }
                             while(false);
                             if((false))
                              {
                               if(((injectionSwitch.x > injectionSwitch.y)))
                                {
                                }
                               else
                                {
                                 for(int _injected_loop_counter = ((1) >> 0); _injected_loop_counter > 0; _injected_loop_counter --)
                                  {
                                   barrier();
                                  }
                                }
                              }
                            }
                           if((false))
                            {
                             for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
                              {
                               barrier();
                              }
                            }
                          }
                        }
                       else
                        {
                        }
                       barrier();
                       if(((true && (false))))
                        barrier();
                       if(true)
                        {
                         if((false))
                          barrier();
                        }
                       else
                        {
                        }
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                      }
                     do
                      {
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
                        {
                         if((false))
                          barrier();
                         barrier();
                        }
                      }
                     while(((injectionSwitch.x > injectionSwitch.y)));
                    }
                   while(false);
                   if((false))
                    {
                     if((false))
                      barrier();
                     for(int _injected_loop_counter = 0; _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
                      {
                       barrier();
                      }
                    }
                  }
                 if((false))
                  barrier();
                 for(int _injected_loop_counter = 1; _injected_loop_counter != (int((injectionSwitch.x)) << (int(5))); _injected_loop_counter --)
                  {
                   if((false))
                    barrier();
                  }
                 if((false))
                  barrier();
                 do
                  {
                   if(((! (! (false)))))
                    {
                     if((false))
                      barrier();
                     if(false)
                      {
                      }
                     else
                      {
                       if((false))
                        barrier();
                       if((false))
                        {
                         if(false)
                          {
                          }
                         else
                          {
                           barrier();
                          }
                        }
                       if((false))
                        {
                         do
                          {
                           barrier();
                          }
                         while(false);
                        }
                       barrier();
                       do
                        {
                         for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
                          {
                           if(true)
                            {
                             do
                              {
                               if((false))
                                {
                                 if((((injectionSwitch.x > injectionSwitch.y))))
                                  barrier();
                                 do
                                  {
                                   if((false))
                                    barrier();
                                   barrier();
                                  }
                                 while(false);
                                 if((false))
                                  barrier();
                                }
                              }
                             while(((injectionSwitch.x > injectionSwitch.y)));
                            }
                           else
                            {
                            }
                          }
                        }
                       while(false);
                      }
                    }
                  }
                 while(((injectionSwitch.x > injectionSwitch.y)));
                 if((false))
                  barrier();
                 buf[next_virtual_gid] = 2;
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if((false))
                    barrier();
                   barrier();
                  }
                }
               while(false);
              }
            }
           while(false);
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            {
             for(int _injected_loop_counter = 1; _injected_loop_counter != (int(ivec3(0, 1, 1))); _injected_loop_counter --)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               do
                {
                 if((false))
                  {
                   for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                    {
                     for(int _injected_loop_counter = 0; _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
                      {
                       barrier();
                      }
                    }
                  }
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(true)
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
               while(false);
               if((false))
                {
                 if((false))
                  {
                   if((false))
                    barrier();
                   barrier();
                  }
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
              }
            }
           if(((false || (false))))
            {
             do
              {
               barrier();
              }
             while(false);
            }
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
       if(true)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       do
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
       for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
        {
         if(true)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = 0; _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
              {
               for(int _injected_loop_counter = ((0 << (int(7))) | 1); _injected_loop_counter != 0; _injected_loop_counter --)
                {
                 if((false))
                  {
                   do
                    {
                     barrier();
                    }
                   while(false);
                  }
                }
               barrier();
               if((false))
                barrier();
              }
            }
          }
         else
          {
          }
        }
       if((false))
        {
         for(int _injected_loop_counter = (1 ^ 1); _injected_loop_counter != 1; _injected_loop_counter ++)
          {
           do
            {
             if((false))
              {
               if((false))
                {
                 do
                  {
                   barrier();
                  }
                 while(false);
                }
               if(false)
                {
                 if((! (! (true))))
                  {
                   if((false))
                    barrier();
                  }
                 else
                  {
                  }
                 if(((false || (false))))
                  {
                   if(true)
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                }
               else
                {
                 if((false))
                  barrier();
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 for(int _injected_loop_counter = 0; _injected_loop_counter < (1 | ((1 << (int(1))) >> (int(1)))); _injected_loop_counter ++)
                  {
                   if((false))
                    barrier();
                  }
                 if((false))
                  barrier();
                 barrier();
                }
               if((false))
                barrier();
               if(true)
                {
                 do
                  {
                   if(((injectionSwitch.x > injectionSwitch.y)))
                    {
                    }
                   else
                    {
                     for(int _injected_loop_counter = 0; _injected_loop_counter < ((1 << (((int(6)) >> 0))) >> (int(6))); _injected_loop_counter ++)
                      {
                       if((false))
                        barrier();
                      }
                     do
                      {
                       if((false))
                        barrier();
                       if((false))
                        barrier();
                       barrier();
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        {
                         if(true)
                          {
                           if((false))
                            {
                             if(true)
                              {
                               barrier();
                              }
                             else
                              {
                              }
                            }
                           if((((injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                           barrier();
                          }
                         else
                          {
                           if((false))
                            barrier();
                          }
                         do
                          {
                           if((false))
                            {
                             if(false)
                              {
                              }
                             else
                              {
                               if(((injectionSwitch.x > injectionSwitch.y)))
                                {
                                 if((false))
                                  barrier();
                                }
                               else
                                {
                                 barrier();
                                }
                              }
                            }
                          }
                         while(((injectionSwitch.x > injectionSwitch.y)));
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          {
                           if((false))
                            barrier();
                           for(int _injected_loop_counter = ((0 >> (int(4))) ^ 0); _injected_loop_counter < 1; _injected_loop_counter ++)
                            {
                             if(((true && (false))))
                              barrier();
                            }
                           barrier();
                          }
                        }
                      }
                     while(false);
                     if((false))
                      barrier();
                     if(true)
                      {
                       if(((! (! ((bool(bvec3(false, true, true))))))))
                        {
                         for(int _injected_loop_counter = (0 >> ((~ (~ (int(7)))))); _injected_loop_counter != 1; _injected_loop_counter ++)
                          {
                           barrier();
                          }
                         do
                          {
                           if((false))
                            barrier();
                          }
                         while(false);
                        }
                      }
                     else
                      {
                      }
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(false)
                        {
                        }
                       else
                        {
                         barrier();
                        }
                      }
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if((false))
                    {
                     for(int _injected_loop_counter = (0 | 0); _injected_loop_counter < 1; _injected_loop_counter ++)
                      {
                       barrier();
                      }
                    }
                  }
                 while(false);
                }
               else
                {
                 if((false))
                  barrier();
                }
               if((false))
                barrier();
              }
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
          }
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(true)
            {
             if((false))
              {
               do
                {
                 barrier();
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   do
                    {
                     if((false))
                      barrier();
                     barrier();
                    }
                   while(false);
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                }
               while(((injectionSwitch.x > injectionSwitch.y)));
              }
             if((false))
              {
               if(((injectionSwitch.x > injectionSwitch.y)))
                {
                }
               else
                {
                 barrier();
                }
              }
            }
           else
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < 1; _injected_loop_counter ++)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             if((false))
              barrier();
            }
           barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              barrier();
             barrier();
            }
          }
         for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < ((1 << (int(7))) >> (int(7))); _injected_loop_counter ++)
          {
           if((false))
            barrier();
          }
         if((false))
          {
           for(int _injected_loop_counter = 0; _injected_loop_counter != ((((1 << (int(5))) >> (int(5))) << ((int(ivec4(int(1), 0, 1, 1))))) >> (((int(1)) - 0))); _injected_loop_counter ++)
            {
             if(false)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if((false))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             else
              {
               for(int _injected_loop_counter = 0; _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
                {
                 if((false))
                  barrier();
                }
              }
            }
           for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
            {
             barrier();
             if(((injectionSwitch.x < injectionSwitch.y)))
              {
               for(int _injected_loop_counter = 0; _injected_loop_counter < ((1 << (int(2))) >> (int(2))); _injected_loop_counter ++)
                {
                 if((false))
                  {
                   do
                    {
                     if(false)
                      {
                      }
                     else
                      {
                       do
                        {
                         for(int _injected_loop_counter = 1; _injected_loop_counter != (1 ^ int((injectionSwitch.y))); _injected_loop_counter --)
                          {
                           for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
                            {
                             if(true)
                              {
                               if((false))
                                {
                                 if((! (! (false))))
                                  {
                                  }
                                 else
                                  {
                                   do
                                    {
                                     for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
                                      {
                                       if(((injectionSwitch.x > injectionSwitch.y)))
                                        {
                                        }
                                       else
                                        {
                                         barrier();
                                         if((((injectionSwitch.x > injectionSwitch.y))))
                                          barrier();
                                        }
                                      }
                                    }
                                   while(false);
                                   if((false))
                                    barrier();
                                  }
                                }
                              }
                             else
                              {
                              }
                            }
                           if((((injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                          }
                        }
                       while(false);
                      }
                     barrier();
                    }
                   while(false);
                   if((false))
                    barrier();
                   if((false))
                    barrier();
                  }
                 if((false))
                  barrier();
                }
              }
             else
              {
              }
             if((false))
              barrier();
             if((false))
              {
               if((! (! (false))))
                {
                }
               else
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               if(false)
                {
                 if((false))
                  barrier();
                }
               else
                {
                 barrier();
                 if((false))
                  barrier();
                }
              }
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
              }
             else
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 for(int _injected_loop_counter = (1 | ((1 << (int(6))) >> (int(6)))); _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
                  {
                   if(false)
                    {
                    }
                   else
                    {
                     if((false))
                      barrier();
                    }
                  }
                 barrier();
                }
              }
             if(true)
              {
               do
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               while(false);
              }
             else
              {
              }
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             do
              {
               if((false))
                barrier();
              }
             while(false);
             for(int _injected_loop_counter = 0; _injected_loop_counter < ((1 << ((int(int(int(4)))))) >> (int(4))); _injected_loop_counter ++)
              {
               barrier();
              }
             if((false))
              barrier();
             if((false))
              {
               if(false)
                {
                }
               else
                {
                 barrier();
                }
              }
            }
           if((false))
            {
             for(int _injected_loop_counter = 0; _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
              {
               barrier();
              }
            }
          }
         if((false))
          barrier();
         if(false)
          {
          }
         else
          {
           if((false))
            {
             if((false))
              {
               for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
                {
                 barrier();
                }
              }
             barrier();
            }
           if((false))
            barrier();
           barrier();
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         for(int _injected_loop_counter = (1 & 1); _injected_loop_counter > (0 >> (int(0))); _injected_loop_counter --)
          {
           if((false))
            barrier();
           if((false))
            {
             if(((true && (false))))
              barrier();
             barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(((bool(bool(false)))))
            {
             if((false))
              {
               if((! (! (false))))
                {
                }
               else
                {
                 barrier();
                }
              }
             if(false)
              {
              }
             else
              {
               if((false))
                barrier();
              }
             barrier();
            }
          }
         if((false))
          {
           if(true)
            {
             barrier();
            }
           else
            {
            }
          }
        }
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         do
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         while(false);
        }
       else
        {
        }
       if(false)
        {
        }
       else
        {
         for(int _injected_loop_counter = 1; _injected_loop_counter != (0 >> (int(3))); _injected_loop_counter --)
          {
           for(int _injected_loop_counter = 0; _injected_loop_counter != ((1 << (int(3))) >> (int(3))); _injected_loop_counter ++)
            {
             for(_GLF_struct_18 _GLF_struct_replacement_18 = _GLF_struct_18(_GLF_struct_14(int((injectionSwitch.x)), _GLF_struct_12(uvec2(1u), ivec3(1), mat3x4(1.0), uvec4(1u)), _GLF_struct_13(vec2(1.0), bvec2(true), 1, true, mat2x4(1.0), uvec4(1u)), 1u), _GLF_struct_17(mat2(1.0), ivec3(1), _GLF_struct_15(bvec2(true), bvec2(true)), _GLF_struct_16(mat3x2(1.0), 1u))); _GLF_struct_replacement_18._f0._injected_loop_counter != 1; _GLF_struct_replacement_18._f0._injected_loop_counter ++)
              {
               for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != 0; _injected_loop_counter --)
                {
                 if((false))
                  barrier();
                }
               if((false))
                barrier();
               if(true)
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if((false))
                  barrier();
                }
               else
                {
                }
               buf[next_virtual_gid] = 2;
              }
            }
          }
        }
       if(true)
        {
         do
          {
           for(int _injected_loop_counter = (0 ^ 1); _injected_loop_counter != ((1 ^ 1) << (int(8))); _injected_loop_counter --)
            {
             if((false))
              barrier();
             do
              {
               if(false)
                {
                }
               else
                {
                 if((false))
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   barrier();
                  }
                 if((false))
                  barrier();
                }
               do
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               while(false);
               if((false))
                barrier();
               if(true)
                {
                 if(true)
                  {
                   if((false))
                    barrier();
                   for(int _injected_loop_counter = ((1) << 0); _injected_loop_counter > (0 >> (int(3))); _injected_loop_counter --)
                    {
                     if((false))
                      barrier();
                     if((false))
                      barrier();
                     if((false))
                      {
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       if(((injectionSwitch.x < injectionSwitch.y)))
                        {
                         if((false))
                          barrier();
                         barrier();
                        }
                       else
                        {
                        }
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        {
                         if((false))
                          {
                           if(false)
                            {
                            }
                           else
                            {
                             barrier();
                            }
                          }
                         if((false))
                          barrier();
                         barrier();
                        }
                      }
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      {
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        {
                         do
                          {
                           if((((injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                           barrier();
                           if((false))
                            barrier();
                          }
                         while(false);
                        }
                       if((false))
                        barrier();
                       if(true)
                        {
                         barrier();
                        }
                       else
                        {
                        }
                      }
                     if(false)
                      {
                      }
                     else
                      {
                       for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > (((0 >> (int(7))) >> (int(5))) >> (int(3))); _injected_loop_counter --)
                        {
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          {
                           for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
                            {
                             if((false))
                              barrier();
                             barrier();
                            }
                          }
                         if((false))
                          {
                           if((((injectionSwitch.x > injectionSwitch.y))))
                            {
                             if((false))
                              barrier();
                             if((((injectionSwitch.x > injectionSwitch.y))))
                              barrier();
                             do
                              {
                               barrier();
                               if((false))
                                {
                                 if((true && (false)))
                                  {
                                  }
                                 else
                                  {
                                   barrier();
                                  }
                                }
                               if((((injectionSwitch.x > injectionSwitch.y))))
                                {
                                 if((false))
                                  {
                                   if((false))
                                    barrier();
                                   barrier();
                                  }
                                 barrier();
                                }
                              }
                             while((true && ((! (! ((! (! (false)))))))));
                            }
                           barrier();
                           if((false))
                            barrier();
                          }
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          {
                           if(((injectionSwitch.x < injectionSwitch.y)))
                            {
                             if((false))
                              {
                               for(int _injected_loop_counter = (8950 & 0); _injected_loop_counter < (((int((injectionSwitch.y)) << (int(4))) >> (int(4))) & 1); _injected_loop_counter ++)
                                {
                                 barrier();
                                }
                              }
                             if((false))
                              {
                               if((false))
                                barrier();
                               barrier();
                              }
                            }
                           else
                            {
                            }
                           barrier();
                           if((((injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                          }
                        }
                      }
                     if((false))
                      {
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       do
                        {
                         for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                          {
                           if((false))
                            barrier();
                          }
                         barrier();
                        }
                       while(false);
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                      }
                     if((false))
                      {
                       for(int _injected_loop_counter = 1; _injected_loop_counter > (0 ^ (0 >> (int(1)))); _injected_loop_counter --)
                        {
                         if(((injectionSwitch.x > injectionSwitch.y)))
                          {
                           if((false))
                            barrier();
                          }
                         else
                          {
                           do
                            {
                             if((((injectionSwitch.x > injectionSwitch.y))))
                              barrier();
                            }
                           while((bool(bool(false))));
                           if((false))
                            {
                             if(false)
                              {
                              }
                             else
                              {
                               if(false)
                                {
                                }
                               else
                                {
                                 barrier();
                                }
                              }
                            }
                           if((false))
                            barrier();
                           if((((bool(bvec3(true, true, ((injectionSwitch.x < injectionSwitch.y))))) && true)))
                            {
                             do
                              {
                               if(true)
                                {
                                 if(((injectionSwitch.x > injectionSwitch.y)))
                                  {
                                  }
                                 else
                                  {
                                   if((false))
                                    barrier();
                                  }
                                 barrier();
                                }
                               else
                                {
                                 if((false))
                                  barrier();
                                }
                              }
                             while(false);
                            }
                           else
                            {
                            }
                           if((false))
                            {
                             do
                              {
                               barrier();
                               if((((injectionSwitch.x > injectionSwitch.y))))
                                barrier();
                              }
                             while(false);
                             if((((false) || false)))
                              barrier();
                            }
                          }
                        }
                      }
                     do
                      {
                       if((false))
                        {
                         if((false))
                          {
                           if(false)
                            {
                            }
                           else
                            {
                             barrier();
                            }
                          }
                         if((false))
                          {
                           for(int _injected_loop_counter = 1; _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
                            {
                             barrier();
                            }
                          }
                         if(true)
                          {
                           if((false))
                            barrier();
                          }
                         else
                          {
                          }
                         for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
                          {
                           if((false))
                            barrier();
                           if((false))
                            {
                             do
                              {
                               if(((bool(bvec2(false, true)))))
                                barrier();
                              }
                             while(false);
                             barrier();
                            }
                           if((false))
                            barrier();
                           barrier();
                          }
                        }
                      }
                     while(((injectionSwitch.x > injectionSwitch.y)));
                    }
                  }
                 else
                  {
                  }
                }
               else
                {
                }
              }
             while(false);
             if((false))
              barrier();
             if((false))
              barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = 1; _injected_loop_counter != (0 << (int(8))); _injected_loop_counter --)
              {
               barrier();
              }
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         while(false);
        }
       else
        {
        }
       for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            barrier();
           do
            {
             if((false))
              barrier();
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
           barrier();
          }
        }
      }
     if((false))
      barrier();
    }
   else
    {
     if((false))
      barrier();
    }
  }
 else
  {
  }
 if(((injectionSwitch.x < injectionSwitch.y)))
  {
   if((false))
    {
     if(false)
      {
      }
     else
      {
       if((false))
        barrier();
       if((false))
        {
         for(int _injected_loop_counter = ((0 | 0) << (int(1))); _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if(false)
                {
                }
               else
                {
                 barrier();
                }
              }
             barrier();
            }
           barrier();
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
      }
     do
      {
       if((false))
        barrier();
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
        {
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
           if((false))
            barrier();
           if(false)
            {
             if((false))
              barrier();
            }
           else
            {
             if((false))
              {
               if((false))
                {
                 if(((false || (((injectionSwitch.x > injectionSwitch.y))))))
                  barrier();
                 if(((injectionSwitch.x < injectionSwitch.y)))
                  {
                   barrier();
                  }
                 else
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                }
               if(((injectionSwitch.x < injectionSwitch.y)))
                {
                 if((false))
                  barrier();
                }
               else
                {
                 if((false))
                  barrier();
                }
               if(true)
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if((false))
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     if(false)
                      {
                       if((false))
                        {
                         do
                          {
                           barrier();
                          }
                         while(false);
                        }
                      }
                     else
                      {
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       barrier();
                      }
                    }
                   do
                    {
                     do
                      {
                       if(true)
                        {
                         if(true)
                          {
                           if((false))
                            barrier();
                           if((false))
                            {
                             if(false)
                              {
                              }
                             else
                              {
                               barrier();
                              }
                            }
                          }
                         else
                          {
                          }
                        }
                       else
                        {
                        }
                      }
                     while(false);
                    }
                   while(((injectionSwitch.x > injectionSwitch.y)));
                   barrier();
                  }
                }
               else
                {
                }
               do
                {
                 if((false))
                  barrier();
                }
               while(false);
               if((false))
                barrier();
               if((false))
                {
                 if((false))
                  barrier();
                 for(int _injected_loop_counter = 0; _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
                  {
                   for(int _injected_loop_counter = (1 ^ 1); _injected_loop_counter < (1 | 0); _injected_loop_counter ++)
                    {
                     for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                      {
                       barrier();
                      }
                    }
                   if(false)
                    {
                     if((false))
                      barrier();
                    }
                   else
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(((injectionSwitch.x < injectionSwitch.y)))
                        {
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                         barrier();
                        }
                       else
                        {
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                        }
                      }
                    }
                  }
                }
               if((false))
                barrier();
               if(((injectionSwitch.x > injectionSwitch.y)))
                {
                }
               else
                {
                 if((false))
                  barrier();
                 if((false))
                  barrier();
                 if(true)
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    {
                     if((false))
                      barrier();
                     barrier();
                    }
                  }
                 else
                  {
                  }
                 if((false))
                  barrier();
                 barrier();
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if((false))
                  barrier();
                }
               if((false))
                barrier();
              }
            }
          }
         else
          {
           if((false))
            {
             if(true)
              {
               barrier();
              }
             else
              {
              }
            }
           if((false))
            {
             if(true)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               do
                {
                 if(((injectionSwitch.x > injectionSwitch.y)))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                 if((false))
                  barrier();
                }
               while(false);
               for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
                {
                 if((false))
                  {
                   do
                    {
                     barrier();
                    }
                   while(false);
                   if((false))
                    barrier();
                  }
                }
              }
             else
              {
               if(false)
                {
                }
               else
                {
                 if((((false) || false)))
                  barrier();
                }
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((false))
              {
               for(int _injected_loop_counter = 1; _injected_loop_counter != ((0) | (0)); _injected_loop_counter --)
                {
                 if((false))
                  barrier();
                }
               barrier();
              }
             if(false)
              {
              }
             else
              {
               if((false))
                barrier();
              }
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           do
            {
             if((false))
              {
               for(int _injected_loop_counter = (1 ^ 0); _injected_loop_counter > 0; _injected_loop_counter --)
                {
                 for(int _injected_loop_counter = 1; _injected_loop_counter > (0 ^ 0); _injected_loop_counter --)
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    {
                     do
                      {
                       barrier();
                      }
                     while(((injectionSwitch.x > injectionSwitch.y)));
                    }
                  }
                 barrier();
                }
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           while(false);
           if((false))
            barrier();
           barrier();
          }
         if((false))
          barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
       do
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(false);
       if((false))
        barrier();
       if(true)
        {
         if((false))
          barrier();
        }
       else
        {
        }
      }
     do
      {
       do
        {
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           do
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           while(false);
          }
        }
       while(false);
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if((false))
        {
         if(true)
          {
           do
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
          }
         else
          {
          }
        }
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if((! (! (false))))
          {
          }
         else
          {
           if((false))
            barrier();
          }
         if((false))
          barrier();
         do
          {
           if((false))
            barrier();
          }
         while(false);
         if((false))
          barrier();
         barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
         if((false))
          {
           if(true)
            {
             barrier();
            }
           else
            {
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
      }
     else
      {
       if(((! (! ((bool(bool(((injectionSwitch.x > injectionSwitch.y))))))))))
        barrier();
       if(false)
        {
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if((false))
        {
         for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
          {
           if((false))
            barrier();
          }
         barrier();
        }
      }
     for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != 1; _injected_loop_counter ++)
      {
       if((false))
        barrier();
      }
     if(false)
      {
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
  }
 else
  {
   if(true)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 for(int _injected_loop_counter = (0 ^ 0); _injected_loop_counter < 1; _injected_loop_counter ++)
  {
   if((false))
    barrier();
  }
 if((false))
  barrier();
 if((false))
  {
   for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
    {
     if(false)
      {
      }
     else
      {
       if(true)
        {
         if(true)
          {
           for(int _injected_loop_counter = 1; _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if((false))
            barrier();
           barrier();
          }
         else
          {
          }
         if((false))
          barrier();
        }
       else
        {
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   if((false))
    {
     if(false)
      {
      }
     else
      {
       barrier();
      }
    }
  }
 if((false))
  barrier();
 do
  {
   if((false))
    {
     for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
      {
       if((false))
        barrier();
      }
     do
      {
       do
        {
         if((false))
          barrier();
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
       if(false)
        {
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if((false))
          barrier();
        }
       if((false))
        barrier();
      }
     while(false);
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((! (! (true))))
          {
           barrier();
          }
         else
          {
          }
        }
       if((false))
        {
         if(true)
          {
           barrier();
          }
         else
          {
          }
        }
       if((false || (true)))
        {
         if(true)
          {
           if((false))
            {
             for(int _injected_loop_counter = 1; _injected_loop_counter != (0 >> ((~ (~ (int(4)))))); _injected_loop_counter --)
              {
               barrier();
              }
            }
           if((false))
            barrier();
           if((false))
            {
             if((false))
              barrier();
             barrier();
            }
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               for(int _injected_loop_counter = (1 ^ 0); _injected_loop_counter > (0 | (0 >> (int(3)))); _injected_loop_counter --)
                {
                 barrier();
                }
              }
             barrier();
            }
          }
        }
       else
        {
        }
       barrier();
      }
     barrier();
    }
  }
 while(false);
 if((false))
  {
   do
    {
     barrier();
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if(((injectionSwitch.x > injectionSwitch.y)))
  {
  }
 else
  {
   for(int _injected_loop_counter = 0; _injected_loop_counter != ((1 << (int(7))) >> (int(7))); _injected_loop_counter ++)
    {
     if((false))
      barrier();
     for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
      {
       if((false))
        barrier();
       do
        {
         for(int _injected_loop_counter = ((1 << (((int(3)) | (int(3))))) >> (int(3))); _injected_loop_counter > (0 << (int(5))); _injected_loop_counter --)
          {
           if(true)
            {
             if(false)
              {
              }
             else
              {
               if(true)
                {
                 for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                  {
                   do
                    {
                     for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
                      {
                       if((false))
                        barrier();
                      }
                    }
                   while(false);
                   if((false))
                    barrier();
                   if(false)
                    {
                    }
                   else
                    {
                     for(int _injected_loop_counter = 1; _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
                      {
                       if((false))
                        {
                         if((false))
                          {
                           if(true)
                            {
                             barrier();
                            }
                           else
                            {
                            }
                          }
                         barrier();
                        }
                       do
                        {
                         if((false))
                          {
                           if((false))
                            barrier();
                           do
                            {
                             if(((injectionSwitch.x < injectionSwitch.y)))
                              {
                               barrier();
                              }
                             else
                              {
                              }
                            }
                           while(false);
                          }
                        }
                       while(false);
                      }
                     if((false))
                      {
                       if((false))
                        barrier();
                       barrier();
                      }
                     if(((injectionSwitch.x < injectionSwitch.y)))
                      {
                       do
                        {
                         if(((false || ((! (! (false)))))))
                          barrier();
                         if((bool(bvec4(true, true, false, true))))
                          {
                           do
                            {
                             if(true)
                              {
                               if(((injectionSwitch.x > injectionSwitch.y)))
                                {
                                }
                               else
                                {
                                 if((false))
                                  {
                                   if((false))
                                    barrier();
                                   barrier();
                                  }
                                 if(true)
                                  {
                                   if((false))
                                    barrier();
                                   if((false))
                                    {
                                     if((false))
                                      {
                                       do
                                        {
                                         if((false))
                                          barrier();
                                        }
                                       while(false);
                                       barrier();
                                      }
                                     barrier();
                                    }
                                   if((false))
                                    {
                                     if((((injectionSwitch.x > injectionSwitch.y))))
                                      {
                                       for(int _injected_loop_counter = 0; _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
                                        {
                                         barrier();
                                        }
                                      }
                                     if((((injectionSwitch.x > injectionSwitch.y))))
                                      barrier();
                                     do
                                      {
                                       if((((injectionSwitch.x > injectionSwitch.y))))
                                        barrier();
                                      }
                                     while(((injectionSwitch.x > injectionSwitch.y)));
                                     if((false))
                                      barrier();
                                     for(int _injected_loop_counter = 1; _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
                                      {
                                       barrier();
                                      }
                                    }
                                   if((false))
                                    barrier();
                                   if((false))
                                    barrier();
                                   if(((true && (false))))
                                    {
                                     if((false))
                                      barrier();
                                     barrier();
                                    }
                                   if(((injectionSwitch.x < injectionSwitch.y)))
                                    {
                                     if(((injectionSwitch.x < injectionSwitch.y)))
                                      {
                                       if((false))
                                        {
                                         do
                                          {
                                           if((false))
                                            barrier();
                                           do
                                            {
                                             if((false))
                                              barrier();
                                             if((false))
                                              barrier();
                                             if(true)
                                              {
                                               if((((injectionSwitch.x > injectionSwitch.y))))
                                                {
                                                 if((false))
                                                  {
                                                   if(true)
                                                    {
                                                     barrier();
                                                    }
                                                   else
                                                    {
                                                    }
                                                  }
                                                 if(false)
                                                  {
                                                  }
                                                 else
                                                  {
                                                   barrier();
                                                  }
                                                }
                                              }
                                             else
                                              {
                                              }
                                            }
                                           while(((injectionSwitch.x > injectionSwitch.y)));
                                          }
                                         while(false);
                                         if((false))
                                          {
                                           if((((injectionSwitch.x > injectionSwitch.y))))
                                            barrier();
                                           for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
                                            {
                                             if((((false) && true)))
                                              barrier();
                                            }
                                           if(false)
                                            {
                                            }
                                           else
                                            {
                                             barrier();
                                            }
                                           if(((bool(bvec3(false, true, false)))))
                                            barrier();
                                          }
                                         for(int _injected_loop_counter = (0 << (int(4))); _injected_loop_counter != 1; _injected_loop_counter ++)
                                          {
                                           for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
                                            {
                                             if((false))
                                              barrier();
                                             if(((injectionSwitch.x < injectionSwitch.y)))
                                              {
                                               do
                                                {
                                                 if((((injectionSwitch.x > injectionSwitch.y))))
                                                  barrier();
                                                }
                                               while(false);
                                               if((false))
                                                barrier();
                                               do
                                                {
                                                 do
                                                  {
                                                   if((false))
                                                    barrier();
                                                   barrier();
                                                  }
                                                 while(false);
                                                }
                                               while((bool(bool(false))));
                                              }
                                             else
                                              {
                                               if((false))
                                                {
                                                 if((((injectionSwitch.x > injectionSwitch.y))))
                                                  barrier();
                                                 barrier();
                                                }
                                               if((((injectionSwitch.x > injectionSwitch.y))))
                                                {
                                                 if(((injectionSwitch.x < injectionSwitch.y)))
                                                  {
                                                   if(true)
                                                    {
                                                     if((((injectionSwitch.x > injectionSwitch.y))))
                                                      {
                                                       do
                                                        {
                                                         if(true)
                                                          {
                                                           if((((injectionSwitch.x > injectionSwitch.y))))
                                                            barrier();
                                                           do
                                                            {
                                                             barrier();
                                                            }
                                                           while(((injectionSwitch.x > injectionSwitch.y)));
                                                          }
                                                         else
                                                          {
                                                          }
                                                        }
                                                       while(((injectionSwitch.x > injectionSwitch.y)));
                                                       if((((injectionSwitch.x > injectionSwitch.y))))
                                                        barrier();
                                                      }
                                                     do
                                                      {
                                                       if((false))
                                                        barrier();
                                                      }
                                                     while(false);
                                                     if(false)
                                                      {
                                                       if((false))
                                                        {
                                                         if((((injectionSwitch.x > injectionSwitch.y))))
                                                          barrier();
                                                         barrier();
                                                        }
                                                      }
                                                     else
                                                      {
                                                       if(true)
                                                        {
                                                         if((false))
                                                          {
                                                           if((false))
                                                            barrier();
                                                           barrier();
                                                          }
                                                         barrier();
                                                        }
                                                       else
                                                        {
                                                        }
                                                      }
                                                    }
                                                   else
                                                    {
                                                    }
                                                   if((((injectionSwitch.x > injectionSwitch.y))))
                                                    barrier();
                                                   do
                                                    {
                                                     if((false))
                                                      barrier();
                                                     if((((injectionSwitch.x > injectionSwitch.y))))
                                                      barrier();
                                                    }
                                                   while(false);
                                                   if((false))
                                                    {
                                                     if((false))
                                                      barrier();
                                                     barrier();
                                                    }
                                                  }
                                                 else
                                                  {
                                                   if((((injectionSwitch.x > injectionSwitch.y))))
                                                    barrier();
                                                   if((false))
                                                    barrier();
                                                  }
                                                }
                                              }
                                             if((false))
                                              barrier();
                                            }
                                          }
                                         if(true)
                                          {
                                           if((false))
                                            {
                                             if((((injectionSwitch.x > injectionSwitch.y))))
                                              {
                                               if((false))
                                                barrier();
                                               if(false)
                                                {
                                                }
                                               else
                                                {
                                                 if((false))
                                                  {
                                                   if((((injectionSwitch.x > injectionSwitch.y))))
                                                    {
                                                     for(int _injected_loop_counter = (1 ^ 0); _injected_loop_counter > (int((injectionSwitch.x)) & (8236)); _injected_loop_counter --)
                                                      {
                                                       barrier();
                                                      }
                                                    }
                                                   barrier();
                                                  }
                                                }
                                               if((false))
                                                barrier();
                                               for(int _injected_loop_counter = 1; _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
                                                {
                                                 do
                                                  {
                                                   barrier();
                                                  }
                                                 while(false);
                                                 if((((injectionSwitch.x > injectionSwitch.y))))
                                                  barrier();
                                                }
                                              }
                                             barrier();
                                            }
                                          }
                                         else
                                          {
                                          }
                                         for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                                          {
                                           if((false))
                                            {
                                             do
                                              {
                                               if(((injectionSwitch.x < injectionSwitch.y)))
                                                {
                                                 barrier();
                                                }
                                               else
                                                {
                                                }
                                              }
                                             while(false);
                                            }
                                          }
                                        }
                                       if((false))
                                        barrier();
                                       for(int _injected_loop_counter = 0; _injected_loop_counter != (1 & 1); _injected_loop_counter ++)
                                        {
                                         if((((injectionSwitch.x > injectionSwitch.y))))
                                          barrier();
                                        }
                                       if((false))
                                        barrier();
                                      }
                                     else
                                      {
                                       if((false))
                                        barrier();
                                      }
                                     if(true)
                                      {
                                       if((false))
                                        barrier();
                                      }
                                     else
                                      {
                                      }
                                    }
                                   else
                                    {
                                     if((false))
                                      barrier();
                                    }
                                   if((false))
                                    barrier();
                                  }
                                 else
                                  {
                                   if((false))
                                    barrier();
                                   if((false))
                                    {
                                     if(false)
                                      {
                                      }
                                     else
                                      {
                                       barrier();
                                      }
                                    }
                                   if((((false) || false)))
                                    barrier();
                                  }
                                 if((((injectionSwitch.x > injectionSwitch.y))))
                                  {
                                   for(int _injected_loop_counter = (0 | int((injectionSwitch.x))); _injected_loop_counter < 1; _injected_loop_counter ++)
                                    {
                                     barrier();
                                    }
                                  }
                                }
                               do
                                {
                                 if((((injectionSwitch.x > injectionSwitch.y))))
                                  barrier();
                                 if((((injectionSwitch.x > injectionSwitch.y))))
                                  {
                                   do
                                    {
                                     if((false))
                                      barrier();
                                     barrier();
                                    }
                                   while(false);
                                  }
                                }
                               while(false);
                              }
                             else
                              {
                               if((((injectionSwitch.x > injectionSwitch.y))))
                                {
                                 if((false))
                                  barrier();
                                 barrier();
                                }
                              }
                            }
                           while(false);
                          }
                         else
                          {
                           if((false))
                            barrier();
                          }
                        }
                       while(((injectionSwitch.x > injectionSwitch.y)));
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                      }
                     else
                      {
                       if((false))
                        barrier();
                      }
                    }
                   if((false))
                    barrier();
                   for(int _injected_loop_counter = 0; _injected_loop_counter < (1 & 1); _injected_loop_counter ++)
                    {
                     if(((! (! (false)))))
                      {
                       if((false))
                        barrier();
                       for(int _injected_loop_counter = (0 | 0); _injected_loop_counter < 1; _injected_loop_counter ++)
                        {
                         if((false))
                          {
                           for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
                            {
                             barrier();
                            }
                          }
                         barrier();
                        }
                      }
                    }
                  }
                }
               else
                {
                }
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                barrier();
               if(false)
                {
                 if((false))
                  barrier();
                 if((false))
                  barrier();
                }
               else
                {
                 if((false))
                  barrier();
                 if((false))
                  {
                   if(((injectionSwitch.x < injectionSwitch.y)))
                    {
                     if(((injectionSwitch.x > injectionSwitch.y)))
                      {
                      }
                     else
                      {
                       barrier();
                      }
                    }
                   else
                    {
                    }
                  }
                 barrier();
                }
              }
            }
           else
            {
             if(((bool(bvec3(((injectionSwitch.x > injectionSwitch.y)), false, ((injectionSwitch.x < injectionSwitch.y)))))))
              {
               if((false))
                barrier();
               barrier();
              }
            }
          }
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
      }
    }
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
