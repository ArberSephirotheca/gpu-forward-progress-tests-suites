#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec4 GLF_merged4_0_1_16_1_1_11_2_1_14_3_1_12next_virtual_gidsubgroup_idworkgroup_baseworkgroup_id;
 uint subgroup_id = gl_SubgroupID;
 (0u | ((((0u + (GLF_merged4_0_1_16_1_1_11_2_1_14_3_1_12next_virtual_gidsubgroup_idworkgroup_baseworkgroup_id.y = (clamp((min(subgroup_id, subgroup_id)), ((min(0u, (~ (~ (0u))))) ^ (subgroup_id)), subgroup_id))))) << (((min(((((1u << (uint(0u))) >> (uint(0u))) * (uvec3(101158u, 105987u, (max(73822u, 73822u))).y))) ^ 0u, ((((1u << (uint(0u))) >> (uint(0u))) * (uvec3(101158u, 105987u, (max(73822u, 73822u))).y))) ^ 0u))) & (0u ^ (0u))))));
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = (((((0u | ((max((false ? (subgroup_id) : ((bool(bvec4(false, ((false) || false), true, false))) ? (GLF_merged4_0_1_16_1_1_11_2_1_14_3_1_12next_virtual_gidsubgroup_idworkgroup_baseworkgroup_id.y) : gl_WorkGroupSize.x)), (((false ? (subgroup_id) : (false ? (GLF_merged4_0_1_16_1_1_11_2_1_14_3_1_12next_virtual_gidsubgroup_idworkgroup_baseworkgroup_id.y) : gl_WorkGroupSize.x))) | ((false ? (subgroup_id) : (false ? (GLF_merged4_0_1_16_1_1_11_2_1_14_3_1_12next_virtual_gidsubgroup_idworkgroup_baseworkgroup_id.y) : ((min((((injectionSwitch.x < ((injectionSwitch) * vec2(1.0, 1.0)).y)) ? (~ (~ (gl_WorkGroupSize))) : ((uvec3(38539u, 137330u, 15718u) * subgroup_id))), (((injectionSwitch.x < ((injectionSwitch) * vec2(1.0, 1.0)).y)) ? (~ (~ (gl_WorkGroupSize))) : ((uvec3(38539u, 137330u, 15718u) * subgroup_id)))))).x)))))))))) | (((max(((false ? (GLF_merged4_0_1_16_1_1_11_2_1_14_3_1_12next_virtual_gidsubgroup_idworkgroup_baseworkgroup_id.y) : gl_WorkGroupSize.x)), ((false ? (max((GLF_merged4_0_1_16_1_1_11_2_1_14_3_1_12next_virtual_gidsubgroup_idworkgroup_baseworkgroup_id.y), (GLF_merged4_0_1_16_1_1_11_2_1_14_3_1_12next_virtual_gidsubgroup_idworkgroup_baseworkgroup_id.y))) : ((gl_WorkGroupSize) | (gl_WorkGroupSize)).x))))) ^ 0u)));
 uint workgroup_id = gl_WorkGroupID.x;
 GLF_merged4_0_1_16_1_1_11_2_1_14_3_1_12next_virtual_gidsubgroup_idworkgroup_baseworkgroup_id.w = workgroup_id;
 uint workgroup_base = workgroup_size * ((GLF_merged4_0_1_16_1_1_11_2_1_14_3_1_12next_virtual_gidsubgroup_idworkgroup_baseworkgroup_id) / uvec4((injectionSwitch.y), (injectionSwitch.y), (injectionSwitch.y), (injectionSwitch.y))).w;
 GLF_merged4_0_1_16_1_1_11_2_1_14_3_1_12next_virtual_gidsubgroup_idworkgroup_baseworkgroup_id.z = workgroup_base;
 uint virtual_gid = (~ (~ (GLF_merged4_0_1_16_1_1_11_2_1_14_3_1_12next_virtual_gidsubgroup_idworkgroup_baseworkgroup_id.z))) + GLF_merged4_0_1_16_1_1_11_2_1_14_3_1_12next_virtual_gidsubgroup_idworkgroup_baseworkgroup_id.y * subgroup_size + ((true ? subgroup_local_id : ((num_workgroup))));
 uint next_virtual_gid = (clamp((min(GLF_merged4_0_1_16_1_1_11_2_1_14_3_1_12next_virtual_gidsubgroup_idworkgroup_baseworkgroup_id.z + GLF_merged4_0_1_16_1_1_11_2_1_14_3_1_12next_virtual_gidsubgroup_idworkgroup_baseworkgroup_id.y * subgroup_size, GLF_merged4_0_1_16_1_1_11_2_1_14_3_1_12next_virtual_gidsubgroup_idworkgroup_baseworkgroup_id.z + (min(GLF_merged4_0_1_16_1_1_11_2_1_14_3_1_12next_virtual_gidsubgroup_idworkgroup_baseworkgroup_id, (~ (~ ((((~ (~ ((((min(true ? GLF_merged4_0_1_16_1_1_11_2_1_14_3_1_12next_virtual_gidsubgroup_idworkgroup_baseworkgroup_id : (GLF_merged4_0_1_16_1_1_11_2_1_14_3_1_12next_virtual_gidsubgroup_idworkgroup_baseworkgroup_id), ((true ? GLF_merged4_0_1_16_1_1_11_2_1_14_3_1_12next_virtual_gidsubgroup_idworkgroup_baseworkgroup_id : (GLF_merged4_0_1_16_1_1_11_2_1_14_3_1_12next_virtual_gidsubgroup_idworkgroup_baseworkgroup_id)) | uvec4(0u, 0u, 0u, 0u)))))))))) | ((~ (~ (((true ? GLF_merged4_0_1_16_1_1_11_2_1_14_3_1_12next_virtual_gidsubgroup_idworkgroup_baseworkgroup_id : (GLF_merged4_0_1_16_1_1_11_2_1_14_3_1_12next_virtual_gidsubgroup_idworkgroup_baseworkgroup_id))))))))))))).y * subgroup_size)), (((uint(uvec3(((GLF_merged4_0_1_16_1_1_11_2_1_14_3_1_12next_virtual_gidsubgroup_idworkgroup_baseworkgroup_id) >> uvec4(0u, 0u, 0u, 0u)).z, 1u, 0u))) - 0u)) + GLF_merged4_0_1_16_1_1_11_2_1_14_3_1_12next_virtual_gidsubgroup_idworkgroup_baseworkgroup_id.y * ((subgroup_size) | (subgroup_size)), GLF_merged4_0_1_16_1_1_11_2_1_14_3_1_12next_virtual_gidsubgroup_idworkgroup_baseworkgroup_id.z + ((uint(uvec3(~ (~ (((false ? (GLF_merged4_0_1_16_1_1_11_2_1_14_3_1_12next_virtual_gidsubgroup_idworkgroup_baseworkgroup_id) : GLF_merged4_0_1_16_1_1_11_2_1_14_3_1_12next_virtual_gidsubgroup_idworkgroup_baseworkgroup_id)).y * subgroup_size)), 1u, 1u)))))) + (((clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)) + 1) % subgroup_size);
 GLF_merged4_0_1_16_1_1_11_2_1_14_3_1_12next_virtual_gidsubgroup_idworkgroup_baseworkgroup_id.x = next_virtual_gid;
 ((((((buf[virtual_gid] = 1) >> 0u) ^ 0u) / 1u)));
 if((((injectionSwitch.x < injectionSwitch.y)) && ((((bool(((bool((bool(bvec3((! (! ((bool(bvec2((((max(subgroup_local_id, (min(subgroup_local_id, subgroup_local_id))))) >> 0u) + 1 < subgroup_size, true)))))), true, (true && (true))))))) || false)))) && true))))
  {
   int i = (((0 | (0))) | 0);
   ((buf[GLF_merged4_0_1_16_1_1_11_2_1_14_3_1_12next_virtual_gidsubgroup_idworkgroup_baseworkgroup_id.x] = 2) ^ (0u >> (uint(4u))));
  }
 else
  {
   buf[GLF_merged4_0_1_16_1_1_11_2_1_14_3_1_12next_virtual_gidsubgroup_idworkgroup_baseworkgroup_id.x] = (max((0 ^ (2)), 2));
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
