#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  return;
 if((false))
  barrier();
 if((false))
  return;
 if((((((injectionSwitch) * mat2(1.0)).x > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((true && (bool((bvec3(bvec4(bvec3((! (! (false))), true, true), true)))))))))
    barrier();
   return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   if((false))
    return;
   if(((((((! (! (injectionSwitch.x > injectionSwitch.y)))) && ((injectionSwitch.x < injectionSwitch.y)))))))
    {
     if((((((injectionSwitch.x > injectionSwitch.y))) && true)))
      {
       if((false))
        barrier();
       barrier();
      }
     return;
    }
   barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 if((false))
  {
   if((false))
    {
     if((true && (((false || (false))))))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
     return;
    }
   if((false))
    barrier();
   if((((false) || false)))
    return;
   if((((false) || false)))
    {
     if((false))
      barrier();
     barrier();
    }
   if((((false)) || false))
    {
     if((false))
      barrier();
     if((false))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
   if(((! (! (false)))))
    return;
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if((false))
  return;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 if((((false) || false)))
  {
   if((false))
    return;
   barrier();
  }
 if((false))
  {
   if((false))
    return;
   return;
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(((((clamp((((min(injectionSwitch.x, injectionSwitch.x))) / 1.0), (((min(injectionSwitch.x, injectionSwitch.x))) / 1.0), (((min(injectionSwitch.x, injectionSwitch.x))) / 1.0))) > injectionSwitch.y))))
  {
   if((! (! (((((min((0.0 + (injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y)))))))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 uint workgroup_id = (~ (~ ((uvec3(1u, 1u, 1u) * (((gl_WorkGroupID) / uvec3((injectionSwitch.y), ((clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y), (injectionSwitch.y)))))))).x;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_base = workgroup_size * workgroup_id;
 if((false))
  barrier();
 if((false))
  {
   if(((false || ((false || (false))))))
    return;
   barrier();
  }
 if(((bool(bvec3((bool(bvec3(false, false, false))), false, false)))))
  return;
 uint virtual_gid = ((workgroup_base + subgroup_id * subgroup_size + subgroup_local_id) | ((min(((workgroup_base + subgroup_id * subgroup_size + subgroup_local_id) | (workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)), workgroup_base + subgroup_id * subgroup_size + subgroup_local_id))));
 if((false))
  barrier();
 uint next_virtual_gid = workgroup_base + ((subgroup_id) << 0u) * subgroup_size + ((((clamp((clamp(((((0u >> (uint(2u))) ^ ((max((((subgroup_local_id + 1)) << 0u), (subgroup_local_id + 1))))) % subgroup_size) << 0u), ((((((0u >> (uint(2u))) ^ ((max((((subgroup_local_id + 1)) << 0u), (subgroup_local_id + 1))))) % subgroup_size) << 0u)) | (((((0u >> (uint(2u))) ^ ((max((((subgroup_local_id + 1)) << 0u), (subgroup_local_id + 1))))) % subgroup_size) << 0u))), ((((0u >> (uint(2u))) ^ ((max((((subgroup_local_id + 1)) << 0u), (subgroup_local_id + 1))))) % subgroup_size) << 0u))), (0u + (((0u >> (uint(2u))) ^ (((~ (~ (max((((((true ? ((max((true ? (~ (~ (subgroup_local_id + 1))) : (workgroup_id)), (true ? (~ (~ (subgroup_local_id + 1))) : (workgroup_id))))) : (min(subgroup_local_id, num_workgroup)))))) << ((0u) / 1u)), (((false ? (workgroup_base) : subgroup_local_id + 1)))))))))))) % subgroup_size, ((0u >> (((((uint(2u)) - 0u))) << 0u)) ^ ((((max((((((subgroup_local_id) | 0u) + 1)) << 0u), ((max(uint(uint((subgroup_local_id + 1))), uint(uint((subgroup_local_id + 1))))))))) - 0u))) % subgroup_size))) + (0u << (uint(8u)))));
 if(((((mix(vec2((injectionSwitch)[0], ((true ? (injectionSwitch)[1] : (fma(0.7, 5.7, - 805.504))))), vec2((17.64), (- 2.7)), bvec2(false, false))).x > injectionSwitch.y))))
  return;
 if((true && (((! (! (((injectionSwitch.x > injectionSwitch.y)) || ((false)))))))))
  barrier();
 if(((! (((! (false)) && true)))))
  {
   if((false))
    {
     if((false))
      return;
     if((false))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    return;
   if((false))
    {
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   barrier();
  }
 if((bool(bvec4((! (! ((false)))), ((injectionSwitch.x < injectionSwitch.y)), false, true))))
  barrier();
 if((((false || ((false))) || false)))
  barrier();
 if((false))
  return;
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 buf[virtual_gid] = ((min(min(1, 1), min(1, 1))));
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   return;
   if((false))
    barrier();
   if((false))
    return;
  }
 if((false))
  return;
 if((false))
  return;
 if((false || ((! (! ((max(subgroup_local_id + 1, subgroup_local_id + 1)) < subgroup_size))))))
  {
   if((false))
    barrier();
   if((false))
    return;
   if((true && ((false))))
    {
     if((false))
      barrier();
     if((false))
      {
       if((false))
        return;
       return;
      }
     return;
    }
   int i = 0;
   if((false))
    {
     if((bool(bvec3((false), false, true))))
      return;
     if((bool((! (! (((bool(((((((vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y)))) && true))) && true)))))))
      {
       if((false))
        {
         if(((((! (! (bool(bvec4(((! (! (false))) || false), true, true, true)))))))))
          return;
         barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((false))
        {
         if(((((max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
          barrier();
         return;
         if((false))
          return;
        }
       barrier();
      }
     if((((false)) || ((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        return;
       barrier();
      }
     barrier();
     if((false))
      {
       if((false))
        barrier();
       barrier();
       if((false))
        return;
      }
     if((true && ((false))))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
    }
   buf[next_virtual_gid] = 2;
   if((! ((false || (! ((false || ((false || ((false)))))))))))
    barrier();
  }
 else
  {
   if((false))
    return;
   if((false))
    barrier();
   if(((((clamp(((injectionSwitch.x) / 1.0), injectionSwitch.x, ((false ? (- 5.5) : injectionSwitch.x)))) > (vec2((clamp((mix(float((8.3)), float(injectionSwitch[(int(ivec3(0, 1, 0)))]), bool(true))), (mix(float((8.3)), float(injectionSwitch[(int(ivec3(0, 1, 0)))]), bool(true))), (mix(float((8.3)), float(injectionSwitch[(int(ivec3(0, 1, 0)))]), bool(true))))), ((injectionSwitch[1]) / 1.0))).y))))
    {
     if(((bool(bool(false)))))
      barrier();
     return;
     if((false))
      return;
    }
   if((false))
    {
     if((((false || (bool(bvec4(false, false, false, false)))))))
      barrier();
     return;
    }
   ((buf[next_virtual_gid] = 2) * 1u);
   if((false))
    {
     if((false))
      barrier();
     return;
    }
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((((injectionSwitch.x > injectionSwitch.y))) || false)))
      barrier();
     barrier();
    }
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
     if((false))
      return;
     if((((false) && true)))
      barrier();
    }
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if(((! (! (false)))))
    barrier();
  }
 if((! (! ((((injectionSwitch.x > injectionSwitch.y)))))))
  barrier();
 if((false))
  return;
 if((false))
  return;
 if((true && ((false))))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
   if((((injectionSwitch.x > (clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        return;
       barrier();
      }
     barrier();
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  return;
 if((! ((false || (((! ((false || ((((bool(bvec2((((((injectionSwitch.x > injectionSwitch.y) || false))) && true), false))))))))) || false))))))
  return;
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
