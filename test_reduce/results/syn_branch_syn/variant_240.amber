#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

struct _GLF_struct_55 {
 mat4x3 _f0;
 ivec3 _f1;
} ;

struct _GLF_struct_54 {
 int _f0;
 bvec4 _f1;
 mat4x2 _f2;
 uvec3 _f3;
} ;

struct _GLF_struct_53 {
 bvec2 _f0;
 ivec4 _f1;
} ;

struct _GLF_struct_56 {
 mat2x3 _f0;
 _GLF_struct_53 _f1;
 float _f2;
 _GLF_struct_54 _f3;
 mat2 _f4;
 _GLF_struct_55 _f5;
} ;

struct _GLF_struct_52 {
 vec2 _f0;
} ;

struct _GLF_struct_57 {
 uint workgroup_size;
 _GLF_struct_52 _f0;
 _GLF_struct_56 _f1;
} ;

struct _GLF_struct_49 {
 int _f0;
 mat3x4 _f1;
 mat2x3 _f2;
 ivec3 _f3;
 mat2x4 _f4;
} ;

struct _GLF_struct_48 {
 bvec2 _f0;
 mat4x3 _f1;
 ivec4 _f2;
} ;

struct _GLF_struct_47 {
 mat3x4 _f0;
 mat3x2 _f1;
 uvec4 _f2;
 uint _f3;
} ;

struct _GLF_struct_46 {
 mat2x4 _f0;
} ;

struct _GLF_struct_50 {
 _GLF_struct_46 _f0;
 _GLF_struct_47 _f1;
 _GLF_struct_48 _f2;
 _GLF_struct_49 _f3;
 vec4 _f4;
 int _f5;
} ;

struct _GLF_struct_44 {
 float _f0;
 uvec4 _f1;
} ;

struct _GLF_struct_45 {
 _GLF_struct_44 _f0;
 mat2x4 _f1;
 mat2x4 _f2;
} ;

struct _GLF_struct_51 {
 uvec4 GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size;
 mat3x2 _f0;
 _GLF_struct_45 _f1;
 _GLF_struct_50 _f2;
} ;

struct _GLF_struct_41 {
 ivec3 _f0;
 uvec4 _f1;
 uvec3 _f2;
} ;

struct _GLF_struct_42 {
 mat4 _f0;
 _GLF_struct_41 _f1;
} ;

struct _GLF_struct_39 {
 vec2 _f0;
 uvec2 _f1;
 ivec2 _f2;
 mat4 _f3;
 ivec2 _f4;
 mat4x3 _f5;
 uvec4 _f6;
} ;

struct _GLF_struct_38 {
 bool _f0;
 ivec4 _f1;
 vec3 _f2;
 vec3 _f3;
 uvec2 GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size;
 uint _f4;
} ;

struct _GLF_struct_40 {
 _GLF_struct_38 _f0;
 mat4 _f1;
 _GLF_struct_39 _f2;
 mat2 _f3;
 uvec3 _f4;
 uvec4 _f5;
 uvec4 _f6;
} ;

struct _GLF_struct_43 {
 mat2x3 _f0;
 mat2x4 _f1;
 bool _f2;
 _GLF_struct_40 _f3;
 uvec2 _f4;
 _GLF_struct_42 _f5;
} ;

struct _GLF_struct_36 {
 mat3x4 _f0;
 int i;
 mat3x2 _f1;
} ;

struct _GLF_struct_34 {
 bvec2 _f0;
 ivec2 _f1;
 mat4 _f2;
 bool _f3;
} ;

struct _GLF_struct_33 {
 vec2 _f0;
 vec4 _f1;
 mat2x4 _f2;
 vec2 _f3;
 ivec3 _f4;
 float _f5;
} ;

struct _GLF_struct_32 {
 mat3x2 _f0;
} ;

struct _GLF_struct_35 {
 uvec2 _f0;
 bvec2 _f1;
 _GLF_struct_32 _f2;
 _GLF_struct_33 _f3;
 _GLF_struct_34 _f4;
} ;

struct _GLF_struct_37 {
 _GLF_struct_35 _f0;
 _GLF_struct_36 _f1;
 mat2x4 _f2;
} ;

struct _GLF_struct_29 {
 ivec3 _f0;
 uvec2 _f1;
} ;

struct _GLF_struct_30 {
 _GLF_struct_29 _f0;
 ivec3 _f1;
 mat2x3 _f2;
 vec4 _f3;
 mat2x3 _f4;
 float _f5;
} ;

struct _GLF_struct_28 {
 bvec4 _f0;
} ;

struct _GLF_struct_26 {
 vec2 _f0;
 uint _f1;
 mat4x2 _f2;
 uint _f3;
 bool _f4;
} ;

struct _GLF_struct_25 {
 bvec4 _f0;
} ;

struct _GLF_struct_27 {
 _GLF_struct_25 _f0;
 float _f1;
 _GLF_struct_26 _f2;
 vec2 _f3;
 float _f4;
} ;

struct _GLF_struct_24 {
 mat2x3 _f0;
} ;

struct _GLF_struct_22 {
 mat4 _f0;
} ;

struct _GLF_struct_23 {
 _GLF_struct_22 _f0;
 vec2 _f1;
} ;

struct _GLF_struct_31 {
 _GLF_struct_23 _f0;
 _GLF_struct_24 _f1;
 mat4 _f2;
 _GLF_struct_27 _f3;
 uint workgroup_base;
 _GLF_struct_28 _f4;
 int _f5;
 _GLF_struct_30 _f6;
} ;

struct _GLF_struct_19 {
 vec4 _f0;
 ivec4 _f1;
 mat2 _f2;
 vec2 _f3;
 mat3x4 _f4;
} ;

struct _GLF_struct_18 {
 vec3 _f0;
 int _f1;
 mat2x4 _f2;
} ;

struct _GLF_struct_20 {
 _GLF_struct_18 _f0;
 _GLF_struct_19 _f1;
} ;

struct _GLF_struct_16 {
 mat3x4 _f0;
 mat4x2 _f1;
 vec2 _f2;
 vec3 _f3;
 uint _f4;
 mat2x4 _f5;
 mat3x4 _f6;
} ;

struct _GLF_struct_15 {
 vec4 _f0;
} ;

struct _GLF_struct_17 {
 bvec2 _f0;
 _GLF_struct_15 _f1;
 mat3 _f2;
 _GLF_struct_16 _f3;
 mat3x4 _f4;
} ;

struct _GLF_struct_13 {
 mat4x2 _f0;
 mat2 _f1;
 bvec3 _f2;
 uvec3 _f3;
 mat4 _f4;
 bvec4 _f5;
 mat3x2 _f6;
} ;

struct _GLF_struct_12 {
 bool _f0;
} ;

struct _GLF_struct_11 {
 mat4 _f0;
} ;

struct _GLF_struct_14 {
 _GLF_struct_11 _f0;
 int _f1;
 _GLF_struct_12 _f2;
 uvec4 _f3;
 _GLF_struct_13 _f4;
 bvec4 _f5;
 ivec4 _f6;
} ;

struct _GLF_struct_9 {
 uvec4 _f0;
 mat2x3 _f1;
 mat2 _f2;
 mat3x2 _f3;
} ;

struct _GLF_struct_10 {
 uint workgroup_id;
 mat4x3 _f0;
 _GLF_struct_9 _f1;
} ;

struct _GLF_struct_21 {
 _GLF_struct_10 _f0;
 ivec3 _f1;
 vec4 _f2;
 _GLF_struct_14 _f3;
 _GLF_struct_17 _f4;
 _GLF_struct_20 _f5;
} ;

struct _GLF_struct_6 {
 mat3 _f0;
} ;

struct _GLF_struct_5 {
 mat2 _f0;
} ;

struct _GLF_struct_4 {
 uint _f0;
} ;

struct _GLF_struct_3 {
 mat2x3 _f0;
 bvec4 _f1;
} ;

struct _GLF_struct_2 {
 bvec4 _f0;
} ;

struct _GLF_struct_7 {
 _GLF_struct_2 _f0;
 ivec2 _f1;
 _GLF_struct_3 _f2;
 _GLF_struct_4 _f3;
 _GLF_struct_5 _f4;
 _GLF_struct_6 _f5;
} ;

struct _GLF_struct_1 {
 uint _f0;
 uint subgroup_local_id;
} ;

struct _GLF_struct_0 {
 ivec2 _f0;
} ;

struct _GLF_struct_8 {
 _GLF_struct_0 _f0;
 mat2x4 _f1;
 _GLF_struct_1 _f2;
 _GLF_struct_7 _f3;
 mat4 _f4;
 ivec4 _f5;
 mat3 _f6;
} ;

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((false))
  return;
 if(((injectionSwitch.x < injectionSwitch.y)))
  {
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     if(false)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
        }
      }
     else
      {
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
              }
             else
              {
               if(((true) && true))
                {
                 if((false))
                  break;
                 return;
                }
               else
                {
                }
              }
             if((false))
              {
               if((false))
                {
                 if(false)
                  {
                  }
                 else
                  {
                   return;
                  }
                }
               break;
              }
             if((false))
              return;
            }
           while(false);
          }
        }
      }
     if((false))
      return;
    }
   else
    {
    }
   if((false))
    return;
  }
 else
  {
   if((false))
    {
     if((false))
      return;
     do
      {
       do
        {
         if((false))
          break;
         if((false))
          return;
        }
       while(false);
       barrier();
      }
     while(false);
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     for(int _injected_loop_counter = (0 >> (int(8))); _injected_loop_counter < 1; _injected_loop_counter ++)
      {
       return;
      }
    }
  }
 if((false))
  {
   if((((true && (((injectionSwitch.x < injectionSwitch.y))))) && ((injectionSwitch.x < injectionSwitch.y))))
    {
     if(false)
      {
      }
     else
      {
       for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
        {
         if((false))
          {
           if((false))
            {
             if((false))
              break;
             return;
            }
           barrier();
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             barrier();
            }
          }
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      barrier();
    }
   else
    {
     if((false))
      return;
    }
   if(false)
    {
    }
   else
    {
     if((false))
      {
       if((false))
        {
         for(int _injected_loop_counter = 0; _injected_loop_counter != ((1 << (int(6))) >> (int(6))); _injected_loop_counter ++)
          {
           return;
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((false))
        barrier();
       if(true)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
       else
        {
         if((false))
          return;
        }
      }
    }
   if((false))
    return;
   if(true)
    {
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if(((! ((bool(bool(! (false))))))))
        return;
       barrier();
      }
     else
      {
       if((false))
        return;
      }
    }
   else
    {
     if((false))
      return;
    }
  }
 if((false))
  {
   if((false))
    {
     if(true)
      {
       return;
      }
     else
      {
      }
    }
   if((false))
    barrier();
   if((false))
    return;
   if((false))
    barrier();
   barrier();
   if((false))
    return;
  }
 if(((! (! (false)))))
  {
   if((false))
    return;
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     return;
    }
   if((false))
    {
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     for(int _injected_loop_counter = (0 >> (int(1))); _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
       return;
      }
     for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > 0; _injected_loop_counter --)
      {
       if((false))
        barrier();
      }
    }
   return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
  }
 _GLF_struct_43 _GLF_struct_replacement_43;
 _GLF_struct_51 _GLF_struct_replacement_51;
 uvec4 GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_14next_virtual_gidnum_workgroupsubgroup_idworkgroup_size;
 if((false))
  {
   if((false))
    {
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       return;
      }
     else
      {
      }
    }
   if((false))
    return;
   if(false)
    {
     if(((true && (false))))
      barrier();
     do
      {
       if(true)
        {
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
           return;
          }
         if((false))
          {
           if((false))
            {
             do
              {
               barrier();
              }
             while(((injectionSwitch.x > injectionSwitch.y)));
            }
           break;
          }
        }
       else
        {
         if((false))
          {
           if(true)
            {
             if((false))
              continue;
             for(int _injected_loop_counter = ((1 << (int(1))) >> (int(1))); _injected_loop_counter > 0; _injected_loop_counter --)
              {
               if((false))
                {
                 if((((false) || false)))
                  barrier();
                 barrier();
                }
               barrier();
              }
            }
           else
            {
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
           break;
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     while(false);
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      return;
     do
      {
       if((false))
        barrier();
       if(((! (! ((true && (false)))))))
        return;
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
    }
   else
    {
     if((((((injectionSwitch.x > injectionSwitch.y))) && true)))
      return;
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
        }
       barrier();
      }
     if((false))
      return;
     if((false))
      {
       if((false))
        {
         if((false))
          {
           if((false))
            return;
           barrier();
          }
         if(true)
          {
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             if((false))
              {
               for(int _injected_loop_counter = (0 << (int(1))); _injected_loop_counter != ((((1 << ((0 + (int(4))))) >> (int(4))) << ((int((min(ivec4(int(6), 0, 1, 1), ivec4(int(6), 0, 1, 1))))))) >> (int(6))); _injected_loop_counter ++)
                {
                 barrier();
                }
              }
             if(true)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                return;
               if((false))
                {
                 if(false)
                  {
                  }
                 else
                  {
                   return;
                  }
                }
              }
             else
              {
              }
            }
           else
            {
            }
           if((false))
            return;
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
         if(false)
          {
          }
         else
          {
           do
            {
             if((false))
              return;
             if((false))
              {
               if((((false) && true)))
                {
                 if((false))
                  return;
                 barrier();
                }
               for(int _injected_loop_counter = ((1 << ((int(ivec4(int(2), 1, 0, 0))))) >> (int(2))); _injected_loop_counter > 0; _injected_loop_counter --)
                {
                 do
                  {
                   return;
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    break;
                   if((false))
                    return;
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 while(((injectionSwitch.x > injectionSwitch.y)));
                 if((false))
                  {
                   if((false))
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      break;
                     continue;
                    }
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      continue;
                     if((false))
                      barrier();
                     return;
                    }
                   if((false))
                    break;
                   break;
                   if((false))
                    barrier();
                   if((false))
                    return;
                  }
                 if((false))
                  continue;
                 if(((bool(bvec3(false, false, true)))))
                  break;
                }
               if((false))
                break;
               if((false))
                barrier();
              }
            }
           while(false);
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = 0; _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
            {
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((false))
                  barrier();
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 barrier();
                }
               if((false))
                continue;
               break;
              }
             barrier();
            }
           if((false))
            return;
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((false))
        {
         if((false))
          {
           do
            {
             barrier();
            }
           while(false);
          }
         for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != 0; _injected_loop_counter --)
          {
           return;
          }
        }
       if(true)
        {
         if((false))
          {
           if((false))
            return;
           barrier();
          }
        }
       else
        {
         if((((((injectionSwitch.x > injectionSwitch.y))) || false)))
          return;
        }
       return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if((false))
          return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
        {
         if(false)
          {
           if((false))
            break;
           if((false))
            continue;
           if((false))
            continue;
           if(((true && (false))))
            barrier();
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
              {
               if(((injectionSwitch.x < injectionSwitch.y)))
                {
                 return;
                }
               else
                {
                }
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 continue;
                }
              }
            }
          }
        }
       if(true)
        {
         for(int _injected_loop_counter = ((1 << (int(3))) >> (int(3))); _injected_loop_counter > 0; _injected_loop_counter --)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
           if((false))
            barrier();
           if(false)
            {
            }
           else
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       else
        {
        }
       if((false))
        return;
       if((false))
        barrier();
      }
    }
   for(int _injected_loop_counter = ((((1 << (int(7))) >> (int(7))) << (int(7))) >> (int(7))); _injected_loop_counter != (0 << (int(2))); _injected_loop_counter --)
    {
     if(false)
      {
      }
     else
      {
       if((false))
        {
         if(true)
          {
           return;
          }
         else
          {
          }
         if((false))
          break;
        }
       if((false))
        {
         if((((false) && true)))
          break;
         barrier();
        }
      }
    }
   barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    return;
   if((false))
    {
     if((false))
      barrier();
     return;
    }
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           barrier();
          }
        }
       return;
      }
    }
   else
    {
    }
   if(((bool(bool(false)))))
    return;
  }
 if((false))
  {
   if((false))
    barrier();
   if((false))
    return;
   if(true)
    {
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
         if((false))
          return;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((false))
        return;
       barrier();
      }
    }
   else
    {
    }
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     return;
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       if((false))
        barrier();
      }
    }
   return;
   if((false))
    return;
  }
 if((false))
  {
   if((false))
    {
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
       if((false))
        {
         if((false))
          return;
         return;
        }
       if((false))
        barrier();
      }
     else
      {
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(((! ((bool(bvec3(! (((injectionSwitch.x > injectionSwitch.y))), false, true)))))))
    {
     do
      {
       for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
        {
         barrier();
        }
      }
     while(false);
    }
   if((false))
    {
     do
      {
       return;
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
    }
   if(false)
    {
    }
   else
    {
     barrier();
    }
  }
 uint subgroup_id = gl_SubgroupID;
 if((false))
  return;
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if((false))
  return;
 _GLF_struct_replacement_51.GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size.z = subgroup_id;
 GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_14next_virtual_gidnum_workgroupsubgroup_idworkgroup_size.z = _GLF_struct_replacement_51.GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size.z;
 do
  {
   if((false))
    barrier();
   if((false))
    break;
   do
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if((false))
          {
           if((false))
            {
             do
              {
               barrier();
              }
             while(false);
            }
           barrier();
          }
         if((false))
          continue;
         return;
        }
       else
        {
        }
       if((false))
        barrier();
      }
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
       for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
        {
         if(true)
          {
           return;
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              {
               if((false))
                continue;
               barrier();
              }
             return;
            }
          }
         else
          {
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          break;
         continue;
         if((false))
          break;
        }
       if((false))
        {
         if((false))
          break;
         return;
        }
      }
    }
   while(false);
   if((false))
    return;
   if((false))
    return;
  }
 while(false);
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((! (! ((! (! (true)))))))
    {
     if(false)
      {
       if((((false) && true)))
        {
         if(true)
          {
           return;
          }
         else
          {
           if((false))
            return;
          }
        }
      }
     else
      {
       barrier();
       if((false))
        return;
      }
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if(false)
      {
      }
     else
      {
       do
        {
         if((false))
          return;
         if((false))
          {
           if((false))
            break;
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
             if((false))
              barrier();
            }
           else
            {
             if((false))
              barrier();
             do
              {
               return;
              }
             while(((injectionSwitch.x > injectionSwitch.y)));
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
      }
    }
   if((((false) || false)))
    {
     if((false))
      return;
     barrier();
    }
  }
 if((false))
  return;
 if(true)
  {
   if((false))
    barrier();
   if((false))
    {
     do
      {
       barrier();
      }
     while(false);
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      {
       if((false))
        return;
       return;
      }
     if((false))
      {
       if((false))
        return;
       if((false))
        return;
       if((false))
        barrier();
       return;
      }
     barrier();
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != 0; _injected_loop_counter --)
          {
           return;
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       for(int _injected_loop_counter = ((1 << (int(3))) >> (int(3))); _injected_loop_counter != 0; _injected_loop_counter --)
        {
         barrier();
        }
      }
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        return;
       barrier();
      }
    }
  }
 else
  {
  }
 for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      break;
     do
      {
       return;
      }
     while(((false) && true));
    }
  }
 if((false))
  barrier();
 if((false))
  return;
 if((false))
  barrier();
 if(((injectionSwitch.x > injectionSwitch.y)))
  {
  }
 else
  {
   do
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((! (! (((injectionSwitch.x > injectionSwitch.y))))))
        {
         if(((((bool(bvec3(((injectionSwitch.x > injectionSwitch.y)), false, false))) || false))))
          barrier();
        }
       else
        {
         if((false))
          return;
         return;
        }
      }
    }
   while(false);
  }
 do
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(true)
        {
         for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
          {
           if((false))
            {
             if((false))
              continue;
             if((false))
              {
               do
                {
                 barrier();
                }
               while(false);
              }
             if((false))
              {
               if((false))
                {
                 if((false))
                  {
                   do
                    {
                     barrier();
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      break;
                    }
                   while(false);
                  }
                 if((false))
                  return;
                 return;
                 if((false))
                  break;
                 if(((bool((bvec2(bvec2(bvec2(false, true))))))))
                  {
                   for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                    {
                     if((false))
                      return;
                     return;
                    }
                  }
                }
               if(true)
                {
                 return;
                }
               else
                {
                 if((false))
                  barrier();
                }
              }
             if((false))
              return;
             barrier();
            }
          }
        }
       else
        {
        }
       if((false))
        {
         if((false))
          barrier();
         if((false))
          continue;
         if(((true && (false))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           return;
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         return;
        }
       if(false)
        {
         if((false))
          barrier();
        }
       else
        {
         if((false))
          return;
         return;
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
        }
      }
     if(true)
      {
       if((false))
        {
         if((false))
          continue;
         return;
        }
      }
     else
      {
      }
     if((((false) && ((injectionSwitch.x < injectionSwitch.y)))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
       return;
      }
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         return;
        }
      }
     if(((false || (false))))
      return;
     do
      {
       if((false))
        barrier();
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
     if((false))
      continue;
    }
  }
 while(false);
 uint subgroup_size = gl_SubgroupSize;
 if(((injectionSwitch.x < injectionSwitch.y)))
  {
   for(int _injected_loop_counter = ((1 << (int(3))) >> (int(3))); _injected_loop_counter != 0; _injected_loop_counter --)
    {
     if(true)
      {
       if((false))
        return;
      }
     else
      {
       if((false))
        return;
      }
     if((false))
      barrier();
     if((false))
      barrier();
     if(((! (! (false)))))
      break;
     if(true)
      {
       _GLF_struct_replacement_51.GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size.w = subgroup_size;
       if((false))
        continue;
      }
     else
      {
      }
    }
  }
 else
  {
   if((((false) && ((injectionSwitch.x < injectionSwitch.y)))))
    return;
  }
 if((false))
  return;
 if((false))
  {
   if((false))
    return;
   do
    {
     return;
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  return;
 if((false))
  return;
 do
  {
   if(false)
    {
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         barrier();
        }
      }
     if((false))
      return;
     if((false))
      return;
     if((false))
      break;
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       if((false))
        return;
       if((false))
        {
         do
          {
           do
            {
             if(true)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if((false))
                return;
               if((false))
                barrier();
               if((false))
                break;
               barrier();
              }
             else
              {
               if(false)
                {
                 if((false))
                  continue;
                }
               else
                {
                 if((false))
                  {
                   if((false))
                    {
                     if((false))
                      break;
                     barrier();
                    }
                   return;
                  }
                }
               if((false))
                {
                 if((false))
                  barrier();
                 return;
                }
              }
             if((false))
              continue;
            }
           while(false);
          }
         while(false);
         if((false))
          {
           if(true)
            {
             if((false))
              return;
             return;
             if((false))
              return;
            }
           else
            {
            }
          }
        }
       if((false))
        break;
      }
    }
  }
 while(false);
 _GLF_struct_8 _GLF_struct_replacement_8 = _GLF_struct_8(_GLF_struct_0(ivec2(1)), mat2x4(1.0), _GLF_struct_1(1u, gl_SubgroupInvocationID), _GLF_struct_7(_GLF_struct_2(bvec4(true)), ivec2(1), _GLF_struct_3(mat2x3(1.0), bvec4(true)), _GLF_struct_4(1u), _GLF_struct_5(mat2(1.0)), _GLF_struct_6(mat3(1.0))), mat4(1.0), ivec4(1), mat3(1.0));
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if(false)
    {
    }
   else
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     return;
    }
  }
 if((false))
  return;
 uint num_workgroup = gl_NumWorkGroups.x;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 _GLF_struct_replacement_51.GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size.y = num_workgroup;
 GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_14next_virtual_gidnum_workgroupsubgroup_idworkgroup_size.y = _GLF_struct_replacement_51.GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size.y;
 if(true)
  {
   if((false))
    {
     if((false))
      {
       if(true)
        {
         if((false))
          barrier();
         if((false))
          return;
        }
       else
        {
        }
       if((false))
        return;
       return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     do
      {
       if((false))
        {
         if((false))
          continue;
         continue;
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
        }
       if((false))
        return;
       return;
      }
     while(false);
     if((false))
      return;
     if((false))
      barrier();
    }
  }
 else
  {
   if((false))
    return;
  }
 if((false))
  {
   if(false)
    {
    }
   else
    {
     return;
    }
  }
 if((((false) && true)))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((true && ((false || ((false || (false)))))))
    {
    }
   else
    {
     if((false))
      return;
     barrier();
    }
  }
 if((false))
  {
   if((false))
    {
     do
      {
       if(((bool(bvec3(false, false, false)))))
        continue;
       return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
      }
     while(false);
     if((false))
      barrier();
    }
   if(((false) || false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      return;
    }
   else
    {
     if((false))
      {
       do
        {
         return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((! (! (true))))
        {
         return;
        }
       else
        {
        }
      }
    }
   if(true)
    {
     if((false))
      {
       if(true)
        {
         barrier();
        }
       else
        {
        }
      }
     if((((false || (true))) && true))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
          {
           barrier();
          }
        }
      }
     else
      {
       if((false))
        return;
      }
    }
   else
    {
     if((false))
      return;
     do
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
      }
     while(false);
    }
   if(false)
    {
    }
   else
    {
     barrier();
    }
   if((false))
    return;
   do
    {
     if((false))
      {
       do
        {
         return;
         if((false))
          break;
        }
       while(false);
      }
    }
   while((false || (((injectionSwitch.x > injectionSwitch.y)))));
   if((false))
    barrier();
  }
 do
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      continue;
     continue;
     if((false))
      break;
    }
   if((false))
    {
     if(false)
      {
      }
     else
      {
       if((false))
        return;
       if((false))
        return;
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
         continue;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          {
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
             barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
            }
           else
            {
            }
           if((false))
            return;
          }
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              {
               if((false))
                return;
               if((false))
                {
                 do
                  {
                   barrier();
                  }
                 while(((injectionSwitch.x > injectionSwitch.y)));
                }
               barrier();
              }
             return;
            }
           if(((! (! (false)))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           if(true)
            {
             return;
            }
           else
            {
            }
           if((false))
            continue;
          }
         if(true)
          {
           if((false))
            {
             if((false))
              continue;
             barrier();
            }
          }
         else
          {
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((bool((bvec2(bvec4(bvec2((! (! (false))), true), false, true))))))
            {
            }
           else
            {
             barrier();
            }
          }
         if((false))
          {
           if((false))
            continue;
           if((false))
            return;
           barrier();
          }
         barrier();
         if(((true && (false))))
          return;
         if(((! (! ((true && (false)))))))
          barrier();
         if((false))
          continue;
        }
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if((false))
      {
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         if((false))
          return;
         return;
         do
          {
           if((false))
            return;
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
         if((false))
          continue;
        }
       else
        {
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if((false))
        {
         if((false))
          barrier();
         return;
        }
       if((false))
        break;
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           return;
           if((false))
            continue;
           if((false))
            barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
       else
        {
         if((false))
          continue;
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
        }
      }
     else
      {
      }
    }
  }
 while(false);
 _GLF_struct_57 _GLF_struct_replacement_57 = _GLF_struct_57(gl_WorkGroupSize.x, _GLF_struct_52(vec2(1.0)), _GLF_struct_56(mat2x3(1.0), _GLF_struct_53(bvec2(true), ivec4(1)), 1.0, _GLF_struct_54(1, bvec4(true), mat4x2(1.0), uvec3(1u)), mat2(1.0), _GLF_struct_55(mat4x3(1.0), ivec3(1))));
 if((false))
  return;
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
   if(true)
    {
     if((false))
      return;
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 _GLF_struct_replacement_43._f3._f0.GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.y = _GLF_struct_replacement_57.workgroup_size;
 for(int _injected_loop_counter = ((1 << (int(7))) >> (int(7))); _injected_loop_counter != 0; _injected_loop_counter --)
  {
   GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_14next_virtual_gidnum_workgroupsubgroup_idworkgroup_size.w = _GLF_struct_replacement_43._f3._f0.GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.y;
   do
    {
     if((false))
      barrier();
    }
   while(false);
   if(((false || (false))))
    barrier();
  }
 if((false))
  {
   if((false))
    {
     if((false))
      {
       if((false))
        barrier();
       do
        {
         return;
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
      }
     if((false))
      {
       if((false))
        barrier();
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
       return;
      }
     return;
    }
   return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  return;
 _GLF_struct_21 _GLF_struct_replacement_21 = _GLF_struct_21(_GLF_struct_10(gl_WorkGroupID.x, mat4x3(1.0), _GLF_struct_9(uvec4(1u), mat2x3(1.0), mat2(1.0), mat3x2(1.0))), ivec3(1), vec4(1.0), _GLF_struct_14(_GLF_struct_11(mat4(1.0)), 1, _GLF_struct_12(true), uvec4(1u), _GLF_struct_13(mat4x2(1.0), mat2(1.0), bvec3(true), uvec3(1u), mat4(1.0), bvec4(true), mat3x2(1.0)), bvec4(true), ivec4(1)), _GLF_struct_17(bvec2(true), _GLF_struct_15(vec4(1.0)), mat3(1.0), _GLF_struct_16(mat3x4(1.0), mat4x2(1.0), vec2(1.0), vec3(1.0), 1u, mat2x4(1.0), mat3x4(1.0)), mat3x4(1.0)), _GLF_struct_20(_GLF_struct_18(vec3(1.0), 1, mat2x4(1.0)), _GLF_struct_19(vec4(1.0), ivec4(1), mat2(1.0), vec2(1.0), mat3x4(1.0))));
 if(true)
  {
   if((false))
    {
     if((false))
      return;
     return;
    }
  }
 else
  {
  }
 if(true)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    barrier();
   if((false))
    {
     if((false))
      return;
     if((false))
      barrier();
     return;
    }
   if((! (! (true))))
    {
     if((false))
      {
       if((false))
        return;
       if(false)
        {
        }
       else
        {
         if((false))
          return;
         barrier();
        }
      }
     if((false))
      {
       for(int _injected_loop_counter = 0; _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
        {
         return;
        }
      }
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
       if(((((! (! (false)))) || false)))
        barrier();
       barrier();
      }
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        return;
       return;
      }
     if((false))
      {
       for(int _injected_loop_counter = 1; _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
        {
         barrier();
        }
       if(((true && (((injectionSwitch.x > injectionSwitch.y))))))
        return;
      }
    }
  }
 else
  {
  }
 do
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       break;
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
      }
     return;
    }
   if((false))
    barrier();
   if((false))
    return;
  }
 while(false);
 if((((false) || false)))
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         barrier();
        }
       while(false);
      }
     if(true)
      {
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            return;
           barrier();
          }
         return;
        }
      }
     else
      {
      }
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         return;
        }
       if((false))
        return;
      }
     if((false))
      return;
    }
   if((bool(bool(false))))
    {
    }
   else
    {
     for(int _injected_loop_counter = (0 >> (int(3))); _injected_loop_counter < (0 ^ 1); _injected_loop_counter ++)
      {
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       do
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            continue;
           return;
          }
         for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
          {
           if((false))
            barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
           continue;
          }
        }
       while(false);
       for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         for(int _injected_loop_counter = (int((injectionSwitch.y)) & 1); _injected_loop_counter > 0; _injected_loop_counter --)
          {
           return;
          }
        }
      }
    }
   if(false)
    {
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if((false))
    {
     if((false))
      {
       if(false)
        {
        }
       else
        {
         barrier();
        }
      }
     if(false)
      {
      }
     else
      {
       return;
      }
    }
  }
 do
  {
   if((false))
    return;
  }
 while(((injectionSwitch.x > injectionSwitch.y)));
 if((false))
  return;
 if(true)
  {
   if((false))
    {
     if((false))
      return;
     if(false)
      {
       if((false))
        return;
       if((false))
        barrier();
      }
     else
      {
       if((false))
        {
         if(((! (! (((false) || false))))))
          return;
         return;
        }
       barrier();
       if((false))
        return;
       if((false))
        return;
      }
    }
  }
 else
  {
   if(true)
    {
     if((false))
      return;
    }
   else
    {
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   for(int _injected_loop_counter = 1; _injected_loop_counter > (0 >> (int(7))); _injected_loop_counter --)
    {
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         barrier();
        }
      }
     if((false))
      return;
     for(int _injected_loop_counter = 0; _injected_loop_counter != (((1 << (int(6))) >> (int(6))) & 1); _injected_loop_counter ++)
      {
       if((false))
        break;
       do
        {
         return;
        }
       while(false);
      }
    }
   if((false))
    return;
  }
 _GLF_struct_31 _GLF_struct_replacement_31 = _GLF_struct_31(_GLF_struct_23(_GLF_struct_22(mat4(1.0)), vec2(1.0)), _GLF_struct_24(mat2x3(1.0)), mat4(1.0), _GLF_struct_27(_GLF_struct_25(bvec4(true)), 1.0, _GLF_struct_26(vec2(1.0), 1u, mat4x2(1.0), 1u, true), vec2(1.0), 1.0), GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_14next_virtual_gidnum_workgroupsubgroup_idworkgroup_size.w * _GLF_struct_replacement_21._f0.workgroup_id, _GLF_struct_28(bvec4(true)), 1, _GLF_struct_30(_GLF_struct_29(ivec3(1), uvec2(1u)), ivec3(1), mat2x3(1.0), vec4(1.0), mat2x3(1.0), 1.0));
 if((false))
  {
   for(int _injected_loop_counter = ((1 << (int(2))) >> ((0 + (((int(2)) ^ 0))))); _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
    {
     barrier();
    }
  }
 if(false)
  {
  }
 else
  {
   for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          continue;
         barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           if((false))
            return;
           for(int _injected_loop_counter = 0; _injected_loop_counter != (int((injectionSwitch.x)) ^ (1)); _injected_loop_counter ++)
            {
             return;
            }
          }
        }
      }
     else
      {
       if((false))
        return;
      }
    }
   if((false))
    return;
   if((false))
    {
     if((false))
      barrier();
     if(true)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
       if((false))
        return;
      }
     else
      {
      }
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     if((false))
      barrier();
    }
   if((false))
    {
     if((false))
      return;
     barrier();
    }
   if((false))
    return;
   for(int _injected_loop_counter = 0; _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(false)
        {
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              return;
             barrier();
            }
           barrier();
          }
         if((false))
          {
           for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
            {
             barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
            }
           if((false))
            continue;
          }
         do
          {
           for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != 0; _injected_loop_counter --)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
            }
          }
         while(false);
        }
       else
        {
         if((false))
          {
           if((false))
            return;
           do
            {
             return;
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
          }
         return;
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
       barrier();
      }
    }
   if((false))
    return;
  }
 if((false))
  {
   do
    {
     do
      {
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
      }
     while(false);
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
  }
 if(true)
  {
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
  }
 else
  {
  }
 uint virtual_gid = _GLF_struct_replacement_31.workgroup_base + GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_14next_virtual_gidnum_workgroupsubgroup_idworkgroup_size.z * _GLF_struct_replacement_51.GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size.w + _GLF_struct_replacement_8._f2.subgroup_local_id;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 for(int _injected_loop_counter = ((max(0, 0)) ^ 1); _injected_loop_counter > 0; _injected_loop_counter --)
  {
   do
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      break;
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
           if((false))
            barrier();
           barrier();
          }
         return;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         break;
        }
       if((false))
        {
         if((false))
          barrier();
         break;
        }
       break;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        {
         if((false))
          break;
         if(true)
          {
           if((false))
            barrier();
           if((false))
            barrier();
           return;
           if((false))
            break;
          }
         else
          {
           if((false))
            return;
           if((false))
            break;
          }
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
         if((false))
          continue;
        }
       barrier();
      }
     if((false))
      {
       if((false))
        return;
       break;
      }
     if(true)
      {
       for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != 1; _injected_loop_counter ++)
        {
         if((false))
          break;
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             if((false))
              barrier();
             return;
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
          }
         if((false))
          barrier();
         if((false))
          return;
        }
      }
     else
      {
      }
     if((false))
      break;
     if((false))
      {
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         return;
         if((false))
          continue;
        }
       else
        {
        }
      }
     if((false))
      barrier();
     if(false)
      {
      }
     else
      {
       if(((false || (false))))
        break;
       do
        {
         if((false))
          {
           if((false))
            {
             if((false))
              break;
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                continue;
               break;
              }
             if((false))
              continue;
             if((false))
              continue;
             barrier();
            }
           do
            {
             if((false))
              {
               if((false))
                return;
               return;
              }
            }
           while(false);
           if((false))
            break;
           barrier();
          }
        }
       while(false);
       if((false))
        break;
      }
     if(false)
      {
       if((false))
        break;
      }
     else
      {
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if((false))
          break;
         if((false))
          barrier();
         if((false))
          continue;
         if((false))
          barrier();
         if((false))
          barrier();
        }
       else
        {
        }
      }
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
       if((false))
        {
         if((false))
          barrier();
         break;
        }
       if((((false) || false)))
        break;
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if(false)
          {
           if((false))
            break;
           if((false))
            return;
          }
         else
          {
           if((false))
            break;
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            barrier();
           if((false))
            barrier();
          }
         if((false))
          break;
         if((false))
          barrier();
         return;
        }
      }
     else
      {
       if((false))
        barrier();
       if((false))
        return;
       if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
        {
         for(int _injected_loop_counter = (((1 | 0)) >> 0); _injected_loop_counter > (0 & ivec3(56824, - 43387, - 52046).r); _injected_loop_counter --)
          {
           barrier();
          }
         if((false))
          return;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          break;
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
       _GLF_struct_replacement_43._f3._f0.GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.x = virtual_gid;
      }
     if((false))
      break;
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       break;
      }
     if((false))
      barrier();
    }
   while(false);
   if((false))
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     break;
    }
  }
 do
  {
   if((false))
    {
     if(false)
      {
       if((false))
        return;
      }
     else
      {
       return;
       if((false))
        return;
      }
    }
  }
 while(false);
 if(true)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if(false)
    {
     if(((bool(bvec3(((injectionSwitch.x > injectionSwitch.y)), true, false)))))
      barrier();
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     if((false))
      barrier();
    }
   else
    {
     if(((bool(bvec4(((false) || false), false, false, false)))))
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
          {
           if((false))
            break;
           return;
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            return;
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             return;
            }
           else
            {
            }
          }
         if((false))
          barrier();
         if((false))
          {
           if(((bool(bvec4(false, true, true, true)))))
            barrier();
           if((false))
            return;
           barrier();
           if((false))
            barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            {
             if((false))
              return;
             if((false))
              return;
             if((false))
              return;
             barrier();
            }
           return;
          }
         if((false))
          barrier();
        }
       do
        {
         if(((((injectionSwitch.x > injectionSwitch.y)) || (false))))
          {
           if((false))
            break;
           if(false)
            {
            }
           else
            {
             return;
             if((false))
              continue;
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if(false)
              {
              }
             else
              {
               return;
              }
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         if((false))
          return;
         if((false))
          barrier();
         if((false))
          continue;
        }
       while(false);
       if((false))
        barrier();
       if((((false) || false)))
        return;
       return;
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
        }
       if((false))
        barrier();
      }
    }
  }
 else
  {
   if((false))
    return;
  }
 if(true)
  {
   if((false))
    return;
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         barrier();
         if((false))
          return;
        }
       else
        {
        }
      }
     return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   do
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      continue;
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
  }
 else
  {
   if((false))
    {
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if(true)
        {
         if(true)
          {
           if(false)
            {
            }
           else
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               do
                {
                 if((false))
                  barrier();
                }
               while(false);
               if((false))
                return;
               return;
               if((false))
                barrier();
              }
            }
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             return;
            }
           barrier();
          }
         else
          {
           do
            {
             if((false))
              barrier();
            }
           while(false);
           if(true)
            {
             if((false))
              return;
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
              }
             else
              {
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  return;
                 barrier();
                }
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
            }
          }
         if((false))
          return;
        }
       else
        {
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           if((false))
            return;
           if((false))
            {
             if((false))
              return;
             barrier();
            }
          }
         if((false))
          return;
        }
      }
     else
      {
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       return;
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((false))
        {
         if((false))
          return;
         barrier();
        }
       if((false))
        barrier();
      }
     if((false))
      barrier();
     if(false)
      {
      }
     else
      {
       if((false))
        return;
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 for(int _injected_loop_counter = 0; _injected_loop_counter != (1 ^ int((injectionSwitch.x))); _injected_loop_counter ++)
  {
   do
    {
     if((false))
      {
       if((false))
        {
         if((false))
          continue;
         barrier();
        }
       if((false))
        break;
       return;
      }
     if((false))
      return;
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
  }
 if((false))
  {
   do
    {
     return;
     if((false))
      break;
    }
   while(false);
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(true)
  {
   if((false))
    barrier();
   if((false))
    return;
   if((false))
    return;
   do
    {
     for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
      {
       if(true)
        {
         if((false))
          barrier();
        }
       else
        {
        }
       if((false))
        barrier();
       if((false))
        {
         if((false))
          continue;
         if((false))
          barrier();
         for(int _injected_loop_counter = 1; _injected_loop_counter != (0 << (int(1))); _injected_loop_counter --)
          {
           if((false))
            {
             if((false))
              {
               if((false))
                continue;
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                continue;
               if((((injectionSwitch.x > injectionSwitch.y))))
                break;
               break;
              }
             if((false))
              continue;
             return;
             if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
              barrier();
             if(((bool(bool(false)))))
              continue;
             if((false))
              {
               if((false))
                return;
               barrier();
              }
             if((false))
              break;
            }
           if((false))
            barrier();
           if((false))
            return;
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
           if((false))
            break;
           do
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((false))
              break;
            }
           while(false);
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
           break;
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if((false))
          barrier();
         continue;
         if((false))
          break;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            {
             if((false))
              break;
             continue;
            }
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
             if((false))
              barrier();
             return;
            }
          }
         if((false))
          continue;
         if((false))
          break;
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         return;
        }
       if((false))
        break;
       if(false)
        {
         if((false))
          barrier();
        }
       else
        {
         if(true)
          {
           if((false))
            {
             if(true)
              {
               do
                {
                 if((false))
                  continue;
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 if((false))
                  continue;
                 if(((injectionSwitch.x > injectionSwitch.y)))
                  {
                  }
                 else
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    {
                     if((false))
                      return;
                     for(int _injected_loop_counter = (0 ^ 0); _injected_loop_counter < 1; _injected_loop_counter ++)
                      {
                       if((false))
                        break;
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        {
                         if((false))
                          {
                           if(true)
                            {
                             barrier();
                            }
                           else
                            {
                            }
                          }
                         continue;
                         if(((! (! ((bool(bool(false))))))))
                          continue;
                        }
                       for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
                        {
                         barrier();
                        }
                       if(((true && (false))))
                        {
                         if(((bool(bool(false)))))
                          break;
                         if((false))
                          barrier();
                         break;
                         if((false))
                          break;
                        }
                       if((false))
                        barrier();
                      }
                    }
                  }
                 for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
                  {
                   barrier();
                  }
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 if(((false || (false))))
                  barrier();
                }
               while(false);
               if((((injectionSwitch.x > injectionSwitch.y))))
                continue;
               for(int _injected_loop_counter = (1 | 1); _injected_loop_counter != ((0 | 0) | (- 61740 & 0)); _injected_loop_counter --)
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if((false))
                    return;
                   barrier();
                  }
                }
              }
             else
              {
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
            }
          }
         else
          {
          }
         if((false))
          continue;
         do
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         while(false);
        }
      }
    }
   while(false);
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    return;
  }
 else
  {
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     if((false))
      {
       if(false)
        {
        }
       else
        {
         return;
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if((false))
  barrier();
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    {
     if((false))
      barrier();
     if(((((bool(bvec2((false || (false)), true))) && true))))
      return;
     barrier();
     if((false))
      {
       for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
        {
         barrier();
        }
      }
    }
   return;
  }
 if(true)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
  }
 uint next_virtual_gid = _GLF_struct_replacement_31.workgroup_base + GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_14next_virtual_gidnum_workgroupsubgroup_idworkgroup_size.z * _GLF_struct_replacement_51.GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size.w + ((_GLF_struct_replacement_8._f2.subgroup_local_id + 1) % _GLF_struct_replacement_51.GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size.w);
 _GLF_struct_replacement_51.GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size.x = next_virtual_gid;
 if((false))
  {
   if((false))
    return;
   if(true)
    {
     return;
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != 0; _injected_loop_counter --)
  {
   GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_14next_virtual_gidnum_workgroupsubgroup_idworkgroup_size.x = _GLF_struct_replacement_51.GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size.x;
  }
 if((false))
  {
   do
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      break;
     return;
     if((false))
      {
       for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
        {
         return;
        }
      }
    }
   while(false);
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 do
  {
   for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
    {
     if(false)
      {
      }
     else
      {
       buf[_GLF_struct_replacement_43._f3._f0.GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.x] = 1;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      break;
     if((false))
      continue;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    continue;
  }
 while(((injectionSwitch.x > injectionSwitch.y)));
 if(((false || (((false) || false)))))
  barrier();
 if(((! ((bool(bvec3(! (false), true, true)))))))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    {
     if((false))
      return;
     if((((false) || false)))
      barrier();
     if(((true && (false))))
      return;
     return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = ((((1 << (int(4))) >> (int(4))) << (int(6))) >> (int(6))); _injected_loop_counter > 0; _injected_loop_counter --)
    {
     if((false))
      {
       if((false))
        {
         if(false)
          {
          }
         else
          {
           barrier();
          }
        }
       if((false))
        return;
       if((false))
        return;
       barrier();
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     return;
    }
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if((false))
    return;
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   return;
  }
 if((false))
  {
   if(false)
    {
    }
   else
    {
     barrier();
    }
  }
 if(((injectionSwitch.x < injectionSwitch.y)))
  {
   if((false))
    {
     if((false))
      return;
     if((((((injectionSwitch.x > injectionSwitch.y))) && true)))
      barrier();
     return;
    }
   if((false))
    return;
  }
 else
  {
   if((false))
    barrier();
  }
 for(int _injected_loop_counter = (- 3575 & int((injectionSwitch.x))); _injected_loop_counter < (((1 << (int(7))) >> (int(7))) & int((injectionSwitch.y))); _injected_loop_counter ++)
  {
   if((false))
    return;
   if((false))
    return;
   if(false)
    {
     if((false))
      {
       if((false))
        break;
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
       for(int _injected_loop_counter = 1; _injected_loop_counter > ((0 << (int(3))) | 0); _injected_loop_counter --)
        {
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if((false))
          continue;
         if((false))
          return;
         return;
        }
       if((false))
        break;
      }
     if((false))
      barrier();
     if((false))
      return;
     if((((false) || false)))
      {
       if((false))
        continue;
       if((false))
        barrier();
       do
        {
         if((false))
          break;
         for(int _injected_loop_counter = 0; _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
          {
           return;
          }
        }
       while(false);
       if((false))
        {
         if((false))
          return;
         break;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      continue;
    }
   else
    {
     do
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
       if((false))
        return;
      }
     while(false);
     if((false))
      barrier();
     if((false))
      return;
     if((false))
      {
       do
        {
         return;
         if((false))
          barrier();
        }
       while(false);
      }
     if((false))
      return;
     if((false))
      {
       if(true)
        {
         do
          {
           barrier();
          }
         while(false);
        }
       else
        {
        }
      }
     if(_GLF_struct_replacement_8._f2.subgroup_local_id + 1 < _GLF_struct_replacement_51.GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size.w)
      {
       _GLF_struct_37 _GLF_struct_replacement_37 = _GLF_struct_37(_GLF_struct_35(uvec2(1u), bvec2(true), _GLF_struct_32(mat3x2(1.0)), _GLF_struct_33(vec2(1.0), vec4(1.0), mat2x4(1.0), vec2(1.0), ivec3(1), 1.0), _GLF_struct_34(bvec2(true), ivec2(1), mat4(1.0), true)), _GLF_struct_36(mat3x4(1.0), 0, mat3x2(1.0)), mat2x4(1.0));
       if((false))
        {
         if((false))
          {
           if((false))
            break;
           return;
          }
         if((false))
          return;
         if((false))
          break;
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if(((bool(bool(false)))))
            barrier();
           barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
         if((false))
          {
           if(false)
            {
            }
           else
            {
             return;
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
         if((false))
          continue;
         if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
          {
           if((false))
            {
             for(int _injected_loop_counter = 0; _injected_loop_counter < ((1 << (int(1))) >> (int(1))); _injected_loop_counter ++)
              {
               if((false))
                return;
               barrier();
              }
            }
           barrier();
          }
         if((bool(bvec4(true, false, false, true))))
          {
           for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < ((1 << (int(0))) >> (int(0))); _injected_loop_counter ++)
            {
             if(true)
              {
               if(((injectionSwitch.x < injectionSwitch.y)))
                {
                 if((false))
                  barrier();
                 return;
                 if((false))
                  continue;
                 if((false))
                  barrier();
                }
               else
                {
                }
              }
             else
              {
               if(((bool(bvec2(false, ((injectionSwitch.x < injectionSwitch.y)))))))
                break;
               if((false))
                {
                 if((false))
                  {
                   for(int _injected_loop_counter = 0; _injected_loop_counter < ((1 << (int(5))) >> (int(5))); _injected_loop_counter ++)
                    {
                     if(((true && (false))))
                      break;
                     barrier();
                    }
                  }
                 if(false)
                  {
                  }
                 else
                  {
                   return;
                  }
                 if((false))
                  barrier();
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                break;
               if((false))
                barrier();
              }
             if((false))
              barrier();
            }
          }
         else
          {
          }
        }
       if(true)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
           if(false)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
            }
           else
            {
             barrier();
            }
          }
        }
       else
        {
        }
       if(((true) || false))
        {
         if(false)
          {
           if((false))
            return;
           if(((! (! (false)))))
            continue;
           if((false))
            barrier();
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           if((false))
            break;
          }
         else
          {
           buf[GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_14next_virtual_gidnum_workgroupsubgroup_idworkgroup_size.x] = 2;
           for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
            {
             if((false))
              {
               if(((injectionSwitch.x > injectionSwitch.y)))
                {
                }
               else
                {
                 if((false))
                  barrier();
                }
               barrier();
               if((false))
                barrier();
              }
            }
           for(int _injected_loop_counter = ((int((injectionSwitch.y)) & 1) ^ (0 | 1)); _injected_loop_counter != 1; _injected_loop_counter ++)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             if((false))
              {
               if(false)
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  return;
                 if((false))
                  barrier();
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  break;
                }
               else
                {
                 barrier();
                }
              }
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
           break;
          }
         if((false))
          {
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           barrier();
          }
         do
          {
           for(int _injected_loop_counter = 1; _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
            {
             if(((bool(bvec3(((injectionSwitch.x > injectionSwitch.y)), true, true)))))
              barrier();
            }
           do
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               do
                {
                 if(((false) && true))
                  {
                  }
                 else
                  {
                   return;
                  }
                }
               while(false);
              }
            }
           while(false);
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           if((false))
            return;
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            return;
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
           for(int _injected_loop_counter = (0 ^ 0); _injected_loop_counter != 1; _injected_loop_counter ++)
            {
             return;
            }
          }
        }
       else
        {
         if((false))
          barrier();
        }
       if((false))
        {
         if((false))
          {
           if((false))
            continue;
           return;
          }
         for(int _injected_loop_counter = ((int((injectionSwitch.y)) << (int(1))) >> (int(1))); _injected_loop_counter != 0; _injected_loop_counter --)
          {
           barrier();
           if((false))
            break;
          }
         if((false))
          barrier();
         if((false))
          continue;
        }
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
      }
     else
      {
       if((false))
        continue;
       if((((false) || false)))
        barrier();
       buf[GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_14next_virtual_gidnum_workgroupsubgroup_idworkgroup_size.x] = 2;
       if((false))
        barrier();
       if((false))
        {
         if((false))
          continue;
         if((false))
          barrier();
         barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     do
      {
       for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
        {
         if(true)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
             return;
            }
          }
         else
          {
          }
        }
      }
     while(false);
    }
   if((false))
    break;
  }
 if((false))
  return;
 if((false))
  return;
 if((false))
  {
   for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
    {
     if((false))
      continue;
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       if(((true && (false))))
        {
         if((false))
          continue;
         barrier();
        }
       if((bool(bvec2(false, false))))
        {
         if((false))
          {
           if(false)
            {
            }
           else
            {
             if((false))
              barrier();
            }
           barrier();
          }
        }
       else
        {
         barrier();
         do
          {
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                continue;
               return;
              }
            }
          }
         while(false);
        }
      }
    }
   if((false))
    barrier();
  }
 if((false))
  {
   for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != 0; _injected_loop_counter --)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
  }
 for(int _injected_loop_counter = ((0 << (int(7))) | 0); _injected_loop_counter != 1; _injected_loop_counter ++)
  {
   if((false))
    {
     if(((bool(bvec4(false, false, true, false)))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
       if((false))
        continue;
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(true)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
          {
           if(false)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
            }
           else
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             return;
            }
          }
         if(((false || (((injectionSwitch.x > injectionSwitch.y))))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           continue;
          }
        }
      }
     else
      {
      }
     if(((false || (((injectionSwitch.x > injectionSwitch.y))))))
      return;
     if(true)
      {
       if((false))
        return;
       if((false))
        return;
       if((false))
        barrier();
       if((false))
        {
         for(int _injected_loop_counter = 0; _injected_loop_counter != (1 | 1); _injected_loop_counter ++)
          {
           return;
          }
        }
       do
        {
         do
          {
           return;
          }
         while(false);
        }
       while(false);
       if(((bool(bool((! (! (false))))))))
        barrier();
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      break;
     if(((true && (false))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      break;
     if(true)
      {
       if((false))
        barrier();
       if((false))
        {
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           do
            {
             return;
            }
           while(false);
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         if((false))
          break;
        }
       if((false))
        continue;
      }
     else
      {
       do
        {
         for(int _injected_loop_counter = ((1 << (int(1))) >> (int(1))); _injected_loop_counter != 0; _injected_loop_counter --)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              continue;
             continue;
            }
           do
            {
             if(((! (! ((bool(bool(false))))))))
              {
               for(int _injected_loop_counter = 0; _injected_loop_counter < ((1) | (1)); _injected_loop_counter ++)
                {
                 if((false))
                  continue;
                 barrier();
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  continue;
                }
              }
            }
           while(false);
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if(((injectionSwitch.x < injectionSwitch.y)))
              {
               return;
              }
             else
              {
              }
            }
           if((false))
            barrier();
          }
        }
       while(false);
       if((false))
        {
         if((false))
          break;
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           return;
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if((false))
          barrier();
        }
      }
    }
   if((false))
    return;
   if((false))
    continue;
  }
 if(false)
  {
  }
 else
  {
   if((false))
    return;
   if((false))
    barrier();
   if((false))
    barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     return;
    }
   while(false);
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
