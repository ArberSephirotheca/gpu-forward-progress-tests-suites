#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 for(int _injected_loop_counter = ((1 << (int(6))) >> (int(6))); _injected_loop_counter > (min(0, 0)); _injected_loop_counter --)
  {
   if(true)
    {
     for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
      {
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         if((false))
          {
           if(true)
            {
             barrier();
            }
           else
            {
            }
          }
        }
       if(true)
        {
         if((((false) || false)))
          barrier();
        }
       else
        {
        }
      }
    }
   else
    {
    }
  }
 uint subgroup_size = gl_SubgroupSize;
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     if((false))
      barrier();
     do
      {
       if((false))
        barrier();
       barrier();
      }
     while(false);
    }
   else
    {
    }
   if((false))
    barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 do
  {
   for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
    {
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           barrier();
          }
         if((((bool(bvec2(((false || (false))), false))) && true)))
          {
           for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
            {
             for(int _injected_loop_counter = int(((max(injectionSwitch.x, injectionSwitch.x)))); _injected_loop_counter != (((1 << (int(6))) >> (int(6))) & 1); _injected_loop_counter ++)
              {
               do
                {
                 barrier();
                }
               while((bool((bvec3(bvec4((bvec3(bvec3(bvec3(false, false, true)))), true))))));
              }
            }
           if((false))
            barrier();
          }
        }
       if(((injectionSwitch.x < (vec2(injectionSwitch[0], injectionSwitch[1])).y)))
        {
         if((false))
          barrier();
         for(int _injected_loop_counter = ((1 << ((clamp(int(6), int(6), int(6))))) >> (int(6))); _injected_loop_counter > (0 >> (int(8))); _injected_loop_counter --)
          {
           do
            {
             do
              {
               if((false))
                barrier();
              }
             while(false);
             if((((((injectionSwitch.x > injectionSwitch.y))) || false)))
              barrier();
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
          }
        }
       else
        {
        }
      }
     else
      {
      }
    }
   if((false))
    barrier();
   if(((true && (false || (false)))))
    {
    }
   else
    {
     if((! (! (false || ((! (! (((false))))))))))
      {
       do
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(false);
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     do
      {
       if((false))
        barrier();
      }
     while(false);
    }
  }
 while(((injectionSwitch.x > injectionSwitch.y)));
 do
  {
   if((((((injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = ((1) | (0 >> (int(3)))); _injected_loop_counter != (- 57160 & 0); _injected_loop_counter --)
      {
       barrier();
      }
    }
   if((false))
    barrier();
   do
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(false);
   if((false))
    barrier();
  }
 while(false);
 uint num_workgroup = gl_NumWorkGroups.x;
 if((false))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 if((false))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 do
  {
   if((((((injectionSwitch) / vec2((((injectionSwitch.y) - 0.0)), (injectionSwitch.y))).x > injectionSwitch.y))))
    {
     do
      {
       do
        {
         if((((((bool(bvec2(! (! ((! (! ((false || (false))))))), true)))) && true))))
          barrier();
        }
       while(false);
       if(false)
        {
        }
       else
        {
         if(false)
          {
          }
         else
          {
           if(true)
            {
             for(int _injected_loop_counter = 1; (! (! ((((injectionSwitch.x < injectionSwitch.y)) && ((~ ((0 ^ (~ (_injected_loop_counter))))) != ((int(ivec3(0 ^ 0, 0, 0))))))))); _injected_loop_counter --)
              {
               for(int _injected_loop_counter = 1; _injected_loop_counter > (0 ^ 0); _injected_loop_counter --)
                {
                 for(int _injected_loop_counter = (int(ivec4(0, 0, 0, 1))); (true && (_injected_loop_counter < 1)); _injected_loop_counter ++)
                  {
                   for(int _injected_loop_counter = 0; _injected_loop_counter < ((1 << (int(4))) >> (int(4))); _injected_loop_counter ++)
                    {
                     if((false))
                      barrier();
                     if((false))
                      barrier();
                    }
                   if(((injectionSwitch.x > injectionSwitch.y)))
                    {
                    }
                   else
                    {
                     if(((injectionSwitch.x > injectionSwitch.y)))
                      {
                      }
                     else
                      {
                       if((false))
                        barrier();
                       if(((bool(bvec4((! ((false || (! (false))))), false, true, true)))))
                        {
                         if((((injectionSwitch.x > (((vec2(mat3x2(((injectionSwitch) * mat2(1.0)), 0.0, 1.0, 1.0, 0.0))) * mat2(1.0))).y))))
                          barrier();
                         for(int _injected_loop_counter = (0 >> (int(4))); _injected_loop_counter < 1; _injected_loop_counter ++)
                          {
                           if((((injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                          }
                         barrier();
                        }
                      }
                    }
                  }
                }
               if((false))
                barrier();
              }
            }
           else
            {
            }
          }
        }
       barrier();
       if(false)
        {
        }
       else
        {
         if(((false || (false))))
          {
           do
            {
             barrier();
             if((false))
              barrier();
            }
           while(false);
          }
        }
      }
     while(false);
     if(true)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((((mix(vec2((- 3011.0200), (injectionSwitch)[1]), vec2((injectionSwitch)[0], (- 6495.2403)), bvec2(true, false))).x < injectionSwitch.y)))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
       if((false))
        {
         do
          {
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             if((((injectionSwitch.x > ((max((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0)))).y))))
              barrier();
            }
          }
         while(false);
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
     else
      {
      }
    }
  }
 while(false);
 uint workgroup_base = (0u ^ (workgroup_size * ((((workgroup_id) / uint(((vec2(1.0, 1.0) * (injectionSwitch)).y)))) ^ 0u)));
 uint virtual_gid = workgroup_base + (min((0u ^ (((subgroup_id) ^ 0u))) * subgroup_size, subgroup_id * subgroup_size)) + ((subgroup_local_id) >> 0u);
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((((((clamp(uint(uvec2(subgroup_local_id + 1, ((~ (~ ((((((((((true ? (uint(uvec3((((0u) | (0u))) >> 0u, 0u, 1u))) : (2504u)))))) - 0u)) | (((((((true ? (uint(uvec3((((0u) | (0u))) >> 0u, 0u, 1u))) : (2504u)))))) - uint((injectionSwitch.x)))))) | 0u))) >> (uint(1u))))), uint(uvec2(subgroup_local_id + 1, ((uint(uvec3((min(0u >> (uint(1u)), ((false ? (workgroup_id) : 0u >> (uint(1u)))))), 0u, 0u)))))), uint(uvec2((min(subgroup_local_id + (min(1, (int((clamp(ivec4(((1) | ((0) - 0)), 1, 1, (1 & 1)), ivec4(1, 1, 1, (int((min(ivec2((1 & 1), int((injectionSwitch.x))), ivec2((1 & 1), int((injectionSwitch.x)))))))), ivec4(1, 1, 1, (1 & 1)))))))), subgroup_local_id + (min(1, (int((clamp(ivec4(1, ((((1) | (1))) >> 0), 1, (1 & 1)), ivec4(1, 1, 1, (1 & 1)), ivec4(1, 1, 1, (1 & 1)))))))))), (((0u >> (uint(1u))) ^ (0u >> ((((true && (false)) ? (bitfieldExtract(subgroup_local_id, - 38133, (- 30204 / 37901))) : uint(3u))))))))))))) % subgroup_size)) | 0u);
 if(true)
  {
   for(int _injected_loop_counter = (~ ((max(((~ ((clamp((0 ^ 1), (0 ^ 1), (0 ^ 1))))) ^ 0), (int(ivec3(~ ((0 ^ 1)), 0, 0))))))); _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
    {
     if((false))
      barrier();
     do
      {
       if((true && (false)))
        {
         for(int _injected_loop_counter = (0 >> (int(7))); _injected_loop_counter != 1; _injected_loop_counter ++)
          {
           if((false))
            {
             if((false))
              barrier();
             barrier();
            }
          }
        }
       else
        {
         for(int _injected_loop_counter = 1; _injected_loop_counter != (0 << (int(7))); _injected_loop_counter --)
          {
           if((false))
            barrier();
          }
         if(false)
          {
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           for(int _injected_loop_counter = 0; (bool(bvec4(((_injected_loop_counter) | (_injected_loop_counter)) < 1, ((false || ((((! (! ((injectionSwitch.x < injectionSwitch.y))))) && true)))), false, ((injectionSwitch.x > injectionSwitch.y))))); _injected_loop_counter ++)
            {
             do
              {
               if(((((((bool(bvec4((true && (((((clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) * ((true ? cos(0.0) : (3.9))))) > injectionSwitch.y))), true, false, ((((true ? (mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2((- 986.941), (- 6.8)), bvec2(false, false))) : (vec2(9.8, 502.087)))).x > (vec2((injectionSwitch.y), (injectionSwitch.y)) * (injectionSwitch)).y)))))) || false)) || (false))))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 do
                  {
                   if((((injectionSwitch.x > (mix(float(injectionSwitch.y), float((250.207)), bool(false)))))))
                    {
                     if(((injectionSwitch.x > injectionSwitch.y)))
                      {
                      }
                     else
                      {
                       barrier();
                      }
                    }
                   barrier();
                  }
                 while(false);
                }
               do
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 do
                  {
                   if(((injectionSwitch.x < injectionSwitch.y)))
                    {
                     if((false))
                      barrier();
                    }
                   else
                    {
                    }
                   if((! (((! ((! (! (((! (((injectionSwitch.x > injectionSwitch.y)) || (((((! (! (true && ((! (! ((false || (! (! (((false || ((! (! (! (true))))))))))))))))))) || false))))) || ((injectionSwitch.x > injectionSwitch.y))))))))))))
                    {
                     buf[virtual_gid] = 1;
                    }
                   else
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      {
                       if((false))
                        {
                         if((false))
                          barrier();
                         barrier();
                        }
                       if((false))
                        barrier();
                       for(int _injected_loop_counter = (- 91082 & 0); _injected_loop_counter != ((1 << (((0 | (int(ivec2(int(6), 0))))))) >> (int(6))); _injected_loop_counter ++)
                        {
                         do
                          {
                           do
                            {
                             if((false))
                              {
                               do
                                {
                                 barrier();
                                }
                               while(((injectionSwitch.x > injectionSwitch.y)));
                               if(((! ((! (((! (! ((((bool(bool(false))) && true))))) && true)))))))
                                {
                                 if((true && ((((injectionSwitch.x > injectionSwitch.y))))))
                                  barrier();
                                 barrier();
                                }
                               if((false))
                                barrier();
                              }
                             for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                              {
                               barrier();
                              }
                            }
                           while(((false) || false));
                          }
                         while(((injectionSwitch.x > injectionSwitch.y)));
                        }
                       if((((false) && true)))
                        {
                         if(false)
                          {
                          }
                         else
                          {
                           do
                            {
                             barrier();
                            }
                           while((bool(bool((! (! (false)))))));
                          }
                        }
                       if((false))
                        {
                         if(((injectionSwitch.x < injectionSwitch.y)))
                          {
                           if((false))
                            barrier();
                          }
                         else
                          {
                          }
                         barrier();
                         if(((bool(bvec3(false, true, true)))))
                          barrier();
                        }
                      }
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      {
                       if((! (! ((bool(bool(true)))))))
                        {
                         barrier();
                        }
                       else
                        {
                         if((false))
                          barrier();
                        }
                      }
                    }
                  }
                 while(false);
                }
               while((((float((vec4(mat3(vec4(injectionSwitch.x, 0.0, 1.0, (min(abs(0.0), abs(0.0)))), 0.0, 0.0, 1.0, 0.0, 1.0))))) > (abs(1.0) * (min(((((mix(vec2((injectionSwitch)[0], (float((~ ((0 ^ (~ (((25071) | 0))))))))), vec2((float(mat4x3((- 4.2), 1.0, 1.0, 1.0, 1.0, 0.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, sqrt(1.0), 1.0, 0.0, 0.0, 1.0, 1.0, (dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), 0.0, 0.0, 1.0, 1.0, 1.0)), 1.0, 0.0, 0.0, 1.0, sin(log(1.0))))), (injectionSwitch)[1]), bvec2(false, ((injectionSwitch.x < injectionSwitch.y))))).y) - 0.0)), (((mix(float((mix(float((- 209.314)), float(((((mix(vec2((injectionSwitch)[0], (((float(25071))) / cos(0.0))), vec2((- 4.2), (injectionSwitch)[1]), bvec2(false, ((((((! (! (bool((bool(bvec3(bool(! (! ((injectionSwitch.x < injectionSwitch.y)))), false, false)))))))))) && true))))).y) - 0.0))), bool(true)))), float((6398.9348)), bool(false)))) + 0.0)))))));
               if(false)
                {
                }
               else
                {
                 if((! ((! (! (! (((! (! (false)))))))))))
                  barrier();
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               if((false))
                barrier();
              }
             while(((injectionSwitch.x > (vec2(injectionSwitch[0], injectionSwitch[1])).y)));
            }
          }
        }
      }
     while(false);
    }
   if((false))
    barrier();
  }
 else
  {
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 do
  {
   if(false)
    {
    }
   else
    {
     if(true)
      {
       if(((! (! (((false || (((! (! ((! (! ((bool(bvec4(false, ((injectionSwitch.x < injectionSwitch.y)), false, false)))))))))) || ((false) || false)))))))))
        {
         if((false))
          barrier();
         barrier();
        }
      }
     else
      {
      }
    }
  }
 while(false);
 for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(false)
      {
      }
     else
      {
       barrier();
       if(false)
        {
        }
       else
        {
         if((false))
          {
           for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != 1; _injected_loop_counter ++)
            {
             if((false))
              barrier();
             barrier();
            }
          }
        }
      }
    }
   if((false))
    barrier();
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
    }
   else
    {
     if((false))
      barrier();
     if((false))
      {
       for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
        {
         barrier();
        }
      }
     if((false))
      {
       do
        {
         barrier();
        }
       while(false);
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(((bool(bvec2(((injectionSwitch.x > injectionSwitch.y)), ((injectionSwitch.x < injectionSwitch.y)))))))
  {
   if((((((((false || (false || ((bool(((((bool(((bool((bool(injectionSwitch.x > ((true ? (vec2(mat4x3((vec2(vec2(injectionSwitch))), 0.0, determinant(mat4((mix(float((8875.7538)), float((max(0.0, ((true ? 0.0 : (- 7.6)))))), bool(true))), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, (min(0.0, (clamp(0.0, 0.0, 0.0)))), 0.0, 1.0, 0.0, 1.0, 0.0)), 1.0, abs((clamp(1.0, 1.0, 1.0))), log(1.0), 1.0, 1.0, 1.0, 0.0, 1.0))) : (vec2(- 7563.5924, 76.51)))).y)))) && true))) && (true && (true))) && true)))))))) && ((false || (true)) && ((! (! (true)))))))))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(true)
        {
         if(true)
          {
           barrier();
          }
         else
          {
          }
        }
       else
        {
         do
          {
           for(int _injected_loop_counter = 0; _injected_loop_counter < ((1 << (int(((min(int(ivec4(3, int((injectionSwitch.x)), int((injectionSwitch.y)), int((injectionSwitch.x)))), ((int(ivec4(3, int((injectionSwitch.x)), int((injectionSwitch.y)), int((injectionSwitch.x))))) | (int(ivec4(3, int((injectionSwitch.x)), int((injectionSwitch.y)), int((injectionSwitch.x)))))))))))) >> (int(3))); _injected_loop_counter ++)
            {
             for(int _injected_loop_counter = 0; (max(_injected_loop_counter, _injected_loop_counter)) < 1; _injected_loop_counter ++)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 do
                  {
                   barrier();
                  }
                 while(((injectionSwitch.x > injectionSwitch.y)));
                }
              }
            }
          }
         while(false);
        }
      }
     for(int _injected_loop_counter = (0 & - 85817); _injected_loop_counter != 1; _injected_loop_counter ++)
      {
       if(false)
        {
        }
       else
        {
         if((false))
          barrier();
         for(int _injected_loop_counter = (18861 & 0); _injected_loop_counter < 1; _injected_loop_counter ++)
          {
           barrier();
          }
        }
      }
    }
   barrier();
  }
 if((false))
  barrier();
 if(true)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(false)
      {
      }
     else
      {
       if((false))
        barrier();
      }
     for(int _injected_loop_counter = 0; _injected_loop_counter < (0 ^ 1); _injected_loop_counter ++)
      {
       do
        {
         if(false)
          {
          }
         else
          {
           do
            {
             barrier();
            }
           while(false);
          }
        }
       while(false);
      }
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 else
  {
  }
 if((false))
  {
   if(true)
    {
     barrier();
    }
   else
    {
    }
  }
 if((! (! (((((bool(bvec4(! (! ((injectionSwitch.x > injectionSwitch.y))), false, false, true))))) || ((! (! (((! ((! ((true && (! ((! (subgroup_local_id + 1 < (~ (~ (subgroup_size)))))))))))) || false))))))))))
  {
   if((false || ((! (! ((((injectionSwitch.x > injectionSwitch.y)))))))))
    {
     do
      {
       barrier();
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
    }
   if(true)
    {
     if((false))
      barrier();
    }
   else
    {
    }
   if((false))
    {
     if((((((true && (true))) || false) && (false))))
      {
       if((false))
        barrier();
       if(false)
        {
        }
       else
        {
         barrier();
        }
      }
     barrier();
    }
   int i = 0;
   buf[next_virtual_gid] = (clamp(2, 2, ((2) >> 0)));
  }
 else
  {
   if((! (! ((bool(bvec4(((false || (false))), true, true, true)))))))
    barrier();
   if((((! (! ((false) || false))))))
    {
     do
      {
       if((bool(bvec3(((bool(bool(bool(bvec3(((! (! ((! (! ((injectionSwitch.x > injectionSwitch.y)))))))), false, false)))))), true, false))))
        {
        }
       else
        {
         for(int _injected_loop_counter = ((1 << (int(5))) >> ((~ (~ (((int(5)) | 0)))))); _injected_loop_counter > 0; _injected_loop_counter --)
          {
           if(((((bool((bvec2(bvec4(bvec2(true, false), false, false)))))) || false) && (true)))
            {
             return;
            }
           else
            {
             if((((false) && true)))
              barrier();
            }
          }
         if(((((((((false || (injectionSwitch.x > (mix(float(((3.8 + - 5.2))), float(((injectionSwitch.y) - 0.0)), bool(true)))))) && true)))) && true)))
          barrier();
        }
      }
     while(false);
     do
      {
       if((false))
        {
         do
          {
           barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         while(false);
        }
       if((false))
        barrier();
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
    }
   if((false))
    barrier();
   if(false)
    {
    }
   else
    {
     if(true)
      {
       if((false))
        barrier();
      }
     else
      {
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
    }
   else
    {
     if((false))
      barrier();
     if(((true) && true))
      {
       if((((((min(injectionSwitch.x, (sqrt(0.0) + (injectionSwitch.x)))) < (mix(float((- 3.8)), ((((injectionSwitch.x > injectionSwitch.y)) ? ((- - 3.9)) : float((mix(float((clamp(((false ? (- 91.26) : injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y))), float((- 2.8)), bool(false)))))), bool(true))))) && true)))
        {
         do
          {
           for(int _injected_loop_counter = (1 ^ ((0 | 0) & - 4434)); _injected_loop_counter != 0; _injected_loop_counter --)
            {
             if(true)
              {
               if((false))
                {
                 if(true)
                  {
                   if((false))
                    barrier();
                   barrier();
                  }
                 else
                  {
                  }
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if((false))
                    barrier();
                   barrier();
                  }
                }
              }
             else
              {
              }
            }
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
         for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < 1; _injected_loop_counter ++)
          {
           if((((bool(bvec3(false, false, true)))) || false))
            {
            }
           else
            {
             do
              {
               if((false))
                barrier();
               if((false))
                {
                 for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
                  {
                   if(true)
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                }
              }
             while(false);
             ((((buf[next_virtual_gid] = 2) / 1u) ^ ((0u) << 0u)));
             if((((injectionSwitch.x > (max(injectionSwitch.y, injectionSwitch.y))))))
              barrier();
            }
          }
        }
       else
        {
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          {
           for(int _injected_loop_counter = 0; (true && (_injected_loop_counter < int((injectionSwitch.y)))); _injected_loop_counter ++)
            {
             if((false))
              barrier();
             barrier();
            }
           if(((injectionSwitch.x < ((((injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : (vec2(1.0, - 7.9)))).y)))
            {
             if((((false || ((false)))) && true))
              barrier();
            }
           else
            {
            }
           if((false))
            {
             for(int _injected_loop_counter = 1; _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
              {
               barrier();
              }
            }
          }
         if((false))
          barrier();
         if((false || ((((false)) && true))))
          {
           if((false))
            barrier();
           barrier();
           if((((false || (bool(bool(((injectionSwitch.x > injectionSwitch.y)))))))))
            barrier();
          }
        }
      }
     else
      {
       if((bool(bvec2((false), true))))
        barrier();
       if((false))
        barrier();
      }
     if(((bool((! (! (bool(false))))))))
      barrier();
    }
  }
 if((false))
  barrier();
 if(((((vec2((max(injectionSwitch[0], (clamp(injectionSwitch[0], injectionSwitch[0], (mix(float((8.0)), float(injectionSwitch[0]), bool(true))))))), injectionSwitch[1])).x > injectionSwitch.y))))
  {
   do
    {
     do
      {
       for(int _injected_loop_counter = (0 >> (int(2))); _injected_loop_counter < 1; _injected_loop_counter ++)
        {
         barrier();
        }
      }
     while(false);
    }
   while(false);
  }
 do
  {
   if((((((injectionSwitch.x > injectionSwitch.y) && true)))))
    barrier();
  }
 while(((injectionSwitch.x > injectionSwitch.y)));
 if(false)
  {
  }
 else
  {
   if(false)
    {
    }
   else
    {
     if((((((((vec2(injectionSwitch[0], injectionSwitch[1]))) * vec2((injectionSwitch.y), (injectionSwitch.y)))) * mat2(1.0)).x < injectionSwitch.y)))
      {
       do
        {
         for(int _injected_loop_counter = (((0 ^ (max((max((1 << (int(5))) >> (int((max(5, (((int(ivec3(5, 1, 1)))) - 0))))), (1 << (int(5))) >> (int(5)))), (((int(ivec2((max((1 << (int(5))) >> (int((max(5, (((int(ivec3(5, 1, 1)))) - 0))))), (1 << (int(5))) >> (int(5)))), 0)))) - 0)))))); _injected_loop_counter > 0; _injected_loop_counter --)
          {
           if(true)
            {
             if(((false || ((! (! (false)))))))
              barrier();
             if((true && (true)))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(((false) && true))
                {
                }
               else
                {
                 if(((injectionSwitch.x < injectionSwitch.y)))
                  {
                   if(false)
                    {
                     if((false))
                      {
                       if(false)
                        {
                        }
                       else
                        {
                         barrier();
                        }
                      }
                     if((false))
                      barrier();
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                   else
                    {
                     if(true)
                      {
                       if((false))
                        barrier();
                       if((((bool(bvec4((! ((bool((((! (! (bool(! (injectionSwitch.x > injectionSwitch.y)))))) || false))))), true, true, true))))))
                        {
                        }
                       else
                        {
                         if((false))
                          {
                           for(int _injected_loop_counter = 1; _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
                            {
                             barrier();
                            }
                          }
                         if(((((injectionSwitch) * mat2((injectionSwitch.y))).x < injectionSwitch.y)))
                          {
                           for(int _injected_loop_counter = ((0) - 0); _injected_loop_counter != ((((1 << (int((((0 | (0))) / 1)))) >> (int((((int(ivec3(0, 1, 1))) / 1))))) << (((int(1)) + 0))) >> (int(1))); _injected_loop_counter ++)
                            {
                             if(false)
                              {
                              }
                             else
                              {
                               if(false)
                                {
                                 if((false))
                                  barrier();
                                }
                               else
                                {
                                 if(((! (! ((! (! (true && (true)))))))))
                                  {
                                   if((false))
                                    {
                                     do
                                      {
                                       for(int _injected_loop_counter = (max(0, 0)); _injected_loop_counter != 1; _injected_loop_counter ++)
                                        {
                                         if(false)
                                          {
                                          }
                                         else
                                          {
                                           for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                                            {
                                             for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > int(((vec2(mat4x2(injectionSwitch, 1.0, 0.0, 0.0, abs(0.0), 1.0, abs(0.0)))).x)); _injected_loop_counter --)
                                              {
                                               do
                                                {
                                                 do
                                                  {
                                                   if((false))
                                                    barrier();
                                                   if((false))
                                                    barrier();
                                                   if((((injectionSwitch.x > injectionSwitch.y))))
                                                    barrier();
                                                  }
                                                 while(false);
                                                 do
                                                  {
                                                   if((((injectionSwitch.x > injectionSwitch.y))))
                                                    barrier();
                                                  }
                                                 while(false);
                                                }
                                               while(false);
                                               if((false))
                                                barrier();
                                               do
                                                {
                                                 if(false)
                                                  {
                                                  }
                                                 else
                                                  {
                                                   do
                                                    {
                                                     if((false))
                                                      barrier();
                                                     if(true)
                                                      {
                                                       do
                                                        {
                                                         if((false))
                                                          barrier();
                                                        }
                                                       while(false);
                                                      }
                                                     else
                                                      {
                                                       if((false))
                                                        {
                                                         if(((injectionSwitch.x < injectionSwitch.y)))
                                                          {
                                                           barrier();
                                                          }
                                                         else
                                                          {
                                                          }
                                                        }
                                                      }
                                                     if(((injectionSwitch.x < injectionSwitch.y)))
                                                      {
                                                       return;
                                                       do
                                                        {
                                                         if((((! (! ((bool((bvec2(bvec2(((bvec2(bvec4(bvec2(bvec3((bvec2(bvec3(bvec2((false), false), false))), false)), false, false)))))))))))) || false)))
                                                          {
                                                           do
                                                            {
                                                             barrier();
                                                             if(((injectionSwitch.x < injectionSwitch.y)))
                                                              {
                                                               if(((((min((mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2((5.1), (579.347)), bvec2(false, ((injectionSwitch.x > injectionSwitch.y))))), injectionSwitch)).x > injectionSwitch.y))))
                                                                {
                                                                 if((! (! (true))))
                                                                  {
                                                                   barrier();
                                                                  }
                                                                 else
                                                                  {
                                                                  }
                                                                }
                                                              }
                                                             else
                                                              {
                                                              }
                                                             if((false))
                                                              barrier();
                                                            }
                                                           while(false);
                                                           if((false))
                                                            {
                                                             for(int _injected_loop_counter = (0 & 19235); _injected_loop_counter < ((1 << (int(6))) >> (int(6))); _injected_loop_counter ++)
                                                              {
                                                               for(int _injected_loop_counter = 1; _injected_loop_counter > (max(0, (~ (~ (0))))); _injected_loop_counter --)
                                                                {
                                                                 barrier();
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                       while(false);
                                                      }
                                                     else
                                                      {
                                                      }
                                                    }
                                                   while((false || (((bool(bool((((bool((! (! (bool(bool(((bvec3(bvec3(bvec3((bvec3(bvec3(bvec3((bvec3(bvec4(bvec3((((max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)), true, ((injectionSwitch.x < injectionSwitch.y))), false))))))))))))))))))))))))) || false)));
                                                  }
                                                }
                                               while((true && (false)));
                                              }
                                            }
                                           if((false))
                                            barrier();
                                           if((((injectionSwitch.x > injectionSwitch.y))))
                                            barrier();
                                           for(int _injected_loop_counter = (0 << (int(1))); (((bool(bvec4(bool(bvec2(((((injectionSwitch.x > injectionSwitch.y)) || (_injected_loop_counter != (1 & 1))) || false), true)), false, false, false))))); _injected_loop_counter ++)
                                            {
                                             for(int _injected_loop_counter = 1; _injected_loop_counter > (int(ivec2(0, 1))); _injected_loop_counter --)
                                              {
                                               if((((injectionSwitch.x > injectionSwitch.y))))
                                                barrier();
                                              }
                                            }
                                           if((false))
                                            barrier();
                                          }
                                         if((false))
                                          barrier();
                                        }
                                       if(true)
                                        {
                                         if((false))
                                          barrier();
                                        }
                                       else
                                        {
                                        }
                                      }
                                     while(((((injectionSwitch.x > (abs((min(vec2(0.0, 0.0), vec2(((((0.0) + 0.0)) * (clamp(1.0, 1.0, 1.0))), 0.0)))) + (injectionSwitch)).y))) && ((((injectionSwitch.x < injectionSwitch.y)) || ((injectionSwitch.x > injectionSwitch.y))))));
                                    }
                                  }
                                 else
                                  {
                                  }
                                }
                              }
                            }
                          }
                         else
                          {
                          }
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                        }
                      }
                     else
                      {
                      }
                    }
                  }
                 else
                  {
                  }
                }
              }
             else
              {
              }
            }
           else
            {
            }
           if((false))
            {
             if(false)
              {
              }
             else
              {
               barrier();
              }
            }
           if(((((clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
            barrier();
          }
        }
       while(false);
      }
     else
      {
      }
    }
  }
 for(int _injected_loop_counter = (1 ^ 1); _injected_loop_counter < 1; ((_injected_loop_counter ++) + 0))
  {
   if((((false) && true)))
    barrier();
   if((true && ((true && (true)))))
    {
     if(false)
      {
      }
     else
      {
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
            {
             barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(((false || (false))))
          barrier();
        }
       else
        {
         for(int _injected_loop_counter = (0 >> (int(3))); _injected_loop_counter != (max(1, 1)); _injected_loop_counter ++)
          {
           if((false))
            {
             do
              {
               if((bool(bool(((injectionSwitch.x < injectionSwitch.y))))))
                {
                 if(false)
                  {
                   if(false)
                    {
                    }
                   else
                    {
                     if(((injectionSwitch.x > injectionSwitch.y)))
                      {
                      }
                     else
                      {
                       if((false))
                        {
                         for(int _injected_loop_counter = 1; _injected_loop_counter > (0 | (int((injectionSwitch.x)))); _injected_loop_counter --)
                          {
                           do
                            {
                             barrier();
                            }
                           while(false);
                          }
                        }
                      }
                    }
                  }
                 else
                  {
                   if((false))
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      {
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       barrier();
                      }
                     barrier();
                    }
                   if((! (! (false))))
                    {
                     if((false))
                      {
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       barrier();
                      }
                    }
                   else
                    {
                     barrier();
                    }
                  }
                }
               else
                {
                }
              }
             while(false);
             if((! (! (((injectionSwitch.x < injectionSwitch.y))))))
              {
               if((false))
                barrier();
              }
             else
              {
              }
             if((false))
              barrier();
            }
          }
        }
       if((false))
        barrier();
      }
    }
   else
    {
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
