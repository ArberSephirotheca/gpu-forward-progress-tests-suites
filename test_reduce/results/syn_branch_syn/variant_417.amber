#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(((! ((bool(bool(! ((((injectionSwitch.x < injectionSwitch.y)) && ((! (! (! (! ((false || ((((injectionSwitch.x > injectionSwitch.y))))))))))))))))))))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 if((false))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = (min(workgroup_size * workgroup_id, workgroup_size * workgroup_id));
 uint virtual_gid = workgroup_base + ((clamp(~ ((max(~ ((((true ? (max((subgroup_id) | (clamp((subgroup_id), (subgroup_id), (subgroup_id))), (subgroup_id) | (subgroup_id))) : (((workgroup_id) | (workgroup_id)))))) * subgroup_size), ~ (((((subgroup_id * (uint(uint(subgroup_size)))) << (((true ? (1u * (uint((injectionSwitch.x)))) : (workgroup_id))) << (uint(7u)))) | ((~ (~ ((subgroup_id * (uint(uvec3((uint(uint(subgroup_size))), 0u, 1u)))) << (((true ? (1u * (uint((injectionSwitch.x)))) : (workgroup_id))) << (uint(7u))))))))))))), ((~ ((max(~ ((((true ? (max((subgroup_id) | (clamp((subgroup_id), (subgroup_id), (subgroup_id))), (subgroup_id) | (subgroup_id))) : (((workgroup_id) | (workgroup_id)))))) * subgroup_size), ~ (((((subgroup_id * (uint(uint(subgroup_size)))) << (((true ? (1u * (uint((injectionSwitch.x)))) : (workgroup_id))) << (uint(7u)))) | ((~ (~ ((subgroup_id * (uint(uvec3((uint(uint(subgroup_size))), 0u, 1u)))) << (((true ? (1u * (uint((injectionSwitch.x)))) : (workgroup_id))) << (uint(7u)))))))))))))) / 1u), ~ ((max(~ ((((true ? (max((subgroup_id) | (clamp((subgroup_id), (subgroup_id), (subgroup_id))), (subgroup_id) | (subgroup_id))) : (((workgroup_id) | (workgroup_id)))))) * subgroup_size), ~ (((((subgroup_id * (uint(uint(subgroup_size)))) << (((true ? (1u * (uint((injectionSwitch.x)))) : (workgroup_id))) << (uint(7u)))) | ((~ (~ ((subgroup_id * (uint(uvec3((uint(uint(subgroup_size))), 0u, 1u)))) << (((true ? (1u * (uint((injectionSwitch.x)))) : (workgroup_id))) << (uint(7u)))))))))))))))) + subgroup_local_id;
 uint next_virtual_gid = ((workgroup_base + subgroup_id * subgroup_size) + 0u) + ((((max(((false ? (atomicCompSwap(subgroup_size, subgroup_size, virtual_gid)) : ((((true ? (subgroup_local_id + 1) % (((! (! (false))) ? (0u + ((workgroup_base))) : subgroup_size)) : (123866u)))) ^ (0u << (uint(8u)))))), ((min((((true ? (subgroup_local_id + 1) % ((false ? (((~ (~ ((workgroup_base))))) << 0u) : subgroup_size)) : (123866u)))) ^ (0u << (uint(8u))), (clamp((((true ? (subgroup_local_id + 1) % ((false ? (((~ (~ ((workgroup_base))))) << 0u) : subgroup_size)) : (123866u)))) ^ (0u << (uint(8u))), (((true ? (subgroup_local_id + 1) % ((false ? (((~ (~ ((workgroup_base))))) << 0u) : subgroup_size)) : (123866u)))) ^ (0u << (uint(8u))), (((true ? (subgroup_local_id + 1) % ((false ? (((~ (~ ((workgroup_base))))) << 0u) : subgroup_size)) : (123866u)))) ^ (0u << (uint(8u)))))))))) >> 0u)));
 buf[virtual_gid] = ((1) - 0);
 if(subgroup_local_id + (~ (((max(((((false ? (- 78043) : ((true ? clamp(~ (1), ~ (1), (~ (~ (~ (1))))) : (93080)))))) / ((1 << (int(3))) >> (((((int(3)) << 0)) | (0 >> (int(6))))))), clamp(~ ((true ? (1) : (72719))), ~ (1), ~ (1))))))) < subgroup_size)
  {
   if((((bool(bvec2(((! (! ((bool(bvec3(false, false, false)))))) || ((injectionSwitch.x > injectionSwitch.y))), false))))))
    {
     if((false))
      barrier();
     barrier();
    }
   if(((((injectionSwitch.x < injectionSwitch.y)) && ((true && ((bool(((bvec2((bvec2(bvec2(bvec2(bvec2(((bvec2(bvec2(bvec2(bvec3(bvec2(bvec2(false, true)), true))))))))))))))))))))))
    barrier();
   int i = 0;
   if(((! ((! ((true && (! (! (((((! (! (bool(bvec3((! (! (((false) || (true && (((bool(bvec4(bool((bvec2((bvec2(bvec4(bvec2(bvec2(false, true)), false, false)))))), true, false, false)))))))))), false, ((injectionSwitch.x > injectionSwitch.y))))))))) && true)))))))))))
    barrier();
   (0u ^ (buf[next_virtual_gid] = 2));
   if((false || ((((injectionSwitch.x > injectionSwitch.y)) || ((bool((bvec2(bvec4(bvec2((((injectionSwitch.x > injectionSwitch.y))), true), true, false))))))))))
    barrier();
  }
 else
  {
   buf[next_virtual_gid] = 2;
   if((((bool(bvec4((false), false, false, true))) && true)))
    barrier();
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
