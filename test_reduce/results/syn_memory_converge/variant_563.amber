#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if(((false || (false))))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 if((! ((bool(bvec2(! ((((injectionSwitch.x > injectionSwitch.y)))), false))))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((false))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   barrier();
   if((false))
    barrier();
  }
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   barrier();
  }
 if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = (max((((false ? (uvec3(100998u, 42876u, 80384u)) : ~ (~ (gl_NumWorkGroups))))).x, gl_NumWorkGroups.x));
 if(((! (! ((((! (! (((bool(bvec3(((((bool(bvec2((bool((bvec2(bvec3(bvec2(false, true), true))))), false))))) && true), false, ((injectionSwitch.x > (0.0 + (injectionSwitch.y))))))) || false)))))) || false)))))
  {
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((true && ((bool(bool((((injectionSwitch.x > injectionSwitch.y)))))))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 if((false || ((((injectionSwitch.x > injectionSwitch.y))))))
  {
   if((false))
    barrier();
   if((! (! (((false || (bool(bvec3((false), true, true)))))))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
  }
 if((false))
  {
   if(((bool(bvec4(((bool(bvec4((bool(bvec3((((false)) && true), false, false))), false, false, true))) && true), true, true, false)))))
    {
     if(((false || (false))))
      {
       if((false))
        barrier();
       barrier();
       if((false))
        barrier();
      }
     barrier();
    }
   if((false))
    {
     if((false))
      barrier();
     if((false))
      barrier();
     barrier();
    }
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((false))
  {
   if((bool(bvec2((false), false))))
    barrier();
   if((false))
    {
     if((false))
      {
       if((false))
        barrier();
       if((((true && ((injectionSwitch.x > injectionSwitch.y))))))
        barrier();
       if((false))
        barrier();
       barrier();
      }
     if((false))
      barrier();
     barrier();
     if((false))
      barrier();
    }
   if(((((min(injectionSwitch, injectionSwitch)).x > (max((((bool(bvec4(((((! (! ((false || (false || (true)))))))) || false), true, true, (false || ((! (! (true)))))))) ? injectionSwitch.y : (float(mat3x4((max((993.302), (993.302))), 0.0, 0.0, 1.0, 0.0, sqrt(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0))))), injectionSwitch.y))))))
    {
     if((false))
      {
       if((false))
        barrier();
       if((false))
        barrier();
       barrier();
      }
     if((false))
      barrier();
     barrier();
    }
   if(((((((injectionSwitch.x < injectionSwitch.y) || false))) && (false))))
    {
     if((false))
      barrier();
     barrier();
     if(((bool(bvec2(false, true)))))
      barrier();
    }
   if((false))
    {
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     if((false))
      {
       if(((((false || (injectionSwitch.x > injectionSwitch.y))))))
        barrier();
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   if(((((bool(bvec3(injectionSwitch.x > injectionSwitch.y, ((injectionSwitch.x < injectionSwitch.y)), true)))))))
    {
     if((false))
      barrier();
     if((false))
      barrier();
     barrier();
    }
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
     if((((injectionSwitch.x < injectionSwitch.y)) && ((bool(bvec2((false), false))))))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     barrier();
    }
   if((false))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    {
     if((false))
      barrier();
     if((false))
      barrier();
     if((false))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(((true && (false))))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(((! (! (false)))))
      barrier();
     barrier();
    }
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   if((((! (! ((false || ((injectionSwitch.x > injectionSwitch.y)))))))))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     if((bool(bvec2((false), false))))
      {
       if((false))
        barrier();
       barrier();
      }
     if((((((bool(bvec4((bool(bool((bool(bvec2(true, true))) && true))), false, false, true))))) && (false))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if((false))
      barrier();
    }
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
     if((false))
      barrier();
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if((false))
    barrier();
  }
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 if((((! (! (bool(bvec3(((! ((true && (! (bool((bvec3(bvec4(bvec3(false, ((injectionSwitch.x < injectionSwitch.y)), false), ((injectionSwitch.x > injectionSwitch.y)))))))))))), true, false))))))))
  barrier();
 if(((((((((((1.0 * (((false ? (2.9) : float(mat2x4(float(((mat2(mat3x2((mat2(mat3x4(mat2(mat3(mat2(injectionSwitch.x, 1.0, 0.0, 0.0))))))))))), 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0)))))))) - sqrt(0.0))) / (mix(float((87.86)), float(1.0), bool(true))))) > ((true ? ((true ? injectionSwitch.y : (68.95))) : (- 75.86)))))))
  {
   if(((! (! (false)))))
    barrier();
   barrier();
  }
 if(((bool(bvec2(false, true)))))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((((bool(bool(bool(bvec4(false, false, true, false))))))))
  {
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 if((false))
  {
   if((false))
    barrier();
   if(((((clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       if((false))
        barrier();
       if((false))
        barrier();
       barrier();
      }
     if((false))
      barrier();
     barrier();
    }
   barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((false) && true)))
    barrier();
   if((false))
    barrier();
  }
 if((false))
  barrier();
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint virtual_gid = (min(((max((true ? ((workgroup_base + subgroup_id * subgroup_size) >> 0u) : (write_val)), (clamp((true ? ((workgroup_base + subgroup_id * subgroup_size) >> 0u) : (write_val)), (true ? ((workgroup_base + subgroup_id * subgroup_size) >> 0u) : (write_val)), (true ? ((workgroup_base + subgroup_id * subgroup_size) >> 0u) : (write_val))))))) + subgroup_local_id, ((max((true ? ((workgroup_base + subgroup_id * subgroup_size) >> 0u) : (write_val)), (clamp((true ? ((workgroup_base + subgroup_id * subgroup_size) >> 0u) : (write_val)), (true ? ((workgroup_base + subgroup_id * subgroup_size) >> 0u) : (write_val)), (true ? ((workgroup_base + subgroup_id * subgroup_size) >> 0u) : (write_val))))))) + subgroup_local_id));
 atomicStore(write_val, uint(virtual_gid), 4, 64, 0);
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 if((((! ((bool(bvec3(! ((injectionSwitch.x > injectionSwitch.y)), false, true))))))))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if(((bool(bvec2(false, true)))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if(((((! (! ((! (! (bool(bvec2((injectionSwitch.x > injectionSwitch.y), true))))))))))))
  {
   if((false))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if((false))
      barrier();
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       barrier();
      }
     if((false))
      barrier();
    }
   if((false))
    {
     if((false))
      barrier();
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     if((false))
      {
       if((false))
        barrier();
       if((false))
        barrier();
       barrier();
       if((false))
        barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
       if((false))
        barrier();
      }
     if((false))
      barrier();
     barrier();
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     if((false))
      {
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
       barrier();
      }
     if(((true && (bool(bvec3((((injectionSwitch.x > injectionSwitch.y))), true, ((injectionSwitch.x > injectionSwitch.y))))))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   if((false))
    barrier();
   if((! ((true && ((true && (! ((((injectionSwitch.x > injectionSwitch.y)))))))))))
    {
     if((((false) || false)))
      barrier();
     barrier();
    }
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        {
         if((false))
          barrier();
         barrier();
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
        }
       barrier();
       if((false))
        barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
   if((false))
    barrier();
  }
 buf[virtual_gid] = uint(subgroupAllEqual(write_val));
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
