#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    {
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     return;
    }
   if((false))
    barrier();
   barrier();
  }
 if(((true && (((true && ((injectionSwitch.x > (max(injectionSwitch, (((mat2(1.0) * (injectionSwitch))) * mat2(1.0)))).y))))))))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
  }
 if((false))
  return;
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((! (! (((false || (false)))))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   if((false))
    barrier();
   if((false))
    barrier();
   return;
   if((false))
    barrier();
  }
 if((false))
  {
   if((false))
    barrier();
   barrier();
   if(((true && (false))))
    barrier();
   if((false))
    {
     if((! (! (((! (! ((bool((bvec2(bvec4(bvec2((! (! (((injectionSwitch.x > injectionSwitch.y))))), (bool(((bvec3(bvec4(bvec3(bvec3(bvec3(true, false, true))), false))))))), false, false)))))))))))))
      {
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         if((false))
          return;
         if((false))
          barrier();
         if((false))
          barrier();
         return;
        }
       if((false))
        barrier();
       if((false))
        barrier();
       if((false))
        barrier();
       barrier();
      }
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         return;
        }
       barrier();
      }
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         return;
        }
       if((false))
        barrier();
       if((false))
        barrier();
       return;
      }
    }
  }
 if((bool(bvec3((((injectionSwitch.x > injectionSwitch.y))), true, ((injectionSwitch.x > injectionSwitch.y))))))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((false))
  barrier();
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  return;
 if(((((! (! (injectionSwitch.x > injectionSwitch.y)))))))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 if((false))
  return;
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   return;
  }
 if((false))
  {
   if((false))
    barrier();
   return;
  }
 if((false))
  return;
 if((true && ((bool(bool((bool(bvec2(((! (! (((((false) || false)) || false))))), false)))))))))
  {
   if((false))
    {
     if((false))
      return;
     barrier();
    }
   if((false))
    barrier();
   if((((((((injectionSwitch.x > injectionSwitch.y)))) || false)) || ((injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 if((false))
  {
   if((((false) && true)))
    {
     if((false))
      {
       if((false))
        barrier();
       return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if(((! (! (false)))))
      return;
     if((false))
      barrier();
    }
   barrier();
  }
 if(((false || ((bool((bvec2(bvec3((bvec2(bvec2(bvec2(false, false)))), false)))))))))
  {
   if((true && (((((true && (((false) && true)))) && ((bool(bvec2(bool(bvec4(true, false, false, false)), false)))))))))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((false))
  barrier();
 if(((! (! (bool(bvec3((false), true, ((injectionSwitch.x < injectionSwitch.y)))))))))
  {
   if((false))
    barrier();
   return;
  }
 if((false))
  {
   if((false))
    barrier();
   return;
   if((false))
    barrier();
  }
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 uint workgroup_size = gl_WorkGroupSize.x;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(((bool(bvec3((((true && ((((! (! (((bool(bvec4((false || ((((injectionSwitch.x < ((injectionSwitch) + vec2(0.0, 0.0)).y)) && ((((injectionSwitch.x > injectionSwitch.y)) && true))))), false, true, true))) && true))))) || false))))), true, false)))))
  {
   if((false))
    barrier();
   barrier();
  }
 if(((bool(bvec4(((injectionSwitch.x > injectionSwitch.y)), ((injectionSwitch.x < injectionSwitch.y)), false, false)))))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 if(((! ((bool(bvec2(! (false), true)))))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((false))
  return;
 uint workgroup_base = ((true ? workgroup_size : (subgroup_id))) * workgroup_id;
 if((false))
  return;
 if((false))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    return;
   barrier();
   if((false))
    {
     if(((! (! (false)))))
      barrier();
     if((false))
      return;
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if((false))
    return;
  }
 if((((! (((! (((! (! (false)))))) && true)))) || false))
  barrier();
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 atomicStore(write_val, uint(virtual_gid), 4, 64, (min((((1 * (0))) ^ 0), 0)));
 if((false))
  {
   if((false))
    barrier();
   return;
  }
 if((false))
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 buf[virtual_gid] = uint(subgroupAllEqual(write_val));
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
