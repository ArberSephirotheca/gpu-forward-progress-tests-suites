#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec2 GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_id;
 uvec3 GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_basesubgroup_size;
 uvec2 GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_base;
 GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_basesubgroup_size.xy = GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_base;
 uint subgroup_id = gl_SubgroupID;
 GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_id.x = subgroup_id;
 if((false))
  return;
 uint subgroup_size = gl_SubgroupSize;
 GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_basesubgroup_size.z = subgroup_size;
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_basesubgroup_size.xy.x = num_workgroup;
 if((((false) || false)))
  {
   if((false))
    return;
   return;
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_id.y = workgroup_id;
 uint workgroup_base = workgroup_size * GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_id.y;
 GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_basesubgroup_size.xy.y = workgroup_base;
 if((false))
  return;
 if((false))
  return;
 uint virtual_gid = GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_basesubgroup_size.xy.y + GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_id.x * GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_basesubgroup_size.z + subgroup_local_id;
 atomicStore(write_val, uint(virtual_gid), 4, 64, 0);
 if((false))
  return;
 if((false))
  {
   if((false))
    return;
   return;
  }
 buf[virtual_gid] = uint(subgroupAllEqual(write_val));
 if((false))
  return;
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
