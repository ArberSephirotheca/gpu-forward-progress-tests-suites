#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = (uvec3(uvec3((uvec3((((~ (((~ (((((false ? (uvec3(50162u, 86114u, (uint((max(uvec3(7803u, 0u, (0u ^ 1u)), uvec3(7803u, 0u, (0u ^ 1u)))))))) : uvec3((((clamp((uvec3(1u, 1u, 1u) * (gl_NumWorkGroups)), (uvec3(1u, 1u, 1u) * (gl_NumWorkGroups)), (uvec3(1u, 1u, 1u) * (gl_NumWorkGroups))))) | ((clamp((uvec3(1u, 1u, 1u) * (gl_NumWorkGroups)), (uvec3(1u, 1u, 1u) * (gl_NumWorkGroups)), (uvec3(1u, 1u, 1u) * (gl_NumWorkGroups))))))))))) | (((max(((((false ? (uvec3(50162u, 86114u, (uint(uvec3(7803u, 0u, (0u ^ 1u)))))) : uvec3((clamp((uvec3(1u, 1u, 1u) * (gl_NumWorkGroups)), (uvec3(1u, 1u, 1u) * (gl_NumWorkGroups)), (uvec3(1u, 1u, 1u) * (gl_NumWorkGroups))))))))), (~ (~ (((((false ? (uvec3(50162u, 86114u, (uint(uvec3(7803u, 0u, (0u ^ 1u)))))) : uvec3((clamp((uvec3(1u, 1u, 1u) * (gl_NumWorkGroups)), (uvec3(1u, 1u, 1u) * (gl_NumWorkGroups)), (uvec3(1u, 1u, 1u) * (gl_NumWorkGroups))))))))))))))) | (((((false ? (uvec3(50162u, 86114u, (uint(uvec3(7803u, 0u, (0u ^ 1u)))))) : uvec3((clamp((uvec3(1u, 1u, 1u) * (gl_NumWorkGroups)), (uvec3(1u, 1u, 1u) * (gl_NumWorkGroups)), (uvec3(1u, 1u, 1u) * (gl_NumWorkGroups))))))))))))) / uvec3(1u, 1u, 1u))))) << uvec3(0u, 0u, 0u))))))).x;
 uint workgroup_size = (0u + (gl_WorkGroupSize.x));
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = ((((((false ? (num_workgroup) : ((((((min((uint(uvec3((max(((uint(((((((injectionSwitch.x < injectionSwitch.y)) ? uvec2(((workgroup_size) | ((~ (((((injectionSwitch.x < injectionSwitch.y)) ? ~ (workgroup_size) : (subgroup_size))))))), uint(((clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))))) : (uvec2(125157u, 5995u))))) | ((uvec2(1u, 1u) * ((max((uvec2(uvec3(uvec2(((workgroup_size) | (workgroup_size)), uint((injectionSwitch.x))), 0u))), uvec2(((workgroup_size) | (workgroup_size)), uint((injectionSwitch.x)))))))))))), ((uint(((max((uvec2((((false ? (subgroup_id) : (workgroup_size))) | (workgroup_size)), uint((injectionSwitch.x)))), (uvec2((clamp(((workgroup_size) | (workgroup_size)), ((workgroup_size) | (workgroup_size)), ((workgroup_size) | (workgroup_size)))), uint((injectionSwitch.x)))))) | (((uvec2((~ (~ (((workgroup_size) | (workgroup_size))))), uint((injectionSwitch.x))))) >> uvec2(0u, 0u)))))))), 0u, 1u))), (uint(uvec3((max(((uint(((((((injectionSwitch.x < injectionSwitch.y)) ? uvec2(((workgroup_size) | (workgroup_size)), uint(((clamp((float(mat3x2(injectionSwitch.x, 0.0, 0.0, round(length(normalize(1.0))), 1.0, 1.0))), (clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x))))) : (uvec2(125157u, 5995u))))) | (uvec2(((workgroup_size) | (workgroup_size)), uint((injectionSwitch.x)))))))), ((uint(((max((uvec2(((workgroup_size) | (workgroup_size)), uint((injectionSwitch.x)))), (uvec2(((0u | ((workgroup_size))) | (workgroup_size)), uint((injectionSwitch.x)))))) | (((uvec2((~ (~ (((workgroup_size) | (workgroup_size))))), uint(((false ? (1965.4761) : (injectionSwitch.x))))))) >> uvec2(0u, 0u)))))))), 0u, 1u))))) >> 0u)) * uint((((injectionSwitch.y)) / 1.0))))) << 0u))) / 1u)) << ((true ? ((false ? ((subgroup_size * (0u | (subgroup_local_id)))) : uint(((vec2((clamp((vec2(0.0, 0.0) + (injectionSwitch)), injectionSwitch, injectionSwitch))[0], (min(((max(1.0, 1.0)) * (injectionSwitch[1])), (mix(float((- 1.5)), float(((max(1.0, 1.0)) * (injectionSwitch[1]))), bool(true))))))).x)))) : (write_val)))) * workgroup_id;
 uint virtual_gid = (clamp(workgroup_base, (((((false) && true) ? (atomicAdd(subgroup_local_id, workgroup_id)) : (workgroup_base))) | ((1u * ((((true ? (((1u * ((workgroup_base)))) / 1u) : (subgroup_local_id)))) * 1u)))), (((((max(((0u) / 1u), 0u))) | (0u)) ^ (uint((max(((uint(((workgroup_base) ^ uint(((vec2(1.0, 1.0) * (injectionSwitch)).x))))) ^ 0u), uint(workgroup_base))))))))) + ((subgroup_id) - 0u) * ((subgroup_size) >> 0u) + subgroup_local_id;
 if(((injectionSwitch.x < injectionSwitch.y)))
  {
   atomicStore(write_val, uint(((uint(uvec3((min(~ (~ ((((((clamp((max(virtual_gid, virtual_gid)), (max(virtual_gid, virtual_gid)), (max(virtual_gid, virtual_gid))))) | ((clamp((max(virtual_gid, virtual_gid)), (max(virtual_gid, virtual_gid)), (max(virtual_gid, virtual_gid))))))) / 1u))), ~ (~ (((min(((clamp((max(virtual_gid, virtual_gid)), (max(virtual_gid, virtual_gid)), (max(virtual_gid, virtual_gid))))), (0u ^ (((clamp((max(virtual_gid, virtual_gid)), (max(virtual_gid, virtual_gid)), (max(virtual_gid, virtual_gid))))))))) / 1u))))), 0u, (0u | 0u)))))), 4, 64, 0);
  }
 else
  {
  }
 for(int _injected_loop_counter = 1; (max((min(_injected_loop_counter, _injected_loop_counter)), (int(int(_injected_loop_counter))))) > 0; ((true ? _injected_loop_counter -- : (_injected_loop_counter))))
  {
   ((buf[virtual_gid] = uint(subgroupAllEqual(write_val))) | 0u);
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
