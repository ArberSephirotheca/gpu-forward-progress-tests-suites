#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((false))
  return;
 if((false))
  return;
 if((false))
  return;
 uint subgroup_id = gl_SubgroupID;
 if(((true && (bool(bvec2((false), false))))))
  return;
 if((false))
  {
   if((false))
    return;
   return;
  }
 if((((((injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y))))
  {
   if((((false) && true)))
    {
     if((false))
      return;
     return;
    }
   return;
   if((false))
    return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  return;
 if((((((injectionSwitch.x > injectionSwitch.y)) && true))))
  {
   if((false))
    return;
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    {
     if((((injectionSwitch.x > (max(injectionSwitch, injectionSwitch)).y))))
      return;
     return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if((((false) || false)))
    return;
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false || ((((injectionSwitch.x > injectionSwitch.y))))))
    return;
   if(((bool(bvec4(false, true, true, true)))))
    return;
   if(((! (! (((((false || (bool(bool((! (! ((bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))))))))))))))))))
    {
     if((false))
      return;
     return;
    }
   return;
   if((false))
    return;
  }
 if((! (! ((((bool(bvec3(bool(bool(((injectionSwitch.x > (((((min((false ? (- 952.404) : (injectionSwitch.y) / (float(mat2x3(cos(0.0), (float(mat4x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0))), 0.0, 0.0, (injectionSwitch.x), 1.0)))), (max((false ? (- 952.404) : (injectionSwitch.y) / (float(mat2x3(cos(0.0), (float(mat4x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0))), 0.0, 0.0, (injectionSwitch.x), 1.0)))), (false ? (- 952.404) : (injectionSwitch.y) / (float(mat2x3(cos(0.0), (float(mat4x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0))), 0.0, 0.0, (injectionSwitch.x), 1.0)))))))))) / 1.0)))))), ((injectionSwitch.x < injectionSwitch.y)), true)))))))))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    return;
   return;
  }
 if((((injectionSwitch.x > (((((vec2(0.0, 0.0) + (injectionSwitch))) * mat2(1.0))) + sin(vec2(0.0, 0.0))).y))))
  {
   if((false))
    return;
   return;
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if((false))
    {
     if((false))
      return;
     if((false))
      return;
     if(((false || (((injectionSwitch.x > injectionSwitch.y))))))
      return;
     return;
    }
   if((((! (! (((! (((! (injectionSwitch.x > injectionSwitch.y)) && true))))))))))
    return;
   return;
  }
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  return;
 uint subgroup_size = gl_SubgroupSize;
 if(((((((injectionSwitch.x < injectionSwitch.y)) && ((max((min(injectionSwitch, (clamp(((((vec2(mat2((true ? injectionSwitch : (injectionSwitch)), 0.0, 0.0)))) * vec2(1.0, 1.0))), (min(injectionSwitch, injectionSwitch)), injectionSwitch)))), ((injectionSwitch) / vec2(1.0, 1.0)))).x > injectionSwitch.y))))))
  return;
 if((((injectionSwitch.x > (min((mix(vec2(((mix(float(((- 92.47) * 1.0)), float((656.925)), bool(false)))), (89.70)), ((vec2((injectionSwitch)[0], (injectionSwitch)[1])) - sqrt(vec2(0.0, 0.0))), bvec2(true, (false || ((false || (true))))))).y, ((injectionSwitch.y) / 1.0)))))))
  {
   if((((((false) || false)) || false)))
    return;
   if((false))
    return;
   if((false))
    return;
   return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if(((! (! (false)))))
    {
     if((false))
      return;
     return;
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((false))
  return;
 if(((! (! (false)))))
  return;
 if((((((mix(vec2((vec2(mat4(injectionSwitch, 0.0, 1.0, 1.0, sin(0.0), 0.0, (0.0 + (0.0)), 1.0, (max(1.0, 1.0)), 1.0, 1.0, exp(0.0), 0.0, 0.0, 1.0)))[0], (vec2(mat4(injectionSwitch, 0.0, 1.0, 1.0, sin(0.0), 0.0, (((0.0 + (0.0))) - 0.0), 1.0, 1.0, 1.0, 1.0, exp(0.0), 0.0, 0.0, 1.0)))[1]), vec2((4103.0981), (- 90.07)), bvec2(false, false)))).x > injectionSwitch.y))))
  {
   if((false))
    return;
   if(((((! (! ((((min((mix(float((7899.9030)), float(injectionSwitch.x), bool(true))), injectionSwitch.x)) > injectionSwitch.y) || false))))))))
    return;
   if((false))
    return;
   return;
   if((false))
    {
     if((false))
      return;
     return;
    }
   if((! (! (((((bool((bvec2(bvec3(bvec2(injectionSwitch.x > injectionSwitch.y, true), false))))))))))))
    return;
  }
 if((((injectionSwitch.x > (min(injectionSwitch.y, (mix(vec2((injectionSwitch)[0], (- 75.23)), vec2((- 900.339), (injectionSwitch)[1]), bvec2(false, true))).y))))))
  return;
 if(((((bool((bool(bool(bool(((((((mix(float((injectionSwitch.x)), (1.0 * (float((9.3)))), bool(false))) + 0.0) > injectionSwitch.y) || false)))))))))) || false)))
  {
   if((false))
    return;
   if((false))
    return;
   return;
   if((false))
    return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((((((injectionSwitch) - (clamp(sin(vec2(0.0, 0.0)), (vec2(vec2(sin(vec2(0.0, 0.0))))), ((true ? sin(vec2(0.0, 0.0)) : (vec2(- 1869.4461, 5.0))))))).x > (max((0.0 + (injectionSwitch.y)), injectionSwitch.y))))))
  return;
 if((false))
  return;
 if(((false || (false))))
  return;
 if((false))
  {
   if(((bool((bvec3((bvec3(bvec4(bvec3(bvec3(false, true, true)), true)))))))))
    return;
   return;
   if((false))
    return;
  }
 if((false))
  return;
 if(((bool(bvec4((((float(mat2x4((mix(float(injectionSwitch.x), float((7526.0273)), bool(false))), 1.0, 1.0, 1.0, sqrt(0.0), exp(0.0), 0.0, 1.0))) > injectionSwitch.y)), true, false, false)))))
  return;
 uint num_workgroup = gl_NumWorkGroups.x;
 if((((((injectionSwitch.x > injectionSwitch.y)))) || ((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((((((! (! ((injectionSwitch.x > (clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y) || false))))))))
  return;
 if(((((true && ((! (! ((! ((bool((bool(bvec3(bool(! (false)), false, false)))))))))))))) && ((injectionSwitch.x < injectionSwitch.y))))
  {
   if((false))
    return;
   return;
  }
 if((false))
  {
   if((false))
    return;
   if((((injectionSwitch.x > (((float((mix(vec3((- 71.84), (1299.4516), (4.6)), vec3((vec3((mix(float(injectionSwitch.y), float((- 1.1)), bool(false))), 0.0, 0.0))[0], (vec3((mix(float(injectionSwitch.y), float((- 1.1)), bool(false))), 0.0, 0.0))[1], (mix(float((- 23.21)), float((vec3((mix(float(injectionSwitch.y), float((- 1.1)), bool(false))), 0.0, 0.0))[2]), bool(true)))), bvec3(true, true, true))))) * 1.0))))))
    {
     if((false))
      return;
     if((false))
      {
       if((((((((injectionSwitch.x > (max((mix(vec2((- 42.50), (injectionSwitch)[1]), vec2((injectionSwitch)[0], (- 1733.3489)), bvec2(((injectionSwitch.x < injectionSwitch.y)), false))), injectionSwitch)).y)))) && true)) && true))
        return;
       return;
      }
     return;
    }
   return;
  }
 if((bool(bvec2((false), true))))
  {
   if((false))
    return;
   return;
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if((false))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if(((((! (! (injectionSwitch.x > injectionSwitch.y)))))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((false) && ((true) || false))))
      return;
     return;
    }
   if(((! (! (false)))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
  {
   if((false))
    return;
   return;
   if((false))
    return;
   if((((injectionSwitch.x > (vec2((mat2x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat2x3(injectionSwitch, 0.0, 1.0, log(1.0), 1.0))))).y))))
    return;
   if((false))
    {
     if((false))
      return;
     return;
    }
  }
 if(((bool(bool(false)))))
  return;
 uint workgroup_base = workgroup_size * workgroup_id;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((((false) || false)))
  return;
 if((((false)) || false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     return;
     if(((true && (false))))
      return;
    }
   return;
  }
 if((false))
  return;
 if((((((true ? injectionSwitch.x : (refract(7.8, refract(6330.7786, 81.53, 1824.3007), - 6.9)))) > injectionSwitch.y))))
  {
   if((false))
    return;
   return;
  }
 if((false || ((false || ((((bool(bool((false)))) || false)))))))
  {
   if((false))
    return;
   return;
  }
 if((false))
  {
   if((! (! ((false)))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   return;
  }
 if(((bool(bvec4(false, false, true, true)))))
  return;
 if(((true && ((! (! ((! (((! (false)) && ((injectionSwitch.x < injectionSwitch.y))))))))))))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    return;
   return;
  }
 if((false))
  return;
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if(((((clamp((clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
    {
     if(((false || (false))))
      return;
     return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
   if((false))
    return;
  }
 uint virtual_gid = (((min(workgroup_base + subgroup_id * (clamp(subgroup_size, (max(((subgroup_size) | (subgroup_size)), (1u * (subgroup_size)))), (max(subgroup_size, subgroup_size)))), workgroup_base + subgroup_id * (clamp(subgroup_size, (max(subgroup_size, subgroup_size)), (max(subgroup_size, subgroup_size)))))) ^ (0u ^ 0u))) + subgroup_local_id;
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if(((true && (((injectionSwitch.x > injectionSwitch.y))))))
    return;
   return;
   if(((true && (bool(((bool((((injectionSwitch.x > (min(injectionSwitch.y, injectionSwitch.y))))))) || false))))))
    {
     if((((false || ((injectionSwitch.x > ((injectionSwitch) + vec2(0.0, 0.0)).y))))))
      return;
     return;
     if((false))
      return;
    }
  }
 if(((bool((bvec2(bvec2((bvec2(bvec3(bvec2((true && (((injectionSwitch.x > injectionSwitch.y)))), false), true))))))))))
  return;
 if(((true && (false))))
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(((! (! (false)))))
    return;
   return;
  }
 if((false))
  {
   if((false))
    return;
   return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    {
     if((false))
      return;
     return;
    }
   if((((false)) || false))
    return;
   return;
   if((false))
    return;
  }
 atomicStore(write_val, uint(virtual_gid), (~ ((clamp(~ ((((max(((4) | (4)), 4))) | (4))), ~ ((((min(4, ((4) | 0)))) | (4))), ~ (((4) | (4))))))), 64, 0);
 if(((((clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
  return;
 if((! (! ((! (! ((false))))))))
  {
   if((false))
    return;
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if(((bool(bvec4((bool(bvec2(((injectionSwitch.x > injectionSwitch.y)), false))), true, false, true)))))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        return;
       return;
      }
     return;
    }
   return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if((false))
  return;
 if(((! (((! (! (bool(bvec4(! ((((injectionSwitch.x > (clamp(((injectionSwitch.y) * 1.0), injectionSwitch.y, (clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))))) || ((false || (false))))), false, false, false))))))))))
  return;
 ((buf[virtual_gid] = uint(subgroupAllEqual(write_val))) + (((((max(((uint(((uint(((0u << (uint(5u))) ^ (~ (~ ((min(0u, 0u)))))))) >> 0u))) ^ 0u), ((uint(((uint(((0u << (uint(5u))) ^ (~ (~ ((min(0u, 0u)))))))) >> 0u))) ^ 0u)))) | (uint(uint(((((1u * (uint(((true ? uvec3(0u << (uint(5u)), uint((injectionSwitch.y)), 0u) : (uvec3(186980u, 132298u, 150528u))))))))) ^ 0u))))))));
 if((false))
  return;
 if((false))
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   return;
  }
 if((false))
  return;
 if(((((0.0 + ((max(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y))))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    return;
   return;
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
