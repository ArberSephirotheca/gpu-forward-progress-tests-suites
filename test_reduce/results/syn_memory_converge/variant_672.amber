#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if((false))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = (((((((true ? (((((((false)) || false)) && true) && true) ? (write_val) : ((max(uint(uvec4((((((clamp((uvec3(0u, 0u, 0u) + (gl_NumWorkGroups)).x, gl_NumWorkGroups.x, gl_NumWorkGroups.x)))) ^ 0u) / 1u), 1u, 1u, 0u)), uint(uvec4((min((uint((uvec3(uvec3(uvec3(((((((min(clamp(gl_NumWorkGroups.x, gl_NumWorkGroups.x, gl_NumWorkGroups.x), clamp(gl_NumWorkGroups.x, gl_NumWorkGroups.x, gl_NumWorkGroups.x)))))) ^ 0u) / 1u), 0u, 0u)))))), (((((clamp(gl_NumWorkGroups.x, gl_NumWorkGroups.x, gl_NumWorkGroups.x)))) ^ 0u) / 1u))), 1u, 1u, 0u)))))) : (70305u)) / 1u)) << 0u))));
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = workgroup_base + ((subgroup_id) | (((false ? (workgroup_size) : subgroup_id)))) * subgroup_size + subgroup_local_id;
 atomicStore(write_val, (min((min((max(uint(virtual_gid), uint((min(virtual_gid, virtual_gid))))), uint(virtual_gid))), (((min((max(uint(virtual_gid), uint((0u ^ ((((min(virtual_gid, virtual_gid))) + 0u)))))), uint(virtual_gid)))) - 0u))), 4, 64, 0);
 if((bool(bool(((bool((bvec2(bvec3(bvec2((bool(bvec4(false, ((injectionSwitch.x < injectionSwitch.y)), ((injectionSwitch.x > injectionSwitch.y)), false))), false), true))))))))))
  barrier();
 ((buf[virtual_gid] = uint(subgroupAllEqual(write_val))) << 0u);
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
