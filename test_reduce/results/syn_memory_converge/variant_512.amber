#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  return;
 if((false))
  return;
 uint subgroup_id = gl_SubgroupID;
 if((false))
  {
   if((false))
    return;
   return;
  }
 if((false))
  return;
 uint subgroup_size = gl_SubgroupSize;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if(((! (! (false)))))
    {
     if(((bool(bvec2((true && (((injectionSwitch.x > injectionSwitch.y)))), false)))))
      return;
     if((((false) && true)))
      return;
     return;
     if((false))
      {
       if((false))
        return;
       if((false))
        return;
       return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if((false))
    return;
   if((false))
    {
     if((false))
      return;
     return;
    }
   if((((((injectionSwitch.x) - 0.0) > (max(injectionSwitch.y, (mix(float((- 42.16)), float(injectionSwitch.y), bool(true)))))))))
    return;
   if((((injectionSwitch.x > (vec2(1.0, 1.0) * (injectionSwitch)).y))))
    return;
   if((false))
    {
     if((false))
      return;
     return;
    }
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
   if(((((! ((bool((true && (bool(! (((injectionSwitch.x > injectionSwitch.y)))))))))) || (false || ((false || (((((! (! (false))) || ((((((max((clamp(injectionSwitch.x, injectionSwitch.x, ((injectionSwitch.x) * 1.0))), injectionSwitch.x)) > injectionSwitch.y))) || false)))))))))) || false)))
    {
     if(((false || (((false) && true)))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     return;
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((false))
  return;
 uint num_workgroup = ((gl_NumWorkGroups.x) | (~ (~ ((((1u | ((uint(uvec3(max(0u, ((0u) + (0u << (clamp((uint(6u)), (uint(6u)), (uint(6u))))))), 1u, ((uint((injectionSwitch.y))) ^ 0u)))))) * (gl_NumWorkGroups.x)))))));
 if(((! ((bool((bool(bvec2(((((min((max(injectionSwitch.x, injectionSwitch.x)), (max(injectionSwitch.x, injectionSwitch.x)))) < injectionSwitch.y)) && (bool(! ((! (! (false))))))), true)))))))))
  return;
 if((false))
  return;
 if(((true && ((true && ((((max((max((mix(vec2(((min(injectionSwitch, injectionSwitch)))[0], (- 34.54)), vec2((2515.8470), (max(((min(injectionSwitch, injectionSwitch)))[1], ((min(injectionSwitch, injectionSwitch)))[1]))), bvec2(false, ((injectionSwitch.x < injectionSwitch.y))))).x, (mix(vec2(((min(injectionSwitch, injectionSwitch)))[0], (((- 34.54)) - 0.0)), vec2((2515.8470), (max(((min(injectionSwitch, injectionSwitch)))[((1) >> 0)], ((min(injectionSwitch, injectionSwitch)))[1]))), bvec2(false, ((injectionSwitch.x < injectionSwitch.y))))).x)), (mix(((vec2(((min(injectionSwitch, injectionSwitch)))[0], (- 34.54))) * vec2(1.0, 1.0)), vec2((2515.8470), (max(((min(injectionSwitch, injectionSwitch)))[1], ((min(injectionSwitch, injectionSwitch)))[1]))), bvec2(false, ((injectionSwitch.x < injectionSwitch.y))))).x)) > (vec2((mix(float((0.0 + (injectionSwitch[0]))), float((- 24.80)), bool(false))), injectionSwitch[1])).y))))))))
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((((((bool(((bvec3(bvec3(bvec3(bvec4(bvec3(! (! (((false)) && true)), true, true), true))))))))))) && ((((injectionSwitch.x < injectionSwitch.y))) && ((injectionSwitch.x < injectionSwitch.y)))))
      {
       if((false))
        return;
       return;
       if((((false) || false)))
        {
         if((false))
          return;
         return;
        }
      }
     return;
     if((false))
      return;
    }
   if((((((injectionSwitch.x > injectionSwitch.y)))) && true))
    return;
   return;
   if((false))
    return;
   if((false))
    return;
   if((false))
    {
     if(((((false || (((injectionSwitch.x > injectionSwitch.y))))) && true)))
      return;
     return;
    }
  }
 uint workgroup_size = ((true ? ((max(((uvec3(0u, ((((injectionSwitch.x < injectionSwitch.y)) ? 0u : (num_workgroup))), 0u)) | uvec3(0u, 0u, 0u)), ((uvec3(0u, ((((injectionSwitch.x < injectionSwitch.y)) ? 0u : (num_workgroup))), 0u)) | uvec3(0u, 0u, 0u)))) ^ ((uvec3(gl_WorkGroupSize[0], gl_WorkGroupSize[1], gl_WorkGroupSize[2])))) : (uvec3(123339u, 113231u, 180998u)))).x;
 if(((true && (bool(bvec4((false), false, true, false))))))
  return;
 if((false))
  return;
 if((false))
  {
   if((((injectionSwitch.x > (max(((false ? (distance(vec3(303.264, - 1063.1466, 4.3), vec3(- 5.3, 19.99, - 3.8))) : injectionSwitch.y)), injectionSwitch.y))))))
    return;
   return;
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  {
   if((false))
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     return;
    }
   return;
   if((false))
    return;
  }
 uint workgroup_base = (max(((workgroup_size) >> 0u), (~ (~ (workgroup_size))))) * workgroup_id;
 uint virtual_gid = workgroup_base + (0u | (((subgroup_id * subgroup_size)) << (0u << (uint(3u))))) + subgroup_local_id;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    return;
   return;
  }
 atomicStore(write_val, uint(virtual_gid), 4, 64, 0);
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 buf[virtual_gid] = uint(subgroupAllEqual((((((true && (((! (((! (bool(bvec3(true, false, (((injectionSwitch.x < injectionSwitch.y)) && (true))))))) && true))))) ? ((write_val) << (0u << (((false ? (num_workgroup) : uint(4u)))))) : (126013u)))) * 1u)));
 if(((! (! (((false) && true))))))
  {
   if((false))
    return;
   return;
  }
 if((false))
  return;
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
