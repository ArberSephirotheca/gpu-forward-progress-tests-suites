#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = (((uvec3(uvec3(((true ? ((((gl_WorkGroupID) - uvec3(0u, 0u, 0u))) | (((uvec3(0u, 0u, 0u) << (uvec3(7u)))) ^ uvec3(0u, 0u, 0u))) : ((uvec3(173203u, 58166u, 139599u))))))))) - uvec3((injectionSwitch.x), (injectionSwitch.x), (injectionSwitch.x))).x;
 uint workgroup_base = (((min(((false ? (0u | (((clamp(workgroup_size, workgroup_size, workgroup_size))))) : (((clamp(((false ? (write_val) : workgroup_size * workgroup_id)) | (((max(((false ? (write_val) : workgroup_size * workgroup_id)), ((false ? (write_val) : workgroup_size * workgroup_id)))) >> 0u)), ((false ? (((uint(uvec4((write_val), 0u, (13296u & 0u), 0u)))) ^ 0u) : workgroup_size * workgroup_id)) | ((((((false ? (((write_val)) << 0u) : (1u * ((min((clamp(workgroup_size, workgroup_size, workgroup_size)), (1u * (workgroup_size)))) * (~ (~ (workgroup_id))))))) - 0u)) >> 0u)), (((((injectionSwitch.x < injectionSwitch.y)) ? (max((max((((((max((((false ? (max((uint(uvec2((write_val), 1u))), (write_val))) : workgroup_size * workgroup_id)) | ((false ? (max((uint(uvec2((write_val), 1u))), (write_val))) : workgroup_size * workgroup_id))), (false ? (max((uint(uvec2((write_val), 1u))), (write_val))) : workgroup_size * workgroup_id)))) | (((true ? (((false ? (((uint(uvec4((write_val), 1u, ((1u << (uint(5u))) >> (uint(5u))), 0u)))) | 0u) : workgroup_size * workgroup_id)) >> 0u) : (num_workgroup))))) - 0u)), (((((false ? (max((uint(uvec2((write_val), 1u))), (((((write_val) - 0u)) ^ 0u)))) : workgroup_size * workgroup_id)) | (((true ? (((false ? (((uint(uvec4((write_val), 1u, ((1u << (uint(5u))) >> (uint(5u))), 0u)))) | 0u) : workgroup_size * workgroup_id)) >> 0u) : (num_workgroup))))) - 0u)))), (((((false ? (max((uint(uvec2((write_val), 1u))), (write_val))) : workgroup_size * workgroup_id)) | (((true ? (((false ? (((uint(uvec4((write_val), 1u, ((1u << (uint(5u))) >> (uint(5u))), 0u)))) | 0u) : workgroup_size * workgroup_id)) >> 0u) : (num_workgroup))))) - 0u)))) : (((min((num_workgroup), (num_workgroup)))) | (0u << (uint(8u)))))) | (((false ? (max((uint(uvec2((write_val), ((1u) + 0u)))), (write_val))) : workgroup_size * workgroup_id)) | (max((((true ? (((false ? (((uint(uvec4((write_val), 1u, ((1u << (uint(5u))) >> (uint(5u))), 0u)))) | 0u) : workgroup_size * workgroup_id)) >> 0u) : (num_workgroup)))), (((true ? (((false ? (((uint(uvec4((write_val), 1u, ((1u << (uint(5u))) >> (uint(5u))), 0u)))) | 0u) : workgroup_size * workgroup_id)) >> 0u) : (num_workgroup)))))))))))))), ((false ? (write_val) : workgroup_size * workgroup_id))))) << (0u ^ (((0u | (0u & ((max((((clamp(1u * ((0u | (158106u))), 1u * ((0u | (158106u))), (~ (~ (1u * ((~ (~ ((((0u | (158106u))) | ((0u | (158106u)))))))))))))) | ((clamp(1u * ((0u | (158106u))), 1u * ((0u | (158106u))), (~ (~ (1u * ((0u | (158106u)))))))))), (1u * ((clamp(1u * ((0u | (158106u))), 1u * ((0u | (158106u))), (~ (~ (((min((1u * ((0u | (158106u)))), (((1u * ((0u | (158106u))))) << 0u)))) | ((1u * ((0u | (158106u)))))))))))))))))))));
 uint virtual_gid = ((workgroup_base) + 0u) + (uint((uint(uvec2(uint(subgroup_id), 0u))))) * subgroup_size + subgroup_local_id;
 atomicStore(write_val, (min(uint(virtual_gid), uint(virtual_gid))), 4, 64, 0);
 buf[virtual_gid] = uint(subgroupAllEqual(write_val));
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
