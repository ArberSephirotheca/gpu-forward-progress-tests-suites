#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if(((false || (false))))
  {
   if((false))
    return;
   if((false))
    return;
   return;
   if(((((true && (bool(bvec4((false), true, true, false)))))) || false))
    return;
   if((((injectionSwitch.x > (clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))))
    return;
  }
 if(((bool(bool(false)))))
  return;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((((((((injectionSwitch.x > ((clamp(vec2(injectionSwitch[0], injectionSwitch[(min(1, (max(1, 1))))]), (vec2(vec4((min(vec2(injectionSwitch[0], injectionSwitch[(min(1, (max(1, 1))))]), vec2(injectionSwitch[0], injectionSwitch[(min(1, (max(1, 1))))]))), 0.0, determinant(mat2(cos(0.0), 0.0, sqrt(0.0), 1.0))))), vec2(injectionSwitch[0], injectionSwitch[(min(1, (max(1, (((int(((ivec3(((1) >> 0), int((injectionSwitch.x)), 1)) - ivec3(0, 0, 0)))) + 0))))))])))).y)) || false)) && true))))
  return;
 if((false))
  {
   if(((! (((! ((! ((bool(bvec3(! (false), false, (bool(bvec2((bool((false || (bool(true))))), true)))))))))) && true)))))
    return;
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 uint num_workgroup = ((true ? (max(gl_NumWorkGroups, (uvec3(0u, 0u, 0u) | ((((((true ? uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], gl_NumWorkGroups[2]) : (uvec3(27118u, 75770u, 189726u))))) | uvec3(0u, 0u, 0u))))))).x : (subgroup_local_id)));
 if((false))
  return;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = (~ (~ (((((((gl_WorkGroupID.x) / 1u)))) | ((((((((((uint(uint((~ (~ (gl_WorkGroupID.x)))))) << 0u))) / 1u)))) << 0u))) / 1u)));
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = ((((uint(uint((((true ? false ? ((num_workgroup)) : ((false ? (packUnorm2x16(injectionSwitch)) : workgroup_base)) + subgroup_id * subgroup_size : (subgroup_size)))))))) | 0u)) + ((((subgroup_local_id) | (subgroup_local_id))) / 1u);
 atomicStore(write_val, uint(virtual_gid), ((((0 ^ ((4))) ^ 0) / (1 ^ (0 ^ 0)))), 64, 0);
 buf[virtual_gid] = uint(subgroupAllEqual(write_val));
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
