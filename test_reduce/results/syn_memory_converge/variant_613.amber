#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if(((((((injectionSwitch.x > injectionSwitch.y)) || (! (! ((injectionSwitch.x > (vec2(mat2((clamp(injectionSwitch, injectionSwitch, (((min((vec2(vec3(injectionSwitch, 0.0))), (((vec2(vec3((max(injectionSwitch, (clamp(injectionSwitch, injectionSwitch, injectionSwitch)))), 0.0)))) * mat2(1.0))))) - sin(vec2(0.0, 0.0))))), sin(0.0), sqrt(1.0)))).y)))))))))
  return;
 if((! (! ((((injectionSwitch.x > (mix(float(injectionSwitch.y), float((202.431)), bool(false))))))))))
  {
   if(((! (! (! (((! ((false))) && true)))))))
    return;
   return;
  }
 uint subgroup_size = gl_SubgroupSize;
 if((false))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = (((uint(uvec2(gl_NumWorkGroups.x, 0u))) >> 0u));
 uint workgroup_size = (((((((uint((((((false ? (((uvec3(155143u, ((uint(((((uvec3((((0u << (uint(0u))) + (36731u))), 1u, 0u)) | ((min(uvec3((((0u << (uint(0u))) + (36731u))), 1u, 0u), uvec3((((0u << (uint(0u))) + (36731u))), 1u, 0u)))))) >> uvec3(0u, 0u, 0u)))) - ((true ? 0u : (subgroup_size)))), 152895u)) << uvec3(0u, 0u, 0u))) : uvec3(uvec3(uvec3(gl_WorkGroupSize.x, 0u, 0u)))) | uvec3(0u, 0u, 0u))))))))) | (((uint((((false ? (((uvec3(155143u, ((uint(((uvec3((((0u << (uint(0u))) + (36731u))), 1u, 0u)) | ((min(uvec3((((0u << (uint(0u))) + (36731u))), 1u, 0u), uvec3((((0u << (uint(0u))) + (36731u))), 1u, 0u))))))) - 0u), 152895u)) << uvec3(0u, 0u, 0u))) : uvec3(uvec3(uvec3(gl_WorkGroupSize.x, 0u, 0u))))))))))) / (((((min(1u, 1u)))) << 0u) | ((1u * ((false ? (subgroup_size) : ((0u | (1u)))))))))) | 0u);
 if(((bool(bvec2((((injectionSwitch.x < injectionSwitch.y)) && (((injectionSwitch.x > injectionSwitch.y)))), ((false || ((injectionSwitch.x < injectionSwitch.y)))))))))
  return;
 if((false))
  return;
 uint workgroup_id = ((((uvec3(0u, 0u, 0u) << (uvec3(1u))) ^ ((((uvec3(0u, 0u, 0u)) >> uvec3(0u, 0u, 0u)) ^ (gl_WorkGroupID))))) | uvec3(0u, 0u, 0u)).x;
 uint workgroup_base = workgroup_size * workgroup_id;
 if((((((injectionSwitch) - ((clamp(vec2(mat4x2(vec2(0.0, 0.0), 1.0, 0.0, 1.0, abs(0.0), 1.0, 0.0)), (mix(vec2((vec2(mat4x2(vec2(0.0, 0.0), 1.0, 0.0, 1.0, abs(0.0), 1.0, 0.0)))[0], (8215.8479)), vec2((7.4), (vec2(mat4x2(vec2(0.0, 0.0), 1.0, 0.0, 1.0, abs(0.0), 1.0, 0.0)))[1]), bvec2(false, true))), vec2(mat4x2(vec2(0.0, 0.0), 1.0, 0.0, 1.0, abs(0.0), 1.0, 0.0)))))).x > ((float((mat2x4(mat4(mat2x4((max(clamp(((mix(float((- 19.84)), float(clamp(injectionSwitch.y, injectionSwitch.y, ((injectionSwitch.y) + 0.0))), bool(true)))), injectionSwitch.y, injectionSwitch.y), clamp(injectionSwitch.y, ((false ? (mix(injectionSwitch, injectionSwitch, injectionSwitch)) : ((injectionSwitch) * mat2(1.0)))).y, injectionSwitch.y))), cos(0.0), 1.0, 0.0, 1.0, (injectionSwitch.x), (dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 1.0)))))))))))
  return;
 if((! ((bool(bvec4(bool(bvec4((! (((((vec2((float(mat2x3((float(mat3x4(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, (clamp(1.0, (max(1.0, 1.0)), (mix(float((- 83.33)), (mix(float((vec4(- 8.3, 2.6, 2.4, - 920.429).s)), float(float(1.0)), bool(true))), bool(true))))), 0.0, 1.0, 0.0))), (injectionSwitch.x), (0.0 + (1.0)), (dot(vec3(0.0, (dot(vec2(1.0, 1.0), vec2(((false ? (- 3.3) : 0.0)), 0.0))), 1.0), vec3(1.0, 1.0, 0.0))), (injectionSwitch.x), 0.0))), 1.0) * (max((((injectionSwitch) * mat2(1.0))), (clamp((((injectionSwitch) * mat2(1.0))), ((false ? (injectionSwitch) : (((((injectionSwitch) * mat2(1.0)))) - vec2(0.0, 0.0)))), (((min(((((false ? (vec2(- 91.54, 0.9)) : ((true ? (((((injectionSwitch.x < injectionSwitch.y)) ? ((vec2(vec2((((injectionSwitch)) / vec2(1.0, 1.0))))) / vec2(1.0, 1.0)) : (vec2(- 56.41, - 0.3))))) : (injectionSwitch))) * mat2(1.0))))), (mix(vec2((3360.0380), (8.1)), vec2((((((true ? (((vec2(vec2((injectionSwitch)))) / vec2(1.0, 1.0))) : (injectionSwitch))) * mat2(1.0))))[0], (((((true ? (((vec2(vec2((((((injectionSwitch)) * mat2(1.0))) - vec2(0.0, 0.0))))) / vec2(1.0, 1.0))) : (injectionSwitch))) * mat2(1.0))))[1]), bvec2(true, true)))))) / vec2(1.0, 1.0))))))).x > (clamp(((injectionSwitch) / vec2(1.0, 1.0)), injectionSwitch, injectionSwitch)).y))))), true, false, false)), true, false, false))))))
  return;
 uint virtual_gid = (((1u * (workgroup_base + subgroup_id * subgroup_size + subgroup_local_id))) * ((1u << (((uint(3u)) | 0u))) >> (uint((max(3u, ((((3u) >> 0u)) / 1u)))))));
 if((((((false || (bool((bvec2(bvec4(bvec2((((((bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, false))) || false))) && true), true), true, true)))))))))))
  return;
 atomicStore(write_val, uint(virtual_gid), 4, ((~ (~ (((0) | (clamp((0), (0), (0)))) ^ ((max(64, 64))))))), 0);
 buf[virtual_gid] = (0u + (uint(subgroupAllEqual(write_val))));
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
