#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  {
   if(((((false || (false))) || false)))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   barrier();
   if(((((((((false || (injectionSwitch.x > injectionSwitch.y)))) && (false || (true)))) || false))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     barrier();
    }
  }
 uint subgroup_id = gl_SubgroupID;
 if((false))
  {
   if((false))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 uint subgroup_size = gl_SubgroupSize;
 if(((((! ((! ((bool(bool(! ((! (! ((bool(bvec3(! ((((((bool(bool((((false || (bool(bool(bool(bvec2(((((injectionSwitch) + vec2(0.0, 0.0)).x > (mix(vec2((- 8.6), (injectionSwitch)[1]), vec2((injectionSwitch)[0], (3895.1164)), bvec2(true, false))).y)), true)))))))))))) || false)) && true)), false, true)))))))))))))) || false))))
  {
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   barrier();
   if((false))
    barrier();
  }
 if((false))
  barrier();
 if((! ((! (! ((bool(((bvec3(bvec3(bvec3(bvec4(bvec3((false || (! ((((bool(bvec2((((injectionSwitch.x > ((clamp(min(((((injectionSwitch.x > injectionSwitch.y)) ? (vec2(- 9.8, - 4.2)) : injectionSwitch)), (mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2((4238.0751), (- 2572.8188)), bvec2(false, false)))), min(((((injectionSwitch.x > injectionSwitch.y)) ? (vec2(- 9.8, - 4.2)) : injectionSwitch)), (mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2((4238.0751), (- 2572.8188)), bvec2(false, false)))), min(((((injectionSwitch.x > injectionSwitch.y)) ? (vec2(- 9.8, - 4.2)) : injectionSwitch)), (mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2((4238.0751), (- 2572.8188)), bvec2(false, false))))))).y))), false)))) && true)))), true, true), true))))))))))))))
  {
   if((false))
    barrier();
   barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(((bool(bvec4(false, ((false || (((mix(float((9126.0036)), float((max((mix(float((clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))), float((56.00)), bool(false))), injectionSwitch.x))), bool(true))) < injectionSwitch.y)))), true, true)))))
  barrier();
 if((false))
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(((false || (false))))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 uint num_workgroup = (min((clamp((min((0u | ((min(gl_NumWorkGroups, ((true ? gl_NumWorkGroups : (uvec3(39839u, (((min(77441u, 77441u))) | (77441u)), 58287u)))))).x)), (~ (((true ? ~ ((0u | ((((uvec3(uvec4((min((((false ? ((((uvec4(60070u, 144635u, 152658u, 44235u)) | (uvec4(60070u, 144635u, 152658u, 44235u)))[1] % ((uvec3(182974u, 193869u, 50152u)) | uvec3(0u, 0u, 0u)))) : (((((uvec3(0u, 0u, 0u) >> (uvec3(1u))) ^ (gl_NumWorkGroups)) << uvec3(0u, 0u, 0u)))) - uvec3(0u, 0u, 0u)))), gl_NumWorkGroups)) >> uvec3(0u, 0u, 0u), 1u))))).x))) : (subgroup_local_id))))))), (clamp((min((0u | ((min(gl_NumWorkGroups, ((((false ? (uvec3(8373u, 54969u, 168704u)) : (uvec3(0u, 0u, 0u) ^ (true ? gl_NumWorkGroups : (uvec3(39839u, ((((((77441u) | (77441u))) >> 0u)) / (1u & 1u)), 58287u)))))))))).x)), (~ (((true ? ~ ((0u | ((((uvec3(uvec4((min((((false ? ((uvec4(60070u, 144635u, 152658u, ((44235u) ^ 0u))[1] % ((uvec3(182974u, 193869u, 50152u)) | uvec3(0u, 0u, 0u)))) : (((((uvec3(0u, 0u, 0u) >> (uvec3(1u))) ^ (gl_NumWorkGroups)) << uvec3(0u, 0u, 0u)))) - uvec3(0u, 0u, 0u)))), gl_NumWorkGroups)) >> uvec3((min(0u, 0u)), 0u, 0u), 1u))))).x))) : (subgroup_local_id))))))), (min((0u | ((min(gl_NumWorkGroups, ((true ? gl_NumWorkGroups : (uvec3(39839u, ((77441u) | (77441u)), 58287u)))))).x)), (~ (((true ? ~ ((0u | ((((uvec3(uvec4((min((((false ? (uvec3(61559u, 169686u, 56488u)) : ((false ? ((uvec4(60070u, 144635u, 152658u, 44235u)[1] % ((uvec3(182974u, 193869u, 50152u)) | uvec3(0u, 0u, 0u)))) : (((((uvec3(0u, 0u, 0u) >> (uvec3(1u))) ^ (gl_NumWorkGroups)) << uvec3(0u, 0u, 0u)))) - uvec3(0u, 0u, 0u)))))), gl_NumWorkGroups)) >> uvec3(0u, 0u, 0u), 1u))))).x))) : (subgroup_local_id))))))), (min((0u | ((min(gl_NumWorkGroups, ((((true) && true) ? gl_NumWorkGroups : (uvec3(39839u, ((77441u) | (77441u)), 58287u)))))).x)), (~ (((true ? ~ ((0u | ((((uvec3((~ (~ (((uvec4((min((((false ? ((uvec4(60070u, 144635u, 152658u, 44235u)[1] % ((uvec3(182974u, 193869u, 50152u)) | uvec3(0u, 0u, 0u)))) : (max((((((uvec3(0u, 0u, 0u) >> (uvec3(1u))) ^ (gl_NumWorkGroups)) << uvec3(0u, 0u, 0u)))), (((((uvec3(0u, 0u, 0u) >> (uvec3(1u))) ^ (gl_NumWorkGroups)) << uvec3(0u, 0u, 0u)))))) - uvec3(0u, 0u, 0u)))), gl_NumWorkGroups)) >> uvec3(0u, 0u, 0u), 1u)) << uvec4(0u, 0u, 0u, 0u))))))))).x))) : (subgroup_local_id))))))))), (min((0u | ((min(gl_NumWorkGroups, ((true ? gl_NumWorkGroups : (uvec3(39839u, ((77441u) | (77441u)), 58287u)))))).x)), (~ (((true ? ((~ ((0u | ((((uvec3(uvec4((min((((false ? ((uvec4(60070u, 144635u, 152658u, 44235u)[1] % ((uvec3(182974u, 193869u, 50152u)) | uvec3(0u, 0u, 0u)))) : (((((uvec3(0u, 0u, 0u) >> (uvec3(1u))) ^ (gl_NumWorkGroups)) << uvec3(0u, 0u, 0u)))) - uvec3(0u, 0u, 0u)))), gl_NumWorkGroups)) >> uvec3(0u, 0u, 0u), 1u))))).x)))) << 0u) : (subgroup_local_id))))))))), gl_NumWorkGroups.x));
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 if(((((! (! (((bool(bvec4((false || (bool(bvec2(false, true)))), (true && (true)), true, true)))))))) && ((injectionSwitch.x < injectionSwitch.y)))))
  barrier();
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   barrier();
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(((((mix(float(injectionSwitch.x), float(((+ 5308.2906))), bool(false))) > injectionSwitch.y))))
  barrier();
 if((false || ((! (((! ((false)))) && true)))))
  barrier();
 if((! (! ((false)))))
  barrier();
 if((false))
  barrier();
 uint workgroup_base = (min(workgroup_size, workgroup_size)) * workgroup_id;
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((((((injectionSwitch.x > injectionSwitch.y))) && true)))
  barrier();
 if((false))
  barrier();
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + (((~ (~ (subgroup_local_id)))) ^ 0u);
 if(((((false || (false))) || false)))
  barrier();
 if((((((injectionSwitch.x > injectionSwitch.y) && true)))))
  {
   if((((injectionSwitch.x > (clamp(injectionSwitch, (clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)).y))))
    barrier();
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
 atomicStore(write_val, ((((1u * (clamp(uint((~ (~ (virtual_gid)))), uint((min(virtual_gid, (max(virtual_gid, (0u | (virtual_gid))))))), ((uint(virtual_gid)) + 0u)))))) | (clamp((((uint(virtual_gid))) >> 0u), (0u ^ ((uint((0u + (virtual_gid)))))), (((uint(virtual_gid))) | 0u)))), 4, 64, 0);
 if((false || (((((((! (! ((! (! (((! (! ((false) || false)))))))))))) && true)) && (! (! ((bool(bvec4(true, false, false, true))))))))))
  {
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   barrier();
  }
 if((! (! ((false)))))
  {
   if((false))
    barrier();
   barrier();
  }
 buf[virtual_gid] = (0u + (uint(subgroupAllEqual(write_val))));
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
