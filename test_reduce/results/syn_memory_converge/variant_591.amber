#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    return;
   for(int _injected_loop_counter = (0 ^ 0); _injected_loop_counter < 1; _injected_loop_counter ++)
    {
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      continue;
    }
  }
 if(((injectionSwitch.x < injectionSwitch.y)))
  {
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
   if((false))
    barrier();
  }
 for(int _injected_loop_counter = ((1 << (int(2))) >> (int(2))); _injected_loop_counter > 0; _injected_loop_counter --)
  {
   if((false))
    barrier();
   do
    {
     if((false))
      barrier();
     do
      {
       if((false))
        barrier();
       if(((! (((! (false || ((((injectionSwitch.x > injectionSwitch.y)))))) || false)))))
        {
         if(true)
          {
           if(true)
            {
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
              }
             else
              {
               barrier();
              }
            }
           else
            {
             if((false))
              continue;
            }
          }
         else
          {
          }
        }
       if((false))
        return;
       if((false))
        continue;
       for(int _injected_loop_counter = 0; _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
        {
         if((false))
          continue;
         if((false))
          barrier();
         if((false))
          continue;
        }
       if((false))
        break;
       if((false))
        continue;
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
      }
     while(false);
     if((false))
      barrier();
    }
   while(false);
  }
 if((false))
  return;
 uint subgroup_size = gl_SubgroupSize;
 for(int _injected_loop_counter = (((((1 & 1) << (int(7))) >> (int(7))) << (int(2))) >> (int(2))); _injected_loop_counter != (0 >> (int(6))); _injected_loop_counter --)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      break;
     if((((injectionSwitch.x > injectionSwitch.y))))
      break;
     return;
     if((false))
      return;
    }
   if((false))
    break;
   if((((injectionSwitch.x > injectionSwitch.y))))
    continue;
  }
 if((! ((! ((true && (! (! ((false || (((injectionSwitch.x < injectionSwitch.y)))))))))))))
  {
   for(int _injected_loop_counter = (0 | (0 << ((clamp(int(8), int(8), int(8)))))); _injected_loop_counter < 1; _injected_loop_counter ++)
    {
     if(false)
      {
       if(false)
        {
         if((false))
          continue;
         if((false))
          barrier();
         if((false))
          barrier();
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
        }
      }
     else
      {
       if((bool(bvec4((false || (false)), true, true, true))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
         if((false))
          {
           for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > (((0 >> (int(6)))) >> 0); _injected_loop_counter --)
            {
             if((false))
              {
               if(((false || (false))))
                break;
               barrier();
              }
             if((false))
              continue;
             if(false)
              {
              }
             else
              {
               do
                {
                 if(false)
                  {
                   if((false))
                    barrier();
                   if((false))
                    break;
                  }
                 else
                  {
                   barrier();
                   if((false))
                    continue;
                  }
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               while((bool(bool(false))));
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             if((false))
              {
               if((false))
                break;
               return;
              }
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if((((injectionSwitch.x > (mix(float((- 4.3)), float((min(injectionSwitch.y, injectionSwitch.y))), bool(true)))))))
          continue;
        }
       for(int _injected_loop_counter = ((int((injectionSwitch.x)) + ((int((injectionSwitch.x))) / 1))); _injected_loop_counter < ((1 << ((max(int(5), ((int(5)) / 1))))) >> (int(5))); _injected_loop_counter ++)
        {
         if((false))
          continue;
         if(((! ((! (! (! ((bool(bvec4(bool(bvec2(true, false)), true, false, true)))))))))))
          {
           if(true)
            {
             if((false))
              continue;
             if((false))
              {
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  break;
                 barrier();
                }
               break;
              }
             if(false)
              {
               if((false))
                continue;
              }
             else
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((false))
                  {
                   if((false))
                    break;
                   break;
                  }
                 if((false))
                  continue;
                 if((false))
                  break;
                 if(false)
                  {
                  }
                 else
                  {
                   if(false)
                    {
                    }
                   else
                    {
                     if((false))
                      {
                       if((false))
                        return;
                       barrier();
                      }
                     barrier();
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      {
                       if((false))
                        {
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          continue;
                         if((false))
                          continue;
                         barrier();
                         if((false))
                          return;
                        }
                       if((false))
                        return;
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        continue;
                       barrier();
                      }
                    }
                   if((false))
                    break;
                  }
                 if((false))
                  {
                   if((false))
                    continue;
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    break;
                   if((false))
                    barrier();
                   continue;
                  }
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if((false))
                  return;
                }
               if((((false)) || false))
                {
                 if(false)
                  {
                   if((false))
                    return;
                   if((false))
                    return;
                   if((false))
                    {
                     if(false)
                      {
                      }
                     else
                      {
                       barrier();
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        {
                         if(((! (! (false)))))
                          return;
                         break;
                        }
                      }
                     if((false))
                      continue;
                    }
                  }
                 else
                  {
                   if(true)
                    {
                     if(true)
                      {
                       if((false))
                        {
                         if((false))
                          continue;
                         if((((true && ((injectionSwitch.x > injectionSwitch.y))))))
                          barrier();
                         if(false)
                          {
                           if((false))
                            barrier();
                          }
                         else
                          {
                           barrier();
                           if((! ((bool((bvec2(bvec2(bvec2(! ((((injectionSwitch.x > injectionSwitch.y)))), true)))))))))
                            continue;
                          }
                        }
                       if((false))
                        break;
                       if((false))
                        continue;
                       if(((! (! (false)))))
                        {
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                         break;
                         if((false))
                          continue;
                        }
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        {
                         do
                          {
                           if(false)
                            {
                            }
                           else
                            {
                             if((false))
                              continue;
                             if((false))
                              {
                               if((false))
                                continue;
                               break;
                              }
                             if(true)
                              {
                               if((false))
                                {
                                 if((false))
                                  {
                                   if((false))
                                    return;
                                   return;
                                  }
                                 barrier();
                                 if(((false || (false))))
                                  return;
                                }
                               barrier();
                               if((false))
                                return;
                               if((false))
                                {
                                 if(((false || (false))))
                                  {
                                   if((false))
                                    break;
                                   barrier();
                                  }
                                 barrier();
                                }
                              }
                             else
                              {
                              }
                            }
                          }
                         while(false);
                        }
                       do
                        {
                         if((((false) || false)))
                          return;
                         if((false))
                          continue;
                        }
                       while(false);
                       if((false))
                        break;
                       if((false))
                        break;
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        {
                         if((false))
                          break;
                         barrier();
                        }
                      }
                     else
                      {
                       if((((false) || false)))
                        continue;
                      }
                     if((false))
                      continue;
                    }
                   else
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      {
                       if((false))
                        return;
                       continue;
                      }
                     if((false))
                      return;
                     if((false))
                      {
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        continue;
                       if((true && ((! ((! (! (! ((bool(bvec2((false), false))))))))))))
                        return;
                       if((false))
                        {
                         if(((injectionSwitch.x < injectionSwitch.y)))
                          {
                           if((((injectionSwitch.x > injectionSwitch.y))))
                            return;
                           if(((injectionSwitch.x < injectionSwitch.y)))
                            {
                             if((((false) || ((injectionSwitch.x > injectionSwitch.y)))))
                              barrier();
                             barrier();
                             if(((! (! ((((false || (false)))) || false)))))
                              {
                               if((false))
                                break;
                               if((false))
                                break;
                               barrier();
                              }
                            }
                           else
                            {
                            }
                           if(((! (! (false)))))
                            {
                             if(((bool(bvec3(((injectionSwitch.x > injectionSwitch.y)), false, false)))))
                              continue;
                             if((((injectionSwitch.x > injectionSwitch.y))))
                              {
                               if((((injectionSwitch.x > injectionSwitch.y))))
                                break;
                               barrier();
                              }
                             return;
                            }
                          }
                         else
                          {
                          }
                         if((false))
                          {
                           if((((injectionSwitch.x > injectionSwitch.y))))
                            return;
                           break;
                          }
                        }
                       if((false))
                        continue;
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        {
                         if(((bool(bvec2(false, ((injectionSwitch.x < injectionSwitch.y)))))))
                          return;
                         continue;
                        }
                       for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
                        {
                         for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                          {
                           if((((injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                           if((false))
                            continue;
                           if((((injectionSwitch.x > injectionSwitch.y))))
                            return;
                           return;
                           if((false))
                            break;
                          }
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          continue;
                        }
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        {
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          break;
                         barrier();
                        }
                       if((false))
                        continue;
                       if((false))
                        barrier();
                      }
                     if((false))
                      return;
                    }
                  }
                 if(true)
                  {
                   for(int _injected_loop_counter = (int(ivec4(1, 1, 1, 0))); _injected_loop_counter != (0 >> (int(4))); _injected_loop_counter --)
                    {
                     if((false))
                      {
                       if((((injectionSwitch.x > (vec2(injectionSwitch[0], injectionSwitch[1])).y))))
                        continue;
                       return;
                      }
                    }
                  }
                 else
                  {
                  }
                 for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    {
                     if((false))
                      break;
                     break;
                    }
                   for(int _injected_loop_counter = (0 << (int(5))); _injected_loop_counter != 1; _injected_loop_counter ++)
                    {
                     if(true)
                      {
                       for(int _injected_loop_counter = 1; _injected_loop_counter > (0 ^ 0); _injected_loop_counter --)
                        {
                         if(false)
                          {
                           if((((injectionSwitch.x > injectionSwitch.y))))
                            continue;
                           if((false))
                            return;
                          }
                         else
                          {
                           do
                            {
                             if(true)
                              {
                               do
                                {
                                 if((false))
                                  continue;
                                 if((((injectionSwitch.x > injectionSwitch.y))))
                                  {
                                   if((((injectionSwitch.x > injectionSwitch.y))))
                                    continue;
                                   barrier();
                                  }
                                 if((((injectionSwitch.x > injectionSwitch.y))))
                                  continue;
                                 barrier();
                                }
                               while(((((injectionSwitch) / vec2(1.0, 1.0)).x > (((mat2(1.0) * (injectionSwitch))) - vec2(0.0, 0.0)).y)));
                              }
                             else
                              {
                               if((((injectionSwitch.x > injectionSwitch.y))))
                                continue;
                               if((false))
                                barrier();
                              }
                             if((false))
                              break;
                            }
                           while(false);
                           if((false))
                            return;
                          }
                         if((false))
                          {
                           if((false))
                            continue;
                           barrier();
                          }
                        }
                      }
                     else
                      {
                       if((false))
                        return;
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                      }
                     if((false))
                      return;
                    }
                   if((false))
                    {
                     if((false))
                      {
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        continue;
                       barrier();
                      }
                     continue;
                    }
                   if((false))
                    {
                     if((false))
                      break;
                     for(int _injected_loop_counter = (int((injectionSwitch.x)) << (int(8))); _injected_loop_counter != 1; _injected_loop_counter ++)
                      {
                       if((false))
                        break;
                       return;
                       if((false))
                        continue;
                      }
                    }
                  }
                 if(((((injectionSwitch.x < injectionSwitch.y))) || false))
                  {
                   if((false))
                    barrier();
                  }
                 else
                  {
                   if((false))
                    break;
                  }
                 do
                  {
                   if(((false || (false))))
                    {
                     if(false)
                      {
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        continue;
                      }
                     else
                      {
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        return;
                       if((((((injectionSwitch.x > injectionSwitch.y)) && true))))
                        barrier();
                      }
                     if(((injectionSwitch.x > injectionSwitch.y)))
                      {
                      }
                     else
                      {
                       do
                        {
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          return;
                         if(true)
                          {
                           if((false))
                            {
                             do
                              {
                               if(true)
                                {
                                 barrier();
                                }
                               else
                                {
                                }
                              }
                             while(false);
                            }
                           if((false))
                            continue;
                           if((((injectionSwitch.x > injectionSwitch.y))))
                            continue;
                           for(int _injected_loop_counter = 0; _injected_loop_counter != ((1 << (int(6))) >> (int(6))); _injected_loop_counter ++)
                            {
                             return;
                             if((((injectionSwitch.x > injectionSwitch.y))))
                              {
                               if(((((bool(bool(false))))) && true))
                                continue;
                               barrier();
                              }
                            }
                           if((((injectionSwitch.x > injectionSwitch.y))))
                            {
                             if((false))
                              barrier();
                             if((((! ((! (! (! ((injectionSwitch.x > injectionSwitch.y))))))))))
                              barrier();
                             if((false))
                              continue;
                             if((false))
                              {
                               if(((injectionSwitch.x < injectionSwitch.y)))
                                {
                                 if((false))
                                  break;
                                 return;
                                }
                               else
                                {
                                 if((false))
                                  return;
                                 if((false))
                                  barrier();
                                 if((((injectionSwitch.x > injectionSwitch.y))))
                                  return;
                                }
                               if((((injectionSwitch.x > injectionSwitch.y))))
                                return;
                              }
                             if((false))
                              {
                               if((false))
                                {
                                 if((((injectionSwitch.x > injectionSwitch.y))))
                                  return;
                                 break;
                                }
                               if(false)
                                {
                                }
                               else
                                {
                                 barrier();
                                }
                              }
                             if((false))
                              {
                               if((false))
                                return;
                               return;
                              }
                             do
                              {
                               if(((injectionSwitch.x < injectionSwitch.y)))
                                {
                                 do
                                  {
                                   barrier();
                                  }
                                 while(((injectionSwitch.x > injectionSwitch.y)));
                                 if((false))
                                  return;
                                 if((false))
                                  continue;
                                }
                               else
                                {
                                 if((false))
                                  {
                                   if(((injectionSwitch.x > injectionSwitch.y)))
                                    {
                                    }
                                   else
                                    {
                                     for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
                                      {
                                       if((false))
                                        barrier();
                                       barrier();
                                       if((true && ((false))))
                                        barrier();
                                       if((false))
                                        continue;
                                      }
                                     if((((injectionSwitch.x > injectionSwitch.y))))
                                      break;
                                     if((false))
                                      return;
                                    }
                                  }
                                 if((false))
                                  {
                                   if((false))
                                    break;
                                   return;
                                  }
                                 if((false))
                                  {
                                   if((false))
                                    break;
                                   continue;
                                  }
                                }
                              }
                             while(false);
                            }
                          }
                         else
                          {
                          }
                        }
                       while((! (! (((true && (bool(bvec4(false, true, true, true)))))))));
                      }
                     if(((false || (((((injectionSwitch.x > injectionSwitch.y))) || false)))))
                      {
                       if((false))
                        continue;
                       continue;
                      }
                    }
                   if((false))
                    {
                     if((false))
                      continue;
                     continue;
                    }
                   if((false))
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      break;
                     continue;
                     if((false))
                      break;
                    }
                   if((false))
                    {
                     if((false))
                      {
                       do
                        {
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          {
                           do
                            {
                             return;
                            }
                           while(false);
                           if((((injectionSwitch.x > injectionSwitch.y))))
                            return;
                          }
                        }
                       while(((injectionSwitch.x > injectionSwitch.y)));
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        continue;
                       if((false))
                        {
                         if((false))
                          break;
                         return;
                        }
                       barrier();
                      }
                     if((false))
                      break;
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      break;
                     if((bool(bvec4((bool(bvec3((((((injectionSwitch.x > injectionSwitch.y)))) && true), true, false))), false, ((injectionSwitch.x > injectionSwitch.y)), true))))
                      break;
                     break;
                    }
                  }
                 while(false);
                 if((false))
                  continue;
                 if((false))
                  {
                   if((false))
                    break;
                   barrier();
                  }
                 if((false))
                  {
                   if((false))
                    break;
                   do
                    {
                     if((false))
                      barrier();
                     if((false))
                      {
                       if((false))
                        {
                         if((false))
                          barrier();
                         return;
                        }
                       barrier();
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       if((false))
                        continue;
                      }
                     if((false))
                      return;
                     barrier();
                     if((false))
                      continue;
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      continue;
                    }
                   while((! (! (false))));
                   if((false))
                    {
                     if((false))
                      continue;
                     continue;
                    }
                  }
                 if((false))
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    return;
                   if((false))
                    continue;
                   return;
                   if(((true && (((injectionSwitch.x > injectionSwitch.y))))))
                    barrier();
                   if(((true && (false))))
                    continue;
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    continue;
                  }
                 if((false))
                  break;
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if((false))
                    {
                     if(((injectionSwitch.x > injectionSwitch.y)))
                      {
                      }
                     else
                      {
                       barrier();
                      }
                    }
                   break;
                  }
                 if((false))
                  break;
                 if((false))
                  break;
                 if((((! (! (bool(bvec4((! (! (((injectionSwitch.x > injectionSwitch.y))))), false, true, true))))))))
                  break;
                 if((false))
                  continue;
                }
               if(((injectionSwitch.x < injectionSwitch.y)))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 if(false)
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if((false))
                    break;
                   if(((false || (false))))
                    {
                     if((false))
                      continue;
                     return;
                    }
                  }
                 else
                  {
                   if((false))
                    continue;
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(true)
                      {
                       return;
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        return;
                      }
                     else
                      {
                      }
                     if((((((injectionSwitch.x > injectionSwitch.y) && true)))))
                      break;
                    }
                  }
                 if((false))
                  barrier();
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  continue;
                }
               else
                {
                }
               if(((true && ((! (! (false)))))))
                continue;
               if(((bool((bvec3(bvec3(bvec3(((injectionSwitch.x > injectionSwitch.y)), false, false))))))))
                {
                 if((false))
                  break;
                 return;
                }
               if((false))
                break;
               if((false))
                {
                 if((false))
                  continue;
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if((false))
                    break;
                   barrier();
                  }
                 break;
                 if((false))
                  continue;
                }
              }
            }
           else
            {
             for(int _injected_loop_counter = ((1 << (int(0))) >> (int(0))); _injected_loop_counter != 0; _injected_loop_counter --)
              {
               if((false))
                {
                 if((false))
                  barrier();
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if((false))
                    break;
                   continue;
                  }
                 barrier();
                }
               if((((false) || false)))
                {
                 if(((true && (((injectionSwitch.x > injectionSwitch.y))))))
                  barrier();
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  break;
                 for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > 0; ((((_injected_loop_counter --) ^ (0 >> (int(5))))) << 0))
                  {
                   for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
                    {
                     barrier();
                     if((false))
                      {
                       if((false))
                        continue;
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        break;
                       break;
                      }
                    }
                  }
                 if((false))
                  break;
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  break;
                }
               do
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if((false))
                    continue;
                   return;
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    break;
                  }
                 if((false))
                  barrier();
                 if((false))
                  {
                   if((false))
                    return;
                   if((false))
                    barrier();
                   for(int _injected_loop_counter = 0; (bool(bvec4((! (! (_injected_loop_counter < 1))), true, ((injectionSwitch.x > injectionSwitch.y)), false))); _injected_loop_counter ++)
                    {
                     return;
                    }
                  }
                 if(((bool(bvec4((bool(bvec4(false, true, false, true))), false, false, true)))))
                  {
                   if((false))
                    break;
                   barrier();
                  }
                }
               while(((injectionSwitch.x > injectionSwitch.y)));
               if((false))
                barrier();
               if(((bool(bvec2(false, true)))))
                return;
               if((((injectionSwitch.x > injectionSwitch.y))))
                break;
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((false))
                  continue;
                 barrier();
                 if((false))
                  break;
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                break;
              }
             if(false)
              {
              }
             else
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                return;
              }
             if((false))
              {
               if((false))
                {
                 if((false))
                  break;
                 if((false))
                  {
                   if(true)
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                 if((false))
                  {
                   if((false))
                    barrier();
                   barrier();
                  }
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  break;
                 break;
                 if((false))
                  barrier();
                }
               if(((injectionSwitch.x > injectionSwitch.y)))
                {
                }
               else
                {
                 if((false))
                  break;
                 barrier();
                }
               if(((! (! (false)))))
                {
                 for(int _injected_loop_counter = 1; _injected_loop_counter != (1 ^ 1); _injected_loop_counter --)
                  {
                   barrier();
                  }
                }
              }
             if((false))
              continue;
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((false))
              barrier();
             if((false))
              break;
             if(((bool((bvec3(bvec4(bvec3(((injectionSwitch.x > injectionSwitch.y)), false, false), true)))))))
              continue;
            }
           if(((bool(bool(false)))))
            continue;
           if((((((injectionSwitch.x > (vec2(((mat4((min(injectionSwitch, injectionSwitch)), 0.0, (max((dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0))), (dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0))))), 0.0, 1.0, 1.0, 1.0, 0.0, tan(0.0), 0.0, 0.0, 0.0, log(determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0))), 0.0, abs(0.0))) * mat4(1.0)))).y))) && ((injectionSwitch.x < injectionSwitch.y)))))
            {
             if(true)
              {
               return;
              }
             else
              {
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  return;
                 break;
                }
              }
            }
           if((((((((injectionSwitch.x > injectionSwitch.y))) || false)) && true)))
            {
             if((false || ((false))))
              break;
             if((false))
              return;
             if((false))
              {
               if((false))
                {
                 if((false))
                  return;
                 break;
                }
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if((false))
                    return;
                   break;
                  }
                 barrier();
                 if((false))
                  continue;
                }
               if((false))
                break;
               break;
               if((false))
                continue;
               if((false))
                continue;
               if((false))
                barrier();
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                break;
               if(true)
                {
                 barrier();
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if((false))
                    return;
                   return;
                  }
                }
               else
                {
                 if(((false || (false))))
                  return;
                 if(((bool(bvec2(false, true)))))
                  barrier();
                }
              }
             if((false))
              barrier();
             do
              {
               if((false))
                barrier();
               if((false))
                continue;
               for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                {
                 if((false))
                  return;
                 barrier();
                }
               if((false))
                {
                 if((false))
                  return;
                 break;
                }
               if((false))
                continue;
               if(((bool((bvec2(bvec4(bvec2(false, true), true, false)))))))
                {
                 if((false))
                  return;
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  break;
                 barrier();
                }
               if((false))
                barrier();
              }
             while(((injectionSwitch.x > injectionSwitch.y)));
            }
           if((! (! ((false)))))
            {
             if((false))
              continue;
             continue;
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           for(int _injected_loop_counter = 1; (false || (_injected_loop_counter != 0)); _injected_loop_counter --)
            {
             do
              {
               if((false))
                return;
               if((false))
                {
                 if(((true) || false))
                  {
                   if((false))
                    break;
                   if(((injectionSwitch.x > injectionSwitch.y)))
                    {
                     if((false))
                      break;
                    }
                   else
                    {
                     if((false))
                      break;
                     barrier();
                    }
                   if((false))
                    break;
                  }
                 else
                  {
                  }
                }
              }
             while((! ((bool(bvec3(! (false), true, false))))));
             if(((! (! (false)))))
              break;
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
             if((false))
              break;
             if((false))
              return;
             if((false))
              {
               if((false))
                return;
               if((((injectionSwitch.x > injectionSwitch.y))))
                break;
               continue;
              }
             if(((bool(bvec4(false, ((true) && true), true, true)))))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if((false))
                break;
               if(((injectionSwitch.x < injectionSwitch.y)))
                {
                 for(int _injected_loop_counter = int((injectionSwitch.x)); (max(_injected_loop_counter, _injected_loop_counter)) != 1; _injected_loop_counter ++)
                  {
                   do
                    {
                     return;
                     if((false))
                      continue;
                     if((false))
                      continue;
                    }
                   while(false);
                  }
                 if((false))
                  {
                   if((false))
                    return;
                   barrier();
                  }
                 if((false))
                  continue;
                 if((((((injectionSwitch.x > (((max(injectionSwitch, (min(injectionSwitch, injectionSwitch)))).y) / 1.0))))) || false))
                  {
                   if((false))
                    continue;
                   continue;
                   if((false))
                    barrier();
                  }
                 if((false))
                  return;
                }
               else
                {
                 if(((((! (! (false || ((injectionSwitch.x > injectionSwitch.y)))))))))
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    {
                     if((false))
                      return;
                     if((false))
                      break;
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      {
                       if((false))
                        break;
                       barrier();
                      }
                     break;
                    }
                   if((false))
                    continue;
                   return;
                   if((false))
                    break;
                   if((false))
                    barrier();
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    {
                     if((false))
                      {
                       if((false))
                        continue;
                       continue;
                      }
                     do
                      {
                       barrier();
                       if(((true && ((false || (false))))))
                        return;
                      }
                     while(false);
                    }
                  }
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    break;
                   do
                    {
                     return;
                    }
                   while(false);
                   if((false))
                    {
                     if((false))
                      {
                       if((false))
                        break;
                       barrier();
                       if((false))
                        break;
                      }
                     if(((true && (false))))
                      return;
                     do
                      {
                       if(((injectionSwitch.x > injectionSwitch.y)))
                        {
                        }
                       else
                        {
                         barrier();
                        }
                      }
                     while(false);
                     if((false))
                      {
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        continue;
                       return;
                      }
                     if((false))
                      continue;
                    }
                  }
                 if((false))
                  continue;
                 if((false))
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    continue;
                   if((false))
                    barrier();
                   if((false))
                    return;
                   continue;
                  }
                 if((false || ((false))))
                  {
                   if(((injectionSwitch.x < injectionSwitch.y)))
                    {
                     if(((injectionSwitch.x > injectionSwitch.y)))
                      {
                      }
                     else
                      {
                       barrier();
                      }
                    }
                   else
                    {
                     if((false))
                      return;
                    }
                  }
                 if((false))
                  {
                   if((false))
                    continue;
                   continue;
                  }
                 if((false))
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    continue;
                   break;
                  }
                 if((false))
                  barrier();
                }
              }
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(false)
            {
             if((false))
              continue;
             if((false))
              {
               if((false))
                continue;
               barrier();
               if((false))
                return;
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           else
            {
             do
              {
               if((false))
                {
                 if((false))
                  barrier();
                 if((false))
                  return;
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    break;
                   continue;
                  }
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    {
                     if((false))
                      return;
                     return;
                    }
                   break;
                  }
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if((false))
                    {
                     if((((false) && true)))
                      break;
                     continue;
                    }
                   if((false))
                    {
                     if((false))
                      barrier();
                     if((false))
                      barrier();
                     continue;
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      return;
                    }
                   do
                    {
                     return;
                     if(((! (((! (((((injectionSwitch.x > injectionSwitch.y))) && true))) && true)))))
                      break;
                    }
                   while(false);
                   if((false))
                    continue;
                   if(((bool(bvec2(false, true)))))
                    {
                     if((false))
                      continue;
                     barrier();
                    }
                  }
                 if(false)
                  {
                   if((false))
                    continue;
                  }
                 else
                  {
                   if((((injectionSwitch.x > (mix(vec2((injectionSwitch)[0], (713.706)), vec2((7.4), (injectionSwitch)[1]), bvec2(false, true))).y))))
                    barrier();
                  }
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if((false))
                    return;
                   do
                    {
                     barrier();
                    }
                   while(false);
                  }
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 if((bool(bvec2(true, true))))
                  {
                   barrier();
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    continue;
                  }
                 else
                  {
                   if((false))
                    continue;
                  }
                 if((false))
                  break;
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((false))
                  return;
                 break;
                }
               if((false))
                {
                 if((false))
                  break;
                 continue;
                }
               if((false))
                {
                 if(false)
                  {
                  }
                 else
                  {
                   barrier();
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 if(((bool((bool(bool(bool(false))))))))
                  return;
                }
               if((false))
                {
                 do
                  {
                   barrier();
                   if((false))
                    return;
                  }
                 while(false);
                }
              }
             while(false);
             if((false))
              {
               if((false))
                return;
               barrier();
              }
            }
          }
         if((false))
          continue;
         if((false))
          {
           if((false))
            {
             for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
              {
               barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                return;
              }
            }
           continue;
          }
         if((((((injectionSwitch.x > injectionSwitch.y)) || false))))
          {
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             barrier();
             if((false))
              continue;
            }
           else
            {
            }
          }
         if((false))
          continue;
         if((false))
          continue;
         if(((true && (false))))
          continue;
        }
       do
        {
         if((false))
          break;
         if(((bool(bvec2(false, false)))))
          barrier();
         for(int _injected_loop_counter = (1 ^ 1); _injected_loop_counter != 1; _injected_loop_counter ++)
          {
           if((false))
            {
             if((false))
              continue;
             if((false))
              {
               for(int _injected_loop_counter = (int((injectionSwitch.x)) ^ (0 & - 7510)); _injected_loop_counter < (1 | 1); _injected_loop_counter ++)
                {
                 do
                  {
                   if((false))
                    break;
                   return;
                  }
                 while(((injectionSwitch.x > injectionSwitch.y)));
                 if((false))
                  continue;
                 if(true)
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    return;
                   if((false))
                    {
                     if((false))
                      {
                       if(((((! (! (false)))) || false)))
                        break;
                       barrier();
                      }
                     do
                      {
                       if((false))
                        continue;
                       barrier();
                      }
                     while(((injectionSwitch.x > injectionSwitch.y)));
                    }
                  }
                 else
                  {
                  }
                }
              }
             if((((bool(bvec4((bool(bvec2(false || (false), true))), false, true, true))))))
              {
               if((false))
                return;
               return;
              }
             return;
            }
          }
         if((false))
          break;
         if((false))
          {
           for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
            {
             barrier();
             if((false))
              break;
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
          }
        }
       while(false);
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
         if((false))
          continue;
        }
       if((false))
        return;
      }
    }
  }
 else
  {
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != 0; _injected_loop_counter --)
    {
     if((false))
      return;
     return;
     if((false))
      continue;
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((false))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 if(((injectionSwitch.x < injectionSwitch.y)))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
  }
 if((false))
  return;
 uint workgroup_size = gl_WorkGroupSize.x;
 if((((((false ? (- 6746.1612) : (float(mat2((max(injectionSwitch.x, (float((transpose(transpose(mat2x4(injectionSwitch.x, 0.0, 0.0, 1.0, 1.0, 0.0, abs(0.0), 0.0)))))))), 0.0, sin(0.0), 1.0))))) > injectionSwitch.y))))
  {
   if(((false || (false))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(false)
        {
        }
       else
        {
         barrier();
         if((false))
          {
           if((false))
            return;
           barrier();
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 0; _injected_loop_counter < ((1 << (int(5))) >> (int(5))); _injected_loop_counter ++)
        {
         if((false))
          continue;
         return;
         if(((! (((! (((injectionSwitch.x > injectionSwitch.y)))) || false)))))
          break;
        }
      }
    }
   for(int _injected_loop_counter = 1; _injected_loop_counter != (int((injectionSwitch.x)) >> (int(0))); _injected_loop_counter --)
    {
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
       if((false))
        break;
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
         barrier();
        }
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
      }
     else
      {
       for(int _injected_loop_counter = (1 ^ 1); _injected_loop_counter != 1; _injected_loop_counter ++)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
         barrier();
        }
      }
     if((false))
      barrier();
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if((false))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     if((false))
      return;
     barrier();
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  return;
 if((false))
  return;
 if((false))
  barrier();
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    return;
   return;
  }
 if((false))
  return;
 if((false))
  barrier();
 if(((((bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)))))))
  {
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if(true)
      {
       if((! (! ((! (! ((((injectionSwitch.x > injectionSwitch.y))))))))))
        barrier();
       if((false))
        return;
      }
     else
      {
      }
     if((false))
      barrier();
    }
   else
    {
    }
   return;
  }
 if((false))
  return;
 if((false))
  {
   if((false))
    return;
   return;
  }
 uint workgroup_id = gl_WorkGroupID.x;
 for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
  {
   if((false))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         barrier();
        }
      }
     if((false))
      {
       if((false))
        continue;
       return;
      }
     if((false))
      return;
     barrier();
    }
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    continue;
   if((false))
    continue;
  }
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(true)
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
  }
 else
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if((((true && (((((min((mix(vec2((- 304.345), (9.2)), vec2((clamp((injectionSwitch)[0], (injectionSwitch)[0], (injectionSwitch)[0])), (injectionSwitch)[1]), bvec2(true, true))).x, (mix(vec2((- 304.345), (9.2)), vec2((clamp((injectionSwitch)[0], (injectionSwitch)[0], (injectionSwitch)[0])), (injectionSwitch)[1]), bvec2(true, true))).x))) / 1.0) > injectionSwitch.y))))))
  {
   do
    {
     if((false))
      return;
     if((false))
      {
       if((((false) || false)))
        {
         if((false))
          continue;
         do
          {
           return;
           if((false))
            {
             if(true)
              {
               if((false))
                break;
               barrier();
              }
             else
              {
              }
            }
          }
         while(false);
        }
       do
        {
         if((false))
          break;
         if((false))
          break;
         do
          {
           if((false))
            break;
           if((false))
            {
             if((false))
              continue;
             break;
            }
           if((false))
            break;
           return;
           if((false))
            return;
          }
         while(false);
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
      }
     if((false))
      barrier();
    }
   while(((((((((injectionSwitch) * vec2(1.0, 1.0)).x > injectionSwitch.y))) && true)) && ((injectionSwitch.x < injectionSwitch.y))));
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     barrier();
    }
   do
    {
     do
      {
       do
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(true)
          {
           do
            {
             if((false))
              barrier();
             do
              {
               barrier();
              }
             while(((injectionSwitch.x > injectionSwitch.y)));
            }
           while(false);
          }
         else
          {
          }
        }
       while(false);
       if((false))
        continue;
      }
     while(false);
    }
   while(false);
   if((false))
    {
     do
      {
       return;
      }
     while(false);
     if((false))
      return;
     if((false))
      {
       if(false)
        {
        }
       else
        {
         barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       if((false))
        return;
      }
     if((false))
      barrier();
     if((false))
      return;
    }
   if(false)
    {
    }
   else
    {
     if((false))
      return;
    }
   if(false)
    {
     if((false))
      return;
    }
   else
    {
     if((false))
      return;
     if((false))
      {
       if((false))
        return;
       if((false))
        return;
       if((false))
        return;
       if(true)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         do
          {
           if((false))
            return;
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
             break;
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              continue;
             if(false)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                continue;
               if((false))
                return;
               if((false))
                break;
              }
             else
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(((((bool(bvec4(false, true, false, true)))) || false)))
                return;
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  return;
                 break;
                }
               if(true)
                {
                 return;
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  return;
                }
               else
                {
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                break;
               if((false))
                break;
               if((((injectionSwitch.x > injectionSwitch.y))))
                continue;
               if((false))
                return;
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  break;
                 barrier();
                }
               if((false))
                {
                 if((false))
                  continue;
                 return;
                }
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
             for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
              {
               if((false))
                break;
               if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
                return;
              }
             if((false))
              barrier();
             if((false || ((((injectionSwitch.x > injectionSwitch.y))))))
              continue;
            }
          }
         while(false);
        }
       else
        {
        }
       if((false))
        return;
       barrier();
      }
     if((false))
      return;
    }
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
       barrier();
       if((false))
        return;
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
    }
   if((false))
    return;
   if((false))
    return;
  }
 if(((false || (((false) || false)))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
       barrier();
      }
     if((false))
      continue;
    }
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if((((((injectionSwitch.x > injectionSwitch.y)) || false))))
        return;
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
         if((false))
          return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if((false))
          return;
        }
       else
        {
         if((false))
          return;
         if((false))
          {
           if((false))
            return;
           if(false)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           else
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           if((false))
            {
             if((false))
              barrier();
             if((false))
              return;
             return;
            }
           if((true && (true)))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             if(false)
              {
               for(int _injected_loop_counter = (0 >> (int(8))); _injected_loop_counter < 1; _injected_loop_counter ++)
                {
                 if((false))
                  return;
                 if((false))
                  return;
                }
               if((false))
                return;
              }
             else
              {
               if((false))
                {
                 if((false))
                  return;
                 return;
                }
               return;
               if((false))
                barrier();
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  return;
                 if((false))
                  return;
                 barrier();
                }
               if((false))
                return;
               if((((injectionSwitch.x > injectionSwitch.y))))
                return;
              }
            }
           else
            {
             if((false))
              return;
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           if((((bool((true && (bool((! (! ((injectionSwitch.x > injectionSwitch.y))))))))))))
            return;
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           barrier();
           if((false))
            return;
          }
        }
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         if((false))
          {
           if(false)
            {
             if((false))
              return;
            }
           else
            {
             return;
            }
          }
        }
      }
     else
      {
      }
    }
   else
    {
    }
   for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(false)
        {
         if((false))
          break;
        }
       else
        {
         barrier();
        }
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
      }
     if((((injectionSwitch.x > (((false ? (5.6) : (float(mat2x4(min(injectionSwitch.y, injectionSwitch.y), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0))))))))))
      {
       if((false))
        barrier();
       if((false))
        return;
       if((false))
        {
         if((false))
          barrier();
         break;
         if((false))
          return;
        }
       return;
       if((false))
        continue;
       if((false))
        break;
      }
     if((false))
      return;
     if((false))
      barrier();
    }
   if(((((mat2((injectionSwitch.y)) * (injectionSwitch)).x > injectionSwitch.y))))
    return;
   if((false))
    {
     if((false))
      barrier();
     if((false))
      {
       if((false))
        return;
       return;
      }
     return;
    }
   for(int _injected_loop_counter = ((clamp(1, 1, 1)) | 1); _injected_loop_counter > 0; _injected_loop_counter --)
    {
     if((false))
      barrier();
     if((false))
      continue;
     barrier();
    }
  }
 for(int _injected_loop_counter = (0 | 0); _injected_loop_counter < ((min((((clamp(0 ^ 1, 0 ^ 1, 0 ^ 1))) * 1), 0 ^ 1))); _injected_loop_counter ++)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     barrier();
    }
   if((((true && (bool(bvec3(false, ((injectionSwitch.x > injectionSwitch.y)), true)))))))
    {
     if(((((mix(float((- 4160.4848)), float((clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))), bool(true))) > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = (1 ^ (0 ^ (0))); _injected_loop_counter > 0; _injected_loop_counter --)
        {
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
           break;
          }
         return;
        }
      }
     if((false))
      continue;
     return;
    }
   if((false))
    continue;
  }
 if(false)
  {
   if((false))
    {
     if((((false) && true)))
      return;
     barrier();
    }
   if((false))
    return;
   if((false))
    return;
  }
 else
  {
   if((false))
    return;
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 if((false))
  {
   if(true)
    {
     if(((bool(bool((bool(bool(false))))))))
      {
       if((false))
        return;
       barrier();
      }
     if((false))
      return;
     if((false))
      return;
    }
   else
    {
    }
   if((false))
    return;
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
     if((false))
      return;
     if((false))
      barrier();
     if((false))
      return;
    }
   else
    {
     if(true)
      {
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((true && ((((injectionSwitch.x > injectionSwitch.y))))))
          return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
        }
       if(true)
        {
         if((false))
          return;
         return;
         if((false))
          return;
        }
       else
        {
         if((false))
          return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
        }
      }
     else
      {
       if((false))
        return;
      }
    }
   if((false))
    return;
   if((false))
    return;
   if((false))
    return;
  }
 if((false))
  return;
 if(true)
  {
   if((false))
    return;
  }
 else
  {
   if((false))
    return;
  }
 if(true)
  {
   if((false))
    barrier();
  }
 else
  {
   if((false))
    return;
  }
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 if(((injectionSwitch.x > injectionSwitch.y)))
  {
  }
 else
  {
   if(true)
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     if((false))
      barrier();
     do
      {
       if((false))
        continue;
       if((((injectionSwitch.x > ((injectionSwitch) - vec2(0.0, 0.0)).y))))
        {
         if((false))
          barrier();
         if((false))
          return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(false)
          {
          }
         else
          {
           if((false))
            {
             for(int _injected_loop_counter = (0 ^ ((1 << (int(2))) >> (int(2)))); _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
              {
               do
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   for(int _injected_loop_counter = 0; _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
                    {
                     if((false))
                      {
                       do
                        {
                         barrier();
                        }
                       while(false);
                      }
                     if((false))
                      return;
                    }
                   return;
                  }
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               while((! (! (false))));
               if((((injectionSwitch.x > injectionSwitch.y))))
                break;
              }
             for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > 0; _injected_loop_counter --)
              {
               if((((((injectionSwitch.x > injectionSwitch.y)))) || false))
                barrier();
               do
                {
                 do
                  {
                   if((false))
                    break;
                   do
                    {
                     return;
                    }
                   while(false);
                   if(((injectionSwitch.x < injectionSwitch.y)))
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      return;
                     if((false))
                      return;
                    }
                   else
                    {
                    }
                  }
                 while(false);
                 if((false))
                  barrier();
                }
               while(((injectionSwitch.x > injectionSwitch.y)));
               if((false))
                return;
              }
             if((false))
              barrier();
             if((false))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if(true)
                {
                 if((false))
                  break;
                 if((false))
                  {
                   do
                    {
                     barrier();
                    }
                   while(false);
                  }
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if((false))
                    continue;
                   continue;
                  }
                 return;
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 if((false))
                  return;
                }
               else
                {
                 if((false))
                  break;
                }
              }
             if(true)
              {
               if(((! ((true && (! (false)))))))
                return;
               do
                {
                 if((false))
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    {
                     if((false))
                      continue;
                     for(int _injected_loop_counter = 1; _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
                      {
                       if((false))
                        continue;
                       barrier();
                       if((false))
                        continue;
                      }
                    }
                   for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != (((1 & 1)) | ((1 & 1))); _injected_loop_counter ++)
                    {
                     barrier();
                    }
                  }
                }
               while(false);
               if((((injectionSwitch.x > injectionSwitch.y))))
                break;
              }
             else
              {
              }
            }
          }
         if((false))
          continue;
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(true)
            {
             return;
            }
           else
            {
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            {
             if((false))
              barrier();
             continue;
             if((false))
              return;
            }
           if((false))
            break;
           if((false))
            continue;
           if((false))
            continue;
           if((((false) && true)))
            break;
           if(false)
            {
            }
           else
            {
             barrier();
            }
          }
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           return;
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            {
             if((false))
              continue;
             if((false))
              continue;
             barrier();
            }
           if(((false || (((injectionSwitch.x > injectionSwitch.y))))))
            break;
          }
        }
      }
     while(((false) && true));
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((false) || false)))
        {
         if((false))
          return;
         return;
        }
       barrier();
      }
    }
   else
    {
    }
  }
 if(true)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
    {
     if((false))
      {
       if((false))
        return;
       return;
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    return;
  }
 else
  {
  }
 if(((true && (false))))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    return;
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
   if((false))
    return;
  }
 if((false))
  return;
 if((false))
  {
   do
    {
     if((false))
      break;
     if((! (! (true))))
      {
       if(false)
        {
        }
       else
        {
         return;
        }
      }
     else
      {
      }
    }
   while(((((injectionSwitch.x > injectionSwitch.y)) || false)));
  }
 if((false))
  {
   if((false))
    return;
   return;
  }
 atomicStore(write_val, uint(virtual_gid), 4, 64, 0);
 do
  {
   if((false))
    break;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    return;
   if(true)
    {
     if((false))
      continue;
     do
      {
       if(((true) || false))
        {
         if((false))
          {
           if((false))
            {
             if((((true && (bool(bvec3(false, true, false)))))))
              barrier();
             continue;
             if((false))
              continue;
            }
           if((false || ((((injectionSwitch.x > (min(injectionSwitch.y, injectionSwitch.y))))))))
            barrier();
           if((false))
            barrier();
           return;
           if((false))
            return;
           if((false))
            break;
          }
         for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != (0 | (1)); _injected_loop_counter ++)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             continue;
            }
           buf[virtual_gid] = uint(subgroupAllEqual(write_val));
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           if(true)
            {
             if(false)
              {
               if((false))
                return;
              }
             else
              {
               if((false))
                break;
               barrier();
               if((false))
                break;
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
             if((false))
              barrier();
             if((false))
              break;
            }
           else
            {
            }
          }
         if((false))
          {
           if((false))
            continue;
           if((false))
            break;
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            return;
           if((false))
            continue;
           if(false)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                break;
               barrier();
              }
             if((false))
              continue;
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
            }
           else
            {
             if((false))
              continue;
             for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != 1; _injected_loop_counter ++)
              {
               for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
                {
                 if(((((injectionSwitch.x < injectionSwitch.y))) && true))
                  {
                   if((((! ((((bool(bvec4(! ((true && ((! (! ((((injectionSwitch) * mat2(1.0)).x > injectionSwitch.y))))))), true, false, true)))) || false))))))
                    {
                     if((false))
                      barrier();
                     barrier();
                    }
                  }
                 else
                  {
                  }
                }
               if((false))
                return;
               barrier();
              }
            }
          }
         if((false))
          barrier();
         if((false))
          break;
        }
       else
        {
         if((false))
          {
           for(int _injected_loop_counter = (0 & - 49705); _injected_loop_counter != 1; (~ (~ (_injected_loop_counter ++))))
            {
             if(true)
              {
               return;
              }
             else
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  break;
                 return;
                 if((false))
                  break;
                }
              }
             if((false))
              continue;
             if((false))
              return;
            }
          }
         if((false))
          barrier();
        }
       if((false))
        continue;
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
       if((false))
        break;
      }
     while(false);
    }
   else
    {
    }
   if((false))
    {
     if((false))
      break;
     break;
    }
   for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
    {
     do
      {
       if((false))
        {
         do
          {
           if((false))
            continue;
           if((((max((mix(vec2((163.589), (- 1.3)), vec2((injectionSwitch)[0], (min((injectionSwitch)[1], (injectionSwitch)[1]))), bvec2(true, true))), injectionSwitch)).x > injectionSwitch.y)))
            {
             if((false))
              break;
            }
           else
            {
             return;
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
            }
          }
         while((((! (! (false)))) || false));
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            continue;
           barrier();
          }
         if((false))
          break;
        }
       if((false))
        {
         if((false))
          continue;
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
         return;
        }
      }
     while(false);
     if((false))
      return;
    }
   if((false))
    break;
   if((((injectionSwitch.x > injectionSwitch.y))))
    continue;
  }
 while(false);
 do
  {
   if((false))
    return;
  }
 while(false);
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
