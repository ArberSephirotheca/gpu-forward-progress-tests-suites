#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 for(int _injected_loop_counter = ((~ (~ ((1) ^ 0)))); (min(_injected_loop_counter, ((((injectionSwitch.x > injectionSwitch.y)) ? (_injected_loop_counter) : _injected_loop_counter)))) > (((- 41164) | (((true ? - 41164 : (((- 200) >> 0)))))) & (0 & ((int((injectionSwitch.x)) ^ (0 + ((max((int(ivec3(73060, 1, 0))), 73060)))))))); _injected_loop_counter --)
  {
   if(false)
    {
    }
   else
    {
     if((((! (! (bool(bvec2(((false)), true)))))) && true))
      {
       for(int _injected_loop_counter = ((1 << ((0 ^ ((max(int(2), int(2))))))) >> ((0 | (int(2))))); (bool(bvec3((bool(bvec4(_injected_loop_counter != 0, false, true, (true && ((! (! (! (! (((! (! (((injectionSwitch.x < ((true ? injectionSwitch.y : (628.113))))))))))))))))))), (true && (true)), false))); _injected_loop_counter --)
        {
         if((((! (false || ((((((! ((injectionSwitch.x > injectionSwitch.y))) && true) && true)))))))))
          break;
         if(((((((vec2((clamp(injectionSwitch[0], injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1])).x) - 0.0) > ((injectionSwitch) * mat2(1.0)).y)) || (false)))
          {
          }
         else
          {
           return;
          }
        }
      }
    }
  }
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = (~ (((~ (((((false ? (41828u) : (min(((~ ((min(~ ((0u + ((gl_WorkGroupID.x)))), ~ ((0u + ((gl_WorkGroupID.x)))))))) >> ((uint(uvec4(0u, 0u, uint(((clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y)), 1u))) >> (min((uint(8u)), (uint(8u)))))), ((max((min((0u + ((gl_WorkGroupID.x))), (0u + ((gl_WorkGroupID.x))))), (((((0u + ((gl_WorkGroupID.x)))) | 0u)) ^ 0u))) >> ((((uint(uvec4(0u, 0u, uint((injectionSwitch.y)), 1u)))) | ((uint(uvec4(0u, 0u, uint((injectionSwitch.y)), 1u))))) >> (min((uint(8u)), (uint(8u)))))))))))) << 0u)) | (~ (((((false ? (41828u) : (min(((~ ((min(~ ((0u + ((gl_WorkGroupID.x)))), ~ ((0u + ((gl_WorkGroupID.x)))))))) >> ((uint(uvec4(0u, 0u, uint(((clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y)), 1u))) >> (min((uint(8u)), (uint(8u)))))), ((max((min((0u + ((gl_WorkGroupID.x))), (0u + ((gl_WorkGroupID.x))))), (((((0u + ((gl_WorkGroupID.x)))) | 0u)) ^ 0u))) >> ((((uint(uvec4(0u, 0u, uint((injectionSwitch.y)), 1u)))) | ((uint(uvec4(0u, 0u, uint((injectionSwitch.y)), 1u))))) >> (min((uint(8u)), (uint(8u)))))))))))) << 0u)))));
 uint workgroup_base = workgroup_size * workgroup_id;
 if((false))
  {
   if(true)
    {
     for(int _injected_loop_counter = 0; ((_injected_loop_counter) ^ 0) < int(((vec2(injectionSwitch[0], injectionSwitch[1])).y)); _injected_loop_counter ++)
      {
       do
        {
         if(((((injectionSwitch.x < injectionSwitch.y))) && true))
          {
           if((((mix(float((498.520)), float(injectionSwitch.x), (! ((bool(bvec3((false || (! (bool(true)))), false, (true && (true))))))))) < injectionSwitch.y)))
            {
             do
              {
               do
                {
                 if((((false || ((bool(bvec3((false) && true, false, true))))))))
                  return;
                }
               while(false);
               if((true && (((false) && true))))
                {
                }
               else
                {
                 for(int _injected_loop_counter = (0 << (int(((((false ? (_injected_loop_counter) : (min(1, 1))))) | 0)))); (bool(bvec3(((_injected_loop_counter != (1 | ((1) | 0))) && true), false, false))); _injected_loop_counter ++)
                  {
                   return;
                  }
                }
              }
             while(false);
            }
           else
            {
            }
          }
         else
          {
          }
        }
       while(false);
      }
    }
   else
    {
    }
   for(int _injected_loop_counter = ((0 | (int(ivec4(((clamp(((int(ivec4((1), 1, 1, (int((injectionSwitch.x)) >> (int(7)))))) ^ 0) ^ int((float(mat3x2((injectionSwitch.x), 0.0, 0.0, 1.0, 0.0, determinant(mat4((((min((((max(0.0, 0.0))) + 0.0), (((max(0.0, 0.0))) + (min(0.0, 0.0)))))) * sqrt(1.0)), sin(0.0), sqrt(0.0), 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, (1.0 * (0.0)), 0.0, 0.0, 1.0, 1.0, 1.0, 0.0)))))), (min(((~ (~ ((((1))) - 0))) ^ 0) ^ int((injectionSwitch.x)), ((true ? (max(((1) ^ 0), ((1) ^ 0))) ^ int((injectionSwitch.x)) : (51420))))), (int((injectionSwitch.x)) ^ (((1) ^ 0) ^ int((((false ? (- 596.623) : injectionSwitch.x))))))))), 1, 1, 1))))); _injected_loop_counter > int(((min(float(mat4x2((injectionSwitch.x), 1.0, 1.0, 1.0, cos(0.0), (injectionSwitch.y), 1.0, determinant(mat2(0.0, 0.0, (max(1.0, 1.0)), 0.0)))), (clamp((mix(float((mix(float(float(mat4x2((injectionSwitch.x), 1.0, 1.0, 1.0, cos((min(0.0, 0.0))), (injectionSwitch.y), 1.0, determinant(mat2(0.0, 0.0, (float(mat4(((((true ? 1.0 : (0.6)))) - 0.0), abs(0.0), (injectionSwitch.y), 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), 0.0, 0.0, 0.0))), 0.0))))), float((46.57)), bool(false)))), float((0.2)), bool(false))), (mix(float(float(mat4x2((injectionSwitch.x), 1.0, 1.0, 1.0, cos(0.0), (injectionSwitch.y), 1.0, determinant(mat2(0.0, 0.0, (float(mat4(1.0, abs(0.0), (injectionSwitch.y), 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), 0.0, 0.0, 0.0))), 0.0))))), float((46.57)), bool(false))), (mix(float(float(mat4x2((injectionSwitch.x), 1.0, 1.0, 1.0, cos(0.0), (injectionSwitch.y), 1.0, determinant(mat2(0.0, 0.0, (float(mat4(1.0, abs(0.0), (injectionSwitch.y), 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), 0.0, 0.0, 0.0))), 0.0))))), float(((clamp(46.57, 46.57, 46.57)))), bool(false))))))))); _injected_loop_counter --)
    {
     if(((bool((bvec2(bvec2(bvec2(false, false))))))))
      {
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         if(((! (! ((true && ((injectionSwitch.x > injectionSwitch.y))))))))
          {
          }
         else
          {
           return;
          }
        }
      }
    }
  }
 uint virtual_gid = workgroup_base + subgroup_id * ((false ? (((((workgroup_size) | (workgroup_size))) | 0u)) : ((false ? (write_val) : subgroup_size)))) + subgroup_local_id;
 if(((injectionSwitch.x > ((injectionSwitch) * mat2(1.0)).y)))
  {
  }
 else
  {
   if((((((((bool((bvec2(bvec4(((bvec2(bvec2(bvec2((bvec3(bvec3(bvec3((bvec2(bvec2(bvec2((((bool(bvec3((true && ((! (! (true))))), true, false)))) && true), false)))), false))))))))), true, ((injectionSwitch.x < injectionSwitch.y)))))))) || false) || false))) && true))
    {
     atomicStore(write_val, uint(virtual_gid), 4, 64, 0);
    }
   else
    {
    }
  }
 if((((((bool(bvec4((! (! (injectionSwitch.x > (mat2((injectionSwitch.y)) * ((min((min(((true ? injectionSwitch : (injectionSwitch))), (min(((true ? injectionSwitch : (injectionSwitch))), (vec2(mat2x4(injectionSwitch, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0))))))), (((min((mix(vec2((((((((((true) || false)) || false) ? injectionSwitch : (injectionSwitch))))[0]) / 1.0), (((((((true) || false)) || false) ? injectionSwitch : (injectionSwitch))))[1]), vec2((- 37.93), (61.56)), bvec2(false, ((injectionSwitch.x > injectionSwitch.y))))), (min(((true ? injectionSwitch : (injectionSwitch))), (vec2(mat2x4(injectionSwitch, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0))))))) * mat2(1.0))))))).y))), true, ((true) || false), false)))))) && true))
  {
  }
 else
  {
   if((bool(bvec4(false, false, false, false))))
    {
    }
   else
    {
     if(((! (! (true))) && (true)))
      {
       buf[virtual_gid] = uint(subgroupAllEqual(write_val));
      }
     else
      {
      }
    }
  }
 if(((! ((bool(bvec4((! ((bool(bool(! ((bool(bvec4((bool(bvec3(! (((((((bool(bool(((bool(bool(injectionSwitch.x > injectionSwitch.y)))) && true))))))) && true)), false, false))), ((injectionSwitch.x > injectionSwitch.y)), true, true))))))))), false, false, false)))))))
  {
   do
    {
     for(int _injected_loop_counter = (((0 | 0) | (((0 | 0)) | ((0 | 0))))); _injected_loop_counter != 1; _injected_loop_counter ++)
      {
       if((((false)) && true))
        {
         if(true)
          {
           do
            {
             if((((true && (false))) || false))
              {
              }
             else
              {
               return;
              }
            }
           while((false || (bool((! (! (bool((((false) || false))))))))));
          }
         else
          {
          }
        }
      }
    }
   while((! (! (((injectionSwitch.x > (float(float((((clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))) - (dot(vec2(0.0, ((0.0) / (min((float(mat3(1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0))), 1.0)))), vec2((float(mat4(1.0, 0.0, 0.0, (clamp(0.0, 0.0, 0.0)), 1.0, 1.0, 0.0, 1.0, (max(0.0, 0.0)), 1.0, (mix(float((850.240)), float((clamp(0.0, 0.0, 0.0))), bool(((injectionSwitch.x < injectionSwitch.y))))), ((((max(true ? dot(vec2((dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0))), 1.0), vec2(1.0, 0.0)) : (- 0.0), true ? dot(vec2((dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0))), 1.0), vec2(1.0, 0.0)) : (- 0.0)))))), abs((max(0.0, 0.0))), round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0))), 1.0)))))))))))));
   return;
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
