#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   if((((((injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((false))
  {
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 uint subgroup_size = gl_SubgroupSize;
 if((((false) || false)))
  barrier();
 if((((true && (((bool(bool(((injectionSwitch.x > injectionSwitch.y))))) || false))))))
  barrier();
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((! (! ((bool(bvec4((false), true, false, false)))))))
  {
   if((false))
    barrier();
   barrier();
  }
 if((((true && ((! (! (! (false || ((false || ((! (bool(bvec3((((false) || false)), false, false))))))))))))))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if((((false) && true)))
    barrier();
  }
 uint num_workgroup = (max(gl_NumWorkGroups, gl_NumWorkGroups)).x;
 if((false))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 if((! (! ((false)))))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 if((! (! (((! (! (((((((((((! (! ((false || (bool(bvec4((((false || ((false || (false))))) || false), false, true, false))))))))))) && true) && true)) && true) || false)))))))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   barrier();
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
  }
 if((false))
  barrier();
 if((((! (((false || (true && ((bool(bvec2(! (((! (! (false))))), false)))))))))) || false))
  barrier();
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((! (! (((! (! (false))))))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     barrier();
    }
   barrier();
  }
 if((false))
  barrier();
 if(((bool(bvec3((! (! ((false || (false))))), ((injectionSwitch.x < injectionSwitch.y)), true)))))
  barrier();
 if((true && ((false))))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   barrier();
   if((false))
    barrier();
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_base = ((false ? (subgroup_local_id) : ((uint((injectionSwitch.x)) ^ ((max((false ? ((subgroup_size)) : (1u * (workgroup_size * (~ (((min((((((((max((uint(uint(max(~ (workgroup_id), ~ (workgroup_id))))), max(~ (workgroup_id), ~ (workgroup_id))))) ^ 0u)))) | (((max(~ (workgroup_id), ~ (workgroup_id)))))), (((((true ? (max(~ (((workgroup_id)) >> 0u), ~ ((0u & 94410u) ^ ((workgroup_id))))) : (workgroup_size))))) | ((((false ? (workgroup_size) : (max(~ ((true ? (((workgroup_id)) / 1u) : ((subgroup_local_id % (workgroup_id ++))))), ~ (workgroup_id))))))))))) | (((((((max(((~ (workgroup_id)) | (~ (workgroup_id))), ~ (workgroup_id))))) | (((max(~ (workgroup_id), ~ (uint(uint((workgroup_id)))))))))) | (((((max(~ (workgroup_id), ~ (workgroup_id))))) | (((max(~ (workgroup_id), ~ (workgroup_id)))))))))))))), (false ? ((subgroup_size)) : (1u * (workgroup_size * (~ ((((max(~ (workgroup_id), ~ (workgroup_id))))) | (((max(~ (workgroup_id), ~ (workgroup_id)))))))))))))))));
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 if((((((injectionSwitch) + vec2(0.0, 0.0)).x > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 if((((! (! ((false || (((bool(bool((bool(bool(((true) || false))))))) && (((((! (bool(bool((! ((bool(bvec4(false, true, true, true)))))))))) || false)))))))))) || false))
  barrier();
 if(((((min((mix(float((- 4.4)), float(((injectionSwitch.x) / 1.0)), bool(true))), injectionSwitch.x)) > (mix(vec2((injectionSwitch)[0], (mix(vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), vec2((981.320), (- 8392.8663)), bvec2(false, false)))[1]), vec2((- 928.545), (- 5172.9886)), bvec2(((injectionSwitch.x > injectionSwitch.y)), false))).y))))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((false || ((((injectionSwitch.x < injectionSwitch.y)) && ((false))))))
  {
   if((! (! ((((injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
   barrier();
  }
 if((((((injectionSwitch.x < injectionSwitch.y)) && ((((((((! ((false || (((((((bool(bvec4(false || (bool(bvec3((! (true && ((((bool(bvec4((! (! (true))) && ((((injectionSwitch.x > injectionSwitch.y)))), true, ((injectionSwitch.x < injectionSwitch.y)), false)))) && true)))), false, false))), false, false, false))) || false))) || false))))))) && true))))) && true)) || false)))
  {
   if((! (! ((((injectionSwitch.x > injectionSwitch.y)))))))
    {
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(((((clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > (clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))))
  barrier();
 if((false))
  barrier();
 if((((! (! (((false || ((! (! ((((injectionSwitch.x > injectionSwitch.y)) && true)))))))))) || (! (! (((false || (false)))))))))
  {
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 atomicStore(write_val, uint(virtual_gid), ((int(int(min(((4) | (4)), 4))))), 64, (1 * (((0) ^ 0))));
 if((false))
  barrier();
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((bool(bvec3((((((bool(bool((false) || false)))))) || false), false, true))))
  {
   if((false))
    barrier();
   barrier();
  }
 if(((! (! (false)))))
  barrier();
 if((false))
  barrier();
 buf[virtual_gid] = (0u ^ (uint(subgroupAllEqual(((0u ^ (uint((uint((injectionSwitch.y)) * (uint((clamp(write_val, (((uint(uvec4(((1u * (~ (~ ((0u) ^ 0u))))), 0u, 0u, 0u)))) ^ ((clamp(((false ? (atomicXor(workgroup_id, write_val)) : write_val)), write_val, ((write_val) | (write_val)))))), write_val)))))))))))));
 if((true && ((false))))
  barrier();
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
