#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 if(false)
  {
   if((false))
    return;
  }
 else
  {
   for(int _injected_loop_counter = 1; _injected_loop_counter != (int(int((1 ^ (1 & 1))))); _injected_loop_counter --)
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        {
         if((false))
          return;
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
         barrier();
        }
       return;
      }
     if((false))
      barrier();
     barrier();
     if((false))
      barrier();
     if(((bool(bvec2(false, true)))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if((false))
      barrier();
     if(((((injectionSwitch.x < injectionSwitch.y)) && (false))))
      barrier();
    }
   if((false))
    barrier();
  }
 if((false))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   do
    {
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
     if((false))
      barrier();
    }
   while(false);
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   if((false))
    return;
   barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(true)
  {
   if((false))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     if((false))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
  }
 for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
  {
   if((false))
    barrier();
   if((false))
    barrier();
  }
 uvec3 GLF_merged3_0_1_11_1_1_14_2_1_12virtual_gidworkgroup_baseworkgroup_id;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if(false)
        {
         if((false))
          barrier();
        }
       else
        {
         if((false))
          barrier();
         barrier();
        }
      }
     if(((! (! (false)))))
      barrier();
     if((false))
      barrier();
     if(true)
      {
       return;
       if((false))
        barrier();
      }
     else
      {
      }
     if((false))
      barrier();
    }
   barrier();
   if((((((injectionSwitch.x > injectionSwitch.y))) || false)))
    barrier();
   if((false))
    {
     if(((false) || false))
      {
      }
     else
      {
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         barrier();
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
    }
  }
 if((false))
  barrier();
 if((false))
  {
   if((false))
    {
     if((false))
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           return;
          }
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           if(false)
            {
            }
           else
            {
             barrier();
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           barrier();
          }
         return;
         if((false))
          barrier();
        }
       barrier();
       if((false))
        barrier();
       if(((bool(bvec4(false, true, true, false)))))
        barrier();
      }
     if((false))
      barrier();
     for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
      {
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if((false))
      barrier();
     if((((false) && true)))
      {
       if((false))
        barrier();
       if(false)
        {
        }
       else
        {
         return;
        }
       if((false))
        barrier();
      }
     for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
      {
       return;
       if((false))
        barrier();
      }
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     if((false))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       if((false))
        {
         for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > 0; _injected_loop_counter --)
          {
           barrier();
          }
         if(((! ((bool(bvec2(! (false), true)))))))
          barrier();
        }
       barrier();
      }
    }
   for(int _injected_loop_counter = 0; _injected_loop_counter < (int((injectionSwitch.y)) & 1); _injected_loop_counter ++)
    {
     if((false))
      continue;
     if((false))
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
         if((false))
          barrier();
        }
       if((false))
        barrier();
       do
        {
         if((false))
          barrier();
         barrier();
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
      }
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         barrier();
        }
       break;
      }
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       continue;
      }
     if(false)
      {
      }
     else
      {
       if((false))
        barrier();
       if(false)
        {
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           return;
          }
        }
       if((false))
        barrier();
      }
     if((false))
      {
       if((false))
        barrier();
       break;
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   for(int _injected_loop_counter = 0; _injected_loop_counter != (((1 << (int(2))) >> (int(2))) * (1)); _injected_loop_counter ++)
    {
     if((false))
      {
       if((false))
        return;
       return;
       if((false))
        barrier();
      }
    }
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      {
       if((! (! (false))))
        {
         if(((bool(bvec3(false, false, false)))))
          barrier();
        }
       else
        {
         if(((! (! (false)))))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       do
        {
         if((false))
          barrier();
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
         if((false))
          barrier();
        }
       while(false);
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
         if((false))
          barrier();
        }
       else
        {
         if((false))
          barrier();
         return;
        }
      }
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     return;
    }
   if((false))
    barrier();
   if((! (! (true))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         barrier();
        }
       barrier();
      }
     if((false))
      {
       if((false))
        barrier();
       if(((bool(bvec2(bool(bvec3(true, true, false)), false)))))
        {
         barrier();
        }
       else
        {
        }
      }
    }
   else
    {
    }
   if((false))
    {
     if((false))
      barrier();
     if(true)
      {
       barrier();
      }
     else
      {
      }
     if((false))
      barrier();
    }
   if((false))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      barrier();
     barrier();
    }
   if(((true && (false))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   if((false))
    barrier();
   do
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       return;
       if((false))
        barrier();
       if((false))
        {
         do
          {
           return;
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
        }
       if((false))
        barrier();
      }
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
   barrier();
   if((false))
    barrier();
   do
    {
     if(true)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
            {
             if((false))
              barrier();
             do
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((false))
                  barrier();
                 continue;
                }
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if((false))
                    barrier();
                   break;
                  }
                 if(false)
                  {
                  }
                 else
                  {
                   if((false))
                    {
                     if((false))
                      barrier();
                     barrier();
                    }
                  }
                 if((false))
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    continue;
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   return;
                  }
                 if((false))
                  {
                   if((false))
                    barrier();
                   do
                    {
                     barrier();
                    }
                   while((! ((true && (! (false))))));
                   if((((bool(bvec3(bool(bvec4(false, true, true, false)), true, false))))))
                    barrier();
                  }
                 if((false))
                  barrier();
                 if((((false) || false)))
                  {
                   if((false))
                    barrier();
                   return;
                  }
                 for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < 1; _injected_loop_counter ++)
                  {
                   if((false))
                    {
                     if((false))
                      barrier();
                     barrier();
                    }
                  }
                 barrier();
                }
               if((false))
                barrier();
               if((false))
                break;
               if((false))
                barrier();
               if((false))
                barrier();
               if((false))
                {
                 if((false))
                  barrier();
                 return;
                }
              }
             while(false);
            }
          }
         do
          {
           barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((false))
              break;
             barrier();
            }
           if(((bool((! (! (bool(false))))))))
            barrier();
           if((false))
            break;
          }
         while(false);
         if((false))
          barrier();
         for(int _injected_loop_counter = ((1 << (((((int(0)) + 0)) - (0 >> (int(0)))))) >> (int(0))); _injected_loop_counter > 0; _injected_loop_counter --)
          {
           if((false))
            barrier();
           do
            {
             if((false))
              {
               if((false))
                {
                 if((false))
                  barrier();
                 barrier();
                }
               continue;
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                continue;
               barrier();
              }
            }
           while(false);
          }
        }
      }
     else
      {
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(false);
   if((false))
    return;
  }
 if(false)
  {
   if((false))
    {
     if((false))
      barrier();
     return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
   if((false))
    barrier();
   do
    {
     if((false))
      barrier();
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if(false)
            {
            }
           else
            {
             barrier();
            }
          }
         barrier();
        }
       barrier();
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
       if(((bool(bvec2(false, true)))))
        return;
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   while((bool(bvec3(false, true, true))));
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   if((false))
    barrier();
   if(true)
    {
     if(false)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
      }
     else
      {
       if((false))
        {
         if((false))
          barrier();
         if((false))
          barrier();
         barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        return;
       for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
        {
         if((false))
          {
           if((false))
            barrier();
           if((((false) && true)))
            {
             if((false))
              barrier();
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
              }
             else
              {
               if((false))
                return;
              }
             if((false))
              barrier();
             return;
            }
           for(int _injected_loop_counter = (0 ^ 1); _injected_loop_counter > (0 >> (int(7))); _injected_loop_counter --)
            {
             if(((bool(bvec3(false, false, true)))))
              {
               do
                {
                 barrier();
                 if((false))
                  barrier();
                }
               while(((injectionSwitch.x > injectionSwitch.y)));
              }
             for(int _injected_loop_counter = 0; _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                return;
               for(int _injected_loop_counter = (1 ^ 0); _injected_loop_counter != 0; _injected_loop_counter --)
                {
                 if((false))
                  {
                   if((false))
                    barrier();
                   if((false))
                    {
                     if((false))
                      {
                       do
                        {
                         barrier();
                        }
                       while(((((injectionSwitch.x > injectionSwitch.y))) && true));
                      }
                     if((false))
                      {
                       if(true)
                        {
                         if((false))
                          break;
                         barrier();
                        }
                       else
                        {
                        }
                      }
                     if((false))
                      break;
                     do
                      {
                       if((false))
                        barrier();
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       barrier();
                      }
                     while(false);
                     do
                      {
                       if((false))
                        {
                         if((false))
                          barrier();
                         barrier();
                        }
                      }
                     while(((injectionSwitch.x > injectionSwitch.y)));
                    }
                   if((false))
                    barrier();
                   if((false))
                    barrier();
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if((false))
                    barrier();
                   continue;
                   if((false))
                    {
                     if(true)
                      {
                       if((false))
                        return;
                       if((false))
                        barrier();
                      }
                     else
                      {
                       if((false))
                        barrier();
                      }
                     barrier();
                    }
                   if((false))
                    barrier();
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if((false))
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      {
                       do
                        {
                         barrier();
                        }
                       while(false);
                      }
                     return;
                    }
                   if((false))
                    barrier();
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if((false))
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     barrier();
                    }
                  }
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if((false))
                  barrier();
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   for(int _injected_loop_counter = 0; _injected_loop_counter < (((1 | 0) << (int(7))) >> (int(7))); _injected_loop_counter ++)
                    {
                     barrier();
                     if((false))
                      barrier();
                     if((false))
                      barrier();
                    }
                   if((false))
                    return;
                  }
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if((false))
                    barrier();
                   return;
                   for(int _injected_loop_counter = 0; _injected_loop_counter != (1 & ((1 << (int(5))) >> (int(5)))); _injected_loop_counter ++)
                    {
                     if((false))
                      {
                       if((false))
                        barrier();
                       barrier();
                      }
                    }
                   if((false))
                    barrier();
                   if((false))
                    barrier();
                  }
                 if((false))
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(((injectionSwitch.x > injectionSwitch.y)))
                      {
                      }
                     else
                      {
                       if((false))
                        barrier();
                       if((false))
                        {
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                         if(true)
                          {
                           if((((injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                           if((false))
                            barrier();
                          }
                         else
                          {
                          }
                         if((false))
                          barrier();
                         barrier();
                        }
                      }
                     return;
                     if((false))
                      {
                       if((false))
                        {
                         if((false))
                          barrier();
                         barrier();
                        }
                       return;
                      }
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                   break;
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if((false))
                    {
                     if((false))
                      barrier();
                     if(true)
                      {
                       barrier();
                      }
                     else
                      {
                       if((false))
                        barrier();
                      }
                     if((false))
                      barrier();
                    }
                   if(((true && (false))))
                    barrier();
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    return;
                   if((false))
                    barrier();
                  }
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if((false))
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   barrier();
                  }
                 if((false))
                  {
                   for(int _injected_loop_counter = (int((injectionSwitch.x)) << (int(1))); _injected_loop_counter < 1; _injected_loop_counter ++)
                    {
                     if((false))
                      barrier();
                     if((false))
                      barrier();
                     barrier();
                    }
                  }
                 do
                  {
                   return;
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if((false))
                    return;
                  }
                 while(false);
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if((false))
                    {
                     if((false))
                      barrier();
                     barrier();
                    }
                   barrier();
                  }
                 if((false))
                  barrier();
                }
               if((false))
                break;
              }
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            barrier();
           if((false))
            {
             if((false))
              barrier();
             return;
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              barrier();
             if((false))
              barrier();
             if((false))
              return;
             if((true && (true)))
              {
               return;
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   barrier();
                  }
                 do
                  {
                   barrier();
                  }
                 while(false);
                }
              }
             else
              {
               if((false))
                barrier();
               if((false))
                barrier();
              }
             if(((bool(bvec4(((injectionSwitch.x > injectionSwitch.y)), false, ((injectionSwitch.x < injectionSwitch.y)), true)))))
              {
               do
                {
                 if((false))
                  barrier();
                 barrier();
                }
               while(((injectionSwitch.x > injectionSwitch.y)));
              }
             if((false))
              barrier();
            }
           if((false))
            {
             if((false))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             barrier();
            }
           if((false))
            barrier();
          }
         if((false))
          barrier();
        }
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if(false)
        {
        }
       else
        {
         if((false))
          {
           do
            {
             barrier();
            }
           while(false);
          }
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          barrier();
        }
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if((false))
      {
       for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != 1; _injected_loop_counter ++)
        {
         if(((! (! ((! (! (false))))))))
          barrier();
         barrier();
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
      }
    }
   else
    {
     if((false))
      {
       do
        {
         barrier();
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
      }
     if(((! (! (false)))))
      {
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
       do
        {
         barrier();
        }
       while(false);
       if((false))
        barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if((false))
    barrier();
  }
 if((false))
  barrier();
 do
  {
   if((false))
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        {
         if((false))
          barrier();
         continue;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(true)
          {
           barrier();
          }
         else
          {
          }
        }
       if(true)
        {
         if((false))
          barrier();
         if((false))
          return;
        }
       else
        {
         if((false))
          barrier();
        }
       return;
      }
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
       if((false))
        barrier();
       if(false)
        {
        }
       else
        {
         if((false))
          return;
        }
       if((false))
        barrier();
      }
     do
      {
       barrier();
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(false);
     if((false))
      {
       if((false))
        barrier();
       if((false))
        barrier();
       if(true)
        {
         if((false))
          barrier();
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            barrier();
           for(int _injected_loop_counter = 1; _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
            {
             barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       else
        {
        }
       if((((false) || false)))
        barrier();
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         return;
        }
       else
        {
        }
       for(int _injected_loop_counter = 1; _injected_loop_counter > ((true ? 0 : (- 82471))); _injected_loop_counter --)
        {
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
        }
      }
     if((false))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       for(int _injected_loop_counter = 1; _injected_loop_counter > (int((injectionSwitch.y)) ^ 1); _injected_loop_counter --)
        {
         barrier();
         if((false))
          barrier();
        }
      }
     if((false))
      return;
     if(false)
      {
       if((false))
        barrier();
       if((false))
        {
         if((false))
          barrier();
         if((false))
          break;
         break;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       if((false))
        barrier();
       if(false)
        {
        }
       else
        {
         if((false))
          barrier();
        }
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            barrier();
           continue;
          }
         if((false))
          barrier();
         barrier();
        }
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           barrier();
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            {
             if((false))
              barrier();
             if((((false) && ((injectionSwitch.x < injectionSwitch.y)))))
              barrier();
             if((false))
              continue;
             if((false))
              barrier();
             barrier();
             if((false))
              {
               if((false))
                barrier();
               barrier();
              }
             if((false))
              barrier();
            }
           if((false))
            {
             if((false))
              {
               if((false))
                barrier();
               if(true)
                {
                 barrier();
                 if((false))
                  barrier();
                }
               else
                {
                }
              }
             barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              barrier();
             break;
            }
          }
        }
       if((false))
        barrier();
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         break;
        }
       if((false))
        barrier();
       if((false))
        {
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           if(((bool(bvec2(false, false)))))
            barrier();
           do
            {
             barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
          }
         if((false))
          barrier();
         barrier();
        }
       if((false))
        {
         if(((! (! (false)))))
          barrier();
         return;
        }
       do
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
      }
     do
      {
       if(((bool(bvec4(false, false, true, false)))))
        barrier();
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
     if((false))
      barrier();
    }
   if((false))
    {
     if((false))
      return;
     for(int _injected_loop_counter = (0 & ivec4(92487, - 79155, 89307, - 80162).w); _injected_loop_counter != 1; _injected_loop_counter ++)
      {
       if((false))
        {
         for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
          {
           barrier();
           if((false))
            barrier();
          }
        }
      }
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 while(false);
 if((false))
  barrier();
 if((false))
  {
   do
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   while(false);
  }
 if((false))
  {
   if((false))
    {
     if((false))
      barrier();
     return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   return;
  }
 uint subgroup_id = gl_SubgroupID;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   if(true)
    {
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     barrier();
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     if(((((! (! (false)))) && true)))
      {
       if((false))
        barrier();
       return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
     if((false))
      return;
    }
  }
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 uint subgroup_size = gl_SubgroupSize;
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  {
   if((false))
    barrier();
   if(false)
    {
    }
   else
    {
     barrier();
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   do
    {
     return;
    }
   while(false);
  }
 if((false))
  return;
 if((false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(((! (! (false)))))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  return;
 uint workgroup_size = gl_WorkGroupSize.x;
 if((((false || (bool(bvec4(false, true, true, false)))))))
  {
   if((false))
    barrier();
   if(((false || (false))))
    {
     if((false))
      return;
     return;
     if((false))
      barrier();
    }
   if((false))
    {
     do
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     while(false);
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     barrier();
    }
   while(false);
  }
 if((false))
  barrier();
 if(((false || ((false || (false))))))
  {
   if((false))
    barrier();
   return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 do
  {
   if((false))
    barrier();
   if((false))
    {
     if((false))
      {
       if((false))
        break;
       return;
      }
     barrier();
     if((false))
      barrier();
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
       if((false))
        barrier();
       if((false))
        barrier();
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(((! (! (false)))))
        barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if((false))
    barrier();
  }
 while(false);
 if((false))
  {
   if(((bool(bool(((injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       barrier();
      }
     else
      {
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 do
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     if(true)
      {
       if((false))
        return;
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
       if((false))
        barrier();
       if(false)
        {
         if((false))
          barrier();
         if((false))
          barrier();
        }
       else
        {
         if((false))
          return;
         if((false))
          barrier();
         if((false))
          barrier();
        }
      }
     else
      {
       do
        {
         do
          {
           if((false))
            {
             if((false))
              barrier();
             do
              {
               if((false))
                {
                 if((false))
                  {
                   if((false))
                    barrier();
                   return;
                  }
                 if((false))
                  barrier();
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if((false))
                    barrier();
                   return;
                  }
                 return;
                 if((false))
                  barrier();
                 if((false))
                  barrier();
                 if((false))
                  barrier();
                 if(((! (! (false)))))
                  {
                   if((false))
                    barrier();
                   if(((bool(bvec3((true && (((injectionSwitch.x > injectionSwitch.y)))), true, false)))))
                    barrier();
                   if(((injectionSwitch.x > injectionSwitch.y)))
                    {
                    }
                   else
                    {
                     barrier();
                    }
                   if((false))
                    barrier();
                  }
                }
              }
             while(false);
             if((false))
              {
               if((false))
                {
                 if(((bool(bvec3(false, true, true)))))
                  barrier();
                 if((false))
                  barrier();
                 break;
                }
               barrier();
               if((false))
                barrier();
              }
             if((false))
              barrier();
             if((false))
              {
               do
                {
                 barrier();
                 if((false))
                  barrier();
                }
               while(false);
              }
             if(((injectionSwitch.x < injectionSwitch.y)))
              {
               barrier();
              }
             else
              {
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != 1; _injected_loop_counter ++)
                {
                 barrier();
                }
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             do
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
               if((false))
                {
                 if((false))
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   barrier();
                  }
                 if(true)
                  {
                   if((false))
                    barrier();
                  }
                 else
                  {
                   if((false))
                    break;
                   if((false))
                    barrier();
                  }
                 barrier();
                }
               if((false))
                barrier();
              }
             while(((injectionSwitch.x > injectionSwitch.y)));
             if(((bool(bool((bool(bool(false))))))))
              barrier();
            }
           barrier();
           if((false))
            barrier();
           if((false))
            continue;
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            {
             for(int _injected_loop_counter = (1 & (1 & 1)); _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
            }
           break;
           if((false))
            barrier();
          }
        }
       while(false);
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
       if((false))
        barrier();
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    barrier();
  }
 while(((injectionSwitch.x > injectionSwitch.y)));
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   for(int _injected_loop_counter = 0; _injected_loop_counter < ((1 << (int(7))) >> (int(7))); _injected_loop_counter ++)
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
       return;
      }
     barrier();
    }
  }
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if((false))
    {
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        return;
       barrier();
      }
     return;
    }
   return;
   if((false))
    {
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     if((false))
      barrier();
     return;
    }
   if(((! (! (((false) && true))))))
    barrier();
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 GLF_merged3_0_1_11_1_1_14_2_1_12virtual_gidworkgroup_baseworkgroup_id.z = workgroup_id;
 if((false))
  barrier();
 if((false))
  {
   if((false))
    {
     do
      {
       if(((! (! ((! (! (false))))))))
        barrier();
       return;
      }
     while(false);
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(true)
    {
     if((false))
      {
       if((false))
        barrier();
       return;
      }
    }
   else
    {
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
      {
       return;
      }
    }
   barrier();
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if((false))
  {
   if((false))
    barrier();
   return;
   if((false))
    barrier();
  }
 if((false))
  barrier();
 uint workgroup_base = workgroup_size * GLF_merged3_0_1_11_1_1_14_2_1_12virtual_gidworkgroup_baseworkgroup_id.z;
 if((false))
  barrier();
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
    }
   else
    {
     if((false))
      barrier();
    }
   barrier();
  }
 if((false))
  {
   if(true)
    {
     return;
    }
   else
    {
    }
   if((false))
    barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if(true)
    {
     barrier();
    }
   else
    {
    }
  }
 if(true)
  {
   if((false))
    barrier();
   if((false))
    return;
   if((false))
    return;
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     return;
     if((false))
      return;
    }
   if(((! (! (false)))))
    barrier();
   if(((false || (false))))
    barrier();
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if((false))
        barrier();
       if(false)
        {
         if((false))
          barrier();
        }
       else
        {
         barrier();
        }
       if((false))
        barrier();
       if((((((injectionSwitch.x > injectionSwitch.y))) || false)))
        return;
      }
     else
      {
      }
    }
   for(int _injected_loop_counter = 0; _injected_loop_counter < (((1 ^ 0) << (int(1))) >> ((clamp(int(1), int(1), int(1))))); _injected_loop_counter ++)
    {
     do
      {
       if((false))
        barrier();
      }
     while(false);
     if((false))
      {
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
         if((false))
          {
           if((false))
            {
             if((false))
              barrier();
             barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              barrier();
             return;
            }
           barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > 0; _injected_loop_counter --)
            {
             return;
             if((false))
              barrier();
             if((false))
              {
               if((false))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               break;
              }
             if((false))
              {
               do
                {
                 if(((! (! (false)))))
                  barrier();
                 barrier();
                }
               while(false);
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                return;
               continue;
              }
             barrier();
            }
           if((false))
            barrier();
          }
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
          }
         else
          {
          }
         if((false))
          {
           if(false)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
             barrier();
             if((false))
              barrier();
            }
           if((false))
            barrier();
           if((false))
            barrier();
          }
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(true)
          {
           barrier();
          }
         else
          {
           if((false))
            {
             if(((bool(bvec3(((false) || false), false, true)))))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               return;
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((false))
              barrier();
             do
              {
               if((false))
                barrier();
              }
             while(((injectionSwitch.x > injectionSwitch.y)));
             barrier();
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
        }
       else
        {
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if((false))
          barrier();
         if((false))
          {
           if((false))
            {
             if((false))
              {
               if(((! (! (false)))))
                barrier();
               continue;
              }
             if(((true && (false))))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                barrier();
               continue;
              }
             if((false))
              barrier();
             barrier();
             if(false)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             else
              {
               if((false))
                return;
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
            }
           if((false))
            barrier();
           return;
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            continue;
           if((false))
            {
             if((false))
              {
               if(false)
                {
                }
               else
                {
                 barrier();
                 if((false))
                  barrier();
                }
              }
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if((false))
                {
                 for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                  {
                   if((false))
                    barrier();
                   barrier();
                  }
                }
               break;
               if((false))
                barrier();
              }
             barrier();
            }
           if((false))
            barrier();
          }
        }
       if((false))
        {
         if((false))
          barrier();
         if(true)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            barrier();
          }
         else
          {
          }
         barrier();
        }
      }
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
    }
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
  }
 else
  {
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    barrier();
   if(true)
    {
     if((false))
      barrier();
     return;
    }
   else
    {
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(true)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
    }
   else
    {
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if(true)
    {
     barrier();
    }
   else
    {
    }
  }
 if((false))
  {
   if((false))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   return;
  }
 if((false))
  barrier();
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     return;
    }
   if((false))
    {
     if((false))
      {
       if((false))
        barrier();
       return;
      }
     for(int _injected_loop_counter = 0; _injected_loop_counter != (1 & 1); _injected_loop_counter ++)
      {
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   barrier();
   if((false))
    barrier();
  }
 if((false))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     for(int _injected_loop_counter = ((1 ^ 0) | 1); _injected_loop_counter != (61553 & 0); _injected_loop_counter --)
      {
       return;
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       barrier();
      }
     while(false);
    }
   do
    {
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(false);
   if((false))
    barrier();
   for(int _injected_loop_counter = (((~ (~ (1))) << (int(0))) >> (int(0))); _injected_loop_counter != 0; _injected_loop_counter --)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 if((false))
  return;
 GLF_merged3_0_1_11_1_1_14_2_1_12virtual_gidworkgroup_baseworkgroup_id.y = workgroup_base;
 for(int _injected_loop_counter = (0 | 0); _injected_loop_counter != 1; _injected_loop_counter ++)
  {
   if((false))
    {
     if((false))
      barrier();
     if((false))
      barrier();
     if(true)
      {
       barrier();
      }
     else
      {
      }
    }
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     if((false))
      barrier();
     if((false))
      {
       for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != 0; _injected_loop_counter --)
        {
         if((false))
          {
           if((false))
            barrier();
           for(int _injected_loop_counter = (1 & 1); _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
            {
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
              }
             else
              {
               barrier();
              }
             if((false))
              barrier();
            }
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        return;
       if((false))
        barrier();
       break;
       if((false))
        barrier();
      }
     if((false))
      {
       if(((bool(bvec3((! (! (false))), true, false)))))
        barrier();
       break;
      }
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        {
         if((false))
          {
           if((false))
            barrier();
           barrier();
           if((false))
            barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       barrier();
       if((false))
        barrier();
      }
     if((false))
      {
       if((false))
        barrier();
       return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        return;
       barrier();
       if((((true && (bool(bvec2(false, true)))))))
        {
         if((! (! (false))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
           barrier();
          }
        }
      }
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       break;
      }
    }
   if((false))
    barrier();
   if((false))
    barrier();
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if((false))
      barrier();
    }
   else
    {
     if((false))
      barrier();
    }
   if((false))
    {
     for(int _injected_loop_counter = ((1 << (int(1))) >> (int(1))); _injected_loop_counter != 0; _injected_loop_counter --)
      {
       return;
      }
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   if(true)
    {
     if(false)
      {
      }
     else
      {
       return;
      }
     if((false))
      barrier();
     if((false))
      {
       if(true)
        {
         if(((false || (false))))
          {
           if((false))
            barrier();
           if(true)
            {
             barrier();
            }
           else
            {
            }
          }
        }
       else
        {
        }
       if((((false) || false)))
        return;
       return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
    }
   else
    {
     if((false))
      barrier();
    }
  }
 if((false))
  {
   if((false))
    barrier();
   return;
  }
 if((((false) || false)))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
    }
   else
    {
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if((false))
    barrier();
  }
 if((false))
  return;
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(true)
  {
   if((false))
    {
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       barrier();
      }
    }
   for(int _injected_loop_counter = (1 ^ 0); _injected_loop_counter > (0 << ((int(ivec4(int(6), 1, 0, 0))))); _injected_loop_counter --)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        {
         if((false))
          {
           if((false))
            barrier();
           continue;
          }
         if((false))
          barrier();
         barrier();
         if((false))
          barrier();
        }
       return;
       if((false))
        {
         do
          {
           barrier();
          }
         while(false);
        }
      }
     if((false))
      barrier();
     if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
      barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       if((false))
        barrier();
       for(int _injected_loop_counter = (clamp(1, 1, 1)); _injected_loop_counter > (0 << (int(7))); _injected_loop_counter --)
        {
         if((false))
          barrier();
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              barrier();
             barrier();
            }
           return;
          }
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         do
          {
           if((false))
            return;
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if(((! (! (false)))))
              barrier();
             barrier();
            }
           if((false))
            barrier();
           continue;
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
           if((false))
            barrier();
          }
         if((false))
          barrier();
        }
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
       for(int _injected_loop_counter = (0 << (int(8))); _injected_loop_counter != 1; _injected_loop_counter ++)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           barrier();
          }
         if((false))
          {
           if((false))
            barrier();
           return;
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
      }
     if(((! (! (false)))))
      barrier();
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     barrier();
     if((false))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       return;
      }
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         do
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         while((bool(bvec3(false, false, true))));
         barrier();
        }
       if((false))
        {
         do
          {
           if((false))
            barrier();
           barrier();
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
        }
       if((false))
        barrier();
       if((false))
        {
         if((false))
          barrier();
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if((false))
          barrier();
         if(((! (! (false)))))
          {
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             barrier();
             if((((false) && true)))
              barrier();
            }
           return;
          }
         do
          {
           if((false))
            {
             if((false))
              barrier();
             if((false))
              barrier();
             continue;
             if((false))
              barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            barrier();
           return;
           if((false))
            barrier();
           if((false))
            {
             if((false))
              {
               if(((! (! (false)))))
                barrier();
               barrier();
              }
             barrier();
            }
           if((false))
            {
             if((false))
              barrier();
             barrier();
            }
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           return;
          }
         if((false))
          barrier();
         if((false))
          barrier();
         if(true)
          {
           if((false))
            barrier();
           if((false))
            barrier();
          }
         else
          {
          }
        }
       barrier();
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if((false))
      barrier();
     if((false))
      {
       if((false))
        {
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
         return;
        }
       if(false)
        {
        }
       else
        {
         if((false))
          barrier();
        }
       if((false))
        barrier();
       return;
       if((false))
        barrier();
       if((false))
        barrier();
       if((false))
        {
         if((false))
          barrier();
         return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       return;
       if((false))
        barrier();
      }
     if((false))
      barrier();
    }
  }
 else
  {
   if((false))
    {
     if(true)
      {
       barrier();
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
  }
 if((false))
  barrier();
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint virtual_gid = GLF_merged3_0_1_11_1_1_14_2_1_12virtual_gidworkgroup_baseworkgroup_id.y + subgroup_id * subgroup_size + subgroup_local_id;
 if((false))
  barrier();
 for(int _injected_loop_counter = 1; _injected_loop_counter != (- 95951 & 0); _injected_loop_counter --)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   GLF_merged3_0_1_11_1_1_14_2_1_12virtual_gidworkgroup_baseworkgroup_id.x = virtual_gid;
   for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
    {
     for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < 1; _injected_loop_counter ++)
      {
       if((false))
        {
         if((((((injectionSwitch.x > injectionSwitch.y))) && true)))
          barrier();
         barrier();
        }
       if((false))
        barrier();
       if((false))
        barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
       if((false))
        barrier();
      }
     else
      {
       barrier();
      }
    }
   if((false))
    barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
      {
       barrier();
      }
    }
   do
    {
     if((false))
      {
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         barrier();
        }
       barrier();
      }
    }
   while(false);
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != 0; _injected_loop_counter --)
      {
       if(((bool(bvec2(((injectionSwitch.x > injectionSwitch.y)), true)))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         return;
        }
      }
     barrier();
    }
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     if((false))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       if((false))
        barrier();
       if((false))
        barrier();
       if((false))
        return;
       if((false))
        barrier();
       return;
       if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
        return;
      }
     if(((! (! (false)))))
      barrier();
     barrier();
     if((false))
      {
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       return;
      }
     if((false))
      barrier();
    }
   if(((! (! (false)))))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       barrier();
      }
     return;
    }
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   barrier();
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
     if((false))
      return;
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if(true)
          {
           if((false))
            {
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             else
              {
               if((false))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               return;
              }
            }
          }
         else
          {
           if((false))
            barrier();
          }
        }
       else
        {
         if((false))
          {
           if(true)
            {
             return;
            }
           else
            {
             if((false))
              barrier();
            }
          }
        }
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
          {
           barrier();
          }
        }
       barrier();
      }
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 if((false))
  barrier();
 atomicStore(write_val, uint(GLF_merged3_0_1_11_1_1_14_2_1_12virtual_gidworkgroup_baseworkgroup_id.x), 4, 64, 0);
 if((false))
  barrier();
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   if(false)
    {
    }
   else
    {
     if((false))
      barrier();
     if((false))
      {
       if((false))
        {
         if(((bool(bool(false)))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         barrier();
         if((false))
          barrier();
        }
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      barrier();
     if((false))
      barrier();
     return;
    }
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     if(true)
      {
       if((false))
        barrier();
       for(int _injected_loop_counter = 1; _injected_loop_counter != (0 >> (int(4))); _injected_loop_counter --)
        {
         return;
        }
      }
     else
      {
      }
    }
   if((false))
    barrier();
   if((false))
    barrier();
  }
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      {
       if((false))
        barrier();
       for(int _injected_loop_counter = ((83922 * - 91368) & 0); _injected_loop_counter < 1; _injected_loop_counter ++)
        {
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           barrier();
           if((false))
            barrier();
          }
         if((false))
          barrier();
        }
      }
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       for(int _injected_loop_counter = (0 >> (int(4))); _injected_loop_counter != 1; _injected_loop_counter ++)
        {
         if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
          barrier();
         barrier();
        }
      }
     if((false))
      barrier();
     return;
    }
   if(true)
    {
     barrier();
     if((false))
      return;
    }
   else
    {
    }
  }
 if((false))
  barrier();
 if((false))
  {
   do
    {
     for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
      {
       if((false))
        barrier();
      }
    }
   while(false);
   if(true)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        {
         if((false))
          barrier();
         return;
        }
       if((false))
        barrier();
       return;
       if((false))
        barrier();
      }
     do
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          {
           for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != 0; _injected_loop_counter --)
            {
             if((false))
              barrier();
            }
           if((false))
            barrier();
           return;
          }
         if((false))
          barrier();
         barrier();
        }
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
     if((false))
      barrier();
     if((false))
      {
       for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
        {
         if((false))
          barrier();
         barrier();
        }
       if((false))
        barrier();
      }
     if((false))
      {
       if((false))
        barrier();
       if((false))
        barrier();
       if((false))
        return;
       barrier();
      }
     barrier();
    }
   else
    {
     if(((false || (false))))
      {
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((false))
        barrier();
       barrier();
       if(true)
        {
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
        }
       else
        {
        }
      }
    }
  }
 for(int _injected_loop_counter = (0 << (int(0))); _injected_loop_counter < 1; _injected_loop_counter ++)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     return;
    }
   for(int _injected_loop_counter = ((int((injectionSwitch.y)) << (int(1))) >> (int(1))); _injected_loop_counter != 0; _injected_loop_counter --)
    {
     if((false))
      {
       if((((false) || false)))
        barrier();
       return;
      }
    }
   if((false))
    {
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     if((false))
      barrier();
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
      }
     else
      {
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         do
          {
           return;
          }
         while(false);
        }
      }
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     barrier();
    }
   if(false)
    {
     if((false))
      barrier();
    }
   else
    {
     do
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         do
          {
           return;
           if((false))
            barrier();
          }
         while(((false) || false));
         if(false)
          {
          }
         else
          {
           if((false))
            barrier();
          }
        }
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
    }
   if(false)
    {
    }
   else
    {
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
      {
       if((false))
        barrier();
       if((false))
        {
         do
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
           if((false))
            barrier();
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
        }
       return;
      }
    }
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
    }
   if((((false) || false)))
    barrier();
   if(true)
    {
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      return;
     if((false))
      barrier();
    }
   else
    {
    }
   if((false))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     do
      {
       barrier();
       if((false))
        barrier();
      }
     while(false);
    }
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    {
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       if((false))
        {
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           return;
          }
         else
          {
          }
        }
       if((false))
        barrier();
      }
     barrier();
    }
   if((false))
    return;
   if((false))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(false)
        {
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
      }
     if((false))
      {
       if((false))
        barrier();
       if((false))
        {
         do
          {
           return;
          }
         while(false);
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
       return;
      }
     if(false)
      {
      }
     else
      {
       return;
       if((false))
        barrier();
      }
    }
   if((false))
    {
     do
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(true)
        {
         for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(false)
              {
              }
             else
              {
               return;
               if((false))
                barrier();
               if((false))
                barrier();
              }
             if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
              barrier();
             if((false))
              barrier();
            }
           if((false))
            {
             if((false))
              barrier();
             break;
            }
          }
         if(((! (! (false)))))
          barrier();
        }
       else
        {
         if((false))
          barrier();
         if((false))
          barrier();
        }
       if((false))
        barrier();
      }
     while(false);
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       if((false))
        {
         if((false))
          barrier();
         return;
        }
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if((false))
    return;
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if(false)
    {
    }
   else
    {
     return;
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  {
   if(true)
    {
     barrier();
    }
   else
    {
    }
  }
 if((false))
  {
   if((false))
    barrier();
   return;
   if((false))
    barrier();
  }
 if((false))
  barrier();
 if((false))
  {
   if(true)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
     if((false))
      barrier();
     if(true)
      {
       barrier();
      }
     else
      {
      }
    }
   else
    {
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    {
     do
      {
       if(false)
        {
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
    }
   else
    {
     if((false))
      barrier();
     if(true)
      {
       for(int _injected_loop_counter = (1 ^ 1); _injected_loop_counter < 1; _injected_loop_counter ++)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           if(true)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
             if((false))
              barrier();
            }
           else
            {
            }
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
      }
     if((false))
      {
       if((false))
        barrier();
       return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       if((false))
        {
         if((false))
          return;
         barrier();
        }
       do
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          {
           if(false)
            {
            }
           else
            {
             if(((bool((bool(bool(bool(false))))))))
              {
               if(true)
                {
                 if(((injectionSwitch.x < injectionSwitch.y)))
                  {
                   if((false))
                    {
                     if((false))
                      barrier();
                     barrier();
                    }
                   barrier();
                  }
                 else
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                }
               else
                {
                }
              }
             if((false))
              barrier();
            }
           return;
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       while(false);
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
       return;
       if((false))
        barrier();
      }
    }
   barrier();
   if((false))
    {
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
 buf[GLF_merged3_0_1_11_1_1_14_2_1_12virtual_gidworkgroup_baseworkgroup_id.x] = uint(subgroupAllEqual(write_val));
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     barrier();
    }
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     if((false))
      {
       do
        {
         barrier();
        }
       while(false);
      }
     if((false))
      barrier();
    }
   else
    {
    }
   barrier();
  }
 if(true)
  {
   if((false))
    return;
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
     if((false))
      barrier();
     barrier();
    }
  }
 else
  {
  }
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  {
   if((false))
    {
     if((false))
      barrier();
     return;
    }
   if(false)
    {
    }
   else
    {
     if(false)
      {
      }
     else
      {
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         if((false))
          {
           if((false))
            {
             if((false))
              barrier();
             return;
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              barrier();
             return;
             if((false))
              barrier();
            }
           if(((false || ((false || (((injectionSwitch.x > injectionSwitch.y))))))))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           return;
          }
         if(false)
          {
           do
            {
             if((false))
              barrier();
            }
           while(false);
          }
         else
          {
           if((false))
            barrier();
          }
         if(false)
          {
          }
         else
          {
           barrier();
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if((false))
          {
           for(int _injected_loop_counter = (1 | 0); _injected_loop_counter > (0 >> (int(5))); _injected_loop_counter --)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(true)
              {
               if((((false) && true)))
                barrier();
               barrier();
              }
             else
              {
              }
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       for(int _injected_loop_counter = ((1 << (int(2))) >> (int(2))); _injected_loop_counter > 0; _injected_loop_counter --)
        {
         barrier();
        }
       if((false))
        return;
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
         barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         barrier();
        }
       if((false))
        barrier();
       if((false))
        barrier();
       for(int _injected_loop_counter = 1; _injected_loop_counter != (0 << (int(1))); _injected_loop_counter --)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           if((false))
            {
             if((false))
              barrier();
             barrier();
            }
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             if((false))
              {
               if((false))
                barrier();
               return;
              }
             barrier();
            }
          }
        }
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if((false))
          barrier();
         if((false))
          barrier();
        }
       else
        {
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(false)
          {
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != 1; _injected_loop_counter ++)
          {
           if((false))
            barrier();
           if((false))
            barrier();
           if((false))
            {
             for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
              {
               barrier();
              }
            }
           if((false))
            break;
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             do
              {
               barrier();
              }
             while(false);
            }
           if((false))
            {
             if(false)
              {
               if((false))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             else
              {
               if(((bool((bvec2(bvec4(bvec2(false, true), false, true)))))))
                break;
               if((false))
                {
                 if((false))
                  barrier();
                 barrier();
                }
               if((((((false) || false)) && true)))
                barrier();
               return;
              }
             if((false))
              barrier();
            }
          }
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           return;
          }
         if(((bool(bvec4((bool(bvec2(false, true))), true, false, true)))))
          {
           if((false))
            barrier();
           barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if((false))
          barrier();
         if((((false) || false)))
          {
           for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
            {
             for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > 0; _injected_loop_counter --)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if((false))
                barrier();
              }
             return;
             if((false))
              {
               if((false))
                barrier();
               barrier();
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
         if((false))
          barrier();
         if((false))
          {
           do
            {
             barrier();
            }
           while(false);
          }
        }
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if((false))
          barrier();
        }
       else
        {
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(true)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              barrier();
             barrier();
            }
           if((false))
            barrier();
           if((false))
            barrier();
          }
         else
          {
          }
         if((false))
          {
           if((false))
            {
             if((false))
              barrier();
             barrier();
            }
           return;
          }
         if((false))
          barrier();
        }
       if((false))
        {
         if((false))
          {
           do
            {
             return;
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
           if((false))
            barrier();
          }
         for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             do
              {
               do
                {
                 if((false))
                  barrier();
                }
               while((! (! (false))));
               barrier();
              }
             while(((injectionSwitch.x > injectionSwitch.y)));
            }
          }
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              barrier();
             return;
            }
           barrier();
          }
         if((false))
          barrier();
         if((false))
          {
           if(false)
            {
            }
           else
            {
             return;
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            {
             do
              {
               return;
              }
             while(((injectionSwitch.x > injectionSwitch.y)));
            }
           if((false))
            barrier();
           barrier();
          }
         if((false))
          barrier();
         for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
          {
           if((false))
            {
             if(true)
              {
               if((false))
                {
                 if((false))
                  barrier();
                 if(false)
                  {
                  }
                 else
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 if(false)
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if((false))
                    barrier();
                  }
                 else
                  {
                   if(((bool(bool(false)))))
                    barrier();
                   barrier();
                   if((false))
                    barrier();
                   if((false))
                    {
                     if((false))
                      barrier();
                     return;
                    }
                  }
                }
              }
             else
              {
              }
             if(true)
              {
               if((false))
                return;
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
               if((false))
                barrier();
               return;
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             else
              {
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
              {
               if((false))
                barrier();
               if((false))
                return;
               if((false))
                barrier();
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                barrier();
               for(int _injected_loop_counter = 0; _injected_loop_counter != ((1 << (int(3))) >> (int(3))); _injected_loop_counter ++)
                {
                 if((false))
                  barrier();
                 return;
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if((false))
                  barrier();
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
            }
           if((false))
            barrier();
          }
         barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           return;
           if((false))
            barrier();
          }
         if((false))
          {
           if((false))
            barrier();
           return;
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         do
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = 0; _injected_loop_counter != (0 + (1)); _injected_loop_counter ++)
              {
               if((false))
                barrier();
               if((false))
                barrier();
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(true)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if((false))
                barrier();
               barrier();
              }
             else
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             if((false))
              barrier();
             if((false))
              {
               if((false))
                barrier();
               return;
               if((false))
                barrier();
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
         while(false);
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           if((false))
            barrier();
           if((false))
            barrier();
           barrier();
          }
         while(false);
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        {
         for(int _injected_loop_counter = 1; _injected_loop_counter != ((0 ^ 0) ^ 0); _injected_loop_counter --)
          {
           if((false))
            {
             if((false))
              barrier();
             barrier();
            }
          }
         if((false))
          {
           if((false))
            {
             if((false))
              barrier();
             barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              barrier();
             return;
            }
           if((false))
            barrier();
           barrier();
          }
         if((false))
          barrier();
         for(int _injected_loop_counter = (0 >> (int(7))); _injected_loop_counter < (int((injectionSwitch.y)) & 1); _injected_loop_counter ++)
          {
           if(((bool(bool(false)))))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              barrier();
             if((false))
              barrier();
             barrier();
             if((false))
              barrier();
            }
           if((false))
            {
             for(int _injected_loop_counter = (clamp(0, 0, 0)); _injected_loop_counter < ((1 << (((int(4)) ^ int((injectionSwitch.x))))) >> (int(4))); _injected_loop_counter ++)
              {
               if((false))
                barrier();
               barrier();
              }
            }
           if((false))
            continue;
           if((false))
            barrier();
           if((false))
            {
             if((bool(bool(((injectionSwitch.x > injectionSwitch.y))))))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             else
              {
               if((false))
                barrier();
               barrier();
               if((false))
                return;
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             if((false))
              barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
           if((false))
            {
             if((false))
              barrier();
             if(((true && (false))))
              barrier();
             for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != (int((injectionSwitch.x)) & 58064); _injected_loop_counter --)
              {
               barrier();
              }
            }
           if(true)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             if((false))
              {
               if((false))
                barrier();
               if((false))
                barrier();
               if(((injectionSwitch.x < injectionSwitch.y)))
                {
                 barrier();
                }
               else
                {
                }
              }
             if(((bool(bool(((injectionSwitch.x > injectionSwitch.y)))))))
              barrier();
             if((false))
              barrier();
             return;
            }
           else
            {
             if((false))
              barrier();
            }
           if((false))
            barrier();
          }
         if(false)
          {
           if((false))
            barrier();
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
               barrier();
               if(((bool((bvec2(bvec4(bvec2(false, false), false, false)))))))
                barrier();
              }
            }
          }
         if((false))
          return;
         if((false))
          barrier();
        }
       if(false)
        {
        }
       else
        {
         if(false)
          {
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                barrier();
               if((false))
                barrier();
               return;
              }
             if((false))
              return;
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if((false))
                    break;
                   if((false))
                    barrier();
                   barrier();
                  }
                }
               barrier();
              }
             if((false))
              {
               if((false))
                barrier();
               for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                {
                 if((false))
                  {
                   if((false))
                    barrier();
                   barrier();
                  }
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
               if((false))
                return;
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               return;
              }
             barrier();
            }
          }
         if((false))
          barrier();
         if(false)
          {
           if((false))
            barrier();
          }
         else
          {
           if((false))
            barrier();
           if((false))
            {
             if((false))
              barrier();
             return;
            }
           if((false))
            barrier();
          }
        }
       if(true)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            {
             if((false))
              barrier();
             if((false))
              barrier();
             barrier();
            }
           barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           barrier();
          }
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
       if((false))
        {
         if(false)
          {
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         for(int _injected_loop_counter = 1; _injected_loop_counter != (0 << (int(8))); _injected_loop_counter --)
          {
           if((((false) && true)))
            {
             if((false))
              barrier();
             if((false))
              barrier();
             barrier();
            }
          }
         if((false))
          {
           if(false)
            {
            }
           else
            {
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(true)
                {
                 barrier();
                }
               else
                {
                }
              }
             if((false))
              {
               if((false))
                barrier();
               if((false))
                barrier();
               if((false))
                return;
               barrier();
               if((false))
                barrier();
              }
             if((false))
              return;
            }
           barrier();
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            {
             do
              {
               barrier();
              }
             while((! (! (false))));
            }
           if((false))
            barrier();
           if((false))
            {
             if((bool((bvec3(bvec4(bvec3(((injectionSwitch.x > injectionSwitch.y)), false, false), true))))))
              {
              }
             else
              {
               if((false))
                {
                 if(false)
                  {
                   if((false))
                    barrier();
                  }
                 else
                  {
                   barrier();
                   if((false))
                    barrier();
                  }
                }
               if((false))
                barrier();
              }
             barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
         if((false))
          {
           if(true)
            {
             if((false))
              {
               if(((false || (false))))
                barrier();
               barrier();
              }
             if(true)
              {
               barrier();
              }
             else
              {
               if((false))
                barrier();
              }
            }
           else
            {
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          return;
         if((false))
          barrier();
         if((false))
          {
           if((false))
            {
             if((false))
              return;
             barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           do
            {
             if((false))
              barrier();
             barrier();
             if((false))
              barrier();
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            return;
          }
         barrier();
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if(true)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
            }
           barrier();
          }
         if((false))
          {
           for(int _injected_loop_counter = ((false ? (- 19095) : ((1) / 1))); _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
            {
             barrier();
             if(((false || (false))))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((false))
                  barrier();
                 barrier();
                }
               return;
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((false))
              barrier();
            }
          }
        }
       if((false))
        {
         if((false))
          {
           if((false))
            {
             if((false))
              barrier();
             do
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
               if((false))
                {
                 if((false))
                  barrier();
                 barrier();
                }
               if((false))
                {
                 if((false))
                  barrier();
                 if((false))
                  barrier();
                 continue;
                }
              }
             while(((injectionSwitch.x > injectionSwitch.y)));
             do
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if((false))
                    barrier();
                   if(false)
                    {
                    }
                   else
                    {
                     barrier();
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(((bool(bvec4(false, true, true, false)))))
                        barrier();
                       barrier();
                      }
                    }
                  }
                 for(int _injected_loop_counter = 0; _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
                  {
                   return;
                  }
                }
               if((false))
                {
                 do
                  {
                   barrier();
                  }
                 while((bool(bvec4(false, ((injectionSwitch.x > injectionSwitch.y)), ((injectionSwitch.x < injectionSwitch.y)), false))));
                }
               if((false))
                break;
               barrier();
               if((false))
                barrier();
              }
             while(((injectionSwitch.x > injectionSwitch.y)));
             if((false))
              barrier();
             if((false))
              {
               if((false))
                barrier();
               if((bool(bvec3((bool(bvec2(false, true))), false, true))))
                {
                }
               else
                {
                 if((false))
                  barrier();
                 barrier();
                }
              }
            }
           for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
            {
             for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != ((1 << (int(1))) >> ((clamp(int(1), int(1), int(1))))); _injected_loop_counter ++)
              {
               return;
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((false))
                  barrier();
                 barrier();
                }
              }
             if((false))
              {
               if((false))
                barrier();
               if(false)
                {
                }
               else
                {
                 if((false))
                  barrier();
                }
               return;
              }
             for(int _injected_loop_counter = (((1 & 1)) ^ 0); _injected_loop_counter > 0; _injected_loop_counter --)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             if((false))
              {
               for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
                {
                 barrier();
                 if((false))
                  barrier();
                }
              }
             do
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 do
                  {
                   if(false)
                    {
                    }
                   else
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     barrier();
                    }
                  }
                 while(false);
                }
              }
             while(false);
            }
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           if((false))
            {
             if((((false) || false)))
              barrier();
             if(true)
              {
               if((false))
                barrier();
               barrier();
              }
             else
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
         return;
         if((false))
          barrier();
         if((false))
          return;
         if(true)
          {
           if((false))
            {
             if((false))
              barrier();
             barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            {
             if(false)
              {
               if((false))
                return;
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if((false))
                {
                 if(true)
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
               if((false))
                barrier();
              }
             else
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 for(int _injected_loop_counter = 1; _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 if((false))
                  barrier();
                 if((false))
                  {
                   for(int _injected_loop_counter = (int((injectionSwitch.x)) << (int(3))); _injected_loop_counter < 1; _injected_loop_counter ++)
                    {
                     if(true)
                      {
                       barrier();
                      }
                     else
                      {
                      }
                     if((false))
                      barrier();
                    }
                   if((false))
                    barrier();
                  }
                 if((false))
                  barrier();
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(false)
                  {
                  }
                 else
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    {
                     for(int _injected_loop_counter = ((0) - 0); _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
                      {
                       barrier();
                      }
                    }
                  }
                 return;
                }
               if(((injectionSwitch.x < injectionSwitch.y)))
                {
                 if((false))
                  barrier();
                 if((false))
                  {
                   if(((injectionSwitch.x < injectionSwitch.y)))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                 if((false))
                  barrier();
                }
               else
                {
                }
              }
             if((false))
              barrier();
             if((false))
              {
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 return;
                 if((false))
                  barrier();
                }
               return;
              }
             if((false))
              return;
             if((false))
              barrier();
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 do
                  {
                   barrier();
                  }
                 while(false);
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               if(((((bool(bool(false))) && true))))
                barrier();
               return;
              }
             if((false))
              {
               for(int _injected_loop_counter = (int((injectionSwitch.x)) | 0); _injected_loop_counter < ((((1 << (int(5))) >> (int(5)))) | (0 | 0)); _injected_loop_counter ++)
                {
                 barrier();
                }
              }
             for(int _injected_loop_counter = (1 & 1); _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
              {
               do
                {
                 if((false))
                  {
                   for(int _injected_loop_counter = 0; _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
                    {
                     barrier();
                    }
                  }
                 if((false))
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if((false))
                    barrier();
                   if((false))
                    barrier();
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    return;
                   if((false))
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     if((false))
                      barrier();
                     barrier();
                    }
                   if((false))
                    barrier();
                   if(((((injectionSwitch.x > injectionSwitch.y)) || (((injectionSwitch.x > injectionSwitch.y))))))
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     barrier();
                    }
                   barrier();
                   if((false))
                    break;
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 if((false))
                  {
                   if((false))
                    return;
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     barrier();
                    }
                   if((false))
                    {
                     if((false))
                      {
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       do
                        {
                         barrier();
                        }
                       while(false);
                      }
                     if((false))
                      barrier();
                     if((false))
                      continue;
                     barrier();
                    }
                   return;
                  }
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(true)
                    {
                     if((false))
                      barrier();
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      {
                       if((false))
                        barrier();
                       barrier();
                      }
                    }
                   else
                    {
                    }
                   do
                    {
                     barrier();
                    }
                   while(false);
                   if((false))
                    barrier();
                  }
                 if((false))
                  {
                   if((false))
                    barrier();
                   barrier();
                  }
                 if(((true && (false))))
                  barrier();
                 if((false))
                  {
                   if((false))
                    barrier();
                   if((false))
                    {
                     if((false))
                      barrier();
                     barrier();
                    }
                   if((false))
                    barrier();
                   if(((! (! (false)))))
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      {
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       return;
                      }
                     if((false))
                      {
                       if((false))
                        barrier();
                       if((false))
                        barrier();
                       break;
                      }
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     continue;
                     if((false))
                      {
                       if((false))
                        {
                         if(true)
                          {
                           barrier();
                          }
                         else
                          {
                           if((((injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                          }
                        }
                       barrier();
                      }
                     if((false))
                      barrier();
                    }
                   if((false))
                    {
                     for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                      {
                       barrier();
                      }
                    }
                   if((false))
                    barrier();
                   if((false))
                    continue;
                   return;
                  }
                 if((false))
                  {
                   if((false))
                    barrier();
                   continue;
                   if((false))
                    barrier();
                  }
                 if(true)
                  {
                   if((false))
                    barrier();
                  }
                 else
                  {
                  }
                 return;
                 if(false)
                  {
                  }
                 else
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    {
                     for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                      {
                       if((false))
                        {
                         if((false))
                          {
                           if((((injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                           if((false))
                            barrier();
                           barrier();
                           if((false))
                            barrier();
                          }
                         for(int _injected_loop_counter = (0 << (int(6))); _injected_loop_counter < 1; _injected_loop_counter ++)
                          {
                           if((((injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                           if((false))
                            barrier();
                           barrier();
                           if((false))
                            barrier();
                          }
                        }
                      }
                     if((false))
                      {
                       do
                        {
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                        }
                       while(false);
                       if((false))
                        {
                         if((false))
                          barrier();
                         barrier();
                        }
                       barrier();
                      }
                     if((false))
                      break;
                     if((false))
                      barrier();
                     return;
                     if((false))
                      {
                       do
                        {
                         if((false))
                          barrier();
                         if((false))
                          barrier();
                         barrier();
                        }
                       while(((injectionSwitch.x > injectionSwitch.y)));
                       for(int _injected_loop_counter = (0 >> (int(7))); _injected_loop_counter < 1; _injected_loop_counter ++)
                        {
                         if((false))
                          barrier();
                        }
                       if(((injectionSwitch.x < injectionSwitch.y)))
                        {
                         do
                          {
                           if((((injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                          }
                         while(false);
                         if((false))
                          barrier();
                        }
                       else
                        {
                        }
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       if((false))
                        break;
                      }
                    }
                   if((false))
                    barrier();
                  }
                }
               while(((injectionSwitch.x > injectionSwitch.y)));
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 return;
                }
               barrier();
              }
            }
           if((false))
            barrier();
          }
         else
          {
           if((false))
            barrier();
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             return;
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              barrier();
             barrier();
            }
          }
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            {
             if(((! (! ((! (! (false))))))))
              barrier();
             barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           if((false))
            {
             if((false))
              barrier();
             barrier();
            }
           if(true)
            {
             barrier();
            }
           else
            {
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
          }
        }
       if((false))
        {
         if(true)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             if((false))
              barrier();
             barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((false))
              return;
             if((false))
              {
               if((false))
                return;
               if(((injectionSwitch.x > injectionSwitch.y)))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               else
                {
                 barrier();
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             if((false))
              barrier();
            }
           if((false))
            barrier();
          }
         else
          {
           if((false))
            return;
          }
         if((false))
          return;
         if((false))
          barrier();
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           return;
          }
         if((false))
          barrier();
         if((false))
          barrier();
         if((false))
          barrier();
        }
      }
     for(int _injected_loop_counter = (max(1, 1)); _injected_loop_counter != (int((injectionSwitch.x)) | 0); _injected_loop_counter --)
      {
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         barrier();
        }
       do
        {
         if((false))
          barrier();
         if((false))
          barrier();
         if((false))
          {
           if((false))
            barrier();
           if((false))
            continue;
           if(((! (! (false)))))
            {
             if((false))
              barrier();
             barrier();
            }
           barrier();
          }
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         if((false))
          barrier();
        }
       if((false))
        barrier();
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
       if(true)
        {
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
          }
         if((false))
          barrier();
         if((false))
          {
           for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
            {
             if((false))
              {
               if((false))
                barrier();
               barrier();
              }
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              barrier();
             break;
            }
           barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
      }
     for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
      {
       if((false))
        barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
     if(false)
      {
       if((false))
        barrier();
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((false))
        barrier();
      }
     if(true)
      {
       do
        {
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         if((false))
          barrier();
         if((false))
          break;
         if((((false) || false)))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              {
               if((false))
                barrier();
               barrier();
              }
             for(int _injected_loop_counter = (1 ^ 1); _injected_loop_counter != 1; _injected_loop_counter ++)
              {
               if((false))
                barrier();
               barrier();
              }
            }
           if((false))
            {
             if((false))
              barrier();
             if((false))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
             if((false))
              barrier();
             if((false))
              {
               if((false))
                barrier();
               if((false))
                {
                 if((false))
                  barrier();
                 barrier();
                }
               if((false))
                break;
               return;
               if((false))
                barrier();
               if((false))
                barrier();
              }
             if((false))
              barrier();
             if((false))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                {
                 for(int _injected_loop_counter = 0; _injected_loop_counter != ((int((injectionSwitch.y)) << (int(1))) >> (int(1))); _injected_loop_counter ++)
                  {
                   if((false))
                    barrier();
                   barrier();
                  }
                }
               barrier();
              }
             barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                {
                 if((false))
                  barrier();
                 if((false))
                  barrier();
                 continue;
                }
               break;
               if((false))
                barrier();
              }
             if((false))
              {
               if((false))
                {
                 if(((false || ((false || (((injectionSwitch.x > injectionSwitch.y))))))))
                  barrier();
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(false)
                    {
                    }
                   else
                    {
                     return;
                    }
                   if((false))
                    barrier();
                  }
                 barrier();
                 if((false))
                  {
                   if((false))
                    barrier();
                   barrier();
                  }
                }
               if((false))
                {
                 if((false))
                  barrier();
                 barrier();
                }
               barrier();
              }
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
             continue;
            }
           for(int _injected_loop_counter = 0; _injected_loop_counter < (1 | 1); _injected_loop_counter ++)
            {
             if((false))
              barrier();
             if((false))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if((false))
            barrier();
           for(int _injected_loop_counter = (((1) << 0) ^ int((injectionSwitch.x))); _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
            {
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if((false))
                barrier();
               if((false))
                barrier();
               barrier();
               if((false))
                barrier();
              }
             if((false))
              barrier();
            }
           if((false))
            barrier();
           return;
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          barrier();
         if(true)
          {
           if((false))
            {
             if((false))
              barrier();
             barrier();
            }
          }
         else
          {
          }
         for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
          {
           if((false))
            barrier();
          }
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((false))
        barrier();
       if((false))
        barrier();
       if((false))
        barrier();
      }
     else
      {
       if(((! (! (false)))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           barrier();
          }
         barrier();
        }
      }
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        {
         do
          {
           if((false))
            barrier();
          }
         while(false);
         if((false))
          {
           if(false)
            {
            }
           else
            {
             if((false))
              barrier();
             barrier();
            }
          }
         if((false))
          {
           for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
            {
             barrier();
            }
           if((false))
            barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((((false) || false)))
          barrier();
         for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
          {
           return;
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             do
              {
               barrier();
              }
             while(false);
            }
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          return;
         if((false))
          barrier();
         return;
        }
       if((false))
        barrier();
      }
    }
  }
 if((false))
  {
   for(int _injected_loop_counter = (1 & 1); _injected_loop_counter > 0; _injected_loop_counter --)
    {
     if((false))
      barrier();
     return;
     if((false))
      barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if((((false) && true)))
      barrier();
     barrier();
    }
   barrier();
  }
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  {
   do
    {
     barrier();
    }
   while(false);
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
