#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((false))
  {
   if((false))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if((false))
      return;
     barrier();
    }
  }
 if((((false) && true)))
  {
   if((false))
    return;
   barrier();
  }
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(((! ((bool(bvec2(! ((false || (! (! ((((((injectionSwitch.x > injectionSwitch.y) && true))))))))), false)))))))
  {
   if((false))
    barrier();
   if(((false || (false))))
    return;
   return;
  }
 uint subgroup_size = gl_SubgroupSize;
 if((false))
  {
   if((! (! (((! (! (false))))))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      barrier();
     if(((false || (((true && ((bool(bool((injectionSwitch.x > injectionSwitch.y)))))))))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     barrier();
    }
   if((false))
    return;
   if((false))
    {
     if((false))
      barrier();
     if((false))
      return;
     return;
    }
   barrier();
   if((false))
    return;
   if((! (! ((false)))))
    {
     if((false))
      barrier();
     barrier();
    }
  }
 if((((((injectionSwitch.x) - 0.0) > injectionSwitch.y))))
  {
   if((false))
    {
     if((false))
      return;
     if((false))
      barrier();
     if((false))
      return;
     return;
    }
   if(((bool(bvec4(false, false, true, true)))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((true && ((((injectionSwitch.x > (min((vec2(1.0, 1.0) * (injectionSwitch)), injectionSwitch)).y))))))
    barrier();
   return;
   if(((((! (! (((injectionSwitch.x > injectionSwitch.y) || false))))))))
    return;
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((false))
  return;
 if((false))
  {
   if((false))
    {
     if((((((((false || (bool(bvec3(false, false, false)))))) || false)) || false)))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     if((false))
      {
       if((false))
        barrier();
       return;
      }
     if((((! (! ((injectionSwitch.x > injectionSwitch.y)))))))
      {
       if((false))
        return;
       if((false))
        return;
       if((false))
        barrier();
       if((false))
        barrier();
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   if((false))
    barrier();
   if((false))
    barrier();
   barrier();
   if(((false || (false))))
    barrier();
  }
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    {
     if((false))
      barrier();
     barrier();
     if((false))
      return;
    }
   if(((((1.0 * (injectionSwitch.x)) > injectionSwitch.y))))
    barrier();
   if(((bool(bvec2(false, true)))))
    return;
   return;
  }
 if(((((! (! (injectionSwitch.x > injectionSwitch.y)))))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(((((false || (((injectionSwitch.x > (mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2((7.7), ((- 4.4 + 57.40))), bvec2(false, (bool(bool(false)))))).y) || false)))))))
        return;
       barrier();
      }
     barrier();
    }
   if((false))
    return;
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(((bool(bvec2((! (! (bool(bool((false)))))), false)))))
    return;
   if((false))
    {
     if((false))
      return;
     barrier();
    }
   if((false))
    {
     if((false))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       barrier();
       if((((! ((! (! ((! (! ((((true && ((! (! (! ((injectionSwitch.x > injectionSwitch.y)))))))) || ((injectionSwitch.x > injectionSwitch.y))))))))))))))
        {
         if((false))
          return;
         if((false))
          barrier();
         if(((((((((bool((bvec2(bvec4(bvec2((false || (false)), false), false, true))))) && true)))) && true) && true)))
          barrier();
         return;
        }
      }
     if((false))
      {
       if((false))
        {
         if((false))
          barrier();
         if((false))
          barrier();
         barrier();
        }
       barrier();
      }
     if((false))
      barrier();
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     barrier();
    }
   return;
  }
 if((false))
  barrier();
 if((((! (! ((injectionSwitch.x > injectionSwitch.y)))))))
  {
   if((false))
    return;
   return;
  }
 if((false))
  return;
 if((((false) && true)))
  return;
 if((((! (! (((! (((! ((bool(bvec2(((((injectionSwitch.x > injectionSwitch.y))) && true), true))))) || false)))) || ((injectionSwitch.x > injectionSwitch.y))))))))
  {
   if((false || ((((false)) && true))))
    barrier();
   barrier();
  }
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((true && (((true && (false))))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     if((false))
      barrier();
     return;
     if((false))
      barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(((bool(bvec3((! (! (false))), false, false)))))
    barrier();
   barrier();
  }
 if((bool(bvec4((((injectionSwitch.x > injectionSwitch.y))), (((true && (injectionSwitch.x > injectionSwitch.y)))), false, false))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(((bool(bvec4(false, true, true, (false || (false)))))))
  {
   if((! (! ((((injectionSwitch.x > injectionSwitch.y)))))))
    return;
   if((false))
    return;
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if(((false || (false))))
    {
     if((false))
      return;
     barrier();
    }
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     return;
    }
   if((false))
    barrier();
   barrier();
  }
 if((false))
  {
   if((((injectionSwitch.x > ((injectionSwitch) + vec2(0.0, 0.0)).y))))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    {
     if((false))
      return;
     barrier();
    }
   return;
  }
 if((false))
  barrier();
 if((false))
  return;
 if((false))
  barrier();
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     barrier();
     if(((((bool((bool(bvec4((! (! (bool(false)))), false, true, false))))) || false))))
      return;
     if(((false || ((((! (! (! (! ((false))))))) || ((injectionSwitch.x > injectionSwitch.y)))))))
      {
       if((false))
        barrier();
       barrier();
      }
    }
   barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
  }
 if((false))
  {
   if((false))
    barrier();
   if((false))
    return;
   if((false))
    {
     if((false))
      {
       if((false))
        barrier();
       return;
      }
     return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if(((! (! ((! (! (false))))))))
      barrier();
     if((false))
      return;
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    return;
   if((false))
    return;
   return;
   if((false))
    {
     if(((true && (false))))
      return;
     barrier();
    }
  }
 if(((bool(bvec3((! ((! ((bool(bvec2(((false || (bool(bool(! (! ((! (bool(bvec4(((((((! (! (((((! (false)) || false))) || false))))) || false)) || false), (! ((true && (! (true))))), (true && (true)), true))))))))))), true))))))), true, false)))))
  {
   if((false))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if((false))
    {
     if((((((! (! ((injectionSwitch.x > injectionSwitch.y))))) && true))))
      return;
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         return;
        }
       if((false))
        {
         if(((! (! (false)))))
          return;
         barrier();
        }
       barrier();
       if((false))
        barrier();
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
       if(((true && (((injectionSwitch.x > injectionSwitch.y))))))
        return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     return;
    }
   if((false))
    barrier();
   if(((false || (false))))
    {
     if(((false || ((bool(bool(bool(bvec4((((injectionSwitch.x > injectionSwitch.y))), ((injectionSwitch.x < injectionSwitch.y)), ((injectionSwitch.x > injectionSwitch.y)), false)))))))))
      return;
     return;
     if((false))
      barrier();
    }
   barrier();
   if((false))
    barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   if(((! (! (false)))))
    return;
   barrier();
  }
 if((false))
  return;
 if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
  {
   if((false))
    {
     if((false))
      barrier();
     return;
     if((false))
      barrier();
     if((false))
      return;
     if((false))
      {
       if((false))
        barrier();
       return;
      }
     if((false))
      return;
    }
   if((false))
    {
     if((false))
      return;
     return;
    }
   barrier();
   if((false))
    barrier();
   if((false))
    barrier();
  }
 if(((! (! ((((bool(bvec4((false || (((injectionSwitch.x > injectionSwitch.y)))), ((injectionSwitch.x < injectionSwitch.y)), true, ((injectionSwitch.x < injectionSwitch.y)))))) && true))))))
  barrier();
 if((false))
  {
   if((bool((bool(bvec3(bool((! (! ((false))))), true, false))))))
    return;
   barrier();
  }
 if(((((mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2((4.6), (9.8)), bvec2(false, false))).x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  return;
 if((false))
  return;
 if((false))
  barrier();
 if((false))
  barrier();
 if((((false) && true)))
  {
   if((false))
    return;
   if((false))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     return;
     if((false))
      return;
    }
   barrier();
   if((bool(bvec4((((((injectionSwitch.x > injectionSwitch.y)))) && true), false, true, ((injectionSwitch.x < injectionSwitch.y))))))
    {
     if((false))
      return;
     barrier();
    }
   if((false))
    return;
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if((false))
  return;
 if((bool(bvec2((false), true))))
  {
   if((((! ((bool(bvec3(! ((! (! (bool(bool(false)))))), true, false))))))))
    {
     if((((((injectionSwitch.x > injectionSwitch.y))) && ((injectionSwitch.x < injectionSwitch.y)))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      return;
     return;
    }
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       barrier();
      }
     return;
     if((false))
      barrier();
    }
   barrier();
   if((false))
    barrier();
   if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
  }
 if((false))
  {
   if((false))
    return;
   if((false))
    barrier();
   barrier();
  }
 if((false || ((((injectionSwitch.x > injectionSwitch.y))))))
  return;
 if((((injectionSwitch.x > (float((1.0 * (float(injectionSwitch.y)))))))))
  return;
 if((false))
  {
   if((false))
    barrier();
   return;
  }
 if((false))
  {
   if((false))
    barrier();
   return;
  }
 uint workgroup_id = (((min(gl_WorkGroupID, (((clamp(gl_WorkGroupID, gl_WorkGroupID, (uvec3(0u, 0u, 0u) | ((false ? (uvec3(65721u, 14553u, 46546u)) : (((gl_WorkGroupID)) ^ uvec3(0u, 0u, 0u)))))))) << uvec3(0u, 0u, ((false ? (num_workgroup) : ((0u) ^ uint((injectionSwitch.x)))))))))) | ((min(gl_WorkGroupID, (((clamp(gl_WorkGroupID, gl_WorkGroupID, (uvec3(0u, 0u, 0u) | (gl_WorkGroupID))))) << uvec3(0u, 0u, 0u)))))).x;
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if((false))
    {
     if((((false) || false)))
      {
       if((false))
        barrier();
       barrier();
      }
     if((false))
      barrier();
     barrier();
    }
   return;
  }
 if((false))
  {
   if(((((vec2(((true ? injectionSwitch[0] : (vec2(- 7.5, - 1.9)[1]))), injectionSwitch[1])).x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    return;
   if((false))
    barrier();
   if((false))
    barrier();
   barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    barrier();
   if((false))
    return;
   if((false))
    barrier();
  }
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if((false))
    return;
   if(((true && ((! (! (false)))))))
    barrier();
   if((false))
    barrier();
   if((false))
    return;
   return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if((false))
  barrier();
 if(((! (! (false)))))
  {
   if((false))
    {
     if((false))
      return;
     barrier();
    }
   if((false))
    barrier();
   return;
  }
 if((false))
  return;
 if(((((clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      {
       if(((bool(bvec3((bool(bool(false))), true, true)))))
        {
         if((false))
          barrier();
         return;
        }
       if(((false || ((bool(bvec4(false, true, false, true)))))))
        return;
       if((false))
        barrier();
       return;
      }
     if((false))
      {
       if((false))
        barrier();
       barrier();
       if((false))
        return;
      }
     if((false))
      barrier();
     barrier();
     if((((((true ? injectionSwitch.x : (- 4862.5592))) > injectionSwitch.y))))
      barrier();
     if((false))
      {
       if((false))
        return;
       if((false))
        barrier();
       return;
      }
     if((false))
      barrier();
    }
   if((((((injectionSwitch.x > injectionSwitch.y))) || false)))
    return;
   return;
   if((false))
    {
     if((false))
      barrier();
     if((false))
      return;
     if((false))
      barrier();
     if((false))
      return;
     return;
     if((false))
      return;
    }
   if((! (! (((bool(bvec2(false, false))))))))
    return;
   if((false))
    barrier();
  }
 if(((bool(bvec4(false, false, false, false)))))
  barrier();
 if((((false)) || false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   if((false))
    return;
   if((false))
    barrier();
   return;
  }
 if((false))
  {
   if((false))
    {
     if((false))
      return;
     barrier();
    }
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
       return;
      }
     barrier();
    }
   if(((false || (false))))
    return;
   if((false))
    barrier();
   if(((((! (! (((false)) && true)))) && ((injectionSwitch.x < injectionSwitch.y)))))
    return;
   if((false))
    barrier();
   if((false))
    return;
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(((((! (! ((! ((false || (! (injectionSwitch.x > injectionSwitch.y))))))))))))
        barrier();
       barrier();
      }
     return;
    }
   if((false))
    {
     if((false))
      barrier();
     return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if(((true && ((true && (false))))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(((! (! (false)))))
    {
     if((false))
      return;
     return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    return;
   if((((((injectionSwitch.x > injectionSwitch.y) || false)))))
    barrier();
   if(((! (! (false)))))
    return;
   barrier();
   if((false))
    return;
   if((false))
    barrier();
   if((false))
    {
     if((((((injectionSwitch.x > injectionSwitch.y)))) && true))
      return;
     barrier();
    }
   if((false))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      barrier();
     if((false))
      barrier();
     barrier();
    }
   if((false))
    {
     if((false))
      return;
     return;
    }
   if((false))
    return;
  }
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(((((injectionSwitch.x < injectionSwitch.y)) && (false))))
    barrier();
   barrier();
   if((false))
    return;
   if((false))
    barrier();
   if((((((false) || false)) && true)))
    barrier();
   if((false))
    barrier();
  }
 if((false))
  return;
 if((((true && ((injectionSwitch.x > injectionSwitch.y))))))
  return;
 if((false))
  barrier();
 uint workgroup_base = (0u ^ (workgroup_size * (clamp((clamp((0u + (workgroup_id)), (0u + (workgroup_id)), (0u + (workgroup_id)))), ((true ? (clamp((0u + (workgroup_id)), (0u + (workgroup_id)), (0u + (workgroup_id)))) : (workgroup_size))), (clamp((0u + (workgroup_id)), (0u + (workgroup_id)), (0u + (workgroup_id))))))));
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((((injectionSwitch.x > injectionSwitch.y))) && true)))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if(((((! (! (((injectionSwitch.x > injectionSwitch.y)))))) || false)))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     if((false))
      return;
     barrier();
    }
   return;
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if(((((true && ((! (((! ((bool((bvec2(bvec4(bvec2(((bool(bool((false)))) || false), false), true, false))))))) && true))))))) && true))
  {
   if((false))
    barrier();
   if((((((injectionSwitch.x > injectionSwitch.y))) && ((injectionSwitch.x < injectionSwitch.y)))))
    return;
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      {
       if((false))
        return;
       barrier();
      }
     return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((bool(bvec3(bool(bvec2(((((((((false) || false) && true)) && true))) && true), true)), false, true))))))
    {
     if((((false) && true)))
      {
       if((false))
        return;
       barrier();
      }
     if(((((vec2(0.0, 0.0) + (injectionSwitch)).x > (((1.0 * (injectionSwitch.y))) - 0.0)))))
      barrier();
     if((! ((((bool(bvec4(! ((false)), true, false, true)))) && true))))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if((false))
      return;
    }
   if(((! (! (false)))))
    return;
   if((false))
    barrier();
   if((false))
    {
     if((false))
      return;
     if((false))
      {
       if((false))
        {
         if((((injectionSwitch.x > (clamp(((true ? injectionSwitch.y : (- 4033.9954))), injectionSwitch.y, injectionSwitch.y))))))
          {
           if(((((! (! (false)))) || false)))
            barrier();
           if(((bool(bvec3(false, false, true)))))
            {
             if((false))
              return;
             barrier();
            }
           return;
          }
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
         barrier();
        }
       if(((((bool(bvec3((! (! (false))), ((injectionSwitch.x > injectionSwitch.y)), false))) || false))))
        return;
       barrier();
      }
     if(((false || (false))))
      {
       if((false))
        barrier();
       return;
       if(((! (! (false)))))
        return;
      }
     return;
    }
   if(((true && (! (((! (((! (! ((false || (((injectionSwitch.x > injectionSwitch.y)))))))))) && true))))))
    {
     if((false))
      barrier();
     if((false))
      barrier();
     barrier();
     if((((bool(bool((injectionSwitch.x > injectionSwitch.y)))))))
      return;
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
    }
   if(((false || ((bool(bvec3(false, false, true)))))))
    return;
   return;
   if((true && ((((injectionSwitch.x > injectionSwitch.y))))))
    barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint virtual_gid = (min(((((((workgroup_base + subgroup_id * subgroup_size) ^ 0u)) | (((((workgroup_base + subgroup_id * subgroup_size) ^ 0u)) ^ 0u)))) >> 0u) + subgroup_local_id, ((workgroup_base + subgroup_id * subgroup_size) ^ 0u) + subgroup_local_id));
 if((false))
  barrier();
 if((false))
  {
   if((false))
    return;
   return;
  }
 if((false))
  barrier();
 if(((! (! (false)))))
  barrier();
 atomicStore(write_val, uint(virtual_gid), 4, 64, 0);
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 if(((((bool(bvec2((! (! (((injectionSwitch.x > injectionSwitch.y))))), true))) || false))))
  return;
 if((! ((bool(bvec4(! ((((injectionSwitch.x > injectionSwitch.y)))), true, ((injectionSwitch.x < injectionSwitch.y)), true))))))
  {
   if((false))
    return;
   if((false))
    barrier();
   if(((false || (false))))
    barrier();
   return;
   if((false))
    barrier();
   if((false))
    return;
  }
 if((false))
  barrier();
 (((1u ^ 0u) * ((buf[virtual_gid] = uint(subgroupAllEqual(write_val))))) ^ 0u);
 if((((false || ((((injectionSwitch.x) - length(vec2(0.0, ((true ? 0.0 : (2528.4921)))))) > (0.0 + ((clamp((max(((true ? (max((max(injectionSwitch, injectionSwitch)), ((injectionSwitch) * mat2(1.0)))).y : (2.7))), injectionSwitch.y)), (max(((true ? injectionSwitch.y : (2.7))), injectionSwitch.y)), (max(((true ? injectionSwitch.y : (2.7))), injectionSwitch.y))))))))))))
  {
   if((bool((true && (bool((false)))))))
    barrier();
   if((false))
    barrier();
   if((false))
    return;
   if((false))
    return;
   if((bool(bvec4((false), false, false, true))))
    barrier();
   barrier();
  }
 if((! (! (((bool(bvec3((! (! (false))), false, true))))))))
  {
   if(((! ((! (! (! (false))))))))
    barrier();
   if((((false) || false)))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if(((bool(bvec3(bool(bool((false))), true, (bool(bool(false))))))))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  return;
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
