#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = (((((uvec3(uvec3((((clamp((uvec3(1u, 1u, 1u) * (gl_WorkGroupSize)), (uvec3(1u, 1u, 1u) * (gl_WorkGroupSize)), (uvec3(0u, 0u, 0u) | ((uvec3(1u, 1u, 1u) * (gl_WorkGroupSize))))))) / uvec3(1u, 1u, 1u))))) - uvec3(0u, 0u, 0u))) | (((uvec3(uvec3(((clamp((((true ? (uvec3(1u, 1u, 1u) * (gl_WorkGroupSize)) : (uvec3(113853u, 33243u, 180692u))))), (((~ (~ ((true ? (uvec3(1u, 1u, 1u) * (gl_WorkGroupSize)) : (uvec3(113853u, 33243u, 180692u)))))))), (((true ? (uvec3(1u, 1u, 1u) * (gl_WorkGroupSize)) : (uvec3(113853u, 33243u, 180692u))))))) / uvec3(1u, 1u, 1u))))) / uvec3(1u, 1u, 1u))))).x;
 uint workgroup_id = ((gl_WorkGroupID.x) ^ 0u);
 uint workgroup_base = (min((~ (uint(uvec4((((clamp((~ (((workgroup_size) << uint((injectionSwitch.x))))), ((min((~ ((max(((~ ((~ (~ (((0u << (uint(6u))) | (~ ((clamp(((workgroup_size)), ((workgroup_size)), ((workgroup_size)))) | ((workgroup_size)))))))))) | (~ ((~ (~ (((0u << (uint(6u))) | (~ ((clamp(((workgroup_size)), ((workgroup_size)), ((((0u << (uint(8u))) + (workgroup_size)))))) | ((workgroup_size))))))))))), ~ ((~ (~ (((0u << (uint(6u))) | (~ ((clamp(((workgroup_size)), ((workgroup_size)), ((workgroup_size)))) | ((workgroup_size))))))))))))), ((0u << (uint(6u))) | (~ ((clamp(((workgroup_size)), ((workgroup_size)), ((workgroup_size)))) | (min((min(((workgroup_size)), (0u ^ (((((workgroup_size))) >> 0u))))), ((workgroup_size)))))))))), (~ ((min((0u | (workgroup_size)), workgroup_size)))))) >> (0u >> (uint(7u))))), 1u, ((1u) | 0u), (uint((injectionSwitch.y)) & 1u))))), (~ (~ (~ ((clamp((~ (((true ? workgroup_size : (subgroup_id))))), (~ (((workgroup_size)) | ((workgroup_size)))), (((((false ? (subgroup_size) : ~ ((min(workgroup_size, (((clamp(workgroup_size, workgroup_size, workgroup_size))) >> (~ (~ (((~ (~ ((0u ^ (1u * ((~ (~ (((true && (true)) ? (0u) : (171448u)))))))))))))))))))) / 1u)))))))))))) * workgroup_id;
 uint virtual_gid = ((workgroup_base) / 1u) + (0u ^ (subgroup_id)) * (min(subgroup_size, (((~ (~ ((uint(uvec2(subgroup_size, 0u))))))) | ((uint(((uvec2(subgroup_size, 0u)) + uvec2(0u, 0u)))))))) + (clamp(subgroup_local_id, (min(subgroup_local_id, ((subgroup_local_id) >> 0u))), subgroup_local_id));
 atomicStore(write_val, uint(((virtual_gid) + 0u)), 4, 64, 0);
 buf[virtual_gid] = uint(subgroupAllEqual(write_val));
 if(((((bool(bvec3(! (! ((false))), false, true)))) || ((injectionSwitch.x > injectionSwitch.y)))))
  return;
 if((((injectionSwitch.x > (((mix(vec2((mix(float(((- - 54.05))), float((- 1.7)), bool(true))), (injectionSwitch)[1]), vec2((injectionSwitch)[0], ((- 3877.9455))), (bvec2(bvec2(bvec2(true, ((injectionSwitch.x > injectionSwitch.y))))))))) - vec2(0.0, (min(0.0, 0.0)))).y)) || (! (! (((false)))))))
  return;
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
