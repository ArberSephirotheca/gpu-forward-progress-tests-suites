#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = (min(gl_NumWorkGroups.x, gl_NumWorkGroups.x));
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = ((gl_WorkGroupID) ^ uvec3(0u, 0u, 0u)).x;
 uint workgroup_base = workgroup_size * (min(workgroup_id, (uint(uint(workgroup_id)))));
 uint virtual_gid = (((((((injectionSwitch.x > injectionSwitch.y)) ? (subgroup_local_id) : (min(((clamp((((uint(uvec4((uint((((clamp(uvec2(workgroup_base + subgroup_id * subgroup_size, 1u), uvec2((clamp(workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size)), 1u), uvec2(workgroup_base + subgroup_id * subgroup_size, 1u)))) | (uvec2(workgroup_base + subgroup_id * subgroup_size, 1u))))) + subgroup_local_id, 0u, 1u, 0u))) | (uint(uvec4(workgroup_base + (((uint(uvec3(subgroup_id * subgroup_size, 0u, (0u ^ (0u >> (uint(5u))))))) / 1u)) + subgroup_local_id, 0u, 1u, 0u))))), (((uint(uvec4((uint((((clamp(uvec2(workgroup_base + subgroup_id * subgroup_size, 1u), uvec2((clamp(workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size)), 1u), uvec2(workgroup_base + subgroup_id * subgroup_size, 1u)))) | (uvec2(workgroup_base + subgroup_id * subgroup_size, 1u))))) + subgroup_local_id, 0u, 1u, 0u))) | (uint(uvec4(workgroup_base + (((uint(uvec3(subgroup_id * subgroup_size, 0u, (0u ^ (0u >> (uint(5u))))))) / 1u)) + subgroup_local_id, 0u, 1u, 0u))))), (((uint(uvec4((uint((((clamp(uvec2(workgroup_base + subgroup_id * subgroup_size, 1u), uvec2((clamp(workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size)), 1u), uvec2(workgroup_base + subgroup_id * subgroup_size, 1u)))) | (uvec2(workgroup_base + subgroup_id * subgroup_size, 1u))))) + subgroup_local_id, 0u, 1u, 0u))) | (uint(uvec4(workgroup_base + (((uint(uvec3(subgroup_id * subgroup_size, 0u, (0u ^ (0u >> (uint(5u))))))) / 1u)) + subgroup_local_id, 0u, 1u, 0u))))))) << 0u), (max(((((false ? (workgroup_id) : uint(uvec4((0u | (workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)), 0u, 1u, 0u))))) | (min(0u, 0u))), uint(uvec4(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id, 0u, ((1u) | 0u), 0u)))))))) | 0u)));
 atomicStore(write_val, uint(virtual_gid), 4, ((((((64) >> 0)) / 1) | (((min(64, 64))) / 1))), (((~ (~ ((max(0, 0)))))) | ((~ (~ ((max(0, 0))))))));
 buf[virtual_gid] = ((((false ? (virtual_gid) : uint(subgroupAllEqual(write_val))))) << (min(0u, ((0u) | (0u)))));
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
