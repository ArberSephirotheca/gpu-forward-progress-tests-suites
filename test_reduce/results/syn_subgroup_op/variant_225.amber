#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((false))
  {
   if((true && ((false))))
    return;
   if((false))
    return;
   return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if((false))
  {
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if((false))
  return;
 if((false))
  return;
 if(((((((true && ((mix(float((2746.2627)), float((mix(float(injectionSwitch.x), float((- 4.1)), bool(((((false) && ((injectionSwitch.x < injectionSwitch.y))) && true)))))), bool(((injectionSwitch.x < injectionSwitch.y))))) > injectionSwitch.y)))) && true))))
  return;
 if((true && ((false))))
  return;
 if((false))
  return;
 uint subgroup_id = gl_SubgroupID;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if(((((false || ((! (! (((false) || false))))))) || false)))
  return;
 if((false))
  {
   if(((((! (! (false)))) || false)))
    return;
   return;
  }
 if((false))
  return;
 if((false))
  return;
 uint subgroup_size = gl_SubgroupSize;
 if((false))
  return;
 if((false))
  {
   if((false))
    return;
   return;
  }
 if(((((! (! (false)))) || false)))
  {
   if(((false || (((injectionSwitch.x > injectionSwitch.y))))))
    return;
   if((false))
    return;
   return;
  }
 if((false))
  return;
 if(((bool(((bvec3(bvec4(bvec3(bvec4(bvec3(false, false, ((injectionSwitch.x > ((injectionSwitch.y) - 0.0)))), false)), false))))))))
  {
   if((false))
    return;
   return;
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((false || (((bool(bvec4(false, false, true, false)))))))
  return;
 if((((! (! ((injectionSwitch.x > injectionSwitch.y)))))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    {
     if((false))
      return;
     if((false))
      {
       if(((bool((bvec3(bvec3(bvec3(false, true, false))))))))
        return;
       return;
      }
     return;
     if((false))
      return;
    }
   return;
   if(((true && ((! (! (false)))))))
    {
     if((false))
      return;
     return;
    }
   if((((injectionSwitch.x > injectionSwitch.y)) || ((false))))
    return;
  }
 if((false))
  return;
 if((false))
  return;
 if((((bool(bvec3(! (! (false)), true, true))))))
  {
   if(((((((! ((true && (! (injectionSwitch.x > injectionSwitch.y))))))) || false))))
    return;
   if(((! (! (false)))))
    return;
   if((false))
    return;
   return;
   if((false))
    return;
   if((false))
    return;
  }
 if((false))
  return;
 if((false))
  {
   if((false))
    return;
   if((((bool(bvec4(bool(bool(false)), true, true, false))))))
    return;
   return;
  }
 if((false))
  {
   if((false))
    {
     if((false))
      return;
     return;
    }
   return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if((((((((injectionSwitch.x) - 0.0)) * determinant(mat3(1.0, 1.0, cos(0.0), 0.0, 1.0, abs(1.0), 0.0, 0.0, 1.0))) > injectionSwitch.y))))
  {
   if((false))
    return;
   return;
  }
 if((false))
  return;
 if((false))
  {
   if((((injectionSwitch.x > ((injectionSwitch.y) - 0.0)))))
    return;
   return;
  }
 uint num_workgroup = (uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups)).x;
 if((false))
  {
   if((false))
    return;
   return;
  }
 if((false))
  return;
 uint workgroup_size = (((((0u << (uint(8u))) ^ (0u)) ^ ((min(uint(((true ? uvec4(~ (~ (clamp((gl_WorkGroupSize.x), (~ ((uint(uvec4(~ ((true ? (~ (~ (((clamp((0u ^ ((gl_WorkGroupSize.x))), (gl_WorkGroupSize.x), (((gl_WorkGroupSize.x)) / 1u))))))) : (subgroup_size))), 1u, 0u, 0u))))), (((((gl_WorkGroupSize) - uvec3(0u, 0u, 0u)).x)) | ((gl_WorkGroupSize.x)))))), 0u, 1u, 1u) : (uvec4(142218u, 181447u, 57395u, 176179u))))), uint(uvec4(~ (((~ (clamp((gl_WorkGroupSize.x), (~ ((uint(uvec4(~ ((gl_WorkGroupSize.x)), 1u, 0u, 0u))))), (((gl_WorkGroupSize.x)) | (clamp((max(((gl_WorkGroupSize.x)), ((gl_WorkGroupSize.x)))), ((max(((~ (~ ((uvec3(uvec3(gl_WorkGroupSize)))))).x), (gl_WorkGroupSize.x)))), (~ (~ (((gl_WorkGroupSize.x)))))))))))) ^ 0u), 0u, 1u, 1u))))))));
 if(((false || (false))))
  {
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    {
     if((false))
      return;
     return;
     if((false))
      return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(((((vec2(vec2(injectionSwitch))).x > injectionSwitch.y))))
      {
       if(((((! (! (false)))) && true)))
        return;
       if((false))
        return;
       return;
      }
     return;
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if(((bool(bvec3((bool((! (! (bool(false)))))), false, true)))))
      return;
    }
   if(((((clamp(injectionSwitch.x, injectionSwitch.x, (max(injectionSwitch.x, injectionSwitch.x)))) > ((true ? injectionSwitch : (injectionSwitch))).y))))
    {
     if((false))
      {
       if((false))
        return;
       return;
      }
     if((false))
      return;
     return;
    }
   if((false))
    return;
   if(((bool((((bool(bool(bool(false)))) && true))))))
    {
     if((false))
      return;
     return;
    }
   if((false))
    return;
   return;
   if((false))
    {
     if((false))
      return;
     return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 if((false))
  return;
 if((false))
  return;
 if((((! ((false || (! (false || ((bool(bool((true && ((! (! (false)))))))))))))))))
  {
   if((false))
    {
     if((false))
      return;
     if((false))
      return;
     if((false))
      return;
     if((false))
      return;
     if((false))
      return;
     if((false))
      return;
     return;
    }
   return;
   if((bool(bool((false)))))
    {
     if((false))
      return;
     if((false))
      return;
     return;
     if((false))
      {
       if((false))
        return;
       return;
      }
    }
   if((false))
    {
     if((! (! ((false)))))
      {
       if(((((injectionSwitch.x < injectionSwitch.y)) && (false))))
        return;
       return;
      }
     return;
    }
  }
 if(((! (! (false)))))
  return;
 if((false))
  return;
 if(((((max(((injectionSwitch.x) / 1.0), injectionSwitch.x)) > injectionSwitch.y))))
  return;
 if(((false || (false))))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 if((false))
  return;
 if(((true && ((bool(bvec3(((injectionSwitch.x > injectionSwitch.y)), true, true)))))))
  {
   if((false))
    return;
   return;
  }
 if((false))
  return;
 if(((((((min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))) && ((injectionSwitch.x < injectionSwitch.y)))))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((((((((((injectionSwitch.x > injectionSwitch.y)) ? (- 137.860) : injectionSwitch.x))) + 0.0) > injectionSwitch.y))))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((! (! (true && (((((bool(bvec2((false), false))))) && true))))))
    {
     if((false))
      return;
     return;
    }
   return;
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    return;
   if((bool(bvec2((false), false))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if(((! (! (false)))))
      return;
     return;
     if((((injectionSwitch.x > (min((abs(vec2(1.0, 1.0)) * (injectionSwitch)), injectionSwitch)).y))))
      return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     return;
    }
   if((false))
    return;
   if(((! (((! (false)) || false)))))
    return;
   if((((bool(bvec3((bool(bool((((false || ((! (! ((((injectionSwitch.x > (max((vec2((mat4x3(mat4x3(mat4x3(injectionSwitch, 1.0, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, ((0.0) + 0.0), 0.0, 0.0, 1.0)), 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, determinant(mat3((max((mix(float(1.0), float((109.658)), bool(false))), 1.0)), 1.0, 1.0, 0.0, 1.0, 1.0, (mix(float((clamp(0.0, 0.0, ((0.0) + 0.0)))), float((4.0)), bool(false))), 0.0, 1.0)), 0.0)))))), injectionSwitch)).y)) && true))))))) && true)))), true, true))))))
    {
     if((((((injectionSwitch.x > injectionSwitch.y) || ((injectionSwitch.x > injectionSwitch.y)))))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     if((false))
      {
       if((false))
        return;
       if((false))
        return;
       return;
      }
     return;
     if((false))
      return;
    }
   if((false))
    return;
   if((false))
    return;
   return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if(((true && (false))))
      return;
     return;
    }
  }
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((((((subgroup_local_id + 1) % subgroup_size) ^ (0u >> (uint(8u))))) >> 0u));
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    return;
   return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  {
   if((false))
    return;
   if((false))
    {
     if((false))
      return;
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     return;
    }
   if(((((true && (injectionSwitch.x > injectionSwitch.y))))))
    return;
   if((((injectionSwitch.x > ((false ? (injectionSwitch) : injectionSwitch)).y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((((((injectionSwitch.x) / ((float(mat2x3((injectionSwitch.y) * (1.0), 1.0, 0.0, (dot(vec4(1.0, 0.0, length(0.0), 0.0), vec4(1.0, 0.0, 0.0, 0.0))), 1.0, 0.0))))) > injectionSwitch.y))))
      return;
     if((false))
      {
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          return;
         return;
        }
       return;
       if((false))
        return;
       if((false))
        {
         if((false))
          return;
         return;
        }
       if((false))
        return;
      }
     if(((((! (! (false)))) || false)))
      return;
     return;
     if((false))
      return;
     if((false || ((true && ((false))))))
      return;
     if((! (((! ((false))) && true))))
      return;
    }
   if((false))
    return;
   return;
   if((false))
    return;
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  return;
 if(((bool(bvec3(false, false, false)))))
  return;
 if(((bool(bvec4(((injectionSwitch.x > injectionSwitch.y)), ((injectionSwitch.x > injectionSwitch.y)), false, true)))))
  {
   if((false))
    return;
   return;
  }
 buf[virtual_gid] = 1;
 if((false))
  return;
 if(((bool(bvec2(false, true)))))
  {
   if((false))
    return;
   if(((true && ((((bool(bvec4(((injectionSwitch.x > injectionSwitch.y) && true), false, false, true)))))))))
    {
     if(((bool(bvec4(false, true, (! (! (true))), true)))))
      return;
     if((false))
      {
       if((false))
        return;
       return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      return;
     return;
    }
   if((false))
    {
     if((false))
      return;
     if((false))
      return;
     if((false))
      return;
     if(((false || (false))))
      {
       if((false))
        return;
       if((false))
        return;
       return;
      }
     if((false))
      return;
     if((false))
      return;
     return;
    }
   if((false))
    return;
   return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((! (! (bool(bool(false))))))))
      return;
     if((false))
      {
       if(((! (! (false)))))
        return;
       if((false))
        return;
       if((false))
        return;
       return;
      }
     if((false))
      {
       if((false))
        {
         if((false))
          return;
         return;
        }
       return;
       if((false))
        return;
      }
     if((false))
      return;
     if((((false) || false)))
      return;
     return;
    }
   if((false))
    {
     if((false))
      return;
     if((bool(bool((false)))))
      return;
     if(((((max(injectionSwitch, injectionSwitch)).x > (1.0 * (injectionSwitch.y))))))
      return;
     return;
     if((false))
      {
       if((false))
        return;
       return;
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      return;
     return;
    }
  }
 if((false))
  return;
 if((false))
  {
   if((false))
    {
     if((false))
      return;
     return;
    }
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      return;
     return;
     if((false))
      return;
    }
   if((false))
    {
     if((false))
      return;
     if((false))
      return;
     if((false))
      {
       if((false))
        return;
       return;
      }
     return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if(((bool(bool(((((true ? (clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) : (- 9.0))) > injectionSwitch.y)))))))
      return;
     if((false))
      return;
     if((false))
      {
       if((false))
        return;
       return;
      }
     if((false))
      return;
     return;
     if((false))
      return;
    }
   if((false))
    return;
   if((false))
    return;
   return;
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if((false))
    return;
   if(((! (! (false)))))
    return;
   if((false))
    {
     if((false))
      return;
     return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    return;
   if((false))
    {
     if((false))
      return;
     return;
    }
   if((false))
    return;
  }
 if(subgroup_local_id + (((~ (~ (1))) | ((max(~ (~ (1)), ((~ (~ (1))) / 1)))))) < subgroup_size)
  {
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    return;
   buf[next_virtual_gid] = 2;
   if((((! (true && ((! ((((bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, false)))) && true)))))))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
       if((false))
        return;
      }
     if((false))
      {
       if(((bool(bvec2(false, false)))))
        return;
       return;
      }
     if((false))
      return;
     return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      {
       if((false))
        return;
       return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if((((false) || false)))
    return;
   if((false))
    return;
   if((false))
    return;
   if((false))
    {
     if((false))
      return;
     return;
    }
   if((false))
    return;
   if((false))
    return;
   subgroupAll(false);
   if(((bool(bvec4(false, true, ((((injectionSwitch) - vec2(0.0, 0.0)).x < injectionSwitch.y)), true)))))
    {
     if((false))
      return;
     if((false))
      return;
     if((false))
      return;
     if((false))
      return;
     if((false))
      return;
     if((((! (! (bool(bvec3(false, true, false))))))))
      return;
     if((false))
      {
       if((false))
        return;
       return;
      }
     return;
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((false))
        return;
       return;
       if((false))
        return;
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
   if((((injectionSwitch.x > ((false ? (- 3344.2786) : (mix(float((234.930)), float((float(mat3x4((float(mat2((clamp(injectionSwitch.y, ((injectionSwitch.y) * 1.0), (mix(float(injectionSwitch.y), float((- 75.33)), bool(false))))), 1.0, 1.0, 1.0))), 1.0, 1.0, sin(0.0), 1.0, ((true ? 0.0 : (6977.2969))), sqrt(1.0), 1.0, 0.0, 0.0, 0.0, 1.0)))), bool(true)))))))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      {
       if((false))
        {
         if((false))
          {
           if((false))
            return;
           return;
          }
         return;
         if((false))
          return;
        }
       if((false))
        return;
       return;
      }
     if((false))
      {
       if((false))
        return;
       return;
      }
     return;
     if((false || ((((false)) || false))))
      return;
     if((! (! ((((injectionSwitch.x > injectionSwitch.y)))))))
      return;
     if((false))
      return;
    }
   if((false))
    return;
   if((false))
    return;
   if((false))
    {
     if((false))
      {
       if((false))
        return;
       if((true && ((false))))
        return;
       return;
       if((false))
        return;
       if((false))
        return;
       if((false))
        return;
      }
     return;
     if((false))
      {
       if((false))
        return;
       if((false))
        return;
       return;
      }
     if((false))
      return;
     if((false))
      return;
     if(((! (! ((! (! (false))))))))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     return;
    }
   ((((0u + ((buf[next_virtual_gid] = 2)))) | 0u) | uint((injectionSwitch.x)));
   subgroupAll(true);
   if((false))
    return;
   if((false))
    {
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        return;
       return;
      }
     if((false))
      return;
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          return;
         return;
        }
       return;
      }
     return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if((false))
    return;
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
