#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = (clamp((((uint(uvec2(((uint(uvec3((((gl_NumWorkGroups.x) / 1u)) - 0u, (1u & 1u), 1u)))), 0u)))) ^ 0u), gl_NumWorkGroups.x, gl_NumWorkGroups.x));
 uint workgroup_size = (((uvec3(0u, 0u, 0u) | (gl_WorkGroupSize))) / uvec3(1u, 1u, 1u)).x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = (min(workgroup_size, workgroup_size)) * (min((uint(uvec4((uint(uvec2(workgroup_id, 0u))), (uint(uvec4(uint((injectionSwitch.y)), 1u, 0u, 0u))), 1u, 0u))), workgroup_id));
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + ((false ? (uint(uint((subgroup_size)))) : ((false ? (workgroup_base) : (max(subgroup_id, (uint(uvec4(subgroup_id, (0u ^ (1u)), (((((((0u ^ 1u) | (0u ^ 1u))) ^ 0u)) | (0u ^ 1u))), ((1u) | ((~ (~ (1u)))))))))) * subgroup_size)))) + ((((true ? ((((subgroup_local_id) >> uint((injectionSwitch.x)))) | 0u) + (((max(((1) ^ 0), 1))) / (((1 * (0 | ((1))))) >> 0)) : ((~ 197275u))))) % subgroup_size);
 if(false)
  {
  }
 else
  {
   for(int _injected_loop_counter = (((max(1, 1)) << (int(5))) >> (int(ivec4((int(5)), 1, (0 >> (int(4))), 1)))); _injected_loop_counter > 0; _injected_loop_counter --)
    {
     for(int _injected_loop_counter = (0 | int((injectionSwitch.x))); _injected_loop_counter < (1 & ((clamp((clamp(1 & 1, 1 & 1, 1 & 1)), 1 & 1, 1 & 1)))); _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = 0; _injected_loop_counter < (1 ^ 0); _injected_loop_counter ++)
        {
         if((bool(bool((! (! (true)))))))
          {
           for(int _injected_loop_counter = 1; _injected_loop_counter > (0 << (int(5))); _injected_loop_counter --)
            {
             for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
              {
               if((false || (true)))
                {
                 for(int _injected_loop_counter = 1; _injected_loop_counter > (int((ivec3(0, 0, 0) ^ (ivec3((((((1 ^ 1) ^ (0 & - 61401))) | (1 ^ 1))), (((false ? (_injected_loop_counter) : (0 | ((1) - (0 >> (int(0)))))))), 0))))); _injected_loop_counter --)
                  {
                   buf[virtual_gid] = 1;
                  }
                }
               else
                {
                }
              }
            }
          }
         else
          {
          }
        }
      }
    }
  }
 if(false)
  {
  }
 else
  {
   if(true)
    {
     do
      {
       for(int _injected_loop_counter = 0; _injected_loop_counter != (0 | ((((((((max(true ? 1 : (- 86979), (clamp(true ? 1 : (- 86979), true ? 1 : (- 86979), true ? (~ (~ (1))) : (- 86979)))))) / int((injectionSwitch.y)))))) >> 0))); _injected_loop_counter ++)
        {
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             if((bool(((bool((! (! (true && ((((((true)) || false)) && true))))))) || false))))
              {
               for(int _injected_loop_counter = (0 >> (int(7))); _injected_loop_counter != 1; _injected_loop_counter ++)
                {
                 if((uint((~ (~ (uint(subgroup_local_id + (max((int((((false ? ((max(vec2(((true ? - 30.88 : (3107.9410))), - 2.9), ((vec2(((true ? - 30.88 : (3107.9410))), - 2.9)) - vec2(0.0, 0.0))))) : (clamp(injectionSwitch, injectionSwitch, (mix(vec2(((((3.0 - - 3.7)) / 1.0)), (45.98)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))))))).x)) ^ (1)), (((min(false ? (((_injected_loop_counter) << ((0) >> 0))) : (int(((((((! (! (bool(bvec4(false, false, false, false)))))) || (false)) ? (vec2((min(- 30.88, - 30.88)), - 2.9)) : injectionSwitch)).x)) ^ (min((1), (0 | ((1)))))), false ? (((_injected_loop_counter) << (min(0, ((0) | (0)))))) : (int(((((false || (false)) ? (vec2(((max(min(- 30.88, - 30.88), min(- 30.88, - 30.88)))), - 2.9)) : injectionSwitch)).x)) ^ (1)))))))))))))) < (((((((0u + ((max(subgroup_size, subgroup_size))))) + 0u)) | ((0u + ((max(subgroup_size, subgroup_size))))))) - 0u))
                  {
                   if(((injectionSwitch.x < injectionSwitch.y)))
                    {
                     if(false)
                      {
                      }
                     else
                      {
                       if(true)
                        {
                         if(((((((true) && true)) && true)) || false))
                          {
                           buf[next_virtual_gid] = ((((false ? (- 48729) : (max(2, (((false ? ((true ? 77415 : _injected_loop_counter)) : 0 | (2))))))))) >> 0);
                          }
                         else
                          {
                          }
                        }
                       else
                        {
                        }
                      }
                    }
                   else
                    {
                    }
                   for(int _injected_loop_counter = ((int((injectionSwitch.y)) << (((int(2)) | (0 ^ 0)))) >> (int(2))); _injected_loop_counter != 0; _injected_loop_counter --)
                    {
                     if(true)
                      {
                       for(int _injected_loop_counter = 1; _injected_loop_counter != (0 << (((int(3)) | 0))); _injected_loop_counter --)
                        {
                         if(false)
                          {
                          }
                         else
                          {
                           if(true)
                            {
                             for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != 1; _injected_loop_counter ++)
                              {
                               do
                                {
                                 do
                                  {
                                   if(false)
                                    {
                                    }
                                   else
                                    {
                                     do
                                      {
                                       do
                                        {
                                         do
                                          {
                                           if(((false) || false))
                                            {
                                            }
                                           else
                                            {
                                             if(((injectionSwitch.x < ((true ? (max(injectionSwitch, injectionSwitch)).y : (float(- 27728)))))))
                                              {
                                               if(((injectionSwitch.x > injectionSwitch.y)))
                                                {
                                                }
                                               else
                                                {
                                                 do
                                                  {
                                                   if(false)
                                                    {
                                                    }
                                                   else
                                                    {
                                                     if(((injectionSwitch.x > injectionSwitch.y)))
                                                      {
                                                      }
                                                     else
                                                      {
                                                       for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != (~ (((false ? (_injected_loop_counter) : ~ ((max(0, 0))))))); _injected_loop_counter --)
                                                        {
                                                         do
                                                          {
                                                           if((false || (false)))
                                                            {
                                                            }
                                                           else
                                                            {
                                                             if(((injectionSwitch.x > injectionSwitch.y)))
                                                              {
                                                              }
                                                             else
                                                              {
                                                               for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
                                                                {
                                                                 if(((((injectionSwitch.x) / 1.0) < injectionSwitch.y)))
                                                                  {
                                                                   if(false)
                                                                    {
                                                                    }
                                                                   else
                                                                    {
                                                                     if(true)
                                                                      {
                                                                       if(true)
                                                                        {
                                                                         if(((injectionSwitch.x < injectionSwitch.y)))
                                                                          {
                                                                           subgroupAll(false);
                                                                          }
                                                                         else
                                                                          {
                                                                          }
                                                                        }
                                                                       else
                                                                        {
                                                                        }
                                                                      }
                                                                     else
                                                                      {
                                                                      }
                                                                    }
                                                                  }
                                                                 else
                                                                  {
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                         while(((((injectionSwitch.x > (((mix(float((- 9.6)), float(injectionSwitch.y), bool(true)))) / (float(mat2x3((float(mat4(1.0, 1.0, 0.0, 0.0, length(vec2(0.0, 0.0)), 1.0, 0.0, 1.0, 1.0, 1.0, tan(0.0), 0.0, (injectionSwitch.x), 1.0, 1.0, 0.0))), 0.0, 1.0, 0.0, 0.0, 1.0)))))) || (bool(bvec4((bool(bvec4((! (((! (false)) && true))), ((false) && true), true, ((injectionSwitch.x < (((mix(vec2((vec3(- 497.499, - 294.937, 2.2).b), (injectionSwitch)[1]), vec2(((false ? (acos(injectionSwitch)) : (injectionSwitch)))[0], (2938.9930)), bvec2(((injectionSwitch.x < injectionSwitch.y)), false)))) + vec2(0.0, 0.0)).y))))), false, true, true))))));
                                                        }
                                                      }
                                                    }
                                                  }
                                                 while(((injectionSwitch.x > injectionSwitch.y)));
                                                }
                                              }
                                             else
                                              {
                                              }
                                            }
                                          }
                                         while(false);
                                        }
                                       while(((injectionSwitch.x > injectionSwitch.y)));
                                      }
                                     while(false);
                                    }
                                  }
                                 while((((! (! (bool(bvec3((true && ((injectionSwitch.x > injectionSwitch.y))), true, false))))))));
                                }
                               while(false);
                              }
                            }
                           else
                            {
                            }
                          }
                        }
                      }
                     else
                      {
                      }
                    }
                  }
                 else
                  {
                   if(true)
                    {
                     if(((injectionSwitch.x > injectionSwitch.y)))
                      {
                      }
                     else
                      {
                       do
                        {
                         for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < ((1 << ((int(int(int(3)))))) >> (int(3))); _injected_loop_counter ++)
                          {
                           if(((injectionSwitch.x < injectionSwitch.y)))
                            {
                             for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != (1 & 1); _injected_loop_counter ++)
                              {
                               if((false || (false || (((! ((bool(bool(! (false)))))))))))
                                {
                                }
                               else
                                {
                                 do
                                  {
                                   if(false)
                                    {
                                    }
                                   else
                                    {
                                     if(((! (! (bool(bvec2(false, true)))))))
                                      {
                                      }
                                     else
                                      {
                                       if(true)
                                        {
                                         if(true)
                                          {
                                           do
                                            {
                                             if(false)
                                              {
                                              }
                                             else
                                              {
                                               if(true)
                                                {
                                                 for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                                                  {
                                                   if(((injectionSwitch.x < injectionSwitch.y)))
                                                    {
                                                     for(int _injected_loop_counter = int((((injectionSwitch.x)) + 0.0)); ((_injected_loop_counter != (((clamp(1, 1, ((((1) | 0) << 0)))) << (int(6))) >> (clamp((((max((int(6)), (int(6))))) / 1), (int(6)), (int(((6) | (6)))))))) || false); _injected_loop_counter ++)
                                                      {
                                                       if(true)
                                                        {
                                                         ((buf[next_virtual_gid] = 2) / 1u);
                                                        }
                                                       else
                                                        {
                                                        }
                                                      }
                                                    }
                                                   else
                                                    {
                                                    }
                                                  }
                                                }
                                               else
                                                {
                                                }
                                              }
                                            }
                                           while(((((injectionSwitch.x > ((false ? (- 15.65) : (max((clamp((vec2(injectionSwitch[0], injectionSwitch[1])), (((clamp((clamp(injectionSwitch, injectionSwitch, (max((((true && (false)) ? (vec2(1.7, 37.09)) : (mix((mix(vec2((384.420), (vec2((injectionSwitch)[0], (38.79)))[1]), vec2((vec2((injectionSwitch)[0], (38.79)))[0], (97.43)), (bvec2(bvec3(bvec2(true, false), true))))), vec2((8474.4325), (injectionSwitch)[1]), bvec2(false, true))))), ((injectionSwitch) * mat2(1.0)))))), (((true ? ((false ? (mix(injectionSwitch, vec2(- 6.2, 9.5), - 73.46)) : min(((max(vec2(mat4x2(injectionSwitch, 1.0, 0.0, 1.0, 0.0, 0.0, (mix(float((26.29)), float(0.0), bool(true))))), vec2(mat4x2(injectionSwitch, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0))))), injectionSwitch))) : (vec2(- 369.065, 9.6))))), (clamp(injectionSwitch, injectionSwitch, injectionSwitch))))) + vec2(0.0, 0.0)), injectionSwitch)).y, (vec2(injectionSwitch[0], injectionSwitch[1])).y))))) || (! (! (false)))))));
                                          }
                                         else
                                          {
                                          }
                                        }
                                       else
                                        {
                                        }
                                      }
                                    }
                                  }
                                 while((bool(bool(false))));
                                }
                              }
                            }
                           else
                            {
                            }
                          }
                        }
                       while(false);
                      }
                    }
                   else
                    {
                    }
                   do
                    {
                     do
                      {
                       if(false)
                        {
                        }
                       else
                        {
                         if(true)
                          {
                           for(int _injected_loop_counter = 1; (((true && ((false || ((bool(bvec2((((bool(bvec4((bool((bool(bvec4(bool(_injected_loop_counter != (~ (~ (0)))), true, false, true))))), true, false, true))) || false)), true)))))))) || ((injectionSwitch.x > injectionSwitch.y))); ((~ (~ ((_injected_loop_counter --) << ((~ (~ (((0 << (int(7))) / 1))))))))))
                            {
                             if(((injectionSwitch.x < injectionSwitch.y)))
                              {
                               do
                                {
                                 subgroupAll(true);
                                }
                               while(((false) || false));
                              }
                             else
                              {
                              }
                            }
                          }
                         else
                          {
                          }
                        }
                      }
                     while(false);
                    }
                   while(((((((false || (bool(bvec3(injectionSwitch.x > (1.0 * (((false ? ((false ? (sqrt(- 8.5)) : (1.0 * (((((- 901.861 * 56.35))) / abs(1.0)))))) : injectionSwitch.y)))), true, true)))))))) && true));
                  }
                }
              }
             else
              {
              }
            }
           else
            {
            }
          }
        }
      }
     while(false);
    }
   else
    {
    }
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
