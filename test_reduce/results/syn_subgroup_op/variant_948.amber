#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((bool(bool((((injectionSwitch.x > ((min(float((transpose(transpose(((false ? (mat4(3.7, 496.344, - 633.330, - 94.51, 3.7, 7748.6562, - 6.3, 8.1, - 2136.8432, 7942.9465, - 3435.3865, 5.1, 6312.5577, - 1.6, - 0.8, - 915.060)) : mat4(injectionSwitch.y, 1.0, 1.0, abs(1.0), 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, sqrt((dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)))), 1.0, 1.0, (min(1.0, 1.0)), 1.0, abs(0.0)))))))), float(((false ? (mat4(3.7, 496.344, - 633.330, - 94.51, 3.7, 7748.6562, - 6.3, 8.1, - 2136.8432, 7942.9465, - 3435.3865, 5.1, 6312.5577, - 1.6, - 0.8, - 915.060)) : mat4(injectionSwitch.y, 1.0, 1.0, abs(((true ? 1.0 : (- 253.145)))), 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, sqrt(((mix(float(((4.8))), float(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))), bool(((injectionSwitch.x < injectionSwitch.y))))))), 1.0, 1.0, 1.0, 1.0, abs(0.0)))))))))))))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(((injectionSwitch.x > injectionSwitch.y)))
  {
  }
 else
  {
   if((false))
    {
     if((false))
      {
       if(((! ((false || (! ((false || (((max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))))))))
        {
        }
       else
        {
         if(true)
          {
           barrier();
          }
         else
          {
          }
        }
      }
     barrier();
    }
  }
 uvec2 GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id;
 uint subgroup_id = gl_SubgroupID;
 if(true)
  {
   if(false)
    {
    }
   else
    {
     GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.x = (max(subgroup_id, subgroup_id));
    }
  }
 else
  {
  }
 if(((((((((vec2((max((injectionSwitch.x), (injectionSwitch.x))), (injectionSwitch.x)) + (((injectionSwitch.x < ((false ? (vec2(- 710.450, - 6.7)) : injectionSwitch)).y)) ? injectionSwitch : (injectionSwitch))))).x > injectionSwitch.y))) && true)))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if((false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 ((((0u ^ (((0u | (((GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.y = subgroup_local_id) << ((0u) / (~ ((uint(uvec3(~ (((1u) >> (0u >> (((uint(1u)) ^ 0u))))), 0u, 0u))))))))) ^ 0u))))) - uint((injectionSwitch.x)));
 uint num_workgroup = gl_NumWorkGroups.x;
 if(((injectionSwitch.x < injectionSwitch.y)))
  {
   if((true && ((false))))
    barrier();
  }
 else
  {
  }
 if(((((((bool(bvec2((bool(bvec2(bool(bool((false))), true))), true)))) || false))) || false))
  {
   if((false))
    barrier();
   barrier();
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_base = workgroup_size * workgroup_id;
 if((! (! (false))))
  {
  }
 else
  {
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != ((1 << ((clamp(int(5), int(5), (((true ? ~ (~ (int((1 * (((5) - 0)))))) : (_injected_loop_counter)))))))) >> (int(5))); _injected_loop_counter ++)
      {
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
  }
 uint virtual_gid = workgroup_base + (max((uint((injectionSwitch.x)) + ((max(GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.x * subgroup_size, GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.x * (0u | (subgroup_size)))))), (uint(((false ? (- 7.8) : (injectionSwitch.x)))) + ((max(GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.x * subgroup_size, GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.x * (0u | (subgroup_size)))))))) + GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.y;
 uint next_virtual_gid = workgroup_base + GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.x * subgroup_size + (((min(GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id, (max(GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id, (uvec2(GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id[(0 | ((clamp(0, ((true ? 0 : (- 64342))), (max(((0) >> 0), 0))))))], (max(GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id, GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id))[1])))))).y + 1) % subgroup_size);
 if(false)
  {
  }
 else
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   buf[virtual_gid] = 1;
  }
 do
  {
   if((false))
    barrier();
   if(((((float(mat3x2(((clamp(0.0, ((true ? 0.0 : (52.37))), 0.0)) + (((false ? (1.3) : 1.0)))), ((sqrt(0.0)) / 1.0), 1.0, 0.0, 0.0, ((((((false ? (- 7.2) : false ? (901.762) : 1.0))))) - 0.0)))) * (injectionSwitch.x)) < (clamp(((clamp(vec2((min(vec3(injectionSwitch, 1.0), vec3(injectionSwitch, 1.0)))), (mix(vec2(((transpose(transpose(mat2(1.0)))) * ((vec2(((max((max(((min(vec3(injectionSwitch, 1.0), vec3(injectionSwitch, 1.0)))) * mat3(1.0), ((((min(vec3(injectionSwitch, 1.0), vec3(injectionSwitch, 1.0)))) * mat3(1.0)) * vec3(1.0, 1.0, 1.0)))), (vec3(mat2(((min(vec3(injectionSwitch, ((1.0) - 0.0)), vec3(injectionSwitch, ((1.0) - sin(0.0)))))) * mat3(1.0), 0.0))))))))))[0], (209.040)), vec2((17.69), (vec2((min(vec3(injectionSwitch, 1.0), vec3(injectionSwitch, 1.0)))))[1]), bvec2(false, true))), (max(((true ? vec2((min(vec3(injectionSwitch, 1.0), vec3(injectionSwitch, 1.0)))) : (injectionSwitch))), vec2((min(vec3(injectionSwitch, 1.0), vec3(injectionSwitch, (mix(float((min(1.0, 1.0))), float((1819.9405)), bool(false)))))))))))), injectionSwitch, (max(injectionSwitch, injectionSwitch)))).y)))
    {
     if(((injectionSwitch.x > (((min(max(((false ? (trunc(vec2(8001.7959, - 9631.3877))) : vec2(0.0, 0.0) + (((injectionSwitch) * mat2(1.0))))), vec2(0.0, 0.0) + (((injectionSwitch) * mat2(1.0)))), max(((false ? (trunc(vec2(8001.7959, - 9631.3877))) : vec2(0.0, 0.0) + (((injectionSwitch) * mat2(1.0))))), vec2(0.0, 0.0) + (((injectionSwitch) * mat2(1.0)))))))).y)))
      {
      }
     else
      {
       if(true)
        {
         if((! ((! (((! ((((true && ((true && ((((((bool(bool(((! (((((injectionSwitch.x > injectionSwitch.y)) || (bool(bvec3(GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.y + (0 | (1)) < subgroup_size, true, true))))))) && true))))) || false)) && true)))))) && true))) || false))))))
          {
           if((((! (! ((injectionSwitch.x > (mix(float((float(mat3x2(injectionSwitch.y, 0.0, 1.0, abs(0.0), 1.0, 0.0)))), float((- 0.6)), bool(((injectionSwitch.x > injectionSwitch.y))))))))))))
            barrier();
           buf[next_virtual_gid] = 2;
           subgroupAll(false);
          }
         else
          {
           if((bool(bvec4((false), false, ((injectionSwitch.x > injectionSwitch.y)), true))))
            barrier();
           ((buf[next_virtual_gid] = 2) | 0u);
           if(false)
            {
            }
           else
            {
             subgroupAll((true && (true)));
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if(true)
                {
                 barrier();
                }
               else
                {
                }
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           do
            {
             if((false))
              {
               if((false))
                barrier();
               if(false)
                {
                 if((((((((injectionSwitch.x > injectionSwitch.y)) && true)) || false))))
                  {
                   if(((injectionSwitch.x > injectionSwitch.y)))
                    {
                    }
                   else
                    {
                     barrier();
                    }
                  }
                }
               else
                {
                 do
                  {
                   barrier();
                  }
                 while(((injectionSwitch.x > injectionSwitch.y)));
                }
               if((false))
                {
                 if(false)
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
              }
            }
           while(false);
          }
        }
       else
        {
        }
      }
     if((! (! (false))))
      {
      }
     else
      {
       if((((((((injectionSwitch.x > injectionSwitch.y))) && true)) && true)))
        {
         for(int _injected_loop_counter = 0; _injected_loop_counter < ((1 << (int(3))) >> (int(3))); _injected_loop_counter ++)
          {
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             barrier();
            }
           else
            {
            }
          }
        }
       if((false))
        barrier();
      }
     if((false))
      {
       do
        {
         barrier();
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
      }
    }
   else
    {
     for(int _injected_loop_counter = 1; _injected_loop_counter != (0 << ((~ (~ (int(5)))))); _injected_loop_counter --)
      {
       if((((injectionSwitch.x > (max(injectionSwitch, injectionSwitch)).y))))
        {
         if((false))
          barrier();
         barrier();
         if((false))
          barrier();
        }
      }
     if((false))
      {
       if((false))
        barrier();
       if((false))
        barrier();
       do
        {
         barrier();
        }
       while(false);
       if((((injectionSwitch.x > ((injectionSwitch) - vec2(0.0, 0.0)).y))))
        barrier();
      }
    }
   if(false)
    {
    }
   else
    {
     if((false))
      barrier();
    }
  }
 while(false);
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
