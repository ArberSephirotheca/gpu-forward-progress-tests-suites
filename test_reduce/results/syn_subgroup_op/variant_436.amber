#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec4 GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_13num_workgroupsubgroup_idsubgroup_local_idsubgroup_size;
 if(true)
  {
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     if(true)
      {
       if((false))
        {
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           return;
          }
         else
          {
          }
        }
      }
     else
      {
      }
    }
   else
    {
    }
  }
 else
  {
  }
 uvec4 GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_14next_virtual_gidnum_workgroupsubgroup_local_idworkgroup_base;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     return;
    }
   while(false);
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     if((! (! (((injectionSwitch.x > injectionSwitch.y))))))
      {
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if(((true && (((injectionSwitch.x > injectionSwitch.y))))))
          return;
        }
       else
        {
        }
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != ((false ? (25414) : 0)); _injected_loop_counter --)
          {
           return;
          }
        }
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         do
          {
           for(int _injected_loop_counter = (0 >> (int(6))); _injected_loop_counter < 1; _injected_loop_counter ++)
            {
             if(false)
              {
              }
             else
              {
               for(int _injected_loop_counter = 0; _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
                {
                 do
                  {
                   if((false))
                    {
                     if((false))
                      {
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        break;
                       continue;
                      }
                     continue;
                    }
                   return;
                  }
                 while(false);
                 if((false))
                  break;
                }
               if((false))
                {
                 for(int _injected_loop_counter = ((1 << (int(5))) >> (int(5))); _injected_loop_counter != 0; _injected_loop_counter --)
                  {
                   return;
                  }
                }
              }
            }
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
         if((false))
          return;
        }
       if((false))
        return;
      }
    }
   else
    {
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 uint subgroup_id = gl_SubgroupID;
 for(int _injected_loop_counter = 1; _injected_loop_counter != (0 ^ 0); _injected_loop_counter --)
  {
   if((false))
    {
     if(false)
      {
      }
     else
      {
       do
        {
         return;
        }
       while(false);
      }
    }
  }
 if((false))
  return;
 do
  {
   if(false)
    {
    }
   else
    {
     if(true)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if(false)
        {
        }
       else
        {
         for(int _injected_loop_counter = 1; _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
          {
           if((false))
            {
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
              }
             else
              {
               return;
              }
            }
          }
        }
      }
     else
      {
      }
    }
  }
 while(false);
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    return;
   return;
  }
 if(true)
  {
   if(false)
    {
    }
   else
    {
     for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
      {
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         do
          {
           GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_13num_workgroupsubgroup_idsubgroup_local_idsubgroup_size.y = subgroup_id;
          }
         while(false);
        }
       else
        {
        }
      }
    }
   if((false))
    {
     do
      {
       return;
      }
     while(false);
    }
  }
 else
  {
  }
 uint subgroup_size = gl_SubgroupSize;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    return;
   return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
    }
   else
    {
     for(int _injected_loop_counter = 0; _injected_loop_counter != ((1 << (int(6))) >> ((max(int(6), int(6))))); _injected_loop_counter ++)
      {
       if((false))
        continue;
       if((false))
        break;
       if((false))
        break;
       return;
       if((false))
        return;
      }
    }
  }
 for(int _injected_loop_counter = (0 | ((1 << (int(2))) >> (int(2)))); _injected_loop_counter != 0; _injected_loop_counter --)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if(false)
            {
            }
           else
            {
             if(false)
              {
              }
             else
              {
               return;
              }
             if((false))
              break;
            }
          }
         return;
        }
      }
     if(false)
      {
      }
     else
      {
       if(true)
        {
         for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
          {
           return;
          }
         if(false)
          {
          }
         else
          {
           do
            {
             if(((bool((bvec3(bvec4(bvec3((true && (false)), true, false), true)))))))
              {
               if(true)
                {
                 do
                  {
                   return;
                  }
                 while(false);
                }
               else
                {
                }
              }
             if((false))
              break;
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
          }
        }
       else
        {
        }
      }
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 do
  {
   if(true)
    {
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if((false))
          break;
         if(true)
          {
           do
            {
             if(((! (! (false)))))
              {
               for(int _injected_loop_counter = ((1 & 1) ^ 1); _injected_loop_counter < 1; _injected_loop_counter ++)
                {
                 return;
                }
              }
             if((false))
              {
               for(int _injected_loop_counter = 1; _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
                {
                 do
                  {
                   return;
                  }
                 while(false);
                }
              }
             if((false))
              return;
            }
           while(false);
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
         else
          {
          }
        }
       else
        {
        }
      }
     else
      {
       if((false))
        {
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           if((false))
            return;
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
           return;
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           if((false))
            break;
           if((false))
            break;
          }
        }
      }
    }
   else
    {
    }
  }
 while(((injectionSwitch.x > injectionSwitch.y)));
 for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
  {
   if(true)
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          continue;
         return;
        }
       if(false)
        {
         if((false))
          continue;
        }
       else
        {
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           if(false)
            {
             do
              {
               if((false))
                {
                 if((false))
                  {
                   if(true)
                    {
                     if(true)
                      {
                       return;
                      }
                     else
                      {
                      }
                    }
                   else
                    {
                    }
                  }
                 if((false))
                  return;
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  break;
                 return;
                }
              }
             while(false);
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
             if((false))
              return;
            }
           else
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             do
              {
               if(((injectionSwitch.x > injectionSwitch.y)))
                {
                 if(false)
                  {
                  }
                 else
                  {
                   if((false))
                    return;
                  }
                }
               else
                {
                 for(int _injected_loop_counter = ((1 << (int(2))) >> (int(2))); _injected_loop_counter != 0; _injected_loop_counter --)
                  {
                   if(((bool(bool(bool(bvec4(true, false, ((injectionSwitch.x < injectionSwitch.y)), ((injectionSwitch.x > injectionSwitch.y)))))))))
                    {
                     if(false)
                      {
                      }
                     else
                      {
                       for(int _injected_loop_counter = (1 ^ 1); _injected_loop_counter != ((1) | (1)); _injected_loop_counter ++)
                        {
                         return;
                        }
                       do
                        {
                         if(false)
                          {
                          }
                         else
                          {
                           if((((injectionSwitch.x > injectionSwitch.y))))
                            return;
                          }
                        }
                       while(false);
                       if(((false || (false))))
                        return;
                      }
                    }
                   else
                    {
                    }
                   if((false))
                    break;
                  }
                }
               if((false))
                break;
              }
             while(((injectionSwitch.x > injectionSwitch.y)));
            }
           for(int _injected_loop_counter = 0; _injected_loop_counter != ((1) - 0); _injected_loop_counter ++)
            {
             if((false))
              return;
             if((false))
              return;
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
           if(false)
            {
            }
           else
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
             return;
            }
          }
        }
       if((false))
        break;
       if(((bool(bvec3(false, true, false)))))
        {
         if((false))
          break;
         return;
        }
      }
    }
   else
    {
    }
  }
 if((false))
  return;
 if((false))
  return;
 if(((injectionSwitch.x < injectionSwitch.y)))
  {
   if(false)
    {
     for(int _injected_loop_counter = (0 & 19308); _injected_loop_counter < 1; _injected_loop_counter ++)
      {
       if(true)
        {
         if((false))
          break;
         for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
          {
           if((false))
            {
             if(((injectionSwitch.x < injectionSwitch.y)))
              {
               return;
              }
             else
              {
              }
            }
          }
        }
       else
        {
        }
       if((false))
        break;
      }
     if(((true && (false))))
      {
       for(int _injected_loop_counter = 0; _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
        {
         return;
        }
      }
    }
   else
    {
     for(int _injected_loop_counter = 1; _injected_loop_counter != (- 29291 & 0); _injected_loop_counter --)
      {
       if(false)
        {
        }
       else
        {
         for(int _injected_loop_counter = 0; _injected_loop_counter != ((1 << (int(5))) >> (int(5))); _injected_loop_counter ++)
          {
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             if(true)
              {
               GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_13num_workgroupsubgroup_idsubgroup_local_idsubgroup_size.w = subgroup_size;
              }
             else
              {
              }
            }
           else
            {
            }
          }
        }
      }
    }
  }
 else
  {
   if((false))
    return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
    {
     do
      {
       do
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       while(false);
      }
     while(false);
    }
   return;
  }
 for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < 1; _injected_loop_counter ++)
  {
   if(true)
    {
     if(true)
      {
       if(true)
        {
         do
          {
           for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
            {
             if(((injectionSwitch.x < injectionSwitch.y)))
              {
               do
                {
                 if(((injectionSwitch.x > injectionSwitch.y)))
                  {
                   if((false))
                    continue;
                  }
                 else
                  {
                   GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_13num_workgroupsubgroup_idsubgroup_local_idsubgroup_size.z = subgroup_local_id;
                  }
                }
               while(false);
               if((false))
                continue;
              }
             else
              {
              }
            }
          }
         while(false);
         if((false))
          break;
        }
       else
        {
        }
      }
     else
      {
      }
    }
   else
    {
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if(true)
  {
   for(int _injected_loop_counter = (0 >> (int(8))); _injected_loop_counter != 1; _injected_loop_counter ++)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(false)
        {
        }
       else
        {
         if((false))
          {
           if((false))
            return;
           return;
          }
        }
       if(true)
        {
         if(false)
          {
          }
         else
          {
           if(true)
            {
             for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 do
                  {
                   return;
                  }
                 while(((injectionSwitch.x > injectionSwitch.y)));
                }
              }
            }
           else
            {
            }
          }
        }
       else
        {
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
       if((false))
        {
         if((false))
          return;
         if((false))
          return;
         do
          {
           if((false))
            {
             if(((injectionSwitch.x < injectionSwitch.y)))
              {
               if((false))
                return;
               return;
              }
             else
              {
              }
            }
          }
         while((true && (false)));
         if((false))
          continue;
         for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
          {
           return;
          }
        }
       if((false))
        break;
       if((((false) && true)))
        return;
       if((false))
        return;
       if(false)
        {
         for(int _injected_loop_counter = 0; _injected_loop_counter < ((1) << 0); _injected_loop_counter ++)
          {
           if(((false || (false))))
            {
             if((false))
              return;
             return;
            }
          }
        }
       else
        {
         if((false))
          {
           do
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           while(false);
           return;
          }
         if(false)
          {
          }
         else
          {
           for(int _injected_loop_counter = (1 | 0); _injected_loop_counter > 0; _injected_loop_counter --)
            {
             if(true)
              {
               if((false))
                return;
               do
                {
                 if((false))
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(false)
                      {
                      }
                     else
                      {
                       if(false)
                        {
                        }
                       else
                        {
                         return;
                        }
                       if((false))
                        break;
                      }
                     if((false))
                      continue;
                    }
                   if(true)
                    {
                     if(false)
                      {
                      }
                     else
                      {
                       if(((injectionSwitch.x < injectionSwitch.y)))
                        {
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          return;
                        }
                       else
                        {
                        }
                       if((false))
                        {
                         if((false))
                          return;
                         continue;
                        }
                       do
                        {
                         if((false))
                          {
                           if((false))
                            return;
                           break;
                          }
                         if(((injectionSwitch.x < injectionSwitch.y)))
                          {
                           for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                            {
                             do
                              {
                               if(true)
                                {
                                 do
                                  {
                                   return;
                                  }
                                 while(false);
                                }
                               else
                                {
                                }
                              }
                             while(((injectionSwitch.x > injectionSwitch.y)));
                            }
                          }
                         else
                          {
                          }
                         if(true)
                          {
                           if((((injectionSwitch.x > injectionSwitch.y))))
                            {
                             if((false))
                              {
                               if(false)
                                {
                                }
                               else
                                {
                                 return;
                                }
                              }
                             return;
                            }
                          }
                         else
                          {
                          }
                         if((false))
                          break;
                         if((false))
                          break;
                        }
                       while(false);
                      }
                    }
                   else
                    {
                     if((false))
                      {
                       if(true)
                        {
                         return;
                        }
                       else
                        {
                        }
                      }
                     if((false))
                      continue;
                    }
                  }
                }
               while(false);
              }
             else
              {
              }
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if(((bool(bvec2(((injectionSwitch.x > injectionSwitch.y)), true)))))
              return;
             if((false))
              continue;
             break;
            }
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             do
              {
               if(((injectionSwitch.x < injectionSwitch.y)))
                {
                 if((false))
                  break;
                 if(((injectionSwitch.x < injectionSwitch.y)))
                  {
                   do
                    {
                     return;
                    }
                   while(false);
                  }
                 else
                  {
                  }
                }
               else
                {
                }
              }
             while(((injectionSwitch.x > injectionSwitch.y)));
            }
           else
            {
            }
          }
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      break;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(false)
      {
      }
     else
      {
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
         if((false))
          return;
        }
       else
        {
         do
          {
           for(int _injected_loop_counter = 0; _injected_loop_counter < ((1 << (int(6))) >> ((0 ^ (int(6))))); _injected_loop_counter ++)
            {
             if(false)
              {
              }
             else
              {
               return;
              }
            }
          }
         while(false);
        }
      }
    }
  }
 else
  {
  }
 for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
  {
   if(false)
    {
    }
   else
    {
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((false))
        {
         if((false))
          return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if((false))
          break;
         if(true)
          {
           if(true)
            {
             for(int _injected_loop_counter = 0; _injected_loop_counter < ((1 << (int(3))) >> ((clamp(int(3), int(3), int(3))))); _injected_loop_counter ++)
              {
               if((false))
                continue;
               if((((injectionSwitch.x > injectionSwitch.y))))
                continue;
               if((false))
                continue;
               return;
              }
            }
           else
            {
            }
          }
         else
          {
          }
        }
      }
    }
  }
 if(true)
  {
   do
    {
     if((false))
      break;
     for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
      {
       for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != ((1 << (int(6))) >> (int(6))); _injected_loop_counter ++)
        {
         if(true)
          {
           if((false))
            {
             if((false))
              break;
             if((false))
              break;
             break;
            }
           if((false))
            return;
           if(true)
            {
             if((false))
              break;
             GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_14next_virtual_gidnum_workgroupsubgroup_local_idworkgroup_base.z = GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_13num_workgroupsubgroup_idsubgroup_local_idsubgroup_size.z;
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                {
                 for(int _injected_loop_counter = 0; _injected_loop_counter < ((1 << (int(2))) >> (int(2))); _injected_loop_counter ++)
                  {
                   if((false))
                    return;
                   if(false)
                    {
                    }
                   else
                    {
                     for(int _injected_loop_counter = (1 ^ (0 ^ 0)); _injected_loop_counter != ((0 << (int(7))) | 0); _injected_loop_counter --)
                      {
                       if((false))
                        {
                         if(true)
                          {
                           return;
                          }
                         else
                          {
                          }
                        }
                      }
                    }
                  }
                 if(((injectionSwitch.x > injectionSwitch.y)))
                  {
                  }
                 else
                  {
                   if((false))
                    {
                     if(((injectionSwitch.x < injectionSwitch.y)))
                      {
                       return;
                      }
                     else
                      {
                      }
                    }
                  }
                 if((false))
                  continue;
                 if((false))
                  continue;
                 continue;
                }
               break;
              }
            }
           else
            {
             do
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                break;
               if((((injectionSwitch.x > injectionSwitch.y))))
                break;
               if((false))
                {
                 if((false))
                  continue;
                 if(true)
                  {
                   for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                    {
                     if((false))
                      {
                       if(false)
                        {
                        }
                       else
                        {
                         if(((injectionSwitch.x < injectionSwitch.y)))
                          {
                           if(true)
                            {
                             return;
                            }
                           else
                            {
                            }
                           if((false))
                            break;
                          }
                         else
                          {
                          }
                        }
                      }
                    }
                   if(((bool(bvec3(false, false, false)))))
                    break;
                  }
                 else
                  {
                  }
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  break;
                 if((false))
                  break;
                 if((false))
                  break;
                 if((false))
                  {
                   if(true)
                    {
                     return;
                    }
                   else
                    {
                    }
                   if((false))
                    return;
                  }
                 do
                  {
                   if((false))
                    {
                     if((false))
                      break;
                     break;
                    }
                   if((false))
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      break;
                     if(true)
                      {
                       if(true)
                        {
                         if(false)
                          {
                          }
                         else
                          {
                           return;
                           if((((injectionSwitch.x > injectionSwitch.y))))
                            continue;
                           if((false))
                            continue;
                          }
                        }
                       else
                        {
                        }
                      }
                     else
                      {
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        continue;
                      }
                     if((false))
                      continue;
                    }
                   do
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      break;
                     if(((injectionSwitch.x > injectionSwitch.y)))
                      {
                      }
                     else
                      {
                       if((false))
                        return;
                      }
                     if((! ((bool(bool(! (((injectionSwitch.x < injectionSwitch.y)))))))))
                      {
                       for(int _injected_loop_counter = 0; _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
                        {
                         if((false))
                          return;
                         return;
                        }
                      }
                     else
                      {
                      }
                    }
                   while(((injectionSwitch.x > injectionSwitch.y)));
                  }
                 while(false);
                }
               if((false))
                continue;
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  break;
                 break;
                }
              }
             while(false);
            }
          }
         else
          {
           if((false))
            continue;
          }
        }
      }
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
  }
 else
  {
  }
 if(false)
  {
   if(((! (! (false)))))
    return;
  }
 else
  {
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
      {
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         if((bool(bvec4(true, false, false, true))))
          {
           if((false))
            break;
           if((false))
            {
             for(int _injected_loop_counter = 1; _injected_loop_counter > (0 << (int(0))); _injected_loop_counter --)
              {
               do
                {
                 return;
                }
               while(false);
              }
            }
          }
         else
          {
          }
        }
      }
    }
   else
    {
    }
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    {
     do
      {
       return;
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
    }
   if((false))
    return;
   if(false)
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(true)
        {
         return;
        }
       else
        {
        }
      }
    }
   if(false)
    {
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 1; _injected_loop_counter != (0 << (int(7))); _injected_loop_counter --)
        {
         if(true)
          {
           for(int _injected_loop_counter = ((1 << (int(1))) >> ((1 * (int(1))))); _injected_loop_counter != (0 | 0); _injected_loop_counter --)
            {
             return;
            }
          }
         else
          {
          }
        }
      }
    }
   if((false))
    return;
   if(true)
    {
     if((false))
      return;
    }
   else
    {
    }
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
         if((false))
          return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           do
            {
             return;
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
          }
         if(((! (! (false)))))
          return;
        }
       else
        {
         return;
        }
      }
     else
      {
      }
     do
      {
       if((false))
        {
         for(int _injected_loop_counter = ((1 << (int(5))) >> (((int(5)) | ((clamp(int(5), int(5), int(5))))))); _injected_loop_counter != 0; _injected_loop_counter --)
          {
           for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
            {
             return;
            }
           if((false))
            return;
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
      }
     while((! (! (false))));
     if(true)
      {
       if((false))
        {
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           return;
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             return;
            }
           while((! (! ((false || (false))))));
          }
        }
      }
     else
      {
      }
    }
  }
 if((false))
  {
   for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
    {
     do
      {
       for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != 0; _injected_loop_counter --)
        {
         if(false)
          {
          }
         else
          {
           return;
          }
        }
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  return;
 do
  {
   if((false))
    {
     if((false))
      continue;
     break;
    }
   if(true)
    {
     GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_13num_workgroupsubgroup_idsubgroup_local_idsubgroup_size.x = num_workgroup;
    }
   else
    {
    }
   if((false))
    {
     if((false))
      return;
     if((false))
      break;
     do
      {
       for(int _injected_loop_counter = (0 << (int(8))); _injected_loop_counter < ((1 << (int(5))) >> (int(5))); _injected_loop_counter ++)
        {
         if((false))
          return;
         return;
        }
      }
     while(false);
     if((false))
      break;
    }
  }
 while(((injectionSwitch.x > injectionSwitch.y)));
 for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
  {
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     do
      {
       if(true)
        {
         if(((bool(bvec3(false, false, false)))))
          break;
         for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
          {
           for(int _injected_loop_counter = 1; _injected_loop_counter > (0 ^ 0); _injected_loop_counter --)
            {
             GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_14next_virtual_gidnum_workgroupsubgroup_local_idworkgroup_base.y = GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_13num_workgroupsubgroup_idsubgroup_local_idsubgroup_size.x;
            }
          }
        }
       else
        {
        }
      }
     while(false);
    }
   else
    {
    }
  }
 if((false))
  return;
 for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < 1; _injected_loop_counter ++)
  {
   if((false))
    {
     for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
      {
       return;
      }
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 for(int _injected_loop_counter = (0 ^ int((injectionSwitch.x))); _injected_loop_counter != 1; _injected_loop_counter ++)
  {
   do
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
  }
 if(((injectionSwitch.x > injectionSwitch.y)))
  {
   if((false))
    {
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       return;
      }
     else
      {
      }
    }
  }
 else
  {
   if(((bool(bvec2(false, false)))))
    return;
  }
 if((false))
  return;
 uint workgroup_size = gl_WorkGroupSize.x;
 if((false))
  return;
 if(((bool((bvec3(bvec3(bvec3(((false) && true), false, false))))))))
  return;
 if(false)
  {
  }
 else
  {
   if(false)
    {
    }
   else
    {
     do
      {
       if(true)
        {
         for(int _injected_loop_counter = (1 & 1); _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
          {
           if((false))
            {
             do
              {
               if(((true && (false))))
                {
                 if(((injectionSwitch.x > injectionSwitch.y)))
                  {
                  }
                 else
                  {
                   if(false)
                    {
                     if((false))
                      break;
                    }
                   else
                    {
                     do
                      {
                       do
                        {
                         return;
                        }
                       while(false);
                      }
                     while(((injectionSwitch.x > injectionSwitch.y)));
                    }
                  }
                }
               if((false))
                return;
              }
             while(((injectionSwitch.x > injectionSwitch.y)));
             do
              {
               return;
              }
             while(false);
            }
           if((false))
            continue;
          }
         if((false))
          break;
         if((false))
          break;
        }
       else
        {
         if((false))
          continue;
        }
       if((false))
        break;
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
     if(false)
      {
      }
     else
      {
       if((false))
        {
         for(int _injected_loop_counter = 1; _injected_loop_counter != (0 << (int(7))); _injected_loop_counter --)
          {
           return;
          }
        }
      }
    }
  }
 if((false))
  {
   do
    {
     for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < 1; _injected_loop_counter ++)
      {
       return;
      }
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
  }
 if(((injectionSwitch.x > injectionSwitch.y)))
  {
  }
 else
  {
   do
    {
     for(int _injected_loop_counter = (0 >> ((max(int(2), int(2))))); _injected_loop_counter < 1; _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != 1; _injected_loop_counter ++)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
           if((false))
            continue;
          }
         else
          {
           if((false))
            {
             do
              {
               return;
              }
             while(((injectionSwitch.x > injectionSwitch.y)));
            }
          }
        }
      }
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
  }
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 if((false))
  return;
 for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
  {
   GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_14next_virtual_gidnum_workgroupsubgroup_local_idworkgroup_base.w = workgroup_base;
  }
 for(int _injected_loop_counter = 0; _injected_loop_counter < (((1 ^ int((injectionSwitch.x))) << (((int(1)) << 0))) >> ((clamp(int(1), int(1), int(1))))); _injected_loop_counter ++)
  {
   if((false))
    {
     if(true)
      {
       return;
      }
     else
      {
      }
    }
  }
 do
  {
   for(int _injected_loop_counter = ((1 << (int(6))) >> (int(6))); _injected_loop_counter != (0 | (0 << (int(4)))); _injected_loop_counter --)
    {
     if((false))
      {
       if(true)
        {
         do
          {
           return;
          }
         while(false);
        }
       else
        {
        }
      }
    }
  }
 while(false);
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    {
     if(true)
      {
       return;
      }
     else
      {
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   return;
  }
 uint virtual_gid = GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_14next_virtual_gidnum_workgroupsubgroup_local_idworkgroup_base.w + GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_13num_workgroupsubgroup_idsubgroup_local_idsubgroup_size.y * GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_13num_workgroupsubgroup_idsubgroup_local_idsubgroup_size.w + GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_14next_virtual_gidnum_workgroupsubgroup_local_idworkgroup_base.z;
 uint next_virtual_gid = GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_14next_virtual_gidnum_workgroupsubgroup_local_idworkgroup_base.w + GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_13num_workgroupsubgroup_idsubgroup_local_idsubgroup_size.y * GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_13num_workgroupsubgroup_idsubgroup_local_idsubgroup_size.w + ((GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_14next_virtual_gidnum_workgroupsubgroup_local_idworkgroup_base.z + 1) % GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_13num_workgroupsubgroup_idsubgroup_local_idsubgroup_size.w);
 if(((injectionSwitch.x < injectionSwitch.y)))
  {
   for(int _injected_loop_counter = 0; _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
    {
     for(int _injected_loop_counter = (1 ^ 1); _injected_loop_counter != 1; _injected_loop_counter ++)
      {
       do
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           if((false))
            {
             if((false))
              continue;
             do
              {
               if((false))
                {
                 if(((false || ((bool(bvec3(false, false, false)))))))
                  return;
                 return;
                 if((false))
                  {
                   for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
                    {
                     return;
                    }
                  }
                }
              }
             while(((injectionSwitch.x > injectionSwitch.y)));
             break;
            }
           if((false))
            break;
           for(int _injected_loop_counter = 0; _injected_loop_counter < (1 | ((true ? 0 : (- 93544)))); _injected_loop_counter ++)
            {
             GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_14next_virtual_gidnum_workgroupsubgroup_local_idworkgroup_base.x = next_virtual_gid;
             if((false))
              return;
             if((false))
              continue;
             for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
              {
               if((false))
                {
                 if(true)
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    break;
                   if(true)
                    {
                     return;
                    }
                   else
                    {
                    }
                  }
                 else
                  {
                  }
                }
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
             if((false))
              continue;
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
            }
          }
         else
          {
           if((false))
            {
             if((false))
              continue;
             continue;
            }
          }
         if((false))
          {
           do
            {
             if(true)
              {
               return;
              }
             else
              {
              }
            }
           while(false);
          }
        }
       while(false);
      }
    }
   if(((false || (false))))
    return;
  }
 else
  {
   if((false))
    return;
  }
 if((false))
  {
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
    }
   else
    {
     for(int _injected_loop_counter = 0; _injected_loop_counter != (1 & int((injectionSwitch.y))); _injected_loop_counter ++)
      {
       if(false)
        {
        }
       else
        {
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             do
              {
               return;
              }
             while(false);
            }
           return;
          }
        }
      }
    }
   for(int _injected_loop_counter = ((1 << (int(5))) >> ((~ (~ (int(5)))))); _injected_loop_counter > (0 >> (((int(2)) / 1))); _injected_loop_counter --)
    {
     for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         return;
        }
       if((false))
        continue;
      }
    }
   if((false))
    return;
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
    }
   else
    {
     if(true)
      {
       for(int _injected_loop_counter = ((1 << ((min(int(4), int(4))))) >> (int(4))); _injected_loop_counter != 0; _injected_loop_counter --)
        {
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           if((false))
            return;
           if(false)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               do
                {
                 return;
                }
               while(((injectionSwitch.x > injectionSwitch.y)));
              }
             if((false))
              continue;
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
            }
           else
            {
             do
              {
               return;
              }
             while(false);
            }
           if((false))
            return;
          }
        }
      }
     else
      {
      }
    }
  }
 if((false))
  {
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
    }
   else
    {
     return;
    }
  }
 buf[virtual_gid] = 1;
 if((false))
  {
   for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
    {
     return;
    }
  }
 if(false)
  {
   if((false))
    return;
  }
 else
  {
   for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > 0; _injected_loop_counter --)
    {
     if(GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_14next_virtual_gidnum_workgroupsubgroup_local_idworkgroup_base.z + 1 < GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_13num_workgroupsubgroup_idsubgroup_local_idsubgroup_size.w)
      {
       if((false))
        {
         if((false))
          break;
         break;
         if((false))
          break;
         if((false))
          return;
        }
       if((false))
        break;
       if((false))
        break;
       if((false))
        break;
       do
        {
         if(true)
          {
           if(true)
            {
             if(true)
              {
               do
                {
                 do
                  {
                   if((false))
                    {
                     if((false))
                      continue;
                     continue;
                    }
                   if(false)
                    {
                     if((false))
                      continue;
                    }
                   else
                    {
                     for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > 0; _injected_loop_counter --)
                      {
                       buf[GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_14next_virtual_gidnum_workgroupsubgroup_local_idworkgroup_base.x] = 2;
                      }
                     if((false))
                      continue;
                     if((false))
                      continue;
                    }
                  }
                 while(((injectionSwitch.x > injectionSwitch.y)));
                }
               while(false);
              }
             else
              {
              }
            }
           else
            {
            }
           if((false))
            break;
          }
         else
          {
          }
         if((false))
          break;
         if((false))
          continue;
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(true)
        {
         if(true)
          {
           if(true)
            {
             if(true)
              {
               for(int _injected_loop_counter = ((1 << (int(5))) >> (int(5))); _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
                {
                 do
                  {
                   do
                    {
                     if((false))
                      {
                       if((((false) || false)))
                        continue;
                       if((false))
                        continue;
                       return;
                      }
                    }
                   while(((injectionSwitch.x > injectionSwitch.y)));
                  }
                 while(((injectionSwitch.x > injectionSwitch.y)));
                }
              }
             else
              {
              }
            }
           else
            {
            }
           for(int _injected_loop_counter = ((1 << (int(7))) >> (int(7))); _injected_loop_counter > (- 15642 & (0 >> (int(5)))); _injected_loop_counter --)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               do
                {
                 return;
                }
               while(((injectionSwitch.x > injectionSwitch.y)));
              }
            }
          }
         else
          {
          }
        }
       else
        {
         if((false))
          break;
         if((false))
          {
           if(((bool(bvec3(false, false, true)))))
            break;
           break;
          }
        }
       if((((false) && true)))
        continue;
       if((false))
        return;
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         if((false))
          break;
         break;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
       if((false))
        continue;
       do
        {
         if((false || (((injectionSwitch.x > injectionSwitch.y)))))
          {
          }
         else
          {
           for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != 0; _injected_loop_counter --)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
           for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
            {
             if(true)
              {
               do
                {
                 if((false))
                  continue;
                 for(int _injected_loop_counter = 1; _injected_loop_counter > (0 | 0); _injected_loop_counter --)
                  {
                   if(((bool(bool(false)))))
                    {
                     if(true)
                      {
                       return;
                      }
                     else
                      {
                      }
                    }
                  }
                 if(true)
                  {
                   if(false)
                    {
                    }
                   else
                    {
                     if((false))
                      continue;
                     if((false))
                      break;
                     if(((injectionSwitch.x > injectionSwitch.y)))
                      {
                      }
                     else
                      {
                       if((false))
                        {
                         for(int _injected_loop_counter = (0 | (0 << (int(5)))); _injected_loop_counter != (((~ (~ (1)))) | 0); _injected_loop_counter ++)
                          {
                           for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
                            {
                             return;
                            }
                          }
                        }
                      }
                     if(true)
                      {
                       if(false)
                        {
                        }
                       else
                        {
                         subgroupAll(false);
                        }
                      }
                     else
                      {
                      }
                    }
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    break;
                  }
                 else
                  {
                   if((false))
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      continue;
                     if((false))
                      {
                       if(((false || (false))))
                        {
                         if(false)
                          {
                          }
                         else
                          {
                           return;
                          }
                        }
                       break;
                      }
                     continue;
                    }
                  }
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if((false))
                    break;
                   break;
                  }
                }
               while(false);
              }
             else
              {
              }
            }
          }
        }
       while((bool(bvec2(false, false))));
      }
     else
      {
       if(((false || (false))))
        break;
       if((false))
        return;
       if(true)
        {
         if((false))
          continue;
         if(true)
          {
           buf[GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_14next_virtual_gidnum_workgroupsubgroup_local_idworkgroup_base.x] = 2;
          }
         else
          {
          }
         if((false))
          continue;
         if((false))
          continue;
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
            {
             if(true)
              {
               return;
               if((((true && (bool(bvec2(false, false)))))))
                continue;
               if(true)
                {
                 if(((injectionSwitch.x > injectionSwitch.y)))
                  {
                  }
                 else
                  {
                   for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
                    {
                     if((bool(bvec2(true, false))))
                      {
                       if((false))
                        return;
                      }
                     else
                      {
                      }
                    }
                   if(((bool(bvec4(((injectionSwitch.x > injectionSwitch.y)), false, false, false)))))
                    break;
                  }
                }
               else
                {
                }
              }
             else
              {
              }
            }
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          break;
         continue;
        }
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         if((false))
          continue;
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
           if((false))
            continue;
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              break;
             break;
             if((false))
              break;
            }
          }
         else
          {
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             do
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 continue;
                }
               if((bool(bool(true))))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 if((bool(bool(true))))
                  {
                   do
                    {
                     for(int _injected_loop_counter = ((true ? 1 : (24694))); _injected_loop_counter > 0; _injected_loop_counter --)
                      {
                       for(int _injected_loop_counter = 1; _injected_loop_counter > (0 >> (((((int(4)) - 0)) | (int(4))))); _injected_loop_counter --)
                        {
                         if(true)
                          {
                           if((((injectionSwitch.x > injectionSwitch.y))))
                            return;
                           if((false))
                            continue;
                           if((false))
                            {
                             if((((injectionSwitch.x > injectionSwitch.y))))
                              {
                               if((false))
                                break;
                               if((false))
                                continue;
                               if(((injectionSwitch.x < injectionSwitch.y)))
                                {
                                 if((false))
                                  break;
                                 for(int _injected_loop_counter = (1 & 1); _injected_loop_counter > 0; _injected_loop_counter --)
                                  {
                                   for(int _injected_loop_counter = (0 << (((int(4)) / 1))); _injected_loop_counter != 1; _injected_loop_counter ++)
                                    {
                                     for(int _injected_loop_counter = ((1 << (int(2))) >> (int(2))); _injected_loop_counter != 0; _injected_loop_counter --)
                                      {
                                       if((((false) && true)))
                                        {
                                         for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != 1; _injected_loop_counter ++)
                                          {
                                           return;
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                               else
                                {
                                }
                               continue;
                              }
                             if(((injectionSwitch.x > injectionSwitch.y)))
                              {
                               if((false))
                                break;
                               if((false))
                                break;
                              }
                             else
                              {
                               if((false))
                                break;
                               if((false))
                                {
                                 if((false))
                                  break;
                                 continue;
                                }
                               if((false))
                                {
                                 if((false))
                                  return;
                                 break;
                                }
                               if((false))
                                continue;
                               if((((injectionSwitch.x > injectionSwitch.y))))
                                break;
                               return;
                               if((false))
                                break;
                              }
                             if((false))
                              continue;
                             if((((injectionSwitch.x > injectionSwitch.y))))
                              continue;
                            }
                           if((false))
                            continue;
                          }
                         else
                          {
                           if((false))
                            continue;
                          }
                         for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
                          {
                           do
                            {
                             if(false)
                              {
                              }
                             else
                              {
                               for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
                                {
                                 for(int _injected_loop_counter = (- 76440 & int((injectionSwitch.x))); _injected_loop_counter != ((1 << (int(3))) >> (int(3))); _injected_loop_counter ++)
                                  {
                                   if(false)
                                    {
                                    }
                                   else
                                    {
                                     for(int _injected_loop_counter = ((int((injectionSwitch.y))) / 1); _injected_loop_counter > 0; _injected_loop_counter --)
                                      {
                                       subgroupAll(true);
                                      }
                                    }
                                  }
                                }
                              }
                            }
                           while(false);
                          }
                         if((false))
                          break;
                        }
                       if((false))
                        continue;
                      }
                    }
                   while(((injectionSwitch.x > injectionSwitch.y)));
                  }
                 else
                  {
                   if((false))
                    continue;
                  }
                }
               else
                {
                 if((false))
                  {
                   if((false))
                    break;
                   break;
                  }
                 if((false))
                  break;
                 if((false))
                  {
                   if(((injectionSwitch.x > injectionSwitch.y)))
                    {
                    }
                   else
                    {
                     if(((injectionSwitch.x < injectionSwitch.y)))
                      {
                       if(true)
                        {
                         for(int _injected_loop_counter = ((true ? ((1) | 0) : (49744))); _injected_loop_counter != 0; _injected_loop_counter --)
                          {
                           return;
                          }
                        }
                       else
                        {
                        }
                      }
                     else
                      {
                       if(((injectionSwitch.x < injectionSwitch.y)))
                        {
                         if(((injectionSwitch.x < injectionSwitch.y)))
                          {
                           if((false))
                            return;
                          }
                         else
                          {
                          }
                        }
                       else
                        {
                        }
                      }
                    }
                   if((false))
                    continue;
                   if((false))
                    continue;
                  }
                }
              }
             while(false);
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
            }
           else
            {
            }
          }
        }
       if((false))
        continue;
       if(true)
        {
         if((false))
          {
           if(false)
            {
             if((false))
              return;
            }
           else
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             if(true)
              {
               if((false))
                {
                 for(int _injected_loop_counter = 0; _injected_loop_counter < ((1 << (int(6))) >> (int(6))); _injected_loop_counter ++)
                  {
                   do
                    {
                     do
                      {
                       return;
                      }
                     while(false);
                     if((false))
                      {
                       if((false))
                        continue;
                       return;
                      }
                     if((((false) && true)))
                      return;
                     if((false))
                      {
                       if(((bool(bool(false)))))
                        {
                         if(false)
                          {
                          }
                         else
                          {
                           return;
                          }
                        }
                       continue;
                      }
                     if((false))
                      return;
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      continue;
                     if(((! (! (false)))))
                      return;
                    }
                   while((false || (false)));
                  }
                }
               if((false))
                continue;
              }
             else
              {
              }
             if((false))
              return;
             do
              {
               if((false))
                return;
              }
             while(((injectionSwitch.x > injectionSwitch.y)));
             if((false))
              break;
            }
           break;
          }
         if((false))
          {
           if(true)
            {
             if((false))
              {
               if((false))
                continue;
               return;
              }
            }
           else
            {
            }
           break;
          }
         if((false || (true)))
          {
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             do
              {
               do
                {
                 if(false)
                  {
                   if(false)
                    {
                    }
                   else
                    {
                     if((false))
                      return;
                    }
                   if((false))
                    break;
                   if((false))
                    return;
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    return;
                  }
                 else
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    break;
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    {
                     do
                      {
                       return;
                      }
                     while(false);
                    }
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      break;
                     return;
                    }
                   if((false))
                    break;
                  }
                }
               while(false);
              }
             while(((injectionSwitch.x > injectionSwitch.y)));
            }
          }
         else
          {
          }
         for(int _injected_loop_counter = (0 & - 27432); _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
          {
           if((false))
            {
             for(int _injected_loop_counter = (1 & 1); _injected_loop_counter != 0; _injected_loop_counter --)
              {
               if(false)
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  return;
                 if((false))
                  break;
                }
               else
                {
                 for(int _injected_loop_counter = 0; _injected_loop_counter < (1 & 1); _injected_loop_counter ++)
                  {
                   return;
                   if((false))
                    continue;
                  }
                 if((false))
                  {
                   if(true)
                    {
                     return;
                    }
                   else
                    {
                    }
                  }
                }
              }
             if((false))
              return;
             if(((true && (false))))
              return;
            }
          }
         if((false))
          {
           if(false)
            {
             if((false))
              {
               if((false))
                continue;
               continue;
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
            }
           else
            {
             if(false)
              {
              }
             else
              {
               for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
                {
                 if((false))
                  {
                   for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
                    {
                     if(((injectionSwitch.x > injectionSwitch.y)))
                      {
                      }
                     else
                      {
                       if((false))
                        {
                         if((false))
                          {
                           do
                            {
                             return;
                            }
                           while(((injectionSwitch.x > injectionSwitch.y)));
                          }
                         if((false))
                          return;
                         break;
                        }
                       return;
                       if((false))
                        {
                         for(int _injected_loop_counter = 1; _injected_loop_counter != (0 ^ 0); _injected_loop_counter --)
                          {
                           for(int _injected_loop_counter = ((1 << (((((int(5)) | (int(5)))) >> 0))) >> (int(5))); _injected_loop_counter > 0; _injected_loop_counter --)
                            {
                             if((false))
                              {
                               for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                                {
                                 return;
                                }
                              }
                            }
                           if((((injectionSwitch.x > injectionSwitch.y))))
                            break;
                           return;
                          }
                        }
                      }
                     for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != 0; _injected_loop_counter --)
                      {
                       if((false))
                        return;
                      }
                    }
                  }
                }
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
            }
           break;
          }
        }
       else
        {
        }
       if((false))
        continue;
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         break;
        }
      }
    }
  }
 if((false))
  {
   if((true && (((injectionSwitch.x > injectionSwitch.y)))))
    {
    }
   else
    {
     if((false))
      return;
    }
   return;
  }
 if((false))
  {
   do
    {
     return;
    }
   while(((((injectionSwitch.x > injectionSwitch.y))) && true));
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
