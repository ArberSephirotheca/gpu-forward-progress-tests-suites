#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if((false))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(((((true && ((vec2((min(injectionSwitch, injectionSwitch))[0], injectionSwitch[1])).x > injectionSwitch.y))))))
  {
   if(((((bool(bvec4(bool((bvec3(bvec3(bvec3((injectionSwitch.x > injectionSwitch.y), false, ((injectionSwitch.x > injectionSwitch.y))))))), true, false, false)))))))
    return;
   return;
  }
 uint num_workgroup = ((gl_NumWorkGroups.x) << (0u >> (uint(0u))));
 if((((! ((bool(bvec4(! ((false || (((vec2(mat2x4(injectionSwitch, 1.0, ((0.0) / (injectionSwitch.y)), 1.0, 1.0, (injectionSwitch.x), 0.0))).x > injectionSwitch.y)))), false, false, false))))))))
  {
   if((false))
    return;
   return;
  }
 uint workgroup_size = ((~ (~ ((gl_WorkGroupSize)))) * (~ (~ (((uvec3(1u, 1u, 1u) << (((((uvec3(1u))) | ((uvec3(1u))))) - uvec3(0u, 0u, 0u))) >> ((uvec3(0u, 0u, (clamp((clamp(0u, 0u, 0u)), 0u, 0u))) | ((max((min(uvec3(1u), ((uvec3(1u)) ^ uvec3((0u | (0u)), 0u, (((min(0u, 0u))) | (((0u) | (0u)))))))), uvec3(1u))))))))))).x;
 if(((((vec2(mat2x4(injectionSwitch, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))).x > injectionSwitch.y))))
  return;
 if(((bool(bool((! (! (((false || (false)) || (false))))))))))
  return;
 if((false))
  {
   if((((((injectionSwitch.x > injectionSwitch.y)) || false))))
    return;
   return;
  }
 if((false))
  return;
 if((false))
  return;
 uint workgroup_id = (((((uint((max(((min(((uvec2(uvec2(uvec2(gl_WorkGroupID.x, 0u)))) / uvec2(1u, 1u)), ((((uvec2(uvec2(uvec2(gl_WorkGroupID.x, 0u)))) / uvec2(1u, 1u))) * uvec2(1u, 1u))))), (((uvec2(uvec2(uvec2(gl_WorkGroupID.x, 0u)))) / uvec2(1u, 1u))))))) | 0u))) ^ 0u);
 if((((((true && (((((mat2(1.0) * ((min(injectionSwitch, injectionSwitch)))).x < injectionSwitch.y)) && ((injectionSwitch.x > injectionSwitch.y))) || false)))))))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if(((((bool(bvec4((float(mat2x4((((float((mat2x3(mat2x3(((((false) && ((injectionSwitch.x < injectionSwitch.y))) ? (mat2x3(- 597.862, 7051.5160, 7.6, 279.513, - 3.0, 2.2)) : mat2x3((min(injectionSwitch.x, injectionSwitch.x)), sin(0.0), 1.0, cos((mix(float(0.0), float((8.0)), bool(((injectionSwitch.x > injectionSwitch.y)))))), abs(((1.0) - 0.0)), 1.0)))))))) - 0.0)), 0.0, log((((min(1.0, 1.0))) - 0.0)), (dot(vec3(0.0, 1.0, 0.0), vec3(0.0, ((float(mat2x4(injectionSwitch.y, 0.0, 0.0, 1.0, sin(0.0), 1.0, 1.0, 1.0)))), 0.0))), (clamp(0.0, (clamp(0.0, 0.0, (float(vec3(0.0, 1.0, 0.0))))), 0.0)), tan(determinant(mat2(0.0, (min(0.0, 0.0)), 1.0, 0.0))), 1.0, 0.0))) > ((((true ? ((injectionSwitch) * mat2(1.0)) : (injectionSwitch)))) / vec2(1.0, (((clamp(1.0, 1.0, 1.0))) / ((((true ? ((true ? 1.0 : (- 9559.3834))) : (- 5.7)))) / 1.0)))).y, true, false, ((injectionSwitch.x > injectionSwitch.y)))))))))
  {
   if((false))
    return;
   return;
  }
 if((false))
  return;
 uint workgroup_base = (0u + (workgroup_size * workgroup_id));
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + (min((uint(uvec2(subgroup_local_id, 1u))), (0u ^ (subgroup_local_id))));
 if((false))
  return;
 uint next_virtual_gid = (min(workgroup_base, workgroup_base)) + ((((injectionSwitch.x < ((injectionSwitch) / cos(vec2(0.0, (determinant(mat2(1.0, 0.0, 1.0, exp(0.0))) * (0.0))))).y)) ? (0u | ((((uint(uvec3(subgroup_id, 1u, 0u)))) | (subgroup_id)))) : (min((((workgroup_id)) / 1u), ((((false) && true) ? (((workgroup_id)) << 0u) : (workgroup_id))))))) * subgroup_size + ((((subgroup_local_id + (~ (~ (1))))) / (uint(uvec3(1u, (0u ^ 1u), 1u)))) % subgroup_size);
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    return;
   return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if((((true && ((((! ((false || ((! (((! (! ((! (! ((((injectionSwitch.x > injectionSwitch.y))))))))) || false))))))))) && (true && (true)))) || false)))
  {
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    return;
   return;
  }
 if((! (! ((((! (! (((! (! (true && ((false))))))))))) && true))))
  {
   if((false))
    return;
   if((false))
    return;
   if((((((! (! ((injectionSwitch.x > injectionSwitch.y)))))) && true)))
    return;
   return;
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
  }
 buf[virtual_gid] = (~ (~ (1)));
 if((false))
  return;
 if((((false) || false)))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(((((! ((! (! (! ((true && (((vec2(vec3(injectionSwitch, 1.0))).x < injectionSwitch.y)))))))))) && (false))))
  {
   if((((false) || false)))
    return;
   return;
  }
 if((false))
  {
   if((false))
    return;
   return;
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(((((mix(vec2((- 236.272), (injectionSwitch)[1]), vec2(((true ? (injectionSwitch)[0] : (- 7.1))), (40.92)), bvec2(((injectionSwitch.x < injectionSwitch.y)), (! (! (false)))))).x > injectionSwitch.y))))
  return;
 if(((((min(injectionSwitch, ((min(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch)))))).x > injectionSwitch.y))))
  return;
 if(((subgroup_local_id) >> (((~ (~ ((max(((0u) | (0u)), 0u))))) & 176600u) | 0u)) + 1 < subgroup_size)
  {
   if((false))
    return;
   buf[next_virtual_gid] = 2;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   subgroupAll(false);
   if((false))
    return;
   if((false))
    return;
   if((false))
    {
     if((false))
      return;
     if(((false || (((false) || false)))))
      return;
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     return;
     if((false))
      return;
     if((false))
      return;
     if((false))
      return;
    }
   if(((! (! ((! ((bool(bvec4(! (false), false, false, true))))))))))
    return;
   if((false))
    {
     if((false))
      return;
     return;
    }
   if(((true && (false))))
    return;
  }
 else
  {
   buf[next_virtual_gid] = 2;
   if((false))
    return;
   subgroupAll(true);
  }
 if((((bool(((bvec3(bvec4(bvec3(bvec4(bvec3((! (! ((bool((bvec2(bvec3(bvec2((false || ((((injectionSwitch.x > (vec2(mat4x2((max(((false ? (vec2(350.081, - 5.9)) : ((false ? (injectionSwitch) : injectionSwitch)))), ((false ? (injectionSwitch) : injectionSwitch)))), 1.0, 0.0, (min((min((max(log(1.0), log(1.0))), log(1.0))), log(1.0))), round(length((min(normalize(vec2(1.0, 1.0)), normalize(vec2(1.0, 1.0)))))), 0.0, 0.0))).y) && true)))), true), false)))))))), true, true), true)), false)))))))))
  {
   if((false))
    {
     if(((! (! (false)))))
      return;
     if((false))
      {
       if((false))
        return;
       return;
      }
     if((false))
      return;
     return;
     if(((! (! (false)))))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(((((true && (bool(bvec4(false || ((! (! (false)))), false, true, false))))))))
        return;
       return;
      }
    }
   return;
   if((false))
    {
     if(((((((mix(float(injectionSwitch.x), float((9604.2415)), bool(false)))) + 0.0) > injectionSwitch.y))))
      return;
     return;
    }
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
