#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = (clamp(gl_NumWorkGroups.x, gl_NumWorkGroups.x, gl_NumWorkGroups.x));
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = (clamp(workgroup_base, workgroup_base, ((false ? (111411u) : workgroup_base)))) + subgroup_id * ((false ? (num_workgroup) : subgroup_size)) + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_id * ((subgroup_size) << (uint((injectionSwitch.x)) ^ 0u)) + (min((((uint(uvec2(((min((clamp(uint(((uvec2(subgroup_local_id, ((1u << (uint(3u))) >> (max((uint(3u)), (uint((0u ^ (((142031u & 0u) ^ (3u))))))))))) ^ uvec2((clamp(0u, 0u, 0u)), 0u))), uint(((uvec2(subgroup_local_id, ((((((1u) << (((0u | (0u))) - 0u)) << (uint(3u)))) >> 0u) >> ((clamp((uint((0u + (uint(uint(uvec3((uint(3u)), 0u, 0u))))))), uint(uvec3((uint(3u)), 0u, 0u)), uint(uvec3((uint(3u)), 0u, 0u)))))))) ^ uvec2(0u, 0u))), uint(((((((uvec2(subgroup_local_id, ((1u << ((clamp(uint(3u), uint(3u), uint(3u))))) >> (uint(3u))))) ^ uvec2(0u, 0u)) | uvec2(0u, 0u)))) >> uvec2(0u, 0u))))), (clamp(uint(((uvec2(subgroup_local_id, ((1u << (uint(3u))) >> (max((uint(3u)), (uint((0u ^ (((142031u & 0u) ^ (3u))))))))))) ^ uvec2((clamp(0u, 0u, 0u)), 0u))), uint(((uvec2(subgroup_local_id, ((((((1u) << (((0u | (0u))) - 0u)) << (uint(3u)))) >> 0u) >> ((clamp((uint((0u + (uint(uint(uvec3((uint(3u)), 0u, 0u))))))), uint(uvec3((uint(3u)), 0u, 0u)), uint(uvec3((uint(3u)), 0u, 0u)))))))) ^ uvec2(0u, 0u))), uint(((((((uvec2(subgroup_local_id, ((1u << ((clamp(uint(3u), uint(3u), uint(3u))))) >> (uint(3u))))) ^ uvec2(0u, 0u)) | uvec2(0u, 0u)))) >> uvec2(0u, 0u)))))))), 1u))) + 1) % subgroup_size), (((uint(uvec2(((clamp(uint(((uvec2((~ (~ (subgroup_local_id))), ((1u << (uint(3u))) >> (max((uint(3u)), (uint((0u ^ (((142031u & 0u) ^ (3u))))))))))) ^ (~ (((true ? ~ (((uvec2((clamp(0u, 0u, 0u)), 0u)) ^ uvec2(0u, 0u))) : (uvec2(111750u, 32154u)))))))), uint(((uvec2(subgroup_local_id, (((((clamp((clamp(uint((1u * ((0u ^ (uint((((1u) << (((0u | (((0u) / 1u)))) - 0u)) << (uint(3u))))))))), uint((1u * ((0u ^ (uint((((1u) << (((0u | (((0u) / 1u)))) - 0u)) << (uint(3u))))))))), uint((1u * ((0u ^ (uint((((1u) << (((0u | (((0u) / 1u)))) - 0u)) << (uint(3u))))))))))), uint((1u * ((0u ^ (uint((((1u) << (((0u | (((0u) / 1u)))) - 0u)) << (uint(3u))))))))), uint((1u * ((0u ^ (uint((((1u) << (((0u | (((0u) / 1u)))) - 0u)) << (uint(3u))))))))))))) >> 0u) >> (max(((clamp((uint((0u + (uint(uint(uvec3((uint(3u)), 0u, 0u))))))), uint(uvec3((uint(3u)), 0u, 0u)), uint(uvec3((uint(3u)), 0u, 0u))))), ((clamp((uint((0u + (uint(uint(uvec3((uint(3u)), 0u, 0u))))))), uint(uvec3((uint(3u)), 0u, 0u)), uint(uvec3((uint(3u)), 0u, 0u)))))))))) ^ uvec2(0u, 0u))), uint(((((((uvec2(subgroup_local_id, ((1u << ((clamp(uint(3u), uint(3u), uint(3u))))) >> (uint(3u))))) ^ uvec2(0u, ((false ? (subgroup_size) : 0u)))) | uvec2(0u, 0u)))) >> uvec2(0u, 0u)))))), 1u))) + 1) % subgroup_size)));
 do
  {
   if(false)
    {
    }
   else
    {
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if(((false || (bool(bvec4((true && (false)), true, ((injectionSwitch.x < injectionSwitch.y)), true))))))
        {
        }
       else
        {
         for(int _injected_loop_counter = 1; (bool(bvec4((bool(bvec3(_injected_loop_counter != 0, true, true))), (bool(bvec4(true, false, (bool(bool(true))), true))), (((! ((bool(bvec2(! ((! (! (((true ? injectionSwitch : (vec2(- 9250.5028, 821.279)))).x > injectionSwitch.y)))), true))))))), false))); _injected_loop_counter --)
          {
           do
            {
             buf[virtual_gid] = 1;
            }
           while(false);
          }
        }
      }
     else
      {
      }
    }
  }
 while(((((injectionSwitch.x > injectionSwitch.y))) && ((injectionSwitch.x < injectionSwitch.y))));
 if(((subgroup_local_id) | (subgroup_local_id)) + 1 < subgroup_size)
  {
   for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < 1; _injected_loop_counter ++)
    {
     buf[next_virtual_gid] = 2;
    }
   if(false)
    {
    }
   else
    {
     subgroupAll(false);
    }
  }
 else
  {
   do
    {
     for(int _injected_loop_counter = 0; _injected_loop_counter < ((int((injectionSwitch.y)) << (int(1))) >> (int(1))); _injected_loop_counter ++)
      {
       do
        {
         do
          {
           do
            {
             if(true)
              {
               do
                {
                 if(false)
                  {
                  }
                 else
                  {
                   buf[next_virtual_gid] = 2;
                  }
                }
               while((! (! (false))));
              }
             else
              {
              }
            }
           while(false);
          }
         while((true && ((! (! ((! (! (false)))))))));
        }
       while(false);
      }
    }
   while((! (! ((! ((false || ((bool(bvec4(! (false), true, true, false)))))))))));
   for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
    {
     subgroupAll(true);
    }
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
