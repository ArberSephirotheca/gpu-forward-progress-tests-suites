#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((false))
  return;
 uint subgroup_id = gl_SubgroupID;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((((injectionSwitch.x > (clamp(injectionSwitch.y, (clamp(injectionSwitch.y, injectionSwitch.y, (float(mat4x3(injectionSwitch.y, ((dot(vec3(round((float(mat4x2(length(normalize(vec4((max((clamp(1.0, 1.0, 1.0)), 1.0)), 1.0, 1.0, 1.0))), (dot(vec3(1.0, 0.0, 0.0), (vec3(mat3x4(vec3(0.0, 1.0, abs(1.0)), 1.0, 0.0, 1.0, 0.0, 0.0, cos(0.0), 0.0, 0.0, 0.0))))), 0.0, 0.0, 0.0, 0.0, abs(0.0), log(1.0))))), (dot(vec2(0.0, (clamp(((true ? 1.0 : (- 755.015))), 1.0, 1.0))), vec2(1.0, 0.0))), 0.0), vec3(1.0, 0.0, 0.0))) * (max((0.0), (0.0)))), 1.0, exp(sqrt(0.0)), 1.0, (max(1.0, 1.0)), 0.0, 0.0, (injectionSwitch.y), 1.0, (mix(float((63.77)), ((true ? float(determinant(mat2(0.0, 0.0, (0.0 + (((true ? 1.0 : (determinant(mat3(- 1.8, 2482.8424, - 47.02, 1.9, - 3963.1690, 9.0, - 848.264, - 65.74, 6.3))))))), 0.0))) : (51.01))), bool(true))), 0.0))))), injectionSwitch.y))))))
  {
   if((false))
    {
     if((false))
      return;
     return;
    }
   if((false))
    return;
   return;
   if((false))
    return;
   if((false))
    {
     if((false))
      return;
     return;
    }
  }
 if((false))
  return;
 if(((((bool(bvec2(injectionSwitch.x > injectionSwitch.y, (((abs(sin(0.0)) + ((mix(float(injectionSwitch.x), float((- 5.1)), bool(false))))) < injectionSwitch.y)))))))))
  return;
 uint subgroup_size = gl_SubgroupSize;
 if((false))
  {
   if((false))
    return;
   return;
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(((bool(bvec2((! ((false || (! ((true && (false))))))), true)))))
  return;
 if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if((false))
  return;
 if((! (! ((false)))))
  {
   if((false))
    {
     if((false))
      return;
     return;
    }
   if((false))
    return;
   return;
  }
 if((false))
  return;
 if((false))
  {
   if((false))
    return;
   if((false))
    return;
   return;
  }
 if((false))
  {
   if((false))
    return;
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if(((true && (false))))
    return;
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if(((((float(mat3x4(injectionSwitch.x, (mix(float((8.3)), float((min((dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), (dot(vec2(0.0, 1.0), vec2(0.0, 1.0)))))), bool(((true) && true)))), 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0))) > injectionSwitch.y))))
      return;
     return;
     if((false))
      return;
    }
   if((false))
    return;
   if((false))
    return;
   if((((injectionSwitch.x > (vec2(1.0, 1.0) * (injectionSwitch)).y))))
    return;
   return;
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if((! (! ((! (! (((((bool(bvec3((bool(bool((! (! (bool((bvec3(bvec3((bvec3(bvec3(bvec3((((((injectionSwitch.x) / 1.0) > injectionSwitch.y))), ((injectionSwitch.x > injectionSwitch.y)), true)))))))))))))), false, false)))) && true)))))))))
  {
   if((! (! (((false || ((((! ((((injectionSwitch.x > injectionSwitch.y)) || ((! (! (! ((mix(float((- 8.7)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y)))))))))))))))))
    {
     if((false))
      return;
     return;
    }
   if((false))
    return;
   return;
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = (0u | ((false ? (num_workgroup) : (workgroup_base + subgroup_id * subgroup_size)))) + subgroup_local_id;
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     if((false))
      return;
     return;
    }
   if(((false || (false))))
    return;
   return;
  }
 if((false))
  {
   if((false))
    return;
   if((false))
    return;
   if((false))
    return;
   return;
  }
 if((false))
  {
   if((((injectionSwitch.x > (mix(float((- 824.149)), float(injectionSwitch.y), bool(((injectionSwitch.x < injectionSwitch.y)))))))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      return;
     return;
    }
   return;
   if((false))
    return;
  }
 if((false))
  {
   if((false))
    return;
   return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    {
     if(((((min((clamp(injectionSwitch, injectionSwitch, injectionSwitch)), ((injectionSwitch) - vec2(0.0, 0.0)))).x > injectionSwitch.y))))
      return;
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        return;
       return;
      }
     if((false))
      return;
     if((false))
      return;
     return;
     if((false))
      return;
    }
  }
 if((false))
  return;
 uint next_virtual_gid = (~ (((~ (((((false ? (virtual_gid) : workgroup_base + subgroup_id * subgroup_size))) >> 0u)))) | ((0u ^ ((~ (((((false ? (virtual_gid) : workgroup_base + subgroup_id * subgroup_size))) >> 0u)))))))) + ((((((((subgroup_local_id + 1) % (uint(uvec2(subgroup_size, 0u)))) - 0u)) | ((subgroup_local_id + 1) % (uint(uvec2(subgroup_size, 0u))))))) << 0u);
 if((false))
  return;
 ((buf[virtual_gid] = 1) - 0u);
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    return;
   return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     return;
    }
  }
 if((false))
  return;
 if((((bool(bvec4(! (! (false)), false, ((((injectionSwitch) * mat2(1.0)).x < injectionSwitch.y)), true))))))
  {
   if((false))
    return;
   if(((bool(bvec4((((false || ((false || ((! (! (injectionSwitch.x > ((((injectionSwitch.y) - 0.0)) - 0.0)))))))))), false, true, false)))))
    {
     if(((bool(bool((((((vec2(injectionSwitch[0], ((true ? injectionSwitch[1] : ((- - 67.85)))))).x > (float(mat2x3(injectionSwitch.y, (dot(vec2((injectionSwitch.y), 0.0), vec2(1.0, 0.0))), 0.0, 0.0, 0.0, 1.0)))))) || ((true && ((false) || false)))))))))
      return;
     if((((injectionSwitch.x > (clamp((clamp((vec2(vec2((min(injectionSwitch, injectionSwitch))))), (vec2(vec2((min(injectionSwitch, injectionSwitch))))), (vec2(vec2((min(injectionSwitch, injectionSwitch))))))), (clamp((vec2(vec2((min(injectionSwitch, injectionSwitch))))), (vec2(vec2((min(injectionSwitch, injectionSwitch))))), (vec2(vec2((min(injectionSwitch, injectionSwitch))))))), (clamp((vec2(vec2((min(injectionSwitch, injectionSwitch))))), (vec2(vec2((min(injectionSwitch, injectionSwitch))))), (vec2(vec2((min(injectionSwitch, injectionSwitch))))))))).y))))
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
       return;
      }
     return;
    }
   return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    return;
  }
 if((((injectionSwitch.x > (vec2(injectionSwitch[0], injectionSwitch[1])).y))))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if(((true && (false))))
  {
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    return;
   return;
  }
 if((((((injectionSwitch.x > injectionSwitch.y) && true)))))
  {
   if((false))
    {
     if((false))
      {
       if((false))
        return;
       return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if((false))
      return;
     return;
    }
   return;
  }
 if((false))
  return;
 if(subgroup_local_id + 1 < ((subgroup_size) << 0u))
  {
   if(((((mix((mix(float((- 685.988)), float(float((- 730.514))), bool(true))), (mix(float(float((vec2(mat3(injectionSwitch, 0.0, determinant(mat2(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 1.0)), 1.0, 1.0, 1.0, 1.0, sin(0.0)))).x)), float(((+ (- - 74.42)))), bool(false))), bool(true))) > injectionSwitch.y))))
    return;
   buf[next_virtual_gid] = 2;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    {
     if((false))
      return;
     return;
    }
   if((((((((injectionSwitch.x > injectionSwitch.y)) && true)) || false))))
    {
     if((false))
      return;
     return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   subgroupAll((true && ((((bool((bool(bool(bool(bool(bvec4(! (((! ((false || (false)))) || false)), true, ((injectionSwitch.x < injectionSwitch.y)), false)))))))))))));
   if((false))
    {
     if((false))
      {
       if((false))
        return;
       return;
      }
     if((false))
      return;
     return;
    }
   if((false))
    {
     if((false))
      {
       if((false))
        return;
       return;
      }
     return;
     if((false))
      return;
    }
   if((false))
    return;
  }
 else
  {
   if(((((min(injectionSwitch.x, ((max(float((max(((vec4(injectionSwitch.x, 1.0, 0.0, abs(1.0))) / vec4(1.0, 1.0, 1.0, 1.0)), vec4(injectionSwitch.x, 1.0, 0.0, abs(1.0))))), float(vec4(injectionSwitch.x, 1.0, 0.0, abs(1.0)))))))) > injectionSwitch.y))))
    return;
   if(((bool(bvec4(((injectionSwitch.x > injectionSwitch.y)), true, ((injectionSwitch.x > injectionSwitch.y)), true)))))
    return;
   if(((((vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
    return;
   if((false))
    return;
   if(((((((((true && (((! (! (((vec2(((((injectionSwitch.x < injectionSwitch.y)) ? 0.0 : (3.2))), 0.0) + (injectionSwitch)).x > injectionSwitch.y))))))) || ((injectionSwitch.x > injectionSwitch.y)))) && true)) || false))))
    {
     if((((((min(((mix(vec2((float(- 61858)), (- 979.769)), vec2((false ? ((vec2(- 0.9, 4.8) + pow(154.689, 1968.8645))) : (max((clamp(injectionSwitch, injectionSwitch, injectionSwitch)), (max(injectionSwitch, injectionSwitch)))))[0], (false ? ((vec2(- 0.9, 4.8) + pow(154.689, 1968.8645))) : (max((clamp(injectionSwitch, injectionSwitch, injectionSwitch)), (max(injectionSwitch, injectionSwitch)))))[1]), bvec2(true, true)))), ((mix(vec2((float(- 61858)), (- 979.769)), vec2((false ? ((vec2(- 0.9, 4.8) + pow(154.689, 1968.8645))) : (max((clamp(injectionSwitch, injectionSwitch, injectionSwitch)), (max(injectionSwitch, injectionSwitch)))))[0], (false ? ((vec2(- 0.9, 4.8) + pow(154.689, 1968.8645))) : (max((clamp(injectionSwitch, injectionSwitch, injectionSwitch)), (max(injectionSwitch, injectionSwitch)))))[1]), bvec2(true, true))))))).x > (vec2(((((injectionSwitch[0]) - 0.0)) * round(length(normalize(1.0)))), injectionSwitch[1])).y))))
      return;
     if((! ((((false || ((((false || (! ((false))))) || false))))) && true)))
      {
       if((false))
        return;
       return;
      }
     if((bool((bvec3(bvec3(bvec3(((((bool(bvec4(bool(bvec4(bool(bool((((bool(bvec4((! ((true && (! (bool(bvec2((false), false))))))), false, false, false)))) || false))), true, false, true)), true, false, false)))))), ((injectionSwitch.x > injectionSwitch.y)), true)))))))
      {
       if((! (! ((false)))))
        return;
       return;
      }
     return;
    }
   buf[next_virtual_gid] = 2;
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    return;
   if((false))
    return;
   if((false))
    return;
   subgroupAll(true);
   if((false || ((! (! ((false)))))))
    return;
  }
 if((false))
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   return;
   if((false))
    return;
  }
 if(((bool(bvec4((! (((! (false)) && (bool(bvec2(true, ((injectionSwitch.x > injectionSwitch.y)))))))), ((injectionSwitch.x > injectionSwitch.y)), true, true)))))
  {
   if((false))
    return;
   return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  {
   if((false))
    return;
   return;
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
