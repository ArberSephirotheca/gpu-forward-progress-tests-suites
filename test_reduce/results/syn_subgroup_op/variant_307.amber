#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((((((((injectionSwitch.x < injectionSwitch.y)) ? (((min((vec2(0.0, 0.0) + ((vec2(injectionSwitch[0], (clamp(injectionSwitch, injectionSwitch, (((((injectionSwitch.x < injectionSwitch.y)) && ((! (! (((false) || false)))))) ? (vec2(714.194, 3909.0321)) : injectionSwitch))))[1])))), (vec2(injectionSwitch[0], (clamp(injectionSwitch, injectionSwitch, (vec2(((((mat4x3(((false ? (vec2(714.194, 3909.0321)) : injectionSwitch)), 0.0, 1.0, 0.0, abs(0.0), cos(0.0), 0.0, 1.0, 0.0, 1.0, 0.0)) * mat4(1.0))) + mat4x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))))[1]))))) / vec2(1.0, 1.0)) : (injectionSwitch))).x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   do
    {
     barrier();
    }
   while(((true && (bool(bvec2((! (! (false))), ((! (! ((injectionSwitch.x > injectionSwitch.y)))))))))));
  }
 if((false))
  {
   if(false)
    {
    }
   else
    {
     barrier();
    }
  }
 if((((false) || false)))
  {
   if(((false || (bool(bvec3((false), false, false))))))
    barrier();
   if(((((clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
    barrier();
   barrier();
   if((((bool(bool((injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
  }
 for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 if((((injectionSwitch.x > (mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2((- 1.9), (- 5.0)), bvec2(false, false))).y))))
  {
   if((false))
    {
     do
      {
       barrier();
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
    }
   if((false))
    barrier();
   if((bool(bvec3((((false) || false)), true, false))))
    {
     if((false))
      barrier();
     if((false))
      barrier();
     if(((((injectionSwitch.x < injectionSwitch.y) && true))))
      {
       barrier();
      }
     else
      {
      }
    }
   barrier();
  }
 uint subgroup_size = gl_SubgroupSize;
 if(((false || ((((clamp(injectionSwitch, (vec2(1.0, 1.0) * (injectionSwitch)), ((((false ? (((injectionSwitch)) / vec2((injectionSwitch.y), (injectionSwitch.y))) : injectionSwitch))) - vec2(0.0, 0.0)))).x > injectionSwitch.y))))))
  barrier();
 if((false))
  barrier();
 if((false))
  {
   for(int _injected_loop_counter = (1 & 1); _injected_loop_counter != (0 >> (int((min(0, 0))))); _injected_loop_counter --)
    {
     barrier();
    }
  }
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((false))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 if((false))
  barrier();
 if((false))
  {
   for(int _injected_loop_counter = (1 ^ 1); _injected_loop_counter != ((1 << ((0 | (((int(1)) | 0))))) >> (int(1))); _injected_loop_counter ++)
    {
     if((false))
      barrier();
    }
   barrier();
  }
 if(((injectionSwitch.x < injectionSwitch.y)))
  {
   do
    {
     if((bool(bvec4(true, false, true, false))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          {
           if((((((injectionSwitch.x) + 0.0) > injectionSwitch.y))))
            barrier();
           do
            {
             barrier();
             if((false))
              barrier();
            }
           while(((((injectionSwitch.x > injectionSwitch.y))) || false));
          }
         barrier();
         if((false || ((! (! (((bool(bool(false))))))))))
          barrier();
        }
       for(int _injected_loop_counter = (int((injectionSwitch.y)) ^ 0); _injected_loop_counter > int((mix(float((8.3)), float((injectionSwitch.x)), bool(true)))); _injected_loop_counter --)
        {
         if((false))
          barrier();
        }
      }
     else
      {
       if((((injectionSwitch.x > ((((injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : (vec2(- 65.17, 0.7)))).y)) || ((((injectionSwitch.x > injectionSwitch.y))))))
        barrier();
      }
    }
   while(false);
  }
 else
  {
  }
 uint workgroup_size = (0u + (((false ? (95635u) : gl_WorkGroupSize.x))));
 do
  {
   if((((((! ((bool(bvec3((bool(bvec3(! ((false)), false, true))), true, true))))) || false)) && true)))
    {
     for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > 0; _injected_loop_counter --)
      {
       barrier();
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 while(((((injectionSwitch.x) - 0.0) > injectionSwitch.y)));
 if(((! (! (bool(bvec4(true, ((((false) && true)) && true), ((injectionSwitch.x < injectionSwitch.y)), ((injectionSwitch.x < injectionSwitch.y)))))))))
  {
   if(((! ((((true && (false || (true && (! ((((true && (false))) && true))))))))))))
    {
     if((false))
      barrier();
     barrier();
    }
   if(((! ((false || (! (false)))))))
    {
     do
      {
       if(true)
        {
         barrier();
        }
       else
        {
        }
      }
     while(((injectionSwitch.x > (vec2(injectionSwitch[0], injectionSwitch[1])).y)));
    }
   if((false))
    {
     if(true)
      {
       barrier();
      }
     else
      {
      }
    }
  }
 else
  {
  }
 do
  {
   if((((clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x < injectionSwitch.y)))
    {
     if((false))
      {
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
       if((false))
        barrier();
       if((false))
        barrier();
       if((false))
        barrier();
       do
        {
         barrier();
        }
       while(false);
       if((false))
        {
         if((false))
          barrier();
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
         do
          {
           if((false))
            barrier();
           for(int _injected_loop_counter = int((injectionSwitch.x)); (clamp((clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)), _injected_loop_counter, _injected_loop_counter)) < int((injectionSwitch.y)); _injected_loop_counter ++)
            {
             barrier();
            }
           if(((! (((! (false)) || false)))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               for(int _injected_loop_counter = 1; _injected_loop_counter > (int((injectionSwitch.x)) | 0); _injected_loop_counter --)
                {
                 barrier();
                }
              }
             barrier();
            }
          }
         while((! (! (false))));
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(false)
        {
         if((false))
          barrier();
        }
       else
        {
         if((false))
          {
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             barrier();
            }
           else
            {
            }
          }
        }
      }
    }
   else
    {
    }
   if((false))
    {
     for(int _injected_loop_counter = (0 >> (int(0))); _injected_loop_counter < ((int((injectionSwitch.y)) << (int(0))) >> (int(0))); _injected_loop_counter ++)
      {
       if((false))
        barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
    {
     if(((false || ((! (! (false)))))))
      {
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         barrier();
         if((false))
          barrier();
        }
       else
        {
         if((false))
          barrier();
        }
      }
     if(((false || ((injectionSwitch.x > ((vec2(mat3(vec2(mat3(injectionSwitch, 1.0, 0.0, round(length(normalize(1.0))), 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, abs(1.0), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), 0.0, 0.0)), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)))).y)))))
      {
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         barrier();
        }
       for(int _injected_loop_counter = 1; (false || (_injected_loop_counter != 0)); _injected_loop_counter --)
        {
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     if((false))
      barrier();
     if((((false) && true)))
      barrier();
    }
  }
 while(((! (! ((injectionSwitch.x > injectionSwitch.y))))));
 uint workgroup_id = gl_WorkGroupID.x;
 if(((injectionSwitch.x > injectionSwitch.y)))
  {
  }
 else
  {
   if(true)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_base = workgroup_size * workgroup_id;
 if((false))
  barrier();
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + (uint(uvec3(subgroup_local_id, 1u, 1u)));
 if(((((bool(bvec3(! (! (true)), false, true)))) || false)))
  {
   if((false))
    barrier();
  }
 else
  {
  }
 uint next_virtual_gid = ((((workgroup_base) | (workgroup_base))) ^ 0u) + ((true ? ((false ? (workgroup_size) : subgroup_id * subgroup_size)) : (workgroup_id))) + (((((uint(uvec3(subgroup_local_id + 1, 0u, (((min(0u, 0u)) ^ (((1u) | (1u)) & 1u))))))) << 0u)) % subgroup_size);
 ((buf[virtual_gid] = (int(ivec2(1, (((max(((1) ^ 0), 1)) + 0)))))) - 0u);
 if((false))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   if((((injectionSwitch.x > (min(injectionSwitch.y, injectionSwitch.y))))))
    barrier();
   for(int _injected_loop_counter = 0; _injected_loop_counter < ((1 << (int(6))) >> (int(6))); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 if((false))
  barrier();
 if(((bool(bvec3((injectionSwitch.x > (max(injectionSwitch, injectionSwitch)).y), false, false)))))
  {
   if((false))
    barrier();
   if((false))
    barrier();
  }
 else
  {
   for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > 0; _injected_loop_counter --)
    {
     if((! (! (((subgroup_local_id + 1 < subgroup_size) || (((injectionSwitch.x < injectionSwitch.y)) && (false)))))))
      {
       buf[next_virtual_gid] = 2;
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
       if((((false) || false)))
        barrier();
       subgroupAll(false);
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
       if((false))
        barrier();
       if((false))
        {
         if(((bool(bool(false)))))
          barrier();
         if((! (! (((((injectionSwitch.x > injectionSwitch.y)))) || false))))
          {
          }
         else
          {
           do
            {
             barrier();
             if(false)
              {
              }
             else
              {
               if((false))
                barrier();
              }
            }
           while(false);
          }
        }
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
      }
     else
      {
       buf[next_virtual_gid] = 2;
       subgroupAll(true);
       if((false))
        {
         if(true)
          {
           barrier();
           if((false))
            barrier();
          }
         else
          {
          }
        }
       if(((bool(bvec4(false, false, ((injectionSwitch.x > injectionSwitch.y)), ((injectionSwitch.x < injectionSwitch.y)))))))
        barrier();
       if(((true) || false))
        {
         if((false))
          barrier();
        }
       else
        {
        }
      }
    }
  }
 do
  {
   if((false))
    barrier();
  }
 while(false);
 if(((bool(bool(((bool(bvec4(((! (! (((injectionSwitch.x > injectionSwitch.y)))))), true, true, ((! (! (bool((((injectionSwitch.x > injectionSwitch.y)) || (bool(((! (! ((injectionSwitch.x > injectionSwitch.y)))))))))))))))) && true))))))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     barrier();
    }
   do
    {
     barrier();
    }
   while(false);
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
