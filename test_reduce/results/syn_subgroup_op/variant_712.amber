#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

struct _GLF_struct_4 {
 uvec2 _f0;
 bool _f1;
 mat3 _f2;
 mat4x2 _f3;
 uint workgroup_size;
 ivec3 _f4;
 mat2x3 _f5;
 mat3x2 _f6;
} ;

struct _GLF_struct_5 {
 _GLF_struct_4 _f0;
 mat3 _f1;
} ;

struct _GLF_struct_2 {
 mat2x4 _f0;
} ;

struct _GLF_struct_1 {
 vec3 _f0;
} ;

struct _GLF_struct_0 {
 bvec3 _f0;
 uvec4 _f1;
 vec3 _f2;
 mat3 _f3;
} ;

struct _GLF_struct_3 {
 _GLF_struct_0 _f0;
 _GLF_struct_1 _f1;
 mat2x3 _f2;
 _GLF_struct_2 _f3;
 int _f4;
} ;

struct _GLF_struct_6 {
 _GLF_struct_3 _f0;
 _GLF_struct_5 _f1;
 float _f2;
} ;

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 _GLF_struct_6 _GLF_struct_replacement_6 = _GLF_struct_6(_GLF_struct_3(_GLF_struct_0(bvec3(true), uvec4(1u), (mat3(1.0) * (vec3((clamp(((dot(vec3(1.0, 0.0, 1.0), vec3((injectionSwitch.x), 1.0, 0.0))) + (1.0)), ((dot(vec3(1.0, 0.0, 1.0), (clamp(vec3((injectionSwitch.x), 1.0, 0.0), vec3((injectionSwitch.x), 1.0, 0.0), vec3((injectionSwitch.x), 1.0, 0.0))))) + (float(mat4((min((1.0), (1.0))), 0.0, determinant(mat3(1.0, 0.0, (injectionSwitch.y), (injectionSwitch.x), 1.0, 1.0, 0.0, 0.0, 1.0)), 1.0, 1.0, abs(0.0), sqrt(1.0), 0.0, 1.0, tan(0.0), sin(determinant(mat3(0.0, 0.0, ((0.0) / 1.0), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0))), 0.0, 0.0, sqrt(1.0), 0.0, 1.0)))), (clamp(((dot((vec3(mat4(vec3(1.0, 0.0, 1.0), 0.0, 0.0, 0.0, 1.0, log((injectionSwitch.y)), 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0))), vec3((injectionSwitch.x), 1.0, 0.0))) + (1.0)), (min((((clamp(dot(vec3(1.0, 0.0, 1.0), vec3((1.0 * ((injectionSwitch.x))), 1.0, 0.0)), dot(vec3(1.0, 0.0, 1.0), vec3((injectionSwitch.x), 1.0, 0.0)), (float(vec2(((false ? (- 5790.0572) : (mix(float(dot(vec3(1.0, 0.0, 1.0), vec3((injectionSwitch.x), 1.0, 0.0))), float((7.6)), bool(false))))), 1.0)))))) + (1.0)), ((((dot(vec3(1.0, 0.0, 1.0), vec3((injectionSwitch.x), 1.0, 0.0))) + (1.0)) / 1.0)))), ((dot(vec3(1.0, 0.0, 1.0), ((vec3((injectionSwitch.x), 1.0, 0.0)) + vec3(0.0, (max(0.0, 0.0)), 0.0)))) + (1.0))))))))), mat3(1.0)), _GLF_struct_1(vec3(1.0)), mat2x3(1.0), _GLF_struct_2(mat2x4(1.0)), 1), _GLF_struct_5(_GLF_struct_4(uvec2(1u), true, mat3(((((false ? (3699.4259) : (true && ((bool((bvec3(bvec3(bvec3((! (! (true))), false, ((injectionSwitch.x > injectionSwitch.y)))))))))) ? ((true ? ((true ? 1.0 : (4.4))) : (953.090))) : (1.2)))))), mat4x2(1.0), gl_WorkGroupSize.x, ivec3(((((false ? (- 82983) : 1))) | (1))), mat2x3(1.0), mat3x2(1.0)), mat3(1.0)), 1.0);
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = ((_GLF_struct_replacement_6._f1._f0.workgroup_size * workgroup_id) - 0u);
 uint virtual_gid = workgroup_base + (0u ^ (subgroup_id)) * ((min(((0u) - 0u), 0u)) ^ (~ (~ ((subgroup_size))))) + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((((0u + (((uint(uint(((uint(uvec2((((((0u | ((((min(((uint(uint((((false ? (116170u) : ((max(subgroup_local_id, subgroup_local_id))))) | (subgroup_local_id))))) / 1u), uint(uint((((max(subgroup_local_id, subgroup_local_id))) | ((uint(uvec3(subgroup_local_id, 0u, 1u)))))))))) + 1)))) | ((0u | ((((min(((uint(uint((((false ? (116170u) : ((max(subgroup_local_id, subgroup_local_id))))) | (subgroup_local_id))))) / 1u), uint(uint((((max(subgroup_local_id, subgroup_local_id))) | ((uint(uvec3(subgroup_local_id, 0u, 1u)))))))))) + 1)))))) >> 0u), ((~ (~ (((min(0u, 0u)) ^ (0u))))) >> (uint(6u)))))))))) / 1u)))) / 1u) % ((clamp(0u + ((((((((0u | (subgroup_size))) ^ ((0u) << (clamp(0u, 0u, 0u)))) | ((clamp(((0u | (subgroup_size))) ^ ((0u) << (clamp(0u, 0u, 0u))), ((0u | (subgroup_size))) ^ ((0u) << (clamp(0u, 0u, 0u))), ((0u | (subgroup_size))) ^ ((0u) << (clamp(0u, 0u, 0u)))))))))) ^ 0u), 0u + ((((((((injectionSwitch.x < injectionSwitch.y)) ? 0u | (subgroup_size) : (min(workgroup_id, subgroup_size)))))) ^ 0u)), ((((min(~ (~ ((~ ((~ (~ (~ (0u + ((((0u | (subgroup_size))) ^ 0u)))))))))), ~ (~ ((~ ((~ (~ (~ (0u + ((((0u | (subgroup_size))) ^ 0u))))))))))))) << (0u | 0u)))))));
 buf[virtual_gid] = (0 | ((min(((((1) >> (0 ^ (int(((max(injectionSwitch, injectionSwitch)).x)))))) * 1), (((clamp(((1) >> (0 ^ (int(((max(injectionSwitch, injectionSwitch)).x))))), ((((1) >> (0 ^ (int(((max(injectionSwitch, injectionSwitch)).x)))))) ^ 0), ((1) >> (0 ^ (int(((max(injectionSwitch, injectionSwitch)).x))))))) ^ 0))))));
 if(subgroup_local_id + 1 < subgroup_size)
  {
   buf[next_virtual_gid] = ((~ ((clamp(~ (((((injectionSwitch.x < (mat2(1.0) * (injectionSwitch)).y)) ? (clamp((((true ? 2 : (92209)))), (((true ? 2 : (((92209)) | 0)))), (((true ? 2 : (92209)))))) : (14765)))), ~ (((((injectionSwitch.x < injectionSwitch.y)) ? (clamp((((true ? 2 : (92209)))), (((((true ? 2 : (92209))))) | ((clamp((((true ? 2 : (92209)))), (((true ? 2 : (92209)))), (((true ? 2 : (92209)))))))), (((true ? (1 * (2)) : (92209)))))) : (14765)))), ~ (((((injectionSwitch.x < injectionSwitch.y)) ? (clamp((((true ? (0 | (2)) : (92209)))), (((true ? 2 : (((((max(int(ivec3(92209, 0, 1)), int(ivec3(92209, 0, 1))))))) | ((((max(int(ivec3(92209, 0, 1)), int(ivec3(92209, 0, 1))))))))))), (((true ? 2 : (92209)))))) : (14765)))))))) / 1);
   subgroupAll((bool(bvec2(false, false))));
  }
 else
  {
   buf[next_virtual_gid] = 2;
   do
    {
     subgroupAll(true);
    }
   while(false);
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
