#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

struct _GLF_struct_11 {
 mat2x4 _f0;
 mat3x4 _f1;
 mat2x3 _f2;
 bvec3 _f3;
 mat3x4 _f4;
} ;

struct _GLF_struct_10 {
 vec3 _f0;
 mat4 _f1;
 bool _f2;
 float _f3;
} ;

struct _GLF_struct_12 {
 uint next_virtual_gid;
 _GLF_struct_10 _f0;
 _GLF_struct_11 _f1;
} ;

struct _GLF_struct_8 {
 uvec3 _f0;
 float _f1;
 mat2 _f2;
 mat2 _f3;
 uvec4 _f4;
} ;

struct _GLF_struct_7 {
 ivec2 _f0;
 bvec2 _f1;
 uint _f2;
 mat2x3 _f3;
 mat3x4 _f4;
 float _f5;
 int _f6;
} ;

struct _GLF_struct_6 {
 mat3 _f0;
 mat4x2 _f1;
 ivec2 _f2;
} ;

struct _GLF_struct_9 {
 _GLF_struct_6 _f0;
 mat4x3 _f1;
 _GLF_struct_7 _f2;
 _GLF_struct_8 _f3;
 mat4x2 _f4;
} ;

struct _GLF_struct_5 {
 ivec3 _f0;
 mat4 _f1;
} ;

struct _GLF_struct_3 {
 float _f0;
 vec2 _f1;
 mat4 _f2;
 ivec2 _f3;
 mat4 _f4;
 ivec3 _f5;
 bvec4 _f6;
} ;

struct _GLF_struct_2 {
 ivec4 _f0;
 mat3x4 _f1;
 ivec4 _f2;
} ;

struct _GLF_struct_1 {
 uint _f0;
 ivec3 _f1;
 vec4 _f2;
 vec4 _f3;
} ;

struct _GLF_struct_4 {
 _GLF_struct_1 _f0;
 _GLF_struct_2 _f1;
 mat2 _f2;
 _GLF_struct_3 _f3;
 bvec2 _f4;
 ivec3 _f5;
} ;

struct _GLF_struct_13 {
 _GLF_struct_4 _f0;
 bvec4 _f1;
 mat2x4 _f2;
 _GLF_struct_5 _f3;
 _GLF_struct_9 _f4;
 mat2x3 _f5;
 _GLF_struct_12 _f6;
} ;

struct _GLF_struct_0 {
 uvec3 _f0;
 uint workgroup_id;
} ;

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((false))
  return;
 if(((injectionSwitch.x > injectionSwitch.y)))
  {
  }
 else
  {
   if(false)
    {
    }
   else
    {
     if((false))
      {
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
         if((false))
          return;
        }
       else
        {
         return;
        }
      }
    }
  }
 uint subgroup_id = gl_SubgroupID;
 if(false)
  {
  }
 else
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(true)
  {
   if((false))
    {
     for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
      {
       do
        {
         if((false))
          break;
         if((false))
          return;
        }
       while(false);
      }
     if(true)
      {
       if((false))
        {
         if((false))
          {
           if(true)
            {
             return;
            }
           else
            {
             if((false))
              return;
            }
           if((false))
            return;
          }
         for(int _injected_loop_counter = (0 & 40191); _injected_loop_counter != 1; _injected_loop_counter ++)
          {
           for(int _injected_loop_counter = 1; _injected_loop_counter > (- 10285 & 0); _injected_loop_counter --)
            {
             return;
            }
          }
        }
      }
     else
      {
      }
     do
      {
       if((false))
        continue;
       if(true)
        {
         for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
          {
           if((false))
            break;
           for(int _injected_loop_counter = 0; _injected_loop_counter < ((int((injectionSwitch.y)) << (int(2))) >> (int(2))); _injected_loop_counter ++)
            {
             return;
            }
          }
        }
       else
        {
        }
       if((false))
        {
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         if(true)
          {
           if((false))
            return;
           return;
          }
         else
          {
           if((false))
            {
             if((false))
              continue;
             break;
            }
          }
        }
      }
     while(false);
    }
   if((false))
    return;
  }
 else
  {
  }
 if((false))
  return;
 if(false)
  {
  }
 else
  {
   if(false)
    {
    }
   else
    {
     if(((! (! (false)))))
      {
       if((false))
        {
         do
          {
           return;
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
        }
       return;
      }
    }
  }
 for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
  {
   for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
    {
     if((false))
      {
       if((false))
        continue;
       if((false))
        return;
       do
        {
         for(int _injected_loop_counter = ((1 << (int(5))) >> (int(5))); _injected_loop_counter > 0; _injected_loop_counter --)
          {
           if((false))
            break;
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           if(true)
            {
             for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != (0 & (- 56258)); _injected_loop_counter --)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if(false)
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    {
                     if((false))
                      continue;
                     break;
                    }
                  }
                 else
                  {
                   return;
                  }
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                continue;
              }
            }
           else
            {
            }
           if((false))
            break;
           if((false))
            continue;
          }
         if((false))
          {
           if((false))
            break;
           continue;
          }
        }
       while(false);
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          break;
         return;
        }
       if((((((injectionSwitch.x > injectionSwitch.y))) || false)))
        {
         if((false))
          continue;
         continue;
        }
       do
        {
         do
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           do
            {
             if((false))
              continue;
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
             if((false))
              {
               if((false))
                break;
               if(true)
                {
                 if(((injectionSwitch.x < injectionSwitch.y)))
                  {
                   if((((false) && true)))
                    {
                     if(false)
                      {
                      }
                     else
                      {
                       return;
                      }
                    }
                   do
                    {
                     for(int _injected_loop_counter = (0 >> (int(2))); _injected_loop_counter < 1; _injected_loop_counter ++)
                      {
                       if(true)
                        {
                         return;
                         if(((false || (false))))
                          {
                           if((false))
                            break;
                           return;
                          }
                        }
                       else
                        {
                        }
                      }
                    }
                   while(false);
                   if((false))
                    break;
                   if((false))
                    return;
                  }
                 else
                  {
                  }
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  return;
                 if((false))
                  break;
                }
               else
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  break;
                 if((false))
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      break;
                     continue;
                    }
                   break;
                  }
                }
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  return;
                 continue;
                 if((false))
                  continue;
                }
              }
            }
           while(false);
          }
         while(false);
        }
       while(false);
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if(false)
        {
        }
       else
        {
         return;
        }
      }
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
   if((false))
    {
     if((false))
      {
       if((false))
        return;
       for(int _injected_loop_counter = 1; _injected_loop_counter != (0 | (0)); _injected_loop_counter --)
        {
         return;
        }
      }
     return;
    }
   do
    {
     for(int _injected_loop_counter = 1; _injected_loop_counter != (0 ^ (0 << ((int(ivec4(int(0), 1, 1, 1)))))); _injected_loop_counter --)
      {
       if((false))
        {
         if((false))
          {
           if((false))
            return;
           continue;
          }
         break;
        }
       return;
      }
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(false)
      {
      }
     else
      {
       if(true)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if(true)
            {
             return;
            }
           else
            {
            }
          }
        }
       else
        {
        }
       return;
      }
    }
  }
 if(((injectionSwitch.x > injectionSwitch.y)))
  {
  }
 else
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
  }
 if((false))
  return;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if(((bool(bvec4((bool(bvec3(false, false, true))), true, false, false)))))
    return;
   for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   for(int _injected_loop_counter = (0 | (0 << (int(2)))); _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
    {
     if(false)
      {
      }
     else
      {
       if((false))
        return;
       if(true)
        {
         if((false))
          return;
        }
       else
        {
        }
       if((false))
        return;
       for(int _injected_loop_counter = 0; _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
        {
         if((false))
          return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            continue;
           return;
          }
         if((false))
          return;
        }
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
       if((false))
        break;
      }
     if((false))
      return;
    }
   do
    {
     do
      {
       return;
      }
     while(false);
    }
   while((false || (false)));
  }
 if((false))
  {
   do
    {
     if((false))
      {
       if((false))
        {
         if((false))
          return;
         return;
        }
       return;
      }
    }
   while(false);
   do
    {
     return;
     if((((((injectionSwitch.x > injectionSwitch.y))) && true)))
      break;
     if((false))
      return;
    }
   while(false);
  }
 do
  {
   for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
    {
     if((false))
      return;
     if(((! (! (false)))))
      continue;
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
       if(((bool(bvec2(false, false)))))
        break;
       if(true)
        {
         return;
        }
       else
        {
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        break;
       if((false))
        break;
       return;
      }
     if((false))
      {
       if((false))
        {
         if(true)
          {
           return;
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
          }
         else
          {
          }
         if((false))
          return;
        }
       break;
       if((false))
        continue;
      }
    }
  }
 while(false);
 for(int _injected_loop_counter = (1 | 0); _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
  {
   if((false))
    return;
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
  {
   if((false))
    return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    {
     if((false))
      return;
     return;
    }
   if((false))
    return;
   if(false)
    {
    }
   else
    {
     if((false))
      return;
    }
   return;
  }
 if((false))
  return;
 uint workgroup_size = gl_WorkGroupSize.x;
 _GLF_struct_0 _GLF_struct_replacement_0 = _GLF_struct_0(uvec3(1u), gl_WorkGroupID.x);
 uint workgroup_base = workgroup_size * _GLF_struct_replacement_0.workgroup_id;
 if(true)
  {
   if(true)
    {
     if(false)
      {
      }
     else
      {
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if((false))
          return;
        }
       else
        {
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           return;
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
        }
       return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > 0; _injected_loop_counter --)
      {
       if((false))
        return;
      }
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = (0 >> (int(5))); _injected_loop_counter != ((1 << (int(3))) >> (int(3))); _injected_loop_counter ++)
            {
             if((false))
              break;
             return;
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if((false))
          return;
         return;
        }
      }
     if((false))
      return;
    }
   else
    {
    }
  }
 else
  {
  }
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 if((false))
  {
   if((false))
    {
     for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
      {
       return;
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
   if((false))
    {
     if((false))
      return;
     return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 _GLF_struct_13 _GLF_struct_replacement_13 = _GLF_struct_13(_GLF_struct_4(_GLF_struct_1(1u, ivec3(1), vec4(1.0), vec4(1.0)), _GLF_struct_2(ivec4(1), mat3x4(1.0), ivec4(1)), mat2(1.0), _GLF_struct_3(1.0, vec2(1.0), mat4(1.0), ivec2(1), mat4(1.0), ivec3(1), bvec4(true)), bvec2(true), ivec3(1)), bvec4(true), mat2x4(1.0), _GLF_struct_5(ivec3(1), mat4(1.0)), _GLF_struct_9(_GLF_struct_6(mat3(1.0), mat4x2(1.0), ivec2(1)), mat4x3(1.0), _GLF_struct_7(ivec2(1), bvec2(true), 1u, mat2x3(1.0), mat3x4(1.0), 1.0, 1), _GLF_struct_8(uvec3(1u), 1.0, mat2(1.0), mat2(1.0), uvec4(1u)), mat4x2(1.0)), mat2x3(1.0), _GLF_struct_12(workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size), _GLF_struct_10(vec3(1.0), mat4(1.0), true, 1.0), _GLF_struct_11(mat2x4(1.0), mat3x4(1.0), mat2x3(1.0), bvec3(true), mat3x4(1.0))));
 if(((bool(bool(false)))))
  return;
 if((false))
  {
   if(false)
    {
    }
   else
    {
     return;
    }
  }
 if((false))
  {
   if((false))
    return;
   return;
  }
 for(int _injected_loop_counter = (0 | 1); _injected_loop_counter != 0; _injected_loop_counter --)
  {
   if(false)
    {
     if(false)
      {
       if((false))
        return;
      }
     else
      {
       if((false))
        {
         if((false))
          return;
         if(true)
          {
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             if((false))
              {
               if((false))
                return;
               return;
              }
            }
           else
            {
            }
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             if((false))
              return;
            }
           if((false))
            {
             do
              {
               return;
               if((false))
                break;
              }
             while(false);
            }
          }
         else
          {
           if((false))
            {
             if((false))
              return;
             return;
            }
          }
         if((false))
          return;
         return;
        }
      }
     if((false))
      {
       for(int _injected_loop_counter = (1 | 1); _injected_loop_counter != 0; _injected_loop_counter --)
        {
         return;
        }
      }
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      continue;
     do
      {
       if(true)
        {
         for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if(true)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                return;
              }
             else
              {
              }
             return;
            }
          }
         if((false))
          return;
         if((false))
          return;
         if((false))
          break;
         do
          {
           if((false))
            return;
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
         if((false))
          break;
         if((false))
          {
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
             for(int _injected_loop_counter = (0 | int((injectionSwitch.x))); _injected_loop_counter != (((0 ^ 1) << ((~ (~ (int(7)))))) >> (int(7))); _injected_loop_counter ++)
              {
               if((false))
                {
                 for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
                  {
                   if((false))
                    break;
                   for(int _injected_loop_counter = 1; _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
                    {
                     for(int _injected_loop_counter = (1 & 1); _injected_loop_counter != 0; _injected_loop_counter --)
                      {
                       do
                        {
                         return;
                        }
                       while(false);
                      }
                    }
                  }
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(((injectionSwitch.x < injectionSwitch.y)))
                    {
                     return;
                    }
                   else
                    {
                    }
                  }
                }
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
                {
                 return;
                }
              }
            }
           else
            {
             if((false))
              continue;
             if(false)
              {
              }
             else
              {
               return;
              }
            }
          }
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if(false)
                {
                }
               else
                {
                 return;
                }
              }
             return;
            }
           if((false))
            continue;
           if((false))
            {
             if(true)
              {
               if(((true && (false))))
                return;
              }
             else
              {
              }
             if((false))
              continue;
             return;
            }
           if((false))
            return;
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if(true)
              {
               if((false))
                continue;
               for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
                {
                 if((false))
                  return;
                }
               return;
              }
             else
              {
              }
             if((false))
              return;
            }
           if((false))
            continue;
          }
         if((false))
          return;
        }
       else
        {
         if((false))
          break;
         if(false)
          {
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              continue;
             return;
            }
           if((false))
            return;
          }
        }
      }
     while(false);
    }
   if((false))
    {
     if(true)
      {
       return;
      }
     else
      {
      }
    }
  }
 do
  {
   for(int _injected_loop_counter = 1; _injected_loop_counter != (0 >> (int(6))); _injected_loop_counter --)
    {
     if((false))
      return;
     if(false)
      {
       if((false))
        continue;
       do
        {
         for(int _injected_loop_counter = (1 & 1); _injected_loop_counter != 0; _injected_loop_counter --)
          {
           if((false))
            break;
           if((false))
            {
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
               if((false))
                break;
              }
             else
              {
               do
                {
                 return;
                }
               while(false);
              }
            }
          }
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          {
           if((false))
            break;
           if((false))
            break;
           break;
          }
         if((false))
          break;
         if((false))
          {
           if(((bool((! (! (bool(false))))))))
            {
             do
              {
               return;
              }
             while(false);
            }
           break;
          }
         if((false))
          {
           if((false))
            return;
           if((false))
            break;
           break;
          }
         if((false))
          {
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             break;
            }
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
             continue;
            }
           return;
          }
         if((false))
          return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
         if((false))
          continue;
         return;
         if((false))
          continue;
        }
      }
     else
      {
       if((false))
        break;
       if((false))
        continue;
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       buf[virtual_gid] = 1;
       if((false))
        {
         if((false))
          break;
         if((false))
          break;
         break;
         if((false))
          continue;
        }
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         if((false))
          {
           if((false))
            break;
           return;
          }
         if((false))
          continue;
         if((false))
          break;
        }
      }
     if((false))
      continue;
    }
  }
 while(((injectionSwitch.x > injectionSwitch.y)));
 if(false)
  {
  }
 else
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(false)
      {
      }
     else
      {
       return;
      }
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     return;
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
  }
 for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
  {
   if(false)
    {
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 0; _injected_loop_counter != (0 ^ 1); _injected_loop_counter ++)
        {
         return;
        }
      }
     if((false))
      {
       if((false))
        return;
       return;
      }
     if(false)
      {
      }
     else
      {
       if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
        return;
      }
    }
   else
    {
     for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
      {
       if((false))
        {
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           return;
          }
         else
          {
          }
        }
      }
     if((false))
      return;
    }
  }
 if((false))
  return;
 if((false))
  {
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     if(true)
      {
       return;
      }
     else
      {
      }
    }
   else
    {
    }
   if((((false) && true)))
    return;
  }
 if(((injectionSwitch.x < injectionSwitch.y)))
  {
   if((false))
    {
     for(int _injected_loop_counter = 1; _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
      {
       return;
      }
    }
   if(subgroup_local_id + 1 < subgroup_size)
    {
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(false)
        {
        }
       else
        {
         do
          {
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             return;
             if((false))
              return;
            }
          }
         while(false);
        }
       return;
      }
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if((false))
        return;
       do
        {
         do
          {
           if((false))
            return;
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
             if((false))
              break;
             return;
            }
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
        }
       while(false);
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         for(int _injected_loop_counter = (0 | 0); _injected_loop_counter != ((((1 << ((1 * (int(5))))) >> (int(5))) << (int(2))) >> (int(2))); _injected_loop_counter ++)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if(true)
              {
               if((false))
                {
                 for(int _injected_loop_counter = 0; _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
                  {
                   do
                    {
                     return;
                     if((false))
                      continue;
                    }
                   while(((injectionSwitch.x > injectionSwitch.y)));
                  }
                }
              }
             else
              {
              }
             continue;
            }
           if((false))
            continue;
           if((false))
            {
             if((false))
              break;
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                return;
               if((((injectionSwitch.x > injectionSwitch.y))))
                return;
               if((false))
                break;
               if(true)
                {
                 do
                  {
                   return;
                   if(((true && (((injectionSwitch.x > injectionSwitch.y))))))
                    break;
                  }
                 while(false);
                }
               else
                {
                }
              }
             if((false))
              break;
             continue;
             if((false))
              break;
            }
           if((false))
            continue;
           if((false))
            {
             if((false))
              break;
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
             if((false))
              {
               for(int _injected_loop_counter = 1; _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
                {
                 if((false))
                  return;
                }
               break;
              }
             if(true)
              {
               return;
              }
             else
              {
              }
            }
           if((false))
            {
             if((false))
              return;
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((false))
                  break;
                 continue;
                }
               continue;
              }
             if((false))
              {
               if((false))
                break;
               continue;
              }
             do
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if(((injectionSwitch.x < injectionSwitch.y)))
                  {
                   do
                    {
                     for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                      {
                       return;
                      }
                    }
                   while(false);
                   if((false))
                    return;
                   for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != 1; _injected_loop_counter ++)
                    {
                     if(((injectionSwitch.x > injectionSwitch.y)))
                      {
                      }
                     else
                      {
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        return;
                      }
                     if((false))
                      return;
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      continue;
                    }
                  }
                 else
                  {
                  }
                 if(((true && (false))))
                  {
                   if(((! (! (false)))))
                    return;
                   for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                    {
                     if((false))
                      return;
                     return;
                    }
                  }
                 if((false))
                  continue;
                }
              }
             while(false);
             if((false))
              return;
             continue;
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
         for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
          {
           if((false))
            {
             if(true)
              {
               return;
              }
             else
              {
              }
            }
          }
         if(true)
          {
           if(true)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           else
            {
             if((false))
              {
               if(true)
                {
                 return;
                }
               else
                {
                }
              }
            }
          }
         else
          {
           if((((((injectionSwitch.x > injectionSwitch.y))) || false)))
            return;
          }
         if((false))
          return;
        }
       else
        {
         buf[_GLF_struct_replacement_13._f6.next_virtual_gid] = 2;
         do
          {
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
             do
              {
               return;
               if((false))
                continue;
              }
             while(false);
            }
          }
         while((bool(bool(false))));
        }
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
          {
           for(int _injected_loop_counter = (1 ^ 0); _injected_loop_counter > (0 >> (int(1))); _injected_loop_counter --)
            {
             return;
            }
          }
         if((false))
          return;
        }
       if(false)
        {
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       if((((false) || false)))
        {
         if(false)
          {
          }
         else
          {
           if((false))
            return;
           if((false))
            return;
           if(((bool(bvec4(false, true, true, false)))))
            {
             if(((((bool(bool(false)))) && true)))
              return;
             return;
            }
          }
         if(true)
          {
           for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
            {
             if((false))
              return;
            }
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != 0; _injected_loop_counter --)
              {
               return;
              }
            }
           else
            {
            }
          }
         else
          {
          }
        }
       if((false))
        return;
      }
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
       if((false))
        {
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           return;
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
       if((false))
        return;
       do
        {
         if((false))
          continue;
         if(false)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
           if((false))
            continue;
          }
         else
          {
           if((false))
            break;
           if((false))
            continue;
           if((false))
            continue;
           if((false))
            continue;
           if((false))
            break;
           subgroupAll(false);
           if((false))
            return;
          }
         if((false))
          {
           if((false))
            return;
           return;
          }
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           if((false))
            return;
          }
        }
       while((! ((! (! (! ((false || ((bool(bvec4(false, true, false, false))))))))))));
       if((false))
        return;
       if((false))
        return;
      }
     if(true)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       do
        {
         do
          {
           do
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                {
                 if((false))
                  continue;
                 continue;
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                return;
               return;
              }
            }
           while(false);
          }
         while(false);
        }
       while(false);
      }
     else
      {
      }
     if((false))
      {
       if((false))
        {
         if(false)
          {
          }
         else
          {
           for(int _injected_loop_counter = (0 & 56786); _injected_loop_counter != ((1 << ((~ (((~ (int(4))) | (~ (int(4)))))))) >> (int(4))); _injected_loop_counter ++)
            {
             if((false))
              return;
            }
           return;
          }
        }
       do
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       while(false);
       if((false))
        return;
       return;
      }
     for(int _injected_loop_counter = 0; _injected_loop_counter < (((1 << (int(2))) >> (int(2))) & 1); _injected_loop_counter ++)
      {
       if(((((injectionSwitch.x > injectionSwitch.y)) || (((injectionSwitch.x > injectionSwitch.y))))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           continue;
          }
         if((! (! (true))))
          {
           if((false))
            return;
          }
         else
          {
          }
         return;
        }
      }
    }
   else
    {
     do
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(false)
          {
          }
         else
          {
           do
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if(((((injectionSwitch.x < injectionSwitch.y))) || false))
                {
                 if(false)
                  {
                  }
                 else
                  {
                   return;
                   if((((true && (bool(bvec4(false, true, false, true)))))))
                    break;
                  }
                }
               else
                {
                 if((false))
                  return;
                }
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
               if((false))
                {
                 if((false))
                  return;
                 if(false)
                  {
                  }
                 else
                  {
                   return;
                  }
                }
              }
             else
              {
               if(true)
                {
                 if((false))
                  continue;
                 if(false)
                  {
                   do
                    {
                     if((false))
                      {
                       if((false))
                        return;
                       return;
                      }
                     if((false))
                      break;
                    }
                   while(false);
                  }
                 else
                  {
                   if(true)
                    {
                     do
                      {
                       do
                        {
                         if(false)
                          {
                          }
                         else
                          {
                           return;
                           if((((injectionSwitch.x > injectionSwitch.y))))
                            {
                             if((false))
                              return;
                             break;
                            }
                          }
                         if((false))
                          break;
                         if((false))
                          break;
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          break;
                        }
                       while(false);
                      }
                     while(false);
                     if((false))
                      break;
                    }
                   else
                    {
                     if((false))
                      return;
                    }
                   if((false))
                    continue;
                   if((false))
                    break;
                   if((false))
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      return;
                     continue;
                    }
                   if((false))
                    {
                     do
                      {
                       return;
                      }
                     while(false);
                    }
                  }
                }
               else
                {
                 if((false))
                  break;
                }
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                {
                 if((false))
                  break;
                 continue;
                }
               continue;
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                return;
               for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
                {
                 if((false))
                  {
                   for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < 1; _injected_loop_counter ++)
                    {
                     return;
                    }
                  }
                }
               if((false))
                break;
               break;
              }
             if((false))
              {
               if((false))
                {
                 for(int _injected_loop_counter = (0 ^ 1); _injected_loop_counter > 0; _injected_loop_counter --)
                  {
                   if((false))
                    return;
                  }
                 if((false))
                  continue;
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  break;
                 return;
                }
               if(((injectionSwitch.x < injectionSwitch.y)))
                {
                 if((false))
                  break;
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  break;
                 for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < 1; _injected_loop_counter ++)
                  {
                   if((false))
                    {
                     for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
                      {
                       return;
                      }
                    }
                  }
                }
               else
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  break;
                }
               if((false))
                break;
               continue;
               if((false))
                continue;
               if((((injectionSwitch.x > injectionSwitch.y))))
                return;
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  break;
                 if((false))
                  continue;
                 if(true)
                  {
                   return;
                  }
                 else
                  {
                  }
                }
               if((false))
                break;
              }
             if(false)
              {
              }
             else
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if(false)
                  {
                  }
                 else
                  {
                   return;
                  }
                }
              }
             if((false))
              continue;
             if((false))
              break;
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
             for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != 1; _injected_loop_counter ++)
              {
               if((false))
                return;
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           while(false);
          }
        }
      }
     while((bool(bool(false))));
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      {
       if((false))
        return;
       return;
      }
     if(false)
      {
       do
        {
         if((false))
          {
           if(true)
            {
             return;
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                continue;
               return;
              }
            }
           else
            {
            }
          }
        }
       while(false);
      }
     else
      {
       if(false)
        {
        }
       else
        {
         buf[_GLF_struct_replacement_13._f6.next_virtual_gid] = 2;
         if((false))
          return;
        }
      }
     do
      {
       for(int _injected_loop_counter = (int(ivec3(0, 1, 0))); _injected_loop_counter < 1; _injected_loop_counter ++)
        {
         if(true)
          {
           do
            {
             if((false))
              {
               if((((false) && true)))
                continue;
               return;
              }
             if((((false) && true)))
              continue;
             if(true)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                return;
               subgroupAll(true);
               if((((injectionSwitch.x > injectionSwitch.y))))
                break;
              }
             else
              {
              }
             if((false))
              break;
             if((false))
              continue;
            }
           while(false);
          }
         else
          {
          }
        }
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
     if((false))
      return;
     if(false)
      {
      }
     else
      {
       for(int _injected_loop_counter = 0; _injected_loop_counter != ((int((injectionSwitch.y)) << (int(2))) >> (((int(2)) * 1))); _injected_loop_counter ++)
        {
         for(int _injected_loop_counter = (0 & 77759); _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
          {
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
             return;
            }
           if((false))
            break;
          }
        }
      }
    }
  }
 else
  {
   if((false))
    return;
  }
 if(true)
  {
   if((false))
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((false))
        return;
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         if((false))
          {
           if(false)
            {
            }
           else
            {
             return;
            }
          }
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           return;
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = 1; _injected_loop_counter > ((- 81918 & (1 ^ 1)) >> (int(8))); _injected_loop_counter --)
              {
               return;
              }
            }
           if((false))
            return;
          }
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if(false)
      {
       if((false))
        return;
      }
     else
      {
       if((false))
        {
         if(true)
          {
           if(true)
            {
             do
              {
               if(false)
                {
                }
               else
                {
                 return;
                }
              }
             while(((injectionSwitch.x > injectionSwitch.y)));
            }
           else
            {
            }
           if((false))
            return;
          }
         else
          {
          }
        }
      }
     if((false))
      return;
     for(int _injected_loop_counter = (0 & 32943); _injected_loop_counter < 1; _injected_loop_counter ++)
      {
       return;
      }
     if((false))
      return;
    }
  }
 else
  {
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if(false)
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if(true)
      {
       if((false))
        return;
       return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
      }
     if(((false || (false))))
      return;
    }
  }
 else
  {
   do
    {
     if((false))
      {
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         return;
        }
       else
        {
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         if(true)
          {
           if((false))
            return;
          }
         else
          {
          }
         for(int _injected_loop_counter = (int((injectionSwitch.x)) | 0); _injected_loop_counter < ((1 << (int(6))) >> (int(6))); _injected_loop_counter ++)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
           for(int _injected_loop_counter = (1 ^ 1); _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
            {
             if((false))
              return;
            }
           if((false))
            continue;
          }
         do
          {
           if((false))
            {
             for(int _injected_loop_counter = 0; _injected_loop_counter != (1 | 1); _injected_loop_counter ++)
              {
               return;
              }
            }
           if((false))
            return;
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              continue;
             if((false))
              break;
             do
              {
               do
                {
                 if(true)
                  {
                   for(int _injected_loop_counter = 0; _injected_loop_counter != (1 | 0); _injected_loop_counter ++)
                    {
                     return;
                     if(((injectionSwitch.x > injectionSwitch.y)))
                      {
                      }
                     else
                      {
                       if((false))
                        {
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          break;
                         do
                          {
                           if(((injectionSwitch.x < injectionSwitch.y)))
                            {
                             if((false))
                              {
                               if((false))
                                return;
                               continue;
                              }
                             return;
                            }
                           else
                            {
                            }
                          }
                         while(false);
                        }
                      }
                    }
                  }
                 else
                  {
                  }
                }
               while(false);
              }
             while(false);
             if((false))
              {
               for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
                {
                 return;
                }
              }
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
              {
               if(true)
                {
                 if((false))
                  return;
                 do
                  {
                   if(true)
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      return;
                    }
                   else
                    {
                     if((false))
                      continue;
                    }
                  }
                 while(((injectionSwitch.x > injectionSwitch.y)));
                }
               else
                {
                }
               if((false))
                continue;
              }
             if((false))
              {
               if(((false || (((injectionSwitch.x > injectionSwitch.y))))))
                break;
               break;
              }
             if(true)
              {
               for(int _injected_loop_counter = 1; _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
                {
                 return;
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                continue;
               if((false))
                continue;
              }
             else
              {
              }
             if(((false || (false))))
              break;
             if(((! (! (false)))))
              continue;
             if((false))
              break;
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
            }
          }
         while(false);
         do
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             do
              {
               return;
              }
             while(((injectionSwitch.x > injectionSwitch.y)));
            }
          }
         while(false);
         do
          {
           return;
           if(((! (! (false)))))
            break;
          }
         while(((false) || false));
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          continue;
         if((false))
          return;
         if((false))
          {
           if((false))
            {
             if((false))
              return;
             return;
            }
           if((false))
            continue;
           continue;
          }
         return;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         return;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
      }
     if((false))
      break;
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
  }
 for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > 0; _injected_loop_counter --)
  {
   if((false))
    break;
   for(int _injected_loop_counter = 1; _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      break;
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
