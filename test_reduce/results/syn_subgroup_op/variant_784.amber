#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  barrier();
 if((((((! (! ((false))))) && true)) && ((injectionSwitch.x < injectionSwitch.y))))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if((false))
  return;
 if((false))
  barrier();
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     barrier();
    }
   return;
  }
 if((false))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if((false || ((false || (((((max((vec2(1.0, 1.0) * (clamp(((mix(vec2(((vec2(1.0, 1.0) * (injectionSwitch)))[0], (0.0 + ((max(((max(- 3.9, - 3.9))), (- 3.9)))))), vec2((- 2.3), (injectionSwitch)[1]), (bvec2(bvec4(bvec2((! (! (false))), true), false, true)))))), ((mix(vec2(((vec2(1.0, 1.0) * (injectionSwitch)))[0], (0.0 + ((max((- 3.9), (- 3.9)))))), vec2((- 2.3), (injectionSwitch)[1]), (bvec2(bvec4(bvec2((! (! (false || ((false))))), true), false, true)))))), ((mix(vec2(((vec2(1.0, 1.0) * (injectionSwitch)))[0], ((mix(float((- 8.9)), float(0.0 + ((max((- 3.9), (- 3.9))))), bool(((injectionSwitch.x < injectionSwitch.y))))))), vec2((- 2.3), (injectionSwitch)[1]), (bvec2(bvec4(bvec2((! (! (false))), true), false, true))))))))), injectionSwitch)).x > (clamp(injectionSwitch, injectionSwitch, ((true ? injectionSwitch : (vec2(75.55, - 7.8)))))).y))))))))
  {
   if(((bool(bvec4(((((injectionSwitch.x > injectionSwitch.y))) && true), false, (! (! (false))), ((injectionSwitch.x < injectionSwitch.y)))))))
    barrier();
   if((false))
    return;
   barrier();
   if((false))
    {
     if((((false)) || false))
      return;
     barrier();
    }
  }
 if((false))
  return;
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((false))
  return;
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 if((false))
  {
   if((false))
    return;
   barrier();
   if((false))
    barrier();
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(((((vec2(mat4x3(injectionSwitch, length(0.0), 0.0, 1.0, exp(0.0), abs(sqrt(0.0)), 0.0, 1.0, 1.0, 0.0, (injectionSwitch.x)))).x > injectionSwitch.y))))
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     barrier();
    }
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(((((! (! (false)))) && true)))
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     barrier();
    }
   return;
  }
 if((false))
  return;
 if((false))
  barrier();
 if((((false) || false)))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if(((false || (((! (! (bool(bool((false || ((! (! (false)))))))))))))))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_id = (clamp(gl_WorkGroupID.x, gl_WorkGroupID.x, gl_WorkGroupID.x));
 uint workgroup_base = (((0u | ((clamp((clamp(workgroup_size, workgroup_size, workgroup_size)) * workgroup_id, (clamp(workgroup_size, ((workgroup_size) + 0u), workgroup_size)) * workgroup_id, (((~ (~ ((clamp(workgroup_size, workgroup_size, workgroup_size)) * workgroup_id)))) | ((((clamp(workgroup_size, workgroup_size, workgroup_size)) * workgroup_id) - (0u << (uint(8u))))))))))) | ((((max((clamp(workgroup_size, ((~ (~ (uint(uvec4(workgroup_size, 1u, 0u, 0u)))))), workgroup_size)) * workgroup_id, (clamp(workgroup_size, workgroup_size, workgroup_size)) * workgroup_id))) ^ 0u)));
 if((((injectionSwitch.x < injectionSwitch.y)) && ((false))))
  barrier();
 if((false))
  barrier();
 if((((injectionSwitch.x > (((true ? float((min(vec2(injectionSwitch.y, 0.0), vec2(injectionSwitch.y, 0.0)))) : (- 15.62))))))))
  {
   if((((false) || false)))
    barrier();
   if((false))
    return;
   if((false))
    return;
   return;
  }
 uint virtual_gid = (((0u | (uint(uint(1u))))) * (((((false ? (max((subgroup_id), (((0u | ((subgroup_id)))) - 0u))) : workgroup_base))) ^ 0u))) + subgroup_id * subgroup_size + subgroup_local_id;
 if((false))
  return;
 uint next_virtual_gid = (0u | (~ (~ ((workgroup_base))))) + ((((((true ? ((true ? (((((clamp((max(subgroup_id * (~ (~ (subgroup_size))), subgroup_id * subgroup_size)), ((false ? ((subgroup_size ++)) : subgroup_id)) * subgroup_size, (~ (~ ((((uint((injectionSwitch.y)) * (((((subgroup_id) << 0u)) * 1u))) * subgroup_size)) * uint((injectionSwitch.y))))))) | 0u))) >> 0u) : (workgroup_id))) + 0u : (uint(- 0.8)))))) + 0u)) + ((((false ? (num_workgroup) : (1u * (((((false ? (max(workgroup_size, subgroup_size)) : min((subgroup_local_id + 1), (subgroup_local_id + 1))))) % subgroup_size)))))) | (((min((~ (~ ((subgroup_local_id + 1)))), ((clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)) + 1))) % subgroup_size)));
 if((false))
  barrier();
 if(((bool(bvec2((! (! (false))), false)))))
  return;
 if((false))
  {
   if((false))
    {
     if((((((injectionSwitch.x) / 1.0) > injectionSwitch.y))))
      barrier();
     return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    return;
   barrier();
  }
 if((false))
  return;
 if((false || ((false))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    barrier();
   if((((false)) && true))
    barrier();
   if((false))
    barrier();
   barrier();
   if(((! (! ((false || ((bool(bvec4((! (! (false))), true, true, false))))))))))
    {
     if((((false) || false)))
      barrier();
     barrier();
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((((false || (bool(bool(bool(bvec2((false), ((((((bool((bvec3(bvec4(bvec3((true), true, false), true))))) && ((true) && (true && ((! (! (true)))))))) && ((injectionSwitch.x < injectionSwitch.y)))) && true))))))))))
  {
   if((false))
    barrier();
   if((false))
    {
     if((false))
      {
       if(((! (! (false)))))
        return;
       barrier();
      }
     return;
    }
   return;
  }
 if((false))
  return;
 if((((false)) && true))
  {
   if((false))
    return;
   if((false))
    {
     if((((false) && true)))
      barrier();
     barrier();
    }
   barrier();
  }
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    return;
   return;
   if((false))
    barrier();
  }
 if((false))
  barrier();
 buf[virtual_gid] = 1;
 if((false))
  barrier();
 if((false))
  barrier();
 if(subgroup_local_id + (((((! (! (false))) ? ((min(((ivec2(97955, 42817)[1]) | (ivec2(97955, 42817)[1])), ivec2(97955, 42817)[1]))) : 1)) | ((false ? (ivec2(97955, 42817)[1]) : (clamp(1, 1, 1)))))) < ((false ? (subgroup_size) : subgroup_size)))
  {
   if((false))
    barrier();
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    return;
   if((false))
    {
     if((((false)) && true))
      barrier();
     if(((false || (false))))
      {
       if((false))
        barrier();
       return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(((((clamp(injectionSwitch.x, (clamp(injectionSwitch.x, (float(mat3(injectionSwitch.x, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0))), injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   if(((! (! (false)))))
    return;
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      {
       if((false))
        return;
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if((true && ((false || ((false))))))
        return;
       return;
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
      }
     if((((injectionSwitch.x > (max(injectionSwitch.y, injectionSwitch.y))))))
      barrier();
     if((false))
      barrier();
     return;
    }
   if((false))
    {
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   if((false))
    {
     if((false))
      return;
     if((false))
      barrier();
     barrier();
     if(((((bool(bvec3((bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, true))), false, true)))))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
    }
   if((false))
    barrier();
   buf[next_virtual_gid] = (((bool(bool(((false) || false)))) ? ((bitfieldExtract(23162, 51250, 65121) % 32770)) : 2));
   if((false))
    barrier();
   if((false))
    barrier();
   subgroupAll(false);
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      {
       if(((! (! (false)))))
        return;
       barrier();
      }
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       return;
      }
    }
  }
 else
  {
   if(((! ((true && (((((((! (! (bool(bvec3(false || (false), false, true))))))) || (! (((false) || false))))) && true)))))))
    {
     if((false))
      barrier();
     return;
    }
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   buf[next_virtual_gid] = (0 | (2));
   if((false))
    barrier();
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   subgroupAll(true);
   if((false))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((((((true ? (clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) : (- 2.5))) > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     if((false))
      barrier();
     return;
    }
   if((false))
    {
     if((false))
      barrier();
     if((false))
      return;
     if((false))
      barrier();
     barrier();
     if((false))
      return;
    }
   if((false))
    return;
  }
 if((false))
  barrier();
 if((false))
  {
   if((false))
    return;
   if((false))
    return;
   if((false))
    {
     if((false))
      barrier();
     if((false))
      barrier();
     return;
    }
   barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(((((! (! (injectionSwitch.x > injectionSwitch.y)))))))
    {
     if((false))
      barrier();
     return;
    }
  }
 if((false))
  {
   if((false))
    return;
   barrier();
  }
 if(((((max((clamp((float(mat2(injectionSwitch.x, 1.0, 0.0, 1.0))), injectionSwitch.x, ((((false || ((bool(bvec2(false, true))))) ? (36.41) : (((float(mat3x2(float((max(float(injectionSwitch.x), float(injectionSwitch.x)))), 1.0, 0.0, 1.0, 0.0, 1.0)))) / 1.0)))))), ((injectionSwitch.y) * (((injectionSwitch.x) * 1.0))))) > injectionSwitch.y))))
  barrier();
 if(((true && (false))))
  return;
 if((false))
  return;
 if((((injectionSwitch.x > (((float(mat3x4(((injectionSwitch.y) - 0.0), determinant(mat3(0.0, exp(0.0), 1.0, sqrt(0.0), 0.0, 1.0, 0.0, length(0.0), 0.0)), cos(0.0), 0.0, 0.0, sin(0.0), 0.0, 0.0, 1.0, 0.0, 0.0, 1.0))) * 1.0))))))
  {
   if((false))
    {
     if((false))
      barrier();
     if((false))
      return;
     barrier();
    }
   if((false))
    {
     if((false))
      barrier();
     return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(((bool(bvec3((((! (! (((injectionSwitch.x > (((float(((mat3x2((min((((false ? (- 4.3) : 1.0)) * (injectionSwitch.y)), injectionSwitch.y)), 0.0, 1.0, (((false ? (- 0.7) : dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0))))), (dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), 0.0)) - mat3x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))) - (float(((max(vec2(mat3(vec2(0.0, 0.0), 1.0, tan(0.0), 1.0, 1.0, 0.0, 1.0, 0.0)), vec2(mat3(vec2(0.0, 0.0), 1.0, tan(0.0), 1.0, 1.0, 0.0, 1.0, 0.0))))))))))))) || false)), true, false)))))
  barrier();
 if((false))
  return;
 if((false))
  barrier();
 if(((((min(injectionSwitch, (clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).x > injectionSwitch.y))))
  {
   if((((injectionSwitch.x > (vec2(mat4x3(injectionSwitch, 0.0, 0.0, 0.0, 1.0, cos(0.0), 0.0, 1.0, 1.0, log(1.0), 0.0))).y))))
    barrier();
   return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((((! (! (true))) && (false))))
  return;
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
