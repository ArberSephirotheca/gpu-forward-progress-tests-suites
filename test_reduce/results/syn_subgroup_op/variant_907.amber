#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     barrier();
    }
   while(false);
  }
 if((false))
  {
   if((false))
    {
     if(false)
      {
      }
     else
      {
       barrier();
      }
    }
   for(int _injected_loop_counter = 1; _injected_loop_counter > (0 << (((int(3))) >> 0)); _injected_loop_counter --)
    {
     barrier();
    }
  }
 if((false))
  {
   if((((false)) && true))
    barrier();
   barrier();
  }
 if(false)
  {
  }
 else
  {
   if((false))
    barrier();
   if((false))
    barrier();
  }
 uint subgroup_size = gl_SubgroupSize;
 for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < 1; _injected_loop_counter ++)
  {
   if((false))
    {
     do
      {
       if(true)
        {
         if((! (! ((false)))))
          barrier();
        }
       else
        {
        }
      }
     while(false);
     barrier();
     if(((false || ((((bool(bool(false)))) && true)))))
      {
       do
        {
         barrier();
         if(((((vec2(0.0, 0.0) + (injectionSwitch)).x > injectionSwitch.y))))
          barrier();
        }
       while((! (! ((! ((false || (! (((injectionSwitch.x > injectionSwitch.y)))))))))));
      }
    }
  }
 if((((injectionSwitch.x > (max(injectionSwitch.y, injectionSwitch.y))))))
  {
   do
    {
     barrier();
    }
   while(false);
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = ((((((((gl_NumWorkGroups.x) | 0u))) | ((((gl_NumWorkGroups.x) | 0u))))) | ((((gl_NumWorkGroups.x) | 0u)))) | (((gl_NumWorkGroups) ^ uvec3(0u, 0u, 0u)).x));
 if((((((false ? (9.7) : injectionSwitch.x)) > (mat2(1.0) * (injectionSwitch)).y))))
  barrier();
 if(true)
  {
   if(((! ((! (! (! (bool((bvec3(bvec4(bvec3((true && ((((injectionSwitch.x > ((((((min((injectionSwitch), ((false ? (injectionSwitch) : (injectionSwitch))))) / cos(vec2(0.0, 0.0)))) * ((false ? (mat2(- 54.56, - 7013.3263, - 7.9, - 3589.4693)) : mat2((max((sin(0.0) + ((min(1.0, (mix(float(1.0), float((216.160)), bool(false))))))), (((sin(0.0) + ((min(1.0, (mix(float(1.0), float((216.160)), bool(false)))))))) - 0.0)))))))) / vec2(1.0, 1.0)).y))))), false, false), true))))))))))))
    barrier();
  }
 else
  {
  }
 if((false))
  barrier();
 if((false))
  barrier();
 uint workgroup_size = (((~ (~ ((uvec3(0u, 0u, 0u) | (gl_WorkGroupSize))))).x) >> (0u ^ 0u));
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 for(int _injected_loop_counter = ((~ (~ (1))) & 1); _injected_loop_counter > 0; _injected_loop_counter --)
  {
   if((false))
    barrier();
   if((false))
    {
     if(true)
      {
       do
        {
         if((false))
          barrier();
         barrier();
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
      }
     else
      {
      }
    }
   if((false))
    barrier();
  }
 if((false))
  {
   if((bool(bool((((! (((! (((((injectionSwitch) - abs(vec2(0.0, 0.0))).x) / cos(0.0)) < injectionSwitch.y)) || false)))))))))
    {
     if(((((min(injectionSwitch, ((false ? (injectionSwitch) : injectionSwitch)))).x > (vec2(injectionSwitch[0], injectionSwitch[1])).y))))
      barrier();
    }
   else
    {
    }
   barrier();
  }
 uint virtual_gid = ((((true) && true) ? (uint(uint(workgroup_base))) : (((workgroup_size)) + 0u))) + (uint(((uvec2(0u, 0u) ^ ((clamp(uvec2(uvec2(uvec2(subgroup_id * subgroup_size, 0u))), uvec2(uvec2(uvec2(subgroup_id * subgroup_size, 0u))), (uvec2(1u, 1u) * (uvec2(uvec2(uvec2(subgroup_id * subgroup_size, 0u)))))))))))) + subgroup_local_id;
 if((false))
  {
   if(((false || (((true && (bool(bvec4(false, ((injectionSwitch.x < injectionSwitch.y)), false, false)))))))))
    barrier();
   barrier();
   if((false))
    {
     if(true)
      {
       barrier();
      }
     else
      {
      }
    }
  }
 if((false))
  {
   do
    {
     do
      {
       if((false))
        barrier();
      }
     while((! (! ((true && (((injectionSwitch.x > ((true ? injectionSwitch : (injectionSwitch))).y))))))));
    }
   while((bool(bvec2((bool(bvec4(false, false, true, true))), false))));
   do
    {
     for(int _injected_loop_counter = ((0 & - 54512) >> (int(0))); _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
      {
       if((false))
        barrier();
      }
     barrier();
    }
   while(false);
   if((false))
    barrier();
   if((false))
    {
     if(true)
      {
       if(false)
        {
        }
       else
        {
         barrier();
        }
      }
     else
      {
      }
    }
  }
 if((false))
  barrier();
 uint next_virtual_gid = workgroup_base + (max((max(subgroup_id * (min(subgroup_size, subgroup_size)), subgroup_id * subgroup_size)), (~ (~ (subgroup_id * subgroup_size))))) + ((subgroup_local_id + 1) % subgroup_size);
 if(false)
  {
  }
 else
  {
   for(int _injected_loop_counter = 0; _injected_loop_counter < (min(1, 1)); _injected_loop_counter ++)
    {
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       buf[virtual_gid] = 1;
      }
    }
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     if(true)
      {
       barrier();
      }
     else
      {
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   do
    {
     for(int _injected_loop_counter = (max(0, 0)); _injected_loop_counter < 1; _injected_loop_counter ++)
      {
       barrier();
       if(((false || (! (! ((false)))))))
        {
         if((! (! ((false)))))
          barrier();
         barrier();
        }
      }
    }
   while(false);
   if((false))
    barrier();
  }
 if((false))
  barrier();
 if((((! (! ((bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, true)))))))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((bool((bvec3((bvec3(bvec4(bvec3((bvec3(bvec3(bvec3(((injectionSwitch.x < injectionSwitch.y)), true, ((injectionSwitch.x < injectionSwitch.y))))))), true))))))))
  {
   if((bool(bvec3((max(subgroup_local_id, subgroup_local_id)) + 1 < subgroup_size, true, true))))
    {
     if(((injectionSwitch.x > ((true ? injectionSwitch : (vec2(- 948.296, - 418.121)))).y)))
      {
      }
     else
      {
       if(false)
        {
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     if((! ((false || (((! ((false))) && true))))))
      barrier();
     if(true)
      {
       if(((((injectionSwitch.x > injectionSwitch.y)) || ((true && (false))))))
        barrier();
       buf[next_virtual_gid] = ((clamp(((((injectionSwitch.x < injectionSwitch.y)) ? max(2, 2) : (- 28110))), max(2, 2), max(2, 2))));
      }
     else
      {
      }
     if((false))
      barrier();
     if((((true && (bool(bvec3(((! (! (false || (false))))), true, ((((false || (bool(((bvec2(bvec2(bvec2(bvec4(bvec2(injectionSwitch.x < injectionSwitch.y, false), false, true)))))))))))))))))))
      {
       if(true)
        {
         barrier();
         if((false))
          barrier();
         if((true && (true)))
          {
           if((false))
            barrier();
          }
         else
          {
          }
        }
       else
        {
         if(((true && (false))))
          barrier();
         if((false))
          barrier();
        }
       do
        {
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
        }
       while(false);
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(((((true && ((! (! (bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, true)))))))))))
          {
          }
         else
          {
           barrier();
          }
        }
      }
     if((false))
      {
       if(((((((bool((! (! (bool(true && (((mix(float((- 7.8)), float(((injectionSwitch.x) / 1.0)), bool(((injectionSwitch.x < injectionSwitch.y))))) > ((injectionSwitch.y) * 1.0))))))))) && true))))))
        barrier();
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       do
        {
         if(((! (! ((bool(bvec4(false, true, false, false))))))))
          {
           if(true)
            {
             barrier();
            }
           else
            {
            }
          }
        }
       while(false);
       barrier();
      }
     if(((((false || (injectionSwitch.x > (mix(float((mix(vec2((injectionSwitch)[0], (691.995)), vec2(((- 32.44)), (injectionSwitch)[1]), bvec2(false, true))).y), float((45.29)), bool(false)))))))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(false);
       barrier();
      }
     if(((((! (! ((false || (injectionSwitch.x > injectionSwitch.y)))))))))
      {
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         for(int _injected_loop_counter = (0 ^ 0); _injected_loop_counter != 1; _injected_loop_counter ++)
          {
           barrier();
          }
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     subgroupAll(false);
     if((false))
      {
       if((false))
        {
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           barrier();
          }
         else
          {
          }
        }
       barrier();
      }
     if((false))
      {
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if((! ((false || (! (((((((false || ((false || ((float(vec2(injectionSwitch.x, log(1.0)))) > injectionSwitch.y)))))))) && true)))))))
      {
       if((false))
        {
         do
          {
           barrier();
          }
         while(false);
        }
       barrier();
      }
     for(int _injected_loop_counter = 1; _injected_loop_counter != (max(0, 0)); _injected_loop_counter --)
      {
       if(((false || (bool(bool((! ((true && (! ((false))))))))))))
        {
         if((false))
          barrier();
         barrier();
        }
      }
     if((false))
      {
       for(int _injected_loop_counter = 1; _injected_loop_counter > (max(0, 0)); ((_injected_loop_counter --) << 0))
        {
         barrier();
        }
      }
     if(((true && (((injectionSwitch.x > injectionSwitch.y))))))
      barrier();
    }
   else
    {
     for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
      {
       if(false)
        {
         do
          {
           do
            {
             if((false))
              barrier();
            }
           while(false);
          }
         while((! (! ((bool(bvec3(((injectionSwitch.x > injectionSwitch.y)), true, false)))))));
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         do
          {
           if((false))
            barrier();
           if(true)
            {
             buf[next_virtual_gid] = (min(2, (((0 + (2))) - 0)));
             if((false))
              barrier();
            }
           else
            {
             if(false)
              {
              }
             else
              {
               if((false))
                barrier();
              }
            }
           if((! (! ((((injectionSwitch.x > injectionSwitch.y)))))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
          }
         while(((false || (bool(((! (! (true && ((! ((((bool(bvec2(! (bool((bool(bvec2(false, false))))), true))) && true))))))))))))));
        }
      }
     subgroupAll(((((bool(bvec4(! (! (true)), false, false, false)))) && true)));
    }
  }
 else
  {
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
