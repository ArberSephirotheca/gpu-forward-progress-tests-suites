#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

struct _GLF_struct_12 {
 uint _f0;
 vec3 _f1;
} ;

struct _GLF_struct_11 {
 mat2x3 _f0;
 mat3x2 _f1;
 mat2x3 _f2;
} ;

struct _GLF_struct_10 {
 bvec2 _f0;
 bool _f1;
 mat3x2 _f2;
 ivec3 _f3;
} ;

struct _GLF_struct_13 {
 _GLF_struct_10 _f0;
 _GLF_struct_11 _f1;
 uvec2 _f2;
 uvec3 _f3;
 vec3 _f4;
 uvec4 _f5;
 _GLF_struct_12 _f6;
} ;

struct _GLF_struct_8 {
 bvec4 _f0;
 uvec3 _f1;
 mat3 _f2;
} ;

struct _GLF_struct_7 {
 mat3 _f0;
 mat2x4 _f1;
} ;

struct _GLF_struct_9 {
 _GLF_struct_7 _f0;
 _GLF_struct_8 _f1;
} ;

struct _GLF_struct_5 {
 ivec3 _f0;
 vec4 _f1;
 vec3 _f2;
 ivec2 _f3;
} ;

struct _GLF_struct_4 {
 vec2 _f0;
 vec3 _f1;
 vec4 _f2;
 vec4 _f3;
 float _f4;
 int _f5;
} ;

struct _GLF_struct_6 {
 mat2 _f0;
 _GLF_struct_4 _f1;
 _GLF_struct_5 _f2;
} ;

struct _GLF_struct_2 {
 uint _f0;
 uvec2 _f1;
 bvec4 _f2;
} ;

struct _GLF_struct_1 {
 bvec2 _f0;
 int _f1;
 ivec2 _f2;
 uint _f3;
} ;

struct _GLF_struct_0 {
 ivec3 _f0;
 mat4x2 _f1;
 int _f2;
} ;

struct _GLF_struct_3 {
 uint num_workgroup;
 mat3x2 _f0;
 _GLF_struct_0 _f1;
 _GLF_struct_1 _f2;
 _GLF_struct_2 _f3;
} ;

struct _GLF_struct_14 {
 int _f0;
 float _f1;
 _GLF_struct_3 _f2;
 _GLF_struct_6 _f3;
 _GLF_struct_9 _f4;
 _GLF_struct_13 _f5;
} ;

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      {
       if((false))
        barrier();
       if((false))
        barrier();
       barrier();
      }
     for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
      {
       if(false)
        {
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
        }
       else
        {
         barrier();
        }
      }
     if((false))
      barrier();
    }
   if((false))
    barrier();
   if((((false) && ((injectionSwitch.x < injectionSwitch.y)))))
    {
     if(true)
      {
       barrier();
      }
     else
      {
      }
    }
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
     for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
      {
       barrier();
      }
     if((false))
      {
       if(true)
        {
         barrier();
        }
       else
        {
        }
      }
    }
   if((false))
    barrier();
   for(int _injected_loop_counter = (0 ^ 0); _injected_loop_counter < 1; _injected_loop_counter ++)
    {
     for(int _injected_loop_counter = 0; _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
      {
       do
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
      }
    }
   if((false))
    {
     if(true)
      {
       barrier();
      }
     else
      {
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    {
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       if((false))
        barrier();
      }
     barrier();
    }
   if((false))
    barrier();
  }
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       if((false))
        {
         for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
          {
           if((false))
            barrier();
          }
         do
          {
           if((false))
            barrier();
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             barrier();
            }
           else
            {
            }
          }
         while(false);
         if((false))
          barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(((bool(bvec2(false, true)))))
          barrier();
         barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           barrier();
          }
        }
       for(int _injected_loop_counter = (min(0, (clamp(0, 0, 0)))); _injected_loop_counter < 1; _injected_loop_counter ++)
        {
         barrier();
        }
      }
     if((false))
      barrier();
     if(true)
      {
       barrier();
       if((false))
        barrier();
      }
     else
      {
      }
     if(((false) && true))
      {
       if((false))
        barrier();
      }
     else
      {
       if((false))
        {
         if((bool(bvec2(false, true))))
          {
          }
         else
          {
           barrier();
           if((false))
            barrier();
          }
         if((false))
          barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if((false))
      barrier();
    }
   if((false))
    {
     if((false))
      barrier();
     if((false))
      barrier();
     do
      {
       for(int _injected_loop_counter = 0; _injected_loop_counter != (1 ^ int((injectionSwitch.x))); _injected_loop_counter ++)
        {
         barrier();
        }
      }
     while(false);
    }
   if((false))
    barrier();
   if((false))
    barrier();
   for(int _injected_loop_counter = 1; _injected_loop_counter > ((0 >> (int(3))) ^ 0); _injected_loop_counter --)
    {
     do
      {
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         barrier();
        }
      }
     while(false);
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(false)
        {
        }
       else
        {
         barrier();
        }
      }
     do
      {
       do
        {
         if((false))
          {
           if(((! (! (false)))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(true)
              {
               if((false))
                barrier();
               if((false))
                barrier();
               for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
                {
                 if((false))
                  barrier();
                }
               if((false))
                {
                 if(false)
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
              }
             else
              {
              }
             barrier();
             if((false))
              barrier();
            }
           barrier();
          }
         if(((! ((false || (! (false)))))))
          barrier();
        }
       while(false);
       if((false))
        barrier();
       barrier();
       if((false))
        barrier();
      }
     while(false);
    }
  }
 if((false))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if((false))
  {
   do
    {
     if((false))
      barrier();
     if(true)
      {
       barrier();
      }
     else
      {
      }
    }
   while(false);
  }
 if((false))
  {
   do
    {
     barrier();
    }
   while(false);
  }
 if((false))
  {
   if((false))
    barrier();
   if((false))
    {
     do
      {
       barrier();
      }
     while(false);
    }
   if((false))
    barrier();
   if((((false) || false)))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if((false))
      barrier();
    }
   barrier();
  }
 do
  {
   if((false))
    barrier();
   if((false))
    barrier();
  }
 while(((injectionSwitch.x > injectionSwitch.y)));
 if((false))
  barrier();
 if((false))
  {
   if(((! (! (false)))))
    barrier();
   barrier();
  }
 do
  {
   for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < ((1 << (int(0))) >> ((min(int(0), int(0))))); _injected_loop_counter ++)
    {
     if(((true && (false))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if((false))
      barrier();
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if((false))
        {
         for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
          {
           barrier();
           if((false))
            {
             if((false))
              barrier();
             barrier();
            }
           if(((bool(bool(false)))))
            barrier();
           if((false))
            barrier();
          }
         if((false))
          {
           if((false))
            barrier();
           if((false))
            barrier();
           barrier();
          }
        }
       if((false))
        barrier();
      }
     else
      {
       if(false)
        {
        }
       else
        {
         if((false))
          barrier();
        }
      }
     if(((! (! (false)))))
      {
       for(int _injected_loop_counter = 1; _injected_loop_counter > (0 >> (int(8))); _injected_loop_counter --)
        {
         if((false))
          {
           for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
            {
             if(true)
              {
               if((false))
                barrier();
              }
             else
              {
              }
            }
           barrier();
          }
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           if((false))
            barrier();
          }
         else
          {
          }
        }
       if((false))
        barrier();
       for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
        {
         if((false))
          barrier();
         for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             do
              {
               if((false))
                barrier();
               barrier();
              }
             while(((injectionSwitch.x > injectionSwitch.y)));
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
            }
          }
        }
       if((false))
        barrier();
       if(false)
        {
        }
       else
        {
         if((false))
          barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = (0 ^ 1); _injected_loop_counter != (0 << (int(6))); _injected_loop_counter --)
              {
               barrier();
              }
            }
           barrier();
          }
         if(false)
          {
          }
         else
          {
           barrier();
          }
         if((false))
          barrier();
        }
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           do
            {
             barrier();
             if((false))
              barrier();
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
          }
         else
          {
           if(((false) || false))
            {
            }
           else
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
        }
       do
        {
         for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < 1; _injected_loop_counter ++)
          {
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             if((false))
              {
               do
                {
                 if(false)
                  {
                  }
                 else
                  {
                   if((false))
                    barrier();
                  }
                 if((false))
                  {
                   if((false))
                    barrier();
                   barrier();
                  }
                 if(true)
                  {
                   barrier();
                  }
                 else
                  {
                   if((false))
                    barrier();
                  }
                }
               while(((injectionSwitch.x > injectionSwitch.y)));
              }
             do
              {
               if((false))
                barrier();
              }
             while(((injectionSwitch.x > injectionSwitch.y)));
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if(false)
              {
              }
             else
              {
               barrier();
              }
            }
           if((false))
            barrier();
           barrier();
           do
            {
             if((false))
              barrier();
            }
           while(false);
          }
         if((false))
          barrier();
         if((false))
          barrier();
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
       if((false))
        barrier();
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     if((false))
      barrier();
     do
      {
       if((false))
        barrier();
      }
     while(false);
    }
   if((false))
    barrier();
  }
 while(false);
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(((injectionSwitch.x > injectionSwitch.y)))
  {
  }
 else
  {
   if((false))
    {
     if(((! (! (false)))))
      barrier();
     barrier();
    }
   if((false))
    barrier();
  }
 if((false))
  {
   for(int _injected_loop_counter = (0 & 31496); _injected_loop_counter != (1 | 1); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
 if(((! (! (false)))))
  barrier();
 if((false))
  {
   if(false)
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   else
    {
     do
      {
       if((false))
        barrier();
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
     barrier();
     if((false))
      barrier();
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((false))
  barrier();
 if((false))
  barrier();
 if(false)
  {
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(false)
      {
      }
     else
      {
       for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
        {
         if(false)
          {
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             do
              {
               barrier();
              }
             while(false);
            }
          }
         if((false))
          barrier();
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
         if((false))
          barrier();
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           if((false))
            barrier();
           if((false))
            {
             if((false))
              barrier();
             if(false)
              {
               if((false))
                barrier();
              }
             else
              {
               if((false))
                {
                 do
                  {
                   barrier();
                   if(((true && (((false) || false)))))
                    barrier();
                   if((false))
                    {
                     for(int _injected_loop_counter = ((1 << (int(7))) >> (int(7))); _injected_loop_counter != (0 | 0); _injected_loop_counter --)
                      {
                       barrier();
                      }
                    }
                  }
                 while(((injectionSwitch.x > injectionSwitch.y)));
                }
               if((((false) && true)))
                barrier();
               do
                {
                 if((false))
                  barrier();
                }
               while(false);
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
               if(((bool(bvec2(false, true)))))
                barrier();
              }
             if((false))
              barrier();
            }
          }
         else
          {
           if((false))
            barrier();
          }
         if((false))
          barrier();
         if(false)
          {
          }
         else
          {
           if((false))
            {
             if((false))
              barrier();
             barrier();
            }
           if((false))
            barrier();
          }
        }
      }
     if((false))
      barrier();
     barrier();
    }
  }
 else
  {
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     if((false))
      barrier();
     if((false))
      barrier();
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       if((false))
        {
         do
          {
           if((false))
            {
             if((false))
              barrier();
             barrier();
            }
          }
         while(false);
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           barrier();
          }
         barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if(false)
            {
            }
           else
            {
             barrier();
            }
          }
         if(false)
          {
          }
         else
          {
           barrier();
          }
        }
       if((false))
        {
         if((false))
          barrier();
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((true && (true)))
            {
             barrier();
            }
           else
            {
            }
          }
         if((((bool(bvec3(bool(bool(false)), true, false))))))
          barrier();
         for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
          {
           do
            {
             if((false))
              {
               if((false))
                barrier();
               barrier();
              }
             for(int _injected_loop_counter = (1 & 1); _injected_loop_counter != (0 >> (int(5))); _injected_loop_counter --)
              {
               if(true)
                {
                 barrier();
                }
               else
                {
                }
               if((((false) || false)))
                barrier();
               if((false))
                barrier();
               if((false))
                barrier();
              }
             if((false))
              barrier();
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
          }
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
         if((false))
          barrier();
         if(true)
          {
           if((false))
            {
             for(int _injected_loop_counter = (1 & ((1 << (((int(4)) | (int(4))))) >> (int(4)))); _injected_loop_counter != (0 | 0); _injected_loop_counter --)
              {
               if((false))
                barrier();
               barrier();
               if((false))
                {
                 if((false))
                  barrier();
                 barrier();
                }
              }
            }
          }
         else
          {
          }
         for(int _injected_loop_counter = 0; _injected_loop_counter < (1 & 1); _injected_loop_counter ++)
          {
           if((false))
            {
             do
              {
               barrier();
               if((false))
                barrier();
              }
             while(false);
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if(((injectionSwitch.x < injectionSwitch.y)))
              {
               barrier();
              }
             else
              {
              }
            }
          }
         if(((true && (false))))
          {
           if(true)
            {
             barrier();
            }
           else
            {
            }
          }
        }
       if((false))
        barrier();
       if((false))
        barrier();
       for(int _injected_loop_counter = (1 & 1); _injected_loop_counter > (0 | 0); _injected_loop_counter --)
        {
         if((false))
          {
           if((! (! (((injectionSwitch.x < injectionSwitch.y))))))
            {
             barrier();
            }
           else
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
         if((false))
          {
           for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
            {
             barrier();
            }
          }
         barrier();
         for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > 0; _injected_loop_counter --)
          {
           if((false))
            barrier();
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         barrier();
        }
      }
     if((false))
      barrier();
    }
   else
    {
     if((false))
      barrier();
     if((false))
      barrier();
    }
   if((false))
    barrier();
   if((false))
    {
     if(((bool(bvec4(((injectionSwitch.x > injectionSwitch.y)), true, true, false)))))
      barrier();
     if((false))
      barrier();
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(false)
        {
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(true)
        {
         barrier();
        }
       else
        {
        }
       if((false))
        barrier();
      }
     if((! (! (true))))
      {
       if(false)
        {
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if((false))
        barrier();
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          barrier();
        }
      }
     else
      {
      }
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       for(int _injected_loop_counter = ((1 << (int(3))) >> (int(3))); _injected_loop_counter > 0; _injected_loop_counter --)
        {
         barrier();
        }
       if((false))
        {
         do
          {
           barrier();
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
    }
   if((false))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((false))
    barrier();
  }
 if(false)
  {
   if((false))
    barrier();
   do
    {
     if(false)
      {
      }
     else
      {
       if((false))
        barrier();
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
       if((false))
        barrier();
       if((false))
        barrier();
      }
    }
   while(false);
   do
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(false);
  }
 else
  {
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
  }
 _GLF_struct_14 _GLF_struct_replacement_14 = _GLF_struct_14(1, 1.0, _GLF_struct_3(gl_NumWorkGroups.x, mat3x2(1.0), _GLF_struct_0(ivec3(1), mat4x2(1.0), 1), _GLF_struct_1(bvec2(true), 1, ivec2(1), 1u), _GLF_struct_2(1u, uvec2(1u), bvec4(true))), _GLF_struct_6(mat2(1.0), _GLF_struct_4(vec2(1.0), vec3(1.0), vec4(1.0), vec4(1.0), 1.0, 1), _GLF_struct_5(ivec3(1), vec4(1.0), vec3(1.0), ivec2(1))), _GLF_struct_9(_GLF_struct_7(mat3(1.0), mat2x4(1.0)), _GLF_struct_8(bvec4(true), uvec3(1u), mat3(1.0))), _GLF_struct_13(_GLF_struct_10(bvec2(true), true, mat3x2(1.0), ivec3(1)), _GLF_struct_11(mat2x3(1.0), mat3x2(1.0), mat2x3(1.0)), uvec2(1u), uvec3(1u), vec3(1.0), uvec4(1u), _GLF_struct_12(1u, vec3(1.0))));
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 if((false))
  barrier();
 if((false))
  barrier();
 if(false)
  {
  }
 else
  {
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 do
  {
   if((false))
    barrier();
   for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(true)
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           barrier();
          }
         else
          {
          }
        }
       barrier();
      }
    }
   else
    {
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     do
      {
       barrier();
      }
     while(false);
     if(false)
      {
       if((false))
        barrier();
      }
     else
      {
       if((false))
        barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
     if((false))
      barrier();
    }
   else
    {
     if((false))
      barrier();
     if((((false) && true)))
      {
       if((false))
        barrier();
       for(int _injected_loop_counter = 0; _injected_loop_counter != (int((injectionSwitch.x)) | 1); _injected_loop_counter ++)
        {
         barrier();
        }
      }
    }
  }
 while(false);
 if(false)
  {
  }
 else
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(false)
      {
       if((false))
        barrier();
       if((false))
        barrier();
      }
     else
      {
       if((false))
        {
         do
          {
           barrier();
          }
         while(false);
        }
       if((false))
        {
         do
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              barrier();
             for(int _injected_loop_counter = 0; _injected_loop_counter < ((1 << ((((max(int(3), int(3)))) >> 0))) >> (int(3))); _injected_loop_counter ++)
              {
               barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
            }
          }
         while(false);
         if((false))
          barrier();
         if(true)
          {
           if((false))
            barrier();
           barrier();
          }
         else
          {
          }
        }
      }
     do
      {
       if((false))
        barrier();
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     while(false);
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        {
         for(int _injected_loop_counter = 0; _injected_loop_counter < ((1 << (((int(2)) ^ 0))) >> (int(2))); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       barrier();
      }
     if(true)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
      }
    }
  }
 do
  {
   if(true)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        {
         do
          {
           do
            {
             do
              {
               if((false))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
               if((false))
                barrier();
               if(true)
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               else
                {
                }
               if((false))
                barrier();
               if((false))
                barrier();
              }
             while(false);
            }
           while(false);
          }
         while(false);
         if((false))
          {
           if(false)
            {
            }
           else
            {
             barrier();
            }
          }
         if((false))
          barrier();
         if((false))
          barrier();
         for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
          {
           if((false))
            {
             do
              {
               if(((false) && true))
                {
                }
               else
                {
                 for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
                  {
                   if(((injectionSwitch.x > injectionSwitch.y)))
                    {
                    }
                   else
                    {
                     barrier();
                    }
                  }
                }
              }
             while(false);
             if((false))
              barrier();
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(true)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
       do
        {
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         for(int _injected_loop_counter = 1; _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
          {
           do
            {
             barrier();
             if(true)
              {
               if((false))
                {
                 if((false))
                  barrier();
                 if((false))
                  {
                   if((false))
                    barrier();
                   barrier();
                  }
                 barrier();
                }
              }
             else
              {
              }
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
          }
         if((false))
          {
           if(true)
            {
             barrier();
            }
           else
            {
            }
          }
        }
       while((((true && (false))) || false));
       if((false))
        barrier();
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           do
            {
             if((false))
              barrier();
            }
           while(false);
           barrier();
           if((false))
            {
             do
              {
               barrier();
              }
             while(((injectionSwitch.x > injectionSwitch.y)));
            }
          }
         else
          {
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     if((false))
      {
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         barrier();
        }
       else
        {
        }
      }
    }
   else
    {
    }
  }
 while(false);
 uint workgroup_base = workgroup_size * workgroup_id;
 if((((((injectionSwitch.x > injectionSwitch.y))) || false)))
  barrier();
 for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
  {
   do
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
      {
       if((false))
        barrier();
       if((false))
        {
         do
          {
           if(false)
            {
            }
           else
            {
             barrier();
            }
           if((false))
            barrier();
          }
         while(false);
        }
       if(false)
        {
        }
       else
        {
         if((false))
          {
           do
            {
             if((false))
              barrier();
            }
           while(false);
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             barrier();
             if((false))
              barrier();
            }
           else
            {
            }
           if((false))
            barrier();
          }
        }
      }
     if(false)
      {
       if((false))
        barrier();
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         do
          {
           if(false)
            {
            }
           else
            {
             if((false))
              {
               for(int _injected_loop_counter = (1 | (1 ^ 1)); _injected_loop_counter != 0; _injected_loop_counter --)
                {
                 barrier();
                 if((false))
                  {
                   for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > 0; _injected_loop_counter --)
                    {
                     barrier();
                    }
                  }
                }
              }
            }
          }
         while(false);
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(false)
          {
          }
         else
          {
           do
            {
             for(int _injected_loop_counter = 1; _injected_loop_counter > (0 ^ (0)); _injected_loop_counter --)
              {
               if(((bool(bvec3(false, true, true)))))
                {
                 if((false))
                  barrier();
                 barrier();
                }
              }
            }
           while(false);
          }
         if(true)
          {
           if((false))
            {
             if((false))
              barrier();
             barrier();
            }
          }
         else
          {
          }
         if((false))
          barrier();
         barrier();
        }
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if(true)
            {
             if(((! (! (false)))))
              barrier();
            }
           else
            {
            }
           if(true)
            {
             barrier();
            }
           else
            {
            }
           if((false))
            barrier();
          }
        }
       else
        {
        }
       if((false))
        barrier();
       if((false))
        {
         if(false)
          {
           if((false))
            barrier();
          }
         else
          {
           if((false))
            barrier();
          }
         barrier();
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         do
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            barrier();
           barrier();
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             if((false))
              barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
              {
               barrier();
               if(((bool(bvec2(false, true)))))
                barrier();
              }
            }
          }
         while((false || (false)));
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(false)
          {
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
            }
          }
         else
          {
           barrier();
          }
        }
       if((false))
        barrier();
       return;
       if((false))
        barrier();
       if((false))
        {
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           barrier();
          }
         else
          {
          }
        }
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
      }
     if(false)
      {
       if((false))
        barrier();
      }
     else
      {
       if(false)
        {
         if((false))
          barrier();
        }
       else
        {
         if(((false || (false))))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           barrier();
          }
        }
      }
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     if(true)
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if(((bool(bool((! (! (false))))))))
            barrier();
           barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
          {
           if((false))
            {
             if((false))
              barrier();
             barrier();
            }
          }
         barrier();
         if((false))
          {
           if((((false) && true)))
            barrier();
           barrier();
          }
        }
      }
     else
      {
      }
    }
   while(false);
  }
 if(((injectionSwitch.x < injectionSwitch.y)))
  {
   if(true)
    {
     if(true)
      {
       if((false))
        {
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           barrier();
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
      }
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
    }
  }
 else
  {
   if((false))
    {
     if((false))
      barrier();
     barrier();
     if((false))
      barrier();
    }
  }
 if((false))
  barrier();
 if((false))
  {
   if(true)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
    }
   if((false))
    {
     if(false)
      {
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           barrier();
          }
         while(false);
        }
      }
     barrier();
    }
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(false)
      {
      }
     else
      {
       barrier();
      }
    }
   barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
  {
   if(((true && (false))))
    barrier();
  }
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    {
     if((false))
      barrier();
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if((false))
    barrier();
   barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
  {
   if((false))
    barrier();
  }
 if((false))
  {
   do
    {
     for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < 1; _injected_loop_counter ++)
      {
       if((false))
        {
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           barrier();
          }
        }
       if(((bool(bool(false)))))
        {
         do
          {
           if(((bool(bvec2(false, false)))))
            barrier();
           barrier();
          }
         while(false);
        }
       for(int _injected_loop_counter = 0; _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
        {
         if((false))
          barrier();
         barrier();
        }
      }
    }
   while(false);
   if((false))
    barrier();
  }
 if((false))
  {
   if(true)
    {
     if((false))
      barrier();
     if(true)
      {
       if((false))
        {
         for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
          {
           if((false))
            barrier();
           barrier();
          }
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if((false))
          barrier();
        }
      }
     else
      {
      }
     if((false))
      barrier();
     if(true)
      {
       for(int _injected_loop_counter = 1; _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
        {
         if((false))
          barrier();
         if((false))
          {
           if(false)
            {
            }
           else
            {
             barrier();
            }
          }
         if(((bool(bvec2(false, true)))))
          {
           if((false))
            {
             for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
              {
               barrier();
              }
            }
           do
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          barrier();
        }
      }
     else
      {
      }
     if((false))
      barrier();
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if((false))
      barrier();
     barrier();
    }
   else
    {
     for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != (~ (~ ((((1 & (1 & 1))) ^ 0)))); _injected_loop_counter ++)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(false)
          {
          }
         else
          {
           barrier();
          }
        }
      }
    }
   if(true)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        {
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           barrier();
          }
         else
          {
          }
        }
       barrier();
      }
     if((false))
      barrier();
     if(true)
      {
       if((false))
        {
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           barrier();
          }
         else
          {
           if((false))
            barrier();
          }
        }
      }
     else
      {
      }
    }
   else
    {
    }
  }
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != 1; _injected_loop_counter ++)
  {
   if((false))
    barrier();
  }
 do
  {
   do
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
   if((false))
    barrier();
  }
 while(false);
 if((false))
  barrier();
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size);
 if(true)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       if(false)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(((false) || ((injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if((false))
              barrier();
             for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != (1 & 1); _injected_loop_counter ++)
              {
               barrier();
              }
            }
          }
         if((false))
          {
           for(int _injected_loop_counter = (1 ^ (0 >> (int(4)))); _injected_loop_counter != 0; _injected_loop_counter --)
            {
             barrier();
            }
          }
        }
       else
        {
         if(false)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
           if((false))
            {
             for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < 1; _injected_loop_counter ++)
              {
               if((false))
                barrier();
               if(((injectionSwitch.x < injectionSwitch.y)))
                {
                 if(((injectionSwitch.x > injectionSwitch.y)))
                  {
                  }
                 else
                  {
                   if(true)
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                   else
                    {
                     if(((! (! (false)))))
                      {
                       if(false)
                        {
                        }
                       else
                        {
                         barrier();
                        }
                      }
                    }
                  }
                }
               else
                {
                }
               barrier();
              }
            }
          }
         if((false))
          {
           if((! (((! (true)) || false))))
            {
             if((false))
              {
               for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                {
                 barrier();
                }
              }
            }
           else
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               do
                {
                 barrier();
                }
               while(((false) || false));
              }
             if((false))
              barrier();
            }
           barrier();
          }
        }
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       do
        {
         if((false))
          {
           if(false)
            {
            }
           else
            {
             barrier();
            }
           if((false))
            barrier();
          }
         if(true)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = (min(0, 0)); _injected_loop_counter < (0 ^ 1); _injected_loop_counter ++)
              {
               barrier();
              }
            }
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             if((false))
              {
               if((false))
                barrier();
               if((false))
                barrier();
               if(false)
                {
                }
               else
                {
                 if((false))
                  {
                   if((false))
                    barrier();
                   for(int _injected_loop_counter = (0 | 0); _injected_loop_counter < 1; _injected_loop_counter ++)
                    {
                     if(((injectionSwitch.x > injectionSwitch.y)))
                      {
                      }
                     else
                      {
                       if((false))
                        barrier();
                       barrier();
                       if((false))
                        barrier();
                      }
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                  }
                }
               for(int _injected_loop_counter = 1; _injected_loop_counter > (- 11284 & 0); _injected_loop_counter --)
                {
                 do
                  {
                   barrier();
                  }
                 while(((injectionSwitch.x > injectionSwitch.y)));
                }
              }
            }
           else
            {
             if(((injectionSwitch.x < injectionSwitch.y)))
              {
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
                    {
                     barrier();
                    }
                  }
                 barrier();
                }
              }
             else
              {
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
         else
          {
           if((((false) && true)))
            {
             if(true)
              {
               if((((false) || false)))
                barrier();
              }
             else
              {
              }
             barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         barrier();
         if((false))
          barrier();
         if(((! ((bool(bvec2(! (false), true)))))))
          barrier();
         if(((bool(bvec2(false, false)))))
          barrier();
         if((false))
          barrier();
         if((false))
          {
           for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != 1; _injected_loop_counter ++)
            {
             if(((injectionSwitch.x < injectionSwitch.y)))
              {
               barrier();
              }
             else
              {
              }
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       while(false);
       do
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          barrier();
         if((false))
          barrier();
        }
       while(false);
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if((false))
    barrier();
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
   if((false))
    {
     if(true)
      {
       barrier();
      }
     else
      {
      }
    }
   for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
    {
     if((false))
      barrier();
     if((false))
      barrier();
     if((false))
      barrier();
    }
  }
 if((false))
  barrier();
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   do
    {
     if((false))
      barrier();
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
   for(int _injected_loop_counter = 1; _injected_loop_counter != (0 << (((false ? (- 95093) : int(0))))); _injected_loop_counter --)
    {
     if((false))
      barrier();
     for(int _injected_loop_counter = (0 | int((injectionSwitch.x))); _injected_loop_counter < 1; _injected_loop_counter ++)
      {
       do
        {
         if((false))
          barrier();
         barrier();
        }
       while(false);
      }
    }
  }
 if(true)
  {
   if((false))
    barrier();
   buf[virtual_gid] = 1;
   if((((false) && true)))
    barrier();
  }
 else
  {
  }
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if(((injectionSwitch.x > injectionSwitch.y)))
  {
  }
 else
  {
   for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > 0; _injected_loop_counter --)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 do
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((false))
    {
     if(true)
      {
       for(int _injected_loop_counter = ((true ? 1 : ((46301 ^ - 24806)))); _injected_loop_counter > 0; _injected_loop_counter --)
        {
         if((false))
          barrier();
         barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if(false)
          {
          }
         else
          {
           if(((! (! (false)))))
            barrier();
           if((! ((bool(bvec4(! (true), true, false, true))))))
            {
             if((false))
              {
               if((false))
                barrier();
               for(int _injected_loop_counter = 1; _injected_loop_counter > (0 | 0); _injected_loop_counter --)
                {
                 barrier();
                }
               if((false))
                barrier();
              }
            }
           else
            {
            }
          }
        }
       else
        {
        }
       if((false))
        {
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           barrier();
          }
         barrier();
        }
       if((false))
        barrier();
       if((false))
        {
         for(int _injected_loop_counter = (int((clamp(ivec2(0, 1), ivec2(0, 1), ivec2(0, 1))))); _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
          {
           barrier();
          }
        }
      }
     else
      {
       if((false))
        {
         for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
          {
           barrier();
          }
        }
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(false)
          {
          }
         else
          {
           barrier();
          }
         if(((bool(bvec3(false, false, false)))))
          barrier();
         if((false))
          barrier();
        }
      }
     if(((false || (false))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   if(((bool(bvec4(false, false, false, false)))))
    barrier();
   if((false))
    {
     do
      {
       if((false))
        barrier();
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
     if(((bool(bvec2(false, true)))))
      {
       if(true)
        {
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
              }
             else
              {
               barrier();
              }
            }
           if((false))
            barrier();
           barrier();
           if((false))
            {
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
              }
             else
              {
               barrier();
              }
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
       if((false))
        barrier();
       if(false)
        {
        }
       else
        {
         if(false)
          {
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(false)
        {
        }
       else
        {
         barrier();
        }
       if((false))
        {
         if((false))
          barrier();
         for(int _injected_loop_counter = 1; _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if(((false || (((injectionSwitch.x > injectionSwitch.y))))))
              barrier();
             for(int _injected_loop_counter = (0 ^ 0); _injected_loop_counter != 1; _injected_loop_counter ++)
              {
               barrier();
              }
            }
           barrier();
           if((false))
            barrier();
          }
        }
       if(((bool((bool(bvec2(bool(false), true)))))))
        barrier();
      }
     if((false))
      {
       if((false))
        barrier();
       do
        {
         barrier();
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       barrier();
      }
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
        {
         barrier();
        }
      }
     do
      {
       if(false)
        {
         if((false))
          barrier();
        }
       else
        {
         if(((true && (false))))
          barrier();
        }
      }
     while(false);
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    {
     if((false))
      barrier();
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((true && (true)))
          {
           barrier();
          }
         else
          {
          }
        }
       barrier();
       if((false))
        barrier();
      }
     barrier();
    }
   if(false)
    {
    }
   else
    {
     if((false))
      barrier();
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(true)
    {
     if(true)
      {
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        {
         if(true)
          {
           barrier();
          }
         else
          {
          }
         if((false))
          barrier();
        }
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         if((false))
          barrier();
        }
       if(true)
        {
         if((false))
          {
           for(int _injected_loop_counter = (min(((0) ^ 0), 0)); _injected_loop_counter < 1; _injected_loop_counter ++)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             if(((! (! (false)))))
              {
               if((false))
                barrier();
               for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                {
                 if(true)
                  {
                   for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                    {
                     for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
                      {
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                      }
                     for(int _injected_loop_counter = 1; _injected_loop_counter != (0 >> (int(0))); _injected_loop_counter --)
                      {
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        {
                         if((false))
                          barrier();
                         barrier();
                        }
                      }
                     barrier();
                     if(false)
                      {
                       if((false))
                        {
                         if((false))
                          barrier();
                         barrier();
                        }
                      }
                     else
                      {
                       if((false))
                        barrier();
                       if((false))
                        {
                         do
                          {
                           barrier();
                          }
                         while(false);
                        }
                       do
                        {
                         do
                          {
                           do
                            {
                             if((((injectionSwitch.x > injectionSwitch.y))))
                              barrier();
                             if((false))
                              {
                               if((false))
                                barrier();
                               if((false))
                                barrier();
                               if((false))
                                barrier();
                               barrier();
                              }
                            }
                           while(false);
                           if(true)
                            {
                             if((false))
                              barrier();
                             for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                              {
                               if((false))
                                barrier();
                              }
                             if((false))
                              {
                               if((false))
                                {
                                 do
                                  {
                                   barrier();
                                  }
                                 while(false);
                                }
                               if((false))
                                barrier();
                               if((false))
                                barrier();
                               if((false))
                                barrier();
                               do
                                {
                                 for(int _injected_loop_counter = (1 | 1); _injected_loop_counter > ((0 << (int(4))) >> (int(5))); _injected_loop_counter --)
                                  {
                                   do
                                    {
                                     if((false))
                                      barrier();
                                     if(true)
                                      {
                                       if(((bool(bvec2(false, ((injectionSwitch.x < injectionSwitch.y)))))))
                                        barrier();
                                      }
                                     else
                                      {
                                      }
                                    }
                                   while(((injectionSwitch.x > injectionSwitch.y)));
                                   if((false))
                                    barrier();
                                   if((((injectionSwitch.x > injectionSwitch.y))))
                                    {
                                     if((false))
                                      barrier();
                                     do
                                      {
                                       barrier();
                                      }
                                     while(((injectionSwitch.x > injectionSwitch.y)));
                                     if((((injectionSwitch.x > injectionSwitch.y))))
                                      barrier();
                                    }
                                   if((false))
                                    {
                                     if((false))
                                      barrier();
                                     barrier();
                                    }
                                  }
                                 if((false))
                                  {
                                   if((false))
                                    barrier();
                                   barrier();
                                  }
                                 if((false))
                                  {
                                   if((false))
                                    barrier();
                                   barrier();
                                  }
                                }
                               while(false);
                               if((false))
                                {
                                 if((false))
                                  barrier();
                                 if((false))
                                  {
                                   if((false))
                                    barrier();
                                   barrier();
                                  }
                                 if((false))
                                  barrier();
                                 if(((injectionSwitch.x < injectionSwitch.y)))
                                  {
                                   if((false))
                                    barrier();
                                   barrier();
                                  }
                                 else
                                  {
                                  }
                                }
                               do
                                {
                                 if((((false) && true)))
                                  barrier();
                                }
                               while(((injectionSwitch.x > injectionSwitch.y)));
                               for(int _injected_loop_counter = ((1) - 0); _injected_loop_counter > 0; _injected_loop_counter --)
                                {
                                 if(true)
                                  {
                                   if((false))
                                    barrier();
                                   if((false))
                                    {
                                     if((((injectionSwitch.x > injectionSwitch.y))))
                                      barrier();
                                     if(false)
                                      {
                                      }
                                     else
                                      {
                                       barrier();
                                      }
                                    }
                                  }
                                 else
                                  {
                                  }
                                 if((((injectionSwitch.x > injectionSwitch.y))))
                                  barrier();
                                }
                               barrier();
                               do
                                {
                                 if(((bool(bool(false)))))
                                  barrier();
                                }
                               while(false);
                              }
                             if((((false) && true)))
                              {
                               if((false))
                                barrier();
                               if((((injectionSwitch.x > injectionSwitch.y))))
                                barrier();
                               barrier();
                              }
                            }
                           else
                            {
                             if(((injectionSwitch.x > injectionSwitch.y)))
                              {
                              }
                             else
                              {
                               if((false))
                                barrier();
                              }
                             if((((injectionSwitch.x > injectionSwitch.y))))
                              {
                               if((false))
                                barrier();
                               barrier();
                              }
                             if((((injectionSwitch.x > injectionSwitch.y))))
                              barrier();
                            }
                          }
                         while(((injectionSwitch.x > injectionSwitch.y)));
                        }
                       while(false);
                       if((false))
                        barrier();
                      }
                    }
                  }
                 else
                  {
                  }
                 if((false))
                  barrier();
                 if((false))
                  {
                   if(((injectionSwitch.x < injectionSwitch.y)))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                 if((false))
                  barrier();
                }
              }
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(true)
            {
             if((false))
              {
               for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               if((false))
                {
                 if(false)
                  {
                  }
                 else
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    {
                     if((false))
                      {
                       do
                        {
                         barrier();
                        }
                       while(false);
                      }
                     barrier();
                    }
                  }
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                 if((false))
                  barrier();
                }
               if((false))
                {
                 if(false)
                  {
                  }
                 else
                  {
                   barrier();
                  }
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if((false))
                  {
                   for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
                    {
                     barrier();
                    }
                  }
                }
               for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
                {
                 barrier();
                }
              }
            }
           else
            {
             if((false))
              barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            {
             if((false))
              {
               do
                {
                 for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
                  {
                   barrier();
                  }
                }
               while(false);
              }
             if((false))
              barrier();
             barrier();
             if((false))
              barrier();
            }
           for(int _injected_loop_counter = (0 | 0); _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
            {
             do
              {
               barrier();
              }
             while(false);
            }
          }
        }
       else
        {
        }
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         if(true)
          {
           if((false))
            {
             do
              {
               if((false))
                barrier();
               if(false)
                {
                 do
                  {
                   if(true)
                    {
                     if((false))
                      barrier();
                     if((false))
                      {
                       if((false))
                        barrier();
                       if((false))
                        barrier();
                       barrier();
                      }
                    }
                   else
                    {
                    }
                  }
                 while(((injectionSwitch.x > injectionSwitch.y)));
                 do
                  {
                   if((false))
                    barrier();
                  }
                 while(((injectionSwitch.x > injectionSwitch.y)));
                }
               else
                {
                 if(((injectionSwitch.x < injectionSwitch.y)))
                  {
                   if((false))
                    barrier();
                   if(true)
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                 else
                  {
                  }
                 if((false))
                  barrier();
                }
              }
             while(false);
             if(false)
              {
              }
             else
              {
               if((false))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((false))
                  barrier();
                 barrier();
                }
              }
            }
           if((false))
            barrier();
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       if((false))
        barrier();
      }
     else
      {
       if(false)
        {
        }
       else
        {
         if((false))
          {
           for(int _injected_loop_counter = 0; _injected_loop_counter != ((1 << (int(5))) >> (((((int(5)) | 0)) | (int(5))))); _injected_loop_counter ++)
            {
             if((false))
              barrier();
             if((false))
              {
               if((false))
                barrier();
               barrier();
              }
             if((false))
              barrier();
             barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        {
         if((false))
          barrier();
         if((false))
          barrier();
         barrier();
        }
       if((false))
        {
         do
          {
           if((false))
            barrier();
           barrier();
          }
         while(false);
        }
      }
     if((false))
      {
       if((false))
        {
         if(true)
          {
           barrier();
          }
         else
          {
          }
        }
       if((false))
        barrier();
       do
        {
         barrier();
         if((false))
          barrier();
        }
       while(false);
      }
     if((false))
      {
       if((false))
        barrier();
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   else
    {
    }
   if(((! (! (false)))))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   if((((false) && true)))
    barrier();
  }
 while(((injectionSwitch.x > injectionSwitch.y)));
 if(false)
  {
   if(true)
    {
     if((false))
      barrier();
     if(false)
      {
      }
     else
      {
       do
        {
         if((false))
          {
           if((false))
            barrier();
           if(false)
            {
            }
           else
            {
             if((false))
              barrier();
             if(((bool(bvec2((bool(bvec4(false, false, true, false))), true)))))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 do
                  {
                   if((false))
                    {
                     do
                      {
                       if(false)
                        {
                        }
                       else
                        {
                         do
                          {
                           barrier();
                           if((((injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                          }
                         while(false);
                        }
                      }
                     while(((injectionSwitch.x > injectionSwitch.y)));
                     if((false))
                      barrier();
                    }
                   barrier();
                  }
                 while(false);
                }
               if((false))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
             if((false))
              barrier();
             if((false))
              {
               do
                {
                 barrier();
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   for(int _injected_loop_counter = (0 ^ (((0 | 1) << (int(3))) >> (int(3)))); _injected_loop_counter != ((94596 & 0) >> (int(8))); _injected_loop_counter --)
                    {
                     barrier();
                    }
                  }
                }
               while(((injectionSwitch.x > injectionSwitch.y)));
              }
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if((false))
          barrier();
         if((false))
          {
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
           if((false))
            barrier();
          }
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
      }
    }
   else
    {
    }
   if((false))
    barrier();
   if((false))
    barrier();
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     if(true)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        {
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           if((false))
            {
             if((false))
              barrier();
             barrier();
            }
           barrier();
          }
        }
       if((false || (true)))
        {
         if((false))
          {
           do
            {
             if(((! (! (false)))))
              barrier();
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
           if(false)
            {
             if((false))
              barrier();
            }
           else
            {
             if((false))
              barrier();
            }
           barrier();
          }
        }
       else
        {
        }
       if((false))
        barrier();
      }
     else
      {
      }
    }
   else
    {
    }
   if(true)
    {
     if(((true && (false))))
      {
       do
        {
         do
          {
           for(int _injected_loop_counter = 1; _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
            {
             if((false))
              barrier();
             if(false)
              {
               if((false))
                barrier();
              }
             else
              {
               for(int _injected_loop_counter = 0; _injected_loop_counter != (((1 | 1) << (int(7))) >> (((int(7)) / 1))); _injected_loop_counter ++)
                {
                 barrier();
                }
              }
             if((false))
              barrier();
             if(((bool(bvec2(false, false)))))
              {
               if((false))
                barrier();
               barrier();
              }
             for(int _injected_loop_counter = 0; _injected_loop_counter < (1 & 1); _injected_loop_counter ++)
              {
               if((false))
                barrier();
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if((false))
                    barrier();
                   barrier();
                  }
                 barrier();
                 if((false))
                  barrier();
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               do
                {
                 if((false))
                  {
                   if((false))
                    barrier();
                   if((((false) || false)))
                    {
                     if((false))
                      barrier();
                     if(false)
                      {
                       if((false))
                        barrier();
                      }
                     else
                      {
                       if((false))
                        barrier();
                       barrier();
                      }
                    }
                   barrier();
                  }
                }
               while(false);
               if((false))
                barrier();
               if(((false || (false))))
                {
                 if((false))
                  {
                   for(int _injected_loop_counter = (0 >> (((int(4)) << 0))); _injected_loop_counter < ((1 << (int(2))) >> (int(2))); _injected_loop_counter ++)
                    {
                     barrier();
                    }
                  }
                 if((bool(bvec3(true, false, false))))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             barrier();
            }
          }
        }
       while((! (! ((bool(bvec4(false, false, true, true)))))));
       if((false))
        barrier();
       if((false))
        barrier();
      }
     if((((false) || false)))
      barrier();
    }
   else
    {
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
    }
   if((false))
    barrier();
   if(((false || (false))))
    barrier();
   do
    {
     if((false))
      {
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         if(false)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           do
            {
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(((injectionSwitch.x < injectionSwitch.y)))
                {
                 barrier();
                }
               else
                {
                }
              }
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
          }
         else
          {
           barrier();
           if((false))
            barrier();
           if((false))
            barrier();
          }
        }
       if((false))
        barrier();
      }
    }
   while((! (! (false))));
  }
 else
  {
   for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != (1 | 1); _injected_loop_counter ++)
    {
     do
      {
       if(false)
        {
        }
       else
        {
         if((false))
          barrier();
        }
       if((false))
        barrier();
       if(true)
        {
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if(((injectionSwitch.x < injectionSwitch.y)))
              {
               barrier();
              }
             else
              {
              }
            }
           barrier();
          }
         do
          {
           if(false)
            {
            }
           else
            {
             if((false))
              barrier();
            }
          }
         while(false);
        }
       else
        {
         if((false))
          barrier();
        }
      }
     while(false);
     for(int _injected_loop_counter = (0 ^ 1); _injected_loop_counter > (0 | 0); _injected_loop_counter --)
      {
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(subgroup_local_id + 1 < subgroup_size)
          {
           if((false))
            {
             if(true)
              {
               barrier();
              }
             else
              {
              }
            }
           if((false))
            {
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if((false))
                {
                 if((false))
                  barrier();
                 barrier();
                }
               barrier();
              }
             barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if(((((false || (false))) || false)))
              {
               if((false))
                barrier();
               barrier();
              }
             if(false)
              {
              }
             else
              {
               if((false))
                barrier();
               if((false))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((false))
                  barrier();
                 barrier();
                }
              }
             if((false))
              barrier();
             barrier();
            }
           do
            {
             if((false))
              barrier();
             do
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             while(false);
             if((false))
              barrier();
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
               if((false))
                barrier();
              }
             else
              {
               if((false))
                {
                 if((false))
                  barrier();
                 barrier();
                }
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               do
                {
                 barrier();
                }
               while(((injectionSwitch.x > injectionSwitch.y)));
              }
             if((false))
              barrier();
             if((false))
              barrier();
             do
              {
               if(false)
                {
                 if((false))
                  barrier();
                }
               else
                {
                 if((false))
                  barrier();
                 buf[next_virtual_gid] = 2;
                }
              }
             while(false);
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
           do
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           while(false);
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(false)
            {
            }
           else
            {
             if((false))
              barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           for(int _injected_loop_counter = 1; _injected_loop_counter > (0 >> (int(1))); _injected_loop_counter --)
            {
             if((false))
              {
               if(((false || (false))))
                {
                 for(int _injected_loop_counter = (0 >> (int(1))); _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
                  {
                   barrier();
                  }
                }
               barrier();
              }
             if(((injectionSwitch.x < injectionSwitch.y)))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             else
              {
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if(((injectionSwitch.x < injectionSwitch.y)))
                {
                 barrier();
                 if((false))
                  barrier();
                 if((false))
                  barrier();
                }
               else
                {
                 for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
                  {
                   if((false))
                    barrier();
                  }
                }
              }
             subgroupAll(false);
            }
          }
         else
          {
           if(true)
            {
             if((false))
              barrier();
            }
           else
            {
            }
           for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                barrier();
               barrier();
              }
             if((false))
              barrier();
            }
           if((false))
            barrier();
           if(((true && (false))))
            barrier();
           if(false)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
             if((false))
              barrier();
             if((false))
              {
               if((false))
                barrier();
               barrier();
              }
            }
           if(false)
            {
            }
           else
            {
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
              }
             else
              {
               if((false))
                barrier();
               if(false)
                {
                }
               else
                {
                 for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                  {
                   if(false)
                    {
                    }
                   else
                    {
                     do
                      {
                       if((false))
                        {
                         if((false))
                          barrier();
                         if((false))
                          {
                           if((false))
                            barrier();
                           barrier();
                           if((false))
                            barrier();
                          }
                         barrier();
                         if((false))
                          barrier();
                        }
                       if((false))
                        {
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          {
                           do
                            {
                             barrier();
                            }
                           while(((injectionSwitch.x > injectionSwitch.y)));
                          }
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          {
                           if((false))
                            {
                             if((((injectionSwitch.x > injectionSwitch.y))))
                              barrier();
                             barrier();
                            }
                           for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
                            {
                             if((false))
                              {
                               if(((injectionSwitch.x < injectionSwitch.y)))
                                {
                                 if((false))
                                  barrier();
                                 if((false))
                                  barrier();
                                 barrier();
                                }
                               else
                                {
                                }
                               if((false))
                                barrier();
                              }
                            }
                           if(((bool(bool(((injectionSwitch.x > injectionSwitch.y)))))))
                            barrier();
                           if((false))
                            barrier();
                           barrier();
                          }
                         if((! (! (((injectionSwitch.x > injectionSwitch.y))))))
                          {
                          }
                         else
                          {
                           do
                            {
                             if(true)
                              {
                               if((false))
                                barrier();
                               if((false))
                                {
                                 do
                                  {
                                   barrier();
                                   if((false))
                                    barrier();
                                  }
                                 while(((injectionSwitch.x > injectionSwitch.y)));
                                 if(((! (! (false)))))
                                  {
                                   if((false))
                                    barrier();
                                   barrier();
                                  }
                                }
                              }
                             else
                              {
                              }
                             if((false))
                              {
                               if((((injectionSwitch.x > injectionSwitch.y))))
                                barrier();
                               barrier();
                               if((false))
                                barrier();
                              }
                             barrier();
                            }
                           while(((injectionSwitch.x > injectionSwitch.y)));
                           if((((injectionSwitch.x > injectionSwitch.y))))
                            {
                             do
                              {
                               barrier();
                              }
                             while(false);
                            }
                           if((false))
                            {
                             if((false))
                              {
                               if((((injectionSwitch.x > injectionSwitch.y))))
                                barrier();
                               barrier();
                              }
                             barrier();
                            }
                          }
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          {
                           if(true)
                            {
                             if((false))
                              barrier();
                             for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
                              {
                               barrier();
                              }
                            }
                           else
                            {
                             if((false))
                              barrier();
                             if((false))
                              barrier();
                            }
                          }
                         if((! (! (((false) || false)))))
                          {
                          }
                         else
                          {
                           if((false))
                            barrier();
                          }
                         if((false))
                          {
                           do
                            {
                             barrier();
                            }
                           while(((injectionSwitch.x > injectionSwitch.y)));
                          }
                        }
                      }
                     while(false);
                    }
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    {
                     if((false))
                      barrier();
                     if(((injectionSwitch.x > injectionSwitch.y)))
                      {
                      }
                     else
                      {
                       barrier();
                      }
                    }
                   if((false))
                    {
                     for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > 0; _injected_loop_counter --)
                      {
                       barrier();
                      }
                    }
                   if((false))
                    barrier();
                   do
                    {
                     if((false))
                      barrier();
                    }
                   while(false);
                   if((false))
                    {
                     if(false)
                      {
                      }
                     else
                      {
                       for(int _injected_loop_counter = (1 | 1); _injected_loop_counter > 0; _injected_loop_counter --)
                        {
                         do
                          {
                           if((((injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                          }
                         while(false);
                         if((false))
                          barrier();
                         if(false)
                          {
                           if((((injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                          }
                         else
                          {
                           if((false))
                            barrier();
                           barrier();
                          }
                         if((false))
                          {
                           do
                            {
                             barrier();
                            }
                           while((bool(bvec2(false, true))));
                          }
                        }
                      }
                     if((false))
                      barrier();
                    }
                   if(true)
                    {
                     if((false))
                      {
                       if(true)
                        {
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                         barrier();
                         if((false))
                          {
                           if((false))
                            barrier();
                           barrier();
                          }
                        }
                       else
                        {
                        }
                      }
                    }
                   else
                    {
                     if((false))
                      barrier();
                    }
                   if((false))
                    barrier();
                   buf[next_virtual_gid] = 2;
                   do
                    {
                     if((false))
                      barrier();
                    }
                   while(false);
                   if((false))
                    barrier();
                  }
                }
              }
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
               if((false))
                {
                 for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
                  {
                   for(int _injected_loop_counter = (0 & - 52402); _injected_loop_counter != 1; _injected_loop_counter ++)
                    {
                     barrier();
                    }
                  }
                 if((false))
                  barrier();
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               if((false))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             else
              {
               if((false))
                {
                 if((false))
                  {
                   if((false))
                    barrier();
                   for(int _injected_loop_counter = (0 << (int(7))); _injected_loop_counter < 1; _injected_loop_counter ++)
                    {
                     barrier();
                    }
                  }
                 barrier();
                }
               if((false))
                barrier();
               if((false))
                barrier();
               if((false))
                barrier();
               do
                {
                 if(false)
                  {
                  }
                 else
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   barrier();
                  }
                 if((false))
                  barrier();
                }
               while(false);
               if((false))
                {
                 if(false)
                  {
                  }
                 else
                  {
                   barrier();
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                }
              }
             if((false))
              {
               if((((false) && true)))
                {
                 if(false)
                  {
                  }
                 else
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 for(int _injected_loop_counter = (1 & 1); _injected_loop_counter != 0; _injected_loop_counter --)
                  {
                   barrier();
                  }
                }
               for(int _injected_loop_counter = (- 16054 & 0); _injected_loop_counter < ((1 << (int(1))) >> ((1 * (int(1))))); _injected_loop_counter ++)
                {
                 barrier();
                }
               if((false))
                barrier();
              }
             if((false))
              barrier();
            }
           if((false))
            {
             if((false))
              barrier();
             if((false))
              barrier();
             if((false))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y)) || (true)))
              {
               do
                {
                 if((false))
                  {
                   if((false))
                    barrier();
                   do
                    {
                     if((false))
                      barrier();
                     if(true)
                      {
                       barrier();
                      }
                     else
                      {
                      }
                     if(((! (! (false)))))
                      barrier();
                    }
                   while(((injectionSwitch.x > injectionSwitch.y)));
                   if((false))
                    {
                     if((false))
                      barrier();
                     barrier();
                    }
                  }
                }
               while(false);
              }
             else
              {
              }
             if((false))
              {
               if(((injectionSwitch.x < injectionSwitch.y)))
                {
                 barrier();
                }
               else
                {
                }
              }
             if((false))
              barrier();
             if((false))
              {
               for(int _injected_loop_counter = (1 ^ 0); _injected_loop_counter > 0; _injected_loop_counter --)
                {
                 barrier();
                }
               if((false))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           subgroupAll(true);
           if((false))
            {
             if((false))
              barrier();
             barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              barrier();
             if((false))
              {
               if(((injectionSwitch.x < injectionSwitch.y)))
                {
                 barrier();
                 if((false))
                  barrier();
                }
               else
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                {
                 for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != 0; _injected_loop_counter --)
                  {
                   barrier();
                  }
                }
               for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != 1; _injected_loop_counter ++)
                {
                 barrier();
                }
               if((false))
                barrier();
              }
             for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
              {
               if((false))
                barrier();
               if(((injectionSwitch.x > injectionSwitch.y)))
                {
                 if((false))
                  barrier();
                }
               else
                {
                 if(true)
                  {
                   if(true)
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      {
                       for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                        {
                         barrier();
                        }
                      }
                    }
                   else
                    {
                    }
                  }
                 else
                  {
                  }
                 if((false))
                  barrier();
                }
               if(((bool(bvec2(false, true)))))
                barrier();
               if((true && (false)))
                {
                 if((false))
                  barrier();
                }
               else
                {
                 for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
                  {
                   if((false))
                    barrier();
                   for(int _injected_loop_counter = 0; _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
                    {
                     if(false)
                      {
                      }
                     else
                      {
                       if((false))
                        barrier();
                      }
                    }
                   if(((injectionSwitch.x > injectionSwitch.y)))
                    {
                    }
                   else
                    {
                     barrier();
                    }
                   if((false))
                    barrier();
                  }
                }
               if((false))
                {
                 if((false))
                  barrier();
                 barrier();
                }
               if((((! (! (bool(bool(false))))))))
                barrier();
              }
            }
           if(((((! (! (false)))) && true)))
            barrier();
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            {
             if((false))
              barrier();
             barrier();
            }
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             if((false))
              {
               if(true)
                {
                 barrier();
                }
               else
                {
                }
              }
             if(((injectionSwitch.x < injectionSwitch.y)))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((false))
                  barrier();
                 do
                  {
                   for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
                    {
                     barrier();
                     if((false))
                      barrier();
                     do
                      {
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        {
                         if((false))
                          {
                           if((((injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                           barrier();
                          }
                         if((false))
                          barrier();
                         barrier();
                        }
                      }
                     while(false);
                    }
                  }
                 while(((injectionSwitch.x > injectionSwitch.y)));
                 for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
                  {
                   if((false))
                    barrier();
                  }
                 if((false))
                  barrier();
                }
              }
             else
              {
              }
            }
           else
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if(((bool((bvec3(bvec4(bvec3(false, true, false), true)))))))
            barrier();
          }
        }
       else
        {
        }
       if(false)
        {
        }
       else
        {
         if((false))
          {
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(false)
            {
            }
           else
            {
             barrier();
            }
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       barrier();
      }
    }
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = (0 | 0); _injected_loop_counter != 1; _injected_loop_counter ++)
      {
       barrier();
      }
    }
   for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
    {
     if((false))
      barrier();
    }
   if(false)
    {
     do
      {
       if((false))
        barrier();
      }
     while(false);
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(((true) && true))
          {
           barrier();
          }
         else
          {
          }
        }
       barrier();
      }
    }
   else
    {
     if((false))
      {
       if((false))
        barrier();
       if(true)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           if((false))
            barrier();
          }
         else
          {
          }
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           if(false)
            {
            }
           else
            {
             if((false))
              {
               if((false))
                barrier();
               barrier();
               if((false))
                barrier();
              }
            }
          }
         else
          {
           if((false))
            barrier();
          }
         barrier();
         if((false))
          {
           if((false))
            {
             for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
              {
               barrier();
              }
            }
           barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(((bool((true && (bool(false)))))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
       if((false))
        barrier();
       if(true)
        {
         if((false))
          barrier();
        }
       else
        {
        }
       if(false)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(true)
          {
           if((false))
            barrier();
          }
         else
          {
          }
        }
       else
        {
         do
          {
           do
            {
             if((false))
              {
               do
                {
                 barrier();
                }
               while(((injectionSwitch.x > injectionSwitch.y)));
              }
            }
           while(false);
           do
            {
             if(true)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if(((injectionSwitch.x > injectionSwitch.y)))
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 else
                  {
                   do
                    {
                     if(((((injectionSwitch.x < injectionSwitch.y)) && (false))))
                      barrier();
                     barrier();
                     if((false))
                      barrier();
                    }
                   while(false);
                   if(((bool(bvec2(false, false)))))
                    barrier();
                  }
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
              }
             else
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
            }
           while(false);
          }
         while(false);
        }
       if((false))
        barrier();
       if((false))
        barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((! ((true && (! (((injectionSwitch.x > injectionSwitch.y))))))))
      {
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(true)
          {
           barrier();
          }
         else
          {
          }
        }
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
     if((false))
      {
       if((false))
        barrier();
       if(false)
        {
        }
       else
        {
         if((false))
          {
           if((false))
            barrier();
           barrier();
           if((((false) && true)))
            barrier();
          }
        }
       if((false))
        barrier();
       do
        {
         do
          {
           barrier();
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if(false)
            {
            }
           else
            {
             barrier();
            }
          }
        }
       while(false);
      }
     if((false))
      barrier();
     if(((true) && true))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
      }
     else
      {
       if((false))
        barrier();
      }
     if((false))
      {
       do
        {
         if((false))
          barrier();
        }
       while(((false) && ((injectionSwitch.x < injectionSwitch.y))));
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         barrier();
        }
       else
        {
        }
       if((false))
        barrier();
      }
    }
   if(((true && (((injectionSwitch.x > injectionSwitch.y))))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(true)
    {
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = (0 & int(159794u)); _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = (0 >> ((min(int(8), int(8))))); _injected_loop_counter != 1; _injected_loop_counter ++)
        {
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
           if((false))
            barrier();
          }
         else
          {
           if((false))
            barrier();
           if((false))
            barrier();
           if((! (! (true))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                barrier();
               barrier();
              }
            }
           else
            {
            }
           if((false))
            barrier();
          }
         if(false)
          {
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(true)
            {
             if((false))
              barrier();
             if((false))
              barrier();
             do
              {
               if(((false || ((true && (false))))))
                {
                 if(false)
                  {
                  }
                 else
                  {
                   do
                    {
                     barrier();
                    }
                   while(false);
                  }
                 if((false))
                  barrier();
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 for(int _injected_loop_counter = 1; _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    {
                     if((false))
                      {
                       for(int _injected_loop_counter = 0; _injected_loop_counter < ((1 & (1 | 0)) & 1); _injected_loop_counter ++)
                        {
                         barrier();
                        }
                      }
                     barrier();
                    }
                   if(false)
                    {
                    }
                   else
                    {
                     if((false))
                      barrier();
                    }
                   for(int _injected_loop_counter = (min(0, 0)); _injected_loop_counter != 1; _injected_loop_counter ++)
                    {
                     if((false))
                      barrier();
                    }
                   if(false)
                    {
                     if(false)
                      {
                      }
                     else
                      {
                       if(((bool(bvec3(false, false, true)))))
                        {
                         if(((injectionSwitch.x < injectionSwitch.y)))
                          {
                           if((false))
                            {
                             if(((injectionSwitch.x < injectionSwitch.y)))
                              {
                               if((((injectionSwitch.x > injectionSwitch.y))))
                                barrier();
                              }
                             else
                              {
                              }
                             if((((injectionSwitch.x > injectionSwitch.y))))
                              barrier();
                             for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                              {
                               if(true)
                                {
                                 if((false))
                                  barrier();
                                }
                               else
                                {
                                }
                               for(int _injected_loop_counter = 0; _injected_loop_counter < ((1 << (int(4))) >> (int(4))); _injected_loop_counter ++)
                                {
                                 if((false))
                                  {
                                   if((false))
                                    barrier();
                                   barrier();
                                  }
                                 barrier();
                                }
                               if((((injectionSwitch.x > injectionSwitch.y))))
                                barrier();
                              }
                            }
                          }
                         else
                          {
                          }
                         if((false))
                          {
                           for(int _injected_loop_counter = 1; _injected_loop_counter > (0 >> (int(1))); _injected_loop_counter --)
                            {
                             barrier();
                            }
                          }
                         if(false)
                          {
                           if((false))
                            barrier();
                          }
                         else
                          {
                           barrier();
                           do
                            {
                             if((false))
                              barrier();
                            }
                           while(false);
                          }
                        }
                      }
                    }
                   else
                    {
                     do
                      {
                       if((false))
                        barrier();
                      }
                     while(false);
                     if((false))
                      {
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        {
                         if((false))
                          barrier();
                         do
                          {
                           barrier();
                          }
                         while(false);
                        }
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        {
                         if((false))
                          barrier();
                         if(false)
                          {
                          }
                         else
                          {
                           barrier();
                          }
                         if((false))
                          barrier();
                        }
                       for(int _injected_loop_counter = 1; _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
                        {
                         if((false))
                          barrier();
                         barrier();
                        }
                      }
                    }
                   if(true)
                    {
                     if((false))
                      barrier();
                    }
                   else
                    {
                    }
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    {
                     if((false))
                      barrier();
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     if((false))
                      barrier();
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      {
                       do
                        {
                         if((false))
                          barrier();
                        }
                       while(((injectionSwitch.x > injectionSwitch.y)));
                       barrier();
                      }
                     for(int _injected_loop_counter = (0 & - 90272); _injected_loop_counter < (0 | 1); _injected_loop_counter ++)
                      {
                       do
                        {
                         if(false)
                          {
                          }
                         else
                          {
                           if(((injectionSwitch.x < injectionSwitch.y)))
                            {
                             barrier();
                             if((false))
                              barrier();
                            }
                           else
                            {
                            }
                          }
                        }
                       while(((injectionSwitch.x > injectionSwitch.y)));
                      }
                     if((false))
                      barrier();
                    }
                   if((false))
                    barrier();
                   barrier();
                   if(true)
                    {
                     if(false)
                      {
                       do
                        {
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                         if((false))
                          {
                           if((false))
                            barrier();
                           barrier();
                          }
                        }
                       while(((injectionSwitch.x > injectionSwitch.y)));
                      }
                     else
                      {
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        {
                         do
                          {
                           if((false))
                            barrier();
                          }
                         while(false);
                         barrier();
                        }
                       if(((true && (((injectionSwitch.x > injectionSwitch.y))))))
                        barrier();
                      }
                     if((false))
                      barrier();
                     if(((injectionSwitch.x < injectionSwitch.y)))
                      {
                       for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                        {
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                        }
                       if((false))
                        {
                         do
                          {
                           for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < ((((1 << (int(5))) >> (int(5))) << (int(7))) >> (int(7))); _injected_loop_counter ++)
                            {
                             barrier();
                             if((false))
                              barrier();
                            }
                          }
                         while(((injectionSwitch.x > injectionSwitch.y)));
                        }
                      }
                     else
                      {
                      }
                    }
                   else
                    {
                    }
                   do
                    {
                     if((! (! (false))))
                      {
                      }
                     else
                      {
                       if(((bool(bool(false)))))
                        {
                         if((false))
                          {
                           if(false)
                            {
                             if((((injectionSwitch.x > injectionSwitch.y))))
                              barrier();
                            }
                           else
                            {
                             if((false))
                              {
                               if((false))
                                barrier();
                               barrier();
                              }
                             barrier();
                             for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
                              {
                               if(((! (! (false)))))
                                {
                                 do
                                  {
                                   do
                                    {
                                     if((false))
                                      barrier();
                                     if((false))
                                      barrier();
                                    }
                                   while(((injectionSwitch.x > injectionSwitch.y)));
                                  }
                                 while(false);
                                 barrier();
                                }
                              }
                            }
                          }
                         if(((injectionSwitch.x > injectionSwitch.y)))
                          {
                           if((false))
                            {
                             if((false))
                              barrier();
                             barrier();
                            }
                          }
                         else
                          {
                           if((((injectionSwitch.x > injectionSwitch.y))))
                            {
                             if((false))
                              barrier();
                             barrier();
                            }
                           barrier();
                           if((((injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                          }
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                        }
                      }
                     if((false))
                      barrier();
                    }
                   while(false);
                  }
                 do
                  {
                   if((false))
                    {
                     if((false))
                      barrier();
                     if(((injectionSwitch.x < injectionSwitch.y)))
                      {
                       if((false))
                        {
                         if((false))
                          {
                           if(false)
                            {
                            }
                           else
                            {
                             barrier();
                            }
                          }
                         barrier();
                        }
                       if((false))
                        barrier();
                       if((false))
                        {
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                         barrier();
                        }
                       if((false))
                        barrier();
                       if(false)
                        {
                        }
                       else
                        {
                         if(((! (! (false)))))
                          barrier();
                        }
                      }
                     else
                      {
                       if((((false) || false)))
                        barrier();
                      }
                     do
                      {
                       if((false))
                        {
                         if((false))
                          barrier();
                         if((true && ((bool(bool(false))))))
                          {
                          }
                         else
                          {
                           if(true)
                            {
                             barrier();
                            }
                           else
                            {
                            }
                          }
                        }
                      }
                     while(false);
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     if((false))
                      {
                       if(false)
                        {
                        }
                       else
                        {
                         barrier();
                        }
                      }
                     for(int _injected_loop_counter = 0; _injected_loop_counter < (((0 ^ 1) << ((min(int(1), int(1))))) >> (int(1))); _injected_loop_counter ++)
                      {
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       if((false))
                        {
                         if((false))
                          barrier();
                         barrier();
                        }
                      }
                     if((false))
                      barrier();
                     if(false)
                      {
                      }
                     else
                      {
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                      }
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     do
                      {
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       for(int _injected_loop_counter = 0; _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
                        {
                         if((false))
                          barrier();
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                         if(false)
                          {
                          }
                         else
                          {
                           if((bool(bool(false))))
                            {
                             if((false))
                              barrier();
                            }
                           else
                            {
                             barrier();
                             if((((injectionSwitch.x > injectionSwitch.y))))
                              barrier();
                             if((false))
                              barrier();
                            }
                          }
                         if((false))
                          barrier();
                         if((false))
                          {
                           if(((injectionSwitch.x < injectionSwitch.y)))
                            {
                             barrier();
                            }
                           else
                            {
                            }
                          }
                        }
                       if(((bool(bvec2(false, true)))))
                        barrier();
                      }
                     while(false);
                     for(int _injected_loop_counter = 1; _injected_loop_counter > (max((0 | 0), (0 | 0))); _injected_loop_counter --)
                      {
                       if((false))
                        {
                         for(int _injected_loop_counter = 0; _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
                          {
                           barrier();
                           if((false))
                            barrier();
                          }
                        }
                      }
                    }
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 while(((injectionSwitch.x > injectionSwitch.y)));
                 if((false))
                  barrier();
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               if((false))
                {
                 if((false))
                  {
                   for(int _injected_loop_counter = (1 | ((0 >> (int(6))) ^ 1)); _injected_loop_counter != (((1 << (((int(7)) | (int(7))))) >> (int(7))) ^ 1); _injected_loop_counter --)
                    {
                     barrier();
                    }
                  }
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if((false))
                  barrier();
                 if(false)
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 else
                  {
                   if((false))
                    barrier();
                   if(true)
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      {
                       if((false))
                        {
                         if((false))
                          barrier();
                         barrier();
                        }
                       if(true)
                        {
                         if((false))
                          barrier();
                        }
                       else
                        {
                        }
                       if(true)
                        {
                         if((false))
                          barrier();
                        }
                       else
                        {
                        }
                       do
                        {
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          {
                           if((((injectionSwitch.x > injectionSwitch.y))))
                            {
                             if(false)
                              {
                              }
                             else
                              {
                               if((false))
                                barrier();
                              }
                             barrier();
                            }
                           barrier();
                          }
                         if((false))
                          barrier();
                         if(((injectionSwitch.x > injectionSwitch.y)))
                          {
                          }
                         else
                          {
                           if((false))
                            {
                             for(int _injected_loop_counter = 1; _injected_loop_counter != (0 >> (int(1))); _injected_loop_counter --)
                              {
                               do
                                {
                                 if((((injectionSwitch.x > injectionSwitch.y))))
                                  {
                                   do
                                    {
                                     barrier();
                                    }
                                   while((bool(bvec3(false, true, ((injectionSwitch.x < injectionSwitch.y))))));
                                  }
                                 barrier();
                                }
                               while(false);
                              }
                            }
                           if((false))
                            barrier();
                           do
                            {
                             if((false))
                              {
                               for(int _injected_loop_counter = 1; _injected_loop_counter > (0 << (int(4))); _injected_loop_counter --)
                                {
                                 if((((false) || false)))
                                  {
                                   do
                                    {
                                     barrier();
                                    }
                                   while(false);
                                  }
                                }
                               barrier();
                               if((false))
                                barrier();
                              }
                            }
                           while(false);
                           for(int _injected_loop_counter = (1 ^ 1); _injected_loop_counter < 1; _injected_loop_counter ++)
                            {
                             if((((injectionSwitch.x > injectionSwitch.y))))
                              barrier();
                            }
                           if((((injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                          }
                         if((false))
                          barrier();
                        }
                       while(((injectionSwitch.x > injectionSwitch.y)));
                       for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
                        {
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          {
                           if(((injectionSwitch.x < injectionSwitch.y)))
                            {
                             if(false)
                              {
                              }
                             else
                              {
                               barrier();
                              }
                            }
                           else
                            {
                            }
                          }
                         barrier();
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                        }
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                      }
                    }
                   else
                    {
                    }
                  }
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if((false))
                  barrier();
                 barrier();
                 for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if(((injectionSwitch.x > injectionSwitch.y)))
                    {
                    }
                   else
                    {
                     if((false))
                      barrier();
                    }
                  }
                 if((false))
                  barrier();
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   do
                    {
                     barrier();
                    }
                   while(((injectionSwitch.x > injectionSwitch.y)));
                  }
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if((false))
                    barrier();
                   barrier();
                  }
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               for(int _injected_loop_counter = (0 << (int(4))); _injected_loop_counter != 1; _injected_loop_counter ++)
                {
                 for(int _injected_loop_counter = 1; _injected_loop_counter != (((0 << (int(4))) >> (int(2))) << ((~ ((clamp(~ (int(0)), ~ (int(0)), ~ (int(0)))))))); _injected_loop_counter --)
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 if((false))
                  {
                   for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
                    {
                     barrier();
                    }
                  }
                 if(false)
                  {
                  }
                 else
                  {
                   if((false))
                    barrier();
                  }
                 if((false))
                  barrier();
                }
               if(false)
                {
                }
               else
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               do
                {
                 if((false))
                  {
                   if(((false || (false))))
                    {
                     if(false)
                      {
                       if((false))
                        barrier();
                      }
                     else
                      {
                       barrier();
                       if((false))
                        barrier();
                      }
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                   barrier();
                   if((((false) && true)))
                    barrier();
                  }
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               while(false);
               for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if((false))
                    barrier();
                   if((false))
                    barrier();
                   if((false))
                    barrier();
                   if(false)
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(false)
                        {
                        }
                       else
                        {
                         barrier();
                        }
                      }
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     if(((injectionSwitch.x < injectionSwitch.y)))
                      {
                       if((false))
                        {
                         if((false))
                          barrier();
                         if((false))
                          barrier();
                         barrier();
                        }
                      }
                     else
                      {
                      }
                    }
                   else
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      {
                       if((false))
                        barrier();
                       for(int _injected_loop_counter = 0; _injected_loop_counter != ((1 << (int(5))) >> (int(5))); _injected_loop_counter ++)
                        {
                         if((false))
                          barrier();
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                         barrier();
                        }
                       if((false))
                        {
                         if((false))
                          barrier();
                         barrier();
                        }
                       if(false)
                        {
                        }
                       else
                        {
                         if((false))
                          barrier();
                        }
                      }
                     if((false))
                      barrier();
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     do
                      {
                       barrier();
                      }
                     while(((false) && true));
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      {
                       for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
                        {
                         if(((((! (! (false)))) || false)))
                          barrier();
                         if((false))
                          {
                           if((false))
                            {
                             if((false))
                              barrier();
                             if((bool(bool(true))))
                              {
                               barrier();
                              }
                             else
                              {
                              }
                            }
                           if((false))
                            {
                             if((false))
                              barrier();
                             barrier();
                            }
                           if(((injectionSwitch.x > injectionSwitch.y)))
                            {
                            }
                           else
                            {
                             for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
                              {
                               if((false))
                                {
                                 if((false))
                                  {
                                   for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                                    {
                                     barrier();
                                    }
                                  }
                                 barrier();
                                }
                               if((false))
                                {
                                 if((false))
                                  barrier();
                                 barrier();
                                }
                              }
                             if((false))
                              barrier();
                             if(((! ((true && (! (false)))))))
                              barrier();
                             if(false)
                              {
                              }
                             else
                              {
                               barrier();
                               if((false))
                                barrier();
                              }
                             if((false))
                              {
                               if(((injectionSwitch.x > injectionSwitch.y)))
                                {
                                }
                               else
                                {
                                 barrier();
                                }
                              }
                            }
                           if((false))
                            barrier();
                           do
                            {
                             if(((injectionSwitch.x < injectionSwitch.y)))
                              {
                               if((false))
                                {
                                 if((false))
                                  barrier();
                                 for(int _injected_loop_counter = ((0 << ((~ (~ (int(5)))))) ^ 1); _injected_loop_counter != 0; _injected_loop_counter --)
                                  {
                                   barrier();
                                  }
                                }
                              }
                             else
                              {
                              }
                            }
                           while(false);
                          }
                        }
                       do
                        {
                         if((false))
                          {
                           if((false))
                            {
                             if((((injectionSwitch.x > injectionSwitch.y))))
                              barrier();
                             if((((injectionSwitch.x > injectionSwitch.y))))
                              barrier();
                             if((((injectionSwitch.x > injectionSwitch.y))))
                              barrier();
                             barrier();
                            }
                           if((false))
                            barrier();
                           if(false)
                            {
                             if((((injectionSwitch.x > injectionSwitch.y))))
                              barrier();
                            }
                           else
                            {
                             do
                              {
                               for(int _injected_loop_counter = 0; _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
                                {
                                 if((false))
                                  barrier();
                                 if((false))
                                  barrier();
                                 if(((true && (false))))
                                  barrier();
                                }
                              }
                             while(((injectionSwitch.x > injectionSwitch.y)));
                             if((((injectionSwitch.x > injectionSwitch.y))))
                              barrier();
                             if((false))
                              barrier();
                            }
                           if((((injectionSwitch.x > injectionSwitch.y))))
                            {
                             for(int _injected_loop_counter = 1; _injected_loop_counter != (0 >> (((int(4)) | (int(4))))); _injected_loop_counter --)
                              {
                               if((false))
                                {
                                 if(((injectionSwitch.x > injectionSwitch.y)))
                                  {
                                  }
                                 else
                                  {
                                   barrier();
                                  }
                                }
                               if((false))
                                barrier();
                              }
                             barrier();
                            }
                           if((((injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                           barrier();
                           if((false))
                            {
                             for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
                              {
                               barrier();
                              }
                            }
                           if((false))
                            {
                             if((false))
                              barrier();
                             barrier();
                            }
                           if(((injectionSwitch.x > injectionSwitch.y)))
                            {
                            }
                           else
                            {
                             if((false))
                              barrier();
                             if((false))
                              {
                               if((false))
                                barrier();
                               barrier();
                              }
                            }
                          }
                        }
                       while(((injectionSwitch.x > injectionSwitch.y)));
                       if((false))
                        {
                         do
                          {
                           barrier();
                          }
                         while(false);
                        }
                       if(false)
                        {
                        }
                       else
                        {
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                        }
                       if((false))
                        {
                         do
                          {
                           for(int _injected_loop_counter = (0 >> (((int(4)) >> 0))); _injected_loop_counter < (1 & 1); _injected_loop_counter ++)
                            {
                             barrier();
                            }
                           if((((injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                           if((false))
                            barrier();
                          }
                         while(false);
                        }
                       if((false))
                        {
                         for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
                          {
                           barrier();
                          }
                        }
                       for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
                        {
                         if((false))
                          {
                           if((false))
                            {
                             if((false))
                              barrier();
                             barrier();
                            }
                           barrier();
                          }
                        }
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       barrier();
                       if((false))
                        barrier();
                       if((false))
                        barrier();
                       if((false))
                        barrier();
                       if((false))
                        barrier();
                      }
                    }
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    {
                     for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
                      {
                       if(((true && (false))))
                        barrier();
                      }
                     for(int _injected_loop_counter = 0; _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
                      {
                       barrier();
                      }
                    }
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 if((false))
                  {
                   if(((injectionSwitch.x > injectionSwitch.y)))
                    {
                    }
                   else
                    {
                     barrier();
                    }
                  }
                }
               if((false))
                barrier();
               if((false))
                {
                 do
                  {
                   barrier();
                  }
                 while(((injectionSwitch.x > injectionSwitch.y)));
                }
               if((false))
                {
                 do
                  {
                   if(((injectionSwitch.x < injectionSwitch.y)))
                    {
                     for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > 0; _injected_loop_counter --)
                      {
                       if((false))
                        {
                         if((false))
                          {
                           if((false))
                            barrier();
                           for(int _injected_loop_counter = 1; _injected_loop_counter != (0 | (0)); _injected_loop_counter --)
                            {
                             barrier();
                            }
                          }
                         for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
                          {
                           barrier();
                          }
                        }
                      }
                    }
                   else
                    {
                    }
                   if((false))
                    barrier();
                  }
                 while(false);
                 barrier();
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               for(int _injected_loop_counter = ((1 << (int(1))) >> (int(1))); _injected_loop_counter > 0; _injected_loop_counter --)
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if((false))
                    {
                     if((false))
                      barrier();
                     do
                      {
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        {
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                         barrier();
                        }
                      }
                     while(false);
                     barrier();
                     for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
                      {
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                      }
                    }
                   if((false))
                    {
                     if(((injectionSwitch.x > injectionSwitch.y)))
                      {
                      }
                     else
                      {
                       if(((injectionSwitch.x > injectionSwitch.y)))
                        {
                         if((false))
                          barrier();
                        }
                       else
                        {
                         if((false))
                          barrier();
                         if(false)
                          {
                          }
                         else
                          {
                           if((false))
                            barrier();
                           if(false)
                            {
                            }
                           else
                            {
                             if((false))
                              barrier();
                            }
                          }
                        }
                      }
                     barrier();
                     if((false))
                      barrier();
                    }
                   for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
                    {
                     for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                      {
                       if(false)
                        {
                        }
                       else
                        {
                         barrier();
                        }
                      }
                    }
                   if((false))
                    barrier();
                   if((false))
                    barrier();
                  }
                }
               if(false)
                {
                }
               else
                {
                 if((false))
                  barrier();
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             while(false);
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((false))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((false))
              barrier();
            }
           else
            {
            }
          }
         if((false))
          barrier();
         if((false))
          barrier();
        }
       if((false))
        barrier();
       do
        {
         if((false))
          barrier();
        }
       while(false);
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if((false))
      barrier();
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if((false))
      barrier();
    }
   else
    {
     if(false)
      {
      }
     else
      {
       if((false))
        barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
     if((false))
      {
       if(true)
        {
         if((false))
          barrier();
         for(int _injected_loop_counter = (0 << (int(8))); _injected_loop_counter < 1; _injected_loop_counter ++)
          {
           if(true)
            {
             barrier();
            }
           else
            {
            }
          }
        }
       else
        {
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(false)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
          {
           barrier();
          }
        }
      }
     else
      {
       if((false))
        barrier();
      }
     if((false))
      {
       if(((! ((bool(bvec4(! (false), true, false, false)))))))
        barrier();
       barrier();
      }
     if((false))
      barrier();
    }
   for(int _injected_loop_counter = 0; _injected_loop_counter < ((1 << ((0 | (int(7))))) >> ((max(int(7), ((int(7)) | (int(7))))))); _injected_loop_counter ++)
    {
     if((false))
      {
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         barrier();
        }
       barrier();
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(false)
      {
      }
     else
      {
       barrier();
      }
    }
  }
 if((((false) && true)))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 do
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if((false))
        barrier();
      }
     else
      {
      }
     barrier();
    }
   if((false))
    {
     if(false)
      {
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
         if((false))
          barrier();
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     else
      {
       barrier();
       if(((true && (false))))
        barrier();
      }
     if((false))
      barrier();
    }
   if((((false) && true)))
    {
     if((false))
      barrier();
     for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
      {
       if((false))
        barrier();
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 while(false);
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
