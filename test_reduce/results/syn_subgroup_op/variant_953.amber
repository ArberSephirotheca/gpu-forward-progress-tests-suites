#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = (uint((uvec3(0u, 0u, 0u) ^ (uvec3(gl_NumWorkGroups.x, 1u, 1u)))));
 uint workgroup_size = (((uint(uvec2((max(((gl_WorkGroupSize) * uvec3(1u, 1u, 1u)).x, ((gl_WorkGroupSize) * uvec3((clamp(1u, (0u + (1u)), (max(((1u) | (1u)), 1u)))), 1u, 1u)).x)), ((uint(uvec2(0u | 0u, 0u))))))) / 1u));
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = ((((((workgroup_size) * 1u)) | (uint(uvec3((~ (((true ? ~ ((((workgroup_size) * 1u))) : (workgroup_id))))), 1u, (min(0u, 0u)))))) >> 0u)) * workgroup_id;
 uint virtual_gid = (clamp(((((workgroup_base + ((((((injectionSwitch.x < injectionSwitch.y)) ? ((0u | (((1u) | 0u) ^ 1u)) | (0u | (((1u) | 0u) ^ 1u))) : (mix(num_workgroup, workgroup_base, false))))) | ((uint(uvec3(subgroup_id * (uint((min(uvec3((((0u + (subgroup_size))) / 1u), 0u, (((0u ^ (1u))) | ((0u ^ (1u))))), uvec3(subgroup_size, 0u, (((0u ^ (1u))) | ((0u ^ (1u))))))))), 1u, uint(((max(min((injectionSwitch.y), (injectionSwitch.y)), min((injectionSwitch.y), (injectionSwitch.y))))))))))) + subgroup_local_id) << 0u)) | ((clamp(workgroup_base + ((0u | ((((uint((uvec2(0u, 0u) | (((uvec2(1u, 1u)) | uvec2(0u, 0u))))))) | 0u) ^ 1u)) | ((uint(uvec3(subgroup_id * (uint(uvec3(((subgroup_size) << (0u >> (uint(0u)))), 0u, (0u ^ (1u))))), (~ (~ ((1u * (1u))))), uint((max(((max(min((injectionSwitch.y), (injectionSwitch.y)), min(((min(injectionSwitch, ((injectionSwitch) + vec2(0.0, 0.0)))).y), (injectionSwitch.y))))), ((max(min((injectionSwitch.y), (injectionSwitch.y)), min((injectionSwitch.y), (injectionSwitch.y))))))))))))) + subgroup_local_id, (uint(uvec3(workgroup_base + ((0u | ((((uint((uvec2(0u, 0u) | (((uvec2(1u, 1u)) | uvec2(0u, 0u))))))) | 0u) ^ 1u)) | ((uint(uvec3(subgroup_id * (uint(uvec3(((subgroup_size) << (0u >> (uint(0u)))), 0u, (0u ^ (1u))))), (~ (~ ((1u * (1u))))), uint((max(((max(min((injectionSwitch.y), (injectionSwitch.y)), min(((min(injectionSwitch, ((injectionSwitch) + vec2(0.0, 0.0)))).y), (injectionSwitch.y))))), ((max(min((injectionSwitch.y), (injectionSwitch.y)), min((injectionSwitch.y), (injectionSwitch.y))))))))))))) + subgroup_local_id, 0u, uint((injectionSwitch.x))))), workgroup_base + ((0u | ((((uint((uvec2(0u, 0u) | (((uvec2(1u, 1u)) | uvec2(0u, 0u))))))) | 0u) ^ 1u)) | ((uint(uvec3(subgroup_id * (uint(uvec3(((subgroup_size) << (0u >> (uint(0u)))), 0u, (0u ^ (1u))))), (~ (~ ((1u * (1u))))), uint((max(((max(min((injectionSwitch.y), (injectionSwitch.y)), min(((min(injectionSwitch, ((injectionSwitch) + vec2(0.0, 0.0)))).y), (injectionSwitch.y))))), ((max(min((injectionSwitch.y), (injectionSwitch.y)), min((injectionSwitch.y), (injectionSwitch.y))))))))))))) + subgroup_local_id)))), (clamp((clamp(workgroup_base + ((0u | (max(((false ? (uint(uint(((subgroup_size))))) : (~ (~ ((((1u) | ((((0u) + uint((injectionSwitch.x)))) | 0u)) ^ 1u)))))), (uint(uvec4(((((uint(uvec2(1u, 1u)))) | 0u) ^ 1u), 1u, 0u, (1u & 1u))))))) | (max(((uint(uvec3((~ (~ (subgroup_id * (uint((((~ (~ (uvec3(subgroup_size, 0u, (((0u) + 0u) ^ (1u))))))) | uvec3(0u, 0u, 0u))))))), 1u, uint(((((((injectionSwitch.x < injectionSwitch.y)) ? max(min((injectionSwitch.y), (injectionSwitch.y)), min((injectionSwitch.y), (injectionSwitch.y))) : (roundEven(- 87.03))))))))))), ((uint(uvec3(subgroup_id * (uint(uvec3(subgroup_size, 0u, (((min((0u) + 0u, (0u) + 0u))) ^ (1u))))), 1u, uint(((max(((min((injectionSwitch.y), (injectionSwitch.y))) - 0.0), min((injectionSwitch.y), (injectionSwitch.y))))))))))))) + subgroup_local_id, (((max(workgroup_base, workgroup_base))) | ((uint(uint(workgroup_base))))) + ((min((0u | (((1u) | 0u) ^ 1u)), (clamp((0u | (((1u) | 0u) ^ 1u)), (0u | (((1u) | 0u) ^ 1u)), (0u | (((1u) | 0u) ^ 1u)))))) | (0u | ((((((false ? (workgroup_size) : uint(uvec3(uint(((true ? uvec3(((false ? (153975u) : (0u | (subgroup_id * (uint(uvec3(subgroup_size, 0u, (0u ^ (1u))))))))), 1u, uint((((float(mat3x2(max(min((injectionSwitch.y), (((clamp((injectionSwitch.y), (injectionSwitch.y), (((injectionSwitch.y)) - 0.0)))) - 0.0)), min(((mix(vec2((33.24), (((injectionSwitch)[1]) / 1.0)), vec2((injectionSwitch)[0], (2.6)), bvec2(true, false))).y), (injectionSwitch.y))), 0.0, 0.0, 0.0, (injectionSwitch.x), 0.0))))))) : (uvec3(143840u, 70587u, 139315u))))), 0u, 1u)))))))))) + subgroup_local_id, workgroup_base + ((0u | (((1u) | 0u) ^ 1u)) | ((uint(uvec3(subgroup_id * (uint(uvec3(subgroup_size, ((0u) | (0u)), (0u ^ (1u))))), 1u, uint(((max(min((injectionSwitch.y), (injectionSwitch.y)), min((injectionSwitch.y), (injectionSwitch.y))))))))))) + subgroup_local_id)), workgroup_base + (((0u ^ (max((0u | (((1u) | 0u) ^ 1u)), (0u | (((1u) | 0u) ^ 1u)))))) | ((uint(uvec3(subgroup_id * (uint(uvec3(subgroup_size, 0u, (0u ^ (1u))))), 1u, uint(((max(min((injectionSwitch.y), (mix(float(((min(injectionSwitch, injectionSwitch)).y)), float((- 2974.3747)), bool(false)))), min(((max(((injectionSwitch.y) - (injectionSwitch.x)), ((injectionSwitch.y) - (injectionSwitch.x))))), (injectionSwitch.y))))))))))) + subgroup_local_id, (0u | (workgroup_base + (((~ (~ (0u))) | (((((1u) / 1u)) | 0u) ^ 1u)) | ((uint(uvec3(subgroup_id * (uint(uvec3(subgroup_size, 0u, (0u ^ (1u))))), 1u, uint(((max(min((injectionSwitch.y), (injectionSwitch.y)), min((injectionSwitch.y), (injectionSwitch.y))))))))))) + subgroup_local_id)))), ((workgroup_base + ((uint(uint((0u | (((1u) | 0u) ^ 1u)) | ((uint(((uvec3(subgroup_id * ((max(uint(uvec3(subgroup_size, (max((0u ^ (0u)), ((0u) | (0u)))), (((0u ^ (1u))) | ((0u ^ (1u)))))), (~ (~ (uint(uvec3(subgroup_size, (max((0u ^ (0u)), ((0u) | (0u)))), (0u ^ (1u)))))))))), 1u, uint(((max(min((injectionSwitch.y), ((mat2(1.0) * (injectionSwitch)).y)), min((injectionSwitch.y), (injectionSwitch.y)))))))) << (uvec3((injectionSwitch.x), (injectionSwitch.x), (injectionSwitch.x)) >> (uvec3(3u)))))))))))) - 0u) + subgroup_local_id));
 if(((true && (false))))
  barrier();
 uint next_virtual_gid = (((false ? (packUnorm4x8(((vec4(mat4x2((vec4(- 1526.2932, ((((true ? (float(mat4x2(false ? (float(mat2x3((865.659), 0.0, 0.0, 1.0, abs(1.0), (dot(vec3(0.0, 1.0, determinant(mat4((mix(float(0.0), float((7227.7481)), bool(false))), ((((1.0) - abs(0.0))) * 1.0), 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, (max(0.0, 0.0)), 0.0, (min(0.0, 0.0)), 0.0))), vec3(0.0, 1.0, 0.0)))))) : - 609.773, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0))) : (uintBitsToFloat(workgroup_base)))))), 8351.7126, - 5318.4429)), (injectionSwitch.y), 0.0, 0.0, 0.0))) * vec4(1.0, 1.0, ((1.0) * 1.0), 1.0)))) : ((0u ^ ((uint(uvec2(((((~ (~ ((((((0u ^ ((((false ? (workgroup_base) : ((workgroup_base) - 0u)))) | (workgroup_base)))) | ((0u ^ ((((((false ? (workgroup_base) : ((workgroup_base) - 0u))))) | 0u))) | (workgroup_base)))) << (0u << (uint(0u)))))))) + subgroup_id * subgroup_size) - 0u), 1u)))))))) | (workgroup_base + subgroup_id * subgroup_size)) + (((~ (0u ^ (((((0u + (~ ((((((injectionSwitch.x > injectionSwitch.y)) || (false)) ? (subgroup_id) : subgroup_local_id + 1)))))) | 0u)))))) % subgroup_size);
 if((bool(((bvec3(bvec3((bvec3(bvec3(bvec3(bvec3(bvec3(((((bool(bvec4(false, true, false, true))) || false))), true, false)))))))))))))
  barrier();
 buf[virtual_gid] = (((((~ ((0 ^ (~ (1)))))) << 0)) << 0);
 if(((subgroup_local_id + 1 < subgroup_size) || false))
  {
   ((((((injectionSwitch.x < injectionSwitch.y)) ? ((buf[next_virtual_gid] = 2) >> (~ (~ ((max(0u, 0u)))))) : (197911u)) - 0u)));
   subgroupAll(false);
  }
 else
  {
   ((0u | ((((~ (((false ? (subgroup_id) : ~ ((((167673u & 0u) | (((((buf[next_virtual_gid] = 2) >> 0u)) | 0u)))) - 0u))))))))) | 0u);
   subgroupAll(true);
   if((! (! ((false)))))
    barrier();
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
