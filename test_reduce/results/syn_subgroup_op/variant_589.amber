#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((false))
  return;
 if((false))
  {
   if((false))
    return;
   return;
  }
 if((false))
  return;
 uint subgroup_id = gl_SubgroupID;
 if((false))
  {
   if((false))
    return;
   if((false))
    return;
   return;
  }
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = (uvec3(uvec3(gl_NumWorkGroups))).x;
 if(((((max((((mix(float((min((mix(vec2((((mat2(1.0) * (vec2(mat4x2(injectionSwitch, (mix(float((injectionSwitch.y)), float((- 5.7)), bool(false))), 0.0, 1.0, 0.0, 1.0, 0.0))))))[0], ((vec2(mat4x2(injectionSwitch, (injectionSwitch.y), 0.0, 1.0, 0.0, 1.0, ((((0.0)) - 0.0) / 1.0)))))[1]), vec2((6.8), (5.0)), bvec2(false, false))).x, (mix(vec2(((vec2(mat4x2(injectionSwitch, (injectionSwitch.y), 0.0, 1.0, (clamp(0.0, 0.0, 0.0)), 1.0, 0.0))))[0], ((vec2(mat4x2(injectionSwitch, ((mix(float((- 3.6)), float(injectionSwitch.y), bool(true)))), 0.0, 1.0, (max(0.0, 0.0)), 1.0, ((0.0) / 1.0)))))[1]), vec2((6.8), (5.0)), bvec2(false, false))).x))), float((4719.0383)), bool(false))) / 1.0)), (mix(vec2(((vec2(mat4x2(injectionSwitch, (injectionSwitch.y), 0.0, 1.0, 0.0, 1.0, 0.0))))[0], ((((clamp((vec2(mat4x2(injectionSwitch, (injectionSwitch.y), 0.0, 1.0, 0.0, 1.0, ((0.0) / ((1.0) + 0.0))))) * mat2(1.0), (vec2(mat4x2(injectionSwitch, (injectionSwitch.y), 0.0, 1.0, 0.0, 1.0, ((0.0) / ((1.0) + 0.0))))) * mat2(1.0), (vec2(mat4x2(injectionSwitch, (injectionSwitch.y), 0.0, 1.0, 0.0, 1.0, ((0.0) / ((1.0) + 0.0))))) * mat2(1.0))))))[1]), vec2((6.8), (5.0)), bvec2(false, false))).x)) > injectionSwitch.y))))
  {
   if(((((! ((bool(bvec2(! ((true && (bool(bool(false))))), true)))))) || (false))))
    return;
   return;
  }
 uint workgroup_size = ((((((injectionSwitch.x > injectionSwitch.y)) ? ((uvec3(178584u, 157302u, 96170u) & uvec3(91343u, 20962u, 136464u))) : gl_WorkGroupSize)).x) | ((((((0u >> (uint(1u)))) | ((((0u >> (uint(1u))) << uint((injectionSwitch.x)))))) | ((gl_WorkGroupSize.x) ^ 0u)))));
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    {
     if((false))
      return;
     return;
    }
   return;
  }
 uint workgroup_id = (max(gl_WorkGroupID.x, gl_WorkGroupID.x));
 if((false))
  return;
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 uint workgroup_base = (max(workgroup_size * workgroup_id, workgroup_size * workgroup_id));
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 uint next_virtual_gid = (((((false ? (subgroup_id) : (((((((((((! (! (false)))) || false)) && ((injectionSwitch.x < injectionSwitch.y))) ? (workgroup_base) : ((((((((mix(float(((- 59.08 - - 441.042))), float(injectionSwitch.x), bool(true))) > (max((clamp(injectionSwitch, (mix(vec2((injectionSwitch)[(max(0, ((false ? (- 95993) : 0))))], (- 87.57)), vec2((- 4.1), (injectionSwitch)[1]), bvec2(false, true))), (mix(vec2((- 40.89), (injectionSwitch)[1]), vec2((injectionSwitch)[0], ((float(25222u) + - 6715.6254))), bvec2(((injectionSwitch.x < injectionSwitch.y)), false))))).y, (vec2(injectionSwitch[0], injectionSwitch[1])).y)))) || false)) ? (min((((subgroup_id) - (0u | (0u << (uint(5u)))))), (((subgroup_id) - (0u | (0u << (uint(5u)))))))) : (min(((~ (~ (((((false ? (subgroup_local_id) : ((((! (! (false))) ? ((((((injectionSwitch.x > injectionSwitch.y)) ? (atomicExchange(subgroup_local_id, workgroup_id)) : (((0u << (uint(2u))) | (virtual_gid))) - 0u)))) : (((min(workgroup_base, workgroup_base)) + subgroup_id * ((subgroup_size) - 0u)) ^ 0u)))))))) / 1u))) | 0u), ((((0u + ((workgroup_base + subgroup_id * subgroup_size) ^ 0u))) >> 0u)))))) / 1u))))) + (1u ^ 1u)) ^ 0u)) - (0u << (uint(6u))))))) + ((clamp((subgroup_local_id + 1) % subgroup_size, (subgroup_local_id + 1) % subgroup_size, (subgroup_local_id + 1) % subgroup_size)));
 if((false))
  return;
 buf[virtual_gid] = 1;
 if((0u | ((~ (~ (subgroup_local_id + 1))))) < subgroup_size)
  {
   ((((buf[next_virtual_gid] = 2) ^ 0u)) - 0u);
   if((false))
    return;
   if((((false) && true)))
    {
     if((((false || ((false) && true)))))
      return;
     return;
     if((false))
      return;
    }
   if((false))
    return;
   subgroupAll(false);
   if((false))
    return;
  }
 else
  {
   buf[next_virtual_gid] = 2;
   if((false))
    return;
   if((false))
    {
     if((((false) || false)))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     return;
    }
   if((false))
    return;
   subgroupAll(true);
   if((((((injectionSwitch.x > injectionSwitch.y))) && true)))
    return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if(((((bool(bvec4((bool(bool(((injectionSwitch.x > (clamp(injectionSwitch.y, injectionSwitch.y, (clamp(injectionSwitch.y, (clamp(injectionSwitch.y, (max((min(injectionSwitch.y, (mix(float(injectionSwitch.y), float((- 1466.1072)), bool(false))))), injectionSwitch.y)), injectionSwitch.y)), injectionSwitch.y))))) || false)))), false, false, false)))))))
    {
     if(((false || (((((injectionSwitch.x > injectionSwitch.y) || false)))))))
      return;
     if((((((injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y))))
      return;
     return;
    }
   return;
  }
 if((false))
  return;
 if((false))
  return;
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
