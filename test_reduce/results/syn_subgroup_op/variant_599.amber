#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec2 GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base;
 if((false))
  {
   do
    {
     return;
     if((false))
      continue;
    }
   while(false);
  }
 if(((((clamp(injectionSwitch.x, injectionSwitch.x, ((false ? (32.24) : injectionSwitch.x)))) > injectionSwitch.y))))
  return;
 if((false))
  {
   do
    {
     if(true)
      {
       for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > 0; _injected_loop_counter --)
        {
         do
          {
           if((false))
            break;
           if(false)
            {
            }
           else
            {
             do
              {
               if((false))
                {
                 if((false))
                  {
                   if((bool(bvec4((false), true, ((injectionSwitch.x < injectionSwitch.y)), true))))
                    continue;
                   break;
                  }
                 break;
                 if((false))
                  return;
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                continue;
               if(true)
                {
                 if((((false) || false)))
                  break;
                 if(false)
                  {
                  }
                 else
                  {
                   if((false))
                    break;
                   if((false))
                    {
                     if((false))
                      break;
                     return;
                    }
                   for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
                    {
                     if((false))
                      continue;
                     if((((clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)))
                      {
                       if((false))
                        {
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          return;
                         return;
                        }
                       if(((bool(bool(false)))))
                        return;
                      }
                     else
                      {
                       if((((false)) && true))
                        {
                         if((false))
                          break;
                         continue;
                        }
                       if((false))
                        return;
                       return;
                       if((false))
                        continue;
                       if(((bool(bvec4(false, false, true, false)))))
                        return;
                      }
                    }
                   do
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      {
                       if((((((injectionSwitch.x < injectionSwitch.y)) && ((injectionSwitch.x > (clamp(injectionSwitch, ((((injectionSwitch.x > injectionSwitch.y)) ? (((injectionSwitch)) - vec2(0.0, 0.0)) : injectionSwitch)), (vec2(0.0, 0.0) + (injectionSwitch)))).y))))))
                        return;
                       if(false)
                        {
                        }
                       else
                        {
                         if(true)
                          {
                           if((false))
                            break;
                           if(((injectionSwitch.x > injectionSwitch.y)))
                            {
                            }
                           else
                            {
                             return;
                            }
                          }
                         else
                          {
                           if((((injectionSwitch.x > injectionSwitch.y))))
                            continue;
                          }
                        }
                      }
                    }
                   while(((injectionSwitch.x > injectionSwitch.y)));
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(((((vec2(vec3(injectionSwitch, 1.0))).x > injectionSwitch.y))))
                      return;
                     return;
                    }
                  }
                }
               else
                {
                }
              }
             while(((injectionSwitch.x > injectionSwitch.y)));
            }
          }
         while(false);
        }
       if((false))
        break;
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
      }
     if((false))
      return;
    }
   while(false);
   if((false))
    return;
   do
    {
     if(((bool(bool((((max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)))))))
      {
       if((false))
        break;
       if(false)
        {
        }
       else
        {
         return;
        }
      }
    }
   while(false);
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        return;
       return;
      }
     for(int _injected_loop_counter = 1; _injected_loop_counter != (- 70916 & 0); _injected_loop_counter --)
      {
       if((false))
        break;
       return;
      }
    }
  }
 uint subgroup_id = gl_SubgroupID;
 if(false)
  {
  }
 else
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    return;
   return;
  }
 if((false))
  return;
 uint subgroup_size = gl_SubgroupSize;
 if((bool(bvec3((((bool(bvec3(bool(bvec2(((! (bool(bvec2((! (bool(bvec3(((max(injectionSwitch.x, (vec2(((mat4((min(injectionSwitch, injectionSwitch)), 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, log(1.0), 1.0, 1.0, 1.0, 0.0, 0.0)) * mat4(1.0)))).x)) < injectionSwitch.y), true, false)))), true))))), false)), false, true))))), false, false))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if(false)
    {
     if((false))
      return;
     if((false))
      return;
     for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
      {
       if((false))
        return;
      }
    }
   else
    {
     if((false))
      return;
     GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base.x = subgroup_size;
    }
   if((false))
    return;
   if(false)
    {
     if((false))
      return;
    }
   else
    {
     if((false))
      return;
    }
   if((true && ((((injectionSwitch.x > injectionSwitch.y))))))
    {
     if((false))
      return;
     for(int _injected_loop_counter = (1 | 1); _injected_loop_counter > 0; _injected_loop_counter --)
      {
       return;
      }
    }
  }
 else
  {
  }
 if(((injectionSwitch.x < injectionSwitch.y)))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    return;
   if((false))
    return;
  }
 else
  {
  }
 if((false))
  {
   if((false))
    return;
   return;
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(((injectionSwitch.x < injectionSwitch.y)))
  {
   for(int _injected_loop_counter = 0; _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
    {
     if((false))
      return;
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
       if(true)
        {
         return;
        }
       else
        {
        }
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     for(int _injected_loop_counter = (((int((injectionSwitch.x)) | (((clamp((0 + (0 << (int(4)))), 0 << (int(4)), 0 << (int(4)))))))) - 0); (~ ((int(ivec4(~ (_injected_loop_counter), 0, 1, 0))))) != int((injectionSwitch.y)); _injected_loop_counter ++)
      {
       if((! ((true && ((bool(bvec4(bool(bvec4((! ((false))), false, false, ((injectionSwitch.x < injectionSwitch.y)))), false, true, false))))))))
        {
         if(true)
          {
           if((false))
            return;
          }
         else
          {
          }
         if((false))
          continue;
         continue;
        }
       return;
      }
     for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
      {
       if(((((false) && true) || (false))))
        {
         for(int _injected_loop_counter = ((true ? (0 ^ (((1 << (int(6))) >> ((((~ (~ (int(6))))) | 0))))) : ((15605 | - 65223)))); _injected_loop_counter != 0; _injected_loop_counter --)
          {
           return;
          }
        }
      }
     if(((! (! ((((injectionSwitch.x < ((((injectionSwitch.x < injectionSwitch.y)) ? (vec2(injectionSwitch[0], injectionSwitch[1])) : (injectionSwitch))).y)) && (false)))))))
      {
       for(int _injected_loop_counter = 0; _injected_loop_counter != 1; ((_injected_loop_counter ++) - 0))
        {
         return;
        }
      }
    }
  }
 else
  {
   if((((false || ((false)))) && true))
    return;
   if(((bool(bvec4((! ((bool(bvec2(! ((true && (false))), true))))), true, ((injectionSwitch.x > injectionSwitch.y)), ((injectionSwitch.x > injectionSwitch.y)))))))
    return;
  }
 if((false))
  return;
 if((false))
  {
   if((false))
    return;
   do
    {
     if((false))
      {
       if((false))
        break;
       return;
      }
    }
   while(false);
   return;
   if((((injectionSwitch.x < injectionSwitch.y)) && (((bool(bvec3(false, false, ((injectionSwitch.x > injectionSwitch.y)))))))))
    return;
  }
 if(false)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if(true)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      return;
     if((true && ((! (! (((injectionSwitch.x < injectionSwitch.y))))))))
      {
       if((false))
        return;
      }
     else
      {
      }
    }
   else
    {
    }
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = ((true ? gl_WorkGroupSize.x : (subgroup_size)));
 if((false))
  return;
 if(((injectionSwitch.x < injectionSwitch.y)))
  {
   if((false))
    return;
   for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
    {
     if((false))
      {
       do
        {
         if(true)
          {
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             return;
             if((false))
              return;
            }
           else
            {
            }
          }
         else
          {
          }
        }
       while(false);
       for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != 0; _injected_loop_counter --)
        {
         if((false))
          {
           do
            {
             return;
            }
           while(false);
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
      }
    }
   if(((((vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
    return;
   if((((false) && true)))
    return;
   do
    {
     do
      {
       if((false))
        continue;
       if((false))
        return;
       if(true)
        {
         if((false))
          {
           if((false))
            break;
           continue;
          }
         if((((((false || (! ((! (((! (! ((((min(injectionSwitch.x, (min((clamp(injectionSwitch.x, injectionSwitch.x, ((injectionSwitch.x) - 0.0))), (clamp(injectionSwitch.x, (min(injectionSwitch, injectionSwitch)).x, (((false ? (371.493) : (min((max((injectionSwitch.x) - 0.0, (injectionSwitch.x) - 0.0)), (injectionSwitch.x) - 0.0))))))))))) > injectionSwitch.y))))) && true))))))))) && true))
          {
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             do
              {
               if((false))
                break;
               if((false))
                {
                 if((false))
                  break;
                 return;
                 if(((false || (((injectionSwitch.x > injectionSwitch.y))))))
                  {
                   if(((((true && (((injectionSwitch.x > injectionSwitch.y))))) && true)))
                    break;
                   break;
                  }
                 if((false))
                  continue;
                }
               return;
              }
             while(false);
             if(((((clamp(injectionSwitch.x, ((injectionSwitch.x) / 1.0), injectionSwitch.x)) > injectionSwitch.y))))
              break;
            }
           else
            {
            }
           if((false))
            break;
           if((false))
            return;
          }
        }
       else
        {
        }
       if((false))
        {
         if((false))
          continue;
         return;
        }
      }
     while(false);
     if((false))
      return;
    }
   while((true && (false)));
   if(((! (! ((bool(bvec4(false, false, false, false))))))))
    {
     for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
      {
       return;
      }
    }
   if((((false) && true)))
    {
     if((((bool(bvec4((true && (bool(bvec4(false, false, false, false)))), ((injectionSwitch.x > injectionSwitch.y)), false, false))))))
      return;
     if(false)
      {
       if((false))
        {
         for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != 1; _injected_loop_counter ++)
          {
           return;
          }
        }
      }
     else
      {
       for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
        {
         return;
        }
       if((false))
        return;
       if((((false) && true)))
        return;
      }
     if((false))
      return;
    }
  }
 else
  {
   if((false))
    return;
   if((false))
    {
     if(((((vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
      return;
     return;
    }
   if((false))
    return;
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(((! (! (false))) || ((((((injectionSwitch.x > injectionSwitch.y)))) || false))))
  return;
 for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
  {
   if((false))
    return;
   if(true)
    {
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if((false))
          return;
        }
       else
        {
        }
       if((false))
        continue;
      }
    }
   else
    {
    }
  }
 if(((bool(bvec3(false, true, ((injectionSwitch.x < injectionSwitch.y)))))))
  {
   for(int _injected_loop_counter = (0 >> (int(0))); _injected_loop_counter != (((1 ^ 0) << ((clamp(((int(4)) | (int(4))), int(4), int(4))))) >> (int(4))); _injected_loop_counter ++)
    {
     if(false)
      {
       if((false))
        continue;
      }
     else
      {
       return;
      }
    }
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base.y = workgroup_base;
 uint virtual_gid = ((((((~ (~ ((~ (~ (0u ^ (GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base.y + subgroup_id * GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base.x)))))))))) + 0u) | 0u) + subgroup_local_id;
 do
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     return;
    }
  }
 while(false);
 if(true)
  {
   if((((((bool(bvec4((bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, true))), true, ((injectionSwitch.x < injectionSwitch.y)), false)))) || false))))
    {
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      {
       for(int _injected_loop_counter = 0; _injected_loop_counter != ((1 << (int(5))) >> (int(5))); _injected_loop_counter ++)
        {
         if((false))
          {
           if((false))
            continue;
           return;
          }
        }
       if(false)
        {
        }
       else
        {
         if(true)
          {
           return;
          }
         else
          {
          }
        }
      }
    }
  }
 else
  {
  }
 if((false))
  return;
 if((false))
  return;
 uint next_virtual_gid = ((((GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base.y) | (((min((GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base.y) << 0u, (GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base.y) << 0u))))) + (clamp(subgroup_id, subgroup_id, subgroup_id)) * GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base.x) / 1u) + ((subgroup_local_id + ((1) >> 0)) % GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base.x);
 if(((((! (! (injectionSwitch.x > injectionSwitch.y)))))))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  {
   if((false))
    return;
   if((false))
    return;
   if(true)
    {
     if(((! (false || ((! (false)))))))
      return;
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > 0; _injected_loop_counter --)
        {
         return;
        }
      }
    }
   do
    {
     if((false))
      return;
    }
   while(false);
   for(int _injected_loop_counter = (((max(1, 1))) >> 0); _injected_loop_counter > 0; _injected_loop_counter --)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        {
         do
          {
           if(((! (! (false)))))
            return;
          }
         while(false);
         return;
        }
       return;
      }
    }
   if((! ((true && (! ((bool(bvec3(true, false, false)))))))))
    {
     if((false))
      return;
     if((false))
      return;
     if(((! (! (((! (! (((max((vec2(injectionSwitch[0], injectionSwitch[1])).x, (vec2(injectionSwitch[0], injectionSwitch[1])).x)) > ((true ? injectionSwitch : (vec2(8.3, - 4.3)))).y))))))))))
      return;
     if((false))
      return;
     do
      {
       return;
      }
     while(false);
    }
   else
    {
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    {
     if((false))
      return;
     return;
    }
  }
 if((false))
  {
   do
    {
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          return;
         if((false))
          {
           for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
            {
             for(int _injected_loop_counter = 0; (((bool(bvec3(_injected_loop_counter != 1, true, false))) || false)); _injected_loop_counter ++)
              {
               return;
               if((false))
                return;
              }
             if((false))
              return;
            }
          }
         return;
        }
      }
     else
      {
      }
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
   return;
  }
 if(((injectionSwitch.x > injectionSwitch.y)))
  {
  }
 else
  {
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
    }
   else
    {
     if((! (! ((((injectionSwitch.x > injectionSwitch.y)))))))
      {
       if(((((true && (false)))) || ((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          return;
         return;
        }
       do
        {
         if(((bool((bvec3(bvec4(bvec3(false, false, false), (true && (false)))))))))
          {
           do
            {
             do
              {
               return;
              }
             while(((injectionSwitch.x > injectionSwitch.y)));
            }
           while((((false || (false))) && true));
          }
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
       if((false))
        {
         if((false))
          return;
         for(int _injected_loop_counter = 0; _injected_loop_counter < ((1 << (int(5))) >> (int(5))); _injected_loop_counter ++)
          {
           return;
          }
        }
       if((false))
        {
         if(true)
          {
           do
            {
             if((false))
              return;
             return;
            }
           while(false);
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
          }
        }
       do
        {
         if(true)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(((((bool(bvec2(false, true))) && (((bool(bvec2(((bool(bvec4(((max(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)), false, true)))), true))) || false))))))
            {
             if(((! (! (false)))))
              return;
             return;
            }
           if((false))
            {
             if(false)
              {
              }
             else
              {
               return;
              }
             if((false))
              continue;
             if((false))
              continue;
            }
           return;
           if((false))
            {
             for(int _injected_loop_counter = 1; _injected_loop_counter > ((int((injectionSwitch.x))) | 0); _injected_loop_counter --)
              {
               if(true)
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  return;
                }
               else
                {
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                continue;
              }
             if(false)
              {
               do
                {
                 if((false))
                  return;
                }
               while(((injectionSwitch.x > injectionSwitch.y)));
              }
             else
              {
               return;
               if((false))
                continue;
              }
            }
           do
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
             for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != 0; _injected_loop_counter --)
              {
               if((false))
                continue;
               if(((bool(bvec2(false, true)))))
                {
                 do
                  {
                   for(int _injected_loop_counter = ((0 >> (int((int(((ivec3(4, 1, 1)) | (((ivec3(4, 1, 1)) | ivec3(0, 0, 0))))))))) ^ (1)); _injected_loop_counter > (0 | 0); _injected_loop_counter --)
                    {
                     for(int _injected_loop_counter = (int((injectionSwitch.x)) << (int(6))); _injected_loop_counter < ((1 << ((clamp(int(2), ((false ? (- 48288) : int(2))), int(2))))) >> ((max(int(2), int(2))))); _injected_loop_counter ++)
                      {
                       do
                        {
                         if(false)
                          {
                           if((false))
                            break;
                          }
                         else
                          {
                           if(true)
                            {
                             if((false))
                              {
                               if((false))
                                return;
                               for(int _injected_loop_counter = ((0) | (0)); _injected_loop_counter < 1; _injected_loop_counter ++)
                                {
                                 return;
                                }
                              }
                            }
                           else
                            {
                            }
                          }
                        }
                       while(false);
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        break;
                      }
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      continue;
                     return;
                    }
                   if((false))
                    continue;
                  }
                 while(((injectionSwitch.x > injectionSwitch.y)));
                }
               if((false))
                continue;
               if((false))
                continue;
              }
             if((((((! (! (! (! (bool(bvec3(bool(bool(false)), false, false))))))))))))
              continue;
            }
           while(false);
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
          }
         else
          {
           if((false))
            {
             if((false))
              break;
             continue;
            }
           if((false))
            {
             if(true)
              {
               if(false)
                {
                }
               else
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  return;
                 if(((injectionSwitch.x < injectionSwitch.y)))
                  {
                   if((false))
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      return;
                     if(((injectionSwitch.x > injectionSwitch.y)))
                      {
                      }
                     else
                      {
                       do
                        {
                         return;
                        }
                       while(((injectionSwitch.x > injectionSwitch.y)));
                      }
                    }
                  }
                 else
                  {
                  }
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  return;
                }
              }
             else
              {
              }
             if(false)
              {
               if((false))
                break;
               for(int _injected_loop_counter = 1; _injected_loop_counter != (1 ^ 1); _injected_loop_counter --)
                {
                 do
                  {
                   if((false))
                    return;
                  }
                 while(((false) || false));
                }
               if(true)
                {
                 if((! (! (((injectionSwitch.x < injectionSwitch.y))))))
                  {
                   if((false))
                    return;
                  }
                 else
                  {
                  }
                }
               else
                {
                }
               if(((false || ((false || (false))))))
                return;
               if((((injectionSwitch.x > (max(injectionSwitch.y, (min(injectionSwitch.y, injectionSwitch.y))))))))
                break;
              }
             else
              {
               do
                {
                 for(int _injected_loop_counter = 0; (bool((bvec3((bvec3(bvec3(bvec3(bvec3((! (! (((_injected_loop_counter < 1) || false)))), true, true))))))))); _injected_loop_counter ++)
                  {
                   return;
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    break;
                  }
                }
               while(false);
               if((((injectionSwitch.x > injectionSwitch.y))))
                continue;
               for(int _injected_loop_counter = 0; _injected_loop_counter != ((1 << (int(0))) >> (int(0))); _injected_loop_counter ++)
                {
                 if((((injectionSwitch.x > injectionSwitch.y)) || ((false))))
                  {
                   if(false)
                    {
                    }
                   else
                    {
                     if((((((injectionSwitch.x > injectionSwitch.y)) || false))))
                      return;
                    }
                   if((false))
                    return;
                   if((false))
                    break;
                   do
                    {
                     return;
                    }
                   while(false);
                  }
                }
               if((false))
                break;
               if(true)
                {
                 if((false))
                  {
                   do
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      return;
                    }
                   while(false);
                   if(true)
                    {
                     return;
                    }
                   else
                    {
                    }
                   if((false))
                    break;
                  }
                }
               else
                {
                }
              }
            }
           if((false))
            return;
           if(((bool(bool(false)))))
            break;
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           do
            {
             if((((mix(vec2(((vec2(0.0, 0.0) + (((injectionSwitch) / vec2(1.0, 1.0)))))[0], ((vec2(0.0, 0.0) + (((injectionSwitch) / vec2(1.0, 1.0)))))[1]), vec2((- 4.0), (- 3.5)), bvec2(false, false))).x < ((true ? injectionSwitch.y : (log2(3.6)))))))
              {
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  break;
                 return;
                }
               if((((((injectionSwitch.x > ((injectionSwitch) + vec2(0.0, 0.0)).y)) || false))))
                return;
               if((false))
                return;
              }
             else
              {
               if((false))
                continue;
              }
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             return;
            }
          }
        }
       while((true && (false)));
       if((((bool(bvec4(true, (((injectionSwitch.x < injectionSwitch.y)) && ((! (! (false))))), false, ((injectionSwitch.x > injectionSwitch.y))))) && (false))))
        return;
       for(int _injected_loop_counter = 0; _injected_loop_counter < ((1) ^ 0); _injected_loop_counter ++)
        {
         for(int _injected_loop_counter = (0 << (int(3))); _injected_loop_counter != 1; _injected_loop_counter ++)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              return;
             if(((bool(bvec3(false, false, true)))))
              return;
             if(false)
              {
              }
             else
              {
               return;
               if((false))
                continue;
              }
            }
          }
        }
      }
    }
   if((false))
    return;
  }
 if((! (! ((false)))))
  return;
 do
  {
   buf[virtual_gid] = 1;
   if((false))
    continue;
  }
 while(false);
 if(((! (! ((((max((min(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y)))))))
  {
   if((false))
    return;
   if((false))
    return;
   if(((injectionSwitch.x > (mix(float(((max(- 3274.6310, - 3274.6310)))), float((min(injectionSwitch.y, injectionSwitch.y))), bool(true))))))
    {
     if((false))
      return;
    }
   else
    {
     if(true)
      {
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         do
          {
           if((false))
            break;
           do
            {
             return;
            }
           while(((false || (((bool(bvec3(((injectionSwitch.x > injectionSwitch.y)), true, ((injectionSwitch.x < injectionSwitch.y)))))))) || false));
           if((false))
            break;
          }
         while((false || (((injectionSwitch.x > injectionSwitch.y)))));
        }
       else
        {
        }
      }
     else
      {
      }
     if((false))
      return;
     if((false || ((false))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
       if((false))
        return;
      }
    }
   if((false))
    return;
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   do
    {
     if((((mix(vec2((3.3), (injectionSwitch)[1]), vec2((injectionSwitch)[0], (clamp((- 5.9), (- 5.9), (max((- 5.9), (- 5.9)))))), bvec2((false || (bool(bvec2((! (! ((((false || ((true))) || false))))), true)))), false))).x < (max(injectionSwitch.y, injectionSwitch.y)))))
      {
       if((((injectionSwitch.x > (max((vec2(1.0, 1.0) * (injectionSwitch)), injectionSwitch)).y))))
        return;
      }
     else
      {
       if((false))
        {
         if((false))
          continue;
         break;
        }
      }
    }
   while(false);
   if((false))
    return;
   if((false))
    return;
   if((false))
    return;
   if(false)
    {
     if((false))
      return;
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(true)
        {
         return;
        }
       else
        {
        }
      }
    }
   if((true && (((injectionSwitch.x < injectionSwitch.y)))))
    {
     if((false))
      {
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         return;
        }
       else
        {
        }
      }
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       return;
      }
     else
      {
      }
     if((false))
      return;
    }
   else
    {
    }
   do
    {
     if(((bool(bvec3(false, true, false)))))
      return;
    }
   while(false);
   if(((false || (((injectionSwitch.x > injectionSwitch.y))))))
    {
     if((false))
      return;
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       if((false))
        return;
      }
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if((! (! ((bool((bvec3(bvec4(bvec3((false || (false)), true, true), true)))))))))
        {
        }
       else
        {
         if((false))
          return;
         return;
        }
      }
     else
      {
      }
    }
   if((((((injectionSwitch.x > ((min(clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y), clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))) && true)))))
    {
     if((false))
      return;
     return;
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
  {
   if(false)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      continue;
    }
   else
    {
     if((! (! ((false || ((true && (false))))))))
      {
       if((false))
        break;
      }
     else
      {
       if((false))
        continue;
       if((bool(bool((0u ^ (subgroup_local_id)) + 1 < GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base.x))))
        {
         if(((((max(injectionSwitch, ((true ? (((vec2(mat4x2(injectionSwitch, 0.0, 0.0, 0.0, 1.0, abs(0.0), ((0.0) - 0.0))))) / cos(vec2(0.0, 0.0))) : (tan(injectionSwitch)))))).x > injectionSwitch.y))))
          {
           if(((! (((! (false)) || ((false) || false))))))
            continue;
           if((((false || ((injectionSwitch.x > injectionSwitch.y))))))
            {
             if((false))
              continue;
             break;
            }
           if((false))
            {
             if(((true && (((false) && true)))))
              break;
             return;
            }
           if((false))
            return;
           do
            {
             return;
            }
           while(false);
          }
         if(false)
          {
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           if((((false) || false)))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(false)
              {
              }
             else
              {
               if(((true && (false))))
                continue;
               do
                {
                 if((bool(bvec2(true, true))))
                  {
                   if((false))
                    break;
                   return;
                  }
                 else
                  {
                   if((false))
                    continue;
                  }
                 if((false))
                  continue;
                }
               while(false);
              }
             if((false))
              continue;
            }
          }
         if(((injectionSwitch.x < (float(((false ? (mat3x4(575.004, - 703.537, 64.92, 557.862, - 6031.9538, 4830.8748, - 28.28, - 7.7, - 622.231, - 14.49, - 42.56, 6299.8244)) : mat3x4((clamp(injectionSwitch.y, ((mix(float((- 0.0)), float(1.0 * ((0.0 + (float(vec4((injectionSwitch.y), 1.0, 1.0, exp(0.0))))))), bool(((injectionSwitch.x < injectionSwitch.y)))))), injectionSwitch.y)), 1.0, 0.0, 0.0, 1.0, 1.0, sin(0.0), sqrt(0.0), 0.0, 0.0, (mix(float(0.0), float((- 72.83)), bool(false))), 0.0))))))))
          {
           if((false))
            {
             if((false))
              continue;
             break;
            }
           if((false))
            continue;
           buf[next_virtual_gid] = 2;
           if(false)
            {
             if((false))
              return;
            }
           else
            {
             if((false))
              {
               if((false))
                return;
               if((((injectionSwitch.x > injectionSwitch.y))))
                return;
               if((false))
                continue;
               if((((injectionSwitch.x > injectionSwitch.y))))
                continue;
               return;
               if((false))
                continue;
               if((false))
                break;
              }
             if((false))
              return;
             if((((false)) || false))
              {
               if((false))
                {
                 if(((! (! ((((injectionSwitch.x > injectionSwitch.y)) || (((((true && (injectionSwitch.x > injectionSwitch.y)))) || (false)))))))))
                  continue;
                 continue;
                 if((false))
                  continue;
                 if((false))
                  return;
                }
               if((false))
                break;
               if((false || ((((false)) || false))))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    return;
                   continue;
                  }
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   do
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      continue;
                     if((false))
                      break;
                     do
                      {
                       do
                        {
                         if(false)
                          {
                          }
                         else
                          {
                           return;
                          }
                        }
                       while((true && (((false) && true))));
                      }
                     while(((injectionSwitch.x > injectionSwitch.y)));
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      break;
                    }
                   while(false);
                   if((((false) || ((injectionSwitch.x > injectionSwitch.y)))))
                    break;
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    continue;
                  }
                 if((false))
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    continue;
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    continue;
                   break;
                   if((false))
                    {
                     if((false))
                      break;
                     continue;
                    }
                  }
                 if((false))
                  break;
                 if((false))
                  continue;
                 return;
                 if((false))
                  break;
                }
               for(int _injected_loop_counter = 0; (true && ((! (! ((bool(bvec4(_injected_loop_counter != 1, false, true, false)))))))); _injected_loop_counter ++)
                {
                 if(((bool(bool(false)))))
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    return;
                   if((false))
                    return;
                   continue;
                  }
                 if((false))
                  continue;
                 do
                  {
                   return;
                  }
                 while(false);
                }
              }
             if((false))
              return;
            }
           if((false))
            {
             for(int _injected_loop_counter = 1; (bool((bvec3(bvec3(bvec3(_injected_loop_counter != 0, false, false)))))); _injected_loop_counter --)
              {
               if((true && (! (! ((((true)) || false))))))
                {
                 return;
                }
               else
                {
                }
              }
             if((false))
              {
               if((false))
                continue;
               if((! (((! (false)) && true))))
                {
                }
               else
                {
                 return;
                }
              }
             if((false))
              continue;
            }
           if((false))
            return;
           if((false))
            {
             if((false))
              break;
             continue;
            }
          }
         else
          {
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         do
          {
           if((! (! ((false)))))
            continue;
           if(true)
            {
             if(false)
              {
               if((false))
                break;
              }
             else
              {
               if(false)
                {
                }
               else
                {
                 for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != 0; _injected_loop_counter --)
                  {
                   do
                    {
                     if((false))
                      return;
                    }
                   while(((injectionSwitch.x > injectionSwitch.y)));
                   if(((injectionSwitch.x < injectionSwitch.y)))
                    {
                     subgroupAll(false);
                     if((false))
                      return;
                    }
                   else
                    {
                    }
                   if((false))
                    continue;
                  }
                 if(((((false || (false)))) && true))
                  continue;
                }
               if((false))
                continue;
              }
             if(((bool(bvec4(false, true, true, false)))))
              break;
            }
           else
            {
             if((false))
              continue;
            }
           if((false))
            break;
          }
         while((bool(bool(false))));
         if((false))
          {
           if((false))
            break;
           break;
          }
         if((false))
          continue;
        }
       else
        {
         if((false))
          break;
         if(false)
          {
           if((! ((true && (! ((((injectionSwitch.x > injectionSwitch.y)))))))))
            continue;
          }
         else
          {
           do
            {
             do
              {
               if((false))
                return;
               if((false))
                {
                 if(false)
                  {
                  }
                 else
                  {
                   if((bool((bvec3(bvec4(bvec3((false), true, true), false))))))
                    return;
                  }
                 if((false))
                  break;
                 for(int _injected_loop_counter = 0; _injected_loop_counter != (1 ^ 0); _injected_loop_counter ++)
                  {
                   return;
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    return;
                  }
                 if((false))
                  return;
                }
               if((false))
                continue;
              }
             while(false);
             if((false))
              break;
             if((! (! ((! (! ((false))))))))
              {
               if((false))
                continue;
               break;
               if((((injectionSwitch.x > injectionSwitch.y))))
                continue;
               if((false))
                return;
              }
            }
           while(false);
          }
         if((false))
          break;
         do
          {
           if(((! (! (false)))))
            {
             if((false))
              return;
             return;
            }
           buf[next_virtual_gid] = 2;
          }
         while(false);
         subgroupAll(((bool((bvec3(bvec4(bvec3(((((((! (! ((((bool(bvec3(true, ((false) && true), (bool(bvec2(((((injectionSwitch.x > injectionSwitch.y))) && true), false))))))) && true) && true)))) || false))) && true), (((max(injectionSwitch, (sqrt(vec2(0.0, (((float(mat2x4(0.0, 1.0, (min((float(((false ? (mat2x4(- 9.6, - 378.311, 9893.6053, 8698.6105, - 4.3, - 4.7, 61.73, - 5.8)) : mat2x4(1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0))))), 1.0)), 0.0, 1.0, 1.0, 1.0, 1.0)))) / 1.0))) + (injectionSwitch)))).x < ((injectionSwitch.y) + 0.0))), false), true)))))));
        }
      }
     if((false))
      continue;
     if((false))
      {
       if((false))
        return;
       break;
      }
    }
  }
 do
  {
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     do
      {
       if((false))
        break;
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((false))
        {
         if(true)
          {
           return;
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
          }
         else
          {
          }
        }
       if((bool(bvec4((true && ((false))), (! (! (false))), true, ((injectionSwitch.x > (((clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))) / 1.0)))))))
        {
         for(int _injected_loop_counter = 0; _injected_loop_counter < (1 & 1); _injected_loop_counter ++)
          {
           if((false))
            continue;
           if((false))
            {
             if(true)
              {
               return;
              }
             else
              {
              }
            }
           if((false))
            break;
          }
         for(int _injected_loop_counter = ((0 << (int((clamp(3, 3, 3))))) << (int(6))); _injected_loop_counter != 1; _injected_loop_counter ++)
          {
           if((false))
            return;
          }
         break;
         if((false))
          {
           if((false))
            return;
           if(false)
            {
            }
           else
            {
             if((false))
              return;
             return;
            }
          }
        }
       if((false))
        continue;
      }
     while(false);
    }
   else
    {
     if((false))
      return;
    }
  }
 while((! (! (false))));
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
