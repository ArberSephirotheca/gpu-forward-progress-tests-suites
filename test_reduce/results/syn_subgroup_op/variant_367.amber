#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((false))
  barrier();
 if(((injectionSwitch.x < injectionSwitch.y)))
  {
   if((false))
    return;
   for(int _injected_loop_counter = 1; _injected_loop_counter != ((int(ivec2(0, (0 ^ 0)))) >> (int(1))); _injected_loop_counter --)
    {
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       if((false))
        barrier();
      }
    }
  }
 else
  {
  }
 if((((! (! (false))) || (false))))
  {
   for(int _injected_loop_counter = 0; _injected_loop_counter != ((1 ^ 0) ^ 0); _injected_loop_counter ++)
    {
     if((false))
      break;
     barrier();
    }
  }
 uvec2 GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id;
 uvec4 GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_11next_virtual_gidsubgroup_local_idsubgroup_sizevirtual_gid;
 uint subgroup_id = gl_SubgroupID;
 if((false))
  {
   if((false))
    return;
   do
    {
     if((false))
      {
       if((false))
        return;
       for(int _injected_loop_counter = (0 >> (int(7))); _injected_loop_counter < (clamp(1, 1, 1)); _injected_loop_counter ++)
        {
         barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
      }
    }
   while((bool(bvec3(false, false, true))));
   if((false))
    {
     if((false))
      return;
     return;
    }
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     barrier();
    }
   else
    {
    }
  }
 if(false)
  {
  }
 else
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(((bool(bvec3((bool(bool(false))), true, false)))))
      return;
     barrier();
    }
  }
 if(true)
  {
   if(true)
    {
     if((false))
      {
       if(false)
        {
        }
       else
        {
         if(((bool(bvec3(false, ((injectionSwitch.x < injectionSwitch.y)), true)))))
          {
           for(int _injected_loop_counter = (0 | 0); _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
            {
             return;
             if((false))
              return;
            }
          }
        }
       do
        {
         if(((! (! ((false || (false)))))))
          {
           do
            {
             if((false))
              return;
             barrier();
            }
           while(false);
          }
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           return;
           if((false))
            barrier();
          }
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
       if(true)
        {
         if((false))
          return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
        }
      }
    }
   else
    {
    }
   if(true)
    {
     if(true)
      {
       if((false))
        return;
       if((false))
        return;
       if((false))
        {
         if(false)
          {
          }
         else
          {
           return;
          }
        }
       if(false)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
         do
          {
           if((false))
            return;
          }
         while(false);
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           if(true)
            {
             do
              {
               return;
               if((false))
                break;
               if((false))
                break;
               if((false))
                {
                 if((false))
                  barrier();
                 continue;
                }
              }
             while(((injectionSwitch.x > injectionSwitch.y)));
            }
           else
            {
            }
           if((false))
            return;
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
      }
     else
      {
      }
    }
   else
    {
    }
   if(true)
    {
     if((false))
      barrier();
     if((false))
      return;
    }
   else
    {
    }
  }
 else
  {
   if((false))
    return;
  }
 if((false))
  return;
 if((((false) || false)))
  return;
 if((false))
  return;
 if((false))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if((false))
  return;
 do
  {
   if(false)
    {
    }
   else
    {
     GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_11next_virtual_gidsubgroup_local_idsubgroup_sizevirtual_gid.z = subgroup_size;
     if((false))
      break;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      break;
     if((false))
      break;
     break;
    }
   if(((true && (((injectionSwitch.x > injectionSwitch.y))))))
    break;
  }
 while(((injectionSwitch.x > injectionSwitch.y)));
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   barrier();
  }
 if((! (! (false))))
  {
  }
 else
  {
   if((false))
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((false))
        return;
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((! (! (true))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           if((false))
            barrier();
           barrier();
          }
         else
          {
          }
        }
       if((false))
        barrier();
      }
     if(false)
      {
      }
     else
      {
       if((false))
        return;
      }
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if((false))
        {
         if(true)
          {
           return;
          }
         else
          {
           if((false))
            return;
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
      }
     else
      {
      }
     do
      {
       return;
       if((false))
        continue;
      }
     while(false);
    }
   if((false))
    barrier();
   if((false))
    {
     for(int _injected_loop_counter = 1; _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
      {
       return;
      }
    }
   if((false))
    {
     if(false)
      {
      }
     else
      {
       if((false))
        barrier();
      }
     if((false))
      return;
     if((false))
      return;
     if(true)
      {
       if(((((! (! (false)))) && true)))
        return;
       barrier();
      }
     else
      {
      }
     if((false))
      return;
     if((false))
      {
       if(false)
        {
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     return;
    }
   if((false))
    return;
   if((((((true ? (clamp((min(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x, injectionSwitch.x)) : (8318.8628))) > injectionSwitch.y))))
    {
     if(((! ((! (! (! (false))))))))
      return;
     if((false))
      {
       for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
         for(int _injected_loop_counter = 1; (! (! (_injected_loop_counter > 0))); _injected_loop_counter --)
          {
           if((false))
            continue;
           do
            {
             barrier();
             if((false))
              break;
            }
           while(false);
          }
        }
      }
     for(int _injected_loop_counter = ((1 << (int(1))) >> (((int(1)) * 1))); _injected_loop_counter > 0; _injected_loop_counter --)
      {
       if((false))
        return;
      }
     for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
      {
       if((false))
        {
         for(int _injected_loop_counter = int((injectionSwitch.x)); (! (! ((bool(bvec3(_injected_loop_counter < (1 & 1), true, false)))))); _injected_loop_counter ++)
          {
           return;
          }
        }
      }
     if(true)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          return;
         return;
        }
       if((false))
        return;
       if((false))
        {
         if(((true) && ((injectionSwitch.x < injectionSwitch.y))))
          {
           return;
          }
         else
          {
           if((false))
            return;
          }
        }
      }
     else
      {
      }
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(true)
        {
         return;
        }
       else
        {
        }
      }
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         return;
        }
       while((! (! ((bool(bvec2(false, true)))))));
      }
     if((false))
      barrier();
     for(int _injected_loop_counter = ((0 << (int(1))) << (int(4))); _injected_loop_counter < 1; _injected_loop_counter ++)
      {
       barrier();
      }
    }
   if((false))
    {
     if(false)
      {
      }
     else
      {
       if(((((injectionSwitch.x < injectionSwitch.y)) && (false))))
        return;
       if((false))
        {
         for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
          {
           return;
          }
        }
      }
     if(true)
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           do
            {
             return;
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
          }
         if((false))
          return;
         barrier();
        }
       do
        {
         return;
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       for(int _injected_loop_counter = int((((((true) || false) ? injectionSwitch : (injectionSwitch))).x)); _injected_loop_counter != 1; _injected_loop_counter ++)
        {
         if((false))
          return;
         if((false))
          continue;
        }
      }
     else
      {
       if((false))
        barrier();
       if(((true && (false))))
        return;
      }
    }
   for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
    {
     do
      {
       if((false))
        return;
       if((false))
        barrier();
       if((false))
        {
         do
          {
           return;
           if((false))
            continue;
          }
         while(false);
        }
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
     if((false))
      barrier();
    }
  }
 if((false))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((false))
  return;
 if((false))
  {
   do
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      break;
     return;
     if((false))
      {
       if((false))
        break;
       barrier();
      }
     if((false))
      {
       if((false))
        continue;
       return;
      }
    }
   while(false);
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(((injectionSwitch.x < injectionSwitch.y)))
  {
   GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_11next_virtual_gidsubgroup_local_idsubgroup_sizevirtual_gid.y = (clamp(subgroup_local_id, ((true ? subgroup_local_id : (subgroup_size))), ((subgroup_local_id) - 0u)));
  }
 else
  {
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    return;
   return;
  }
 if((false))
  return;
 if((false))
  {
   if((false))
    return;
   if(false)
    {
    }
   else
    {
     if((false))
      {
       if((false))
        barrier();
       for(int _injected_loop_counter = 1; _injected_loop_counter != (0 >> (int(2))); _injected_loop_counter --)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
             break;
            }
           if((false))
            barrier();
           barrier();
          }
         if((false))
          return;
        }
       return;
      }
    }
   if(true)
    {
     if((false))
      return;
     do
      {
       if((false))
        {
         for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != 0; _injected_loop_counter --)
          {
           if((false))
            return;
          }
         break;
        }
       return;
       if((false))
        {
         if((false))
          continue;
         if((false))
          {
           for(int _injected_loop_counter = 1; _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
            {
             if((false))
              {
               do
                {
                 barrier();
                }
               while(false);
              }
            }
           return;
          }
         for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
           barrier();
          }
         if((false))
          barrier();
        }
      }
     while(false);
    }
   else
    {
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 uint num_workgroup = (uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], gl_NumWorkGroups[2])).x;
 if((false))
  return;
 if((false))
  return;
 for(int _injected_loop_counter = (0 >> (int(8))); _injected_loop_counter < 1; _injected_loop_counter ++)
  {
   if(true)
    {
     if((false))
      return;
     do
      {
       do
        {
         if((false))
          {
           if((((((injectionSwitch.x > injectionSwitch.y))) && ((injectionSwitch.x < injectionSwitch.y)))))
            {
             if(false)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                continue;
              }
             else
              {
               barrier();
              }
            }
           if(true)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             if((false))
              continue;
             if((false))
              {
               do
                {
                 if((false))
                  continue;
                 if(true)
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    break;
                   do
                    {
                     if((false))
                      {
                       for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != 1; _injected_loop_counter ++)
                        {
                         return;
                        }
                       if((false))
                        continue;
                      }
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      break;
                     if(false)
                      {
                      }
                     else
                      {
                       if(((injectionSwitch.x < injectionSwitch.y)))
                        {
                         return;
                        }
                       else
                        {
                        }
                      }
                    }
                   while(false);
                   do
                    {
                     if((false))
                      {
                       if(((((true && (((false) || false)))) || false)))
                        {
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          return;
                         barrier();
                        }
                       if((bool((bool(bvec3(bool((! (! (true)))), false, true))))))
                        {
                         if((false))
                          break;
                         return;
                        }
                       else
                        {
                         if((false))
                          continue;
                        }
                      }
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      break;
                    }
                   while(false);
                  }
                 else
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    continue;
                  }
                }
               while(false);
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               for(int _injected_loop_counter = 0; _injected_loop_counter < ((1) | 0); _injected_loop_counter ++)
                {
                 if((((false) && true)))
                  {
                   if(((injectionSwitch.x < injectionSwitch.y)))
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      return;
                     return;
                    }
                   else
                    {
                    }
                  }
                }
              }
            }
           else
            {
             if((false))
              break;
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
            }
           do
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((false))
              continue;
            }
           while(false);
           barrier();
          }
        }
       while((! (! (((injectionSwitch.x > injectionSwitch.y))))));
       if((false))
        continue;
      }
     while(false);
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
    }
   else
    {
    }
  }
 if((bool(bvec3(((! (! (((injectionSwitch.x > injectionSwitch.y)))))), ((injectionSwitch.x > injectionSwitch.y)), ((injectionSwitch.x > injectionSwitch.y))))))
  {
   if(false)
    {
    }
   else
    {
     return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(((injectionSwitch.x > (mat2((injectionSwitch.y)) * (injectionSwitch)).y)))
  {
  }
 else
  {
   if((bool(bool((((min(injectionSwitch.x, (min(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y))))))
    {
     if((((bool(bvec2((injectionSwitch.x > injectionSwitch.y), false))))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     do
      {
       if((false))
        return;
      }
     while(false);
    }
   else
    {
     if((false))
      {
       if((false))
        return;
       do
        {
         return;
        }
       while(false);
      }
     if(false)
      {
      }
     else
      {
       if(((bool(bvec3((! (! ((bool(bvec2(((false) && (true && ((true && (true))))), false)))))), false, false)))))
        {
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           if((false))
            return;
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if((false))
      {
       if((false))
        return;
       return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      return;
     if((((! (! ((injectionSwitch.x > injectionSwitch.y)))))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     if((false))
      return;
     if((false))
      return;
     if((false))
      {
       for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(false)
          {
          }
         else
          {
           if((false))
            barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > 0; _injected_loop_counter --)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              return;
             if(false)
              {
              }
             else
              {
               return;
              }
            }
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       for(int _injected_loop_counter = (((1 << (int(3))) >> (int(3))) & (1 & 1)); _injected_loop_counter != int((((true ? injectionSwitch.x : (- 9.1))))); _injected_loop_counter --)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
         return;
         if((false))
          return;
        }
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       if((false))
        barrier();
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(((injectionSwitch.x > injectionSwitch.y)))
  {
  }
 else
  {
   if(true)
    {
     if((false))
      {
       if((false))
        {
         if((false))
          barrier();
         return;
        }
       for(int _injected_loop_counter = 0; _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
        {
         if((false))
          return;
         if((false))
          continue;
        }
       if((false))
        return;
       for(int _injected_loop_counter = 1; _injected_loop_counter != ((0) - 0); _injected_loop_counter --)
        {
         if((false))
          barrier();
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         if((false))
          break;
         if(true)
          {
           do
            {
             do
              {
               if((! (! (false))))
                {
                 if((false))
                  return;
                }
               else
                {
                 if((false))
                  {
                   if(((injectionSwitch.x > injectionSwitch.y)))
                    {
                    }
                   else
                    {
                     if((false))
                      break;
                     barrier();
                    }
                  }
                }
              }
             while(false);
            }
           while(false);
          }
         else
          {
          }
        }
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
         if((false))
          return;
        }
       else
        {
         if(true)
          {
           if((((! (! ((! (! ((injectionSwitch.x > injectionSwitch.y))))))))))
            return;
           if((bool(bvec3(false, false, false))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           else
            {
             return;
            }
           if((false))
            barrier();
          }
         else
          {
          }
         do
          {
           if(false)
            {
            }
           else
            {
             if((false))
              {
               if((((false) || false)))
                return;
               barrier();
              }
            }
           if((false))
            barrier();
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
        }
      }
     if(((injectionSwitch.x > ((injectionSwitch.y) / 1.0))))
      {
      }
     else
      {
       if(((true && (false))))
        return;
       for(int _injected_loop_counter = 0; _injected_loop_counter < ((- 51578 & int((injectionSwitch.x))) | 1); _injected_loop_counter ++)
        {
         if((false))
          continue;
         for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
          {
           if((false))
            {
             if(false)
              {
              }
             else
              {
               return;
              }
            }
          }
         if((false))
          return;
        }
      }
    }
   else
    {
     if(true)
      {
       if((false))
        {
         if((false))
          return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
      }
     else
      {
      }
     if(true)
      {
       if((false))
        {
         if(((bool(bvec3(((injectionSwitch.x > injectionSwitch.y)), false, (true && (false)))))))
          {
           if((false))
            barrier();
           do
            {
             if(true)
              {
               barrier();
              }
             else
              {
               for(int _injected_loop_counter = ((0 ^ 0) | 0); _injected_loop_counter < 1; _injected_loop_counter ++)
                {
                 if(false)
                  {
                  }
                 else
                  {
                   if((false))
                    {
                     do
                      {
                       return;
                      }
                     while(((injectionSwitch.x > injectionSwitch.y)));
                    }
                  }
                }
              }
            }
           while(false);
          }
         if(true)
          {
           if((false))
            return;
           return;
          }
         else
          {
          }
        }
       if((((injectionSwitch.x > (1.0 * ((clamp((max(injectionSwitch.y, injectionSwitch.y)), ((false ? (- 1.0) : injectionSwitch.y)), injectionSwitch.y))))))))
        return;
      }
     else
      {
       for(int _injected_loop_counter = 1; _injected_loop_counter != (0 >> (int(6))); _injected_loop_counter --)
        {
         if((false))
          return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     if((false))
      {
       do
        {
         if(false)
          {
          }
         else
          {
           return;
          }
        }
       while(false);
      }
    }
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if((((((false)) && true)) || false))
  {
   if((false))
    return;
   return;
  }
 for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
  {
   if((false))
    {
     if(false)
      {
      }
     else
      {
       do
        {
         if((false))
          {
           if(true)
            {
             barrier();
             if((false))
              {
               if(true)
                {
                 for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < (max(1, 1)); _injected_loop_counter ++)
                  {
                   barrier();
                  }
                }
               else
                {
                }
              }
             if((false))
              break;
            }
           else
            {
            }
          }
         for(int _injected_loop_counter = 1; _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
          {
           return;
          }
        }
       while(((false) && true));
      }
    }
  }
 if(((injectionSwitch.x < injectionSwitch.y)))
  {
   if(false)
    {
    }
   else
    {
     if((false || ((false))))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if(((! ((bool(bvec2(! (false), (((abs(vec2(0.0, 0.0)) + (injectionSwitch)).x < injectionSwitch.y)))))))))
      {
       do
        {
         if((false))
          return;
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
       do
        {
         if((false))
          {
           do
            {
             return;
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
          }
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
           break;
          }
        }
       while((! (! (((((injectionSwitch.x > injectionSwitch.y))) && true)))));
       if((bool(bvec3((((injectionSwitch.x > injectionSwitch.y))), false, false))))
        {
         if(((! ((false || (! (false)))))))
          {
           if((false))
            return;
           if((false))
            {
             if((false))
              return;
             barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           return;
          }
         do
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(false)
            {
             if((false))
              break;
            }
           else
            {
             if((false))
              break;
             if((false))
              barrier();
             if(((bool(bvec3(false, false, true)))))
              return;
             return;
             if((false))
              continue;
            }
          }
         while((! (! ((((mix(vec2((injectionSwitch)[0], (((injectionSwitch)[1]) + 0.0)), vec2((- 6.7), (- 1.8)), bvec2(false, false))).x > injectionSwitch.y))))));
        }
       return;
      }
     if((false))
      return;
    }
  }
 else
  {
  }
 uint workgroup_id = ((uvec3(0u, 0u, 0u) << (uvec3(6u))) | (gl_WorkGroupID)).x;
 do
  {
   GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.y = (max(((workgroup_id) + 0u), workgroup_id));
   if((false))
    continue;
  }
 while(false);
 uint workgroup_base = workgroup_size * GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.y;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 1; _injected_loop_counter > (0 << (int(0))); _injected_loop_counter --)
    {
     return;
    }
  }
 for(int _injected_loop_counter = 0; (! (((! (bool(((bool((_injected_loop_counter < 1))) && true)))) && true))); _injected_loop_counter ++)
  {
   for(int _injected_loop_counter = 0; _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
    {
     GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.x = workgroup_base;
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  return;
 do
  {
   if((false))
    continue;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      {
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if((false))
          break;
         do
          {
           return;
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
        }
       else
        {
        }
      }
     if((false))
      barrier();
     return;
     if((false))
      break;
     if((false))
      break;
    }
  }
 while((bool(bvec4(((injectionSwitch.x > injectionSwitch.y)), true, false, ((injectionSwitch.x < injectionSwitch.y))))));
 uint virtual_gid = GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.x + subgroup_id * GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_11next_virtual_gidsubgroup_local_idsubgroup_sizevirtual_gid.z + GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_11next_virtual_gidsubgroup_local_idsubgroup_sizevirtual_gid.y;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 for(int _injected_loop_counter = 0; _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(false)
    {
     if((false || ((((injectionSwitch.x > injectionSwitch.y))))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
       continue;
      }
     if(false)
      {
      }
     else
      {
       do
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(false);
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
    }
   else
    {
     if((false))
      {
       if((false))
        return;
       barrier();
      }
     if((false))
      {
       if((false))
        return;
       barrier();
      }
     GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_11next_virtual_gidsubgroup_local_idsubgroup_sizevirtual_gid.w = virtual_gid;
     if(((true && ((false || (false))))))
      continue;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    continue;
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      continue;
     break;
    }
   if((((false) || false)))
    continue;
  }
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    return;
   return;
  }
 if(false)
  {
   if((false))
    return;
  }
 else
  {
   if((false))
    barrier();
   for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
    {
     if((! ((true && (! (((((injectionSwitch) / vec2(1.0, 1.0)).x < injectionSwitch.y))))))))
      {
       if((false))
        return;
       do
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if((false))
          barrier();
        }
       while(false);
       for(int _injected_loop_counter = ((1 << (((true ? int(4) : (59786))))) >> (int(4))); _injected_loop_counter > 0; _injected_loop_counter --)
        {
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           if((false))
            {
             if((false))
              continue;
             if(((injectionSwitch.x < injectionSwitch.y)))
              {
               if((false))
                return;
               if((false))
                break;
              }
             else
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             return;
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               do
                {
                 return;
                }
               while(false);
              }
            }
           for(int _injected_loop_counter = int((injectionSwitch.y)); (bool(bvec4((! (! (_injected_loop_counter > (1 ^ 1)))), false, true, (! (! (((injectionSwitch.x < injectionSwitch.y)))))))); _injected_loop_counter --)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if(((bool(bvec2(false, false)))))
                break;
               barrier();
              }
             return;
            }
           if((false))
            return;
           if((false))
            barrier();
          }
        }
       do
        {
         if(((bool(bvec3(false, true, false)))))
          {
           if((false))
            barrier();
           break;
          }
         if((false))
          break;
         if(false)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if(((! (! (false)))))
              barrier();
             if((false))
              break;
             barrier();
             if((false))
              break;
            }
          }
         else
          {
           if((false))
            {
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
              }
             else
              {
               barrier();
               if(((! (((! (false)) && true)))))
                continue;
              }
            }
           if((false))
            break;
           if((false))
            {
             if(true)
              {
               return;
              }
             else
              {
              }
            }
           if((false))
            break;
          }
        }
       while(false);
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
       if((false))
        return;
       if(((true && (false))))
        {
         if((false))
          return;
         barrier();
        }
       if((false))
        {
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           do
            {
             if((false))
              continue;
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           while(false);
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
        }
      }
     else
      {
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      break;
    }
  }
 do
  {
   do
    {
     if(((((true && (false)) || false))))
      return;
    }
   while(false);
  }
 while(false);
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     return;
    }
   while((((! (! (false)))) || false));
   if((false))
    return;
  }
 uint next_virtual_gid = GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.x + subgroup_id * GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_11next_virtual_gidsubgroup_local_idsubgroup_sizevirtual_gid.z + ((GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_11next_virtual_gidsubgroup_local_idsubgroup_sizevirtual_gid.y + 1) % (~ (((~ (((((((injectionSwitch.x < injectionSwitch.y)) ? GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_11next_virtual_gidsubgroup_local_idsubgroup_sizevirtual_gid : (uvec4(80242u, 160188u, 144059u, 178170u)))).z) - 0u))) | 0u))));
 do
  {
   ((GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_11next_virtual_gidsubgroup_local_idsubgroup_sizevirtual_gid.x = next_virtual_gid) | uint((injectionSwitch.x)));
  }
 while(((injectionSwitch.x > injectionSwitch.y)));
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  {
   if((false))
    {
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       return;
      }
     else
      {
      }
    }
   barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(true)
  {
   if((bool(bvec2((! (((! ((false))) || false))), true))))
    return;
  }
 else
  {
  }
 if((true && (((injectionSwitch.x > injectionSwitch.y)))))
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
  }
 else
  {
   buf[GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_11next_virtual_gidsubgroup_local_idsubgroup_sizevirtual_gid.w] = (0 | (1));
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(true)
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        return;
       barrier();
      }
     if((false))
      return;
     return;
    }
   for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
    {
     if(GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_11next_virtual_gidsubgroup_local_idsubgroup_sizevirtual_gid.y + 1 < GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_11next_virtual_gidsubgroup_local_idsubgroup_sizevirtual_gid.z)
      {
       if(((true && (false))))
        {
         if((false))
          barrier();
         if((false))
          return;
         return;
         if((false))
          continue;
        }
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(false)
          {
          }
         else
          {
           return;
           if((false))
            break;
          }
        }
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         if((false))
          return;
         return;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(true)
        {
         if((false))
          barrier();
        }
       else
        {
         if((false))
          continue;
        }
       if((false))
        barrier();
       for(int _injected_loop_counter = 0; _injected_loop_counter < ((false ? (- 4111) : 1)); _injected_loop_counter ++)
        {
         buf[GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_11next_virtual_gidsubgroup_local_idsubgroup_sizevirtual_gid.x] = 2;
         if((((injectionSwitch.x > ((injectionSwitch) / vec2(1.0, 1.0)).y))))
          barrier();
        }
       do
        {
         subgroupAll(false);
        }
       while(false);
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       for(int _injected_loop_counter = (1 ^ (min(int(((vec2((((true ? mat2x3(mat3(mat2x3(((true ? injectionSwitch : (sin(injectionSwitch)))), exp(0.0), 0.0, 0.0, 1.0))) : (mat2x3(- 679.665, 751.451, 7.3, 3.1, - 5337.4025, 267.206))))))).x)), int(((vec2((((true ? mat2x3(mat3(mat2x3((((clamp(true ? injectionSwitch : (sin(injectionSwitch)), true ? injectionSwitch : (sin(injectionSwitch)), true ? injectionSwitch : (sin(injectionSwitch)))))), exp(0.0), 0.0, 0.0, 1.0))) : (mat2x3(- 679.665, 751.451, 7.3, 3.1, - 5337.4025, 267.206))))))).x))))); (((min(_injected_loop_counter, _injected_loop_counter))) >> 0) > (max(0, 0)); _injected_loop_counter --)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           continue;
          }
         if(true)
          {
           if((((injectionSwitch.x > (((false ? (- 5.7) : float(float(injectionSwitch.y)))))))))
            {
             if((false))
              return;
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             if((false))
              break;
             if((false))
              barrier();
             if(true)
              {
               if((false))
                break;
               if((false))
                {
                 if((false))
                  {
                   do
                    {
                     if((false))
                      continue;
                     barrier();
                    }
                   while(((injectionSwitch.x > injectionSwitch.y)));
                   if((false))
                    break;
                  }
                 if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
                  return;
                 return;
                 if((((((((injectionSwitch.x > injectionSwitch.y) || false)) || false)))))
                  continue;
                }
              }
             else
              {
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
             if((false))
              barrier();
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(true)
                {
                 return;
                }
               else
                {
                }
              }
             if((((injectionSwitch.x > (min(injectionSwitch.y, ((injectionSwitch.y) - 0.0)))))))
              {
               for(int _injected_loop_counter = (1 | (0 ^ 0)); _injected_loop_counter > 0; _injected_loop_counter --)
                {
                 barrier();
                }
               if((false))
                break;
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((((injectionSwitch.x > ((injectionSwitch) - vec2(0.0, 0.0)).y))))
                  continue;
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  break;
                 if((false))
                  continue;
                 if((false))
                  return;
                 do
                  {
                   return;
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    break;
                  }
                 while(false);
                }
               continue;
              }
             if(((true && ((true) || false))))
              {
               if((false))
                continue;
               if((((injectionSwitch.x > injectionSwitch.y))))
                continue;
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((false))
                  return;
                 if(((injectionSwitch.x > injectionSwitch.y)))
                  {
                  }
                 else
                  {
                   return;
                  }
                }
               return;
              }
             else
              {
               if((false))
                barrier();
               if((((false) && true)))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  return;
                 if((false))
                  break;
                 if((false))
                  return;
                 if(true)
                  {
                   return;
                  }
                 else
                  {
                  }
                }
               if(false)
                {
                }
               else
                {
                 do
                  {
                   if((false))
                    return;
                  }
                 while(((injectionSwitch.x > injectionSwitch.y)));
                }
              }
            }
          }
         else
          {
           if((false))
            continue;
          }
        }
       if((false))
        {
         if((false || ((((injectionSwitch.x > injectionSwitch.y))))))
          return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       do
        {
         if(true)
          {
           buf[GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_11next_virtual_gidsubgroup_local_idsubgroup_sizevirtual_gid.x] = ((true ? (0 | (((2) << 0))) : ((ivec4(- 52097, - 56620, - 64149, 24844)[3]))));
          }
         else
          {
          }
        }
       while(false);
       subgroupAll(true);
      }
    }
   do
    {
     if(true)
      {
       if((false))
        break;
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = ((0) >> int(((((true ? float(vec2(float(((mat4(((clamp(((float(vec4((mix(float((- 8375.3524)), float((injectionSwitch.x)), bool(true))), 1.0, 1.0, 1.0))) - 0.0), float(vec4((injectionSwitch.x), 1.0, 1.0, 1.0)), float(vec4((injectionSwitch.x), 1.0, 1.0, 1.0))))), 1.0, 1.0, 0.0, exp(determinant(mat2(0.0, 0.0, 0.0, 0.0))), 1.0, 0.0, 0.0, (mix(float((- 9.6)), float(length(vec4(0.0, 0.0, 0.0, 0.0))), bool(true))), 1.0, 1.0, 1.0, 0.0, 1.0, (injectionSwitch.y), abs(1.0))) / mat4(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, (clamp(1.0, (mix(float((clamp((max((- 3361.3754), (- 3361.3754))), (- 3361.3754), (- 3361.3754)))), float(1.0), bool(true))), ((1.0) / 1.0))), 1.0, 1.0, 1.0, (0.0 + (((false ? (746.794) : 1.0)))), 1.0, 1.0, 1.0, 1.0, 1.0))), 1.0)) : (- 5942.5497))))))); _injected_loop_counter < 1; _injected_loop_counter ++)
          {
           for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
            {
             return;
            }
          }
         if((false))
          barrier();
        }
      }
     else
      {
       if((false))
        return;
      }
     if(((bool((bvec2(bvec3(bvec2(false, true), true)))))))
      continue;
    }
   while(false);
   if((false))
    return;
  }
 else
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     if((false))
      continue;
     return;
    }
   while((((max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)));
   if((false))
    return;
  }
 if((false))
  return;
 for(int _injected_loop_counter = (0 << (max(((max(int(8), int(((8) * ((1 << (int(7))) >> (int(7)))))))), ((((max(int(8), int(8))))) ^ 0)))); (min(_injected_loop_counter, _injected_loop_counter)) < 1; _injected_loop_counter ++)
  {
   if((false))
    {
     if((false))
      barrier();
     if(((! (! (false)))))
      break;
     if((false))
      barrier();
     break;
     if((false))
      continue;
    }
   if((false))
    continue;
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    return;
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if(false)
    {
     if(((bool(bvec3(false, true, true)))))
      barrier();
    }
   else
    {
     return;
    }
  }
 if((false))
  {
   if(false)
    {
    }
   else
    {
     if((false))
      {
       if((false))
        {
         do
          {
           barrier();
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
        }
       if((false))
        {
         if(true)
          {
           return;
          }
         else
          {
           if((false))
            return;
          }
         if((false))
          barrier();
        }
       if((false))
        return;
       return;
       do
        {
         if((false))
          return;
        }
       while(false);
       if(((((bool(bvec2(((injectionSwitch.x > injectionSwitch.y)), false)))) && ((injectionSwitch.x < ((false ? (163.357) : injectionSwitch.y)))))))
        {
         if(false)
          {
          }
         else
          {
           if((false))
            return;
          }
         return;
        }
       if(((((! (! (false)))) || false)))
        {
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           return;
          }
         return;
        }
      }
     return;
     if((false))
      {
       do
        {
         return;
        }
       while(false);
      }
    }
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     do
      {
       if((false))
        return;
       return;
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
    }
   for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != 1; ((true ? _injected_loop_counter ++ : (39734))))
    {
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  return;
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    return;
   if((false))
    {
     if((false))
      {
       if((false))
        barrier();
       return;
      }
     barrier();
    }
   return;
  }
 if((false))
  barrier();
 if((false))
  {
   if(true)
    {
     for(int _injected_loop_counter = 0; _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
      {
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if((false))
          continue;
         for(int _injected_loop_counter = ((((true ? 0 : (int(158.982)))) << (int(5))) >> (int(7))); _injected_loop_counter < 1; _injected_loop_counter ++)
          {
           return;
          }
         for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
          {
           if((false))
            barrier();
           if((false))
            return;
          }
        }
       else
        {
        }
       if((false))
        return;
      }
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if((false))
    return;
  }
 do
  {
   if((false))
    {
     if((false))
      return;
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 while(false);
 do
  {
   for(int _injected_loop_counter = 1; _injected_loop_counter != ((clamp(0, 0, 0)) >> ((int(ivec4(int(1), 0, 0, 0))))); _injected_loop_counter --)
    {
     if(((((vec2(injectionSwitch[0], injectionSwitch[1])).x > (vec2(1.0, 1.0) * (injectionSwitch)).y))))
      return;
    }
  }
 while(((injectionSwitch.x > injectionSwitch.y)));
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  return;
 for(int _injected_loop_counter = 1; _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
  {
   if(true)
    {
     if((false))
      {
       do
        {
         if(false)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
             do
              {
               barrier();
              }
             while(((injectionSwitch.x > injectionSwitch.y)));
            }
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = 1; _injected_loop_counter > (0 << (int(5))); _injected_loop_counter --)
              {
               if((false))
                break;
               barrier();
               if((false))
                barrier();
              }
            }
           return;
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
       for(int _injected_loop_counter = ((((0 ^ 1) << (int(6))) >> (((int(6)) / 1))) & 1); _injected_loop_counter > 0; _injected_loop_counter --)
        {
         if((false))
          return;
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      break;
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      return;
     if(((((false) && true)) && true))
      {
       if((false))
        break;
       if(false)
        {
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            return;
           barrier();
          }
        }
       for(int _injected_loop_counter = 1; (((injectionSwitch.x > injectionSwitch.y)) || (_injected_loop_counter != int((injectionSwitch.x)))); _injected_loop_counter --)
        {
         if(((((! (! (false)))) && true)))
          break;
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
           barrier();
          }
         if((false))
          {
           if((false))
            return;
           return;
          }
        }
       if((false))
        return;
       if((false))
        {
         if((false))
          return;
         if((false))
          barrier();
         if((false))
          return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
         return;
        }
      }
     else
      {
       if(((false || (false))))
        return;
       if((false))
        {
         for(int _injected_loop_counter = ((1 << (int(7))) >> (((int(7)) * 1))); _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
          {
           return;
          }
        }
       if((false))
        return;
       if(true)
        {
         if((false))
          barrier();
         if((false))
          return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              break;
             barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           if((false))
            return;
           if((bool((bvec2(bvec4((bvec2(bvec3((bvec2(bvec4(bvec2((false), false), true, false))), false))), false, false))))))
            {
             if(true)
              {
               return;
              }
             else
              {
              }
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            break;
           return;
          }
         if(false)
          {
          }
         else
          {
           if((false))
            break;
           if(((((min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
            barrier();
          }
        }
       else
        {
        }
      }
     do
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     while(false);
     if((((false)) && true))
      return;
    }
   else
    {
     if((false))
      barrier();
    }
  }
 for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    break;
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
