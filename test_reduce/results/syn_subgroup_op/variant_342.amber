#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 if((false))
  return;
 uint workgroup_size = (uint((((max(uvec3(gl_WorkGroupSize.x, 0u, 0u), uvec3(gl_WorkGroupSize.x, 0u, 0u)))) ^ ((uvec3(0u, 0u, (min(0u, ((uint(((uvec4(clamp(0u, 0u, 0u), 0u, 0u, 0u)) - uvec4(0u, 0u, 0u, 0u))))))))) >> (uvec3(0u, 0u, 0u) | uvec3(0u, 0u, 0u))))));
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = (~ (~ ((((((((true ? (0u ^ ((workgroup_base + subgroup_id * subgroup_size + subgroup_local_id) ^ 0u)) : (subgroup_local_id)))) - 0u)) >> 0u)))));
 uint next_virtual_gid = (((((uint(uvec4(((workgroup_base + subgroup_id * subgroup_size) << 0u), 1u, 1u, (0u ^ 0u)))) - 0u)) >> 0u)) + (((((0u ^ ((((injectionSwitch.x < ((false ? (- 1.2) : (mix(vec2((float(false)), (injectionSwitch)[((1) + int((injectionSwitch.x)))]), vec2((injectionSwitch)[0], (- 45.86)), bvec2(true, ((true && (bool((bvec2(bvec3(bvec2((bool(bvec2(false, false))), false), false)))))))))).y)))) ? ((((((min((bool(bvec2(true, ((injectionSwitch.x > injectionSwitch.y))))) ? (max(((((((injectionSwitch.x > injectionSwitch.y)) ? (workgroup_base) : subgroup_local_id)) + ((1) - 0)) | 0u), (((((injectionSwitch.x < injectionSwitch.y)) && ((! (! (((injectionSwitch.x > injectionSwitch.y))))))) ? (workgroup_base) : subgroup_local_id)) + 1)) : (virtual_gid), (bool(bvec2(true, ((injectionSwitch.x > injectionSwitch.y))))) ? (max(((((((injectionSwitch.x > injectionSwitch.y)) ? (workgroup_base) : subgroup_local_id)) + ((1) - 0)) | 0u), (((((injectionSwitch.x < injectionSwitch.y)) && ((! (! (((injectionSwitch.x > injectionSwitch.y))))))) ? (workgroup_base) : subgroup_local_id)) + 1)) : (virtual_gid)))))) % subgroup_size) | 0u) : (virtual_gid))))) | ((min((((injectionSwitch.x < (mix(vec2((float(false)), (injectionSwitch)[1]), vec2((float(vec3((injectionSwitch)[0], 0.0, 0.0))), (- 45.86)), bvec2(true, (bool(bvec2(false, false)))))).y)) ? (((((true ? (max(((((((injectionSwitch.x > injectionSwitch.y)) ? (workgroup_base) : subgroup_local_id)) + ((1) - 0)) | 0u), (((! (! (((injectionSwitch.x > injectionSwitch.y))))) ? (workgroup_base) : subgroup_local_id)) + 1)) : (virtual_gid)))) % subgroup_size) | 0u) : (virtual_gid)), (((injectionSwitch.x < (mix(vec2((float(false)), (injectionSwitch)[1]), vec2((injectionSwitch)[0], (- 45.86)), bvec2(true, (bool(bvec2(false, false)))))).y)) ? (((((true ? (max(((((((injectionSwitch.x > injectionSwitch.y)) ? (((workgroup_base)) ^ 0u) : subgroup_local_id)) + ((1) - 0)) | 0u), (((((((! (! (((injectionSwitch.x > injectionSwitch.y))))) ? (workgroup_base) : subgroup_local_id) << 0u))) * 1u)) + 1)) : (virtual_gid)))) % subgroup_size) | 0u) : (virtual_gid))))))));
 buf[virtual_gid] = 1;
 if((~ (~ (((subgroup_local_id + 1) ^ 0u)))) < subgroup_size)
  {
   if(((bool(bvec4((! ((bool(bool((false || (! (false)))))))), true, true, true)))))
    return;
   buf[next_virtual_gid] = ((2) ^ 0);
   subgroupAll((bool(bvec3(false, true, false))));
  }
 else
  {
   buf[next_virtual_gid] = 2;
   subgroupAll(true);
   if((bool(bool((((true && ((false)))) || false)))))
    return;
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
