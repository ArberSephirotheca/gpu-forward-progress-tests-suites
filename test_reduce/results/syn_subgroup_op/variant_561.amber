#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec2 GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size;
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(((((injectionSwitch.x < injectionSwitch.y)) || false)))
  {
   if(((! (! (false)))))
    return;
   GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.y = workgroup_size;
  }
 else
  {
  }
 uint workgroup_id = ((0u ^ ((gl_WorkGroupID.x))) << (uint((((true ? (vec2(injectionSwitch[0], (max(((false ? (- 505.985) : injectionSwitch[(max((~ (~ (1))), (clamp(1, 1, 1))))])), injectionSwitch[1])))).x : ((clamp((float(vec2(- 83.59, 0.0))), - 83.59, (1.0 * (- 83.59))))))))) ^ (((max(0u << (uint(2u)), ((clamp((0u << (uint(2u))), (0u << (uint(2u))), (0u << (uint(2u))))) | 0u)))))));
 uint workgroup_base = (((((injectionSwitch.x < injectionSwitch.y)) ? (~ (~ (((0u ^ (((max((1u * (((max(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.y, GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.y)) * workgroup_id))), ((max(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.y, GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.y)) * workgroup_id)))) | (min((min((((((((max(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.y, GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.y))) << 0u) * workgroup_id))) << 0u), (((0u | ((((((max(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.y, GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.y))) << 0u) * workgroup_id))))) >> 0u))), ((((GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.y) << 0u) * workgroup_id)))))))))) | 0u : (atomicExchange(subgroup_size, num_workgroup)))));
 uint virtual_gid = (uint(uvec3(((uint(uvec4((workgroup_base + subgroup_id * subgroup_size) | (uint(uvec4((~ ((min((~ (((((true ? ((true) || false) ? (0u | (~ ((((true ? (~ ((workgroup_base + subgroup_id * subgroup_size))) : ((workgroup_size))))) ^ 0u))) : ((0u | (78808u))) : (subgroup_id))))))), (~ (((true ? ~ (~ ((workgroup_base + subgroup_id * subgroup_size))) : ((0u | (uint(uvec4(((min(((true ? 78808u : (uvec4(195785u, 199847u, 58970u, 49597u)[0]))), 78808u))), 0u, (min(0u, 0u)), 0u))))))))))))), 1u, 0u, 0u))), 0u, uint((1.0 * ((((injectionSwitch.x)) - 0.0)))), 1u)))), 1u, 0u))) + subgroup_local_id;
 (0u ^ (GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.x = virtual_gid));
 if(((! (! (((injectionSwitch.x > (mix(vec2((- 0.9), (vec2(0.0, 0.0) + ((injectionSwitch)))[1]), vec2((injectionSwitch)[0], (86.43)), bvec2(true, false))).y)))))))
  return;
 uint next_virtual_gid = ((workgroup_base) + 0u) + (min(((subgroup_id) | 0u) * subgroup_size, (((0u | (subgroup_id))) | 0u) * (0u ^ (subgroup_size)))) + (((0u | ((uint(uint((min(((((injectionSwitch.x < injectionSwitch.y)) ? (((min(subgroup_local_id + 1, (max(subgroup_local_id + 1, subgroup_local_id + ((1) << 0))))))) : (workgroup_id))), (((min((((min((uint((injectionSwitch.x)) | (subgroup_local_id)) + 1, (max(subgroup_local_id + 1, subgroup_local_id + 1)))))) >> (0u >> (uint(2u))), ((max(((min(subgroup_local_id + 1, (max(subgroup_local_id + 1, subgroup_local_id + ((1) << 0)))))), ((min(subgroup_local_id + 1, (max(subgroup_local_id + 1, subgroup_local_id + 1)))))))) >> (0u >> (uint(2u)))))))))))))) | (((0u | (((~ (~ ((max(((~ (~ (subgroup_local_id))) + 1), (subgroup_local_id + 1))))))) / (1u & 1u)))))) % subgroup_size);
 ((buf[GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.x] = (int(int((int((((max((min(ivec3((min((~ (~ ((~ (~ (1)))))), (((0 ^ ((min(1, 1))))) ^ 0))), (int((injectionSwitch.x)) ^ (1)), 1), ivec3((~ (~ ((((min((~ (~ (1))), (((0 ^ (1))) << 0)))) << 0)))), 1, 1))), ivec3((min((~ (~ (1))), ((max(((clamp((((0)) | ((0))) ^ 0, ((false ? (4237) : (0) ^ 0)), (0) ^ 0))) ^ (1), (max(((clamp((((0)) | ((0))) ^ 0, ((false ? (4237) : (0) ^ 0)), (0) ^ 0))) ^ (1), ((clamp((((0)) | ((0))) ^ 0, ((false ? (4237) : (0) ^ 0)), (0) ^ 0))) ^ (1)))))))), 1, 1)))) | (((ivec3((min(((max(~ (~ (((1) | 0))), ~ (~ (((1)) | (min(((0 ^ ((1)))), ((0 ^ ((1))))))))))), (0 ^ (1)))), 1, 1))) | ivec3(0, 0, 0))))))))) | 0u);
 if((((false ? ((virtual_gid)) : (min((((subgroup_local_id)) ^ 0u), (subgroup_local_id))) - 0u))) + 1 < ((subgroup_size) ^ (min(0u, 0u))))
  {
   buf[next_virtual_gid] = 2;
   subgroupAll(false);
  }
 else
  {
   buf[next_virtual_gid] = 2;
   subgroupAll((bool(bvec4(true, false, true, true))));
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
