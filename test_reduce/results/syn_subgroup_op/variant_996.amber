#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(((bool(bvec4(((injectionSwitch.x > injectionSwitch.y)), false, false, false)))))
  {
   do
    {
     if((((false) && true)))
      barrier();
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
   if(((! (! (false)))))
    return;
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    {
     if(true)
      {
       return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        return;
      }
     else
      {
       if((false))
        {
         for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
          {
           if((false))
            break;
           barrier();
          }
        }
       if((false))
        return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   barrier();
  }
 if((false))
  return;
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 uint subgroup_id = gl_SubgroupID;
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  {
   if(false)
    {
    }
   else
    {
     if((false))
      {
       if(false)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           return;
          }
         else
          {
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   barrier();
  }
 if(false)
  {
  }
 else
  {
   if((false))
    barrier();
   if((false))
    barrier();
  }
 if((false))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if((false))
  return;
 do
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     do
      {
       if((false))
        continue;
       if(((bool(bvec3(false, false, false)))))
        barrier();
       return;
      }
     while(false);
     if((false))
      barrier();
    }
  }
 while(((injectionSwitch.x > injectionSwitch.y)));
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     do
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        {
         do
          {
           barrier();
          }
         while(false);
         if((false))
          continue;
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     while(false);
     if(false)
      {
      }
     else
      {
       barrier();
      }
    }
   while(false);
   if((false))
    barrier();
   if((false))
    barrier();
   if(((true && ((false || (false))))))
    return;
   if((false))
    {
     if((false))
      return;
     for(int _injected_loop_counter = ((1 << (int(3))) >> (int(3))); _injected_loop_counter != 0; _injected_loop_counter --)
      {
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
    }
  }
 if(false)
  {
  }
 else
  {
   if((false))
    {
     for(int _injected_loop_counter = 1; _injected_loop_counter > (0 & 75176); _injected_loop_counter --)
      {
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           if(false)
            {
             if((false))
              return;
             if((false))
              {
               if((false))
                break;
               return;
              }
             if((false))
              barrier();
            }
           else
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             if(true)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
                  {
                   if((false))
                    return;
                  }
                 barrier();
                }
              }
             else
              {
               if((false))
                barrier();
              }
             if((false))
              barrier();
             if(((bool(bvec2(((injectionSwitch.x > injectionSwitch.y)), true)))))
              return;
             if(((bool(bvec2(false, true)))))
              barrier();
             barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                barrier();
               barrier();
              }
            }
           if((false))
            barrier();
          }
         else
          {
          }
         if((false))
          return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         if((false))
          {
           do
            {
             barrier();
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
          }
        }
      }
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  barrier();
 if((false))
  {
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
     if((false))
      barrier();
    }
   else
    {
     if((false))
      return;
     do
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
       if((false))
        {
         if((false))
          {
           if((false))
            return;
           if((false))
            return;
           if((false))
            barrier();
           if((false))
            {
             if((false))
              break;
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
             barrier();
            }
           if((false))
            break;
           barrier();
          }
         barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
       if((false))
        barrier();
      }
     while(false);
    }
   barrier();
  }
 if(((bool(bvec4(false, true, true, true)))))
  barrier();
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    {
     if((false))
      {
       if((false))
        return;
       barrier();
      }
     barrier();
    }
   return;
  }
 if(false)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(((bool(bvec2(false, true)))))
    barrier();
  }
 else
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if(((! (! (false)))))
        return;
       barrier();
      }
     else
      {
      }
    }
   if((false))
    {
     if(((bool(bool(false)))))
      barrier();
     if((false))
      {
       do
        {
         return;
        }
       while(((false) && true));
      }
     if((false))
      barrier();
     barrier();
     if((false))
      barrier();
    }
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(((true) || false))
    {
     if((false))
      {
       if((false))
        {
         do
          {
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
             if((false))
              barrier();
            }
           else
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             if((false))
              continue;
             return;
            }
           if((false))
            continue;
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
        }
       for(int _injected_loop_counter = 1; _injected_loop_counter != (0 >> (int(4))); _injected_loop_counter --)
        {
         return;
        }
       if((false))
        barrier();
      }
    }
   else
    {
    }
   for(int _injected_loop_counter = (int((injectionSwitch.y)) ^ 1); _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
    {
     if(((bool(bool(false)))))
      barrier();
     barrier();
     if((false))
      break;
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     if(true)
      {
       barrier();
      }
     else
      {
      }
    }
   if(((false || (false))))
    return;
  }
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if(true)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          return;
         return;
        }
      }
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if(false)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
         for(int _injected_loop_counter = (0 << (int(6))); _injected_loop_counter != (1 ^ 0); _injected_loop_counter ++)
          {
           if((false))
            barrier();
           if((false))
            {
             do
              {
               barrier();
              }
             while(false);
             if((false))
              break;
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           barrier();
          }
        }
      }
     if((false))
      barrier();
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(((((true) && true)) && true))
        {
         if((false))
          barrier();
         barrier();
         if((false))
          return;
        }
       else
        {
        }
      }
    }
   else
    {
    }
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
   if((false))
    return;
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     barrier();
    }
  }
 if((false))
  barrier();
 if((false))
  return;
 uint workgroup_base = workgroup_size * workgroup_id;
 if((false))
  {
   if(((((bool(bvec3(false, true, true))) && true))))
    barrier();
   if(false)
    {
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = 0; _injected_loop_counter != ((1 << (int(6))) >> ((~ (((~ (int(6))) | 0))))); _injected_loop_counter ++)
      {
       return;
      }
    }
  }
 if((false))
  {
   if((false))
    {
     if(false)
      {
      }
     else
      {
       barrier();
       if((false))
        barrier();
      }
    }
   for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != 1; _injected_loop_counter ++)
    {
     for(int _injected_loop_counter = 1; _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
      {
       if((false))
        return;
       barrier();
       for(int _injected_loop_counter = (0 << (((int(7)) | 0))); _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
        {
         if((false))
          barrier();
         if((false))
          barrier();
        }
       if((false))
        barrier();
       if((false))
        break;
       if((false))
        {
         if(true)
          {
           if((false))
            {
             if((false))
              return;
             barrier();
            }
           barrier();
           if((false))
            return;
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
        }
      }
    }
   if((false))
    barrier();
  }
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 do
  {
   if(true)
    {
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         barrier();
        }
      }
     else
      {
       if((false))
        {
         if((false))
          barrier();
         do
          {
           if((false))
            barrier();
           if((false))
            {
             if((false))
              barrier();
             barrier();
            }
          }
         while(false);
         barrier();
        }
       if((false))
        {
         for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != 0; _injected_loop_counter --)
          {
           barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if((false))
        barrier();
       if((false))
        barrier();
       if((false))
        {
         if(true)
          {
           return;
          }
         else
          {
          }
        }
      }
    }
   else
    {
    }
  }
 while(false);
 do
  {
   do
    {
     if((false))
      {
       for(int _injected_loop_counter = 0; _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
        {
         barrier();
        }
      }
    }
   while(false);
  }
 while(((injectionSwitch.x > injectionSwitch.y)));
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size);
 if((false))
  return;
 if((false))
  {
   if(false)
    {
    }
   else
    {
     if(true)
      {
       if((false))
        barrier();
      }
     else
      {
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if(((bool(bvec3(false, false, true)))))
  barrier();
 buf[virtual_gid] = 1;
 if((false))
  {
   if((false))
    barrier();
   do
    {
     barrier();
    }
   while(false);
  }
 if((false))
  {
   if((false))
    {
     if((false))
      {
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         do
          {
           if((false))
            barrier();
          }
         while(false);
        }
       barrier();
       if((false))
        barrier();
      }
     if(true)
      {
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if((false))
          barrier();
         if((false))
          {
           if((false))
            barrier();
           return;
           if((false))
            return;
          }
         if((false))
          barrier();
         barrier();
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
           if((false))
            return;
          }
         else
          {
           if((false))
            {
             if((false))
              barrier();
             if((false))
              return;
             do
              {
               if((false))
                barrier();
               if((false))
                break;
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((false))
                  barrier();
                 for(int _injected_loop_counter = ((1 << (int(2))) >> (int(2))); _injected_loop_counter > 0; _injected_loop_counter --)
                  {
                   barrier();
                  }
                }
               barrier();
               if((false))
                break;
              }
             while(false);
             if((false))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((false))
              barrier();
            }
          }
         if(true)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           if((false))
            barrier();
          }
         else
          {
          }
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          barrier();
        }
       if((false))
        barrier();
      }
     else
      {
      }
    }
   if((false))
    barrier();
   if(false)
    {
    }
   else
    {
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
     if(((true && (false))))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       if((((false) || ((injectionSwitch.x > injectionSwitch.y)))))
        return;
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       barrier();
      }
    }
   if((false))
    return;
  }
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != 0; _injected_loop_counter --)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(true)
      {
       if((false))
        barrier();
       barrier();
       if((((false) && ((injectionSwitch.x < injectionSwitch.y)))))
        barrier();
      }
     else
      {
       if((false))
        barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if((false))
    return;
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         barrier();
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
      }
     barrier();
    }
   for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
    {
     return;
    }
  }
 for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != 0; _injected_loop_counter --)
  {
   if((false))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     for(int _injected_loop_counter = ((1 << (int(0))) >> (int(0))); _injected_loop_counter != (1 ^ 1); _injected_loop_counter --)
      {
       do
        {
         if((false))
          return;
        }
       while(false);
      }
     barrier();
     if((false))
      return;
    }
   if((false))
    break;
   if((false))
    continue;
   if((false))
    barrier();
   for(int _injected_loop_counter = 1; _injected_loop_counter > (0 << (int(8))); _injected_loop_counter --)
    {
     if((false))
      barrier();
    }
  }
 if(((injectionSwitch.x < injectionSwitch.y)))
  {
   if(subgroup_local_id + 1 < subgroup_size)
    {
     for(int _injected_loop_counter = (0 << (int(4))); _injected_loop_counter < (1 & 1); _injected_loop_counter ++)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if((false))
          barrier();
         do
          {
           if((false))
            {
             if((false))
              {
               if((false))
                break;
               barrier();
              }
             if(true)
              {
               barrier();
              }
             else
              {
              }
             if((false))
              barrier();
            }
          }
         while(false);
         barrier();
        }
       if((false))
        break;
      }
     do
      {
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if((((false) && true)))
      barrier();
     for(int _injected_loop_counter = (0 & 41723); _injected_loop_counter < ((((1 << (int(1))) >> (int(1))) << (((int(0)) | (((int(0)) | (int(0))))))) >> (int(0))); _injected_loop_counter ++)
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
         if((false))
          barrier();
         if(((! (! (false)))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           continue;
           if((false))
            break;
          }
         for(int _injected_loop_counter = 0; _injected_loop_counter < ((1 << (int(1))) >> (int(1))); _injected_loop_counter ++)
          {
           barrier();
           if((false))
            barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         if((false))
          barrier();
         if((false))
          {
           if((false))
            break;
           barrier();
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              {
               do
                {
                 barrier();
                }
               while(((injectionSwitch.x > injectionSwitch.y)));
               if((false))
                continue;
              }
             barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if(true)
            {
             if((false))
              barrier();
            }
           else
            {
            }
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > (0 ^ (1 ^ 1)); _injected_loop_counter --)
              {
               barrier();
              }
             if((false))
              break;
            }
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
              {
               barrier();
              }
            }
          }
         while(false);
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          barrier();
         for(int _injected_loop_counter = 0; _injected_loop_counter < (0 | 1); _injected_loop_counter ++)
          {
           do
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
          }
        }
       do
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if((false))
          {
           if((false))
            continue;
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            {
             if((false))
              barrier();
             barrier();
            }
           if((false))
            {
             for(int _injected_loop_counter = ((1 << (int(1))) >> (((int(1)) | (int(1))))); _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
              {
               barrier();
              }
            }
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             if((false))
              barrier();
            }
           if((false))
            barrier();
           if((false))
            barrier();
           if(false)
            {
            }
           else
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
          }
         if(((bool(bvec2(((injectionSwitch.x > injectionSwitch.y)), false)))))
          barrier();
        }
       while(((((injectionSwitch.x > injectionSwitch.y))) && true));
       if(((true && (false))))
        barrier();
       do
        {
         if(false)
          {
          }
         else
          {
           if(false)
            {
            }
           else
            {
             if((false))
              barrier();
             if((false))
              {
               if((false))
                {
                 if((false))
                  return;
                 do
                  {
                   barrier();
                  }
                 while(false);
                }
               barrier();
              }
            }
           if((false))
            return;
           if((false))
            barrier();
          }
        }
       while(false);
       if((false))
        continue;
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
           if(((bool(bvec2(((injectionSwitch.x > injectionSwitch.y)), false)))))
            barrier();
          }
         else
          {
           buf[next_virtual_gid] = 2;
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                return;
               barrier();
              }
             if(true)
              {
               barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                break;
              }
             else
              {
              }
             if((false))
              barrier();
            }
          }
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            break;
           return;
          }
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          {
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
             if((false))
              return;
             if((false))
              barrier();
            }
           else
            {
             if((false))
              barrier();
            }
           return;
          }
        }
      }
     if((false))
      {
       if((false))
        barrier();
       if(((((bool(bool(false)))) || false)))
        return;
       if(false)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
         barrier();
         if((((false) && true)))
          barrier();
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(false)
      {
      }
     else
      {
       if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
        return;
       do
        {
         if(((false || (false))))
          {
           if((false))
            barrier();
           for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
            {
             if((false))
              {
               if((false))
                continue;
               if((false))
                break;
               if((((injectionSwitch.x > injectionSwitch.y))))
                continue;
               barrier();
              }
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
            }
           if((bool(bvec2(true, false))))
            {
             if((false))
              {
               do
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               while(((injectionSwitch.x > injectionSwitch.y)));
               barrier();
              }
            }
           else
            {
             if((false))
              barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
           if(false)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
             if((false))
              barrier();
             if(false)
              {
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 barrier();
                }
              }
             else
              {
               if((false))
                barrier();
               if((false))
                {
                 do
                  {
                   if(false)
                    {
                    }
                   else
                    {
                     return;
                    }
                   if((false))
                    barrier();
                  }
                 while(((injectionSwitch.x > injectionSwitch.y)));
                }
               for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
                {
                 if((false))
                  return;
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             if((false))
              barrier();
             barrier();
             if((false))
              barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(((! (! (false)))))
          {
           if((false))
            continue;
           if((false))
            barrier();
           break;
          }
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
           if((false))
            barrier();
           barrier();
          }
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
         subgroupAll(false);
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           if(false)
            {
             if(true)
              {
               if((false))
                continue;
               if((false))
                barrier();
               for(int _injected_loop_counter = 0; _injected_loop_counter != ((((1 << (int(1))) >> (int(1))) << (int(4))) >> (int(4))); _injected_loop_counter ++)
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               if((false))
                barrier();
              }
             else
              {
               if((false))
                barrier();
              }
            }
           else
            {
             if((false))
              barrier();
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
              }
             else
              {
               if((false))
                break;
               if(((injectionSwitch.x > injectionSwitch.y)))
                {
                }
               else
                {
                 if((((false) && true)))
                  {
                   if((false))
                    barrier();
                   if(false)
                    {
                    }
                   else
                    {
                     if((false))
                      barrier();
                    }
                   do
                    {
                     barrier();
                     if((false))
                      barrier();
                    }
                   while(false);
                  }
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             if((false))
              {
               for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
                {
                 if((false))
                  barrier();
                 barrier();
                 if((false))
                  barrier();
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   continue;
                  }
                 if(false)
                  {
                  }
                 else
                  {
                   if((false))
                    barrier();
                  }
                 if(true)
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 else
                  {
                  }
                }
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(true)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                return;
               if((false))
                barrier();
              }
             else
              {
               if((false))
                barrier();
              }
            }
           continue;
           if(((bool(bvec3(false, false, ((injectionSwitch.x > injectionSwitch.y)))))))
            barrier();
          }
         if((false))
          return;
         if((false))
          {
           if(((! (! (false)))))
            {
             if((false))
              barrier();
             barrier();
             if((false))
              barrier();
            }
           do
            {
             barrier();
            }
           while(false);
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if(((bool(bvec4(false, true, false, true)))))
              barrier();
             break;
            }
          }
         if(((! (! (false)))))
          barrier();
         if((false))
          {
           if((false))
            {
             if((false))
              return;
             if((false))
              continue;
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
              }
             else
              {
               if((((false) || false)))
                barrier();
               if(((! (! (false)))))
                {
                 if((false))
                  {
                   if((false))
                    continue;
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    {
                     do
                      {
                       if((false))
                        barrier();
                       return;
                      }
                     while(false);
                    }
                   if((false))
                    barrier();
                   if((false))
                    barrier();
                   if(((injectionSwitch.x < injectionSwitch.y)))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                   if((false))
                    break;
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 if((false))
                  barrier();
                 do
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    continue;
                   if((false))
                    barrier();
                   barrier();
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    {
                     if((false))
                      {
                       if((false))
                        continue;
                       return;
                      }
                     barrier();
                    }
                  }
                 while(false);
                }
               if((false))
                return;
              }
             if((false))
              {
               if(((injectionSwitch.x < injectionSwitch.y)))
                {
                 barrier();
                 if(((! (! (false)))))
                  barrier();
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  continue;
                }
               else
                {
                }
              }
             if((false))
              return;
             continue;
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((false))
              break;
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           do
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             do
              {
               barrier();
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  return;
                 barrier();
                }
              }
             while(false);
             if((false))
              barrier();
            }
           while(false);
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = 1; _injected_loop_counter > (0 | 0); _injected_loop_counter --)
            {
             if((false))
              barrier();
             if((false))
              barrier();
            }
           barrier();
          }
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
        }
       while(false);
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
   else
    {
     if(((bool(bool(false)))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            {
             if((false))
              barrier();
             if((false))
              return;
             return;
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             do
              {
               return;
              }
             while(false);
            }
           if(true)
            {
             barrier();
            }
           else
            {
            }
          }
         return;
        }
       if((false))
        barrier();
       if((false))
        barrier();
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           barrier();
          }
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           barrier();
          }
         if((false))
          {
           if((false))
            return;
           return;
          }
         barrier();
        }
       barrier();
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         do
          {
           if((false))
            {
             do
              {
               barrier();
              }
             while(false);
             if((false))
              barrier();
            }
          }
         while(false);
         if(true)
          {
           if((false))
            barrier();
           if((false))
            barrier();
          }
         else
          {
          }
         if(false)
          {
          }
         else
          {
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             do
              {
               if((false))
                {
                 if((false))
                  {
                   if(((true && (false))))
                    continue;
                   break;
                  }
                 barrier();
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                return;
               return;
              }
             while(false);
             if((false))
              barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       else
        {
        }
      }
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
        {
         if((false))
          barrier();
         if((false))
          {
           do
            {
             if(false)
              {
              }
             else
              {
               do
                {
                 if((false))
                  {
                   if((false))
                    break;
                   barrier();
                  }
                }
               while(false);
               if((((injectionSwitch.x > injectionSwitch.y))))
                break;
              }
             if((false))
              barrier();
             if((false))
              return;
             do
              {
               return;
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if((false))
                return;
              }
             while(false);
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
           if((false))
            {
             if((false))
              barrier();
             barrier();
            }
          }
         if((false))
          break;
        }
       for(int _injected_loop_counter = ((1 << (int(6))) >> (int(6))); _injected_loop_counter != 0; _injected_loop_counter --)
        {
         if(((true && (false))))
          return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            {
             if(false)
              {
              }
             else
              {
               if((false))
                {
                 if((false))
                  barrier();
                 barrier();
                }
              }
             continue;
             if((false))
              barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if(true)
              {
               barrier();
              }
             else
              {
              }
            }
           if((false))
            barrier();
           if((false))
            continue;
           if(true)
            {
             if((false))
              barrier();
            }
           else
            {
            }
           barrier();
           if(false)
            {
            }
           else
            {
             if((false))
              barrier();
            }
           if((false))
            {
             if((false))
              barrier();
             if((false))
              return;
             if((false))
              barrier();
             barrier();
            }
          }
         if((false))
          continue;
         if(false)
          {
           if((false))
            continue;
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              barrier();
             if((false))
              break;
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((! (! (((injectionSwitch.x < injectionSwitch.y))))))
              {
               barrier();
              }
             else
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if((false))
                barrier();
              }
            }
           if(((false || ((! (! (false)))))))
            barrier();
           if((false))
            {
             if((false))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((bool((bvec2(bvec2(bvec2(((injectionSwitch.x < injectionSwitch.y)), true)))))))
              {
               if((false))
                return;
               barrier();
              }
             else
              {
              }
            }
          }
         else
          {
           if((false))
            continue;
           if(false)
            {
            }
           else
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                continue;
               if((false))
                barrier();
               if((false))
                barrier();
               barrier();
              }
            }
           buf[next_virtual_gid] = 2;
           if((false))
            {
             if((false))
              barrier();
             barrier();
            }
          }
         if((false))
          {
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             barrier();
            }
           if((false))
            barrier();
           for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
            {
             barrier();
             if((false))
              barrier();
            }
          }
         if((false))
          barrier();
         if((false))
          {
           if((false))
            barrier();
           break;
          }
         if((false))
          break;
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             if((false))
              barrier();
             barrier();
            }
           else
            {
             if((false))
              break;
            }
          }
         if((false))
          {
           if((false))
            barrier();
           barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if(((bool(bvec3(false, true, true)))))
              return;
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
          }
        }
       if((false))
        barrier();
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
     else
      {
      }
     do
      {
       if((false))
        barrier();
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
     if((false))
      {
       do
        {
         if(true)
          {
           barrier();
          }
         else
          {
          }
         if(((false || (false))))
          return;
         if(true)
          {
           do
            {
             if((false))
              barrier();
            }
           while(false);
          }
         else
          {
          }
        }
       while(false);
       if((false))
        {
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           return;
          }
         else
          {
           if((false))
            {
             if((false))
              return;
             barrier();
            }
          }
        }
      }
     do
      {
       if((false))
        barrier();
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       if((false))
        barrier();
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(false)
        {
         if(false)
          {
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              barrier();
             return;
            }
          }
        }
       else
        {
         for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
           if((false))
            barrier();
           if(((! ((! (! (! (false))))))))
            barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if((false))
        barrier();
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if((false))
          {
           if(false)
            {
             if(((bool((bvec2(bvec2(bvec2((! (! (false))), false))))))))
              return;
            }
           else
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           barrier();
           if((false))
            barrier();
           if((false))
            return;
          }
         if((false))
          barrier();
         subgroupAll(true);
         do
          {
           if((false))
            barrier();
          }
         while(false);
         if((false))
          return;
        }
       else
        {
        }
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if((false))
      barrier();
     if(true)
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if(false)
          {
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
           if((false))
            {
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               return;
              }
             barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           barrier();
          }
        }
      }
     else
      {
       do
        {
         if((false))
          break;
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             for(int _injected_loop_counter = 1; _injected_loop_counter > (0 >> (int(4))); _injected_loop_counter --)
              {
               barrier();
              }
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
           if((false))
            barrier();
           if((false))
            return;
          }
         if((false))
          barrier();
        }
       while(false);
      }
     if(true)
      {
       if((false))
        barrier();
       if((((false) || false)))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         do
          {
           if(false)
            {
            }
           else
            {
             if((false))
              continue;
             if((false))
              return;
            }
           if(true)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
             barrier();
             if((false))
              {
               if((false))
                {
                 if((((bool(bvec4(false, true, true, true)))) && true))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                 if((false))
                  barrier();
                }
               if((((false) || false)))
                barrier();
               barrier();
               if((false))
                barrier();
              }
            }
           else
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               for(int _injected_loop_counter = 1; _injected_loop_counter > (0 | 0); _injected_loop_counter --)
                {
                 barrier();
                }
              }
            }
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
         if((false))
          barrier();
        }
       if((false))
        barrier();
      }
     else
      {
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 else
  {
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
