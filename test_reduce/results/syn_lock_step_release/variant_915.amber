#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((false))
  return;
 if((false))
  barrier();
 for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
  {
   if(false)
    {
    }
   else
    {
     if((false))
      {
       if((false))
        break;
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if((false))
    continue;
  }
 if((false))
  return;
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  barrier();
 do
  {
   if((false))
    barrier();
   if((((bool(bool((((true ? (vec2(((false ? (mat2x4(mat4x3(- 8.2, (float(mat4x2((mix(float(4.2), float((- 64.50)), bool(false))), abs(1.0), 1.0, 1.0, 0.0, 0.0, length(0.0), 1.0))), - 56.45, - 491.097, - 0.0, - 6.4, 290.742, 7789.6077, - 5.0, 6.6, (min(2.9, (clamp(2.9, 2.9, 2.9)))), - 4.1))) : mat2x4(injectionSwitch, 1.0, 0.0, 1.0, 0.0, 0.0, abs(1.0)))))).x : (- 26.09))) > injectionSwitch.y)))))))
    {
     if((false))
      break;
     if((! (! ((false)))))
      barrier();
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       for(int _injected_loop_counter = ((1 << (((~ (~ (((false ? (- 25896) : 0))))) + ((~ (~ (int(2)))))))) >> (int(2))); _injected_loop_counter != (max(0, 0)); _injected_loop_counter --)
        {
         if((false))
          barrier();
         barrier();
        }
      }
     if((false))
      barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        return;
       continue;
      }
     continue;
     if((false))
      barrier();
    }
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      continue;
     return;
    }
   if((false))
    {
     if((false))
      return;
     barrier();
    }
  }
 while(((injectionSwitch.x > injectionSwitch.y)));
 if((false))
  {
   if(((true && (((injectionSwitch.x > injectionSwitch.y))))))
    return;
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
    }
   else
    {
     barrier();
     if((((false)) || false))
      return;
     if((false))
      barrier();
    }
  }
 if((false))
  {
   if((false))
    barrier();
   return;
  }
 if((false))
  {
   if(true)
    {
     barrier();
    }
   else
    {
     if((false))
      barrier();
    }
   if(false)
    {
    }
   else
    {
     if((false))
      return;
     if((false))
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
       return;
      }
     if((false))
      return;
    }
   if((false))
    barrier();
  }
 if((false))
  return;
 if((false))
  {
   if(((((clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
    barrier();
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if(((((false || ((injectionSwitch.x < injectionSwitch.y)))) || false)))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((false))
        barrier();
       if((false))
        {
         if((false))
          barrier();
         return;
        }
      }
     else
      {
      }
     if((false))
      return;
     barrier();
    }
   if((false))
    return;
   if((false))
    barrier();
   if((false))
    return;
   barrier();
  }
 if((((injectionSwitch.x > ((injectionSwitch.y) / abs(1.0))))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((false))
  {
   if((false))
    barrier();
   return;
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     return;
    }
   barrier();
   if((false))
    return;
  }
 if((false))
  return;
 for(int _injected_loop_counter = 1; _injected_loop_counter != (0 >> (int(1))); _injected_loop_counter --)
  {
   if((((injectionSwitch.x > (clamp(injectionSwitch.y, (min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))))
    barrier();
   if(false)
    {
    }
   else
    {
     if((false))
      break;
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       do
        {
         if((false))
          barrier();
         do
          {
           return;
          }
         while(false);
        }
       while(false);
       if(((bool(bvec4((false || (false)), true, true, true)))))
        barrier();
       if((false))
        {
         for(int _injected_loop_counter = ((0 << (((((int(2)) | (int(2)))) | ((~ ((clamp(~ (int(2)), ~ (int(2)), ~ (int(2)))))))))) << (int(2))); _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             if((false))
              {
               if((false))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                break;
               barrier();
              }
            }
           else
            {
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           if((false))
            barrier();
          }
         else
          {
          }
         return;
        }
       if((false))
        barrier();
      }
     if(((! (! (! (((! (((true && (false))))) && true)))))))
      continue;
    }
   if((false))
    continue;
   if((((false) || false)))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if((false))
    {
     if((false))
      return;
     if((false))
      barrier();
     if((false))
      {
       if(((bool(bvec3(false, true, true)))))
        return;
       return;
      }
     return;
     if((false))
      return;
    }
   if((false))
    barrier();
   return;
   if((false))
    barrier();
   if((false))
    return;
  }
 if(false)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
   if((bool((bvec2(bvec4(bvec2((false), false), false, true))))))
    {
     if((false))
      {
       if(((((bool(bvec4(((((injectionSwitch.x > injectionSwitch.y))) || false), true, false, ((injectionSwitch.x > injectionSwitch.y))))) && true))))
        return;
       barrier();
      }
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     barrier();
     if((false))
      barrier();
    }
  }
 if((false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if((false))
  barrier();
 if((((injectionSwitch.x > (clamp(((injectionSwitch.y) / 1.0), injectionSwitch.y, injectionSwitch.y))))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    {
     do
      {
       barrier();
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
    }
   return;
   if((false))
    return;
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    return;
  }
 if((false))
  {
   if((false))
    {
     if((false))
      return;
     return;
     if(((! (! (false)))))
      return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
   if((((! ((! (! (! ((injectionSwitch.x > injectionSwitch.y))))))))))
    barrier();
  }
 uint subgroup_size = gl_SubgroupSize;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  barrier();
 if(false)
  {
  }
 else
  {
   if(((((injectionSwitch.x < injectionSwitch.y)) && (false))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if((false))
    {
     do
      {
       if((false))
        return;
       if((false))
        barrier();
       barrier();
      }
     while(false);
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if((false))
    return;
   if((false))
    barrier();
   if((false))
    {
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   if((false))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 do
  {
   if((false))
    continue;
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if((false))
      break;
     break;
    }
  }
 while(false);
 if((false))
  {
   if((false))
    return;
   if((false))
    {
     if((false))
      {
       for(int _injected_loop_counter = (clamp(1, 1, 1)); _injected_loop_counter != 0; _injected_loop_counter --)
        {
         if(false)
          {
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              break;
             barrier();
            }
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
          }
         if((false))
          return;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
       for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < 1; _injected_loop_counter ++)
        {
         if(((bool(bvec3(((injectionSwitch.x > ((false ? (42.04) : injectionSwitch.y)))), false, true)))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
           return;
          }
         if(true)
          {
           for(int _injected_loop_counter = 0; (! (! (_injected_loop_counter < 1))); _injected_loop_counter ++)
            {
             if((false))
              {
               if((false))
                barrier();
               if((false))
                {
                 for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                  {
                   barrier();
                  }
                 if((false))
                  barrier();
                }
               barrier();
              }
             if((false))
              {
               if((false))
                break;
               break;
              }
             for(int _injected_loop_counter = 1; _injected_loop_counter != (0 >> ((min(int(0), int(0))))); _injected_loop_counter --)
              {
               if((false))
                barrier();
               return;
              }
            }
           if((false))
            break;
          }
         else
          {
          }
         if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            break;
           break;
          }
         if((false))
          break;
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if((false))
          barrier();
        }
      }
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if((false))
      return;
     if(false)
      {
       if(((true && (false))))
        barrier();
      }
     else
      {
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
       if((false))
        return;
      }
    }
   for(int _injected_loop_counter = 1; ((int(ivec2(int(ivec2(_injected_loop_counter, 0)), 0)))) > 0; _injected_loop_counter --)
    {
     if((false))
      barrier();
    }
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      return;
     return;
    }
   if((false))
    barrier();
   for(int _injected_loop_counter = ((1 << (int(7))) >> (((int(7)) + int((injectionSwitch.x))))); (((injectionSwitch.x > injectionSwitch.y)) || (_injected_loop_counter != int((injectionSwitch.x)))); _injected_loop_counter --)
    {
     if((false))
      break;
     if((((injectionSwitch.x > ((false ? (4.7) : ((false ? (- 941.642) : injectionSwitch.y))))))))
      {
       if(((bool(bvec4((false || ((injectionSwitch.x < injectionSwitch.y))), true, ((injectionSwitch.x > injectionSwitch.y)), false)))))
        {
         return;
         for(int _injected_loop_counter = int((((false ? (51.97) : injectionSwitch.x)))); _injected_loop_counter < 1; _injected_loop_counter ++)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            continue;
           barrier();
          }
         if((false))
          continue;
        }
       else
        {
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
        }
      }
     if((false))
      return;
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
    }
   if((false))
    barrier();
  }
 if((false))
  return;
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    return;
   if(((false) && true))
    {
    }
   else
    {
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 if(((((injectionSwitch.x < injectionSwitch.y)) && ((true && ((! (! (((false || (! (! (((injectionSwitch.x > ((true ? injectionSwitch.y : (6780.1301)))))))))))))))))))
  return;
 if((false))
  return;
 if((false))
  barrier();
 if((((false) || false)))
  return;
 if(((((((! (! ((! (! ((bool(bool(injectionSwitch.x > injectionSwitch.y)))))))))) || false)))))
  {
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
     if((false))
      return;
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if((false))
    {
     if((false))
      barrier();
     if((false))
      {
       if((false))
        return;
       return;
      }
     if((false))
      {
       if((false))
        return;
       if((false))
        barrier();
       if((false))
        barrier();
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          barrier();
         if((bool(bvec2((((injectionSwitch.x > injectionSwitch.y))), true))))
          {
           if((false))
            barrier();
           return;
          }
         if((false))
          return;
         if((false))
          barrier();
         barrier();
        }
       if((false))
        barrier();
       do
        {
         if(((false || (false))))
          barrier();
         return;
         if((false))
          barrier();
        }
       while(false);
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      return;
     barrier();
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          {
           if((false))
            return;
           barrier();
          }
         barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if((false))
          barrier();
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
         if((false))
          barrier();
        }
       if((((true && (true && ((bool(bvec2(false, false)))))))))
        barrier();
      }
     if((false))
      barrier();
    }
   if((false))
    return;
   if((! (! (((injectionSwitch.x < injectionSwitch.y))))))
    {
     if((false))
      barrier();
     if((false))
      return;
     if((false))
      barrier();
     barrier();
     if((((((true ? injectionSwitch : (vec2(52.53, 92.78)))).x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(true)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(((false || (false))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if((false))
          barrier();
         if((false))
          barrier();
         if(((((bool((bvec2(bvec4(bvec2(injectionSwitch.x > injectionSwitch.y, false), false, false)))))))))
          return;
         if((false))
          {
           if((false))
            return;
           barrier();
          }
         if((false))
          {
           if((false))
            return;
           if((bool((bool(bvec3(bool(true), true, false))))))
            {
             if((false))
              return;
             if((false))
              {
               if((! (((! ((((((injectionSwitch.x) / 1.0) > injectionSwitch.y))))) || false))))
                return;
               return;
              }
             barrier();
            }
           else
            {
             if((false))
              barrier();
            }
          }
         if((((false || (injectionSwitch.x < injectionSwitch.y)))))
          {
           return;
           if(((! (! (false)))))
            return;
          }
         else
          {
           if((false))
            return;
          }
         if((((injectionSwitch.x > (clamp(injectionSwitch.y, injectionSwitch.y, ((false ? (3.0) : injectionSwitch.y))))))))
          return;
         if((false))
          barrier();
         if((false))
          {
           if((false))
            return;
           return;
          }
        }
      }
     else
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
        }
      }
     if((false))
      return;
     if((false))
      {
       if((false))
        return;
       return;
      }
     if((false))
      {
       if((((((injectionSwitch) * mat2((injectionSwitch.y))).x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((false))
        return;
      }
     if((true && ((false))))
      return;
    }
   else
    {
     for(int _injected_loop_counter = (0 ^ int((injectionSwitch.y))); _injected_loop_counter != 0; _injected_loop_counter --)
      {
       for(int _injected_loop_counter = (0 >> (1 * ((((int(2)) >> 0))))); _injected_loop_counter != 1; _injected_loop_counter ++)
        {
         if(true)
          {
           if((false))
            {
             if((false))
              break;
             if((false))
              {
               if(((bool(bvec4(false, false, true, false)))))
                {
                 if((false))
                  continue;
                 barrier();
                }
               barrier();
              }
             if((false))
              {
               if(false)
                {
                }
               else
                {
                 if((false))
                  barrier();
                 if(((! (! (false)))))
                  {
                   if((false))
                    barrier();
                   barrier();
                  }
                 if((false))
                  return;
                 if((false))
                  barrier();
                }
               if(((! (! (false)))))
                break;
               if((((injectionSwitch.x > (vec2(1.0, 1.0) * (((true ? injectionSwitch : (injectionSwitch))))).y))))
                break;
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  return;
                 return;
                }
               barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
               if(((false || (false))))
                continue;
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             return;
             if((false))
              break;
            }
          }
         else
          {
          }
         if((false))
          break;
         if((false))
          barrier();
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(true)
        {
         barrier();
        }
       else
        {
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      return;
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     if((false))
      {
       if((((bool(bvec2((injectionSwitch.x > injectionSwitch.y), false))))))
        barrier();
       barrier();
       if((false))
        return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      {
       if((false))
        return;
       barrier();
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     barrier();
    }
   if(((! (! (false)))))
    {
     if((false))
      return;
     if((false))
      barrier();
     barrier();
    }
   if((false))
    return;
   if((false))
    barrier();
   for(int _injected_loop_counter = 1; _injected_loop_counter > ((0) / 1); _injected_loop_counter --)
    {
     if((false))
      break;
     do
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(false);
     if((false))
      barrier();
     for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > ((- 42803 | 89196) & 0); _injected_loop_counter --)
      {
       if((false))
        barrier();
       if((false))
        break;
       if((false))
        {
         if((false))
          barrier();
         if((false))
          barrier();
         barrier();
         if(((true && ((! (! (false)))))))
          break;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      continue;
    }
   if((false))
    barrier();
   if((false))
    {
     if((false))
      {
       if(((bool(bvec4(((injectionSwitch.x > injectionSwitch.y)), false, true, true)))))
        barrier();
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((false))
        return;
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((false) || false)))
        barrier();
       return;
       if((false))
        return;
      }
     return;
     if((false))
      barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if(((((max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if(false)
  {
  }
 else
  {
   do
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          {
           if((false))
            continue;
           barrier();
          }
         break;
         if((false))
          continue;
        }
       if((((false) || false)))
        {
         if((false))
          {
           if((((injectionSwitch.x > (vec2(mat4x2(injectionSwitch, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0))).y))))
            break;
           barrier();
          }
         if((false))
          {
           if((false))
            barrier();
           if(((false) || false))
            {
            }
           else
            {
             barrier();
             if((false))
              barrier();
            }
          }
         for(int _injected_loop_counter = 1; _injected_loop_counter != ((clamp(0 >> (int(1)), 0 >> (int(1)), 0 >> (int(1))))); _injected_loop_counter --)
          {
           return;
          }
         if(((false || (bool(bool((false)))))))
          barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         if((false))
          continue;
         barrier();
         if((false))
          barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         barrier();
        }
       else
        {
         if((false))
          {
           if((false))
            barrier();
           return;
          }
         if((false))
          barrier();
        }
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((false))
        {
         if((false))
          barrier();
         continue;
        }
       if((false))
        barrier();
      }
     if(((((mix(float((0.7)), float(injectionSwitch.x), bool(((injectionSwitch.x < injectionSwitch.y))))) > injectionSwitch.y))))
      barrier();
     if((false))
      {
       if((false))
        return;
       if((false))
        {
         if((false))
          barrier();
         break;
        }
       if((false))
        barrier();
       if((((((((true ? injectionSwitch.x : (injectionSwitch[1])) / 1.0))) > injectionSwitch.y))))
        barrier();
       if((((false || (bool((bvec2(bvec2(bvec2(false, false))))))))))
        {
         if((((injectionSwitch.x > (mix(float((3619.1774)), float(injectionSwitch.y), bool(true)))))))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
             barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           barrier();
          }
         if((false))
          {
           if((false))
            barrier();
           if((((((injectionSwitch.x > injectionSwitch.y))) || false)))
            continue;
           break;
          }
         if(((! (! (false)))))
          barrier();
         if(((((injectionSwitch.x > injectionSwitch.y)) || (bool(bvec3(((injectionSwitch.x > injectionSwitch.y)), ((injectionSwitch.x > injectionSwitch.y)), true))))))
          {
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
         else
          {
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           if((false))
            barrier();
           barrier();
          }
         if((false))
          {
           if(true)
            {
             return;
             if((false))
              return;
            }
           else
            {
             if((false))
              barrier();
            }
          }
        }
       return;
       if(false)
        {
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = (0 & - 61805); _injected_loop_counter != 1; _injected_loop_counter ++)
            {
             if((false))
              break;
             barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
  }
 if((false))
  barrier();
 if((false))
  barrier();
 if(((((! (! (injectionSwitch.x > injectionSwitch.y)))))))
  {
   if((false))
    barrier();
   barrier();
  }
 for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      break;
     barrier();
    }
   if((false))
    {
     if((false))
      continue;
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 if((((! (! (bool((bvec2(bvec2(bvec2(false, ((injectionSwitch.x < injectionSwitch.y)))))))))))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((false))
  return;
 if((false))
  {
   if((false))
    barrier();
   if((false))
    {
     if(((((bool(bvec2(false, false))) || false))))
      barrier();
     return;
    }
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     if(false)
      {
       if((false))
        return;
      }
     else
      {
       barrier();
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     barrier();
    }
   barrier();
   for(int _injected_loop_counter = 1; (int(ivec2(_injected_loop_counter, 0))) > ((((0) * ((1 << (int(4))) >> (int(4))))) | (((true ? 0 : (int(- 823.704)))))); _injected_loop_counter --)
    {
     if((((injectionSwitch.x > ((true ? injectionSwitch : (vec2(90.44, 8.0)))).y))))
      barrier();
    }
  }
 if((false))
  return;
 if((false))
  {
   if(((bool(bvec2(false, true)))))
    return;
   if((true && ((((((injectionSwitch.x > injectionSwitch.y)))) && true))))
    return;
   barrier();
  }
 if((false))
  return;
 uint num_workgroup = gl_NumWorkGroups.x;
 for(int _injected_loop_counter = 1; _injected_loop_counter > (0 | 0); _injected_loop_counter --)
  {
   if((false))
    {
     if((false))
      {
       if((false))
        return;
       barrier();
      }
     if((false))
      continue;
     if((true && ((((injectionSwitch.x > injectionSwitch.y))))))
      barrier();
     for(int _injected_loop_counter = 1; _injected_loop_counter > (min(0, (min(0, 0)))); _injected_loop_counter --)
      {
       if((false))
        barrier();
       if((false))
        barrier();
      }
     if((false))
      {
       for(int _injected_loop_counter = ((int((injectionSwitch.x))) >> (0 << (int(6)))); _injected_loop_counter < 1; ((_injected_loop_counter ++) * 1))
        {
         if(((((bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, true, false)))))))
          barrier();
         barrier();
        }
       if((false))
        barrier();
       do
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            {
             if((((false) && true)))
              return;
             barrier();
            }
           barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
       if((false))
        return;
       if((false))
        break;
       if((false))
        barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        {
         if((false))
          continue;
         if((false))
          {
           if((false))
            return;
           break;
          }
         if((false))
          break;
         if((false))
          barrier();
         do
          {
           if((false))
            barrier();
           barrier();
           if(((false || (false))))
            break;
           if((false || ((false))))
            break;
          }
         while(false);
         if((((((injectionSwitch.x > injectionSwitch.y) && true)))))
          barrier();
        }
       for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
        {
         for(int _injected_loop_counter = 0; _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
          {
           if((false))
            {
             if((false))
              barrier();
             barrier();
            }
           return;
           if((false))
            {
             if((false))
              barrier();
             barrier();
            }
           if((false))
            {
             if(((bool(bvec2(false, true)))))
              break;
             continue;
            }
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
       if((false))
        return;
      }
     if((false))
      break;
     if((((injectionSwitch.x > ((injectionSwitch.y) + 0.0)))))
      continue;
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        continue;
       if((false))
        barrier();
       continue;
      }
     return;
     if((false))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       break;
       if((false))
        continue;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        continue;
       barrier();
      }
    }
   if((false))
    {
     if((false))
      break;
     barrier();
    }
   if((false))
    {
     if((false))
      barrier();
     return;
    }
  }
 if((((! ((true && (! ((clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y))))))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   do
    {
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = 0; _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
      {
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if((false))
      return;
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(((false) && true));
   if((false))
    {
     if((false))
      return;
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         if((false))
          return;
         return;
        }
       if((false))
        return;
       return;
      }
     if((bool((bvec2(bvec2(bvec2(((injectionSwitch.x > injectionSwitch.y)), true)))))))
      {
      }
     else
      {
       if((((false)) && true))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(((true && (false))))
    barrier();
   if((false))
    barrier();
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    {
     if((false))
      return;
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
   if((false))
    barrier();
  }
 if(((false || (false))))
  {
   if((false))
    return;
   return;
  }
 if((false))
  {
   do
    {
     barrier();
    }
   while(((injectionSwitch.x > (mat2((injectionSwitch.y)) * (injectionSwitch)).y)));
   if(((true && (false))))
    return;
   if((false))
    barrier();
   if((false))
    barrier();
  }
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   barrier();
  }
 if((false))
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   if((false))
    return;
   barrier();
  }
 if((false))
  return;
 if(((injectionSwitch.x > (max(injectionSwitch, injectionSwitch)).y)))
  {
  }
 else
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if((((! (! ((injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
   if((false))
    return;
   if((false))
    barrier();
  }
 do
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    continue;
   if((((false || ((false)))) && true))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        continue;
       barrier();
      }
     if((false))
      break;
     if(((bool(bool(false)))))
      {
       if((((false || (bool(bvec4(false, false, false, true)))))))
        barrier();
       return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
      }
     if(true)
      {
       if((false))
        {
         if((false))
          barrier();
         if((false))
          {
           if((false))
            {
             if((false))
              continue;
             return;
            }
           barrier();
          }
         barrier();
        }
       if((false))
        continue;
      }
     else
      {
      }
     if((false))
      return;
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(((bool(bvec4(((injectionSwitch.x > ((injectionSwitch) * vec2(1.0, 1.0)).y)), true, true, true)))))
      barrier();
     if((false))
      return;
    }
   if((false))
    break;
  }
 while((true && (false)));
 if((((((false) || false)) && true)))
  return;
 uint workgroup_size = (uvec3(1u, 1u, ((1u) << uint((injectionSwitch.x)))) * (gl_WorkGroupSize)).x;
 uint workgroup_id = gl_WorkGroupID.x;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    return;
   barrier();
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if(((false || (false))))
    barrier();
   if((false))
    return;
   barrier();
  }
 do
  {
   if((((((injectionSwitch) + vec2(0.0, 0.0)).x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   if((((false) || false)))
    return;
   if((false))
    {
     if(true)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(((true && (false))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          barrier();
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           if((false))
            barrier();
           if((false))
            {
             if((false))
              barrier();
             if((false))
              return;
             for(int _injected_loop_counter = 1; _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
              {
               if((false))
                break;
               if(true)
                {
                 if((false))
                  barrier();
                 barrier();
                }
               else
                {
                 if((false))
                  continue;
                }
              }
            }
           do
            {
             for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
              {
               barrier();
              }
            }
           while(false);
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
          }
        }
      }
     else
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
      }
     return;
    }
  }
 while(false);
 if((false))
  barrier();
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = workgroup_base + subgroup_id * (((((uint(uint(subgroup_size)))) >> 0u) / uint((injectionSwitch.y)))) + subgroup_local_id;
 if((false))
  barrier();
 if((true && ((bool(bvec3((((injectionSwitch.x > injectionSwitch.y))), true, true))))))
  {
   if((false))
    barrier();
   if((((false)) || ((((injectionSwitch.x > injectionSwitch.y) && true)))))
    {
     if((false))
      return;
     barrier();
    }
   if(((! (! (false)))))
    barrier();
   if(((bool(bvec4(false, ((((injectionSwitch.x > injectionSwitch.y)) && true)), false, false)))))
    {
     if(false)
      {
       if((((false)) || false))
        return;
       if((((false) && true)))
        barrier();
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
    }
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(((false || (false))))
      {
       for(int _injected_loop_counter = ((max(int(ivec4((0 | 1), 0, 1, (0 ^ 1))), int(ivec4((0 | 1), 0, 1, (0 ^ 1)))))); _injected_loop_counter > (0 << (int(7))); _injected_loop_counter --)
        {
         barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          return;
         if((false))
          barrier();
         if((false))
          return;
         return;
        }
       if((false))
        barrier();
      }
     if((false))
      {
       if((false))
        barrier();
       return;
      }
     return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   do
    {
     if((false))
      barrier();
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
   if(((bool(bvec4(false, true, false, false)))))
    barrier();
   if(((bool(bvec3(((false) && true), false, false)))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((bool(bvec3((((! (! ((false))))) || false), false, false))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     do
      {
       return;
       if((false))
        barrier();
       if((false))
        barrier();
       if((false))
        {
         do
          {
           barrier();
          }
         while(false);
         if((((((injectionSwitch.x > injectionSwitch.y)) || false))))
          barrier();
        }
       if((false))
        break;
      }
     while(false);
     if((false))
      barrier();
     if((false))
      return;
     if((false))
      barrier();
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
       if((false))
        {
         if((((bool(bool(bool(bool(false))))))))
          {
           if((false))
            barrier();
           return;
          }
         barrier();
        }
      }
    }
   if((((! (! (bool(bvec3((! (! (false))), true, true))))))))
    barrier();
   if((false))
    {
     if((false))
      {
       do
        {
         if((false))
          barrier();
        }
       while(false);
       return;
       if((false))
        barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      return;
     barrier();
     if((false))
      barrier();
    }
   if(((bool(bvec2(false, true)))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    barrier();
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
     if((false))
      {
       do
        {
         return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while((bool(bvec3((bool(bvec3((true && (false)), false, true))), true, true))));
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if((false))
      return;
    }
   else
    {
     if((false))
      barrier();
     if(true)
      {
       if((false))
        barrier();
       return;
      }
     else
      {
       if((false))
        return;
      }
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      barrier();
     if(false)
      {
      }
     else
      {
       if((false))
        barrier();
       if((false))
        {
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            return;
           return;
          }
         if((false))
          return;
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           barrier();
          }
         barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if((false))
      return;
     if((((injectionSwitch.x > ((false ? (- 2.1) : (min(injectionSwitch.y, injectionSwitch.y))))))))
      barrier();
     if((! (! ((! (! ((((injectionSwitch.x > injectionSwitch.y))))))))))
      {
       if((false))
        {
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           return;
          }
         barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
       return;
      }
     if((false))
      barrier();
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        return;
       return;
      }
    }
   if((false))
    barrier();
   if(false)
    {
    }
   else
    {
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((false) || false)))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     if((((((true ? injectionSwitch.x : (5.0))) > injectionSwitch.y))))
      barrier();
     if((false))
      return;
    }
   if((false))
    return;
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(true)
      {
       if((false))
        barrier();
       if((false))
        return;
       if((false))
        {
         if((! (! (((injectionSwitch.x > injectionSwitch.y))))))
          {
           if((false))
            return;
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             do
              {
               if((false))
                continue;
               barrier();
              }
             while(((injectionSwitch.x > injectionSwitch.y)));
            }
           if((false))
            return;
          }
         barrier();
        }
       if((((injectionSwitch.x > (vec2(injectionSwitch[0], injectionSwitch[1])).y))))
        {
         if((false))
          return;
         if(((true && (false))))
          barrier();
         return;
        }
      }
     else
      {
      }
     return;
     if((false))
      barrier();
    }
  }
 if((false))
  return;
 if((bool(bvec2(((((! (! (((injectionSwitch.x > injectionSwitch.y)))))) && true)), true))))
  {
   if(true)
    {
     if((false))
      return;
    }
   else
    {
     if((false))
      return;
    }
   barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
    }
   else
    {
     do
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          continue;
         barrier();
        }
       for(int _injected_loop_counter = 0; _injected_loop_counter != ((1) >> 0); _injected_loop_counter ++)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
           return;
           if((false))
            {
             if(((((min(injectionSwitch.x, (clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y))))
              break;
             barrier();
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if((false))
        barrier();
       if((((injectionSwitch.x > (clamp((vec2(vec3(injectionSwitch, 1.0))).y, (vec2(vec3(injectionSwitch, 1.0))).y, (vec2(vec3(injectionSwitch, 1.0))).y))))))
        break;
      }
     while(((injectionSwitch.x > (0.0 + (injectionSwitch.y)))));
    }
   if((false))
    barrier();
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
     if((false))
      return;
     if((false))
      barrier();
     if(false)
      {
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((false))
        {
         if((false))
          return;
         barrier();
        }
       if(true)
        {
         if((false))
          barrier();
        }
       else
        {
         if(((((bool(bvec4(false, false, false, true))) && true))))
          return;
         if((false))
          {
           if(((((injectionSwitch.x < injectionSwitch.y)) && (((injectionSwitch.x > injectionSwitch.y))))))
            return;
           barrier();
          }
        }
       barrier();
      }
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if((false))
    return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  barrier();
 if(false)
  {
  }
 else
  {
   if((false))
    {
     if((false))
      barrier();
     if((((! (! (false)))) || false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       return;
      }
     if((false))
      barrier();
     if((((false) || false)))
      return;
    }
  }
 if(((! (! (false)))))
  {
   if((false))
    return;
   if((false))
    barrier();
   do
    {
     do
      {
       if((false))
        continue;
       if(((bool(bvec4(false, true, false, false)))))
        {
         if(true)
          {
           if(false)
            {
            }
           else
            {
             if(((bool(bvec4(false, true, true, true)))))
              barrier();
             if((false))
              barrier();
            }
           barrier();
          }
         else
          {
          }
        }
       if((false))
        return;
       if(true)
        {
         if((((! ((false || (! (((! (! (! (! ((((injectionSwitch.x > injectionSwitch.y))))))))) && (true && (true))))))))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
            {
             barrier();
            }
          }
         if((false))
          break;
        }
       else
        {
        }
       if(((false || (false))))
        barrier();
      }
     while(false);
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
       break;
      }
     if(true)
      {
       if((false))
        barrier();
       if((false))
        barrier();
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
      }
     else
      {
       if((false))
        return;
       if((false))
        {
         if((false))
          break;
         barrier();
        }
      }
    }
   while((bool(bool(false))));
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      barrier();
     return;
    }
   if((false))
    barrier();
   barrier();
  }
 if(((bool(bool(false)))))
  return;
 if((((! ((! (! (! ((((injectionSwitch.x > injectionSwitch.y)))))))))) && true))
  barrier();
 if((false))
  {
   if((false))
    return;
   barrier();
  }
 uint next_virtual_gid = workgroup_base + subgroup_id * ((subgroup_size) / 1u) + (((0u | 0u) ^ ((1u * (clamp(((min(((uint(((((uvec3(0u, 0u, 0u) | ((uvec3(0u, 0u, (~ (~ ((clamp(0u, 0u, 0u)))))) + ((false ? (uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint((injectionSwitch.x)), 0u)))))))) | (uvec3(subgroup_local_id, uint((injectionSwitch.x)), 0u))))) + 1) % subgroup_size, ((((uint(((((false ? (uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint((injectionSwitch.x)), 0u)))) | (uvec3(subgroup_local_id, uint((injectionSwitch.x)), 0u))))) + 1)) >> uint((injectionSwitch.x))) % subgroup_size))), ((min(((uint((((((min((max(uvec3(0u, 0u, 0u) | ((uvec3(0u, 0u, 0u) + ((false ? (uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint((injectionSwitch.x)), 0u))))), uvec3(0u, 0u, 0u) | ((uvec3(0u, 0u, 0u) + ((false ? (uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint((injectionSwitch.x)), 0u))))))), uvec3(0u, 0u, 0u) | ((uvec3(0u, 0u, 0u) + ((false ? (uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint((injectionSwitch.x)), 0u)))))))))) | (uvec3(subgroup_local_id, uint((injectionSwitch.x)), 0u))))) + 1) % subgroup_size, (((((1u * (uint(((((false ? (uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint((injectionSwitch.x)), 0u)))) | (uvec3(subgroup_local_id, uint((injectionSwitch.x)), 0u))))))) + 1)) >> uint((injectionSwitch.x))) % subgroup_size))), (clamp((((clamp((0u + ((clamp(min(((uint(((((uvec3(0u, 0u, 0u) | ((uvec3(0u, 0u, 0u) + ((false ? (uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint((injectionSwitch.x)), 0u)))))))) | (uvec3(subgroup_local_id, uint((injectionSwitch.x)), 0u))))) + 1) % subgroup_size, ((((uint(((((false ? (uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint((injectionSwitch.x)), 0u)))) | (uvec3(subgroup_local_id, uint((injectionSwitch.x)), 0u))))) + 1)) >> uint((injectionSwitch.x))) % subgroup_size), min(((uint(((((uvec3(0u, 0u, 0u) | ((uvec3(0u, 0u, 0u) + ((false ? (uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint((injectionSwitch.x)), 0u)))))))) | (uvec3(subgroup_local_id, uint((injectionSwitch.x)), 0u))))) + 1) % subgroup_size, ((((uint(((((false ? (uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint((injectionSwitch.x)), 0u)))) | (uvec3(subgroup_local_id, uint((injectionSwitch.x)), 0u))))) + 1)) >> uint((injectionSwitch.x))) % subgroup_size), min(((uint(((((uvec3(0u, 0u, 0u) | ((uvec3(0u, 0u, 0u) + ((false ? (uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint((injectionSwitch.x)), 0u)))))))) | (uvec3(subgroup_local_id, uint((injectionSwitch.x)), 0u))))) + 1) % subgroup_size, ((((uint(((((false ? (uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint((injectionSwitch.x)), 0u)))) | (uvec3(subgroup_local_id, uint((injectionSwitch.x)), 0u))))) + 1)) >> uint((injectionSwitch.x))) % subgroup_size))))), min(((uint(((((uvec3(0u, 0u, 0u) | ((uvec3(0u, 0u, 0u) + ((false ? (uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint((injectionSwitch.x)), 0u)))))))) | (uvec3(subgroup_local_id, uint((injectionSwitch.x)), 0u))))) + 1) % subgroup_size, ((((uint(((((false ? (uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint((injectionSwitch.x)), 0u)))) | (uvec3(subgroup_local_id, uint((injectionSwitch.x)), 0u))))) + 1)) >> uint((injectionSwitch.x))) % subgroup_size), min(((uint(((((uvec3(0u, 0u, 0u) | ((uvec3(0u, 0u, 0u) + ((false ? (uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint((injectionSwitch.x)), 0u)))))))) | (uvec3(subgroup_local_id, uint((injectionSwitch.x)), 0u))))) + 1) % subgroup_size, ((((uint(((((false ? (uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint((injectionSwitch.x)), 0u)))) | (uvec3(subgroup_local_id, uint((injectionSwitch.x)), 0u))))) + 1)) >> uint((injectionSwitch.x))) % subgroup_size))))), ((min(((uint(((((uvec3(0u, 0u, 0u) | ((uvec3(0u, 0u, 0u) + ((false ? (uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint((injectionSwitch.x)), 0u)))))))) | (uvec3(subgroup_local_id, uint((injectionSwitch.x)), 0u))))) + 1) % subgroup_size, ((((uint(((((false ? (uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint((injectionSwitch.x)), 0u)))) | (uvec3(subgroup_local_id, uint(((true ? (injectionSwitch.x) : (- 7.1)))), 0u))))) + 1)) >> uint((injectionSwitch.x))) % subgroup_size))), ((min(((uint(((((uvec3(0u, 0u, 0u) | ((uvec3(0u, 0u, 0u) + ((false ? (uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint((injectionSwitch.x)), 0u)))))))) | (uvec3(subgroup_local_id, uint((injectionSwitch.x)), 0u))))) + 1) % subgroup_size, ((((((uint(((((false ? (uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint((injectionSwitch.x)), 0u)))) | (uvec3(subgroup_local_id, uint((injectionSwitch.x)), 0u))))) + 1) - 0u))) >> uint((injectionSwitch.x))) % subgroup_size)))))))))));
 if((false))
  barrier();
 if((bool(bvec3(((bool(bvec2(((injectionSwitch.x > injectionSwitch.y)), true)))), true, ((injectionSwitch.x < injectionSwitch.y))))))
  barrier();
 buf[virtual_gid] = 1;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(false)
  {
  }
 else
  {
   if((false))
    barrier();
   if((false))
    return;
  }
 if((false))
  barrier();
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     return;
    }
   if((false))
    barrier();
   barrier();
  }
 for(int _injected_loop_counter = (((((clamp(1, ((1) | (1)), 1)) << (int(3)))) | ((((int(ivec3((1 << (int(3))), 1, 0)))) | ((1 << (int(3))))))) >> ((((clamp(((int(3)) | (int(3))), (((min(((int(3)) | (int(3))), (min(((int(3)) | (int(ivec2((int(3)), (0 >> (int(1))))))), (int(ivec3(((int(3)) | (int(ivec2((int(3)), (0 >> (int(1))))))), 1, 0)))))))) | (((int(3)) | (int((0 | (3))))))), ((int(3)) | (int((clamp(3, 3, 3))))))) >> 0)))); (false || ((! (! ((true && ((! (! (_injected_loop_counter != 0)))))))))); _injected_loop_counter --)
  {
   if((false))
    {
     if((false))
      continue;
     if((false))
      {
       for(int _injected_loop_counter = ((0 | 0) | 1); _injected_loop_counter != (8402 & 0); _injected_loop_counter --)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if((false))
          barrier();
         barrier();
         if((((((false)) || false)) || false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           do
            {
             if((false))
              return;
             barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
             if((false))
              barrier();
            }
           while(false);
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      break;
     if((false))
      {
       if((false))
        break;
       barrier();
      }
    }
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     atomicStore(buf[next_virtual_gid], uint(2), 4, 64, (max(4, 4)));
     if((((injectionSwitch.x > ((true ? ((injectionSwitch) / vec2(1.0, 1.0)) : (vec2(- 464.844, 6.8)))).y))))
      barrier();
     if((false))
      barrier();
    }
   else
    {
     if(((bool(bool((bool(bool(((injectionSwitch.x > injectionSwitch.y))))))))))
      barrier();
     if((false))
      {
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
       barrier();
      }
    }
   if((false))
    barrier();
   if((false))
    return;
   if((false))
    return;
   if((false))
    barrier();
   if(((((mix(float(injectionSwitch.x), float(((clamp(- 94.03, ((- 94.03) - 0.0), - 94.03)))), bool(false))) > injectionSwitch.y)) || (true)))
    {
     do
      {
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
       if((false))
        barrier();
      }
     while(false);
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        continue;
       barrier();
      }
     if((false))
      {
       if((! ((false || (! ((false)))))))
        break;
       if((false))
        {
         for(int _injected_loop_counter = (0 ^ 0); _injected_loop_counter != 1; _injected_loop_counter ++)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              continue;
             barrier();
            }
          }
        }
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((((((injectionSwitch.x > injectionSwitch.y) && ((injectionSwitch.x < injectionSwitch.y)))))))
        barrier();
       do
        {
         barrier();
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
       if((false))
        {
         if(((bool(bvec3(false, ((true) || false), false)))))
          break;
         do
          {
           if((false))
            barrier();
           barrier();
          }
         while((bool(bvec3(false, false, false))));
         if((bool(bvec4((((injectionSwitch.x > injectionSwitch.y))), true, ((injectionSwitch.x > injectionSwitch.y)), true))))
          return;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
       if((false))
        {
         if((false))
          break;
         if((false || ((true && ((false))))))
          barrier();
         return;
        }
      }
     if((false))
      break;
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
     else
      {
      }
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(true)
        {
         return;
         if((false))
          barrier();
        }
       else
        {
        }
      }
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
     if((false))
      continue;
     if((false))
      {
       if((false))
        barrier();
       if((false))
        return;
       break;
      }
     if((false))
      return;
     if((false))
      barrier();
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(((((bool((bvec2(bvec3(bvec2(((injectionSwitch.x > injectionSwitch.y)), true), true))))) || ((injectionSwitch.x > injectionSwitch.y))))))
          break;
         barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          break;
         continue;
        }
       if((false))
        {
         if((false))
          barrier();
         return;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(((((float(mat4((float(mat4(injectionSwitch.x, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0))), 1.0, 0.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), tan(0.0), determinant(mat3(1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0)), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, 1.0, 0.0, 0.0, 1.0, sqrt(0.0), 1.0, 0.0))) > injectionSwitch.y))))
          barrier();
         barrier();
         if((false))
          break;
        }
       if((false))
        return;
       if((false))
        continue;
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
         barrier();
        }
      }
     if((false))
      {
       if((((injectionSwitch.x > (clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
        barrier();
       if((false))
        continue;
       continue;
      }
     if((false))
      break;
     if((false))
      break;
     if(((! (! ((((true && (((false || (bool((bvec2(bvec2(bvec2(((! ((false || ((! (! (! ((injectionSwitch.x > injectionSwitch.y))))))))) && true), false)))))))))))))))))
      {
       if(((true) && true))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
         if((false))
          barrier();
        }
      }
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if((! ((true && (! ((false)))))))
        barrier();
       if(((bool((bvec3(bvec4(bvec3((! (! (((injectionSwitch.x > injectionSwitch.y))))), true, true), true)))))))
        barrier();
      }
     else
      {
      }
     if(((((max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
      break;
    }
   if((((injectionSwitch.x > (max(injectionSwitch, injectionSwitch)).y))))
    {
     if((false))
      break;
     if(((((min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
      continue;
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
       barrier();
      }
     if((false))
      {
       if(((! (! (false)))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     if(((! ((! (! (! (((injectionSwitch.x > injectionSwitch.y))))))))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       break;
      }
     for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
      {
       if((((((injectionSwitch.x > injectionSwitch.y)) || ((injectionSwitch.x > injectionSwitch.y))))))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     if((false))
      barrier();
    }
   if((false))
    barrier();
   if((false))
    break;
   if((false))
    {
     if((false))
      continue;
     for(int _injected_loop_counter = (0 >> (int(4))); _injected_loop_counter < (1 & 1); _injected_loop_counter ++)
      {
       if((false))
        break;
       if((false))
        {
         if((false))
          break;
         return;
        }
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if((false))
      break;
     if((false))
      barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((! (! ((! (! ((injectionSwitch.x > injectionSwitch.y))))))))))
    {
     if((false))
      continue;
     continue;
    }
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
