#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((((injectionSwitch.x > (min(injectionSwitch, ((injectionSwitch) - vec2(0.0, (clamp(0.0, 0.0, 0.0)))))).y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     barrier();
    }
   barrier();
   if(((bool(bvec3(false, false, true)))))
    barrier();
  }
 if((false))
  barrier();
 if(((((! (true && (((! (! ((((((((! (! (false)))) || false) || (! ((! ((! (! (((! ((bool(bool(! (! ((((true && ((bool((! (! (bool((clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)))))))))))))))))) && true)))))))))) && true))))))))) && ((injectionSwitch.x < injectionSwitch.y)))))
  {
   if((false))
    barrier();
   barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 if(((((((bool(bvec4((false || (false)), false, false, false)))) && true)) || false)))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if(((((clamp(injectionSwitch.x, injectionSwitch.x, (1.0 * (((injectionSwitch.x) / 1.0))))) > (clamp(injectionSwitch, (max(injectionSwitch, injectionSwitch)), injectionSwitch)).y))))
  {
   if((false))
    barrier();
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((! (! ((false)))))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((((true && ((injectionSwitch.x > injectionSwitch.y))))))
  barrier();
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((false))
  barrier();
 if((! ((true && (! (((bool(bvec2((((true && (((injectionSwitch.x < injectionSwitch.y)) && ((true && (((((((((true && (((injectionSwitch.x > injectionSwitch.y))))) && true)) && true))) && true))))))) && ((injectionSwitch.x < injectionSwitch.y))), ((bool(bool((((bool((bvec2(bvec2(bvec2((injectionSwitch.x < injectionSwitch.y), false)))))) && true))))))))))))))))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   barrier();
   if((((((false) && true)) || false)))
    barrier();
  }
 if((false))
  barrier();
 if((false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   if((bool(bvec4((false), ((injectionSwitch.x > injectionSwitch.y)), true, false))))
    barrier();
   if(((((mix(vec2(((- 6753.3841 - - 3.8)), (- 1.7)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
  }
 uint num_workgroup = ((gl_NumWorkGroups.x) / (((1u & 1u)) << 0u));
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((false) && true)))
    barrier();
   if((false))
    {
     if(((false || (false))))
      {
       if(((! (! (false)))))
        {
         if((((false) || false)))
          barrier();
         barrier();
        }
       barrier();
      }
     barrier();
    }
   barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
  }
 if((false))
  barrier();
 if((false))
  {
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
  }
 if((false))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 uint workgroup_id = ((false ? (uvec3(34804u, 67236u, (0u | (137787u)))) : gl_WorkGroupID)).x;
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 uint workgroup_base = workgroup_size * (clamp(((false ? (atomicMax(subgroup_size, num_workgroup)) : workgroup_id)), workgroup_id, (~ (~ (workgroup_id)))));
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(((! (! (false)))))
  barrier();
 if((false))
  barrier();
 if(((! (! (((((bool(bool(bool(bvec4((! ((bool(bool(! ((bool(bvec2((! (! (false))), true))))))))), true, true, true)))))))) || false)))))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
 uint virtual_gid = (((((true ? 0u ^ (((((((workgroup_base) | (workgroup_base))) >> 0u)) ^ uint((injectionSwitch.x))) + subgroup_id * ((subgroup_size) << 0u) + subgroup_local_id) : (subgroup_id)))) - 0u));
 if((false))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   barrier();
  }
 uint next_virtual_gid = ((((((0u | (((((injectionSwitch.x > injectionSwitch.y)) ? (subgroup_id) : (((workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size))) | ((0u | ((((((((workgroup_base) << 0u) + ((min((subgroup_id * subgroup_size), (subgroup_id * subgroup_size))) >> 0u) + (((clamp(subgroup_local_id, subgroup_local_id, (uint(uvec2((0u | (subgroup_local_id)), ((0u) >> 0u)))))) + (min(((1) | (1)), 1))) % subgroup_size))) | ((((false ? (workgroup_base) : (0u << (~ (~ ((((max((uint(2u)) | 0u, (uint(2u)) | 0u))))))))))) / 1u)))) >> (0u << (uint(2u))))))))))) << 0u)) | (((min((workgroup_base + (uint(uvec2(subgroup_id, 0u))) * subgroup_size + ((subgroup_local_id + 1) % subgroup_size)), (workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size))))) << (0u | 0u)))) | 0u);
 if((false))
  barrier();
 buf[virtual_gid] = ((((~ (((~ (0)) / (1 & 1)))) + ((1 * (((false ? (8365) : 1)))))) | 0));
 if((true && ((((((! (! (! (! ((min(injectionSwitch, (vec2(mat3x4(((vec2(mat3x4(vec2(mat4((mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2((- 4664.3987), (4443.7358)), bvec2(false, false))), 0.0, 0.0, 1.0, sqrt(1.0), abs(1.0), 0.0, 0.0, 1.0, 1.0, 0.0, tan(0.0), 0.0, sqrt(0.0), 1.0)), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, (dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0))), 1.0, 0.0)))), 1.0, (dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), 1.0, 1.0, abs(1.0), 0.0, (injectionSwitch.y), 0.0, 0.0, 0.0))))).x > ((min(float(mat3(injectionSwitch.y, tan((1.0 * (((0.0) + abs(0.0))))), 1.0, 0.0, (injectionSwitch.y), exp(0.0), 0.0, 0.0, 1.0)), (max(float(mat3(injectionSwitch.y, tan(((false ? (- 51.98) : 0.0))), 1.0, (max(0.0, 0.0)), (injectionSwitch.y), exp(0.0), 0.0, 0.0, 1.0)), float(mat3(injectionSwitch.y, tan(0.0), 1.0, 0.0, (injectionSwitch.y), exp(0.0), 0.0, 0.0, 1.0)))))))))))))))))))
  barrier();
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   barrier();
  }
 atomicStore(buf[next_virtual_gid], ((uint(2)) | ((max(uint(2), uint(2))))), 4, 64, 4);
 if((false))
  {
   if((false))
    barrier();
   barrier();
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     barrier();
    }
  }
 if((((injectionSwitch.x > (mix(float((- 6104.9983)), float(injectionSwitch.y), bool(true)))))))
  {
   if((((bool(bool((((injectionSwitch.x > injectionSwitch.y))))))) || false))
    {
     if((false))
      barrier();
     barrier();
    }
   barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 if(((! ((! (! (! (false))))))))
  {
   if((! (! ((false)))))
    barrier();
   if(((((! (! ((mix(float((- 111.486)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y)))))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((! (! ((false)))))
      barrier();
     if((false))
      barrier();
     if((false))
      {
       if(((((true && (bool((bvec3(bvec4(bvec3((injectionSwitch.x > ((true ? injectionSwitch.y : (- 697.508)))), (! (! (true))), true), ((injectionSwitch.x < injectionSwitch.y))))))))))))
        barrier();
       barrier();
      }
     barrier();
     if((((((true ? ((false ? (vec2(- 63.74, 0.2)) : injectionSwitch)).x : (- 2.0))) > injectionSwitch.y))))
      barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((false))
  {
   if(((((mix(float((max(injectionSwitch.x, injectionSwitch.x))), float((5.2)), bool(false))) > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
