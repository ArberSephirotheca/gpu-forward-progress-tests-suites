#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = ((((gl_WorkGroupID) | uvec3(0u, 0u, 0u)).x) << 0u);
 uint workgroup_base = workgroup_size * ((((false ? (subgroup_local_id) : workgroup_id))) | ((0u | (workgroup_id))));
 uint virtual_gid = (max((0u ^ (workgroup_base)) + subgroup_id * subgroup_size + subgroup_local_id, (clamp((uint(uvec3(workgroup_base + (~ (((false ? (num_workgroup) : ((~ (subgroup_id)) | 0u))))) * subgroup_size, 0u, 1u))) + subgroup_local_id, workgroup_base + ((((max(~ (~ (subgroup_id)), ~ (~ (subgroup_id))))) >> uint((injectionSwitch.x)))) * subgroup_size + subgroup_local_id, (max(((true ? (((clamp(((true ? workgroup_base : (num_workgroup))), workgroup_base, (~ (~ (workgroup_base))))) + subgroup_id * ((min((~ (~ ((0u ^ (clamp(subgroup_size, subgroup_size, ((subgroup_size) - 0u))))))), clamp(subgroup_size, subgroup_size, ((subgroup_size) - 0u)))))) << 0u) : (workgroup_id))), workgroup_base + subgroup_id * (clamp(subgroup_size, subgroup_size, ((subgroup_size) - 0u))))) + subgroup_local_id))));
 uint next_virtual_gid = workgroup_base + subgroup_id * (0u + (((((subgroup_size) ^ 0u) << 0u)))) + ((((((min(max(subgroup_local_id + 1, (min(((subgroup_local_id + 1) << 0u), ((subgroup_local_id + 1) ^ 0u)))), ((false ? (virtual_gid) : max(subgroup_local_id + 1, (min(((subgroup_local_id + 1) << 0u), ((subgroup_local_id + 1) ^ 0u)))))))))) - 0u)) % subgroup_size);
 buf[virtual_gid] = 1;
 if(((((bool(bvec3(((bool(bvec2(injectionSwitch.x < injectionSwitch.y, ((false) || false)))) || false), true, false)))))))
  {
   atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
  }
 else
  {
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
