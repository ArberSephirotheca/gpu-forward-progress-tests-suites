#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((false))
  barrier();
 uint num_workgroup = (uint(((uvec4(gl_NumWorkGroups.x, 0u, 1u, 1u)) | uvec4(0u, 0u, 0u, 0u))));
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = (uvec3(0u, 0u, 0u) ^ (gl_WorkGroupID)).x;
 uint workgroup_base = (min((((((false ? ((((max(workgroup_size, (0u ^ ((max((0u | (workgroup_size)), workgroup_size))))))) | ((((max(workgroup_size, workgroup_size))) | (workgroup_size))))) : ((((max((1u), (clamp((min((1u), (1u))), (1u), (1u))))) | (1u)) << (uint(7u))) >> (uint(7u))))) * (workgroup_size)) + 0u)), (((false ? (((workgroup_size)) ^ 0u) : (((((uint(uint(((1u) | (1u)) << (uint((uint(uvec4(7u, 0u, 0u, uint((injectionSwitch.x))))))))))) | ((max(((((1u) | (1u)) - 0u)) << (uint((uint((max((~ (~ (uvec4(7u, (~ (((false ? (193439u) : ~ ((~ (~ (0u)))))))), 0u, uint((injectionSwitch.x)))))), ((uvec4(7u, (~ (((false ? (193439u) : ~ ((~ (~ (0u)))))))), 0u, uint((injectionSwitch.x)))) - uvec4(0u, 0u, 0u, 0u)))))))), ((1u) | (1u)) << (uint(((0u ^ (uint(uvec4(7u, 0u, 0u, uint((injectionSwitch.x)))))))))))))) >> (uint(7u))))) * (workgroup_size)))) * workgroup_id;
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + (((0u | (((bool(((bvec3(bvec3(bvec3(bvec3(bvec3(false, false, false))))))))) ? (workgroup_id) : (subgroup_local_id)))) | 0u));
 uint next_virtual_gid = ((((injectionSwitch.x > injectionSwitch.y)) ? (workgroup_size) : workgroup_base + subgroup_id * (((0u << (uint(8u))) | (max(subgroup_size, subgroup_size)))) + ((subgroup_local_id + 1) % (((((((0u + ((((((((~ (~ ((~ (~ ((min(subgroup_size, subgroup_size))))))))) / 1u)) | ((((false ? (atomicCompSwap(subgroup_local_id, virtual_gid, (min(virtual_gid, virtual_gid)))) : (subgroup_size)))) + 0u))) - 0u)))) * 1u)) << 0u) << uint((injectionSwitch.x)))))));
 ((((buf[virtual_gid] = 1) * 1u)) / 1u);
 if((false))
  barrier();
 if((((true && ((true && ((((true && ((((mix(float((3545.2103)), (mix(float((338.401)), float((max(float(float(mat3(injectionSwitch.x, 1.0, (clamp((((((((! (! ((bool(bvec2(false, true)))))) && true)) || false)) ? (float((transpose(transpose(mat2x4((5755.4842), 1.0, (max(1.0, 1.0)), 0.0, (injectionSwitch.x), 1.0, abs(1.0), 1.0)))))) : 1.0)), 1.0, 1.0)), 0.0, sqrt(exp((min(0.0, 0.0)))), 0.0, 0.0, 1.0, 0.0))), float(float(mat3(injectionSwitch.x, 1.0, (clamp((((((((! (! ((bool(bvec2(false, true)))))) && true)) || false)) ? (float((transpose(transpose(mat2x4((5755.4842), 1.0, (max(1.0, 1.0)), 0.0, (injectionSwitch.x), 1.0, abs(1.0), 1.0)))))) : 1.0)), 1.0, 1.0)), 0.0, sqrt(exp((min(0.0, 0.0)))), 0.0, 0.0, 1.0, 0.0)))))), bool(true))), bool(true)))) > (mix(vec2((clamp((injectionSwitch)[0], (injectionSwitch)[0], (injectionSwitch)[0])), (float(vec2((5.9), 0.0)))), vec2((float(((((- 40596) >> 0)) | (- 40596)))), (injectionSwitch)[1]), bvec2((! ((! (! (! ((true && (false)))))))), true))).y))))) || false)))))))
  barrier();
 atomicStore(buf[next_virtual_gid], (((clamp(false ? (((0u | (((((~ (~ ((min(((num_workgroup) - 0u), ((((num_workgroup) - 0u)) | (((num_workgroup) - 0u)))))))) * 1u)) - 0u))))) : (~ (~ (((false ? (subgroup_id) : (min(uint(2), uint(2)))))))), false ? (((0u | (((((~ (~ ((min(((num_workgroup) - 0u), ((((num_workgroup) - 0u)) | (((num_workgroup) - 0u)))))))) * 1u)) - 0u))))) : (~ (~ (((false ? (subgroup_id) : (min(uint(2), uint(2)))))))), ((false ? (((0u | (((((~ (~ ((min(((num_workgroup) - 0u), ((((num_workgroup) - 0u)) | (((num_workgroup) - 0u)))))))) * 1u)) - 0u))))) : (~ (~ (((false ? (subgroup_id) : (min(uint(2), uint(2))))))))) ^ 0u))))), 4, 64, 4);
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
