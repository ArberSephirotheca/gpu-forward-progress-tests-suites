#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if((((false)) || false))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((false))
  {
   if(((((! ((true && (! (injectionSwitch.x > injectionSwitch.y)))))))))
    barrier();
   if((((injectionSwitch.x > ((false ? (normalize(25.82)) : injectionSwitch.y))))))
    {
     if((false))
      barrier();
     if((false))
      barrier();
     barrier();
    }
   if(((bool(bvec3((((bool((false || (bool(false)))))) || false), ((injectionSwitch.x > injectionSwitch.y)), true)))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = (clamp(gl_WorkGroupSize, (uvec3(0u, 0u, 0u) | (gl_WorkGroupSize)), gl_WorkGroupSize)).x;
 if(((((((true && (((((((((! (! (bool(bool((! (! ((bool(bvec4((true && ((true && ((! (bool((bvec2(bvec4(bvec2((! (false)), false), true, false)))))))))), false, false, false))))))))))) && true))) || ((injectionSwitch.x > injectionSwitch.y))))) || false))) || false))) || false)))
  barrier();
 uint workgroup_id = ((uvec3(0u, 0u, 0u) >> (uvec3(((4u) >> (179159u & 0u))))) | (gl_WorkGroupID)).x;
 uint workgroup_base = (uint(uvec2(((((workgroup_size * workgroup_id) << 0u)) + 0u), 1u)));
 if((false))
  barrier();
 uint virtual_gid = (((((min(workgroup_base, (((((((uint(uvec4((uint((injectionSwitch.x)) | (workgroup_base)), 0u, (1u | 1u), 0u))) / 1u)) >> 0u))) | (((workgroup_base)) << 0u))))) >> 0u)) | ((((min(workgroup_base, ((workgroup_base) | (workgroup_base))))) >> 0u))) + ((subgroup_id) | (subgroup_id)) * (clamp(subgroup_size, subgroup_size, (min(subgroup_size, (clamp(subgroup_size, subgroup_size, (min(subgroup_size, ((subgroup_size) | ((min(subgroup_size, subgroup_size)))))))))))) + subgroup_local_id;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
 if(((((((injectionSwitch.x > (max(injectionSwitch.y, injectionSwitch.y)))) || ((((bool((bvec2(bvec2(bvec2(injectionSwitch.x > injectionSwitch.y, false)))))) || false))))))))
  barrier();
 uint next_virtual_gid = ((clamp((0u | 0u) | (workgroup_base + subgroup_id * subgroup_size), (clamp(((false ? (atomicXor(subgroup_id, (((true ? uint(uvec3((min((uint((clamp(uvec2(virtual_gid, 0u), uvec2(virtual_gid, 0u), uvec2(virtual_gid, 0u))))), virtual_gid)), uint((injectionSwitch.y)), 0u)) : (28905u)))))) : (((((0u | 0u)) << 0u) / 1u)))) | (workgroup_base + subgroup_id * subgroup_size), (0u | 0u) | (workgroup_base + subgroup_id * subgroup_size), (((0u | 0u)) | 0u) | (workgroup_base + subgroup_id * subgroup_size))), ((((true ? (0u | 0u) | (workgroup_base + subgroup_id * subgroup_size) : (workgroup_id)))) | ((0u | 0u) | (workgroup_base + subgroup_id * subgroup_size)))))) + ((((subgroup_local_id + (0 | (1)))) << 0u) % subgroup_size);
 buf[virtual_gid] = 1;
 atomicStore(buf[next_virtual_gid], (~ (~ (uint((min((~ (~ (~ ((((~ ((min((0 + (2)), ((2) | (2))))))) - 0))))), 2)))))), 4, 64, 4);
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
