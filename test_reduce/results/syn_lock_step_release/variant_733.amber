#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = ((((((((gl_NumWorkGroups)) - uvec3(0u, ((0u) * 1u), 0u)) + uvec3(0u, 0u, 0u)))) | uvec3(0u, 0u, ((true ? 0u : (subgroup_size))))) | (max((gl_NumWorkGroups), (gl_NumWorkGroups)))).x;
 uint workgroup_size = ((gl_WorkGroupSize.x) << 0u);
 uint workgroup_id = (((false ? ((uvec3(23650u, 173029u, 170303u) >> uvec3(190950u, 34780u, 52403u))) : (uvec3(0u, 0u, 0u) + (((uvec3(((1u) | ((~ (((~ (1u)) | 0u))))), 1u, 1u)) - uvec3(0u, 0u, 0u)) * (clamp((gl_WorkGroupID), (~ (((~ ((gl_WorkGroupID))) | (~ ((gl_WorkGroupID)))))), (gl_WorkGroupID)))))))).x;
 uint workgroup_base = (((uint(((uvec4((((false ? (subgroup_size) : ((clamp(((workgroup_size * (uint((uvec3(uvec4((clamp(uvec3(workgroup_id, 0u, 0u), uvec3(workgroup_id, 0u, 0u), uvec3(workgroup_id, 0u, 0u))), uint((injectionSwitch.x)))))))) / 1u), workgroup_size * (uint(uvec3(workgroup_id, 0u, 0u))), (1u * (workgroup_size * (uint((uvec3(0u, 0u, 0u) ^ (~ (~ ((uvec3((1u * (workgroup_id)), 0u, 0u)))))))))))) / uint((injectionSwitch.y)))))), ((1u) | 0u), uint((min(((vec2(injectionSwitch[0], (clamp(injectionSwitch[1], injectionSwitch[1], injectionSwitch[1])))).y), ((vec2((clamp((max(injectionSwitch[0], injectionSwitch[0])), injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1])).y)))), 1u)) / uvec4(1u, 1u, 1u, 1u)))) | 0u));
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 uint next_virtual_gid = ((0u + ((workgroup_base + (max(((min(uint(uvec4((0u + (((max(((((min(((1u << (uint(1u))) >> (uint(1u))), (uint(uvec3(((1u << (uint(1u))) >> (uint(1u))), 1u, 1u))))) * (0u)) | (subgroup_id * subgroup_size))) | (subgroup_id * subgroup_size), ((((min(((1u << (uint(1u))) >> (uint(1u))), (uint(uvec3(((1u << (uint(1u))) >> (uint(1u))), 1u, 1u))))) * (0u)) | (subgroup_id * subgroup_size))) | (subgroup_id * subgroup_size)))))), 0u, 1u, 1u)), uint(uvec4((0u + ((((true ? (((((((((1u << (((uint((~ (~ (uvec4((uint(1u)), 0u, 0u, 1u)))))) | 0u))) >> (uint(1u))) * (0u)) | (subgroup_id * ((subgroup_size) | 0u))))) ^ 0u)) - 0u) : (((true ? workgroup_id : ((subgroup_size))))))) | (subgroup_id * subgroup_size)))), 0u, 1u, ((false ? (bitfieldReverse(num_workgroup)) : 1u))))))), (0u + ((((((((((max(1u, 1u)) << (uint(1u))) >> (uint(1u))) * (0u)) | (subgroup_id * subgroup_size))) | (subgroup_id * subgroup_size)) | 0u))))))) | ((false ? (subgroup_id) : 0u))))) + ((1u * (~ (~ (((((((((((((((max(((0u) << 0u), ((0u) << 0u)))) * 1u)) * 1u)) | 0u) | ((((injectionSwitch.x > injectionSwitch.y)) ? (((subgroup_size)) - 0u) : (subgroup_local_id)))) + 1))) | ((((0u | ((((injectionSwitch.x > (clamp((min((mix(float(((((injectionSwitch.x < injectionSwitch.y)) ? (mix(vec2((injectionSwitch)[0], (- 902.511)), vec2((- 3399.3257), (injectionSwitch)[1]), bvec2(false, true))) : (vec2(- 37.13, 2103.0041)))).y), float((- 86.65)), bool(false))), ((injectionSwitch.y) / 1.0))), injectionSwitch.y, injectionSwitch.y)))) ? (subgroup_size) : (subgroup_local_id)))) + ((((1) >> 0)) | (1))))))) + 0u))))) % subgroup_size);
 ((~ (((((injectionSwitch.x > injectionSwitch.y)) ? (subgroup_size) : ~ ((~ (~ (((((0u ^ ((0u >> (((((uint(uint((uint(0u))))) - 0u)) + 0u))))) | ((buf[virtual_gid] = (((((true ? (1) : ((- 67155))))) * 1) | 0)))))) >> 0u)))))))) << ((min(0u >> ((clamp((max(uint(8u), uint((((min(8u, 8u))) - uint((injectionSwitch.x)))))), uint(8u), uint(8u)))), 0u >> ((clamp((max(uint(8u), uint((((min(8u, 8u))) - uint((injectionSwitch.x)))))), uint(8u), uint(8u))))))));
 atomicStore(buf[next_virtual_gid], ((((uint((clamp(2, ((2) / 1), 2))))) ^ 0u) | (((uint((((clamp(2, ((((((((2) / 1) - 0)) - 0)) * (((int((injectionSwitch.x)) | (((((1 << (int(2)))) | 0)) | ((((1 << (int(2)))) * int((injectionSwitch.y))))))) >> ((clamp(((int(2)) ^ 0), ((((int(2)) ^ 0)) / 1), (clamp((((~ (~ (((int(2)) ^ 0))))) + 0), (((~ (~ (((int(2)) ^ 0))))) + 0), (((~ (~ (((int(2)) ^ 0))))) + 0))))))))), 2))) / int((((true ? (min(injectionSwitch, injectionSwitch)) : (vec2(6.0, - 739.209)))).y))))) >> 0u))), 4, 64, 4);
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
