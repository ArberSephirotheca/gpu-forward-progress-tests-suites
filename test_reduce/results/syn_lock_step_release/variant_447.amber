#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec2 GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id;
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(true)
      {
       barrier();
      }
     else
      {
      }
    }
   if(false)
    {
    }
   else
    {
     barrier();
    }
   if((false))
    barrier();
  }
 if((false))
  barrier();
 if(((true) && true))
  {
   if((false))
    barrier();
  }
 else
  {
  }
 if((false))
  barrier();
 uvec3 GLF_merged3_0_1_11_1_1_17_2_1_12subgroup_idsubgroup_local_idworkgroup_id;
 if(false)
  {
  }
 else
  {
   do
    {
     if((((! (! ((injectionSwitch.x > (((min(true ? injectionSwitch.y : (3165.7915), ((true ? injectionSwitch.y : (3165.7915)) - 0.0))))))))))))
      {
       if(((((false || (bool(bvec3(injectionSwitch.x < injectionSwitch.y, true, true))))))))
        {
         if((bool(bvec2((false), false))))
          barrier();
        }
       else
        {
        }
       barrier();
       if((false))
        barrier();
      }
    }
   while(false);
  }
 uvec3 GLF_merged3_0_1_16_1_1_13_2_1_13next_virtual_gidnum_workgroupsubgroup_size;
 if(((! (! ((injectionSwitch.x < injectionSwitch.y))))))
  {
   if((false))
    {
     if((false))
      barrier();
     if((false))
      barrier();
     if((false))
      {
       for(int _injected_loop_counter = 1; _injected_loop_counter != (0 | (0 << (int(6)))); _injected_loop_counter --)
        {
         barrier();
        }
      }
     if(true)
      {
       barrier();
       if((false))
        {
         if((false))
          {
           if((false))
            {
             if(true)
              {
               barrier();
              }
             else
              {
              }
            }
           barrier();
          }
         barrier();
        }
      }
     else
      {
      }
    }
   if((false))
    barrier();
  }
 else
  {
   if((false))
    barrier();
  }
 if((false))
  {
   if(((((true && (injectionSwitch.x > injectionSwitch.y))))))
    barrier();
   if(true)
    {
     if(((((vec2(mat3x4(injectionSwitch, 0.0, 1.0, abs(1.0), 1.0, 0.0, 1.0, 0.0, 0.0, (injectionSwitch.x), 0.0))).x > injectionSwitch.y))))
      barrier();
    }
   else
    {
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if((false))
    barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 (1u * (((((GLF_merged3_0_1_11_1_1_17_2_1_12subgroup_idsubgroup_local_idworkgroup_id.x = subgroup_id) ^ 0u)) / 1u)));
 if(false)
  {
  }
 else
  {
   if((false))
    barrier();
  }
 if(((((mat2((injectionSwitch.y)) * (injectionSwitch)).x > injectionSwitch.y))))
  barrier();
 if(((! (! (false)))))
  barrier();
 if((false))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if(((((bool(bvec3(false, ((injectionSwitch.x > injectionSwitch.y)), false))) || false))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if(((bool(bool((! (! ((injectionSwitch.x > injectionSwitch.y)))))))))
    {
     if(((false || (false))))
      barrier();
    }
   else
    {
     barrier();
    }
  }
 do
  {
   if((false))
    {
     for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
      {
       barrier();
      }
    }
  }
 while(false);
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if(((((bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, true)))))))
    barrier();
   for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
    {
     if(false)
      {
       if((false))
        barrier();
       if((false))
        barrier();
      }
     else
      {
       if((false))
        barrier();
       barrier();
      }
    }
   if((false))
    barrier();
  }
 if(((((vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
  barrier();
 if((bool(bvec3((! (! ((((injectionSwitch.x > injectionSwitch.y)))))), true, true))))
  barrier();
 if(false)
  {
  }
 else
  {
   for(int _injected_loop_counter = ((1 << (int(4))) >> (int(4))); _injected_loop_counter > (0 | 0); _injected_loop_counter --)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         do
          {
           barrier();
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
        }
       while(false);
      }
     if((((! (! ((false))))) || false))
      barrier();
     for(int _injected_loop_counter = (0 >> (int(2))); _injected_loop_counter < 1; _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = 0; _injected_loop_counter != int(((0.0 + (mix(float((injectionSwitch.y)), float((- 294.585)), bool(false)))))); ((_injected_loop_counter ++) >> 0))
        {
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(false)
          {
          }
         else
          {
           (0u | ((((((injectionSwitch.x > injectionSwitch.y)) ? (subgroup_id) : (GLF_merged3_0_1_16_1_1_13_2_1_13next_virtual_gidnum_workgroupsubgroup_size.z = subgroup_size))) << 0u)));
          }
         do
          {
           if((false))
            {
             if(true)
              {
               barrier();
              }
             else
              {
              }
            }
           if((false))
            barrier();
           for(int _injected_loop_counter = (1 & 1); _injected_loop_counter > int((((false ? (vec2(373.505, 76.39)) : injectionSwitch)).x)); _injected_loop_counter --)
            {
             if(true)
              {
               if((false))
                {
                 if((false))
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   barrier();
                  }
                 if((false))
                  barrier();
                 if((! (! ((bool(bvec4(false, true, false, false)))))))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
              }
             else
              {
               if((false))
                barrier();
              }
             for(int _injected_loop_counter = (0 << (int(8))); _injected_loop_counter != int((((injectionSwitch.y) + (dot(vec3(0.0, 1.0, 1.0), vec3(1.0, 0.0, 0.0)))))); _injected_loop_counter ++)
              {
               if((false))
                barrier();
              }
            }
          }
         while(false);
        }
      }
     for(int _injected_loop_counter = (1 | 1); (false || (_injected_loop_counter > (0 << (int(4))))); _injected_loop_counter --)
      {
       if((false))
        barrier();
       if((false))
        {
         if(true)
          {
           barrier();
          }
         else
          {
          }
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      {
       for(int _injected_loop_counter = (((1 & 1) << ((clamp(int(3), int(3), int(3))))) >> (int(3))); (! (((((false || ((! (_injected_loop_counter != int((injectionSwitch.x)))) && true)))) || false))); _injected_loop_counter --)
        {
         if((false))
          {
           if(true)
            {
             barrier();
            }
           else
            {
            }
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
  }
 if((false))
  {
   if((false))
    barrier();
   if((((false) && true)))
    barrier();
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     for(int _injected_loop_counter = (0 << (int(1))); _injected_loop_counter != 1; _injected_loop_counter ++)
      {
       if((false))
        {
         if((false))
          {
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             barrier();
            }
          }
         barrier();
        }
      }
     if((((((true && (bool(bool(((injectionSwitch.x > injectionSwitch.y))))))) || false))))
      barrier();
     barrier();
    }
   else
    {
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 for(int _injected_loop_counter = (((1 << (((int(((true ? ivec3((int(7)), 1, 1) : (ivec3(- 88964, - 14092, - 87974)))))) - (0 >> (int(1)))))) >> (int(7))) & 1); _injected_loop_counter > (0 & 42821); (~ (~ (_injected_loop_counter --))))
  {
   do
    {
     if((false))
      barrier();
    }
   while(false);
   do
    {
     if((false))
      {
       for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > int((injectionSwitch.x)); ((_injected_loop_counter --) >> 0))
        {
         do
          {
           if((false))
            barrier();
           for(int _injected_loop_counter = ((1 << (int(1))) >> (int(1))); _injected_loop_counter != (((0) - 0) | 0); _injected_loop_counter --)
            {
             barrier();
             for(int _injected_loop_counter = (1 & 1); _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
              {
               if((false))
                barrier();
              }
             if(((((((bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, true))))))) && true))
              barrier();
             if(true)
              {
               if((false))
                {
                 if(((injectionSwitch.x < injectionSwitch.y)))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
              }
             else
              {
              }
            }
          }
         while(false);
        }
      }
    }
   while(false);
   for(int _injected_loop_counter = (0 | (int((injectionSwitch.x)))); _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
    {
     if(false)
      {
       if((false))
        {
         for(int _injected_loop_counter = ((1 << (int(6))) >> (int(6))); _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
          {
           barrier();
          }
        }
       if((false))
        barrier();
      }
     else
      {
       GLF_merged3_0_1_11_1_1_17_2_1_12subgroup_idsubgroup_local_idworkgroup_id.y = subgroup_local_id;
      }
    }
  }
 if((false))
  {
   if(false)
    {
    }
   else
    {
     barrier();
    }
  }
 if(((bool(bool(false)))))
  {
   if((false))
    barrier();
   for(int _injected_loop_counter = ((int((injectionSwitch.y)) << (int(2))) >> (int(2))); _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
    {
     do
      {
       barrier();
      }
     while(false);
    }
  }
 if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
  {
   if((false))
    barrier();
   do
    {
     barrier();
     if((false))
      barrier();
     if((false))
      {
       for(int _injected_loop_counter = (0 ^ 0); _injected_loop_counter < 1; _injected_loop_counter ++)
        {
         if((false))
          barrier();
         barrier();
        }
      }
     for(int _injected_loop_counter = 1; (! (! ((true && (_injected_loop_counter > 0))))); _injected_loop_counter --)
      {
       if((((((((min(float(mat2((mix(float((vec4(- 82.65, - 6371.2160, 8.4, - 603.006).q)), float(injectionSwitch.x), bool((! (! (((injectionSwitch.x < injectionSwitch.y)))))))), 0.0, 1.0, log(abs(1.0)))), float(mat2((mix(float((vec4(- 82.65, - 6371.2160, 8.4, - 603.006).q)), float(injectionSwitch.x), bool(((injectionSwitch.x < injectionSwitch.y))))), ((false ? (- 19.92) : 0.0)), 1.0, (max(log(abs(1.0)), (min(log(abs(((true ? 1.0 : (898.595))))), log(abs(1.0)))))))))))) / 1.0) > injectionSwitch.y))))
        barrier();
      }
     if((false))
      {
       for(int _injected_loop_counter = (1 & (1 | 0)); _injected_loop_counter > (0 << (int(0))); _injected_loop_counter --)
        {
         barrier();
        }
      }
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     if((bool(bvec4(false, false, true, true))))
      {
      }
     else
      {
       if((false))
        barrier();
      }
    }
   while(false);
   if((false))
    barrier();
   if(false)
    {
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(false)
        {
        }
       else
        {
         if(false)
          {
           if((false))
            barrier();
          }
         else
          {
           do
            {
             barrier();
            }
           while(false);
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if((false))
  {
   if((((((injectionSwitch.x > injectionSwitch.y)) || false))))
    {
     if(((((max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(true)
    {
     if((false))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     if((false))
      {
       if(true)
        {
         barrier();
        }
       else
        {
        }
      }
     barrier();
    }
   else
    {
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       if((false))
        barrier();
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      {
       if(false)
        {
        }
       else
        {
         barrier();
        }
      }
     barrier();
    }
   if((false))
    barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   for(int _injected_loop_counter = 1; _injected_loop_counter != (0 ^ 0); _injected_loop_counter --)
    {
     if((false))
      barrier();
    }
   barrier();
  }
 GLF_merged3_0_1_16_1_1_13_2_1_13next_virtual_gidnum_workgroupsubgroup_size.y = num_workgroup;
 if((false))
  barrier();
 for(int _injected_loop_counter = ((0 >> (int(0))) | 0); _injected_loop_counter < 1; _injected_loop_counter ++)
  {
   if(false)
    {
    }
   else
    {
     for(int _injected_loop_counter = 1; ((_injected_loop_counter) | (_injected_loop_counter)) > 0; _injected_loop_counter --)
      {
       if(false)
        {
        }
       else
        {
         if(false)
          {
          }
         else
          {
           do
            {
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
              }
             else
              {
               do
                {
                 if((((! (! (bool((bvec3(bvec3((bvec3(bvec3((bvec3(((bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(false, false, false)))))))))))))))))))))))
                  {
                   if(false)
                    {
                    }
                   else
                    {
                     if(((false) && ((injectionSwitch.x < injectionSwitch.y))))
                      {
                      }
                     else
                      {
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        {
                         do
                          {
                           barrier();
                          }
                         while(false);
                        }
                      }
                    }
                   if(true)
                    {
                     if(((! (! ((! (! (false))))))))
                      barrier();
                    }
                   else
                    {
                    }
                   do
                    {
                     if(((((injectionSwitch.x < injectionSwitch.y))) && true))
                      {
                       if((false))
                        {
                         if(false)
                          {
                          }
                         else
                          {
                           if((false))
                            barrier();
                          }
                         if((false))
                          barrier();
                         barrier();
                        }
                       barrier();
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       if((false))
                        barrier();
                       if((false))
                        barrier();
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       if((((((injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y))))
                        {
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                         barrier();
                        }
                      }
                     else
                      {
                       if((false))
                        barrier();
                      }
                    }
                   while(false);
                  }
                }
               while((true && (false)));
              }
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
           if((false || ((false))))
            {
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
             for(int _injected_loop_counter = (0 << (int(8))); _injected_loop_counter < 1; _injected_loop_counter ++)
              {
               barrier();
              }
             if((false))
              barrier();
             for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
            }
          }
        }
      }
    }
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((false) && true)))
      {
       if((((injectionSwitch.x > (((max(injectionSwitch.y, injectionSwitch.y))) * 1.0)))))
        {
         if((false))
          barrier();
         barrier();
        }
       barrier();
       if((false))
        barrier();
      }
     for(int _injected_loop_counter = 1; _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
      {
       barrier();
      }
     for(int _injected_loop_counter = 0; _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
      {
       if((false))
        barrier();
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   for(int _injected_loop_counter = (clamp(1, 1, 1)); ((((_injected_loop_counter != 0)) && true) && ((injectionSwitch.x < injectionSwitch.y))); _injected_loop_counter --)
    {
     if((false))
      barrier();
    }
   if((false))
    barrier();
   barrier();
  }
 if(true)
  {
   if((false))
    barrier();
   for(int _injected_loop_counter = (((0 << (int(1)))) >> 0); _injected_loop_counter < (~ (~ (((1 << (int(2))) >> (int(2)))))); _injected_loop_counter ++)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.y = ((((min(min(workgroup_id, workgroup_id), min(workgroup_id, workgroup_id)))) << 0u));
  }
 else
  {
   if((false))
    barrier();
   if((bool(bvec3((true && ((false))), false, false))))
    {
     if(true)
      {
       barrier();
      }
     else
      {
      }
    }
  }
 if((((! (! ((false || ((injectionSwitch.x > injectionSwitch.y)))))))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 0; _injected_loop_counter != (1 & 1); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   if((((((injectionSwitch.x > injectionSwitch.y)))) && true))
    {
     do
      {
       barrier();
      }
     while(false);
    }
   if((false))
    {
     if(true)
      {
       if((false))
        barrier();
      }
     else
      {
      }
     if((false))
      barrier();
     if((false))
      barrier();
     do
      {
       if(true)
        {
         barrier();
        }
       else
        {
        }
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   if((false || (((true) && true))))
    {
     if((false))
      barrier();
    }
   else
    {
    }
   barrier();
  }
 do
  {
   if((false))
    {
     if((false))
      {
       for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != 0; _injected_loop_counter --)
        {
         barrier();
        }
      }
     barrier();
    }
  }
 while(((injectionSwitch.x > injectionSwitch.y)));
 if(true)
  {
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
       do
        {
         if((false))
          barrier();
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
      }
     else
      {
       if(true)
        {
         if((false))
          {
           if((((((true ? injectionSwitch.x : (atan(- 7.8, 5.1)))) > injectionSwitch.y))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           if(false)
            {
            }
           else
            {
             if((false))
              barrier();
            }
           barrier();
          }
        }
       else
        {
        }
       GLF_merged3_0_1_11_1_1_17_2_1_12subgroup_idsubgroup_local_idworkgroup_id.z = GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.y;
       if((false))
        {
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           barrier();
          }
         else
          {
          }
        }
      }
    }
   else
    {
    }
  }
 else
  {
   if((((injectionSwitch.x < injectionSwitch.y)) && (((false || (false))))))
    barrier();
  }
 do
  {
   if((false))
    barrier();
  }
 while(((injectionSwitch.x > injectionSwitch.y)));
 if((bool(bvec3((false), ((injectionSwitch.x > injectionSwitch.y)), false))))
  barrier();
 uint workgroup_base = ((workgroup_size) | 0u) * GLF_merged3_0_1_11_1_1_17_2_1_12subgroup_idsubgroup_local_idworkgroup_id.z;
 (0u + (((GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.x = workgroup_base) >> 0u)));
 do
  {
   if((false))
    {
     if(true)
      {
       for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
        {
         if((false))
          {
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             barrier();
            }
          }
        }
      }
     else
      {
      }
     barrier();
    }
  }
 while((! (! (((false) && true)))));
 uint virtual_gid = GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.x + GLF_merged3_0_1_11_1_1_17_2_1_12subgroup_idsubgroup_local_idworkgroup_id.x * GLF_merged3_0_1_16_1_1_13_2_1_13next_virtual_gidnum_workgroupsubgroup_size.z + GLF_merged3_0_1_11_1_1_17_2_1_12subgroup_idsubgroup_local_idworkgroup_id.y;
 if((false))
  {
   if((false))
    barrier();
   for(int _injected_loop_counter = ((1) ^ 0); _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
    {
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
    }
   for(int _injected_loop_counter = 1; _injected_loop_counter != (0 >> ((clamp((clamp(int(4), int(4), int(4))), int(4), int(4))))); _injected_loop_counter --)
    {
     if((false))
      {
       if(((false || (false))))
        barrier();
       barrier();
      }
    }
  }
 if((false))
  barrier();
 do
  {
   if((false))
    barrier();
   if((false))
    {
     if(true)
      {
       if((false))
        barrier();
       if((false))
        {
         if((false))
          {
           if(true)
            {
             barrier();
            }
           else
            {
            }
          }
         if(true)
          {
           barrier();
          }
         else
          {
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       if((false))
        barrier();
       if((false))
        {
         for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
          {
           if(false)
            {
            }
           else
            {
             if((false))
              barrier();
            }
           barrier();
          }
        }
       if((false))
        barrier();
      }
    }
   if((false))
    {
     if((! (! (true))))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 while(false);
 uint next_virtual_gid = (~ (((~ (GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.x + (max(GLF_merged3_0_1_11_1_1_17_2_1_12subgroup_idsubgroup_local_idworkgroup_id, GLF_merged3_0_1_11_1_1_17_2_1_12subgroup_idsubgroup_local_idworkgroup_id)).x * GLF_merged3_0_1_16_1_1_13_2_1_13next_virtual_gidnum_workgroupsubgroup_size.z)) ^ (clamp((0u + (0u)), 0u, 0u))))) + (((0u ^ ((((clamp((~ ((uint(uint(~ (GLF_merged3_0_1_11_1_1_17_2_1_12subgroup_idsubgroup_local_idworkgroup_id.y + 1)))))), (~ ((uint(uint(~ (GLF_merged3_0_1_11_1_1_17_2_1_12subgroup_idsubgroup_local_idworkgroup_id.y + 1)))))), (~ ((uint(uint(~ (((GLF_merged3_0_1_11_1_1_17_2_1_12subgroup_idsubgroup_local_idworkgroup_id) | (GLF_merged3_0_1_11_1_1_17_2_1_12subgroup_idsubgroup_local_idworkgroup_id)).y + 1))))))))) | (GLF_merged3_0_1_11_1_1_17_2_1_12subgroup_idsubgroup_local_idworkgroup_id.y + 1))))) % GLF_merged3_0_1_16_1_1_13_2_1_13next_virtual_gidnum_workgroupsubgroup_size.z);
 if(true)
  {
   if(((true) && true))
    {
     if((false))
      {
       if((false))
        {
         if(((((mix(float(injectionSwitch.x), float((55.39)), bool((((mix(vec2((injectionSwitch)[0], (- 6.5)), vec2((- 1.5), (injectionSwitch)[1]), bvec2(false, true))).x > injectionSwitch.y))))) > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if(((((! (! (bool(bvec4(((bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, false, true)))), true, true, (((((((false || (injectionSwitch.x < injectionSwitch.y)) || ((injectionSwitch.x > injectionSwitch.y))))) || false))))))))))))
        barrier();
       if((false))
        {
         if(false)
          {
          }
         else
          {
           do
            {
             barrier();
            }
           while(false);
          }
        }
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         do
          {
           if((((true) || false) && ((false))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                {
                 if((false))
                  barrier();
                 barrier();
                }
               if(((((min(((injectionSwitch.x) - 0.0), injectionSwitch.x)) > injectionSwitch.y))))
                barrier();
               barrier();
              }
             if(false)
              {
              }
             else
              {
               barrier();
              }
             if((false))
              barrier();
            }
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
        {
         for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
          {
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((((injectionSwitch.x > (vec2(injectionSwitch[0], injectionSwitch[1])).y))))
            {
             if((false))
              barrier();
             barrier();
            }
           if(false)
            {
            }
           else
            {
             if((false))
              {
               if((false))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                {
                 if((false))
                  barrier();
                 barrier();
                }
               for(int _injected_loop_counter = (int((injectionSwitch.y)) & 1); _injected_loop_counter != 0; _injected_loop_counter --)
                {
                 barrier();
                }
              }
             if((false))
              {
               if(false)
                {
                }
               else
                {
                 if((false))
                  {
                   if((false))
                    barrier();
                   barrier();
                  }
                 for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                  {
                   if((false))
                    barrier();
                  }
                }
               if((false))
                barrier();
               barrier();
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             do
              {
               if((((true && (bool(bvec3((((! (! ((injectionSwitch.x < injectionSwitch.y)))) && true)), ((injectionSwitch.x > (vec2(injectionSwitch[0], injectionSwitch[1])).y)), false)))))))
                {
                 barrier();
                }
               else
                {
                 if((false))
                  barrier();
                }
              }
             while(false);
             if((((false) || false)))
              barrier();
             do
              {
               if(true)
                {
                 if((bool(bvec4((((bool(bvec4((((false) || false) || false), true, ((injectionSwitch.x < (min(injectionSwitch.y, injectionSwitch.y)))), ((injectionSwitch.x > injectionSwitch.y))))))), (! (! (true))), ((injectionSwitch.x < (min((max((float(mat2x3((clamp(injectionSwitch.y, injectionSwitch.y, (((false ? (- 19.45) : float(mat3x2(injectionSwitch.y, 0.0, 0.0, 1.0, 1.0, 0.0))))))), 0.0, 0.0, 0.0, 0.0, exp(0.0)))), (float(mat2x3(injectionSwitch.y, 0.0, 0.0, 0.0, 0.0, exp(0.0)))))), injectionSwitch.y)))), false))))
                  {
                   if((((false) || false)))
                    barrier();
                   if((false))
                    barrier();
                   barrier();
                  }
                }
               else
                {
                }
               if((false))
                barrier();
               if((false))
                barrier();
              }
             while(((((false || (false || (((false) || false))))) || false)));
             if((false))
              barrier();
             if((false))
              barrier();
            }
           if(false)
            {
            }
           else
            {
             if(((((! ((false || (! (injectionSwitch.x > injectionSwitch.y)))))))))
              {
               if(false)
                {
                }
               else
                {
                 barrier();
                }
              }
            }
           if((false))
            barrier();
          }
         if((false))
          barrier();
        }
       for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != ((((((0)) << 0)) << 0) << 0); _injected_loop_counter --)
        {
         do
          {
           if(((false || (false))))
            barrier();
           if((false))
            barrier();
           for(int _injected_loop_counter = ((0) - 0); _injected_loop_counter != 1; _injected_loop_counter ++)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if(true)
                {
                 barrier();
                }
               else
                {
                }
              }
            }
           if((false))
            barrier();
           do
            {
             if(false)
              {
              }
             else
              {
               if((false))
                barrier();
              }
             if(true)
              {
               if(((! (! (false)))))
                barrier();
              }
             else
              {
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(((((((((mix(vec2((injectionSwitch)[(clamp(0, 0, 0))], (injectionSwitch)[1]), vec2((- 1.2), (37.60)), bvec2(false, false)))) * mat2((injectionSwitch.y))) / vec2(1.0, 1.0))).x > injectionSwitch.y))))
              barrier();
             if((false))
              {
               if(true)
                {
                 if((false))
                  barrier();
                }
               else
                {
                }
               barrier();
              }
             if((((injectionSwitch.x > (max(injectionSwitch.y, injectionSwitch.y))))))
              barrier();
            }
           while(((true && (! (! (false))))));
          }
         while(false);
        }
      }
    }
   else
    {
     if((false))
      barrier();
    }
   for(int _injected_loop_counter = ((1 << (int(5))) >> (((false ? (39405) : int(5))))); _injected_loop_counter != 0; _injected_loop_counter --)
    {
     if(((false || (((false) && true)))))
      {
       if((false))
        {
         for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
          {
           barrier();
          }
        }
       barrier();
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
   if((false))
    {
     if(false)
      {
      }
     else
      {
       barrier();
      }
    }
   if((false))
    barrier();
  }
 if(true)
  {
   do
    {
     if((false))
      barrier();
     if((false))
      barrier();
     if(true)
      {
       for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
        {
         for(int _injected_loop_counter = 0; _injected_loop_counter != ((1 << (((int(6)) - 0))) >> (int(6))); _injected_loop_counter ++)
          {
           if((((((false || ((bool(bvec4(bool(((bool(((((true ? injectionSwitch : (injectionSwitch))).x > injectionSwitch.y)) || false)) || false)), false, false, false))))))))))
            {
             if(((injectionSwitch.x < injectionSwitch.y)))
              {
               for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
                {
                 do
                  {
                   do
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(true)
                        {
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                         barrier();
                        }
                       else
                        {
                        }
                      }
                    }
                   while(false);
                  }
                 while(false);
                 if((false))
                  barrier();
                }
               if((false))
                barrier();
              }
             else
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             barrier();
            }
          }
        }
      }
     else
      {
      }
     if(false)
      {
      }
     else
      {
       GLF_merged3_0_1_16_1_1_13_2_1_13next_virtual_gidnum_workgroupsubgroup_size.x = next_virtual_gid;
      }
     if((false))
      {
       if(((((clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
        barrier();
       barrier();
       do
        {
         if((false))
          barrier();
        }
       while(false);
      }
     if((false))
      barrier();
     if((false))
      barrier();
     if(((false || (false))))
      barrier();
    }
   while(((false) && true));
  }
 else
  {
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 buf[virtual_gid] = (clamp((min((~ (~ (1))), (~ (int(((ivec4((~ ((~ (~ (1))))), 0, int((injectionSwitch.y)), 1)) << ivec4(0, 0, 0, 0))))))), (((min((~ (~ (1))), (~ (int(((ivec4((~ ((~ (~ (1))))), 0, int((injectionSwitch.y)), 1)) << ivec4(0, 0, 0, 0)))))))) | (0 >> (int(8)))), (int(ivec4((min((~ (~ (1))), (~ (int(((ivec4((~ ((~ (~ (1))))), 0, int((injectionSwitch.y)), 1)) << ivec4(0, 0, 0, 0))))))), 1, 1, 0)))));
 do
  {
   if((false))
    {
     if((false))
      barrier();
     if((false))
      barrier();
     barrier();
    }
  }
 while(false);
 do
  {
   do
    {
     if(((! ((! (! (! (false))))))))
      barrier();
    }
   while(false);
  }
 while(((injectionSwitch.x > injectionSwitch.y)));
 if(false)
  {
  }
 else
  {
   if((((false) || false)))
    {
     do
      {
       if((false))
        barrier();
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
     if((false))
      {
       if((false))
        barrier();
       if(((((vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if((false))
      barrier();
     if(((! (! (false)))))
      barrier();
     if(false)
      {
      }
     else
      {
       if(((((mix(float(injectionSwitch.x), float((- 7638.4166)), bool(false))) > ((false ? (vec2(9163.2984, 827.357)) : injectionSwitch)).y))))
        {
         for(int _injected_loop_counter = (0 | (0)); (false || (_injected_loop_counter < 1)); _injected_loop_counter ++)
          {
           if((false))
            barrier();
           if((false))
            barrier();
          }
         for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
          {
           barrier();
          }
        }
      }
     barrier();
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 do
  {
   atomicStore(buf[GLF_merged3_0_1_16_1_1_13_2_1_13next_virtual_gidnum_workgroupsubgroup_size.x], uint(2), 4, 64, ((4) + 0));
   do
    {
     if((((((mix(vec2((1.5), (mat2(1.0) * (injectionSwitch))[1]), vec2((mat2(1.0) * (injectionSwitch))[0], (- 165.611)), bvec2(true, false)))).x > injectionSwitch.y))))
      barrier();
    }
   while(false);
  }
 while((((bool(bvec2(((false) && true), false))) || false)));
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
