#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(false)
      {
      }
     else
      {
       for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
        {
         if((false))
          {
           if(false)
            {
             if((false))
              barrier();
            }
           else
            {
             barrier();
            }
          }
        }
      }
     for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
      {
       do
        {
         if((false))
          barrier();
         return;
        }
       while(false);
      }
    }
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     if((false))
      barrier();
     barrier();
    }
   if(((true) || false))
    {
     if(true)
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
       return;
      }
     else
      {
      }
     if((false))
      barrier();
    }
   else
    {
     if(true)
      {
       if(true)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
        }
      }
     else
      {
      }
    }
   if((false))
    barrier();
  }
 if((false))
  {
   do
    {
     do
      {
       return;
       if((false))
        barrier();
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
    }
   while(((false) && true));
  }
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     barrier();
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
  }
 uvec4 GLF_merged4_0_1_13_1_1_11_2_1_11_3_1_14num_workgroupsubgroup_idvirtual_gidworkgroup_size;
 if((false))
  return;
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     if((false))
      barrier();
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
     for(int _injected_loop_counter = 0; _injected_loop_counter < ((1 << (int(5))) >> (int(5))); _injected_loop_counter ++)
      {
       if((false))
        return;
      }
     if((false))
      return;
     if((false))
      {
       for(int _injected_loop_counter = ((true ? 0 : (38263))); _injected_loop_counter != 1; _injected_loop_counter ++)
        {
         if((false))
          return;
        }
       return;
      }
    }
   for(int _injected_loop_counter = 0; _injected_loop_counter != ((1 << (int(4))) >> ((int(ivec4(int(4), 1, 0, 1))))); _injected_loop_counter ++)
    {
     do
      {
       if((false))
        return;
      }
     while(false);
    }
   if((false))
    return;
   do
    {
     if((false))
      return;
    }
   while(false);
   if((false))
    barrier();
   if(false)
    {
    }
   else
    {
     if(false)
      {
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 0; _injected_loop_counter != (1 & int((injectionSwitch.y))); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       for(int _injected_loop_counter = 0; _injected_loop_counter != ((1 << (int(3))) >> (int(3))); _injected_loop_counter ++)
        {
         for(int _injected_loop_counter = 0; _injected_loop_counter != ((1 << (int(2))) >> (int(2))); _injected_loop_counter ++)
          {
           if((false))
            continue;
           if((false))
            continue;
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
             break;
            }
           if((false))
            {
             if(false)
              {
              }
             else
              {
               barrier();
              }
            }
           for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
            {
             barrier();
            }
          }
         if((false))
          break;
         if((false))
          barrier();
         do
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                {
                 if(true)
                  {
                   barrier();
                  }
                 else
                  {
                  }
                 if((false))
                  continue;
                }
               if((false))
                break;
              }
             break;
             if((false))
              continue;
            }
           if((false))
            return;
          }
         while(((false) && true));
         if(true)
          {
           if((false))
            {
             do
              {
               if((! ((false || (! (false))))))
                {
                }
               else
                {
                 barrier();
                }
              }
             while(false);
            }
          }
         else
          {
          }
        }
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         barrier();
        }
       while(false);
      }
     do
      {
       return;
      }
     while(false);
    }
   if(true)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
    }
  }
 do
  {
   if((false))
    {
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     do
      {
       return;
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
    }
  }
 while(false);
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 do
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    break;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(true)
      {
       if((false))
        barrier();
      }
     else
      {
      }
     if(((true && (((injectionSwitch.x > injectionSwitch.y))))))
      barrier();
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       do
        {
         if((false))
          return;
         if((false))
          barrier();
         barrier();
        }
       while(false);
      }
     else
      {
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(((! (! (false)))))
    barrier();
  }
 while(false);
 if((false))
  return;
 if((false))
  {
   if((false))
    barrier();
   if(true)
    {
     return;
    }
   else
    {
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
  }
 if((false))
  {
   if((false))
    {
     for(int _injected_loop_counter = (0 << ((min(int(5), int(5))))); _injected_loop_counter < 1; _injected_loop_counter ++)
      {
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         barrier();
        }
       else
        {
        }
      }
    }
   if((false))
    return;
   return;
   if((false))
    barrier();
  }
 if(((! (! (false)))))
  {
   if((false))
    barrier();
   barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 if((false))
  barrier();
 if((false))
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      {
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         return;
        }
      }
     barrier();
    }
   if((false))
    return;
   return;
  }
 if(((injectionSwitch.x > injectionSwitch.y)))
  {
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
  }
 else
  {
   if(true)
    {
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       for(int _injected_loop_counter = (60042 & (0 << (int(3)))); _injected_loop_counter < 1; _injected_loop_counter ++)
        {
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              continue;
             if((false || (true)))
              {
               return;
              }
             else
              {
              }
            }
           if(true)
            {
             if((false))
              {
               if(((injectionSwitch.x < injectionSwitch.y)))
                {
                 if((false))
                  barrier();
                }
               else
                {
                }
               break;
              }
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
              }
             else
              {
               barrier();
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((false))
              continue;
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
              }
             else
              {
               if((false))
                return;
              }
             if((false))
              break;
            }
           else
            {
             for(int _injected_loop_counter = (0 << (int(3))); _injected_loop_counter != 1; _injected_loop_counter ++)
              {
               for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                {
                 if((false))
                  {
                   if((false))
                    return;
                   barrier();
                  }
                }
              }
            }
          }
        }
      }
     else
      {
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(true)
        {
         barrier();
        }
       else
        {
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
    }
  }
 if((false))
  {
   for(int _injected_loop_counter = (1 ^ 1); _injected_loop_counter != (~ (~ (1))); _injected_loop_counter ++)
    {
     barrier();
    }
   if((false))
    return;
   if((false))
    barrier();
  }
 GLF_merged4_0_1_13_1_1_11_2_1_11_3_1_14num_workgroupsubgroup_idvirtual_gidworkgroup_size.y = subgroup_id;
 if((false))
  {
   if((false))
    barrier();
   return;
  }
 uint subgroup_size = gl_SubgroupSize;
 for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
  {
   if((false))
    return;
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    {
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(((! (! (false)))))
        barrier();
       barrier();
      }
     if((false))
      return;
     do
      {
       if((false))
        {
         if((false))
          return;
         barrier();
        }
       barrier();
       if((false))
        return;
       if((false))
        continue;
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         continue;
         if((false))
          continue;
        }
       if((false))
        continue;
       if((false))
        break;
       for(int _injected_loop_counter = 0; _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
        {
         if((false))
          barrier();
        }
      }
     while((bool(bool(false))));
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
  {
   if((false))
    return;
   if((false))
    continue;
   if(false)
    {
    }
   else
    {
     if((false))
      barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    break;
   if((false))
    {
     if((false))
      break;
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   do
    {
     if((false))
      barrier();
    }
   while(false);
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      {
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if(true)
          {
           return;
          }
         else
          {
          }
        }
       else
        {
        }
      }
     if((false))
      barrier();
     if((false))
      barrier();
     break;
     if(false)
      {
      }
     else
      {
       if((false))
        barrier();
      }
    }
   if((false))
    {
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if((false))
        {
         if((false))
          continue;
         if((false))
          {
           if((false))
            barrier();
           return;
          }
         if((false))
          {
           do
            {
             barrier();
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
          }
         if((false))
          {
           if((false))
            {
             do
              {
               barrier();
              }
             while(((injectionSwitch.x > injectionSwitch.y)));
            }
           barrier();
          }
         barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
      }
     else
      {
      }
     if((true && (((injectionSwitch.x < injectionSwitch.y)))))
      {
       do
        {
         if(true)
          {
           barrier();
          }
         else
          {
           for(int _injected_loop_counter = 0; _injected_loop_counter != ((1 << ((clamp(int(1), int(1), int(1))))) >> (int(1))); _injected_loop_counter ++)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               for(int _injected_loop_counter = (1 | 0); _injected_loop_counter != 0; _injected_loop_counter --)
                {
                 return;
                }
              }
            }
          }
        }
       while(false);
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       if((false))
        {
         if(false)
          {
          }
         else
          {
           barrier();
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(((false) || false))
          {
          }
         else
          {
           barrier();
          }
        }
       if((false))
        continue;
       if((false))
        continue;
      }
    }
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        break;
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          break;
         barrier();
        }
       for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
        {
         if(true)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if(((injectionSwitch.x < injectionSwitch.y)))
              {
               barrier();
              }
             else
              {
              }
            }
           if(true)
            {
             return;
             if((false))
              continue;
             if((false))
              continue;
             if((false))
              barrier();
             if(false)
              {
              }
             else
              {
               if((false))
                barrier();
              }
             if((false))
              {
               if(((injectionSwitch.x < injectionSwitch.y)))
                {
                 barrier();
                }
               else
                {
                }
              }
            }
           else
            {
            }
          }
         else
          {
          }
         if((false))
          continue;
        }
      }
     break;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    break;
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 do
  {
   if((false))
    return;
  }
 while(((injectionSwitch.x > injectionSwitch.y)));
 if((false))
  {
   if((false))
    barrier();
   for(int _injected_loop_counter = 0; _injected_loop_counter != (1 & 1); _injected_loop_counter ++)
    {
     do
      {
       return;
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
    }
  }
 if((false))
  {
   if(false)
    {
     if((false))
      barrier();
     if((false))
      return;
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           if((false))
            return;
          }
         while(false);
         for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
          {
           barrier();
          }
        }
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         do
          {
           if(((true && (false))))
            continue;
           if(true)
            {
             if((false))
              barrier();
            }
           else
            {
            }
           if((false))
            {
             for(int _injected_loop_counter = 0; _injected_loop_counter != (1 & 1); _injected_loop_counter ++)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
             break;
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
                {
                 barrier();
                }
              }
             if((false))
              barrier();
            }
           if((false))
            {
             if((false))
              barrier();
             if(((bool(bool(false)))))
              continue;
             do
              {
               barrier();
              }
             while(false);
            }
           for(int _injected_loop_counter = (0 << (int(6))); _injected_loop_counter != 1; _injected_loop_counter ++)
            {
             barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               continue;
              }
             if((false))
              barrier();
             break;
            }
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
              {
               barrier();
              }
            }
           do
            {
             if(false)
              {
              }
             else
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((false))
                  barrier();
                 if(true)
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
              }
            }
           while(false);
          }
         while(false);
        }
       if(false)
        {
        }
       else
        {
         if((((false) || false)))
          return;
        }
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    {
     do
      {
       if((false))
        {
         if((false))
          return;
         barrier();
        }
      }
     while(false);
     do
      {
       if((((bool(bvec4(bool(bvec4(false, true, false, true)), true, false, true))))))
        barrier();
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
     for(int _injected_loop_counter = 1; _injected_loop_counter != (0 << (int(4))); _injected_loop_counter --)
      {
       if((false))
        continue;
       if((false))
        barrier();
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
    }
   else
    {
     if((false))
      {
       if((false))
        return;
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         barrier();
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if((false))
        return;
      }
    }
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = 1; _injected_loop_counter > (0 ^ 0); _injected_loop_counter --)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             return;
            }
           else
            {
            }
          }
         while(((false) || false));
        }
       barrier();
      }
    }
   if((false))
    return;
   if(false)
    {
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(false)
          {
          }
         else
          {
           barrier();
          }
        }
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((false))
        return;
      }
     if((false))
      {
       if((false))
        return;
       return;
      }
     do
      {
       if((false))
        barrier();
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
         return;
        }
      }
     while(false);
     barrier();
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     do
      {
       if((false))
        barrier();
       barrier();
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
    }
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     if((false))
      return;
     barrier();
    }
   for(int _injected_loop_counter = (0 | 0); _injected_loop_counter < 1; _injected_loop_counter ++)
    {
     if((false))
      {
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         barrier();
        }
       else
        {
        }
      }
    }
   if((false))
    return;
   return;
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if((false))
    {
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       return;
      }
     else
      {
      }
    }
   if(true)
    {
     if(((true) || false))
      {
       if((false))
        {
         if(false)
          {
          }
         else
          {
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                return;
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               return;
              }
             barrier();
            }
          }
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           barrier();
          }
         if((false))
          {
           do
            {
             for(int _injected_loop_counter = (0 >> (((int(5)) ^ 0))); _injected_loop_counter != 1; _injected_loop_counter ++)
              {
               return;
              }
            }
           while(false);
          }
         return;
        }
      }
     else
      {
      }
    }
   else
    {
    }
   if((false))
    return;
   if((false))
    barrier();
  }
 for(int _injected_loop_counter = (0 >> (((false ? (- 72848) : int(4))))); _injected_loop_counter != 1; _injected_loop_counter ++)
  {
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
  }
 if((false))
  return;
 do
  {
   if((false))
    return;
  }
 while(false);
 do
  {
   for(int _injected_loop_counter = 1; _injected_loop_counter > ((false ? (- 57989) : ((0) ^ 0))); _injected_loop_counter --)
    {
     if((false))
      {
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         return;
        }
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
      {
       if(true)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
        }
      }
     if((false))
      barrier();
     if((false))
      barrier();
     if((false))
      barrier();
     if(true)
      {
       barrier();
      }
     else
      {
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    break;
  }
 while(false);
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  {
   for(int _injected_loop_counter = 0; _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
    {
     return;
     if((false))
      continue;
    }
   if((false))
    return;
  }
 for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      {
       if((false))
        barrier();
       continue;
      }
     barrier();
    }
   if((false))
    return;
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     return;
    }
   return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    return;
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
       return;
      }
     if((false))
      {
       do
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(false);
       return;
      }
     if(false)
      {
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(true)
          {
           return;
          }
         else
          {
          }
        }
      }
    }
   return;
   if(false)
    {
    }
   else
    {
     if((false))
      barrier();
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    return;
   return;
  }
 if((false))
  return;
 uint num_workgroup = gl_NumWorkGroups.x;
 do
  {
   if((false))
    break;
   GLF_merged4_0_1_13_1_1_11_2_1_11_3_1_14num_workgroupsubgroup_idvirtual_gidworkgroup_size.x = num_workgroup;
  }
 while(false);
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if(false)
    {
    }
   else
    {
     return;
     if((false))
      {
       if((false))
        return;
       return;
      }
    }
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     do
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(true)
          {
           if(((bool(bvec3(false, false, false)))))
            {
             do
              {
               return;
              }
             while(false);
            }
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             if((false))
              barrier();
             barrier();
             if((false))
              {
               for(int _injected_loop_counter = 0; _injected_loop_counter != (int((injectionSwitch.y)) & 1); _injected_loop_counter ++)
                {
                 barrier();
                }
              }
            }
           else
            {
            }
          }
         else
          {
          }
        }
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
    }
   else
    {
    }
   if((false))
    {
     for(int _injected_loop_counter = 1; _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
      {
       barrier();
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        return;
       barrier();
      }
     return;
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    {
     if((false))
      barrier();
     if((true && ((true && (false)))))
      {
      }
     else
      {
       return;
      }
    }
   return;
  }
 if((false))
  return;
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      {
       if(true)
        {
         barrier();
        }
       else
        {
        }
      }
     return;
    }
   barrier();
  }
 if((false))
  {
   for(int _injected_loop_counter = (0 & 47076); _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
    {
     if(true)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
       if((false))
        {
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           if(((false || ((false || (false))))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                {
                 do
                  {
                   return;
                  }
                 while(false);
                }
               barrier();
              }
             barrier();
            }
           if((false))
            continue;
           for(int _injected_loop_counter = (0 | (0)); _injected_loop_counter != 1; _injected_loop_counter ++)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               for(int _injected_loop_counter = (0 & - 84532); _injected_loop_counter < ((1 << (int(6))) >> (int(6))); _injected_loop_counter ++)
                {
                 if((false))
                  barrier();
                }
               barrier();
              }
            }
          }
         if((false))
          barrier();
         barrier();
        }
       if((false))
        break;
      }
     else
      {
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if((false))
        return;
       if((false))
        return;
       return;
      }
     else
      {
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(true)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
        }
       return;
      }
    }
   do
    {
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
       if((! (! (true))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         for(int _injected_loop_counter = (0 << (int(1))); _injected_loop_counter != 1; _injected_loop_counter ++)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = 1; _injected_loop_counter > (0 << (int(1))); _injected_loop_counter --)
              {
               barrier();
              }
            }
          }
        }
       else
        {
        }
      }
     else
      {
       if(false)
        {
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if(true)
            {
             do
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             while(((injectionSwitch.x > injectionSwitch.y)));
            }
           else
            {
            }
           return;
          }
        }
       for(int _injected_loop_counter = (0 << (int(7))); _injected_loop_counter < 1; _injected_loop_counter ++)
        {
         return;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
   while(false);
   if((false))
    {
     if((false))
      return;
     barrier();
    }
   if(true)
    {
     if(((bool(bvec2(false, true)))))
      return;
    }
   else
    {
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    {
     for(int _injected_loop_counter = (0 << (int(8))); _injected_loop_counter < 1; _injected_loop_counter ++)
      {
       barrier();
      }
    }
   if(false)
    {
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(true)
      {
       return;
      }
     else
      {
      }
    }
   if((false))
    return;
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(false)
          {
          }
         else
          {
           if((false))
            return;
          }
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           if((false))
            barrier();
          }
         else
          {
          }
         if((false))
          return;
         if((false))
          {
           for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
            {
             if((false))
              barrier();
             return;
             if((false))
              continue;
            }
          }
         if((((false) || false)))
          barrier();
         if((false))
          return;
         if((! ((false || (! (false))))))
          {
          }
         else
          {
           if(false)
            {
            }
           else
            {
             if((false))
              {
               if(false)
                {
                }
               else
                {
                 return;
                }
              }
            }
          }
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
         do
          {
           return;
          }
         while(false);
        }
       if((false))
        {
         if((false))
          barrier();
         return;
        }
       for(int _injected_loop_counter = (0 ^ 1); _injected_loop_counter > (0 | 0); _injected_loop_counter --)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         for(int _injected_loop_counter = 0; _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
          {
           return;
          }
        }
       if((false))
        return;
       if((false))
        barrier();
       if((false))
        return;
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 for(int _injected_loop_counter = 0; _injected_loop_counter != ((1 << (int(7))) >> (int(7))); _injected_loop_counter ++)
  {
   for(int _injected_loop_counter = (0 ^ 1); _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
    {
     if((false))
      {
       for(int _injected_loop_counter = ((1 << (int(7))) >> (int(7))); _injected_loop_counter > (0 >> (int(3))); _injected_loop_counter --)
        {
         if(false)
          {
          }
         else
          {
           if((false))
            barrier();
          }
         if(((true && (((injectionSwitch.x > injectionSwitch.y))))))
          break;
         barrier();
         do
          {
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((false))
              return;
             if(true)
              {
               barrier();
              }
             else
              {
              }
            }
          }
         while(false);
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 do
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     if((false))
      return;
     if((false))
      break;
     if(((bool(((bool(false)) && true)))))
      {
       for(int _injected_loop_counter = (0 & - 22470); _injected_loop_counter < 1; _injected_loop_counter ++)
        {
         barrier();
        }
      }
     barrier();
    }
  }
 while(false);
 uint workgroup_size = gl_WorkGroupSize.x;
 if((false))
  {
   if(false)
    {
    }
   else
    {
     if((((bool(bool(bool(bvec2(false, false))))))))
      {
       for(int _injected_loop_counter = 1; _injected_loop_counter != (0 & - 87960); _injected_loop_counter --)
        {
         if((false))
          barrier();
        }
       if((false))
        return;
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         barrier();
        }
       if(true)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            return;
           for(int _injected_loop_counter = 0; _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
            {
             return;
            }
          }
        }
       else
        {
        }
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     barrier();
    }
   if(((! ((! (! (! ((! (! (false)))))))))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         if(false)
          {
          }
         else
          {
           return;
          }
        }
       while(false);
      }
     return;
    }
   if((false))
    barrier();
   do
    {
     return;
     if((false))
      barrier();
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
   if((false))
    return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != (0 ^ (int((injectionSwitch.y)) | 1)); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 if((bool(bool(false))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
     return;
    }
  }
 else
  {
   if((false))
    barrier();
  }
 if((false))
  {
   for(int _injected_loop_counter = (1 | 1); _injected_loop_counter != (0 | (1 ^ 1)); _injected_loop_counter --)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        {
         for(int _injected_loop_counter = (0 & 87320); _injected_loop_counter < 1; _injected_loop_counter ++)
          {
           barrier();
          }
        }
       return;
      }
    }
   barrier();
  }
 if((false))
  {
   if((false))
    return;
   if((false))
    barrier();
   for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
    {
     return;
     if((false))
      barrier();
     for(int _injected_loop_counter = ((((1 << (int(3))) >> (((int(3)) << 0))) << ((max(int(7), int(7))))) >> ((0 ^ (int(7))))); _injected_loop_counter != (clamp(0, 0, 0)); _injected_loop_counter --)
      {
       if((false))
        barrier();
      }
    }
  }
 if((false))
  {
   if((false))
    return;
   do
    {
     barrier();
    }
   while(false);
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  return;
 if(true)
  {
   GLF_merged4_0_1_13_1_1_11_2_1_11_3_1_14num_workgroupsubgroup_idvirtual_gidworkgroup_size.w = workgroup_size;
  }
 else
  {
  }
 if(false)
  {
  }
 else
  {
   if((false))
    return;
  }
 if((false))
  {
   do
    {
     if(true)
      {
       if((false))
        {
         if(false)
          {
           if((false))
            return;
           if(((true && (false))))
            {
             if(true)
              {
               barrier();
              }
             else
              {
              }
            }
           if(false)
            {
            }
           else
            {
             if((false))
              return;
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
           if((false))
            return;
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if((false))
          return;
         if((false))
          {
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           if(false)
            {
             for(int _injected_loop_counter = (1 ^ int((injectionSwitch.x))); _injected_loop_counter > (0 | 0); _injected_loop_counter --)
              {
               if((false))
                barrier();
              }
            }
           else
            {
             if((false))
              {
               if((false))
                return;
               barrier();
              }
             return;
            }
           if((false))
            {
             if((false))
              barrier();
             barrier();
            }
          }
         if((false))
          return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                return;
               return;
              }
            }
           while((bool(bvec2(false, false))));
           if((false))
            {
             for(int _injected_loop_counter = 0; _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
              {
               return;
              }
            }
           if((! ((! (! (! (((injectionSwitch.x > injectionSwitch.y)))))))))
            {
            }
           else
            {
             barrier();
            }
          }
         return;
        }
      }
     else
      {
      }
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       return;
      }
     for(int _injected_loop_counter = (0 >> (int(3))); _injected_loop_counter != 1; _injected_loop_counter ++)
      {
       if(false)
        {
        }
       else
        {
         if((false))
          barrier();
        }
       return;
      }
    }
   for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
    {
     if((false))
      {
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         return;
        }
       else
        {
        }
      }
     do
      {
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
          {
           if((false))
            return;
          }
         break;
        }
       barrier();
      }
     while(false);
     if((false))
      barrier();
     if((false))
      return;
    }
   if(((((injectionSwitch.x < injectionSwitch.y)) && (false))))
    {
     do
      {
       barrier();
      }
     while(false);
    }
   if(false)
    {
    }
   else
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(true)
          {
           if(((bool(bool(false)))))
            barrier();
          }
         else
          {
          }
         return;
        }
       do
        {
         barrier();
        }
       while(false);
      }
    }
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(false)
      {
      }
     else
      {
       barrier();
      }
    }
  }
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = (0 ^ (1 | 1)); _injected_loop_counter > 0; _injected_loop_counter --)
    {
     barrier();
     if((false))
      barrier();
    }
  }
 if((false))
  barrier();
 for(int _injected_loop_counter = 1; _injected_loop_counter != (0 | 0); _injected_loop_counter --)
  {
   do
    {
     for(int _injected_loop_counter = ((1 << (int(1))) >> (((int(1)) << 0))); _injected_loop_counter > 0; _injected_loop_counter --)
      {
       if(((! (! (false)))))
        {
         if((false))
          {
           if((false))
            {
             do
              {
               barrier();
              }
             while(((injectionSwitch.x > injectionSwitch.y)));
            }
           continue;
          }
         return;
         do
          {
           if((false))
            return;
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
        }
      }
    }
   while(false);
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(true)
      {
       if(false)
        {
        }
       else
        {
         barrier();
        }
      }
     else
      {
      }
    }
   if((false))
    {
     if(false)
      {
      }
     else
      {
       return;
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(true)
    {
     if((false))
      barrier();
    }
   else
    {
    }
   if((false))
    {
     if((false))
      {
       if((false))
        {
         if((false))
          return;
         if((false))
          {
           if((bool(bool(((true) && true)))))
            {
             barrier();
            }
           else
            {
            }
          }
         barrier();
         if((false))
          return;
        }
       for(int _injected_loop_counter = (0 | 0); _injected_loop_counter != ((1 << (((int(6)) ^ 0))) >> (int(6))); _injected_loop_counter ++)
        {
         barrier();
        }
       if(true)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
      }
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
       if((false))
        barrier();
      }
     else
      {
       do
        {
         return;
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    continue;
  }
 if(true)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
  }
 else
  {
  }
 if((false))
  {
   if((false))
    barrier();
   if((false))
    return;
   if((false))
    barrier();
   return;
  }
 if((false))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 if((false))
  {
   for(int _injected_loop_counter = 1; _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
    {
     if((false))
      return;
     for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
      {
       if((false))
        {
         if((false))
          continue;
         if((false))
          barrier();
         if(false)
          {
          }
         else
          {
           if((false))
            barrier();
           barrier();
          }
        }
      }
     if((false))
      {
       if((false))
        return;
       continue;
      }
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      break;
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        {
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
             barrier();
            }
          }
         else
          {
          }
        }
       break;
      }
    }
  }
 if((false))
  return;
 if((false))
  {
   if((false))
    barrier();
   if(false)
    {
     if((false))
      return;
     if((false))
      {
       if((false))
        {
         do
          {
           return;
          }
         while(false);
        }
       barrier();
      }
    }
   else
    {
     if(false)
      {
      }
     else
      {
       if((false))
        barrier();
      }
     return;
    }
  }
 do
  {
   if((false))
    barrier();
  }
 while(((injectionSwitch.x > injectionSwitch.y)));
 if((false))
  barrier();
 if((false))
  return;
 uint workgroup_base = GLF_merged4_0_1_13_1_1_11_2_1_11_3_1_14num_workgroupsubgroup_idvirtual_gidworkgroup_size.w * workgroup_id;
 if((false))
  barrier();
 if(((injectionSwitch.x < injectionSwitch.y)))
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(true)
        {
         if((false))
          barrier();
         if((false))
          return;
         do
          {
           if((false))
            barrier();
          }
         while(false);
         return;
        }
       else
        {
         if(((true) && true))
          {
           if((false || (false)))
            {
            }
           else
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         else
          {
           if((false))
            {
             if((false))
              {
               do
                {
                 if((false))
                  return;
                }
               while(((injectionSwitch.x > injectionSwitch.y)));
               return;
              }
             barrier();
             if((false))
              return;
            }
          }
        }
      }
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       if((false))
        barrier();
       if((false))
        return;
       for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
        {
         if(((((injectionSwitch.x > injectionSwitch.y)) || (false))))
          return;
         if((false))
          break;
         if((false))
          return;
        }
       if(true)
        {
         do
          {
           if((false))
            {
             if((((false) || false)))
              barrier();
             if((false))
              {
               if(false)
                {
                }
               else
                {
                 if((false))
                  barrier();
                }
               return;
              }
             if(true)
              {
               do
                {
                 for(int _injected_loop_counter = 0; _injected_loop_counter != ((1 << (int(2))) >> ((~ (((~ (int(2))) ^ 0))))); _injected_loop_counter ++)
                  {
                   for(int _injected_loop_counter = 1; _injected_loop_counter != ((0 ^ 0) << (int(8))); _injected_loop_counter --)
                    {
                     if((false))
                      break;
                     return;
                    }
                  }
                }
               while((! (! (false))));
              }
             else
              {
              }
            }
          }
         while(((false) || ((injectionSwitch.x > injectionSwitch.y))));
        }
       else
        {
        }
      }
     return;
     if((false))
      return;
     if(false)
      {
      }
     else
      {
       if((false))
        barrier();
       if((false))
        {
         for(int _injected_loop_counter = (1 ^ int((injectionSwitch.x))); _injected_loop_counter > 0; _injected_loop_counter --)
          {
           if((false))
            {
             if(false)
              {
              }
             else
              {
               barrier();
              }
            }
           if(true)
            {
             barrier();
            }
           else
            {
            }
           if(false)
            {
            }
           else
            {
             if((false))
              return;
            }
          }
         if(false)
          {
          }
         else
          {
           if(true)
            {
             if((false))
              {
               if((false))
                return;
               if((false))
                {
                 if((false))
                  return;
                 barrier();
                }
               barrier();
              }
            }
           else
            {
             if(((((! (! (false)))) && true)))
              return;
            }
          }
        }
      }
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       if(true)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if(true)
          {
           do
            {
             if((false))
              return;
            }
           while(false);
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         else
          {
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
         if((false))
          {
           if((false))
            barrier();
           if((false))
            return;
           barrier();
          }
        }
      }
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         barrier();
        }
      }
     if((false))
      {
       do
        {
         if(true)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = 1; _injected_loop_counter != ((0 << (int(1))) ^ 0); _injected_loop_counter --)
              {
               return;
              }
            }
           if((bool(bvec4(false, true, true, ((injectionSwitch.x < injectionSwitch.y))))))
            {
            }
           else
            {
             if(true)
              {
               if((false))
                barrier();
              }
             else
              {
              }
            }
           return;
          }
         else
          {
           if((false))
            return;
          }
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
      }
     if(false)
      {
      }
     else
      {
       if((false))
        {
         if((false))
          return;
         if(((bool(bool(((injectionSwitch.x > injectionSwitch.y)))))))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            return;
           return;
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
      }
    }
  }
 else
  {
  }
 if(false)
  {
  }
 else
  {
   if((false))
    return;
  }
 uint virtual_gid = workgroup_base + GLF_merged4_0_1_13_1_1_11_2_1_11_3_1_14num_workgroupsubgroup_idvirtual_gidworkgroup_size.y * subgroup_size + subgroup_local_id;
 if((false))
  return;
 if((false))
  return;
 if((false))
  {
   if((false))
    {
     if((((false) && true)))
      return;
     return;
    }
   if(false)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        {
         if((false))
          barrier();
         return;
        }
       barrier();
       if((false))
        barrier();
      }
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     do
      {
       barrier();
      }
     while((bool((bvec3(bvec4(bvec3(false, true, false), false))))));
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(((bool((bvec3(bvec4(bvec3(false, false, false), true)))))))
    {
     for(int _injected_loop_counter = 1; _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
      {
       do
        {
         return;
         if((false))
          continue;
        }
       while((((injectionSwitch.x > injectionSwitch.y)) || (false)));
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 if(true)
  {
   if((false))
    return;
   if((false))
    return;
   if((false))
    {
     do
      {
       barrier();
      }
     while(false);
    }
  }
 else
  {
  }
 if(false)
  {
   if((false))
    return;
  }
 else
  {
   if((false))
    barrier();
   if(false)
    {
    }
   else
    {
     if(((false) || false))
      {
      }
     else
      {
       if(false)
        {
        }
       else
        {
         if(true)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              barrier();
             return;
            }
          }
         else
          {
          }
         if((false))
          {
           if(((((injectionSwitch.x < injectionSwitch.y))) && true))
            {
             barrier();
            }
           else
            {
            }
          }
         do
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              return;
             do
              {
               if((((false) && true)))
                return;
              }
             while(((injectionSwitch.x > injectionSwitch.y)));
             barrier();
            }
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
         for(int _injected_loop_counter = 0; _injected_loop_counter < ((1 << (int(5))) >> (int(5))); _injected_loop_counter ++)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                barrier();
               do
                {
                 for(int _injected_loop_counter = (0 << (int(8))); _injected_loop_counter < (1 ^ 0); _injected_loop_counter ++)
                  {
                   if((false))
                    continue;
                   return;
                  }
                }
               while((! (! (false))));
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((false))
              {
               do
                {
                 return;
                }
               while(false);
              }
             if(((! (! (false)))))
              continue;
             if((false))
              {
               do
                {
                 barrier();
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  continue;
                }
               while(((injectionSwitch.x > injectionSwitch.y)));
              }
             do
              {
               barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                continue;
              }
             while(false);
             if((false))
              {
               if(true)
                {
                 if((false))
                  barrier();
                 if(((injectionSwitch.x > injectionSwitch.y)))
                  {
                  }
                 else
                  {
                   if((false))
                    return;
                  }
                 barrier();
                }
               else
                {
                 if((false))
                  barrier();
                 if((false))
                  continue;
                }
              }
             if((false))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             for(int _injected_loop_counter = ((1 << (int(6))) >> (int(6))); _injected_loop_counter > (0 >> ((clamp(int(8), int(8), int(8))))); _injected_loop_counter --)
              {
               if((false))
                return;
               do
                {
                 if((false))
                  return;
                }
               while(false);
              }
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              return;
             barrier();
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if(true)
      {
       barrier();
      }
     else
      {
      }
    }
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = 0; _injected_loop_counter < ((1 ^ 1) ^ (1 | 1)); _injected_loop_counter ++)
      {
       if((false))
        {
         if((((false) || false)))
          barrier();
         barrier();
        }
      }
     do
      {
       return;
      }
     while(false);
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if(((injectionSwitch.x > injectionSwitch.y)))
  {
  }
 else
  {
   if((false))
    {
     if((false))
      return;
     if((false))
      barrier();
     barrier();
    }
  }
 if((false))
  {
   if((false))
    {
     do
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(false);
     if(true)
      {
       barrier();
      }
     else
      {
      }
    }
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
    }
   else
    {
     if((false))
      barrier();
     for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
      {
       if(false)
        {
        }
       else
        {
         if((false))
          {
           do
            {
             return;
             if((false))
              barrier();
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
          }
        }
       if((false))
        break;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
        {
         return;
        }
      }
     if((false))
      barrier();
     for(int _injected_loop_counter = 1; _injected_loop_counter != (55443 & 0); _injected_loop_counter --)
      {
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             do
              {
               if(false)
                {
                }
               else
                {
                 barrier();
                }
              }
             while(false);
            }
          }
         do
          {
           for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
            {
             if((false))
              barrier();
             do
              {
               if((false))
                {
                 do
                  {
                   if(false)
                    {
                     if((false))
                      {
                       do
                        {
                         barrier();
                        }
                       while(false);
                      }
                    }
                   else
                    {
                     barrier();
                     if((false))
                      {
                       if(((bool(bvec2(false, ((injectionSwitch.x > injectionSwitch.y)))))))
                        barrier();
                       return;
                      }
                     if((false))
                      continue;
                    }
                   if(((! (! (false)))))
                    return;
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 while(false);
                 if((false))
                  {
                   if((false))
                    break;
                   do
                    {
                     barrier();
                     if((false))
                      barrier();
                    }
                   while(false);
                  }
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if((false))
                  return;
                }
              }
             while(false);
             if(false)
              {
               for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < ((true ? ((int((injectionSwitch.y)) << (int(6))) >> (int(6))) : (_injected_loop_counter))); _injected_loop_counter ++)
                {
                 for(int _injected_loop_counter = 1; _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
                  {
                   if((false))
                    {
                     do
                      {
                       barrier();
                      }
                     while(false);
                    }
                   if((false))
                    barrier();
                   if((false))
                    {
                     if(((((true) || false)) && true))
                      {
                       return;
                      }
                     else
                      {
                      }
                    }
                  }
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((false))
                  {
                   if((false))
                    barrier();
                   barrier();
                  }
                 continue;
                }
               if((false))
                continue;
              }
             else
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((false))
                  barrier();
                 return;
                }
               if((false))
                break;
               if((false))
                break;
               if((false))
                {
                 do
                  {
                   barrier();
                  }
                 while(((bool(bvec3(bool(bool(false)), true, false)))));
                }
               barrier();
              }
            }
          }
         while(false);
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           if(false)
            {
            }
           else
            {
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((false))
                  {
                   if((false))
                    barrier();
                   if((false))
                    break;
                   barrier();
                  }
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if((false))
                    barrier();
                   return;
                  }
                 do
                  {
                   do
                    {
                     barrier();
                    }
                   while(false);
                  }
                 while(((injectionSwitch.x > injectionSwitch.y)));
                }
               barrier();
               if((false))
                {
                 do
                  {
                   barrier();
                  }
                 while(false);
                }
              }
            }
           if((false))
            break;
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((false))
              continue;
             barrier();
            }
          }
        }
       else
        {
         do
          {
           if((false))
            barrier();
           if((false))
            barrier();
           if((false))
            {
             if(((bool(bvec3((bool(bvec2(false, false))), false, true)))))
              barrier();
             barrier();
            }
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
         if((false))
          {
           if((false))
            barrier();
           if((false))
            break;
           if((false))
            barrier();
           continue;
          }
        }
      }
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if((false))
        return;
       do
        {
         if((false))
          return;
        }
       while(false);
       if(((((bool(bvec3(false, true, false))) && true))))
        barrier();
      }
     else
      {
      }
    }
  }
 do
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    continue;
   if(true)
    {
     if((false))
      {
       if(true)
        {
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           if((false))
            barrier();
          }
         else
          {
          }
        }
       else
        {
        }
       barrier();
      }
    }
   else
    {
    }
   if((false))
    break;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       barrier();
       for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
        {
         if((false))
          return;
        }
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       if((false))
        return;
      }
     while(((bool(bool(bool(bvec4(((injectionSwitch.x > injectionSwitch.y)), false, false, true)))))));
     barrier();
    }
   if((false))
    continue;
   if((((injectionSwitch.x > injectionSwitch.y))))
    break;
   if((false))
    {
     do
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
       for(int _injected_loop_counter = (((int(ivec4(1, 1, 1, 0)))) << 0); _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            continue;
           continue;
          }
         for(int _injected_loop_counter = (50689 & 0); _injected_loop_counter != 1; _injected_loop_counter ++)
          {
           if((false))
            continue;
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
           if(false)
            {
            }
           else
            {
             return;
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if((false))
          return;
         for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
          {
           if((false))
            {
             if(false)
              {
              }
             else
              {
               if((false))
                barrier();
               return;
              }
            }
          }
        }
       if((false))
        return;
       if((((false) && true)))
        {
         if((false))
          {
           if((false))
            break;
           barrier();
          }
         continue;
        }
       for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
        {
         if((false))
          {
           if((false))
            continue;
           barrier();
          }
         if((false))
          {
           if((false))
            continue;
           for(int _injected_loop_counter = 1; _injected_loop_counter > ((0 & 72786) >> (int(0))); _injected_loop_counter --)
            {
             if((false))
              barrier();
             if((false))
              barrier();
            }
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                break;
               barrier();
              }
             if((false))
              break;
             if(((false || ((! (! (false)))))))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                return;
               break;
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if((false))
            {
             if((false))
              barrier();
             for(int _injected_loop_counter = 1; _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
              {
               return;
              }
            }
           if((false))
            {
             for(int _injected_loop_counter = 1; _injected_loop_counter > (0 >> (int(5))); _injected_loop_counter --)
              {
               if((false))
                return;
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             continue;
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if(false)
                {
                }
               else
                {
                 return;
                }
              }
            }
           if((false))
            barrier();
           do
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                barrier();
               barrier();
              }
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
          }
        }
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
       if((false))
        {
         do
          {
           barrier();
          }
         while(false);
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          {
           do
            {
             barrier();
            }
           while(false);
          }
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         barrier();
        }
       if((false))
        barrier();
       if((false))
        {
         if((false))
          continue;
         if((bool(bvec2(true, false))))
          {
           if(((! (! (false)))))
            barrier();
           barrier();
           if((false))
            barrier();
          }
         else
          {
          }
         if((false))
          barrier();
         do
          {
           if((false))
            barrier();
          }
         while(false);
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
     if((false))
      {
       if((false))
        {
         do
          {
           if((false))
            {
             if(false)
              {
              }
             else
              {
               if((false))
                barrier();
              }
             do
              {
               return;
              }
             while(false);
            }
          }
         while(false);
         continue;
        }
       do
        {
         if((false))
          {
           for(int _injected_loop_counter = (1 ^ 0); _injected_loop_counter > 0; _injected_loop_counter --)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if((false))
            barrier();
           if((false))
            return;
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
           if((false))
            continue;
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
           if((false))
            {
             if((false))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
             if((false))
              {
               if((false))
                continue;
               break;
              }
             if((! ((false || (! ((bool(bvec3(true, false, false)))))))))
              {
               barrier();
              }
             else
              {
              }
             if((false))
              return;
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if((false))
            {
             if((false))
              return;
             if((false))
              {
               if(((((injectionSwitch.x > injectionSwitch.y))) && true))
                {
                }
               else
                {
                 barrier();
                }
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
             for(int _injected_loop_counter = (1 & 1); _injected_loop_counter > 0; _injected_loop_counter --)
              {
               barrier();
              }
            }
           do
            {
             if(false)
              {
              }
             else
              {
               if((! (! (false))))
                {
                }
               else
                {
                 if((false))
                  barrier();
                }
               return;
              }
            }
           while(false);
          }
         if((false))
          break;
        }
       while(false);
       if((false))
        break;
       do
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
       if((((false) || ((injectionSwitch.x > injectionSwitch.y)))))
        break;
       if((false))
        {
         if((false))
          {
           do
            {
             barrier();
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
          }
         if(true)
          {
           if(false)
            {
            }
           else
            {
             for(int _injected_loop_counter = 1; _injected_loop_counter > ((((true ? 0 : (- 55507)))) | (0)); _injected_loop_counter --)
              {
               if((false))
                continue;
               if((false))
                {
                 if((false))
                  continue;
                 do
                  {
                   if((false))
                    break;
                   barrier();
                   do
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                   while(((injectionSwitch.x > injectionSwitch.y)));
                  }
                 while(false);
                }
               do
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               while(((injectionSwitch.x > injectionSwitch.y)));
              }
            }
          }
         else
          {
          }
         if((false))
          return;
         if((false))
          {
           do
            {
             barrier();
            }
           while(((((false) || false)) && true));
          }
         break;
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if(true)
            {
             return;
            }
           else
            {
            }
          }
         if((false))
          continue;
        }
       if(false)
        {
        }
       else
        {
         barrier();
        }
      }
     if((false))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       do
        {
         barrier();
         if((false))
          barrier();
        }
       while(false);
      }
     if((false))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       if(false)
        {
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       break;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      break;
     if((((injectionSwitch.x > injectionSwitch.y))))
      break;
    }
   if((false))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     if((false))
      barrier();
     break;
     if((false))
      barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(true)
      {
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
        }
       else
        {
        }
      }
     else
      {
      }
     if((false))
      break;
     break;
     for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < 1; _injected_loop_counter ++)
      {
       if((false))
        barrier();
      }
     if((false))
      {
       for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
        {
         for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
          {
           return;
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((((false) || false)))
        break;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      break;
    }
   if(((! (! (false)))))
    {
     if((false))
      {
       if((false))
        break;
       if((false))
        return;
       if((false))
        barrier();
       if((false))
        barrier();
       if(((bool(bvec2(((injectionSwitch.x > injectionSwitch.y)), true)))))
        barrier();
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         do
          {
           barrier();
          }
         while(false);
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
         barrier();
        }
       if((false))
        {
         if((false))
          {
           if((false))
            return;
           if(true)
            {
             if(true)
              {
               if((false))
                continue;
               if((false))
                barrier();
              }
             else
              {
              }
             if((false))
              barrier();
            }
           else
            {
             if((false))
              barrier();
             if(((true && (false))))
              barrier();
            }
           if((false))
            barrier();
           break;
           if((false))
            barrier();
          }
         break;
        }
       continue;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     continue;
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if((false))
    return;
   for(int _injected_loop_counter = 1; _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   if((false))
    continue;
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      continue;
     for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
      {
       if((false))
        continue;
       if((false))
        barrier();
       if((false))
        barrier();
      }
     if((((false) && true)))
      {
       do
        {
         barrier();
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
      }
     break;
    }
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       break;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((false))
    break;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      continue;
     if((false))
      barrier();
     return;
    }
   if((false))
    {
     if((false))
      break;
     return;
    }
   if((false))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
     for(int _injected_loop_counter = 1; _injected_loop_counter != (0 >> (int(2))); _injected_loop_counter --)
      {
       if((false))
        barrier();
       do
        {
         do
          {
           barrier();
          }
         while(false);
        }
       while(false);
       if((false))
        continue;
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    continue;
  }
 while(((injectionSwitch.x > injectionSwitch.y)));
 if(true)
  {
   for(int _injected_loop_counter = 0; _injected_loop_counter != (((~ (~ (int((injectionSwitch.y)))))) + 0); _injected_loop_counter ++)
    {
     for(int _injected_loop_counter = 0; _injected_loop_counter < ((1 << (int(6))) >> (int(6))); _injected_loop_counter ++)
      {
       GLF_merged4_0_1_13_1_1_11_2_1_11_3_1_14num_workgroupsubgroup_idvirtual_gidworkgroup_size.z = virtual_gid;
      }
     if((false))
      break;
     if((false))
      {
       do
        {
         barrier();
        }
       while(false);
      }
    }
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
    }
   else
    {
     if((false))
      {
       for(int _injected_loop_counter = 0; _injected_loop_counter < (0 ^ 1); _injected_loop_counter ++)
        {
         if(true)
          {
           barrier();
          }
         else
          {
          }
        }
      }
    }
  }
 else
  {
   if((false))
    {
     for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
      {
       return;
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    return;
  }
 uint next_virtual_gid = workgroup_base + GLF_merged4_0_1_13_1_1_11_2_1_11_3_1_14num_workgroupsubgroup_idvirtual_gidworkgroup_size.y * subgroup_size + ((subgroup_local_id + 1) % subgroup_size);
 if((false))
  {
   if(true)
    {
     return;
    }
   else
    {
    }
  }
 for(int _injected_loop_counter = 1; _injected_loop_counter > (0 >> (int(4))); _injected_loop_counter --)
  {
   for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
    {
     buf[GLF_merged4_0_1_13_1_1_11_2_1_11_3_1_14num_workgroupsubgroup_idvirtual_gidworkgroup_size.z] = 1;
    }
   if((false))
    {
     if((false))
      break;
     if(false)
      {
      }
     else
      {
       if((false))
        break;
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
       if((false))
        {
         for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           if((! ((bool(bvec4(! (false), false, true, true))))))
            {
             if((false))
              break;
            }
           else
            {
             barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if(false)
            {
            }
           else
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
        }
       if(false)
        {
        }
       else
        {
         if((false))
          {
           if((false))
            {
             if(((bool(bvec3((! (! (false))), true, true)))))
              {
               if(true)
                {
                 barrier();
                }
               else
                {
                }
              }
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
              }
             else
              {
               barrier();
              }
            }
           if((false))
            break;
           if((false))
            {
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
              }
             else
              {
               barrier();
              }
            }
           barrier();
           if((false))
            break;
          }
         if((false))
          barrier();
         barrier();
        }
       if((false))
        barrier();
      }
     if((false))
      continue;
    }
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
    }
   else
    {
     if((((false) && true)))
      {
       do
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           else
            {
            }
           barrier();
          }
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
       barrier();
      }
    }
  }
 if(false)
  {
  }
 else
  {
   atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
