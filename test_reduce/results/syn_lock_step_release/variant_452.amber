#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = (clamp(gl_NumWorkGroups, (((min((min(gl_NumWorkGroups, gl_NumWorkGroups)), gl_NumWorkGroups))) | uvec3(0u, 0u, 0u)), (uvec3(0u, 0u, 0u) + (gl_NumWorkGroups)))).x;
 uint workgroup_size = (clamp((min(gl_WorkGroupSize, gl_WorkGroupSize)), (((((((min((((uvec3(1u, 1u, 1u) * (((((gl_WorkGroupSize) >> uvec3(((false ? (subgroup_local_id) : (0u + (0u)))), 0u, 0u)) - ((false ? (uvec3(95220u, 102839u, 25957u)) : uvec3((uint(uvec2((0u + (0u)), 1u))), 0u, 0u)))))))) | uvec3(0u, 0u, 0u)), (uvec3(1u, 1u, 1u) * (((((gl_WorkGroupSize) >> uvec3(((false ? (subgroup_local_id) : (0u + (0u)))), 0u, 0u)) - ((false ? (uvec3(95220u, 102839u, 25957u)) : uvec3((uint(uvec2((0u + (0u)), 1u))), 0u, 0u)))))))))) | ((uvec3(1u, 1u, 1u) * (((((gl_WorkGroupSize) >> uvec3(((false ? (subgroup_local_id) : (0u + (0u)))), 0u, 0u)) - ((false ? (uvec3(95220u, 102839u, 25957u)) : uvec3((uint(uvec2((0u + (0u)), 1u))), 0u, 0u)))))))))) | (((((gl_WorkGroupSize) >> uvec3(((false ? (subgroup_local_id) : (0u + (0u)))), 0u, (clamp(0u, 0u, 0u)))) - ((false ? (uvec3(95220u, 102839u, 25957u)) : uvec3((uint(uvec2((((0u + (0u))) / 1u), 1u))), 0u, 0u)))))))) ^ uvec3(0u, 0u, 0u)), gl_WorkGroupSize)).x;
 uint workgroup_id = (((0u ^ (gl_WorkGroupID.x))) | (((((gl_WorkGroupID.x) | (gl_WorkGroupID.x))) | (gl_WorkGroupID.x))));
 uint workgroup_base = ((((min((uint(uint(((((0u << (uint(6u))) | ((((((((~ (~ ((workgroup_size) | (workgroup_size))))) ^ 0u))) - 0u)) / 1u))) * workgroup_id)))), (((((((~ (~ ((workgroup_size) | (workgroup_size))))) ^ 0u))) / 1u) * workgroup_id))) * 1u)) / 1u);
 uint virtual_gid = ((uint((0u ^ (uint((((injectionSwitch.x > injectionSwitch.y)) ? ((min(subgroup_size, subgroup_size))) : ((workgroup_base + (max(subgroup_id * ((subgroup_size) | (subgroup_size)), subgroup_id * (0u ^ (uint((uvec2(uvec3(uvec2((((subgroup_size) | ((max(((subgroup_size)), ((subgroup_size)))) << 0u))), 1u), 1u))))))))) - 0u)))))))) + (0u | (subgroup_local_id));
 uint next_virtual_gid = workgroup_base + subgroup_id * (clamp(subgroup_size, subgroup_size, (~ ((0u | (~ (subgroup_size))))))) + ((subgroup_local_id + 1) % subgroup_size);
 (0u | (buf[virtual_gid] = ((1) | 0)));
 atomicStore(buf[((clamp(uint((injectionSwitch.y)) * (next_virtual_gid), uint((injectionSwitch.y)) * (next_virtual_gid), uint(((mix(float(injectionSwitch.y), float((- 331.999)), bool(false))))) * (next_virtual_gid))))], (((((min((~ (~ (uint(2)))), ((((~ (~ (((~ (~ (~ ((clamp((~ (uint(2))), (~ (uint(2))), ((1u * (~ (uint(2))))))))))) >> 0u))))) | (~ (~ (~ ((clamp((~ (uint(2))), (~ (uint(2))), ((1u * (~ (uint(2)))))))))))))))) | ((((0u ^ ((min((~ (~ (uint(2)))), (~ (~ (uint(2)))))))))) | (((0u ^ ((min((~ (~ (uint(2)))), (~ (~ (uint(2)))))))))))) - 0u)), 4, 64, 4);
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
