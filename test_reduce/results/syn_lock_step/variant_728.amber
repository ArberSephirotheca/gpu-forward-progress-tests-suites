#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((false))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = ((gl_WorkGroupID.x) / 1u);
 uint workgroup_base = workgroup_size * workgroup_id;
 if((false))
  barrier();
 uint virtual_gid = (0u | (((0u ^ ((workgroup_base + ((~ (~ ((((((subgroup_id)) / 1u)) | ((subgroup_id))) | (~ ((uint(uvec4(((~ (((0u ^ ((((0u + (((clamp((max((subgroup_id), (subgroup_id))), (uint(uvec3((~ (~ ((((subgroup_id)) / 1u)))), 1u, uint((injectionSwitch.x))))), (subgroup_id))))))) / 1u))) >> ((uint(uint((0u | (uint(uint(0u))))))))))) | (~ (uint(uvec4(((((clamp(((max(((max((subgroup_id), (subgroup_id)))) ^ (clamp(0u, 0u, ((0u & 197191u) ^ (0u)))), ((max((subgroup_id), (subgroup_id)))) ^ (clamp(0u, 0u, ((0u & 197191u) ^ (0u))))))), ((((((min(subgroup_id, subgroup_id)))) / 1u) >> uint((injectionSwitch.x)))), (subgroup_id)))) >> ((((0u) | (0u)) | (uint(uint(0u))))))), 0u, 1u, 0u))))), 1u, ((((0u ^ (0u >> (((true ? (clamp(uint(((max(uint((0u ^ (uint(((false ? (subgroup_size) : 4u)))))), uint((0u ^ (uint(((false ? (subgroup_size) : 4u)))))))))), uint(4u), uint(4u))) : (num_workgroup))))))) / 1u)), 1u))))))))) * subgroup_size))) | (workgroup_base + ((((subgroup_id) | (~ ((uint(uvec4(~ ((((clamp((((clamp((max((subgroup_id), (subgroup_id))), (max((subgroup_id), (subgroup_id))), (max((subgroup_id), (subgroup_id))))) + 0u)), (((((min(((~ (~ ((((clamp(subgroup_id, subgroup_id, subgroup_id))))))) / 1u), (((max((((subgroup_id)) * (1u & 1u)), (subgroup_id)))) / 1u)))) | (((((false ? (workgroup_size) : (subgroup_id)))) / 1u)))) * 1u), (subgroup_id)))) >> ((0u | (((uint(uvec2(((((~ (~ (false ? (num_workgroup) : uint(uvec3((uint(uint(0u))), 0u, 0u)))))))), 1u))) | (((((((((uint(uvec2((((false ? (num_workgroup) : uint(uvec3((uint(uint(0u))), 0u, 0u))))), 1u)))) / 1u)) | 0u)) >> uint((injectionSwitch.x)))) / 1u))))))), 1u, (0u >> (uint(4u))), 1u)))))) * subgroup_size) >> 0u))))) + subgroup_local_id;
 uint next_virtual_gid = (((1u * (workgroup_base)) + (min(subgroup_id * subgroup_size, subgroup_id * subgroup_size)) + ((~ (~ ((((subgroup_local_id + 1)) ^ (max(((true ? 0u : (subgroup_id))), 0u))) % ((((((((((clamp(0u, 0u, 0u)) << 0u)) | (clamp(0u, 0u, 0u)))) ^ (subgroup_size)))) - 0u) | (1u * (((((max(0u, ((0u) * 1u))) << (uint(((false ? (atomicMin(subgroup_local_id, workgroup_base)) : 8u))))) + (subgroup_size))))))))))) - 0u);
 buf[virtual_gid] = 1;
 buf[next_virtual_gid] = 2;
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
