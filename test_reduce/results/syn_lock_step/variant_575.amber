#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if((false))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 if((false))
  return;
 if((false))
  return;
 do
  {
   if((! (! (((((bool((bvec3(bvec4((bvec3((bvec3(bvec3(bvec3(bvec3((vec2(mat4((mat2(1.0) * (injectionSwitch)), (min(0.0, ((false ? (- 3420.7515) : 0.0)))), (max(1.0, 1.0)), sin(0.0), 1.0, 1.0, 0.0, 1.0, (float(mat4x3(0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0))), 0.0, 1.0, (mix(float((vec4(5914.3924, ((((min(float(mat2(891.180, 1.0, sqrt(tan(0.0)), 1.0)), float(mat2(891.180, 1.0, sqrt(tan(0.0)), 1.0))))) - 0.0)), - 3.8, - 166.354).q)), (mix(float((- 4592.6046)), float(float(0.0)), bool(true))), bool(true))), 1.0, 0.0, 0.0))).x > injectionSwitch.y, false, ((true) || false)))))))), ((injectionSwitch.x < (mix(float((min(injectionSwitch.y, injectionSwitch.y))), float((1842.2811)), bool(false)))))))))))))))))
    {
     do
      {
       return;
       if((false))
        continue;
       if((((injectionSwitch.x > ((injectionSwitch.y) * (injectionSwitch.y))))))
        break;
      }
     while(false);
     if((false))
      continue;
    }
  }
 while(false);
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 uint workgroup_size = (max(gl_WorkGroupSize, ((gl_WorkGroupSize) + uvec3(0u, 0u, 0u)))).x;
 uint workgroup_id = gl_WorkGroupID.x;
 if((false))
  {
   for(int _injected_loop_counter = 0; ((true && (((! (! ((clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)) != (int(((clamp(float(mat3x2((injectionSwitch.y), 0.0, (0.0 + ((max(0.0, 0.0)))), 0.0, log(1.0), (1.0 * ((dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(0.0, 1.0, 1.0, 1.0))))))), float(mat3x2((injectionSwitch.y), 0.0, (0.0 + (0.0)), 0.0, log(1.0), (dot(vec4((clamp(1.0, 1.0, 1.0)), 0.0, 0.0, 0.0), vec4(((0.0) / 1.0), 1.0, 1.0, 1.0))))), ((injectionSwitch.x) + (float(mat3x2((injectionSwitch.y), 0.0, (0.0 + (0.0)), 0.0, log(1.0), (dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(0.0, (max(1.0, 1.0)), 1.0, 1.0))))))))))) | (((max(1, 1)) | (((max(1, 1)) ^ 0))))))))) && true))); _injected_loop_counter ++)
    {
     if((false))
      continue;
     return;
     if((false))
      return;
    }
  }
 if((false))
  {
   if((false))
    return;
   if((false))
    return;
   return;
  }
 if(((! (! (false)))))
  {
   for(int _injected_loop_counter = (0 >> ((~ (~ ((~ (~ (int(1))))))))); _injected_loop_counter < 1; ((_injected_loop_counter ++) * 1))
    {
     return;
    }
   if((bool(bvec2((((injectionSwitch.x > (float(mat4x3((float(vec3((mat2(1.0) * (injectionSwitch)).y, 0.0, ((exp(0.0)) / (injectionSwitch.y))))), 1.0, 1.0, 0.0, (dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0))), (mix(float(((vec4(4.5, - 412.596, - 5034.8566, 0.8) + vec4(- 0.4, 80.68, - 8.6, 76.25)).b)), float(((1.0) / 1.0)), bool(true))), exp(abs(0.0)), 1.0, log((min(1.0, (0.0 + (1.0))))), 1.0, 1.0, determinant(mat3(0.0, 0.0, (log(1.0) + (0.0)), 0.0, 0.0, 0.0, sin(0.0), 1.0, 0.0)))))))), false))))
    return;
  }
 if((false))
  {
   if((false))
    return;
   if((false))
    return;
   return;
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
  {
   if((((! (! (true))) && ((bool((bvec3(bvec3((bvec3(bvec3(bvec3((true && (((injectionSwitch.x > injectionSwitch.y)))), (! ((bool(bvec2((false || (! (false))), true))))), false)))))))))))))
    {
     if((((! (! ((! (! (((bool((! (! ((! (! ((bool(bvec4(bool((injectionSwitch.x < injectionSwitch.y)), true, false, true)))))))))))))))))) && true)))
      {
       return;
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
       if((false))
        continue;
      }
     if((false))
      break;
     if((((! (! (bool(bvec4(((! (! ((! ((! (! (! ((injectionSwitch.x > injectionSwitch.y))))))))))), false, ((injectionSwitch.x < injectionSwitch.y)), true))))))))
      {
       if(((true && (false))))
        break;
       return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        continue;
       break;
      }
    }
   if((false))
    break;
  }
 if((bool(bvec4((((true && (((! (! (bool(bvec2((! ((true && (! ((true && ((false || ((injectionSwitch.x > injectionSwitch.y)))))))))), false)))))))))), true, true, false))))
  {
   if((false))
    return;
   return;
  }
 uint virtual_gid = ((((min(((min((max(((workgroup_base + subgroup_id * subgroup_size) ^ 0u), workgroup_base + (uint((((((injectionSwitch.x < injectionSwitch.y)) ? uvec3(0u, 0u, ((0u) | (0u))) ^ (uvec3(((true ? subgroup_id * subgroup_size : (workgroup_id))), 0u, 1u)) : (uvec3(154388u, 160579u, 188550u))))))))), (max(((workgroup_base + subgroup_id * subgroup_size) ^ 0u), workgroup_base + (uint((((((injectionSwitch.x < injectionSwitch.y)) ? uvec3(0u, 0u, ((0u) | (0u))) ^ (uvec3(((true ? subgroup_id * subgroup_size : (workgroup_id))), 0u, 1u)) : (uvec3(154388u, 160579u, 188550u)))))))))))) ^ 0u, ((min((max(((workgroup_base + subgroup_id * subgroup_size) ^ 0u), workgroup_base + (uint((((((injectionSwitch.x < injectionSwitch.y)) ? uvec3(0u, 0u, ((0u) | (0u))) ^ (uvec3(((true ? subgroup_id * subgroup_size : (workgroup_id))), 0u, 1u)) : (uvec3(154388u, 160579u, 188550u))))))))), (max(((workgroup_base + subgroup_id * subgroup_size) ^ 0u), workgroup_base + (uint((((((injectionSwitch.x < injectionSwitch.y)) ? uvec3(0u, 0u, ((0u) | (0u))) ^ (uvec3(((true ? subgroup_id * subgroup_size : (workgroup_id))), 0u, 1u)) : (uvec3(154388u, 160579u, 188550u)))))))))))) ^ 0u))) + subgroup_local_id) + 0u);
 uint next_virtual_gid = (((((clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y)) ? (0u ^ (((workgroup_base + (((clamp(subgroup_id, (min(subgroup_id, subgroup_id)), subgroup_id)) * (~ (~ (subgroup_size)))) ^ 0u)) ^ 0u))) : (num_workgroup))) + ((subgroup_local_id + 1) % subgroup_size);
 if((bool(bool(false))))
  {
  }
 else
  {
   ((buf[virtual_gid] = 1) >> 0u);
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 buf[next_virtual_gid] = 2;
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
