#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

struct _GLF_struct_5 {
 mat3 _f0;
 mat4x2 _f1;
 bvec2 _f2;
 bvec4 _f3;
} ;

struct _GLF_struct_4 {
 mat2x3 _f0;
} ;

struct _GLF_struct_6 {
 uvec3 _f0;
 _GLF_struct_4 _f1;
 mat2x4 _f2;
 _GLF_struct_5 _f3;
} ;

struct _GLF_struct_2 {
 float _f0;
 mat3 _f1;
 ivec3 _f2;
 ivec4 _f3;
 uvec2 _f4;
 bvec4 _f5;
 uvec3 _f6;
} ;

struct _GLF_struct_1 {
 mat2 _f0;
 int _f1;
 mat2x3 _f2;
 uvec3 _f3;
 mat4x2 _f4;
} ;

struct _GLF_struct_0 {
 vec4 _f0;
 ivec4 _f1;
 int _f2;
 uvec3 _f3;
} ;

struct _GLF_struct_3 {
 _GLF_struct_0 _f0;
 vec3 _f1;
 mat3x4 _f2;
 uvec4 _f3;
 _GLF_struct_1 _f4;
 _GLF_struct_2 _f5;
 bool _f6;
} ;

struct _GLF_struct_7 {
 bvec2 _f0;
 _GLF_struct_3 _f1;
 _GLF_struct_6 _f2;
 bvec3 _f3;
 uint next_virtual_gid;
 uint _f4;
 mat3x4 _f5;
} ;

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((false))
  {
   for(int _injected_loop_counter = (0 << (((int(0))) ^ 0)); _injected_loop_counter != 1; _injected_loop_counter ++)
    {
     barrier();
     if((false))
      barrier();
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = ((1 << ((0 | (int(0))))) >> ((~ (~ (int(0)))))); _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
    {
     do
      {
       if((false))
        {
         if(false)
          {
          }
         else
          {
           barrier();
          }
        }
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
    }
   if((false))
    {
     if(((! (! (false)))))
      return;
     barrier();
    }
   barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  return;
 for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
  {
   if((false))
    {
     if((false))
      continue;
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        break;
       barrier();
      }
     barrier();
    }
   if((((((! ((bool(bvec2(! (injectionSwitch.x > injectionSwitch.y), false)))))) || false))))
    {
    }
   else
    {
     if((false))
      {
       if((false))
        barrier();
       do
        {
         return;
         if((false))
          return;
        }
       while(false);
       if((false))
        return;
      }
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
       if((false))
        barrier();
       if((false))
        barrier();
      }
     else
      {
       if(((! (! (false)))))
        {
         if((false))
          continue;
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         if((false))
          continue;
         if(((! ((bool(bvec4(! (false), false, true, true)))))))
          break;
         barrier();
        }
       if(true)
        {
         if((false))
          barrier();
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           for(int _injected_loop_counter = ((clamp(int((max(ivec4(0, 0, 1, 0), ivec4(0, 0, (clamp(1, ((((injectionSwitch.x > injectionSwitch.y)) ? (((- 56865) | (- 56865))) : 1)), ((1) | 0))), 0)))), ((int((max(ivec4(0, 0, 1, 0), ivec4(0, 0, (clamp(1, ((((injectionSwitch.x > injectionSwitch.y)) ? (((- 56865) | (- 56865))) : 1)), ((1) | 0))), 0))))) | (int((max(ivec4(0, 0, 1, 0), ivec4(0, 0, (clamp(1, ((((injectionSwitch.x > injectionSwitch.y)) ? (((- 56865) | (- 56865))) : 1)), ((1) | 0))), 0)))))), int((max(ivec4(0, 0, 1, 0), ivec4(0, 0, (clamp(1, ((((injectionSwitch.x > injectionSwitch.y)) ? (((- 56865) | (- 56865))) : 1)), ((1) | 0))), 0))))))); _injected_loop_counter != 1; _injected_loop_counter ++)
            {
             if((false))
              barrier();
             if(false)
              {
              }
             else
              {
               if((false))
                barrier();
               if((false))
                break;
              }
             barrier();
             if((false))
              continue;
            }
           if((false))
            {
             if((false))
              break;
             return;
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((((false)) && true))
            barrier();
          }
         if((bool(bvec4((false), false, true, true))))
          {
           if((false))
            barrier();
           for(int _injected_loop_counter = (0 >> ((max(int(3), ((false ? (35372) : int(3))))))); _injected_loop_counter != 1; _injected_loop_counter ++)
            {
             barrier();
            }
          }
         if((false))
          break;
        }
       else
        {
        }
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if((false))
      continue;
     continue;
    }
  }
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((false))
  barrier();
 if((false))
  barrier();
 if(((((((mat2(1.0) * (injectionSwitch))) / vec2(1.0, 1.0)).x > injectionSwitch.y))))
  {
   if((false))
    return;
   barrier();
   if((false))
    barrier();
  }
 if((false))
  return;
 uint num_workgroup = gl_NumWorkGroups.x;
 if((false))
  barrier();
 if(((bool(bvec4(((injectionSwitch.x > injectionSwitch.y)), true, false, true)))))
  return;
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 uint workgroup_size = (((clamp(gl_WorkGroupSize, gl_WorkGroupSize, gl_WorkGroupSize)).x) << 0u);
 if((false))
  barrier();
 uint workgroup_id = (max((~ (~ (gl_WorkGroupID))), gl_WorkGroupID)).x;
 for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
  {
   if((((false || ((! (! (! (! (false))))))))))
    barrier();
   if((false))
    break;
  }
 if(((((injectionSwitch.x < injectionSwitch.y)) && (false))))
  barrier();
 uint workgroup_base = workgroup_size * workgroup_id;
 do
  {
   if((false))
    barrier();
  }
 while((! ((false || (! ((bool(bvec2(false, false)))))))));
 if((false))
  {
   if(false)
    {
    }
   else
    {
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 if(false)
  {
   if((false))
    return;
  }
 else
  {
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     if((! (! ((false)))))
      {
       if((false))
        return;
       barrier();
      }
    }
   else
    {
    }
  }
 if(((((bool((true && (bool((! (! (injectionSwitch.x > injectionSwitch.y))))))))))))
  return;
 uint virtual_gid = workgroup_base + ((((0u & 12352u) ^ 0u) + ((true ? subgroup_id : (atomicAdd(subgroup_size, (++ workgroup_base))))))) * (min(((subgroup_size) ^ 0u), (0u + (subgroup_size)))) + subgroup_local_id;
 _GLF_struct_7 _GLF_struct_replacement_7 = _GLF_struct_7(bvec2(true), _GLF_struct_3(_GLF_struct_0(vec4(1.0), ivec4(1), 1, uvec3(1u)), vec3(1.0), mat3x4(1.0), ((uvec4(1u)) - uvec4((injectionSwitch.x), (injectionSwitch.x), (((((float(mat3x4(((max(injectionSwitch.x, injectionSwitch.x))) / exp(0.0), 1.0, 0.0, 0.0, exp(0.0), 1.0, 0.0, 0.0, 0.0, (dot(vec4(0.0, 1.0, sin(0.0), 1.0), vec4(1.0, 0.0, 1.0, 0.0))), 1.0, 1.0))) / 1.0)))), (injectionSwitch.x))), _GLF_struct_1(mat2(1.0), (0 | ((int((injectionSwitch.x)) ^ ((max(1, 1)))))), mat2x3(1.0), (~ (~ (((((((uvec3(1u, 1u, 1u) * (uvec3((max((max(uvec3(((uvec3((min(1u, 1u)))) - uvec3(0u, 0u, 0u))), (max(uvec3(((uvec3((min(1u, 1u)))) - uvec3(0u, 0u, 0u))), uvec3(((uvec3((min(1u, 1u)))) - uvec3(0u, 0u, 0u))))))), uvec3(((uvec3((min(1u, 1u)))) - uvec3(0u, 0u, 0u))))))))) * uvec3(1u, 1u, 1u))) | (uvec3((max(uvec3(((uvec3((min(((true ? 1u : (workgroup_base))), 1u)))) - uvec3(0u, 0u, 0u))), uvec3(((uvec3((min(1u, 1u)))) - uvec3(0u, (min(0u, 0u)), 0u)))))))))))), mat4x2(1.0)), _GLF_struct_2(1.0, mat3(1.0), ivec3(1), ivec4(1), ((((true ? ((uvec2(1u)) ^ uvec2(0u, ((true ? 0u : (virtual_gid))))) : (uvec2(76044u, 100541u))))) / (uvec2(0u, 0u) | (((min((uvec2(1u, 1u) ^ uvec2(0u, 0u)), (uvec2(1u, 1u) ^ uvec2(0u, 0u))))) | uvec2(0u, 0u)))), bvec4(true), uvec3(1u)), true), _GLF_struct_6((((clamp(uvec3(1u), uvec3(1u), uvec3(1u))) | uvec3(0u, 0u, 0u))), _GLF_struct_4(mat2x3(1.0)), mat2x4(1.0), _GLF_struct_5(mat3(1.0), mat4x2(1.0), bvec2(true), bvec4(true))), bvec3(true), (((true ? (((true ? (uint(uvec3(workgroup_base, 0u, 1u))) : (25066u)))) | (((((workgroup_base) / 1u)) | (workgroup_base))) : (num_workgroup)))) + subgroup_id * subgroup_size + ((~ (~ ((subgroup_local_id + 1) % subgroup_size)))), 1u, mat3x4(1.0));
 if(false)
  {
  }
 else
  {
   if(((! (! (false)))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 if((false))
  {
   if(true)
    {
     barrier();
    }
   else
    {
    }
  }
 if((false))
  {
   do
    {
     return;
    }
   while((false || (false)));
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if(false)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        return;
       return;
      }
     if((false))
      {
       if((false))
        return;
       return;
      }
     if((false))
      barrier();
     if((false))
      return;
    }
   else
    {
     if(false)
      {
      }
     else
      {
       if(((! (! ((! (! (((injectionSwitch.x > injectionSwitch.y))))))))))
        return;
       barrier();
      }
    }
  }
 if(true)
  {
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     do
      {
       if(false)
        {
         if((false))
          return;
        }
       else
        {
         buf[virtual_gid] = 1;
         if((((injectionSwitch.x > (float((transpose(transpose(mat3x2(injectionSwitch.y, 0.0, 1.0, (clamp(1.0, (0.0 + (1.0)), 1.0)), 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0))))))))))))))
          barrier();
         if((false))
          {
           if(((bool(bool((true && (((injectionSwitch.x > ((injectionSwitch.y) / sqrt(1.0)))))))))))
            break;
           if(false)
            {
            }
           else
            {
             return;
            }
          }
         if((false))
          barrier();
         if(true)
          {
           if((false))
            barrier();
           if((((false) || (false || (false)))))
            continue;
          }
         else
          {
          }
         if((false))
          return;
        }
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
    }
   else
    {
     if((false))
      {
       if(((bool(bool((bool(bool(false))))))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if((false))
      {
       if((false))
        barrier();
       return;
      }
    }
  }
 else
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
      {
       if((false))
        {
         if(true)
          {
           barrier();
          }
         else
          {
          }
        }
      }
     if(((bool(bvec3(false, true, true)))))
      barrier();
     if(true)
      {
       do
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         if((((injectionSwitch.x > (mix(float((mix(float((0.1)), float(injectionSwitch.y), bool(true)))), float((897.110)), bool(false)))))))
          barrier();
        }
       while((true && (! (((((! ((true && ((((((injectionSwitch.x > injectionSwitch.y))) || false))))))) && true)) || false))));
       return;
       if(false)
        {
        }
       else
        {
         if((false))
          barrier();
         if((false))
          return;
        }
       if((false))
        return;
      }
     else
      {
      }
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((((injectionSwitch.x > injectionSwitch.y))) && true)))
          barrier();
         return;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       if((false))
        return;
      }
     if((false))
      barrier();
     if((true && ((false))))
      barrier();
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if((false))
        barrier();
       if((((false) && true)))
        barrier();
      }
     else
      {
      }
    }
   do
    {
     if((false))
      {
       if((false))
        return;
       if((false))
        return;
       if((((false) || false)))
        barrier();
       if((false))
        {
         if((false))
          break;
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           if((false))
            {
             if((false))
              barrier();
             barrier();
            }
          }
         if((false))
          return;
         if((false))
          continue;
         if((false))
          continue;
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if((false))
          barrier();
         barrier();
         if(((((true && (false))) || false)))
          continue;
        }
       do
        {
         return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(false);
       if((false))
        barrier();
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if((false))
        {
         if(false)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         else
          {
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
             if((false))
              {
               if((((false) && true)))
                barrier();
               if((false))
                barrier();
               if(false)
                {
                }
               else
                {
                 if((false))
                  barrier();
                 barrier();
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             if((false))
              barrier();
            }
           else
            {
             if((false))
              return;
             barrier();
            }
          }
        }
      }
     if((false))
      barrier();
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(((injectionSwitch.x < injectionSwitch.y)))
  {
   buf[_GLF_struct_replacement_7.next_virtual_gid] = (0 ^ (((2) ^ 0)));
  }
 else
  {
  }
 if((false))
  {
   if((false))
    return;
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   if(((((bool(bvec2(injectionSwitch.x > injectionSwitch.y, ((false) || false))))))))
    {
     do
      {
       if((false))
        barrier();
       return;
       if((false))
        barrier();
      }
     while(false);
     if(false)
      {
       if((((injectionSwitch.x > ((injectionSwitch.y) - 0.0)))))
        barrier();
      }
     else
      {
       if((false))
        {
         if((false))
          barrier();
         return;
        }
       if((false))
        barrier();
      }
    }
   if((false))
    {
     if(((true && ((false || (bool(bool(false))))))))
      {
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
       if((((((injectionSwitch.x > injectionSwitch.y)))) || false))
        barrier();
       if(((true && (false))))
        return;
      }
    }
   barrier();
   if((false))
    {
     if((false))
      barrier();
     barrier();
     if((false))
      return;
    }
   for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
    {
     if((((((bool((bvec3(bvec4(bvec3((injectionSwitch.x > injectionSwitch.y), false, false), false)))))) || false))))
      {
       if(true)
        {
         if((false))
          barrier();
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
       barrier();
      }
    }
  }
 if((false))
  barrier();
 for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != (0 << (min((int(6)), (int(6))))); _injected_loop_counter --)
  {
   if((((((injectionSwitch.x > injectionSwitch.y)))) || false))
    barrier();
  }
 if(true)
  {
   if(true)
    {
     if(true)
      {
       if((((false) && true)))
        return;
       if((false))
        {
         if(((! ((((true && (! (false)))) && true)))))
          return;
         barrier();
        }
       if((false))
        return;
       if((false))
        {
         for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
          {
           if((false))
            {
             if((false))
              barrier();
             return;
            }
          }
         if((false))
          return;
         for(int _injected_loop_counter = 0; _injected_loop_counter < (0 | (((1 << ((max(int(3), int(3))))) >> (int(3))))); _injected_loop_counter ++)
          {
           if((false))
            continue;
           barrier();
           if((false))
            return;
          }
        }
       if(((injectionSwitch.x > (clamp(injectionSwitch, (clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)).y)))
        {
        }
       else
        {
         if((false))
          {
           do
            {
             if((false))
              break;
             if((false))
              {
               if(((! (((! (((bool((bool(bvec4(bool((false)), false, false, false))))) && true))) && true)))))
                {
                 if((false))
                  return;
                 if((false))
                  {
                   if((false))
                    barrier();
                   barrier();
                  }
                 if((true && (((injectionSwitch.x > injectionSwitch.y)))))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                 if((false))
                  barrier();
                }
               if((bool(bvec4(false, true, false, ((false) || false)))))
                {
                }
               else
                {
                 if(((((true ? injectionSwitch.x : (- 843.063))) > injectionSwitch.y)))
                  {
                  }
                 else
                  {
                   if((false))
                    return;
                   if((false))
                    {
                     if(((injectionSwitch.x > injectionSwitch.y)))
                      {
                       if((false))
                        barrier();
                      }
                     else
                      {
                       if((false))
                        barrier();
                      }
                     return;
                    }
                  }
                 if((false))
                  return;
                }
               do
                {
                 return;
                }
               while(((bool(((bool(bool(bool(((false) && true))))) || false)))));
              }
            }
           while(false);
           do
            {
             if((false))
              {
               do
                {
                 barrier();
                }
               while(false);
              }
             if((false))
              break;
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(false)
              {
              }
             else
              {
               if((false))
                barrier();
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
                    {
                     return;
                    }
                  }
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(false)
                  {
                  }
                 else
                  {
                   if((false))
                    {
                     if((false))
                      return;
                     if(((injectionSwitch.x > injectionSwitch.y)))
                      {
                      }
                     else
                      {
                       if((((((false) && true)) || false)))
                        return;
                      }
                     if((false))
                      return;
                     if((false || (false)))
                      {
                       if((false))
                        barrier();
                      }
                     else
                      {
                       if((false))
                        barrier();
                      }
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      {
                       for(int _injected_loop_counter = 1; _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
                        {
                         barrier();
                        }
                      }
                     if(false)
                      {
                       if((false))
                        break;
                       if(((false || (bool(bvec3((bool(bvec4((! (! (((injectionSwitch.x < injectionSwitch.y))))), true, false, false))), false, true))))))
                        {
                         do
                          {
                           do
                            {
                             do
                              {
                               if((((! (! (((((vec2(injectionSwitch[0], injectionSwitch[1])).x) - 0.0) > (((true && (false)) ? (injectionSwitch) : injectionSwitch)).y)))))))
                                {
                                 if((((injectionSwitch.x > injectionSwitch.y))))
                                  barrier();
                                 if(((injectionSwitch.x < injectionSwitch.y)))
                                  {
                                   if((false))
                                    barrier();
                                   barrier();
                                  }
                                 else
                                  {
                                  }
                                 for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                                  {
                                   if((((injectionSwitch.x > injectionSwitch.y))))
                                    barrier();
                                  }
                                }
                              }
                             while(false);
                             if(((! (! ((bool(bvec4(false, false, true, true))))))))
                              continue;
                            }
                           while(((injectionSwitch.x > injectionSwitch.y)));
                          }
                         while(false);
                        }
                       else
                        {
                        }
                      }
                     else
                      {
                       if((false))
                        {
                         do
                          {
                           do
                            {
                             barrier();
                             if((((injectionSwitch.x > injectionSwitch.y))))
                              break;
                            }
                           while(((injectionSwitch.x > injectionSwitch.y)));
                          }
                         while(false);
                        }
                       barrier();
                       if((false))
                        barrier();
                       if((false))
                        barrier();
                       if(((injectionSwitch.x < (min(injectionSwitch, (clamp(injectionSwitch, ((false ? (injectionSwitch) : injectionSwitch)), injectionSwitch)))).y)))
                        {
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          {
                           if((((injectionSwitch.x > injectionSwitch.y))))
                            {
                             if((((injectionSwitch.x > injectionSwitch.y))))
                              return;
                             barrier();
                            }
                           if((((injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                           break;
                           if((false))
                            break;
                          }
                         if((((! (((! ((injectionSwitch.x > injectionSwitch.y))) || (((mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y))))))))
                          {
                           if(((bool(bvec4(false, false, false, false)))))
                            barrier();
                           if(((injectionSwitch.x < injectionSwitch.y)))
                            {
                             for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
                              {
                               if((false))
                                {
                                 if(false)
                                  {
                                   if((((injectionSwitch.x > injectionSwitch.y))))
                                    barrier();
                                  }
                                 else
                                  {
                                   if((false))
                                    barrier();
                                  }
                                 if((false))
                                  return;
                                 barrier();
                                 if((((injectionSwitch.x > injectionSwitch.y))))
                                  barrier();
                                }
                              }
                            }
                           else
                            {
                            }
                           barrier();
                          }
                        }
                       else
                        {
                         if((false))
                          barrier();
                        }
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        {
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                         for(int _injected_loop_counter = 1; _injected_loop_counter != ((false ? (min(_injected_loop_counter, _injected_loop_counter)) : (0 ^ ((0 & - 62229))))); _injected_loop_counter --)
                          {
                           if(true)
                            {
                             if((((injectionSwitch.x > injectionSwitch.y))))
                              barrier();
                             if((false))
                              barrier();
                             barrier();
                            }
                           else
                            {
                            }
                          }
                         if((false))
                          continue;
                        }
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        {
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          break;
                         continue;
                        }
                       if((false))
                        barrier();
                       if((false))
                        {
                         if((false))
                          continue;
                         continue;
                        }
                       if((false))
                        break;
                       if((false))
                        continue;
                      }
                     if(false)
                      {
                      }
                     else
                      {
                       if((false))
                        barrier();
                      }
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      return;
                    }
                  }
                 if(true)
                  {
                   if((false))
                    break;
                   if((false))
                    barrier();
                   if((! (! ((false)))))
                    {
                     if((false))
                      barrier();
                     if((true && ((! (! ((bool(bool((false))))))))))
                      {
                       for(int _injected_loop_counter = 0; (((false || (((_injected_loop_counter < 1) || false)))) && true); _injected_loop_counter ++)
                        {
                         barrier();
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          break;
                        }
                      }
                     return;
                    }
                   if((false))
                    break;
                   if((! (! (((injectionSwitch.x < injectionSwitch.y))))))
                    {
                     if((false))
                      return;
                     if((false))
                      barrier();
                    }
                   else
                    {
                    }
                   if((false))
                    barrier();
                   if(true)
                    {
                     if(((((false || (injectionSwitch.x > injectionSwitch.y))))))
                      break;
                     if(((((false || (((((((((false)) || false) || false))) && true) && true)))) && true)))
                      barrier();
                     barrier();
                    }
                   else
                    {
                     do
                      {
                       if(((! (! (false)))))
                        {
                         if(false)
                          {
                          }
                         else
                          {
                           barrier();
                           if((((injectionSwitch.x > injectionSwitch.y))))
                            continue;
                           if((false))
                            {
                             if((false))
                              continue;
                             barrier();
                            }
                          }
                        }
                      }
                     while(false);
                    }
                   if((false))
                    barrier();
                   if((false))
                    {
                     if((false))
                      continue;
                     do
                      {
                       barrier();
                      }
                     while(((injectionSwitch.x > injectionSwitch.y)));
                    }
                   if((false))
                    {
                     if((false))
                      barrier();
                     if((false))
                      return;
                     return;
                    }
                   if((((((injectionSwitch.x > injectionSwitch.y))) || false)))
                    {
                     if(((injectionSwitch.x < injectionSwitch.y)))
                      {
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        return;
                       return;
                      }
                     else
                      {
                       if((((false) || ((false) && ((injectionSwitch.x < injectionSwitch.y))))))
                        barrier();
                      }
                     if((false))
                      {
                       if((false))
                        barrier();
                       break;
                      }
                    }
                   if(((bool(bvec2(false, true)))))
                    barrier();
                   if(((((bool(bvec3(false, false, true)))) || false)))
                    {
                     if((false))
                      continue;
                     for(int _injected_loop_counter = 1; _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
                      {
                       if((false))
                        break;
                       for(int _injected_loop_counter = ((((int((injectionSwitch.y))) / 1)) / 1); _injected_loop_counter != (1 ^ (1 & 1)); _injected_loop_counter --)
                        {
                         for(int _injected_loop_counter = (1 ^ 0); _injected_loop_counter != (0 << (int(1))); _injected_loop_counter --)
                          {
                           if((false))
                            barrier();
                           barrier();
                           if((false))
                            return;
                          }
                        }
                       if((false))
                        barrier();
                       if((false))
                        continue;
                      }
                    }
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if((false))
                    {
                     if((false))
                      return;
                     break;
                    }
                  }
                 else
                  {
                  }
                 if((false))
                  return;
                }
              }
            }
           while(false);
           return;
           for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
            {
             if((! (! (true))))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if((false))
                {
                 if(false)
                  {
                  }
                 else
                  {
                   return;
                  }
                }
              }
             else
              {
               if((false))
                break;
              }
            }
          }
         for(int _injected_loop_counter = ((0 | 0) + (1)); _injected_loop_counter != 0; _injected_loop_counter --)
          {
           if((((! ((false || (! ((injectionSwitch.x > injectionSwitch.y)))))))))
            {
             if((false))
              barrier();
             barrier();
            }
          }
        }
       if((false))
        {
         if(true)
          {
           if((((true && (bool(bvec4((bool(bool(((injectionSwitch.x > injectionSwitch.y))))), false, true, false)))))))
            {
             do
              {
               for(int _injected_loop_counter = 1; (bool(bool(_injected_loop_counter > 0))); _injected_loop_counter --)
                {
                 if((((injectionSwitch.x > ((true ? (vec2(vec3(injectionSwitch, 1.0))) : (injectionSwitch))).y))))
                  {
                   if(true)
                    {
                     if((false))
                      continue;
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      break;
                     barrier();
                    }
                   else
                    {
                    }
                   if((true && ((bool(bvec4((false), false, true, false))))))
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     continue;
                    }
                  }
                 barrier();
                }
              }
             while(false);
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             do
              {
               barrier();
              }
             while(((injectionSwitch.x > injectionSwitch.y)));
            }
          }
         else
          {
          }
         if((false))
          return;
         return;
         if((false))
          barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        return;
      }
     else
      {
       if(true)
        {
         if(((! (! (false)))))
          {
           if((false))
            barrier();
           barrier();
          }
         if((false))
          {
           if((false))
            {
             if((false))
              return;
             barrier();
            }
           barrier();
           if((false))
            return;
           if((((false) || false)))
            barrier();
          }
        }
       else
        {
         if(((((false || (false)) || ((injectionSwitch.x > injectionSwitch.y))))))
          {
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             barrier();
            }
          }
        }
       if(((bool(bvec3(false, false, false)))))
        barrier();
       if((! (! ((((vec2((((((clamp(injectionSwitch[0], injectionSwitch[0], injectionSwitch[0]))) / 1.0)) / 1.0), injectionSwitch[1])).x > injectionSwitch.y))))))
        {
         if((false))
          {
           if((false))
            barrier();
           return;
          }
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            return;
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             for(int _injected_loop_counter = (0 ^ 1); _injected_loop_counter != 0; _injected_loop_counter --)
              {
               if((false))
                {
                 if((false))
                  return;
                 barrier();
                }
              }
            }
           else
            {
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           barrier();
          }
        }
       if((false))
        barrier();
       do
        {
         do
          {
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             if((false))
              barrier();
             if((false))
              {
               if((! ((false || (! (((injectionSwitch.x < injectionSwitch.y))))))))
                {
                 if(true)
                  {
                   return;
                   if((false))
                    barrier();
                  }
                 else
                  {
                  }
                 if((false))
                  break;
                }
               else
                {
                }
              }
            }
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
        }
       while(false);
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     if((false))
      barrier();
     if(((true) || false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         return;
        }
      }
     else
      {
       if((false))
        return;
      }
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
       if(((! (! ((((injectionSwitch.x > injectionSwitch.y)) || ((true && (((injectionSwitch.x > injectionSwitch.y)))))))))))
        barrier();
      }
    }
   if((false))
    return;
  }
 else
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(true)
  {
   if((false))
    barrier();
  }
 else
  {
  }
 if((false))
  barrier();
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
