#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if((false))
  barrier();
 if((false))
  {
   if((((! (! (((false || ((! (! (((injectionSwitch.x > injectionSwitch.y))))))) || false)))))))
    {
     if((false))
      barrier();
     barrier();
     if((false))
      barrier();
    }
   if((false))
    barrier();
   if((((injectionSwitch.x > (max(injectionSwitch.y, injectionSwitch.y))))))
    barrier();
   if(((((! (! (((false ? (injectionSwitch) : injectionSwitch)).x > injectionSwitch.y)))))))
    {
     if((((((false) || ((injectionSwitch.x > injectionSwitch.y)))) || false)))
      barrier();
     barrier();
    }
   barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if((((! (! ((injectionSwitch.x > injectionSwitch.y)))))))
  barrier();
 if((false))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if((false))
  barrier();
 if((false))
  {
   if(((((mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((false))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
  }
 if((((bool(bool((injectionSwitch.x > (float((mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (((transpose((transpose(transpose(transpose(((false ? (mat3(- 123.002, - 9.4, 8.1, 397.712, - 249.744, - 709.275, 6.7, 0.8, 5.7)) : ((false ? (mat3(- 1.2, - 80.52, 3.9, - 751.359, - 6384.4479, 75.27, 12.23, - 99.25, - 2.7)) : mat3(mat3x4(mat3(injectionSwitch.y, ((max(clamp((mix(float((max(sqrt(0.0), sqrt(0.0)))), float(((clamp(- 4.1, - 4.1, - 4.1)))), bool(false))), sqrt(0.0), sqrt(0.0)), clamp((mix(float((max(sqrt(0.0), sqrt(0.0)))), float(((clamp(- 4.1, - 4.1, - 4.1)))), bool(false))), sqrt(0.0), sqrt(0.0))))), (min((max((float(mat4x3(tan(0.0), 0.0, 0.0, (dot(vec3(0.0, 0.0, 1.0), vec3(0.0, (1.0 * (0.0)), 1.0))), 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0))), tan(0.0))), (max((float(mat4x3(tan(0.0), 0.0, 0.0, (dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0))), 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0))), tan(0.0))))), 0.0, 0.0, 0.0, ((true ? log(sqrt(1.0)) : (max((- 2927.9802), (- 2927.9802))))), 1.0, 1.0)))))))))))))))))))))))))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   barrier();
   if((false))
    barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(((bool(((! ((true && (! (bool(bvec4((false || (bool(false))), false, false, ((injectionSwitch.x > (mat2(1.0) * (injectionSwitch)).y))))))))))))))
  barrier();
 if(((((((bool((bvec2(bvec2(bvec2(injectionSwitch.x > ((injectionSwitch.y) / 1.0), false))))))))) || false)))
  {
   if((((true && ((false))) || false)))
    barrier();
   if(((true && ((((injectionSwitch.x > injectionSwitch.y)) || (false))))))
    barrier();
   if((false))
    {
     if((((false)) && true))
      barrier();
     if((((false) && true)))
      {
       if((false))
        barrier();
       if((false))
        barrier();
       barrier();
      }
     if((false))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(((! (! (false)))))
  {
   if(((! ((bool(bvec4(! (false), true, false, false)))))))
    barrier();
   barrier();
  }
 if((((bool(bvec2((((injectionSwitch.x > injectionSwitch.y))), false)))) || false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y)) || ((bool((bvec2(bvec4(bvec2((false), false), true, false))))))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 uint num_workgroup = (~ (~ ((~ (~ ((min((uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups)), (uvec3(((0u) | (0u)), 0u, 0u) ^ (gl_NumWorkGroups))))))).x)));
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(((! (! (bool((bvec3(bvec4(bvec3(((! (! (! (! (((true && (false))))))))), false, false), false)))))))))
  barrier();
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_size = ((max(((true ? uvec3(0u, 0u, 0u) : (uvec3(153570u, 125150u, 135612u)))) ^ (((((gl_WorkGroupSize) | (gl_WorkGroupSize))) / uvec3(1u, 1u, 1u))), ((true ? uvec3(0u, 0u, 0u) : (uvec3(153570u, 125150u, 135612u)))) ^ (((((gl_WorkGroupSize) | (gl_WorkGroupSize))) / uvec3(1u, 1u, 1u)))))).x;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_id = (((uvec3((clamp(uvec3(uvec3((injectionSwitch.x), (injectionSwitch.x), (injectionSwitch.x)) | (clamp((uvec3(uvec4(((gl_WorkGroupID) ^ uvec3(0u, 0u, 0u)), uint((injectionSwitch.y))))), (uvec3(0u, 0u, 0u) | ((~ (~ ((uvec3(gl_WorkGroupID[0], gl_WorkGroupID[1], gl_WorkGroupID[2]))))))), (max(gl_WorkGroupID, ((gl_WorkGroupID) << uvec3(0u, 0u, 0u))))))), uvec3(uvec3((injectionSwitch.x), (injectionSwitch.x), (injectionSwitch.x)) | (clamp((uvec3(uvec4(((gl_WorkGroupID) ^ uvec3(0u, 0u, 0u)), uint((injectionSwitch.y))))), (uvec3(0u, 0u, 0u) | ((~ (~ ((uvec3(gl_WorkGroupID[0], gl_WorkGroupID[1], gl_WorkGroupID[2]))))))), (max(gl_WorkGroupID, ((gl_WorkGroupID) << uvec3(0u, 0u, 0u))))))), uvec3(uvec3((injectionSwitch.x), (injectionSwitch.x), (injectionSwitch.x)) | (clamp((uvec3(uvec4(((gl_WorkGroupID) ^ uvec3(0u, 0u, 0u)), uint((injectionSwitch.y))))), (uvec3(0u, 0u, 0u) | ((~ (~ ((uvec3(gl_WorkGroupID[0], gl_WorkGroupID[1], gl_WorkGroupID[2]))))))), (max(gl_WorkGroupID, ((gl_WorkGroupID) << uvec3(0u, 0u, 0u))))))))))))).x;
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((((bool(bool((false))))) && true))
  {
   if((false))
    barrier();
   if((((((injectionSwitch.x > injectionSwitch.y)) || false))))
    barrier();
   if((false))
    barrier();
   barrier();
   if(((((! (! (injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
  }
 if((false))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   barrier();
  }
 uint workgroup_base = ((~ (~ ((0u ^ (~ (~ ((uint(uint(uint((uint(((uvec4(uint((((((((bool(bvec3((injectionSwitch.x < injectionSwitch.y), true, ((injectionSwitch.x < injectionSwitch.y)))))) ? ((workgroup_size) / (((((uint(uint(((true ? 1u : (subgroup_id))))))) << ((0u) | ((min((uint(uvec3(0u, 1u, 1u))), 0u)))))) | (1u))) : (subgroup_local_id))))) / 1u)), 0u, 1u, uint((injectionSwitch.y)))) | uvec4(0u, 0u, 0u, 0u)))))))))))))))) * workgroup_id;
 if(((((mix(float(((injectionSwitch.x) - 0.0)), float((94.63)), bool(false))) > (mix(float(injectionSwitch.y), float((- 777.969)), (! ((((! (! (! (bool(false))))) && true))))))))))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   barrier();
   if((false))
    barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint virtual_gid = workgroup_base + (((max(subgroup_id, subgroup_id))) ^ 0u) * subgroup_size + subgroup_local_id;
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint next_virtual_gid = workgroup_base + ((~ (~ ((((0u + (~ (~ (subgroup_id)))))) + 0u)))) * subgroup_size + ((subgroup_local_id + ((0 + (((0 ^ (((~ (~ (int(ivec3(((1) + 0), 0, 1))))) | (~ (~ (int(ivec3(((1) + 0), 0, 1))))))))))))) % subgroup_size);
 if((false || ((! (! (((((mix(float((clamp(((((injectionSwitch.x < injectionSwitch.y)) ? ((injectionSwitch.x) - 0.0) : (- 437.029))), ((injectionSwitch.x) - 0.0), ((injectionSwitch.x) - 0.0)))), float((- 8.5)), bool(false))) > injectionSwitch.y)))))))))
  barrier();
 buf[virtual_gid] = 1;
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((bool((true && ((bool(bvec3(bool((false)), false, false))))))))
    barrier();
   if((false))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   barrier();
   if((false))
    barrier();
   if((false))
    barrier();
  }
 (~ (~ (((buf[next_virtual_gid] = ((~ ((~ (~ (~ ((2) | 0)))))))) ^ 0u))));
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
