#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = (((((((max(gl_NumWorkGroups.x, (~ ((0u | (~ (uint((min(((uvec3((((uint(uvec4(((0u << (uint(4u))) ^ (((((((max(gl_NumWorkGroups.x, gl_NumWorkGroups.x))) | 0u) << uint((injectionSwitch.x))))))), 0u, 1u, 1u)))) >> (0u & 28954u)), 0u, 0u)) | (uvec3((((uint(uvec4(((0u << (uint(4u))) ^ (((((((max(gl_NumWorkGroups.x, gl_NumWorkGroups.x))) | 0u) << uint((injectionSwitch.x))))))), 0u, 1u, 1u)))) >> (0u & 28954u)), 0u, 0u))), uvec3(((((0u << (uint(4u))) << (0u << (uint(8u))))) ^ ((((false ? (subgroup_size) : (((false ? ((subgroup_size --)) : ((max(gl_NumWorkGroups.x, gl_NumWorkGroups.x))))) | 0u)))))), 0u, 0u))))))))))) >> (0u << (uint(7u)))))) >> 0u)) - 0u);
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = ((false ? (uvec3(171126u, 87609u, 191297u)) : gl_WorkGroupID)).x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = (~ (~ (workgroup_base + subgroup_id * ((((0u & 12092u) + (((((0u ^ (0u | 0u)))) | 0u))) & 28880u) ^ (((((~ (~ (((((true ? max((((uint((((float(vec3(((mix(float(float(mat4x2((injectionSwitch.x), determinant(mat3(0.0, 0.0, 1.0, tan(0.0), 0.0, 1.0, 0.0, 0.0, 0.0)), 0.0, 1.0, round(length(normalize(1.0))), (injectionSwitch.y), 1.0, 1.0))), float((- 831.892)), bool(false)))), 0.0, 0.0))) - 0.0))) ^ (subgroup_size))) | 0u), subgroup_size) : (workgroup_size)))))))) >> 0u)) ^ 0u))) + (min((uint(uvec3((clamp(((subgroup_local_id) | 0u), ((subgroup_local_id) | 0u), ((subgroup_local_id) | 0u))), 0u, 0u))), ((subgroup_local_id) | 0u))))));
 uint next_virtual_gid = ((((((~ ((0u + (((((~ (false ? ((((0u | (((((((((14576u) | (clamp(0u, (min(0u, 0u)), ((0u) | (((~ (~ (uint((injectionSwitch.x)))))) ^ 0u)))))) / 1u)) | ((~ (~ ((uint(uvec2((0u ^ (0u)), 1u))) ^ ((14576u)))))))) - 0u)))) << 0u)) : (false ? (atomicMax(subgroup_size, subgroup_local_id)) : workgroup_base + subgroup_id * (1u * (((subgroup_size) | (subgroup_size))))))) ^ 0u))) + (0u >> (uint(1u))))))) * 1u))))) + ((uint(uvec4((((((false ? (workgroup_size) : (~ (((~ (((((injectionSwitch.x > injectionSwitch.y)) ? (subgroup_size) : subgroup_local_id)) << (0u >> ((0u ^ (uint(8u))))))) - 0u))))))) + ((((((0 ^ ((1) ^ (min(0, (min(0, 0))))))) >> 0))) | (1))) % (((false ? ((min(subgroup_local_id, (((0u ^ (subgroup_local_id))) | (subgroup_local_id))))) : ((clamp(subgroup_size, ((0u ^ ((0u ^ (1u)))) * (((((subgroup_size)) | ((subgroup_size)))) | ((subgroup_size)))), ((subgroup_size) / 1u))) | (clamp(subgroup_size, ((0u ^ ((0u ^ (1u)))) * (((((subgroup_size)) | ((subgroup_size)))) | ((subgroup_size)))), ((subgroup_size) / 1u))))))), 1u, (0u << (((uint(5u))) ^ 0u)), (0u | (((((0u) - 0u)) | (0u))))))));
 buf[virtual_gid] = (~ (~ ((~ (~ (((max((int(ivec3((((1) * 1) / 1), 0, int((injectionSwitch.x))))), (1) * 1)))))))));
 buf[next_virtual_gid] = 2;
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
