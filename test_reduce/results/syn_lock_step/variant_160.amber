#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((false))
  return;
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = (clamp(((gl_NumWorkGroups) >> uvec3(0u, 0u, 0u)), gl_NumWorkGroups, gl_NumWorkGroups)).x;
 if(((((true && (((injectionSwitch.x > injectionSwitch.y))))) || false)))
  return;
 uint workgroup_size = (0u + ((((((((min(((uint((uvec3(uvec4(uvec3(((uint(uvec3(((gl_WorkGroupSize.x) | (((gl_WorkGroupSize.x) ^ 0u))), 1u, 1u)))), 1u, (0u | (1u))), 1u)))))), ((uint((uvec3(uvec4(uvec3((gl_WorkGroupSize.x), 1u, 1u), 1u)))))))) ^ 0u)) << ((1u * (1u)) * ((0u ^ (((min(0u, 0u)) & 47814u))))))) - (((uint((injectionSwitch.x))) ^ 0u) & ((true ? 99529u : (~ ((uint(uvec4(~ ((subgroup_size)), 0u, 0u, 1u))))))))) << (max(((0u ^ ((~ (~ (0u | ((((((min(0u, (min(0u, 0u))))) << 0u)) - 0u)))))))), 0u)))));
 uint workgroup_id = (clamp(gl_WorkGroupID, (min(gl_WorkGroupID, (min(gl_WorkGroupID, gl_WorkGroupID)))), (clamp((clamp(gl_WorkGroupID, ((true ? gl_WorkGroupID : (uvec3(73045u, 182572u, 151578u)))), ((gl_WorkGroupID) * uvec3(1u, 1u, 1u)))), gl_WorkGroupID, gl_WorkGroupID)))).x;
 uint workgroup_base = (uint(uvec3(((((((((((true ? ((clamp(((true ? uint(uvec4((uint(uvec2(workgroup_size, 1u))), 0u, 1u, 1u)) : (subgroup_size))), ((true ? uint(uvec4((uint(uvec2(workgroup_size, 1u))), 0u, 1u, 1u)) : (subgroup_size))), ((true ? uint(uvec4((uint(uvec2(workgroup_size, 1u))), 0u, 1u, 1u)) : (subgroup_size)))))) : (((subgroup_size)) ^ 0u))))) - ((0u) >> 0u))) / 1u) | (((uint((~ (~ (uint((workgroup_size)))))))) >> 0u)) * (uint((min(uint(workgroup_id), uint(workgroup_id)))))) | (((((((max((~ (~ ((((true ? (uint(uvec4((((uint(uvec2(workgroup_size, 1u))) + 0u)), 0u, 1u, 1u))) : (subgroup_size))))))), (~ (~ ((((true ? (uint(uvec4((((uint(uvec2(workgroup_size, 1u))) + 0u)), 0u, 1u, 1u))) : (subgroup_size)))))))))) * 1u) | (workgroup_size)) * workgroup_id)) + 0u)), (uint((((uvec3((injectionSwitch.x), (injectionSwitch.x), (injectionSwitch.x)) ^ (uvec3(uint((injectionSwitch.y)), 1u, (((~ (~ (((1u << (uint(2u))) >> (uint(2u))))))) | (((false ? (subgroup_id) : ((1u << (uint(2u))) >> ((0u & 145480u) | ((uint(2u))))))))))))) | (uvec3(uint((injectionSwitch.y)), 1u, (((~ (~ (((1u << (uint(2u))) >> (uint(2u))))))) | (((false ? (subgroup_id) : ((1u << (uint(2u))) >> ((0u & 145480u) | ((uint(2u)))))))))))))), (0u | 0u))));
 uint virtual_gid = workgroup_base + (((((((! (! (true))) ? (clamp(subgroup_id * subgroup_size, ((((uint((max(uvec2(uint(uvec4(subgroup_id * subgroup_size, 0u, 0u, 1u)), 0u), uvec2(uint(uvec4(subgroup_id * subgroup_size, 0u, 0u, 1u)), 0u))))))) | ((true ? ((true ? (0u << ((max(uint(5u), ((uint(5u)) / 1u))))) : ((~ subgroup_id)))) : ((workgroup_id --))))), (max(subgroup_id * subgroup_size, ((subgroup_id) * 1u) * subgroup_size)))) : (workgroup_base)) ^ 0u)) | (((((true ? ((true ? (clamp(subgroup_id * (~ (~ (((subgroup_size) | 0u)))), subgroup_id * subgroup_size, ((true ? (max(subgroup_id * (uint(uvec4(subgroup_size, 0u, (~ (~ (0u))), 0u))), ((subgroup_id * subgroup_size) | (subgroup_id * (~ (~ (subgroup_size))))))) : (163800u))))) : (workgroup_base)) ^ 0u) : (11177u)) << 0u))))))) + subgroup_local_id;
 uint next_virtual_gid = (~ (~ ((0u ^ (workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size))))));
 if((((false || (true && (false))))))
  return;
 ((0u | ((((((~ (~ ((false ? (workgroup_base) : (((((true ? (((false ? (subgroup_size) : ((buf[virtual_gid] = 1) << 0u)) >> 0u)) : (atomicExchange(workgroup_base, workgroup_size))))) >> 0u))))))) | (0u >> (uint(7u)))))))) >> 0u);
 if((false))
  return;
 buf[next_virtual_gid] = 2;
 if((! (! ((false)))))
  {
   if((false))
    return;
   return;
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
