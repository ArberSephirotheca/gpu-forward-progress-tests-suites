#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = ((((~ (((~ ((gl_WorkGroupSize) / uvec3((clamp(1u, 1u, (clamp(1u, 1u, 1u)))), 1u, 1u))) | uvec3(0u, 0u, ((uint(uvec4(clamp(((0u << (uint(8u))) ^ (0u)), 0u, ((0u) * 1u)), 0u, 0u, 0u))))))))) ^ ((uvec3(((((clamp(float(vec3(((false ? (- 6.3) : (injectionSwitch.x))), 1.0, 1.0)), float(vec3(((false ? (- 6.3) : (injectionSwitch.x))), 1.0, 1.0)), float(vec3(((false ? (- 6.3) : (injectionSwitch.x))), 1.0, 1.0)))))) - 0.0), (((vec2(mat2(((clamp((vec2(injectionSwitch[0], injectionSwitch[1])), (vec2(injectionSwitch[0], injectionSwitch[1])), (vec2(injectionSwitch[((0) | 0)], injectionSwitch[1])))) * mat2(1.0)), (dot(vec4(0.0, 0.0, 1.0, (dot(vec4(0.0, 1.0, 0.0, 1.0), vec4(1.0, 0.0, 1.0, 0.0)))), vec4(0.0, 0.0, 1.0, 0.0))), 1.0)))).x), (mix(float(((6.3 / - 1.4))), float((injectionSwitch.x)), bool(true))))) + uvec3(0u, 0u, 0u)))).x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * ((workgroup_id) | (workgroup_id));
 uint virtual_gid = workgroup_base + subgroup_id * (max(((((injectionSwitch.x < injectionSwitch.y)) ? subgroup_size : (workgroup_id))), (clamp(subgroup_size, subgroup_size, (clamp(subgroup_size, subgroup_size, subgroup_size)))))) + ((subgroup_local_id) >> (0u >> (uint(8u))));
 uint next_virtual_gid = workgroup_base + (((1u * (subgroup_id)) * subgroup_size) | (((~ (~ ((false ? (virtual_gid) : subgroup_id))))) * subgroup_size)) + ((((((max((max((clamp((((((subgroup_local_id + (((int(ivec4(((1) << 0), 0, 0, 0))) >> 0))) >> 0u)) >> (~ (~ ((((0u ^ (0u)))) - (0u & 114979u)))))) % ((subgroup_size) * 1u), (((true ? ((((subgroup_local_id + (int(ivec4(((1) << 0), 0, 0, 0)))) >> 0u)) >> (~ (~ (((0u)) - (0u & 114979u))))) : (subgroup_size)))) % ((subgroup_size) * 1u), (((((((subgroup_local_id + (int(ivec4((((~ ((1 * (~ (1)))))) << 0), 0, 0, 0))))) << 0u) >> 0u)) >> ((((max(~ (~ (((0u)) - (0u & 114979u))), ~ (~ (((0u)) - (0u & 114979u)))))) - 0u)))) % ((subgroup_size) * 1u))), (clamp((((((subgroup_local_id + (int(ivec4(((1) << 0), 0, 0, 0)))) >> 0u)) >> (~ (~ (((0u)) - (clamp((~ (~ ((0u & 114979u)))), (0u & 114979u), (~ (~ ((0u & 114979u))))))))))) % ((subgroup_size) * 1u), (((((((((subgroup_local_id + (int(ivec4(((1) << 0), 0, 0, 0)))) ^ 0u)) | 0u)) >> 0u)) >> (~ (~ (((0u)) - (0u & 114979u)))))) % ((subgroup_size) * 1u), (((((subgroup_local_id + (int(ivec4(((1) << 0), (~ (~ ((clamp(0, 0, 0))))), 0, 0)))) >> 0u)) >> ((min((min(~ (~ (((0u)) - (0u & 114979u))), ~ (~ (((0u)) - (0u & 114979u))))), ~ (~ (((0u)) - (0u & 114979u)))))))) % ((subgroup_size) * (~ (1u * ((~ (1u)))))))))), (((((subgroup_local_id + (int(ivec4(((1) << 0), 0, 0, 0)))) >> 0u)) >> (~ (~ (((0u)) - (0u & 114979u)))))) % ((subgroup_size) * 1u))) | (max((max((clamp((min((((((subgroup_local_id + (int(ivec4(((1) << 0), 0, 0, 0)))) >> 0u)) >> (~ (~ (((0u)) - (0u & 114979u)))))) % ((subgroup_size) * 1u), (0u + ((((((subgroup_local_id + (int(ivec4(((1) << 0), 0, 0, 0)))) >> 0u)) >> (~ (~ (((0u)) - (0u & 114979u)))))) % ((subgroup_size) * 1u))))), (((((((subgroup_local_id + (int(ivec4(((1) << 0), 0, 0, 0)))) >> 0u) | ((subgroup_local_id + (int(ivec4(((1) << 0), 0, 0, 0)))) >> 0u)))) >> (~ (~ (((0u)) - (0u & 114979u)))))) % (((clamp(subgroup_size, subgroup_size, subgroup_size))) * 1u), ((((uint(uvec3((((uint(uvec4(subgroup_local_id, 1u, 1u, 1u))) + (int(ivec4(((((1) << 0) - int((injectionSwitch.x)))), 0, 0, 0)))) >> 0u), 1u, ((1u) << 0u))))) >> (~ (~ (((0u)) - (0u & 114979u)))))) % ((subgroup_size) * 1u))), (clamp((((((((((subgroup_local_id + (int(ivec4(((1) << 0), (~ (~ (0))), 0, 0)))) >> 0u))) / 1u) >> (~ (~ (((((0u)) - (0u & 114979u))) ^ 0u)))) / 1u))) % ((subgroup_size) * (uint(((uvec2((uint(uvec3(1u, 0u, 0u))), uint((injectionSwitch.y)))) | (((((uvec2((uint(uvec3(1u, 0u, 0u))), uint((injectionSwitch.y)))) | (uvec2((uint(uvec3(1u, 0u, 0u))), uint((injectionSwitch.y))))))) << uvec2(0u, 0u)))))), (((((subgroup_local_id + (int(ivec4(((1) << 0), 0, 0, 0)))) >> 0u)) >> (~ (((~ (((0u)) - (0u & 114979u))) << uint((injectionSwitch.x))))))) % ((subgroup_size) * 1u), ((((((clamp(subgroup_local_id + (int(ivec4(((1) << 0), 0, 0, 0))), subgroup_local_id + (int(ivec4(((1) << 0), 0, 0, (clamp(0, 0, 0))))), ((subgroup_local_id + (int(ivec4(((1) << 0), 0, 0, 0)))) | (((subgroup_local_id) >> uint((injectionSwitch.x))) + (int(ivec4(((1) << (~ (~ (0)))), 0, 0, 0)))))))) >> 0u)) >> (~ (~ (((0u)) - (((0u) >> 0u) & 114979u)))))) % (((~ (~ (subgroup_size)))) * 1u))))), ((((((((false ? (workgroup_base) : (subgroup_local_id + (int(ivec4(((1) << 0), 0, 0, 0)))))) >> ((false ? (workgroup_id) : 0u)))) >> (~ (~ (((0u)) - (max((((0u & 114979u)) << 0u), (0u & 114979u)))))))) % ((subgroup_size) * 1u)) * 1u))))) / 1u)));
 buf[virtual_gid] = 1;
 if((! (((true && ((((! (((! (! (true && ((((bool((true && ((((! (! (bool(bvec2(false || (((bool(injectionSwitch.x > (min(injectionSwitch.y, (mix(float(injectionSwitch.y), float((- 1997.9500)), bool(false))))))) || false)), false)))))))))))))))))))) && true) && true)))))))
  {
  }
 else
  {
   buf[next_virtual_gid] = (int((mix((float(mat3(float(((float(mat2(136.561, 0.0, 1.0, 1.0))))), 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, (dot(vec4(sqrt(1.0), 0.0, 1.0, 1.0), vec4(0.0, 1.0, ((0.0) - 0.0), 0.0))), 0.0))), float((injectionSwitch.x)), bool(true)))) ^ (((2) | (2))));
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
