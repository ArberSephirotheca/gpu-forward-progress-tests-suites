#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if(((injectionSwitch.x > injectionSwitch.y)))
  {
  }
 else
  {
   if((false))
    {
     do
      {
       if(((((((((bool((bvec2(bvec2(bvec2((injectionSwitch.x < injectionSwitch.y), (((((injectionSwitch.x > (min(injectionSwitch.y, injectionSwitch.y)))) || (injectionSwitch.x < injectionSwitch.y))))))))))) && (injectionSwitch.x > injectionSwitch.y)))) || (((mix(vec2((2.5), (- 8110.5991)), vec2(((max((mix(vec2((injectionSwitch)[0], (- 717.581)), vec2((float(168234u)), ((false ? (24.02) : (((injectionSwitch)[1]) - 0.0)))), bvec2((! (! (false))), true))), injectionSwitch)))[0], (max(((max((mix(vec2((injectionSwitch)[0], (- 717.581)), vec2((float(168234u)), ((false ? (24.02) : (((injectionSwitch)[1]) - 0.0)))), bvec2((! (! (false))), true))), injectionSwitch)))[1], ((max((mix(vec2((injectionSwitch)[0], (- 717.581)), vec2((float(168234u)), ((false ? (24.02) : (((injectionSwitch)[1]) - 0.0)))), bvec2((! (! (false))), true))), injectionSwitch)))[1]))), bvec2(true, true))).x > injectionSwitch.y))))))
        {
         do
          {
           if(((((mix(float((- 0.8)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y))))
            return;
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              barrier();
             continue;
            }
           do
            {
             barrier();
             if((false))
              break;
             if(((false || ((false || (((false) && true)))))))
              {
               if((! (! ((false)))))
                break;
               barrier();
              }
            }
           while((bool(bool(((injectionSwitch.x > injectionSwitch.y))))));
          }
         while(false);
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
      }
     while(false);
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
  }
 do
  {
   if(((false || (false))))
    barrier();
  }
 while(false);
 if(((bool(bvec3(((bool(bool((bool(bvec2(((bool(bvec4(((((((injectionSwitch.x > injectionSwitch.y)) ? (injectionSwitch) : injectionSwitch)).x > injectionSwitch.y)), false, false, false))) && true), false))))))), (false || (false)), false)))))
  barrier();
 for(int _injected_loop_counter = 0; (! (! (_injected_loop_counter < 1))); _injected_loop_counter ++)
  {
   if((! ((bool(bvec4(! ((! (! ((false))))), false, true, false))))))
    barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = (~ (((uvec3(0u, 0u, 0u) ^ ((((~ (gl_NumWorkGroups))) + uvec3((injectionSwitch.x), (injectionSwitch.x), (injectionSwitch.x))))) | (max((~ (gl_NumWorkGroups)), (~ (gl_NumWorkGroups))))))).x;
 if(((((min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
  {
   do
    {
     return;
    }
   while(false);
  }
 uint workgroup_size = ((((gl_WorkGroupSize) | ((uvec3(((uvec4(gl_WorkGroupSize, 1u)) ^ uvec4(0u, 0u, 0u, 0u))))))) | uvec3(0u, 0u, 0u)).x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 if((false))
  {
   if((false))
    {
     do
      {
       barrier();
      }
     while(((injectionSwitch.x > (vec2(injectionSwitch[0], injectionSwitch[1])).y)));
    }
   return;
  }
 if((false))
  {
   if((false))
    {
     if(((false || (false))))
      return;
     if((false))
      barrier();
     if((false))
      return;
     if(((false || ((true && (false))))))
      {
       for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
        {
         barrier();
        }
      }
     return;
    }
   do
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   while(((((false ? (vec2(4.5, - 8608.2923)) : injectionSwitch)).x > injectionSwitch.y)));
   return;
   if(((false || (false || ((((false)) || false))))))
    {
     if((false))
      return;
     barrier();
    }
  }
 do
  {
   if((false))
    continue;
   if((false))
    return;
  }
 while(false);
 if((false))
  barrier();
 uint virtual_gid = workgroup_base + (~ (~ (subgroup_id))) * subgroup_size + subgroup_local_id;
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     return;
    }
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   return;
  }
 if(((! (! (! (! (bool(bvec3((((! (((! (bool(bool(((injectionSwitch.x > injectionSwitch.y)))))) || false))))), ((injectionSwitch.x < injectionSwitch.y)), false)))))))))
  {
  }
 else
  {
   if(((! (! (false)))))
    barrier();
   do
    {
     if((false))
      {
       if((false))
        {
         if((false))
          return;
         barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(false)
          {
          }
         else
          {
           if((false))
            barrier();
          }
         return;
        }
       barrier();
      }
    }
   while(false);
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
  {
   if(((((! (! (((injectionSwitch.x > injectionSwitch.y)))))) || false)))
    {
     if((false))
      break;
     if(((((bool(bvec2(false, true))) && true))))
      barrier();
     return;
    }
   if((((((((bool(bvec4(((((injectionSwitch.x < injectionSwitch.y)) && (((true && (bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, true, true)))))))), true, false, false)))))) || ((injectionSwitch.x > injectionSwitch.y))) || (! (! (false))))))
    break;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     if((false))
      break;
     if(((! (! (false)))))
      barrier();
     if(((! (! (false)))))
      {
       if(false)
        {
        }
       else
        {
         if((false))
          barrier();
         barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
      }
     if(false)
      {
      }
     else
      {
       if((false))
        barrier();
       for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
        {
         barrier();
        }
      }
    }
   while(false);
  }
 uint next_virtual_gid = (~ ((uint((uvec2(0u, 0u) ^ (uvec2(((uint(uvec2(((true ? (clamp(0u, 0u, 0u)) : (((((((max((num_workgroup), (min((num_workgroup), (clamp((num_workgroup), (num_workgroup), (num_workgroup))))))) / 1u)) | (max((num_workgroup), (((min((num_workgroup), (clamp((num_workgroup), (num_workgroup), (num_workgroup))))) ^ 0u)))))) - 0u)))), 0u))) + (~ (((true ? workgroup_base + subgroup_id * subgroup_size : (max((subgroup_size), (((min(false ? (subgroup_local_id) : (((subgroup_size)) - (min(0u, 0u))), false ? (subgroup_local_id) : (((subgroup_size)) - 0u)))))))))))), ((((1u) ^ 0u)) << 0u)))))))) + (max((~ ((false ? (176243u) : (max((~ (((subgroup_local_id + 1) % subgroup_size))), (~ (((subgroup_local_id + 1) % subgroup_size)))))))), ((true ? (~ (~ (((subgroup_local_id + 1) % ((((subgroup_size) / (1u | 0u))) | 0u))))) : (mix(subgroup_size, subgroup_local_id, true))))));
 if(((! (((((injectionSwitch.x < injectionSwitch.y)) && (true)) && (bool(bvec3((! (bool((bvec3(bvec4(bvec3((false), false, false), false)))))), ((injectionSwitch.x < injectionSwitch.y)), true))))))))
  {
   for(int _injected_loop_counter = (0 >> (int(2))); _injected_loop_counter < 1; _injected_loop_counter ++)
    {
     return;
    }
  }
 for(int _injected_loop_counter = 1; (((false) && true) || (((! (! (bool(bvec2((! (! ((bool(bvec2(_injected_loop_counter > 0, true)))))), true)))))))); (((0 | (_injected_loop_counter --))) - int((injectionSwitch.x))))
  {
   buf[virtual_gid] = ((0 | 0) + (1));
  }
 if(((((bool((bvec2(bvec3(bvec2(((injectionSwitch.x > injectionSwitch.y)), false), true)))))) && true)))
  barrier();
 if((! (! (true && ((true))))))
  {
   if((false))
    barrier();
   if((false || ((false))))
    return;
  }
 else
  {
  }
 if((false))
  barrier();
 for(int _injected_loop_counter = ((0 ^ (clamp((0 << (int(7))), (0 << (int(7))), (0 << (int(7)))))) >> ((0 | (int((min(3, 3))))))); _injected_loop_counter < (0 ^ ((1 << (int(5))) >> (int(5)))); _injected_loop_counter ++)
  {
   if((false))
    {
     if((bool(bvec3(false, true, false))))
      {
      }
     else
      {
       barrier();
      }
    }
   if((false))
    return;
  }
 if(false)
  {
  }
 else
  {
   if((((false)) || false))
    barrier();
  }
 if((((injectionSwitch.x > (clamp(((true ? (mat2(1.0) * (injectionSwitch)) : (injectionSwitch))), ((true ? (mat2(1.0) * (injectionSwitch)) : (injectionSwitch))), (max(((true ? (mat2(1.0) * (injectionSwitch)) : (injectionSwitch))), (mix(vec2((((true ? (mat2(1.0) * (injectionSwitch)) : (injectionSwitch))))[0], (4.5)), vec2((- 0.2), (((true ? (mat2(1.0) * (injectionSwitch)) : (injectionSwitch))))[1]), bvec2(false, true))))))).y))))
  barrier();
 for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
  {
   for(int _injected_loop_counter = int((((((float((transpose(transpose(((true ? mat3((injectionSwitch.x), 0.0, 0.0, 1.0, 0.0, sqrt(0.0), 0.0, 1.0, 0.0) : (mat3(- 744.534, - 2.7, - 230.854, 118.999, 2472.1057, 9.2, (min(9.3, 9.3)), 848.479, 1962.2313)))))))))) * 1.0)) - determinant(mat2(0.0, 0.0, 1.0, 0.0)))); _injected_loop_counter < (1 & 1); _injected_loop_counter ++)
    {
     if(((! (! (! (! ((((((injectionSwitch.x > (clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))))) && true))))))))
      {
       if((false))
        barrier();
       if((true && ((false))))
        {
         if(((true && ((! (! (((injectionSwitch.x > injectionSwitch.y)))))))))
          barrier();
         for(int _injected_loop_counter = 0; ((false ? ((((~ (~ (59791)))) >> 0)) : _injected_loop_counter)) != (min((int(int(1))), (min(((1) ^ 0), 1)))); _injected_loop_counter ++)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           if(((((clamp((vec2(injectionSwitch[0], (float(mat4(injectionSwitch[1], 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0))))), injectionSwitch, injectionSwitch)).x > (mix(float(injectionSwitch.y), float((63.61)), bool(false)))))))
            continue;
           barrier();
           if((false))
            break;
           if(((bool(bvec2(false, true)))))
            {
             if((false))
              return;
             if((((vec2(injectionSwitch[0], injectionSwitch[1])).x < injectionSwitch.y)))
              {
               if((false))
                break;
               barrier();
              }
             else
              {
              }
             if((false))
              barrier();
            }
           if(((((! (! (true && (((((injectionSwitch.x < injectionSwitch.y)) && (((false) && true)))))))) || false))))
            barrier();
          }
        }
       return;
       if((false))
        barrier();
      }
     if(true)
      {
       if((false))
        barrier();
      }
     else
      {
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        continue;
       barrier();
      }
    }
  }
 if((false))
  {
   if((false))
    barrier();
   barrier();
   if((false))
    return;
  }
 do
  {
   do
    {
     buf[next_virtual_gid] = 2;
     if((false))
      barrier();
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
  }
 while(((bool(bvec2(false || (false), true)))));
 if(false)
  {
  }
 else
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         return;
        }
       else
        {
        }
      }
     return;
    }
  }
 if(true)
  {
   if((((bool(bool(true))) && (false))))
    {
     for(int _injected_loop_counter = (((~ (~ (0)))) << 0); _injected_loop_counter != 1; _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
        {
         return;
        }
      }
    }
  }
 else
  {
  }
 if((((! (((! ((injectionSwitch.x > injectionSwitch.y))) && true))))))
  {
   if(true)
    {
     barrier();
    }
   else
    {
    }
   if((false))
    return;
  }
 if(((false || (bool((bvec2(bvec2(bvec2((((false)) || false), false)))))))))
  {
   for(int _injected_loop_counter = int((injectionSwitch.x)); (! (! (_injected_loop_counter != 1))); _injected_loop_counter ++)
    {
     return;
    }
  }
 if((((true && ((injectionSwitch.x > injectionSwitch.y))))))
  return;
 if((false))
  barrier();
 if((false))
  {
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   do
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(false);
   for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
    {
     return;
    }
  }
 do
  {
   do
    {
     if(((! (! (false)))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(false)
          {
          }
         else
          {
           barrier();
          }
        }
       do
        {
         for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < ((true ? 1 : (- 31330))); _injected_loop_counter ++)
          {
           do
            {
             if((false))
              {
               if(true)
                {
                 if((((false) || false)))
                  return;
                }
               else
                {
                }
               return;
              }
             barrier();
            }
           while((((! (! ((((max((vec2(injectionSwitch[0], (clamp(((mix(((float((injectionSwitch[1]) / 1.0)) - (injectionSwitch.x)), float((467.129)), bool(false)))), injectionSwitch[1], injectionSwitch[1])))).x, injectionSwitch.x)) - 0.0)) > injectionSwitch.y))))));
          }
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(false)
          {
          }
         else
          {
           if((false))
            return;
           if((false))
            break;
          }
         barrier();
        }
      }
    }
   while(false);
  }
 while(false);
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
