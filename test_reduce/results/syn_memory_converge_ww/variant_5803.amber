#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(((true && ((((((abs(vec2(1.0, 1.0)) * (injectionSwitch)).x > (min(((((true ? injectionSwitch : (injectionSwitch)))) - log(vec2(1.0, 1.0))).y, (mix(float(injectionSwitch.y), float((mix(float((- 9.7)), float((((mix(float(- 48.12), float((8.0)), bool(false)))))), bool(((injectionSwitch.x > injectionSwitch.y)))))), bool(false)))))))) || false)))))
  barrier();
 uint workgroup_id = ((gl_WorkGroupID.x) * uint((injectionSwitch.y)));
 uint workgroup_base = workgroup_size * workgroup_id;
 uint subgroup_base = subgroup_id * subgroup_size;
 if((false))
  barrier();
 uint virtual_gid = workgroup_base + ((subgroup_base) | (subgroup_base)) + subgroup_local_id;
 atomicStore(write_val, uint((uint(uint(virtual_gid)))), (max(4, ((int(ivec4((4), 1, 1, 0))) + 0))), 64, 0);
 if((bool((bvec3(bvec3(bvec3((false || ((((injectionSwitch.x > injectionSwitch.y))))), ((injectionSwitch.x < injectionSwitch.y)), true)))))))
  barrier();
 uint read_val = atomicLoad(write_val, 4, 64, 0);
 buf[virtual_gid] = uint(subgroupAllEqual((min(read_val, (((((((injectionSwitch.x > injectionSwitch.y)) ? ((++ subgroup_local_id)) : uint(uvec4(read_val, 1u, 0u, 0u)))))) / uint((injectionSwitch.y)))))));
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
