#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = ((((((((gl_WorkGroupID) | (clamp((uvec3(0u, 0u, 0u) >> (uvec3(7u))), (uvec3(0u, 0u, 0u) >> (uvec3(7u))), (uvec3(0u, 0u, 0u) >> (uvec3(7u))))))) | uvec3(0u, 0u, 0u)))) + (((((uvec3(0u, 0u, 0u) | ((uvec3(87974u, 107685u, 87392u) & ((uvec3(0u, 0u, 0u)) ^ uvec3(0u, 0u, 0u)))))) >> uvec3(0u, 0u, 0u))) | ((uvec3((0u ^ (87974u)), 107685u, 87392u) & uvec3(0u, 0u, 0u))))) << uvec3(0u, (((clamp(uint(uint((clamp(uint(((uvec3(((0u) | (0u)), (0u | (((1u ^ uint((injectionSwitch.y))) ^ (0u)))), ((clamp((min((1u << (uint(2u))) >> (uint(2u)), (min((1u << (uint(2u))) >> (uint(2u)), (min((1u << (uint(2u))), (1u << (uint(2u))))) >> (uint(2u)))))), (1u << (uint(2u))) >> (uint(2u)), (1u << (uint(2u))) >> (uint(2u))))))) | uvec3(0u, 0u, 0u))), uint(((uvec3(((0u) | (0u)), 0u, ((1u << (uint(2u))) >> (uint(2u))))) | uvec3(0u, 0u, 0u))), uint(((uvec3(((0u) | (0u)), 0u, ((1u << (uint(2u))) >> (uint(2u))))) | uvec3(0u, 0u, 0u))))))), uint(uint((clamp(uint((max((uvec3(1u, 1u, 1u) * (((uvec3(((0u) | (0u)), 0u, ((1u << (uint(2u))) >> (uint(2u))))) | uvec3(0u, 0u, 0u)))), ((uvec3(((0u) | (0u)), 0u, ((1u << (uint(2u))) >> (uint(2u))))) | uvec3(0u, 0u, 0u))))), uint((((min(uvec3(((0u) | (0u)), 0u, ((1u << (uint((injectionSwitch.x)) | ((clamp((uint(2u)), (uint(2u)), (uint(2u))))))) >> (uint(2u)))), uvec3(((0u) | (0u)), 0u, ((1u << (uint(2u))) >> (uint(2u))))))) | uvec3(0u, 0u, 0u))), uint(((uvec3(((0u) | (0u)), 0u, ((1u << (uint(2u))) >> (uint(2u))))) | uvec3(0u, 0u, 0u))))))), uint(uint((clamp(uint(((uvec3(((0u) | (0u)), 0u, ((((((true ? ((((0u << (uint(6u))) | (1u << (uint(2u))))) | 0u) : (subgroup_local_id)))) * 1u)) >> (uint(2u))))) | (min(uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u))))), uint(((uvec3(((0u) | (0u)), 0u, ((1u << (uint(2u))) >> (uint(2u))))) | uvec3(0u, 0u, 0u))), uint(((uvec3(((0u) | (0u)), 0u, ((1u << ((((0u >> (uint(1u))) ^ ((uint(2u))))) >> 0u)) >> (uint(2u))))) | ((uvec3(0u, 0u, 0u)) << uvec3(0u, 0u, 0u)))))))))))), 0u)).x;
 uint workgroup_base = workgroup_size * workgroup_id;
 if((false))
  barrier();
 uint subgroup_base = (uint((((min(uvec4((clamp(subgroup_id, subgroup_id, subgroup_id)), 0u, (0u << (uint(1u))), 1u), uvec4((clamp(subgroup_id, subgroup_id, subgroup_id)), 0u, (0u << (uint(1u))), (clamp(1u, 1u, 1u)))))) - uvec4(0u, 0u, 0u, 0u)))) * subgroup_size;
 uint virtual_gid = (~ (((~ ((false ? ((subgroup_base + 55559u)) : (workgroup_base + subgroup_base)))) | (((~ (workgroup_base + subgroup_base)) | (~ ((max(workgroup_base, workgroup_base)) + subgroup_base))))))) + subgroup_local_id;
 atomicStore(write_val, uint(virtual_gid), 4, ((1 * (((~ (((~ (~ (~ (~ ((((0) - 0) | (((((~ ((((((0 ^ (((64)))) | 0)) | (((((true ? (((0 ^ ((((((64)) | 0)) >> 0)))) * 1) : (- 47718)))) | 0)))) | ((64))))) ^ 0))))))))) | ((0 ^ (~ (~ (~ (~ ((((0) - 0) | (((((~ ((((((0 ^ (((64)))) | 0)) | (((((true ? (((0 ^ ((((((64)) | 0)) >> 0)))) * 1) : (- 47718)))) | 0)))) | ((64))))) ^ 0)))))))))))))) - (((((clamp(0, 0, (clamp((~ (((~ (0)) ^ 0))), 0, (((~ (~ (0)))) | 0))))) | (0 & - 70874))) << 0)))))), 0);
 uint read_val = (((true && ((((false || ((false || (injectionSwitch.x < injectionSwitch.y)))))))) ? atomicLoad(write_val, 4, 64, 0) : (virtual_gid)));
 if((false))
  barrier();
 if((false))
  return;
 if((false))
  barrier();
 (~ (~ (buf[virtual_gid] = uint(subgroupAllEqual(read_val)))));
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
