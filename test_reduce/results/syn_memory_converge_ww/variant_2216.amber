#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

struct _GLF_struct_8 {
 int _f0;
 vec3 _f1;
 bool _f2;
 float _f3;
 mat4 _f4;
 uint _f5;
} ;

struct _GLF_struct_9 {
 _GLF_struct_8 _f0;
} ;

struct _GLF_struct_7 {
 mat4x3 _f0;
 uint workgroup_base;
} ;

struct _GLF_struct_5 {
 ivec3 _f0;
 float _f1;
 vec3 _f2;
 vec3 _f3;
 mat4x2 _f4;
} ;

struct _GLF_struct_4 {
 ivec3 _f0;
 uvec2 _f1;
} ;

struct _GLF_struct_6 {
 _GLF_struct_4 _f0;
 _GLF_struct_5 _f1;
} ;

struct _GLF_struct_2 {
 mat3x2 _f0;
 bvec4 _f1;
} ;

struct _GLF_struct_3 {
 _GLF_struct_2 _f0;
} ;

struct _GLF_struct_10 {
 _GLF_struct_3 _f0;
 _GLF_struct_6 _f1;
 _GLF_struct_7 _f2;
 _GLF_struct_9 _f3;
} ;

struct _GLF_struct_0 {
 ivec2 _f0;
 bvec4 _f1;
 uint subgroup_local_id;
} ;

struct _GLF_struct_1 {
 _GLF_struct_0 _f0;
} ;

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 _GLF_struct_1 _GLF_struct_replacement_1 = _GLF_struct_1(_GLF_struct_0(ivec2(1), bvec4((bool(bool(true)))), gl_SubgroupInvocationID));
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 if((bool(bvec4((false), false, true, true))))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 _GLF_struct_10 _GLF_struct_replacement_10 = _GLF_struct_10(_GLF_struct_3(_GLF_struct_2(mat3x2(1.0), bvec4(true))), _GLF_struct_6(_GLF_struct_4(ivec3(1), ((uvec2(1u)) * (((max((uvec2(uvec2(uvec2(1u, 1u)))), uvec2(1u, 1u))) << (uvec2(3u))) >> (((((uvec2(3u)) | (uvec2(3u))))) | ((((uvec2(3u)) | (uvec2(3u))))))))), _GLF_struct_5(ivec3((min(1, 1))), ((true ? 1.0 : (log(5.9)))), (vec3((mix(float((min(1.0, (max(1.0, 1.0))))), float((- 5655.2631)), bool(false))), 1.0, 1.0) * ((mix(vec3((4.4), (- 9263.5265), (8.3)), vec3((vec3(1.0))[0], ((min(((vec3(1.0))[1]), ((true ? ((vec3(1.0))[1]) : (- 12.63))))) * 1.0), (vec3(1.0))[2]), (bvec3(bvec3(bvec3(((injectionSwitch.x < injectionSwitch.y)), (((true && (true)) && (((false || (true))) || false))), true)))))))), vec3((min(((((false ? ((true ? (1.0 * ((- 612.499))) : (928.046))) : 1.0))) - ((round(length(normalize(1.0))) * ((((((0.0) / 1.0)) / 1.0) - abs(0.0)))))), 1.0))), mat4x2(1.0))), _GLF_struct_7(mat4x3(1.0), workgroup_size * workgroup_id), _GLF_struct_9(_GLF_struct_8(1, (clamp(vec3((max(((false ? ((mix(float((900.465)), float(((- 8.1) * 1.0)), bool(true)))) : 1.0)), 1.0))), vec3((max(1.0, 1.0))), vec3((max(1.0, 1.0))))), true, 1.0, mat4(1.0), (~ (~ (1u))))));
 uint subgroup_base = (clamp((min(subgroup_id, subgroup_id)), (((~ (((~ (((min((false ? (workgroup_size) : ~ (((0u ^ (~ (subgroup_id)))))), (((false ? (workgroup_size) : ~ (((0u ^ (~ (subgroup_id))))))) | ((false ? (workgroup_size) : ~ (((0u ^ (~ (subgroup_id)))))))))))))) | (((0u ^ (~ (subgroup_id)))))))) | (subgroup_id)), subgroup_id)) * subgroup_size;
 uint virtual_gid = _GLF_struct_replacement_10._f2.workgroup_base + subgroup_base + (((((0u | (~ ((0u ^ (~ (((~ (~ ((((true) && true) ? (_GLF_struct_replacement_1._f0.subgroup_local_id) : (((((((((true ? uint(508.527) : (0u ^ ((workgroup_size)))))) ^ 0u)) | ((((((clamp(true ? uint(508.527) : (workgroup_size), true ? uint(508.527) : (workgroup_size), true ? uint(508.527) : (workgroup_size)))))) ^ 0u)))) | ((0u | (((((((true ? uint(508.527) : (workgroup_size)))) ^ 0u)) | (((((true ? uint(508.527) : ((max(((((((workgroup_size)) << 0u)) / uint((injectionSwitch.y))) * 1u), ((((((workgroup_size)) | ((workgroup_size)))) << 0u)) / uint((injectionSwitch.y)))))))) ^ 0u)))))))))))))))))))) | ((0u | (max((~ ((0u ^ (~ (((~ (~ ((((true) && true) ? (_GLF_struct_replacement_1._f0.subgroup_local_id) : (((((((((true ? uint(508.527) : (0u ^ ((workgroup_size)))))) ^ 0u)) | (((((true ? uint(508.527) : (workgroup_size)))) ^ 0u)))) | ((0u | (((((((true ? uint(508.527) : (workgroup_size)))) ^ 0u)) | (((((true ? uint(508.527) : ((max(((((((((((workgroup_size)) << 0u)) | ((((workgroup_size)) << 0u)))) / (((1u & 1u) << (uint(6u))) >> (uint(6u))))) / uint((injectionSwitch.y))) * 1u), ((((workgroup_size)) << 0u)) / uint((injectionSwitch.y)))))))) ^ 0u)))))))))))))))))), (~ ((0u ^ (~ (((~ (~ ((((true) && true) ? (_GLF_struct_replacement_1._f0.subgroup_local_id) : (((((((((true ? uint(508.527) : (0u ^ ((workgroup_size)))))) ^ 0u)) | (((((true ? uint(508.527) : (workgroup_size)))) ^ 0u)))) | ((0u | (((((((true ? uint(508.527) : (workgroup_size)))) ^ 0u)) | (((((true ? uint(508.527) : ((max(((((((workgroup_size)) << 0u)) / uint((injectionSwitch.y))) * 1u), ((((workgroup_size)) << 0u)) / uint((injectionSwitch.y)))))))) ^ 0u)))))))))))))))))))))))) / 1u);
 atomicStore(write_val, (clamp(((uint(virtual_gid)) | (uint(virtual_gid))), (0u | ((~ (~ (((uint(((virtual_gid) | (((((injectionSwitch.x > injectionSwitch.y)) ? (write_val) : 1u ^ uint(((min(injectionSwitch.y, (clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))))))))))) | (uint(virtual_gid)))))))), uint(virtual_gid))), 4, 64, 0);
 uint read_val = ((((((false || (bool(bvec4(false, true, true, false)))))) && true) ? (_GLF_struct_replacement_1._f0.subgroup_local_id) : atomicLoad(write_val, (((clamp(4, 4, 4))) ^ 0), ((64) | (64)), 0)));
 (0u ^ ((((1u | 0u) + 0u)) * ((buf[virtual_gid] = uint(subgroupAllEqual(read_val))))));
 if((((((bool((((bool(bvec4(bool((bool(bvec3((! (! ((((injectionSwitch.x > (((max(((injectionSwitch.x > injectionSwitch.y)) ? (vec2(- 488.009, - 9834.4132)) : injectionSwitch, ((injectionSwitch.x > injectionSwitch.y)) ? (vec2(- 488.009, - 9834.4132)) : injectionSwitch)))).y))) || false))), false, true)))), false, false, true))) || false)))))) || (bool(bvec4(false, true, false, ((injectionSwitch.x < injectionSwitch.y))))))))
  barrier();
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
