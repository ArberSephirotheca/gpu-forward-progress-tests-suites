#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((((((bool((bvec3((bvec3(bvec4(bvec3(bvec3(((true && (injectionSwitch.x > injectionSwitch.y))), false, false)), true)))))))) || ((injectionSwitch.x > injectionSwitch.y))))))
  return;
 if((false))
  {
   if(((bool((bvec3(bvec4(bvec3(((bool(bvec3((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)), false)))), (! (! ((true && (true))))), (bool(bool(true)))), false)))))))
    return;
   if(((bool(bvec4((((vec2(vec2(injectionSwitch))).x > injectionSwitch.y)), true, true, true)))))
    return;
   return;
  }
 if((! (! ((! (! ((false))))))))
  {
   if((false))
    return;
   if((((true && ((injectionSwitch.x > injectionSwitch.y))))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if((((((((injectionSwitch.x > injectionSwitch.y)) ? (vec2(- 938.024, - 8.8)) : injectionSwitch)).x > (((((1.0 * (true ? (max(injectionSwitch.y, (mix(float((- 13.07)), float(injectionSwitch.y), bool(true))))) : (9066.2682)))))) - 0.0)))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
   if(((bool(bvec2(false, false)))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((((bool(bool((((injectionSwitch.x > injectionSwitch.y)) && true)))))))
  {
   if((false))
    return;
   return;
  }
 uint subgroup_id = gl_SubgroupID;
 if((false))
  return;
 if((((injectionSwitch.x > (clamp((mix(vec2((min(((((false ? (vec2(- 90.22, - 3082.0601)) : vec2(mat3x2((clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 1.0, cos(0.0), length(vec4((injectionSwitch.x), ((vec2((clamp((clamp(injectionSwitch[0], injectionSwitch[0], injectionSwitch[0])), injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1])).x), (injectionSwitch.x), (injectionSwitch.x))), 0.0))))))[0], ((true ? (clamp((injectionSwitch), (injectionSwitch), ((clamp(injectionSwitch, injectionSwitch, injectionSwitch)))))[0] : (mix(4.1, ((false ? (12.98) : - 514.208)), false)))))), (injectionSwitch)[1]), vec2((- 27.51), (- 4208.9173)), bvec2(((bool(bvec2((bool(bool(((vec2(injectionSwitch[0], ((injectionSwitch[1]) * 1.0))).x > injectionSwitch.y)))), false)))), false))), (mix(vec2((min((vec2(0.0, 0.0) + ((mix(vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), vec2((- 740.646), (- 867.438)), bvec2(false, false))))), (vec2((mix(float(0.0), float((- 201.491)), bool(false))), 0.0) + ((mix(vec2((min(((injectionSwitch)), ((injectionSwitch))))[0], ((((injectionSwitch))[1]) - 0.0)), vec2((- 740.646), (- 867.438)), bvec2(false, false)))))))[0], (clamp((injectionSwitch), (injectionSwitch), (injectionSwitch)))[(int(ivec2(1, 1)))]), vec2((- 27.51), (- 4208.9173)), bvec2((((vec2((min(injectionSwitch[0], injectionSwitch[0])), ((injectionSwitch[1]) * 1.0))).x > injectionSwitch.y)), false))), (mix(vec2((min((injectionSwitch)[0], (injectionSwitch)[0])), (injectionSwitch)[1]), vec2((- 27.51), (- 4208.9173)), (((bvec2(bvec2(bvec2(bvec4(bvec2(bvec4((bvec2((bvec2(bvec4(bvec2(bvec2((((vec2(injectionSwitch[0], ((injectionSwitch[1]) * 1.0))).x > injectionSwitch.y)), false)), false, false))))), true, (bool(bvec4(false, false, false, ((injectionSwitch.x > injectionSwitch.y))))))), true, true))))))))))).y))))
  {
   if(((((((true && (((injectionSwitch.x > ((true ? (max((float(vec2((mix(float(injectionSwitch.y), float((- 2.8)), bool(false))), (min((min((mix(float((mix(float((- 561.574)), float((- 7.4)), bool((! ((! (! ((true && (! ((! (! (true))))))))))))))), float(1.0), (! (! ((! (! (bool((bool(bool(true)))))))))))), (mix(float((mix(float((- 561.574)), float((- 7.4)), bool((! ((true && (! (true))))))))), float(1.0), bool((bool(bool((! (! (true))))))))))), (mix(float((mix(float((- 561.574)), float((- 7.4)), bool((! ((true && (! (true))))))))), float(1.0), bool((bool(bool(true))))))))))), injectionSwitch.y)) : (- 37.60))))) || false)))) && true))))
    {
     if((! (! ((bool(bvec4((false), false, true, false)))))))
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     return;
    }
   return;
  }
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((false))
  return;
 uint num_workgroup = ((gl_NumWorkGroups.x) | 0u);
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      return;
     return;
    }
   return;
  }
 if((false))
  return;
 uint workgroup_size = gl_WorkGroupSize.x;
 if((false))
  return;
 if((((! ((! (! (! (((((((bool(((bool(((false || (bool(bvec3(false, false, ((injectionSwitch.x > (min(injectionSwitch.y, injectionSwitch.y))))))))))) || false))) && true)))) && true)))))))) && true))
  return;
 if(((bool(bvec4(false, false, true, true)))))
  return;
 if((false))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 if((((((injectionSwitch.x > injectionSwitch.y))) || false)))
  {
   if((false))
    return;
   return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if((false))
  return;
 if((false))
  return;
 if(((((bool(bvec4((true) && true, ((injectionSwitch.x > injectionSwitch.y)), true, false)))) && (! (! ((((false) || false))))))))
  return;
 if((false))
  {
   if((false))
    return;
   return;
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = ((true ? (uint((max(uvec4((0u ^ ((0u | (((clamp((workgroup_base + ((((subgroup_id * subgroup_size) ^ 0u)) ^ ((0u | ((0u))) ^ 0u))), (workgroup_base + ((((subgroup_id * subgroup_size) ^ 0u)) ^ 0u)), (workgroup_base + ((~ (~ ((((subgroup_id * subgroup_size) ^ 0u))))) ^ 0u)))) + 0u))))) + ((subgroup_local_id) - 0u), 1u, (0u ^ 1u), 1u), uvec4((0u ^ ((0u | (((clamp((workgroup_base + (((~ ((0u | (~ (((((subgroup_id * subgroup_size) ^ 0u)) >> 0u))))))) ^ ((0u) ^ 0u))), (workgroup_base + ((((subgroup_id * (min(subgroup_size, subgroup_size))) ^ 0u)) ^ 0u)), (workgroup_base + ((((subgroup_id * subgroup_size) ^ 0u)) ^ 0u)))) + 0u))))) + ((subgroup_local_id) - 0u), 1u, (0u ^ 1u), 1u))))) : (num_workgroup)));
 if((false))
  {
   if(((! (! ((! (! (((injectionSwitch.x > injectionSwitch.y))))))))))
    {
     if(((true && (((false) || (! (! ((bool(bvec2(false, true)))))))))))
      return;
     return;
    }
   return;
  }
 if((false))
  return;
 uint next_virtual_gid = (clamp((min(((((injectionSwitch.x < injectionSwitch.y)) ? (0u + (workgroup_base)) : (bitfieldReverse(virtual_gid)))), (~ (~ (((workgroup_base) | ((((~ (~ ((~ (~ (workgroup_base))))))) << 0u)))))))) + (min((((uint(uint((max(subgroup_id * subgroup_size, subgroup_id * subgroup_size))))) / uint((injectionSwitch.y)))), subgroup_id * (max(subgroup_size, subgroup_size)))) + ((((subgroup_local_id + 1) % subgroup_size) << ((true ? (((uint(uvec3((min(0u, 0u)), 0u, (1u | 1u))))) / 1u) : ((uint(uvec2(workgroup_base, 0u)))))))), (min(((((injectionSwitch.x < injectionSwitch.y)) ? (0u + (workgroup_base)) : (bitfieldReverse(virtual_gid)))), (~ (~ (((workgroup_base) | (workgroup_base))))))) + (min((((uint(uint((max(subgroup_id * subgroup_size, subgroup_id * subgroup_size))))) / uint((injectionSwitch.y)))), subgroup_id * (max(subgroup_size, subgroup_size)))) + ((((subgroup_local_id + 1) % subgroup_size) << ((true ? (((uint(uvec3((min(0u, 0u)), 0u, (1u | 1u))))) / 1u) : ((((uint(uvec2(workgroup_base, 0u)))) ^ (0u << (uint(7u))))))))), (min(((((injectionSwitch.x < injectionSwitch.y)) ? (0u + (workgroup_base)) : (bitfieldReverse(virtual_gid)))), (~ (~ (((workgroup_base) | (workgroup_base))))))) + (min((((uint(uint((max((max(subgroup_id * subgroup_size, subgroup_id * subgroup_size)), (max(subgroup_id * subgroup_size, subgroup_id * subgroup_size))))))) / uint((injectionSwitch.y)))), subgroup_id * (max(subgroup_size, subgroup_size)))) + ((((subgroup_local_id + 1) % subgroup_size) << ((true ? (((uint(uvec3((min(0u, 0u)), 0u, (1u | 1u))))) / 1u) : ((uint((min(uvec2(workgroup_base, 0u), uvec2(workgroup_base, 0u))))))))))));
 if((false))
  return;
 buf[virtual_gid] = ((int(((ivec2(max(1, (clamp(((1) | (1)), 1, 1))), 1)) >> ivec2((((min(false ? (- 28723) : ((0) | ((int(ivec4(0, 0, 0, 1))))), ((false ? (- 28723) : ((0) | ((int(ivec4(0, 0, 0, 1)))))) | 0))))), 0)))));
 atomicStore(buf[next_virtual_gid], uint(2), (max(((((4) ^ 0)) | (((0 << (int(5)))) >> 0)), ((4) | 0))), 64, 0);
 if((false))
  return;
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
