#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = ((clamp(max((max(((((((true ? (min(gl_NumWorkGroups, gl_NumWorkGroups)) : (uvec3((~ ((0u | (~ (121600u))))), 5423u, 11602u)))) | uvec3(0u, 0u, 0u)))) >> uvec3(0u, 0u, 0u)).x, ((((((~ (~ (((uvec3(uvec4((uvec3(0u, 0u, 0u) ^ (true ? (min(gl_NumWorkGroups, gl_NumWorkGroups)) : (uvec3(121600u, 5423u, 11602u)))), 0u))) << uvec3(0u, 0u, 0u))))))))) >> uvec3(0u, 0u, 0u)).x)), gl_NumWorkGroups.x), max(((((true ? (min(gl_NumWorkGroups, gl_NumWorkGroups)) : (uvec3(121600u, 5423u, ((11602u) >> (((0u | 0u) ^ (1u ^ 1u))))))))) >> (max(uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u)))).x, ((gl_NumWorkGroups) >> (((min(uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u)))) + uvec3(0u, 0u, 0u))).x), (max((max(max((((((bool(bool((! (! (true)))))) ? (min(gl_NumWorkGroups, gl_NumWorkGroups)) : (uvec3(121600u, 5423u, 11602u))))) >> uvec3(0u, 0u, 0u)).x, gl_NumWorkGroups.x), max((((((bool(bvec3(((true) && true), false, true))) ? (min(gl_NumWorkGroups, gl_NumWorkGroups)) : (uvec3(121600u, 5423u, 11602u))))) >> uvec3(0u, 0u, 0u)).x, gl_NumWorkGroups.x))), (((max(max(((((true ? (min(gl_NumWorkGroups, gl_NumWorkGroups)) : (uvec3(121600u, 5423u, 11602u))))) >> uvec3(0u, 0u, 0u)).x, gl_NumWorkGroups.x), max(((((true ? (min(gl_NumWorkGroups, gl_NumWorkGroups)) : (((((uvec3(121600u, 5423u, 11602u))) << (uvec3(1u, 1u, 1u) ^ uvec3(1u, 1u, 1u)))) >> uvec3(0u, 0u, 0u))))) >> uvec3(0u, 0u, 0u)).x, gl_NumWorkGroups.x)))) << 0u))))));
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = (uint(((uvec3(gl_WorkGroupID.x, ((uint(uvec4((1u << (uint((~ (min((~ ((~ (~ ((max(4u, 4u))))))), (~ (~ ((~ ((~ (~ ((max(4u, 4u)))))))))))))))) >> (uint(((4u) >> ((uint((injectionSwitch.x))) - 0u)))), 0u, (0u & 40295u), 0u)))), 1u)) << uvec3(0u, 0u, 0u))));
 uint workgroup_base = (max(((workgroup_size * workgroup_id) | ((0u | (workgroup_size * workgroup_id)))), workgroup_size * workgroup_id));
 uint virtual_gid = ((workgroup_base + ((((((0u | (min(subgroup_id * subgroup_size, ((subgroup_id) / 1u) * subgroup_size)))) * 1u) >> 0u)))) << (0u >> (uint(4u)))) + subgroup_local_id;
 uint next_virtual_gid = (((~ ((uint(uvec4((uint(uvec2((max(((((0u >> (uint(7u))) ^ ((1u * (~ (workgroup_base))))))), ((((0u >> (uint(7u))) ^ ((1u * (~ (workgroup_base))))))))), 0u))), 0u, (0u >> (uint(8u))), 1u))) >> 0u)) ^ ((max((((0u)) | ((0u))), (0u))) ^ ((uint(uvec2((0u >> (uint(5u))) >> (uint(7u)), 0u))))))) + subgroup_id * subgroup_size + ((clamp(((((((uint(uint(subgroup_local_id + 1))) | 0u))) | 0u)), (((clamp((((subgroup_local_id + 1) | 0u)), (((subgroup_local_id + 1) | 0u)), (((subgroup_local_id + 1) | 0u)))) ^ 0u)), (((((injectionSwitch.x < injectionSwitch.y)) ? ((subgroup_local_id + 1) | 0u) : (subgroup_id)))))) % ((((((max(((0u ^ (((0u & (36544u)) | 0u)))), (0u & (36544u))))) | ((0u & (36544u)))) | (subgroup_size))) | 0u));
 buf[virtual_gid] = 1;
 atomicStore(buf[((next_virtual_gid) >> 0u)], uint(2), 4, 64, 0);
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
