#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((((true && ((false || ((! (! ((true && (((false || (true && (((((! (! ((bool(bool(bool(bool(((! (! (((true && (bool(bool((clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))))))))))))))) && (! (! ((! (! ((! (! (true))))))))))))))))))))))))))))
  return;
 if(((! ((bool(bvec4(! ((((((bool(bool(injectionSwitch.x > injectionSwitch.y))) || false))))), ((false) || false), true, true)))))))
  return;
 if((false))
  {
   if((false))
    return;
   return;
  }
 uvec3 GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_base;
 if((bool((bvec2(bvec4(bvec2(((false || (((injectionSwitch.x > injectionSwitch.y))))), false), true, false))))))
  {
   if((false))
    return;
   return;
  }
 if(((((injectionSwitch.x < injectionSwitch.y)) && (false))))
  return;
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if(((bool(bvec2(bool(bvec2((false), false)), false)))))
  return;
 GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_base.x = subgroup_size;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(((bool((bool(bvec2(bool(false), true)))))))
  return;
 uint num_workgroup = gl_NumWorkGroups.x;
 if((! ((((injectionSwitch.x < injectionSwitch.y)) && (! ((false)))))))
  {
   if((false))
    return;
   return;
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = ((((((gl_WorkGroupID.x) << (1u * ((0u ^ (0u))))) | (((1u << ((((max(uint(6u), ((uint(6u)) + 0u)))) | (uint(6u))))) >> ((min(uint(6u), uint(6u))))) * (0u))))) | (gl_WorkGroupID.x));
 uint workgroup_base = workgroup_size * workgroup_id;
 if((false))
  return;
 if((false))
  return;
 if((false))
  return;
 if(((((true && (injectionSwitch.x > injectionSwitch.y))))))
  return;
 GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_base.z = workgroup_base;
 if(((((max((vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)).x > injectionSwitch.y))))
  return;
 for(int _injected_loop_counter = 0; _injected_loop_counter < 1; ((((injectionSwitch.x > injectionSwitch.y)) ? (findMSB(_injected_loop_counter)) : ((1 * ((((_injected_loop_counter ++) - 0)) / 1))))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    break;
   if((((injectionSwitch.x > injectionSwitch.y))))
    continue;
   if((false))
    {
     if(((((clamp(injectionSwitch.x, ((injectionSwitch.x) - determinant(mat2(0.0, 1.0, 0.0, 0.0))), injectionSwitch.x)) > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
       if((false))
        return;
       break;
      }
     return;
    }
   if((((false) || false)))
    {
     if((false))
      continue;
     return;
    }
  }
 uint virtual_gid = GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_base.z + ((subgroup_id * GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_base.x) | ((clamp(subgroup_id * ((GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_base) | uvec3(0u, 0u, 0u)).x, (clamp(subgroup_id * GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_base.x, subgroup_id * GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_base.x, subgroup_id * GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_base.x)), subgroup_id * GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_base.x)))) + subgroup_local_id;
 if((false))
  return;
 GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_base.y = virtual_gid;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    {
     if((((((((injectionSwitch.x > injectionSwitch.y))) && true)) && true)))
      return;
     return;
    }
   return;
  }
 if((((((false || (((min((clamp((vec2((min((mix(float(injectionSwitch[0]), float((- 3962.8680)), bool(false))), injectionSwitch[0])), injectionSwitch[1])).x, injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y)))))) && (! (! (true)))))
  {
   if((false))
    return;
   return;
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if((((injectionSwitch.x > ((vec2(mat4((mat2(1.0) * (mat2(1.0) * (injectionSwitch))), 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, determinant(mat4(0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)), ((tan(0.0)) + 0.0), 1.0, 1.0, 0.0, 0.0)))).y))))
  {
   if(((bool(bvec4(false, false, true, false)))))
    return;
   return;
  }
 uint next_virtual_gid = ((((1u << (uint(2u))) >> (uint(2u))) * ((((((((0u | ((max((((GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_base.z) ^ 0u) | (((max((((max(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_base, GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_base))) - uvec3(0u, 0u, 0u)), GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_base)).z) ^ 0u)), (((GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_base.z) ^ 0u) | ((((GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_base.z) << 0u)) ^ 0u)))))))) | 0u) + ((max(~ (~ (subgroup_id)), ~ (~ (subgroup_id))))) * GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_base.x + ((subgroup_local_id + 1) % GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_base.x)) >> uint(((max(injectionSwitch.x, injectionSwitch.x)))))) | (((((((0u | ((max((((GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_base.z) ^ 0u) | ((GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_base.z) ^ 0u)), (((GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_base.z) ^ 0u) | ((GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_base.z) ^ 0u)))))))) | 0u) + ((max(~ (~ (subgroup_id)), (clamp(((~ (~ (subgroup_id))) / uint((injectionSwitch.y))), ~ (~ (subgroup_id)), (clamp(~ (~ (subgroup_id)), ~ (~ (subgroup_id)), ~ (~ (subgroup_id))))))))) * GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_base.x + ((subgroup_local_id + 1) % GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_base.x)) >> uint((injectionSwitch.x)))))));
 buf[GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_base.y] = (max(1, 1));
 if((false))
  return;
 atomicStore(buf[next_virtual_gid], uint(2), 4, 64, (0 + (0)));
 if(((((! (! (injectionSwitch.x > injectionSwitch.y)))))))
  return;
 if((! (! (! ((((bool(bool(((injectionSwitch.x < injectionSwitch.y))))) && (((! (((bool(((bvec2(bvec3(bvec2(bvec2(bvec2(((! (((! ((injectionSwitch.x > injectionSwitch.y))) || false)))), (bool(bvec4((bool(bvec2(true, true))), false, true, false)))))), true))))))))) || false)))))))))
  return;
 if(((true && (false))))
  return;
 if(((((true && (injectionSwitch.x > injectionSwitch.y))))))
  return;
 if((false))
  return;
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
