#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((bool(bvec2(((! (! (false)))), ((injectionSwitch.x > (vec2(injectionSwitch[0], injectionSwitch[1])).y))))))
  {
   if((false))
    barrier();
   if((((((injectionSwitch.x > injectionSwitch.y) && true)))))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((((true && ((! (! (! (! ((((true && (false))) || false)))))))))))
  barrier();
 if(((! (! ((true && ((((min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)))))))))
  barrier();
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if(((((((0.0 + ((max(injectionSwitch.x, (mix(vec2((9.0), (8.0)), (clamp(vec2((((((injectionSwitch) - vec2(0.0, 0.0))) - sin(vec2(0.0, 0.0))))[0], (((max((((injectionSwitch) - vec2(0.0, 0.0))) - sin(vec2(0.0, 0.0)), (min((((injectionSwitch) - vec2(0.0, 0.0))) - sin(vec2(0.0, 0.0)), (((injectionSwitch) - vec2(0.0, 0.0))) - sin(vec2(0.0, 0.0))))))))[1]), vec2((((((injectionSwitch) - vec2(0.0, 0.0))) - sin(vec2(0.0, 0.0))))[0], (((max((((injectionSwitch) - vec2(0.0, 0.0))) - sin(vec2(0.0, 0.0)), (min((((injectionSwitch) - vec2(0.0, 0.0))) - sin(vec2(0.0, 0.0)), (((injectionSwitch) - vec2(0.0, 0.0))) - sin(vec2(0.0, 0.0))))))))[1]), vec2((((((injectionSwitch) - vec2(0.0, 0.0))) - sin(vec2(0.0, 0.0))))[0], (((max((((injectionSwitch) - vec2(0.0, 0.0))) - sin(vec2(0.0, 0.0)), (min((((injectionSwitch) - vec2(0.0, 0.0))) - sin(vec2(0.0, 0.0)), (((injectionSwitch) - vec2(0.0, 0.0))) - sin(vec2(0.0, 0.0))))))))[1]))), bvec2(true, true))).x)))) > injectionSwitch.y) || false)))))
  {
   if((false))
    barrier();
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((((((false || (bool(bvec4((bool(bvec4((! (! (injectionSwitch.x > injectionSwitch.y))), false, (true && (false)), true))), true, ((injectionSwitch.x > injectionSwitch.y)), true)))))))))
  {
   if((bool(bvec4(((((((max((mix(vec2((234.964), (((((clamp((injectionSwitch)[1], (((injectionSwitch)[1]) + 0.0), (0.0 + ((max(((min((max(((false ? (804.791) : ((injectionSwitch)[1]))), ((injectionSwitch)[1]))), (clamp(((injectionSwitch)[1]), ((injectionSwitch)[1]), ((injectionSwitch)[1]))))) - 0.0), (injectionSwitch)[1]))))))) / 1.0)) + (injectionSwitch.x))), ((true ? vec2((injectionSwitch)[0], (- 9.2)) : (injectionSwitch))), bvec2(true, false))), injectionSwitch)).x > (mix(vec2((1.7), (- 5.8)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y) || ((injectionSwitch.x > injectionSwitch.y)))))), true, (false || (true)), (((! ((! (! (! ((bool(bool(((((bool(bvec3(! (! (bool(bvec2(((((! ((! (! (! (injectionSwitch.x < injectionSwitch.y)))))))) && true), true)))), true, false))) && true))))))))))))))))))
    {
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     if((false))
      barrier();
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(((! ((false || (((false || ((! ((true && (((injectionSwitch.x > (min(injectionSwitch, injectionSwitch)).y)))))))) || false)))))))
        barrier();
       if((false))
        barrier();
       barrier();
       if(((! ((bool(bvec2(((((! (! ((! (false)) || false))))) || false), true)))))))
        barrier();
      }
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      {
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
       if((((((false || (bool(bool((true && (injectionSwitch.x > injectionSwitch.y)))))))))))
        barrier();
       barrier();
      }
    }
   if(((bool(bvec2(((false) || false), true)))))
    {
     if(((true && ((((false || (((injectionSwitch.x > injectionSwitch.y))))) || false)))))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((false))
  barrier();
 if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
  {
   if((false))
    barrier();
   barrier();
  }
 if((bool(bvec2((false), true))))
  barrier();
 if((false))
  {
   if((((false) || false)))
    barrier();
   barrier();
   if((false))
    barrier();
   if((false))
    {
     if(((((vec2(((false ? (747.980) : injectionSwitch[0])), injectionSwitch[1])).x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 if((false))
  barrier();
 if((((false) && true)))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if((false))
  {
   if(((((((((! (! (false)))) || (((false || (injectionSwitch.x > injectionSwitch.y))))))) || false)) && true))
    {
     if((false))
      barrier();
     if((((false) && (false || (true)))))
      barrier();
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     barrier();
     if((false))
      barrier();
    }
   if((false))
    barrier();
   barrier();
   if(((! (! (false)))))
    barrier();
   if((false))
    {
     if(((! (! (((((false || (((bool(bool(((injectionSwitch.x > injectionSwitch.y))))) || false))))) && true))))))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if((false))
  {
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if((! (((! ((false)))) || false)))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((((true && (! (! (! ((! (false))))))))))
  {
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(((bool(bvec4(((bool(bool(bool(bvec3(((! (! (bool(bvec3((((! (! ((bool(bvec2(false, false))))))) && true), false, false)))))), false, false)))))), (bool(bool(false))), false, false)))))
  {
   if(((! ((((bool(bvec3(! (false), false, true))) || false))))))
    barrier();
   barrier();
  }
 if((false))
  {
   if((false))
    barrier();
   if((((((injectionSwitch.x > injectionSwitch.y))) && true)))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     if((false))
      barrier();
     if((false))
      barrier();
     if((false))
      barrier();
     if((! (! ((! (! ((false))))))))
      barrier();
     barrier();
     if((false))
      barrier();
    }
   if((false))
    barrier();
   if(((bool(bvec4(false, true, false, (true && (false)))))))
    barrier();
   barrier();
   if(((((0.0 + (injectionSwitch.x)) > injectionSwitch.y))))
    barrier();
   if((false || ((bool(bvec4((false), false, false, true))))))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   if((false))
    barrier();
  }
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((bool(bvec4((false), ((injectionSwitch.x < (((mat2(1.0) * (injectionSwitch)) * mat2(1.0))).y)), true, false))))
  barrier();
 if((false))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 if(((((((! (! (((injectionSwitch.x < injectionSwitch.y)) && ((((injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y))))))) && true))))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 if((false))
  barrier();
 if(((bool(bool((bool(bvec3(false, ((injectionSwitch.x < injectionSwitch.y)), false))))))))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = ((0u + (uint(((min((clamp(0u ^ (uint((((false || (false)) ? (subgroup_id) : workgroup_size)))), 0u ^ (uint((((false || (false)) ? (subgroup_id) : workgroup_size)))), 0u ^ (uint((((false || (false)) ? (subgroup_id) : workgroup_size)))))), 0u ^ (uint((((false || (false)) ? (subgroup_id) : workgroup_size))))))))))) * workgroup_id;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((((injectionSwitch.x > (float(vec2(injectionSwitch.y, 0.0)))))))
  barrier();
 if((false))
  barrier();
 uint virtual_gid = (max(workgroup_base + (clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size)), workgroup_base + subgroup_id * (((((clamp(subgroup_size, subgroup_size, subgroup_size))) >> ((0u | 0u) << (uint(5u))))) ^ 0u))) + subgroup_local_id;
 if(((! ((bool(bvec2((! (! (((! (((! (true)) && true))) && (! ((true && (! (((true && (! (((injectionSwitch.x > injectionSwitch.y))))))))))))))), true)))))))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   barrier();
   if((false))
    barrier();
   if((false))
    barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((bool(bvec4((false), true, false, ((injectionSwitch.x > (mix(float(injectionSwitch.y), float((44.77)), bool(false)))))))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint next_virtual_gid = (1u * (workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + (((clamp(1, 1, 1))) << 0)) % subgroup_size)));
 if(((((! (! (injectionSwitch.x > injectionSwitch.y)))))))
  barrier();
 if(((! (((! (! ((! (false)))))) && ((injectionSwitch.x < injectionSwitch.y))))))
  barrier();
 if(((! (! ((bool(bvec2(false, true))))))))
  barrier();
 if((false || ((false))))
  barrier();
 if((false))
  {
   if((((((true && (bool(bool(false || ((false)))))))) || false)))
    barrier();
   if(((! (! ((bool((bvec2((bvec2(bvec2(bvec2(bvec2(false, true))))))))))))))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   barrier();
  }
 (((~ (~ (1u * (((~ (~ (~ ((((~ (~ (~ (~ (((~ ((0u + (buf[virtual_gid] = (max(((false ? (- 10602) : 1)), 1)))))) << 0u)))))))))))))))))) | 0u);
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   if(((((vec2((min(injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1])).x > (clamp(injectionSwitch, (vec2(mat2x3(injectionSwitch, 0.0, ((float(vec3(float(mat4x3(0.0, 0.0, (((1.0 * (tan(length(((true ? ((true ? 0.0 : (3877.5184))) : (0.7)))))))) / 1.0), 0.0, 0.0, abs(1.0), (min((max(1.0, (mix(float((((1.0 * (float(float((((((true ? min(- 147.276, (float(mat3x4(- 147.276, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, (((mix(float(1.0), float(((float(false) * - 85.06))), bool(false))) - (dot(vec2(1.0, 0.0), vec2(0.0, 1.0))))), 1.0, 1.0)))) : (- 71.09)))) - 0.0))))))))), float(1.0), bool(true))))), 1.0)), (mix(float((9179.2579)), float(0.0), bool(true))), tan(0.0), (injectionSwitch.x), log(((((((injectionSwitch.x < injectionSwitch.y)) && ((((bool(bvec4((true) || false, false, false, false))) && true))))) ? 1.0 : (sin(5.4))))), 1.0)), (mix(float(1.0), float(((19.09 * 4.2))), bool(false))), 1.0)))), 0.0, 1.0))), injectionSwitch)).y))))
    barrier();
   if((false))
    barrier();
   barrier();
   if(((! (! (false)))))
    barrier();
   if((false))
    {
     if((bool((bvec2(bvec2(bvec2((false), false)))))))
      barrier();
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if((false))
    barrier();
  }
 if((false))
  barrier();
 if(((((false || (bool(bvec3(((true && (false || ((false))))), false, false)))) && true))))
  {
   if((false))
    barrier();
   if((((injectionSwitch.x > ((false ? (injectionSwitch) : injectionSwitch)).y))))
    barrier();
   if(((bool((bool(bvec4(bool((false || (((((false) || false)) && true)))), true, (bool(bvec3(true, true, true))), true)))))))
    barrier();
   if((false))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   barrier();
   if((false))
    barrier();
  }
 atomicStore(buf[next_virtual_gid], (((~ (~ (((0u) - ((0u) | (0u))) + ((((clamp(max((((((~ (~ (uint(2))))) * 1u))), (((((~ (~ (((uint(2))) / 1u)))) * (min((clamp(1u, 1u, 1u)), (uint(uint(1u))))))))), max((((((~ (~ (uint(2))))) * 1u))), (((((~ (~ (((uint(2))) / 1u)))) * (min((clamp(1u, 1u, 1u)), (uint(uint(1u))))))))), max((((((~ (~ (uint(2))))) * 1u))), (((((~ (~ (((uint(2))) / 1u)))) * (min((clamp(1u, 1u, 1u)), (uint(uint(1u)))))))))))) << (0u << (uint(5u)))))))) | (~ (((clamp((((~ (0u + ((((((max(((~ (~ (uint(2)))) | 0u), ((true ? ~ (~ (uint(2))) : (atomicOr(subgroup_id, workgroup_base)))))))) * 1u))))) << 0u)), (((false ? (virtual_gid) : ((uint(uvec2((~ (0u + (((((~ (~ (uint(2))))) * 1u))))), 0u))) / 1u)))), (max((~ (0u + (((((0u ^ ((~ (~ (uint((uvec4(0u, 0u, 0u, 0u) ^ (uvec4((uint(2)), (0u >> (uint(5u))), 1u, 0u)))))))))) * 1u))))), (uint(uvec3((~ (0u + (((((0u ^ ((~ (~ (uint((uvec4(0u, 0u, 0u, 0u) ^ (uvec4((uint(2)), (0u >> (uint(5u))), 1u, 0u)))))))))) * 1u))))), 1u, 1u)))))))) << 0u)))), 4, 64, ((((0) - 0)) >> 0));
 if((((false)) || false))
  {
   if(((! ((bool(bool(! (false))))))))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     barrier();
     if((false))
      barrier();
    }
   if((((((injectionSwitch.x > injectionSwitch.y)))) && true))
    barrier();
   if((false))
    barrier();
   barrier();
   if((false))
    barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((bool((bvec3(bvec4((bvec3(bvec4(bvec3(false || (false), false, false), true))), true))))))))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if(((true && ((false || ((bool(bvec3((! (! ((bool(bvec3(false, true, true)))))), false, false)))))))))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   barrier();
  }
 if((((false) || false)))
  {
   if((false || ((false))))
    barrier();
   barrier();
  }
 if((((false)) || false))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   if((((((injectionSwitch.x > injectionSwitch.y) || false)))))
    barrier();
   if((false || ((((((injectionSwitch.x) + 0.0) > (0.0 + ((mix(float((2084.3535)), float(injectionSwitch.y), bool(true)))))))))))
    {
     if(((true && (false))))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(((! (! ((((true && (((false)) && true))))))) || false))
    {
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
     if(((true && (((false)))) && true))
      {
       if((false))
        barrier();
       barrier();
      }
     if((false))
      barrier();
     barrier();
     if((false))
      barrier();
    }
   if((((injectionSwitch.x > ((false ? (1.1) : injectionSwitch.y))))))
    barrier();
   if((false))
    barrier();
   if((bool(bvec4(((bool((bvec2(bvec2(bvec2((! (! (false))), false))))))), true, false, ((false) || false)))))
    barrier();
   barrier();
  }
 if((((((injectionSwitch.x > injectionSwitch.y)) || false))))
  barrier();
 if((bool((! (! (((((! (! (true && (bool((((injectionSwitch.x > (clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))))))))) && true))))))))
  barrier();
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
