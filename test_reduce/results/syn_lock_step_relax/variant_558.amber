#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if((false))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((false))
  return;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = (~ (~ (gl_WorkGroupSize))).x;
 if((false))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 if((! (! (false || ((true && ((! (! (((! (((((false || (((injectionSwitch.x < injectionSwitch.y)) && (! ((false || (((true && ((((((0.0 + (injectionSwitch.x)) > ((min((min(vec2(injectionSwitch[0], (clamp(injectionSwitch[1], injectionSwitch[(int(int(1)))], injectionSwitch[1]))), vec2(injectionSwitch[0], injectionSwitch[1]))), (min(vec2(injectionSwitch[0], (clamp(injectionSwitch[1], injectionSwitch[1], injectionSwitch[1]))), vec2(injectionSwitch[0], injectionSwitch[1])))))).y))) || false)))))))))))) && true))))))))))))))
  {
   if((false))
    {
     if((false))
      {
       if((false))
        return;
       return;
      }
     if((((injectionSwitch.x > (min(injectionSwitch, injectionSwitch)).y))))
      return;
     return;
    }
   if((false))
    {
     if(((((! (! (injectionSwitch.x > injectionSwitch.y)))))))
      return;
     if(((((bool(bvec3(false, true, false))) && true))))
      {
       if((false))
        return;
       return;
      }
     return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if(true)
    {
     return;
     if((! (! ((false || ((! (! ((false))))))))))
      return;
    }
   else
    {
     if(((true && (false))))
      return;
    }
  }
 if((false))
  return;
 uint workgroup_base = workgroup_size * (~ (~ (((((workgroup_id) | (workgroup_id))) / 1u))));
 if(((bool(bvec4(false, false, true, false)))))
  return;
 uint virtual_gid = workgroup_base + ((0u | ((~ (~ ((~ (~ (0u | (subgroup_id * subgroup_size)))))))))) + subgroup_local_id;
 uint next_virtual_gid = (((uint(uvec4(workgroup_base + ((0u | (min(subgroup_id * subgroup_size, subgroup_id * subgroup_size)))) + ((0u | ((0u ^ ((max(((((true ? (max((min((subgroup_local_id + 1), (subgroup_local_id + 1))), (subgroup_local_id + 1))) : (subgroup_size)))) | (0u << (uint(0u)))) % subgroup_size, ((true ? (subgroup_local_id + 1) : (subgroup_size))) % subgroup_size))))))), 1u, 1u, 0u)))) | (((workgroup_base + subgroup_id * subgroup_size + (((true ? (subgroup_local_id + 1) : (subgroup_size))) % subgroup_size)) | (workgroup_base + subgroup_id * subgroup_size + (((1u * (uint(uvec3((1u * ((0u ^ (((((true ? (subgroup_local_id + (max(((1) / 1), ((((true ? 1 : (- 10342)))) | 0)))) : (((subgroup_size)) << (1u ^ 1u))) | 0u))) % subgroup_size)))), 0u, 0u))))))))));
 if((((true && ((! ((bool(bool((! (((! (! (true))) && true))))))))))) && true))
  {
   if((false))
    return;
   buf[virtual_gid] = 1;
  }
 else
  {
   if((false))
    return;
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 atomicStore(buf[next_virtual_gid], uint((clamp(2, ((false ? (- 8600) : 2)), 2))), 4, 64, 0);
 if((false))
  return;
 if((false))
  return;
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
