#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((((bool(bvec2(injectionSwitch.x > (vec2(injectionSwitch[0], injectionSwitch[1])).y, true))))))
  {
  }
 else
  {
   if(((((min((mix(vec2((20.03), (7.1)), vec2((injectionSwitch)[0], (((false ? (vec2(8967.6506, - 881.850)) : injectionSwitch)))[1]), bvec2(true, true))), (mix(vec2((- 557.520), (((- 33.90)) - 0.0)), vec2((min((injectionSwitch), (injectionSwitch)))[0], (injectionSwitch)[1]), bvec2(true, true))))).x > injectionSwitch.y))))
    {
     do
      {
       return;
       if((! (! ((false)))))
        break;
      }
     while(((bool(bvec2(((bool(bvec4((((max(injectionSwitch.x, injectionSwitch.x)) > (1.0 * (injectionSwitch.y)))), false, ((injectionSwitch.x > injectionSwitch.y)), false))) || false), false)))));
    }
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = ((gl_WorkGroupSize) - uvec3(0u, 0u, 0u)).x;
 uint workgroup_id = (~ (((~ ((((~ ((((~ (~ (~ (gl_WorkGroupID.x))))) / 1u))) / 1u))))) | 0u));
 uint workgroup_base = ((workgroup_size) / uint((injectionSwitch.y))) * workgroup_id;
 uint virtual_gid = ((((((((! ((false || (! (! (! (true)))))))) ? (clamp(((false ? (uaddCarry(subgroup_size, subgroup_size, workgroup_id)) : workgroup_base)) + subgroup_id * subgroup_size, ((workgroup_base) << 0u) + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size)) : (subgroup_local_id)) ^ 0u)) | 0u))) + subgroup_local_id;
 uint next_virtual_gid = (uint(uvec4((min(workgroup_base + subgroup_id * subgroup_size + ((((max((((subgroup_local_id + ((1) + 0))) | ((subgroup_local_id + ((1) + 0)))), (((subgroup_local_id) >> uint((injectionSwitch.x))) + 1))) % subgroup_size)) << 0u), workgroup_base + subgroup_id * subgroup_size + ((((max((((subgroup_local_id + ((1) + 0))) | ((subgroup_local_id + ((1) + 0)))), (((subgroup_local_id) >> uint((injectionSwitch.x))) + 1))) % subgroup_size)) << 0u))), 1u, 1u, 1u)));
 (((true ? ((((((((injectionSwitch.x > (determinant(mat4(1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)) * ((clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))))) ? (subgroup_local_id) : (true ? true ? ((buf[virtual_gid] = (min((clamp(1, 1, 1)), (min((int((((~ (~ (((int((((clamp((clamp(1, ((1) ^ 0), 1)), (clamp(1, 1, 1)), (clamp(1, 1, 1))))) >> 0))) / 1))))) + 0))), (clamp(1, 1, 1))))))) << 0u) : (atomicCompSwap(num_workgroup, workgroup_size, subgroup_id)) : (packUnorm2x16(vec2(- 1.7, - 6.5)))))))) + 0u)) : (workgroup_size))));
 atomicStore(buf[next_virtual_gid], (max(uint(2), uint(2))), 4, 64, (0 | (0)));
 do
  {
   if((((injectionSwitch.x > ((mix(vec2((((min(injectionSwitch, (clamp(injectionSwitch, injectionSwitch, injectionSwitch))))) * cos(vec2(0.0, 0.0)))[0], (((min(injectionSwitch, (clamp(injectionSwitch, injectionSwitch, injectionSwitch))))) * cos(vec2(0.0, 0.0)))[1]), vec2((269.493), (- 4.0)), bvec2(false, false)))).y))))
    return;
  }
 while(false);
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
