#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = (~ (~ ((((injectionSwitch.x > (clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y)) ? (uvec3(130403u, 28275u, (clamp(183917u, 183917u, 183917u)))) : (gl_NumWorkGroups))))).x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = (((min(((min(uvec3((clamp(uvec4(((gl_WorkGroupID)) << uvec3(0u, 0u, 0u), ((((((uint((clamp((injectionSwitch.y), (mix(float((95.12)), float((injectionSwitch.y)), bool(true))), (injectionSwitch.y))))) ^ 0u)) - (0u | 0u))) | (uint((clamp((injectionSwitch.y), (mix(float((95.12)), float((injectionSwitch.y)), bool(true))), (injectionSwitch.y))))))), uvec4(((gl_WorkGroupID)) << uvec3(0u, 0u, 0u), uint((injectionSwitch.y))), uvec4(((gl_WorkGroupID)) << uvec3(0u, 0u, 0u), uint((injectionSwitch.y)))))), uvec3((clamp(uvec4((clamp(((gl_WorkGroupID)) << uvec3(0u, 0u, 0u), (uvec3(uvec3(((gl_WorkGroupID)) << uvec3(0u, 0u, 0u)))), ((gl_WorkGroupID)) << uvec3(0u, 0u, 0u))), uint((injectionSwitch.y))), uvec4(((gl_WorkGroupID)) << uvec3(0u, 0u, 0u), uint((injectionSwitch.y))), (~ ((((min(~ (uvec4(((gl_WorkGroupID)) << ((uvec3(0u, 0u, 0u)) | ((uvec3(0u, 0u, 0u) | (uvec3(0u, 0u, 0u))))), uint((injectionSwitch.y)))), ~ (uvec4(((gl_WorkGroupID)) << uvec3(0u, 0u, 0u), uint((injectionSwitch.y))))))) << ((uvec4(0u, 0u, 0u, 0u) | (uvec4(0u, 0u, 0u, 0u) >> (uvec4(3u)))))))))))))), (uvec3(uvec4(((min(uvec3((clamp(uvec4(((gl_WorkGroupID)) << uvec3(0u, 0u, 0u), uint((injectionSwitch.y))), uvec4(((gl_WorkGroupID)) << uvec3(0u, 0u, 0u), uint((injectionSwitch.y))), ((false ? (uvec4(190514u, 163682u, 150027u, 54645u)) : (min(uvec4(((((min(clamp(((gl_WorkGroupID)), ((true ? ((gl_WorkGroupID)) : (uvec3(69611u, 113862u, 192832u)))), (max(((gl_WorkGroupID)), ((false ? (uvec3(178115u, 161827u, 2271u)) : ((gl_WorkGroupID))))))), (min(clamp(((gl_WorkGroupID)), ((true ? ((gl_WorkGroupID)) : (uvec3(69611u, 113862u, 192832u)))), (max(((gl_WorkGroupID)), ((false ? (uvec3(178115u, 161827u, 2271u)) : ((gl_WorkGroupID))))))), clamp(((gl_WorkGroupID)), ((true ? ((gl_WorkGroupID)) : (uvec3(69611u, 113862u, 192832u)))), (max(((gl_WorkGroupID)), ((false ? (uvec3(178115u, 161827u, 2271u)) : ((gl_WorkGroupID)))))))))))) ^ uvec3(0u, 0u, 0u))) << uvec3(0u, 0u, 0u), uint((injectionSwitch.y))), uvec4(((((min(clamp(((gl_WorkGroupID)), ((true ? ((gl_WorkGroupID)) : (uvec3(69611u, 113862u, 192832u)))), (max(((gl_WorkGroupID)), ((false ? (uvec3(178115u, 161827u, 2271u)) : ((gl_WorkGroupID))))))), (min(clamp(((gl_WorkGroupID)), ((true ? ((gl_WorkGroupID)) : (uvec3(69611u, 113862u, 192832u)))), (max(((gl_WorkGroupID)), ((false ? (uvec3(178115u, 161827u, 2271u)) : ((gl_WorkGroupID))))))), clamp(((gl_WorkGroupID)), ((true ? ((gl_WorkGroupID)) : (uvec3(69611u, 113862u, 192832u)))), (max(((gl_WorkGroupID)), ((false ? (uvec3(178115u, 161827u, 2271u)) : ((gl_WorkGroupID)))))))))))) ^ uvec3(0u, 0u, 0u))) << uvec3(0u, 0u, 0u), uint((injectionSwitch.y)))))))))), uvec3((clamp(uvec4(((gl_WorkGroupID)) << uvec3(0u, 0u, 0u), uint((injectionSwitch.y))), uvec4((max((uvec3(uvec4(((gl_WorkGroupID)), 0u))), ((gl_WorkGroupID)))) << uvec3(0u, 0u, (0u + (0u))), uint((injectionSwitch.y))), uvec4(((gl_WorkGroupID)) << uvec3(0u, 0u, 0u), uint(((clamp((vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch, injectionSwitch)).y))))))))), 1u)))))) * uvec3(1u, (uint(uvec3(1u, 0u, 1u))), 1u)).x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = ((((((injectionSwitch.x > injectionSwitch.y)) ? (0u ^ ((atomicXor(workgroup_size, workgroup_base)))) : ((((workgroup_base)) | 0u) ^ 0u)))) / 1u) + ((((((((uint(uvec2((((! (((! (((false)) && true)) || false))) ? (((((workgroup_id) | 0u))) >> (0u << (((clamp(0u | (uint(6u)), (clamp(0u | (uint(6u)), 0u | (((uint(6u)) / 1u)), 0u | (uint(6u)))), (min(0u | (uint(6u)), 0u | (uint(6u)))))))))) : (subgroup_id))), 1u)))) | 0u) << 0u)) | 0u) * ((0u << (uint(6u))) + ((max(subgroup_size, subgroup_size))))) | (((((uint((injectionSwitch.x)) | ((((((uint(uvec2((((! (! (false))) ? ((((0u | (((true ? ((workgroup_id)) >> (0u << ((0u | (uint(6u))))) : (workgroup_base))))))) / 1u) : (subgroup_id))), 1u)))) | 0u) << 0u)) >> uint((injectionSwitch.x)))))) | 0u) * subgroup_size)) + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + (clamp((((0u ^ (subgroup_id))) - (max(0u, 0u))), subgroup_id, subgroup_id)) * (min(subgroup_size, (~ ((min(~ (subgroup_size), ~ (subgroup_size))))))) + (0u | (((max((((subgroup_local_id + 1) % (~ (~ (((subgroup_size) ^ 0u))))) * 1u), (((subgroup_local_id + 1)) << 0u) % subgroup_size)))));
 do
  {
   buf[virtual_gid] = 1;
  }
 while(false);
 atomicStore(buf[next_virtual_gid], uint(((2) | (2))), 4, ((0 + ((64))) + 0), 0);
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
