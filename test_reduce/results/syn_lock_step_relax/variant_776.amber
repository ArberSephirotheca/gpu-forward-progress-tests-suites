#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((false))
  return;
 if((false))
  return;
 if((false))
  barrier();
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    return;
   barrier();
   if((false))
    barrier();
  }
 if((false))
  barrier();
 if((false))
  return;
 if((false))
  {
   if((((injectionSwitch.x > (clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
    barrier();
   return;
  }
 uvec2 GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size;
 if((false))
  {
   if((false))
    {
     if((false))
      return;
     barrier();
    }
   if(((((! (! (((injectionSwitch.x > injectionSwitch.y)))))) && (((injectionSwitch.x < injectionSwitch.y)) && (true)))))
    barrier();
   if((false))
    {
     if((false))
      return;
     barrier();
    }
   if((false))
    {
     if((false))
      {
       if((false || ((false))))
        barrier();
       barrier();
      }
     barrier();
    }
   if(((((((false || (false)) ? (injectionSwitch) : injectionSwitch)).x > injectionSwitch.y))))
    barrier();
   barrier();
   if((false))
    barrier();
   if((false))
    barrier();
  }
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  return;
 if(((((bool(bvec4(bool((false || (bool(((bool(bvec4(((((injectionSwitch.x > injectionSwitch.y) && true))), false, true, false))) && true))))), false, false, false)))))))
  {
   if((false))
    return;
   if((bool(bvec4((false), false, ((((injectionSwitch.x) * 1.0) < injectionSwitch.y)), true))))
    barrier();
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if((false))
  {
   if(((((clamp(injectionSwitch.x, (min(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y))))
    return;
   barrier();
  }
 if(((((clamp(injectionSwitch, ((true ? injectionSwitch : (injectionSwitch))), injectionSwitch)).x > (clamp((min(injectionSwitch.y, ((injectionSwitch) * mat2((((min(float((mat4x2(mat4(mat4x2((1.0 * (((injectionSwitch.y) / 1.0))), 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0))))), float((mat4x2(mat4(mat4x2((1.0 * (((injectionSwitch.y) / 1.0))), 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0))))))))))).y)), injectionSwitch.y, (mix(((float((5.3))) + log(1.0)), float(injectionSwitch.y), bool(true)))))))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    barrier();
   if((((false) && ((injectionSwitch.x < injectionSwitch.y)))))
    barrier();
   if((((((((((injectionSwitch.x > injectionSwitch.y) || false)) && true)) || false)))))
    return;
   if((false))
    {
     if((false))
      barrier();
     return;
    }
   barrier();
  }
 if((((false)) && true))
  barrier();
 if((false))
  {
   if((((((injectionSwitch.x) / 1.0) > injectionSwitch.y))))
    return;
   return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  return;
 if((false))
  barrier();
 if((false))
  return;
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if(((bool(bvec3(false, false, true)))))
  {
   if((false))
    barrier();
   barrier();
  }
 GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.x = subgroup_size;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if((false))
    {
     if((false))
      return;
     return;
    }
   barrier();
   if((false))
    return;
   if(((true && (((injectionSwitch.x > ((true ? (mix(float(injectionSwitch.y), float((4.8)), bool(false))) : (- 66.04)))))))))
    barrier();
  }
 if((false))
  return;
 if((((((injectionSwitch.x > (clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y)) || false))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(((((bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, true, false)))))))
      barrier();
     if((false))
      return;
     barrier();
    }
   return;
  }
 if((false))
  {
   if((false))
    {
     if(((true && (false))))
      return;
     barrier();
    }
   if((false))
    {
     if(((bool(bool(false)))))
      barrier();
     if((false))
      return;
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     if((((injectionSwitch.x > (((min(injectionSwitch, injectionSwitch)).y) / abs(1.0))))))
      barrier();
     if((false))
      {
       if(((((mix(float((vec3(1.2, - 1719.8447, - 9.1).t)), float(injectionSwitch.x), bool(true))) > (determinant(mat2(log(1.0), 1.0, 0.0, 0.0)) + ((float(mat3x2((((max(injectionSwitch.y, injectionSwitch.y))) / 1.0), 1.0, round(length(normalize(vec2(1.0, 1.0)))), sqrt(1.0), 1.0, 0.0)))))))))
        {
         if(((! (! (false)))))
          return;
         return;
        }
       return;
       if(((((bool(bvec2(false, true)))) || false)))
        return;
      }
     if((false || ((((injectionSwitch.x > injectionSwitch.y))))))
      {
       if((false))
        barrier();
       return;
      }
     if((((! (! ((bool((bvec3((bvec3(bvec3(bvec3(bvec3(((((bool(bool(((injectionSwitch.x > injectionSwitch.y)) || (false || (((injectionSwitch.x > injectionSwitch.y))))))) && true))), false, true)))))))))))))))
      barrier();
     barrier();
     if((false))
      barrier();
    }
   return;
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((bool(bvec2((false), false))))
  barrier();
 if((false))
  {
   if((false))
    return;
   if((false))
    barrier();
   barrier();
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 if((false))
  return;
 if((false))
  barrier();
 if((! (! ((true && ((false || ((! (! (((! (! ((((bool(bvec3(false, false, false))))))))) && true)))))))))))
  {
   if(((! (! ((bool(bvec2(! ((! (((injectionSwitch.x > injectionSwitch.y))))), true))))))))
    barrier();
   return;
  }
 GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.y = workgroup_size;
 if((false))
  barrier();
 if((false))
  {
   if((false))
    return;
   barrier();
  }
 if((false))
  {
   if((((false)) || false))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   return;
  }
 if((((bool(bvec4((injectionSwitch.x > (max((clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)).y), true, false, ((injectionSwitch.x > injectionSwitch.y))))))))
  barrier();
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   return;
  }
 if((false))
  return;
 uint workgroup_id = ((true ? gl_WorkGroupID.x : (num_workgroup)));
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    {
     if((false))
      return;
     if((false))
      {
       if((false))
        barrier();
       return;
      }
     if((false))
      barrier();
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   barrier();
   if((! (! (((((max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)))))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     barrier();
    }
   if((false))
    return;
   if((false))
    barrier();
  }
 if((false))
  return;
 if((false))
  {
   if((false))
    barrier();
   if((bool(bvec3((false), false, false))))
    barrier();
   if((bool((bvec3(bvec3((bvec3(bvec4(bvec3((((injectionSwitch.x > injectionSwitch.y))), false, true), true)))))))))
    barrier();
   barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if((false))
  return;
 uint workgroup_base = (max((uvec2(((true ? uvec2((max((max(GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size, GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size)), (~ (~ (GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size)))))) : (uvec2(199360u, 115195u)))))), ((((false ? (GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size) : ((((GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size) | ((uvec2(((0u) / ((1u) | (1u))), (min(0u, 0u)))) | (uvec2(((0u) / ((1u) | (1u))), (min(0u, 0u))))))) >> (uvec2(0u, 0u) >> (uvec2(6u)))))) ^ uvec2(0u, 0u))))).y * (min(workgroup_id, (((uint((injectionSwitch.x)) + (((injectionSwitch.x > injectionSwitch.y)) ? (subgroup_local_id) : workgroup_id))))));
 if((false))
  return;
 if((((((injectionSwitch.x > injectionSwitch.y))) || false)))
  barrier();
 if((false))
  barrier();
 if((false))
  return;
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  {
   if((false))
    {
     if((false))
      return;
     return;
     if((false))
      barrier();
    }
   return;
  }
 if((false))
  return;
 if((bool((bvec3((bvec3(bvec4((bvec3(bvec4((bvec3(bvec3(bvec3(bvec3((false), true, false))))), false))), false))))))))
  {
   if((bool(bvec4((false), true, false, true))))
    return;
   if((false))
    barrier();
   barrier();
  }
 if((false))
  return;
 if((false))
  {
   if((false))
    barrier();
   return;
  }
 if((false))
  return;
 if((((! (! ((false))))) || false))
  return;
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((! (! ((injectionSwitch.x > injectionSwitch.y)))))))
    return;
   barrier();
  }
 if((false))
  barrier();
 if((false))
  {
   if((false))
    {
     if((false))
      return;
     if(((((max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
      return;
     if(((! (! (false)))))
      barrier();
     return;
    }
   barrier();
   if((((false)) || (((mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2((- 1784.9865), (- 9.7)), bvec2(((injectionSwitch.x > injectionSwitch.y)), ((injectionSwitch.x > injectionSwitch.y))))).x > injectionSwitch.y))))
    barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  barrier();
 if((((false) || false)))
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((((((injectionSwitch.x > injectionSwitch.y)))) && true))
      barrier();
     if((false))
      return;
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if((((injectionSwitch.x > ((mix(vec2(((false ? ((injectionSwitch - 2.1)) : ((injectionSwitch) + vec2(0.0, 0.0))))[0], ((false ? ((injectionSwitch - 2.1)) : ((injectionSwitch) + vec2(0.0, 0.0))))[1]), vec2((739.768), (- 194.867)), bvec2(false, false)))).y))))
  barrier();
 uint virtual_gid = (~ (((~ (workgroup_base + subgroup_id * ((max((uint(uvec4(~ (~ (GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.x)), 0u, 1u, 1u))), ~ (~ (GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.x))))))) << 0u))) + ((subgroup_local_id) | ((uint(uvec2(subgroup_local_id, 1u)))));
 if((false))
  barrier();
 if(((bool(bvec4(false, (bool(bvec4(false, (bool(bvec4((((mix(vec2((8.4), (4174.2860)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(((injectionSwitch.x < injectionSwitch.y)), true))).x > injectionSwitch.y)), true, true, true))), true, true))), true, true)))))
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   return;
   if((((((injectionSwitch.x > injectionSwitch.y))) || ((injectionSwitch.x > injectionSwitch.y)))))
    {
     if((((true && ((((injectionSwitch.x > injectionSwitch.y)) && true))))))
      barrier();
     return;
    }
  }
 if(((((true && (((false) || false)))) && ((injectionSwitch.x < injectionSwitch.y)))))
  {
   if((false))
    barrier();
   if((false))
    {
     if((bool(bvec4((((injectionSwitch.x > injectionSwitch.y))), false, true, ((injectionSwitch.x < injectionSwitch.y))))))
      return;
     if((false))
      return;
     if(((! ((true && (! (((bool((true && (bool((injectionSwitch.x > (max((float(mat2x4((max(((mix(float((8.1)), float(float(mat4x2((min(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, 1.0, 1.0, ((true ? tan((dot(vec2(0.0, ((1.0) / 1.0)), vec2(1.0, 0.0)))) : (16.03))), determinant(mat4(0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, log(1.0), 0.0, 0.0, tan(0.0), 0.0, 0.0, 0.0, 0.0)), 0.0))), bool(true)))), ((mix(float((8.1)), float(float(mat4x2((min(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, 1.0, 1.0, ((true ? tan((dot(vec2(0.0, ((1.0) / 1.0)), vec2(1.0, 0.0)))) : (16.03))), determinant(mat4(0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, log(1.0), 0.0, 0.0, tan(0.0), 0.0, 0.0, 0.0, 0.0)), 0.0))), bool(true)))))), sqrt(1.0), 0.0, 1.0, 1.0, 1.0, 0.0, exp(abs(0.0))))), ((mix(float((8.1)), float(float(mat4x2((min(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, 1.0, 1.0, ((true ? tan((dot(((vec2(0.0, (((clamp(1.0, 1.0, 1.0))) / 1.0))) - vec2(0.0, 0.0)), vec2(1.0, 0.0)))) : (16.03))), determinant(mat4(0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, log(1.0), 0.0, 0.0, tan(0.0), 0.0, 0.0, 0.0, 0.0)), 0.0))), bool(true))))))))))))))))))))
      barrier();
     if((false))
      return;
     if((((injectionSwitch.x > ((true ? injectionSwitch : (injectionSwitch))).y))))
      barrier();
     if((false))
      barrier();
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((((false)) || false))
      barrier();
     if((((((injectionSwitch.x > injectionSwitch.y))) && true)))
      return;
     if((false))
      {
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
       if((false))
        {
         if(((! ((! (! ((! ((false || (! (! (((injectionSwitch.x > injectionSwitch.y)))))))))))))))
          return;
         barrier();
        }
       if((false))
        return;
       return;
       if((false))
        return;
       if((false))
        return;
      }
     if((false))
      barrier();
     if(((! (! (false)))))
      return;
     if(((! ((bool(bvec2(! (((false) || ((injectionSwitch.x > injectionSwitch.y)))), true)))))))
      barrier();
    }
   barrier();
  }
 if((false))
  {
   if((false))
    barrier();
   if((((false) && true)))
    return;
   return;
  }
 if((false))
  {
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((false))
  return;
 uint next_virtual_gid = ((false ? (subgroup_id) : (uint((injectionSwitch.x)) ^ (workgroup_base)))) + subgroup_id * (((((max(((true ? GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size : (((uvec2(0u, 0u) | ((GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size)))) + uvec2((injectionSwitch.x), (injectionSwitch.x))))).x, (clamp(GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size, GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size, GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size)).x)) / uint((injectionSwitch.y))))) | ((((max(GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.x, (((clamp(GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size, GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size, GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size))) | ((clamp(GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size, GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size, GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size)))).x)) / uint((((injectionSwitch.y)) - 0.0)))))) + ((subgroup_local_id + (0 + (1))) % (uint((injectionSwitch.x)) | ((max((uvec2(uvec2(GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size))), GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size)).x)));
 buf[virtual_gid] = (~ (~ (1)));
 atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 0);
 if((bool(bvec4((false), false, false, false))))
  barrier();
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    return;
   return;
   if(((bool(bvec4(false, ((injectionSwitch.x > injectionSwitch.y)), false, ((injectionSwitch.x > injectionSwitch.y)))))))
    return;
   if((false))
    barrier();
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
