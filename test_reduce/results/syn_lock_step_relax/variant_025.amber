#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 if((false))
  return;
 uint workgroup_size = (clamp(gl_WorkGroupSize, ((gl_WorkGroupSize) / uvec3(1u, 1u, 1u)), ((((gl_WorkGroupSize) >> uvec3(0u, 0u, 0u))) / uvec3(1u, 1u, 1u)))).x;
 uint workgroup_id = ((((~ ((uvec3(0u, 0u, 0u) + (~ (uvec3((min((((max(gl_WorkGroupID[0], ((true ? gl_WorkGroupID[0] : (subgroup_local_id)))))) | 0u), gl_WorkGroupID[0])), gl_WorkGroupID[1], gl_WorkGroupID[2]))))))) << uvec3(0u, (min(0u, 0u)), 0u))).x;
 if((false))
  return;
 if(((((false || ((((injectionSwitch.x > injectionSwitch.y)) || (injectionSwitch.x > injectionSwitch.y))))))))
  return;
 uint workgroup_base = (uint(uvec3(workgroup_size, 1u, 1u))) * (((max(workgroup_id, workgroup_id))) - 0u);
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 if((false))
  return;
 uint next_virtual_gid = (uint((uvec3((min((clamp((min(0u, 0u)), (clamp(0u, 0u, 0u)), 0u)), (min(0u, 0u)))), 0u, 0u) ^ (uvec3(workgroup_base + (((false ? (workgroup_size) : (((subgroup_id * ((0u & 172949u) | (subgroup_size))) ^ 0u)))) >> 0u), 1u, 0u))))) + (((((~ (((((injectionSwitch.x < (vec2(mat4x3(injectionSwitch, 0.0, 0.0, 1.0, sqrt(0.0), 1.0, sqrt((dot(vec4(1.0, 0.0, 1.0, 1.0), vec4(0.0, 1.0, 0.0, 0.0)))), 0.0, 0.0, 1.0, determinant(mat4(0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, (dot(vec4(1.0, 1.0, 1.0, 0.0), vec4(0.0, 0.0, 0.0, 1.0))), 0.0, 0.0))))).y)) ? ~ (subgroup_local_id + 1) : (workgroup_id)))))) ^ 0u)) % subgroup_size);
 buf[virtual_gid] = 1;
 if(((bool(bvec4((! (! ((false || (false))))), ((true) || false), false, true)))))
  return;
 atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 0);
 if(((true && (bool(bvec3((bool((bvec2(bvec4(bvec2(((! (((! (! (! (! (! ((((! (! ((true && ((! (! (false))) || false))))))))))))))))), false), false, false))))), false, false))))))
  return;
 if((((((false) || false) || ((injectionSwitch.x > (min(injectionSwitch, injectionSwitch)).y))))))
  return;
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
