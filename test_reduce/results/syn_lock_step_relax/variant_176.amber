#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((false))
  barrier();
 if(((bool((bvec3(bvec3(((bvec3(bvec3(bvec3(bvec4((bvec3(bvec4(bvec3(((((injectionSwitch.x > injectionSwitch.y))) || false), true, false), ((injectionSwitch.x > injectionSwitch.y))))), false)))))))))))))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(((((min(injectionSwitch, ((((clamp(vec2(vec2((mix(vec2((injectionSwitch)[0], (90.88)), vec2((- 7.9), (max((injectionSwitch), (injectionSwitch)))[1]), bvec2(false, (bool(bvec4(true, true, false, false)))))))), vec2(vec2((mix(vec2((injectionSwitch)[0], (90.88)), vec2((- 7.9), (max((((injectionSwitch)) / vec2(1.0, 1.0)), (injectionSwitch)))[1]), bvec2(false, true))))), vec2(vec2((mix(vec2((injectionSwitch)[0], (((90.88)) - 0.0)), vec2((- 7.9), (max((injectionSwitch), ((min(injectionSwitch, injectionSwitch)))))[1]), bvec2(false, true))))))))) + sqrt(abs(vec2(0.0, 0.0)))))).x > injectionSwitch.y))))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if((((false) && true)))
  barrier();
 if((false))
  {
   if((bool(bool((((false)) && true)))))
    barrier();
   if((((injectionSwitch.x > (((min(injectionSwitch, (((true ? (clamp((clamp(max(injectionSwitch, injectionSwitch), max(injectionSwitch, injectionSwitch), max(injectionSwitch, injectionSwitch))), max(injectionSwitch, injectionSwitch), max(injectionSwitch, injectionSwitch))) : (injectionSwitch)))))) - (clamp(vec2((min((max(0.0, 0.0)), 0.0)), 0.0), vec2((min((max(0.0, 0.0)), 0.0)), 0.0), (clamp(vec2((min((max(0.0, 0.0)), 0.0)), 0.0), vec2((min((max(0.0, 0.0)), 0.0)), 0.0), vec2((min((max(0.0, 0.0)), 0.0)), 0.0))))))).y))))
    barrier();
   if((false))
    barrier();
   barrier();
   if((false || ((false))))
    barrier();
  }
 if((false))
  barrier();
 if((false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(((false || (bool((bvec2(bvec2(bvec2(((bool(bvec4(false, true, false, true)))), false)))))))))
  barrier();
 uint num_workgroup = (((((max((((((~ (~ ((((((~ (~ ((((((((((max(gl_NumWorkGroups, (clamp(((gl_NumWorkGroups) - uvec3(0u, 0u, 0u)), gl_NumWorkGroups, gl_NumWorkGroups)))) >> uvec3(0u, 0u, 0u)))) << uvec3((injectionSwitch.x), (injectionSwitch.x), (injectionSwitch.x)))) | ((((((max(gl_NumWorkGroups, (clamp(((gl_NumWorkGroups) - uvec3(0u, 0u, 0u)), gl_NumWorkGroups, gl_NumWorkGroups)))) >> uvec3(0u, 0u, 0u)))) << uvec3((injectionSwitch.x), (injectionSwitch.x), (injectionSwitch.x)))))) + uvec3(0u, 0u, 0u))))) + uvec3(0u, 0u, 0u))) >> (uvec3(0u, 0u, 0u) >> (uvec3(7u)))))))) | (~ (~ ((((((((max(gl_NumWorkGroups, (clamp(((gl_NumWorkGroups) - uvec3(0u, 0u, 0u)), gl_NumWorkGroups, gl_NumWorkGroups))))) << (clamp(uvec3((injectionSwitch.x), (injectionSwitch.x), (injectionSwitch.x)), (uvec3(0u, 0u, 0u) ^ (uvec3((injectionSwitch.x), (injectionSwitch.x), (injectionSwitch.x)))), uvec3((injectionSwitch.x), (injectionSwitch.x), (injectionSwitch.x))))) + uvec3(0u, 0u, ((0u) << 0u))))) >> uvec3(0u, 0u, 0u)))))))) ^ (uvec3((((0u + (0u))) | (0u)), 0u, 0u) << (uvec3(0u, 0u, 0u) | ((uvec3(3u)))))), ((((max(~ (~ (uvec3(uvec4(((((((max(gl_NumWorkGroups, (clamp(((gl_NumWorkGroups) - uvec3(0u, 0u, 0u)), gl_NumWorkGroups, gl_NumWorkGroups))))) << uvec3((injectionSwitch.x), (injectionSwitch.x), (injectionSwitch.x))) + uvec3(0u, 0u, 0u)))), 1u)))), (clamp(~ (~ ((((((max(gl_NumWorkGroups, (clamp(((gl_NumWorkGroups) - uvec3(0u, 0u, 0u)), gl_NumWorkGroups, gl_NumWorkGroups))))) << uvec3((injectionSwitch.x), (injectionSwitch.x), (injectionSwitch.x))) + uvec3(0u, 0u, 0u))))), ~ (~ ((((((((((((((max(gl_NumWorkGroups, (clamp(((uvec3(uvec4((gl_NumWorkGroups), uint((injectionSwitch.y))))) - uvec3(0u, 0u, 0u)), gl_NumWorkGroups, gl_NumWorkGroups))))) << uvec3((injectionSwitch.x), (((false ? (injectionSwitch) : injectionSwitch)).x), (injectionSwitch.x))) / uvec3(1u, 1u, 1u))) / (uvec3(1u, 1u, 1u) & uvec3(1u, 1u, 1u))))) | ((((((((max(gl_NumWorkGroups, (((((clamp(((uvec3(uvec4((gl_NumWorkGroups), uint((injectionSwitch.y))))) - uvec3(0u, 0u, 0u)), gl_NumWorkGroups, gl_NumWorkGroups))) ^ uvec3(0u, 0u, 0u))) << uvec3(0u, 0u, 0u))))) << uvec3((injectionSwitch.x), (((false ? (injectionSwitch) : injectionSwitch)).x), (min((((mix(float((injectionSwitch.x)), float((56.68)), bool(false)))) / 1.0), (injectionSwitch.x))))) / uvec3(1u, 1u, 1u))) / ((((~ (~ (uvec3(1u, 1u, 1u))))) << uvec3(0u, 0u, 0u)) & uvec3(1u, 1u, 1u)))))) + uvec3(0u, 0u, 0u))))) * ((uvec3(1u, 1u, 1u) | uvec3(1u, 1u, 1u)) ^ uvec3(0u, 0u, 0u)))), ~ (((~ (((min((clamp(((((((max(gl_NumWorkGroups, (clamp(((gl_NumWorkGroups) - uvec3(0u, 0u, 0u)), gl_NumWorkGroups, gl_NumWorkGroups))))) << uvec3((injectionSwitch.x), (injectionSwitch.x), (injectionSwitch.x))) + uvec3(0u, 0u, 0u))) | uvec3(0u, 0u, 0u)), ((((max(gl_NumWorkGroups, (clamp(((gl_NumWorkGroups) - uvec3(0u, 0u, 0u)), gl_NumWorkGroups, gl_NumWorkGroups))))) << uvec3((injectionSwitch.x), (injectionSwitch.x), (injectionSwitch.x))) + uvec3(0u, 0u, 0u)), ((((max(gl_NumWorkGroups, (clamp(((gl_NumWorkGroups) - uvec3(0u, 0u, 0u)), gl_NumWorkGroups, gl_NumWorkGroups))))) << uvec3((injectionSwitch.x), (injectionSwitch.x), (injectionSwitch.x))) + uvec3(0u, 0u, 0u)))), ((((max(gl_NumWorkGroups, (clamp(((gl_NumWorkGroups) - uvec3(0u, 0u, 0u)), gl_NumWorkGroups, gl_NumWorkGroups))))) << uvec3((injectionSwitch.x), (injectionSwitch.x), (injectionSwitch.x))) + uvec3(0u, 0u, 0u))))))) ^ uvec3(0u, 0u, 0u))))))))) ^ ((min(uvec3((((((0u + (((((0u) | (0u))) | (0u)))) << 0u))) | (0u)), 0u, 0u), uvec3((((((0u + (((((0u) | (0u))) | (0u)))) << 0u))) | (0u)), 0u, 0u))) << (uvec3(0u, 0u, 0u) | (((min(uvec3(3u), (uvec3(uvec4(uvec3(((false ? (subgroup_size) : 3u))), 0u)))))))))))).x) | (((clamp((uvec3(0u, 0u, 0u) ^ (((~ (~ ((((((max(gl_NumWorkGroups, (clamp(((((gl_NumWorkGroups) | (gl_NumWorkGroups))) - uvec3(0u, 0u, 0u)), gl_NumWorkGroups, gl_NumWorkGroups))))) << uvec3((injectionSwitch.x), (injectionSwitch.x), (injectionSwitch.x))) + uvec3(0u, 0u, 0u))))))))) ^ (uvec3((((0u + (0u))) | ((max((uint(uint(((0u) * 1u)))), ((min((true ? 0u : (subgroup_size)), (((true ? 0u : (subgroup_size))) - 0u)))))))), 0u, 0u) << (uvec3(0u, 0u, 0u) | ((uvec3(3u))))), (uvec3(0u, 0u, 0u) ^ (((~ (~ ((((((max(gl_NumWorkGroups, (clamp(((((gl_NumWorkGroups) | (gl_NumWorkGroups))) - uvec3(0u, 0u, 0u)), gl_NumWorkGroups, gl_NumWorkGroups))))) << uvec3((injectionSwitch.x), (injectionSwitch.x), (injectionSwitch.x))) + uvec3(0u, 0u, 0u))))))))) ^ (uvec3((((0u + (0u))) | ((max((uint(uint(((0u) * 1u)))), ((min((true ? 0u : (subgroup_size)), (((true ? 0u : (subgroup_size))) - 0u)))))))), 0u, 0u) << (uvec3(0u, 0u, 0u) | ((uvec3(3u))))), (uvec3(uvec4((uvec3(0u, 0u, 0u) ^ (((~ (~ ((((((max(gl_NumWorkGroups, (clamp(((((gl_NumWorkGroups) | (gl_NumWorkGroups))) - uvec3(0u, 0u, 0u)), gl_NumWorkGroups, gl_NumWorkGroups))))) << uvec3((injectionSwitch.x), (injectionSwitch.x), (injectionSwitch.x))) + uvec3(0u, 0u, 0u))))))))) ^ (uvec3((((0u + (0u))) | ((max((uint(uint(((0u) * 1u)))), ((min((true ? 0u : (subgroup_size)), (((true ? 0u : (subgroup_size))) - 0u)))))))), 0u, 0u) << (uvec3(0u, 0u, 0u) | ((uvec3(3u))))), 1u)))))).x))) << (1u ^ 1u));
 if((false || ((bool(bvec4((((bool(bvec2((((! (! ((injectionSwitch.x > injectionSwitch.y))))) || false), false))))), true, true, true))))))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 uint workgroup_size = ((((((gl_WorkGroupSize) << uvec3(0u, 0u, 0u))) / uvec3(1u, 1u, (clamp((clamp((min(((1u) ^ (0u >> (uint(3u)))), ((1u) ^ (0u >> (uint(3u)))))), ((1u) ^ (0u >> (uint(3u)))), ((1u) ^ (0u >> (uint(3u)))))), (min(((1u) ^ (0u >> (uint(3u)))), ((1u) ^ (0u >> (uint(3u)))))), ((1u) ^ (~ (~ ((0u >> (uint(3u))))))))))).x) + 0u);
 if((false))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = (~ ((~ (~ (~ (((workgroup_size)) * 1u)))))) * (min((((((injectionSwitch.x < injectionSwitch.y)) ? (clamp((workgroup_id), (workgroup_id), ((uint(uvec3(workgroup_id, 0u, uint((injectionSwitch.y)))))))) * (clamp(((1u) << 0u), 1u, 1u)) : ((max((min(subgroup_size, subgroup_size)), subgroup_size)))))), workgroup_id));
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  {
   if((true && ((false))))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       barrier();
      }
     if((false))
      barrier();
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
    }
   barrier();
  }
 if(((! (! (((((! (((! (bool(bvec2((((false || (((true && ((((injectionSwitch.x > injectionSwitch.y)) || false)))))))), ((injectionSwitch.x < injectionSwitch.y)))))) || false))) || false)))))) || false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    {
     if((false))
      {
       if((bool(bvec4((((injectionSwitch.x > injectionSwitch.y))), true, true, false))))
        barrier();
       barrier();
      }
     if((false))
      barrier();
     barrier();
    }
   barrier();
  }
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  {
   if(((((false || (injectionSwitch.x > injectionSwitch.y))))))
    barrier();
   barrier();
  }
 if((((! (! ((! (! (((((bool((bvec3(bvec3((bvec3(bvec3((bvec3(bvec3(bvec3((! (! (((injectionSwitch.x) + 0.0) > injectionSwitch.y))), false, ((injectionSwitch.x > injectionSwitch.y)))))))))))))))) || false))))))))))
  barrier();
 if((false))
  {
   if((true && ((((bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, true, true))))))))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     if(((((((float(mat4x3(injectionSwitch.x, 1.0, 0.0, log(1.0), sin(0.0), (injectionSwitch.x), 0.0, 1.0, 1.0, 1.0, 1.0, sqrt(1.0)))) - 0.0)) > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(((! (((! ((false || (false)))) || (((min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)))))))
      barrier();
     barrier();
     if((false))
      barrier();
    }
   if((false))
    barrier();
   if(((bool((bvec2(bvec4(bvec2(false, false), true, false)))))))
    barrier();
  }
 if((false))
  barrier();
 if(((false || (! (! ((false)))))))
  {
   if((false))
    barrier();
   if((((false || (bool((bvec3(bvec4(bvec3(((false || (((((false || (injectionSwitch.x > (((((vec2(mat3x2(((injectionSwitch) - vec2(0.0, 0.0)), 0.0, tan(0.0), 0.0, 0.0))).y) - 0.0)) + 0.0))))) || ((injectionSwitch.x > injectionSwitch.y)))))), true, true), true)))))))))
    barrier();
   barrier();
   if((false))
    barrier();
  }
 if((((((! (((! (bool(bvec4((! (! ((bool(bvec3(false, true, false)))))), true, true, true)))) && true))))) && (bool(bvec4(true, true, true, true))))))
  barrier();
 uint next_virtual_gid = (clamp(workgroup_base + subgroup_id * subgroup_size, ((workgroup_base) << 0u) + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size)) + (((((clamp((max(subgroup_local_id, subgroup_local_id)), subgroup_local_id, subgroup_local_id)) + ((1) | 0)) % ((~ (~ (uint(uvec2(subgroup_size, 0u))))))) | ((true ? (((uint(uvec2(clamp((((subgroup_local_id + 1) % subgroup_size) | (((clamp(((1u * ((subgroup_local_id + 1) % subgroup_size))), ((1u * (((clamp((1u * (subgroup_local_id)), subgroup_local_id, subgroup_local_id)) + (((int(ivec4(((max((false ? (5493) : 1), (false ? (5493) : 1)))), (0 ^ 0), (43885 & 0), 1))) << 0))) % subgroup_size))), ((1u * ((subgroup_local_id + 1) % subgroup_size)))))) << 0u)), (((((((((subgroup_local_id + 1))) | 0u)) | (((subgroup_local_id + 1))))) + 0u) | (((uint((injectionSwitch.x))) * (0u | (1u))) | 0u)) % subgroup_size, (((0u | (min(((subgroup_local_id + 1)), (~ (~ (((subgroup_local_id + 1)))))))) + 0u)) % subgroup_size), 1u))))) : (workgroup_id)))));
 if((false))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   barrier();
  }
 if((false))
  {
   if(((! (((false || ((true && ((! (false))))))) || false))))
    barrier();
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
 buf[virtual_gid] = 1;
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(((! ((false || (! (! ((true && (! ((((true && ((! ((true && (! (bool(bvec4((bool(bvec3(false, true, ((true) || false)))), true, (((bool((bool((bvec3(bvec3(bvec3(bool(((((false || (bool(bvec4(true, true, true, false)))) && true)))), false, false))))))))) || false), false))))))))))))))))))))))
  {
   if((false))
    barrier();
   barrier();
  }
 atomicStore(buf[next_virtual_gid], uint((1 * ((clamp(2, 2, (clamp(2, 2, 2))))))), 4, ((64) ^ 0), 0);
 if(((bool(bvec2(((! (! ((((false ? (vec2(- 7.8, - 405.432)) : injectionSwitch)).x > injectionSwitch.y))))), true)))))
  barrier();
 if((! (! ((false)))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((((((false) || false))) || false))
  barrier();
 if(((true && (false))))
  barrier();
 if((false))
  barrier();
 if(((bool(bool(false)))))
  barrier();
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
