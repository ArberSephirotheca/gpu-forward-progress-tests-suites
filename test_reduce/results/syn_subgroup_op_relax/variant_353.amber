#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = ((uint(((uvec2((1u * (clamp((min((min(workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size)), workgroup_base + (max((min(subgroup_id, subgroup_id)) * subgroup_size, (uint(uvec4((min(subgroup_id, subgroup_id)) * subgroup_size, 1u, 0u, 0u))))))), workgroup_base + (1u * (0u | ((((subgroup_id)) ^ 0u)))) * subgroup_size, ((workgroup_base + (0u | (((subgroup_id)) ^ 0u)) * subgroup_size) | uint((injectionSwitch.x)))))), 0u)) | (((true ? uvec2((1u * (clamp((min(workgroup_base + (min((clamp(subgroup_id, subgroup_id, subgroup_id)), (0u + (subgroup_id)))) * subgroup_size, workgroup_base + (min(subgroup_id, subgroup_id)) * subgroup_size)), workgroup_base + (1u * (subgroup_id)) * subgroup_size, ((workgroup_base + (0u | (((subgroup_id)) ^ 0u)) * subgroup_size) | uint((((injectionSwitch) + vec2(0.0, 0.0)).x)))))), 0u) : (uvec2(11685u, 60756u))))))))) + subgroup_local_id;
 uint next_virtual_gid = (max(workgroup_base + subgroup_id * subgroup_size + (((~ ((~ (~ ((~ (~ (~ ((((max(((subgroup_local_id + 1) % subgroup_size), (((max((~ (~ (subgroup_local_id + 1))), ((0u | ((subgroup_local_id + 1))) | (clamp((subgroup_local_id + 1), (subgroup_local_id + 1), (subgroup_local_id + (clamp(1, 1, 1))))))))) % subgroup_size))) ^ 0u))))))))))) | ((~ (~ (((max(subgroup_local_id, subgroup_local_id)) + 1) % subgroup_size)))))), ((((((true ? workgroup_base : (79870u)))) / 1u)) + 0u) + subgroup_id * subgroup_size + (((((max((((max(subgroup_local_id, subgroup_local_id)) + 1) % subgroup_size), (((0u | ((max((~ (~ (subgroup_local_id + 1))), ((subgroup_local_id + 1) | ((true ? (clamp((subgroup_local_id + 1), (subgroup_local_id + ((1) - (0 >> (int(2))))), (subgroup_local_id + (clamp(1, 1, 1))))) : (workgroup_base))))))))) % subgroup_size))) ^ 0u)) | ((~ (~ ((((0u >> (((uint((0u ^ (4u)))) + 0u))) + (((((subgroup_local_id + 1) % subgroup_size))) >> 0u)) | 0u)))))))));
 (~ ((true ? ((~ (~ (~ (((false ? (subgroup_id) : buf[virtual_gid] = ((max((1) | (1), (((1) | (1)) / (1 & 1)))))))))))) : (subgroup_local_id))));
 if((clamp(subgroup_local_id + 1, ((subgroup_local_id + 1) + 0u), ((false ? (workgroup_id) : subgroup_local_id)) + 1)) < ((false ? (subgroup_size) : subgroup_size)))
  {
   atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 0);
   subgroupAll(false);
  }
 else
  {
   atomicStore(buf[((true ? (min((((uint(uint(((clamp((next_virtual_gid) << 0u, (next_virtual_gid) << 0u, (((next_virtual_gid) << 0u) << 0u)))))))) ^ ((0u ^ (((((uint(uint(0u))) << 0u)) ^ 0u))))), (clamp((((uint(uint(((next_virtual_gid) - 0u))))) ^ 0u), ((((bool((((false) && true) || (bool(((! ((bool(bvec4(! (true && (bool(bool(true)))), false, true, true)))))))))))) ? (((uint(uint(next_virtual_gid)))) ^ 0u) : (virtual_gid))), ((uint((injectionSwitch.x)) | ((max((((max(((uint(uint(next_virtual_gid)))) ^ 0u, ((min((((uint(uint(next_virtual_gid))))) << 0u, (((uint(uint(next_virtual_gid))))) << 0u))) ^ 0u)))) >> 0u, (((max(((uint(uint(next_virtual_gid)))) ^ 0u, ((((uint(uint(next_virtual_gid))))) << 0u) ^ ((0u) | (0u)))))) >> 0u))))))))) : (workgroup_id)))], uint((((false ? (4430) : ((((injectionSwitch.x < ((true ? injectionSwitch : (injectionSwitch))).y)) ? (1 * ((2))) : ((- 77220)))))) | (2))), 4, 64, 0);
   subgroupAll(true);
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
