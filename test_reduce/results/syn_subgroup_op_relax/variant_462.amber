#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if(true)
  {
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if(true)
    {
     if((false))
      {
       for(int _injected_loop_counter = (0 << (max((int(4)), (int(4))))); _injected_loop_counter < ((1 << (int(6))) >> (((min((0 ^ ((int(6)))), (int(6)))) | 0))); _injected_loop_counter ++)
        {
         return;
        }
       if((false))
        return;
      }
    }
   else
    {
     if((false))
      return;
    }
   for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
    {
     if((false))
      return;
    }
   if(((((injectionSwitch.x < injectionSwitch.y) && true))))
    {
     if((false))
      return;
     if((false))
      return;
    }
   else
    {
    }
  }
 else
  {
  }
 if((false))
  return;
 for(int _injected_loop_counter = 1; _injected_loop_counter != (0 | 0); _injected_loop_counter --)
  {
   if((((! (! ((injectionSwitch.x > injectionSwitch.y)))))))
    {
     if(false)
      {
      }
     else
      {
       if((false || (((true) || false))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if(false)
            {
            }
           else
            {
             return;
            }
          }
         if(((((injectionSwitch.x < injectionSwitch.y))) && true))
          {
           if(true)
            {
             return;
            }
           else
            {
            }
          }
         else
          {
          }
        }
       else
        {
        }
      }
    }
  }
 if((false))
  return;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 if((false))
  return;
 if((false))
  {
   if((false))
    return;
   return;
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if((false))
  return;
 if((false))
  {
   if(((false) || false))
    {
    }
   else
    {
     if((false))
      return;
     return;
    }
  }
 if((false))
  return;
 uint workgroup_base = (uint(uvec4(workgroup_size, 0u, 1u, 0u))) * (((((min(workgroup_id, (0u | (workgroup_id))))) >> 0u)) | 0u);
 uint virtual_gid = ((false ? (uvec2(27272u, 5346u).s) : (max(workgroup_base + (min(subgroup_id, subgroup_id)) * subgroup_size + subgroup_local_id, workgroup_base + ((((subgroup_id * subgroup_size)) + 0u) | (subgroup_id * subgroup_size)) + subgroup_local_id))));
 for(int _injected_loop_counter = 1; ((_injected_loop_counter != int((((float(vec3(float(mat2x4(injectionSwitch.x, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, determinant(mat3(0.0, (mix(float((- 891.483)), float(0.0), bool(true))), (min(0.0, 0.0)), 1.0, 0.0, 0.0, (((float(((float((min(0.0, 0.0)))) / 1.0))) - 0.0)), 0.0, 0.0)))), 1.0, 1.0))))))) && true); _injected_loop_counter --)
  {
   if((false))
    return;
   if((((((false ? (step(- 2.9, 40.83)) : injectionSwitch.x)) > injectionSwitch.y))))
    return;
  }
 do
  {
   if(false)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
     if((((true && (((true) || false))) && ((bool(bvec3((false || (((false)) && ((injectionSwitch.x < injectionSwitch.y)))), true, false)))))))
      return;
    }
  }
 while(false);
 if(true)
  {
   if((((((injectionSwitch.x > injectionSwitch.y) && true)))))
    return;
   if((false))
    return;
   if((false))
    return;
  }
 else
  {
  }
 uint next_virtual_gid = ((((workgroup_base + (max(subgroup_id, subgroup_id)) * subgroup_size) * 1u) / 1u)) + ((clamp((((((max(true ? (subgroup_local_id + (((((bool(bool(bool(bvec4((bool(bool((((injectionSwitch) + vec2(0.0, 0.0)).x < injectionSwitch.y)))), ((injectionSwitch.x > injectionSwitch.y)), true, true))))))) ? ((1) >> 0) : (- 80948)))) : (subgroup_id), (max(true ? (subgroup_local_id + (((((bool(bool(bool(bvec4((bool(bool((((injectionSwitch) + vec2(0.0, 0.0)).x < injectionSwitch.y)))), ((injectionSwitch.x > injectionSwitch.y)), true, true))))))) ? ((1) >> 0) : (- 80948)))) : (subgroup_id), true ? (subgroup_local_id + (((((bool(bool(bool(bvec4((bool(bool((((injectionSwitch) + vec2(0.0, 0.0)).x < injectionSwitch.y)))), ((injectionSwitch.x > injectionSwitch.y)), true, true))))))) ? ((1) >> 0) : (- 80948)))) : (subgroup_id)))))) | (true ? (subgroup_local_id + (((((bool(bool(bool(bvec4((bool(bool((((injectionSwitch) + vec2(0.0, 0.0)).x < injectionSwitch.y)))), ((injectionSwitch.x > injectionSwitch.y)), true, true))))))) ? ((1) >> 0) : (- 80948)))) : (subgroup_id))))), (((clamp(((min((true ? (clamp((subgroup_local_id + 1), (subgroup_local_id + 1), (((0u ^ 0u) + (min((subgroup_local_id), (clamp((subgroup_local_id), (subgroup_local_id), (subgroup_local_id)))))) + 1))) : (subgroup_local_id)), (true ? (clamp((subgroup_local_id + 1), (uint(uvec4(((((max((max(subgroup_local_id, subgroup_local_id)), (~ (~ (subgroup_local_id)))))) << 0u) + 1), 0u, 0u, 1u))), (subgroup_local_id + 1))) : (subgroup_local_id)))) | (min((((true ? (clamp((subgroup_local_id + 1), (subgroup_local_id + 1), (subgroup_local_id + 1))) : (subgroup_local_id))) | ((max((true ? (clamp((subgroup_local_id + 1), (subgroup_local_id + 1), (subgroup_local_id + 1))) : (subgroup_local_id)), (true ? (clamp((subgroup_local_id + 1), (max((subgroup_local_id + 1), (subgroup_local_id + 1))), (subgroup_local_id + 1))) : (subgroup_local_id)))))), (true ? (clamp((subgroup_local_id + 1), (subgroup_local_id + 1), (subgroup_local_id + 1))) : (subgroup_local_id))))), min((true ? (clamp((subgroup_local_id + 1), (((subgroup_local_id + 1) + 0u)), (subgroup_local_id + 1))) : (subgroup_local_id)), (((((true ? (clamp((subgroup_local_id + 1), (0u ^ ((subgroup_local_id + 1))), (subgroup_local_id + 1))) : (subgroup_local_id))) | 0u) | ((0u) | (0u | 0u))))), (clamp((max(min((true ? (clamp((subgroup_local_id + 1), (((min((subgroup_local_id + 1), (subgroup_local_id + 1)))) | ((subgroup_local_id + 1))), (subgroup_local_id + 1))) : (subgroup_local_id)), (true ? (clamp((subgroup_local_id + 1), (subgroup_local_id + 1), (subgroup_local_id + 1))) : (subgroup_local_id))), min((true ? (clamp((subgroup_local_id + 1), (subgroup_local_id + 1), (subgroup_local_id + 1))) : (subgroup_local_id)), (true ? (clamp((subgroup_local_id + 1), (subgroup_local_id + 1), (subgroup_local_id + 1))) : (subgroup_local_id))))), (~ (~ (min((true ? (clamp((subgroup_local_id + 1), (subgroup_local_id + 1), (subgroup_local_id + 1))) : (subgroup_local_id)), (true ? (clamp((subgroup_local_id + 1), (subgroup_local_id + 1), (subgroup_local_id + 1))) : (subgroup_local_id)))))), min((true ? (clamp((subgroup_local_id + 1), (subgroup_local_id + 1), (subgroup_local_id + 1))) : (subgroup_local_id)), (true ? (clamp((subgroup_local_id + 1), (subgroup_local_id + 1), (subgroup_local_id + 1))) : (subgroup_local_id))))))))), (subgroup_local_id + 1))) % subgroup_size);
 if((((injectionSwitch.x < injectionSwitch.y)) && (false)))
  {
  }
 else
  {
   if((false))
    return;
   if((false))
    {
     if((false))
      return;
     if((((! (! (((injectionSwitch.x < injectionSwitch.y) || false)))))))
      {
       return;
       if((false))
        return;
      }
     else
      {
      }
    }
   for(int _injected_loop_counter = int((min((((true && (((false) && true))) ? (- 752.375) : (injectionSwitch.x))), (injectionSwitch.x)))); _injected_loop_counter != 1; _injected_loop_counter ++)
    {
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       buf[virtual_gid] = 1;
       if((false))
        return;
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 do
  {
   if((false))
    break;
   if((false))
    {
     if((((false) && true)))
      {
       if(((bool(bool(false)))))
        break;
       do
        {
         return;
         if((false))
          continue;
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = (0 >> (((int(1)) - int((float(mat3x2((((mix(float(float(mat3x4(injectionSwitch.x, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, exp((injectionSwitch.x)), 1.0, 1.0, 1.0, 1.0))), float((0.9)), bool(false))))), 0.0, 0.0, 1.0, 0.0, 0.0))))))); (false || (_injected_loop_counter != int((injectionSwitch.y)))); _injected_loop_counter ++)
        {
         return;
         if((false))
          continue;
        }
      }
     if(((true && (false))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
       break;
      }
     for(int _injected_loop_counter = int((injectionSwitch.x)); (((true && (_injected_loop_counter != (clamp(1, 1, 1))))) && true); _injected_loop_counter ++)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(((! ((! (! (! (false))))))))
          break;
         return;
        }
      }
     if(((bool(bvec2((bool(bool(false))), false)))))
      break;
     if(false)
      {
      }
     else
      {
       do
        {
         do
          {
           return;
           if((! (! ((((((injectionSwitch.x > injectionSwitch.y)))) && true)))))
            break;
          }
         while((! (! ((true && (false))))));
        }
       while(false);
      }
     if((false))
      break;
    }
  }
 while((((! (! ((mix(float((6.0)), float((clamp(injectionSwitch.x, (min(injectionSwitch, injectionSwitch)).x, injectionSwitch.x))), bool(true))) > injectionSwitch.y))))));
 if(false)
  {
  }
 else
  {
   if((((false) || false)))
    {
     if((false))
      return;
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       if(((((((mat2(1.0) * (((((vec2(1.0, 1.0) * (vec2(0.0, 0.0) + (((vec2(injectionSwitch[((true ? 0 : (11165)))], injectionSwitch[1])) * mat2(1.0)))))) - vec2(0.0, 0.0)))))).x < injectionSwitch.y))) || false))
        {
         if((! (! ((bool(bool((! (! ((((injectionSwitch.x > injectionSwitch.y)))))))))))))
          return;
         return;
         if(false)
          {
           if((false))
            return;
          }
         else
          {
           if((false))
            return;
           if((false))
            {
             if(true)
              {
               return;
              }
             else
              {
              }
            }
          }
         if((false))
          return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
         if((((injectionSwitch.x > ((false ? (- 796.852) : injectionSwitch.y))))))
          {
           if((false))
            return;
           return;
          }
        }
      }
    }
  }
 if((false))
  return;
 if(true)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     return;
    }
  }
 else
  {
  }
 if(((true && (((injectionSwitch.x > injectionSwitch.y))))))
  return;
 if((~ (~ (((subgroup_local_id) >> 0u) + 1))) < subgroup_size)
  {
   if((false))
    {
     for(int _injected_loop_counter = (int(ivec4(1, 1, int((injectionSwitch.y)), 1))); _injected_loop_counter > (((true ? 0 : (_injected_loop_counter))) >> (int(7))); _injected_loop_counter --)
      {
       return;
      }
    }
   if((! (! (false))))
    {
    }
   else
    {
     if(((((vec2(vec3(injectionSwitch, 0.0))).x > injectionSwitch.y))))
      {
       if((! (((! ((false))) || false))))
        return;
       for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
        {
         if((false))
          {
           if((false))
            return;
           if((false))
            continue;
           break;
          }
         for(int _injected_loop_counter = 1; ((((_injected_loop_counter) << (int(int(((0) << (1 ^ 1))))))) << 0) != ((((int(int(0 ^ 0)))) | ((0 ^ ((((0) ^ 0)) ^ 0))))); ((0 >> (int(3))) ^ (((_injected_loop_counter --) ^ 0))))
          {
           for(int _injected_loop_counter = (~ (~ (0))); _injected_loop_counter < 1; _injected_loop_counter ++)
            {
             for(int _injected_loop_counter = (0 >> (int(4))); _injected_loop_counter != 1; _injected_loop_counter ++)
              {
               if((false))
                return;
              }
             if((false))
              continue;
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
            }
          }
        }
       return;
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    {
     if((((bool(bvec3(((injectionSwitch.x < injectionSwitch.y)), true, false)))) && true))
      {
       return;
      }
     else
      {
      }
     if(((bool(bool(((injectionSwitch.x > injectionSwitch.y)))))))
      return;
    }
   do
    {
     if((! (! (false))))
      {
      }
     else
      {
       atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 0);
      }
    }
   while(false);
   subgroupAll(false);
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
    }
   else
    {
     if(true)
      {
       if(((! (! (false)))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if((false))
          return;
         for(int _injected_loop_counter = 0; (bool(bvec3(((_injected_loop_counter < (0 | (1))) || false), true, true))); _injected_loop_counter ++)
          {
           if(((true && ((! (! (((injectionSwitch.x > injectionSwitch.y)))))))))
            continue;
           if((((vec2(1.0, 1.0) * ((vec2(injectionSwitch[0], injectionSwitch[1])))).x < injectionSwitch.y)))
            {
             if((false))
              {
               if((false || ((false))))
                break;
               if((((injectionSwitch.x > injectionSwitch.y))))
                return;
               return;
              }
            }
           else
            {
             if((false))
              break;
            }
           return;
          }
        }
      }
     else
      {
       if((false))
        return;
      }
    }
  }
 else
  {
   for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > 0; ((_injected_loop_counter --) / 1))
    {
     if(false)
      {
      }
     else
      {
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         atomicStore(buf[next_virtual_gid], ((max(uint(uvec2(uint(2), 1u)), uint(uvec2(uint(2), 1u))))), 4, (((~ (~ (64))) * 1)), 0);
        }
       else
        {
        }
      }
    }
   for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
    {
     do
      {
       if((! (((((injectionSwitch.x < injectionSwitch.y)) && (((bool(bvec4(((false || (true && (bool(bvec4((! (! ((! ((! (bool(bvec3(((false || ((true && ((false || (! ((bool(bvec3(false, ((false) || false), true))))))))))), true, true))))))))), false, ((injectionSwitch.x < (max(injectionSwitch, (vec2(mat2(injectionSwitch, 0.0, 0.0))))).y)), ((injectionSwitch.x < injectionSwitch.y))))))) || false), false, true, ((injectionSwitch.x > injectionSwitch.y))))))))))))
        {
         if((false))
          break;
         if((false))
          continue;
         if((! (! ((false)))))
          {
           if(((! (! (false)))))
            continue;
           if((false))
            break;
           break;
          }
        }
       else
        {
         for(int _injected_loop_counter = (1 & 1); _injected_loop_counter != 0; _injected_loop_counter --)
          {
           subgroupAll(true);
          }
         if((false))
          break;
        }
      }
     while((false || ((((max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)))));
    }
   if(true)
    {
     if((false))
      return;
     if((false))
      return;
    }
   else
    {
    }
   if((false))
    {
     if((false))
      {
       if(false)
        {
         if((bool(bvec3(true, true, true))))
          {
           if((((((((max((injectionSwitch), (injectionSwitch)))) - abs(vec2(0.0, 0.0))) - vec2(0.0, 0.0)).x > injectionSwitch.y))))
            {
             do
              {
               return;
               if((false))
                continue;
              }
             while(false);
            }
          }
         else
          {
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
         if((false))
          return;
         if((false))
          return;
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           return;
          }
        }
       if(((! (! (false)))))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((false))
        return;
       if(true)
        {
         do
          {
           if(true)
            {
             if(false)
              {
              }
             else
              {
               if((((((true ? injectionSwitch.x : (- 2.5))) > (clamp(injectionSwitch.y, injectionSwitch.y, (clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))))
                {
                 if(((((min(injectionSwitch.x, injectionSwitch.x)) > (mix(float((- 9.2)), float(injectionSwitch.y), bool(true)))))))
                  return;
                 for(int _injected_loop_counter = (int(ivec4(1, 1, 0, (max(0, 0))))); _injected_loop_counter != ((((0) - 0)) ^ 0); ((((_injected_loop_counter --) << 0)) ^ 0))
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    continue;
                   if((false))
                    return;
                   return;
                  }
                }
              }
             if((false))
              return;
            }
           else
            {
            }
          }
         while(false);
         if(false)
          {
          }
         else
          {
           if((false))
            {
             if((false))
              return;
             return;
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
       else
        {
         if((false))
          return;
        }
      }
     do
      {
       if(((((1.0 * (injectionSwitch.x)) > (max(injectionSwitch, (mix(vec2((float(- 13595)), (injectionSwitch)[1]), vec2((injectionSwitch)[0], (float((false ? 70379u : 122911u)))), bvec2(true, false))))).y))))
        {
         if((false))
          {
           if((false))
            break;
           continue;
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(((((false || (bool((bvec3(bvec3(bvec3(false, true, false)))))))) || false)))
          {
           if((false))
            {
             if((false))
              break;
             continue;
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
          }
         else
          {
           if((false))
            return;
           if(false)
            {
            }
           else
            {
             if(((injectionSwitch.x < injectionSwitch.y)))
              {
               return;
              }
             else
              {
              }
            }
          }
         if((false))
          return;
         if((false))
          {
           if((false))
            break;
           break;
          }
         if((((((injectionSwitch.x > injectionSwitch.y))) && true)))
          return;
        }
      }
     while(false);
     if(true)
      {
       if(true)
        {
         do
          {
           for(int _injected_loop_counter = (0 >> (int(5))); _injected_loop_counter < 1; _injected_loop_counter ++)
            {
             return;
            }
          }
         while(false);
        }
       else
        {
         if((false))
          return;
         if((((true && ((injectionSwitch.x > (min(injectionSwitch.y, injectionSwitch.y))))))))
          return;
         if((((bool(bool((injectionSwitch.x > injectionSwitch.y)))))))
          return;
         if((false))
          {
           do
            {
             return;
            }
           while((false || ((! (! ((false || ((bool(bvec2((! (! (false))), false)))))))))));
          }
        }
       if(((true && (((injectionSwitch.x > injectionSwitch.y))))))
        {
         if(false)
          {
          }
         else
          {
           if((((false)) || false))
            return;
           return;
          }
        }
       if((false))
        return;
      }
     else
      {
      }
     if((((false) && true)))
      {
       if((false))
        return;
       return;
      }
    }
   for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != (0 >> (int(0))); _injected_loop_counter --)
    {
     if((false))
      {
       if((false))
        break;
       if((false))
        continue;
       if(((true) || false))
        {
         return;
        }
       else
        {
        }
      }
    }
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
