#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if((false))
  return;
 if((false))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 uint num_workgroup = (uvec3(0u, (clamp(0u, 0u, (((~ (~ (0u)))) | (0u)))), 0u) ^ (gl_NumWorkGroups)).x;
 if((false))
  {
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    return;
   return;
  }
 if(((! (! ((! ((! (! (! (false)))))))))))
  return;
 uint workgroup_size = gl_WorkGroupSize.x;
 if((((((bool(bvec4(((! (! (! (((! ((bool(bvec3(bool(bvec2((((! (((((true && ((true && ((bool(bool(! (! ((! (! (((! (! (! ((bool(bool(! ((((injectionSwitch.x < injectionSwitch.y)) && (((! (injectionSwitch.x > injectionSwitch.y)))))))))))))))))))))))))) && true))) && true)) && true)), ((! ((! ((! (! ((bool(bvec4(! (! (bool(bvec4(false, ((bool(bvec4(true && (true), false, false, true)))), (((((min(injectionSwitch, injectionSwitch)).x) / 1.0) > injectionSwitch.y)), true)))), false, false, true))))))))))))), false, false))))) && ((bool(((bvec2(bvec3(bvec2(bvec4((bvec2(bvec3(bvec2(bool(bvec4(true, true, ((injectionSwitch.x < (1.0 * (injectionSwitch.y)))), false)), true), false))), false, true)), true))))))))))))), true, (true && (false)), false))))))))
  {
   if(((! (! ((((injectionSwitch.x > injectionSwitch.y)) || (false)))))))
    return;
   return;
  }
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * ((0u ^ 0u) | (((((injectionSwitch.x > injectionSwitch.y)) ? (packUnorm4x8(vec4(- 186.551, 986.062, - 90.94, - 5973.5308))) : workgroup_id))));
 if((false))
  return;
 uint virtual_gid = (((((max(workgroup_base, workgroup_base))) ^ 0u)) | 0u) + subgroup_id * subgroup_size + ((subgroup_local_id) + 0u);
 if((false))
  {
   if((((injectionSwitch.x > (1.0 * (injectionSwitch.y))))))
    return;
   if((false))
    return;
   return;
  }
 if((false))
  return;
 if((false))
  return;
 uint next_virtual_gid = (((~ (~ (workgroup_base))) + subgroup_id * subgroup_size) << 0u) + ((min((subgroup_local_id + 1), ((((((uint((((min(uvec4(clamp((subgroup_local_id + ((1) + 0)), (subgroup_local_id + 1), (subgroup_local_id + 1)), 0u, 1u, 1u), ((uvec4(clamp((subgroup_local_id + 1), (subgroup_local_id + 1), (((subgroup_local_id + 1) | (subgroup_local_id + 1)))), 0u, 1u, 1u)) | (uvec4(clamp((subgroup_local_id + 1), (subgroup_local_id + 1), (((subgroup_local_id + 1) | (subgroup_local_id + 1)))), 0u, 1u, 1u)))))) | uvec4(0u, 0u, 0u, 0u))))))) >> 0u) / 1u))) % subgroup_size);
 buf[virtual_gid] = 1;
 if((! (! ((((! ((! (! (! ((! (! ((bool(bvec4((((injectionSwitch.x > injectionSwitch.y))), true, ((false) || false), true)))))))))))))) && ((injectionSwitch.x < injectionSwitch.y))))))
  {
   if((false))
    return;
   if((false))
    return;
   return;
  }
 if((false))
  return;
 if((false))
  {
   if(((! (! (false)))))
    return;
   return;
  }
 if(subgroup_local_id + ((((((((clamp(((false ? (- 11112) : ((int((injectionSwitch.x)) | (((((false ? (5632) : (int(int(1)))))) / 1))) << 0))), ((true ? int((injectionSwitch.x)) | (((((false ? ((0 | (5632))) : (int(int(1)))))) / 1)) : ((max(- 24037, - 24037))))), int((injectionSwitch.x)) | (((((false ? (5632) : ((min(int(int(1)), int(int(1)))))))) / 1))))) / 1))) - 0) << (0 >> (((int(7))) >> 0)))) < subgroup_size)
  {
   if((bool(bvec4(((((bool(bvec4(false, true, true, true))) && true))), false, true, false))))
    return;
   if((false))
    return;
   atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 0);
   subgroupAll(false);
   if((! (! ((false)))))
    return;
   if((false))
    return;
  }
 else
  {
   if(((! ((bool(bvec2(((! ((((vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y)))) && true), true)))))))
    return;
   if((! (! (! ((! (bool(bvec2((! (! (((false))))), true)))))))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   atomicStore(buf[next_virtual_gid], uint(2), 4, (clamp(((false ? (84955) : 64)), 64, ((((((64) / 1)) | 0)) | (min((0 ^ (0)), 0))))), ((false ? (33414) : 0)));
   subgroupAll(true);
  }
 if(((((bool(bvec2((((bool(bvec2(((((false) || false))) || false, false))) && true)), false))))) || false))
  return;
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
