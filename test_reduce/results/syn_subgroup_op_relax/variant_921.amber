#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((false))
  barrier();
 if((false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if((((injectionSwitch.x > (max(injectionSwitch.y, (float(mat3x4(injectionSwitch.y, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0)))))))))
  {
   if((false))
    return;
   barrier();
  }
 if((false))
  {
   if((false))
    return;
   return;
  }
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   if((false))
    return;
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((false))
    return;
   if(((((false || (false))) || false)))
    return;
   if((false))
    return;
   if((false))
    return;
   if(((true && (false))))
    {
     if((false))
      return;
     if((false))
      barrier();
     barrier();
    }
   if((false))
    return;
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      barrier();
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     barrier();
    }
   if((false))
    return;
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
   if(((! (! (false)))))
    barrier();
   if(((((max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
    return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((false))
  {
   if((false))
    return;
   return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     return;
    }
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      {
       if((false))
        {
         if((false))
          barrier();
         if((false))
          return;
         return;
        }
       barrier();
      }
     if((false))
      return;
     if((false))
      return;
     if((false))
      return;
     if(((((1.0 * ((clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y))))
      barrier();
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      barrier();
    }
   if((false))
    barrier();
   if((((injectionSwitch.x > (clamp((vec2(mat2x3(injectionSwitch, (mix(float(1.0), float((- 5.3)), bool(false))), 0.0, 0.0, 0.0))).y, (vec2(mat2x3(injectionSwitch, (mix(float(1.0), float((- 5.3)), bool(false))), 0.0, 0.0, 0.0))).y, (((vec2(mat2x3(injectionSwitch, (mix(float(1.0), float((- 5.3)), bool(false))), 0.0, 0.0, 0.0))).y) - 0.0)))))))
    barrier();
   return;
  }
 if((false))
  {
   if((! (((! (bool(bvec3(((((injectionSwitch.x > injectionSwitch.y)))), false, ((injectionSwitch.x < injectionSwitch.y)))))) || false))))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        return;
       barrier();
      }
     if((false))
      return;
     if((! (! ((((injectionSwitch.x > injectionSwitch.y)))))))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      {
       if((false))
        return;
       return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     if((false))
      {
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((false))
        {
         if((false))
          return;
         barrier();
        }
       barrier();
      }
     if((false))
      return;
     barrier();
    }
   if((false))
    barrier();
   if((false))
    return;
   if((false))
    {
     if(((! (! (false)))))
      {
       if(((false || (false))))
        return;
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          return;
         return;
        }
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      return;
     if((((((injectionSwitch.x < injectionSwitch.y)) && ((injectionSwitch.x > injectionSwitch.y))))))
      {
       if((false))
        return;
       if((false))
        return;
       return;
      }
     return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       barrier();
      }
     if((false))
      barrier();
     if((false))
      return;
    }
   barrier();
   if((((((((((true ? injectionSwitch.x : (8.7)))) / 1.0) > injectionSwitch.y)))) || (((bool(bvec3(false, false, true))) && true))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    return;
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    return;
  }
 if((false))
  return;
 if((false))
  barrier();
 if((((((bool((bvec3(bvec4(bvec3(bool(bvec4(injectionSwitch.x > injectionSwitch.y, ((injectionSwitch.x > injectionSwitch.y)), false, ((injectionSwitch.x < injectionSwitch.y)))), true, true), true))))))))))
  return;
 uint num_workgroup = gl_NumWorkGroups.x;
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(((true && (false))))
  {
   if((false))
    {
     if((false))
      barrier();
     return;
     if((false))
      return;
    }
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
   if((false))
    return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   return;
  }
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    return;
   return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(((false || (((injectionSwitch.x > injectionSwitch.y))))))
  return;
 if((((false) && true)))
  barrier();
 if(((bool(bvec3(false, true, false)))))
  return;
 if((false))
  {
   if((false))
    return;
   return;
   if((false))
    barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    return;
   if((false))
    {
     if((false))
      barrier();
     barrier();
     if((false))
      return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    return;
   if((false))
    barrier();
   if((false))
    return;
   if((false))
    {
     if((false))
      barrier();
     if((false))
      return;
     barrier();
    }
   barrier();
   if((false))
    return;
   if((false))
    return;
  }
 if((false))
  {
   if((false))
    return;
   barrier();
  }
 if((false))
  {
   if((false))
    {
     if((false))
      return;
     barrier();
    }
   return;
  }
 if((false))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if(((((bool(bvec3(injectionSwitch.x > ((true ? injectionSwitch : ((vec2(- 97.28, - 6813.6856) + vec2(70.86, - 8.0))))).y, true, true)))))))
  {
   if((false))
    {
     if((false))
      return;
     return;
    }
   if((false))
    return;
   barrier();
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    return;
  }
 if(((! ((true && ((bool(bvec2(! ((bool(bvec2(false, true)))), true)))))))))
  return;
 if((false))
  return;
 uint workgroup_base = ((((clamp((workgroup_size) - 0u, (workgroup_size) - 0u, (workgroup_size) - 0u)))) * 1u) * workgroup_id;
 uint virtual_gid = (clamp(workgroup_base + subgroup_id * (max(subgroup_size, ((subgroup_size) - 0u))) + subgroup_local_id, workgroup_base + subgroup_id * (max(subgroup_size, ((subgroup_size) - 0u))) + subgroup_local_id, ((workgroup_base + subgroup_id * (max(subgroup_size, ((((true ? subgroup_size : (workgroup_base)))) - (clamp(0u, (max(0u, 0u)), 0u))))) + subgroup_local_id) - 0u)));
 uint next_virtual_gid = (uint((injectionSwitch.y)) * (workgroup_base + subgroup_id * subgroup_size + (((false ? (subgroup_id) : (((uint(uvec3((min((subgroup_local_id + 1) % subgroup_size, (uint(uvec2(((1u * (subgroup_local_id)) + 1) % subgroup_size, 1u))))), 1u, 1u))))))) | (0u | (0u)))));
 if((false))
  {
   if((((false)) && true))
    {
     if((false))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
   if((false))
    return;
  }
 if((false))
  {
   if((false))
    return;
   return;
  }
 if((false))
  return;
 buf[virtual_gid] = 1;
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if((false))
  barrier();
 if((false))
  {
   if((false))
    {
     if((false))
      {
       if((false))
        barrier();
       return;
      }
     return;
     if(((bool(bvec3((false || (((injectionSwitch.x > injectionSwitch.y)))), true, false)))))
      return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if(((((min((max((min((mix(vec2((- 99.82), (injectionSwitch)[1]), vec2((injectionSwitch)[0], (- 2.8)), bvec2(true, false))), injectionSwitch)).x, (min(injectionSwitch, injectionSwitch)).x)), (min((min(injectionSwitch, injectionSwitch)).x, (min(injectionSwitch, injectionSwitch)).x)))) > injectionSwitch.y))))
      return;
     return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if((true && ((false))))
    return;
   if((false))
    return;
   if((((false)) || false))
    barrier();
   if((false))
    return;
   if((false))
    {
     if((false))
      {
       if((false))
        return;
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
       if((false))
        return;
      }
     return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    barrier();
   barrier();
   if((false))
    return;
   if((false))
    {
     if(((false || ((! (! (false)))))))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      {
       if((false))
        {
         if((false))
          barrier();
         return;
        }
       if((false))
        barrier();
       barrier();
      }
     return;
     if((false))
      return;
     if((false))
      barrier();
     if((false))
      return;
     if((false))
      {
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
       barrier();
      }
     if((bool(bool((((injectionSwitch.x > injectionSwitch.y)))))))
      return;
     if((false))
      barrier();
    }
   if(((((((! (bool(bvec2((! (injectionSwitch.x > injectionSwitch.y)), ((injectionSwitch.x < injectionSwitch.y)))))))))) || ((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      return;
     if((((bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, ((injectionSwitch.x < injectionSwitch.y))))))))
      return;
     if(((true && (false))))
      return;
     if((false))
      return;
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        return;
       if((false))
        return;
       return;
      }
     if((((true && (bool(bool(((injectionSwitch.x > injectionSwitch.y)))))))))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      {
       if((false))
        return;
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
        }
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
       return;
      }
     if(((bool(bvec4(false, false, false, true)))))
      return;
     barrier();
     if((((false) && true)))
      return;
     if((false))
      barrier();
     if((false))
      barrier();
     if((false))
      return;
    }
   if((false))
    return;
  }
 if((false))
  {
   if((false))
    barrier();
   if((false))
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if((false))
    barrier();
   if((((((injectionSwitch.x > injectionSwitch.y)))) && true))
    {
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((false))
        barrier();
       return;
      }
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
   if(((bool(bvec4((! (! ((true && ((bool(bvec4(((injectionSwitch.x > injectionSwitch.y)), false, true, true)))))))), (bool(((bvec3(bvec4(bvec3(bvec4(bvec3(false, false, true), false)), (bool(bvec4(true, false, true, false))))))))), true, true)))))
    {
     if((false))
      barrier();
     if((false))
      {
       if(((true && (false))))
        return;
       if((false))
        return;
       return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      {
       if((false))
        return;
       return;
      }
     barrier();
    }
   if((false))
    {
     if((false))
      return;
     return;
    }
   if((false))
    {
     if((false))
      return;
     return;
     if((((false || ((injectionSwitch.x > injectionSwitch.y))))))
      barrier();
     if(((true && (false))))
      return;
     if(((((mix(float((clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x), float((- 85.95)), bool(false))) > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
       if((false))
        barrier();
      }
    }
   if((false))
    return;
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if((false))
  {
   if((false))
    return;
   return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((uint((injectionSwitch.x)) | (subgroup_local_id)) + 1 < subgroup_size)
  {
   atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 0);
   if((((((! (! ((injectionSwitch.x > (mix(float(injectionSwitch.y), float((5.9)), bool(false)))))))) && true))))
    {
     if((false))
      barrier();
     barrier();
     if((false))
      return;
    }
   if((false))
    {
     if((false))
      return;
     if((((false) || false)))
      {
       if((false))
        barrier();
       return;
       if((false))
        return;
      }
     if((false))
      return;
     if(((((! ((bool(bvec2(! (injectionSwitch.x > injectionSwitch.y), true)))))))))
      return;
     if((false))
      barrier();
     barrier();
     if((false))
      return;
     if((false))
      return;
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    {
     if((false))
      barrier();
     if(((((false) || false) || (false))))
      {
       if((false))
        return;
       barrier();
      }
     if((false))
      return;
     return;
    }
   if((false))
    return;
   subgroupAll(false);
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
   if((true && (((((true && (true && ((false)))))) || false))))
    return;
   atomicStore(buf[next_virtual_gid], (min(uint(2), uint(2))), 4, 64, 0);
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     if((false))
      barrier();
     barrier();
    }
   if((! ((! (! (! (((bool(bvec4(false, false, false, (! (! (false))))))))))))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   subgroupAll(true);
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        return;
       return;
      }
     if((false))
      return;
     if((false))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     if((false))
      return;
     barrier();
    }
   if((false))
    return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    return;
   return;
  }
 if((false))
  barrier();
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
