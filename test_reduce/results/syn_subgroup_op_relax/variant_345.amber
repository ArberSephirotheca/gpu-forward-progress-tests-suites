#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = ((true ? gl_WorkGroupSize.x : (num_workgroup)));
 uint workgroup_id = (min(gl_WorkGroupID.x, gl_WorkGroupID.x));
 uint workgroup_base = ((workgroup_size) | (workgroup_size)) * workgroup_id;
 uint virtual_gid = workgroup_base + (uint(uvec3(((((((((subgroup_id) | (subgroup_id)) + 0u))) >> uint((injectionSwitch.x))) + (((1u) - 0u) ^ 1u))), 1u, 0u))) * subgroup_size + subgroup_local_id;
 do
  {
   if((! (! (false))))
    {
    }
   else
    {
     if(true)
      {
       do
        {
         if(true)
          {
           if(true)
            {
             for(int _injected_loop_counter = 1; _injected_loop_counter > ((0) - 0); _injected_loop_counter --)
              {
               if(((true && (((true && ((! (! (bool(bool((injectionSwitch.x > injectionSwitch.y)))))))))))))
                {
                }
               else
                {
                 if(true)
                  {
                   for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                    {
                     do
                      {
                       if((true && (false)))
                        {
                        }
                       else
                        {
                         for(int _injected_loop_counter = int((mix(float((injectionSwitch.x)), float((- 0.6)), bool(false)))); _injected_loop_counter != ((1 << (~ (~ ((0 ^ ((((((((false) || false)) || false) ? (abs(42584)) : int(2)))))))))) >> (int(2))); _injected_loop_counter ++)
                          {
                           for(int _injected_loop_counter = 0; (((((bool(bool(_injected_loop_counter < 1))) || false))) || false); _injected_loop_counter ++)
                            {
                             do
                              {
                               for(int _injected_loop_counter = ((1 << (int(1))) >> (int(1))); _injected_loop_counter > 0; _injected_loop_counter --)
                                {
                                 if(true)
                                  {
                                   if((false))
                                    {
                                     for(int _injected_loop_counter = 1; (bool(bvec2(_injected_loop_counter != int((injectionSwitch.x)), false))); (0 | (_injected_loop_counter --)))
                                      {
                                       do
                                        {
                                         for(int _injected_loop_counter = 0; _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
                                          {
                                           if(((injectionSwitch.x > injectionSwitch.y)))
                                            {
                                            }
                                           else
                                            {
                                             do
                                              {
                                               if((! (! (false))))
                                                {
                                                }
                                               else
                                                {
                                                 barrier();
                                                }
                                              }
                                             while(false);
                                            }
                                          }
                                        }
                                       while(((injectionSwitch.x > injectionSwitch.y)));
                                      }
                                    }
                                  }
                                 else
                                  {
                                  }
                                }
                              }
                             while(((injectionSwitch.x > injectionSwitch.y)));
                            }
                          }
                        }
                      }
                     while(false);
                    }
                  }
                 else
                  {
                  }
                }
              }
            }
           else
            {
            }
          }
         else
          {
          }
        }
       while(false);
      }
     else
      {
      }
    }
  }
 while((((bool(((bvec3(bvec4(bvec3(bvec4(bvec3(injectionSwitch.x > (min(((true ? injectionSwitch : (injectionSwitch))), injectionSwitch)).y, true, true), ((injectionSwitch.x < injectionSwitch.y)))), false)))))))));
 uint next_virtual_gid = workgroup_base + (max((0u + ((~ (1u * ((~ (((max(((uint(uvec2(((subgroup_id) >> 0u), 0u))) << 0u), uint(uvec2(((subgroup_id) >> 0u), 0u))))) * subgroup_size))))))), (0u ^ (((max(((uint(uvec2(((subgroup_id) >> 0u), 0u))) << 0u), uint(uvec2(((subgroup_id) >> 0u), 0u))))) * subgroup_size)))) + ((min((0u | ((subgroup_local_id + 1) % subgroup_size)), (min((subgroup_local_id + 1) % subgroup_size, (subgroup_local_id + 1) % subgroup_size)))));
 for(int _injected_loop_counter = (0 | ((0 + (1)))); (bool(bvec3(_injected_loop_counter != (1 ^ (max(1, 1))), true, true))); _injected_loop_counter --)
  {
   do
    {
     do
      {
       for(int _injected_loop_counter = (((0 ^ (((((((true ? int((injectionSwitch.y)) : (- 38318)) ^ (0 << (max((int(8)), (int(8))))))) | (((true ? int((injectionSwitch.y)) : (- 38318)) ^ (0 << (max((int(8)), (int(8)))))))))))) << (((1 * (((clamp(int(((true ? (max(((3) ^ 0), ((((3) ^ 0)) / (1 | 1)))) : ((_injected_loop_counter))))), int(3), int(3))))))) << 0)) >> (int((((((max(3, 3))) / 1)) - 0)))); _injected_loop_counter != 0; _injected_loop_counter --)
        {
         if(false)
          {
          }
         else
          {
           if(true)
            {
             if(true)
              {
               if((! ((bool(bvec3(! ((! (! (false)))), (false || (true)), false))))))
                {
                }
               else
                {
                 if(false)
                  {
                  }
                 else
                  {
                   do
                    {
                     buf[virtual_gid] = 1;
                    }
                   while(false);
                  }
                }
              }
             else
              {
              }
            }
           else
            {
            }
          }
        }
      }
     while(false);
    }
   while(false);
  }
 if(((injectionSwitch.x < injectionSwitch.y)))
  {
   for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
    {
     do
      {
       if((! (! (subgroup_local_id + 1 < subgroup_size))))
        {
         for(int _injected_loop_counter = 0; (false || (_injected_loop_counter != ((max(((((int(int((int(int((int(ivec2(1 << (((int(7)) | (int(7)))), 1))))))))))) - 0), (1 << (int(7))))) >> (int(7))))); _injected_loop_counter ++)
          {
           if(false)
            {
            }
           else
            {
             for(int _injected_loop_counter = 0; (0 | ((int(ivec3((int(ivec3(_injected_loop_counter, 1, 1))), int((injectionSwitch.y)), 0))))) < int((injectionSwitch.y)); _injected_loop_counter ++)
              {
               for(int _injected_loop_counter = (((1 | 1) * 1)); _injected_loop_counter != 0; _injected_loop_counter --)
                {
                 for(int _injected_loop_counter = (max((1 * (int(((min(injectionSwitch.x, injectionSwitch.x)))))), (1 * (int(((min(injectionSwitch.x, injectionSwitch.x)))))))); _injected_loop_counter != (max((min((((false ? (_injected_loop_counter) : (1 << (((((~ (~ ((0 ^ (~ ((~ (~ (max((~ ((max(int(2), int(2))))), (((~ (int(2)))) * 1)))))))))))) | (~ ((~ (~ (max((~ ((max(int(2), int(2))))), (((~ (int(2)))) * 1))))))))))) >> (((((((false ? (97016) : int(2)))) - (max((clamp(0, 0, 0)), 0)))) >> ((((0) >> 0)) ^ 0)))))), (((((false ? (_injected_loop_counter) : (((1) * ((1 << (int(1))) >> (int(1)))) << ((~ ((~ (~ (max((~ ((max(int(2), int(2))))), (((~ (int(2)))) * 1))))))))) >> (((((((((false ? (97016) : int(2)))) - (max((clamp(0, 0, 0)), 0)))) ^ 0)) >> ((((0) >> ((0) | 0))) ^ 0))))))) | ((((((false ? (_injected_loop_counter) : (1 << ((~ ((~ (~ (max((((~ ((max(int(2), int(2)))))) | 0), (((~ (int(2)))) * 1))))))))) >> (((((((false ? (97016) : int(2)))) - (max((clamp(0, 0, ((((0) << 0)) | (0)))), 0)))) >> ((((0) >> 0)) ^ 0)))))) / int((injectionSwitch.y)))))))), (int(((min((ivec3(0, 0, 0) | ((ivec3(((1 << ((~ (((((max((~ ((max(int(2), ((int(2)) ^ 0))))), (((~ (int(2)))) * 1))) >> 0)) << 0))))) >> (((((((((((int((ivec3(ivec4(ivec3((false ? (97016) : int(2)), 0, 0), 0)))))))) << 0) - 0)) >> 0)) + 0))), 1, 0)))) ^ ivec3(0, 0, 0), ((ivec3(ivec3(ivec3(((1 << ((~ (((max((~ ((max(int(2), int(2))))), ((min(((~ (clamp((((int(2))) - 0), (clamp((int(2)), (((int(2))) ^ 0), (((int(2))) + 0))), (int(2)))))), ((~ (clamp((((int(2))) - 0), (clamp((int(2)), (((int(2))) ^ 0), (((int(2))) + 0))), (int(2)))))))) * 1))) | (max((~ ((max(int(2), int(2))))), ((min(((~ (clamp((((int(2))) - 0), (clamp((int(2)), (((int(2))) ^ 0), (((int(2))) + 0))), (int(2)))))), ((~ (clamp((((int(2))) - 0), (clamp((int(2)), (((int(2))) ^ 0), (((int(2))) + 0))), (int(2)))))))) * 1)))))))) >> (((((((((false ? (97016) : int(2)))) - 0)) >> 0)) | (((((((false ? (97016) : int(2)))) - 0)) >> 0))))), 1, 0))))) ^ (((ivec3(1, 1, 1) ^ ivec3(1, 1, 1)) >> (ivec3((max(1, 1))))) + (ivec3(0, 0, 0)))))))))); _injected_loop_counter ++)
                  {
                   do
                    {
                     if((! (! ((((true && (injectionSwitch.x < ((false ? (tanh(- 5.6)) : injectionSwitch.y))))))))))
                      {
                       do
                        {
                         if(false)
                          {
                          }
                         else
                          {
                           do
                            {
                             for(int _injected_loop_counter = (clamp(((0) | (0)), ((0) / 1), 0)); _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
                              {
                               do
                                {
                                 atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 0);
                                }
                               while((bool(bvec2((((((true && ((false || (false))))) || ((false) && true)) || false)), false))));
                              }
                            }
                           while((! (! (false))));
                          }
                        }
                       while(((((injectionSwitch.x > injectionSwitch.y) || false))));
                      }
                     else
                      {
                      }
                    }
                   while((bool(bvec4((false || ((false || (false)))), false, false, ((injectionSwitch.x > injectionSwitch.y))))));
                  }
                }
              }
            }
          }
         for(int _injected_loop_counter = (((1 << (int(4))) >> (0 ^ ((((((int(4))) + 0)) / 1)))) ^ 0); (! (! (_injected_loop_counter != 0))); _injected_loop_counter --)
          {
           if(true)
            {
             if(true)
              {
               do
                {
                 if(true)
                  {
                   do
                    {
                     subgroupAll(false);
                    }
                   while((((false || (((injectionSwitch.x < injectionSwitch.y)))) && (false)) || (((bool(bool(true && (bool(bool((((false) || false))))))))))));
                  }
                 else
                  {
                  }
                }
               while(false);
              }
             else
              {
              }
            }
           else
            {
            }
          }
        }
       else
        {
         if(false)
          {
          }
         else
          {
           if(true)
            {
             for(int _injected_loop_counter = ((1 & 1) ^ ((1 << (((int(7))) * 1)) >> (int(7)))); _injected_loop_counter < 1; _injected_loop_counter ++)
              {
               for(int _injected_loop_counter = ((clamp(1, 1, 1)) & (((0 ^ (1))) - 0)); _injected_loop_counter != (((clamp(0, 0, 0))) ^ (0 | 0)); _injected_loop_counter --)
                {
                 if(false)
                  {
                  }
                 else
                  {
                   do
                    {
                     do
                      {
                       do
                        {
                         if((bool((true && (bool((((! (((! ((bool(bvec2(((bool(bvec4((! ((bool(bool(! (true && (true))))))), true, false, true)))), true))))) || (! (! (((false) || false)))))))) || (bool(bvec4(false, false, true, ((injectionSwitch.x < injectionSwitch.y))))))))))))
                          {
                           for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
                            {
                             if((! ((bool(bool(! ((! (! ((bool(bvec2((true && (false)), true)))))))))))))
                              {
                              }
                             else
                              {
                               if((((((max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)) && true)))
                                {
                                }
                               else
                                {
                                 if(true)
                                  {
                                   if((bool(bvec4(false, true, true, true))))
                                    {
                                    }
                                   else
                                    {
                                     if(true)
                                      {
                                       do
                                        {
                                         if(false)
                                          {
                                          }
                                         else
                                          {
                                           do
                                            {
                                             for(int _injected_loop_counter = (((max((((0 << (((int(7)) - 0))) / 1)), (0 << (((int(7)) - 0)))))) + 0); ((_injected_loop_counter < 1) || false); _injected_loop_counter ++)
                                              {
                                               for(int _injected_loop_counter = 1; ((_injected_loop_counter != ((((1 * (int(((((min((ivec3((int(int(0))), 1, 1)) / ivec3(1, 1, 1), (ivec3((int(int(0))), 1, 1)) / ivec3(1, 1, 1)))) + ivec3(0, 0, 0))))))) / 1))) || false); _injected_loop_counter --)
                                                {
                                                 for(int _injected_loop_counter = 0; _injected_loop_counter != ((1 << (int((0 | (5))))) >> (int(5))); _injected_loop_counter ++)
                                                  {
                                                   if(false)
                                                    {
                                                    }
                                                   else
                                                    {
                                                     if((true && ((! ((true && (! (bool(bvec3((false), false, false))))))))))
                                                      {
                                                      }
                                                     else
                                                      {
                                                       for(int _injected_loop_counter = ((false ? (_injected_loop_counter) : 0)); ((_injected_loop_counter < 1) || ((injectionSwitch.x > injectionSwitch.y))); _injected_loop_counter ++)
                                                        {
                                                         atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 0);
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                           while(false);
                                          }
                                        }
                                       while(false);
                                      }
                                     else
                                      {
                                      }
                                    }
                                  }
                                 else
                                  {
                                  }
                                }
                              }
                            }
                          }
                         else
                          {
                          }
                        }
                       while((bool(bvec2(false, false))));
                      }
                     while(false);
                    }
                   while(false);
                  }
                }
              }
            }
           else
            {
            }
          }
         if((false || (true)))
          {
           if(true)
            {
             for(int _injected_loop_counter = ((clamp(0, 0, 0)) | 0); _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
              {
               subgroupAll(true);
              }
            }
           else
            {
            }
          }
         else
          {
          }
        }
      }
     while((bool(((((! (! ((bool(false))))) || false)) || false))));
    }
  }
 else
  {
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
