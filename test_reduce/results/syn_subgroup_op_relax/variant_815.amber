#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec2 GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size;
 uvec4 GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id;
 uint subgroup_id = gl_SubgroupID;
 for(int _injected_loop_counter = ((((min((0 ^ 1), (0 ^ 1))) << (((int(1))) - 0)) >> (int(1))) ^ 0); _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
  {
   GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id.z = subgroup_id;
  }
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((false))
  {
   if(((! (! (false)))))
    return;
   if((false))
    return;
   for(int _injected_loop_counter = (0 & - 32012); (bool(bvec2(_injected_loop_counter != 1, ((injectionSwitch.x > injectionSwitch.y))))); _injected_loop_counter ++)
    {
     return;
    }
  }
 do
  {
   do
    {
     if(false)
      {
      }
     else
      {
       for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
        {
         if((false))
          continue;
         GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id.w = subgroup_local_id;
        }
      }
    }
   while(((false) || false));
  }
 while(false);
 if((((((bool(bvec3((false), true, true)))) || ((! (bool(bvec3((false || ((! ((injectionSwitch.x > (min(injectionSwitch.y, (vec2(injectionSwitch[0], injectionSwitch[1])).y))))))), true, true))))))) || false))
  return;
 if(false)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
   if(false)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
     for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
      {
       if((false))
        {
         for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
          {
           return;
          }
        }
      }
    }
  }
 if((false))
  return;
 uint num_workgroup = (((max((((((uvec3(uvec4(gl_NumWorkGroups, 0u)))) | (gl_NumWorkGroups)).x) | 0u), (((uvec3(uvec4(gl_NumWorkGroups, 0u)))) | (gl_NumWorkGroups)).x)) >> 0u));
 GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id.y = num_workgroup;
 for(int _injected_loop_counter = (int((injectionSwitch.x)) >> (int(5))); _injected_loop_counter < 1; _injected_loop_counter ++)
  {
   for(int _injected_loop_counter = 0; _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
    {
     if((false))
      {
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         if((((((! (! (bool((bvec2(bvec3(bvec2(bool((bvec2(bvec4(bvec2((injectionSwitch.x > injectionSwitch.y), false), true, true)))), true), false))))))))))))
          break;
         return;
        }
      }
    }
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(false)
  {
  }
 else
  {
   if(false)
    {
    }
   else
    {
     do
      {
       GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.y = workgroup_size;
      }
     while((! (! (((false) && true)))));
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 if((((((bool(bvec2(! (((! (false)) || false)), true)))) || false))))
  {
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
    }
   else
    {
     if(true)
      {
       if((false))
        return;
      }
     else
      {
      }
     if(((true && ((((true && (false))) && true)))))
      return;
    }
   for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
    {
     if(true)
      {
       do
        {
         return;
        }
       while(false);
       if((false))
        break;
      }
     else
      {
      }
    }
  }
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.y * workgroup_id;
 if((true && (((((((! (! ((max(injectionSwitch.x, (clamp((max(injectionSwitch.x, (min(injectionSwitch.x, injectionSwitch.x)))), injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y)))))) || false)))))
  {
   do
    {
     return;
    }
   while(false);
  }
 uint virtual_gid = workgroup_base + ((((GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id.z) - (0u | 0u))) ^ 0u) * subgroup_size + ((GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id.w) << 0u);
 for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
  {
   GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.x = virtual_gid;
  }
 uint next_virtual_gid = workgroup_base + GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id.z * subgroup_size + ((false ? (workgroup_base) : (((true ? ((min(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id, ((clamp(((uvec4(0u, 0u, 0u, 0u) ^ ((uvec4(0u, 0u, 0u, 0u) ^ (max(uvec4(0u, 0u, 0u, 0u) | (GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id), uvec4(0u, 0u, 0u, 0u) | (GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id))))))), uvec4(0u, 0u, 0u, 0u) | (GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id), (~ ((uvec4(0u, 0u, 0u, 0u) ^ (~ (uvec4(0u, 0u, 0u, 0u)))))) | (GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id)))))).w + 1) : (virtual_gid))) % subgroup_size)));
 do
  {
   if((false))
    break;
   if(false)
    {
    }
   else
    {
     for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
      {
       GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id.x = next_virtual_gid;
      }
    }
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
    }
   else
    {
     if((false))
      return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    {
     if((((max(injectionSwitch.x, ((((true ? injectionSwitch.x : (- 1.1)))) / 1.0))) > injectionSwitch.y)))
      {
      }
     else
      {
       return;
      }
    }
  }
 while(false);
 ((buf[GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size.x] = 1) - ((true ? 0u : (subgroup_size))));
 for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != 1; _injected_loop_counter ++)
  {
   if(((! ((true && (! ((! (! (false))))))))))
    break;
   if((false))
    return;
  }
 if((false))
  return;
 if(((((clamp(injectionSwitch, ((max(((false ? (injectionSwitch) : vec2(0.0, 0.0) + (((((injectionSwitch.x > injectionSwitch.y)) ? (injectionSwitch) : ((injectionSwitch) + vec2(0.0, 0.0))))))), vec2(0.0, 0.0) + (((injectionSwitch) + vec2(0.0, 0.0)))))), injectionSwitch)).x > injectionSwitch.y))))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if(false)
  {
  }
 else
  {
   if(true)
    {
     if((false))
      return;
     if((((~ (~ (GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id))).w) << 0u) + 1 < subgroup_size)
      {
       for(int _injected_loop_counter = ((1 << (int(3))) >> ((1 * (((int(3)) - 0))))); _injected_loop_counter != ((int((mix(float((mix(float((((injectionSwitch.x)) / 1.0)), float((1.6)), bool(false)))), float(((+ 0.8))), bool(((injectionSwitch.x > injectionSwitch.y))))))) * 1); _injected_loop_counter --)
        {
         if((false))
          {
           if((false))
            continue;
           for(int _injected_loop_counter = (0 | 0); _injected_loop_counter != 1; _injected_loop_counter ++)
            {
             do
              {
               do
                {
                 return;
                }
               while(((injectionSwitch.x > injectionSwitch.y)));
              }
             while(((false) && true));
            }
          }
        }
       if(((((((((bool(bvec2((! (! (false))), false))) || (! (! ((((! (! (false))) && ((injectionSwitch.x < injectionSwitch.y)))))))))) && true) || false))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if(false)
          {
           if((false))
            return;
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = 1; _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
              {
               return;
              }
            }
          }
         if(false)
          {
          }
         else
          {
           for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
            {
             return;
            }
          }
        }
       for(int _injected_loop_counter = (1 * (0)); _injected_loop_counter < ((((~ (~ ((((((true ? int((injectionSwitch.y)) : (atomicOr(_injected_loop_counter, - 20407)))) << (int(((1) - 0)))) - 0)) >> (int(1)))))) << (int(2))) >> (int(((ivec3((((((min((int(int((int(2))))), (int(((false ? (ivec4(98918, 56158, - 24104, - 84649)) : ivec4((int(2)), 0, 0, 0))))))) | (min((int(((((injectionSwitch.x < injectionSwitch.y)) ? int((int(2))) : (_injected_loop_counter))))), (int(((((false ? (ivec4(98918, 56158, - 24104, - 84649)) : ivec4((int(2)), 0, 0, 0))) / ivec4(1, 1, 1, 1))))))))) ^ (0 << ((int((ivec2(ivec2(((ivec2(int((clamp(6, 6, 6))), 1)) | ivec2(0, 0))))))))))), 0, ((((1) << 0)) / 1))) << ivec3(((0) * 1), 0, 0))))); _injected_loop_counter ++)
        {
         if((false))
          {
           if((((! (! ((! (! (injectionSwitch.x > injectionSwitch.y)))))))))
            {
             if((false))
              continue;
             if((false))
              break;
            }
           else
            {
             return;
            }
          }
        }
       do
        {
         if(((((mix(float((min(round(length(normalize(1.0))), round(length(normalize(1.0)))))), float((24.44)), bool(false))) * (mix(float((6.4)), float((injectionSwitch.x)), bool(true)))) < injectionSwitch.y)))
          {
           for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
            {
             if(((injectionSwitch.x < injectionSwitch.y)))
              {
               for(int _injected_loop_counter = (1 & 1); _injected_loop_counter > 0; _injected_loop_counter --)
                {
                 atomicStore(buf[((false ? (113869u) : GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id.x))], uint(((true ? ((true ? ((2) >> 0) : (46262))) : (bitCount(3486))))), 4, 64, 0);
                }
              }
             else
              {
              }
            }
          }
         else
          {
          }
        }
       while(false);
       subgroupAll(false);
       if((false))
        {
         do
          {
           if((((((bool(bvec3(injectionSwitch.x < injectionSwitch.y, false, true))) || ((false || (bool(bvec4(false, false, true, false))))))))))
            {
             if(false)
              {
               if(((! ((((false || ((! (! (! (((false) || false)))))))) || false)))))
                return;
              }
             else
              {
               return;
              }
            }
           else
            {
            }
          }
         while((((bool(bvec4((bool(bvec3(false, false, true))), ((injectionSwitch.x > injectionSwitch.y)), false, true))) && true)));
         if((false))
          return;
        }
      }
     else
      {
       if(((! ((false || (! (! ((bool((true && ((! (! (bool(((! (! (! (((((injectionSwitch.x > (clamp(injectionSwitch, injectionSwitch, (((true ? clamp(injectionSwitch, injectionSwitch, injectionSwitch) : (vec2(- 9.3, 594.725))))))).y)) && true)))))))))))))))))))))))
        return;
       for(int _injected_loop_counter = (~ (~ (((0) >> 0)))); _injected_loop_counter < ((0 | ((1 << (int(2))) >> (int(2))))); ((false ? (_injected_loop_counter) : _injected_loop_counter ++)))
        {
         if((false))
          continue;
         if((false))
          return;
        }
       atomicStore(buf[(((max((0u + (((GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id.x) | (((0u << (uint((max((clamp(8u, 8u, 8u)), 8u))))) + (1u ^ 1u)))) - 0u)), (~ (((~ (((GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id.x) | (((0u << (uint((max((clamp(8u, 8u, 8u)), 8u))))) + (1u ^ 1u)))) - 0u)) / 1u)))))))], uint(2), (max(4, (clamp(4, 4, 4)))), 64, ((((0) >> 0)) | (0)));
       do
        {
         if((! (! (true))))
          {
           if(((((injectionSwitch.x > injectionSwitch.y)) || ((injectionSwitch.x < injectionSwitch.y)))))
            {
             if(false)
              {
              }
             else
              {
               if(false)
                {
                }
               else
                {
                 for(int _injected_loop_counter = (((int(ivec2(1, 1)))) ^ 0); _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
                  {
                   do
                    {
                     if(true)
                      {
                       if((false))
                        return;
                       subgroupAll(true);
                      }
                     else
                      {
                      }
                     if(((((float(vec4(injectionSwitch.x, cos(0.0), 1.0, 1.0))) > (vec2((clamp(injectionSwitch[0], injectionSwitch[0], (max(injectionSwitch[0], injectionSwitch[0])))), injectionSwitch[1])).y))))
                      continue;
                    }
                   while((! (((! (false)) && (bool(bvec4(true, true, ((injectionSwitch.x < injectionSwitch.y)), true)))))));
                  }
                }
              }
            }
           else
            {
             if(false)
              {
              }
             else
              {
               if((false || ((false))))
                {
                 if((((((injectionSwitch.x > (min(((false ? (- 267.222) : injectionSwitch.y)), injectionSwitch.y)))) || ((injectionSwitch.x > injectionSwitch.y))))))
                  return;
                 return;
                }
              }
            }
          }
         else
          {
          }
        }
       while(false);
      }
    }
   else
    {
    }
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
