#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = (min(gl_NumWorkGroups, (((uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], gl_NumWorkGroups[(~ (~ (2)))]))) - uvec3(0u, 0u, 0u)))).x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = ((uvec3(uvec3((max(uvec3((~ (~ (((gl_WorkGroupID) >> uvec3(0u, 0u, 0u)))))[0], ((true ? gl_WorkGroupID : (uvec3(195542u, 142095u, 17654u))))[1], gl_WorkGroupID[2]), uvec3((~ (~ (((gl_WorkGroupID) >> uvec3(0u, 0u, 0u)))))[0], ((true ? gl_WorkGroupID : (uvec3(195542u, (uint(uint(142095u))), 17654u))))[1], gl_WorkGroupID[2]))))))).x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = ((((workgroup_base + (((((((false ? (num_workgroup) : (subgroup_id) | ((~ (~ (subgroup_id)))))))) | 0u)) | ((((max(subgroup_id, subgroup_id))) | ((((0u ^ (min(((~ (~ (((subgroup_id) ^ 0u)))) >> uint((injectionSwitch.x))), ((0u << (uint(4u))) | (~ (~ (subgroup_id))))))))))))) * subgroup_size) * 1u)) | (0u & 121566u)) + subgroup_local_id;
 uint next_virtual_gid = ((true ? workgroup_base + subgroup_id * subgroup_size + ((((min((uint(uvec2((((((((uint((max(uint((~ (~ (((((clamp((((((uint((max((injectionSwitch.x), (1.0 * ((injectionSwitch.x)))))) ^ ((min((max(subgroup_local_id, ((subgroup_local_id) * 1u))), (1u * (subgroup_local_id)))))) | (uint((max((injectionSwitch.x), (1.0 * ((injectionSwitch.x)))))) ^ ((min((max(subgroup_local_id, ((subgroup_local_id) * 1u))), (1u * (subgroup_local_id)))))))) + 0u)), (uint(((max((clamp((false ? (- 674.992) : (((max((injectionSwitch.x), (1.0 * (((min(injectionSwitch, injectionSwitch)).x))))) / 1.0))), (false ? (- 674.992) : (((max((injectionSwitch.x), (1.0 * ((injectionSwitch.x))))) / 1.0))), (false ? (- 674.992) : (((max((injectionSwitch.x), (1.0 * ((injectionSwitch.x))))) / 1.0))))), (false ? (- 674.992) : (((max((injectionSwitch.x), (1.0 * ((injectionSwitch.x))))) / 1.0))))))) ^ ((min(subgroup_local_id, (1u * (subgroup_local_id)))))), (uint((max((injectionSwitch.x), (1.0 * (((((max(injectionSwitch.x, injectionSwitch.x)))) - 0.0)))))) ^ ((min(subgroup_local_id, (1u * (subgroup_local_id)))))))))) - 0u))))), uint(((((clamp((uint((max((injectionSwitch.x), ((clamp(1.0, (max(1.0, 1.0)), 1.0)) * ((injectionSwitch.x)))))) ^ ((min((max(subgroup_local_id, ((subgroup_local_id) * 1u))), (1u * (subgroup_local_id)))))), (((uint(((max((clamp((false ? (- 674.992) : (((max((injectionSwitch.x), (1.0 * ((injectionSwitch.x))))) / 1.0))), ((clamp(false ? (- 674.992) : (((max((injectionSwitch.x), (1.0 * ((injectionSwitch.x))))) / 1.0)), false ? (- 674.992) : (((max((injectionSwitch.x), (1.0 * ((injectionSwitch.x))))) / 1.0)), false ? (- 674.992) : (((max((injectionSwitch.x), (1.0 * ((injectionSwitch.x))))) / 1.0))))), (false ? (- 674.992) : (((max((injectionSwitch.x), (1.0 * ((injectionSwitch.x))))) / 1.0))))), (false ? (- 674.992) : (((max((injectionSwitch.x), (1.0 * ((injectionSwitch.x))))) / 1.0))))))) ^ ((min(subgroup_local_id, (1u * (subgroup_local_id)))))) - 0u)), (uint((mix(float((- 0.9)), float((max((injectionSwitch.x), (1.0 * (((((max(injectionSwitch.x, injectionSwitch.x)))) - 0.0)))))), bool(true)))) ^ ((min(subgroup_local_id, (1u * (subgroup_local_id)))))))))) - 0u))))))) >> (0u << (uint(7u))))) | 0u) | ((uint((max(((max((mix(float(float(float(((max((max(injectionSwitch, injectionSwitch)), injectionSwitch)).x)))), float((- 764.464)), bool(false))), float(float((injectionSwitch.x)))))), (1.0 * ((injectionSwitch.x)))))) ^ ((min(subgroup_local_id, (1u * (~ (~ ((clamp((subgroup_local_id), ((((max(subgroup_local_id, subgroup_local_id)))) << 0u), (max((subgroup_local_id), ((false ? (subgroup_size) : (subgroup_local_id))))))))))))))))) + 0u), 0u))), uint((max((((injectionSwitch) * mat2((injectionSwitch.y))).x), (injectionSwitch.x)))) ^ ((min(subgroup_local_id, (1u * (subgroup_local_id)))))))) + 1) % subgroup_size) : (uaddCarry(num_workgroup, workgroup_size, workgroup_id))));
 buf[virtual_gid] = 1;
 if(((clamp(uint(uvec2((0u ^ (((true ? subgroup_local_id + 1 : (6387u))))), 1u)), uint(uvec2((0u ^ (((true ? subgroup_local_id + (clamp(((((1) << 0)) - 0), 1, 1)) : (6387u))))), 1u)), uint(uvec2((0u ^ (((true ? subgroup_local_id + 1 : (6387u))))), 1u))))) < subgroup_size)
  {
   atomicStore(buf[next_virtual_gid], ((false ? (virtual_gid) : (0u + (((((uint(2))) << 0u) * uint((injectionSwitch.y))))))), 4, 64, 0);
   subgroupAll(false);
  }
 else
  {
   atomicStore(buf[(~ (~ (next_virtual_gid)))], uint(2), 4, 64, (max(0, (0 | (0)))));
   subgroupAll(true);
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
