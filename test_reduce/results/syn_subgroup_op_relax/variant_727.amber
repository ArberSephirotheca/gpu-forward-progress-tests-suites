#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((((((((((false ? (- 468.321) : (((max((float(vec2(min(injectionSwitch.x, injectionSwitch.x), 1.0))), min(injectionSwitch.x, injectionSwitch.x)))) - 0.0)))) < injectionSwitch.y)) && (false))) && true)))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
  }
 if((false))
  barrier();
 if((true && ((((injectionSwitch.x > injectionSwitch.y))))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((false))
  {
   if((((injectionSwitch.x > (mix(float((5.6)), float(((false ? (- 0.9) : (max((mix(float((449.186)), float((min(injectionSwitch.y, injectionSwitch.y))), bool(true))), ((false ? (- 9.2) : injectionSwitch.y))))))), bool(true)))))))
    barrier();
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   if(((! (((injectionSwitch.x < injectionSwitch.y)) && ((! (false)))))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   barrier();
   if((false))
    barrier();
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_size = (max((~ ((uvec3((max(((((bool(bvec2((injectionSwitch.x < injectionSwitch.y), true)))) ? ((uvec4((max(~ (gl_WorkGroupSize), ~ (gl_WorkGroupSize))), ((max(0u, 0u)) & (clamp(66752u, ((66752u) + 0u), (min(66752u, 66752u))))))) << uvec4(0u, 0u, 0u, 0u)) : (uvec4(24529u, 169888u, 151048u, 91524u)))), ((((bool(bvec2((injectionSwitch.x < injectionSwitch.y), true)))) ? ((uvec4((max(~ (gl_WorkGroupSize), ~ (gl_WorkGroupSize))), ((max(0u, 0u)) & (clamp(66752u, ((66752u) + 0u), (min(66752u, 66752u))))))) << uvec4(0u, 0u, 0u, 0u)) : (uvec4(24529u, 169888u, 151048u, 91524u)))))))))).x, (~ (~ ((uint((clamp(uvec2((~ ((false ? (uvec3(151674u, 4995u, 67477u)) : ((uvec3((((true ? (((true && ((bool(bvec2((injectionSwitch.x < injectionSwitch.y), true)))))) ? ((uvec4((max(~ (gl_WorkGroupSize), ~ (gl_WorkGroupSize))), (0u & 66752u))) << uvec4(0u, 0u, 0u, 0u)) : (uvec4(24529u, 169888u, 151048u, 91524u))) : (uvec4(97566u, 140808u, 190796u, 20882u))))))))))).x, 1u), uvec2((~ ((false ? (uvec3(151674u, 4995u, 67477u)) : ((uvec3((((true ? (((true && ((bool(bvec2((injectionSwitch.x < injectionSwitch.y), true)))))) ? ((uvec4(0u, 0u, 0u, 0u) | ((uvec4((max(~ (gl_WorkGroupSize), ~ (gl_WorkGroupSize))), (0u & 66752u))) << uvec4(0u, 0u, 0u, 0u)))) : (uvec4(24529u, 169888u, 151048u, 91524u))) : (uvec4(97566u, 140808u, 190796u, 20882u))))))))))).x, 1u), uvec2((~ ((false ? (uvec3(151674u, 4995u, 67477u)) : ((uvec3((((true ? (((true && ((bool(bvec2(((max(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y), true)))))) ? ((uvec4((max(~ (gl_WorkGroupSize), ~ (gl_WorkGroupSize))), (0u & 66752u))) << uvec4(0u, 0u, 0u, 0u)) : (uvec4(24529u, 169888u, 151048u, 91524u))) : (uvec4(97566u, 140808u, 190796u, 20882u))))))))))).x, 1u))))))))));
 uint workgroup_id = gl_WorkGroupID.x;
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  {
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((((((injectionSwitch.x > injectionSwitch.y) || false)))))
    barrier();
   barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 uint workgroup_base = ((73202u & 0u) ^ (workgroup_size * ((workgroup_id) / (~ (((false ? (workgroup_size) : ~ (((1u << (uint(1u))) >> (uint(1u)))))))))));
 uint virtual_gid = (max(workgroup_base, (clamp(workgroup_base, workgroup_base, workgroup_base)))) + subgroup_id * subgroup_size + subgroup_local_id;
 if((false))
  barrier();
 if((((injectionSwitch.x > (vec2(0.0, 0.0) + (injectionSwitch)).y))))
  barrier();
 if((((((false ? (- 7.6) : ((injectionSwitch.x) - 0.0))) > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
 uint next_virtual_gid = workgroup_base + subgroup_id * ((((true ? subgroup_size : ((uint(uvec4(((((((((virtual_gid) ^ (0u >> (uint(3u)))) / 1u)))) * (0u ^ 1u)) | ((clamp(((virtual_gid) ^ (0u >> (uint(3u)))), ((virtual_gid) ^ (0u >> (uint(3u)))), ((virtual_gid) ^ (0u >> (uint(3u)))))))), 1u, 1u, ((((max(((((1u * (1u << (uint(((3u) >> 0u)))))) >> (uint(3u))) << (uint(5u))), ((((1u * (1u << (uint(((3u) >> 0u)))))) >> (uint(3u))) << (uint(5u)))))) | 0u) >> (uint(5u)))))))))) | (((false ? (workgroup_id) : subgroup_size)))) + ((clamp((subgroup_local_id + 1), (subgroup_local_id + ((1) >> 0)), (max((subgroup_local_id + 1), (subgroup_local_id + 1))))) % subgroup_size);
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if(((((max((((max(injectionSwitch.x, injectionSwitch.x)) + 0.0)), injectionSwitch.x)) > injectionSwitch.y))))
    {
     if((false))
      barrier();
     if((false))
      barrier();
     barrier();
    }
   barrier();
   if((false))
    barrier();
  }
 if((false))
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   barrier();
   if((false))
    barrier();
  }
 if(((false || ((false || (false))))))
  barrier();
 buf[virtual_gid] = 1;
 if(((true && (false))))
  barrier();
 if((~ (~ (subgroup_local_id))) + ((1) | (1)) < subgroup_size)
  {
   atomicStore(buf[next_virtual_gid], uint((clamp(2, 2, 2))), 4, 64, 0);
   subgroupAll(false);
   if((false))
    {
     if(((((mix(vec2((9.4), (27.06)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((false))
    barrier();
  }
 else
  {
   if((false))
    {
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     barrier();
    }
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   atomicStore(buf[next_virtual_gid], uint(2), 4, (min((~ (~ (64))), (((0 + (int(ivec2((((((true ? (int(ivec4(64, 0, 0, 0))) : (26054))) | (int(((ivec4((max(64, 64)), (~ (~ (0))), 0, 0)) + ivec4(0, 0, 0, 0))))))) | (64), 0)))))))), ((true ? 0 : (- 19163))));
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((false)) || false))
      barrier();
     barrier();
    }
   subgroupAll(true);
   if((false))
    {
     if((((injectionSwitch.x > ((((injectionSwitch) * mat2(1.0)) + vec2(0.0, 0.0))).y))))
      {
       if((false))
        barrier();
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          barrier();
         if(((false || (false))))
          {
           if((false))
            barrier();
           barrier();
          }
         barrier();
        }
       if((false))
        barrier();
       barrier();
      }
     barrier();
    }
   if((false))
    {
     if((false))
      barrier();
     if(((bool(bvec2((! (! (false))), false)))))
      barrier();
     if(((true && ((false || (false))))))
      barrier();
     if(((true && (false))))
      barrier();
     barrier();
    }
   if(((((bool(bvec4(false, ((injectionSwitch.x < injectionSwitch.y)), false, true)))) && true)))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(((! (! (false)))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       barrier();
      }
     if(((((injectionSwitch.x < injectionSwitch.y)) && (false))))
      barrier();
     barrier();
    }
   if((true && ((((injectionSwitch.x > (vec2(mat2x3(((((injectionSwitch) / vec2(1.0, 1.0))) * vec2(1.0, 1.0)), 0.0, 1.0, 0.0, 0.0))).y))))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(((((min(((((((injectionSwitch.x > injectionSwitch.y))) || (((((1.0 * (injectionSwitch.x)) > injectionSwitch.y))) && true)) ? (float(workgroup_id)) : injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y))))
    {
     if((false))
      barrier();
     if((((((! (! ((injectionSwitch.x > injectionSwitch.y))))) && ((injectionSwitch.x < injectionSwitch.y))))))
      barrier();
     barrier();
     if((false))
      barrier();
    }
   if(((false || (false))))
    barrier();
  }
 if((false))
  barrier();
 if((((false) && true)))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 if(((((injectionSwitch.x < injectionSwitch.y)) && (false))))
  {
   if((false))
    barrier();
   barrier();
   if((false))
    barrier();
  }
 if(((((max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
