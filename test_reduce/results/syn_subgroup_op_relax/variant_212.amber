#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(((true && (false))))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((false))
  barrier();
 if((! (! ((false || ((false)))))))
  barrier();
 if(((! (! (false)))))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 if((((false) && true)))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
 uint virtual_gid = workgroup_base + (uint((((injectionSwitch) + sqrt(vec2(0.0, 0.0))).y)) * ((min(subgroup_id, subgroup_id)))) * ((subgroup_size) - (min(0u, 0u))) + (max(subgroup_local_id, subgroup_local_id));
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 uint next_virtual_gid = workgroup_base + (max(((subgroup_id) * 1u), ((subgroup_id) * 1u))) * subgroup_size + ((((((min(((~ (~ (((subgroup_local_id) ^ 0u) + 1)))) % ((uint((injectionSwitch.x)) ^ (((~ ((clamp(~ (((0u) - 0u)), ~ (((0u) - 0u)), ((~ (((((0u) - 0u))) | ((((0u) - 0u))))) * 1u)))))) ^ 0u)) ^ (subgroup_size)), (max((max((((subgroup_local_id) << 0u) + 1) % ((uint(((mix(float(injectionSwitch.x), ((false ? (43.90) : float((1464.8426)))), bool(false))))) ^ 0u) ^ (((subgroup_size) + 0u))), (~ (((clamp(uint(((uint((min(~ ((subgroup_local_id + 1) % ((uint((((injectionSwitch.x) - 0.0))) ^ 0u) ^ (subgroup_size))), (uint(uvec4(~ ((subgroup_local_id + 1) % ((uint((((injectionSwitch.x) - 0.0))) ^ 0u) ^ (subgroup_size))), 0u, 1u, 0u))))))) ^ 0u)), (min(uint(((uint((min(~ ((subgroup_local_id + 1) % ((uint((((injectionSwitch.x) - 0.0))) ^ 0u) ^ (subgroup_size))), (uint(uvec4(~ ((subgroup_local_id + 1) % ((uint((((injectionSwitch.x) - 0.0))) ^ 0u) ^ (subgroup_size))), 0u, 1u, 0u))))))) ^ 0u)), uint(((uint((min(~ ((subgroup_local_id + 1) % ((uint((((injectionSwitch.x) - 0.0))) ^ 0u) ^ (subgroup_size))), (uint(uvec4(~ ((subgroup_local_id + 1) % ((uint((((injectionSwitch.x) - 0.0))) ^ 0u) ^ (subgroup_size))), 0u, 1u, 0u))))))) ^ 0u)))), uint(((uint((min(~ ((subgroup_local_id + 1) % ((uint((((injectionSwitch.x) - 0.0))) ^ 0u) ^ (subgroup_size))), (uint(uvec4(~ ((subgroup_local_id + 1) % ((uint((((injectionSwitch.x) - 0.0))) ^ 0u) ^ (subgroup_size))), 0u, 1u, 0u))))))) ^ 0u))))))))), ((clamp(subgroup_local_id + 1, ((max(uint(uvec2(subgroup_local_id + 1, 0u)), uint(uvec2(subgroup_local_id + 1, 0u))))), (min(subgroup_local_id + 1, subgroup_local_id + 1))))) % ((uint((injectionSwitch.x)) ^ 0u) ^ ((((((((injectionSwitch.x < (mix(vec2((injectionSwitch)[0], (0.7)), vec2((1.5), (injectionSwitch)[1]), bvec2(false, (((bool(bvec2(true, true)))) || false)))).y) || false))) ? (min(max(subgroup_size, (1u * ((clamp((uint(((vec2(0.0, 0.0) + (injectionSwitch)).y)) * (subgroup_size)), subgroup_size, ((subgroup_size) | (subgroup_size))))))), (clamp(max(subgroup_size, ((~ (~ (1u * ((clamp(subgroup_size, subgroup_size, subgroup_size)))))))), max(subgroup_size, (1u * ((clamp(subgroup_size, subgroup_size, subgroup_size))))), max(subgroup_size, (1u * ((((clamp(subgroup_size, subgroup_size, subgroup_size))) / 1u)))))))) : (workgroup_id))))))))))))) | ((((min(((~ (~ (((subgroup_local_id) ^ 0u) + 1)))) % ((uint((injectionSwitch.x)) ^ (((~ ((clamp(~ (((0u) - 0u)), ~ (((0u) - 0u)), ((~ (((((0u) - 0u))) | ((((0u) - 0u))))) * 1u)))))) ^ 0u)) ^ (subgroup_size)), (max((max((((subgroup_local_id) << 0u) + 1) % ((uint(((mix(float(injectionSwitch.x), ((false ? (43.90) : float((1464.8426)))), bool(false))))) ^ 0u) ^ (((subgroup_size) + 0u))), (~ (((clamp(uint(((uint((min(~ ((subgroup_local_id + 1) % ((uint((((injectionSwitch.x) - 0.0))) ^ 0u) ^ (subgroup_size))), (uint(uvec4(~ ((subgroup_local_id + 1) % ((uint((((injectionSwitch.x) - 0.0))) ^ 0u) ^ (subgroup_size))), 0u, 1u, 0u))))))) ^ 0u)), (min(uint(((uint((min(~ ((subgroup_local_id + 1) % ((uint((((injectionSwitch.x) - 0.0))) ^ 0u) ^ (subgroup_size))), (uint(uvec4(~ ((subgroup_local_id + 1) % ((uint((((injectionSwitch.x) - 0.0))) ^ 0u) ^ (subgroup_size))), 0u, 1u, 0u))))))) ^ 0u)), uint(((uint((min(~ ((subgroup_local_id + 1) % ((uint((((injectionSwitch.x) - 0.0))) ^ 0u) ^ (subgroup_size))), (uint(uvec4(~ ((subgroup_local_id + 1) % ((uint((((injectionSwitch.x) - 0.0))) ^ 0u) ^ (subgroup_size))), 0u, 1u, 0u))))))) ^ 0u)))), uint(((uint((min(~ ((subgroup_local_id + 1) % ((uint((((injectionSwitch.x) - 0.0))) ^ 0u) ^ (subgroup_size))), (uint(uvec4(~ ((subgroup_local_id + 1) % ((uint((((injectionSwitch.x) - 0.0))) ^ 0u) ^ (subgroup_size))), 0u, 1u, 0u))))))) ^ 0u))))))))), ((clamp(subgroup_local_id + 1, ((max(uint(uvec2(subgroup_local_id + 1, 0u)), uint(uvec2(subgroup_local_id + 1, 0u))))), (min(subgroup_local_id + 1, subgroup_local_id + 1))))) % ((uint((injectionSwitch.x)) ^ 0u) ^ ((((((((injectionSwitch.x < (mix(vec2((injectionSwitch)[0], (0.7)), vec2((1.5), (injectionSwitch)[1]), bvec2(false, (((bool(bvec2(true, true)))) || false)))).y) || false))) ? (min(max(subgroup_size, (1u * ((clamp((uint(((vec2(0.0, 0.0) + (injectionSwitch)).y)) * (subgroup_size)), subgroup_size, ((subgroup_size) | (subgroup_size))))))), (clamp(max(subgroup_size, ((~ (~ (1u * ((clamp(subgroup_size, subgroup_size, subgroup_size)))))))), max(subgroup_size, (1u * ((clamp(subgroup_size, subgroup_size, subgroup_size))))), max(subgroup_size, (1u * ((((clamp(subgroup_size, subgroup_size, subgroup_size))) / 1u)))))))) : (workgroup_id)))))))))))))) - 0u);
 if((false))
  barrier();
 if(((true && ((((bool(bool(false))) && true))))))
  barrier();
 buf[virtual_gid] = 1;
 if((false))
  barrier();
 if((((false)) || false))
  barrier();
 if(((! (((bool(bool(bool(bool(! (false)))))))))))
  barrier();
 if(subgroup_local_id + ((0 + (((false ? (80312) : (1) ^ 0))))) < subgroup_size)
  {
   atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 0);
   subgroupAll(false);
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 else
  {
   if((false))
    {
     if((((false) && true)))
      barrier();
     if((false))
      barrier();
     barrier();
     if(((true && ((! ((true && (! ((! (! (false))))))))))))
      barrier();
    }
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 0);
   subgroupAll(true);
  }
 if((false))
  barrier();
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
