#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((false))
  return;
 if((false))
  barrier();
 if((false))
  return;
 if((false))
  return;
 if((false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if((false))
  return;
 if((false))
  barrier();
 if(((true && (false))))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if(((! (bool(bvec3(((bool(bvec2(bool(bvec4(((true && (! (bool((bvec3(bvec4(((bvec3(bvec4(bvec3((bvec3(bvec3(bvec3(bvec3(((! (! (((injectionSwitch.x > injectionSwitch.y)))))), true, ((((((bool(bvec2((((injectionSwitch.x < injectionSwitch.y)) || false), false))) || false))) && true)))))))), false)))), false)))))))), ((injectionSwitch.x > injectionSwitch.y)), true, true)), false)))), ((false) || false), true))))))
  {
   if((false))
    barrier();
   if((false))
    return;
   if((((injectionSwitch.x > (mat2(1.0) * (injectionSwitch)).y))))
    return;
   if((false))
    return;
   return;
  }
 if((false))
  barrier();
 if((false))
  return;
 uint subgroup_size = gl_SubgroupSize;
 if((bool(bool((((injectionSwitch.x > injectionSwitch.y)))))))
  {
   if(((((mix(vec2((- 0.5), (- 0.7)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).x > injectionSwitch.y))))
    return;
   return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  return;
 if((false))
  return;
 if((false))
  {
   if((false))
    {
     if((false))
      return;
     return;
    }
   barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = (((~ (~ (gl_NumWorkGroups.x)))) | ((clamp(gl_NumWorkGroups.x, ((gl_NumWorkGroups.x) << 0u), gl_NumWorkGroups.x))));
 uint workgroup_size = gl_WorkGroupSize.x;
 if((((false) && true)))
  {
   if((false))
    barrier();
   barrier();
  }
 if(((((vec2(injectionSwitch[0], injectionSwitch[1])).x > (vec2(injectionSwitch[0], injectionSwitch[1])).y))))
  {
   if((bool(bvec2((((injectionSwitch.x > injectionSwitch.y))), (((! (! (injectionSwitch.x < injectionSwitch.y)))))))))
    return;
   return;
  }
 uint workgroup_id = ((true ? gl_WorkGroupID.x : (0u + ((subgroup_id)))));
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id) - 0u);
 uint next_virtual_gid = ((workgroup_base + (max(((((((false ? ((++ num_workgroup)) : ((subgroup_id) / uint((injectionSwitch.y)))))) ^ (0u ^ ((0u) >> 0u))) * subgroup_size) - 0u), subgroup_id * subgroup_size)) + (((((max((((0u + ((((false ? (((workgroup_base) | ((0u >> (uint(4u))) & (max(161185u, 161185u))))) : ((0u | ((0u ^ (subgroup_local_id + 1))))) % subgroup_size) ^ uint((injectionSwitch.x))))))) ^ 0u), (min((~ (~ ((((false ? (((workgroup_base) | ((0u >> (uint(4u))) & (max(161185u, 161185u))))) : ((0u | ((0u ^ (subgroup_local_id + 1))))) % subgroup_size) ^ uint((injectionSwitch.x))))))), (((false ? (((workgroup_base) | ((0u >> (uint(4u))) & (max(161185u, 161185u))))) : ((0u | ((0u ^ (subgroup_local_id + 1))))) % subgroup_size) ^ uint((injectionSwitch.x)))))))) - 0u))))) | (workgroup_base + (max(((~ (~ (((((((((max((~ ((max(~ (subgroup_id), ~ (subgroup_id))))), subgroup_id))) / (max(uint(((min(injectionSwitch.y, injectionSwitch.y)))), uint(((min(injectionSwitch.y, injectionSwitch.y)))))))) ^ (0u ^ 0u)) * subgroup_size)) | ((((((((((subgroup_id) / uint((injectionSwitch.y)))) ^ (0u ^ 0u)) * subgroup_size)) | ((((((subgroup_id) / uint((injectionSwitch.y)))) ^ (0u ^ 0u)) * subgroup_size)))) | ((((((((subgroup_id) / uint((injectionSwitch.y)))) ^ (0u ^ 0u)) * subgroup_size)) | ((((((subgroup_id) / uint((injectionSwitch.y)))) ^ (0u ^ 0u)) * subgroup_size))))))) - 0u)))), subgroup_id * subgroup_size)) + (((((false ? (((false ? (uint(uvec3((((((((num_workgroup)) | ((num_workgroup)))) ^ 0u)) | ((num_workgroup))), 0u, 1u))) : ((workgroup_base) | ((0u | (workgroup_base))))))) : (subgroup_local_id + 1) % subgroup_size)) << 0u)))));
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((! ((! (! (! ((((true && (((true && ((((bool(bvec3(false, (((bool((bvec3(bvec3(bvec3(injectionSwitch.x < injectionSwitch.y, ((injectionSwitch.x > injectionSwitch.y)), false)))))))), false)))) || false)))) && true)))))))))))
  barrier();
 if((false))
  return;
 if(((((((! (! ((((false || ((bool((bvec2(bvec2(bvec2((! (! ((((bool(bvec2(injectionSwitch.x > (max(((false ? ((max((min(- 3.4, (mix(float((6990.9013)), float(- 3.4), bool(true))))), - 3.4))) : injectionSwitch.y)), injectionSwitch.y)), false)))) && ((((injectionSwitch.x < injectionSwitch.y))) || false))))), ((((! (! ((((injectionSwitch.x > injectionSwitch.y))))))) && true) || false))))))) && true)))))))) || false)))))
  return;
 if((((! (! (bool(bool(((injectionSwitch.x > ((injectionSwitch) - vec2(0.0, 0.0)).y))))))))))
  return;
 buf[virtual_gid] = 1;
 if(((bool(bvec4(false, true, false, false)))))
  return;
 if(((subgroup_local_id + 1) | (subgroup_local_id + 1)) < (clamp(subgroup_size, subgroup_size, subgroup_size)))
  {
   if(((((((((clamp(((vec2(mat2x4(vec2(vec4(true ? injectionSwitch : (injectionSwitch), (injectionSwitch.x), 0.0)), 1.0, 1.0, (injectionSwitch.x), 1.0, 0.0, 1.0)))), true ? injectionSwitch : (injectionSwitch), true ? injectionSwitch : (injectionSwitch)))))) * vec2(1.0, 1.0)).x > (float(vec3(injectionSwitch.y, (min((mix(float(0.0), float((18.50)), bool(false))), (float(((true ? mat4x3(0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0) : (mat4x3(154.338, 968.520, 59.03, 860.474, 6.3, 7012.7176, - 2.1, 9775.1804, 0.3, - 915.613, 60.85, 4078.4647)))))))), 0.0)))))))
    return;
   if((((bool(bvec3((((bool(bvec2((! (! (bool(bvec4((false || (false)), ((injectionSwitch.x > injectionSwitch.y)), false, true))))), true))))) && true, false, false))))))
    {
     if((((((bool(bvec4((false), false, false, ((injectionSwitch.x > injectionSwitch.y)))))) && true) || false)))
      return;
     return;
    }
   atomicStore(buf[next_virtual_gid], uint((max(2, 2))), 4, 64, 0);
   if(((bool(bvec3(false, false, true)))))
    barrier();
   subgroupAll(false);
   if((((((injectionSwitch.x > (min((min(injectionSwitch.y, injectionSwitch.y)), ((injectionSwitch.y) / 1.0))))))) || false))
    return;
   if((false))
    return;
  }
 else
  {
   if((bool((bvec2(bvec3(bvec2((false), true), false))))))
    return;
   atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 0);
   if((! ((false || (! ((false)))))))
    {
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     return;
    }
   subgroupAll(true);
  }
 if((false))
  return;
 if((((bool(bvec4(bool(bvec3((bool(bvec4(((((false) || false)) || false), false, false, true))), false, true)), (! (! (((false) && true)))), false, true))))))
  return;
 if((false))
  barrier();
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
