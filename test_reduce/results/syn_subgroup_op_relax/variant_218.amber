#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((((false) || false)))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  return;
 if((false))
  return;
 if((((((false || ((injectionSwitch.x > injectionSwitch.y)))) || false))))
  return;
 if(((((clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
  return;
 if((false))
  return;
 uint subgroup_id = gl_SubgroupID;
 if(((((max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
  return;
 if((false))
  return;
 if((false))
  return;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 if((false))
  return;
 if((false))
  return;
 uint workgroup_id = (((clamp((max(((((uint((injectionSwitch.x)) | (((max(((gl_WorkGroupID.x) - (0u | 0u)), gl_WorkGroupID.x))))) + uint((injectionSwitch.x)))) << 0u), gl_WorkGroupID.x)), (max((~ (~ ((max((max(((gl_WorkGroupID.x) + uint((injectionSwitch.x))), gl_WorkGroupID.x)), (max(((gl_WorkGroupID.x) + uint((injectionSwitch.x))), gl_WorkGroupID.x))))))), (max(((gl_WorkGroupID.x) + uint((injectionSwitch.x))), gl_WorkGroupID.x)))), (max(((gl_WorkGroupID.x) + uint((injectionSwitch.x))), gl_WorkGroupID.x))))) >> 0u);
 if((false))
  return;
 uint workgroup_base = workgroup_size * ((((injectionSwitch.x > injectionSwitch.y)) ? (subgroup_id) : workgroup_id));
 if((false))
  return;
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 if((false))
  return;
 uint next_virtual_gid = (clamp((clamp(workgroup_base + (1u * (subgroup_id)) * (0u ^ (subgroup_size)), ((false ? (atomicOr(subgroup_local_id, floatBitsToUint(3.1))) : workgroup_base)) + subgroup_id * subgroup_size, workgroup_base + ((0u + (~ (~ (((subgroup_id * (min((clamp(subgroup_size, subgroup_size, subgroup_size)), subgroup_size))) ^ (0u << (uint(8u))))))))))), workgroup_base + ((subgroup_id * subgroup_size) >> 0u), workgroup_base + subgroup_id * subgroup_size)) + (((uint(uvec3(subgroup_local_id + (((clamp(1, 1, 1))) | (1)), 1u, 0u)))) % ((subgroup_size) | (subgroup_size)));
 buf[virtual_gid] = 1;
 if((~ (~ ((max((uint(uint(subgroup_local_id))), subgroup_local_id)) + 1))) < ((uint(uvec2(uint(uvec4((((uint(uvec3(subgroup_size, uint(((mix(float((86.94)), float((((float(mat4(true ? (min(injectionSwitch.y, injectionSwitch.y)) : (- 883.378), 1.0, 0.0, (injectionSwitch.y), 0.0, length(vec2(0.0, 0.0)), 1.0, 1.0, exp(0.0), 0.0, log(1.0), determinant(mat4(0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, sin(0.0), 0.0)), 0.0, 0.0, 1.0, 0.0)))))), bool(true))))), (1u | 1u))))) | ((uint(uvec3(subgroup_size, uint((((true ? (clamp((min(injectionSwitch.y, injectionSwitch.y)), (min((1.0 * (injectionSwitch.y)), injectionSwitch.y)), (min(injectionSwitch.y, injectionSwitch.y)))) : (- 883.378))))), ((clamp(1u | 1u, 1u | 1u, (uint(uint(1u | 1u))))))))))), 0u, 1u, 0u)), 1u)))))
  {
   if(((((max((mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(((mix(float((- 196.827)), float((0.0 + (((clamp((((mix(float(- - 0.1), float((- 899.473)), bool(false)))) / 1.0), - - 0.1, (0.0 + (- - 0.1)))))))), bool(true)))), (- 7.2)), (bvec2(bvec4(bvec2(false, false), false, true))))), injectionSwitch)).x > ((max((mix(vec2((- 936.329), (1246.7677)), vec2((min(injectionSwitch, injectionSwitch))[0], (min(injectionSwitch, injectionSwitch))[1]), bvec2(true, true))), (max(min(injectionSwitch, injectionSwitch), (min(min(injectionSwitch, injectionSwitch), min(injectionSwitch, injectionSwitch)))))))).y))))
    return;
   atomicStore(buf[next_virtual_gid], uint((0 ^ (2))), 4, 64, 0);
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     return;
    }
   if((false))
    {
     if((false))
      return;
     return;
    }
   if((((! (! ((injectionSwitch.x > injectionSwitch.y)))))))
    return;
   subgroupAll((false || (false)));
   if((bool(bvec2((false), false))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    return;
   if((((false) || false)))
    return;
   if((((false)) && true))
    {
     if(true)
      {
       if((((injectionSwitch.x > (clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
       if((! (((! ((false))) && true))))
        return;
       if((! (! (((! (! (false))))))))
        {
         if(((((((! (! (bool(bvec2((true && ((injectionSwitch.x > injectionSwitch.y))), true))))))) || false))))
          return;
         return;
        }
       if((false))
        return;
      }
     else
      {
      }
    }
   if((bool(bvec2((false), false))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
   atomicStore(buf[(((0u ^ (((true ? next_virtual_gid : (num_workgroup)))))) ^ 0u)], (max((clamp(((false ? (virtual_gid) : ((uint(2)) << 0u))), uint(2), uint(2))), (((clamp((((uint(uint(false ? (virtual_gid) : uint(2)))))), uint(2), uint(2)))) ^ (uint(uvec3(0u, 0u, ((1u) >> 0u))))))), 4, 64, ((0) | (0 | 0)));
   if((false || ((((((true ? injectionSwitch : (vec2(9.1, - 26.01)))).x > injectionSwitch.y))))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   subgroupAll(((! (! ((bool(bvec2(((injectionSwitch.x < injectionSwitch.y)) && ((bool(bool(true)))), true))))))));
  }
 if((false))
  return;
 if((false))
  return;
 if((((false) && true)))
  return;
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
