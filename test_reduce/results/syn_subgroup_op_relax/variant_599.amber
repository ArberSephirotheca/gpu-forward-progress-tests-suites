#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = (max(gl_NumWorkGroups, gl_NumWorkGroups)).x;
 uint workgroup_size = ((((((injectionSwitch.x > injectionSwitch.y)) ? ((clamp(uvec3(35810u, 6209u, 176694u), (~ (~ ((uvec3(0u, 0u, 0u) | (uvec3(35810u, 6209u, 176694u)))))), uvec3(35810u, 6209u, 176694u)))) : (uvec3(0u, (~ (~ (0u))), 0u) ^ ((uvec3(gl_WorkGroupSize[0], gl_WorkGroupSize[1], gl_WorkGroupSize[2]))))) ^ uvec3(0u, 0u, 0u)))).x;
 uint workgroup_id = (uvec3(((((((0u | ((0u) + 0u))) | ((max(((true ? (0u) + 0u : (workgroup_size))), (((((0u)) | ((0u)))) | 0u) + 0u))))) / ((uint(uvec3((min((~ (~ (1u))), 1u)), 0u, 1u))) | 1u))), 0u, 0u) | (((~ (~ ((((((gl_WorkGroupID) + uvec3((min(0u, (1u * (0u)))), 0u, (((true && ((bool(bvec3(true, false, false))))) ? 0u : ((+ (subgroup_local_id | subgroup_size))))))))) + uvec3(0u, 0u, 0u)))))) ^ uvec3((~ ((~ (((~ (~ (0u))) | (~ (~ (0u)))))))), 0u, 0u))).x;
 uint workgroup_base = (((false ? ((((num_workgroup --))) / 1u) : ((((~ (~ (workgroup_size)))) >> 0u) * 1u)))) * workgroup_id;
 uint virtual_gid = (min((uint(((true ? (uvec2(((uvec2(uvec2(workgroup_base + ((((min(0u ^ ((((uint((((uvec2(uvec2(uvec2(false ? (num_workgroup) : subgroup_id, 1u)))) - uvec2(0u, 0u))))))) * subgroup_size), (min(0u ^ (((false ? (num_workgroup) : subgroup_id)) * subgroup_size), 0u ^ (((false ? (num_workgroup) : subgroup_id)) * subgroup_size))))) / 1u))), 1u))) / uvec2(1u, 1u)))) : (uvec2(21138u, (max(187191u, 187191u)))))))), ((uint(uvec4((0u ^ (uint((((max((((((! (! ((((clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y))))) ? uvec3(workgroup_base, (min(0u, 0u)), 0u) : (uvec3(29740u, 125473u, 139509u)))) | (((((clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y)) ? uvec3(workgroup_base, 0u, 0u) : (uvec3(29740u, 125473u, 139509u)))))), (((false ? (uvec3(((146888u) << 0u), 21684u, 123375u)) : ((((max((clamp((clamp((min(injectionSwitch, injectionSwitch)), injectionSwitch, (mat2(1.0) * (injectionSwitch)))).x, injectionSwitch.x, injectionSwitch.x)), (clamp((min(injectionSwitch, injectionSwitch)).x, (vec2(mat3x2(injectionSwitch, 0.0, 1.0, 0.0, (injectionSwitch.x)))).x, injectionSwitch.x)))) < injectionSwitch.y)) ? uvec3((min(workgroup_base, ((workgroup_base) | (workgroup_base)))), ((0u | ((((((true ? 0u : (subgroup_size)) ^ 0u))) - 0u)))), 0u) : (uvec3(29740u, 125473u, 139509u))))))))) - uvec3(0u, 0u, 0u))))), 0u, 0u, 1u)))) + ((false ? ((clamp(num_workgroup, (max(num_workgroup, ((num_workgroup) | (num_workgroup)))), num_workgroup))) : subgroup_id)) * subgroup_size)) + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size);
 ((((0u ^ ((~ (~ (0u))) + (buf[virtual_gid] = 1))))) * 1u);
 if((max(subgroup_local_id, subgroup_local_id)) + ((((1) | (0 >> (1 * ((((int(3))) - 0))))) / ((1 << (int(5))) >> (0 ^ (((((true ? (int(5)) : (- 80357))))) >> (0 | 0)))))) < subgroup_size)
  {
   atomicStore(buf[next_virtual_gid], uint(((2) << 0)), 4, 64, (1 * ((clamp(0, 0, 0)))));
   subgroupAll(false);
  }
 else
  {
   atomicStore(buf[next_virtual_gid], uint(2), 4, ((64) ^ ((((false ? (- 48505) : true ? 0 : (- 42967)))))), 0);
   subgroupAll((false || (false || (((bool(bvec4(true, false, false, true))))))));
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
