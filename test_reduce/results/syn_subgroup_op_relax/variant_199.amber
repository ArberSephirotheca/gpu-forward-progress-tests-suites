#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

struct _GLF_struct_18 {
 mat2x3 _f0;
 mat2 _f1;
 mat2 _f2;
 uvec3 _f3;
 mat4x2 _f4;
} ;

struct _GLF_struct_19 {
 mat2x3 _f0;
 uint _f1;
 uvec4 _f2;
 ivec4 _f3;
 mat3x4 _f4;
 _GLF_struct_18 _f5;
} ;

struct _GLF_struct_20 {
 _GLF_struct_19 _f0;
 uint workgroup_size;
 mat2x4 _f1;
} ;

struct _GLF_struct_17 {
 ivec2 _f0;
 vec4 _f1;
 uint subgroup_local_id;
} ;

struct _GLF_struct_14 {
 uvec4 _f0;
 ivec2 _f1;
 uint _f2;
 vec3 _f3;
} ;

struct _GLF_struct_13 {
 mat2x4 _f0;
 ivec2 _f1;
} ;

struct _GLF_struct_12 {
 uvec4 _f0;
 bvec4 _f1;
 uvec2 _f2;
} ;

struct _GLF_struct_11 {
 mat3x2 _f0;
 mat4x3 _f1;
 int _f2;
 mat2x4 _f3;
 mat2 _f4;
 float _f5;
 bvec4 _f6;
} ;

struct _GLF_struct_10 {
 uvec4 _f0;
 bvec4 _f1;
 mat2 _f2;
} ;

struct _GLF_struct_15 {
 _GLF_struct_10 _f0;
 _GLF_struct_11 _f1;
 vec4 _f2;
 _GLF_struct_12 _f3;
 _GLF_struct_13 _f4;
 _GLF_struct_14 _f5;
} ;

struct _GLF_struct_9 {
 mat4 _f0;
 uint workgroup_base;
} ;

struct _GLF_struct_7 {
 uvec2 _f0;
 bvec3 _f1;
 mat2x4 _f2;
 mat4x2 _f3;
 uvec3 _f4;
 float _f5;
} ;

struct _GLF_struct_6 {
 ivec4 _f0;
 vec2 _f1;
 uvec3 _f2;
} ;

struct _GLF_struct_8 {
 mat3x2 _f0;
 bvec3 _f1;
 mat2x3 _f2;
 _GLF_struct_6 _f3;
 mat3x4 _f4;
 _GLF_struct_7 _f5;
} ;

struct _GLF_struct_16 {
 mat4 _f0;
 uvec4 _f1;
 _GLF_struct_8 _f2;
 uvec3 _f3;
 _GLF_struct_9 _f4;
 _GLF_struct_15 _f5;
} ;

struct _GLF_struct_3 {
 bvec3 _f0;
 mat2 _f1;
} ;

struct _GLF_struct_2 {
 mat4 _f0;
 mat4 _f1;
} ;

struct _GLF_struct_4 {
 _GLF_struct_2 _f0;
 vec2 _f1;
 _GLF_struct_3 _f2;
 bvec2 _f3;
 bool _f4;
} ;

struct _GLF_struct_0 {
 ivec2 _f0;
} ;

struct _GLF_struct_1 {
 mat3x2 _f0;
 mat3x2 _f1;
 _GLF_struct_0 _f2;
} ;

struct _GLF_struct_5 {
 _GLF_struct_1 _f0;
 _GLF_struct_4 _f1;
 uvec3 _f2;
 bvec3 _f3;
 uint num_workgroup;
 mat4x3 _f4;
 mat4x3 _f5;
} ;

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
  {
   if(((false || (! (! (((injectionSwitch.x > injectionSwitch.y))))))))
    {
    }
   else
    {
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       if((false))
        barrier();
      }
    }
  }
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 _GLF_struct_17 _GLF_struct_replacement_17 = _GLF_struct_17(ivec2(1), vec4(1.0), gl_SubgroupInvocationID);
 _GLF_struct_5 _GLF_struct_replacement_5 = _GLF_struct_5(_GLF_struct_1(mat3x2(1.0), mat3x2(1.0), _GLF_struct_0(ivec2(1))), _GLF_struct_4(_GLF_struct_2(mat4(1.0), mat4(1.0)), vec2(1.0), _GLF_struct_3((bvec3(bvec4(bvec3(true), false))), mat2((clamp((min((((max(1.0, 1.0))) - 0.0), 1.0)), 1.0, 1.0)))), bvec2((((injectionSwitch.x > injectionSwitch.y)) || (((((bool(bvec2(bool((bvec2(bvec2(bvec2(true, false))))), true)))) || (((bool(bvec4(injectionSwitch.x > (vec2(vec2(injectionSwitch))).y, false, true, false)))))))))), true), uvec3(1u), bvec3(true), gl_NumWorkGroups.x, mat4x3(1.0), mat4x3(((((float(vec3((((((float((mix(float((- 328.879)), float(float((1.0))), bool(((injectionSwitch.x < injectionSwitch.y)))))))) / 1.0)) - 0.0) - 0.0, 0.0, 0.0))) * 1.0)))));
 _GLF_struct_20 _GLF_struct_replacement_20 = _GLF_struct_20(_GLF_struct_19(mat2x3(1.0), 1u, ((uvec4(1u)) - uvec4((clamp(0u, 0u, 0u)), 0u, 0u, 0u)), ivec4(1), mat3x4(1.0), _GLF_struct_18(mat2x3(1.0), mat2(1.0), mat2(1.0), uvec3(1u), mat4x2(1.0))), gl_WorkGroupSize.x, mat2x4(1.0));
 uint workgroup_id = gl_WorkGroupID.x;
 if(true)
  {
   if((false))
    barrier();
  }
 else
  {
  }
 _GLF_struct_16 _GLF_struct_replacement_16 = _GLF_struct_16((transpose(((transpose(mat4(1.0))) + mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), uvec4(1u), _GLF_struct_8(mat3x2(1.0), bvec3(true), mat2x3(1.0), _GLF_struct_6(ivec4(1), vec2((float(mat2((((mix(float((((bool(bool(true))) ? 1.0 : (647.659)))), float((2.0)), bool(false)))) / 1.0), cos(0.0), 1.0, 1.0)))), uvec3(1u)), mat3x4(1.0), _GLF_struct_7(uvec2(1u), bvec3(true), mat2x4(1.0), mat4x2((1.0 * ((0.0 + (((false ? (8.1) : 1.0))))))), uvec3(1u), 1.0)), uvec3(1u), _GLF_struct_9(mat4(1.0), _GLF_struct_replacement_20.workgroup_size * (min(((((workgroup_id) << 0u)) * 1u), workgroup_id))), _GLF_struct_15(_GLF_struct_10(uvec4(1u), bvec4(((true) && (((false || (true))) && true))), mat2(1.0)), _GLF_struct_11(mat3x2(1.0), mat4x3(1.0), (max(1, 1)), mat2x4(1.0), mat2(1.0), 1.0, bvec4(true)), vec4(1.0), _GLF_struct_12(uvec4(1u), bvec4(true), uvec2(1u)), _GLF_struct_13(mat2x4((float(mat4x2(1.0, 1.0, 0.0, 1.0, ((1.0) * 1.0), 1.0, (((mix(float(1.0), float((85.09)), bool(((injectionSwitch.x > injectionSwitch.y)))))) + 0.0), 1.0)))), ivec2(1)), _GLF_struct_14(uvec4(1u), ivec2(1), 1u, vec3(1.0))));
 uint virtual_gid = _GLF_struct_replacement_16._f4.workgroup_base + ((subgroup_id) >> (1u * ((~ (((~ ((0u >> (((uint(5u)) >> 0u))))) | 0u)))))) * subgroup_size + (min(_GLF_struct_replacement_17.subgroup_local_id, (0u ^ (_GLF_struct_replacement_17.subgroup_local_id))));
 uint next_virtual_gid = _GLF_struct_replacement_16._f4.workgroup_base + ((((((uint(uvec3(~ ((~ ((false ? (uint(true)) : (~ (~ (((((subgroup_id * (min(subgroup_size, subgroup_size))) | 0u))) / 1u))))))), (0u ^ 1u), (0u | 1u)))))) | ((uint(uvec2(subgroup_id * subgroup_size, 1u)))))) | (subgroup_id * (clamp(subgroup_size, subgroup_size, (min((~ (~ (subgroup_size))), ((subgroup_size) ^ 0u))))))) + ((_GLF_struct_replacement_17.subgroup_local_id + 1) % subgroup_size);
 do
  {
   ((buf[virtual_gid] = 1) >> 0u);
   if(true)
    {
     if((false))
      {
       do
        {
         if(true)
          {
           barrier();
          }
         else
          {
          }
        }
       while(((((false ? (91.24) : (min(injectionSwitch.x, injectionSwitch.x)))) > ((injectionSwitch) + vec2(0.0, 0.0)).y)));
      }
    }
   else
    {
    }
  }
 while(((((true && ((((bool((! (! (! (! ((false || ((bool(((((! ((true && (! (bool(bvec3(((((1.0 * (injectionSwitch.x)) > injectionSwitch.y)) && (bool(bvec4(true, true, false, (bool(bvec3(true, false, false))))))), false, ((true) && (false || (true)))))))))))) || false)))))))))))))) && ((injectionSwitch.x < injectionSwitch.y)))))) || false));
 if(false)
  {
  }
 else
  {
   if(((((_GLF_struct_replacement_17.subgroup_local_id + ((~ (min((~ ((~ (~ ((((((min((((true ? 1 : (- 17084)))) | (1), (clamp((((true ? (int(ivec2(1, 0))) : (- 17084)))) | (1), (((true ? 1 : (- 17084)))) | (int(((true ? (ivec3(ivec4(ivec3((1), 1, 1), 1))) : (ivec3(13957, 54748, - 85992)))))), (((true ? 1 : ((0 ^ (int(ivec2((- 17084), 0)))))))) | (1)))))))) ^ 0)))))), (~ ((~ (~ ((((((min((((true ? 1 : (- 17084)))) | (~ (~ ((1)))), (~ (((~ ((((int(((false ? (ivec2(- 1119, 61469)) : ivec2((clamp((((true ? 1 : (- 17084)))) | (1), (((true ? 1 : (- 17084)))) | (1), (((((((true ? 1 : (- 17084))))) - 0)) - 0) | (1))), 0))))) | 0)))) >> 0))))))))) >> (0 ^ 0))))))))) ^ 0))) << 0u) - 0u) < subgroup_size)
    {
     do
      {
       if((bool((bvec2(bvec2(bvec2((bool(bvec3((((injectionSwitch.x > injectionSwitch.y))), false, false))), false)))))))
        {
         for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
          {
           for(int _injected_loop_counter = 1; _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
            {
             barrier();
            }
          }
        }
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
     for(int _injected_loop_counter = 0; (((((injectionSwitch.x < injectionSwitch.y) || ((injectionSwitch.x > injectionSwitch.y))))) && ((bool(bool((! (! (_injected_loop_counter != (((0 | 1) << (int(0))) >> (int(((true ? ((true ? 0 : (_injected_loop_counter))) : ((_injected_loop_counter ++))))))))))))))); _injected_loop_counter ++)
      {
       atomicStore(buf[next_virtual_gid], uint(2), (min(4, 4)), 64, 0);
      }
     subgroupAll(false);
    }
   else
    {
     if(true)
      {
       atomicStore(buf[next_virtual_gid], uint(2), 4, ((false ? (31378) : (clamp(64, 64, 64)))), 0);
      }
     else
      {
      }
     for(int _injected_loop_counter = (int(int(1))); _injected_loop_counter != 0; _injected_loop_counter --)
      {
       subgroupAll(true);
      }
    }
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
