#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((false))
  {
   if((false))
    {
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if((((bool(bvec3((false || ((false))), false, ((true) && (true && ((! ((((injectionSwitch.x < injectionSwitch.y)) && ((bool(bvec2(! (((true) && true)), true)))))))))))))) && (((min(injectionSwitch, injectionSwitch)).x < injectionSwitch.y))))
    {
     if((false))
      {
       if((false))
        {
         if((false))
          return;
         return;
        }
       if((false))
        barrier();
       if((bool(bvec4((false), false, true, false))))
        {
         if((false))
          {
           if((false))
            barrier();
           if((false))
            return;
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           return;
           if((false))
            {
             if((false))
              return;
             return;
            }
          }
         if((false))
          return;
         barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           barrier();
          }
        }
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          return;
         return;
        }
       return;
      }
     if(((bool(bvec3(false, true, ((injectionSwitch.x > injectionSwitch.y)))))))
      return;
     return;
     if((false))
      barrier();
    }
   if((false))
    {
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if((! (! ((false)))))
    barrier();
   if((((false)) || false))
    return;
   if((false))
    {
     if((false))
      barrier();
     return;
    }
   if((false))
    return;
   if((false))
    barrier();
   if((false))
    return;
   if((! (! (((true && (((bool(bvec2(bool(bvec4(false, true, true, true)), true)))))))))))
    {
     if((false))
      barrier();
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if(((bool(bool(false)))))
      return;
     barrier();
    }
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    barrier();
   if((false))
    barrier();
   if((((injectionSwitch.x > ((true ? injectionSwitch.y : (- 0.3)))))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
   if((((injectionSwitch.x > ((injectionSwitch) * mat2(1.0)).y))))
    return;
   if((false))
    barrier();
   if((false))
    {
     if((false))
      return;
     return;
    }
   if(((! ((! (! ((bool(bvec2(! ((true && (false))), true))))))))))
    barrier();
   if((false))
    return;
   if((false))
    return;
  }
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((((injectionSwitch.x > ((false ? ((false ? (vec2(- 5.2, 9.5)) : ((clamp(vec2(vec3((injectionSwitch), 0.0)), vec2(vec3((injectionSwitch), 0.0)), vec2(vec3((injectionSwitch), 0.0))))))) : injectionSwitch)).y))))
  return;
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 if((((! (! ((false) && true))))))
  {
   if((false))
    return;
   if((false))
    barrier();
   return;
  }
 if((! (! ((bool(bool((((injectionSwitch.x > (0.0 + ((max(injectionSwitch.y, injectionSwitch.y))))))))))))))
  barrier();
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if(((bool(bvec2((true && (((injectionSwitch.x > injectionSwitch.y)))), false)))))
    {
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     if(((bool(bvec4(false, true, true, (! (! ((false || (false))))))))))
      {
       if((((! (! ((false)))) && true)))
        {
         if((false))
          return;
         if((false))
          return;
         barrier();
        }
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
       if((false))
        return;
      }
     return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
    {
     if(((true && (((false) || false)))))
      return;
     barrier();
    }
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     return;
    }
   if((false))
    {
     if((((! (! ((injectionSwitch.x > injectionSwitch.y)))))))
      {
       if((false))
        return;
       barrier();
      }
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     if((false))
      return;
     if(((bool(bvec4(false, true, false, false)))))
      {
       if(((! (! (false)))))
        return;
       return;
      }
     barrier();
    }
   return;
   if((false))
    return;
  }
 uint subgroup_id = gl_SubgroupID;
 if(((! (! ((((false || (false)))) && true)))))
  {
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    {
     if((false))
      barrier();
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      return;
     if((false))
      return;
     if((false))
      return;
     barrier();
    }
   if((false))
    {
     if((false))
      barrier();
     if((false))
      {
       if((false))
        {
         if((false))
          return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           barrier();
          }
         barrier();
        }
       return;
       if((false))
        return;
      }
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     barrier();
    }
   if((false))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   return;
   if((false))
    {
     if((false))
      barrier();
     return;
    }
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     barrier();
     if((false))
      {
       if((false))
        return;
       barrier();
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   if((false))
    return;
  }
 if((false))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if(((((! (! (injectionSwitch.x > (clamp(injectionSwitch.y, (mix(float(injectionSwitch.y), float((2.1)), bool(false))), injectionSwitch.y)))))))))
  {
   if((false))
    return;
   if(((bool(bvec3(false, true, false)))))
    barrier();
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if(((! (! ((false || (false)))))))
  {
   if((false))
    return;
   return;
  }
 if(((bool(bvec3((true && (false)), true, true)))))
  {
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   return;
  }
 if((false))
  return;
 if((false))
  return;
 if((false))
  {
   if((false))
    barrier();
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(((! (! ((true && (false)))))))
    return;
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   if((false))
    {
     if(((! (! (false)))))
      barrier();
     barrier();
    }
   if((false))
    {
     if((false))
      barrier();
     return;
    }
   return;
   if((false))
    barrier();
  }
 if((false))
  return;
 if((false))
  barrier();
 if((bool(bvec4((false), true, false, false))))
  barrier();
 if((false))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((false))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((((((injectionSwitch.x > (min(((injectionSwitch) + vec2(0.0, 0.0)), injectionSwitch)).y))) && true)))
  barrier();
 if((false))
  {
   if(((bool(bvec2((! (! (false))), true)))))
    barrier();
   barrier();
  }
 if((false))
  {
   if(((bool(bool(false)))))
    barrier();
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     return;
     if((false))
      barrier();
    }
   if((false))
    barrier();
   if((false))
    {
     if(((bool(bvec4((bool(bvec2(((injectionSwitch.x > injectionSwitch.y)), false))), true, false, true)))))
      return;
     return;
    }
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if((false))
    return;
   if((((((injectionSwitch.x > injectionSwitch.y)))) || false))
    barrier();
   if((((bool(bvec4((false), true, true, true))) || false)))
    {
     if((false))
      barrier();
     if((false))
      {
       if(((bool((bvec2(bvec4(bvec2((! (! (false))), ((injectionSwitch.x < injectionSwitch.y))), true, false)))))))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     return;
     if(((true && (false))))
      return;
     if((false))
      {
       if((false))
        barrier();
       return;
      }
    }
   barrier();
  }
 if((false))
  {
   if((false))
    {
     if((false))
      return;
     barrier();
    }
   return;
  }
 if((! ((false || (! ((false)))))))
  {
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if((false))
    return;
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((((injectionSwitch.x > injectionSwitch.y) && true)))))
    return;
   if((false))
    barrier();
   if((false))
    return;
   if(((((false || (injectionSwitch.x > injectionSwitch.y))))))
    {
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      {
       if(((((injectionSwitch.x > injectionSwitch.y)) || (false))))
        barrier();
       if(((((max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
        {
         if((false))
          barrier();
         return;
        }
       barrier();
      }
     if((false))
      barrier();
     barrier();
     if((false))
      return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    {
     if((false))
      barrier();
     return;
    }
   if((false))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   barrier();
   if((((false) && true)))
    return;
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(((bool(bool(! ((false || (! ((false))))))))))
    {
     if((false))
      return;
     return;
    }
   if((false))
    return;
   if((false))
    {
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       if((false))
        return;
       barrier();
      }
     if((false))
      {
       if((false))
        return;
       barrier();
      }
     if((false))
      barrier();
     if((false))
      return;
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        return;
       barrier();
      }
     if((false))
      {
       if((false))
        barrier();
       return;
      }
    }
   if(((((clamp(injectionSwitch.x, (clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), (max(injectionSwitch, injectionSwitch)).x)) > injectionSwitch.y))))
    return;
   if((false))
    {
     if((false))
      return;
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    return;
   return;
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if((false))
      return;
     if((false))
      {
       if((false))
        barrier();
       return;
      }
     return;
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
    }
   return;
   if((false))
    {
     if((false))
      return;
     barrier();
    }
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if(((true && (false))))
  return;
 if(((! (! (false)))))
  {
   if((false))
    return;
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   if((false))
    return;
   if(((! ((false || (bool(bvec4((! ((bool(bvec3(false, true, true))))), false, false, false))))))))
    {
     if(((bool(bvec4(false, true, false, true)))))
      return;
     return;
    }
   barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    return;
  }
 if(((((! (! (injectionSwitch.x > injectionSwitch.y)))))))
  {
   if(((! ((bool(bool((bool(bvec4(! (((injectionSwitch.x > injectionSwitch.y))), false, false, true))))))))))
    {
     if(((true && (false))))
      return;
     barrier();
    }
   if((false))
    {
     if((false))
      return;
     barrier();
    }
   if((false))
    barrier();
   if((false))
    barrier();
   if(((((false || (((((injectionSwitch.x > injectionSwitch.y))) || false))))) || false))
    return;
   barrier();
   if((false))
    barrier();
  }
 if(((((max(injectionSwitch.x, (clamp(injectionSwitch.x, injectionSwitch.x, (min(injectionSwitch.x, injectionSwitch.x)))))) > injectionSwitch.y))))
  return;
 if((false))
  {
   if((((! ((! ((! (! ((false || (! ((! (! (! ((! (! ((((float(vec3((max(max((clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x), max((clamp(injectionSwitch.x, (clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x, injectionSwitch.x)), injectionSwitch.x))), ((1.0 * ((max((false ? (- 9.9) : 0.0), (float(vec2((false ? (- 9.9) : 0.0), 1.0)))))))), 0.0)))) > injectionSwitch.y)))))))))))))))))))))
    {
     if(((bool(bvec4(false, true, false, true)))))
      barrier();
     return;
    }
   return;
   if(((((injectionSwitch.x > injectionSwitch.y)) || (((injectionSwitch.x > injectionSwitch.y))))))
    barrier();
   if((false))
    {
     if((false))
      {
       if((false))
        return;
       return;
      }
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(((! ((! (! (! ((bool(bvec2(((injectionSwitch.x > injectionSwitch.y)), true)))))))))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if(((! (! (false)))))
    {
     if((false))
      return;
     if((false))
      return;
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if((false))
    return;
   if((false))
    barrier();
   return;
  }
 uint num_workgroup = (((false ? (bitfieldInsert(uvec3(154490u, 108016u, 198656u), uvec3(169407u, 38493u, 55612u), - 93022, - 98619)) : (uvec3(uvec3((gl_NumWorkGroups)))))) >> uvec3(0u, 0u, ((0u) ^ 0u))).x;
 if((false))
  barrier();
 if((false))
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    barrier();
   if((false))
    return;
   if((((true && ((((injectionSwitch.x > ((((max(vec2((max(injectionSwitch, injectionSwitch))[(0 ^ (((false ? (- 38741) : 0))))], (min(injectionSwitch[(clamp(1, 1, 1))], injectionSwitch[(clamp(1, 1, 1))]))), vec2(injectionSwitch[((false ? (- 38741) : 0))], injectionSwitch[1])))) - vec2(0.0, 0.0))).y)) || false))))))
    return;
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if((false))
    return;
   return;
  }
 if((false))
  barrier();
 if((false))
  {
   if((false))
    return;
   return;
  }
 uint workgroup_size = ((uvec3(0u, 0u, 0u) ^ ((uvec3(uvec3(((uvec3(0u, 0u, 0u) + ((((uvec3(gl_WorkGroupSize[0], (clamp(gl_WorkGroupSize, (~ (~ (gl_WorkGroupSize))), gl_WorkGroupSize))[1], (max(gl_WorkGroupSize, gl_WorkGroupSize))[2]))) / uvec3(1u, 1u, 1u))))) / uvec3(1u, 1u, 1u))))))).x;
 if((! (! (((((! (! (injectionSwitch.x > (mat2(1.0) * ((vec2(injectionSwitch[0], injectionSwitch[1])))).y))))))))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    return;
   if(((true && ((! ((false || (! (false)))))))))
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     barrier();
     if((false))
      barrier();
    }
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     if((false))
      return;
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(((false || (false))))
    {
     if(((! (! (false)))))
      barrier();
     return;
    }
   if((((false) || false)))
    barrier();
   if((false))
    {
     if((false))
      {
       if((false))
        return;
       barrier();
      }
     return;
    }
   if((((false) && true)))
    return;
   if((false))
    return;
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        return;
       return;
      }
     return;
    }
   if((false))
    {
     if((false))
      return;
     if((false))
      return;
     barrier();
    }
   if(((((false || ((bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, false)))))))))
    return;
   if((false))
    barrier();
   if((false))
    return;
   if((false))
    barrier();
   if((false))
    return;
   if((false))
    {
     if((false))
      barrier();
     return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     if((false))
      return;
     return;
     if((false))
      return;
    }
   if((false || ((false))))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        {
         if((false))
          return;
         return;
        }
       if((false))
        barrier();
       if((false))
        barrier();
       return;
       if((false))
        return;
      }
     if((((((injectionSwitch.x > injectionSwitch.y)))) && true))
      {
       if((false))
        barrier();
       if((false))
        return;
       return;
      }
     if((false))
      {
       if((false))
        barrier();
       return;
       if((false))
        barrier();
      }
     return;
     if((((false)) && true))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      return;
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
    }
   if((false))
    return;
   return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     if((false))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       return;
      }
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if((((((false) || false) && true))))
    barrier();
   return;
  }
 if((false))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 if(((((bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, true)))))))
  {
   if((false))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   barrier();
  }
 if((false))
  {
   if(((bool(((bool(false)) || false)))))
    {
     if((false))
      {
       if(((! (! (false)))))
        barrier();
       barrier();
      }
     return;
     if(((((! (! (injectionSwitch.x > injectionSwitch.y)))))))
      return;
    }
   if((false))
    return;
   if(((((((false || (true)) ? injectionSwitch : (injectionSwitch))).x > injectionSwitch.y))))
    barrier();
   return;
   if((false))
    return;
  }
 if((false))
  return;
 if((! (! ((false)))))
  {
   if((false))
    return;
   if((false))
    {
     if((false))
      barrier();
     if((false))
      return;
     return;
    }
   if((false))
    barrier();
   barrier();
  }
 uint workgroup_base = (((clamp(((workgroup_size) | (workgroup_size)), workgroup_size, (min(((true ? workgroup_size : ((false ? workgroup_size : workgroup_id)))), ((workgroup_size) / 1u)))))) | ((clamp(((((((max((workgroup_size), (workgroup_size)))) >> (0u | 0u))) | ((workgroup_size))) | (workgroup_size)), workgroup_size, (min(((true ? workgroup_size : ((false ? workgroup_size : workgroup_id)))), ((workgroup_size) / 1u))))))) * (min((uint((((injectionSwitch.y)) / sqrt((((float(mat2x4(1.0, 1.0, 0.0, 1.0, sin(0.0), 1.0, (dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0))), 0.0)))) - 0.0)))) * ((((((~ (((~ ((((max(workgroup_id, workgroup_id))) / ((((1u << (uint(7u))) >> (uint(7u))) << (uint(5u))) >> (uint(5u))))))) ^ 0u)) | 0u)) | (~ (((~ ((false ? (subgroup_id) : (((workgroup_id)) / 1u))))) ^ 0u)))))), (uint((((injectionSwitch.y)) / sqrt((((float(mat2x4(1.0, 1.0, 0.0, 1.0, sin(0.0), 1.0, (dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0))), 0.0)))) - 0.0)))) * ((((((~ ((((max((((uint(uvec2((clamp(~ (workgroup_id), ~ (workgroup_id), ~ (workgroup_id))), 0u))))), (((uint(uvec2((clamp(~ (workgroup_id), ~ (workgroup_id), ~ (workgroup_id))), 0u)))))))) | 0u) ^ (((min(0u, 0u))) + 0u))) | 0u)) | (~ (((~ (workgroup_id))) ^ 0u))))))));
 if((false))
  barrier();
 if(((bool((bvec2(bvec3(bvec2(false, ((false) && ((injectionSwitch.x < injectionSwitch.y)))), false)))))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
      return;
     barrier();
    }
   return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((true && ((injectionSwitch.x > injectionSwitch.y))))))
    barrier();
   barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((true && ((false))))
  return;
 if(((((bool(bvec3(false, true, false)))) || false)))
  {
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 uint virtual_gid = workgroup_base + subgroup_id * ((subgroup_size) | ((((min(subgroup_size, subgroup_size))) << 0u))) + subgroup_local_id;
 if((false))
  barrier();
 if((false || ((false))))
  {
   if((((((injectionSwitch.x > injectionSwitch.y))) && ((injectionSwitch.x < injectionSwitch.y)))))
    barrier();
   return;
  }
 if((false))
  {
   if((false))
    return;
   barrier();
  }
 uint next_virtual_gid = ((workgroup_base) | (min((((workgroup_base) >> 0u)), (((workgroup_base) >> 0u))))) + subgroup_id * subgroup_size + (((clamp(((1u & 1u) * (max(((((injectionSwitch.x > injectionSwitch.y)) ? (subgroup_id) : (subgroup_local_id + 1))), (clamp((subgroup_local_id + 1), (subgroup_local_id + 1), (((((subgroup_local_id + 1)) << 0u)) >> (0u ^ (0u)))))))), (min(((((((((max((((0u | (((false ? (packSnorm2x16(vec2(- 9558.8005, 6.6))) : (0u | ((subgroup_local_id))) * 1u))))) | ((subgroup_local_id) * 1u)) + ((((false ? (workgroup_size) : uint(uint(((0u << (uint(7u))) ^ 0u))))))), (min((uint(uvec4((((0u | ((subgroup_local_id) * 1u))) | (0u ^ ((0u ^ (((subgroup_local_id) * 1u)))))) + (0u << (uint(7u))), 1u, 1u, 0u))), (((false ? (atomicAdd(subgroup_size, virtual_gid)) : ((((0u | ((subgroup_local_id) * 1u)))) - 0u))) | ((subgroup_local_id) * 1u)) + (0u << (uint(7u)))))))))) - 0u)) + 1) * 1u), ((~ (~ ((true ? subgroup_local_id : (virtual_gid)))))) + 1)), ((subgroup_local_id) | (subgroup_local_id)) + (min((((0 ^ (1)) | (((0 ^ (1)) | 0)))), 1))))) % ((subgroup_size) | (subgroup_size)));
 if((false))
  barrier();
 if(((bool(bvec2(false, true)))))
  {
   if((false))
    return;
   barrier();
  }
 ((buf[virtual_gid] = (1 * ((1 * (1))))) / ((uint(uvec3(1u, (1u ^ uint((injectionSwitch.x))), 1u))) | 0u));
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((((((injectionSwitch.x > injectionSwitch.y)) && true))))
    barrier();
   if((false))
    return;
   return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    {
     if((false))
      return;
     return;
    }
   if((false))
    return;
  }
 if((false))
  {
   if((false))
    barrier();
   if((false))
    {
     if((false))
      return;
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
   if((false))
    barrier();
   if((((((injectionSwitch.x > injectionSwitch.y)) && true))))
    return;
   if((false))
    return;
   if(((bool(bool((! (! (false))))))))
    return;
  }
 if(((bool(bvec2(false, false)))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
  }
 if(((bool((((bool(bvec2(bool((true && (((false) && true)))), true))) && true))))))
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((((true && ((((injectionSwitch.x > injectionSwitch.y)))))) && true)) || false))
        barrier();
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
        }
       return;
      }
     if(((bool(bvec4((! (! ((bool(bvec3(false, false, false)))))), false, true, false)))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        return;
       barrier();
      }
     return;
    }
   if((false))
    return;
   barrier();
  }
 if(((false || (false))))
  return;
 if((~ (~ (((min((subgroup_local_id), (((uint(uint((~ ((0u ^ (~ ((subgroup_local_id))))))))) / 1u)))) ^ 0u) + 1))) < subgroup_size)
  {
   if((false))
    return;
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((((injectionSwitch.x > ((injectionSwitch) - sin(vec2(0.0, 0.0))).y))))
      barrier();
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     if((bool(((bvec2(bvec3(bvec2((bvec2(bvec2(bvec2(bvec2((false), true)))))), false)))))))
      {
       if((false))
        barrier();
       if((((! (! ((false))))) || false))
        {
         if((false))
          return;
         if((false))
          return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if((false))
          {
           if((false))
            return;
           return;
          }
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           barrier();
          }
         return;
         if(((bool(bool(false)))))
          barrier();
        }
       return;
       if((((((((((injectionSwitch) - log(vec2(1.0, 1.0))).x > ((((injectionSwitch.x > injectionSwitch.y)) ? (- 52.31) : ((injectionSwitch.y) * ((true ? 1.0 : (804.743))))))) || false))))) || false))
        {
         if((false))
          barrier();
         if((false))
          barrier();
         barrier();
        }
       if((((false || (bool(bool(false)))))))
        return;
       if((false))
        barrier();
       if((false))
        {
         if((false))
          barrier();
         return;
        }
       if((false))
        barrier();
       if((false))
        {
         if((false))
          return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
       if((false))
        {
         if((false))
          return;
         return;
        }
       if((false))
        {
         if(((bool(bool(false)))))
          return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            return;
           barrier();
          }
         return;
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        {
         if((false))
          return;
         barrier();
        }
       barrier();
      }
     barrier();
     if((false))
      barrier();
    }
   if((false))
    return;
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        return;
       barrier();
      }
     if((false))
      return;
     if((false))
      barrier();
     if((false))
      {
       if((false))
        return;
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((false))
        return;
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     if((false))
      barrier();
     return;
    }
   if(((bool(bvec3((! (! (false))), true, false)))))
    barrier();
   if((false))
    return;
   if((false))
    {
     if((false))
      return;
     barrier();
     if((false))
      barrier();
    }
   atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 0);
   if((false))
    {
     if((((false)) || false))
      barrier();
     return;
    }
   if((false))
    {
     if((false))
      return;
     if(((bool(bvec4(false, true, false, false)))))
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       return;
       if((false))
        return;
      }
     return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        return;
       barrier();
      }
     return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if((false))
    return;
   if(((! (! (((! (((((bool(bool(! (((((injectionSwitch.x > injectionSwitch.y)) && true)))))))) && true))) && ((injectionSwitch.x < injectionSwitch.y))))))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(((! (! (false)))))
      return;
     return;
    }
   if((false))
    return;
   if(((((vec2((transpose(transpose(((mat3x4(injectionSwitch, ((mix(float(dot(vec2(1.0, exp(0.0)), vec2(0.0, 0.0))), float((- 3210.8895)), bool(false)))), 0.0, sin(0.0), (injectionSwitch.y), 1.0, 1.0, tan(0.0), sin(0.0), 1.0, 0.0)) * mat3(1.0))))))).x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     if(((! (bool(bvec4((! (false)), true, true, true))))))
      barrier();
     if((false))
      return;
     if((false))
      barrier();
     if(((((clamp(injectionSwitch, (max(injectionSwitch, injectionSwitch)), (min(injectionSwitch, injectionSwitch)))).x > injectionSwitch.y))))
      {
       if(((! ((true && (! ((true && (false)))))))))
        return;
       barrier();
      }
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      {
       if((false))
        return;
       barrier();
      }
     if((false))
      barrier();
     if((false))
      return;
     return;
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   subgroupAll(false);
   if((false))
    {
     if((false))
      {
       if((false))
        return;
       barrier();
      }
     if((false))
      barrier();
     if((false))
      return;
     if((false))
      return;
     if((false))
      return;
     if((false))
      {
       if((false))
        barrier();
       if((false))
        return;
       return;
      }
     if((false))
      barrier();
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          return;
         barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          {
           if((false))
            return;
           barrier();
          }
         barrier();
        }
       return;
      }
     if((false))
      {
       if((false))
        barrier();
       if((false))
        barrier();
       return;
      }
     return;
     if((false))
      return;
     if((((! (! ((((injectionSwitch.x > injectionSwitch.y))))))) || false))
      return;
     if((false))
      {
       if(((! ((! ((((bool(bvec4(! (! (false)), true, false, false)))) || false)))))))
        {
         if((false))
          return;
         barrier();
        }
       return;
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(((true && (false))))
      {
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        return;
       return;
      }
    }
  }
 else
  {
   if((false))
    {
     if((false))
      return;
     if((false))
      barrier();
     barrier();
    }
   if((false))
    {
     if((false))
      return;
     return;
    }
   if((false))
    return;
   if((false))
    return;
   if((false))
    return;
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    {
     if(((true && ((true && (false))))))
      {
       if((false))
        return;
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
       return;
      }
     barrier();
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(((! ((true && ((((injectionSwitch.x > injectionSwitch.y)) || (! (((injectionSwitch.x > injectionSwitch.y)))))))))))
    barrier();
   if(((! (! (bool(bvec4(((! (! (bool(bool((false))))))), ((injectionSwitch.x < injectionSwitch.y)), false, true)))))))
    {
     if((false))
      return;
     if(((((true && (((((false || ((((injectionSwitch.x > injectionSwitch.y)) && true)))) && true) || false)))))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      return;
     if(((bool(bvec3(false, true, true)))))
      return;
     if((false))
      barrier();
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
     if((false))
      return;
     if((bool(bool((false)))))
      barrier();
     if((false))
      return;
    }
   atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 0);
   if((false))
    return;
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if((false))
    {
     if((false))
      return;
     if((false))
      barrier();
     barrier();
     if((false))
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
        }
       return;
      }
    }
   subgroupAll(true);
   if((false))
    {
     if((false))
      return;
     if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     return;
    }
   if((false))
    {
     if((false))
      return;
     barrier();
    }
   if((false))
    {
     if((false))
      {
       if((false))
        return;
       barrier();
      }
     return;
    }
   if(((((float(mat3(((true ? injectionSwitch.x : (ceil(68.23)))), ((0.0 + (((injectionSwitch.y) - 0.0)))), 1.0, 0.0, 0.0, 0.0, (injectionSwitch.x), 1.0, abs(1.0)))) > injectionSwitch.y))))
    barrier();
   if((false))
    return;
   if((false))
    {
     if((false))
      barrier();
     if((false))
      barrier();
     if((false))
      {
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
       if(((false || (((injectionSwitch.x > injectionSwitch.y))))))
        barrier();
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           return;
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if((false))
          return;
         return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       barrier();
      }
     if((false))
      {
       if((false))
        return;
       return;
      }
     if((false))
      return;
     if((false))
      {
       if((false))
        barrier();
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          return;
         if((false))
          barrier();
         if((false))
          barrier();
         return;
         if((false))
          barrier();
        }
       if((false))
        barrier();
       if((false))
        {
         if((false))
          {
           if((((false) && true)))
            return;
           barrier();
          }
         return;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         barrier();
        }
       if((false))
        return;
       barrier();
      }
     if((false))
      barrier();
     return;
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     if((false))
      {
       if((false))
        return;
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          {
           if((false))
            return;
           if((false))
            barrier();
           return;
          }
         barrier();
         if((false))
          return;
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             barrier();
            }
           return;
          }
         if((false))
          return;
        }
       if((false))
        {
         if((false))
          barrier();
         return;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     if((false || ((false || ((((injectionSwitch.x > injectionSwitch.y))))))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
       if((false))
        barrier();
       if((false))
        barrier();
       if((false))
        return;
       if((false))
        barrier();
      }
     if((false))
      barrier();
    }
   if((false))
    return;
  }
 if((false))
  {
   if((false))
    return;
   if((false))
    return;
   if((false))
    return;
   if((((((injectionSwitch.x > injectionSwitch.y)) && true))))
    return;
   if((false))
    return;
   if((false))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if((false))
    return;
   barrier();
   if((false))
    return;
  }
 if((false))
  return;
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
