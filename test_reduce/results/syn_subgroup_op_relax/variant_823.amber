#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  return;
 if((((! (! ((false) || false))))))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 if((((injectionSwitch.x > ((min((injectionSwitch.y) - 0.0, (injectionSwitch.y) - 0.0)))))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 uint workgroup_size = ((uvec3(1u, 1u, 1u) * ((gl_WorkGroupSize) / uvec3(1u, 1u, 1u)))).x;
 if((false))
  return;
 if((false))
  {
   if((false))
    barrier();
   return;
  }
 if((! (! ((((bool(bvec3((((injectionSwitch.x > injectionSwitch.y))), true, true))) && true))))))
  barrier();
 if(((((! (! (injectionSwitch.x > (((max(false ? (- 3.4) : ((((((mat2(1.0) * (max(injectionSwitch, injectionSwitch)))) / cos(log(vec2(1.0, 1.0))))).y) * 1.0), false ? (- 3.4) : ((((((mat2(1.0) * (max(injectionSwitch, injectionSwitch)))) / cos(log(vec2(1.0, 1.0))))).y) * 1.0))))))))))))
  barrier();
 if((((! (((! ((injectionSwitch.x > injectionSwitch.y))) && true))))))
  barrier();
 uint workgroup_id = ((gl_WorkGroupID) / (((max((uvec3((min(uvec4((uvec3(1u, 1u, 1u) * (((uvec3(1u, 1u, 1u))) / uvec3(1u, 1u, 1u))), 0u), uvec4((uvec3(1u, 1u, 1u) * (((uvec3(1u, 1u, 1u))) / uvec3(1u, 1u, 1u))), 0u))))), uvec3(1u, 1u, 1u)))) ^ uvec3(0u, 0u, 0u))).x;
 uint workgroup_base = workgroup_size * workgroup_id;
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 uint virtual_gid = workgroup_base + ((subgroup_id) << 0u) * subgroup_size + subgroup_local_id;
 if((false))
  {
   if(((false || (false))))
    return;
   if((false))
    barrier();
   if((false))
    return;
   if((false))
    return;
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((((bool(bool((((injectionSwitch.x > injectionSwitch.y))))))) && (! (! (((injectionSwitch.x < injectionSwitch.y)))))) || false)))
    return;
   barrier();
  }
 if(((! (((bool(bvec4(bool(bvec2(! (false), true)), false, false, false))))))))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  return;
 if((false))
  {
   if((((injectionSwitch.x > (mix(float(injectionSwitch.y), float((- 1.7)), bool(false)))))))
    return;
   barrier();
  }
 if((((((bool(bvec2(bool(bvec2(false, true)), true))))) && true)))
  return;
 uint next_virtual_gid = ((workgroup_base) / (~ ((min(((((~ (1u)) ^ 0u)) - 0u), ~ (1u)))))) + subgroup_id * (((((((1u << (uint(1u))) >> (max(((~ (~ (uint(1u))))), (uint(1u))))) * (((true ? (((vec2(0.0, 0.0) + (injectionSwitch)).x < injectionSwitch.y)) ? subgroup_size : ((0u ^ (subgroup_id))) : (virtual_gid))))))) | (134855u & (139961u & 0u)))) + (((((((((uint(uvec2(((((subgroup_local_id)) | ((((subgroup_local_id)) / 1u))) | (min(0u, 0u))) + ((1) + 0), uint(((1.0 * (((injectionSwitch.y) + 0.0)))))))))))) << 0u) | ((((((uint(uvec2(((subgroup_local_id) | 0u) + 1, uint((injectionSwitch.y)))))))) << 0u))) * 1u) % subgroup_size);
 if((false))
  return;
 if((false))
  {
   if((((injectionSwitch.x > ((true ? injectionSwitch.y : (3.3)))))))
    barrier();
   barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 buf[virtual_gid] = 1;
 if((uint(((max(((((clamp(uint(subgroup_local_id), uint(subgroup_local_id), uint(subgroup_local_id)))) | 0u)) ^ (clamp(((0u) | (((0u) | 0u))), 0u, 0u)), (max((uint(subgroup_local_id)) ^ (clamp(0u, 0u, 0u)), (uint(subgroup_local_id)) ^ (clamp(0u, ((0u) << 0u), 0u))))))))) + 1 < (((clamp(subgroup_size, subgroup_size, subgroup_size))) | (((subgroup_size)) | ((subgroup_size)))))
  {
   if((((false || (bool(bvec4(false, true, true, false)))))))
    return;
   if((false))
    return;
   if((bool(bool((false || ((bool(bvec4((((injectionSwitch.x > injectionSwitch.y))), true, (((true && (((bool(bvec4((! (! (true))), true, true, true))) && true)))) && (true)), true)))))))))
    barrier();
   if((false || ((false || ((((injectionSwitch.x > ((true ? ((injectionSwitch) * vec2(1.0, 1.0)) : (vec2(5887.5023, - 79.39)))).y))))))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   if((false))
    return;
   if((false))
    return;
   atomicStore(buf[next_virtual_gid], uint((((0 ^ (2))) - (0 & 75831))), 4, 64, 0);
   if(((! (true && ((((! ((((bool(bvec2(false, false))) && true))))) && true))))))
    return;
   subgroupAll(false);
  }
 else
  {
   if((((((injectionSwitch.x > ((injectionSwitch) * mat2(1.0)).y) && true)))))
    barrier();
   if((((true && (((! (! (injectionSwitch.x > (max(injectionSwitch.y, injectionSwitch.y)))))))))))
    {
     if((false))
      barrier();
     return;
    }
   atomicStore(buf[next_virtual_gid], uint(2), ((((max((min(int(ivec2(4, 0)), int(ivec2(4, 0)))), (min(int(ivec2(4, 0)), int(ivec2(4, 0)))))))) << 0), 64, 0);
   if((false))
    barrier();
   if((true && (((((bool((bvec3(bvec4(bvec3((true && ((max(injectionSwitch, injectionSwitch)).x > (max(injectionSwitch, injectionSwitch)).y)), (! (! (false))), false), false)))))))))))
    barrier();
   subgroupAll(true);
   if((((((((bool(bvec2(bool(bool((((((! ((bool(bool(! (injectionSwitch.x > injectionSwitch.y))))))))) && true))), false)))) || false))) && true)))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if(((((((((((mix(float(((((((float(mat3x2((min(- 8148.7428, - 8148.7428)), 0.0, (((clamp(length(vec3(0.0, 0.0, 0.0)), length(vec3(0.0, 0.0, 0.0)), length(vec3(0.0, 0.0, 0.0))))) * 1.0), (clamp((float(mat3(0.0, (min(((0.0) - 0.0), 0.0)), 1.0, 0.0, 1.0, (injectionSwitch.x), (dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0))), 1.0, (dot(vec4(1.0, 0.0, 0.0, 1.0), vec4((clamp((float(float(0.0))), 0.0, 0.0)), 1.0, 1.0, (clamp(0.0, 0.0, (min(0.0, 0.0)))))))))), (clamp((float(mat3(0.0, 0.0, 1.0, 0.0, 1.0, (injectionSwitch.x), (dot((clamp(vec4(0.0, 1.0, 0.0, 0.0), (min(vec4(0.0, 1.0, 0.0, 0.0), (clamp(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0))))), (min(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0))))), vec4(0.0, 1.0, 0.0, 0.0))), 1.0, (dot(vec4(1.0, 0.0, 0.0, 1.0), vec4(0.0, 1.0, 1.0, 0.0)))))), (float(mat3(0.0, 0.0, 1.0, 0.0, 1.0, (injectionSwitch.x), (dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0))), 1.0, (((dot(vec4(1.0, 0.0, 0.0, 1.0), vec4(0.0, 1.0, 1.0, 0.0))) * 1.0))))), (float(mat3(0.0, 0.0, 1.0, 0.0, 1.0, (injectionSwitch.x), (dot(vec4((mix(float(0.0), float((- 9635.1320)), bool(false))), 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0))), 1.0, (dot(vec4(1.0, 0.0, 0.0, 1.0), vec4(((false ? (310.852) : 0.0)), 1.0, (clamp(1.0, 1.0, 1.0)), ((false ? (4.8) : 0.0)))))))))), (float(mat3(0.0, 0.0, 1.0, 0.0, 1.0, (injectionSwitch.x), (dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0))), 1.0, (dot(vec4(1.0, 0.0, 0.0, 1.0), vec4(0.0, 1.0, 1.0, 0.0)))))))), 1.0, 1.0)))) * 1.0)) + 0.0))), (clamp((mix(float((515.813)), float(float(((max((clamp((max((clamp((injectionSwitch.x) * 1.0, (float(mat2x4((injectionSwitch.x) * 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0))), (injectionSwitch.x) * 1.0)), (injectionSwitch.x) * 1.0)), (injectionSwitch.x) * 1.0, (injectionSwitch.x) * 1.0)), ((injectionSwitch.y) * ((mix(float((- 7.9)), float((injectionSwitch.x) * 1.0), bool(true)))))))))), bool(true))), float(((max((clamp((clamp(((false ? (- 502.335) : (1.0 * ((injectionSwitch.x))))), (injectionSwitch.x), (injectionSwitch.x))) * 1.0, (injectionSwitch.x) * 1.0, (injectionSwitch.x) * 1.0)), ((mix(float((897.167)), float((injectionSwitch.y)), bool(true))) * ((injectionSwitch.x) * 1.0)))))), float(((max((clamp(((max(injectionSwitch, injectionSwitch)).x) * 1.0, (injectionSwitch.x) * 1.0, (injectionSwitch.x) * 1.0)), ((injectionSwitch.y) * ((injectionSwitch.x) * 1.0)))))))), bool(true))) > ((((float(mat2x4(((max((min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))), 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0)))) + 0.0) - log(1.0))))))) && true) && true) || false)))
    {
     if((false))
      return;
     if((false))
      barrier();
     if(((((injectionSwitch.x < injectionSwitch.y)) && (false))))
      return;
     if(((((((bool(bool(false))) && true) || false)))))
      {
       if((((injectionSwitch.x > ((injectionSwitch.y) * 1.0)))))
        return;
       if((bool(bvec2((true && ((((false || (false)) || ((! (! (false)))))))), false))))
        barrier();
       barrier();
       if((false))
        return;
       if((false))
        return;
      }
     barrier();
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     if((((((((injectionSwitch.x > injectionSwitch.y)) ? (- 8665.7778) : injectionSwitch.x)) > injectionSwitch.y))))
      return;
    }
   if((false))
    return;
   if((((((false ? (vec2(9240.5105, (1.0 * (0.1)))) : injectionSwitch)).x > (vec2(injectionSwitch[0], injectionSwitch[1])).y))))
    barrier();
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
