#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

struct _GLF_struct_0 {
 mat3 _f0;
 vec2 _f1;
 uint _f2;
 mat3x4 _f3;
 mat3x2 _f4;
} ;

struct _GLF_struct_1 {
 _GLF_struct_0 _f0;
} ;

struct _GLF_struct_2 {
 bvec3 _f0;
 _GLF_struct_1 _f1;
 uint next_virtual_gid;
 mat4x2 _f2;
 bool _f3;
 float _f4;
 int _f5;
 float _f6;
} ;

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   if(false)
    {
    }
   else
    {
     return;
    }
  }
 if(false)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
   do
    {
     if((false))
      barrier();
    }
   while(false);
   if(true)
    {
     if(false)
      {
       if((false))
        {
         do
          {
           barrier();
          }
         while(false);
        }
      }
     else
      {
       if(false)
        {
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if(false)
            {
            }
           else
            {
             barrier();
            }
          }
        }
      }
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     if(((false || (bool(bvec3(true, false, false))))))
      {
       if((false))
        barrier();
       for(int _injected_loop_counter = 1; _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
        {
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          continue;
        }
       if(false)
        {
         if((false))
          return;
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          return;
         for(int _injected_loop_counter = (0 & 8254); _injected_loop_counter < 1; _injected_loop_counter ++)
          {
           if((false))
            barrier();
          }
         if((false))
          {
           do
            {
             barrier();
            }
           while(false);
          }
         if((false))
          barrier();
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           if(true)
            {
             if((false))
              {
               if(((((bool(bvec4((! (! (((injectionSwitch.x > injectionSwitch.y))))), true, false, true))) || false))))
                {
                 if((false))
                  barrier();
                 barrier();
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 do
                  {
                   return;
                  }
                 while(false);
                }
               if((false))
                {
                 if(((injectionSwitch.x > injectionSwitch.y)))
                  {
                  }
                 else
                  {
                   if((false))
                    barrier();
                  }
                 if((false))
                  {
                   do
                    {
                     if(((injectionSwitch.x < injectionSwitch.y)))
                      {
                       barrier();
                      }
                     else
                      {
                      }
                    }
                   while(((injectionSwitch.x > injectionSwitch.y)));
                  }
                 if(((((injectionSwitch.x > injectionSwitch.y))) || false))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
               return;
              }
             if((false))
              {
               if(((true && (false))))
                barrier();
               return;
              }
            }
           else
            {
            }
          }
         else
          {
          }
         if(((false || (false))))
          barrier();
        }
      }
     else
      {
       if(false)
        {
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     if((false))
      {
       if(false)
        {
        }
       else
        {
         barrier();
        }
      }
     do
      {
       if(false)
        {
        }
       else
        {
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              barrier();
             if((false))
              return;
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             else
              {
               return;
              }
            }
           if((((! (! (bool(bvec4(false, ((injectionSwitch.x < injectionSwitch.y)), false, true))))))))
            barrier();
           if((false))
            barrier();
           barrier();
          }
        }
      }
     while(false);
     if((false))
      barrier();
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 if((false))
  {
   if(true)
    {
     for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
      {
       barrier();
       for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
            {
             barrier();
            }
          }
        }
      }
    }
   else
    {
    }
   if((false))
    barrier();
   if((false))
    return;
  }
 if((false))
  barrier();
 do
  {
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 while(false);
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if((false))
    return;
   if(false)
    {
    }
   else
    {
     if((false))
      return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(true)
      {
       barrier();
      }
     else
      {
      }
    }
   if(false)
    {
    }
   else
    {
     if((false))
      {
       if(true)
        {
         barrier();
        }
       else
        {
        }
       if((false))
        barrier();
      }
    }
   if((false))
    barrier();
   for(int _injected_loop_counter = 0; _injected_loop_counter < ((1 << ((int(int(int(1)))))) >> (int(1))); _injected_loop_counter ++)
    {
     for(int _injected_loop_counter = (0 ^ 1); _injected_loop_counter > (0 ^ (0 ^ 0)); _injected_loop_counter --)
      {
       for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != 1; _injected_loop_counter ++)
        {
         barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if(true)
        {
         if((false))
          barrier();
        }
       else
        {
        }
      }
    }
   do
    {
     if((((false) && true)))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
    }
   while(false);
   if((false))
    {
     do
      {
       if((false))
        return;
      }
     while(false);
     barrier();
    }
  }
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if((false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    barrier();
   for(int _injected_loop_counter = 1; _injected_loop_counter > (0 ^ 0); _injected_loop_counter --)
    {
     if(false)
      {
       for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
        {
         if((false))
          barrier();
        }
      }
     else
      {
       if((false))
        barrier();
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            return;
           barrier();
          }
        }
       if(true)
        {
         if(((((injectionSwitch.x > injectionSwitch.y)) || ((true && (false))))))
          barrier();
        }
       else
        {
        }
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
         if((false))
          barrier();
        }
      }
    }
   do
    {
     barrier();
    }
   while((! (! (false))));
   if((false))
    {
     for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
      {
       barrier();
      }
    }
  }
 if((false))
  return;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(true)
  {
   if((false))
    {
     if(true)
      {
       if((false))
        return;
      }
     else
      {
      }
     if((false))
      barrier();
     if(false)
      {
      }
     else
      {
       if(false)
        {
        }
       else
        {
         if((false))
          barrier();
         do
          {
           if((false))
            {
             do
              {
               barrier();
              }
             while(false);
            }
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
         if(((bool(bvec3(false, false, false)))))
          {
           for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
            {
             if((false))
              return;
             if(true)
              {
               barrier();
              }
             else
              {
              }
            }
          }
        }
      }
     if((false))
      {
       if(true)
        {
         barrier();
        }
       else
        {
        }
      }
     do
      {
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         return;
        }
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
    }
   for(int _injected_loop_counter = ((0) | (0)); _injected_loop_counter < ((1 << (((int(4)) | (int(4))))) >> (((int(4)) | 0))); _injected_loop_counter ++)
    {
     do
      {
       if(((false || (false))))
        barrier();
      }
     while(false);
    }
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     if((false))
      {
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(true)
          {
           return;
          }
         else
          {
          }
        }
       barrier();
      }
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(true)
    {
     if((false))
      {
       for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != 1; _injected_loop_counter ++)
        {
         if((false))
          barrier();
         do
          {
           for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != (0 ^ 0); _injected_loop_counter --)
            {
             if((false))
              break;
             do
              {
               if((false))
                barrier();
              }
             while(((injectionSwitch.x > injectionSwitch.y)));
            }
           if((false))
            return;
           if((false))
            barrier();
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
             if((false))
              {
               do
                {
                 if((false))
                  {
                   if(true)
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                }
               while(false);
               return;
              }
             do
              {
               if((false))
                {
                 do
                  {
                   barrier();
                   if(false)
                    {
                    }
                   else
                    {
                     if((false))
                      return;
                    }
                  }
                 while(false);
                 for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 if((false))
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if((false))
                    return;
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(((injectionSwitch.x < injectionSwitch.y)))
                      {
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        {
                         if(false)
                          {
                           if((false))
                            barrier();
                          }
                         else
                          {
                           barrier();
                          }
                        }
                      }
                     else
                      {
                       if((false))
                        continue;
                      }
                     if((false))
                      break;
                     continue;
                    }
                   break;
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 if((false))
                  return;
                }
              }
             while(false);
             if((false))
              continue;
            }
           else
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                barrier();
               barrier();
              }
             if((false))
              {
               if((false))
                continue;
               do
                {
                 if((false))
                  barrier();
                }
               while(((injectionSwitch.x > injectionSwitch.y)));
               for(int _injected_loop_counter = (max(1, 1)); _injected_loop_counter > 0; _injected_loop_counter --)
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(true)
                    {
                     if((false))
                      barrier();
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     if((false))
                      continue;
                    }
                   else
                    {
                    }
                   barrier();
                  }
                }
               break;
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             for(int _injected_loop_counter = (clamp(0, 0, ((0) + 0))); _injected_loop_counter != (1 | (0 >> (int(8)))); _injected_loop_counter ++)
              {
               if((false))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                return;
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  break;
                 for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 if((false))
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    continue;
                   break;
                  }
                 do
                  {
                   barrier();
                   if((false))
                    barrier();
                   do
                    {
                     if(false)
                      {
                      }
                     else
                      {
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        {
                         if(true)
                          {
                           barrier();
                          }
                         else
                          {
                           if((((injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                          }
                        }
                      }
                    }
                   while(false);
                  }
                 while(((injectionSwitch.x > injectionSwitch.y)));
                 if(false)
                  {
                  }
                 else
                  {
                   if((false))
                    {
                     do
                      {
                       if(true)
                        {
                         if((false))
                          barrier();
                        }
                       else
                        {
                        }
                      }
                     while(((injectionSwitch.x > injectionSwitch.y)));
                     if(((true && (((injectionSwitch.x > injectionSwitch.y))))))
                      return;
                     barrier();
                    }
                  }
                }
               if(false)
                {
                }
               else
                {
                 if((false))
                  continue;
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  return;
                }
              }
             if((false))
              return;
             do
              {
               if((false))
                barrier();
              }
             while(((injectionSwitch.x > injectionSwitch.y)));
             if((false))
              {
               for(int _injected_loop_counter = 0; _injected_loop_counter < (1 & 1); _injected_loop_counter ++)
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  break;
                 if(((injectionSwitch.x > injectionSwitch.y)))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
              }
             do
              {
               for(int _injected_loop_counter = (0 << (int(8))); _injected_loop_counter != 1; _injected_loop_counter ++)
                {
                 if((false))
                  {
                   if(false)
                    {
                    }
                   else
                    {
                     if((false))
                      barrier();
                    }
                   barrier();
                  }
                 barrier();
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   do
                    {
                     barrier();
                    }
                   while(false);
                  }
                 if((false))
                  {
                   if((false))
                    barrier();
                   if(false)
                    {
                    }
                   else
                    {
                     if((false))
                      barrier();
                    }
                   break;
                   if((false))
                    {
                     if(false)
                      {
                      }
                     else
                      {
                       if((false))
                        barrier();
                      }
                     continue;
                    }
                  }
                }
               if((false))
                {
                 if((false))
                  return;
                 if(((injectionSwitch.x < injectionSwitch.y)))
                  {
                   if(((injectionSwitch.x > injectionSwitch.y)))
                    {
                    }
                   else
                    {
                     if((false))
                      barrier();
                    }
                   if((((((injectionSwitch.x > injectionSwitch.y))) && true)))
                    {
                     if((false))
                      {
                       if(((injectionSwitch.x < injectionSwitch.y)))
                        {
                         barrier();
                        }
                       else
                        {
                        }
                      }
                     return;
                    }
                   barrier();
                  }
                 else
                  {
                  }
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                break;
              }
             while(((injectionSwitch.x > injectionSwitch.y)));
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                barrier();
               if((false))
                continue;
               return;
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((false))
              barrier();
            }
          }
         while(false);
        }
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
      }
     if((false))
      barrier();
    }
   else
    {
    }
   if((false))
    barrier();
   if(false)
    {
    }
   else
    {
     if(true)
      {
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
        }
       if((false))
        barrier();
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
         if(true)
          {
           if((false))
            {
             if(false)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if(((true && ((bool(bool(false)))))))
                  {
                   if(((injectionSwitch.x > injectionSwitch.y)))
                    {
                    }
                   else
                    {
                     barrier();
                    }
                  }
                 return;
                }
               if((false))
                barrier();
              }
             else
              {
               if((false))
                return;
              }
             do
              {
               if((false))
                barrier();
               if((false))
                barrier();
               if(((bool(bvec2(false, true)))))
                {
                 if((false))
                  return;
                 barrier();
                }
              }
             while(false);
             if((false))
              {
               if(true)
                {
                 return;
                }
               else
                {
                }
              }
             for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
              {
               return;
              }
            }
          }
         else
          {
           if((false))
            barrier();
          }
         if((false))
          return;
        }
       else
        {
         if(true)
          {
           for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < ((1 << (int(6))) >> (int(6))); _injected_loop_counter ++)
            {
             if(true)
              {
               if((((false) || false)))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               for(int _injected_loop_counter = (0 | 0); _injected_loop_counter != 1; _injected_loop_counter ++)
                {
                 if((false))
                  return;
                }
               if((false))
                return;
               do
                {
                 if(((injectionSwitch.x > injectionSwitch.y)))
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 else
                  {
                   if((false))
                    barrier();
                   if((false))
                    barrier();
                  }
                }
               while(false);
              }
             else
              {
              }
            }
          }
         else
          {
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             return;
            }
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         return;
        }
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if((false))
          return;
        }
       else
        {
         if(false)
          {
          }
         else
          {
           if((false))
            {
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
              }
             else
              {
               barrier();
              }
            }
          }
        }
      }
    }
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
    }
   else
    {
     if((false))
      {
       if((false))
        barrier();
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         barrier();
        }
       else
        {
        }
      }
    }
   do
    {
     if((false))
      barrier();
    }
   while(false);
  }
 else
  {
   if((false))
    return;
   do
    {
     if((false))
      {
       do
        {
         barrier();
        }
       while(false);
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
   if((false))
    {
     if((false))
      {
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         barrier();
        }
      }
     barrier();
    }
   if((false))
    {
     do
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(false);
     if(true)
      {
       if(false)
        {
        }
       else
        {
         if((false))
          {
           if((false))
            return;
           return;
          }
         if((false))
          barrier();
        }
      }
     else
      {
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     do
      {
       return;
      }
     while(false);
     if((false))
      return;
     if(false)
      {
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if((false))
      {
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             barrier();
            }
           while(false);
          }
         for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
          {
           if((false))
            barrier();
          }
        }
       else
        {
         if((false))
          return;
        }
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
    }
  }
 if((false))
  {
   do
    {
     if((false))
      {
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         for(int _injected_loop_counter = 1; _injected_loop_counter != (int((injectionSwitch.x)) ^ 0); _injected_loop_counter --)
          {
           if((false))
            break;
           if(true)
            {
             if(true)
              {
               barrier();
              }
             else
              {
              }
            }
           else
            {
             if((false))
              {
               if((false))
                {
                 if((false))
                  barrier();
                 continue;
                }
               if((false))
                barrier();
               return;
              }
            }
          }
        }
       else
        {
        }
      }
    }
   while(false);
   if((false))
    return;
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
     for(int _injected_loop_counter = ((0 >> (int(8))) ^ ((1 << (int(1))) >> (int(1)))); _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
      {
       if((false))
        {
         for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
          {
           barrier();
          }
        }
      }
     if((false))
      return;
     for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           return;
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             barrier();
            }
           while(false);
          }
         barrier();
        }
      }
     if(((((injectionSwitch.x < injectionSwitch.y)) && (((injectionSwitch.x > injectionSwitch.y))))))
      {
       if((false))
        return;
       if((false))
        {
         for(int _injected_loop_counter = 1; _injected_loop_counter != (0 ^ 0); _injected_loop_counter --)
          {
           barrier();
          }
        }
       return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((bool(bvec4((bool(bvec2(((injectionSwitch.x > injectionSwitch.y)), true))), false, false, true))))
        {
        }
       else
        {
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              {
               if(((injectionSwitch.x < injectionSwitch.y)))
                {
                 return;
                }
               else
                {
                }
              }
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
              }
             else
              {
               barrier();
               if(false)
                {
                }
               else
                {
                 if((false))
                  {
                   if(((injectionSwitch.x > injectionSwitch.y)))
                    {
                    }
                   else
                    {
                     return;
                    }
                  }
                }
              }
            }
           if(false)
            {
            }
           else
            {
             if(false)
              {
              }
             else
              {
               return;
               if(false)
                {
                }
               else
                {
                 if((false))
                  return;
                }
              }
             for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > (0 >> (int(8))); _injected_loop_counter --)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
            }
           if((false))
            {
             if(((injectionSwitch.x < injectionSwitch.y)))
              {
               return;
              }
             else
              {
              }
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            {
             if(((bool(bool(false)))))
              return;
             return;
            }
          }
        }
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if(false)
          {
          }
         else
          {
           if((false))
            {
             if((false))
              {
               for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                {
                 barrier();
                 if(((bool(bvec2((bool(bvec3(false, false, true))), false)))))
                  return;
                }
               for(int _injected_loop_counter = (0 ^ 0); _injected_loop_counter != 1; _injected_loop_counter ++)
                {
                 if(((! (! (((false) || false))))))
                  barrier();
                }
              }
             barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
        }
       else
        {
        }
       if((false))
        return;
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           if((false))
            barrier();
           return;
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
        }
      }
    }
   else
    {
     if(((bool(bvec2(false, false)))))
      barrier();
     if((false))
      barrier();
     for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
      {
       if((((((injectionSwitch.x > injectionSwitch.y))) || false)))
        {
         for(int _injected_loop_counter = 1; _injected_loop_counter > ((0 | 0) | 0); _injected_loop_counter --)
          {
           barrier();
          }
        }
      }
     if(false)
      {
       do
        {
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
        }
       while(false);
       if((false))
        return;
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if((false))
          barrier();
        }
       else
        {
        }
       if(true)
        {
         for(int _injected_loop_counter = 0; _injected_loop_counter != (1 ^ 0); _injected_loop_counter ++)
          {
           if((false))
            barrier();
          }
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           if((false))
            barrier();
          }
         else
          {
          }
         if((false))
          {
           do
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           while(false);
           if(false)
            {
            }
           else
            {
             return;
            }
          }
         if(((bool((bool(bool(bool(false))))))))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(false)
          {
          }
         else
          {
           if((false))
            barrier();
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(true)
              {
               barrier();
              }
             else
              {
              }
            }
           if((false))
            return;
          }
         if((false))
          barrier();
        }
       else
        {
         if(false)
          {
          }
         else
          {
           if((false))
            return;
          }
         if((false))
          {
           if((false))
            return;
           barrier();
          }
        }
       if(false)
        {
        }
       else
        {
         if(false)
          {
          }
         else
          {
           if((false))
            {
             if((false || (true)))
              {
               barrier();
              }
             else
              {
              }
            }
          }
         if(((false || (false))))
          {
           do
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
                {
                 barrier();
                }
               if((false))
                {
                 if((bool(bvec4(true, ((injectionSwitch.x < injectionSwitch.y)), false, true))))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
              }
            }
           while(false);
           if(false)
            {
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
              }
             else
              {
               if((false))
                barrier();
              }
            }
           else
            {
             barrier();
            }
          }
        }
       if((false))
        barrier();
      }
     else
      {
       do
        {
         if((false))
          return;
         if(((bool(bool((false || (false)))))))
          barrier();
         barrier();
        }
       while(false);
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      {
       if(true)
        {
         if((false))
          {
           for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
            {
             for(int _injected_loop_counter = 0; _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
              {
               if((false))
                barrier();
              }
            }
           barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(true)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
          }
         do
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(false)
            {
            }
           else
            {
             do
              {
               barrier();
              }
             while(false);
            }
          }
         while(false);
         if((false))
          {
           if((false))
            {
             do
              {
               barrier();
              }
             while(false);
             if((false))
              {
               for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
                {
                 barrier();
                }
              }
            }
           for(int _injected_loop_counter = (max(0, ((false ? (20173) : 0)))); _injected_loop_counter < 1; _injected_loop_counter ++)
            {
             barrier();
            }
          }
        }
       else
        {
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         return;
        }
      }
     if(true)
      {
       if((false))
        {
         if((false))
          barrier();
         return;
        }
      }
     else
      {
      }
    }
  }
 do
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      continue;
     return;
     if((false))
      break;
     if((false))
      barrier();
     if((false))
      {
       if(false)
        {
        }
       else
        {
         if(false)
          {
          }
         else
          {
           if(((false || (false))))
            {
             if((false))
              continue;
             do
              {
               barrier();
              }
             while((false || (((injectionSwitch.x > injectionSwitch.y)))));
            }
           if((false))
            {
             for(int _injected_loop_counter = (0 >> (int(6))); _injected_loop_counter != 1; _injected_loop_counter ++)
              {
               barrier();
              }
            }
           if(false)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           else
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
        }
       barrier();
      }
    }
   if((false))
    {
     if((false))
      barrier();
     for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
      {
       if((false))
        barrier();
       do
        {
         if((false))
          barrier();
         barrier();
        }
       while(false);
      }
     if((false))
      barrier();
    }
  }
 while(false);
 uint workgroup_id = gl_WorkGroupID.x;
 if(false)
  {
  }
 else
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     if((false))
      {
       do
        {
         if((false))
          barrier();
        }
       while(false);
       do
        {
         if(false)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         else
          {
           if((false))
            {
             do
              {
               barrier();
              }
             while(false);
            }
           barrier();
          }
        }
       while(false);
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
          {
           return;
          }
        }
      }
     if((false))
      return;
     if((false))
      {
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
       do
        {
         return;
        }
       while(false);
      }
     if(true)
      {
       if(false)
        {
        }
       else
        {
         if((false))
          {
           if((false))
            return;
           if((false))
            return;
           barrier();
          }
        }
      }
     else
      {
      }
     if(true)
      {
       if((false))
        {
         if((false))
          barrier();
         if(true)
          {
           do
            {
             barrier();
            }
           while(false);
          }
         else
          {
           if((false))
            barrier();
          }
        }
      }
     else
      {
      }
     return;
    }
  }
 if((false))
  {
   if((false))
    {
     do
      {
       barrier();
      }
     while(false);
    }
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     if((false))
      barrier();
    }
   else
    {
    }
   barrier();
  }
 for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != (0 >> (int(3))); _injected_loop_counter --)
  {
   if((false))
    barrier();
   if(true)
    {
     do
      {
       if(true)
        {
         if((false))
          {
           do
            {
             if((false))
              barrier();
            }
           while(false);
           if(true)
            {
             if(false)
              {
              }
             else
              {
               if(true)
                {
                 return;
                }
               else
                {
                }
               if(((injectionSwitch.x > injectionSwitch.y)))
                {
                }
               else
                {
                 for(int _injected_loop_counter = 0; _injected_loop_counter != ((1 << (int(7))) >> (int(7))); _injected_loop_counter ++)
                  {
                   if((false))
                    barrier();
                  }
                }
              }
            }
           else
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(false)
              {
              }
             else
              {
               if((false))
                barrier();
              }
            }
          }
        }
       else
        {
         if((bool(bvec4(((injectionSwitch.x > injectionSwitch.y)), true, true, true))))
          {
          }
         else
          {
           if(((bool(bvec4(false, false, true, false)))))
            barrier();
          }
        }
       if((false))
        {
         if(false)
          {
          }
         else
          {
           barrier();
          }
        }
       for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
        {
         if((false))
          {
           if(((true && (false))))
            continue;
           barrier();
          }
         if(true)
          {
           if((false))
            {
             do
              {
               barrier();
              }
             while(false);
            }
          }
         else
          {
          }
        }
       if((false))
        barrier();
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
     if(true)
      {
       if((false))
        barrier();
      }
     else
      {
      }
     do
      {
       if(((bool(bool(false)))))
        {
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           if(true)
            {
             barrier();
            }
           else
            {
            }
          }
         else
          {
          }
        }
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
    }
   else
    {
    }
   if((false))
    {
     if((false))
      {
       for(int _injected_loop_counter = 0; _injected_loop_counter != ((0 << (int(7))) | 1); _injected_loop_counter ++)
        {
         if((false))
          {
           do
            {
             do
              {
               if((false))
                barrier();
               return;
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             while(false);
            }
           while(false);
           if((false))
            {
             for(int _injected_loop_counter = (0 | 0); _injected_loop_counter < (int((injectionSwitch.y)) | 1); _injected_loop_counter ++)
              {
               barrier();
              }
            }
          }
        }
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      break;
     if((false))
      {
       if((false))
        continue;
       break;
      }
     do
      {
       barrier();
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
    }
   else
    {
     barrier();
    }
  }
 if((false))
  return;
 if((false))
  barrier();
 uint workgroup_base = workgroup_size * workgroup_id;
 do
  {
   if((false))
    {
     if((false))
      {
       if((false))
        barrier();
       return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if(true)
      {
       if((false))
        {
         if((false))
          barrier();
         if(false)
          {
           if((false))
            continue;
          }
         else
          {
           barrier();
          }
        }
       for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
        {
         barrier();
        }
      }
     else
      {
      }
    }
  }
 while((bool(bvec4(false, true, ((injectionSwitch.x > injectionSwitch.y)), false))));
 do
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      {
       if((false))
        return;
       barrier();
      }
     if(true)
      {
       barrier();
      }
     else
      {
      }
     if((false))
      continue;
    }
  }
 while(false);
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 do
  {
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
     if(false)
      {
      }
     else
      {
       if((false))
        {
         if((false))
          barrier();
         return;
        }
      }
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
        {
         return;
        }
       for(int _injected_loop_counter = 1; _injected_loop_counter != (0 | 0); _injected_loop_counter --)
        {
         if((false))
          barrier();
        }
      }
     if((false))
      {
       for(int _injected_loop_counter = 1; _injected_loop_counter != (0 >> (int(7))); _injected_loop_counter --)
        {
         return;
        }
      }
    }
  }
 while(false);
 if((false))
  {
   if((false))
    barrier();
   if(false)
    {
    }
   else
    {
     barrier();
    }
  }
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 _GLF_struct_2 _GLF_struct_replacement_2 = _GLF_struct_2(bvec3(true), _GLF_struct_1(_GLF_struct_0(mat3(1.0), vec2(1.0), 1u, mat3x4(1.0), mat3x2(1.0))), workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size), mat4x2(1.0), true, 1.0, 1, 1.0);
 do
  {
   if((false))
    barrier();
   if(true)
    {
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     do
      {
       buf[virtual_gid] = 1;
      }
     while(false);
     if((false))
      {
       if((false))
        {
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           barrier();
          }
        }
       do
        {
         return;
         if((false))
          break;
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((bool(bvec4(((true) && true), true, true, ((injectionSwitch.x < injectionSwitch.y))))))
        {
         if((false))
          {
           if((false))
            barrier();
           for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
            {
             barrier();
            }
          }
         if((false))
          barrier();
        }
       else
        {
        }
       if((false))
        break;
       barrier();
       do
        {
         for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
          {
           if(true)
            {
             if((false))
              barrier();
            }
           else
            {
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
             barrier();
            }
          }
        }
       while(false);
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
            }
           continue;
          }
         break;
        }
      }
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        {
         if(true)
          {
           if((false))
            {
             if((false))
              {
               if((false))
                {
                 do
                  {
                   barrier();
                  }
                 while(false);
                }
               return;
              }
             do
              {
               return;
              }
             while(false);
            }
          }
         else
          {
          }
         if(true)
          {
           if((false))
            barrier();
          }
         else
          {
          }
         continue;
        }
       break;
       if((false))
        {
         if(false)
          {
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         barrier();
        }
      }
     do
      {
       for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
        {
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           break;
          }
         do
          {
           for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
            {
             if((false))
              {
               for(int _injected_loop_counter = 1; _injected_loop_counter != (0 & int((+ 186329u))); _injected_loop_counter --)
                {
                 if((false))
                  {
                   do
                    {
                     for(int _injected_loop_counter = ((1 << (int(1))) >> (int(1))); _injected_loop_counter > (0 | 0); _injected_loop_counter --)
                      {
                       if((false))
                        barrier();
                      }
                    }
                   while(((injectionSwitch.x > injectionSwitch.y)));
                   do
                    {
                     barrier();
                     do
                      {
                       if((false))
                        barrier();
                      }
                     while(false);
                    }
                   while(((injectionSwitch.x > injectionSwitch.y)));
                  }
                }
               if((false))
                {
                 if((false))
                  break;
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
               if(true)
                {
                 for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                  {
                   if((false))
                    barrier();
                   do
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     for(int _injected_loop_counter = 1; _injected_loop_counter != (0 ^ 0); _injected_loop_counter --)
                      {
                       if((false))
                        return;
                       if(true)
                        {
                         if((false))
                          {
                           do
                            {
                             barrier();
                            }
                           while(false);
                          }
                        }
                       else
                        {
                        }
                       if((false))
                        barrier();
                      }
                     if((false))
                      continue;
                     if(true)
                      {
                       if(((injectionSwitch.x > injectionSwitch.y)))
                        {
                        }
                       else
                        {
                         return;
                         if((false))
                          break;
                        }
                       if((false))
                        barrier();
                       if((false))
                        continue;
                       if((false))
                        break;
                      }
                     else
                      {
                      }
                    }
                   while(false);
                  }
                }
               else
                {
                }
               if((false))
                {
                 for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
                  {
                   barrier();
                  }
                }
              }
            }
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     while(false);
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
       barrier();
      }
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if((false))
        barrier();
       if((false))
        barrier();
      }
     else
      {
       if((false))
        barrier();
      }
     if((false))
      continue;
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         do
          {
           if(false)
            {
            }
           else
            {
             if((false))
              barrier();
            }
           barrier();
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
         if((false))
          barrier();
        }
       while(false);
      }
     if((false))
      barrier();
    }
   else
    {
     if(true)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
      }
     if((((false) || false)))
      return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       if((false))
        barrier();
      }
     break;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 while(((injectionSwitch.x > injectionSwitch.y)));
 do
  {
   do
    {
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(true)
          {
           if((false))
            {
             if((false))
              {
               if(false)
                {
                }
               else
                {
                 barrier();
                }
              }
             do
              {
               barrier();
              }
             while(false);
             if((false))
              barrier();
            }
          }
         else
          {
          }
         do
          {
           barrier();
          }
         while(false);
        }
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(true)
          {
           if(true)
            {
             if((false))
              {
               if(((injectionSwitch.x < injectionSwitch.y)))
                {
                 barrier();
                }
               else
                {
                 if((false))
                  continue;
                }
              }
            }
           else
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
         else
          {
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          barrier();
         return;
         if((false))
          {
           for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
            {
             for(int _injected_loop_counter = 1; _injected_loop_counter != (- 44565 & 0); _injected_loop_counter --)
              {
               barrier();
               for(int _injected_loop_counter = 1; _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
              }
            }
          }
        }
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(true)
          {
           return;
          }
         else
          {
          }
        }
       if((false))
        {
         if(false)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
           if((false))
            barrier();
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             break;
            }
          }
         else
          {
           if((false))
            barrier();
           barrier();
          }
        }
      }
     do
      {
       if((false))
        barrier();
      }
     while((false || (false)));
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
  }
 while((! (! (false))));
 for(int _injected_loop_counter = 1; _injected_loop_counter > (0 >> (int(6))); _injected_loop_counter --)
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(false)
        {
        }
       else
        {
         if((false))
          barrier();
        }
       barrier();
      }
     do
      {
       do
        {
         barrier();
        }
       while(((((((injectionSwitch.x > injectionSwitch.y))) && true)) || false));
      }
     while(false);
    }
   if(subgroup_local_id + 1 < subgroup_size)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        break;
       for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
        {
         barrier();
        }
      }
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        continue;
       do
        {
         barrier();
        }
       while(false);
      }
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if((false))
        break;
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         do
          {
           if((! (! (false))))
            {
            }
           else
            {
             return;
            }
          }
         while(false);
        }
      }
     else
      {
      }
     do
      {
       if(true)
        {
         if((false))
          return;
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
              {
               barrier();
              }
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              continue;
             barrier();
            }
           if(((true && (false))))
            barrier();
           for(int _injected_loop_counter = (0 >> (int(1))); _injected_loop_counter < 1; _injected_loop_counter ++)
            {
             if((false))
              {
               for(int _injected_loop_counter = 1; _injected_loop_counter != (0 >> (int(0))); _injected_loop_counter --)
                {
                 barrier();
                }
              }
            }
           barrier();
          }
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             barrier();
            }
           while(false);
           if((false))
            break;
          }
         if(false)
          {
          }
         else
          {
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             if((false))
              {
               if((false))
                barrier();
               continue;
              }
             atomicStore(buf[_GLF_struct_replacement_2.next_virtual_gid], uint(2), 4, 64, 0);
             if(((true && (false))))
              barrier();
            }
           else
            {
             if((false))
              {
               if((false))
                {
                 if(false)
                  {
                  }
                 else
                  {
                   return;
                  }
                }
               break;
              }
            }
           if((false))
            barrier();
          }
        }
       else
        {
         for(int _injected_loop_counter = (0 & - 13100); _injected_loop_counter < ((- 63457 & 0) ^ ((1 << (int(5))) >> ((min(int(5), int(5)))))); _injected_loop_counter ++)
          {
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             if((false))
              barrier();
            }
          }
         if((false))
          {
           do
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((false))
              return;
             if((false))
              break;
             barrier();
            }
           while(false);
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         do
          {
           barrier();
          }
         while(false);
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           continue;
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         if((false))
          barrier();
        }
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
     for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       subgroupAll(false);
       if(((true) || false))
        {
         if((false))
          barrier();
        }
       else
        {
        }
       for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
        {
         if((false))
          barrier();
        }
      }
     do
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          barrier();
         break;
        }
       do
        {
         do
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           if((false))
            {
             for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
              {
               return;
              }
            }
           if((false))
            barrier();
           if((false))
            break;
           if((false))
            barrier();
           if((false))
            {
             if(((! (! ((! (! (false))))))))
              continue;
             barrier();
             if((false))
              {
               do
                {
                 barrier();
                }
               while(false);
              }
            }
          }
         while(false);
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             if((false))
              {
               if((false))
                barrier();
               barrier();
              }
            }
           continue;
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            break;
           continue;
           if((false))
            barrier();
          }
         if(((bool(bvec2(false, false)))))
          {
           if((false))
            barrier();
           break;
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             barrier();
             if((false))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
            }
          }
         do
          {
           if((false))
            {
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
              }
             else
              {
               barrier();
              }
            }
          }
         while(false);
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              {
               if(((true && ((true && (false))))))
                {
                 do
                  {
                   return;
                  }
                 while(false);
                }
               barrier();
              }
             if((false))
              continue;
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(true)
              {
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 if((false))
                  continue;
                 if(((injectionSwitch.x < injectionSwitch.y)))
                  {
                   if(((true) && true))
                    {
                     if((false))
                      barrier();
                    }
                   else
                    {
                    }
                   if(false)
                    {
                     for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
                      {
                       if((false))
                        barrier();
                      }
                    }
                   else
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     return;
                    }
                   if((false))
                    barrier();
                  }
                 else
                  {
                  }
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                continue;
              }
             else
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 for(int _injected_loop_counter = 1; _injected_loop_counter != (0 >> (int(3))); _injected_loop_counter --)
                  {
                   barrier();
                  }
                }
              }
             if(true)
              {
               do
                {
                 if(((bool((bvec2(bvec4(bvec2((! (! (false))), false), true, false)))))))
                  {
                   if((false))
                    return;
                   barrier();
                   if(((! (! (false)))))
                    barrier();
                  }
                 for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
                  {
                   return;
                  }
                 do
                  {
                   if((false))
                    barrier();
                  }
                 while(false);
                 if((false))
                  break;
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if((false))
                    barrier();
                   if((false))
                    continue;
                   if((false))
                    barrier();
                   for(int _injected_loop_counter = 1; _injected_loop_counter != (0 >> (((((int(4)) / 1)) ^ 0))); _injected_loop_counter --)
                    {
                     barrier();
                    }
                  }
                }
               while(((injectionSwitch.x > injectionSwitch.y)));
               if((((injectionSwitch.x > injectionSwitch.y))))
                break;
              }
             else
              {
              }
             if((true && (false)))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  break;
                 barrier();
                 if((false))
                  {
                   for(int _injected_loop_counter = (1 | int((injectionSwitch.y))); _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
                    {
                     barrier();
                    }
                  }
                }
               if(((bool((bvec3(bvec4(bvec3(false, false, true), false)))))))
                barrier();
              }
             else
              {
               if((false))
                {
                 if((false))
                  {
                   if((false))
                    continue;
                   barrier();
                  }
                 break;
                }
               if((false))
                {
                 do
                  {
                   barrier();
                  }
                 while(((injectionSwitch.x > injectionSwitch.y)));
                }
               if((false))
                {
                 if((false))
                  {
                   if((false))
                    barrier();
                   continue;
                  }
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 if((false))
                  barrier();
                 for(int _injected_loop_counter = 1; _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
                  {
                   barrier();
                  }
                 if((false))
                  {
                   if((false))
                    {
                     if(false)
                      {
                      }
                     else
                      {
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                      }
                     continue;
                    }
                   if(false)
                    {
                    }
                   else
                    {
                     do
                      {
                       barrier();
                      }
                     while(false);
                    }
                  }
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
              }
             if(true)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               do
                {
                 if((false))
                  barrier();
                }
               while(((false) && true));
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  return;
                 barrier();
                }
              }
             else
              {
              }
            }
           barrier();
           if((false))
            {
             if((false))
              barrier();
             if((false))
              barrier();
             if((false))
              {
               if((false))
                barrier();
               continue;
               if((false))
                {
                 if((false))
                  barrier();
                 break;
                }
              }
             for(int _injected_loop_counter = (1 ^ 1); _injected_loop_counter < (((1 & 1) << (int(4))) >> (int(4))); _injected_loop_counter ++)
              {
               if(true)
                {
                 barrier();
                }
               else
                {
                }
              }
            }
          }
         if((false))
          {
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             barrier();
            }
           else
            {
            }
          }
         for(int _injected_loop_counter = 0; _injected_loop_counter < (0 ^ 1); _injected_loop_counter ++)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
              }
             else
              {
               if((false))
                return;
              }
             if((false))
              barrier();
             barrier();
            }
          }
         if((false))
          {
           if((false))
            barrier();
           continue;
          }
        }
       while(false);
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        {
         if((false))
          barrier();
         if((false))
          barrier();
         continue;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
       if((false))
        break;
       if((false))
        {
         if((false))
          barrier();
         if(true)
          {
           barrier();
          }
         else
          {
          }
        }
      }
     while(false);
    }
   else
    {
     if((false))
      barrier();
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if(((true && ((true && (false))))))
          barrier();
         if((false))
          continue;
        }
       else
        {
        }
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
      }
     do
      {
       if(true)
        {
         atomicStore(buf[_GLF_struct_replacement_2.next_virtual_gid], uint(2), 4, 64, 0);
        }
       else
        {
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
       if((false))
        barrier();
      }
     while(false);
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       subgroupAll(true);
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
      }
     else
      {
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
        }
       while(false);
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         continue;
        }
       if((false))
        barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      continue;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       barrier();
      }
     while(false);
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    continue;
  }
 if((false))
  {
   if(false)
    {
    }
   else
    {
     barrier();
    }
  }
 if(true)
  {
   if((false))
    return;
  }
 else
  {
  }
 if(((true && (false))))
  {
   if((((false) && true)))
    return;
   do
    {
     if((false))
      barrier();
    }
   while(false);
   if(true)
    {
     if((false))
      barrier();
    }
   else
    {
    }
   if(true)
    {
     if((false))
      {
       if((false))
        barrier();
       return;
      }
     return;
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      {
       if((false))
        {
         if(false)
          {
          }
         else
          {
           barrier();
          }
        }
       return;
      }
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(((! (! (false)))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    {
     if(false)
      {
      }
     else
      {
       return;
      }
    }
   for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
    {
     do
      {
       barrier();
      }
     while(false);
     for(int _injected_loop_counter = ((- 42078 - - 57348) & (0 << (int(5)))); _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
      {
       if((false))
        {
         if((false))
          return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if(false)
            {
            }
           else
            {
             barrier();
            }
          }
         barrier();
        }
      }
    }
  }
 if(true)
  {
   if((false))
    {
     if(true)
      {
       if((false))
        return;
      }
     else
      {
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         barrier();
         for(int _injected_loop_counter = ((int((injectionSwitch.y)) << (int(1))) >> (((false ? (93787) : int(1))))); _injected_loop_counter > 0; _injected_loop_counter --)
          {
           if((false))
            {
             if(((injectionSwitch.x < injectionSwitch.y)))
              {
               return;
              }
             else
              {
              }
            }
          }
        }
       else
        {
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        return;
       if((false))
        return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > (0 >> (((int(2)) - 0))); _injected_loop_counter --)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
     if((false))
      barrier();
     if((false))
      barrier();
     if(true)
      {
       do
        {
         if((false))
          barrier();
         barrier();
        }
       while(false);
      }
     else
      {
      }
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       if(false)
        {
        }
       else
        {
         if((false))
          barrier();
         if((false))
          return;
        }
      }
     if(false)
      {
      }
     else
      {
       if((false))
        {
         if((false))
          {
           do
            {
             return;
            }
           while(false);
          }
         if((false))
          barrier();
         if((false))
          return;
         return;
        }
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(((false || (false))))
      barrier();
     return;
    }
   if((false))
    {
     if(true)
      {
       if((false))
        barrier();
      }
     else
      {
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      barrier();
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
     if(true)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(false)
          {
          }
         else
          {
           return;
          }
        }
      }
     else
      {
      }
    }
  }
 else
  {
  }
 if((false))
  barrier();
 if(true)
  {
   if((false))
    {
     if((((! (! (true)))) || false))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 else
  {
   if(((false || (((injectionSwitch.x > injectionSwitch.y))))))
    barrier();
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
