#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = ((min(uint(uint(gl_NumWorkGroups.x)), uint(uint(gl_NumWorkGroups.x)))));
 if((false))
  return;
 uint workgroup_size = ((((gl_WorkGroupSize.x) | 0u) >> 0u));
 do
  {
   if(false)
    {
    }
   else
    {
     do
      {
       if((false))
        continue;
       if((false))
        return;
      }
     while(false);
    }
   if((false))
    {
     for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > 0; _injected_loop_counter --)
      {
       return;
      }
    }
   if(((bool((bvec3(bvec4(bvec3(false, true, false), false)))))))
    continue;
  }
 while(((injectionSwitch.x > injectionSwitch.y)));
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * (~ (~ (workgroup_id)));
 uint virtual_gid = (0u ^ ((~ (((true ? ~ (((((workgroup_base) | (workgroup_base))) | (workgroup_base))) : (workgroup_id))))))) + subgroup_id * subgroup_size + (((((uint(uvec4((uint(uint(subgroup_local_id))), (0u << (uint(5u))), uint((injectionSwitch.y)), 0u))) ^ (~ (~ (((0u) - 0u))))) | (((min((clamp(uint(uvec4((((~ (((((((~ ((clamp((clamp((~ (~ ((uint(uvec4((uint(uint(((subgroup_local_id) >> 0u)))), (0u << (uint(5u))), uint((injectionSwitch.y)), 0u)))))), (uint(uvec4((uint(uint(((subgroup_local_id) >> 0u)))), (0u << (uint(5u))), uint((injectionSwitch.y)), 0u))), (uint(uvec4((uint(uint(((subgroup_local_id) >> 0u)))), (0u << (uint(5u))), uint((injectionSwitch.y)), 0u))))), (uint(uvec4((uint(uint(((subgroup_local_id) >> 0u)))), (0u << (uint(5u))), uint((injectionSwitch.y)), 0u))), (uint(uvec4((uint(uint(((subgroup_local_id) >> 0u)))), (0u << (uint(5u))), uint((injectionSwitch.y)), 0u))))) ^ 0u)))) | (((~ ((clamp((clamp((~ (~ ((uint(uvec4((uint(uint(((subgroup_local_id) >> 0u)))), (0u << (uint(5u))), uint((injectionSwitch.y)), 0u)))))), (uint(uvec4((uint(uint(((subgroup_local_id) >> 0u)))), (0u << (uint(5u))), uint((injectionSwitch.y)), 0u))), (uint(uvec4((uint(uint(((subgroup_local_id) >> 0u)))), (0u << (uint(5u))), uint((injectionSwitch.y)), 0u))))), (uint(uvec4((uint(uint(((subgroup_local_id) >> 0u)))), (0u << (uint(5u))), uint((injectionSwitch.y)), 0u))), (uint(uvec4((uint(uint(((subgroup_local_id) >> 0u)))), (0u << (uint(5u))), uint((injectionSwitch.y)), 0u))))) ^ 0u))))) / 1u)) ^ 0u))) | ((uint(uvec4((uint(uint(subgroup_local_id))), (0u << (uint(5u))), uint((((min(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch)))).y)), 0u))) ^ ((0u ^ (((~ (~ ((~ (~ (0u | ((((0u)) * 1u))))))))))) / 1u))), 0u, 0u, 0u)), uint(uvec4((((max((~ (~ ((uint(uvec4((uint(uint(subgroup_local_id))), (0u << (uint(5u))), uint((injectionSwitch.y)), 0u))) ^ 0u))), (~ (~ ((uint(uvec4((uint(uint(subgroup_local_id))), (0u << (uint(5u))), uint((injectionSwitch.y)), 0u))) ^ 0u)))))) | ((uint(uvec4((uint(uint(subgroup_local_id))), (~ (~ ((min((~ (~ ((0u << (uint(5u)))))), (~ (~ ((0u << (uint(5u))))))))))), uint(((((false ? (log(vec2(- 2154.4706, 9816.4297))) : (((true ? max(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch)) : (injectionSwitch))))))).y)), 0u))) ^ (((~ (~ ((~ (((~ (0u)) / 1u))))))) / (0u + (((1u) - 0u)))))), 0u, 0u, 0u)), uint(uvec4(((clamp((uint(uvec3((uint(uvec4(((~ (~ ((uint(uvec4((uint(uint(subgroup_local_id))), (0u << (uint(5u))), uint((injectionSwitch.y)), 0u))) ^ 0u)))) | ((uint(uvec4((uint(uint(subgroup_local_id))), (0u << (uint(5u))), uint(((mat2(1.0) * (injectionSwitch)).y)), 0u))) ^ (((~ (((~ ((~ (~ (0u)))))) / 1u))) / 1u)), 1u, 0u, 1u))), 0u, uint((injectionSwitch.x))))), ((~ (~ ((uint(uvec4((uint(uint(subgroup_local_id))), (0u << (uint(5u))), uint((injectionSwitch.y)), 0u))) ^ 0u)))) | ((uint(uvec4((uint((1u * ((min(((uint(subgroup_local_id)) | (uint(subgroup_local_id))), uint(subgroup_local_id))))))), (0u << (uint(5u))), uint(((mat2(1.0) * (((max((injectionSwitch), (injectionSwitch)))) / vec2(1.0, 1.0))).y)), 0u))) ^ (((~ (~ ((~ (~ (0u))))))) / 1u)), (((((true ? (~ ((min(((false ? (workgroup_base) : ~ ((uint(uvec4((uint(uint(subgroup_local_id))), (0u << (uint(5u))), uint(((vec2(injectionSwitch[0], injectionSwitch[1])).y)), 0u))) ^ 0u))), ~ ((uint(uvec4((uint(uint(subgroup_local_id))), (0u << (uint(5u))), uint(((vec2(injectionSwitch[0], injectionSwitch[1])).y)), 0u))) ^ 0u))))) : (subgroup_local_id)))) - 0u)) | ((uint(uvec4((uint(uint((~ (~ (subgroup_local_id)))))), (0u << ((clamp(uint(5u), uint(5u), uint(5u))))), uint(((mat2(1.0) * (injectionSwitch)).y)), ((0u) - 0u)))) ^ (((~ (((~ ((~ (~ ((max(0u, 0u))))))) - 0u)))) / 1u))))), 0u, 0u, 0u)))), uint(uvec4((((uint(uvec2((~ (~ ((uint(uvec4((uint(uint(subgroup_local_id))), (0u << (uint(5u))), uint(((mix(vec2((98.78), (6999.5112)), vec2((((injectionSwitch)[0]) - 0.0), (injectionSwitch)[1]), bvec2(true, true))).y)), 0u))) ^ 0u))), 1u)))) | ((uint(uvec4((uint(uint(subgroup_local_id))), ((~ (((((((0u ^ ((~ (((0u << (uint(5u))) + uint((injectionSwitch.x))))) | 0u))) >> 0u))) ^ (0u ^ (0u)))))), uint(((mat2(1.0) * (injectionSwitch)).y)), ((true ? 0u : (uvec2(165139u, 60031u).s)))))) ^ (((~ (~ ((~ (~ (0u))))))) / 1u))), 0u, 0u, 0u)))))))));
 uint next_virtual_gid = workgroup_base + (max(subgroup_id * subgroup_size, (clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size)))) + ((~ ((min(((~ ((((subgroup_local_id + 1) % ((0u + (((true ? (((subgroup_size)) - 0u) | (((subgroup_size) + (0u | 0u))) : (workgroup_size))))))) | 0u))) | 0u), ~ ((((subgroup_local_id + 1) % ((0u + (((true ? (subgroup_size) | (((subgroup_size) + (0u | 0u))) : (workgroup_size))))))) | 0u)))))));
 if(false)
  {
  }
 else
  {
   if((false))
    {
     if(((! (! (false)))))
      {
       if(true)
        {
         return;
        }
       else
        {
        }
      }
     return;
    }
   if((false))
    return;
  }
 buf[virtual_gid] = 1;
 if(false)
  {
  }
 else
  {
   if(false)
    {
    }
   else
    {
     if((bool((bvec3(bvec4(bvec3(subgroup_local_id + 1 < subgroup_size, false, true), ((injectionSwitch.x > ((((((injectionSwitch) / vec2(1.0, 1.0))) / vec2(1.0, 1.0))) / vec2(1.0, 1.0)).y))))))))
      {
       do
        {
         do
          {
           if(false)
            {
            }
           else
            {
             for(int _injected_loop_counter = 0; _injected_loop_counter < (((int(ivec3(1 << (int(6)), (0 ^ ((1 << (int(1))) >> (int(1)))), 1)))) >> (int(6))); _injected_loop_counter ++)
              {
               do
                {
                 for(int _injected_loop_counter = 1; _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
                  {
                   if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
                    break;
                   if((((true && (injectionSwitch.x < injectionSwitch.y)))))
                    {
                     atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 0);
                    }
                   else
                    {
                    }
                  }
                }
               while(false);
              }
            }
           if((false))
            return;
          }
         while(false);
        }
       while(false);
       if(true)
        {
         subgroupAll(false);
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            return;
           return;
          }
        }
      }
     else
      {
       atomicStore(buf[next_virtual_gid], (((((~ (((~ (((0u ^ (uint(((uvec4(uint(2), 1u, 0u, 1u)) << uvec4(0u, 0u, ((0u) >> 0u), 0u))))) - 0u))) - 0u))))) ^ 0u)), 4, 64, 0);
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if((false))
          {
           if((false))
            return;
           return;
          }
        }
       else
        {
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       subgroupAll(true);
      }
    }
  }
 do
  {
   if(((false || ((bool(bvec4(false, true, false, true)))))))
    {
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if(true)
        {
         return;
        }
       else
        {
        }
      }
     else
      {
      }
     if((false))
      return;
    }
  }
 while(false);
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
