#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((false))
  barrier();
 if((! (! ((false)))))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((((injectionSwitch.x > (max(injectionSwitch, injectionSwitch)).y))))
  {
   if((true && ((! ((bool(bvec4(! ((false)), true, false, true))))))))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   barrier();
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
  }
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(((true && (((false || (bool(bvec4(((((bool((bvec2(bvec4(bvec2((((injectionSwitch.x > injectionSwitch.y))), ((injectionSwitch.x > injectionSwitch.y))), false, false)))))) || false) || false), true, ((injectionSwitch.x > injectionSwitch.y)), false)))))))))
  barrier();
 if((false))
  {
   if((((false) && true)))
    barrier();
   if((false))
    barrier();
   barrier();
  }
 uint subgroup_size = gl_SubgroupSize;
 if((((false) && true)))
  barrier();
 if((false))
  barrier();
 if((false || (true && (((! (((! ((! ((true && ((true && ((((! (! (! ((((! (! (((true && (((injectionSwitch.x > injectionSwitch.y)))))))))) || (bool(bvec2(false, ((injectionSwitch.x < injectionSwitch.y)))))))))) && true))))))))) && true))))))))
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
 if((false))
  {
   if(((true && (((injectionSwitch.x > injectionSwitch.y))))))
    barrier();
   if((((! ((bool(bvec4(! ((injectionSwitch.x > injectionSwitch.y)), true, true, true))))))))
    barrier();
   if((false))
    {
     if((bool((bvec3(bvec3((bvec3(bvec3(bvec3((false), ((injectionSwitch.x > injectionSwitch.y)), true))))))))))
      barrier();
     if(((bool(bvec4(((injectionSwitch.x > injectionSwitch.y)), true, true, false)))))
      barrier();
     barrier();
    }
   if((((false)) || ((((injectionSwitch.x > injectionSwitch.y)) && true))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(((((! (! (false)))) && true)))
      barrier();
     barrier();
    }
   if((((! (! (bool(bvec4((bool(bvec2(false, ((false) || ((injectionSwitch.x > injectionSwitch.y)))))), false, true, true))))))))
    barrier();
   barrier();
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if((false))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     if((false))
      barrier();
     barrier();
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 if(((((bool(bvec3((! (! (injectionSwitch.x > injectionSwitch.y))), false, false)))))))
  barrier();
 uint workgroup_id = ((((((true ? uint(uvec3(~ (((false ? (write_val) : ~ (gl_WorkGroupID.x)))), 1u, 0u)) : (subgroup_id))))) | ((((true ? uint(uvec3(~ (((false ? (write_val) : ~ (gl_WorkGroupID.x)))), 1u, 0u)) : (subgroup_id)))))));
 if((false))
  {
   if(((false || (false))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((((false)) && (((mix(float(((- 54.64 * - 5.4))), float(injectionSwitch.x), bool(true))) < injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((false))
    {
     if((false))
      barrier();
     if((((injectionSwitch.x > (mix(float((- 60.81)), float(injectionSwitch.y), bool(((injectionSwitch.x < injectionSwitch.y)))))))))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      {
       if((((injectionSwitch.x > (max(injectionSwitch, injectionSwitch)).y))))
        barrier();
       barrier();
      }
     if((false))
      barrier();
     if((false))
      barrier();
     barrier();
     if((! (! ((false)))))
      barrier();
    }
   barrier();
   if(((bool(bvec2(((injectionSwitch.x > injectionSwitch.y)), false)))))
    barrier();
  }
 if((false))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   barrier();
  }
 if(((((bool(bvec2(true && ((((false || ((injectionSwitch.x > injectionSwitch.y)))) || false)), true)))))))
  {
   if((((injectionSwitch.x > (mix(float((803.947)), float(injectionSwitch.y), bool(true)))))))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   if(((((max(injectionSwitch, (mix(vec2((injectionSwitch)[0], (- 596.429)), vec2((- 3.0), (injectionSwitch)[1]), bvec2(false, true))))).x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((false))
    {
     if((! (bool(bvec4((((! ((bool(bvec3((! (! ((((injectionSwitch.x > injectionSwitch.y)))))), true, true))))) && true)), true, true, true)))))
      barrier();
     if((false))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       if((false))
        barrier();
       if((false))
        barrier();
       if((((false) || false)))
        barrier();
       if(((bool(bvec4((bool(bool(((injectionSwitch.x > injectionSwitch.y))))), false, false, false)))))
        barrier();
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       barrier();
      }
    }
   barrier();
  }
 if(((! ((! (! (! ((! (! (false)))))))))))
  barrier();
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((false))
  barrier();
 if(((! (! (false)))))
  barrier();
 if(((((bool(bvec4((! (! ((bool(bvec3(false, (((bool(((bvec3((bvec3(bvec4(bvec3(bvec3(bvec3((bvec3(bvec3(bvec3(true, false, (! (! (true)))))))))), false)))))))) && true)), false)))))), true, false, false)))) || false)))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((false))
  {
   if((false))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   barrier();
   if((false))
    barrier();
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
 uint virtual_gid = (((uint(uvec4((((min(workgroup_base, workgroup_base))) | ((clamp(workgroup_base, workgroup_base, workgroup_base)))), (1u & 1u), 1u, (1u | 0u))))) | ((max((clamp((((min(workgroup_base, workgroup_base))) | ((((clamp(workgroup_base, workgroup_base, workgroup_base))) >> 0u))), (((min(workgroup_base, workgroup_base))) | ((clamp(workgroup_base, workgroup_base, workgroup_base)))), (((false ? (subgroup_id) : (((max(((((min(workgroup_base, workgroup_base)))) >> 0u), ((min(workgroup_base, workgroup_base))))) | ((true ? ((clamp(workgroup_base, workgroup_base, workgroup_base))) : (workgroup_id)))) | ((max(((((min(workgroup_base, workgroup_base)))) >> 0u), ((min(workgroup_base, workgroup_base))))) | ((true ? ((clamp(workgroup_base, workgroup_base, workgroup_base))) : (workgroup_id)))))))))), (((min((((min(workgroup_base, workgroup_base))) | ((clamp(workgroup_base, workgroup_base, ((((workgroup_base) / 1u)) << 0u))))), (((min(workgroup_base, workgroup_base))) | ((clamp(workgroup_base, workgroup_base, workgroup_base))))))) | ((((min(workgroup_base, workgroup_base))) | ((clamp(workgroup_base, workgroup_base, workgroup_base)))))))))) + (uint((injectionSwitch.x)) + ((((min(subgroup_id * subgroup_size, subgroup_id * subgroup_size))) ^ 0u))) + (((((uint(uvec2(subgroup_local_id, ((1u) << (min((uint(uint((0u ^ (uint((injectionSwitch.x))))))), (uint(uint((0u ^ (uint(((((vec2((max(vec2(injectionSwitch), vec2(injectionSwitch))))) * mat2((injectionSwitch.y)))).x)))))))))))))) ^ 0u)) >> ((uint((injectionSwitch.x)) ^ (((~ (((true ? ~ (((((0u) ^ 0u) ^ 0u))) : (94493u)))))) * uint((injectionSwitch.y))))));
 if((false))
  barrier();
 do
  {
   if(((false || (false))))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   atomicStore(write_val, uint(virtual_gid), 4, 64, 0);
   if((false))
    {
     if((((bool(bool((false)))) && true)))
      barrier();
     if(((((((max(injectionSwitch, (clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).x > injectionSwitch.y)) && true))))
      {
       if(((((((! (! ((true && (injectionSwitch.x > injectionSwitch.y))))))) || false))))
        barrier();
       barrier();
      }
     if((false))
      barrier();
     if(((! (! (false)))))
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((true && ((false))))
          barrier();
         barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((! (! ((false)))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          barrier();
         barrier();
         if((false))
          barrier();
        }
       barrier();
       if((false))
        barrier();
       if((false))
        barrier();
      }
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 while(false);
 if((false))
  barrier();
 if((((((false) && true)) || false)))
  {
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > (((((mat2(1.0) * (injectionSwitch)) + vec2(0.0, 0.0)) * mat2(1.0)))).y))))
    {
     if((false))
      barrier();
     if((((((injectionSwitch.x > (((true ? clamp(injectionSwitch.y, (clamp(injectionSwitch.y, injectionSwitch.y, (float(vec3(injectionSwitch.y, 0.0, 1.0))))), injectionSwitch.y) : (0.1)))))) && true))))
      barrier();
     if((false))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   barrier();
  }
 uint read_val = atomicLoad(write_val, (clamp(((int(int(((max(4, (1 * (((((false ? (- 73805) : ((true ? (max(((4) | (4)), ((4) | (((0 ^ (~ (int(ivec2((~ (4)), 1)))))))))) : (int(int((- 39748)))))))) ^ (0 ^ 0))))))) + (1 ^ 1)))))), ((((int(int(((max(4, (1 * (((((false ? (- 73805) : ((true ? (max(((4) | (4)), ((4) | (((0 ^ (~ (int(ivec2((~ (4)), 1)))))))))) : (int(int((- 39748)))))))) ^ (0 ^ 0))))))) + (1 ^ 1))))))) >> 0), ((int(int(((max(4, (1 * (((((false ? (- 73805) : ((true ? (max(((4) | (4)), ((4) | (((0 ^ (~ (int(ivec2((~ (4)), 1)))))))))) : (int(int((- 39748)))))))) ^ (0 ^ 0))))))) + (1 ^ 1)))))))), 64, 0);
 buf[virtual_gid] = uint(subgroupAllEqual(read_val));
 if((false))
  barrier();
 if((false))
  {
   if((false))
    {
     if((false))
      barrier();
     barrier();
     if((((injectionSwitch.x > ((injectionSwitch.y) + 0.0)))))
      barrier();
    }
   if((false))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    {
     if((((injectionSwitch.x > ((((injectionSwitch.y) - 0.0)) - abs(sqrt(0.0)))))))
      {
       if((false))
        barrier();
       barrier();
      }
     barrier();
    }
   barrier();
   if(((((bool(bvec2(false, false)))) || ((injectionSwitch.x > injectionSwitch.y)))))
    barrier();
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
