#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((((true && (bool(bvec3((bool(bool((! (! (false)))))), false, (! (! (true && ((false))))))))))))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if((! (! ((((true && ((false)))) || (((! ((bool(bvec2(! (((injectionSwitch.x > injectionSwitch.y) && true)), true))))))))))))
  {
   if((false))
    barrier();
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
 if((! (! ((((false)) && ((((injectionSwitch.x) + (injectionSwitch.x)) < (mix(float(injectionSwitch.y), float((vec3(- 1.5, - 9281.6691, - 8142.0145).b)), bool(false))))))))))
  {
   if((false || ((false))))
    {
     if((false))
      barrier();
     if((false))
      barrier();
     if(((true && (false))))
      barrier();
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if((false))
    barrier();
  }
 if((false))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if((false))
  barrier();
 if((false))
  {
   if(((((min(injectionSwitch, injectionSwitch)).x > (max(injectionSwitch.y, injectionSwitch.y))))))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if(((true && (((injectionSwitch.x > injectionSwitch.y))))))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = (0u | (gl_WorkGroupSize.x));
 if(((true && (false))))
  barrier();
 if((bool(bvec3((((! (! (bool(bvec2(((injectionSwitch.x > (((mix(float(injectionSwitch.y), float((- 4.6)), bool(false)))) / 1.0))), true))))))), false, true))))
  barrier();
 uint workgroup_id = ((uvec3(((uvec3(((max((uvec3(gl_WorkGroupID[0], ((true ? gl_WorkGroupID[1] : (num_workgroup))), (clamp(gl_WorkGroupID[2], gl_WorkGroupID[2], gl_WorkGroupID[2])))), gl_WorkGroupID))) << uvec3(0u, 0u, 0u))) - (uvec3(0u, 0u, 0u) | uvec3(0u, 0u, 0u)))))).x;
 if((! ((! (! (! (((bool(bvec2(bool(bvec2(((bool(bvec4((bool(bvec2(((false)) || false, false))), true, true, true)))), ((injectionSwitch.x < injectionSwitch.y)))), true)))))))))))
  barrier();
 if(((true && (((false) || false)))))
  barrier();
 if(((bool((false || (bool(false)))))))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  {
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > ((mix(float((91.51)), float((float(mat3(float((mat4x3(mat4((mat4x3(mat4x3(mat4x3(injectionSwitch.y, 0.0, 1.0, 0.0, 0.0, cos(0.0), ((((false ? (- 7.7) : 1.0))) / 1.0), 1.0, 1.0, 1.0, 0.0, (clamp(((((float(mat3x2(dot(vec4(0.0, 1.0, 1.0, 0.0), vec4((1.0 * (1.0)), 0.0, 0.0, 1.0)), 1.0, 0.0, 1.0, 1.0, 0.0))))) + 0.0), ((float(mat3x2(dot(vec4(0.0, 1.0, 1.0, 0.0), vec4(1.0, 0.0, 0.0, 1.0)), 1.0, 0.0, 1.0, 1.0, 0.0)))), ((mix(float((1.0 * ((float(mat3x2(dot(vec4(0.0, 1.0, 1.0, 0.0), vec4(1.0, 0.0, 0.0, 1.0)), 1.0, 0.0, 1.0, 1.0, 0.0)))))), float((vec2(741.235, 0.4).x)), bool((bool(bvec3(false, false, true))))))))))))))))), 0.0, 0.0, (clamp(1.0, 1.0, 1.0)), 0.0, 0.0, determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, (max((mix(float((9.7)), float(0.0), bool(true))), ((0.0) + 0.0))))), (dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0))), 1.0)))), bool(true))))))))
    barrier();
   if((((((bool(((bvec2(bvec2(bvec2(bvec2(bvec2((((! (! (((false || (false)) || false))))) && true), ((injectionSwitch.x > injectionSwitch.y)))))))))))) || false))))
    barrier();
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if(((true && (false))))
    {
     if((false))
      {
       if(((bool(bvec3(false, false, ((injectionSwitch.x > injectionSwitch.y)))))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if((false))
        barrier();
       barrier();
       if((false))
        barrier();
       if((false))
        barrier();
      }
     barrier();
     if((false))
      barrier();
     if(((bool(bool(false)))))
      barrier();
    }
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
  }
 if((false))
  barrier();
 if(((((! (! (injectionSwitch.x > injectionSwitch.y)))))))
  {
   if((((injectionSwitch.x > (clamp(injectionSwitch, (vec2(0.0, 0.0) + (((false ? (vec2(- 0.3, - 553.455)) : injectionSwitch)))), injectionSwitch)).y))))
    barrier();
   barrier();
  }
 uint workgroup_base = workgroup_size * ((workgroup_id) | ((((1u * (workgroup_id))) << 0u)));
 if((false))
  barrier();
 uint virtual_gid = ((((((119812u & 0u) + ((~ ((0u + (~ (((false ? ((clamp(~ (~ ((write_val))), ~ ((true ? (~ ((((true ? (min(write_val, write_val)) : (workgroup_size)))))) : (subgroup_local_id))), ~ (~ ((write_val)))))) : ((uint(((uint((0u ^ ((((((true ? ((workgroup_base + subgroup_id * subgroup_size + subgroup_local_id) - 0u) : (workgroup_base)))) | (workgroup_base + ((true ? subgroup_id * subgroup_size : (subgroup_id))) + subgroup_local_id))) << uint((injectionSwitch.x)))))) | (uint((0u ^ ((((workgroup_base + subgroup_id * subgroup_size + subgroup_local_id) | (workgroup_base + ((subgroup_id) / 1u) * subgroup_size + subgroup_local_id))) << (uint(uvec4(uint((injectionSwitch.x)), 1u, uint((injectionSwitch.x)), 1u))))))))))))))))))))) | ((((0u ^ (workgroup_base + subgroup_id * subgroup_size)) + subgroup_local_id)) / 1u)) ^ 0u));
 atomicStore(write_val, uint(virtual_gid), 4, (int(int((clamp((((max(64, 64))) / ((1 << (int(0))) >> (int(0)))), 64, 64))))), 0);
 if((false))
  barrier();
 uint read_val = atomicLoad(write_val, 4, 64, ((true ? 0 : (- 21161))));
 if((false))
  barrier();
 buf[virtual_gid] = uint(subgroupAllEqual(read_val));
 if((bool(bvec2((false), true))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   if((((bool(bvec4(bool(bvec3(((injectionSwitch.x > injectionSwitch.y)), true, true)), true, false, false))))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
