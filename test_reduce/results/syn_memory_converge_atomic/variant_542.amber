#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((false))
  return;
 if((false))
  {
   if((false))
    return;
   if(((! (! (false)))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if((false))
  {
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(((false || (false))))
      return;
     return;
    }
   if((((((((! (! (((false || (injectionSwitch.x > injectionSwitch.y))))))) || false) && true)))))
    return;
   if((false))
    return;
   if(((((((bool(bvec2(false, true))) && true))) && true)))
    return;
   if((false))
    {
     if((false))
      return;
     if((false))
      {
       if((false))
        return;
       return;
      }
     return;
     if((false))
      return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if((false))
    return;
   if((false))
    return;
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y)) || ((false))))
    {
     if(((((min(injectionSwitch, (clamp(injectionSwitch, injectionSwitch, ((true ? injectionSwitch : (injectionSwitch))))))).x > injectionSwitch.y))))
      return;
     return;
    }
   return;
   if((false))
    return;
   if((false))
    return;
  }
 if((false))
  return;
 if((false))
  return;
 uint subgroup_id = gl_SubgroupID;
 if((false))
  return;
 if(((bool(bvec3((bool(bool(false))), false, true)))))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     return;
    }
   return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((false))
  return;
 if((false))
  {
   if((false))
    {
     if((false))
      {
       if(((! (! ((bool(bvec3(false, (false || (((false) || false))), true))))))))
        return;
       if((false))
        {
         if((false))
          return;
         return;
        }
       if((false))
        return;
       return;
       if((false))
        return;
      }
     if((false))
      return;
     return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
   if((false))
    return;
   if((((injectionSwitch.x > ((injectionSwitch.y) * 1.0)))))
    {
     if((false))
      {
       if((false))
        return;
       return;
       if((false))
        return;
      }
     return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    {
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
  }
 if((false))
  {
   if((false))
    return;
   if((false))
    {
     if((false))
      {
       if((false))
        return;
       return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      return;
     return;
    }
   if((false))
    return;
   if((false))
    return;
   return;
  }
 if((false))
  return;
 if((false))
  {
   if((false))
    return;
   return;
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if((((false)) || false))
  return;
 if((((((injectionSwitch.x) / 1.0) > injectionSwitch.y))))
  return;
 if((false))
  return;
 if((false))
  return;
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if((false || ((false))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      return;
     return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    return;
   if((false))
    return;
   return;
  }
 if((false))
  return;
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     return;
    }
   if((false))
    {
     if((false))
      return;
     return;
    }
   return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  return;
 uint workgroup_size = (~ (clamp((~ (~ ((~ (((gl_WorkGroupSize.x) ^ 0u)))))), (max((~ (~ ((~ (((gl_WorkGroupSize.x) ^ 0u)))))), (~ (~ ((~ (((gl_WorkGroupSize.x) ^ 0u)))))))), (~ (~ ((~ (((gl_WorkGroupSize.x) ^ 0u)))))))));
 if(((true && ((true && (false))))))
  {
   if((false))
    {
     if((false))
      return;
     return;
     if((false))
      return;
    }
   return;
  }
 uint workgroup_id = (uvec3((max(uvec4(gl_WorkGroupID, 0u), uvec4(gl_WorkGroupID, 0u))))).x;
 if((false))
  {
   if((((((injectionSwitch.x > injectionSwitch.y))) || false)))
    return;
   return;
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 if((((false) && true)))
  {
   if((false))
    return;
   return;
  }
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(((((vec2(1.0, 1.0) * (injectionSwitch)).x > injectionSwitch.y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if((((false) && true)))
  {
   if((false))
    return;
   return;
  }
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((bool(bvec3((injectionSwitch.x > injectionSwitch.y), false, ((injectionSwitch.x > injectionSwitch.y))))))))
    {
     if((false))
      return;
     if(((! (! (false)))))
      {
       if((false))
        return;
       return;
      }
     if((false))
      return;
     return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  return;
 if((false))
  {
   if((false))
    return;
   return;
   if((false))
    return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    return;
   return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  return;
 uint virtual_gid = workgroup_base + (~ ((((0u ^ ((clamp(uint(uvec3((((((~ (~ ((true ? (((max(~ (((false ? (30030u) : subgroup_id))), ~ (((false ? (30030u) : subgroup_id)))))) | (~ (((false ? (30030u) : subgroup_id))))) : (((workgroup_id) / 1u))))))))) / 1u), 0u, 1u)), uint(uvec3((((((~ (~ ((true ? ((~ (((false ? (30030u) : subgroup_id)))) | (~ (min((((false ? (30030u) : subgroup_id))), (((0u | 0u) ^ (((false ? (30030u) : subgroup_id))))))))) : (((workgroup_id) / 1u))))))))) / 1u), 0u, 1u)), uint(uvec3((((((~ (~ ((true ? ((~ (((false ? (30030u) : subgroup_id)))) | (~ (((false ? (30030u) : subgroup_id))))) : (((workgroup_id) / 1u))))))))) / 1u), ((0u) - 0u), (~ ((min((clamp(~ (1u), ~ (1u), ~ (1u))), ~ (1u)))))))))))) | (uint(uvec3((((((~ (~ ((true ? ((~ (((false ? (30030u) : ((true ? subgroup_id : (workgroup_id))))))) | (~ (((false ? (30030u) : subgroup_id))))) : (((workgroup_id) / 1u))))))))) / 1u), 0u, 1u)))))) * subgroup_size + subgroup_local_id;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if(((! (! (false)))))
  return;
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 atomicStore(write_val, uint(virtual_gid), 4, ((((64) | 0)) / 1), (min((max(0, ((0) ^ 0))), (~ (~ (0))))));
 if((false))
  return;
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if((false))
  return;
 if((false))
  return;
 if((false))
  return;
 if((false))
  return;
 if((false))
  return;
 if((false))
  return;
 if((false))
  return;
 if((((false) || false)))
  {
   if((false))
    return;
   return;
  }
 if((false))
  return;
 if((((bool(bvec2(bool(bool(false)), false))))))
  {
   if(((! (! (false)))))
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     return;
     if((bool(bool((((injectionSwitch.x > injectionSwitch.y)))))))
      return;
    }
   if((false))
    {
     if((false))
      return;
     return;
    }
   if((false))
    return;
   barrier();
   if(((! (((((! (false)) && true)) && true)))))
    return;
  }
 if(((bool(bvec2(false, false)))))
  return;
 if(((false || (false))))
  {
   if((false))
    return;
   if((! (! ((false || ((false)))))))
    return;
   return;
  }
 if((false))
  {
   if(((false || (false))))
    return;
   return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((((((injectionSwitch.x) / 1.0) > injectionSwitch.y))))
  {
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 uint read_val = atomicLoad(write_val, 4, 64, 0);
 if(((((min(injectionSwitch.x, (min((max(injectionSwitch.x, (float(mat4x2(injectionSwitch.x, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0))))), injectionSwitch.x)))) > injectionSwitch.y))))
  return;
 if((((((mix(float(0.0), float((9.6)), bool(false))) + (injectionSwitch.x)) > injectionSwitch.y))))
  {
   if((false))
    return;
   return;
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if((false))
  return;
 if((false))
  return;
 if((false))
  return;
 if(((((((! (((! (false)) || false))))) || ((false) || false))) && true))
  {
   if((false))
    return;
   if((false))
    return;
   return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(((true && (false))))
      return;
     return;
    }
   if(((((! ((! (! (! (injectionSwitch.x > injectionSwitch.y))))))))))
    return;
   if((false))
    return;
  }
 if((! (! ((((((injectionSwitch.x > injectionSwitch.y)))) || false)))))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 buf[virtual_gid] = uint(subgroupAllEqual(read_val));
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
