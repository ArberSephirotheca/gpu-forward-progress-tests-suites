#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(((((bool(bvec4(bool(((bool((false))) && true)), false, ((injectionSwitch.x < injectionSwitch.y)), false))))) || false))
  return;
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 if((bool(bvec4((false || ((! ((((! (! (! ((false)))))) && true))))), false, (false || (true)), (! (! ((bool(bvec2(((injectionSwitch.x > injectionSwitch.y)), true))))))))))
  return;
 uint workgroup_size = (~ (((((uint(uvec4((((((false ? (subgroup_size) : ~ (gl_WorkGroupSize.x)))) / uint((injectionSwitch.y)))), 0u, 0u, 1u))) ^ 0u))) - (0u ^ 0u)));
 uint workgroup_id = (max((((uvec3(0u, ((true ? ((0u) | 0u) : (num_workgroup))), 0u) | (min(uvec3(0u, 0u, 0u) + ((((uvec3(0u, 0u, 0u) ^ ((clamp(gl_WorkGroupID, gl_WorkGroupID, gl_WorkGroupID))))) | ((uvec3(0u, 0u, 0u) ^ ((clamp(gl_WorkGroupID, gl_WorkGroupID, gl_WorkGroupID))))))), uvec3(0u, 0u, 0u) + ((((uvec3(0u, ((0u) ^ (1u ^ 1u)), 0u) ^ ((clamp(gl_WorkGroupID, gl_WorkGroupID, gl_WorkGroupID))))) | ((uvec3(0u, 0u, 0u) ^ ((clamp(gl_WorkGroupID, gl_WorkGroupID, gl_WorkGroupID)))))))))))), (uvec3(0u, 0u, 0u) ^ ((clamp((max(gl_WorkGroupID, ((gl_WorkGroupID) * uvec3(1u, 1u, 1u)))), gl_WorkGroupID, gl_WorkGroupID)))))).x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = (max(workgroup_base + (0u | ((((uint((min((((uvec4(0u, 0u, 0u, 0u) ^ (uvec4(((uint(uvec3(uint((((uvec4(0u, 0u, 0u, 0u) ^ (uvec4(subgroup_id, 0u, 0u, 1u)))) >> uvec4(0u, 0u, 0u, 0u))), 1u, 0u)))), 1u, 0u, 0u)))) << uvec4(0u, 0u, 0u, 0u)), (max(uvec4(subgroup_id, ((((injectionSwitch.x < injectionSwitch.y)) ? 1u : (min(subgroup_local_id, subgroup_local_id)))), 0u, 0u), uvec4(subgroup_id, ((((injectionSwitch.x < injectionSwitch.y)) ? 1u : (min(subgroup_local_id, subgroup_local_id)))), 0u, 0u))))))) ^ 0u)))) * subgroup_size, workgroup_base + (0u | ((((uint((min((((uvec4(0u, 0u, 0u, 0u) ^ (uvec4(((uint(uvec3(uint((((uvec4(0u, 0u, 0u, 0u) ^ (uvec4(subgroup_id, 0u, 0u, 1u)))) >> uvec4(0u, 0u, 0u, 0u))), 1u, 0u)))), 1u, 0u, 0u)))) << uvec4(0u, 0u, 0u, 0u)), (max(uvec4(subgroup_id, ((((injectionSwitch.x < injectionSwitch.y)) ? 1u : (min(subgroup_local_id, subgroup_local_id)))), 0u, 0u), uvec4(subgroup_id, ((((injectionSwitch.x < injectionSwitch.y)) ? 1u : (min(subgroup_local_id, subgroup_local_id)))), 0u, 0u))))))) ^ 0u)))) * subgroup_size)) + subgroup_local_id;
 atomicStore(write_val, uint(((0u | (0u)) | ((min(virtual_gid, virtual_gid))))), 4, (0 | (64)), 0);
 uint read_val = atomicLoad(write_val, 4, 64, 0);
 buf[virtual_gid] = uint(subgroupAllEqual(read_val));
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
