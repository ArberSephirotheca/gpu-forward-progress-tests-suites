#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   barrier();
  }
 do
  {
   if((false))
    barrier();
  }
 while(((injectionSwitch.x > injectionSwitch.y)));
 uvec3 GLF_merged3_0_1_11_1_1_14_2_1_12virtual_gidworkgroup_baseworkgroup_id;
 if((false))
  barrier();
 if((false))
  {
   if((false))
    return;
   return;
  }
 if((false))
  {
   if((false))
    barrier();
   do
    {
     return;
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(((injectionSwitch.x < injectionSwitch.y)))
  {
   if((false))
    {
     if((false))
      return;
     barrier();
    }
  }
 else
  {
  }
 uvec4 GLF_merged4_0_1_17_1_1_11_2_1_14_3_1_14subgroup_local_idvirtual_gidworkgroup_baseworkgroup_size;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if(false)
    {
    }
   else
    {
     if((false))
      barrier();
    }
   if((false))
    {
     if((false))
      return;
     if((false))
      barrier();
     if(true)
      {
       if((false))
        return;
      }
     else
      {
      }
     if((false))
      barrier();
     if(((false || (false))))
      {
       if((false))
        return;
       if(false)
        {
        }
       else
        {
         if((false))
          return;
        }
       if((false))
        return;
       barrier();
      }
     return;
     if((false))
      {
       if((false))
        return;
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
    }
   if((false))
    barrier();
   if((false))
    return;
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
   if((false))
    return;
   if((false))
    {
     if((true && (true)))
      {
       return;
      }
     else
      {
      }
    }
  }
 if((false))
  return;
 uint subgroup_id = gl_SubgroupID;
 if((false))
  {
   if(((true && (((injectionSwitch.x > injectionSwitch.y))))))
    {
     if(false)
      {
      }
     else
      {
       barrier();
      }
    }
   if((false))
    return;
   if((false))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     return;
    }
   for(int _injected_loop_counter = 0; _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
    {
     if((false))
      barrier();
     if((false))
      return;
     if((false))
      barrier();
    }
   barrier();
  }
 if((false))
  return;
 if((false))
  return;
 if(true)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           if((false))
            return;
           return;
          }
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           if((false))
            return;
           if((((bool(bvec3(bool(bvec3(false, false, false)), false, true))))))
            barrier();
          }
         else
          {
           if((false))
            {
             if((false))
              {
               if((false))
                {
                 for(int _injected_loop_counter = 0; _injected_loop_counter != (1 ^ (clamp(0, 0, 0))); _injected_loop_counter ++)
                  {
                   return;
                  }
                }
               barrier();
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             return;
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           if((false))
            return;
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           return;
          }
         else
          {
          }
         if((false))
          return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       return;
      }
     return;
    }
  }
 else
  {
  }
 if(((false) || false))
  {
  }
 else
  {
   if((false))
    {
     if((false))
      {
       for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
        {
         if((((false) && true)))
          continue;
         if((false))
          {
           if((false))
            barrier();
           if((false))
            {
             if((false))
              break;
             if(true)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                return;
               barrier();
               if((false))
                {
                 if((false))
                  barrier();
                 continue;
                }
              }
             else
              {
              }
            }
           if((false))
            break;
           for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
            {
             return;
             if((false))
              barrier();
            }
           if((false))
            {
             if((false))
              {
               if((false))
                {
                 if((false))
                  continue;
                 continue;
                }
               return;
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             barrier();
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
         if((false))
          {
           if((false))
            break;
           if((false))
            continue;
           barrier();
          }
         if(((((injectionSwitch.x > injectionSwitch.y)) || (false))))
          continue;
         if((false))
          {
           if((false))
            return;
           if(false)
            {
             if((false))
              barrier();
            }
           else
            {
             if((false))
              barrier();
             if((false))
              break;
             barrier();
            }
           if((false))
            continue;
          }
        }
       if((false))
        barrier();
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(true)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
          }
         return;
        }
       if((false))
        return;
      }
     if((false))
      barrier();
     barrier();
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     for(int _injected_loop_counter = ((1 << (int(5))) >> (((int(5)) | (int(5))))); _injected_loop_counter > 0; _injected_loop_counter --)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         for(int _injected_loop_counter = 1; _injected_loop_counter > (((0) - 0) >> (int(7))); _injected_loop_counter --)
          {
           barrier();
          }
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        return;
       return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if(true)
        {
         if((false))
          barrier();
        }
       else
        {
        }
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 GLF_merged4_0_1_17_1_1_11_2_1_14_3_1_14subgroup_local_idvirtual_gidworkgroup_baseworkgroup_size.x = subgroup_local_id;
 if((false))
  {
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(((bool(bool(false)))))
      return;
     if((false))
      {
       if((false))
        return;
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      return;
     if((false))
      {
       if((false))
        barrier();
       if((false))
        return;
       return;
      }
     for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != ((1 << (int(3))) >> (int(3))); _injected_loop_counter ++)
      {
       barrier();
      }
     if(true)
      {
       if((false))
        {
         if((false))
          return;
         barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     if((false))
      barrier();
     barrier();
    }
   barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     if((false))
      {
       if((false))
        barrier();
       return;
      }
     if((false))
      return;
     if((false))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   if((false))
    return;
   if((false))
    {
     if((false))
      barrier();
     if((false))
      return;
     if((false))
      {
       if((false))
        return;
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if((false))
          barrier();
         if(false)
          {
          }
         else
          {
           return;
          }
        }
       barrier();
      }
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 if(true)
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if((false))
    barrier();
   if((false))
    return;
   if((false))
    {
     if((false))
      return;
     barrier();
     if((false))
      barrier();
    }
  }
 else
  {
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  return;
 if((false))
  {
   if(false)
    {
    }
   else
    {
     return;
    }
  }
 if((false))
  {
   if(((true && (false))))
    barrier();
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
    }
   return;
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   barrier();
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(((injectionSwitch.x > injectionSwitch.y)))
  {
  }
 else
  {
   if((false))
    {
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      barrier();
     barrier();
     if((false))
      return;
    }
   if((false))
    {
     if((false))
      return;
     return;
    }
   if((false))
    {
     if((false))
      return;
     barrier();
    }
   do
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   while(false);
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   do
    {
     if((false))
      barrier();
     if((false))
      continue;
    }
   while(false);
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 do
  {
   if((false))
    barrier();
   if((false))
    {
     if((false))
      return;
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      continue;
     continue;
    }
   for(int _injected_loop_counter = 0; _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
    {
     for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
      {
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      continue;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    break;
   GLF_merged4_0_1_17_1_1_11_2_1_14_3_1_14subgroup_local_idvirtual_gidworkgroup_baseworkgroup_size.w = workgroup_size;
   if((false))
    break;
   if((false))
    {
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      break;
     return;
    }
   if((false))
    {
     if((false))
      continue;
     break;
    }
   if((false))
    barrier();
  }
 while(false);
 if(false)
  {
   if((false))
    {
     if(true)
      {
       barrier();
      }
     else
      {
      }
     if((false))
      barrier();
    }
   if((false))
    {
     if((false))
      return;
     barrier();
    }
  }
 else
  {
   for(int _injected_loop_counter = 1; _injected_loop_counter > (0 & - 30106); _injected_loop_counter --)
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((bool(bvec2(((injectionSwitch.x > injectionSwitch.y)), true))))
        {
        }
       else
        {
         if((false))
          {
           if(true)
            {
             barrier();
            }
           else
            {
            }
          }
        }
       if((false))
        continue;
       for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
        {
         if((false))
          return;
         return;
         if((false))
          barrier();
         if((false))
          return;
        }
       if((false))
        {
         if((false))
          barrier();
         if((false))
          {
           if((false))
            barrier();
           break;
          }
         barrier();
         if((false))
          break;
        }
      }
     if((((false) || false)))
      {
       if((false))
        barrier();
       continue;
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if(true)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      return;
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     if((false))
      barrier();
    }
   if((false))
    {
     if(false)
      {
       if((false))
        return;
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          return;
         if((false))
          barrier();
         do
          {
           return;
          }
         while(false);
        }
       if((false))
        barrier();
       if((false))
        barrier();
      }
     if((false))
      return;
     if((false))
      {
       if((false))
        return;
       barrier();
      }
     if((false))
      return;
     for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
           barrier();
          }
         if(true)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
             if((false))
              barrier();
             barrier();
            }
           for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
            {
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
              }
             else
              {
               barrier();
              }
             if(((((bool(bvec3(false, false, true)))) || false)))
              return;
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
           if((false))
            return;
          }
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if(false)
      {
       if(((true && (false))))
        return;
      }
     else
      {
       if((false))
        return;
      }
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
       return;
      }
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(false)
        {
        }
       else
        {
         return;
        }
      }
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      {
       for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
        {
         if((false))
          barrier();
        }
       if((false))
        return;
       barrier();
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         if((false))
          return;
        }
       if((false))
        return;
      }
     if((false))
      {
       if(false)
        {
        }
       else
        {
         if((false))
          return;
        }
       return;
      }
     if(true)
      {
       if((false))
        return;
      }
     else
      {
      }
     if(false)
      {
      }
     else
      {
       if((false))
        {
         do
          {
           return;
          }
         while((true && (false)));
        }
       if((false))
        barrier();
       barrier();
       if((false))
        return;
       if((false))
        return;
      }
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
  {
   if((false))
    {
     if((false))
      barrier();
     if((false))
      {
       if((false))
        return;
       barrier();
      }
     return;
    }
  }
 if((false))
  return;
 if((false))
  return;
 if(true)
  {
   if((false))
    {
     if(false)
      {
      }
     else
      {
       if((false))
        barrier();
      }
     if((false))
      barrier();
     for(int _injected_loop_counter = ((1 << (int(5))) >> (int(5))); _injected_loop_counter != 0; _injected_loop_counter --)
      {
       barrier();
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if((false))
        break;
      }
     if((false))
      barrier();
     if(((true && (false))))
      barrier();
    }
  }
 else
  {
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 do
  {
   if((false))
    barrier();
   if((false))
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      continue;
     barrier();
    }
  }
 while(false);
 if((false))
  return;
 if(((injectionSwitch.x > injectionSwitch.y)))
  {
  }
 else
  {
   if((false))
    barrier();
  }
 if((false))
  return;
 if((false))
  {
   if((false))
    return;
   barrier();
  }
 uint workgroup_id = gl_WorkGroupID.x;
 for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
  {
   if((false))
    return;
  }
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 GLF_merged3_0_1_11_1_1_14_2_1_12virtual_gidworkgroup_baseworkgroup_id.z = workgroup_id;
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    {
     if(((true && (((false) && true)))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         return;
        }
       do
        {
         barrier();
        }
       while(false);
       if((false))
        barrier();
       if((false))
        barrier();
      }
     if((false))
      {
       if((false))
        barrier();
       return;
      }
     return;
    }
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    {
     if((false))
      {
       if((false))
        {
         do
          {
           return;
          }
         while(false);
        }
       return;
      }
     if((false))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   if((false))
    {
     for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > ((0 << (int(8))) >> (int(2))); _injected_loop_counter --)
      {
       if((false))
        return;
      }
     return;
    }
   return;
   if((false))
    {
     if((false))
      barrier();
     return;
    }
  }
 uint workgroup_base = GLF_merged4_0_1_17_1_1_11_2_1_14_3_1_14subgroup_local_idvirtual_gidworkgroup_baseworkgroup_size.w * GLF_merged3_0_1_11_1_1_14_2_1_12virtual_gidworkgroup_baseworkgroup_id.z;
 if((false))
  barrier();
 do
  {
   do
    {
     if((false))
      return;
     GLF_merged3_0_1_11_1_1_14_2_1_12virtual_gidworkgroup_baseworkgroup_id.y = workgroup_base;
    }
   while(false);
   if((false))
    return;
   if((false))
    return;
  }
 while(((injectionSwitch.x > injectionSwitch.y)));
 if((false))
  {
   if((false))
    {
     if((false))
      return;
     return;
    }
   if((false))
    return;
   if((false))
    barrier();
   return;
   if((false))
    barrier();
  }
 if(false)
  {
  }
 else
  {
   if((false))
    {
     if(((! (! (false)))))
      return;
     return;
    }
  }
 do
  {
   GLF_merged4_0_1_17_1_1_11_2_1_14_3_1_14subgroup_local_idvirtual_gidworkgroup_baseworkgroup_size.z = GLF_merged3_0_1_11_1_1_14_2_1_12virtual_gidworkgroup_baseworkgroup_id.y;
   if((false))
    {
     if(false)
      {
      }
     else
      {
       barrier();
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    return;
  }
 while(false);
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  barrier();
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
      {
       if((false))
        {
         if((false))
          return;
         barrier();
        }
      }
     barrier();
     if((false))
      return;
    }
   return;
  }
 do
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 while(false);
 if((false))
  return;
 uint virtual_gid = GLF_merged4_0_1_17_1_1_11_2_1_14_3_1_14subgroup_local_idvirtual_gidworkgroup_baseworkgroup_size.z + subgroup_id * subgroup_size + GLF_merged4_0_1_17_1_1_11_2_1_14_3_1_14subgroup_local_idvirtual_gidworkgroup_baseworkgroup_size.x;
 if((false))
  barrier();
 for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != (0 << (int(0))); _injected_loop_counter --)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != 0; _injected_loop_counter --)
      {
       if((false))
        barrier();
       barrier();
      }
    }
  }
 if((false))
  {
   if(((! (! (false)))))
    barrier();
   if((false))
    {
     if(true)
      {
       if((false))
        return;
      }
     else
      {
      }
     if(true)
      {
       return;
      }
     else
      {
      }
     if((false))
      return;
    }
   barrier();
  }
 if(((! (! (false)))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
   if((false))
    {
     if(false)
      {
      }
     else
      {
       return;
      }
    }
  }
 if(((((injectionSwitch.x < injectionSwitch.y)) && (false))))
  return;
 for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
  {
   if((false))
    barrier();
   if(false)
    {
    }
   else
    {
     GLF_merged3_0_1_11_1_1_14_2_1_12virtual_gidworkgroup_baseworkgroup_id.x = virtual_gid;
     if((false))
      barrier();
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      continue;
    }
   if((false))
    return;
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 do
  {
   if(true)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        {
         if(true)
          {
           return;
          }
         else
          {
          }
        }
       barrier();
      }
    }
   else
    {
    }
   if((false))
    continue;
   if((((injectionSwitch.x > injectionSwitch.y))))
    break;
  }
 while(((injectionSwitch.x > injectionSwitch.y)));
 GLF_merged4_0_1_17_1_1_11_2_1_14_3_1_14subgroup_local_idvirtual_gidworkgroup_baseworkgroup_size.y = GLF_merged3_0_1_11_1_1_14_2_1_12virtual_gidworkgroup_baseworkgroup_id.x;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if(((true && (((injectionSwitch.x > injectionSwitch.y))))))
  barrier();
 for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
  {
   if((false))
    {
     if((false))
      break;
     return;
    }
  }
 if(((injectionSwitch.x > injectionSwitch.y)))
  {
  }
 else
  {
   if(((bool(bvec2(false, true)))))
    barrier();
  }
 if((false))
  return;
 if(true)
  {
   if((false))
    return;
   atomicStore(write_val, uint(GLF_merged4_0_1_17_1_1_11_2_1_14_3_1_14subgroup_local_idvirtual_gidworkgroup_baseworkgroup_size.y), 4, 64, 0);
   if(true)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
       return;
      }
    }
   else
    {
    }
   if((false))
    {
     if((false))
      return;
     if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
      barrier();
     return;
    }
   if(false)
    {
    }
   else
    {
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          return;
         return;
        }
       do
        {
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             return;
            }
           return;
           if((((false) || false)))
            return;
           if((false))
            barrier();
          }
        }
       while(false);
       do
        {
         return;
        }
       while(false);
       if(((false || (false))))
        return;
      }
     if(((true && (false))))
      return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     if((false))
      return;
     if((false))
      barrier();
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
  }
 else
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(((false || (((false) && true)))))
  {
   if((false))
    return;
   if(false)
    {
    }
   else
    {
     if((false))
      return;
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     do
      {
       if(true)
        {
         return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
         if(((bool(bool(false)))))
          barrier();
         do
          {
           if((false))
            return;
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
        }
      }
     while(false);
     if(true)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 if((false))
  return;
 if(((injectionSwitch.x < injectionSwitch.y)))
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         return;
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
      }
     barrier();
    }
  }
 else
  {
  }
 do
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if(false)
      {
      }
     else
      {
       if(true)
        {
         for(int _injected_loop_counter = 1; _injected_loop_counter > (min(((int((injectionSwitch.x))) >> 0), int((injectionSwitch.x)))); _injected_loop_counter --)
          {
           if((false))
            continue;
           if((false))
            {
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if((false))
                barrier();
               break;
              }
             for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
              {
               if((false))
                break;
               if((false))
                continue;
               if((false))
                return;
               barrier();
               for(int _injected_loop_counter = 0; _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
                {
                 if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
                  barrier();
                }
              }
             if((false))
              break;
            }
           return;
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
          }
        }
       else
        {
        }
      }
     if((false))
      break;
    }
   if((false))
    barrier();
   if((false))
    {
     if((false))
      {
       if(((true && (false))))
        continue;
       for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != (1 & 1); _injected_loop_counter ++)
        {
         barrier();
        }
      }
     if((false))
      barrier();
     barrier();
    }
   if((false))
    {
     if((false))
      continue;
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        break;
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
       barrier();
      }
     return;
     if((false))
      {
       if((false))
        continue;
       barrier();
      }
    }
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      return;
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      continue;
    }
   if((false))
    {
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       if((((false) || false)))
        {
         if((false))
          return;
         continue;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
       if((false))
        {
         if((false))
          continue;
         barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
      }
    }
   if((false))
    continue;
   if((((injectionSwitch.x > injectionSwitch.y))))
    break;
   if((false))
    {
     if((false))
      barrier();
     if((false))
      return;
     barrier();
    }
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if(((true && ((! (! (false)))))))
    return;
  }
 while(false);
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    return;
   if((false))
    return;
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
    }
   else
    {
     if((false))
      barrier();
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      barrier();
    }
   if((false))
    {
     if((false))
      return;
     return;
    }
  }
 if((false))
  barrier();
 if((false))
  return;
 do
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 while(false);
 if((false))
  return;
 if((false))
  return;
 uint read_val = atomicLoad(write_val, 4, 64, 0);
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  {
   do
    {
     return;
    }
   while(false);
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(false)
  {
  }
 else
  {
   if((((((injectionSwitch.x > injectionSwitch.y))) && true)))
    return;
  }
 if((false))
  return;
 if((false))
  return;
 if((false))
  {
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     for(int _injected_loop_counter = (int((injectionSwitch.x)) | 0); _injected_loop_counter != ((1 << ((int(ivec4(int(4), 0, 0, 1))))) >> ((int(int(int(4)))))); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   else
    {
    }
  }
 if((false))
  return;
 if((false))
  {
   if((false))
    barrier();
   if((false))
    {
     if(false)
      {
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if(false)
          {
          }
         else
          {
           if((((false) && true)))
            barrier();
           if((false))
            {
             if((false))
              return;
             return;
            }
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         return;
         if((false))
          barrier();
        }
      }
     do
      {
       return;
      }
     while(false);
     if((false))
      {
       if((((false) && ((injectionSwitch.x < injectionSwitch.y)))))
        return;
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(false)
      {
      }
     else
      {
       if((false))
        barrier();
      }
     return;
    }
   barrier();
  }
 if(false)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      {
       if(((bool(bvec2(false, false)))))
        return;
       barrier();
      }
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
   if((bool(bvec2(((injectionSwitch.x > injectionSwitch.y)), true))))
    {
    }
   else
    {
     if((false))
      return;
    }
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    barrier();
   if((false))
    {
     if(false)
      {
      }
     else
      {
       barrier();
      }
    }
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((bool((true && (bool(false))))))
      {
       if((false))
        return;
       if((false))
        {
         if((false))
          return;
         return;
        }
       if((false))
        return;
       if((false))
        barrier();
       if((false))
        barrier();
       if((false))
        {
         if((false))
          return;
         if(((bool(bvec3(false, true, true)))))
          barrier();
         for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
          {
           for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
            {
             if((((false) || false)))
              barrier();
            }
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             return;
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         if((false))
          return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if((false))
          return;
        }
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       for(int _injected_loop_counter = ((0) >> 0); _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
        {
         if((false))
          barrier();
        }
       if((false))
        {
         if((false))
          return;
         return;
        }
       return;
       if((false))
        return;
       if((false))
        barrier();
      }
     if((false))
      return;
     if(((bool(bvec3(false, true, true)))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if(((bool(bool(false)))))
      {
       if((false))
        barrier();
       if(false)
        {
        }
       else
        {
         if((false))
          return;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((false))
        barrier();
       if((false))
        return;
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
        }
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if((false))
  barrier();
 buf[GLF_merged4_0_1_17_1_1_11_2_1_14_3_1_14subgroup_local_idvirtual_gidworkgroup_baseworkgroup_size.y] = uint(subgroupAllEqual(read_val));
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     return;
    }
   if((false))
    {
     if((false))
      return;
     barrier();
    }
   if((false))
    return;
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     barrier();
    }
   else
    {
    }
  }
 if((false))
  barrier();
 if(((! (! ((bool(bool(false))))))))
  return;
 if((((false) || ((injectionSwitch.x > injectionSwitch.y)))))
  {
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   do
    {
     do
      {
       if(((true && (false))))
        break;
       if((false))
        {
         if(false)
          {
          }
         else
          {
           barrier();
          }
        }
       return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(true)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              barrier();
             return;
            }
          }
         else
          {
          }
         barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
         if((false))
          barrier();
        }
       if((false))
        continue;
       if((false))
        {
         if((false))
          barrier();
         break;
         if((false))
          break;
        }
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
    }
   while(false);
  }
 if((false))
  barrier();
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    {
     do
      {
       if((false))
        return;
       barrier();
       if((false))
        continue;
      }
     while(false);
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     return;
    }
   if(false)
    {
     if((false))
      barrier();
    }
   else
    {
     if((false))
      {
       if((false))
        barrier();
       if((false))
        return;
       return;
      }
    }
   if((false))
    barrier();
   if((false))
    return;
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     if((false))
      barrier();
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
       if((false))
        return;
      }
     return;
     if((false))
      return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     barrier();
    }
   for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != 0; _injected_loop_counter --)
    {
     if((false))
      continue;
     for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
      {
       return;
      }
     if((false))
      break;
     for(int _injected_loop_counter = ((1 << (int(0))) >> (int(0))); _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
      {
       if((false))
        {
         if((false))
          continue;
         barrier();
        }
       if((false))
        {
         if((false))
          {
           if((false))
            continue;
           if((! (! (true))))
            {
             barrier();
            }
           else
            {
            }
          }
         continue;
        }
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         if((false))
          return;
        }
      }
     if((false))
      barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
