#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   return;
  }
 uint subgroup_size = gl_SubgroupSize;
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if(((! (bool(bvec4(((bool(bool(true))) && ((false || ((! (! ((! ((false || (bool((bvec3(bvec4(((bvec3(bvec4(bvec3(bvec3(((bvec3(bvec4((bvec3(bvec3(bvec3(bvec4(bvec3(((! (! (! (! ((((((((bool(bvec2(! (! (false || (((injectionSwitch.x > injectionSwitch.y)) || ((((! (! (false))))))))), true)))) || false)) && ((injectionSwitch.x < injectionSwitch.y))))))))))), false, false), true))))), false)))))), false)))), false))))))))))))))), false, true, false))))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((((injectionSwitch.x > ((injectionSwitch.y) + 0.0)))))
    barrier();
   if((((injectionSwitch.x > (clamp((clamp(injectionSwitch, (clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)), injectionSwitch, injectionSwitch)).y))))
    barrier();
   return;
  }
 if((false))
  barrier();
 if((((false) || false)))
  {
   if((((injectionSwitch.x > ((mix(float((clamp(mix(float((- 91.69)), float(((injectionSwitch.y) / 1.0)), bool((bool(bvec4((bool(bvec2(((injectionSwitch.x < injectionSwitch.y)), true))), ((injectionSwitch.x > injectionSwitch.y)), true, ((injectionSwitch.x > injectionSwitch.y))))))), mix(float((- 91.69)), float(((injectionSwitch.y) / 1.0)), bool(((injectionSwitch.x < injectionSwitch.y)))), (mix(float((61.31)), float(mix(float((- 91.69)), float(((((injectionSwitch) * vec2((injectionSwitch.y), (injectionSwitch.y))).y) / 1.0)), bool(((injectionSwitch.x < injectionSwitch.y))))), bool(true)))))), float((- 834.097)), bool(false))))))))
    return;
   if(((! (! (false)))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
     barrier();
    }
   if((false))
    {
     if((false))
      barrier();
     if((false))
      barrier();
     if(((false || (false))))
      {
       if((false))
        barrier();
       return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   barrier();
  }
 if(((false || (false))))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = (0u + (gl_WorkGroupSize.x));
 uint workgroup_id = (uint(uvec3(((gl_WorkGroupID.x) | (((gl_WorkGroupID.x) - 0u))), 1u, (uint(uvec2(1u, 1u))))));
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 uint workgroup_base = workgroup_size * workgroup_id;
 if((((injectionSwitch.x > (mix(vec2((max((injectionSwitch)[0], (min((injectionSwitch)[0], ((clamp(injectionSwitch, injectionSwitch, ((injectionSwitch) * vec2(1.0, 1.0)))))[0])))), (54.55)), vec2(((- 5757.2558 / 8.5)), (injectionSwitch)[1]), bvec2(false, ((injectionSwitch.x < injectionSwitch.y))))).y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((false))
  return;
 if(((((max(((injectionSwitch) - vec2(0.0, 0.0)), ((injectionSwitch) - vec2(0.0, 0.0)))).x > injectionSwitch.y))))
  barrier();
 uint virtual_gid = (~ (~ (workgroup_base + ((subgroup_id) - uint(((float(mat2x4((((min((mat2(1.0) * (injectionSwitch)), (mix(vec2((0.8), (injectionSwitch)[1]), vec2((injectionSwitch)[0], (1.4)), bvec2(true, false))))).x) + 0.0), round((max(length(normalize((clamp(1.0, 1.0, 1.0)))), length(normalize((clamp(1.0, 1.0, 1.0))))))), determinant(mat2(1.0, 1.0, abs(0.0), 1.0)), tan((dot(((vec2(0.0, 1.0)) - vec2(0.0, 0.0)), vec2(1.0, 0.0)))), abs((float(mat3x4(1.0, sqrt(1.0), 1.0, (dot(vec3(0.0, 1.0, 1.0), vec3(1.0, 0.0, sqrt(0.0)))), 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0)))), 1.0, 0.0, sqrt(1.0))))))) * subgroup_size + (0u | (subgroup_local_id)))));
 if((false))
  barrier();
 atomicStore(write_val, uint(virtual_gid), 4, 64, 0);
 if((false))
  return;
 if((false))
  barrier();
 uint read_val = atomicLoad(write_val, (min(4, 4)), ((64) / 1), 0);
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  barrier();
 buf[virtual_gid] = uint(subgroupAllEqual(((max(((0u) >> 0u) ^ (read_val), ((((0u) >> 0u)) >> 0u) ^ (read_val))))));
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  barrier();
 if(((((min(injectionSwitch.x, ((injectionSwitch.x) + 0.0))) > (vec2(injectionSwitch[0], injectionSwitch[1])).y))))
  return;
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
