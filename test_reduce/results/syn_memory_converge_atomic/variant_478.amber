#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec2 GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id;
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = (((min(((gl_WorkGroupID) + uvec3(0u, 0u, 0u)), (((uvec3(0u, (uint(uvec4(0u, (0u << (uint(7u))), uint((injectionSwitch.y)), 1u))), 0u)) | uvec3(0u, 0u, 0u)) ^ (((gl_WorkGroupID) / uvec3(1u, 1u, 1u)))))).x) << (0u ^ 0u));
 (uint((injectionSwitch.x)) | (GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.y = ((min((0u | ((((workgroup_id) | (((true ? workgroup_id : (subgroup_id)))))))), (workgroup_id))) - 0u)));
 uint workgroup_base = (max(workgroup_size * (clamp(GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id, GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id, (uvec2(uvec3(GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id, uint((injectionSwitch.x))))))).y, workgroup_size * (clamp(GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id, GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id, (uvec2(uvec3(GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id, uint((injectionSwitch.x))))))).y));
 ((GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.x = workgroup_base) >> 0u);
 uint virtual_gid = ((GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.x) | (GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.x)) + (uint(uvec3(subgroup_id, 0u, 1u))) * ((((0u ^ ((((subgroup_size) << 0u)) / (0u ^ (1u)))) | (((0u ^ ((~ (~ (((((~ (~ (0u | ((subgroup_size)))))) << 0u)) / 1u))))) - 0u))))) + subgroup_local_id;
 atomicStore(write_val, uint(virtual_gid), ((int(ivec2((4) << 0, 0)))), (((max(64, (clamp(64, 64, 64)))) ^ 0)), 0);
 uint read_val = atomicLoad((min(write_val, write_val)), 4, 64, 0);
 ((((buf[virtual_gid] = ((uint((injectionSwitch.x)) | (((((((~ (((false ? ((subgroup_id)) : ((((~ ((((0u | (uint(subgroupAllEqual(read_val))))) ^ 0u)))) >> 0u) | 0u)))))) << 0u)) << (147338u & 0u)) * 1u))))) | 0u) | (clamp(0u, 0u, 0u))));
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
