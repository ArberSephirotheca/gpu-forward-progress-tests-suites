#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

struct _GLF_struct_10 {
 vec3 _f0;
 mat2x4 _f1;
 vec4 _f2;
 uvec3 _f3;
 mat3x2 _f4;
 float _f5;
} ;

struct _GLF_struct_9 {
 mat3x4 _f0;
 vec3 _f1;
 float _f2;
 uint _f3;
 vec4 _f4;
 bool _f5;
} ;

struct _GLF_struct_8 {
 bool _f0;
 float _f1;
 vec3 _f2;
} ;

struct _GLF_struct_7 {
 mat4x3 _f0;
 bool _f1;
 ivec4 _f2;
 bvec2 _f3;
 float _f4;
 mat4x3 _f5;
 bvec3 _f6;
} ;

struct _GLF_struct_6 {
 vec4 _f0;
 bvec4 _f1;
 uvec3 _f2;
 uint _f3;
} ;

struct _GLF_struct_5 {
 uint _f0;
 mat2x4 _f1;
 bvec4 _f2;
} ;

struct _GLF_struct_11 {
 _GLF_struct_5 _f0;
 _GLF_struct_6 _f1;
 mat4x3 _f2;
 _GLF_struct_7 _f3;
 _GLF_struct_8 _f4;
 _GLF_struct_9 _f5;
 _GLF_struct_10 _f6;
} ;

struct _GLF_struct_3 {
 uvec4 _f0;
 uvec4 _f1;
 mat3x4 _f2;
 bvec2 _f3;
 mat4x2 _f4;
} ;

struct _GLF_struct_2 {
 mat2x3 _f0;
 mat2x4 _f1;
 mat4 _f2;
 uvec3 _f3;
 mat2 _f4;
 bvec4 _f5;
} ;

struct _GLF_struct_1 {
 bvec4 _f0;
 mat4x3 _f1;
 ivec2 _f2;
 mat2 _f3;
 bool _f4;
} ;

struct _GLF_struct_0 {
 vec2 _f0;
 ivec4 _f1;
} ;

struct _GLF_struct_4 {
 _GLF_struct_0 _f0;
 _GLF_struct_1 _f1;
 _GLF_struct_2 _f2;
 mat3x2 _f3;
 _GLF_struct_3 _f4;
 mat2x3 _f5;
 ivec2 _f6;
} ;

struct _GLF_struct_12 {
 uint subgroup_size;
 _GLF_struct_4 _f0;
 _GLF_struct_11 _f1;
} ;

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(((((mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y))))
  {
   if((! (! (((! (! (((injectionSwitch.x > injectionSwitch.y))))))))))
    barrier();
   barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 _GLF_struct_12 _GLF_struct_replacement_12 = _GLF_struct_12(gl_SubgroupSize, _GLF_struct_4(_GLF_struct_0(vec2(1.0), ivec4(1)), _GLF_struct_1(bvec4(true), mat4x3(1.0), ivec2(1), mat2(1.0), true), _GLF_struct_2(mat2x3(1.0), mat2x4(((1.0) / 1.0)), mat4(1.0), ((false ? ((((uvec3(143412u, 138330u, 189241u)) - (uvec3(0u, 0u, 0u) | uvec3(0u, 0u, 0u))) % ((189807u) | (189807u)))) : uvec3(1u))), mat2(1.0), bvec4(true)), mat3x2(1.0), _GLF_struct_3(uvec4(1u), uvec4(1u), mat3x4(1.0), (bvec2((bvec3(bvec4(bvec3((bvec2((((bvec3(bvec3(bvec3(bvec4(bvec3(bvec4(bvec3(bvec2(true), false), false)), true))))))))), ((injectionSwitch.x > injectionSwitch.y))), true))))), mat4x2(1.0)), mat2x3((float((mat2x4(mat4(mat2x4(1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0))))))), ((true ? (((ivec2(ivec2(ivec2(1)))) >> ivec2(0, 0))) : (ivec2(16690, - 84462))))), _GLF_struct_11(_GLF_struct_5((0u | (1u)), mat2x4(1.0), bvec4(true)), _GLF_struct_6((max(vec4(1.0), vec4(1.0))), bvec4(true), uvec3(1u), 1u), mat4x3(1.0), _GLF_struct_7(mat4x3((float(float(1.0)))), true, ivec4(1), bvec2(true), 1.0, mat4x3(1.0), bvec3(true)), _GLF_struct_8(true, 1.0, vec3((float(vec4(((false ? (- 8.2) : 1.0)), 0.0, tan(determinant(mat2(0.0, 0.0, 1.0, ((0.0) + 0.0)))), 1.0))))), _GLF_struct_9(mat3x4((clamp((clamp(1.0, 1.0, 1.0)), 1.0, 1.0))), vec3(1.0), 1.0, ((1u) | 0u), vec4(1.0), (bool(bvec3(true, false, false)))), _GLF_struct_10(vec3(1.0), mat2x4(1.0), vec4(1.0), uvec3(((((injectionSwitch.x > injectionSwitch.y)) ? (write_val) : 1u))), mat3x2((min((1.0 * (1.0)), (1.0 * (1.0))))), 1.0)));
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(((((injectionSwitch.x > injectionSwitch.y)) || (false))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((((! ((! (! (! ((((max((clamp(vec2(((injectionSwitch[0]) * 1.0), (clamp(((false ? (vec2(- 1905.6517, - 4972.5629)) : injectionSwitch))[(((~ (~ (1)))) | 0)], (clamp(((false ? (- 611.465) : injectionSwitch[1])), ((injectionSwitch) * ((true ? mat2((injectionSwitch.y)) : (mat2(6.5, 15.78, 594.334, - 7169.7089)))))[1], injectionSwitch[1])), injectionSwitch[1]))), vec2(injectionSwitch[0], (float(mat2x4(injectionSwitch[1], determinant(mat3(sqrt(1.0), log(1.0), 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, exp(0.0))), 0.0, 1.0, 1.0, 1.0, 1.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)))))), vec2(injectionSwitch[0], (vec2(0.0, 0.0) + ((vec2(mat4x3(injectionSwitch, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0)))))[1]))), (mix(vec2(((mix(vec2((((- 0.4)) * determinant(mat4(1.0, cos(0.0), 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, abs(0.0), 0.0, 1.0, 0.0, 0.0, 0.0, sqrt(0.0), 1.0))), (- 63.84)), vec2((((vec2(injectionSwitch[0], injectionSwitch[1])) * mat2(1.0)))[0], (vec2(injectionSwitch[0], injectionSwitch[1]))[1]), bvec2(true, true))))[0], ((mix(vec2((- 0.4), (- 63.84)), vec2((vec2((clamp(injectionSwitch, injectionSwitch, injectionSwitch))[0], injectionSwitch[1]))[0], (vec2(injectionSwitch[0], injectionSwitch[1]))[1]), bvec2(true, true))))[1]), vec2((- 963.302), (3.6)), bvec2(false, false)))))).x > ((mix(vec2((vec2(vec4(injectionSwitch, 1.0, ((vec2(injectionSwitch[0], (mix(vec2(((min(312.104, 312.104))), (injectionSwitch)[1]), vec2((injectionSwitch)[0], ((- 7.8 + 1.5))), bvec2(true, false)))[1])).x))))[0], (vec2(vec4(injectionSwitch, 1.0, (injectionSwitch.x))))[1]), vec2((float(- 78642)), (5221.1018)), bvec2(false, ((injectionSwitch.x > (float(mat4x2((((((! ((bool(bvec2(! ((! (! (false || (bool(bvec3(true, true, false))))))), false))))))) ? (mix(vec2((818.898), ((- 0.9))), vec2(((mix(vec2((injectionSwitch)[0], (- 3.5)), vec2((2883.0178), ((true ? (injectionSwitch)[1] : (- 29.66)))), bvec2(false, true))))[0], (injectionSwitch)[1]), bvec2(true, true))).y : (((2675.8630) + tan(0.0))))), (((injectionSwitch.y)) + 0.0), (mix(float((5958.1477)), float(1.0), bool(true))), 1.0, round(length(normalize(abs(vec2(1.0, 1.0))))), 1.0, 1.0, 1.0))))))))).y))))))))))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 if((false))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  {
   if(((((((! (! (injectionSwitch.x > injectionSwitch.y))))) && true))))
    barrier();
   if((((injectionSwitch.x > (min(injectionSwitch.y, injectionSwitch.y))))))
    barrier();
   barrier();
   if((bool(bvec3((! (! ((false)))), false, ((injectionSwitch.x < injectionSwitch.y))))))
    barrier();
  }
 if((false))
  barrier();
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(((! ((true && (! (bool((bvec3(bvec4(bvec3((false), ((injectionSwitch.x < (mix(vec2((- 14.05), (injectionSwitch)[1]), vec2((((injectionSwitch)[0]) - 0.0), (0.2)), bvec2(true, false))).y)), false), true)))))))))))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 if((false))
  barrier();
 uint virtual_gid = (max(workgroup_base, (max(workgroup_base, workgroup_base)))) + subgroup_id * (0u | (_GLF_struct_replacement_12.subgroup_size)) + (min(subgroup_local_id, subgroup_local_id));
 atomicStore(write_val, uint(virtual_gid), 4, 64, 0);
 if((((false)) || false))
  barrier();
 if(((((false || (injectionSwitch.x > injectionSwitch.y))))))
  {
   if((false))
    barrier();
   if((bool(bvec2((false), true))))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     barrier();
     if(((! (! (((bool(bvec3(! (! (((injectionSwitch.x > injectionSwitch.y)))), true, true)))))))))
      barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 uint read_val = atomicLoad(((((write_val)) * 1u) - (~ (~ (((0u >> (((uint(0u))) ^ 0u)) ^ (0u)))))), (0 | ((clamp(4, 4, 4)))), 64, 0);
 if((((false) && true)))
  barrier();
 if(((((((bool(bvec2(false, true)))) || false)) || false)))
  barrier();
 if((true && ((false))))
  barrier();
 buf[virtual_gid] = uint(subgroupAllEqual(read_val));
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
