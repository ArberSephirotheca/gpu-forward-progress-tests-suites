#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(((((true && (injectionSwitch.x > injectionSwitch.y))))))
  {
   if((false))
    return;
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((((false) && true)))
  {
   if((false))
    return;
   if((((injectionSwitch.x > ((((injectionSwitch.x > injectionSwitch.y)) ? (vec2(- 9.1, - 8.3)) : (max(injectionSwitch, ((injectionSwitch) * mat2(1.0)))))).y))))
    {
     if(((true && (false))))
      return;
     return;
    }
   if(((((false || (((((float((clamp(vec3(float(mat2x4(injectionSwitch.x, sqrt(0.0), 1.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, 0.0)), 0.0, 0.0), vec3(float(mat2x4(injectionSwitch.x, sqrt(0.0), 1.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, 0.0)), 0.0, 0.0), vec3(float(mat2x4(injectionSwitch.x, sqrt(0.0), 1.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, 0.0)), 0.0, 0.0)))))) > injectionSwitch.y))))) || false)))
    barrier();
   if((false))
    return;
   if((false))
    {
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
       return;
       if((false))
        barrier();
      }
     return;
    }
   if((false))
    {
     if((((! (! ((((injectionSwitch.x > injectionSwitch.y))) && ((injectionSwitch.x < injectionSwitch.y))))))))
      {
       if((false))
        {
         if((false))
          return;
         barrier();
        }
       return;
      }
     return;
    }
   barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 if((false))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if((false))
  return;
 if((((false) || ((injectionSwitch.x > injectionSwitch.y)))))
  {
   if((false))
    return;
   if((false))
    barrier();
   barrier();
  }
 if(((((! ((! ((! (! (! (! ((! (! (injectionSwitch.x > injectionSwitch.y))))))))))))))))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if(((((true && (false))) || false)))
  return;
 if((false))
  return;
 if((false))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((false))
  return;
 if((false))
  barrier();
 if((false))
  return;
 if((true && ((false))))
  {
   if(((bool(bvec2(((((injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y)), ((injectionSwitch.x < injectionSwitch.y)))))))
    {
     if(((false || (false))))
      barrier();
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     return;
     if((false))
      barrier();
     if((false))
      return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(((false || (false))))
      barrier();
     return;
    }
   if((((((injectionSwitch.x) - 0.0) > injectionSwitch.y))))
    {
     if((false))
      barrier();
     if(((true && (((injectionSwitch.x > (max(((true ? injectionSwitch : ((- 1.4 + injectionSwitch)))), (vec2(mat2x3((min(injectionSwitch, injectionSwitch)), 1.0, 0.0, 0.0, 1.0))))).y))))))
      {
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((false))
        barrier();
       return;
       if(((((! (! (((injectionSwitch.x) * 1.0) > injectionSwitch.y)))))))
        return;
      }
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        return;
       barrier();
      }
     if((((((false) && (! (! (true)))))) && true))
      return;
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
     if((false))
      {
       if((false))
        return;
       barrier();
      }
     if((false))
      {
       if(((true && ((false || (false))))))
        barrier();
       if((false))
        return;
       barrier();
      }
     if((false))
      barrier();
     if((false))
      return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(((true && (false))))
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     if(((true && (false))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
        }
       if((false))
        return;
       return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(((((mix(float((445.620)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     return;
     if((false))
      barrier();
    }
   if((false))
    barrier();
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     if((false))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     barrier();
    }
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   return;
  }
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  return;
 if((false))
  return;
 if((false))
  return;
 if((false))
  barrier();
 if((! (! ((((injectionSwitch.x > injectionSwitch.y)))))))
  {
   if((false))
    return;
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   if((false))
    return;
   if(((bool(bvec4(((false) && true), false, false, true)))))
    {
     if((false))
      barrier();
     return;
    }
   barrier();
  }
 if(((bool(bvec2(false, false)))))
  barrier();
 if((false))
  {
   if((false))
    {
     if((false))
      return;
     return;
     if((false))
      return;
     if((false))
      {
       if((false))
        return;
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
        }
       barrier();
      }
    }
   if((false))
    barrier();
   if((false))
    return;
   if((false))
    return;
   if((false))
    barrier();
   return;
  }
 if((false))
  return;
 if((false))
  return;
 if((((bool(bvec3(((((((clamp((max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))) || false)), true, true)))) && true))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if((false))
  {
   if((false))
    return;
   barrier();
  }
 if(((((! (! (false)))) && ((injectionSwitch.x < injectionSwitch.y)))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    return;
   if(((((max(injectionSwitch, (vec2(((injectionSwitch[0]) - 0.0), injectionSwitch[1])))).x > injectionSwitch.y))))
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      {
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
       return;
      }
     if((((injectionSwitch.x > (min(injectionSwitch.y, injectionSwitch.y))))))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       return;
      }
     return;
     if((false))
      barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    barrier();
   return;
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 if(((true && (false))))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((((injectionSwitch.x > ((injectionSwitch.y) / 1.0)))))
  {
   if((false))
    {
     if((false))
      barrier();
     return;
    }
   barrier();
  }
 if(((true && (false))))
  return;
 if(((bool(bvec2((! (((! (((injectionSwitch.x > injectionSwitch.y)))) && true))), false)))))
  {
   if((false))
    {
     if((false))
      {
       if((false))
        return;
       if((((false) && true)))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if((((! (! (true))) && (false))))
      return;
     return;
     if((false))
      return;
     if((false))
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       return;
      }
     if((false))
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
        }
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if((false))
    {
     if((false))
      barrier();
     if((false))
      barrier();
     return;
    }
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    barrier();
   if((false))
    barrier();
   if((((false) && true)))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
  }
 if((((false) && true)))
  {
   if((false))
    barrier();
   return;
  }
 uint num_workgroup = (0u | (gl_NumWorkGroups.x));
 if((false))
  return;
 if((false))
  barrier();
 if((false))
  {
   if((false))
    return;
   barrier();
  }
 if((false))
  {
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     if((false))
      barrier();
     barrier();
    }
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
   if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
   if((false))
    {
     if((false))
      return;
     return;
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  {
   if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
   if((false))
    {
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        return;
       barrier();
      }
     if((false))
      barrier();
     return;
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if((false))
    return;
   if((((! (((((! ((((injectionSwitch.x > injectionSwitch.y))))))) || false) && true))) && true))
    return;
   if((false))
    {
     if((false))
      return;
     if((false))
      {
       if((false))
        return;
       if((((! (! (! (! (false))))))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if((false))
        barrier();
       if((false))
        return;
       if(((bool(bvec3(false, false, true)))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     if((false))
      barrier();
     if((true && ((((injectionSwitch.x > injectionSwitch.y))))))
      {
       if((false))
        barrier();
       barrier();
       if((false))
        {
         if((false))
          {
           if((false))
            return;
           barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
      }
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
       return;
      }
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((false))
        return;
       return;
       if(((bool(bvec4(false, false, true, false)))))
        barrier();
      }
     if((false))
      return;
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if((false))
    {
     if((false))
      barrier();
     if((false))
      return;
     if((false))
      return;
     if((((injectionSwitch.x > (((false ? (injectionSwitch) : (injectionSwitch) * mat2(1.0)))).y))))
      barrier();
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   if(((((bool((bvec2(bvec4(bvec2(injectionSwitch.x > injectionSwitch.y, false), ((injectionSwitch.x < injectionSwitch.y)), ((injectionSwitch.x > injectionSwitch.y)))))))))))
    barrier();
   if((false))
    barrier();
   barrier();
   if((false))
    barrier();
  }
 if(((bool(bvec3(false, true, true)))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if((false))
    {
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     if((false))
      barrier();
     barrier();
     if((false))
      return;
     if((false))
      barrier();
    }
   if((false))
    return;
   if((true && ((true && ((false))))))
    {
     if((false))
      return;
     return;
    }
   if((((false) && true)))
    {
     if((false))
      return;
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if((false))
    return;
   if((false))
    barrier();
   if(((false || (((false) && true)))))
    barrier();
   if((false))
    return;
   if((! (! ((false)))))
    return;
   if((false))
    barrier();
   if(((! (! (false)))))
    {
     if(((! (! (false)))))
      return;
     if((false))
      barrier();
     barrier();
    }
   barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    return;
   if((false))
    return;
   if((((false) || false)))
    return;
   if((((false) || false)))
    return;
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     if((false))
      return;
     if((false))
      return;
     if(((true && (false))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if((false))
    {
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
     if((false))
      return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     return;
    }
  }
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   if((false))
    return;
   return;
  }
 uint workgroup_size = (clamp((uint(uint((clamp(gl_WorkGroupSize.x, gl_WorkGroupSize.x, gl_WorkGroupSize.x))))), gl_WorkGroupSize.x, gl_WorkGroupSize.x));
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 if((false))
  barrier();
 if((((! (! ((injectionSwitch.x > injectionSwitch.y)))))))
  return;
 if((false))
  {
   if((false))
    return;
   barrier();
  }
 if(((((true && ((bool(bool(false)))))) || false)))
  {
   if(((((bool(bool(bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, true, true)))))))))
    barrier();
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  barrier();
 if((false))
  {
   if((((false) && true)))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if((false))
    return;
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    barrier();
   barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      barrier();
     return;
     if((false))
      return;
    }
  }
 if((((injectionSwitch.x > ((injectionSwitch) * abs(vec2(1.0, 1.0))).y))))
  barrier();
 if((false))
  return;
 if((false))
  return;
 if((false))
  {
   if((false))
    return;
   return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    return;
   if((false))
    barrier();
   if(((! (! (((false)) && true)))))
    barrier();
   if((false))
    {
     if((false))
      {
       if((false))
        return;
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if((bool(bvec4((((injectionSwitch.x > injectionSwitch.y))), (bool(bvec3(true, false, false))), false, false))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(((bool(bool(false)))))
    return;
   if((false))
    {
     if((false))
      barrier();
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((false))
        barrier();
       if((false))
        barrier();
       barrier();
      }
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if(((! ((! (! (! (((injectionSwitch.x > injectionSwitch.y))))))))))
        barrier();
       return;
      }
     barrier();
     if((false))
      return;
    }
   if(((((vec2(injectionSwitch[0], ((injectionSwitch[1]) + 0.0))).x > injectionSwitch.y))))
    {
     if((false))
      return;
     return;
    }
   return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y)) || ((false))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    return;
   if((false))
    {
     if((false))
      return;
     barrier();
    }
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 if((false))
  {
   if((false))
    return;
   if(((bool(bvec2(bool(bvec3(((! ((bool(bvec2(! (((false) || false)), false)))))), true, ((injectionSwitch.x > injectionSwitch.y)))), false)))))
    return;
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   return;
   if((false))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 if((false))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    return;
   if((((bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, true))))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
   if((false))
    return;
   if((false))
    barrier();
  }
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((((((((((bool((! (! (bool(! ((false || (! (true))))))))))) && ((injectionSwitch.x < injectionSwitch.y)))) ? (0u | ((clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)))) : (((((clamp(((0u ^ (write_val))) * (min(((1u) + (0u << (uint(3u)))), 1u)), ((0u ^ (write_val))) * (min(((1u) + (0u << (uint(3u)))), 1u)), ((((0u ^ (write_val))) * (min(((1u) + (0u << (uint(3u)))), 1u))) | 0u))) << uint((injectionSwitch.x)))))))) + 0u))) | 0u);
 if(((((clamp(injectionSwitch, injectionSwitch, ((injectionSwitch) - vec2(0.0, 0.0)))).x > injectionSwitch.y)) || (((((! (! (false)))))) || false)))
  {
   if((false))
    return;
   if(((((! (! (false)))) || false)))
    return;
   if((false))
    {
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if((false))
      barrier();
    }
   if((false))
    return;
   if((false))
    {
     if((false))
      return;
     barrier();
    }
   if((false))
    {
     if((false))
      return;
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    return;
   if((false))
    return;
   barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     barrier();
    }
   if((false))
    barrier();
   if((false))
    {
     if((false))
      return;
     if((false))
      barrier();
     if((false))
      barrier();
     barrier();
     if((false))
      barrier();
     if((false))
      return;
    }
  }
 if(((((min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
  {
   if((bool(bvec3((((false) || false)), ((injectionSwitch.x < injectionSwitch.y)), true))))
    {
     if((false))
      barrier();
     return;
    }
   if((((injectionSwitch.x > (max(injectionSwitch, injectionSwitch)).y))))
    barrier();
   if((false))
    return;
   return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    barrier();
  }
 if((false))
  {
   if((false))
    {
     if((false))
      barrier();
     if((false))
      barrier();
     return;
     if((((false) && true)))
      return;
     if((((false || (bool((true && (bool(false)))))))))
      barrier();
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if(((! (! (false)))))
      return;
    }
   barrier();
  }
 if((! (! ((((injectionSwitch.x > injectionSwitch.y)))))))
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   return;
  }
 if((false))
  barrier();
 atomicStore(write_val, uint(virtual_gid), 4, 64, 0);
 if((false))
  return;
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if(((! (! (bool(bvec3((false), true, ((injectionSwitch.x > injectionSwitch.y)))))))))
      barrier();
     return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    barrier();
   return;
   if((false))
    barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  barrier();
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if(((((min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
   if((false))
    return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      return;
     return;
     if((false))
      return;
    }
   if((false))
    return;
   if((false))
    {
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     barrier();
    }
   barrier();
   if((false))
    barrier();
  }
 if((false))
  return;
 if((false))
  barrier();
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        return;
       if((false))
        return;
       if(((((min((max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y))))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          return;
         barrier();
        }
       return;
      }
     if((false))
      return;
     barrier();
    }
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      return;
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      barrier();
    }
   if((false))
    barrier();
   if((false))
    return;
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    {
     if((((injectionSwitch.x > ((false ? (injectionSwitch) : (min(injectionSwitch, (vec2(mat3(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, sqrt(0.0)))))))).y))))
      barrier();
     return;
    }
   if((false))
    {
     if((false))
      return;
     return;
    }
   if((false))
    return;
   if(((((false || ((false || (injectionSwitch.x > ((injectionSwitch.y) - (dot(vec2(0.0, 0.0), vec2(1.0, 1.0))))))))))))
    {
     if((false))
      barrier();
     return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     if(((bool((true && (bool((! (! (false))))))))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     if((false))
      return;
     if((false))
      barrier();
     if((false))
      barrier();
     if((false))
      barrier();
     return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if((false))
    {
     if((((false)) && true))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if((false))
    return;
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        return;
       barrier();
      }
     if((false))
      return;
     barrier();
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      return;
    }
  }
 if((false))
  barrier();
 if(((! (! (false)))))
  return;
 uint read_val = atomicLoad(write_val, 4, 64, 0);
 if((false))
  {
   if((false))
    {
     if((false))
      return;
     barrier();
    }
   return;
  }
 if((false))
  return;
 if((! ((! (! (! (((((bool(bool((! (! ((true && (((((false) || false)) || false))))))))))) && true))))))))
  barrier();
 if((bool(bvec3((false), ((true) || false), true))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        return;
       return;
      }
     if((false))
      return;
     return;
    }
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        {
         if((false))
          barrier();
         return;
        }
       return;
      }
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      return;
     if((((injectionSwitch.x > (mix(vec2((injectionSwitch)[0], (8010.6626)), vec2((- 21.91), (((injectionSwitch) * vec2(1.0, (max(1.0, 1.0)))))[1]), bvec2(false, true))).y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
       if((false))
        return;
      }
    }
   if((false))
    {
     if((false))
      return;
     barrier();
    }
   if((false))
    {
     if((((bool(bool(bool(bool(false))))))))
      barrier();
     return;
    }
   barrier();
   if((false))
    return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    return;
   return;
  }
 if((false))
  return;
 if((false))
  return;
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  return;
 if((false))
  barrier();
 if((false))
  {
   if((false))
    return;
   if((false))
    barrier();
   if(((((true && (false))) || false)))
    return;
   if((false))
    return;
   return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     return;
    }
   if((false))
    barrier();
   if((false))
    return;
  }
 if((false))
  barrier();
 if((((! ((! ((false || (! (! ((false))))))))) && true)))
  return;
 if((false))
  {
   if(((((vec2((mat4x2(mat4x3(mat4x2(injectionSwitch, 1.0, 0.0, 0.0, 0.0, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, tan(0.0), 1.0)), 1.0)))))).x > (float(vec4((max(injectionSwitch.y, injectionSwitch.y)), (injectionSwitch.y), 0.0, 0.0)))))))
    barrier();
   if((false))
    barrier();
   if((false))
    return;
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   if((false))
    {
     if((((((! (! (! ((false || ((! ((false || (bool(bvec2((! ((bool(bvec4(! ((bool(bvec2((! (((! ((! (! (false))))) && true))), true)))), false, false, true))))), true))))))))))))) || false))))
      {
       if((false))
        return;
       barrier();
       if((false))
        barrier();
       if((false))
        return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(((((vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
      return;
     if((false))
      return;
     return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    return;
   if((((((injectionSwitch.x > injectionSwitch.y)) || ((injectionSwitch.x > injectionSwitch.y))))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if((false))
      return;
     barrier();
    }
   barrier();
  }
 if((false))
  {
   if((false))
    barrier();
   return;
  }
 (((0u | (buf[virtual_gid] = uint(subgroupAllEqual(read_val))))) + 0u);
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
