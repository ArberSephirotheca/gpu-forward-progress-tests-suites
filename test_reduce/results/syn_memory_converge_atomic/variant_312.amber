#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(((false || (false))))
  return;
 if((((((min(mix(float((max((min(injectionSwitch.x, injectionSwitch.x)), (min(injectionSwitch.x, injectionSwitch.x))))), float(((max(4479.7500, (mix(float(4479.7500), float((4563.3361)), bool(false))))))), (bool(bool(bool(false))))), mix(float((min(injectionSwitch.x, injectionSwitch.x))), float((4479.7500)), (bool(bvec4((bool(bvec4(bool(false), true, true, false))), ((injectionSwitch.x > injectionSwitch.y)), false, false))))))) > ((max((injectionSwitch), (injectionSwitch))) - vec2(0.0, 0.0)).y))))
  {
   if((((injectionSwitch.x > (clamp(injectionSwitch.y, (max(injectionSwitch.y, (mix(float(injectionSwitch.y), float((- 9.8)), bool(false))))), injectionSwitch.y))))))
    {
     if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
      return;
     return;
    }
   return;
  }
 if((bool(bool(((bool(bool(false))))))))
  {
   if((false))
    return;
   return;
  }
 uint subgroup_id = gl_SubgroupID;
 if((((((injectionSwitch.x) / sqrt(1.0)) > (max((vec2(injectionSwitch[0], injectionSwitch[1])), (vec2(injectionSwitch[0], injectionSwitch[1])))).y))))
  return;
 if((false))
  return;
 if((false))
  return;
 if((false))
  return;
 if((bool(bool((false)))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    return;
   if((false))
    {
     if((false))
      return;
     return;
    }
   if((false))
    return;
   if((false))
    return;
   return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 uint subgroup_size = gl_SubgroupSize;
 if((false))
  return;
 if(((((bool(bvec2(true, false))) && ((bool(bvec4((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)), ((true) && true), true))))))))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(((bool(bvec2((((! (! (false || ((bool(bvec2((! (! (false))), true)))))))) || ((((((true) || false) && ((true && ((true && (((injectionSwitch.x > injectionSwitch.y))))))))) && true))), true)))))
  return;
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    return;
   if((false))
    return;
   if((bool(bool((! (! ((false))))))))
    return;
   return;
   if((((injectionSwitch.x > ((clamp((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0)))).y))))
    return;
  }
 if((false))
  return;
 uint num_workgroup = (((max(gl_NumWorkGroups.x, gl_NumWorkGroups.x))) | 0u);
 if(((((injectionSwitch.x < injectionSwitch.y)) && ((false || (false))))))
  return;
 uint workgroup_size = (clamp(gl_WorkGroupSize, gl_WorkGroupSize, gl_WorkGroupSize)).x;
 if(((bool((bvec3(bvec3(bvec3(((injectionSwitch.x > injectionSwitch.y)), ((injectionSwitch.x < injectionSwitch.y)), false))))))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if((false || ((((false) || (! (((! (false)) || false))))))))
  {
   if((((false || ((false)))) || false))
    return;
   return;
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(((((bool(bool(bool(bool((false)))))))) || ((injectionSwitch.x > injectionSwitch.y))))
  return;
 uint workgroup_base = ((((workgroup_size)) ^ (0u << (uint(5u)))) | 0u) * (max((uint(uvec3(((workgroup_id) ^ 0u), 0u, ((1u ^ 1u) & 150098u)))), (uint(uvec3(((workgroup_id) ^ 0u), 0u, ((1u ^ 1u) & 150098u))))));
 if((false))
  return;
 if((false))
  return;
 if((! (! (! (! ((((true && (((((false))) || ((false) && true))))) || (((injectionSwitch.x < injectionSwitch.y)) && (false)))))))))
  return;
 uint virtual_gid = (max(((true ? workgroup_base : (subgroup_id))), workgroup_base)) + subgroup_id * subgroup_size + subgroup_local_id;
 if((false))
  return;
 if((false))
  {
   if(((bool(bvec3(((false) || false), false, false)))))
    return;
   return;
  }
 atomicStore(write_val, (((clamp(((((uint((clamp(((virtual_gid) - 0u), virtual_gid, ((virtual_gid) << ((0u) | 0u)))))) - 0u)) * 1u), (max(((((uint((clamp(((virtual_gid) - 0u), (~ (~ ((max((clamp(((virtual_gid) << 0u), (uint(uvec3(virtual_gid, 0u, 0u))), ((true ? virtual_gid : (write_val))))), (clamp(((virtual_gid) << 0u), (uint(uvec3(virtual_gid, 0u, 0u))), ((true ? virtual_gid : (write_val)))))))))), ((virtual_gid) << ((0u) | 0u)))))) - 0u)) * 1u), ((((uint((clamp(((virtual_gid) - 0u), virtual_gid, ((virtual_gid) << ((0u) | 0u)))))) - 0u)) * 1u))), (clamp(((((uint((clamp(((virtual_gid) - 0u), ((virtual_gid) << 0u), ((virtual_gid) << ((0u) | 0u)))))) - 0u)) * ((1u) / 1u)), (0u | (((((uint(((min(float(float((injectionSwitch.x))), (clamp(float(float((injectionSwitch.x))), float(float((injectionSwitch.x))), float(float((injectionSwitch.x))))))))) | ((((uint((clamp(((virtual_gid) - 0u), virtual_gid, (~ (~ (((virtual_gid) << ((0u) | 0u)))))))))) ^ 0u))) - 0u)) * 1u))), ((((uint((clamp(((virtual_gid) - 0u), virtual_gid, (0u ^ (((virtual_gid) << (clamp(((0u) | 0u), ((0u) | 0u), ((0u) | 0u)))))))))) - 0u)) * 1u)))))) | (((0u | uint((injectionSwitch.x))) | ((~ (~ (((true ? uint(virtual_gid) : (virtual_gid)))))))))), 4, 64, 0);
 uint read_val = atomicLoad(write_val, 4, (clamp((int(ivec2((int(((max(0 ^ (int(64)), 0 ^ (int(64))))))), (clamp(0, 0, ((((false ? (73265) : 0))) - (0 >> (int(6))))))))), ((64) - ((((0) / 1)) / 1)), 64)), 0);
 if((false))
  return;
 buf[virtual_gid] = (~ (~ (((uint(subgroupAllEqual(read_val))) / ((1u << (uint(7u))) >> (uint(7u)))))));
 if((false))
  return;
 if((false))
  {
   if(((((injectionSwitch.x < injectionSwitch.y)) && (((injectionSwitch.x > injectionSwitch.y))))))
    return;
   return;
  }
 if((false))
  return;
 if(((bool((bvec2(bvec4((bvec2(((bvec2(bvec4(bvec2(bvec4(bvec2(bvec2(false, ((((injectionSwitch.x < injectionSwitch.y))) && true))), false, false)), true, false)))))), true, ((injectionSwitch.x > injectionSwitch.y)))))))))
  {
   if(((((((bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, true, false))) && true))))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     return;
    }
   return;
   if(((true && (false))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     if((false))
      return;
     return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if((((((injectionSwitch.x > injectionSwitch.y))) || false)))
  return;
 if(((((min(injectionSwitch, (abs(vec2(1.0, 1.0)) * (injectionSwitch)))).x > injectionSwitch.y))))
  return;
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
