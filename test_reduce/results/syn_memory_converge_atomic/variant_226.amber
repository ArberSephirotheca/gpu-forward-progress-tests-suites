#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(((false || ((bool(((true && (bool(bool(bool(false))))))))))))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false || (((((((((((! (! (((false || ((! ((true && (! ((true && (((! ((true && (! (! (! (! (! (((! (! (! (! (((((((injectionSwitch.x > (((! ((false || (bool(bvec3((! (((injectionSwitch.x < ((max((clamp(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch))), mat2(1.0) * (injectionSwitch)))).y)))), true, false)))))) ? injectionSwitch.y : (- 6.6)))))) && true)) || false)))))))))))))))))))))))))) || (((bool(bvec2(((! (! (bool(bvec2((bool(bool(((injectionSwitch.x > injectionSwitch.y))))) || ((injectionSwitch.x > injectionSwitch.y)), true)))))), (! (! (false))))))))) && true)))) || false))))))) && true))))
  {
   if((false))
    barrier();
   barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 if(((false || (((injectionSwitch.x > injectionSwitch.y))))))
  {
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   barrier();
  }
 if(((false || (((((injectionSwitch.x > injectionSwitch.y)) && true))))))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 uint subgroup_size = gl_SubgroupSize;
 if((false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(((true && (((injectionSwitch.x > injectionSwitch.y))))))
  {
   if(((((min(((false ? (vec2(- 9.7, - 6738.3266)) : injectionSwitch)), injectionSwitch)).x > injectionSwitch.y))))
    barrier();
   if(((((min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   barrier();
  }
 if((((false) && true)))
  {
   if((false))
    barrier();
   barrier();
   if((false))
    barrier();
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if((false))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   if(((((bool(bvec4(false, false, true, true)))) || false)))
    barrier();
   barrier();
   if((false))
    barrier();
  }
 if((false))
  barrier();
 if((((false) || false)))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 if((false))
  {
   if(((bool(bvec3(false, true, false)))))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if((false))
  barrier();
 if((false))
  barrier();
 uint workgroup_base = workgroup_size * workgroup_id;
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 uint virtual_gid = workgroup_base + (min(subgroup_id, subgroup_id)) * (clamp(((subgroup_size) - 0u), ((((((((max(injectionSwitch, injectionSwitch))) / abs(vec2(1.0, 1.0))).x > injectionSwitch.y)) ? ((write_val ^ workgroup_size)) : 0u)) ^ (subgroup_size)), subgroup_size)) + subgroup_local_id;
 if((false))
  {
   if(((! (((! (false)) || false)))))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 atomicStore(write_val, uint((uint(uint((~ (((~ (0u ^ (((uint(uvec3(uint(uvec3(((max(uint(uvec4((virtual_gid), 0u, 1u, 1u)), uint(uvec4((virtual_gid), 0u, 1u, 1u))))), (min(1u, 1u)), uint((injectionSwitch.x)))), 1u, 0u)))))))) >> 0u)))))), 4, 64, 0);
 if(((((bool(bvec4((((injectionSwitch.x < injectionSwitch.y)) && (((injectionSwitch.x > injectionSwitch.y)))), true, true, (true && (true))))) || (true && (false))))))
  {
   if(((bool(bvec2(false, false)))))
    barrier();
   if((((((injectionSwitch.x > injectionSwitch.y)) && true))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
  }
 if((((((bool(bvec4((((bool(bvec4(true, false, true, false))) ? injectionSwitch : (vec2(- 30.78, 3.1)))).x < injectionSwitch.y, true, ((injectionSwitch.x > injectionSwitch.y)), false))))) && (false))))
  {
   if((false))
    barrier();
   barrier();
  }
 uint read_val = atomicLoad(write_val, 4, 64, 0);
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 buf[virtual_gid] = uint(subgroupAllEqual(read_val));
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
