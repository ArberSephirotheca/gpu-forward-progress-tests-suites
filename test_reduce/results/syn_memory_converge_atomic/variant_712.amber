#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec4 GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_14subgroup_idsubgroup_local_idvirtual_gidworkgroup_base;
 do
  {
   if((false))
    return;
  }
 while(((injectionSwitch.x > injectionSwitch.y)));
 if((false))
  barrier();
 if((false))
  {
   do
    {
     barrier();
     if((false))
      barrier();
     if((false))
      return;
    }
   while(false);
  }
 do
  {
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
  }
 while(false);
 uvec4 GLF_merged4_0_1_13_1_1_8_2_1_13_3_1_14num_workgroupread_valsubgroup_sizeworkgroup_size;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    return;
   do
    {
     return;
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
  }
 if((false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 do
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if(false)
    {
     if((false))
      continue;
    }
   else
    {
     if((((false) || false)))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
       return;
      }
    }
  }
 while(false);
 do
  {
   if((false))
    break;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
  }
 while(((injectionSwitch.x > injectionSwitch.y)));
 if(((injectionSwitch.x < injectionSwitch.y)))
  {
   if((false))
    barrier();
  }
 else
  {
  }
 if((false))
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(((! (! (false)))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(((true && (false))))
        return;
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         if((false))
          {
           if(false)
            {
            }
           else
            {
             barrier();
            }
          }
        }
       return;
      }
     return;
    }
   if((false))
    {
     do
      {
       barrier();
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
    }
   if((false))
    {
     if(false)
      {
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     if((false))
      return;
     if(((bool((bvec2(bvec3(bvec2(false, false), true)))))))
      barrier();
    }
   do
    {
     if((false))
      {
       do
        {
         if((false))
          {
           if(true)
            {
             barrier();
            }
           else
            {
            }
          }
        }
       while(false);
       return;
      }
    }
   while(false);
   if((bool(bool(true))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     if(((false || (false))))
      barrier();
     if((false))
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            {
             for(int _injected_loop_counter = (0 << (int(2))); _injected_loop_counter < 1; _injected_loop_counter ++)
              {
               barrier();
              }
            }
           if(((true && (false))))
            {
             for(int _injected_loop_counter = (((1 << (int(3))) >> (int(3))) ^ 1); _injected_loop_counter < 1; _injected_loop_counter ++)
              {
               if(((injectionSwitch.x < injectionSwitch.y)))
                {
                 barrier();
                }
               else
                {
                }
              }
            }
           do
            {
             barrier();
            }
           while(false);
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             if((false))
              return;
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if(((injectionSwitch.x > injectionSwitch.y)))
                {
                }
               else
                {
                 barrier();
                }
              }
            }
          }
         do
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if(true)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                continue;
               barrier();
               if((false))
                barrier();
              }
             else
              {
              }
            }
           if((false))
            break;
          }
         while(false);
         if((false))
          {
           if((false))
            barrier();
           if(false)
            {
            }
           else
            {
             if((false))
              {
               if((false))
                {
                 do
                  {
                   return;
                  }
                 while(false);
                }
               if((false))
                barrier();
               barrier();
              }
             do
              {
               barrier();
              }
             while(((injectionSwitch.x > injectionSwitch.y)));
            }
          }
         do
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
         do
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
         for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != (((1 ^ 0) << ((0 ^ (int(2))))) >> ((clamp(int(2), (1 * (int(2))), int(2))))); _injected_loop_counter ++)
          {
           if(true)
            {
             if((false))
              barrier();
             if((false))
              continue;
            }
           else
            {
            }
          }
         barrier();
        }
       do
        {
         if((false))
          return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = (0 >> (int(8))); _injected_loop_counter != ((int((injectionSwitch.y)) << (int(3))) >> (((((int(3)) | (int(3)))) | 0))); _injected_loop_counter ++)
            {
             barrier();
            }
          }
        }
       while(false);
       if((false))
        barrier();
       barrier();
       if((false))
        {
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           barrier();
          }
         else
          {
          }
        }
      }
    }
   else
    {
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      {
       if(false)
        {
        }
       else
        {
         barrier();
        }
      }
    }
   for(int _injected_loop_counter = ((0 << (int(2))) >> (int(5))); _injected_loop_counter < 1; _injected_loop_counter ++)
    {
     if(((! ((false || (! (((injectionSwitch.x > injectionSwitch.y)))))))))
      {
       if((false))
        barrier();
       return;
      }
    }
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     barrier();
     if((false))
      barrier();
     do
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(false);
    }
   for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
    {
     return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    {
     if(false)
      {
      }
     else
      {
       for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
        {
         do
          {
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
             return;
            }
          }
         while(false);
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         return;
        }
      }
     for(int _injected_loop_counter = 1; _injected_loop_counter > (((0 & - 73943) >> (int(5))) >> (int(2))); _injected_loop_counter --)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     barrier();
    }
   if((false))
    return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if(true)
  {
   if((false))
    {
     for(int _injected_loop_counter = (((~ (~ ((1 | 1)))) << (((int(1)) ^ 0))) >> (int(1))); _injected_loop_counter > (0 << (int(5))); _injected_loop_counter --)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
             barrier();
            }
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             barrier();
            }
           else
            {
            }
          }
         barrier();
         if(((bool(bvec2(false, true)))))
          {
           for(int _injected_loop_counter = 1; _injected_loop_counter != (0 | 0); _injected_loop_counter --)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
             barrier();
            }
          }
         if((false))
          continue;
         if((false))
          continue;
        }
      }
     if((false))
      {
       if((false))
        return;
       barrier();
      }
     return;
    }
  }
 else
  {
  }
 if(((injectionSwitch.x < injectionSwitch.y)))
  {
   if(false)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         barrier();
        }
       else
        {
        }
      }
    }
   else
    {
     GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_14subgroup_idsubgroup_local_idvirtual_gidworkgroup_base.x = subgroup_id;
     if((false))
      barrier();
    }
  }
 else
  {
  }
 if((false))
  barrier();
 do
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    continue;
   if((false))
    {
     if((false))
      {
       do
        {
         if((bool(bvec4(false, false, true, false))))
          {
          }
         else
          {
           do
            {
             barrier();
            }
           while(false);
          }
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
      }
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(true)
      {
       barrier();
      }
     else
      {
      }
    }
  }
 while(((injectionSwitch.x > injectionSwitch.y)));
 for(int _injected_loop_counter = 1; _injected_loop_counter > (0 << (int(1))); _injected_loop_counter --)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      {
       for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
        {
         for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
          {
           return;
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        {
         if((! (! (true))))
          {
           barrier();
          }
         else
          {
          }
        }
      }
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       barrier();
      }
     if((false))
      continue;
    }
  }
 if(true)
  {
   do
    {
     if((false))
      {
       if(false)
        {
        }
       else
        {
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         barrier();
         if((false))
          {
           if((false))
            break;
           break;
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          break;
         barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
  }
 else
  {
   if((false))
    return;
  }
 if(((bool(bvec2((! (! (false))), true)))))
  {
   if((false))
    barrier();
   do
    {
     barrier();
    }
   while(false);
  }
 if((false))
  {
   do
    {
     return;
    }
   while(false);
  }
 if((false))
  barrier();
 if((false))
  return;
 do
  {
   if((false))
    return;
  }
 while(((injectionSwitch.x > injectionSwitch.y)));
 for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
  {
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     if(false)
      {
      }
     else
      {
       if((false))
        {
         if(((bool(bvec2(false, false)))))
          barrier();
         barrier();
        }
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
         if((false))
          continue;
         if(true)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             do
              {
               if((false))
                continue;
               if((false))
                return;
               barrier();
              }
             while(((injectionSwitch.x > injectionSwitch.y)));
            }
          }
         else
          {
          }
         if((false))
          {
           do
            {
             return;
            }
           while(false);
          }
        }
       else
        {
         if(false)
          {
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if((false))
          {
           if(true)
            {
             barrier();
            }
           else
            {
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       if(true)
        {
         if((false))
          barrier();
        }
       else
        {
        }
      }
     return;
    }
  }
 if((false))
  barrier();
 if(false)
  {
   if((false))
    return;
  }
 else
  {
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    {
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       if((false))
        return;
       if(true)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          barrier();
         if((false))
          return;
         if((((false) && true)))
          {
           do
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           while(false);
           if((false))
            {
             if((false))
              return;
             for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if(true)
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
              }
             if(((injectionSwitch.x < injectionSwitch.y)))
              {
               barrier();
              }
             else
              {
              }
             if((false))
              return;
            }
           barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             do
              {
               barrier();
              }
             while(false);
             if(false)
              {
              }
             else
              {
               if((false))
                barrier();
               if((false))
                return;
              }
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
        }
      }
     if(false)
      {
      }
     else
      {
       if((false))
        barrier();
       if(false)
        {
         if((false))
          return;
        }
       else
        {
         do
          {
           if(false)
            {
            }
           else
            {
             barrier();
             if(((! (! (false)))))
              barrier();
            }
           if((false))
            continue;
          }
         while(false);
        }
      }
     if((false))
      {
       if(false)
        {
        }
       else
        {
         if((false))
          return;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          return;
         do
          {
           return;
          }
         while(((false) && ((injectionSwitch.x < injectionSwitch.y))));
        }
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
         if((false))
          return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
        }
      }
     if((false))
      {
       if((false))
        return;
       return;
      }
    }
   if((false))
    barrier();
  }
 if((false))
  {
   if((false))
    {
     if(false)
      {
      }
     else
      {
       barrier();
       if((false))
        return;
      }
    }
   do
    {
     if((false))
      return;
     barrier();
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
  }
 if((false))
  {
   if((false))
    return;
   barrier();
  }
 if((false))
  return;
 if(((! (! (false)))))
  {
   if((false))
    barrier();
   for(int _injected_loop_counter = 0; _injected_loop_counter != (((1 | 1) << (int(0))) >> (int(0))); _injected_loop_counter ++)
    {
     if((false))
      barrier();
     if(false)
      {
       if((false))
        barrier();
      }
     else
      {
       if((false))
        barrier();
       barrier();
       if((false))
        return;
       if((false))
        return;
       if((false))
        {
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
           do
            {
             if((false))
              barrier();
             barrier();
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
          }
        }
      }
    }
   do
    {
     if((false))
      continue;
     if((false))
      {
       for(int _injected_loop_counter = (0 & 92227); _injected_loop_counter < ((1 << (((int(4)) | (int(4))))) >> (((int(4)) | 0))); _injected_loop_counter ++)
        {
         return;
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      continue;
    }
   while(false);
   if((false))
    return;
   if(true)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        return;
       barrier();
      }
    }
   else
    {
    }
  }
 uint subgroup_size = gl_SubgroupSize;
 GLF_merged4_0_1_13_1_1_8_2_1_13_3_1_14num_workgroupread_valsubgroup_sizeworkgroup_size.z = subgroup_size;
 if((false))
  barrier();
 if((false))
  {
   if((false))
    {
     for(int _injected_loop_counter = 0; _injected_loop_counter != ((1 << (int(3))) >> (int(3))); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   if((false))
    {
     if((false))
      return;
     barrier();
    }
   if((false))
    return;
   if((false))
    {
     if((false))
      return;
     return;
    }
   barrier();
  }
 if(false)
  {
  }
 else
  {
   if((false))
    barrier();
  }
 for(int _injected_loop_counter = 0; _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       return;
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
    }
  }
 if((false))
  return;
 if((false))
  {
   if((false))
    return;
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
    {
     if((false))
      return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(false)
      {
       if(false)
        {
        }
       else
        {
         if((false))
          {
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             do
              {
               return;
              }
             while(false);
            }
          }
        }
       if((false))
        {
         if((false))
          return;
         barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        return;
       if((false))
        {
         if((false))
          return;
         return;
        }
       for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
        {
         if((false))
          barrier();
        }
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
        {
         return;
        }
      }
    }
   if((false))
    {
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       barrier();
      }
    }
   barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       barrier();
      }
     while(false);
     if((false))
      {
       for(int _injected_loop_counter = 1; _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       barrier();
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((bool(bool(true)))) && true))
    {
     if((false))
      return;
     if(true)
      {
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
       if((false))
        barrier();
      }
     else
      {
      }
    }
   else
    {
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    return;
   barrier();
  }
 if((false))
  {
   do
    {
     return;
     if((false))
      barrier();
     if((false))
      break;
     if(((bool(bool(false)))))
      barrier();
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if((false))
      {
       if((false))
        barrier();
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if((false))
      barrier();
     return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(true)
      {
       barrier();
      }
     else
      {
      }
     if((false))
      return;
    }
   barrier();
   if((false))
    barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((false))
  {
   for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != 1; _injected_loop_counter ++)
    {
     barrier();
    }
  }
 if(false)
  {
  }
 else
  {
   if(true)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
    }
  }
 if((false))
  return;
 if((false))
  {
   if((false))
    barrier();
   return;
   if((false))
    {
     if((false))
      return;
     barrier();
    }
   if((false))
    return;
  }
 if(true)
  {
   do
    {
     if(((false || (false))))
      {
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if((false))
          return;
        }
       else
        {
        }
       if((((false) || false)))
        continue;
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if((false))
      return;
    }
   while(false);
  }
 else
  {
  }
 if((false))
  barrier();
 if((false))
  return;
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(true)
      {
       barrier();
      }
     else
      {
      }
    }
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       barrier();
      }
     else
      {
      }
    }
   do
    {
     if((false))
      return;
    }
   while(false);
   if(((! (! (false)))))
    return;
   if((false))
    return;
   for(int _injected_loop_counter = (0 & - 35394); _injected_loop_counter < ((1 << (int(3))) >> ((max(int(3), int(3))))); _injected_loop_counter ++)
    {
     if((false))
      barrier();
     return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if((false))
  {
   if(((! (! (false)))))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    {
     if((false))
      barrier();
     if(false)
      {
      }
     else
      {
       if((false))
        barrier();
       if((false))
        barrier();
      }
     return;
     if((((false) && true)))
      barrier();
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          return;
         for(int _injected_loop_counter = 1; _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
          {
           barrier();
           if((false))
            return;
          }
        }
       barrier();
      }
    }
   do
    {
     if((false))
      barrier();
    }
   while(false);
   if((false))
    return;
   barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if((false))
        return;
       barrier();
      }
     else
      {
      }
    }
  }
 if((false))
  barrier();
 if(true)
  {
   for(int _injected_loop_counter = (1 & 1); _injected_loop_counter != (1 ^ 1); _injected_loop_counter --)
    {
     if(false)
      {
       if((false))
        break;
      }
     else
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            return;
           barrier();
          }
         do
          {
           barrier();
          }
         while(false);
        }
       if((bool(bvec4(false, true, false, true))))
        {
         if((false))
          {
           if((false))
            return;
           if((false))
            barrier();
           barrier();
          }
        }
       else
        {
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                continue;
               return;
              }
            }
          }
         if((false))
          barrier();
        }
      }
     if(true)
      {
       do
        {
         if((false))
          return;
        }
       while(false);
       if((false))
        barrier();
       if((false))
        barrier();
       if((false))
        break;
      }
     else
      {
      }
     GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_14subgroup_idsubgroup_local_idvirtual_gidworkgroup_base.y = subgroup_local_id;
     if((false))
      {
       if((false))
        return;
       barrier();
      }
     if((false))
      break;
     do
      {
       if((false))
        continue;
       if((false))
        {
         if(true)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
          }
         if((false))
          continue;
         barrier();
         do
          {
           if((false))
            return;
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             if((false))
              {
               do
                {
                 barrier();
                }
               while(false);
              }
            }
           else
            {
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(true)
            {
             if((false))
              {
               do
                {
                 barrier();
                }
               while(false);
              }
            }
           else
            {
            }
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
         if((false))
          barrier();
        }
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         do
          {
           barrier();
           if((false))
            continue;
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
          }
         while(false);
         if(((false || (false))))
          {
           if((false))
            break;
           barrier();
          }
        }
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
    }
   if((false))
    return;
  }
 else
  {
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(true)
  {
   for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
    {
     if((false))
      barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    return;
  }
 else
  {
  }
 if((false))
  barrier();
 if((false))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 if(true)
  {
   if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
    return;
   if(true)
    {
     do
      {
       if(false)
        {
        }
       else
        {
         if((false))
          break;
         if((false))
          {
           if(true)
            {
             barrier();
             if((false))
              barrier();
            }
           else
            {
            }
          }
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           if(true)
            {
             if((false))
              break;
             if((((false) || false)))
              barrier();
            }
           else
            {
            }
          }
         else
          {
          }
        }
      }
     while(false);
     if(true)
      {
       if((false))
        {
         do
          {
           return;
          }
         while(false);
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(false)
          {
          }
         else
          {
           if((false))
            barrier();
          }
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           if((false))
            return;
          }
         for(int _injected_loop_counter = 1; _injected_loop_counter > (0 | 0); _injected_loop_counter --)
          {
           return;
          }
        }
       if((false))
        barrier();
       if(true)
        {
         if((false))
          barrier();
        }
       else
        {
        }
       GLF_merged4_0_1_13_1_1_8_2_1_13_3_1_14num_workgroupread_valsubgroup_sizeworkgroup_size.x = num_workgroup;
      }
     else
      {
      }
    }
   else
    {
     if((false))
      {
       if(true)
        {
         barrier();
        }
       else
        {
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 else
  {
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    return;
   if((false))
    barrier();
   barrier();
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 do
  {
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      {
       do
        {
         if((false))
          break;
         barrier();
        }
       while((true && (false)));
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      continue;
     break;
    }
  }
 while(false);
 if((false))
  return;
 GLF_merged4_0_1_13_1_1_8_2_1_13_3_1_14num_workgroupread_valsubgroup_sizeworkgroup_size.w = workgroup_size;
 if((false))
  barrier();
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    barrier();
   return;
  }
 if((false))
  {
   if(false)
    {
    }
   else
    {
     barrier();
    }
  }
 for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
  {
   if(true)
    {
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if((false))
        {
         if((false))
          {
           if((false))
            {
             do
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             while(false);
             barrier();
            }
           return;
          }
         if(false)
          {
          }
         else
          {
           if((false))
            barrier();
           if((false))
            continue;
           barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          barrier();
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           return;
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
            {
             barrier();
             if((false))
              continue;
            }
          }
        }
      }
     else
      {
      }
    }
   else
    {
     if((false))
      {
       if((! ((bool(bvec3(! (false), true, true))))))
        {
        }
       else
        {
         do
          {
           barrier();
           if((false))
            continue;
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
         if((false))
          {
           if((false))
            break;
           barrier();
          }
        }
      }
     if((false))
      return;
    }
  }
 if((false))
  return;
 if((false))
  {
   do
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(false)
        {
         if((false))
          return;
        }
       else
        {
         barrier();
        }
      }
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 if((false))
  return;
 if((false))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 do
  {
   if((false))
    {
     if((false))
      return;
     if((false))
      barrier();
     do
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(((false || (false))))
          return;
         return;
        }
       if(((false || (false))))
        {
         if(true)
          {
           barrier();
          }
         else
          {
          }
        }
       if((false))
        continue;
      }
     while(false);
     barrier();
    }
  }
 while(false);
 if(((injectionSwitch.x > injectionSwitch.y)))
  {
   if((false))
    barrier();
  }
 else
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       barrier();
      }
     while(false);
    }
   if((false))
    {
     do
      {
       if((false))
        break;
       barrier();
      }
     while(false);
     if((false))
      return;
    }
  }
 uint workgroup_base = GLF_merged4_0_1_13_1_1_8_2_1_13_3_1_14num_workgroupread_valsubgroup_sizeworkgroup_size.w * workgroup_id;
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if(((! ((true && (! (false)))))))
    barrier();
   do
    {
     if((false))
      barrier();
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
   if((false))
    {
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       return;
      }
     else
      {
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(((! (! (false)))))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   if(true)
    {
     return;
    }
   else
    {
    }
   if(((bool(bvec3(false, true, false)))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     barrier();
    }
   if((false))
    barrier();
  }
 do
  {
   GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_14subgroup_idsubgroup_local_idvirtual_gidworkgroup_base.w = workgroup_base;
  }
 while(false);
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((false) && true)))
    {
     if(false)
      {
      }
     else
      {
       barrier();
      }
    }
   barrier();
   if((false))
    return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    return;
   if((false))
    {
     if(((bool(bvec3(false, false, true)))))
      return;
     barrier();
    }
   if((false))
    return;
   do
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         return;
        }
       while((false || (false)));
      }
    }
   while(false);
   for(int _injected_loop_counter = 0; _injected_loop_counter < (1 | 1); _injected_loop_counter ++)
    {
     do
      {
       if((false))
        {
         if((false))
          break;
         return;
        }
      }
     while(false);
    }
   barrier();
   if((false))
    {
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 uint virtual_gid = GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_14subgroup_idsubgroup_local_idvirtual_gidworkgroup_base.w + GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_14subgroup_idsubgroup_local_idvirtual_gidworkgroup_base.x * GLF_merged4_0_1_13_1_1_8_2_1_13_3_1_14num_workgroupread_valsubgroup_sizeworkgroup_size.z + GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_14subgroup_idsubgroup_local_idvirtual_gidworkgroup_base.y;
 if((false))
  {
   if(true)
    {
     barrier();
    }
   else
    {
    }
   if((false))
    {
     for(int _injected_loop_counter = (1 ^ 1); _injected_loop_counter != 1; _injected_loop_counter ++)
      {
       return;
      }
    }
  }
 if((false))
  barrier();
 if(false)
  {
  }
 else
  {
   if((false))
    return;
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
    }
   else
    {
     if((false))
      {
       if((false))
        barrier();
       if((false))
        return;
       return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
    }
  }
 GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_14subgroup_idsubgroup_local_idvirtual_gidworkgroup_base.z = virtual_gid;
 if((false))
  barrier();
 for(int _injected_loop_counter = (((false ? (- 4102) : 0)) ^ 1); _injected_loop_counter > 0; _injected_loop_counter --)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      break;
     for(int _injected_loop_counter = (0 ^ 1); _injected_loop_counter > (0 >> (((true ? int(8) : (_injected_loop_counter))))); _injected_loop_counter --)
      {
       if(((true && (false))))
        break;
       if((false))
        return;
       barrier();
      }
    }
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       barrier();
      }
     while(false);
    }
  }
 if(((injectionSwitch.x > injectionSwitch.y)))
  {
  }
 else
  {
   atomicStore(write_val, uint(GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_14subgroup_idsubgroup_local_idvirtual_gidworkgroup_base.z), 4, 64, 0);
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
  }
 uint read_val = atomicLoad(write_val, 4, 64, 0);
 if((false))
  barrier();
 for(int _injected_loop_counter = 1; _injected_loop_counter > (0 >> ((min(int(8), (min(int(8), int(8))))))); _injected_loop_counter --)
  {
   do
    {
     if((false))
      {
       for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
        {
         barrier();
        }
      }
    }
   while(false);
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
    }
   else
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          {
           for(int _injected_loop_counter = 0; _injected_loop_counter != ((1) | (1)); _injected_loop_counter ++)
            {
             barrier();
             if((false))
              return;
            }
          }
         barrier();
        }
       break;
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     do
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if(true)
          {
           if(true)
            {
             do
              {
               for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
                {
                 GLF_merged4_0_1_13_1_1_8_2_1_13_3_1_14num_workgroupread_valsubgroup_sizeworkgroup_size.y = read_val;
                }
              }
             while(false);
            }
           else
            {
            }
          }
         else
          {
           if((false))
            {
             if((false))
              barrier();
             barrier();
            }
          }
        }
       else
        {
         for(int _injected_loop_counter = 0; _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
          {
           if((false))
            barrier();
          }
        }
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
    }
  }
 for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
  {
   for(int _injected_loop_counter = (0 >> ((0 | (int(6))))); _injected_loop_counter != 1; _injected_loop_counter ++)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        return;
       barrier();
      }
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       break;
      }
     if((false))
      {
       if((false))
        {
         if((false))
          continue;
         barrier();
        }
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         for(int _injected_loop_counter = (int((injectionSwitch.x)) & 8898); _injected_loop_counter != 1; _injected_loop_counter ++)
          {
           if((false))
            return;
          }
         if((false))
          barrier();
         if((false))
          return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if(false)
            {
            }
           else
            {
             if(((true && (((injectionSwitch.x > injectionSwitch.y))))))
              barrier();
             if((false))
              {
               if((false))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(((bool(bvec3((! (! (false))), false, false)))))
                {
                 if((false))
                  break;
                 barrier();
                }
               barrier();
              }
            }
           barrier();
          }
         if((false))
          continue;
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
           continue;
          }
         if(false)
          {
          }
         else
          {
           barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             barrier();
            }
           else
            {
            }
          }
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           if((false))
            {
             if((false))
              barrier();
             for(int _injected_loop_counter = 1; _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
              {
               if((false))
                break;
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             break;
            }
           if((false))
            barrier();
           if((false))
            break;
           if((false))
            {
             do
              {
               if(false)
                {
                 if((false))
                  continue;
                }
               else
                {
                 for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != 0; _injected_loop_counter --)
                  {
                   barrier();
                  }
                }
              }
             while(false);
             if((false))
              {
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  break;
                 barrier();
                }
               break;
               if((((false) || false)))
                continue;
              }
             if((false))
              barrier();
             if((false))
              break;
            }
           if((false))
            barrier();
           if(true)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
            }
           break;
          }
         if(((bool(bool(false)))))
          barrier();
        }
       else
        {
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
        }
       if((false))
        {
         if((false))
          continue;
         return;
        }
      }
     if((false))
      barrier();
     if((false))
      {
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         if((false))
          barrier();
        }
       barrier();
      }
    }
  }
 if((false))
  return;
 buf[GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_14subgroup_idsubgroup_local_idvirtual_gidworkgroup_base.z] = uint(subgroupAllEqual(GLF_merged4_0_1_13_1_1_8_2_1_13_3_1_14num_workgroupread_valsubgroup_sizeworkgroup_size.y));
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
