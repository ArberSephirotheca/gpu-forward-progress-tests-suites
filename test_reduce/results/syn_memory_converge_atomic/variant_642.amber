#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

struct _GLF_struct_7 {
 bvec3 _f0;
 uvec2 _f1;
 uvec4 _f2;
 mat2x4 _f3;
 ivec4 _f4;
} ;

struct _GLF_struct_8 {
 ivec3 _f0;
 bvec2 _f1;
 _GLF_struct_7 _f2;
} ;

struct _GLF_struct_5 {
 vec2 _f0;
} ;

struct _GLF_struct_4 {
 int _f0;
 float _f1;
 uvec3 _f2;
} ;

struct _GLF_struct_3 {
 vec3 _f0;
 int _f1;
 vec2 _f2;
} ;

struct _GLF_struct_6 {
 int _f0;
 _GLF_struct_3 _f1;
 mat2x4 _f2;
 _GLF_struct_4 _f3;
 _GLF_struct_5 _f4;
} ;

struct _GLF_struct_1 {
 float _f0;
 int _f1;
 mat4x2 _f2;
} ;

struct _GLF_struct_0 {
 float _f0;
 bvec3 _f1;
 vec3 _f2;
 ivec3 _f3;
 ivec4 _f4;
 vec2 _f5;
 mat3x2 _f6;
} ;

struct _GLF_struct_2 {
 _GLF_struct_0 _f0;
 vec3 _f1;
 uvec3 GLF_merged3_0_1_8_1_1_11_2_1_14read_valsubgroup_idworkgroup_base;
 _GLF_struct_1 _f2;
 uint _f3;
 mat2 _f4;
} ;

struct _GLF_struct_9 {
 uvec2 _f0;
 _GLF_struct_2 _f1;
 _GLF_struct_6 _f2;
 _GLF_struct_8 _f3;
 ivec4 _f4;
} ;

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec4 GLF_merged2_0_3_73_3_1_11GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gidsubgroup_id;
 uvec4 GLF_merged2_0_3_74_3_1_12GLF_merged3_0_1_11_1_1_17_2_1_14subgroup_idsubgroup_local_idworkgroup_sizeworkgroup_id;
 uvec3 GLF_merged3_0_1_11_1_1_11_2_1_14subgroup_idvirtual_gidworkgroup_base;
 if((false))
  return;
 uvec4 GLF_merged2_0_3_72_3_1_13GLF_merged3_0_1_11_1_1_17_2_1_12subgroup_idsubgroup_local_idworkgroup_idsubgroup_size;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 uvec4 GLF_merged2_0_3_66_3_1_11GLF_merged3_0_1_11_1_1_11_2_1_12subgroup_idvirtual_gidworkgroup_idsubgroup_id;
 uvec4 GLF_merged2_0_3_74_3_1_8GLF_merged3_0_1_11_1_1_17_2_1_14subgroup_idsubgroup_local_idworkgroup_sizeread_val;
 uvec4 GLF_merged2_0_3_74_3_1_13GLF_merged3_0_1_11_1_1_17_2_1_14subgroup_idsubgroup_local_idworkgroup_sizenum_workgroup;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if(true)
    {
     return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
    }
   if((false))
    {
     for(int _injected_loop_counter = 1; _injected_loop_counter != (0 << (int(1))); _injected_loop_counter --)
      {
       return;
      }
    }
  }
 uvec4 GLF_merged2_0_3_66_3_1_14GLF_merged3_0_1_11_1_1_11_2_1_12subgroup_idvirtual_gidworkgroup_idworkgroup_size;
 if((false))
  return;
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 uvec4 GLF_merged3_0_2_54_2_1_17_3_1_11GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_idsubgroup_local_idvirtual_gid;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  {
   if((false))
    return;
   return;
  }
 uvec4 GLF_merged3_0_2_53_2_1_8_3_1_12GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_sizeread_valworkgroup_id;
 uvec4 GLF_merged2_0_3_74_3_1_11GLF_merged3_0_1_11_1_1_17_2_1_14subgroup_idsubgroup_local_idworkgroup_sizesubgroup_id;
 if((false))
  return;
 uvec4 GLF_merged2_0_3_72_3_1_13GLF_merged3_0_1_11_1_1_17_2_1_12subgroup_idsubgroup_local_idworkgroup_idnum_workgroup;
 uvec4 GLF_merged3_0_2_53_2_1_17_3_1_12GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_sizesubgroup_local_idworkgroup_id;
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if(true)
    {
     if((false))
      {
       if((false))
        {
         if((false))
          return;
         return;
        }
       return;
      }
     if((false))
      return;
    }
   else
    {
    }
   return;
  }
 uvec3 GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid;
 GLF_merged2_0_3_73_3_1_11GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gidsubgroup_id.xyz = GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gid;
 if((false))
  {
   if(((bool(bool(false)))))
    return;
   return;
  }
 if((false))
  return;
 if((false))
  return;
 if((false))
  return;
 uvec4 GLF_merged2_0_2_54_2_2_46GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_idGLF_merged2_0_1_8_1_1_14read_valworkgroup_size;
 if((false))
  return;
 uvec4 GLF_merged2_0_2_50_2_2_53GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_idGLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size;
 if(((injectionSwitch.x > injectionSwitch.y)))
  {
  }
 else
  {
   if((false))
    return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 uvec2 GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size;
 GLF_merged3_0_2_53_2_1_8_3_1_12GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_sizeread_valworkgroup_id.xy = GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size;
 if(((injectionSwitch.x < injectionSwitch.y)))
  {
   GLF_merged3_0_2_53_2_1_17_3_1_12GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_sizesubgroup_local_idworkgroup_id.xy = GLF_merged3_0_2_53_2_1_8_3_1_12GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_sizeread_valworkgroup_id.xy;
  }
 else
  {
   if(true)
    {
     if((false))
      return;
    }
   else
    {
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 GLF_merged2_0_2_50_2_2_53GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_idGLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size.zw = GLF_merged3_0_2_53_2_1_17_3_1_12GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_sizesubgroup_local_idworkgroup_id.xy;
 if((false))
  return;
 if(((injectionSwitch.x < injectionSwitch.y)))
  {
   do
    {
     if((false))
      return;
    }
   while(false);
  }
 else
  {
  }
 uvec3 GLF_merged3_0_1_11_1_1_17_2_1_12subgroup_idsubgroup_local_idworkgroup_id;
 if(((injectionSwitch.x > injectionSwitch.y)))
  {
  }
 else
  {
   if((false))
    return;
   if((false))
    return;
   GLF_merged2_0_3_72_3_1_13GLF_merged3_0_1_11_1_1_17_2_1_12subgroup_idsubgroup_local_idworkgroup_idsubgroup_size.xyz = GLF_merged3_0_1_11_1_1_17_2_1_12subgroup_idsubgroup_local_idworkgroup_id;
  }
 GLF_merged2_0_3_72_3_1_13GLF_merged3_0_1_11_1_1_17_2_1_12subgroup_idsubgroup_local_idworkgroup_idnum_workgroup.xyz = GLF_merged2_0_3_72_3_1_13GLF_merged3_0_1_11_1_1_17_2_1_12subgroup_idsubgroup_local_idworkgroup_idsubgroup_size.xyz;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if(((((injectionSwitch.x < injectionSwitch.y)) && (false))))
  return;
 uvec4 GLF_merged2_0_3_66_3_1_13GLF_merged3_0_1_11_1_1_11_2_1_12subgroup_idvirtual_gidworkgroup_idnum_workgroup;
 if((false))
  return;
 uvec4 GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_idGLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_id;
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
    }
   return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(((injectionSwitch.x < injectionSwitch.y)))
  {
   if((false))
    {
     if((false))
      return;
     do
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          {
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             if((false))
              return;
             if((false))
              {
               if((false))
                continue;
               break;
               if((((! (! (bool(bvec2(false, true))))))))
                break;
              }
             if(false)
              {
               if((false))
                break;
              }
             else
              {
               return;
               if((false))
                break;
              }
             if((false))
              continue;
            }
          }
         return;
        }
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
     return;
    }
  }
 else
  {
   if((false))
    return;
  }
 if((false))
  return;
 uvec2 GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_id;
 if((false))
  return;
 if((false))
  {
   if(true)
    {
     if(false)
      {
      }
     else
      {
       return;
      }
    }
   else
    {
    }
  }
 if((false))
  return;
 if(true)
  {
   if((false))
    return;
   if((false))
    return;
  }
 else
  {
  }
 for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
  {
   GLF_merged3_0_2_54_2_1_17_3_1_11GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_idsubgroup_local_idvirtual_gid.xy = GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_id;
  }
 GLF_merged2_0_2_54_2_2_46GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_idGLF_merged2_0_1_8_1_1_14read_valworkgroup_size.xy = GLF_merged3_0_2_54_2_1_17_3_1_11GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_idsubgroup_local_idvirtual_gid.xy;
 GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_idGLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_id.zw = GLF_merged2_0_2_54_2_2_46GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_idGLF_merged2_0_1_8_1_1_14read_valworkgroup_size.xy;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 do
  {
   if((false))
    {
     do
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
       return;
      }
     while((false || (((injectionSwitch.x > injectionSwitch.y)))));
    }
  }
 while(false);
 if((false))
  {
   if((false))
    return;
   if((false))
    return;
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
    }
   else
    {
     return;
    }
   if(((true && (false))))
    return;
  }
 for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
  {
   if(((bool(bvec2(false, true)))))
    continue;
   if(true)
    {
     if((false))
      {
       if((false))
        continue;
       return;
      }
    }
   else
    {
    }
   if(true)
    {
     if((false))
      continue;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
    }
   if((false))
    continue;
  }
 uvec3 GLF_merged3_0_1_11_1_1_11_2_1_12subgroup_idvirtual_gidworkgroup_id;
 GLF_merged2_0_3_66_3_1_11GLF_merged3_0_1_11_1_1_11_2_1_12subgroup_idvirtual_gidworkgroup_idsubgroup_id.xyz = GLF_merged3_0_1_11_1_1_11_2_1_12subgroup_idvirtual_gidworkgroup_id;
 if(((false) && true))
  {
  }
 else
  {
   GLF_merged2_0_3_66_3_1_14GLF_merged3_0_1_11_1_1_11_2_1_12subgroup_idvirtual_gidworkgroup_idworkgroup_size.xyz = GLF_merged2_0_3_66_3_1_11GLF_merged3_0_1_11_1_1_11_2_1_12subgroup_idvirtual_gidworkgroup_idsubgroup_id.xyz;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    return;
   return;
  }
 GLF_merged2_0_3_66_3_1_13GLF_merged3_0_1_11_1_1_11_2_1_12subgroup_idvirtual_gidworkgroup_idnum_workgroup.xyz = GLF_merged2_0_3_66_3_1_14GLF_merged3_0_1_11_1_1_11_2_1_12subgroup_idvirtual_gidworkgroup_idworkgroup_size.xyz;
 uvec2 GLF_merged2_0_1_8_1_1_14read_valworkgroup_size;
 for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
  {
   GLF_merged2_0_2_54_2_2_46GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_idGLF_merged2_0_1_8_1_1_14read_valworkgroup_size.zw = GLF_merged2_0_1_8_1_1_14read_valworkgroup_size;
   if((false))
    break;
  }
 uvec4 GLF_merged4_0_1_11_1_1_17_2_1_12_3_1_14subgroup_idsubgroup_local_idworkgroup_idworkgroup_size;
 if((false))
  return;
 if((false))
  return;
 if((false))
  {
   if((false))
    return;
   return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    return;
   do
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      break;
    }
   while(false);
   if(((true && ((bool(bvec2(false, false)))))))
    return;
   return;
  }
 uvec2 GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id;
 GLF_merged2_0_2_50_2_2_53GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_idGLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size.xy = GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id;
 GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_idGLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_id.xy = GLF_merged2_0_2_50_2_2_53GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_idGLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size.xy;
 if((false))
  {
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
    }
   else
    {
     for(int _injected_loop_counter = 1; _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
      {
       for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
         return;
        }
      }
    }
  }
 uvec3 GLF_merged3_0_1_11_1_1_17_2_1_14subgroup_idsubgroup_local_idworkgroup_size;
 GLF_merged2_0_3_74_3_1_12GLF_merged3_0_1_11_1_1_17_2_1_14subgroup_idsubgroup_local_idworkgroup_sizeworkgroup_id.xyz = GLF_merged3_0_1_11_1_1_17_2_1_14subgroup_idsubgroup_local_idworkgroup_size;
 GLF_merged2_0_3_74_3_1_8GLF_merged3_0_1_11_1_1_17_2_1_14subgroup_idsubgroup_local_idworkgroup_sizeread_val.xyz = GLF_merged2_0_3_74_3_1_12GLF_merged3_0_1_11_1_1_17_2_1_14subgroup_idsubgroup_local_idworkgroup_sizeworkgroup_id.xyz;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
    {
     return;
    }
  }
 if((false))
  return;
 GLF_merged2_0_3_74_3_1_13GLF_merged3_0_1_11_1_1_17_2_1_14subgroup_idsubgroup_local_idworkgroup_sizenum_workgroup.xyz = GLF_merged2_0_3_74_3_1_8GLF_merged3_0_1_11_1_1_17_2_1_14subgroup_idsubgroup_local_idworkgroup_sizeread_val.xyz;
 if(((! (! (false)))))
  return;
 GLF_merged2_0_3_74_3_1_11GLF_merged3_0_1_11_1_1_17_2_1_14subgroup_idsubgroup_local_idworkgroup_sizesubgroup_id.xyz = GLF_merged2_0_3_74_3_1_13GLF_merged3_0_1_11_1_1_17_2_1_14subgroup_idsubgroup_local_idworkgroup_sizenum_workgroup.xyz;
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
    {
     do
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
       if((false))
        return;
      }
     while(false);
     if((((injectionSwitch.x > injectionSwitch.y))))
      break;
    }
   for(int _injected_loop_counter = (1 | 1); _injected_loop_counter != (0 << (int(2))); _injected_loop_counter --)
    {
     return;
    }
  }
 if((false))
  {
   if((false))
    return;
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
    }
   else
    {
     return;
    }
  }
 if((false))
  return;
 if(false)
  {
  }
 else
  {
   if((false))
    {
     if((false))
      {
       for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
        {
         return;
        }
      }
     return;
    }
   for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      continue;
     for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
      {
       if((false))
        break;
       if((false))
        continue;
       if((false))
        {
         if((false))
          {
           if((false))
            {
             if((false))
              continue;
             continue;
            }
           break;
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         if((false))
          {
           if((false))
            continue;
           continue;
          }
         continue;
        }
       if((false))
        {
         if(false)
          {
          }
         else
          {
           return;
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
       if((false))
        break;
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         do
          {
           if((false))
            {
             for(int _injected_loop_counter = (0 ^ (1)); _injected_loop_counter != 0; _injected_loop_counter --)
              {
               return;
               if(((bool(bvec4(((injectionSwitch.x > injectionSwitch.y)), false, true, ((injectionSwitch.x < injectionSwitch.y)))))))
                continue;
               if((false))
                break;
               if((false))
                continue;
              }
            }
          }
         while(false);
         if((false))
          break;
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
   if((false))
    return;
  }
 if(((injectionSwitch.x < injectionSwitch.y)))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       if((false))
        return;
       for(int _injected_loop_counter = 0; _injected_loop_counter != (1 | 0); _injected_loop_counter ++)
        {
         if((((false) && true)))
          break;
         return;
        }
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
    }
  }
 else
  {
  }
 _GLF_struct_9 _GLF_struct_replacement_9;
 if((((false) && true)))
  return;
 for(int _injected_loop_counter = 0; _injected_loop_counter != (((1 << (int(4))) >> (((int(4)) | 0))) ^ 0); _injected_loop_counter ++)
  {
   if((false))
    {
     if(true)
      {
       return;
      }
     else
      {
       if((((false) || false)))
        break;
      }
     if((false))
      continue;
    }
  }
 if(false)
  {
  }
 else
  {
   do
    {
     do
      {
       if((false))
        continue;
       if((((false) || false)))
        return;
       if((false))
        return;
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         for(int _injected_loop_counter = 0; _injected_loop_counter < (1 ^ 0); _injected_loop_counter ++)
          {
           if((false))
            break;
           if((false))
            break;
           if((false))
            {
             if((false))
              break;
             continue;
            }
           if(false)
            {
            }
           else
            {
             if((false))
              return;
             do
              {
               if((false))
                continue;
               if((((injectionSwitch.x > injectionSwitch.y))))
                continue;
               if((((injectionSwitch.x > injectionSwitch.y))))
                return;
              }
             while(false);
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           if((false))
            continue;
           if(((! (! (false)))))
            return;
           if((false))
            {
             if((((false) || false)))
              continue;
             return;
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             do
              {
               return;
              }
             while((((! (! (((injectionSwitch.x > injectionSwitch.y)))))) && true));
            }
           else
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
             if((false))
              {
               if((false))
                continue;
               if((((false) && true)))
                continue;
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 if(((injectionSwitch.x < injectionSwitch.y)))
                  {
                   return;
                  }
                 else
                  {
                  }
                }
               if((false))
                continue;
               if((false))
                {
                 if((false))
                  {
                   if((false))
                    return;
                   continue;
                  }
                 return;
                }
               break;
               if((false))
                break;
               if((((injectionSwitch.x > injectionSwitch.y))))
                continue;
               if((false))
                {
                 if((false))
                  break;
                 break;
                }
              }
             if((false))
              continue;
            }
          }
         if((false))
          break;
         return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
           break;
          }
        }
       if(((! (! (false)))))
        break;
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
  }
 for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
  {
   if((false))
    return;
  }
 for(int _injected_loop_counter = 1; _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
  {
   for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
    {
     if((false))
      break;
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         if(false)
          {
          }
         else
          {
           if((false))
            {
             if((false))
              break;
             break;
            }
           if((false))
            continue;
           if((false))
            continue;
           for(int _injected_loop_counter = 0; _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
             if(false)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                break;
              }
             else
              {
               if((false))
                continue;
               do
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    continue;
                   do
                    {
                     if((false))
                      continue;
                     if(((injectionSwitch.x < injectionSwitch.y)))
                      {
                       if((false))
                        {
                         if((false))
                          break;
                         continue;
                        }
                       if((false))
                        break;
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        continue;
                       if(((injectionSwitch.x > injectionSwitch.y)))
                        {
                        }
                       else
                        {
                         return;
                         if((((! (! (bool(bvec4(false, true, true, true))))))))
                          return;
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          return;
                        }
                       if((false))
                        continue;
                       if((false))
                        return;
                      }
                     else
                      {
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        return;
                      }
                    }
                   while(false);
                  }
                }
               while(((injectionSwitch.x > injectionSwitch.y)));
              }
             if(((false || ((! (! (false)))))))
              {
               if((false))
                {
                 if((false))
                  continue;
                 continue;
                }
               continue;
              }
             if(((true && (false))))
              break;
            }
          }
         if((false))
          break;
        }
       if((false))
        break;
       if((false))
        continue;
      }
     else
      {
       if(true)
        {
         if((false))
          break;
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
        }
      }
    }
  }
 if((false))
  return;
 uint subgroup_id = gl_SubgroupID;
 GLF_merged2_0_3_73_3_1_11GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gidsubgroup_id.w = subgroup_id;
 GLF_merged3_0_1_11_1_1_11_2_1_14subgroup_idvirtual_gidworkgroup_base.x = GLF_merged2_0_3_73_3_1_11GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gidsubgroup_id.w;
 if((false))
  {
   if((false))
    return;
   return;
  }
 if((false))
  return;
 GLF_merged2_0_3_66_3_1_11GLF_merged3_0_1_11_1_1_11_2_1_12subgroup_idvirtual_gidworkgroup_idsubgroup_id.w = GLF_merged3_0_1_11_1_1_11_2_1_14subgroup_idvirtual_gidworkgroup_base.x;
 if(((false || (false))))
  return;
 GLF_merged2_0_3_74_3_1_11GLF_merged3_0_1_11_1_1_17_2_1_14subgroup_idsubgroup_local_idworkgroup_sizesubgroup_id.w = GLF_merged2_0_3_66_3_1_11GLF_merged3_0_1_11_1_1_11_2_1_12subgroup_idvirtual_gidworkgroup_idsubgroup_id.w;
 if(((injectionSwitch.x < injectionSwitch.y)))
  {
   if((false))
    {
     do
      {
       return;
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
    }
   GLF_merged2_0_3_72_3_1_13GLF_merged3_0_1_11_1_1_17_2_1_12subgroup_idsubgroup_local_idworkgroup_idnum_workgroup.xyz.x = GLF_merged2_0_3_74_3_1_11GLF_merged3_0_1_11_1_1_17_2_1_14subgroup_idsubgroup_local_idworkgroup_sizesubgroup_id.w;
  }
 else
  {
  }
 GLF_merged2_0_3_66_3_1_13GLF_merged3_0_1_11_1_1_11_2_1_12subgroup_idvirtual_gidworkgroup_idnum_workgroup.xyz.x = GLF_merged2_0_3_72_3_1_13GLF_merged3_0_1_11_1_1_17_2_1_12subgroup_idsubgroup_local_idworkgroup_idnum_workgroup.xyz.x;
 if(true)
  {
   if((false))
    return;
   if((false))
    return;
  }
 else
  {
  }
 if(((true) && true))
  {
   GLF_merged4_0_1_11_1_1_17_2_1_12_3_1_14subgroup_idsubgroup_local_idworkgroup_idworkgroup_size.x = GLF_merged2_0_3_66_3_1_13GLF_merged3_0_1_11_1_1_11_2_1_12subgroup_idvirtual_gidworkgroup_idnum_workgroup.xyz.x;
   if((false))
    return;
  }
 else
  {
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if((false))
  return;
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if((false))
  {
   if((false))
    return;
   return;
  }
 if((((false) && true)))
  return;
 do
  {
   if(false)
    {
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   for(int _injected_loop_counter = (1 | 1); _injected_loop_counter != 0; _injected_loop_counter --)
    {
     do
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          return;
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
           continue;
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
         if((false))
          break;
         if((false))
          break;
         if(true)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             for(int _injected_loop_counter = (1 ^ int((injectionSwitch.y))); _injected_loop_counter < (1 | 1); _injected_loop_counter ++)
              {
               if(true)
                {
                 return;
                }
               else
                {
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((false))
                  break;
                 if(true)
                  {
                   return;
                  }
                 else
                  {
                  }
                }
              }
             if((false))
              break;
             do
              {
               do
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(false)
                    {
                    }
                   else
                    {
                     return;
                    }
                  }
                }
               while(false);
              }
             while(false);
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
            }
           if(false)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
            }
           else
            {
             do
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((false))
                  break;
                 return;
                }
               for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != 1; _injected_loop_counter ++)
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  break;
                 if(true)
                  {
                   if((false))
                    return;
                  }
                 else
                  {
                   if((false))
                    break;
                  }
                }
              }
             while(false);
            }
           for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
            {
             for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
              {
               return;
              }
            }
          }
         else
          {
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            break;
           continue;
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
    }
  }
 while(((injectionSwitch.x > injectionSwitch.y)));
 if(((injectionSwitch.x > injectionSwitch.y)))
  {
  }
 else
  {
   GLF_merged2_0_3_74_3_1_11GLF_merged3_0_1_11_1_1_17_2_1_14subgroup_idsubgroup_local_idworkgroup_sizesubgroup_id.xyz.x = GLF_merged4_0_1_11_1_1_17_2_1_12_3_1_14subgroup_idsubgroup_local_idworkgroup_idworkgroup_size.x;
  }
 for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
  {
   do
    {
     if((false))
      return;
    }
   while(false);
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    {
     if((false))
      return;
     return;
    }
   if(true)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           return;
          }
         return;
        }
       return;
      }
    }
   else
    {
    }
   for(int _injected_loop_counter = 0; _injected_loop_counter != (1 | 1); _injected_loop_counter ++)
    {
     if((false))
      return;
     if((false))
      break;
     if((false))
      {
       do
        {
         return;
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
       if((false))
        break;
      }
     if((false))
      continue;
     do
      {
       return;
      }
     while(false);
     if((false))
      return;
    }
   if((false))
    {
     if((false))
      return;
     return;
    }
  }
 for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
  {
   if((false))
    {
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
       if((false))
        continue;
      }
     else
      {
       return;
       if((false))
        continue;
      }
     if((false))
      break;
     if(((true && ((bool(bool(false)))))))
      {
       if((false))
        return;
       return;
      }
    }
   if((false))
    return;
   if((false))
    return;
  }
 if(((injectionSwitch.x > injectionSwitch.y)))
  {
  }
 else
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
     if((false))
      return;
    }
   else
    {
     if((false))
      return;
     if((false))
      {
       if((false))
        return;
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
  {
   do
    {
     do
      {
       _GLF_struct_replacement_9._f1.GLF_merged3_0_1_8_1_1_11_2_1_14read_valsubgroup_idworkgroup_base.y = GLF_merged2_0_3_74_3_1_11GLF_merged3_0_1_11_1_1_17_2_1_14subgroup_idsubgroup_local_idworkgroup_sizesubgroup_id.xyz.x;
      }
     while(false);
     if((((injectionSwitch.x > injectionSwitch.y))))
      continue;
    }
   while(false);
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if((false))
  {
   if(true)
    {
     if((false))
      return;
     if(false)
      {
       for(int _injected_loop_counter = 1; _injected_loop_counter > (0 | 0); _injected_loop_counter --)
        {
         if((false))
          return;
        }
      }
     else
      {
       return;
       if((false))
        {
         if(true)
          {
           do
            {
             return;
            }
           while(false);
          }
         else
          {
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             return;
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         if((((((injectionSwitch.x > injectionSwitch.y))) && ((injectionSwitch.x < injectionSwitch.y)))))
          {
           if((false))
            return;
           if(false)
            {
            }
           else
            {
             return;
            }
           if((false))
            return;
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
      }
    }
   else
    {
    }
  }
 uint subgroup_size = gl_SubgroupSize;
 if(((false || (false))))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if(((injectionSwitch.x < injectionSwitch.y)))
  {
   GLF_merged2_0_3_72_3_1_13GLF_merged3_0_1_11_1_1_17_2_1_12subgroup_idsubgroup_local_idworkgroup_idsubgroup_size.w = subgroup_size;
  }
 else
  {
  }
 if((false))
  return;
 GLF_merged2_0_3_73_3_1_11GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gidsubgroup_id.xyz.y = GLF_merged2_0_3_72_3_1_13GLF_merged3_0_1_11_1_1_17_2_1_12subgroup_idsubgroup_local_idworkgroup_idsubgroup_size.w;
 if((false))
  return;
 if((false))
  return;
 if(true)
  {
   if((false))
    return;
   if((false))
    {
     if((false))
      return;
     return;
    }
   if((false))
    return;
   for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
    {
     if((false))
      {
       if((false))
        return;
       return;
      }
    }
   if(false)
    {
    }
   else
    {
     do
      {
       if(true)
        {
         if((false))
          {
           if(false)
            {
            }
           else
            {
             return;
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = (int((injectionSwitch.x)) >> (int(6))); _injected_loop_counter < (1 & int((injectionSwitch.y))); _injected_loop_counter ++)
            {
             return;
            }
          }
         if((false))
          return;
        }
       else
        {
         if((false))
          return;
        }
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
    }
  }
 else
  {
   if((false))
    {
     do
      {
       return;
      }
     while(false);
    }
   if((false))
    return;
   if((((false) || false)))
    return;
  }
 for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != (1 ^ 1); _injected_loop_counter --)
  {
   if((false))
    continue;
   if((false))
    {
     if(((! (! (false)))))
      return;
     if((false))
      break;
     if(false)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((false))
        {
         if((false))
          {
           if((false))
            continue;
           break;
          }
         if((false))
          return;
         if((((false) || false)))
          return;
         if(((bool(bvec4(false, true, true, true)))))
          break;
         if((false))
          {
           if((false))
            {
             if((false))
              {
               for(int _injected_loop_counter = 0; _injected_loop_counter != (0 | 1); _injected_loop_counter ++)
                {
                 return;
                }
               if((false))
                return;
              }
             continue;
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
           if((false))
            return;
           do
            {
             return;
            }
           while(false);
          }
         if(false)
          {
          }
         else
          {
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             return;
            }
           if((false))
            return;
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             continue;
            }
           if((false))
            return;
           if(true)
            {
             if((false))
              {
               if((! (! (((injectionSwitch.x > injectionSwitch.y))))))
                {
                }
               else
                {
                 if(((true && (false))))
                  return;
                 do
                  {
                   if(true)
                    {
                     return;
                    }
                   else
                    {
                    }
                   if((false))
                    break;
                  }
                 while(((injectionSwitch.x > injectionSwitch.y)));
                 if((false))
                  break;
                 if((false))
                  break;
                }
               if(((bool(bool(false)))))
                continue;
               if((false))
                break;
               if((false))
                return;
              }
            }
           else
            {
            }
          }
         if((false))
          continue;
         if((false))
          return;
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              {
               if((false))
                break;
               break;
              }
             if((false))
              break;
             return;
             if((false))
              return;
            }
           return;
          }
         if((true && (false)))
          {
           if((false))
            {
             if((false))
              continue;
             for(int _injected_loop_counter = (min(1, 1)); _injected_loop_counter != (0 ^ 0); _injected_loop_counter --)
              {
               return;
              }
            }
           if((false))
            return;
          }
         else
          {
           if(false)
            {
             if((false))
              {
               if(true)
                {
                 return;
                }
               else
                {
                }
              }
             if((false))
              break;
            }
           else
            {
             if((false))
              break;
             if(((! ((! (! (! (false))))))))
              {
               do
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  return;
                }
               while(false);
               return;
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
             return;
             if((false))
              break;
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                continue;
               do
                {
                 return;
                }
               while(false);
              }
            }
          }
         do
          {
           if((false))
            continue;
           if((false))
            {
             if(((injectionSwitch.x < injectionSwitch.y)))
              {
               return;
               if((((injectionSwitch.x > injectionSwitch.y))))
                break;
              }
             else
              {
              }
            }
          }
         while(false);
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            continue;
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
           do
            {
             do
              {
               return;
              }
             while((! ((bool(bvec3(! (false), false, true))))));
            }
           while(false);
           if((false))
            break;
          }
        }
       if(((! ((! (! (! (false))))))))
        return;
       if(((bool(bvec2(false, true)))))
        break;
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
       if((((false) || ((injectionSwitch.x > injectionSwitch.y)))))
        return;
       if((false))
        {
         do
          {
           return;
           if((false))
            break;
          }
         while(false);
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          continue;
         if((false))
          return;
         if((false))
          return;
         return;
        }
       if(((! (! (false)))))
        return;
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
         return;
        }
       return;
       if((false))
        {
         do
          {
           if((false))
            {
             if((false))
              continue;
             for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
              {
               if((false))
                break;
               return;
              }
            }
           if((false))
            {
             for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
              {
               return;
               if((false))
                break;
              }
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
           if((false))
            return;
           if((false))
            {
             if((false))
              break;
             break;
            }
           if((false))
            return;
           for(int _injected_loop_counter = 0; _injected_loop_counter < (max(1, 1)); _injected_loop_counter ++)
            {
             return;
             if((false))
              {
               if(true)
                {
                 if((! (! (false))))
                  {
                  }
                 else
                  {
                   return;
                  }
                }
               else
                {
                }
              }
            }
          }
         while(false);
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         if((false))
          {
           if(true)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
             if((false))
              {
               if((false))
                break;
               return;
              }
             for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
              {
               for(int _injected_loop_counter = 1; _injected_loop_counter > (0 << (int(3))); _injected_loop_counter --)
                {
                 return;
                }
              }
             if((false))
              {
               if((false))
                return;
               return;
              }
            }
           else
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         if((((false) || false)))
          break;
        }
      }
    }
   if((false))
    break;
  }
 GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_idGLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_id.xy.x = GLF_merged2_0_3_73_3_1_11GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gidsubgroup_id.xyz.y;
 do
  {
   if((false))
    return;
  }
 while(((injectionSwitch.x > injectionSwitch.y)));
 if((false))
  return;
 if((false))
  return;
 if(false)
  {
  }
 else
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      {
       if(true)
        {
         return;
        }
       else
        {
        }
      }
     return;
    }
   if(true)
    {
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
        {
         if((false))
          return;
         if(((bool(bvec2(false, true)))))
          continue;
         if(true)
          {
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
             for(int _injected_loop_counter = (int((injectionSwitch.x)) >> (int(7))); _injected_loop_counter < 1; _injected_loop_counter ++)
              {
               return;
              }
             if((false))
              {
               if(((true) && true))
                {
                 if((false))
                  return;
                 for(int _injected_loop_counter = ((int((injectionSwitch.x)) << (int(3))) >> ((~ (~ (int(7)))))); _injected_loop_counter != 1; _injected_loop_counter ++)
                  {
                   if(false)
                    {
                    }
                   else
                    {
                     return;
                    }
                  }
                 if(false)
                  {
                  }
                 else
                  {
                   if((false))
                    return;
                   if((false))
                    break;
                  }
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  continue;
                }
               else
                {
                }
               if((false))
                {
                 if((false))
                  continue;
                 if((false))
                  break;
                 return;
                }
               if((false))
                break;
              }
             do
              {
               if((false))
                return;
               do
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  return;
                }
               while(false);
              }
             while(false);
            }
          }
         else
          {
          }
        }
      }
    }
   else
    {
    }
   if(true)
    {
     if((false))
      return;
    }
   else
    {
    }
   if((false))
    return;
   if(false)
    {
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(true)
  {
   GLF_merged3_0_2_54_2_1_17_3_1_11GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_idsubgroup_local_idvirtual_gid.z = subgroup_local_id;
  }
 else
  {
   if((false))
    return;
  }
 do
  {
   if(false)
    {
     if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
      break;
    }
   else
    {
     if((false))
      return;
    }
   if((false))
    break;
   GLF_merged3_0_2_53_2_1_17_3_1_12GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_sizesubgroup_local_idworkgroup_id.z = GLF_merged3_0_2_54_2_1_17_3_1_11GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_idsubgroup_local_idvirtual_gid.z;
   if((false))
    return;
   if((false))
    return;
  }
 while(((injectionSwitch.x > injectionSwitch.y)));
 if(false)
  {
  }
 else
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       return;
      }
     if((false))
      return;
    }
  }
 if((false))
  return;
 if((false))
  return;
 GLF_merged2_0_3_73_3_1_11GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gidsubgroup_id.xyz.x = GLF_merged3_0_2_53_2_1_17_3_1_12GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_sizesubgroup_local_idworkgroup_id.z;
 if(false)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if(true)
    {
     if(true)
      {
       GLF_merged2_0_3_72_3_1_13GLF_merged3_0_1_11_1_1_17_2_1_12subgroup_idsubgroup_local_idworkgroup_idnum_workgroup.xyz.y = GLF_merged2_0_3_73_3_1_11GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gidsubgroup_id.xyz.x;
      }
     else
      {
      }
    }
   else
    {
    }
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    {
     if(false)
      {
      }
     else
      {
       if(true)
        {
         if((false))
          return;
         if((false))
          return;
         return;
         if((false))
          return;
        }
       else
        {
         if(((true && (false))))
          return;
        }
       if((false))
        return;
      }
    }
   if(false)
    {
    }
   else
    {
     if(false)
      {
      }
     else
      {
       return;
      }
    }
  }
 if(((bool(bvec3(false, false, true)))))
  return;
 do
  {
   if((false))
    return;
  }
 while(false);
 if((false))
  return;
 for(int _injected_loop_counter = ((int((injectionSwitch.y)) << (int(1))) >> (int(1))); _injected_loop_counter > (int((injectionSwitch.x)) << (int(4))); _injected_loop_counter --)
  {
   GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_idGLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_id.zw.x = GLF_merged2_0_3_72_3_1_13GLF_merged3_0_1_11_1_1_17_2_1_12subgroup_idsubgroup_local_idworkgroup_idnum_workgroup.xyz.y;
  }
 for(int _injected_loop_counter = (max(0, 0)); _injected_loop_counter != ((1 << (int(6))) >> ((max(int(6), int(6))))); _injected_loop_counter ++)
  {
   for(int _injected_loop_counter = (0 << (int(6))); _injected_loop_counter < 1; _injected_loop_counter ++)
    {
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
      }
     else
      {
       for(int _injected_loop_counter = ((1 << ((max(int(1), int(1))))) >> (((int(1)) >> 0))); _injected_loop_counter > (0 ^ 0); _injected_loop_counter --)
        {
         for(int _injected_loop_counter = 1; _injected_loop_counter > (0 << (int(1))); _injected_loop_counter --)
          {
           GLF_merged4_0_1_11_1_1_17_2_1_12_3_1_14subgroup_idsubgroup_local_idworkgroup_idworkgroup_size.y = GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_idGLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_id.zw.x;
          }
        }
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != 0; _injected_loop_counter --)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    break;
   for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
    {
     if((false))
      {
       if(((false || (false))))
        break;
       return;
      }
    }
  }
 if(false)
  {
  }
 else
  {
   for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != ((0 >> (int(4))) | 1); _injected_loop_counter ++)
    {
     for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
      {
       if((false))
        continue;
       if((false))
        {
         do
          {
           if(false)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
            }
           else
            {
             return;
            }
          }
         while(false);
        }
      }
    }
  }
 if(((injectionSwitch.x < injectionSwitch.y)))
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
      {
       do
        {
         if((false))
          break;
         return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            break;
           return;
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
        }
       while(false);
      }
     if((false))
      return;
    }
   if((false))
    return;
  }
 else
  {
   if((false))
    return;
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     return;
    }
   if((false))
    {
     if((false))
      return;
     return;
    }
   for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      break;
     if((false))
      {
       for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
        {
         if(true)
          {
           return;
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              break;
             return;
            }
          }
        }
      }
     if((false))
      break;
     if((false))
      continue;
    }
   if((false))
    return;
   return;
  }
 for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
  {
   GLF_merged2_0_3_74_3_1_11GLF_merged3_0_1_11_1_1_17_2_1_14subgroup_idsubgroup_local_idworkgroup_sizesubgroup_id.xyz.y = GLF_merged4_0_1_11_1_1_17_2_1_12_3_1_14subgroup_idsubgroup_local_idworkgroup_idworkgroup_size.y;
  }
 if((false))
  {
   do
    {
     for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < 1; _injected_loop_counter ++)
      {
       return;
      }
    }
   while(false);
  }
 if(((! (! (false)))))
  {
   if(((! (((! (false)) && true)))))
    {
     for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
      {
       if((false))
        break;
       return;
      }
     if((false))
      {
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         return;
        }
       else
        {
        }
       if((false))
        return;
      }
     if((false))
      return;
     do
      {
       if((false))
        return;
      }
     while(false);
    }
   if((false))
    return;
   do
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        return;
       if(((true && (false))))
        continue;
       do
        {
         return;
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
      }
    }
   while(false);
   return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    return;
  }
 if((false))
  return;
 if((false))
  {
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     if((false))
      return;
     if((false))
      return;
     do
      {
       return;
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
    }
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
    }
   else
    {
     return;
    }
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if((false))
  return;
 if(((injectionSwitch.x < injectionSwitch.y)))
  {
   GLF_merged2_0_3_74_3_1_13GLF_merged3_0_1_11_1_1_17_2_1_14subgroup_idsubgroup_local_idworkgroup_sizenum_workgroup.w = num_workgroup;
  }
 else
  {
  }
 GLF_merged2_0_3_72_3_1_13GLF_merged3_0_1_11_1_1_17_2_1_12subgroup_idsubgroup_local_idworkgroup_idnum_workgroup.w = GLF_merged2_0_3_74_3_1_13GLF_merged3_0_1_11_1_1_17_2_1_14subgroup_idsubgroup_local_idworkgroup_sizenum_workgroup.w;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if(((true && (false))))
  return;
 if(true)
  {
   GLF_merged2_0_3_66_3_1_13GLF_merged3_0_1_11_1_1_11_2_1_12subgroup_idvirtual_gidworkgroup_idnum_workgroup.w = GLF_merged2_0_3_72_3_1_13GLF_merged3_0_1_11_1_1_17_2_1_12subgroup_idsubgroup_local_idworkgroup_idnum_workgroup.w;
  }
 else
  {
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 do
  {
   if(false)
    {
    }
   else
    {
     GLF_merged2_0_3_66_3_1_14GLF_merged3_0_1_11_1_1_11_2_1_12subgroup_idvirtual_gidworkgroup_idworkgroup_size.w = workgroup_size;
    }
  }
 while(false);
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  {
   if(false)
    {
    }
   else
    {
     return;
    }
  }
 for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
  {
   GLF_merged2_0_2_50_2_2_53GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_idGLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size.zw.y = GLF_merged2_0_3_66_3_1_14GLF_merged3_0_1_11_1_1_11_2_1_12subgroup_idvirtual_gidworkgroup_idworkgroup_size.w;
  }
 if((false))
  return;
 GLF_merged2_0_2_54_2_2_46GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_idGLF_merged2_0_1_8_1_1_14read_valworkgroup_size.zw.y = GLF_merged2_0_2_50_2_2_53GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_idGLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size.zw.y;
 GLF_merged4_0_1_11_1_1_17_2_1_12_3_1_14subgroup_idsubgroup_local_idworkgroup_idworkgroup_size.w = GLF_merged2_0_2_54_2_2_46GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_idGLF_merged2_0_1_8_1_1_14read_valworkgroup_size.zw.y;
 if((false))
  return;
 do
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     if((false))
      break;
     if((false))
      {
       if((false))
        break;
       continue;
      }
     if(((true && (false))))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(true)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
       return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
      }
     if(false)
      {
      }
     else
      {
       if((false))
        return;
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    continue;
  }
 while(false);
 GLF_merged2_0_3_74_3_1_11GLF_merged3_0_1_11_1_1_17_2_1_14subgroup_idsubgroup_local_idworkgroup_sizesubgroup_id.xyz.z = GLF_merged4_0_1_11_1_1_17_2_1_12_3_1_14subgroup_idsubgroup_local_idworkgroup_idworkgroup_size.w;
 if((false))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 GLF_merged2_0_3_74_3_1_12GLF_merged3_0_1_11_1_1_17_2_1_14subgroup_idsubgroup_local_idworkgroup_sizeworkgroup_id.w = workgroup_id;
 GLF_merged3_0_2_53_2_1_8_3_1_12GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_sizeread_valworkgroup_id.w = GLF_merged2_0_3_74_3_1_12GLF_merged3_0_1_11_1_1_17_2_1_14subgroup_idsubgroup_local_idworkgroup_sizeworkgroup_id.w;
 if((false))
  {
   for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != ((1 << (int(4))) >> (int(4))); _injected_loop_counter ++)
    {
     return;
     if((false))
      break;
    }
  }
 if(false)
  {
  }
 else
  {
   GLF_merged3_0_2_53_2_1_17_3_1_12GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_sizesubgroup_local_idworkgroup_id.w = GLF_merged3_0_2_53_2_1_8_3_1_12GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_sizeread_valworkgroup_id.w;
   if((false))
    return;
  }
 do
  {
   for(int _injected_loop_counter = 1; _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
    {
     if((false))
      return;
    }
   if((false))
    break;
  }
 while(false);
 for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != 1; _injected_loop_counter ++)
  {
   do
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      break;
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        {
         if((false))
          {
           if(((! (! ((true && (((injectionSwitch.x > injectionSwitch.y)))))))))
            return;
           return;
          }
         return;
        }
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         for(int _injected_loop_counter = (0 ^ 0); _injected_loop_counter < 1; _injected_loop_counter ++)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
           if((false))
            continue;
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         do
          {
           return;
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
        }
       else
        {
         for(int _injected_loop_counter = 1; _injected_loop_counter > (1 ^ 1); _injected_loop_counter --)
          {
           if((false))
            continue;
           do
            {
             if((((false) && true)))
              {
               if((false))
                return;
               return;
              }
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
          }
        }
      }
    }
   while(false);
  }
 GLF_merged2_0_3_72_3_1_13GLF_merged3_0_1_11_1_1_17_2_1_12subgroup_idsubgroup_local_idworkgroup_idnum_workgroup.xyz.z = GLF_merged3_0_2_53_2_1_17_3_1_12GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_sizesubgroup_local_idworkgroup_id.w;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    return;
   return;
  }
 do
  {
   do
    {
     if((false))
      break;
     GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_idGLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_id.zw.y = GLF_merged2_0_3_72_3_1_13GLF_merged3_0_1_11_1_1_17_2_1_12subgroup_idsubgroup_local_idworkgroup_idnum_workgroup.xyz.z;
    }
   while(false);
  }
 while(((injectionSwitch.x > injectionSwitch.y)));
 if(((injectionSwitch.x > injectionSwitch.y)))
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
  }
 else
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    return;
   if(true)
    {
     if((false))
      return;
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 for(int _injected_loop_counter = 1; _injected_loop_counter != (0 | 0); _injected_loop_counter --)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    continue;
   for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > (0 >> (int(5))); _injected_loop_counter --)
    {
     if((false))
      return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    break;
  }
 if(((false || (false))))
  return;
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
     for(int _injected_loop_counter = (max(((0) / 1), 0)); _injected_loop_counter != ((1 << (int(6))) >> (int(6))); _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = 1; _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
        {
         return;
        }
       if((false))
        {
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
           break;
          }
         for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
          {
           do
            {
             return;
            }
           while(false);
          }
        }
       if(false)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if((false))
          continue;
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
     if((false))
      return;
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      {
       if(true)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if((false))
          return;
         if((false))
          {
           if(false)
            {
            }
           else
            {
             if(true)
              {
               for(int _injected_loop_counter = (((0 | 1) << (int(0))) >> (int(0))); _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  return;
                }
               return;
               if((false))
                return;
              }
             else
              {
               if((false))
                return;
              }
            }
          }
        }
       else
        {
        }
       return;
      }
    }
  }
 for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
  {
   if((false))
    return;
   do
    {
     if(false)
      {
      }
     else
      {
       GLF_merged2_0_3_66_3_1_13GLF_merged3_0_1_11_1_1_11_2_1_12subgroup_idvirtual_gidworkgroup_idnum_workgroup.xyz.z = GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_idGLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_id.zw.y;
      }
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
  }
 if(((true && (((injectionSwitch.x > injectionSwitch.y))))))
  return;
 do
  {
   do
    {
     if((false))
      break;
     GLF_merged4_0_1_11_1_1_17_2_1_12_3_1_14subgroup_idsubgroup_local_idworkgroup_idworkgroup_size.z = GLF_merged2_0_3_66_3_1_13GLF_merged3_0_1_11_1_1_11_2_1_12subgroup_idvirtual_gidworkgroup_idnum_workgroup.xyz.z;
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
  }
 while(false);
 if((false))
  {
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     return;
     if((false))
      return;
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 if(true)
  {
   if((false))
    return;
   do
    {
     if((false))
      return;
    }
   while(false);
   GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_idGLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_id.xy.y = GLF_merged4_0_1_11_1_1_17_2_1_12_3_1_14subgroup_idsubgroup_local_idworkgroup_idworkgroup_size.z;
   if(true)
    {
     if(true)
      {
       do
        {
         if(true)
          {
           if(true)
            {
             if((false))
              {
               do
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  return;
                 for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                  {
                   return;
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    return;
                  }
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  break;
                }
               while(false);
              }
            }
           else
            {
            }
           if((false))
            return;
           if((false))
            return;
           if((false))
            continue;
          }
         else
          {
           if((false))
            return;
          }
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
      }
     else
      {
       if((false))
        return;
      }
     if((false))
      {
       do
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         return;
        }
       while((! (! (false))));
      }
    }
   else
    {
    }
   if(false)
    {
    }
   else
    {
     for(int _injected_loop_counter = (0 << (int(8))); _injected_loop_counter < ((int((injectionSwitch.y)) << (((int(6)) - 0))) >> (int(6))); _injected_loop_counter ++)
      {
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
   if((false))
    return;
  }
 else
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 uint workgroup_base = GLF_merged2_0_3_74_3_1_11GLF_merged3_0_1_11_1_1_17_2_1_14subgroup_idsubgroup_local_idworkgroup_sizesubgroup_id.xyz.z * GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_idGLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_id.xy.y;
 GLF_merged3_0_1_11_1_1_11_2_1_14subgroup_idvirtual_gidworkgroup_base.z = workgroup_base;
 if(true)
  {
   if((false))
    return;
   if((false))
    {
     for(int _injected_loop_counter = 0; _injected_loop_counter < (1 & 1); _injected_loop_counter ++)
      {
       if((false))
        return;
      }
     return;
    }
   if(false)
    {
    }
   else
    {
     GLF_merged2_0_2_50_2_2_53GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_idGLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size.zw.x = GLF_merged3_0_1_11_1_1_11_2_1_14subgroup_idvirtual_gidworkgroup_base.z;
    }
  }
 else
  {
  }
 if(((injectionSwitch.x > injectionSwitch.y)))
  {
   if((false))
    return;
  }
 else
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   for(int _injected_loop_counter = 1; _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
    {
     if(true)
      {
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         do
          {
           do
            {
             if((false))
              {
               if(false)
                {
                }
               else
                {
                 do
                  {
                   return;
                   if((false))
                    break;
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    return;
                  }
                 while(false);
                }
               if(((true && ((! (! (false)))))))
                return;
              }
            }
           while(false);
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
        }
       else
        {
        }
       if((false))
        return;
       if(true)
        {
         if((false))
          return;
        }
       else
        {
         if((false))
          break;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
         if(false)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         else
          {
           for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                return;
               return;
              }
            }
          }
        }
       else
        {
         if((false))
          return;
        }
       if((false))
        continue;
       _GLF_struct_replacement_9._f1.GLF_merged3_0_1_8_1_1_11_2_1_14read_valsubgroup_idworkgroup_base.z = GLF_merged2_0_2_50_2_2_53GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_idGLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size.zw.x;
       if((false))
        return;
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             return;
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
          }
         return;
        }
       if(((false || (false))))
        {
         if((false))
          return;
         if((((false) || false)))
          return;
         if((false))
          return;
         return;
        }
       if(true)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             for(int _injected_loop_counter = 0; _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  break;
                 return;
                }
              }
            }
           while(false);
           if(((((bool(bool((! (! ((! (! (false))))))))) && true))))
            return;
           if((false))
            return;
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           if(true)
            {
             return;
             if((false))
              break;
             if((false))
              return;
            }
           else
            {
            }
           if((false))
            return;
          }
        }
       else
        {
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         if(true)
          {
           if((false))
            {
             if((false))
              {
               do
                {
                 return;
                }
               while(false);
              }
             return;
            }
           if(true)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
             if((false))
              {
               if(false)
                {
                }
               else
                {
                 if((false))
                  return;
                 return;
                 if((false))
                  continue;
                }
               if((false))
                break;
              }
            }
           else
            {
             if((false))
              continue;
            }
          }
         else
          {
           if((false))
            continue;
          }
        }
       if((false))
        {
         if((false))
          break;
         return;
        }
       if((false))
        break;
      }
     else
      {
       if(false)
        {
        }
       else
        {
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           if(false)
            {
            }
           else
            {
             if(false)
              {
              }
             else
              {
               do
                {
                 return;
                 if((false))
                  continue;
                }
               while(((injectionSwitch.x > injectionSwitch.y)));
               if((false))
                continue;
              }
            }
          }
        }
       if((false))
        continue;
       if(((bool(bvec3(false, true, true)))))
        {
         for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != 1; _injected_loop_counter ++)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
           return;
          }
        }
       for(int _injected_loop_counter = 1; _injected_loop_counter != (0 << (int(2))); _injected_loop_counter --)
        {
         for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              return;
             continue;
            }
           if((false))
            return;
           if((false))
            continue;
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           if((false))
            {
             if(false)
              {
              }
             else
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                return;
              }
             if(((false || (false))))
              {
               for(int _injected_loop_counter = 0; _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
                {
                 do
                  {
                   if(((bool(bvec2(false, true)))))
                    continue;
                   return;
                  }
                 while(false);
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  break;
                 if(((! ((bool(bool(! (false))))))))
                  break;
                }
              }
             for(int _injected_loop_counter = ((int((injectionSwitch.x))) | (int((injectionSwitch.x)))); _injected_loop_counter < (0 ^ 1); _injected_loop_counter ++)
              {
               if((false))
                continue;
               if(true)
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 if((false))
                  return;
                 return;
                 if((false))
                  break;
                }
               else
                {
                }
              }
             if((false))
              continue;
            }
          }
        }
       if((false))
        continue;
      }
    }
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
    }
   else
    {
     if((false))
      return;
    }
   if(((((injectionSwitch.x < injectionSwitch.y)) && (false))))
    return;
   if(((true && (false))))
    return;
  }
 uint virtual_gid = _GLF_struct_replacement_9._f1.GLF_merged3_0_1_8_1_1_11_2_1_14read_valsubgroup_idworkgroup_base.z + _GLF_struct_replacement_9._f1.GLF_merged3_0_1_8_1_1_11_2_1_14read_valsubgroup_idworkgroup_base.y * GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_idGLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_id.xy.x + GLF_merged2_0_3_74_3_1_11GLF_merged3_0_1_11_1_1_17_2_1_14subgroup_idsubgroup_local_idworkgroup_sizesubgroup_id.xyz.y;
 if(true)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
  }
 GLF_merged3_0_1_11_1_1_11_2_1_14subgroup_idvirtual_gidworkgroup_base.y = virtual_gid;
 GLF_merged3_0_2_54_2_1_17_3_1_11GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_idsubgroup_local_idvirtual_gid.w = GLF_merged3_0_1_11_1_1_11_2_1_14subgroup_idvirtual_gidworkgroup_base.y;
 GLF_merged2_0_3_73_3_1_11GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gidsubgroup_id.xyz.z = GLF_merged3_0_2_54_2_1_17_3_1_11GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_idsubgroup_local_idvirtual_gid.w;
 if((false))
  return;
 if((false))
  {
   for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
    {
     return;
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    return;
   for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
    {
     if((false))
      break;
     if(true)
      {
       return;
      }
     else
      {
      }
    }
  }
 GLF_merged2_0_3_66_3_1_13GLF_merged3_0_1_11_1_1_11_2_1_12subgroup_idvirtual_gidworkgroup_idnum_workgroup.xyz.y = GLF_merged2_0_3_73_3_1_11GLF_merged3_0_1_17_1_1_13_2_1_11subgroup_local_idsubgroup_sizevirtual_gidsubgroup_id.xyz.z;
 if((false))
  return;
 do
  {
   if((false))
    break;
   if(false)
    {
     if(true)
      {
       if((false))
        return;
      }
     else
      {
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      continue;
    }
   else
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if(((true && (false))))
        continue;
       if((false))
        return;
       for(int _injected_loop_counter = ((1 << (int(4))) >> ((~ (~ (int(4)))))); _injected_loop_counter > 0; _injected_loop_counter --)
        {
         do
          {
           if(((bool(bool(false)))))
            break;
           if(false)
            {
            }
           else
            {
             return;
            }
          }
         while(false);
        }
      }
     atomicStore(write_val, uint(GLF_merged2_0_3_66_3_1_13GLF_merged3_0_1_11_1_1_11_2_1_12subgroup_idvirtual_gidworkgroup_idnum_workgroup.xyz.y), 4, 64, 0);
     for(int _injected_loop_counter = 0; _injected_loop_counter != (1 ^ 0); _injected_loop_counter ++)
      {
       if((false))
        continue;
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
       continue;
      }
    }
  }
 while(false);
 if((false))
  return;
 uint read_val = atomicLoad(write_val, 4, 64, 0);
 GLF_merged2_0_3_74_3_1_8GLF_merged3_0_1_11_1_1_17_2_1_14subgroup_idsubgroup_local_idworkgroup_sizeread_val.w = read_val;
 GLF_merged3_0_2_53_2_1_8_3_1_12GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_sizeread_valworkgroup_id.z = GLF_merged2_0_3_74_3_1_8GLF_merged3_0_1_11_1_1_17_2_1_14subgroup_idsubgroup_local_idworkgroup_sizeread_val.w;
 GLF_merged2_0_2_54_2_2_46GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_idGLF_merged2_0_1_8_1_1_14read_valworkgroup_size.zw.x = GLF_merged3_0_2_53_2_1_8_3_1_12GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_sizeread_valworkgroup_id.z;
 if((false))
  {
   if((false))
    return;
   return;
  }
 if(((injectionSwitch.x < injectionSwitch.y)))
  {
   if((false))
    return;
   if(true)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        {
         if(((! (! (false)))))
          return;
         return;
         if((false))
          return;
        }
       do
        {
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
           return;
          }
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
        {
         if((false))
          {
           for(int _injected_loop_counter = 0; _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
            {
             if((false))
              continue;
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
              {
               if(false)
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  return;
                }
               else
                {
                 for(int _injected_loop_counter = 0; _injected_loop_counter < (int((injectionSwitch.y)) & ((1 << (((false ? (68983) : int(0))))) >> (int(0)))); _injected_loop_counter ++)
                  {
                   return;
                   if((false))
                    break;
                  }
                }
              }
             if((false))
              break;
            }
          }
        }
       return;
       if((false))
        return;
      }
    }
   else
    {
     if((false))
      return;
     if((false))
      return;
    }
   if((false))
    return;
  }
 else
  {
  }
 if(((! (! (false)))))
  return;
 if((false))
  return;
 if((false))
  {
   if(((! (! ((bool(bvec3(false, true, true))))))))
    {
     if(false)
      {
      }
     else
      {
       if(true)
        {
         if((false))
          {
           if((false))
            return;
           return;
          }
         if((false))
          return;
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
        }
      }
     if((false))
      {
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         return;
        }
       else
        {
        }
      }
     do
      {
       return;
      }
     while(false);
    }
   return;
   do
    {
     if((false))
      {
       do
        {
         return;
        }
       while(false);
      }
    }
   while(false);
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    return;
   return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if((false))
  {
   if((false))
    {
     do
      {
       if((! (! (false))))
        {
        }
       else
        {
         return;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     while(false);
    }
   for(int _injected_loop_counter = (0 << (int(7))); _injected_loop_counter < 1; _injected_loop_counter ++)
    {
     if((false))
      return;
     if(true)
      {
       if((false))
        return;
      }
     else
      {
      }
    }
   if((false))
    return;
   if(false)
    {
    }
   else
    {
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
       if((false))
        {
         for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
          {
           return;
          }
        }
       if(false)
        {
        }
       else
        {
         if((false))
          return;
        }
      }
     if((false))
      return;
     if(false)
      {
      }
     else
      {
       for(int _injected_loop_counter = ((0 | 0) | 0); _injected_loop_counter != ((int((injectionSwitch.y)) << (int(2))) >> (((int(2)) ^ 0))); _injected_loop_counter ++)
        {
         return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            continue;
           continue;
          }
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 if(true)
  {
   if(true)
    {
     if(true)
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
       if((false))
        return;
       if((false))
        {
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           return;
          }
         else
          {
          }
        }
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
      {
       if(false)
        {
        }
       else
        {
         for(int _injected_loop_counter = 1; _injected_loop_counter != (0 & int(true)); _injected_loop_counter --)
          {
           do
            {
             if((false))
              return;
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
          }
        }
      }
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if((! (! (true))))
        {
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           _GLF_struct_replacement_9._f1.GLF_merged3_0_1_8_1_1_11_2_1_14read_valsubgroup_idworkgroup_base.x = GLF_merged2_0_2_54_2_2_46GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_idGLF_merged2_0_1_8_1_1_14read_valworkgroup_size.zw.x;
          }
         if(false)
          {
          }
         else
          {
           if(false)
            {
            }
           else
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                {
                 if((false))
                  return;
                 return;
                }
               for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
                {
                 return;
                }
              }
             if((false))
              return;
            }
          }
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
        }
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if((false))
        {
         if(false)
          {
           if((false))
            return;
          }
         else
          {
           return;
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       do
        {
         if((false))
          break;
         if((false))
          return;
        }
       while(false);
      }
     else
      {
       for(int _injected_loop_counter = (0 << (int(5))); _injected_loop_counter < 1; _injected_loop_counter ++)
        {
         if((false))
          return;
        }
      }
    }
   else
    {
    }
  }
 else
  {
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    {
     do
      {
       if((false))
        {
         if((false))
          break;
         return;
        }
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
     return;
    }
   return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  return;
 if(false)
  {
  }
 else
  {
   do
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      break;
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(false)
        {
         if(true)
          {
           if((false))
            break;
           if((false))
            {
             if(false)
              {
              }
             else
              {
               do
                {
                 return;
                }
               while((bool(bvec4(false, true, false, false))));
              }
            }
          }
         else
          {
          }
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             if((false))
              return;
            }
           else
            {
            }
           return;
          }
         if((false))
          return;
        }
       else
        {
         return;
        }
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
   if(((bool(((bool(((injectionSwitch.x > injectionSwitch.y)))) || false)))))
    return;
   do
    {
     if((false))
      break;
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((((injectionSwitch.x > injectionSwitch.y))) && true)))
        return;
       continue;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         return;
        }
       else
        {
        }
      }
     if((false))
      {
       if((false))
        continue;
       if((false))
        return;
       if((false))
        break;
       continue;
      }
     buf[GLF_merged2_0_3_66_3_1_13GLF_merged3_0_1_11_1_1_11_2_1_12subgroup_idvirtual_gidworkgroup_idnum_workgroup.xyz.y] = uint(subgroupAllEqual(_GLF_struct_replacement_9._f1.GLF_merged3_0_1_8_1_1_11_2_1_14read_valsubgroup_idworkgroup_base.x));
     if((((injectionSwitch.x > injectionSwitch.y))))
      break;
     if((((injectionSwitch.x > injectionSwitch.y))))
      continue;
     if((((injectionSwitch.x > injectionSwitch.y))))
      break;
     if((false))
      break;
     if((false))
      {
       if((false))
        {
         do
          {
           if(true)
            {
             return;
            }
           else
            {
            }
          }
         while(false);
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
       break;
      }
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
  }
 if((((false) || false)))
  return;
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
