#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if((((false) || false)))
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((((true && (bool(bvec2(false, true)))))))
  {
   if((false))
    barrier();
   return;
  }
 if((false))
  barrier();
 if((((bool(bvec2(false, true))) || ((bool(bool(false)))))))
  return;
 if(((false || (((injectionSwitch.x > injectionSwitch.y))))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((((false)) && true))
  barrier();
 if(((! (! (false)))))
  {
   if(((((vec2(0.0, 0.0) + (injectionSwitch)).x > injectionSwitch.y))))
    barrier();
   return;
  }
 uint subgroup_size = gl_SubgroupSize;
 if((false))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    return;
   if((false))
    {
     if((false))
      return;
     if((false))
      barrier();
     if(((true && (((false) || false)))))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   if((((((injectionSwitch.x > injectionSwitch.y)))) && ((injectionSwitch.x < injectionSwitch.y))))
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      {
       if((false))
        return;
       barrier();
       if((false))
        barrier();
      }
     if((false))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   barrier();
  }
 if(((! (! (((((false) || false))) || false)))))
  {
   if((false))
    barrier();
   if(((((! (((! ((true && (bool(bvec3((false), true, true)))))) || false))))) || false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     return;
    }
   if((false))
    barrier();
   if((false))
    barrier();
   return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
  }
 if((false))
  return;
 if(((bool((! (! (((bool(false))) && true)))))))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     return;
    }
   return;
   if((false))
    return;
   if((true && ((true && ((((injectionSwitch.x > injectionSwitch.y))))))))
    barrier();
  }
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if((false))
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if((! (! ((((false) || false))))))
      return;
     if((false))
      {
       if((false))
        barrier();
       return;
      }
     barrier();
     if((false))
      return;
     if((false))
      barrier();
    }
   if((false))
    return;
   barrier();
  }
 if((true && (((((bool(bool((((! (bool(bvec4((! (! (((! (! (! ((((((true && (injectionSwitch.x > ((injectionSwitch.y) - tan((float((((mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat3((clamp(0.0, 0.0, 0.0)), 0.0, cos(0.0), 0.0, length(0.0), 0.0, 0.0, 1.0, 0.0)))) * mat3(1.0)))))))))))))))))))), false, true, false))))) && ((injectionSwitch.x < injectionSwitch.y)))))) || false))) && true)))
  {
   if((false))
    barrier();
   if((true && ((false || (((false || (false))))))))
    {
     if((((((injectionSwitch.x > injectionSwitch.y))) && true)))
      {
       if((false))
        barrier();
       barrier();
      }
     if(((((true && ((vec2(mat4x2(((false ? (vec2(429.590, 5.3)) : injectionSwitch)), 0.0, log(1.0), 1.0, 0.0, ((true ? 1.0 : (9291.8432))), ((0.0) * exp(0.0))))).x > injectionSwitch.y))))))
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          barrier();
         return;
         if((false))
          barrier();
        }
       if((false))
        barrier();
       if((((bool(bvec2(((true && (bool(bvec2((((false) || false)), false))))), ((((injectionSwitch) / vec2(1.0, 1.0)).x < injectionSwitch.y))))) || false)))
        {
         if((false))
          barrier();
         if((false))
          barrier();
         if((((((injectionSwitch.x > injectionSwitch.y)))) && true))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            barrier();
           barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((((false) && true)))
              barrier();
             return;
            }
          }
         barrier();
         if((false))
          return;
        }
       return;
       if((false))
        return;
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
       if(((((max(((true ? (vec2(mat3x2(injectionSwitch, 0.0, 0.0, 0.0, 0.0))) : (vec2(- 8953.3847, - 9.7)))), injectionSwitch)).x > injectionSwitch.y))))
        barrier();
       if((((injectionSwitch.x > (clamp((vec2((max(vec3(injectionSwitch, round(length(normalize(vec3(1.0, 1.0, 1.0))))), vec3(injectionSwitch, round(length(normalize(vec3(1.0, 1.0, 1.0))))))))), injectionSwitch, (min(injectionSwitch, injectionSwitch)))).y))))
        barrier();
       if((false))
        return;
       if((((false) || false)))
        return;
      }
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(((false || (false))))
        barrier();
       if((false))
        return;
       barrier();
      }
     if(((((mix(float((- 253.511)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       return;
      }
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((bool((true && (bool(((((clamp(injectionSwitch.x, (clamp((vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch, injectionSwitch)).x, injectionSwitch.x)) > injectionSwitch.y)))))))))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     if(((((mix(vec2((injectionSwitch)[0], (- 7.4)), vec2((- 851.205), (injectionSwitch)[1]), bvec2(false, (((! (! (injectionSwitch.x < ((injectionSwitch) * mat2(1.0)).y)))))))).x > ((injectionSwitch) - sqrt(vec2(0.0, 0.0))).y))))
      {
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
       barrier();
      }
    }
   if((((((injectionSwitch.x > injectionSwitch.y)))) && true))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((bool((bvec2(bvec2(bvec2((false), true)))))))
        barrier();
       return;
      }
     barrier();
    }
   if(((((! (! (((bool(bvec2(((((((injectionSwitch.x > injectionSwitch.y)) || (((bool(bvec2(true, (bool(bvec3(false, ((injectionSwitch.x > injectionSwitch.y)), true))))))) && true))) && (((! (! (((max((max((min(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)), injectionSwitch.x)) > (((1.0 * (((injectionSwitch) + vec2(0.0, ((0.0) + 0.0))).y))) - 0.0)))))) || false))) || false, true)))))))))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    barrier();
   if(((bool(bvec3(false, true, false)))))
    barrier();
   barrier();
   if(((! (! (false)))))
    {
     if((false))
      barrier();
     barrier();
    }
  }
 if((false))
  barrier();
 if((false))
  {
   if((false))
    {
     if((((((injectionSwitch.x > ((mix(float((52.15)), (clamp(float(clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), float(clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), float(clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))), bool(true)))))))) && ((injectionSwitch.x < injectionSwitch.y))))
      {
       if((false))
        return;
       return;
       if((false))
        return;
      }
     barrier();
    }
   if((false))
    return;
   barrier();
   if((false))
    {
     if(((((mix(float(injectionSwitch.x), float((- 64.24)), bool(false))) > injectionSwitch.y))))
      barrier();
     return;
    }
  }
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  return;
 if((false))
  return;
 if((((((true ? (float(mat4x2(injectionSwitch.x, 0.0, 1.0, cos(0.0), 1.0, 1.0, 1.0, 0.0))) : (- 450.224))) > (((true ? mat2(1.0) * (injectionSwitch) : ((injectionSwitch * mat2(15.31, 7.2, - 2.7, 5.7)))))).y))))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     return;
    }
   return;
  }
 if((false))
  return;
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 if((false))
  barrier();
 if(((false || ((true && (((injectionSwitch.x > (max((clamp((vec2(vec4(injectionSwitch, 0.0, 0.0))), injectionSwitch, injectionSwitch)), injectionSwitch)).y))))))))
  return;
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((((clamp(((float(mat3(injectionSwitch.x, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, tan(0.0), (dot(vec4(0.0, abs(1.0), 0.0, 0.0), vec4(0.0, 1.0, 0.0, log(1.0))))))) + 0.0), float(mat3(injectionSwitch.x, 1.0, 0.0, (clamp(1.0, 1.0, (max(1.0, 1.0)))), 0.0, 1.0, 1.0, tan(0.0), (dot(vec4(0.0, abs(1.0), 0.0, 0.0), vec4(0.0, 1.0, 0.0, log(1.0)))))), float(mat3(injectionSwitch.x, 1.0, 0.0, ((1.0) - abs(0.0)), 0.0, 1.0, 1.0, tan(0.0), ((mix(float((- 9731.5180)), float(dot(vec4(0.0, abs(1.0), 0.0, 0.0), vec4(0.0, 1.0, 0.0, log(1.0)))), bool(true))))))))) > injectionSwitch.y))))
    return;
   if((false))
    {
     if((false))
      {
       if(((((mix(float(injectionSwitch.x), float((6565.6972)), bool(false))) > injectionSwitch.y))))
        barrier();
       if((false))
        {
         if((false))
          {
           if((false))
            barrier();
           return;
          }
         barrier();
        }
       if((false))
        return;
       barrier();
       if((false))
        barrier();
      }
     if((false))
      barrier();
     if((false))
      return;
     if((false))
      {
       if((false))
        {
         if((((injectionSwitch.x > (mix(float(injectionSwitch.y), float((99.42)), bool(false)))))))
          barrier();
         if(((((mix(vec2((- 3442.3074), (injectionSwitch)[1]), vec2((injectionSwitch)[0], (193.557)), bvec2(true, false))).x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           if((false))
            return;
           return;
          }
         if((false))
          barrier();
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           return;
          }
         if((false))
          barrier();
         return;
        }
       return;
       if((bool(bvec3((bool(bvec3(((false || (false))), true, true))), true, true))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if((false))
      {
       if((((((injectionSwitch.x) / 1.0) > injectionSwitch.y))))
        return;
       barrier();
       if((false))
        barrier();
      }
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((! (! ((false)))))
        barrier();
       barrier();
      }
     if((((injectionSwitch.x > (vec2(1.0, 1.0) * ((mix(vec2((- 1025.3410), (355.335)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))))).y))))
      {
       if(((((! ((! (! (! (injectionSwitch.x > injectionSwitch.y))))))))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
       return;
       if(((! ((bool(bvec3(! ((bool(bool(false)))), false, false)))))))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if((false))
      barrier();
     if(((((bool(bool(false))) && true))))
      return;
     if((false))
      {
       if(((((min(injectionSwitch.x, injectionSwitch.x)) > ((((injectionSwitch.x < injectionSwitch.y)) ? ((injectionSwitch.y) - 0.0) : (- 1.7)))))))
        {
         if((false))
          barrier();
         return;
        }
       barrier();
      }
     if((false))
      {
       if((false))
        return;
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(((((! ((bool(bvec4(! (false), false, ((injectionSwitch.x > injectionSwitch.y)), false)))))) && true)))
        barrier();
       return;
      }
     barrier();
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
     if(((((! ((! ((false || ((bool(bvec4(! (! ((true && (((false)) && true)))), false, true, ((injectionSwitch.x < injectionSwitch.y))))))))))))) || ((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            return;
           barrier();
          }
         barrier();
         if((false))
          return;
         if((false))
          return;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
       if((false))
        {
         if((false))
          return;
         if((((injectionSwitch.x > (max((max(injectionSwitch.y, ((false ? (25.64) : injectionSwitch.y)))), injectionSwitch.y))))))
          barrier();
         if((false))
          return;
         if((false))
          barrier();
         if((false))
          barrier();
         if((false))
          return;
         return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if((false))
        barrier();
       if((bool(bvec2((false), true))))
        {
         if((false))
          barrier();
         return;
        }
       if((false))
        barrier();
       if(((bool(bvec4(((injectionSwitch.x > injectionSwitch.y)), true, true, ((false) || false))))))
        {
         if((((false) || false)))
          barrier();
         return;
        }
       barrier();
      }
    }
   return;
   if((((injectionSwitch.x > (clamp(injectionSwitch.y, ((true ? injectionSwitch.y : (- 317.074))), injectionSwitch.y))))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     return;
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((false))
    return;
   if((false))
    return;
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     if((false))
      return;
     barrier();
    }
   if((false))
    return;
   if((((((bool(bvec3(bool(bool(bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, true)))), false, false))))))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
     barrier();
    }
   if(((false || ((bool(bvec2(false, true)))))))
    return;
   return;
   if((false))
    barrier();
   if((false))
    return;
   if(((true && ((! (! ((((min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)))))))))
    {
     if((false))
      barrier();
     if((false))
      barrier();
     barrier();
     if((false))
      barrier();
    }
   if((false))
    return;
  }
 if((false))
  {
   if(((false || (false))))
    return;
   if((false))
    barrier();
   if((false))
    barrier();
   if((((bool(bool((true && (true && (((injectionSwitch.x > injectionSwitch.y)))))))))))
    {
     if((((injectionSwitch.x > (max((clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))))
      barrier();
     if((false))
      {
       if((false))
        return;
       return;
       if((false))
        barrier();
      }
     if((((injectionSwitch.x > (clamp(injectionSwitch, (((mat2(1.0) * (injectionSwitch)) / vec2(1.0, 1.0))), injectionSwitch)).y))))
      barrier();
     if(((((mix(vec2(((- 80.88 + (mix(float(- 191.325), float((- 163.866)), bool(false))))), (injectionSwitch)[1]), vec2((injectionSwitch)[0], (- 3.7)), bvec2(true, ((injectionSwitch.x > injectionSwitch.y))))).x > injectionSwitch.y))))
      {
       if((false))
        return;
       barrier();
      }
     if(((((false || ((! (! (false)))))) && ((injectionSwitch.x < injectionSwitch.y)))))
      {
       if((false))
        return;
       if(((((false || (((injectionSwitch.x > injectionSwitch.y) && true)))))))
        barrier();
       return;
      }
     if((false))
      barrier();
     if((true && ((false))))
      barrier();
     return;
     if((false))
      return;
    }
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((false))
    {
     if((false))
      return;
     barrier();
    }
   if((false))
    barrier();
   if((false))
    barrier();
   barrier();
  }
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    return;
   if((false))
    barrier();
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  barrier();
 uint num_workgroup = ((min((((0u >> (uint(7u))) | (((gl_NumWorkGroups.x) >> 0u))) - 0u), (0u >> (uint(7u))) | (((gl_NumWorkGroups.x) >> 0u)))));
 if((false))
  return;
 if((false))
  return;
 uint workgroup_size = gl_WorkGroupSize.x;
 if((false))
  {
   if((false))
    barrier();
   if((false))
    return;
   if((false))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      return;
     return;
    }
   if((((false) || false)))
    barrier();
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((bool(bool((false)))))
    return;
   return;
   if((false))
    {
     if(((((vec2(vec2((max(injectionSwitch, injectionSwitch))))).x > injectionSwitch.y))))
      barrier();
     return;
    }
  }
 uint workgroup_id = ((gl_WorkGroupID.x) >> 0u);
 if((false))
  barrier();
 if(((bool(bvec3((! (! (false))), false, ((false) && true))))))
  {
   if((((((injectionSwitch) * mat2((injectionSwitch.y))).x > injectionSwitch.y))))
    return;
   if((false))
    barrier();
   return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if((((false || ((injectionSwitch.x > injectionSwitch.y))))))
  {
   if(((((min((min(injectionSwitch.x, injectionSwitch.x)), (max(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    return;
   return;
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 if((false))
  return;
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(((bool(bvec4(false, false, true, false)))))
    return;
   return;
  }
 if((false))
  return;
 if((false))
  barrier();
 if((((((true && (((min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))) && true)))
  {
   if((false))
    {
     if(((((! (! (false)))) && true)))
      barrier();
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   return;
   if((true && ((bool(bool((((injectionSwitch.x > injectionSwitch.y)))))))))
    barrier();
   if(((((bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, false)))))))
    return;
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 atomicStore(write_val, uint(virtual_gid), (0 + (4)), 64, 0);
 if((false))
  return;
 if((false))
  {
   if((false))
    barrier();
   return;
  }
 if((false))
  barrier();
 if((false))
  return;
 if((false))
  return;
 if((false))
  barrier();
 if((((false) || false)))
  {
   if((false))
    barrier();
   if(((true && ((bool((true && (bool(false)))))))))
    {
     if((false))
      return;
     return;
    }
   barrier();
   if((false))
    barrier();
  }
 if((false))
  {
   if((false))
    return;
   if(((((min(injectionSwitch, (mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2((6.3), ((- 99.07 * 87.98))), bvec2(false, false))))).x > injectionSwitch.y))))
    return;
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   return;
  }
 uint read_val = atomicLoad(write_val, 4, 64, 0);
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((((bool(bvec4((injectionSwitch.x > ((mix(float((((min((mix(float((- 81.96)), float(666.841), bool(true))), (min(666.841, 666.841))))))), float((true ? injectionSwitch.y : ((true ? (- 81.76) : (48.79))))), bool(true))))), true, true, (! (! (false)))))))))
  {
   if((false))
    barrier();
   return;
  }
 if((((injectionSwitch.x > (max((float(mat2x4(injectionSwitch.y, 1.0, 1.0, 0.0, (dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0))), 1.0, 0.0, 1.0))), injectionSwitch.y))))))
  barrier();
 if((false))
  {
   if((false))
    return;
   if(((! (! ((((max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)))))))
    barrier();
   return;
  }
 if((false))
  {
   if((false))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   return;
  }
 if((false))
  barrier();
 buf[virtual_gid] = uint(subgroupAllEqual(read_val));
 if((false))
  {
   if((false))
    barrier();
   return;
  }
 if((((! (! (((max(injectionSwitch.x, (max(injectionSwitch, injectionSwitch)).x)) > injectionSwitch.y)))))))
  {
   if((false))
    {
     if((false))
      barrier();
     return;
    }
   if((false))
    barrier();
   if((false))
    return;
   if(((true && ((! (! (! (! ((((false) || (! (! (false))))))))))))))
    return;
   if((false))
    barrier();
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   if((false))
    {
     if((((((true && ((true && ((injectionSwitch.x > injectionSwitch.y))))))) || false)))
      barrier();
     barrier();
    }
  }
 if((false))
  barrier();
 if((false))
  return;
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
