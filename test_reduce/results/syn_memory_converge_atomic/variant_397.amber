#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 for(int _injected_loop_counter = 0; ((_injected_loop_counter != 1) && true); _injected_loop_counter ++)
  {
   if(((((max((clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   if(((((((true && (false || (bool((true && (bool((! (! (((((! (! ((injectionSwitch.x > injectionSwitch.y))))) && ((injectionSwitch.x < injectionSwitch.y)))))))))))))))) && true))))
    barrier();
   if((bool(bvec2((false), true))))
    barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if((false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((false))
  barrier();
 if((false))
  barrier();
 uint num_workgroup = (min((max((min(gl_NumWorkGroups.x, gl_NumWorkGroups.x)), ((gl_NumWorkGroups) | (uvec3(0u, 0u, 0u) >> ((uvec3(0u, 0u, 0u) | (((uvec3(0u)) | uvec3(((0u) - 0u), 0u, 0u))))))).x)), ((((gl_NumWorkGroups.x) >> 0u)) ^ 0u)));
 if((((false || ((((injectionSwitch.x) / cos(0.0)) > (min((vec2(injectionSwitch[0], injectionSwitch[1])), (clamp((max(injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)))).y))))))
  barrier();
 if((((false || ((false))) || false)))
  barrier();
 if(((((bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, ((injectionSwitch.x < injectionSwitch.y)), ((injectionSwitch.x < injectionSwitch.y)))))))))
  {
   if(((! (! (false)))))
    barrier();
   barrier();
  }
 uint workgroup_size = (uvec3(0u, 0u, 0u) ^ ((clamp(gl_WorkGroupSize, gl_WorkGroupSize, gl_WorkGroupSize)))).x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = (uint(uint(workgroup_size * (uint(((clamp((min((mat2(1.0) * (injectionSwitch)).x, (mat2(1.0) * (injectionSwitch)).x)), (mat2(1.0) * (injectionSwitch)).x, (mat2(1.0) * (injectionSwitch)).x)))) ^ (workgroup_id)))));
 if((false))
  barrier();
 uint virtual_gid = (((clamp(((true ? workgroup_base + subgroup_id * (min(subgroup_size, subgroup_size)) + subgroup_local_id : (num_workgroup)) << 0u), ((true ? workgroup_base + subgroup_id * (min(subgroup_size, subgroup_size)) + subgroup_local_id : (num_workgroup)) << 0u), ((true ? (~ (~ ((clamp(workgroup_base, workgroup_base, workgroup_base))))) + subgroup_id * (min(subgroup_size, subgroup_size)) + subgroup_local_id : (num_workgroup)) << 0u)))));
 atomicStore(write_val, uint(virtual_gid), 4, 64, 0);
 uint read_val = atomicLoad((uint(uint(write_val))), 4, ((64) | 0), ((0) / 1));
 buf[virtual_gid] = uint(subgroupAllEqual(read_val));
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
