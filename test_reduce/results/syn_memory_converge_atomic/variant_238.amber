#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if((((((injectionSwitch.x) + (clamp((((bool(bool((! (! (false)))))) ? (mix(float((75.11)), float((7294.5176)), bool(false))) : 0.0)), 0.0, 0.0))) > (mix(float(injectionSwitch.y), float((52.04)), bool(false)))))))
  {
   if((false))
    barrier();
   if(((false || (false))))
    {
     if((false))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if((false))
    barrier();
   if((bool(bool((((injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y)) || ((((injectionSwitch.x > injectionSwitch.y))))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if((((false) && true)))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((true && ((bool(bvec2((injectionSwitch.x > (mix(float((min((((float(((mat2x4(injectionSwitch.y, 1.0, 1.0, 0.0, 0.0, (injectionSwitch.y), 1.0, 0.0)) * mat2(1.0))))) * 1.0), (float(((mat2x4(injectionSwitch.y, 1.0, 1.0, 0.0, 0.0, (injectionSwitch.y), 1.0, 0.0)) * mat2(1.0))))))), float((9.8)), bool(false)))), true))))))))
    {
     if((false))
      {
       if((false))
        barrier();
       if((false))
        barrier();
       if((bool(bvec3((((injectionSwitch.x > injectionSwitch.y))), false, true))))
        barrier();
       barrier();
       if((false))
        barrier();
      }
     barrier();
    }
   if((((false)) && ((true) || false)))
    {
     if((false))
      barrier();
     barrier();
    }
   if((((false)) || false))
    barrier();
   barrier();
  }
 if(((false || (false))))
  barrier();
 if((((((injectionSwitch.x < injectionSwitch.y)) && ((injectionSwitch.x > (clamp(((false ? (injectionSwitch) : (vec2(0.0, 0.0) + (injectionSwitch)))), ((min(clamp(injectionSwitch, injectionSwitch, ((injectionSwitch) - vec2(0.0, 0.0))), (min((max(clamp(injectionSwitch, injectionSwitch, ((injectionSwitch) - vec2(0.0, 0.0))), clamp(injectionSwitch, injectionSwitch, ((injectionSwitch) - vec2(0.0, 0.0))))), clamp(injectionSwitch, injectionSwitch, ((injectionSwitch) - vec2(0.0, 0.0)))))))), ((injectionSwitch) / vec2(1.0, 1.0)))).y))))))
  barrier();
 if((((((injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   if(((((((((injectionSwitch.x > injectionSwitch.y)) || ((! ((true && (! ((((! (! (false)))) && true))))))))) && true) && true))))
    barrier();
   if((false))
    barrier();
   if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
   if((false))
    barrier();
   barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
  }
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if(((((min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 if((false))
  barrier();
 if((((bool(bool((injectionSwitch.x > injectionSwitch.y)))))))
  barrier();
 if((((false)) && true))
  barrier();
 if((false))
  barrier();
 if(((((false || (((((false ? (1.0) : injectionSwitch.x)) > injectionSwitch.y)))))) && true))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 uint workgroup_id = (((max((0u ^ ((~ (~ ((((uint(((uvec2(gl_WorkGroupID.x, (0u << (uint(1u))))) - (min(uvec2(0u, 0u), ((uvec2(0u, 0u)) - uvec2(0u, 0u)))))))) - 0u)))))), (((0u ^ ((~ (~ ((((uint(((uvec2(gl_WorkGroupID.x, (0u << (uint(1u))))) - uvec2(0u, 0u))))) - 0u))))))) - 0u))) | (((false ? (subgroup_id) : ((0u | ((0u ^ (((((((((gl_WorkGroupID.x) - 0u)) << ((0u ^ ((0u ^ (((0u) >> 0u))))) >> (uint(4u)))) << 0u)) << 0u))))))) | 0u)))));
 if(((((max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
  barrier();
 uint workgroup_base = (0u ^ ((false ? (atomicAnd(subgroup_local_id, workgroup_id)) : (workgroup_size * ((false ? (num_workgroup) : (((false ? (subgroup_local_id) : (~ (((~ (((uint(uvec2(workgroup_id, (0u | 1u))))) ^ 0u)) << 0u))))))))))));
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((((! (((! (((((bool(bvec2(false, true))))) && true))) || false)))) && true))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((0u >> (uint(1u))) | (subgroup_local_id));
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   barrier();
   if(((((bool(bvec2((bool(bvec2((true && ((true && (false)))), false))), false))) && true))))
    barrier();
  }
 if((false))
  barrier();
 if((! ((true && (! ((((! (! ((injectionSwitch.x > injectionSwitch.y))))))))))))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   return;
  }
 if((bool(((bool((false))) && true))))
  {
   if((false))
    barrier();
   barrier();
   if(((bool((bvec3(bvec4(bvec3(((false) || false), false, false), true)))))))
    barrier();
  }
 if(((! (! (bool(((bvec2(bvec3(bvec2(bvec3(bvec2((false), (false || ((! (! ((! (! (false))))))))), true)), false))))))))))
  {
   if((((! ((! (! (! ((false)))))))) || false))
    {
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(((((bool(((bvec3(bvec4(bvec3(bvec3((bvec3(bvec4(bvec3(((false ? (50.82) : injectionSwitch.x)) > (min(injectionSwitch, ((true ? injectionSwitch : (vec2(- 333.355, 4.3)))))).y, true, true), true))))), false))))))))))
  {
   if((false))
    barrier();
   if(((((((min(injectionSwitch, (clamp(((true ? injectionSwitch : (vec2(54.48, - 3622.4447)))), (clamp(injectionSwitch, injectionSwitch, injectionSwitch)), ((injectionSwitch) + vec2(0.0, 0.0)))))).x > injectionSwitch.y)) && true))))
    barrier();
   if((false))
    {
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
    }
   if((false))
    barrier();
   barrier();
   if((false))
    barrier();
   if((((! (! (((clamp(injectionSwitch, (mix(vec2((1.0 * ((injectionSwitch)[0])), (- 411.438)), vec2((5471.2625), (injectionSwitch)[(max(((1) - (1 ^ 1)), 1))]), bvec2(false, true))), injectionSwitch)).x > (((false ? ((vec2(755.097, 656.013) + - 6.4)) : ((max(((injectionSwitch) * mat2(1.0)), ((injectionSwitch) * mat2(1.0)))) * vec2(1.0, 1.0))))).y)))))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(((((clamp((mix(vec2((injectionSwitch)[0], (clamp((injectionSwitch)[1], (injectionSwitch)[((1) | (1))], (injectionSwitch)[(((int((ivec2(0, 0) ^ (ivec2(1, 1))))) | 0))]))), vec2((240.652), (- 4529.2809)), bvec2(false, false))), injectionSwitch, (mix(vec2((9279.4720), (((vec2(vec4((transpose((mat2((injectionSwitch.y)) * (transpose(mat2(1.0)))))) * (injectionSwitch), 0.0, 1.0)))))[1]), vec2((injectionSwitch)[0], (- 7.5)), bvec2(true, false))))).x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > ((injectionSwitch.y) + (dot(vec4(round(length(normalize(1.0))), 1.0, 1.0, 1.0), vec4(0.0, 0.0, 0.0, 0.0))))))))
    barrier();
   if((false))
    barrier();
   if((((false || ((! ((bool(bvec4(! ((! ((false || (bool(bvec3((! (((max(injectionSwitch, injectionSwitch)).x > (float(vec3(((((false ? (injectionSwitch) : (mix(vec2((((injectionSwitch)) + vec2(0.0, 0.0))[0], (injectionSwitch)[1]), vec2((858.070), (4952.8878)), bvec2(false, false))))).y) - 0.0), 0.0, 0.0)))))), true, true))))))), (false || (false)), false, true))))))))))
    barrier();
   if((((((false)) && ((injectionSwitch.x < (clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))))) && true))
    barrier();
   if((false))
    barrier();
  }
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   if((((bool(bvec4(((max((vec2(mat4x3(injectionSwitch, 1.0, abs(1.0), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0))), (mix(vec2((injectionSwitch)[0], (- 329.778)), vec2((- 376.953), (injectionSwitch)[1]), bvec2(false, ((! (! (false))) || (true))))))).x > ((vec2(0.0, 0.0) + (vec2(mat2x4(((injectionSwitch) + sqrt(vec2(0.0, 0.0))), sqrt(0.0), 1.0, 1.0, (dot(vec2(determinant(mat2(0.0, 1.0, 0.0, 0.0)), 1.0), vec2(0.0, (dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)))))), 1.0, (max((float(mat4x2((clamp(((false ? (2.7) : (min((min(0.0, 0.0)), ((max(float(mat4x2(0.0, ((false ? ((+ ldexp(26.40, 23126))) : determinant(mat2(0.0, 0.0, 0.0, 0.0)))), sqrt(sqrt(1.0)), 1.0, 0.0, 0.0, 0.0, cos(0.0))), float(mat4x2(0.0, determinant(((((false ? (mat2(7.1, 3.2, - 18.30, 32.48)) : mat2(0.0, 0.0, 0.0, 0.0)))) / mat2(1.0, 1.0, 1.0, 1.0))), sqrt(sqrt(1.0)), 1.0, 0.0, 0.0, 0.0, cos(0.0)))))))))), ((false ? (2.7) : (min((min(0.0, 0.0)), ((max(float(mat4x2(0.0, ((false ? ((+ ldexp(26.40, 23126))) : determinant(mat2(0.0, 0.0, 0.0, 0.0)))), sqrt(sqrt(1.0)), 1.0, 0.0, 0.0, 0.0, cos(0.0))), float(mat4x2(0.0, determinant(((((false ? (mat2(7.1, 3.2, - 18.30, 32.48)) : mat2(0.0, 0.0, 0.0, 0.0)))) / mat2(1.0, 1.0, 1.0, 1.0))), sqrt(sqrt(1.0)), 1.0, 0.0, 0.0, 0.0, cos(0.0)))))))))), ((false ? (2.7) : (min((min(0.0, 0.0)), ((max(float(mat4x2(0.0, ((false ? ((+ ldexp(26.40, 23126))) : determinant(mat2(0.0, 0.0, 0.0, 0.0)))), sqrt(sqrt(1.0)), 1.0, 0.0, 0.0, 0.0, cos(0.0))), float(mat4x2(0.0, determinant(((((false ? (mat2(7.1, 3.2, - 18.30, 32.48)) : mat2(0.0, 0.0, 0.0, 0.0)))) / mat2(1.0, 1.0, 1.0, 1.0))), sqrt(sqrt(1.0)), 1.0, 0.0, 0.0, 0.0, cos(0.0)))))))))))), 1.0, length(0.0), 1.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, log(1.0)))), (max(((false ? (2.7) : (min((min(0.0, 0.0)), ((max(float(mat4x2(0.0, ((false ? ((+ ldexp(26.40, 23126))) : determinant(mat2(0.0, 0.0, 0.0, 0.0)))), sqrt(sqrt(1.0)), 1.0, 0.0, 0.0, 0.0, cos(0.0))), float(mat4x2(0.0, determinant(((((false ? (mat2(7.1, 3.2, - 18.30, 32.48)) : mat2(0.0, 0.0, 0.0, 0.0)))) / mat2(1.0, 1.0, 1.0, 1.0))), sqrt(sqrt(1.0)), 1.0, 0.0, 0.0, 0.0, cos(0.0)))))))))), ((false ? (2.7) : (min((min(0.0, 0.0)), ((max(float(mat4x2(0.0, ((false ? ((+ ldexp(26.40, 23126))) : determinant(mat2(0.0, 0.0, 0.0, 0.0)))), sqrt(sqrt(1.0)), 1.0, 0.0, 0.0, 0.0, cos(0.0))), float(mat4x2(0.0, determinant(((((false ? (mat2(7.1, 3.2, - 18.30, 32.48)) : mat2(0.0, 0.0, 0.0, 0.0)))) / mat2(1.0, 1.0, 1.0, 1.0))), sqrt(sqrt(1.0)), 1.0, 0.0, 0.0, 0.0, cos(0.0))))))))))))))))))).y), true, false, ((((true) && ((true) && true)) || false))))))))
    {
     if((false))
      barrier();
     barrier();
    }
   if((true && ((((injectionSwitch.x > injectionSwitch.y))))))
    barrier();
   if((false))
    barrier();
   barrier();
   if(((((max(injectionSwitch, (mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2((- 2.4), (29.49)), bvec2(false, false))))).x > injectionSwitch.y))))
    barrier();
  }
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
 if(((! (! (bool(bvec2((false), true)))))))
  barrier();
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   if((((((injectionSwitch.x > injectionSwitch.y)))) && true))
    barrier();
   if((((injectionSwitch.x > ((true ? injectionSwitch : ((mat2((clamp(- 653.440, - 653.440, - 653.440)), - 662.843, 35.28, 6.4) * ((vec2(3.9, 3.9)) / vec2(1.0, 1.0)))))).y))))
    {
     if((false))
      barrier();
     barrier();
     if((false))
      barrier();
    }
   if(((false || (false))))
    {
     if((((! (! ((injectionSwitch.x > (min(injectionSwitch, injectionSwitch)).y)))))))
      barrier();
     barrier();
    }
   if((bool(bool((((bool(bvec2((false), true))) && true))))))
    barrier();
   barrier();
   if((false))
    barrier();
   if((false))
    barrier();
  }
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
 atomicStore(write_val, uint(virtual_gid), 4, 64, (min(0, 0)));
 uint read_val = atomicLoad(write_val, (((((~ (0 | ((~ (4)))))) | (((4) | (4))))) << 0), 64, 0);
 if((false))
  barrier();
 if((false))
  {
   if(((bool(bool(false)))))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     if(((((float(mat3((float(mat3x4(injectionSwitch.x, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0))), 1.0, 0.0, abs(1.0), 1.0, 1.0, abs(1.0), length(vec2(0.0, 0.0)), 1.0))) > injectionSwitch.y))))
      barrier();
     barrier();
     if(((true && (false))))
      barrier();
    }
   if((false))
    barrier();
   if((((false)) || false))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    {
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     if((false))
      barrier();
     barrier();
    }
   barrier();
  }
 if((false))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 buf[virtual_gid] = uint(subgroupAllEqual(read_val));
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
