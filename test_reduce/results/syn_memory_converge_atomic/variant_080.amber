#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    {
     if(((true && (false))))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
  }
 if((false))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   if(((! (! (false)))))
    {
     if((false))
      barrier();
     if((false))
      barrier();
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     if((false))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   barrier();
   if((false))
    {
     if(((bool(bool(((injectionSwitch.x > injectionSwitch.y)))))))
      barrier();
     if(((bool(bvec3(false, false, (((clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)))))))
      barrier();
     barrier();
    }
  }
 if(((((true && (injectionSwitch.x > injectionSwitch.y))))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(((((false || (! (! ((bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, false)))))))))))
  {
   if((((false) || false)))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     barrier();
    }
   barrier();
  }
 if((((false) || ((injectionSwitch.x > injectionSwitch.y)))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     barrier();
    }
   if((false))
    barrier();
   barrier();
   if((((false) && true)))
    barrier();
  }
 if(((((((false ? (injectionSwitch) : vec2(vec3(injectionSwitch, sqrt(0.0)))))).x > injectionSwitch.y))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if(((! (! (false)))))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if((false))
  {
   if((false))
    barrier();
   if(((((max(((injectionSwitch.x) / 1.0), injectionSwitch.x)) > injectionSwitch.y))))
    {
     if((false))
      barrier();
     barrier();
    }
   if(((true && ((bool(bvec4(bool(bool((false))), true, true, true)))))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
     if(((! (! (false)))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
       barrier();
       if(((! ((bool(bvec3(((! (false)) && true), true, ((injectionSwitch.x > injectionSwitch.y)))))))))
        barrier();
      }
     barrier();
     if((false))
      barrier();
    }
   barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     barrier();
    }
  }
 if(((true && (false))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
 if((false))
  {
   if(((false || (((injectionSwitch.x > injectionSwitch.y))))))
    barrier();
   barrier();
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
  }
 if((((true && ((((injectionSwitch.x > ((mix((max(vec2((vec2(mat2x4((vec2((float(mat4x3((clamp(injectionSwitch, injectionSwitch, injectionSwitch))[(max(((((clamp(0, ((0) | 0), 0)) ^ ((0) << 0)) ^ ((0) + 0))), 0))], 1.0, 0.0, 1.0, abs(1.0), round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 1.0, 0.0, 1.0, 1.0, 1.0))), (((false ? (vec2(- 7.8, - 6.5)) : vec2(vec2(injectionSwitch)))))[1])), sqrt((injectionSwitch.y)), 0.0, round(length(normalize((max((max(1.0, 1.0)), 1.0))))), 1.0, 1.0, exp(0.0))))[0], (vec2(mat2x4((max((vec2(injectionSwitch[0], ((max(mix(vec2(((((false ? (vec2(- 7.8, - 6.5)) : vec2(vec2(injectionSwitch))))))[0], (12.49)), vec2((4826.4643), ((((false ? (vec2(- 7.8, - 6.5)) : ((vec2(vec2(injectionSwitch))) * mat2(1.0))))))[1]), bvec2(false, true)), mix(vec2(((((false ? (vec2(- 7.8, - 6.5)) : vec2(vec2(injectionSwitch))))))[0], (12.49)), vec2((4826.4643), ((((false ? (vec2(- 7.8, - 6.5)) : ((vec2(vec2(injectionSwitch))) * mat2(1.0))))))[1]), bvec2(false, true)))))[1])), (vec2(injectionSwitch[0], ((max(mix(vec2(((((false ? (vec2(- 7.8, - 6.5)) : vec2(vec2(injectionSwitch))))))[0], (12.49)), vec2((4826.4643), ((((false ? (vec2(- 7.8, - 6.5)) : ((vec2(vec2(injectionSwitch))) * mat2(1.0))))))[1]), bvec2(false, true)), mix(vec2(((((false ? (vec2(- 7.8, - 6.5)) : vec2(vec2(injectionSwitch))))))[0], (12.49)), vec2((4826.4643), ((((false ? (vec2(- 7.8, - 6.5)) : ((vec2(vec2(injectionSwitch))) * mat2(1.0))))))[1]), bvec2(false, true)))))[1])))), sqrt((injectionSwitch.y)), 0.0, round(length(normalize(1.0))), 1.0, 1.0, exp(0.0))))[1]), vec2((vec2(mat2x4((vec2((float(mat4x3((clamp(injectionSwitch, injectionSwitch, injectionSwitch))[(max(((((clamp(0, ((0) | 0), 0)) ^ ((0) << 0)) ^ ((0) + 0))), 0))], 1.0, 0.0, 1.0, abs(1.0), round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 1.0, 0.0, 1.0, 1.0, 1.0))), (((false ? (vec2(- 7.8, - 6.5)) : vec2(vec2(injectionSwitch)))))[1])), sqrt((injectionSwitch.y)), 0.0, round(length(normalize((max((max(1.0, 1.0)), 1.0))))), 1.0, 1.0, exp(0.0))))[0], (vec2(mat2x4((max((vec2(injectionSwitch[0], ((max(mix(vec2(((((false ? (vec2(- 7.8, - 6.5)) : vec2(vec2(injectionSwitch))))))[0], (12.49)), vec2((4826.4643), ((((false ? (vec2(- 7.8, - 6.5)) : ((vec2(vec2(injectionSwitch))) * mat2(1.0))))))[1]), bvec2(false, true)), mix(vec2(((((false ? (vec2(- 7.8, - 6.5)) : vec2(vec2(injectionSwitch))))))[0], (12.49)), vec2((4826.4643), ((((false ? (vec2(- 7.8, - 6.5)) : ((vec2(vec2(injectionSwitch))) * mat2(1.0))))))[1]), bvec2(false, true)))))[1])), (vec2(injectionSwitch[0], ((max(mix(vec2(((((false ? (vec2(- 7.8, - 6.5)) : vec2(vec2(injectionSwitch))))))[0], (12.49)), vec2((4826.4643), ((((false ? (vec2(- 7.8, - 6.5)) : ((vec2(vec2(injectionSwitch))) * mat2(1.0))))))[1]), bvec2(false, true)), mix(vec2(((((false ? (vec2(- 7.8, - 6.5)) : vec2(vec2(injectionSwitch))))))[0], (12.49)), vec2((4826.4643), ((((false ? (vec2(- 7.8, - 6.5)) : ((vec2(vec2(injectionSwitch))) * mat2(1.0))))))[1]), bvec2(false, true)))))[1])))), sqrt((injectionSwitch.y)), 0.0, round(length(normalize(1.0))), 1.0, 1.0, exp(0.0))))[1]))), vec2((- 46.59), (6.5)), bvec2((bool(bvec4(((injectionSwitch.x > injectionSwitch.y)), true, false, true))), false)))).y)) && true))))))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((((! (! ((false))))) || ((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   if((false))
    {
     if((((false) && true)))
      barrier();
     barrier();
    }
   barrier();
   if((false))
    barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((false))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 if((false))
  barrier();
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 if((false))
  barrier();
 if((((((injectionSwitch.x > injectionSwitch.y)) && ((injectionSwitch.x < injectionSwitch.y))))))
  barrier();
 if((bool(bvec2((((injectionSwitch.x > injectionSwitch.y))), true))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false || ((false))))
  {
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > (((clamp(injectionSwitch.y, injectionSwitch.y, (((clamp((clamp(injectionSwitch, injectionSwitch, (max(injectionSwitch, injectionSwitch)))), injectionSwitch, injectionSwitch)) * vec2(1.0, 1.0))).y))) / (dot(vec2(0.0, 1.0), vec2(0.0, 1.0))))))))
    {
     if((false))
      barrier();
     if((false))
      barrier();
     if((false))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
     barrier();
     if((((((injectionSwitch.x > injectionSwitch.y)) && true))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
       if((false))
        barrier();
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   barrier();
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     if(((! (! ((bool(bvec3(false, false, false))))))))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   if(((false || ((! (! ((! (((! (false)) || false))))))))))
    barrier();
   if((false))
    barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_id = (((bool(bool((bool(bvec4(((injectionSwitch.x < (min(injectionSwitch.y, injectionSwitch.y)))), false, false, true)))))) ? (clamp(gl_WorkGroupID, gl_WorkGroupID, gl_WorkGroupID)) : (uvec3(42785u, 32875u, 122312u)))).x;
 if((false))
  {
   if((false))
    barrier();
   barrier();
   if((false))
    barrier();
  }
 if((false))
  barrier();
 if((false))
  {
   if(((! (! (((((! (! (((bool(bvec4(false, false, true, true))) || false))))) && true)))))))
    {
     if((false))
      barrier();
     if((false))
      barrier();
     if((false))
      {
       if(((((bool(((bvec2(bvec4(bvec2(bvec3(bvec2((((bool(bool(((injectionSwitch.x > injectionSwitch.y))))) && true)), ((injectionSwitch.x < injectionSwitch.y))), false)), false, true)))))) && true))))
        barrier();
       barrier();
      }
     if((((! (! (bool(bool(false))))))))
      barrier();
     barrier();
     if((false))
      barrier();
    }
   if((false))
    barrier();
   if((false))
    barrier();
   if((((((true ? ((injectionSwitch.x) / 1.0) : (- 0.5))) > injectionSwitch.y))))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     if((false))
      {
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
       if((false))
        barrier();
       if((true && ((false))))
        barrier();
       barrier();
       if((false))
        {
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
         barrier();
        }
       if((false))
        barrier();
      }
     barrier();
    }
   if((false))
    {
     if((false))
      barrier();
     if((false))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(((false || (false))))
        barrier();
       barrier();
      }
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
  }
 if((false))
  barrier();
 uint workgroup_base = workgroup_size * workgroup_id;
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
 if((false))
  {
   if((((! ((! (! (! ((false)))))))) && true))
    {
     if((false))
      barrier();
     barrier();
    }
   barrier();
   if((false))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if((false))
    barrier();
   if((false))
    barrier();
   if((((true && ((injectionSwitch.x > injectionSwitch.y))))))
    {
     if((false))
      barrier();
     if((false))
      barrier();
     barrier();
     if((false))
      barrier();
    }
   if((false))
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     barrier();
     if(((bool(bvec2((false || (false)), false)))))
      barrier();
    }
  }
 if((((false)) || false))
  {
   if((((! (! ((injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
   if((false))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if(((((mix(vec2((- 402.930), (injectionSwitch)[1]), vec2((injectionSwitch)[0], (5.3)), bvec2((false || (true)), false))).x > injectionSwitch.y))))
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(((false || (false))))
      barrier();
     barrier();
    }
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   if(((bool(bvec2(((injectionSwitch.x > injectionSwitch.y)), true)))))
    barrier();
   barrier();
  }
 if((((false || ((injectionSwitch.x > injectionSwitch.y))))))
  barrier();
 uint virtual_gid = (uint((((clamp(uvec4(((workgroup_base + subgroup_id * subgroup_size) << ((0u | 0u) ^ (0u))), (0u << (uint(5u))), ((0u ^ (uint(((false ? (uvec4(23833u, 97913u, 93140u, 149286u)) : (~ (~ (uvec4(0u, 1u, 0u, 0u)))))))))), 1u), uvec4(((workgroup_base + subgroup_id * subgroup_size) << ((0u | 0u) ^ (0u))), (0u << (uint(5u))), ((0u ^ (uint(((false ? (uvec4(23833u, 97913u, 93140u, 149286u)) : (~ (~ (uvec4(0u, 1u, 0u, 0u)))))))))), 1u), (~ (~ (uvec4(((workgroup_base + subgroup_id * subgroup_size) << ((0u | 0u) ^ (0u))), (0u << (uint(5u))), ((0u ^ (uint(((false ? (uvec4(23833u, 97913u, 93140u, 149286u)) : (~ (~ (uvec4(0u, 1u, 0u, 0u)))))))))), 1u))))))) << uvec4(0u, 0u, 0u, 0u)))) + subgroup_local_id;
 if(((! (! (false)))))
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
  }
 if((! (! ((false)))))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 if((((false) || false)))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 atomicStore(write_val, uint(virtual_gid), ((((4)) | (((((min(4, 4)))) | ((((4)) | 0))))) >> 0), 64, ((true ? 0 : ((10547 & 91766)))));
 if((false))
  barrier();
 if((false))
  {
   if((false || ((bool(bvec3((false), true, false))))))
    barrier();
   barrier();
   if((false))
    barrier();
  }
 if((false))
  barrier();
 if((false))
  {
   if((false))
    {
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       if(((! (! (((((injectionSwitch.x > injectionSwitch.y))) && true))))))
        barrier();
       barrier();
      }
     barrier();
    }
   barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(((((bool((bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, ((false) || false), true), true)))))))))
  barrier();
 if((false))
  barrier();
 uint read_val = atomicLoad(write_val, 4, 64, 0);
 if((((injectionSwitch.x > (mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2((2101.4406), (1.8)), bvec2(false, ((injectionSwitch.x > injectionSwitch.y))))).y))))
  barrier();
 if((((false) || false)))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  {
   if((true && ((((injectionSwitch.x > injectionSwitch.y))))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((false))
  {
   if((false))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     barrier();
     if(((! (! (false)))))
      barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   barrier();
   if((false))
    barrier();
  }
 if((false))
  barrier();
 if((((bool(bvec2((injectionSwitch.x > (clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), (((0.0 + ((mix(float((7.2)), float(injectionSwitch.x), bool(true))))) > injectionSwitch.y))))))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     if((false))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((((injectionSwitch.x > injectionSwitch.y))) || false)))
    barrier();
   barrier();
  }
 if((! ((bool(bvec3(! ((bool((bvec2(bvec4(bvec2((false), true), false, true)))))), true, true))))))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if((false))
  barrier();
 if((((injectionSwitch.x > ((false ? (8.6) : injectionSwitch.y))))))
  barrier();
 buf[virtual_gid] = uint(subgroupAllEqual(read_val));
 if((((true && ((bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, (((true && (false))) || false)))))))))
  {
   if(((((cos(vec2(0.0, 0.0)) * (injectionSwitch)).x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((false))
  {
   if((((bool(bvec4((injectionSwitch.x > ((injectionSwitch) / vec2(1.0, 1.0)).y), true, true, false))))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       barrier();
      }
     if((((! (! ((injectionSwitch.x > injectionSwitch.y)))))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
       barrier();
       if((false))
        barrier();
      }
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
         barrier();
        }
       barrier();
      }
    }
   if((false))
    barrier();
   barrier();
  }
 if((((((injectionSwitch.x > injectionSwitch.y) && true)))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   if(((! (! (false)))))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   barrier();
  }
 if(((false || (false))))
  barrier();
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((false))
  {
   if((((((injectionSwitch.x > injectionSwitch.y))) || false)))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if(((true && (false))))
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if((false))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   barrier();
  }
 if((false))
  {
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   barrier();
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
