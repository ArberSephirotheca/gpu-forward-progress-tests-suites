#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if((((bool(((! (! ((bool((! (! (bool((bvec2(bvec4((bvec2(bvec2(bvec2(((true && ((((((! (! ((((((vec2(vec4(vec2(mat4x2(((true ? vec2(injectionSwitch[0], injectionSwitch[1]) : (injectionSwitch))), 1.0, 1.0, (clamp(0.0, (min(0.0, 0.0)), 0.0)), round(length(normalize(vec2(1.0, 1.0)))), 0.0, 0.0)), ((0.0) / cos(0.0)), 0.0))))).x > injectionSwitch.y)) || (((! (! (! (! (false || ((false || ((false))))))))))))))) && true)) && true)))), false)))), false, false)))))))))))) || false))))))
  return;
 uint subgroup_size = gl_SubgroupSize;
 if(((true && (! (! (((((true && (false))) || false))))))))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 uint num_workgroup = (uint(uvec4(((gl_NumWorkGroups.x) | ((clamp((uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups)).x, (~ (~ (gl_NumWorkGroups))).x, gl_NumWorkGroups.x)))), (((0u | ((max(((((1u) / 1u) | ((1u) / 1u))), (clamp((uint(uvec4(1u, 1u, 0u, 0u))), 1u, ((1u) << 0u)))))))) >> 0u), 1u, 1u)));
 uint workgroup_size = gl_WorkGroupSize.x;
 if(((false || (false))))
  return;
 if((false || ((((false) || ((injectionSwitch.x > injectionSwitch.y)))))))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = (0u + ((min(workgroup_size, workgroup_size)))) * ((((((workgroup_id) << 0u)) >> 0u) / ((1u << (uint(7u))) >> ((max((((uint(((uvec4(uint(7u), 0u, 1u, 0u)) + uvec4(0u, 0u, 0u, 0u))))) ^ (0u << (uint(5u)))), uint(7u)))))));
 uint virtual_gid = (min(((((0u ^ ((min(clamp(workgroup_base, workgroup_base, workgroup_base), clamp(workgroup_base, workgroup_base, workgroup_base)))))) + subgroup_id * subgroup_size) / ((1u << (uint(7u))) >> (uint(7u)))), ((0u ^ (clamp(workgroup_base, workgroup_base, workgroup_base)))) + subgroup_id * subgroup_size)) + ((((subgroup_local_id) ^ 0u)) << 0u);
 if((((false || (bool(bool(((((((false ? (- 570.761) : injectionSwitch.x)) > injectionSwitch.y) || false))))))))))
  return;
 if(((bool(bvec3((! (! (((((injectionSwitch.x > injectionSwitch.y)))) && true))), false, true)))))
  return;
 atomicStore(write_val, ((~ (~ (max(((0u ^ 0u) ^ (uint(virtual_gid))), uint(virtual_gid)))))), 4, 64, 0);
 uint read_val = atomicLoad(write_val, 4, 64, (((((((((int((ivec4(1, 1, 1, 1) * (((false ? (ivec4(13342, 79586, - 33948, 46638)) : ((ivec4(true ? (((max(0, 0))) | ((clamp(0, ((~ (~ (int(ivec3(0, 1, 1)))))), (~ (~ (0))))))) : (((46672) << 0)), 0, 0, 0)) | (ivec4(true ? (((max(0, 0))) | ((clamp(0, ((~ (~ (int(ivec3(0, 1, 1)))))), (~ (~ (0))))))) : (((46672) << 0)), 0, 0, 0)))))))))))) - 0)) / 1)) | (0)));
 buf[virtual_gid] = uint(subgroupAllEqual(read_val));
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
