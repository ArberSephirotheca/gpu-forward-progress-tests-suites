#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((false))
  {
   if((false))
    {
     if((false))
      barrier();
     barrier();
     if((false))
      barrier();
    }
   barrier();
  }
 if(((! (! (false)))))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(((true && (((injectionSwitch.x > injectionSwitch.y))))))
  {
   if(((((! ((bool(bool(! (injectionSwitch.x > injectionSwitch.y))))))))))
    barrier();
   barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if((false))
  {
   if((false))
    {
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((true && (true && (((false))))))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((((((false) && true)) || false)))
    {
     if((false))
      barrier();
     barrier();
    }
   barrier();
  }
 if((false))
  barrier();
 if((false))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 if((false))
  barrier();
 if(((bool(bool(((injectionSwitch.x > injectionSwitch.y)))))))
  barrier();
 if((false))
  {
   if((false))
    {
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     barrier();
    }
   if(((((injectionSwitch.x > injectionSwitch.y)) || ((((bool(bvec4(((injectionSwitch.x > injectionSwitch.y)), true, true, false)))) && true)))))
    barrier();
   barrier();
   if((false))
    barrier();
   if((false))
    barrier();
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = (max(((((uint(uvec3(((uint(uint(gl_WorkGroupID.x))) | (uint(uint(gl_WorkGroupID.x)))), 0u, 1u))) - uint((injectionSwitch.x))))), gl_WorkGroupID.x));
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((((((! (! (! (! ((bool(bvec3((((max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y) || false), true, true)))))))))))))
  {
   if((((false) || false)))
    barrier();
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((false))
  {
   if(((bool(bvec4((true && (false)), false, true, true)))))
    barrier();
   if(((! (! (false)))))
    {
     if((((((injectionSwitch.x > injectionSwitch.y)) || ((injectionSwitch.x > injectionSwitch.y))))))
      barrier();
     if(((false || (! (! ((false)))))))
      {
       if((false))
        {
         if(((((vec2(((true ? (((clamp(injectionSwitch[0], injectionSwitch[0], injectionSwitch[0]))) - 0.0) : (- 71.86))), injectionSwitch[1])).x > injectionSwitch.y))))
          barrier();
         if((false))
          barrier();
         barrier();
        }
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        {
         if(((((bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, ((injectionSwitch.x > injectionSwitch.y)), (! (! (false))))))))))
          barrier();
         barrier();
        }
       barrier();
       if((false))
        barrier();
       if((false))
        barrier();
      }
     if((((((((injectionSwitch.x > injectionSwitch.y)))) && ((injectionSwitch.x < injectionSwitch.y)))) && true))
      barrier();
     barrier();
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
       barrier();
      }
     if((false))
      barrier();
     if((true && ((((injectionSwitch.x > (min((mix(float((- 1.7)), float(injectionSwitch.y), bool(true))), (clamp(injectionSwitch.y, injectionSwitch.y, (clamp(injectionSwitch, (sqrt(vec2(1.0, 1.0)) * (injectionSwitch)), ((injectionSwitch) / vec2(1.0, 1.0)))).y))))))))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       barrier();
      }
     if(((((max((mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2((- 33.88), (- 830.443)), bvec2(false, false))), (vec2(mat3x2((mix(vec2((((min((injectionSwitch), (injectionSwitch)))) - sqrt(vec2(0.0, 0.0)))[0], (injectionSwitch)[1]), vec2((- 33.88), (- 830.443)), bvec2(false, false))), 0.0, determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, length(0.0))), 1.0, 0.0))))).x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       barrier();
      }
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          {
           if((false))
            barrier();
           barrier();
           if((false))
            barrier();
          }
         barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       barrier();
      }
     barrier();
    }
   if((((false) && true)))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
     if((false))
      barrier();
    }
   if((((injectionSwitch.x > (max((((float(mat4x3(float(vec3((injectionSwitch.y), 1.0, cos(sqrt(0.0)))), 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, exp(0.0), 0.0, (clamp(log(1.0), log(1.0), log(1.0))), 1.0)))) + 0.0), ((injectionSwitch) * vec2(1.0, 1.0)).y))))))
    {
     if(((! (bool(bvec2((! ((((((! (! (((bool(bvec2(false, false))) || (false)))))) || false)) && true))), ((! ((! (! (! ((bool(bvec4(false, true, true, ((injectionSwitch.x > injectionSwitch.y))))))))))) || (true))))))))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   barrier();
   if((((injectionSwitch.x > ((injectionSwitch.y) + 0.0)))))
    {
     if((false))
      barrier();
     if(((! (((! ((bool(bvec4(! ((((! (false)) || false))), true, true, true)))))) || false))))
      {
       if((false))
        barrier();
       barrier();
       if((false))
        barrier();
      }
     if((false))
      {
       if((false))
        barrier();
       if((false))
        barrier();
       barrier();
      }
     if((false))
      barrier();
     barrier();
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 uint workgroup_base = (~ (~ (min((~ (~ ((workgroup_size * workgroup_id)))), (workgroup_size * workgroup_id)))));
 if(((((bool(bvec2((false || (injectionSwitch.x > ((injectionSwitch) - vec2(0.0, 0.0)).y)), (((true && ((((max(((clamp((injectionSwitch.x) / cos(0.0), (injectionSwitch.x) / cos(0.0), (min((1.0 * ((injectionSwitch.x) / cos(0.0))), ((max((mix(float((88.94)), float(min((injectionSwitch.x) / cos(0.0), (injectionSwitch.x) / cos(0.0))), bool(true))), ((true ? ((min((injectionSwitch.x) / cos(0.0), (injectionSwitch.x) / cos(0.0))) / 1.0) : (- 588.417)))))))))) / 1.0), clamp((injectionSwitch.x) / cos(0.0), (injectionSwitch.x) / cos(0.0), (min((1.0 * ((injectionSwitch.x) / cos(0.0))), ((max((mix(float((88.94)), float(min((injectionSwitch.x) / cos(0.0), (injectionSwitch.x) / cos(0.0))), bool(true))), ((true ? ((min((injectionSwitch.x) / cos((mix(float((2.5)), float(0.0), bool(((injectionSwitch.x < injectionSwitch.y)))))), (injectionSwitch.x) / cos(0.0))) / 1.0) : (- 588.417))))))))))))) > injectionSwitch.y)))))))))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(((false || ((! (! (false)))))))
      barrier();
     barrier();
    }
   barrier();
  }
 if(((((((false || (injectionSwitch.x > injectionSwitch.y)))))) && (! (! ((false || (((true) && true))))))))
  {
   if((((false)) || (true && (false))))
    {
     if((false))
      barrier();
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((((false) && (! (! (true))))))
      {
       if((false))
        barrier();
       barrier();
       if((false))
        barrier();
      }
     if(((((bool(bvec3((false || ((bool(bvec2(injectionSwitch.x > injectionSwitch.y, false))))), true, true)))))))
      {
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     barrier();
    }
   if((false))
    {
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     if((false))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   if((((injectionSwitch.x > (max(injectionSwitch, (vec2(injectionSwitch[0], injectionSwitch[1])))).y))))
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(((bool(bvec2(false, false)))))
      barrier();
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
     if((false))
      barrier();
     if((false))
      barrier();
     barrier();
     if((false))
      barrier();
    }
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
  }
 if(((((! ((! ((! (! (! (! ((true && (false)))))))))))) && true)))
  barrier();
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   barrier();
   if((false))
    barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((((injectionSwitch.x > ((((vec2(((mat3x2((false ? (injectionSwitch) : (vec2(mat2x3(injectionSwitch, 0.0, 0.0, round(length(normalize(vec4(1.0, 1.0, (clamp(1.0, 1.0, 1.0)), 1.0)))), 0.0)))), (injectionSwitch.x), determinant(mat2(0.0, 0.0, 1.0, 0.0)), 1.0, 0.0)) + mat3x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))) - vec2(0.0, 0.0)))).y)))) || false))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   barrier();
  }
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 if((((((clamp(vec2(vec3(injectionSwitch, 1.0)), vec2(vec3(injectionSwitch, 1.0)), vec2(vec3(injectionSwitch, 1.0))))).x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   if((((((clamp(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), ((false ? (- 2.5) : clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))))) > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       barrier();
      }
     barrier();
    }
   barrier();
  }
 if(((! (! ((true && (((false) && true))))))))
  {
   if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(((((bool(bvec4((bool(bool((((bool(bvec2(false, false)))) || false)))), false, false, (((bool(bvec3(false, true, false)))) && true)))) || (((((injectionSwitch.x < injectionSwitch.y)) && (false))) || false)))))
      barrier();
     if((((! (! ((false))))) && ((injectionSwitch.x < injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(((true && ((true && (false))))))
    {
     if((false))
      barrier();
     barrier();
    }
   if(((bool(bvec4(false, false, ((injectionSwitch.x < injectionSwitch.y)), true)))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
  }
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  {
   if((false))
    {
     if((false))
      barrier();
     barrier();
     if((false))
      barrier();
    }
   if((false))
    barrier();
   barrier();
   if((false))
    barrier();
  }
 if((((bool(bvec3((false), false, false))) && true)))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
 if(((((((! (! ((! (! (false)))))))) || false)) && true))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 if((((((injectionSwitch.x > injectionSwitch.y)))) || false))
  barrier();
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   if((false))
    {
     if(((true && (false))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   barrier();
  }
 if((((injectionSwitch.x > (((vec2(injectionSwitch[0], ((injectionSwitch[1]) / 1.0)))) - vec2(0.0, (float((min(vec2(0.0, 0.0), vec2(0.0, 0.0))))))).y))))
  {
   if((((bool((bvec3(bvec4(bvec3(((bool(bvec2((0.0 + ((mix(float(injectionSwitch.x), float((- 1.8)), bool(false))))) > ((mix(float((2.0)), float(float((((! (! ((bool(bvec2(((false) && true), ((injectionSwitch.x < injectionSwitch.y)))))))) ? (mat3x2(7.1, (max(- 5695.9742, - 5695.9742)), 269.608, 904.760, 7.0, - 894.784)) : (mat3x2(mat3x2(mat3x2(injectionSwitch.y, 0.0, 0.0, 0.0, 0.0, 1.0)))))))), bool(true)))), true)))), true, false), false))))))))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   barrier();
   if((true && ((false))))
    barrier();
   if((false))
    barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((((injectionSwitch.x < (min(injectionSwitch.y, injectionSwitch.y)))) && ((false))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(((true && (false))))
      barrier();
     if((false))
      barrier();
     barrier();
    }
   if((false))
    {
     if((bool(bool((bool(bvec4((false), ((injectionSwitch.x > injectionSwitch.y)), true, (bool((bvec3(bvec4(bvec3(false, true, false), true))))))))))))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     barrier();
     if((false))
      barrier();
    }
   if(((false || (((injectionSwitch.x > ((injectionSwitch) + vec2(0.0, 0.0)).y))))))
    barrier();
   if((false))
    barrier();
   barrier();
   if((false))
    barrier();
  }
 if((false || ((false))))
  {
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if((false))
      barrier();
     barrier();
    }
   barrier();
  }
 if(((true && ((! (! (false)))))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   if(((true && (false))))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 atomicStore(write_val, uint(virtual_gid), 4, 64, 0);
 if((((true && (bool(bool(false)))))))
  barrier();
 if((false))
  barrier();
 if((((false)) && true))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if(((true && (false))))
  barrier();
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   barrier();
   if((((injectionSwitch.x > (max(((false ? (- 654.089) : injectionSwitch.y)), injectionSwitch.y))))))
    barrier();
  }
 if((false))
  barrier();
 if(((bool(bool(((injectionSwitch.x > (max((max(injectionSwitch, injectionSwitch)).y, injectionSwitch.y)))))))))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   if((! (! ((false || ((false)))))))
    barrier();
   if(((true && (bool(bvec4((false), false, true, true))))))
    barrier();
   barrier();
   if((false))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     if((false))
      barrier();
     barrier();
     if((false))
      barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if((((injectionSwitch.x > ((injectionSwitch) * vec2(1.0, 1.0)).y))))
  barrier();
 uint read_val = atomicLoad((0u + (max((((write_val)) << 0u), (write_val)))), 4, 64, 0);
 if((false))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   barrier();
  }
 if((false))
  {
   if((false))
    barrier();
   barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if((false))
  barrier();
 buf[virtual_gid] = uint(subgroupAllEqual(read_val));
 if((false))
  barrier();
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
