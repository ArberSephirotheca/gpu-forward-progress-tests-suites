#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((((injectionSwitch.x > (0.0 + (injectionSwitch.y))))))
  barrier();
 if((false))
  {
   if((((false)) || false))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((((((! (! (true))) && (false))) && true)))
  barrier();
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if(((((((max(injectionSwitch, injectionSwitch))) - tan(vec2(0.0, 0.0))).x > injectionSwitch.y))))
  barrier();
 if(((((false || (bool(bvec2(((true && (! (! ((bool(bool((true && (bool(bvec3(((((injectionSwitch.x > ((mix(float((injectionSwitch.y) / 1.0), float((4975.1059)), bool(false))))) || ((injectionSwitch.x > injectionSwitch.y))))), false, true)))))))))))), true))))))))
  {
   if((false))
    barrier();
   barrier();
   if((false))
    barrier();
  }
 uint subgroup_size = gl_SubgroupSize;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((false))
  {
   if(((((((! (! ((true && (bool(bvec4(((bool(bvec3(false, false, true)))), false, true, false))))))))) && true) && true)))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 uint num_workgroup = (((((uvec3((clamp((min(0u, ((false ? (132494u) : 0u)))), (min((min(0u, ((false ? (132494u) : 0u)))), (min(0u, ((false ? (132494u) : 0u)))))), (min((min(0u, ((false ? (132494u) : 0u)))), (min(0u, ((false ? (132494u) : 0u)))))))), ((clamp(uint(uvec3((((((uint(uvec3(true ? 0u : (subgroup_size), 0u, 1u))) * 1u)))), 1u, 0u)), uint(uvec3((((((uint(uvec3(true ? 0u : (subgroup_size), 0u, 1u))) * 1u)))), 1u, 0u)), ((uint(uvec3((((((uint(uvec3(true ? 0u : (subgroup_size), 0u, 1u))) * 1u)))), 1u, 0u))) - 0u)))), 0u) | (gl_NumWorkGroups))) + ((((uvec3(0u, ((0u) >> 0u), 0u)) | uvec3(0u, 0u, 0u))) ^ uvec3(0u, 0u, 0u)))) ^ uvec3(0u, 0u, 0u)).x;
 if((! (! ((false)))))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 if((false))
  barrier();
 if(((! (! (false)))))
  {
   if((false))
    {
     if((false))
      {
       if(((((max((clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)).x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     barrier();
    }
   if(((! (! ((! (! ((! (! (false))))))))) || ((bool(bool(((((bool(bvec4((((injectionSwitch.x > (vec2(mat4x3(injectionSwitch, log(((cos(0.0)) * 1.0)), 1.0, 1.0, 0.0, cos(0.0), 0.0, determinant(mat3((sqrt(0.0) + ((mix(float(1.0), float((- 5715.5210)), bool(false))))), 0.0, 1.0, 0.0, 1.0, (1.0 * (1.0)), 0.0, 0.0, 1.0)), 1.0, ((((true ? ((false ? (- 1.1) : (clamp(((min(dot(vec3(1.0, 1.0, 0.0), vec3((injectionSwitch.x), 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))))), dot((max(vec3(1.0, 1.0, 0.0), (mix(vec3((918.951), (vec3(1.0, 1.0, 0.0))[1], (vec3(1.0, 1.0, 0.0))[2]), vec3((vec3(1.0, 1.0, 0.0))[0], (4.7), (- 78.33)), bvec3(true, false, false))))), vec3((injectionSwitch.x), 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))))))) / determinant(mat4(1.0, length(vec2(0.0, 0.0)), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, (dot(vec2(0.0, 0.0), vec2(1.0, 1.0))), 1.0))), min(dot(vec3(1.0, 1.0, 0.0), vec3((injectionSwitch.x), 0.0, round(length((vec3((injectionSwitch.y), (injectionSwitch.y), (injectionSwitch.y)) * (normalize(vec3(1.0, 1.0, 1.0)))))))), dot(vec3(1.0, 1.0, 0.0), vec3((injectionSwitch.x), 0.0, round((float((mix(float(float(length(normalize(vec3(1.0, 1.0, 1.0))))), float((1.7)), bool(false))))))))), min((min(dot(vec3(1.0, 1.0, 0.0), vec3((injectionSwitch.x), 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))))), dot(vec3(1.0, 1.0, 0.0), vec3((injectionSwitch.x), 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))))))), (sqrt(0.0) + (dot(vec3(1.0, 1.0, 0.0), vec3(((min(injectionSwitch.x, injectionSwitch.x))), 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0))))))))))))) : (72.64))))), (mix(float(((clamp(- 8384.4253, (max(- 8384.4253, - 8384.4253)), ((- 8384.4253) - 0.0))))), float(1.0), bool(true)))))).y)) || (false)), true, true, false)))) && true))))))))
    {
     if(((bool(bvec4(((injectionSwitch.x > ((injectionSwitch) * vec2(1.0, 1.0)).y)), ((injectionSwitch.x > injectionSwitch.y)), true, true)))))
      {
       if((false))
        barrier();
       barrier();
      }
     if(((! (! ((bool(bool(((((true ? injectionSwitch : (cosh(injectionSwitch)))).x > injectionSwitch.y))))))))))
      barrier();
     barrier();
    }
   if((bool(bvec4((true && ((((injectionSwitch.x > injectionSwitch.y))))), true, ((injectionSwitch.x > injectionSwitch.y)), false))))
    barrier();
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((bool(bvec3(bool(bvec3((((bool(bvec4(false, true, (! (! (((false) && true)))), true))) || ((injectionSwitch.x > injectionSwitch.y)))), true, ((! (((! ((true)))) || false)) || false))), ((injectionSwitch.x > injectionSwitch.y)), true))))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
     barrier();
    }
   barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   if((false))
    {
     if(((bool(bvec3(((injectionSwitch.x > injectionSwitch.y)), false, true)))))
      barrier();
     if((false))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     barrier();
    }
  }
 uint workgroup_id = ((gl_WorkGroupID) | (gl_WorkGroupID)).x;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if((((injectionSwitch.x > (1.0 * (injectionSwitch.y))))))
    barrier();
   if((false || ((((! (! (true))) && (((((min(min((float(mat4x3(injectionSwitch.x, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))), ((false ? (sqrt(smoothstep(515.479, - 79.03, injectionSwitch))) : (min(injectionSwitch, (min(injectionSwitch, (max((min(injectionSwitch, injectionSwitch)), injectionSwitch)))))))).x), min((float(mat4x3(injectionSwitch.x, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))), ((false ? (sqrt(smoothstep(515.479, - 79.03, injectionSwitch))) : (min(injectionSwitch, (min(injectionSwitch, (max((min(injectionSwitch, injectionSwitch)), injectionSwitch)))))))).x)))) > injectionSwitch.y))))))))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   barrier();
   if((false))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > (mix(float((9.6)), float(injectionSwitch.y), bool(true)))))))
      barrier();
     if((false))
      {
       if((((injectionSwitch.x > (float(vec2(((injectionSwitch) + vec2(0.0, 0.0)).y, 1.0)))))))
        barrier();
       barrier();
      }
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     barrier();
     if((false))
      barrier();
    }
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     barrier();
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
    }
  }
 if(((! (! (false)))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 if(((bool(bvec2(bool(bvec4((((false)) || false), true, false, false)), true)))))
  {
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if(((bool(bvec2(false, true)))))
  {
   if((false))
    {
     if((! (! ((false || ((false)))))))
      barrier();
     if((false))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(((! (! ((bool(bool((! (! (false)))))))))))
    {
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     if((false))
      barrier();
     barrier();
     if((false))
      barrier();
    }
   if((false))
    barrier();
   barrier();
  }
 if((false))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   barrier();
   if((false))
    barrier();
  }
 if(((bool(bool(((injectionSwitch.x > injectionSwitch.y)))))))
  barrier();
 uint workgroup_base = workgroup_size * ((workgroup_id) - 0u);
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((false || ((false))))
  barrier();
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 uint virtual_gid = workgroup_base + (uint(uvec2((clamp(subgroup_id * (max(((((((uint(uvec3(((((bool(bool((bool(bvec3((bool(bvec3(((injectionSwitch.x > injectionSwitch.y)), true, true))), true, false)))))) ? (57831u) : subgroup_size))), 1u, 0u))) - 0u)) | ((min(min((uint(uvec3((subgroup_size), 1u, 1u))), (((subgroup_size)) ^ 0u)), min((uint(uvec3((subgroup_size), 1u, 1u))), (((subgroup_size)) ^ 0u)))))) | (((((false ? (workgroup_size) : (((bool(bvec4((bool(bvec4(bool((bvec3(bvec4((bvec3(bvec3(bvec3(((injectionSwitch.x > injectionSwitch.y)), true, false)))), true)))), false, true, true))), true, true, false)))) ? (57831u) : subgroup_size))))) | (min((uint(uvec3((subgroup_size), 1u, 1u))), (((((subgroup_size) / 1u))) ^ 0u)))))), subgroup_size)), subgroup_id * subgroup_size, subgroup_id * subgroup_size)), 0u))) + subgroup_local_id;
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   if(((bool((((injectionSwitch.x < injectionSwitch.y)) && (bool(((((injectionSwitch.x > injectionSwitch.y))) || false))))))))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((false))
  barrier();
 atomicStore(write_val, uint(virtual_gid), 4, 64, 0);
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   if((((injectionSwitch.x > (mix(float((mix(float(injectionSwitch.y), float((9.2)), bool(false)))), float((93.83)), bool(false)))))))
    barrier();
   if(((true && (false))))
    {
     if(((false || (false))))
      barrier();
     barrier();
    }
   if(((true && (((! (! (true && ((false || (! ((false || ((bool(bvec4(((! (((((! (! (! (! ((bool(bool((injectionSwitch.x > injectionSwitch.y)))))))))))))) || false), true, true, false)))))))))))))))))
    {
     if((false))
      barrier();
     if((((((injectionSwitch.x > (((vec2(injectionSwitch[0], injectionSwitch[1])).y) - 0.0))) && true))))
      barrier();
     if((false))
      barrier();
     barrier();
     if((! (! ((true && ((false)))))))
      barrier();
    }
   barrier();
   if((false))
    barrier();
   if((((! ((bool(bvec3(! ((injectionSwitch.x > injectionSwitch.y)), false, ((injectionSwitch.x < injectionSwitch.y))))))))))
    barrier();
   if((! (((((! ((((bool((((bvec2(bvec4(bvec2(bvec3(bvec2(bvec4((bvec2(bvec2((bvec2(bvec2(bvec2((((((injectionSwitch.x > (vec2(mat2x3(injectionSwitch, 0.0, 1.0, 1.0, 1.0))).y))) || false) && ((injectionSwitch.x < injectionSwitch.y))), ((injectionSwitch.x > injectionSwitch.y))))))))), false, true)), ((injectionSwitch.x < (min(injectionSwitch.y, (float(mat4x2(injectionSwitch.y, 1.0, 1.0, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0)), 0.0))))))))), ((injectionSwitch.x > injectionSwitch.y)), false)))))))))))) || false)) && true)))
    barrier();
   if((false))
    barrier();
   if((false || ((false))))
    {
     if((false))
      barrier();
     if((false))
      barrier();
     barrier();
    }
   if((((false) || false)))
    barrier();
   if(((bool(bvec4(false, false, true, false)))))
    barrier();
   if(((bool(bvec4(false, false, false, true)))))
    barrier();
   if((((false || ((bool(bvec3(((! (! (false)))), true, ((injectionSwitch.x < injectionSwitch.y)))))))) && true))
    {
     if(((! (! (! (! ((! (! (! (((! (((((! (! ((((injectionSwitch.x < injectionSwitch.y)) && (false))))) || (false || ((((injectionSwitch.x > injectionSwitch.y)))))))))) && true))))))))))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
     if(((((((bool(bvec4(false, true, false, true))) || false))) || false)))
      {
       if((false))
        barrier();
       barrier();
      }
     barrier();
     if((false))
      barrier();
    }
  }
 if((false))
  {
   if((false))
    barrier();
   if((((((injectionSwitch.x > injectionSwitch.y)))) && true))
    barrier();
   if((! (! ((((false)) || false)))))
    barrier();
   barrier();
  }
 uint read_val = atomicLoad(write_val, 4, (~ (((0 | 0) ^ (((~ (64)) >> ((0 << (int(0))) | 0)))))), 0);
 if((((injectionSwitch.x > ((min(((((((((min(injectionSwitch.x, injectionSwitch.x))) / 1.0) > injectionSwitch.y)) ? ((((sqrt(vec2(1.0, 1.0)) * (injectionSwitch))) + vec2(0.0, (min((float(mat2x4(0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0))), (mix(float(0.0), float((- 74.92)), bool(false)))))))) : injectionSwitch)).y) - 0.0, (float(mat4x2(((((((((min(injectionSwitch.x, injectionSwitch.x))) / 1.0) > injectionSwitch.y)) ? ((((sqrt(vec2(1.0, 1.0)) * (injectionSwitch))) + vec2(0.0, (min((float(mat2x4(0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0))), (mix(float(0.0), float((- 74.92)), bool(false)))))))) : injectionSwitch)).y) - 0.0, sqrt(1.0), 1.0, 0.0, 0.0, 0.0, 0.0, sin(0.0)))))))))))
  {
   if((false))
    {
     if((((true && ((injectionSwitch.x > injectionSwitch.y))))))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   if(((((! ((! (! (! (false))))))) && true)))
    barrier();
   if((((((injectionSwitch.x > injectionSwitch.y) && true)))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(((false || (false))))
      barrier();
     barrier();
    }
   if((false))
    {
     if((false))
      barrier();
     if((((! ((true && ((! (! (! ((injectionSwitch.x > injectionSwitch.y))))))))))))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   if(((bool(bvec4(((((((bool((bvec3(bvec3(bvec3(((bool(bvec2((false || (false)), true))) || false), true, true)))))) || false) || false)))), false, false, (false || (((! (! (! (! (((true && ((false)))) && true)))))))))))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
  }
 if((! (! ((false)))))
  barrier();
 if(((! ((true && (! (bool((bvec2(bvec4((bvec2(bvec4(bvec2((false), false), true, false))), true, true)))))))))))
  {
   if((false))
    barrier();
   barrier();
   if((false))
    barrier();
  }
 ((((buf[virtual_gid] = uint(subgroupAllEqual((min(read_val, read_val))))) + 0u) << 0u));
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
