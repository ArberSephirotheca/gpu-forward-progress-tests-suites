#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec4 GLF_merged4_0_1_13_1_1_8_2_1_11_3_1_17num_workgroupread_valsubgroup_idsubgroup_local_id;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((((injectionSwitch.x > ((injectionSwitch.y) / exp(0.0))))))
  return;
 uint subgroup_id = gl_SubgroupID;
 if((false))
  return;
 if((false))
  return;
 GLF_merged4_0_1_13_1_1_8_2_1_11_3_1_17num_workgroupread_valsubgroup_idsubgroup_local_id.z = subgroup_id;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((((((injectionSwitch) + vec2(0.0, 0.0)).x > injectionSwitch.y))))
  return;
 if((false))
  {
   if((((true && ((bool(bvec4(((((true ? (min(((min((vec2(vec2(((false ? (vec2(9762.6803, 26.36)) : injectionSwitch))))), (mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2((4344.8905), (vec2(49.59, (sqrt(0.0) + ((clamp(6.3, 6.3, (mix(float((- 95.36)), float(6.3), bool(true)))))))).g)), bvec2(false, false)))))) * mat2(1.0), ((min((vec2(vec2(((false ? (vec2(9762.6803, 26.36)) : injectionSwitch))))), (mix(((vec2((injectionSwitch)[0], (injectionSwitch)[1])) + vec2(0.0, 0.0)), vec2((4344.8905), (vec2(49.59, 6.3).g)), bvec2(false, false)))))) * mat2(1.0))) : (injectionSwitch)))).x > ((false ? (75.64) : injectionSwitch.y))), true, (((float(mat3x2(injectionSwitch.x, 0.0, 0.0, 0.0, 1.0, abs(1.0)))) > injectionSwitch.y)), false))))))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(((! ((! (! (! (false))))))))
        return;
       return;
      }
     barrier();
    }
   if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
    return;
   if((false))
    return;
   if((false))
    barrier();
   if(((false || (((injectionSwitch.x > injectionSwitch.y))))))
    {
     if((false))
      barrier();
     if((false))
      {
       if((false))
        return;
       if((false))
        barrier();
       return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((false))
        barrier();
      }
     if((false))
      barrier();
     if((false))
      {
       if(((((((((true ? float(mat4x2((float(mat3(injectionSwitch.x, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0))), 1.0, sqrt(1.0), 0.0, (injectionSwitch.x), 0.0, 0.0, 1.0)) : (6.1)))) * 1.0)) > injectionSwitch.y))))
        {
         if((false))
          barrier();
         return;
        }
       if((false))
        return;
       if(((bool(bvec4((bool(bvec4((! (! (false))), false, true, true))), ((true) || false), false, false)))))
        barrier();
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     return;
    }
   return;
  }
 if((false))
  {
   if((false))
    return;
   barrier();
  }
 if((false))
  barrier();
 if((false))
  return;
 if((bool(bool((false)))))
  return;
 if((((bool(bvec4(((float(mat3x4(injectionSwitch.x, 1.0, 0.0, 1.0, abs(0.0), 0.0, 1.0, 1.0, 1.0, 1.0, length(vec2(0.0, 0.0)), 1.0))) > (max(injectionSwitch, injectionSwitch)).y), false, true, ((injectionSwitch.x > injectionSwitch.y))))))))
  {
   if((((false) && true)))
    return;
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      return;
     barrier();
    }
   return;
  }
 if((false))
  return;
 uint subgroup_size = gl_SubgroupSize;
 if((((((false) || false)) || false)))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((false))
  return;
 if((false))
  return;
 if((false))
  return;
 if((false))
  barrier();
 if(((bool(bvec4(false, ((injectionSwitch.x < injectionSwitch.y)), true, false)))))
  barrier();
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  barrier();
 GLF_merged4_0_1_13_1_1_8_2_1_11_3_1_17num_workgroupread_valsubgroup_idsubgroup_local_id.w = subgroup_local_id;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if((false))
    {
     if((false))
      return;
     barrier();
    }
   barrier();
  }
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 uint num_workgroup = gl_NumWorkGroups.x;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 GLF_merged4_0_1_13_1_1_8_2_1_11_3_1_17num_workgroupread_valsubgroup_idsubgroup_local_id.x = num_workgroup;
 if((false))
  {
   if((((((true ? (vec2(mat2x3(injectionSwitch, 0.0, 0.0, 1.0, 0.0))) : (vec2(- 9.0, - 0.5)))).x > injectionSwitch.y))))
    barrier();
   return;
   if((false))
    return;
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = ((gl_WorkGroupID) / uvec3(1u, 1u, 1u)).x;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if((false))
  barrier();
 if((false))
  {
   if(((true && (false))))
    return;
   if((false))
    return;
   if((false))
    barrier();
   if((false))
    {
     if((false))
      return;
     return;
    }
   if((false))
    barrier();
   return;
   if((((injectionSwitch.x > ((injectionSwitch) * mat2(1.0)).y))))
    return;
   if((false))
    return;
  }
 if((false))
  return;
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  return;
 if((false))
  return;
 if(((((((min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))) && ((injectionSwitch.x < injectionSwitch.y)))))
  {
   if((false))
    barrier();
   if((false))
    return;
   if(((bool(bvec2(((injectionSwitch.x > injectionSwitch.y)), false)))))
    return;
   return;
  }
 uint virtual_gid = ((((0u + ((false ? (workgroup_id) : (((min(workgroup_base, (1u * (workgroup_base))))) | 0u) + (clamp(((GLF_merged4_0_1_13_1_1_8_2_1_11_3_1_17num_workgroupread_valsubgroup_idsubgroup_local_id) ^ uvec4(0u, 0u, 0u, 0u)).z * (1u * (((subgroup_size) << (0u >> (uint(0u)))))), (clamp(((clamp((((GLF_merged4_0_1_13_1_1_8_2_1_11_3_1_17num_workgroupread_valsubgroup_idsubgroup_local_id.z) * 1u)) << 0u, (((GLF_merged4_0_1_13_1_1_8_2_1_11_3_1_17num_workgroupread_valsubgroup_idsubgroup_local_id.z) * 1u)) << 0u, (((GLF_merged4_0_1_13_1_1_8_2_1_11_3_1_17num_workgroupread_valsubgroup_idsubgroup_local_id.z) * 1u)) << 0u))) * ((subgroup_size) << (0u >> (uint(0u)))), GLF_merged4_0_1_13_1_1_8_2_1_11_3_1_17num_workgroupread_valsubgroup_idsubgroup_local_id.z * ((subgroup_size) << (0u >> (uint(0u)))), (clamp(GLF_merged4_0_1_13_1_1_8_2_1_11_3_1_17num_workgroupread_valsubgroup_idsubgroup_local_id.z, GLF_merged4_0_1_13_1_1_8_2_1_11_3_1_17num_workgroupread_valsubgroup_idsubgroup_local_id.z, GLF_merged4_0_1_13_1_1_8_2_1_11_3_1_17num_workgroupread_valsubgroup_idsubgroup_local_id.z)) * ((subgroup_size) << (0u >> (uint(((0u) - (0u >> (uint(5u)))))))))), GLF_merged4_0_1_13_1_1_8_2_1_11_3_1_17num_workgroupread_valsubgroup_idsubgroup_local_id.z * ((min((subgroup_size), (subgroup_size))) << (0u >> (uint(0u)))))) + (uvec4(0u, 0u, 0u, 0u) | (((GLF_merged4_0_1_13_1_1_8_2_1_11_3_1_17num_workgroupread_valsubgroup_idsubgroup_local_id) ^ uvec4(0u, 0u, 0u, 0u)))).w)))) | 0u));
 if((false))
  {
   if((false))
    {
     if((((injectionSwitch.x > (clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
      return;
     return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if((! (! (((((bool(bvec2((bool(bvec3((clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, ((injectionSwitch.x < injectionSwitch.y)), true))), false))))))))))
  {
   if((false))
    return;
   return;
  }
 atomicStore(write_val, uint(virtual_gid), 4, 64, ((0) >> 0));
 if((false))
  return;
 uint read_val = atomicLoad(write_val, (clamp(((max(max(((4) | (4)), 4), max(((4) | (4)), 4)))), 4, 4)), 64, 0);
 if((false))
  {
   if((((((injectionSwitch.x > injectionSwitch.y)))) && ((injectionSwitch.x < injectionSwitch.y))))
    barrier();
   return;
  }
 GLF_merged4_0_1_13_1_1_8_2_1_11_3_1_17num_workgroupread_valsubgroup_idsubgroup_local_id.y = (uint(uint(read_val)));
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   barrier();
  }
 if((((false)) || false))
  {
   if((false))
    return;
   return;
  }
 if(((bool((bvec3(bvec4((bvec3(bvec3(bvec3(false, true, false)))), true)))))))
  barrier();
 if((false))
  return;
 buf[virtual_gid] = uint(subgroupAllEqual(GLF_merged4_0_1_13_1_1_8_2_1_11_3_1_17num_workgroupread_valsubgroup_idsubgroup_local_id.y));
 if(((((((clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y)) || false))))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
     if((false))
      return;
    }
   if((false))
    barrier();
   if((false || ((((injectionSwitch.x > injectionSwitch.y))))))
    {
     if((false))
      return;
     barrier();
    }
   if((((! (! (bool(bvec4(false, true, true, false))))))))
    {
     if((false))
      return;
     if((false))
      barrier();
     return;
    }
   if(((((min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     if((false))
      {
       if((false))
        return;
       if((false))
        barrier();
       return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false || ((((injectionSwitch.x > injectionSwitch.y))))))
      barrier();
     return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((((false)) || false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((((false) || false)))
      {
       if((false))
        barrier();
       return;
      }
    }
   if((false))
    return;
   if((false))
    {
     if((false))
      barrier();
     if((false))
      return;
     return;
     if((false))
      return;
    }
   if((((((injectionSwitch.x > injectionSwitch.y) || ((injectionSwitch.x > injectionSwitch.y)))))))
    {
     if(((bool(bvec2(false, false)))))
      {
       if((false))
        return;
       return;
      }
     if((false))
      {
       if((false))
        {
         if((false))
          return;
         return;
        }
       if((false))
        barrier();
       return;
      }
     return;
    }
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
