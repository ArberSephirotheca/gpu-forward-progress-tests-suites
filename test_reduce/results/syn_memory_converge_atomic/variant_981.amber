#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(((((clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
  barrier();
 if(((! (! ((false || (false || ((false)))))))))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if((false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = ((gl_NumWorkGroups) / ((uvec3(1u, 1u, 1u)) << uvec3(0u, 0u, 0u))).x;
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((((injectionSwitch.x > (min(injectionSwitch.y, injectionSwitch.y))))))
  {
   if((! (! ((false)))))
    barrier();
   barrier();
   if((((false) || ((injectionSwitch.x > injectionSwitch.y)))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     barrier();
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((true && ((injectionSwitch.x > injectionSwitch.y))))))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if((false))
      barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
  }
 if((false))
  barrier();
 if((((false)) || false))
  barrier();
 if((false))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 if((false))
  barrier();
 if((((((! (((false || (false)) || ((! (! (((((! ((injectionSwitch.x > (((false ? (injectionSwitch) : (true ? injectionSwitch : (vec2(- 20.57, 94.27)))))).y))) && true)))))) || false))))) && ((injectionSwitch.x < injectionSwitch.y))))))
  {
   if((((((((((bool(bvec2(! ((bool(bool(! (bool(bvec4(((! ((! ((! (! (! (! (injectionSwitch.x > injectionSwitch.y)))))))))), true, true, true))))))), false))) || false)))))) || false)))
    barrier();
   barrier();
   if((false))
    barrier();
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(((bool(bvec4(false, true, (! (! (((((injectionSwitch.x < injectionSwitch.y)) || false))))), true)))))
  barrier();
 if((true && ((true && ((false))))))
  barrier();
 if((false))
  barrier();
 if((((bool(bvec4(bool(bvec2(((true) || false), ((injectionSwitch.x > injectionSwitch.y)))), true, true, true)))) && ((false))))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 uint workgroup_base = workgroup_size * workgroup_id;
 if(((bool(bvec4(false, true, ((injectionSwitch.x > injectionSwitch.y)), false)))))
  barrier();
 uint virtual_gid = (uint(uint(((false ? (59436u) : (((0u ^ (workgroup_base + subgroup_id * subgroup_size)) | (0u ^ (workgroup_base + subgroup_id * subgroup_size))))))))) + subgroup_local_id;
 if((false))
  barrier();
 if((false))
  {
   if((((injectionSwitch.x > (mix(float(injectionSwitch.y), float((- 639.149)), bool(false)))))))
    barrier();
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 atomicStore(write_val, (0u | ((((clamp(uint(virtual_gid), uint(virtual_gid), uint((((min((bool((! (! (bool(true)))))) ? virtual_gid : (subgroup_id), (bool((! (! (bool(true)))))) ? virtual_gid : (subgroup_id))))))))) | (((((clamp(uint((((max(((max((((((uint(uint(virtual_gid))) - 0u) >> 0u)) ^ 0u), (uint(uint(virtual_gid))) - 0u))), ((((uint(uint(virtual_gid))) - 0u)) | (((uint(uint(virtual_gid))) - 0u))))) | uint((injectionSwitch.x))))), uint(uint(uint(virtual_gid))), uint(uint(uint((~ ((~ (~ (((~ ((0u | ((~ ((~ (~ ((~ (~ (~ ((uint(uvec3(virtual_gid, 0u, 1u)))))))))))))))) - 0u))))))))))) | (clamp(uint((((max(((max((((((uint(uint(virtual_gid))) - 0u) >> 0u)) ^ 0u), (uint(uint(virtual_gid))) - 0u))), ((((uint(uint(virtual_gid))) - 0u)) | (((uint(uint(virtual_gid))) - 0u))))) | uint((injectionSwitch.x))))), uint(uint(uint(virtual_gid))), uint(uint(uint((~ ((~ (~ (((~ ((0u | ((~ ((~ (~ ((~ (~ (~ ((uint(uvec3(virtual_gid, 0u, 1u)))))))))))))))) - 0u)))))))))))))))))), 4, 64, 0);
 uint read_val = atomicLoad(write_val, 4, 64, 0);
 buf[virtual_gid] = uint(subgroupAllEqual(read_val));
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
