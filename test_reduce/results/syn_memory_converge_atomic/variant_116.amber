#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(((bool((bvec2(bvec4(bvec2(((injectionSwitch.x > injectionSwitch.y)), true), true, true)))))))
  barrier();
 if((false))
  barrier();
 if(((((! (! (! (! (((true && (injectionSwitch.x > (mat2(1.0) * (injectionSwitch)).y))))))))))))
  {
   if((false))
    barrier();
   if((((! (! ((injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
   if((false))
    barrier();
   barrier();
  }
 if(((! (! (false)))))
  barrier();
 if(((! (! (false)))))
  {
   if((! (! ((((false)) && true)))))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if(((((! ((((bool(bvec3(! (((injectionSwitch.x > injectionSwitch.y))), true, true))) && true))))) && true)))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(((! (! ((! ((! (! ((bool((bvec2(bvec4((bvec2((bvec3(((bvec3(((bvec3(bvec3(bvec3(bvec4(bvec3(bvec3(bvec4(bvec3(bvec3(bvec2(! (((bool(bvec4((false), ((((bool(bvec2(true && (false), false)))) || false)), false, false))) || (((((((false || (false))) || false)) || false)) && true))), true), ((injectionSwitch.x < injectionSwitch.y)))), false))), true))))))))))))), true, false)))))))))))))))
  barrier();
 if((false))
  barrier();
 if(((false || (((((((injectionSwitch.x > injectionSwitch.y) || false)))) && true)))))
  {
   if((false))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    {
     if((false))
      barrier();
     if(((bool(bvec2(((false) && true), false)))))
      {
       if((false))
        barrier();
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(((! (! (false)))))
        barrier();
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
       if((false))
        barrier();
      }
     barrier();
    }
   barrier();
   if((! ((((bool(bvec3(! ((! (! ((false))))), false, (true && ((! (! (((injectionSwitch.x < injectionSwitch.y)))))))))))) || ((injectionSwitch.x > injectionSwitch.y)))))
    {
     if((false))
      barrier();
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     barrier();
    }
   if(((false || (false))))
    barrier();
  }
 if((((((injectionSwitch) * (transpose((mat2(mat3x2(transpose(mat2(1.0)))))))).x > injectionSwitch.y))))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if((((((injectionSwitch) / exp(vec2(0.0, 0.0))).x > injectionSwitch.y))))
  barrier();
 if(((bool(bvec3(((((false) || false)) || false), true, true)))))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if((false))
  barrier();
 if((false))
  barrier();
 if((((((injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y))))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((false))
  barrier();
 if((((((false || (((((! (! ((! (! ((((((max(((mix(vec2((1.6), (vec2(mat3x4((clamp(injectionSwitch, injectionSwitch, injectionSwitch)) * mat2(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0)))[1]), vec2((vec2(mat3x4((clamp(injectionSwitch, injectionSwitch, injectionSwitch)) * mat2(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0)))[0], (- 0.5)), bvec2(true, false)))), (clamp(injectionSwitch, injectionSwitch, injectionSwitch)) * mat2(1.0))))) / vec2(1.0, 1.0))).x > injectionSwitch.y))))))) && true)))))) || ((injectionSwitch.x > (vec2((min(injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1])).y)))))
  {
   if(((bool((bvec2(bvec2(bvec2(false, true))))))))
    barrier();
   if((false))
    barrier();
   if(((((max(injectionSwitch, (vec2(vec3(injectionSwitch, log(1.0)))))).x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     barrier();
    }
   if(((false || ((! (! (false)))))))
    barrier();
   barrier();
   if((false))
    barrier();
   if((bool(bool((((injectionSwitch.x > injectionSwitch.y)))))))
    {
     if((false))
      barrier();
     barrier();
    }
  }
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((false) || (! (! (((injectionSwitch.x > injectionSwitch.y))))))))
      barrier();
     barrier();
    }
   barrier();
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if((false))
  barrier();
 if((false))
  barrier();
 if(((! ((bool(bvec2(! (false), false)))))))
  {
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if((((injectionSwitch.x > (clamp(injectionSwitch.y, injectionSwitch.y, (max(injectionSwitch.y, injectionSwitch.y))))))))
    barrier();
   if((false))
    barrier();
   if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(((((bool(bvec2(((injectionSwitch.x > injectionSwitch.y) || false), true)))))))
  barrier();
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((((((injectionSwitch.x > injectionSwitch.y)))) || false))
  {
   if((false))
    {
     if((false))
      barrier();
     barrier();
     if((false))
      barrier();
    }
   if((false))
    barrier();
   if((bool(bvec2((false), true))))
    barrier();
   if((false))
    {
     if((false))
      {
       if(((bool(bvec2(false, true)))))
        barrier();
       barrier();
      }
     if(((true && (false))))
      barrier();
     if((false))
      barrier();
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   barrier();
   if((false))
    barrier();
  }
 uint workgroup_size = ((true ? (clamp((min(gl_WorkGroupSize.x, gl_WorkGroupSize.x)), (min(gl_WorkGroupSize.x, gl_WorkGroupSize.x)), (min(gl_WorkGroupSize.x, gl_WorkGroupSize.x)))) : (num_workgroup)));
 if(((((! (! (injectionSwitch.x > injectionSwitch.y)))))))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   barrier();
   if(((((min((mix(float((- 240.195)), float(injectionSwitch.x), bool(true))), (clamp(((injectionSwitch.x) - 0.0), injectionSwitch.x, (float(mat2x3(injectionSwitch.x, 1.0, 1.0, 1.0, 1.0, 1.0))))))) > injectionSwitch.y))))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
  }
 uint workgroup_id = ((((true ? gl_WorkGroupID : (uvec3(151274u, 184445u, 196319u))))) ^ (uvec3(0u, 0u, 0u) + (uvec3(0u, 0u, 0u)))).x;
 if((! (((! ((((injectionSwitch.x > injectionSwitch.y)))))) && true)))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((((false)) || false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((((bool(bvec4((false || (((! (! ((! (! ((((((false || (false))) && true)) || false)))))))))), ((injectionSwitch.x < ((mix(vec2((float(146334u)), (min((mix(vec2(((false ? (699.770) : (injectionSwitch)[0])), (injectionSwitch)[1]), vec2((9.8), (9921.5245)), bvec2(false, ((injectionSwitch.x > injectionSwitch.y)))))[1], (mix(vec2(((false ? (699.770) : (injectionSwitch)[0])), (injectionSwitch)[1]), vec2((9.8), (9921.5245)), bvec2(false, ((injectionSwitch.x > injectionSwitch.y)))))[1]))), vec2((mix(vec2(((false ? (699.770) : (injectionSwitch)[0])), (injectionSwitch)[1]), vec2((9.8), (9921.5245)), bvec2(false, ((injectionSwitch.x > injectionSwitch.y)))))[0], (- 6.9)), bvec2(true, false)))).y)), ((injectionSwitch.x < injectionSwitch.y)), true))) || false)))
  {
   if((false))
    {
     if(((bool(bvec2(false, false)))))
      barrier();
     barrier();
    }
   barrier();
   if((false))
    barrier();
  }
 uint workgroup_base = (max(workgroup_size, workgroup_size)) * workgroup_id;
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   barrier();
   if((false))
    barrier();
  }
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((injectionSwitch.x > (mat2(1.0) * (injectionSwitch)).y))))
    barrier();
   if((! (((((! ((false))) || false)) && ((injectionSwitch.x < injectionSwitch.y))))))
    {
     if((false))
      barrier();
     barrier();
    }
   barrier();
  }
 uint virtual_gid = ((workgroup_base + (0u ^ (((((subgroup_id) | (subgroup_id)))) | ((min((uint(uvec3((((subgroup_id) | (subgroup_id))), ((0u) >> (0u ^ 0u)), 1u))), (((subgroup_id) | (subgroup_id)))))))) * subgroup_size + subgroup_local_id) | ((((min(((((workgroup_base) * ((1u << (uint(2u))) >> (uint(2u)))) + (0u ^ (((subgroup_id) | (subgroup_id)))) * subgroup_size) / 1u), (clamp(((true ? ((workgroup_base) * ((1u << (uint(2u))) >> (uint(2u)))) + (0u ^ (((subgroup_id) | (subgroup_id)))) * subgroup_size : (subgroup_id))), ((workgroup_base) * ((1u << (uint(2u))) >> (uint(2u)))) + (0u ^ (((subgroup_id) | (subgroup_id)))) * subgroup_size, ((workgroup_base) * ((1u << (uint(2u))) >> (uint(2u)))) + (0u ^ (((subgroup_id) | (subgroup_id)))) * subgroup_size)))) + ((((injectionSwitch.x < injectionSwitch.y)) ? ((subgroup_local_id) | (subgroup_local_id)) : (workgroup_base)))) - 0u)));
 atomicStore(write_val, uint((~ (((min((~ (virtual_gid)), (~ (virtual_gid))))) - (0u & 176244u)))), 4, 64, 0);
 if(((true && (! (! ((false)))))))
  {
   if((false))
    barrier();
   barrier();
  }
 if(((((((((bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, true, false)))) || false)) && true)))))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   if(((bool(bvec3((bool(((bool(((false) && true))) && true))), false, false)))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if((((! (! ((injectionSwitch.x > injectionSwitch.y)))))))
      {
       if(((((min(injectionSwitch, (cos(vec2(0.0, 0.0)) * (injectionSwitch)))).x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if((false))
      barrier();
     barrier();
    }
   barrier();
  }
 if((false))
  barrier();
 if((((false || (false || (false))))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     barrier();
    }
   barrier();
   if((false))
    barrier();
   if((((injectionSwitch.x > ((injectionSwitch.y) - 0.0)))))
    barrier();
   if((false))
    barrier();
  }
 if(((! ((false || (! ((! (! (false))))))))))
  barrier();
 uint read_val = atomicLoad(write_val, 4, 64, 0);
 if((false))
  barrier();
 if((((false)) || false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   if(((((max(((injectionSwitch) / vec2(1.0, 1.0)), injectionSwitch)).x > injectionSwitch.y))))
    barrier();
   barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 ((0u | (0u)) + ((~ (~ ((~ (~ (buf[virtual_gid] = uint(subgroupAllEqual(read_val))))))))));
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((((injectionSwitch.x > (sqrt(1.0) * (injectionSwitch.y))))))
  barrier();
 if((((((! ((false || (! (((true && ((false))) && true)))))) && true)) || (((injectionSwitch.x > injectionSwitch.y))))))
  {
   if((false))
    {
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   if(((true && (! (! ((false)))))))
    barrier();
   barrier();
  }
 if(((false || (((bool(bool((((false)) && true)))) || false)))))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  {
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((false))
  {
   if((false))
    barrier();
   if((false))
    {
     if((false || ((true && ((((injectionSwitch.x > (float(mat2x4(injectionSwitch.y, 0.0, 0.0, 1.0, 0.0, sqrt(0.0), 1.0, 1.0)))))))))))
      barrier();
     barrier();
    }
   barrier();
   if((false))
    barrier();
  }
 if((false))
  barrier();
 if((false))
  {
   if(((false || ((bool(bvec4(false, false, false, false)))))))
    barrier();
   barrier();
  }
 if(((((bool(bool(bool(bool((false))))))) || false)))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   barrier();
   if((false))
    barrier();
  }
 if((false))
  barrier();
 if((false))
  barrier();
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
