#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((false))
  {
   if(false)
    {
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
  }
 if(true)
  {
   if(true)
    {
     if((false))
      barrier();
    }
   else
    {
     if(((bool(bvec4(false, false, true, false)))))
      barrier();
    }
  }
 else
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if((((false) || false)))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(true)
  {
   if((false))
    barrier();
  }
 else
  {
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 do
  {
   for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > 0; _injected_loop_counter --)
    {
     for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != 1; _injected_loop_counter ++)
      {
       if((false))
        {
         do
          {
           for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
            {
             for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
              {
               if((false))
                {
                 if((false))
                  {
                   if(((bool(bvec3(false, false, true)))))
                    barrier();
                   if(((bool(bvec4(false, false, false, true)))))
                    {
                     if((false))
                      barrier();
                     barrier();
                    }
                   barrier();
                  }
                 do
                  {
                   barrier();
                   if(false)
                    {
                    }
                   else
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(((! (((! (false)) && true)))))
                        barrier();
                       for(int _injected_loop_counter = 1; _injected_loop_counter > (int((injectionSwitch.x)) | (0 >> (int(0)))); _injected_loop_counter --)
                        {
                         barrier();
                        }
                      }
                    }
                  }
                 while(false);
                 if((false))
                  barrier();
                }
               for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
                {
                 if(false)
                  {
                   if(((false || (false))))
                    barrier();
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if((((false) && true)))
                    {
                     if(((bool((bvec3(bvec4(bvec3((true && (false)), true, false), true)))))))
                      barrier();
                     barrier();
                    }
                   if((false))
                    barrier();
                  }
                 else
                  {
                   if((false))
                    barrier();
                   if(true)
                    {
                     if(((((injectionSwitch.x > injectionSwitch.y)) || (false))))
                      {
                       if((false))
                        barrier();
                       barrier();
                      }
                     if((false))
                      {
                       for(int _injected_loop_counter = (1 & 1); _injected_loop_counter != 0; _injected_loop_counter --)
                        {
                         if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
                          {
                           for(int _injected_loop_counter = 0; _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
                            {
                             barrier();
                            }
                           if((false))
                            barrier();
                          }
                         if((false))
                          barrier();
                         if((false))
                          barrier();
                         if(true)
                          {
                           barrier();
                          }
                         else
                          {
                          }
                        }
                      }
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      {
                       if((false))
                        barrier();
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       barrier();
                      }
                     barrier();
                     do
                      {
                       if((false))
                        {
                         for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
                          {
                           if((false))
                            {
                             if(false)
                              {
                              }
                             else
                              {
                               barrier();
                              }
                            }
                           barrier();
                          }
                         if((false))
                          barrier();
                        }
                       if(((true && (false))))
                        barrier();
                      }
                     while(false);
                    }
                   else
                    {
                     if((false))
                      {
                       if(((! (! ((! (! (false))))))))
                        barrier();
                       barrier();
                      }
                    }
                   do
                    {
                     if((false))
                      barrier();
                    }
                   while(((((injectionSwitch.x > injectionSwitch.y))) && ((injectionSwitch.x < injectionSwitch.y))));
                   if((false))
                    barrier();
                   if((false))
                    barrier();
                   for(int _injected_loop_counter = ((- 56336 & 0) | (0 >> ((int(int(int(6))))))); _injected_loop_counter < ((1 << (int(6))) >> (int(6))); _injected_loop_counter ++)
                    {
                     if((false))
                      {
                       if(false)
                        {
                        }
                       else
                        {
                         if((false))
                          barrier();
                         if(((injectionSwitch.x > injectionSwitch.y)))
                          {
                           do
                            {
                             if((((injectionSwitch.x > injectionSwitch.y))))
                              barrier();
                            }
                           while(false);
                          }
                         else
                          {
                           for(int _injected_loop_counter = 1; _injected_loop_counter != (16311 & 0); _injected_loop_counter --)
                            {
                             for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < 1; _injected_loop_counter ++)
                              {
                               if((false))
                                barrier();
                               barrier();
                              }
                             if((((injectionSwitch.x > injectionSwitch.y))))
                              barrier();
                            }
                           if((((injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                          }
                        }
                      }
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                   if((false || (true)))
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      {
                       if((false))
                        barrier();
                       barrier();
                      }
                    }
                   else
                    {
                    }
                   if((false))
                    barrier();
                   for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < 1; _injected_loop_counter ++)
                    {
                     if((false))
                      barrier();
                     for(int _injected_loop_counter = (0 & (- 77974 / - 44939)); _injected_loop_counter != ((1 << (int(7))) >> (int(7))); _injected_loop_counter ++)
                      {
                       if((false))
                        barrier();
                      }
                    }
                   if((false))
                    barrier();
                  }
                }
              }
            }
          }
         while(false);
         if((false))
          {
           do
            {
             if((false))
              barrier();
             if((false))
              {
               if((false))
                barrier();
               barrier();
              }
             if(((injectionSwitch.x < injectionSwitch.y)))
              {
               if((false))
                {
                 if((false))
                  barrier();
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if((false))
                  barrier();
                 barrier();
                }
              }
             else
              {
              }
            }
           while(false);
           if((false))
            barrier();
           barrier();
           for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
            {
             if((false))
              barrier();
             if((false))
              {
               do
                {
                 if((false))
                  barrier();
                 barrier();
                 if((false))
                  {
                   if((false))
                    barrier();
                   barrier();
                  }
                }
               while(false);
               if((false))
                barrier();
              }
            }
          }
        }
      }
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
       if((false))
        barrier();
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
      }
     else
      {
       if((false))
        barrier();
       if((false))
        barrier();
      }
     if((false))
      barrier();
     if((false))
      barrier();
     if((false))
      barrier();
    }
  }
 while(((injectionSwitch.x > injectionSwitch.y)));
 uint subgroup_size = gl_SubgroupSize;
 if(true)
  {
   do
    {
     if((false))
      {
       if((false))
        barrier();
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
   for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
    {
     if((false))
      barrier();
    }
  }
 else
  {
  }
 if(true)
  {
   if(((bool(bvec4(false, false, true, true)))))
    barrier();
   if((bool(bool(false))))
    {
    }
   else
    {
     if(false)
      {
      }
     else
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(true)
          {
           if((false))
            {
             if((false))
              barrier();
             if(true)
              {
               barrier();
              }
             else
              {
              }
             if((false))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((false))
              barrier();
             if((false))
              barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
           if(true)
            {
             if((false))
              barrier();
             if((false))
              barrier();
             if((false))
              {
               if((false))
                barrier();
               barrier();
              }
             if((false))
              barrier();
            }
           else
            {
            }
           if((((false) || false)))
            {
             if(((! (! (false)))))
              barrier();
             if(false)
              {
              }
             else
              {
               if((false))
                barrier();
               if((false))
                {
                 if((false))
                  barrier();
                 barrier();
                }
              }
             barrier();
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           barrier();
          }
         if(true)
          {
           if((false))
            barrier();
          }
         else
          {
          }
         if((false))
          barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if((false))
      barrier();
    }
   if((false))
    {
     do
      {
       if(((! (! (false)))))
        barrier();
       barrier();
      }
     while(false);
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      {
       if((false))
        {
         do
          {
           barrier();
          }
         while(false);
        }
       if((false))
        barrier();
       do
        {
         barrier();
        }
       while(false);
       if((false))
        barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        {
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           if((false))
            barrier();
          }
         else
          {
          }
         if(true)
          {
           if((false))
            barrier();
           barrier();
          }
         else
          {
          }
        }
       barrier();
      }
     if((false))
      barrier();
     for(int _injected_loop_counter = 1; _injected_loop_counter != (- 65830 & 0); _injected_loop_counter --)
      {
       if((false))
        {
         if(false)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            barrier();
           if((false))
            barrier();
          }
         else
          {
           barrier();
          }
         for(int _injected_loop_counter = 1; _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              barrier();
             barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
          }
        }
      }
    }
   if((false))
    {
     do
      {
       do
        {
         if((false))
          barrier();
         if(true)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
          }
        }
       while(false);
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        {
         if((false))
          {
           if((false))
            barrier();
           if((false))
            barrier();
           barrier();
          }
         barrier();
        }
       if(((bool((bvec3(bvec3(bvec3(((injectionSwitch.x > injectionSwitch.y)), false, true))))))))
        barrier();
       if((false))
        {
         do
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         while(false);
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          {
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             barrier();
            }
           else
            {
            }
          }
        }
       barrier();
      }
     while(false);
     if((false))
      {
       if((false))
        barrier();
       if((false))
        barrier();
       for(int _injected_loop_counter = (1 | 1); _injected_loop_counter != (int(ivec3(0, 1, 0))); _injected_loop_counter --)
        {
         if((false))
          barrier();
        }
       if(((! (! (false)))))
        barrier();
       barrier();
      }
     if((false))
      {
       if(true)
        {
         if((false))
          barrier();
         barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
  }
 else
  {
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if((false))
      barrier();
     for(int _injected_loop_counter = 0; _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false || (true)))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     do
      {
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(((false || (false))))
          barrier();
         barrier();
        }
      }
     while(false);
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(false)
    {
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         if(true)
          {
           if((false))
            {
             if(true)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
               do
                {
                 if((false))
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   barrier();
                  }
                 if(((injectionSwitch.x < injectionSwitch.y)))
                  {
                   if((false))
                    barrier();
                   barrier();
                   if((false))
                    barrier();
                  }
                 else
                  {
                  }
                 if((false))
                  {
                   do
                    {
                     if((false))
                      barrier();
                     barrier();
                    }
                   while(((injectionSwitch.x > injectionSwitch.y)));
                  }
                }
               while(false);
               if((false))
                barrier();
              }
             else
              {
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
             if((false))
              barrier();
             if((bool(bvec2((! (! (false))), false))))
              {
              }
             else
              {
               do
                {
                 if((false))
                  {
                   if(((injectionSwitch.x < injectionSwitch.y)))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                 if((false))
                  barrier();
                }
               while(false);
              }
             if((false))
              barrier();
            }
          }
         else
          {
          }
        }
      }
     else
      {
      }
    }
   if((false))
    barrier();
   if((false))
    barrier();
   if(true)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
     do
      {
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
      }
     while(false);
    }
   else
    {
     if((false))
      barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       if(false)
        {
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
           if((false))
            barrier();
          }
         else
          {
           if((false))
            barrier();
          }
        }
       else
        {
         if((false))
          barrier();
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
        }
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
     if(true)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        {
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           barrier();
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
      }
     else
      {
      }
     do
      {
       barrier();
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
    }
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     if(false)
      {
      }
     else
      {
       barrier();
      }
    }
   if((false))
    barrier();
  }
 if((false))
  {
   do
    {
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(false);
   if((false))
    barrier();
  }
 for(int _injected_loop_counter = (0 ^ 0); _injected_loop_counter != 1; _injected_loop_counter ++)
  {
   if((false))
    {
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    {
     if((false))
      barrier();
     if(true)
      {
       if(false)
        {
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          barrier();
         barrier();
        }
      }
     else
      {
      }
    }
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     do
      {
       barrier();
       if((false))
        barrier();
      }
     while(false);
    }
   for(int _injected_loop_counter = ((0 << (int(6))) & (~ 12657)); _injected_loop_counter < ((1 << ((clamp(int(3), ((int(3)) + 0), int(3))))) >> (int(3))); _injected_loop_counter ++)
    {
     if((false))
      barrier();
    }
   do
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     do
      {
       barrier();
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       for(int _injected_loop_counter = 0; _injected_loop_counter < ((0 | 0) | 1); _injected_loop_counter ++)
        {
         if((false))
          barrier();
         if((false))
          barrier();
        }
       if((false))
        barrier();
      }
     while(false);
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
  }
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    {
     if(true)
      {
       barrier();
      }
     else
      {
      }
    }
   if((((false) && true)))
    barrier();
   for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       if((false))
        barrier();
       do
        {
         barrier();
         if((false))
          barrier();
         if((false))
          barrier();
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
       if(((true && (false))))
        barrier();
       if((false))
        barrier();
      }
    }
   if((false))
    barrier();
   barrier();
  }
 do
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     barrier();
    }
  }
 while(false);
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   do
    {
     if(true)
      {
       barrier();
      }
     else
      {
      }
     if((false))
      barrier();
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
   do
    {
     if((false))
      barrier();
     if((false))
      barrier();
    }
   while(false);
  }
 if((false))
  {
   if((false))
    {
     if((false))
      {
       if((false))
        barrier();
       if((false))
        barrier();
       if((false))
        {
         if((false))
          barrier();
         if((false))
          barrier();
         barrier();
        }
       barrier();
       if((false))
        barrier();
       if((false))
        barrier();
      }
     if(false)
      {
       if(((bool((bvec2(bvec4(bvec2((! (! ((false || (((injectionSwitch.x > injectionSwitch.y))))))), false), false, false)))))))
        barrier();
      }
     else
      {
       if(true)
        {
         if(true)
          {
           barrier();
          }
         else
          {
          }
        }
       else
        {
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(true)
        {
         barrier();
        }
       else
        {
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         barrier();
        }
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       barrier();
      }
     if((false))
      barrier();
    }
   else
    {
     if(((bool(bvec3((bool(bvec2(false, true))), true, true)))))
      barrier();
    }
   for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
    {
     barrier();
    }
  }
 if((false))
  barrier();
 if(((! (((! (false)) && true)))))
  barrier();
 if((false))
  barrier();
 if((false))
  {
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   for(int _injected_loop_counter = (min(1, 1)); _injected_loop_counter > 0; _injected_loop_counter --)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       barrier();
      }
     if((false))
      barrier();
     do
      {
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
      }
     while(false);
     if(true)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     else
      {
       if(false)
        {
        }
       else
        {
         if(((true && (false))))
          {
           do
            {
             for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
              {
               if((false))
                {
                 if((false))
                  barrier();
                 barrier();
                }
               barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if((false))
                barrier();
              }
            }
           while(false);
          }
        }
      }
    }
   if(true)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
    }
   if((false))
    barrier();
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(false)
  {
  }
 else
  {
   if((false))
    {
     if((true && ((bool(bvec4(true, false, false, true))))))
      {
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
      }
     else
      {
       if((false))
        barrier();
      }
     if((false))
      {
       do
        {
         for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
          {
           barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            barrier();
           if((false))
            {
             if(((true && (false))))
              barrier();
             if((false))
              {
               if((false))
                barrier();
               barrier();
              }
             barrier();
            }
          }
         if((false))
          barrier();
        }
       while(false);
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(((false || (((false) && true)))))
      barrier();
     if((false))
      barrier();
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     barrier();
    }
  }
 if((false))
  {
   if(true)
    {
     if((false))
      barrier();
     do
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(false)
        {
        }
       else
        {
         barrier();
        }
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
    }
   else
    {
    }
   if(((true && (((injectionSwitch.x > injectionSwitch.y))))))
    barrier();
   if((false))
    barrier();
  }
 for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > 0; _injected_loop_counter --)
  {
   if((false))
    barrier();
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(true)
  {
   if(((bool(bool(false)))))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((false) || false)))
        barrier();
       barrier();
      }
     barrier();
    }
   if((false))
    barrier();
  }
 else
  {
  }
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  {
   for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > 0; _injected_loop_counter --)
    {
     barrier();
    }
  }
 if((false))
  barrier();
 do
  {
   if((false))
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        {
         if((false))
          barrier();
         barrier();
         if((false))
          barrier();
        }
       for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
        {
         do
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            {
             if((false))
              barrier();
             barrier();
            }
           if((false))
            barrier();
           barrier();
           for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
            {
             if((false))
              barrier();
             if((false))
              barrier();
            }
           if((false))
            barrier();
          }
         while(false);
        }
      }
     barrier();
    }
  }
 while(false);
 if((false))
  barrier();
 if(((injectionSwitch.x < injectionSwitch.y)))
  {
   if((false))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
      {
       if((false))
        barrier();
       if((false))
        barrier();
       if((false))
        {
         if((false))
          barrier();
         if(((true && (false))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > (1 ^ 1); _injected_loop_counter --)
          {
           barrier();
          }
         if(false)
          {
          }
         else
          {
           if((false))
            {
             if((false))
              {
               if((false))
                barrier();
               if(((injectionSwitch.x > injectionSwitch.y)))
                {
                }
               else
                {
                 barrier();
                }
               if((false))
                barrier();
              }
             barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       if((false))
        {
         if(false)
          {
          }
         else
          {
           barrier();
          }
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
     if(true)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
      }
     if(((true && (false))))
      {
       if(true)
        {
         barrier();
        }
       else
        {
        }
      }
     barrier();
    }
   if((false))
    barrier();
  }
 else
  {
  }
 if((false))
  {
   if((false))
    barrier();
   for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 do
  {
   if((false))
    {
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 while(false);
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 for(int _injected_loop_counter = (1 & 1); _injected_loop_counter != (0 << (int(7))); _injected_loop_counter --)
  {
   if((false))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       if((false))
        barrier();
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       for(int _injected_loop_counter = (1 ^ 1); _injected_loop_counter < 1; _injected_loop_counter ++)
        {
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((false))
              barrier();
             for(int _injected_loop_counter = (0 << (((int(1)) * 1))); _injected_loop_counter < ((1 << (int(5))) >> (int(5))); _injected_loop_counter ++)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             barrier();
             if(((! ((false || (! (false)))))))
              barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             do
              {
               if((false))
                barrier();
              }
             while(false);
             if(false)
              {
               if(((! (! (false)))))
                barrier();
              }
             else
              {
               if((false))
                {
                 if(true)
                  {
                   if((false))
                    barrier();
                  }
                 else
                  {
                  }
                 barrier();
                }
              }
             barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               do
                {
                 barrier();
                }
               while(false);
               if((((false) || false)))
                barrier();
               if((false))
                barrier();
              }
             if((false))
              barrier();
            }
           if((false))
            barrier();
          }
         else
          {
          }
         if((false))
          barrier();
         if((false))
          {
           if((false))
            barrier();
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             if(((true && (((false) && true)))))
              barrier();
             if((false))
              {
               if((false))
                barrier();
               do
                {
                 barrier();
                }
               while(((injectionSwitch.x > injectionSwitch.y)));
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
             if((false))
              barrier();
            }
           else
            {
            }
           if((false))
            barrier();
          }
         for(int _injected_loop_counter = (max(((true ? 1 : (65272))), 1)); _injected_loop_counter != (0 & (- 13043 % - 17134)); _injected_loop_counter --)
          {
           do
            {
             if((false))
              barrier();
             if((false))
              barrier();
            }
           while(false);
          }
         barrier();
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          barrier();
        }
       if((false))
        {
         for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
          {
           if(false)
            {
            }
           else
            {
             barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if((false))
            barrier();
          }
         if((false))
          barrier();
        }
       for(int _injected_loop_counter = 1; _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
        {
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(((false || (false))))
          {
           for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
            {
             if(false)
              {
              }
             else
              {
               do
                {
                 if((false))
                  barrier();
                 if((((false) || false)))
                  {
                   do
                    {
                     barrier();
                     if((false))
                      {
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       barrier();
                      }
                     if((false))
                      barrier();
                    }
                   while((bool(bvec2(false, true))));
                  }
                }
               while(((injectionSwitch.x > injectionSwitch.y)));
              }
            }
           barrier();
          }
        }
       if((false))
        barrier();
      }
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       if((false))
        {
         do
          {
           if((false))
            barrier();
           barrier();
           if((false))
            barrier();
          }
         while(false);
        }
      }
     for(int _injected_loop_counter = 0; _injected_loop_counter != (min((max(1, 1)), (max(1, 1)))); _injected_loop_counter ++)
      {
       if((false))
        barrier();
       if(true)
        {
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              barrier();
             for(int _injected_loop_counter = 0; _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
              {
               barrier();
              }
            }
           if((((false) && true)))
            barrier();
           if((false))
            barrier();
           if(true)
            {
             for(int _injected_loop_counter = 0; _injected_loop_counter != (1 | 1); _injected_loop_counter ++)
              {
               if((false))
                barrier();
               if((false))
                {
                 if((false))
                  barrier();
                 barrier();
                }
               if((false))
                {
                 if((false))
                  barrier();
                 barrier();
                }
               for(int _injected_loop_counter = (0 >> (int(0))); _injected_loop_counter != 1; _injected_loop_counter ++)
                {
                 if((false))
                  barrier();
                 for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
                  {
                   if((false))
                    barrier();
                  }
                }
               if((false))
                {
                 do
                  {
                   barrier();
                  }
                 while(((injectionSwitch.x > injectionSwitch.y)));
                }
               barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                barrier();
               barrier();
              }
            }
           else
            {
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               for(int _injected_loop_counter = 0; _injected_loop_counter != ((1 << (int(3))) >> (int(3))); _injected_loop_counter ++)
                {
                 barrier();
                }
              }
             if((false))
              barrier();
             if(true)
              {
               if((false))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             else
              {
              }
             if((false))
              barrier();
             barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       else
        {
        }
      }
     if((false))
      {
       if((false))
        barrier();
       if((false))
        barrier();
       if((((false) || false)))
        {
         if(((bool(bvec3(false, false, false)))))
          barrier();
         barrier();
        }
       if((false))
        barrier();
       barrier();
      }
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     if((false))
      barrier();
     if((false))
      barrier();
     barrier();
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if((false))
          barrier();
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           barrier();
           if((false))
            {
             if((false))
              barrier();
             barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              {
               if((false))
                barrier();
               barrier();
              }
             barrier();
            }
          }
         else
          {
          }
        }
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
       if((false))
        {
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           if((false))
            barrier();
          }
         else
          {
          }
         for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
          {
           for(int _injected_loop_counter = (97066 & 0); _injected_loop_counter < 1; _injected_loop_counter ++)
            {
             if(((bool(bvec4(false, false, true, false)))))
              barrier();
            }
           if((false))
            barrier();
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
          }
         if((false))
          barrier();
         for(int _injected_loop_counter = 0; _injected_loop_counter < (0 ^ 1); _injected_loop_counter ++)
          {
           if((false))
            barrier();
           if((false))
            barrier();
           if((false))
            barrier();
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(false)
            {
             if((false))
              barrier();
            }
           else
            {
             for(int _injected_loop_counter = ((0 & (- 80425)) << (int(1))); _injected_loop_counter != 1; _injected_loop_counter ++)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((false))
                  barrier();
                 if(((! (((! ((false || (false)))) || false)))))
                  {
                   do
                    {
                     barrier();
                     if((false))
                      barrier();
                    }
                   while(false);
                  }
                 barrier();
                }
              }
            }
          }
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           barrier();
          }
         else
          {
           if((false))
            barrier();
           if((false))
            {
             if((true && (((injectionSwitch.x > injectionSwitch.y)))))
              {
              }
             else
              {
               barrier();
              }
             if((false))
              barrier();
            }
          }
         if((false))
          barrier();
         if((false))
          {
           if((false))
            {
             if((false))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((false))
              {
               if(true)
                {
                 barrier();
                }
               else
                {
                }
              }
             barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if((false))
            barrier();
           barrier();
          }
         if((false))
          {
           if((false))
            barrier();
           if((false))
            {
             if((false))
              barrier();
             barrier();
            }
           barrier();
          }
        }
      }
     if((false))
      barrier();
     if((false))
      {
       for(int _injected_loop_counter = (0 << (int(3))); _injected_loop_counter < 1; _injected_loop_counter ++)
        {
         if((false || (true)))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            barrier();
          }
         else
          {
          }
         if((false))
          barrier();
        }
       if((false))
        barrier();
       if((false))
        {
         for(int _injected_loop_counter = 1; _injected_loop_counter != (int((injectionSwitch.x)) << (((int(0)) ^ 0))); _injected_loop_counter --)
          {
           barrier();
          }
        }
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(false)
      {
       if((false))
        barrier();
       if((false))
        barrier();
       if((false))
        {
         if(true)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
          }
         if(((bool(bvec4(false, true, false, true)))))
          barrier();
        }
      }
     else
      {
       if((false))
        barrier();
       for(int _injected_loop_counter = 0; _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
        {
         do
          {
           if(false)
            {
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
            }
           else
            {
             barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
         while(false);
        }
      }
    }
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    {
     for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
      {
       barrier();
      }
    }
   barrier();
  }
 if((((false) && true)))
  barrier();
 for(int _injected_loop_counter = 1; _injected_loop_counter != (1 ^ 1); _injected_loop_counter --)
  {
   do
    {
     for(int _injected_loop_counter = 0; _injected_loop_counter < ((1 << (int(0))) >> (int(0))); _injected_loop_counter ++)
      {
       do
        {
         if((false))
          barrier();
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
       if((false))
        barrier();
      }
     if((false))
      barrier();
    }
   while(false);
   if((false))
    barrier();
  }
 if((false))
  barrier();
 if((false))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 if(true)
  {
   if((false))
    barrier();
   if((false))
    {
     for(int _injected_loop_counter = ((1 << (int(4))) >> (int(4))); _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
      {
       if((false))
        barrier();
       barrier();
      }
    }
  }
 else
  {
  }
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(false)
    {
    }
   else
    {
     for(int _injected_loop_counter = (((1 << (int(3))) >> (int(3))) & 1); _injected_loop_counter > 0; _injected_loop_counter --)
      {
       do
        {
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(false);
      }
    }
   barrier();
  }
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(true)
  {
   if(false)
    {
     if((false))
      barrier();
     for(int _injected_loop_counter = 0; _injected_loop_counter != (clamp(1, 1, ((1) * 1))); _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
        {
         if((false))
          {
           if(true)
            {
             barrier();
            }
           else
            {
            }
           if(((bool(bvec3((! (! (false))), ((injectionSwitch.x > injectionSwitch.y)), true)))))
            barrier();
          }
        }
      }
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          barrier();
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
       barrier();
      }
    }
   else
    {
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         barrier();
        }
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         barrier();
        }
       while(false);
      }
     if((false))
      barrier();
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != (3687 & 0); _injected_loop_counter --)
        {
         barrier();
        }
      }
     if((false))
      barrier();
     if(false)
      {
      }
     else
      {
       if((((false) && true)))
        barrier();
      }
    }
  }
 else
  {
  }
 if((false))
  barrier();
 uint workgroup_base = workgroup_size * workgroup_id;
 if((false))
  barrier();
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 if((false))
  {
   do
    {
     barrier();
     if((false))
      barrier();
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
  }
 if((false))
  barrier();
 for(int _injected_loop_counter = (33791 & 0); _injected_loop_counter != 1; _injected_loop_counter ++)
  {
   atomicStore(write_val, uint(virtual_gid), 4, 64, 0);
  }
 uint read_val = atomicLoad(write_val, 4, 64, 0);
 if((false))
  barrier();
 if(true)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       if((false))
        barrier();
      }
     while((true && (false)));
     do
      {
       if(false)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if(true)
            {
             for(int _injected_loop_counter = (0 >> (((false ? (- 14922) : int(4))))); _injected_loop_counter < 1; _injected_loop_counter ++)
              {
               if((false))
                barrier();
              }
            }
           else
            {
            }
           if((false))
            {
             do
              {
               if((false))
                barrier();
               if((false))
                barrier();
               barrier();
              }
             while(((injectionSwitch.x > injectionSwitch.y)));
            }
           for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
            {
             do
              {
               if((false))
                barrier();
               barrier();
              }
             while(false);
            }
           if(false)
            {
            }
           else
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if(((true && ((! (! (false)))))))
                barrier();
               for(int _injected_loop_counter = 1; _injected_loop_counter > (0 << (int(8))); _injected_loop_counter --)
                {
                 barrier();
                }
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((false))
              {
               do
                {
                 barrier();
                }
               while(false);
              }
             if(((true && (false))))
              barrier();
             if((false))
              barrier();
            }
          }
         if((false))
          barrier();
        }
       else
        {
         barrier();
        }
      }
     while(false);
    }
  }
 else
  {
   if((false))
    barrier();
  }
 buf[virtual_gid] = uint(subgroupAllEqual(read_val));
 if(((injectionSwitch.x > injectionSwitch.y)))
  {
   if(((! (! (((false) && true))))))
    {
     do
      {
       barrier();
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
    }
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     if((false))
      {
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         if(false)
          {
          }
         else
          {
           for(int _injected_loop_counter = 0; _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
            {
             for(int _injected_loop_counter = 1; _injected_loop_counter != (0 >> ((min(int(1), int(1))))); _injected_loop_counter --)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
               if((false))
                {
                 if((false))
                  barrier();
                 barrier();
                }
              }
            }
           if((false))
            barrier();
          }
        }
       if((false))
        {
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
       for(int _injected_loop_counter = (0 | (1 | 1)); _injected_loop_counter != (0 | 0); _injected_loop_counter --)
        {
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           if((false))
            {
             do
              {
               barrier();
              }
             while(((false) && true));
            }
          }
         else
          {
          }
        }
       for(int _injected_loop_counter = ((int((injectionSwitch.y)) << (int(1))) >> (((true ? (0 | (int(1))) : (- 66052))))); _injected_loop_counter != 0; _injected_loop_counter --)
        {
         if((false))
          {
           do
            {
             barrier();
            }
           while(false);
          }
        }
       if(true)
        {
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
        }
       else
        {
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   else
    {
    }
  }
 else
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         barrier();
        }
       for(int _injected_loop_counter = ((1 << (int(6))) >> (int(6))); _injected_loop_counter != 0; _injected_loop_counter --)
        {
         barrier();
        }
      }
     if((false))
      {
       if((false))
        {
         for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
          {
           if((false))
            barrier();
           barrier();
          }
        }
       if((false))
        barrier();
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         barrier();
        }
      }
     if(false)
      {
      }
     else
      {
       if((false))
        barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if((false))
        {
         if((false))
          barrier();
         if((false))
          barrier();
         if((false))
          barrier();
         if(true)
          {
           if((false))
            barrier();
          }
         else
          {
           if((false))
            barrier();
          }
         if(true)
          {
           do
            {
             barrier();
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
           if((false))
            barrier();
           if(((! (! (false)))))
            barrier();
           if((false))
            barrier();
          }
         else
          {
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = (0 + (1)); _injected_loop_counter != 0; _injected_loop_counter --)
            {
             barrier();
            }
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
      }
     if((false))
      barrier();
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if((false))
          barrier();
         barrier();
        }
       else
        {
        }
      }
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != 1; _injected_loop_counter ++)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if(true)
            {
             barrier();
            }
           else
            {
            }
          }
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          barrier();
         barrier();
        }
      }
    }
   if((false))
    {
     if(false)
      {
      }
     else
      {
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         if((false))
          barrier();
         if((false))
          barrier();
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if(((! (! (false)))))
              barrier();
             barrier();
            }
           for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                {
                 if(((true && (((false) || false)))))
                  barrier();
                 if((false))
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if((false))
                    barrier();
                   if((false || (false)))
                    {
                     if((false))
                      barrier();
                    }
                   else
                    {
                     barrier();
                    }
                  }
                 barrier();
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 for(int _injected_loop_counter = (0 >> (int(7))); _injected_loop_counter < ((1 << (int(0))) >> (int(0))); _injected_loop_counter ++)
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     if((((false) || false)))
                      barrier();
                     barrier();
                    }
                  }
                 barrier();
                }
               for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != ((1 << ((~ (~ (int(7)))))) >> ((int(ivec2(int(7), 0))))); _injected_loop_counter ++)
                {
                 if((false))
                  barrier();
                 do
                  {
                   barrier();
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 while(false);
                }
              }
            }
           if((false))
            {
             if((false))
              barrier();
             if((false))
              barrier();
             if(true)
              {
               barrier();
              }
             else
              {
              }
             if((false))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           do
            {
             if(false)
              {
              }
             else
              {
               if(true)
                {
                 if(false)
                  {
                   if((false))
                    barrier();
                  }
                 else
                  {
                   if((false))
                    barrier();
                  }
                 if(false)
                  {
                  }
                 else
                  {
                   if((false))
                    {
                     if((false))
                      barrier();
                     if((false))
                      barrier();
                     barrier();
                     if((false))
                      barrier();
                    }
                  }
                }
               else
                {
                }
              }
             barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if((false))
                barrier();
               if((false))
                {
                 if((false))
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   barrier();
                  }
                 if(true)
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(true)
                      {
                       if(false)
                        {
                        }
                       else
                        {
                         barrier();
                        }
                      }
                     else
                      {
                       if((false))
                        {
                         if((false))
                          barrier();
                         barrier();
                        }
                      }
                    }
                  }
                 else
                  {
                  }
                 barrier();
                 if((false))
                  barrier();
                }
               do
                {
                 barrier();
                }
               while(false);
               if((false))
                barrier();
              }
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
           if((false))
            barrier();
          }
        }
       for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
        {
         if((false))
          barrier();
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(false)
      {
       if((false))
        {
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           if(((! (! (false)))))
            barrier();
           barrier();
          }
        }
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         if((false))
          barrier();
        }
      }
     else
      {
       if((false))
        barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         barrier();
        }
       while(false);
      }
     if(false)
      {
       if(false)
        {
        }
       else
        {
         if((false))
          barrier();
        }
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
         if((false))
          barrier();
        }
       else
        {
         if((false))
          {
           if(((! (! (false)))))
            barrier();
           for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > 0; _injected_loop_counter --)
            {
             barrier();
             if((false))
              barrier();
            }
          }
        }
       if((false))
        barrier();
      }
     else
      {
       if((false))
        {
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           barrier();
          }
         else
          {
          }
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
       if((false))
        barrier();
      }
     for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != 0; _injected_loop_counter --)
      {
       if((false))
        barrier();
       if((false))
        barrier();
      }
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(((bool(bvec3(false, true, false)))))
  {
   do
    {
     do
      {
       if((false))
        {
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         barrier();
        }
      }
     while(false);
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
   if((false))
    barrier();
   barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
   barrier();
  }
 if((false))
  {
   for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
    {
     barrier();
    }
  }
 if((false))
  barrier();
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
