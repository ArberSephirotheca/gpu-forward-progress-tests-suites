#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

struct _GLF_struct_17 {
 mat2x3 _f0;
} ;

struct _GLF_struct_18 {
 mat4x3 _f0;
 _GLF_struct_17 _f1;
 vec3 _f2;
} ;

struct _GLF_struct_15 {
 vec2 _f0;
 mat4x2 _f1;
 vec3 _f2;
 uint _f3;
} ;

struct _GLF_struct_16 {
 _GLF_struct_15 _f0;
 uvec4 _f1;
 ivec2 _f2;
} ;

struct _GLF_struct_13 {
 uvec3 _f0;
 mat2 _f1;
 mat3 _f2;
 uvec2 _f3;
 vec3 _f4;
 ivec4 _f5;
} ;

struct _GLF_struct_12 {
 int _f0;
 bool _f1;
 mat4x3 _f2;
 bvec2 _f3;
 mat4x2 _f4;
} ;

struct _GLF_struct_14 {
 bvec4 _f0;
 _GLF_struct_12 _f1;
 _GLF_struct_13 _f2;
} ;

struct _GLF_struct_10 {
 uint _f0;
 mat3x2 _f1;
 vec4 _f2;
 bvec2 _f3;
} ;

struct _GLF_struct_11 {
 _GLF_struct_10 _f0;
} ;

struct _GLF_struct_8 {
 uint _f0;
 mat4x3 _f1;
 mat4 _f2;
 vec2 _f3;
} ;

struct _GLF_struct_7 {
 bvec2 _f0;
 ivec2 _f1;
 ivec4 _f2;
 uint _f3;
 mat3 _f4;
 int _f5;
 uvec3 _f6;
} ;

struct _GLF_struct_6 {
 mat2x3 _f0;
 bool _f1;
} ;

struct _GLF_struct_5 {
 float _f0;
 bool _f1;
 int _f2;
 int _f3;
 bvec4 _f4;
 uvec4 _f5;
} ;

struct _GLF_struct_4 {
 mat4x3 _f0;
 bvec2 _f1;
 uvec3 _f2;
 mat3x2 _f3;
 ivec3 _f4;
} ;

struct _GLF_struct_3 {
 mat2x3 _f0;
 vec2 _f1;
 vec3 _f2;
 ivec4 _f3;
 int _f4;
 bool _f5;
 mat2x3 _f6;
} ;

struct _GLF_struct_9 {
 _GLF_struct_3 _f0;
 _GLF_struct_4 _f1;
 _GLF_struct_5 _f2;
 _GLF_struct_6 _f3;
 _GLF_struct_7 _f4;
 _GLF_struct_8 _f5;
} ;

struct _GLF_struct_1 {
 bvec4 _f0;
 mat2x3 _f1;
 ivec2 _f2;
 mat2x3 _f3;
 mat3 _f4;
 mat4 _f5;
} ;

struct _GLF_struct_0 {
 ivec2 _f0;
 mat3 _f1;
 vec2 _f2;
 mat2 _f3;
 ivec2 _f4;
} ;

struct _GLF_struct_2 {
 _GLF_struct_0 _f0;
 mat2x4 _f1;
 _GLF_struct_1 _f2;
} ;

struct _GLF_struct_19 {
 _GLF_struct_2 _f0;
 _GLF_struct_9 _f1;
 _GLF_struct_11 _f2;
 bool _f3;
 _GLF_struct_14 _f4;
 uint subgroup_size;
 _GLF_struct_16 _f5;
 _GLF_struct_18 _f6;
} ;

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(((! (! (false)))))
  {
   if((false))
    barrier();
   barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 if((bool(bvec4((((injectionSwitch.x > injectionSwitch.y))), true, ((injectionSwitch.x < ((((injectionSwitch.x < injectionSwitch.y)) ? (mix(vec2((8.4), (injectionSwitch)[1]), vec2((injectionSwitch)[0], (99.69)), bvec2(true, false))) : ((mat2x3(- 0.1, 2.5, - 28.74, - 231.009, - 5.9, 3.1) , vec2(- 79.28, 8218.2777))))).y)), true))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((false))
  {
   if((((! (! (bool(bvec2(false, true))))))))
    barrier();
   barrier();
   if((! (! ((false)))))
    barrier();
  }
 _GLF_struct_19 _GLF_struct_replacement_19 = _GLF_struct_19(_GLF_struct_2(_GLF_struct_0(ivec2(1), mat3(((1.0) - 0.0)), (max((((((true && (false))) || false) ? (injectionSwitch) : vec2(1.0))), vec2(1.0))), mat2(1.0), ivec2(1)), mat2x4(1.0), _GLF_struct_1(bvec4(true), mat2x3((clamp(((1.0) / 1.0), 1.0, (max(1.0, 1.0))))), (ivec2((((ivec4(1, 1, (0 | (1)), 1)) - ivec4(0, 0, 0, 0)) * (ivec4(ivec2(1), 0, 0))))), mat2x3(1.0), mat3((float(float(1.0)))), mat4(1.0))), _GLF_struct_9(_GLF_struct_3(mat2x3(1.0), vec2(1.0), vec3(1.0), ivec4(1), ((min(0 ^ (1), (((clamp(0 ^ (1), 0 ^ ((0 | (1))), 0 ^ (1)))) | (0 ^ (1)))))), true, mat2x3(1.0)), _GLF_struct_4(mat4x3(1.0), bvec2(true), uvec3((min(1u, 1u))), mat3x2(1.0), ivec3(1)), _GLF_struct_5(1.0, true, 1, 1, bvec4(true), uvec4(1u)), _GLF_struct_6(mat2x3(1.0), true), _GLF_struct_7(bvec2(true), ivec2((max((max(1, 1)), 1))), ivec4(1), 1u, mat3(1.0), (((0) >> 0) | (min((1), ((clamp(int(ivec2((1), 1)), int(ivec2((1), 1)), (clamp(int(ivec2((1), 1)), int(ivec2((1), 1)), int(ivec2((1), 1)))))))))), ((uvec3(1u)) / uvec3(1u, 1u, 1u))), _GLF_struct_8(1u, mat4x3(1.0), mat4((max((min(1.0, 1.0)), 1.0))), vec2((float(mat3x2((clamp(1.0, 1.0, (clamp((float((mat3x2(mat3x4(mat3x2(((1.0) - ((false ? (atan(689.278, - 7.0)) : (float(float((min(0.0, 0.0)))))))), 0.0, 1.0, 1.0, 0.0, 1.0)))))), ((clamp((1.0) - 0.0, (1.0) - 0.0, (1.0) - 0.0))), (max(1.0, 1.0)))))), sqrt(0.0), (((((true ? float(mat4x2(0.0, 1.0, ((0.0) / 1.0), 1.0, 1.0, 0.0, 0.0, 0.0)) : (3415.9740))))) - (mix(float(0.0), float((2384.1512)), bool(false)))), 1.0, 0.0, determinant(mat3(0.0, (clamp((max(0.0, 0.0)), (max(0.0, 0.0)), (max(0.0, (min(0.0, 0.0)))))), abs(0.0), 0.0, 0.0, 0.0, 0.0, round(length((max(normalize(vec4(1.0, 1.0, 1.0, 1.0)), normalize(vec4(1.0, 1.0, 1.0, 1.0)))))), length(vec2(0.0, ((0.0) + 0.0))))))))))), _GLF_struct_11(_GLF_struct_10(1u, mat3x2(1.0), (vec4(0.0, 0.0, 0.0, 0.0) + (vec4(1.0))), bvec2(true))), ((! ((true && (! (((bool(((bool(true)) || false))) && true))))))), _GLF_struct_14(bvec4(true), _GLF_struct_12(1, true, mat4x3(1.0), bvec2(true), mat4x2(1.0)), _GLF_struct_13(uvec3(1u), mat2(1.0), (mat3(1.0) * (mat3(1.0))), uvec2(1u), vec3(1.0), ivec4(1))), gl_SubgroupSize, _GLF_struct_16(_GLF_struct_15(vec2(1.0), mat4x2(1.0), vec3(1.0), 1u), uvec4(1u), ivec2(1)), _GLF_struct_18(mat4x3(1.0), _GLF_struct_17(mat2x3(1.0)), vec3(1.0)));
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(((((false || (((! (! ((((true && (bool((bvec2(bvec3(bvec2(false, ((injectionSwitch.x > injectionSwitch.y))), true)))))))) || false))))))) && true)))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 if(((((clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > (min(injectionSwitch, injectionSwitch)).y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 if((false))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if(((! (((! (false)) && true)))))
  {
   if((false))
    barrier();
   barrier();
  }
 uint workgroup_base = (0u ^ (workgroup_size * workgroup_id));
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(((((! (! (true))) && ((false)))) || false))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
  }
 uint virtual_gid = (max(workgroup_base, ((workgroup_base) * 1u))) + (clamp(((((((subgroup_id) + 0u) | ((subgroup_id) + 0u)))) - 0u), subgroup_id, subgroup_id)) * _GLF_struct_replacement_19.subgroup_size + subgroup_local_id;
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 atomicStore(write_val, uint(virtual_gid), 4, 64, (0 | (0)));
 if((false))
  barrier();
 if((false))
  barrier();
 uint read_val = atomicLoad((0u + (((write_val)) | 0u)), 4, 64, 0);
 buf[virtual_gid] = (~ (~ (((uint(subgroupAllEqual(read_val))) << 0u))));
 if((false || ((((injectionSwitch.x > injectionSwitch.y))))))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 if((false || ((((((bool((bvec2(bvec4(bvec2((! (! (bool(((false || (bool(bvec2(bool((bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, true, true)))), true))))))))), false), (false || ((! (! ((false || (false))))))), true))))))))))))
  {
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   barrier();
  }
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
