#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((false))
  barrier();
 uvec3 GLF_merged3_0_1_8_1_1_11_2_1_14read_valvirtual_gidworkgroup_size;
 if(((bool(bvec3((! (((! (false))) || false)), true, true)))))
  {
   if((false))
    barrier();
   barrier();
  }
 uvec2 GLF_merged2_0_1_13_1_1_8num_workgroupread_val;
 if((false))
  barrier();
 if(((true && ((! (((! (((true && (true)) && (((((true ? injectionSwitch : (pow(vec2(- 6.0, 9.7), vec2(0.0, - 64.44))))).x < injectionSwitch.y)) && (false || ((! (! (bool(bvec3((((! (! (((((((injectionSwitch.x < injectionSwitch.y)) && ((((injectionSwitch.x > injectionSwitch.y)) || (false)))))) || false)))))), false, false)))))))))))) || false))))))
  barrier();
 if((((((false) || false)) && true)))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  {
   if((false))
    {
     if(((true && (((bool(bvec4(((((true && ((vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))) || false)), true, true, false))))))))
      barrier();
     if((false))
      barrier();
     if((false))
      barrier();
     if((false))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     barrier();
     if((false))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
    }
   barrier();
   if(((bool(bvec4(false, (bool(bvec4(false, true, false, true))), true, true)))))
    barrier();
  }
 if((! ((true && (! ((! (((bool(bvec3((! (((! (! (false)))))), true, false))) || false)))))))))
  {
   if((false))
    barrier();
   if((! ((! (! (! ((((false) || false)))))))))
    barrier();
   barrier();
  }
 if((false))
  {
   if((((! ((false || ((bool(bool(! (bool(bvec3(false, (! (! (true))), false)))))))))))))
    {
     if(((! (! (bool((! (! (((bool((false))) && true))))))))))
      barrier();
     if((false))
      barrier();
     barrier();
     if((false))
      barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if((false))
    barrier();
   if(((((bool(bvec3((! (true && ((false || (((true && (! (injectionSwitch.x > injectionSwitch.y))))))))), true, true)))))))
    {
     if((false))
      barrier();
     barrier();
    }
  }
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((false))
  {
   if((false))
    barrier();
   if((false))
    {
     if((true && ((((bool(bool((injectionSwitch.x > injectionSwitch.y)))))))))
      barrier();
     barrier();
    }
   if(((((((true ? (injectionSwitch.x) - 0.0 : (- 5.6)))) > injectionSwitch.y))))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    {
     if((((bool(bvec3((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)), true))))))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(((false || (((injectionSwitch.x > injectionSwitch.y))))))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 if(((false || ((bool(bvec4(((injectionSwitch.x > injectionSwitch.y)), true, false, true)))))))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 if((((((injectionSwitch) * vec2(1.0, 1.0)).x > injectionSwitch.y))))
  {
   if(((true && ((bool(bvec4(false, false, true, false)))))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
     barrier();
    }
   barrier();
  }
 if((false))
  {
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > (mix(vec2((max((injectionSwitch), (((((injectionSwitch)) * mat2(1.0)) - vec2(0.0, 0.0)))))[0], (injectionSwitch)[1]), vec2((38.44), (- 349.891)), bvec2(false, false))).y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
   if(((bool(bvec4(false, true, false, true)))))
    {
     if((false))
      barrier();
     barrier();
    }
  }
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((((! ((false || (! (true && ((bool(bvec3(((false) || false), true, ((injectionSwitch.x > injectionSwitch.y))))))))))))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((true && ((! ((! (! (! ((false))))))))))
    {
     if((((false) || ((injectionSwitch.x > injectionSwitch.y)))))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   if((false))
    barrier();
   barrier();
   if((false))
    barrier();
  }
 GLF_merged2_0_1_13_1_1_8num_workgroupread_val.x = num_workgroup;
 if((((false) || false)))
  barrier();
 if((false))
  {
   if(((((true && (((((clamp((injectionSwitch.x), (min((injectionSwitch.x), (injectionSwitch.x))), ((true ? (injectionSwitch.x) : (- 8.0))))) + 0.0)) + sin(0.0)) > injectionSwitch.y))))))
    barrier();
   barrier();
   if(((bool(bvec4(false, false, true, true)))))
    barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(((bool(bvec3(false, ((injectionSwitch.x > injectionSwitch.y)), true)))))
  barrier();
 uint workgroup_size = ((((true ? (max(gl_WorkGroupSize, (~ (~ ((((uvec3((clamp(uvec4(uvec3(0u, 0u, 0u) | ((clamp(uvec3((max(1u, 1u)), 1u, 1u), uvec3(1u, (((clamp(1u, (uint(uvec4((max(1u, 1u)), 1u, 1u, 0u))), (~ (~ (1u)))))) - 0u), 1u), (max(uvec3(1u, 1u, 1u), uvec3(1u, 1u, 1u)))))), 1u), uvec4(uvec3(0u, 0u, 0u) | (((clamp(((clamp(uvec3(1u, 1u, 1u), uvec3(1u, 1u, 1u), (max(uvec3(1u, 1u, 1u), uvec3(1u, 1u, 1u)))))) | (uvec3(0u, 0u, 0u) ^ (uvec3(0u, 0u, 0u))), ((((clamp(uvec3(1u, 1u, 1u), uvec3(1u, 1u, 1u), (max(uvec3(1u, 1u, 1u), uvec3(1u, 1u, 1u)))))) | (uvec3(0u, 0u, 0u) ^ (uvec3(0u, 0u, 0u)))) ^ uvec3(0u, 0u, 0u)), ((clamp(uvec3(1u, 1u, 1u), uvec3(1u, 1u, 1u), (max(uvec3(1u, 1u, 1u), uvec3(1u, 1u, 1u)))))) | (uvec3(0u, 0u, 0u) ^ (uvec3(0u, 0u, 0u))))))), 1u), uvec4(uvec3(0u, 0u, 0u) | ((clamp(uvec3(1u, 1u, (clamp(1u, 1u, 1u))), uvec3((((~ (~ (1u)))) | (((1u) | (1u)))), 1u, 1u), (max(uvec3(1u, 1u, 1u), uvec3(1u, 1u, 1u)))))), 1u)))))) * (~ (~ (~ ((min((((min(max(~ ((gl_WorkGroupSize)), ~ ((gl_WorkGroupSize))), max(~ ((gl_WorkGroupSize)), ~ ((gl_WorkGroupSize))))))), ((max(~ ((gl_WorkGroupSize)), ~ ((gl_WorkGroupSize))))))))))))))))).x : (num_workgroup)))) << uint((injectionSwitch.x)));
 if((! ((! (! (! ((bool((bvec2(bvec3(bvec2((((bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, true, false))))), true), true))))))))))))
  {
   if(((bool(bvec4(false, false, true, true)))))
    {
     if(((((! (! (injectionSwitch.x > injectionSwitch.y)))))))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((((((false)) || false)) || false))
    barrier();
   barrier();
   if((((false) && true)))
    barrier();
   if((((((false) && true)) && true)))
    barrier();
  }
 GLF_merged3_0_1_8_1_1_11_2_1_14read_valvirtual_gidworkgroup_size.z = workgroup_size;
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((((((! (((true && ((! (((false || (false)) || ((((((injectionSwitch.x > (min(injectionSwitch.y, injectionSwitch.y))))) || false)) && true))))))) && true))) || false))))
  {
   if((false))
    barrier();
   barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if((bool((((((((! (! (bool(((true && (bool(bvec4((false), false, true, false))))))))))) && true) || false)) || ((injectionSwitch.x > injectionSwitch.y))))))
  barrier();
 if((false))
  barrier();
 if((! (! ((((injectionSwitch.x > injectionSwitch.y)))))))
  {
   if((((false)) || false))
    barrier();
   barrier();
  }
 uint workgroup_id = ((gl_WorkGroupID.x) ^ 0u);
 if((((injectionSwitch.x > (((vec2(((injectionSwitch[0]) - 0.0), injectionSwitch[1])).y) - (mix(float((- 3.3)), float(0.0), bool(((injectionSwitch.x < injectionSwitch.y))))))))))
  {
   if((false))
    {
     if((((bool(bvec2((injectionSwitch.x > injectionSwitch.y), false))))))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   barrier();
  }
 if((((false)) || false))
  barrier();
 if((((((clamp(max(injectionSwitch, injectionSwitch), (min(max(injectionSwitch, injectionSwitch), max(injectionSwitch, injectionSwitch))), ((max(injectionSwitch, injectionSwitch)) * mat2(1.0))))).x > injectionSwitch.y))))
  {
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   barrier();
   if(((! (! (false)))))
    barrier();
  }
 if((false))
  barrier();
 uint workgroup_base = (~ (((((false ? ((subgroup_local_id & workgroup_size)) : ~ (GLF_merged3_0_1_8_1_1_11_2_1_14read_valvirtual_gidworkgroup_size.z * workgroup_id)))) >> 0u)));
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((! (! ((false)))))
    barrier();
   if(((((! ((! (! (! ((bool(bvec2(false, false))))))))))) || false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((false) || ((injectionSwitch.x > injectionSwitch.y)))))
      barrier();
     barrier();
    }
   barrier();
  }
 uint virtual_gid = (((0u ^ ((((false ? ((((12788u >> workgroup_id)) >> 0u)) : ~ (~ ((0u | ((~ (~ (workgroup_base + (0u | (((((subgroup_id) >> 0u)) << (0u >> (uint(6u)))))) * subgroup_size))))) + subgroup_local_id)))))))) / 1u);
 if((false))
  barrier();
 GLF_merged3_0_1_8_1_1_11_2_1_14read_valvirtual_gidworkgroup_size.y = virtual_gid;
 if((false))
  {
   if(((bool(bvec3(((((((injectionSwitch.x < injectionSwitch.y)) && (((false) || false)))) || false) || (false)), true, false)))))
    barrier();
   barrier();
  }
 if(((false || (((((! (! (bool(bvec2((false || (((! (! (((true && ((! (((! (! ((((! (injectionSwitch.x > injectionSwitch.y))) || false)))) && true))))) || false))))))), true))))))))))))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 atomicStore(write_val, (clamp(uint(GLF_merged3_0_1_8_1_1_11_2_1_14read_valvirtual_gidworkgroup_size.y), uint(GLF_merged3_0_1_8_1_1_11_2_1_14read_valvirtual_gidworkgroup_size.y), uint(GLF_merged3_0_1_8_1_1_11_2_1_14read_valvirtual_gidworkgroup_size.y))), 4, 64, 0);
 if(((((((true && (injectionSwitch.x > injectionSwitch.y))))) && true)))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   barrier();
  }
 uint read_val = atomicLoad((uint((injectionSwitch.x)) | (write_val)), 4, (((int(int(int(int((64))))))) ^ 0), 0);
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if((false))
    barrier();
  }
 ((((GLF_merged3_0_1_8_1_1_11_2_1_14read_valvirtual_gidworkgroup_size.x = read_val) ^ 0u) / 1u));
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 ((((((0u >> (uint(4u))) + (GLF_merged2_0_1_13_1_1_8num_workgroupread_val.y = ((GLF_merged3_0_1_8_1_1_11_2_1_14read_valvirtual_gidworkgroup_size.x) | (GLF_merged3_0_1_8_1_1_11_2_1_14read_valvirtual_gidworkgroup_size.x))))) / (~ (~ (1u))))) - 0u);
 if((bool(((true && ((bool((((((injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y))))))) && true))))
  barrier();
 ((buf[GLF_merged3_0_1_8_1_1_11_2_1_14read_valvirtual_gidworkgroup_size.y] = uint(subgroupAllEqual((((max(GLF_merged2_0_1_13_1_1_8num_workgroupread_val, GLF_merged2_0_1_13_1_1_8num_workgroupread_val))) + uvec2(0u, 0u)).y))) ^ 0u);
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
