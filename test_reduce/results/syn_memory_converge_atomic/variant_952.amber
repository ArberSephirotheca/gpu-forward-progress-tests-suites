#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec4 GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_12num_workgroupsubgroup_idsubgroup_local_idworkgroup_id;
 if((false))
  return;
 do
  {
   if((false))
    {
     if((((injectionSwitch.x > ((injectionSwitch.y) * 1.0)))))
      return;
     return;
    }
  }
 while(false);
 if((false))
  return;
 uint subgroup_id = gl_SubgroupID;
 if((false))
  barrier();
 if((false))
  return;
 for(int _injected_loop_counter = 0; _injected_loop_counter < (1 & 1); _injected_loop_counter ++)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(true)
  {
   if((false))
    barrier();
   GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_12num_workgroupsubgroup_idsubgroup_local_idworkgroup_id.y = subgroup_id;
  }
 else
  {
  }
 if((false))
  return;
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 if(((injectionSwitch.x > injectionSwitch.y)))
  {
  }
 else
  {
   if((false))
    barrier();
   for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
    {
     if((false))
      barrier();
     if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
      {
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
      }
    }
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     if(false)
      {
      }
     else
      {
       barrier();
      }
    }
   if((((false) && true)))
    barrier();
  }
 if((false))
  return;
 do
  {
   if((false))
    {
     if((false))
      {
       do
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if(false)
            {
            }
           else
            {
             do
              {
               if(((! ((bool(bvec2(! (false), false)))))))
                {
                 if((false))
                  barrier();
                 break;
                }
               return;
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             while(false);
             if((false))
              barrier();
            }
          }
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         barrier();
        }
       if((false))
        barrier();
       if(((! (! (false)))))
        return;
       if((false))
        return;
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if((! (! (true))))
          {
           barrier();
           if((false))
            barrier();
          }
         else
          {
          }
         if((false))
          return;
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = 1; _injected_loop_counter != (0 | int((injectionSwitch.x))); _injected_loop_counter --)
      {
       do
        {
         return;
        }
       while(false);
       if((false))
        continue;
      }
    }
  }
 while(((injectionSwitch.x > injectionSwitch.y)));
 if((((((false) || false)) || ((injectionSwitch.x > injectionSwitch.y)))))
  {
   if((false))
    return;
   if(false)
    {
    }
   else
    {
     barrier();
    }
  }
 if((false))
  return;
 if(false)
  {
  }
 else
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 do
  {
   if((false))
    return;
  }
 while(((injectionSwitch.x > injectionSwitch.y)));
 if((false))
  return;
 for(int _injected_loop_counter = (0 ^ 0); _injected_loop_counter < (1 | 1); _injected_loop_counter ++)
  {
   if((false))
    {
     if((false))
      break;
     for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
      {
       barrier();
      }
    }
   if((false))
    {
     if(((bool(bvec4(false, false, false, false)))))
      barrier();
     return;
    }
  }
 if((false))
  {
   if((false))
    barrier();
   if((false))
    {
     if((false))
      {
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         return;
        }
      }
     barrier();
    }
   if((false))
    barrier();
   if(false)
    {
    }
   else
    {
     for(int _injected_loop_counter = (((1 | 0) << (int(4))) >> (int(4))); _injected_loop_counter > 0; _injected_loop_counter --)
      {
       if((false))
        return;
      }
    }
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if(false)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     if((false))
      {
       if((false))
        return;
       if((false))
        barrier();
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(false)
        {
        }
       else
        {
         if((false))
          return;
        }
       for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if(((true && (false))))
        barrier();
       if((false))
        return;
      }
     for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != 1; _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = (0 ^ 1); _injected_loop_counter > (1 ^ 1); _injected_loop_counter --)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          barrier();
        }
       if((false))
        {
         if((false))
          barrier();
         if((false))
          continue;
         return;
        }
      }
     if((false))
      barrier();
     if((false))
      {
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
        }
       if(false)
        {
        }
       else
        {
         do
          {
           barrier();
          }
         while(false);
        }
      }
     for(int _injected_loop_counter = (1 | 1); ((_injected_loop_counter != (0 | (clamp((0 + (0)), 0, 0)))) || false); _injected_loop_counter --)
      {
       if((bool((bvec2(bvec3(bvec2((bool(bool((true && (false))))), true), false))))))
        {
        }
       else
        {
         if(((((! (! (false)))) || false)))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           continue;
          }
         return;
         if((((((injectionSwitch.x > (min(injectionSwitch, injectionSwitch)).y)))) && true))
          {
           if((false))
            break;
           if((false))
            barrier();
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
            }
           else
            {
             barrier();
            }
          }
         if(true)
          {
           if((false))
            barrier();
           if((false))
            {
             if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
             if(((true && (false))))
              barrier();
             if(((injectionSwitch.x < injectionSwitch.y)))
              {
               barrier();
              }
             else
              {
              }
            }
           if((false))
            barrier();
          }
         else
          {
          }
         if((false))
          {
           if((false))
            barrier();
           return;
          }
        }
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         if((false))
          barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         barrier();
        }
       if((false))
        {
         if(false)
          {
           if(true)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           else
            {
             if((false))
              barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
           if(false)
            {
            }
           else
            {
             for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < 1; _injected_loop_counter ++)
              {
               if((false))
                barrier();
              }
            }
           if((false))
            barrier();
           if((false))
            barrier();
          }
         if((false))
          barrier();
         if((((false) && true)))
          return;
         break;
        }
      }
    }
   if((false))
    {
     if((false))
      return;
     barrier();
    }
   if((false))
    barrier();
   if(((false) || false))
    {
    }
   else
    {
     if(true)
      {
       if((false))
        barrier();
       if((false))
        {
         do
          {
           barrier();
          }
         while(false);
        }
       if((false))
        barrier();
      }
     else
      {
      }
     if((false))
      {
       if((false))
        return;
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         for(int _injected_loop_counter = ((0 ^ 1) & 1); _injected_loop_counter != (((1 << (int(4))) >> ((min(int(4), int(4))))) ^ 1); _injected_loop_counter --)
          {
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                barrier();
               if(((bool(bvec4(false, false, true, true)))))
                continue;
               barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                break;
              }
             return;
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
             if(((true && ((false || (false))))))
              {
               if((false))
                barrier();
               return;
              }
             if((false))
              barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(((((clamp(injectionSwitch, ((injectionSwitch) / vec2(1.0, 1.0)), injectionSwitch)).x > injectionSwitch.y))))
          return;
        }
       else
        {
        }
       for(int _injected_loop_counter = 1; _injected_loop_counter > (0 >> ((1 * (int(2))))); _injected_loop_counter --)
        {
         if((false))
          barrier();
         if((false))
          barrier();
        }
       if((false))
        {
         do
          {
           return;
          }
         while(false);
        }
       barrier();
       if((false))
        {
         for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
          {
           if((false))
            {
             if((false))
              barrier();
             return;
            }
          }
         return;
        }
       if((false))
        barrier();
       do
        {
         if(((((((((injectionSwitch.x < injectionSwitch.y) || ((injectionSwitch.x > injectionSwitch.y))))) || false)) && ((! (! (((((injectionSwitch.x > injectionSwitch.y))) || false))))))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            return;
           barrier();
          }
        }
       while((! (! (false))));
       if((((false)) && true))
        {
         if(((bool(bvec3(false, false, false)))))
          {
           if(false)
            {
            }
           else
            {
             return;
            }
          }
         barrier();
        }
       if((false))
        {
         if((false))
          barrier();
         for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
          {
           barrier();
          }
        }
      }
    }
   if((false))
    barrier();
   if((false))
    {
     for(int _injected_loop_counter = 1; _injected_loop_counter > (0 >> (int(0))); _injected_loop_counter --)
      {
       if(((bool(bvec2((bool(bvec4((! (! (false))), false, true, false))), false)))))
        barrier();
      }
     for(int _injected_loop_counter = ((- int(- 816.014)) & 0); _injected_loop_counter < ((((1) ^ 0)) - 0); _injected_loop_counter ++)
      {
       barrier();
      }
     if((false))
      barrier();
    }
   if((false))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != ((1 << (((int(2)) | 0))) >> (int(2))); _injected_loop_counter ++)
      {
       return;
      }
    }
   if((false))
    barrier();
   if(((false || (false))))
    {
     do
      {
       barrier();
      }
     while(false);
    }
   return;
  }
 if((false))
  barrier();
 if((false))
  {
   if(((((bool(bool(false)))) || false)))
    barrier();
   for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < 1; _injected_loop_counter ++)
    {
     for(int _injected_loop_counter = 0; _injected_loop_counter != ((1 << (int(5))) >> (int(5))); _injected_loop_counter ++)
      {
       if((false))
        barrier();
       if((false))
        {
         if((false))
          {
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             return;
            }
           if((false))
            barrier();
          }
         barrier();
        }
       if((false))
        barrier();
      }
    }
   if(true)
    {
     barrier();
     if((false))
      barrier();
    }
   else
    {
    }
   if((false))
    barrier();
  }
 if((false))
  {
   if(true)
    {
     barrier();
    }
   else
    {
    }
  }
 if((false))
  barrier();
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  return;
 do
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      {
       if(true)
        {
         return;
        }
       else
        {
         if((false))
          barrier();
        }
      }
     barrier();
     for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
      {
       if(((true && (false))))
        barrier();
      }
     if(false)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
  }
 while(((injectionSwitch.x > injectionSwitch.y)));
 do
  {
   do
    {
     if((false))
      return;
     if((((false) || false)))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       continue;
      }
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
  }
 while(((injectionSwitch.x > injectionSwitch.y)));
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   if((((injectionSwitch.x > ((injectionSwitch.y) / 1.0)))))
    return;
   if((false))
    barrier();
   return;
   if((false))
    barrier();
  }
 uint subgroup_size = gl_SubgroupSize;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = (1 ^ 1); _injected_loop_counter != 1; _injected_loop_counter ++)
    {
     if((false))
      return;
    }
   return;
  }
 if((false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(true)
  {
   if((false))
    return;
  }
 else
  {
  }
 for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
  {
   if((false))
    {
     for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
      {
       if((false))
        barrier();
       return;
      }
    }
  }
 if((((false) || false)))
  return;
 GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_12num_workgroupsubgroup_idsubgroup_local_idworkgroup_id.z = subgroup_local_id;
 if((false))
  barrier();
 if((false))
  {
   if(false)
    {
    }
   else
    {
     return;
    }
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if((false))
  {
   if((((false) && ((injectionSwitch.x < injectionSwitch.y)))))
    barrier();
   for(int _injected_loop_counter = ((false ? (32958) : 0)); _injected_loop_counter < 1; _injected_loop_counter ++)
    {
     return;
    }
   if((false))
    return;
  }
 if((false))
  return;
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    return;
   return;
   if((false))
    barrier();
   for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
    {
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 if((false))
  {
   if(true)
    {
     if((false))
      barrier();
     barrier();
    }
   else
    {
     if((false))
      barrier();
    }
  }
 if((false))
  return;
 GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_12num_workgroupsubgroup_idsubgroup_local_idworkgroup_id.x = num_workgroup;
 uint workgroup_size = (min((((max(((gl_WorkGroupSize)) - uvec3(0u, 0u, (uint(uvec2((clamp(0u, 0u, 0u)), 0u)))), (~ (~ (((gl_WorkGroupSize)) - uvec3(0u, 0u, (uint(uvec2((clamp(0u, 0u, 0u)), 0u)))))))))) / uvec3((injectionSwitch.y), (injectionSwitch.y), ((mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2((293.651), (vec2(- 3172.0959, - 38.64).y)), bvec2(false, false))).y))), gl_WorkGroupSize)).x;
 if(true)
  {
   if((false))
    barrier();
   if((false))
    {
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       for(int _injected_loop_counter = 1; _injected_loop_counter > (1 ^ 1); _injected_loop_counter --)
        {
         if((true && ((false))))
          {
           if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
            {
             if((false))
              {
               if((false))
                barrier();
               continue;
              }
             continue;
            }
           for(int _injected_loop_counter = (((1 << (int(0))) >> (int(0))) & 1); _injected_loop_counter > 0; _injected_loop_counter --)
            {
             barrier();
            }
          }
         if(((! (! (false)))))
          barrier();
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
         barrier();
        }
      }
     if((false))
      barrier();
    }
  }
 else
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   if((false))
    barrier();
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       barrier();
      }
     if((false))
      barrier();
    }
   do
    {
     if((false))
      barrier();
     if((false))
      barrier();
     if((false))
      break;
     if((false))
      break;
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
       do
        {
         barrier();
        }
       while((true && (false)));
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      barrier();
     if((bool((bvec3(bvec4(bvec3(false, false, false), false))))))
      {
      }
     else
      {
       if((((((((injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : ((vec2(injectionSwitch[0], ((injectionSwitch[1]) / 1.0)))))).x > injectionSwitch.y))))
        {
         if((false))
          {
           if(((! ((((injectionSwitch.x > injectionSwitch.y)) || (! ((bool(bvec4(((false) || ((injectionSwitch.x > injectionSwitch.y))), ((injectionSwitch.x > injectionSwitch.y)), true, true))))))))))
            {
             if((false))
              return;
             break;
            }
           if((false))
            {
             if((false))
              barrier();
             return;
            }
           for(int _injected_loop_counter = (((1 << (int(3))) >> (int(3))) ^ (1 | 0)); _injected_loop_counter < 1; _injected_loop_counter ++)
            {
             if(true)
              {
               if((false))
                barrier();
               barrier();
              }
             else
              {
              }
            }
           if((false))
            continue;
          }
         barrier();
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      {
       if((((! (! ((((((injectionSwitch.x > injectionSwitch.y)) || false))))))) && true))
        break;
       barrier();
      }
     if(false)
      {
      }
     else
      {
       if((false))
        barrier();
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           do
            {
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
               if((false))
                {
                 if((false))
                  barrier();
                 if(false)
                  {
                   if(((! (! (false)))))
                    continue;
                  }
                 else
                  {
                   if((false))
                    {
                     if(true)
                      {
                       return;
                       if(((bool(bvec4(false, false, false, true)))))
                        break;
                      }
                     else
                      {
                      }
                    }
                  }
                 if((false))
                  break;
                 if(((((((injectionSwitch.x < injectionSwitch.y)) && ((true && (false))))) || false)))
                  barrier();
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 for(int _injected_loop_counter = (((0 ^ 1)) + 0); _injected_loop_counter != (0 << (int(1))); _injected_loop_counter --)
                  {
                   return;
                  }
                }
              }
             else
              {
               barrier();
               if((false))
                {
                 if((false))
                  barrier();
                 continue;
                }
              }
             if((false))
              barrier();
            }
           while(false);
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            continue;
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           return;
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         break;
        }
       return;
       if((((injectionSwitch.x > (clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
        {
         if((((injectionSwitch.x > (vec2(1.0, 1.0) * ((clamp((max(injectionSwitch, injectionSwitch)), (max(injectionSwitch, injectionSwitch)), injectionSwitch)))).y))))
          {
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             for(int _injected_loop_counter = ((1 << (int(0))) >> (((((int(0)) ^ 0)) / 1))); _injected_loop_counter != 0; _injected_loop_counter --)
              {
               barrier();
              }
            }
           else
            {
             if((false))
              barrier();
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if(((((true && ((injectionSwitch.x > injectionSwitch.y)))) || false)))
            {
             if(((((injectionSwitch.x < injectionSwitch.y)) && (((injectionSwitch.x > (mix(vec2((48.24), (injectionSwitch)[1]), vec2((injectionSwitch)[0], (217.807)), bvec2(((injectionSwitch.x < injectionSwitch.y)), ((injectionSwitch.x > injectionSwitch.y))))).y))))))
              return;
            }
           else
            {
             if((false))
              barrier();
             barrier();
             if((false))
              {
               if(((bool((bvec3((bvec3(bvec3(bvec3(bvec3((false || (false)), ((injectionSwitch.x < injectionSwitch.y)), false)))))))))))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  return;
                 if((false))
                  barrier();
                 barrier();
                }
               break;
              }
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              barrier();
             barrier();
            }
          }
         return;
         if((false))
          break;
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(false)
            {
            }
           else
            {
             do
              {
               barrier();
              }
             while(false);
             if((false))
              barrier();
            }
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
      break;
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       barrier();
      }
    }
   while(((((((! (((! ((true && ((injectionSwitch.x > injectionSwitch.y))))) || false))))) || false) || false)));
  }
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   do
    {
     return;
    }
   while(false);
  }
 if((false))
  {
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
    }
   else
    {
     if(false)
      {
       if((false))
        return;
      }
     else
      {
       return;
      }
    }
  }
 if(true)
  {
   if(((bool(bvec4(false, false, true, (bool(bvec2(true, true))))))))
    {
     for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
      {
       if((false))
        barrier();
       if((((bool(bvec2((bool(bvec3((false), true, false))), true)))) && ((true) && true)))
        {
         if(false)
          {
          }
         else
          {
           barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(true)
          {
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
              {
               barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             if((false))
              barrier();
            }
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((false))
              continue;
             barrier();
            }
           if(false)
            {
            }
           else
            {
             barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
         else
          {
           if((false))
            break;
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if(true)
              {
               barrier();
              }
             else
              {
              }
            }
           if((false))
            continue;
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              {
               if(((false || (((injectionSwitch.x > injectionSwitch.y))))))
                barrier();
               do
                {
                 barrier();
                }
               while(false);
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             break;
            }
          }
        }
      }
     if((false))
      barrier();
     if((false))
      return;
     if(((true && (false))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(((! (! (false)))))
        barrier();
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
       if((false))
        barrier();
       barrier();
      }
     return;
     if((bool(bvec2((((injectionSwitch.x > injectionSwitch.y))), false))))
      barrier();
    }
   for(int _injected_loop_counter = ((1 << (int(1))) >> (((int(1)) * 1))); _injected_loop_counter > (int((injectionSwitch.x)) >> (int(3))); _injected_loop_counter --)
    {
     if((false))
      {
       if(((false || (false))))
        return;
       for(int _injected_loop_counter = (clamp(0, 0, 0)); _injected_loop_counter < 1; _injected_loop_counter ++)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = (0 << (int(5))); _injected_loop_counter != 1; _injected_loop_counter ++)
            {
             barrier();
            }
           if((false))
            return;
          }
        }
       barrier();
       if((false))
        barrier();
      }
    }
   if((false))
    return;
  }
 else
  {
   if((false))
    barrier();
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  {
   if((false))
    barrier();
   return;
  }
 if((false))
  barrier();
 for(int _injected_loop_counter = (0 << (int(8))); _injected_loop_counter < 1; _injected_loop_counter ++)
  {
   if((false))
    barrier();
   if((false))
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       continue;
      }
     if(false)
      {
       if((false))
        continue;
      }
     else
      {
       if((false))
        {
         if((false))
          barrier();
         break;
        }
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 if((false))
  {
   for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
    {
     return;
    }
   if((false))
    barrier();
  }
 for(int _injected_loop_counter = (1 & 1); _injected_loop_counter != 0; _injected_loop_counter --)
  {
   if((false))
    barrier();
   do
    {
     if((false))
      {
       if((false))
        {
         if(false)
          {
          }
         else
          {
           barrier();
          }
        }
       return;
      }
     if(true)
      {
       if((false))
        barrier();
       do
        {
         if((false))
          {
           if((false))
            barrier();
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             return;
            }
           else
            {
            }
          }
        }
       while(false);
      }
     else
      {
      }
     if((false))
      break;
     if((false))
      barrier();
    }
   while(((false) || false));
  }
 if((((! ((! (! (! ((vec2(0.0, 0.0) + (((injectionSwitch) * mat2(1.0)))).x < injectionSwitch.y)))))))))
  {
   if((false))
    {
     if((((false) && true)))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       return;
      }
     if((false))
      barrier();
     barrier();
    }
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     if((false))
      barrier();
    }
   do
    {
     for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
      {
       if((false))
        {
         if(false)
          {
          }
         else
          {
           barrier();
           if((false))
            barrier();
          }
        }
       if((false))
        barrier();
       GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_12num_workgroupsubgroup_idsubgroup_local_idworkgroup_id.w = workgroup_id;
       if(((! (! (false)))))
        return;
      }
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
   if((false))
    barrier();
   if((false))
    return;
   for(int _injected_loop_counter = ((1 << (int(2))) >> (((false ? (80310) : int(2))))); ((((_injected_loop_counter) * 1)) - 0) != ((40581 & 0) | 0); _injected_loop_counter --)
    {
     if((false))
      return;
     if((false))
      {
       if(false)
        {
        }
       else
        {
         barrier();
        }
      }
    }
   if((((false) || false)))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    {
     for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
      {
       barrier();
      }
    }
   do
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       continue;
      }
     if((((false) && true)))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
    }
   while(false);
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(false)
      {
      }
     else
      {
       if((false))
        return;
      }
     return;
    }
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      return;
     barrier();
     if(((((injectionSwitch.x > injectionSwitch.y)) || (((injectionSwitch.x > injectionSwitch.y))))))
      barrier();
    }
   if((false))
    return;
  }
 else
  {
   if(false)
    {
    }
   else
    {
     if((false))
      barrier();
     if((false))
      barrier();
     if((false))
      barrier();
    }
   for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
    {
     if((false))
      {
       if((true && (((true) && true))))
        {
         if((false))
          barrier();
         return;
         if((false))
          barrier();
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if((false))
        barrier();
      }
    }
   if((false))
    barrier();
  }
 uint workgroup_base = workgroup_size * GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_12num_workgroupsubgroup_idsubgroup_local_idworkgroup_id.w;
 if((false))
  {
   if((true && (false)))
    {
    }
   else
    {
     if((false))
      barrier();
     return;
    }
  }
 uint virtual_gid = workgroup_base + GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_12num_workgroupsubgroup_idsubgroup_local_idworkgroup_id.y * (1u * (subgroup_size)) + GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_12num_workgroupsubgroup_idsubgroup_local_idworkgroup_id.z;
 do
  {
   for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > 0; _injected_loop_counter --)
    {
     if((false))
      break;
     do
      {
       atomicStore(write_val, uint(virtual_gid), 4, 64, 0);
      }
     while(false);
     if((((injectionSwitch.x > injectionSwitch.y))))
      break;
    }
  }
 while(false);
 for(int _injected_loop_counter = ((1 << (int(0))) >> (((int(0)) << 0))); _injected_loop_counter > 0; _injected_loop_counter --)
  {
   do
    {
     if((false))
      barrier();
     if((((false) && true)))
      barrier();
     if((false))
      break;
     if((false))
      barrier();
    }
   while(false);
  }
 if((false))
  barrier();
 if(((! ((false || (! ((((! (! (injectionSwitch.x > (min(injectionSwitch.y, injectionSwitch.y))))))))))))))
  {
   if((false))
    barrier();
   if(((true && ((((bool((bvec3(bvec3(bvec3(injectionSwitch.x > injectionSwitch.y, true, (true && (((false) && ((injectionSwitch.x < injectionSwitch.y)))))))))))))))))
    {
     if((false))
      return;
     if((false))
      barrier();
     for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
      {
       if(false)
        {
        }
       else
        {
         for(int _injected_loop_counter = ((1 << (int(1))) >> (int(1))); _injected_loop_counter != (0 | int((injectionSwitch.x))); _injected_loop_counter --)
          {
           if((false))
            barrier();
           if(((((! (! ((bool(bvec2(injectionSwitch.x > injectionSwitch.y, false))))))))))
            {
             if((bool(bvec3((! (! (false))), true, false))))
              {
              }
             else
              {
               return;
              }
            }
           if((false))
            barrier();
          }
         for(int _injected_loop_counter = (1 ^ 0); _injected_loop_counter != 0; _injected_loop_counter --)
          {
           if((false))
            break;
           barrier();
           if((false))
            break;
           if((false))
            barrier();
           if(true)
            {
             if((false))
              barrier();
             if((false))
              barrier();
            }
           else
            {
             if((false))
              barrier();
            }
          }
         if((false))
          barrier();
        }
       if(((! (! (false)))))
        return;
      }
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if((false))
    barrier();
   if(false)
    {
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        return;
       if((false))
        barrier();
       barrier();
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   for(int _injected_loop_counter = 1; _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
    {
     barrier();
     if((false))
      barrier();
    }
   for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
    {
     if((false))
      return;
    }
   if((false))
    barrier();
   if((false))
    return;
   for(int _injected_loop_counter = 1; _injected_loop_counter != (0 << (int(2))); _injected_loop_counter --)
    {
     if((false))
      barrier();
     if((false))
      break;
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     return;
    }
  }
 if((false))
  {
   if((false))
    return;
   barrier();
  }
 uint read_val = atomicLoad(write_val, 4, 64, 0);
 if((false))
  {
   do
    {
     if((false))
      barrier();
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(false);
  }
 for(int _injected_loop_counter = 0; (clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)) != (1 | 0); _injected_loop_counter ++)
  {
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
     if((false))
      {
       if(false)
        {
        }
       else
        {
         if((false))
          return;
        }
       barrier();
      }
     if((false))
      barrier();
    }
   else
    {
     if((false))
      {
       if((((false) && true)))
        barrier();
       continue;
      }
     do
      {
       buf[virtual_gid] = uint(subgroupAllEqual(read_val));
      }
     while(false);
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        break;
       if((false))
        barrier();
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if((false))
      {
       if((false))
        barrier();
       break;
      }
     if((false))
      {
       if((((false) && true)))
        {
         if(false)
          {
           if((false))
            {
             if((false))
              barrier();
             break;
            }
          }
         else
          {
           barrier();
           if((false))
            {
             if((false))
              barrier();
             break;
            }
           if((false))
            barrier();
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       do
        {
         do
          {
           return;
          }
         while(false);
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
      }
     if((false))
      {
       do
        {
         barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
       if((false))
        barrier();
      }
     if(((false || (((((injectionSwitch.x) - 0.0) > (clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))))
      {
       if((((true && ((false || (false || ((true))))))) || ((injectionSwitch.x > injectionSwitch.y))))
        {
         barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             return;
             if((false))
              barrier();
            }
           else
            {
            }
          }
        }
       else
        {
        }
      }
     if((false))
      {
       if(true)
        {
         if((((((injectionSwitch.x > injectionSwitch.y))) && true)))
          barrier();
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              barrier();
             break;
            }
           if((false))
            {
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                continue;
               if(((! (! (false)))))
                break;
               do
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
               while(false);
              }
             if((false))
              {
               if(((! (! (false)))))
                barrier();
               if((false))
                {
                 if((false))
                  barrier();
                 return;
                }
               if((false))
                {
                 if((false))
                  barrier();
                 return;
                }
               if((false))
                barrier();
               barrier();
               if((false))
                return;
              }
             break;
            }
           if((false))
            {
             do
              {
               barrier();
               if((false))
                barrier();
              }
             while(false);
             if((false))
              break;
             if((false))
              barrier();
            }
           barrier();
          }
        }
       else
        {
        }
       if((((false) || false)))
        barrier();
       if((false))
        barrier();
       if((false))
        barrier();
       if((false))
        break;
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             return;
            }
           while(false);
          }
         barrier();
        }
       do
        {
         barrier();
         if(((true && (false))))
          barrier();
         if((false))
          barrier();
        }
       while((((bool(bool((! (! (! ((! (! ((! (false)))))))))))) || false)));
      }
    }
  }
 if((false))
  return;
 if((false))
  barrier();
 if((false))
  {
   if(((bool(bvec4(((false) && true), true, false, false)))))
    return;
   do
    {
     barrier();
    }
   while(((false) || false));
   if((((false) || false)))
    barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   return;
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
