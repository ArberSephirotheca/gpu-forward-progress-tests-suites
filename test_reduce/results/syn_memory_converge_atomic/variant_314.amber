#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec4 GLF_merged4_0_1_8_1_1_11_2_1_11_3_1_14read_valsubgroup_idvirtual_gidworkgroup_size;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  barrier();
 uvec2 GLF_merged2_0_1_8_1_1_14read_valworkgroup_size;
 if(false)
  {
   if((false))
    barrier();
  }
 else
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = (0 ^ 0); _injected_loop_counter < 1; _injected_loop_counter ++)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(true)
      {
       return;
      }
     else
      {
      }
    }
   if((false))
    {
     if((false))
      {
       if((false))
        return;
       barrier();
      }
     if(true)
      {
       barrier();
      }
     else
      {
      }
     if((false))
      return;
    }
   if((false))
    {
     do
      {
       barrier();
       if((false))
        return;
       for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
        {
         if((false))
          break;
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            continue;
           if(true)
            {
             if((false))
              break;
             barrier();
             if((false))
              {
               if(false)
                {
                 if((false))
                  continue;
                }
               else
                {
                 return;
                }
              }
            }
           else
            {
            }
           if((false))
            break;
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            break;
          }
        }
      }
     while(false);
     if((false))
      return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       if((false))
        return;
      }
     while(false);
     barrier();
    }
  }
 uint subgroup_id = gl_SubgroupID;
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 for(int _injected_loop_counter = 0; _injected_loop_counter < ((1 & 1) & 1); _injected_loop_counter ++)
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            continue;
           return;
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if(true)
          {
           barrier();
          }
         else
          {
          }
         if((false))
          break;
        }
       return;
      }
     return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      continue;
     if((false))
      {
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         barrier();
        }
       else
        {
        }
      }
     if((false))
      {
       do
        {
         if((false))
          {
           if(((true && ((! (! ((false || (false)))))))))
            continue;
           return;
          }
        }
       while(false);
       barrier();
      }
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 GLF_merged4_0_1_8_1_1_11_2_1_11_3_1_14read_valsubgroup_idvirtual_gidworkgroup_size.y = subgroup_id;
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if(false)
    {
     if((false))
      return;
    }
   else
    {
     if((false))
      barrier();
    }
   barrier();
  }
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((false))
  {
   do
    {
     if((false))
      continue;
     barrier();
     if((false))
      {
       if(false)
        {
        }
       else
        {
         barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
      }
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
  }
 if((false))
  return;
 if((false))
  {
   do
    {
     if((false))
      return;
    }
   while(false);
   barrier();
  }
 if((false))
  {
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
    }
   else
    {
     barrier();
     if((false))
      {
       for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > 0; _injected_loop_counter --)
        {
         return;
        }
      }
    }
  }
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    return;
   if((false))
    return;
   if((false))
    return;
   barrier();
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if((false))
  return;
 uint workgroup_size = gl_WorkGroupSize.x;
 for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
  {
   for(int _injected_loop_counter = (0 << (int(3))); _injected_loop_counter != (0 ^ 1); _injected_loop_counter ++)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       GLF_merged4_0_1_8_1_1_11_2_1_11_3_1_14read_valsubgroup_idvirtual_gidworkgroup_size.w = workgroup_size;
      }
     else
      {
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      {
       if(((true && ((bool(bvec4(((injectionSwitch.x > injectionSwitch.y)), false, false, true)))))))
        break;
       if(true)
        {
         if((false))
          return;
         if(false)
          {
          }
         else
          {
           barrier();
          }
        }
       else
        {
         if(((! (! (false)))))
          continue;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           if((false))
            barrier();
          }
         else
          {
          }
         barrier();
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      break;
    }
  }
 if((false))
  return;
 if((false))
  {
   if((false))
    barrier();
   do
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         break;
        }
       barrier();
      }
     return;
     if((false))
      barrier();
    }
   while((bool(bvec3(false, true, false))));
   if((false))
    return;
   if((false))
    {
     if(false)
      {
      }
     else
      {
       barrier();
      }
    }
  }
 if((false))
  {
   if((false))
    {
     if((false))
      barrier();
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       return;
      }
     else
      {
      }
     if((false))
      barrier();
    }
   if((false))
    barrier();
   if((false))
    {
     if((false))
      {
       for(int _injected_loop_counter = (((0 << (int(5))) | 0) << (((false ? (69382) : ((int(3)) << 0))))); _injected_loop_counter != ((((1 << (int(5))) >> (int(5))) << (int(7))) >> ((~ (~ (int(7)))))); _injected_loop_counter ++)
        {
         return;
        }
      }
     if(true)
      {
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
      }
     if(true)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          return;
         return;
        }
      }
     else
      {
      }
     return;
    }
   barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     if(((false || (false))))
      barrier();
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   do
    {
     if((false))
      {
       if(false)
        {
        }
       else
        {
         if(((false || (((injectionSwitch.x > injectionSwitch.y))))))
          barrier();
        }
       if((false))
        return;
       return;
      }
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
   if((false))
    barrier();
   if(false)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        {
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           return;
          }
         do
          {
           return;
          }
         while(false);
         if((false))
          return;
         if((false))
          barrier();
        }
       if((false))
        {
         if((false))
          return;
         if((! ((true && (! (((true) && true)))))))
          {
           barrier();
          }
         else
          {
          }
        }
       if((false))
        {
         if((false))
          return;
         if((false))
          return;
         if(false)
          {
          }
         else
          {
           return;
          }
        }
       if((false))
        {
         if((false))
          return;
         if((false))
          {
           if((((false) && true)))
            barrier();
           return;
          }
         barrier();
        }
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        return;
       return;
       do
        {
         if((false))
          {
           if((false))
            break;
           if((true && (false)))
            {
            }
           else
            {
             return;
            }
          }
         if((false))
          return;
         if((false))
          break;
        }
       while(false);
       if(((false || (false))))
        return;
      }
     if((false))
      barrier();
    }
   if((false))
    return;
   if((false))
    {
     if((false))
      return;
     barrier();
    }
   if((false))
    {
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        return;
       for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       barrier();
       if((false))
        return;
      }
     if((false))
      return;
     if((false))
      barrier();
     return;
     do
      {
       if((false))
        barrier();
      }
     while(false);
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if((false))
    {
     if((false))
      return;
     barrier();
     if((false))
      {
       if((false))
        return;
       barrier();
      }
    }
   if((false))
    {
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    return;
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    barrier();
  }
 if((false))
  return;
 do
  {
   if((false))
    {
     if(((bool(bvec2(false, true)))))
      {
       if((! (! (false))))
        {
        }
       else
        {
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       return;
      }
     break;
     do
      {
       if((false))
        {
         if(((false || (false))))
          {
           if((false))
            return;
           barrier();
          }
         if((false))
          break;
         barrier();
        }
      }
     while(false);
     if((false))
      break;
    }
   if(false)
    {
     if(false)
      {
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if((false))
      return;
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      continue;
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        {
         if((true && (false)))
          {
          }
         else
          {
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
             if((false))
              {
               if((false))
                break;
               barrier();
              }
             if((false))
              break;
             barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
         break;
         if((false))
          break;
         if((false))
          barrier();
        }
       if((false))
        {
         if((false))
          continue;
         if((false))
          {
           if((false))
            continue;
           return;
          }
         for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
          {
           if((false))
            return;
          }
         if(((((false || (false))) || false)))
          break;
         do
          {
           barrier();
           if((false))
            continue;
          }
         while(false);
         if((false))
          {
           if((false))
            barrier();
           barrier();
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
             if((false))
              break;
             barrier();
            }
          }
         if((false))
          {
           if((((false) && true)))
            barrier();
           if(true)
            {
             return;
             if((false))
              barrier();
            }
           else
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                return;
               return;
              }
            }
           if((false))
            continue;
           if((false))
            barrier();
          }
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           return;
          }
         if(true)
          {
           if((false))
            barrier();
          }
         else
          {
          }
        }
       if((false))
        break;
       if((false))
        break;
       if(((! (! (false)))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             barrier();
            }
          }
         break;
         if((false))
          continue;
        }
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
           if((false))
            barrier();
           if((false))
            return;
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           for(int _injected_loop_counter = 1; _injected_loop_counter > (0 >> (int(1))); _injected_loop_counter --)
            {
             return;
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
           if((false))
            return;
          }
         if((false))
          break;
        }
       else
        {
        }
       if(true)
        {
         if((false))
          {
           if((false))
            break;
           if((false))
            {
             do
              {
               if((false))
                break;
               if(true)
                {
                 if((false))
                  {
                   if((false))
                    continue;
                   barrier();
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    continue;
                  }
                 if((false))
                  return;
                 if((false))
                  barrier();
                }
               else
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if((false))
                    break;
                   barrier();
                  }
                }
               if((false))
                continue;
              }
             while(false);
             if((false))
              {
               if(false)
                {
                 if((false))
                  return;
                }
               else
                {
                 if((false))
                  return;
                }
               continue;
              }
             if((false))
              barrier();
             if((false))
              {
               if((false))
                barrier();
               if((false))
                return;
               break;
               if((((injectionSwitch.x > injectionSwitch.y))))
                continue;
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                {
                 if((false))
                  barrier();
                 for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
                  {
                   barrier();
                  }
                }
               return;
              }
             if((false))
              {
               if((false))
                continue;
               barrier();
              }
             barrier();
            }
           if((false))
            {
             for(int _injected_loop_counter = 0; _injected_loop_counter < ((1 << (int(5))) >> (int(5))); _injected_loop_counter ++)
              {
               barrier();
               if((false))
                continue;
              }
            }
           barrier();
          }
        }
       else
        {
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
       if((false))
        break;
       break;
      }
     if((false || (false)))
      {
       if((false))
        {
         if((false))
          {
           if(((bool(bool(false)))))
            return;
           barrier();
          }
         return;
        }
       if((false))
        break;
       if(true)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
           return;
          }
         if((false))
          {
           if((false))
            break;
           break;
          }
         if((false))
          {
           do
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                break;
               barrier();
              }
             do
              {
               if((false))
                break;
               do
                {
                 barrier();
                }
               while(((injectionSwitch.x > injectionSwitch.y)));
              }
             while(false);
             if((false))
              continue;
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                continue;
               barrier();
              }
            }
           while(false);
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
          }
        }
       else
        {
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
      }
     else
      {
       GLF_merged2_0_1_8_1_1_14read_valworkgroup_size.y = GLF_merged4_0_1_8_1_1_11_2_1_11_3_1_14read_valsubgroup_idvirtual_gidworkgroup_size.w;
       if((false))
        {
         do
          {
           barrier();
          }
         while(false);
        }
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if((((false) && true)))
          return;
         if((false))
          {
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
             continue;
            }
           if((false))
            break;
           if((false))
            barrier();
           if((false))
            barrier();
           barrier();
          }
        }
       else
        {
         if((false))
          barrier();
        }
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              break;
             do
              {
               barrier();
              }
             while(false);
             if((false))
              continue;
            }
           if((false))
            barrier();
           barrier();
          }
         if((false))
          barrier();
         if((false))
          {
           if((false))
            continue;
           continue;
          }
         if((false))
          continue;
         do
          {
           if(true)
            {
             if(true)
              {
               return;
               if((false))
                return;
              }
             else
              {
              }
            }
           else
            {
             if((false))
              barrier();
            }
          }
         while(false);
        }
       if(((! (! (false)))))
        continue;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      continue;
     if((false))
      return;
     do
      {
       if((false))
        break;
       if(true)
        {
         if((false))
          barrier();
        }
       else
        {
        }
       for(int _injected_loop_counter = (1 ^ 1); _injected_loop_counter < 1; _injected_loop_counter ++)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(false)
          {
          }
         else
          {
           if(false)
            {
             if((false))
              barrier();
             if((false))
              {
               if((false))
                {
                 if((false))
                  return;
                 barrier();
                }
               barrier();
               if((false))
                continue;
              }
            }
           else
            {
             if((false))
              return;
             if((false))
              {
               if(true)
                {
                 for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < 1; _injected_loop_counter ++)
                  {
                   do
                    {
                     if(((! (! (false)))))
                      barrier();
                    }
                   while(false);
                   if(((injectionSwitch.x > injectionSwitch.y)))
                    {
                    }
                   else
                    {
                     barrier();
                    }
                  }
                }
               else
                {
                }
              }
             for(int _injected_loop_counter = 0; _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((false))
                  break;
                 if((false))
                  barrier();
                 barrier();
                }
               if((false))
                barrier();
              }
             if((false))
              barrier();
             do
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((false))
                  continue;
                 barrier();
                }
              }
             while(false);
            }
           if((false))
            continue;
           do
            {
             if((false))
              barrier();
             if((false))
              break;
            }
           while(false);
          }
        }
       do
        {
         if(true)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              break;
             barrier();
            }
           if((false))
            break;
           if((false))
            {
             do
              {
               if((false))
                {
                 if((false))
                  break;
                 barrier();
                }
               if(false)
                {
                }
               else
                {
                 if((false))
                  return;
                }
               if((false))
                barrier();
              }
             while(false);
             if(false)
              {
              }
             else
              {
               if(true)
                {
                 barrier();
                }
               else
                {
                }
              }
             if(((bool(bvec4((true && (false)), false, ((injectionSwitch.x > injectionSwitch.y)), true)))))
              barrier();
             if((false))
              {
               if((false))
                break;
               barrier();
              }
            }
          }
         else
          {
           if((false))
            break;
          }
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
      }
     while((bool((bvec3(bvec3(bvec3(false, false, false)))))));
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 while(false);
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = GLF_merged2_0_1_8_1_1_14read_valworkgroup_size.y * workgroup_id;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    return;
   for(int _injected_loop_counter = ((1 << (int(3))) >> (int(3))); _injected_loop_counter > 0; _injected_loop_counter --)
    {
     return;
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 do
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    continue;
  }
 while(false);
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 do
  {
   if((false))
    {
     do
      {
       if(true)
        {
         if((false))
          barrier();
        }
       else
        {
        }
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
     if(true)
      {
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if((false))
          break;
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              break;
             if(true)
              {
               barrier();
              }
             else
              {
              }
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
           return;
           if((false))
            continue;
          }
        }
       else
        {
         if((false))
          return;
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           barrier();
          }
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(true)
            {
             barrier();
            }
           else
            {
            }
           if((false))
            break;
          }
        }
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
        }
       if((false))
        return;
       if((false))
        barrier();
      }
     else
      {
      }
     if(((true && (((injectionSwitch.x > injectionSwitch.y))))))
      barrier();
     return;
    }
   if((false))
    barrier();
  }
 while(false);
 if(true)
  {
   if((false))
    barrier();
   if((false))
    return;
  }
 else
  {
  }
 if((false))
  {
   if((false))
    return;
   if((false))
    {
     if((false))
      return;
     if((false))
      return;
     do
      {
       barrier();
      }
     while(false);
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      {
       if(true)
        {
         barrier();
        }
       else
        {
         if((false))
          return;
        }
      }
     return;
    }
   if((false))
    barrier();
   if(false)
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
       if((false))
        return;
      }
    }
   else
    {
     if(((bool(bvec3(false, false, true)))))
      barrier();
     if((false))
      return;
     if(((! (! (false)))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(true)
    {
     if(false)
      {
       if((false))
        return;
      }
     else
      {
       if(false)
        {
        }
       else
        {
         if((false))
          return;
         if((((false) && true)))
          barrier();
         if((false))
          return;
         if((false))
          {
           if((false))
            {
             if((false))
              return;
             if(true)
              {
               return;
              }
             else
              {
              }
            }
           barrier();
          }
         if((false))
          barrier();
         if((false))
          return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            return;
           if((false))
            {
             if((false))
              return;
             return;
            }
           for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != ((1 << (int(2))) >> (int(2))); _injected_loop_counter ++)
            {
             return;
            }
          }
         for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
          {
           if((false))
            break;
           return;
          }
         if((false))
          {
           if(false)
            {
            }
           else
            {
             return;
            }
          }
        }
      }
     if((false))
      {
       if((false))
        return;
       barrier();
      }
     if((false))
      {
       do
        {
         return;
        }
       while(false);
       if(((bool(bvec4(false, true, true, false)))))
        return;
      }
    }
   else
    {
    }
   if((false))
    return;
  }
 uint virtual_gid = workgroup_base + GLF_merged4_0_1_8_1_1_11_2_1_11_3_1_14read_valsubgroup_idvirtual_gidworkgroup_size.y * subgroup_size + subgroup_local_id;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if(false)
  {
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
   if((false))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if((false))
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(((! (! (false)))))
          return;
         barrier();
        }
       barrier();
      }
     if((false))
      return;
     if((false))
      barrier();
     barrier();
    }
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     if((false))
      {
       do
        {
         barrier();
        }
       while(false);
      }
    }
   else
    {
    }
   if((false))
    {
     for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != (((1 << (int(3))) >> (int(3))) & 1); _injected_loop_counter ++)
      {
       if((false))
        return;
       return;
      }
    }
   if(true)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
    }
  }
 if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    return;
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     if((false))
      barrier();
     if((false))
      return;
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       barrier();
      }
     else
      {
      }
    }
   while(false);
  }
 if((false))
  {
   if((false))
    barrier();
   return;
   if((false))
    return;
  }
 if(((injectionSwitch.x > injectionSwitch.y)))
  {
  }
 else
  {
   do
    {
     GLF_merged4_0_1_8_1_1_11_2_1_11_3_1_14read_valsubgroup_idvirtual_gidworkgroup_size.z = virtual_gid;
     if((false))
      barrier();
    }
   while(false);
  }
 if(true)
  {
   do
    {
     if((false))
      {
       for(int _injected_loop_counter = (1 & 1); _injected_loop_counter != 0; _injected_loop_counter --)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       barrier();
      }
    }
   while(false);
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
      {
       return;
      }
     if((false))
      return;
    }
   atomicStore(write_val, uint(GLF_merged4_0_1_8_1_1_11_2_1_11_3_1_14read_valsubgroup_idvirtual_gidworkgroup_size.z), 4, 64, 0);
   if((false))
    barrier();
  }
 else
  {
  }
 if((false))
  return;
 if((false))
  return;
 for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
  {
   if((false))
    barrier();
  }
 if((false))
  barrier();
 for(int _injected_loop_counter = ((1 << ((((min(int(6), int(6)))) | (int(6))))) >> (int(6))); _injected_loop_counter != ((0 << (int(5))) | 0); _injected_loop_counter --)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     if((false))
      break;
     if((false))
      return;
     if((false))
      {
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        return;
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           barrier();
          }
         else
          {
          }
         if((false))
          return;
        }
       else
        {
        }
       if((false))
        barrier();
      }
     barrier();
    }
  }
 for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   do
    {
     if(false)
      {
      }
     else
      {
       if((false))
        barrier();
      }
     if(true)
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if(true)
            {
             return;
            }
           else
            {
             if((false))
              break;
            }
          }
         for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > 0; _injected_loop_counter --)
          {
           barrier();
          }
        }
      }
     else
      {
      }
     for(int _injected_loop_counter = (0 & (~ 92833)); _injected_loop_counter != 1; _injected_loop_counter ++)
      {
       if((false))
        return;
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             for(int _injected_loop_counter = 0; _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
              {
               if(((injectionSwitch.x > injectionSwitch.y)))
                {
                }
               else
                {
                 for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
                  {
                   if(true)
                    {
                     if(((! (! (false)))))
                      {
                       if((false))
                        return;
                       barrier();
                      }
                     barrier();
                     if(((false || ((bool(bvec4(false, false, true, true)))))))
                      barrier();
                    }
                   else
                    {
                    }
                   if((false))
                    continue;
                   if((false))
                    barrier();
                  }
                }
              }
             if((false))
              break;
            }
           while(false);
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           if((false))
            barrier();
          }
        }
       else
        {
         if((false))
          return;
         if((false))
          {
           do
            {
             barrier();
            }
           while(false);
          }
        }
      }
    }
   while(false);
   if((false))
    return;
  }
 if((false))
  return;
 if((false))
  return;
 uint read_val = atomicLoad(write_val, 4, 64, 0);
 do
  {
   if((false))
    return;
   if((false))
    {
     if((false))
      return;
     if(true)
      {
       barrier();
      }
     else
      {
      }
    }
  }
 while(false);
 GLF_merged4_0_1_8_1_1_11_2_1_11_3_1_14read_valsubgroup_idvirtual_gidworkgroup_size.x = read_val;
 do
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      continue;
     do
      {
       return;
       if((false))
        return;
      }
     while(false);
     if((((injectionSwitch.x > injectionSwitch.y))))
      break;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(true)
      {
       return;
      }
     else
      {
      }
    }
  }
 while((bool(bool(false))));
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 if(true)
  {
   if((false))
    {
     if((false))
      {
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
        }
       return;
      }
     barrier();
    }
  }
 else
  {
  }
 if((false))
  {
   if((false))
    return;
   barrier();
  }
 if(((injectionSwitch.x > injectionSwitch.y)))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
   do
    {
     if(true)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = (0 | (1)); _injected_loop_counter != (0 | 0); _injected_loop_counter --)
          {
           barrier();
          }
        }
       if((false))
        barrier();
       if(false)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(((! (! (false)))))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            continue;
           barrier();
          }
         if((false))
          return;
         if((false))
          return;
         if((false))
          break;
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
         do
          {
           if((false))
            return;
          }
         while(false);
         do
          {
           if(false)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
             if(false)
              {
              }
             else
              {
               if((false))
                return;
              }
             if((false))
              barrier();
            }
           if(false)
            {
            }
           else
            {
             if((false))
              continue;
             do
              {
               GLF_merged2_0_1_8_1_1_14read_valworkgroup_size.x = GLF_merged4_0_1_8_1_1_11_2_1_11_3_1_14read_valsubgroup_idvirtual_gidworkgroup_size.x;
               if((false))
                continue;
              }
             while(false);
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                return;
               barrier();
              }
             if((false))
              {
               if((false))
                barrier();
               if((((false) && ((injectionSwitch.x < injectionSwitch.y)))))
                return;
               break;
               if((false))
                continue;
              }
             if((false))
              barrier();
             if((false))
              break;
             if((false))
              barrier();
             if((false))
              {
               if((false))
                continue;
               barrier();
              }
             if((false))
              barrier();
            }
           if((false))
            {
             if((false))
              {
               if((false))
                {
                 if((false))
                  continue;
                 if((false))
                  break;
                 barrier();
                }
               break;
               if((false))
                continue;
               if((((injectionSwitch.x > injectionSwitch.y))))
                return;
              }
             barrier();
             if((false))
              return;
            }
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                barrier();
               if(true)
                {
                 barrier();
                }
               else
                {
                }
              }
             if(false)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                break;
              }
             else
              {
               if((false))
                return;
               if((false))
                barrier();
               for(int _injected_loop_counter = (1 & 1); _injected_loop_counter != ((0 >> (int(0))) ^ 0); _injected_loop_counter --)
                {
                 barrier();
                }
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
            }
           if((false))
            continue;
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
          }
         while(false);
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(true)
          {
           if((false))
            barrier();
           if((false))
            {
             if((false))
              return;
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((false))
              return;
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
             return;
            }
           do
            {
             if((false))
              return;
            }
           while(false);
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
          }
        }
       if(true)
        {
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           barrier();
          }
        }
       else
        {
        }
       if((false))
        return;
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(true)
          {
           barrier();
          }
         else
          {
          }
        }
       if((false))
        barrier();
       if((false))
        barrier();
       if((false))
        {
         if(((! ((bool(bvec4(! (false), false, true, false)))))))
          barrier();
         if(true)
          {
           return;
          }
         else
          {
          }
        }
      }
    }
   while((! (! (false))));
   if((false))
    return;
   if((false))
    barrier();
  }
 if((false))
  return;
 if((false))
  {
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      {
       do
        {
         if((false))
          continue;
         barrier();
        }
       while(false);
      }
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        return;
       barrier();
      }
     if((false))
      barrier();
     if((false))
      return;
    }
   if((false))
    {
     if((false))
      barrier();
     return;
    }
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if((false))
      {
       do
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          return;
        }
       while(false);
       if((false))
        barrier();
       return;
       if((false))
        barrier();
       if((false))
        return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      {
       for(int _injected_loop_counter = 0; _injected_loop_counter != ((((1 << (int(2))) >> (int(2)))) - 0); _injected_loop_counter ++)
        {
         return;
        }
      }
     if((false))
      return;
     if((false))
      return;
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         barrier();
        }
       while(false);
      }
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != 1; _injected_loop_counter ++)
          {
           return;
          }
         if((false))
          return;
        }
      }
     else
      {
       if((false))
        {
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           if((false))
            barrier();
           return;
          }
         barrier();
         if((false))
          return;
        }
       if((false))
        return;
      }
    }
   if((false))
    barrier();
   do
    {
     return;
     if((false))
      barrier();
    }
   while(false);
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if(true)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     barrier();
    }
   if(true)
    {
     if(((true && (false))))
      {
       if((false))
        return;
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(true)
      {
       if((false))
        return;
       if((false))
        barrier();
      }
     else
      {
       if((false))
        {
         if((false))
          return;
         return;
        }
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if(((bool(bvec4(false, true, true, false)))))
            {
             if((false))
              return;
             barrier();
            }
           barrier();
           if((false))
            return;
          }
         return;
        }
       if((true && (false)))
        {
        }
       else
        {
         do
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              {
               if((false))
                continue;
               barrier();
              }
             barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            {
             if(((injectionSwitch.x < injectionSwitch.y)))
              {
               barrier();
              }
             else
              {
              }
            }
          }
         while(false);
        }
      }
     if(true)
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
     else
      {
      }
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     do
      {
       if((false))
        return;
       if(((true && (false))))
        return;
      }
     while(false);
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if(true)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((false))
        {
         if((false))
          {
           if(true)
            {
             for(int _injected_loop_counter = 1; _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
              {
               return;
              }
            }
           else
            {
            }
           if(false)
            {
            }
           else
            {
             if((false))
              barrier();
            }
          }
         if(false)
          {
          }
         else
          {
           barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             if((false))
              barrier();
            }
           else
            {
            }
           return;
          }
        }
      }
     else
      {
       if((false))
        barrier();
       if((false))
        return;
      }
     if((false))
      return;
     if((false))
      barrier();
     buf[GLF_merged4_0_1_8_1_1_11_2_1_11_3_1_14read_valsubgroup_idvirtual_gidworkgroup_size.z] = uint(subgroupAllEqual(GLF_merged2_0_1_8_1_1_14read_valworkgroup_size.x));
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if((false))
        return;
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           barrier();
          }
         if((true && (true)))
          {
           return;
          }
         else
          {
          }
        }
      }
     else
      {
      }
     if((false))
      barrier();
     if((((false) || false)))
      return;
     do
      {
       if((false))
        return;
      }
     while(false);
     if((false))
      {
       for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
        {
         barrier();
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         if((false))
          barrier();
         if(false)
          {
          }
         else
          {
           if((false))
            barrier();
          }
         if((false))
          {
           if((! (! (false))))
            {
            }
           else
            {
             barrier();
             if((false))
              continue;
            }
          }
         barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
       while(false);
       if((false))
        return;
      }
     if((false))
      return;
     for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        {
         do
          {
           return;
          }
         while(false);
        }
       if((false))
        {
         if((false))
          continue;
         if(true)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
          }
         return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
        }
       if((false))
        {
         if((false))
          return;
         barrier();
        }
      }
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
       if((false))
        return;
      }
    }
   else
    {
     if(true)
      {
       for(int _injected_loop_counter = (max(0, ((0) >> 0))); _injected_loop_counter != 1; _injected_loop_counter ++)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            continue;
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             if((false))
              barrier();
             if(true)
              {
               for(int _injected_loop_counter = ((true ? 0 : (70239))); _injected_loop_counter != ((1 << (int(0))) >> (((int(0)) | 0))); _injected_loop_counter ++)
                {
                 if((((((false) && true)) && true)))
                  continue;
                 if((false))
                  {
                   if((false))
                    break;
                   continue;
                  }
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(false)
                  {
                  }
                 else
                  {
                   if((false))
                    barrier();
                  }
                 if(true)
                  {
                   if((false))
                    {
                     if((false))
                      return;
                     if((false))
                      barrier();
                     do
                      {
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        break;
                       barrier();
                      }
                     while(((injectionSwitch.x > injectionSwitch.y)));
                    }
                  }
                 else
                  {
                  }
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  continue;
                }
               if((false))
                return;
              }
             else
              {
               if(((injectionSwitch.x > injectionSwitch.y)))
                {
                }
               else
                {
                 for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                  {
                   if((false))
                    barrier();
                  }
                }
               if(((bool(bvec3(false, false, false)))))
                barrier();
               do
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  return;
                }
               while(false);
              }
             if((false))
              barrier();
            }
           else
            {
            }
           if((false))
            barrier();
           if((false))
            barrier();
           for(int _injected_loop_counter = (0 | ((1 << (int(6))) >> ((clamp(int(6), int(6), int(6)))))); _injected_loop_counter != (0 ^ 0); _injected_loop_counter --)
            {
             if((false))
              {
               if((false))
                {
                 do
                  {
                   barrier();
                  }
                 while(false);
                }
               return;
              }
            }
           if((false || (false)))
            {
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                continue;
               barrier();
              }
             if((false))
              return;
            }
           else
            {
             return;
            }
          }
         if((false))
          {
           if((false))
            continue;
           barrier();
          }
         if((false))
          continue;
         if((false))
          continue;
         if((false))
          {
           if((false))
            break;
           barrier();
          }
         if((false))
          {
           if(((true && (false))))
            break;
           barrier();
          }
        }
      }
     else
      {
       if((false))
        barrier();
      }
     if(((true && (((injectionSwitch.x > injectionSwitch.y))))))
      return;
     if((false))
      return;
     if((false))
      {
       if((false))
        return;
       if((false))
        barrier();
       do
        {
         for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != (0 << (int(3))); _injected_loop_counter --)
          {
           barrier();
          }
         if((false))
          barrier();
        }
       while(false);
       if((false))
        return;
      }
     if((false))
      {
       if((false))
        {
         if(((! (! ((true && (false)))))))
          barrier();
         if((false))
          return;
         for(int _injected_loop_counter = (1 ^ 0); _injected_loop_counter != 0; _injected_loop_counter --)
          {
           return;
          }
        }
       for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if((false))
          break;
        }
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         if((false))
          return;
         if((false))
          {
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             return;
            }
           if((false))
            return;
          }
        }
       return;
      }
     do
      {
       if((false))
        return;
       if((false))
        {
         do
          {
           for(int _injected_loop_counter = (int(ivec4(1, 0, 1, 1))); _injected_loop_counter > 0; _injected_loop_counter --)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
             if((false))
              barrier();
             barrier();
            }
          }
         while(false);
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            {
             for(int _injected_loop_counter = ((0) - 0); _injected_loop_counter < (1 | (1 | 0)); _injected_loop_counter ++)
              {
               if((false))
                barrier();
              }
             return;
            }
           if((false))
            barrier();
           break;
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          barrier();
        }
       for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
        {
         if((false))
          {
           if(false)
            {
            }
           else
            {
             barrier();
            }
          }
        }
       for(int _injected_loop_counter = (0 >> ((min(int(2), (int(ivec2(int(2), 0))))))); _injected_loop_counter != 1; _injected_loop_counter ++)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
           barrier();
          }
         if((false))
          continue;
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != 1; _injected_loop_counter ++)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             barrier();
            }
          }
         if((false))
          {
           if(false)
            {
            }
           else
            {
             barrier();
            }
          }
        }
       do
        {
         if((false))
          break;
         if((false))
          barrier();
        }
       while((! (! (false))));
      }
     while(false);
     if(false)
      {
       if((false))
        barrier();
      }
     else
      {
       if((false))
        {
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if(false)
              {
              }
             else
              {
               if((false))
                {
                 if((false))
                  return;
                 barrier();
                }
               if(false)
                {
                }
               else
                {
                 return;
                }
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  return;
                }
               if(((injectionSwitch.x < injectionSwitch.y)))
                {
                 if((false))
                  return;
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               else
                {
                }
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             if((false))
              {
               if((false))
                return;
               barrier();
              }
            }
           if(((bool(bvec4(false, true, false, true)))))
            {
             if((false))
              barrier();
             if(false)
              {
              }
             else
              {
               return;
               if((false))
                {
                 if(false)
                  {
                  }
                 else
                  {
                   if((false))
                    {
                     if((false))
                      return;
                     barrier();
                    }
                  }
                 if(((true) || false))
                  {
                   if((false))
                    return;
                   if(((bool(bvec4((((! (! (false)))) || false), false, false, true)))))
                    return;
                  }
                 else
                  {
                  }
                 if((false))
                  {
                   if((false))
                    barrier();
                   if((((false) || false)))
                    return;
                   barrier();
                  }
                 if((false))
                  return;
                 do
                  {
                   if((! (((! ((! (! (false))))) || false))))
                    {
                    }
                   else
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      break;
                     barrier();
                    }
                  }
                 while(((injectionSwitch.x > injectionSwitch.y)));
                }
               if(true)
                {
                 if((false))
                  barrier();
                }
               else
                {
                }
               if(false)
                {
                }
               else
                {
                 if((false))
                  {
                   if((false))
                    barrier();
                   barrier();
                  }
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((false))
                  return;
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  return;
                 do
                  {
                   return;
                  }
                 while(false);
                }
              }
             if((false))
              barrier();
             if((false))
              {
               if(true)
                {
                 if((((false) || false)))
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   return;
                  }
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  return;
                }
               else
                {
                 if((false))
                  return;
                 if((false))
                  {
                   if((false))
                    return;
                   return;
                  }
                }
               barrier();
               if((false))
                barrier();
              }
            }
           if((false))
            barrier();
           if((false))
            barrier();
           for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < (1 | 0); _injected_loop_counter ++)
            {
             if((false))
              {
               if(false)
                {
                }
               else
                {
                 if(((bool(bool(false)))))
                  barrier();
                }
               return;
               if((false))
                break;
              }
            }
           if((false))
            {
             if((false))
              return;
             if((false))
              barrier();
             barrier();
            }
           if((false))
            {
             if((false))
              return;
             barrier();
            }
           if(false)
            {
             if(((true && (false))))
              barrier();
            }
           else
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if((false))
            {
             if((false))
              return;
             barrier();
            }
           barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           if((false))
            {
             if((false))
              barrier();
             if(true)
              {
               barrier();
              }
             else
              {
              }
            }
          }
         if((false))
          return;
         for(int _injected_loop_counter = (0 | 0); _injected_loop_counter < (0 | int((injectionSwitch.y))); _injected_loop_counter ++)
          {
           if(false)
            {
            }
           else
            {
             barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if(((! (! ((bool(bvec4(false, true, false, false))))))))
                break;
               if((false))
                {
                 if(true)
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    continue;
                   return;
                  }
                 else
                  {
                  }
                 if((false))
                  barrier();
                }
               break;
               if((false))
                return;
               if((false))
                return;
              }
            }
           if((false))
            {
             if((false))
              return;
             if((false))
              barrier();
             break;
            }
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
             barrier();
            }
           if(((! (! (false)))))
            return;
          }
         if((false))
          barrier();
         if((false))
          return;
        }
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if((false))
      {
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          return;
         for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
          {
           barrier();
          }
        }
      }
     if((false))
      barrier();
     if((false))
      {
       if((false))
        return;
       return;
      }
    }
   if((false))
    barrier();
  }
 else
  {
  }
 if(false)
  {
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = (1 ^ 1); _injected_loop_counter < 1; _injected_loop_counter ++)
      {
       barrier();
      }
    }
  }
 else
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     if((false))
      barrier();
     do
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(false);
     return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if((((false) || false)))
  {
   for(int _injected_loop_counter = 0; _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
    {
     if((false))
      barrier();
    }
   for(int _injected_loop_counter = 1; _injected_loop_counter != (80606 & 0); _injected_loop_counter --)
    {
     if((false))
      return;
     if((false))
      barrier();
     if((false))
      return;
     do
      {
       do
        {
         if((false))
          barrier();
        }
       while(false);
       if((false))
        break;
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
       else
        {
         if((((((injectionSwitch.x > injectionSwitch.y))) && true)))
          barrier();
         return;
        }
      }
     while(false);
    }
  }
 if((false))
  barrier();
 if((false))
  barrier();
 if(false)
  {
   if((false))
    return;
   if((false))
    return;
  }
 else
  {
   if((false))
    {
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if((false))
        {
         if(((bool(bool(false)))))
          return;
         return;
        }
      }
     else
      {
       if((false))
        {
         if(false)
          {
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           barrier();
           if((false))
            return;
          }
        }
      }
     do
      {
       if(false)
        {
         if((false))
          {
           if((false))
            return;
           barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
        }
       else
        {
         if((false))
          {
           if((false))
            {
             if((false))
              continue;
             barrier();
            }
           return;
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             barrier();
            }
           if((false))
            continue;
          }
         if((false))
          return;
        }
      }
     while(false);
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((false))
        return;
       barrier();
       if((false))
        return;
      }
     if((((false) && true)))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
       return;
       if((false))
        return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     do
      {
       barrier();
      }
     while(false);
     if((false))
      {
       if((false))
        {
         if((false))
          return;
         if(true)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         else
          {
          }
         barrier();
        }
       if((false))
        return;
       barrier();
      }
     for(int _injected_loop_counter = (0 >> (int(8))); _injected_loop_counter < 1; _injected_loop_counter ++)
      {
       if((false))
        {
         if(((bool(bvec4(false, true, true, false)))))
          {
           if((false))
            {
             if(false)
              {
              }
             else
              {
               for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
                {
                 for(int _injected_loop_counter = 0; _injected_loop_counter < (1 & 1); _injected_loop_counter ++)
                  {
                   if((false))
                    break;
                   barrier();
                  }
                }
              }
             if((false))
              break;
            }
           continue;
          }
         return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           barrier();
          }
         if((false))
          continue;
         if((false))
          break;
        }
       if((false))
        {
         if(true)
          {
           barrier();
          }
         else
          {
          }
         if((false))
          continue;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          break;
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         barrier();
        }
      }
     if((false))
      {
       for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
        {
         if((false))
          return;
        }
       barrier();
      }
     if((false))
      {
       if((false))
        barrier();
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         barrier();
         if((false))
          barrier();
        }
       else
        {
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           do
            {
             return;
            }
           while(false);
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
        }
       if((false))
        {
         if((false))
          {
           if((false))
            return;
           barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
      }
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        return;
       if((false))
        return;
       barrier();
       if(((! (((! (false)) || false)))))
        return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(false)
        {
        }
       else
        {
         return;
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      return;
     if((false))
      barrier();
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       return;
       if(false)
        {
        }
       else
        {
         if((false))
          return;
        }
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if((false))
      {
       if((false))
        {
         if(false)
          {
           if((false))
            return;
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         return;
        }
       if((false))
        barrier();
       if((false))
        return;
       if(true)
        {
         return;
        }
       else
        {
        }
      }
     if((false))
      barrier();
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   return;
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(((! (! (false)))))
      return;
     return;
    }
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
