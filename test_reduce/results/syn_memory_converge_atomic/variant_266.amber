#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

struct _GLF_struct_6 {
 mat3x2 _f0;
 vec3 _f1;
} ;

struct _GLF_struct_7 {
 _GLF_struct_6 _f0;
} ;

struct _GLF_struct_4 {
 vec3 _f0;
 float _f1;
 mat3x4 _f2;
 uvec2 _f3;
 ivec4 _f4;
 ivec3 _f5;
} ;

struct _GLF_struct_3 {
 ivec2 _f0;
 mat2 _f1;
 vec3 _f2;
 bvec2 _f3;
 bool _f4;
} ;

struct _GLF_struct_2 {
 vec2 _f0;
 bool _f1;
 uvec2 _f2;
} ;

struct _GLF_struct_5 {
 _GLF_struct_2 _f0;
 _GLF_struct_3 _f1;
 _GLF_struct_4 _f2;
 bvec2 _f3;
 ivec3 _f4;
} ;

struct _GLF_struct_0 {
 uvec2 _f0;
 vec3 _f1;
 uvec3 _f2;
 uvec4 _f3;
 mat3 _f4;
} ;

struct _GLF_struct_1 {
 _GLF_struct_0 _f0;
} ;

struct _GLF_struct_8 {
 uint subgroup_local_id;
 _GLF_struct_1 _f0;
 _GLF_struct_5 _f1;
 _GLF_struct_7 _f2;
} ;

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 _GLF_struct_8 _GLF_struct_replacement_8 = _GLF_struct_8(gl_SubgroupInvocationID, _GLF_struct_1(_GLF_struct_0(((((((uvec2(1u, 1u) * ((uvec2(0u, 0u) >> (uvec2(0u))) | (((~ (~ ((max(~ (~ (uvec2(((1u) * 1u)))), ~ (~ (uvec2(1u))))))))))))) | ((uvec2(0u, 0u) ^ ((uvec2(1u, 1u) * ((max((~ (~ ((((max(~ (~ (uvec2(1u))), ~ (~ (uvec2(1u)))))) | ((max(~ (~ (uvec2(1u))), ~ (~ (uvec2(1u)))))))))), (~ (~ ((((max(~ (~ (uvec2(1u))), ~ (~ (uvec2(1u)))))) | ((max(~ (~ (uvec2(1u))), ~ (~ (uvec2(1u))))))))))))))))))) | uvec2(0u, 0u))), vec3(1.0), (uvec3(0u, 0u, 0u) | (uvec3(1u))), ((uvec4(1u)) - uvec4(0u, 0u, 0u, 0u)), (mat3(mat3(mat3(1.0)))))), _GLF_struct_5(_GLF_struct_2(vec2(1.0), true, uvec2(1u)), _GLF_struct_3(ivec2(1), mat2(1.0), vec3(1.0), bvec2(true), true), _GLF_struct_4(vec3(1.0), 1.0, mat3x4(1.0), uvec2(1u), ivec4(1), ivec3(((max((1), (1))) - 0))), (bvec2((bvec3(bvec4(((bvec3(bvec4(bvec3(bvec4(bvec3(bvec2(true), ((injectionSwitch.x < injectionSwitch.y))), true)), false)))), true))))), ivec3(1)), _GLF_struct_7(_GLF_struct_6(mat3x2(1.0), vec3(1.0))));
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = ((gl_WorkGroupSize.x) >> 0u);
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = (min(workgroup_base + subgroup_id * (~ (~ (((((((0u << (uint(7u))) | ((clamp(subgroup_size, subgroup_size, subgroup_size))))) ^ 0u)) >> 0u)))) + _GLF_struct_replacement_8.subgroup_local_id, ((workgroup_base + ((subgroup_id) + 0u) * ((max((uint(uvec2(~ ((min(((min(uint(uvec2((0u ^ (~ (((0u ^ (((clamp(subgroup_size, subgroup_size, subgroup_size))))) >> 0u)))), 0u)), uint(uvec2((0u ^ (~ (((0u ^ (((clamp(subgroup_size, subgroup_size, subgroup_size))))) >> 0u)))), 0u))))), (0u ^ (~ (((0u ^ (((clamp(subgroup_size, subgroup_size, subgroup_size))))) >> 0u))))))), 1u))), ~ ((min(((min(uint(uvec2((0u ^ (~ (((0u ^ (((clamp(subgroup_size, subgroup_size, subgroup_size))))) >> 0u)))), 0u)), uint(uvec2((0u ^ (~ (((0u ^ (((clamp(subgroup_size, subgroup_size, subgroup_size))))) >> 0u)))), 0u))))), (0u ^ (~ (((0u ^ (((clamp(subgroup_size, subgroup_size, subgroup_size))))) >> 0u)))))))))) + _GLF_struct_replacement_8.subgroup_local_id) - 0u)));
 atomicStore(write_val, uint(virtual_gid), (min(((max((0 ^ ((((injectionSwitch.x > injectionSwitch.y)) ? (- 86712) : ((((((true ? (~ (~ (((((((clamp(int(ivec4(4, 0, 1, 1)), (0 + (int(ivec4(4, ((0) ^ 0), 1, (((((min(((false ? (max((44546), (44546))) : 1)), 1))) | 0) - (44321 & 0))))))), int(ivec4(4, ((0) >> (0 << (int(8)))), 1, (((((0 + (1))) * 1) | 0))))))) - (int((injectionSwitch.x)) | (((0) | (0))))))) + 0)))) : (- 72394)))) | 0) | 0))))), (((injectionSwitch.x > injectionSwitch.y)) ? (- 86712) : ((((((true ? (~ (~ (((((((clamp(int(ivec4(4, 0, 1, 1)), (0 + (int(ivec4(4, ((0) ^ 0), 1, (((((min(((false ? (max((44546), (44546))) : 1)), 1))) | 0) - (44321 & 0))))))), int(ivec4(4, ((0) >> (0 << (int(8)))), 1, (((((0 + (1))) * 1) | 0))))))) - (int((injectionSwitch.x)) | (((0) | (0))))))) + 0)))) : (- 72394)))) | 0) | 0)))))), ((((((4) - 0)) >> 0)) | (4)))), (1 * (64)), 0);
 uint read_val = atomicLoad((min(write_val, write_val)), 4, 64, 0);
 buf[virtual_gid] = uint(subgroupAllEqual(read_val));
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
