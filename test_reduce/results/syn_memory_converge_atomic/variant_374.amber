#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

struct _GLF_struct_0 {
 mat2x3 _f0;
 mat2x3 _f1;
} ;

struct _GLF_struct_1 {
 _GLF_struct_0 _f0;
 mat4x3 _f1;
 ivec4 _f2;
 uint workgroup_size;
} ;

struct _GLF_struct_2 {
 mat3x4 _f0;
 _GLF_struct_1 _f1;
 mat4x3 _f2;
 ivec3 _f3;
 int _f4;
 mat4x2 _f5;
 mat3x4 _f6;
} ;

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if((false))
  {
   if((false))
    return;
   return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  {
   if((false))
    return;
   return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 uint subgroup_size = gl_SubgroupSize;
 if((false || ((true && ((((((clamp(((max((((max(injectionSwitch, injectionSwitch))) * mat2(1.0)), (min((max(injectionSwitch, injectionSwitch)), (max(injectionSwitch, injectionSwitch))))))), ((max((((max(injectionSwitch, injectionSwitch))) * mat2(1.0)), (min((max(injectionSwitch, injectionSwitch)), (max(injectionSwitch, injectionSwitch))))))), ((max((((max(injectionSwitch, injectionSwitch))) * mat2(1.0)), (min((max(injectionSwitch, injectionSwitch)), (max(injectionSwitch, injectionSwitch))))))))) + sin(vec2(0.0, 0.0))).x > injectionSwitch.y))))))))
  return;
 if((false))
  return;
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     return;
    }
   return;
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((false))
  return;
 uint num_workgroup = gl_NumWorkGroups.x;
 if((false))
  return;
 if((false))
  {
   if((false))
    return;
   return;
  }
 if((false))
  {
   if((false))
    return;
   return;
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if((((bool(bvec4(! (((((! (false)) || false)) && true)), true, true, false))))))
  return;
 if((bool(bvec4((false || ((! (! ((bool(bvec3((false), true, false)))))))), true, false, false))))
  return;
 if((false))
  return;
 if((false))
  return;
 if((bool((! (! (bool((false || ((false))))))))))
  return;
 if((((true && ((bool((bvec2(((bvec2(bvec4(bvec2(bvec3(bvec2(bvec2((((false)) || false) && true, false)), false)), true, false)))))))))))))
  {
   if((false))
    return;
   return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  return;
 _GLF_struct_2 _GLF_struct_replacement_2 = _GLF_struct_2(mat3x4(1.0), _GLF_struct_1(_GLF_struct_0(mat2x3(1.0), mat2x3(((1.0) / 1.0))), mat4x3(1.0), ((ivec4(1)) << (ivec4(0, 0, 0, 0) | ivec4(0, 0, 0, 0))), gl_WorkGroupSize.x), mat4x3(((false ? (15.20) : (mix(((float(1.0)) / sqrt(1.0)), float((79.73)), bool(((((false || ((injectionSwitch.x > injectionSwitch.y)))) || false)))))))), ivec3(1), 1, mat4x2(((((((1.0)) / 1.0)) / round(length(normalize(vec3(1.0, 1.0, 1.0))))) - 0.0)), mat3x4(1.0));
 if((false))
  return;
 if((false))
  {
   if((false))
    {
     if(((! ((bool(bvec2(! (false), true)))))))
      return;
     return;
    }
   return;
  }
 if((((injectionSwitch.x > (clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))))
  return;
 if((false))
  return;
 if((false))
  return;
 if((false))
  {
   if((false))
    return;
   if(((bool(bvec2(false, false)))))
    return;
   return;
   if((false))
    return;
  }
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = (~ ((min(~ (((((_GLF_struct_replacement_2._f1.workgroup_size) * 1u)) | (_GLF_struct_replacement_2._f1.workgroup_size)) * ((max(0u, ((clamp((0u) | (0u), (0u) | (0u), (0u) | (0u)))))) | ((uint(uvec2((uint((injectionSwitch.x)) ^ (workgroup_id)), (1u ^ 1u))))))), ~ (((((_GLF_struct_replacement_2._f1.workgroup_size) * 1u)) | (_GLF_struct_replacement_2._f1.workgroup_size)) * ((max(0u, ((clamp((0u) | (0u), (0u) | (0u), (0u) | (0u)))))) | ((uint(uvec2((uint((injectionSwitch.x)) ^ (workgroup_id)), (1u ^ 1u)))))))))));
 if((((((injectionSwitch.x > injectionSwitch.y)))) && true))
  return;
 if((((true && ((bool(bvec3((false || (! ((! (! (! (false))))))), true, false))))))))
  return;
 if((false))
  return;
 if(((bool(bvec3(false, false, false)))))
  return;
 if((false))
  {
   if((false))
    return;
   return;
  }
 if((false))
  {
   if((bool(bvec4((((((injectionSwitch.x > injectionSwitch.y)))) && true), false, false, ((injectionSwitch.x < injectionSwitch.y))))))
    return;
   return;
  }
 if((((true && ((injectionSwitch.x > injectionSwitch.y))))))
  return;
 if((false))
  return;
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 atomicStore(write_val, (0u | ((min(((((((((uint(virtual_gid)) << (0u & (0u + (191224u)))) | ((uint(virtual_gid)) << (0u & (0u + (191224u)))))) - 0u))) | 0u), ((((((uint(virtual_gid)) << (0u & (0u + (191224u)))) | ((uint(virtual_gid)) << (0u & (0u + (191224u)))))) - 0u)))))), 4, (((max(64, 64))) ^ 0), ((0) << 0));
 if((((((injectionSwitch.x > injectionSwitch.y))) && true)))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if(((((max(injectionSwitch, injectionSwitch)).x > (1.0 * ((max(injectionSwitch.y, ((injectionSwitch.y) + 0.0)))))))))
    return;
   return;
  }
 uint read_val = atomicLoad(write_val, 4, (min(((0 ^ (((int(ivec4(64, 0, 1, 0)))))) >> 0), 64)), (int(((((ivec2(0, 1)) >> ivec2(0, 0))) / (min(ivec2(1, 1), ivec2(1, 1)))))));
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  return;
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  return;
 if((false))
  return;
 ((((0u << (uint(3u)))) << 0u) + (buf[virtual_gid] = uint(subgroupAllEqual(((0u ^ (0u)) ^ (((~ (((~ (max(((clamp((clamp(uint(uvec3((min(((read_val) << uint((((false ? (mod(- 5.3, - 53.20)) : injectionSwitch.x))))), ((read_val) << uint((((false ? (mod(- 5.3, - 53.20)) : injectionSwitch.x))))))), 1u, (1u * ((~ (~ (((1u << (uint((~ (((~ ((clamp(4u, 4u, 4u))))) >> uint((injectionSwitch.x))))))) >> (uint(4u)))))))))), uint(uvec3((min(((read_val) << (uint((max(uvec2((0u + (uint((injectionSwitch.x)))), uint((injectionSwitch.x))), uvec2((0u + (uint((injectionSwitch.x)))), uint((injectionSwitch.x)))))))), ((read_val) << (uint((max(uvec2((0u + (uint((injectionSwitch.x)))), uint((injectionSwitch.x))), uvec2((0u + (uint((injectionSwitch.x)))), uint((injectionSwitch.x)))))))))), 1u, (((((((((((max((clamp(1u, 1u, 1u)), (clamp(1u, 1u, 1u))))) | ((clamp(1u, 1u, (uint((injectionSwitch.x)) | (1u))))))) - 0u) << (((uint(4u)) << 0u))) >> ((0u ^ (uint(4u)))))) | 0u) + 0u)))), uint(uvec3(((read_val) << uint((injectionSwitch.x))), 1u, ((1u << (uint(4u))) >> ((~ (uint(uvec3((~ (uint(4u))), 0u, 0u)))))))))), uint(uvec3(((max((read_val), (read_val))) << uint((injectionSwitch.x))), 1u, ((1u << (uint(4u))) >> (uint(4u))))), ((((false ? (workgroup_id) : uint(uvec3((((((max(clamp((((clamp((max(min((clamp(read_val, read_val, read_val)), (((clamp(read_val, read_val, read_val))) | ((clamp(read_val, read_val, read_val))))), (0u ^ (min((clamp(read_val, read_val, read_val)), (((clamp(read_val, read_val, read_val))) | ((clamp(read_val, read_val, read_val))))))))), min((clamp(read_val, read_val, read_val)), (((clamp(read_val, read_val, read_val))) | ((clamp(read_val, read_val, read_val))))), ((min((clamp(read_val, read_val, read_val)), (((clamp(read_val, read_val, read_val))) | ((clamp(read_val, read_val, read_val)))))) / 1u))))), (((clamp((max(min((clamp(read_val, read_val, read_val)), (((clamp(read_val, read_val, read_val))) | ((clamp(read_val, read_val, read_val))))), (0u ^ (min((clamp(read_val, read_val, read_val)), (((clamp(read_val, read_val, read_val))) | ((clamp(read_val, read_val, read_val))))))))), min((clamp(read_val, read_val, read_val)), (((clamp(read_val, read_val, read_val))) | ((clamp(read_val, read_val, read_val))))), ((min((clamp(read_val, read_val, read_val)), (((clamp(read_val, read_val, read_val))) | ((clamp(read_val, read_val, read_val)))))) / 1u))))), (uint(uvec2((((clamp((max(min((clamp(read_val, read_val, read_val)), (((clamp(read_val, read_val, read_val))) | ((clamp(read_val, read_val, read_val))))), (0u ^ (min((clamp(read_val, read_val, read_val)), (((clamp(read_val, read_val, read_val))) | ((clamp(read_val, read_val, read_val))))))))), min((clamp(read_val, read_val, read_val)), (((clamp(read_val, read_val, read_val))) | ((clamp(read_val, read_val, read_val))))), ((min((clamp(read_val, read_val, read_val)), (((clamp(read_val, read_val, read_val))) | ((clamp(read_val, read_val, read_val)))))) / 1u))))), 0u)))), clamp((((clamp((max(min((clamp(read_val, read_val, read_val)), (((clamp(read_val, read_val, read_val))) | ((clamp(read_val, read_val, read_val))))), (0u ^ (min((clamp(read_val, read_val, read_val)), (((clamp(read_val, read_val, read_val))) | ((clamp(read_val, read_val, read_val))))))))), min((clamp(read_val, read_val, read_val)), (((clamp(read_val, read_val, read_val))) | ((clamp(read_val, read_val, read_val))))), ((min((clamp(read_val, read_val, read_val)), (((clamp(read_val, read_val, read_val))) | ((clamp(read_val, read_val, read_val)))))) / 1u))))), (((clamp((max(min((clamp(read_val, read_val, read_val)), (((clamp(read_val, read_val, read_val))) | ((clamp(read_val, read_val, read_val))))), (0u ^ (min((clamp(read_val, read_val, read_val)), (((clamp(read_val, read_val, read_val))) | ((clamp(read_val, read_val, read_val))))))))), min((clamp(read_val, read_val, read_val)), (((clamp(read_val, read_val, read_val))) | ((clamp(read_val, read_val, read_val))))), ((min((clamp(read_val, read_val, read_val)), (((clamp(read_val, read_val, read_val))) | ((clamp(read_val, read_val, read_val)))))) / 1u))))), (uint(uvec2((((clamp((max(min((clamp(read_val, read_val, read_val)), (((clamp(read_val, read_val, read_val))) | ((clamp(read_val, read_val, read_val))))), (0u ^ (min((clamp(read_val, read_val, read_val)), (((clamp(read_val, read_val, read_val))) | ((clamp(read_val, read_val, read_val))))))))), min((clamp(read_val, read_val, read_val)), (((clamp(read_val, read_val, read_val))) | ((clamp(read_val, read_val, read_val))))), ((min((clamp(read_val, read_val, read_val)), (((clamp(read_val, read_val, read_val))) | ((clamp(read_val, read_val, read_val)))))) / 1u))))), 0u))))))) | 0u)) << uint(((mix(float((9.3)), float((clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))), bool(true)))))), 1u, ((0u ^ ((1u << (uint(4u))))) >> (uint(4u))))))) ^ 0u))))), read_val)))) | 0u)))))))));
 if((false))
  {
   if((false))
    return;
   return;
  }
 if((false))
  return;
 if((((((false || ((injectionSwitch.x > injectionSwitch.y) && true)))))))
  return;
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
