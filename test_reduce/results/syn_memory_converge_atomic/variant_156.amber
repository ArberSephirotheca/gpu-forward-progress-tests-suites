#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((false))
  barrier();
 if((false))
  barrier();
 if((false || ((true && (((((true && (((false) && true)))) && true)))))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 if(((false || (false))))
  {
   if((false))
    barrier();
   barrier();
  }
 if(((((mix(vec2(((- 5552.6914 + - 3968.6225)), (injectionSwitch)[1]), vec2((injectionSwitch)[0], (2.5)), bvec2(true, false))).x > injectionSwitch.y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((((true && ((false)))) && true))
  barrier();
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((bool(bvec4(((((max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))), false, false, ((! (! ((injectionSwitch.x > (((max(injectionSwitch.y, injectionSwitch.y))) - 0.0))))))))))
  {
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     if((false))
      barrier();
     barrier();
    }
   barrier();
  }
 if((false))
  barrier();
 if((((false) || false)))
  {
   if((false))
    barrier();
   barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(((false || (false))))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 if((((((injectionSwitch.x < (min(((((injectionSwitch) * mat2(1.0)).y) - abs(0.0)), ((injectionSwitch) * mat2(1.0)).y)))) && (((true && ((! (! (bool(bvec4(((true) && (! (! (true)))), false, true, ((((false) && true)) || false))))))))))) && (((((((! (! (injectionSwitch.x < injectionSwitch.y))) || false)))) && (false))))))
  {
   if((false))
    barrier();
   if(((((bool((bool(bvec3((true && (((bool(injectionSwitch.x > (mix((vec2(((true ? ((false ? (mat3x4(- 6.4, 388.843, 596.135, 8397.4270, ((false ? (5.5) : - 591.178)), - 66.77, 39.03, - 7.9, - 253.709, - 9.9, 11.58, - 979.583)) : mat3x4(((vec2((700.125), (- 431.503))) - vec2(0.0, 0.0)), 1.0, 1.0, ((mix(float(injectionSwitch.x), float((float(179989u))), bool(false)))), 1.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), 1.0, 1.0, 0.0, 1.0, 0.0))) : (mat3x4(3447.2172, 960.483, 3.5, 2.6, - 6.9, 89.77, - 576.791, 2.8, - 8.3, 2483.1199, - 81.21, - 68.98)))))), vec2((max((injectionSwitch)[0], (injectionSwitch)[(max(0, 0))])), ((vec2(mat2x4(injectionSwitch, 1.0, 1.0, 1.0, 1.0, sin(0.0), 0.0))))[1]), bvec2(true, true))).y)) || false))), true, false)))))))))
    barrier();
   if((false))
    {
     if(((bool(bvec4(false, false, false, true)))))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   barrier();
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if((bool(bool((((injectionSwitch.x > injectionSwitch.y)))))))
  {
   if((false))
    barrier();
   barrier();
  }
 if(((! (false || ((! (false)))))))
  barrier();
 if((false))
  {
   if((((((injectionSwitch.x > injectionSwitch.y))) || false)))
    barrier();
   if((false))
    barrier();
   barrier();
  }
 if((((false) || ((((injectionSwitch.x) / sqrt(1.0)) > injectionSwitch.y)))))
  barrier();
 uint workgroup_size = ((gl_WorkGroupSize) - uvec3(0u, 0u, (min(0u, 0u)))).x;
 if((((((log(vec2(1.0, 1.0)) + (clamp(injectionSwitch, (vec2(((((injectionSwitch.x > injectionSwitch.y)) ? (- 5922.0291) : 0.0)), 0.0) + (injectionSwitch)), ((false ? (injectionSwitch) : injectionSwitch)))))).x > ((min((min((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0))), (injectionSwitch) * mat2(1.0)))).y))))
  barrier();
 uint workgroup_id = (uint(uint(gl_WorkGroupID.x)));
 if((((((max((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0)))).x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if(((false || (false))))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 uint workgroup_base = workgroup_size * ((workgroup_id) | (workgroup_id));
 if((((! (! ((false)))) || false)))
  barrier();
 if(((! (((! (true && ((false)))) || false)))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 if(((bool(bvec3(false, true, false)))))
  barrier();
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 if((((injectionSwitch.x > ((injectionSwitch.y) * 1.0)))))
  barrier();
 if(((((((! (! ((((bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, (! ((! (! (! (true))))))))))) || false))) || false))))))
  {
   if((false))
    barrier();
   if(((! (! (false)))))
    barrier();
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((((false) && true)))
  {
   if((((false || (bool(bvec2(false, true)))))))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if((false))
    barrier();
  }
 if((false))
  barrier();
 if((false || ((false))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 atomicStore(write_val, uint(virtual_gid), 4, 64, 0);
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 uint read_val = atomicLoad(write_val, ((~ (~ (((0 ^ (max((4), (4))))) >> 0)))), 64, 0);
 if((false))
  barrier();
 if(((((bool(bvec4(((false ? (((float(mat3x2(((float((mat3(((mat4(((((injectionSwitch.x > injectionSwitch.y)) ? (mat3(- 4.4, - 8.5, - 852.396, - 4.6, 916.619, 330.488, 778.837, 640.142, - 7.7)) : mat3(log(67.06), ((mix(float((- 840.484)), float(dot(((mix(vec3((min(vec3(0.0, 0.0, sqrt(1.0)), vec3(0.0, 0.0, (mix(float((8.6)), float((min(sqrt(1.0), sqrt(1.0)))), bool(true))))))[0], (- 9.7), (- 8.4)), vec3((2.4), (min(vec3(0.0, 0.0, sqrt(1.0)), vec3(0.0, 0.0, sqrt(1.0))))[((false ? (65688) : 1))], (min(vec3(0.0, 0.0, sqrt(1.0)), vec3(0.0, 0.0, sqrt(1.0))))[2]), bvec3((false || (false)), true, true)))), (vec3(((mat2x4(vec3(0.0, 0.0, 1.0), 0.0, 0.0, 0.0, 0.0, (mix(float((- 75.24)), float(0.0), bool(true))))) + mat2x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))), bool(true)))), 0.0, 0.0, cos(((0.0) + 0.0)), 1.0, 0.0, ((0.0) * 1.0), 1.0))))) - mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))) - 0.0), 0.0, 0.0, 1.0, 0.0, 1.0))))) : injectionSwitch.x)) > (float(mat4x3((mix(float((min(injectionSwitch, (clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).y), float((- 8.2)), bool(false))), 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, exp(0.0), abs(1.0), 1.0, exp(0.0)))), true, false, false)))))))
  {
   if((((injectionSwitch.x > (mix(vec2((- 3279.5470), ((false ? (- 2179.4179) : (injectionSwitch)[1]))), vec2((injectionSwitch)[0], (938.060)), bvec2(((injectionSwitch.x < injectionSwitch.y)), false))).y))))
    barrier();
   if(((((false || (injectionSwitch.x > injectionSwitch.y))))))
    barrier();
   if(((true && (false))))
    barrier();
   if(((true && ((true && (false))))))
    barrier();
   if(((((false || (false))) || false)))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(((((vec2(1.0, 1.0) * ((((((min(injectionSwitch, injectionSwitch)))) * mat2(1.0)) + vec2(0.0, 0.0)))).x > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 if((((injectionSwitch.x > (mix(float(injectionSwitch.y), float(((- 1.3 / 4.3))), bool(false)))))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 buf[virtual_gid] = uint(subgroupAllEqual(read_val));
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
