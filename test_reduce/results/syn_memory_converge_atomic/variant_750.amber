#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((((injectionSwitch.x > (clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   if(((true && (((false) || false)))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y)) || ((bool(bvec2(((false || ((bool(bvec3((((! (((! (injectionSwitch.x > injectionSwitch.y)) && true))))), false, true)))))), ((injectionSwitch.x < injectionSwitch.y))))))))
  barrier();
 if(((((false || (injectionSwitch.x > (mix(vec2((- 8.4), (vec4(- 7793.5597, - 4075.1995, 6376.4839, 69.92).x)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(((injectionSwitch.x < injectionSwitch.y)), true))).y))))))
  barrier();
 if((false))
  barrier();
 uvec4 GLF_merged4_0_1_13_1_1_11_2_1_12_3_1_14num_workgroupsubgroup_idworkgroup_idworkgroup_size;
 if((false))
  {
   if((! (((bool(bvec4(bool(bvec3((! (! (! ((true && ((((injectionSwitch.x > injectionSwitch.y))))))))), true, ((injectionSwitch.x < injectionSwitch.y)))), false, ((injectionSwitch.x > injectionSwitch.y)), true)))))))
    barrier();
   if((false))
    barrier();
   if((((false || ((true && ((injectionSwitch.x > injectionSwitch.y))))))))
    barrier();
   barrier();
   if((false))
    barrier();
  }
 if(((((false || (false))) && true)))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((((((((true && ((false)))) && true))) && ((! (! (! ((! (true)))))) && (true))) && true))
  {
   if((false))
    barrier();
   if(((true && (true && (((((bool(bvec4(bool(bvec2((bool(bool(((injectionSwitch.x < injectionSwitch.y))))), (false || ((! (! (false))))))), false, false, false)))) && (bool(bvec3((false), ((true) && true), true))))))))))
    barrier();
   barrier();
   if(((! (! (false)))))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
  }
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  {
   if((((((injectionSwitch.x < injectionSwitch.y)) && ((((injectionSwitch.x > (max(injectionSwitch, injectionSwitch)).y) || false)))))))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((true && ((false))))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(((((mix(vec2((injectionSwitch)[0], (mix(((false ? (- 3332.7538) : float((35.93)))), (clamp((clamp(float((injectionSwitch)[1]), float((injectionSwitch)[1]), float((injectionSwitch)[1]))), float((injectionSwitch)[1]), float((injectionSwitch)[1]))), bool(true)))), vec2((3.2), (18.84)), bvec2(false, false))).x > injectionSwitch.y))))
  barrier();
 GLF_merged4_0_1_13_1_1_11_2_1_12_3_1_14num_workgroupsubgroup_idworkgroup_idworkgroup_size.y = subgroup_id;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   if((false))
    {
     if((false))
      {
       if(((false || (false))))
        barrier();
       barrier();
      }
     if((((! (! (bool(bool(false))))))))
      barrier();
     barrier();
     if((false))
      barrier();
    }
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   if(((((bool(bvec4(((false || ((false || ((! (! (((((((true && (bool(bvec4((bool(bvec2(injectionSwitch.x < injectionSwitch.y, false))), false, true, (! (! (false)))))))) && true))))))))))) && (((injectionSwitch.x > injectionSwitch.y)))), false, (bool((((bvec2((bvec2(bvec3(bvec2(bvec2(bvec2((bvec2(bvec3(bvec2((bvec3(bvec4(bvec3(bvec2(true, true), true), false)))), ((true) && true))))))), true))))))))), true))) || false))))
    {
     if((((((true && ((injectionSwitch.x > injectionSwitch.y)))) || false))))
      barrier();
     barrier();
    }
   barrier();
   if(((((injectionSwitch.x < injectionSwitch.y)) && ((! (((! (((injectionSwitch.x > injectionSwitch.y)))) || false)))))))
    barrier();
   if((((((((! (! ((false || (false || ((((! (! (((bool(bool((bool(bvec2((((false)) || false), ((injectionSwitch.x < injectionSwitch.y))))))))) && true)))) || false))))))) || false))) && true))))
    barrier();
  }
 if((false))
  barrier();
 if((false))
  {
   if((((((! (! (! (! ((((injectionSwitch.x < injectionSwitch.y)) && (! ((((injectionSwitch.x < injectionSwitch.y)) && (((bool(bvec3(! (((((injectionSwitch.x > (float(vec4(injectionSwitch.y, 0.0, 1.0, 1.0)))) && true) || false))), true, ((true) && true))))))))))))))))))))
    barrier();
   if((false))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(((((false || (bool(bvec4((injectionSwitch.x > ((injectionSwitch.y) + 0.0)), ((injectionSwitch.x < injectionSwitch.y)), ((injectionSwitch.x < ((injectionSwitch) * mat2(1.0)).y)), ((((false) || false)) && true)))))))))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if((false))
      barrier();
    }
   barrier();
   if((false))
    barrier();
  }
 if((false))
  barrier();
 if((((((0.0 + ((mix(float((- 17.05)), float(max((float(mat4(injectionSwitch.x, round(length(normalize(1.0))), 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, ((min(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0))))), 0.0, exp(0.0), 1.0, 1.0, 0.0, 0.0, 1.0))), (1.0 * (injectionSwitch.x)))), bool(true)))))) > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(((((! ((bool(bvec4(! (false), true, true, false)))))) || false)))
  barrier();
 GLF_merged4_0_1_13_1_1_11_2_1_12_3_1_14num_workgroupsubgroup_idworkgroup_idworkgroup_size.x = num_workgroup;
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 uint workgroup_size = (clamp(gl_WorkGroupSize.x, gl_WorkGroupSize.x, ((~ (((~ (uint(uvec3(gl_WorkGroupSize.x, ((((0u) << 0u)) / 1u), 0u))))) - 0u)))));
 if((((((injectionSwitch.x < injectionSwitch.y)) && (true && (false))))))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((((! (! ((! (! ((false)))))))) || false))
  {
   if((false))
    barrier();
   if((bool(bvec3((! (bool((bvec3(bvec3(bvec3(((! (! (bool(bvec4((! ((bool(bvec4(! ((! (((((! ((true && (! ((! (! (bool(bvec3((((injectionSwitch.x > injectionSwitch.y))), true, false)))))))))))) || (((bool(bvec2(false, true))) && true)))))), true, true, true))))), true, false, false)))))), false, false))))))), true, true))))
    {
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     barrier();
     if((false))
      barrier();
    }
   barrier();
  }
 if((((false || ((((! (! ((((bool(bvec3(bool(bool(false)), false, false)))) && true))))) && true))))))
  barrier();
 if((((false || ((false)))) && (((vec2(injectionSwitch[0], (clamp(injectionSwitch[1], injectionSwitch[1], injectionSwitch[1])))).x < injectionSwitch.y))))
  barrier();
 if((! (! (((true && (false)))))))
  {
   if((bool(bvec2(((false || (((((false))) && true) || false))), false))))
    barrier();
   if((((false) && true)))
    {
     if((false))
      barrier();
     barrier();
    }
   if(((bool(bvec3(((injectionSwitch.x > injectionSwitch.y)), false, true)))))
    barrier();
   if((false))
    barrier();
   barrier();
   if(((true && (((false) || (bool((! (! ((false || (bool(((((bool(bvec4(true, true, true, false)))) || false) && ((! (! (false))))))))))))))))))
    barrier();
  }
 if(((true && ((false || (((false || (((true) && true))) && ((bool(bvec3((bool((bvec3(bvec4((bvec3(bvec3(bvec3(((injectionSwitch.x > injectionSwitch.y)), true, false)))), true))))), false, true)))))))))))
  {
   if((false))
    barrier();
   barrier();
  }
 ((true ? GLF_merged4_0_1_13_1_1_11_2_1_12_3_1_14num_workgroupsubgroup_idworkgroup_idworkgroup_size.w = workgroup_size : (write_val)));
 uint workgroup_id = gl_WorkGroupID.x;
 if((false))
  barrier();
 if(((! (! (false)))))
  {
   if((((((injectionSwitch.x > injectionSwitch.y))) && true)))
    {
     if((false))
      {
       if(((true && (false))))
        barrier();
       barrier();
      }
     barrier();
    }
   if((false))
    barrier();
   barrier();
   if((false))
    barrier();
   if((false))
    barrier();
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((injectionSwitch.x > (min((mix(float((clamp(((true ? injectionSwitch : (vec2(- 30.79, - 0.2)))), (min(injectionSwitch, injectionSwitch)), (vec2(((mat2x3(injectionSwitch, 0.0, 0.0, 0.0, 1.0)) * mat2(1.0)))))).y), float((2.0)), bool(false))), injectionSwitch.y))))))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((false))
  barrier();
 if((((((((! (! (((bool((bvec3(bvec3((bvec3((bvec3(bvec3((bvec3((bvec3(bvec3(bvec3(bvec3(bvec3((((true && (((false) && true)))) || ((injectionSwitch.x > injectionSwitch.y))), true, false)))))))))))))))))) && true))))) && true) || (((clamp(injectionSwitch.x, ((injectionSwitch.x) / 1.0), injectionSwitch.x)) > (float(vec4(injectionSwitch.y, determinant(mat3(0.0, 1.0, 0.0, abs(0.0), 0.0, 0.0, 0.0, 0.0, 0.0)), exp(tan(0.0)), 0.0))))))))))
  {
   if((false))
    barrier();
   if(((((((((float(mat2x3(injectionSwitch.x, 1.0, 0.0, 0.0, 0.0, 1.0)))) / 1.0) > (max(injectionSwitch.y, injectionSwitch.y))) && true)))))
    barrier();
   barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     barrier();
    }
  }
 if((false))
  barrier();
 GLF_merged4_0_1_13_1_1_11_2_1_12_3_1_14num_workgroupsubgroup_idworkgroup_idworkgroup_size.z = (((clamp(workgroup_id, ((false ? (clamp((((subgroup_size) << 0u)), (((true ? ((((subgroup_size) | (subgroup_size))) << 0u) : (63810u)))), (subgroup_size))) : workgroup_id)), (uint(uvec3((0u ^ (workgroup_id)), 1u, uint((injectionSwitch.y))))))) / (1u | 1u)));
 if((false))
  barrier();
 uint workgroup_base = GLF_merged4_0_1_13_1_1_11_2_1_12_3_1_14num_workgroupsubgroup_idworkgroup_idworkgroup_size.w * ((0u + ((((GLF_merged4_0_1_13_1_1_11_2_1_12_3_1_14num_workgroupsubgroup_idworkgroup_idworkgroup_size.z) / 1u)) - (min(0u, ((0u) - 0u))))));
 if((false))
  barrier();
 if((! (! ((false)))))
  barrier();
 if((true && ((((! (! ((false || ((((injectionSwitch.x > injectionSwitch.y)))))))))) && true)))
  barrier();
 if((((((bool(bvec2((injectionSwitch.x > injectionSwitch.y), true))) || false)))))
  barrier();
 uint virtual_gid = workgroup_base + (clamp(GLF_merged4_0_1_13_1_1_11_2_1_12_3_1_14num_workgroupsubgroup_idworkgroup_idworkgroup_size.y * subgroup_size, (1u * ((0u | (GLF_merged4_0_1_13_1_1_11_2_1_12_3_1_14num_workgroupsubgroup_idworkgroup_idworkgroup_size.y * subgroup_size)))), ((false ? ((workgroup_id / 122773u)) : GLF_merged4_0_1_13_1_1_11_2_1_12_3_1_14num_workgroupsubgroup_idworkgroup_idworkgroup_size.y * subgroup_size)))) + subgroup_local_id;
 if((false))
  {
   if(((false || (true)) && ((false))))
    {
     if(((! (! (false)))))
      {
       if((false))
        barrier();
       barrier();
      }
     barrier();
    }
   barrier();
  }
 if((false))
  barrier();
 if(((! (! ((! (! ((((injectionSwitch.x < ((clamp(vec2(injectionSwitch[0], (((clamp(injectionSwitch, injectionSwitch, injectionSwitch))) * exp(vec2(0.0, (float(mat2(((0.0) / 1.0), (max((dot(vec3(1.0, 0.0, (injectionSwitch.x)), vec3(0.0, (injectionSwitch.y), 1.0))), (1.0 * ((dot(vec3(1.0, 0.0, (injectionSwitch.x)), vec3(0.0, (injectionSwitch.y), 1.0))))))), 1.0, 1.0))))))[1]), (max(vec2(injectionSwitch[0], (((clamp(injectionSwitch, injectionSwitch, injectionSwitch))) * exp(vec2(0.0, (float(mat2(((0.0) / 1.0), (max((dot(vec3(1.0, 0.0, (injectionSwitch.x)), vec3(0.0, (injectionSwitch.y), 1.0))), (1.0 * ((dot(vec3(1.0, 0.0, (injectionSwitch.x)), vec3(0.0, (injectionSwitch.y), 1.0))))))), 1.0, 1.0))))))[1]), vec2(injectionSwitch[0], (((clamp(injectionSwitch, injectionSwitch, injectionSwitch))) * exp(vec2(0.0, (float(mat2(((0.0) / 1.0), (max((dot(vec3(1.0, 0.0, (injectionSwitch.x)), vec3(0.0, (injectionSwitch.y), 1.0))), (1.0 * ((dot(vec3(1.0, 0.0, (injectionSwitch.x)), vec3(0.0, (injectionSwitch.y), 1.0))))))), 1.0, 1.0))))))[1]))), vec2(injectionSwitch[0], (((clamp(injectionSwitch, injectionSwitch, injectionSwitch))) * exp(vec2(0.0, (float(mat2(((0.0) / 1.0), (max((dot(vec3(1.0, 0.0, (injectionSwitch.x)), vec3(0.0, (injectionSwitch.y), 1.0))), (1.0 * ((dot(vec3(1.0, 0.0, (injectionSwitch.x)), vec3(0.0, (injectionSwitch.y), 1.0))))))), 1.0, 1.0))))))[1])))).y)) && (((((bool((bvec3(bvec4(bvec3(((bool(bvec3(false, true, true))) || false) || false, true, true), false))))))))))))))))))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     if((false))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((((! (! ((false))))) || false))
  barrier();
 if((((((injectionSwitch.x > injectionSwitch.y) || false)))))
  {
   if((((((true && ((bool(bvec4((! (! ((injectionSwitch.x > injectionSwitch.y)))), false, true, true))))))) && true)))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > ((true ? ((injectionSwitch) + vec2(0.0, 0.0)).y : (- 1.9)))))))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   if((((((injectionSwitch) * mat2(1.0)).x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   barrier();
  }
 atomicStore(write_val, uint(virtual_gid), 4, 64, 0);
 if((false))
  barrier();
 if(((true && (! (! ((false)))))))
  barrier();
 if((false))
  barrier();
 uint read_val = atomicLoad((0u + ((0u ^ ((clamp((~ (~ (write_val))), (uint(uvec4(write_val, uint((injectionSwitch.y)), 0u, ((1u) * 1u)))), write_val)))))), 4, 64, ((0) | 0));
 if((((injectionSwitch.x > (float((max(float(injectionSwitch.y), float(injectionSwitch.y)))))))))
  barrier();
 if((((((((mix(float(((vec2(injectionSwitch[0], (min(injectionSwitch[(min((0 | (1)), (min(1, 1))))], injectionSwitch[1])))).x) / 1.0), float((- 339.910)), bool(false))))) - 0.0) > injectionSwitch.y))))
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((((injectionSwitch.x > (vec2(vec3(injectionSwitch, 0.0))).y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 buf[virtual_gid] = uint(subgroupAllEqual(read_val));
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
