#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 if((false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if((false))
  barrier();
 if((((((false)) && true)) && true))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if((! (! ((false)))))
      barrier();
     barrier();
     if((false))
      return;
     if((false))
      barrier();
    }
   barrier();
   if((false))
    {
     if((false))
      return;
     barrier();
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(((true && (! (((! (((true && ((((bool(bvec2(injectionSwitch.x > (min(injectionSwitch.y, (mix(float((- 621.588)), float(injectionSwitch.y), bool(true))))), true)))))))))) || false))))))
  {
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   barrier();
  }
 if((false))
  return;
 if((false))
  {
   if((false))
    {
     if((! (! ((false)))))
      return;
     barrier();
     if(((! (! (false)))))
      return;
     if((! (((((! (! (((bool(bool(! (((((min(((injectionSwitch) * vec2(1.0, 1.0)), (vec2(mat2x3(((injectionSwitch) - vec2(0.0, 0.0)), 1.0, 0.0, 0.0, 0.0))))).x > injectionSwitch.y))))))) && ((injectionSwitch.x < injectionSwitch.y))))))) || false)))))
      barrier();
     if((false))
      return;
    }
   return;
   if((false))
    {
     if((false))
      return;
     barrier();
    }
  }
 if((false || ((false))))
  {
   if((((((false) && true))) && true))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    return;
   if((false))
    {
     if((false))
      return;
     barrier();
    }
   if((false))
    barrier();
   barrier();
   if((false))
    {
     if((false))
      return;
     return;
    }
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  return;
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     barrier();
     if((false))
      barrier();
    }
   if((false))
    barrier();
   return;
   if(((bool(bool(false)))))
    return;
   if((false))
    return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    return;
   if((false))
    {
     if((false))
      return;
     return;
    }
   if((false))
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      barrier();
     barrier();
    }
   if((false))
    return;
   barrier();
  }
 if((false))
  {
   if((bool(bvec3((false), true, true))))
    barrier();
   barrier();
  }
 if((false))
  return;
 if((((false) || false)))
  barrier();
 if((false))
  return;
 if((((false) || ((injectionSwitch.x > injectionSwitch.y)))))
  {
   if((false))
    {
     if(((((! (! ((false || (false)))))) && true)))
      barrier();
     barrier();
     if((false))
      return;
    }
   if(((((((mix(float((97.32)), float(injectionSwitch.x), bool(true)))) + (injectionSwitch.x)) > injectionSwitch.y))))
    return;
   barrier();
  }
 if(((true && (false))))
  return;
 if(((! (! (false)))))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((((! (! (true))) && (false))))
  {
   if((((false) || false)))
    return;
   if((false))
    return;
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 uint num_workgroup = (max((max((((bool(bvec4(false, false, false, true))) ? (((uint(95756) & 0u) ^ (uvec4(2504u, 101261u, 182721u, (min(174624u, 174624u)))[2]))) : (((clamp(((true ? gl_NumWorkGroups.x : (subgroup_id))), ((true ? gl_NumWorkGroups.x : (subgroup_id))), ((true ? gl_NumWorkGroups.x : (subgroup_id)))))) << 0u))), gl_NumWorkGroups.x)), ((0u >> (uint(7u))) + ((((false ? (58430u) : max(((true ? gl_NumWorkGroups.x : (subgroup_id))), gl_NumWorkGroups.x))))))));
 if((((false)) && true))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  {
   if((false))
    barrier();
   return;
  }
 if((bool(bool((! (! ((((injectionSwitch.x > injectionSwitch.y))))))))))
  {
   if((((false) && true)))
    {
     if((false))
      return;
     barrier();
    }
   if((false))
    return;
   barrier();
  }
 if((false))
  barrier();
 if((false))
  return;
 if((false))
  {
   if((((injectionSwitch.x > (vec2(injectionSwitch[0], (mix(float((- 0.4)), float(injectionSwitch[1]), bool(true))))).y))))
    barrier();
   return;
  }
 if((false))
  {
   if((false))
    return;
   return;
  }
 if(((! (! (false)))))
  barrier();
 if((((! (! (bool(bool(((bool(bvec2(true && (bool(bvec2((! ((bool(bvec2((((! (! (! (((! (! (false))))))))) || false), true))))), (! (! (false)))))), false))))))))))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        return;
       return;
      }
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((false || (bool((! (! (bool(false))))))))))
        return;
       return;
      }
     barrier();
    }
   if((false))
    {
     if(((false || (false))))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   if((false))
    return;
   if(((false || (false))))
    barrier();
   if((false))
    return;
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((((((injectionSwitch.x) + 0.0) > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((false))
    return;
   return;
  }
 if((false))
  return;
 uint workgroup_size = gl_WorkGroupSize.x;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if(((true && (false))))
  barrier();
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((((true && (bool(bvec4(((((bool(bvec2(true, false)))) && true) && (false)), (true && (true)), false, true)))))))
  {
   if((false))
    barrier();
   if((false))
    return;
   barrier();
   if((false))
    barrier();
  }
 if((false))
  {
   if(((! (! ((bool(bvec4((true && (false)), true, false, true))))))))
    {
     if(((bool(bvec4(false, false, false, false)))))
      {
       if((false))
        return;
       if(((bool(bool(false)))))
        barrier();
       if((false))
        return;
       if(((((bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, true)))))))
        return;
       return;
      }
     if((false))
      return;
     barrier();
     if(((((bool(bvec4((! (! (false || ((! ((true && (! ((((injectionSwitch.x > injectionSwitch.y)))))))))))), false, (true && (true)), false)))) || false)))
      return;
     if((false))
      barrier();
    }
   if((false))
    {
     if((false))
      return;
     return;
    }
   if((false))
    return;
   if((false))
    barrier();
   if((((injectionSwitch.x > ((injectionSwitch.y) + 0.0)))))
    return;
   barrier();
   if((((((! (! ((injectionSwitch.x > injectionSwitch.y))))) || false))))
    {
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if((((injectionSwitch.x < injectionSwitch.y)) && (((true && ((false || (false))))))))
    barrier();
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if((false))
  {
   if((false))
    {
     if((false))
      return;
     barrier();
    }
   barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if((false))
  return;
 if((! (! (((true && ((false || (! (! (! (! (((bool(bvec2((false), false)))))))))))))))))
  return;
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    return;
   if((bool((bvec3((bvec3(bvec3(bvec3(bvec3((false), false, false))))))))))
    {
     if((false))
      return;
     barrier();
    }
   if((false))
    barrier();
   if(((false || ((((! (! (false))) || false))))))
    return;
   if((false))
    return;
   barrier();
   if((false))
    barrier();
   if((false))
    return;
  }
 if((false))
  barrier();
 if((((((vec2(0.0, 0.0) + (vec2(mat3(injectionSwitch, 1.0, (float(mat4x2(1.0, 1.0, 1.0, 1.0, 1.0, cos(0.0), exp(tan(0.0)), 0.0))), 1.0, (max((float(mat2((clamp((min(0.0, 0.0)), 0.0, 0.0)), round(length(normalize(vec2(1.0, 1.0)))), 1.0, 1.0))), (clamp((min(0.0, 0.0)), 0.0, 0.0)))), (((false ? (vec2(3296.2733, 3010.4561)) : injectionSwitch)).x), 1.0, 0.0))))).x > injectionSwitch.y))))
  {
   if((false))
    return;
   barrier();
   if((false))
    return;
  }
 uint workgroup_base = workgroup_size * ((max((workgroup_id) / 1u, (workgroup_id) / 1u)));
 uint virtual_gid = ((workgroup_base + ((subgroup_id) >> (clamp(((~ (~ (uint(uvec2((~ (~ (0u))), 1u)))))), (0u + (0u)), (uint(uvec4(0u, 0u, 1u, (uint(uint((~ (~ (0u)))))))))))) * subgroup_size) | 0u) + subgroup_local_id;
 if((((((false)) && true)) || (! (((! (false)) && true)))))
  barrier();
 if((false))
  return;
 if((false || (((! (! ((((bool((bvec2((bvec3(bvec3(bvec3(bvec2((false || (false)), ((injectionSwitch.x < injectionSwitch.y))), false)))))))) || false)))))))))
  barrier();
 if((false))
  return;
 if(((false || (((false)) || false))))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  {
   if((false))
    {
     if(((! ((true && (((true && (bool(bool(! ((bool(bvec2(false, true)))))))))))))))
      barrier();
     barrier();
     if((false))
      return;
    }
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 if((! ((bool(bvec3(! ((((injectionSwitch.x > (vec2(injectionSwitch[0], injectionSwitch[1])).y)))), true, true))))))
  {
   if((false))
    return;
   barrier();
  }
 if((false))
  return;
 if((false))
  barrier();
 if(((! (! ((! (! ((((((! ((bool(bvec3(! (injectionSwitch.x > injectionSwitch.y), true, false)))))) && true)))))))))))
  {
   if((false))
    {
     if((false))
      return;
     barrier();
    }
   barrier();
  }
 if((false))
  return;
 if((true && ((false))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    return;
   return;
  }
 if(((bool(bvec4(false, true, true, false)))))
  {
   if((false))
    {
     if((false))
      return;
     return;
    }
   if((false))
    barrier();
   if(((! ((true && (! (((bool(bvec4((true && ((false) && (! (! (! (! (((bool(bool(true))))))))))), true, false, ((injectionSwitch.x > injectionSwitch.y)))))))))))))
    {
     if((false))
      return;
     barrier();
    }
   return;
  }
 atomicStore(write_val, uint(virtual_gid), 4, 64, 0);
 if((false))
  {
   if(((((min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
    barrier();
   return;
   if(((false || (false))))
    {
     if((false))
      return;
     barrier();
    }
  }
 if((false))
  barrier();
 if((false))
  return;
 uint read_val = atomicLoad(write_val, 4, 64, 0);
 if((((false || ((! ((bool(bvec4(! (((false || (bool(bvec4(((((((((((false ? (2.5) : max(((((true ? injectionSwitch : ((min(injectionSwitch, injectionSwitch))))).x) * 1.0), (((clamp((min(true ? injectionSwitch : (injectionSwitch), (min(true ? injectionSwitch : (injectionSwitch), true ? injectionSwitch : (injectionSwitch))))), true ? injectionSwitch : (injectionSwitch), true ? injectionSwitch : (injectionSwitch))))).x)))) > injectionSwitch.y))) && true))) && true), false, ((! (! (bool((bvec2(bvec4(bvec2(true, false), false, true)))))))), false)))))), true, true, false))))))) && true)))
  {
   if((false))
    return;
   if(((bool(bvec4(((false) || false), true, true, false)))))
    return;
   return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   return;
  }
 if(((((injectionSwitch.x < injectionSwitch.y)) && (! (((((! (bool(((! (! (bool(bvec2(bool(((((false)) && true))), true))))))))) && ((! (! ((injectionSwitch.x < (clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))))))) && true)))))))
  {
   if(((! (((! (false)) && true)))))
    return;
   if((false))
    barrier();
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    return;
   if((false))
    {
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     barrier();
    }
   if(((! (! (false)))))
    return;
   if((((! ((((injectionSwitch.x > injectionSwitch.y)) || (! ((injectionSwitch.x > injectionSwitch.y)))))))))
    barrier();
   if((false))
    {
     if((false))
      {
       if((false))
        return;
       barrier();
      }
     if((false))
      {
       if(((! (! (false)))))
        return;
       if((false))
        barrier();
       if((false))
        return;
       barrier();
      }
     if((false))
      barrier();
     return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((((((false ? (vec2(3.1, 65.16)) : injectionSwitch)).x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if((false))
      return;
     return;
    }
   barrier();
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((((bool(bool((bool((! (! (! (! ((bool(bvec3((bool((bool((bvec3(bvec3(bvec3((injectionSwitch.x > ((true ? injectionSwitch : (injectionSwitch))).y), true, true)))))))), false, true))))))))))))))))
    {
     if((((((injectionSwitch.x > ((true ? injectionSwitch.y : (1.1)))) && true)))))
      barrier();
     barrier();
    }
  }
 if(((((mix(float(((false ? (6596.7943) : (mix(vec2((- 7.2), (599.133)), vec2((float(mat2x4((injectionSwitch)[0], 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0))), ((vec2(((vec3(injectionSwitch, 0.0)) - vec3(0.0, 0.0, 0.0)))))[1]), bvec2(((injectionSwitch.x < ((injectionSwitch) - vec2(0.0, 0.0)).y)), true))).x))), float((- 2018.5980)), bool(false))) > injectionSwitch.y))))
  {
   if((false))
    return;
   return;
  }
 if((false))
  barrier();
 buf[virtual_gid] = uint(subgroupAllEqual(read_val));
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  barrier();
 if(((((! (! ((min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)))))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((((false)) || false))
  {
   if(((bool(bvec3(false, false, ((injectionSwitch.x < ((true ? ((injectionSwitch) * mat2(1.0)) : (degrees(injectionSwitch)))).y)))))))
    {
     if(((((vec2(0.0, 0.0) + (injectionSwitch)).x > injectionSwitch.y))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if((false))
    {
     if((false))
      barrier();
     return;
    }
   barrier();
  }
 if((false))
  barrier();
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
