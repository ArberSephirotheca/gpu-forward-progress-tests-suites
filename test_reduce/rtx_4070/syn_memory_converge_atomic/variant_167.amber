#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = (max(gl_NumWorkGroups.x, gl_NumWorkGroups.x));
 if(((bool((bvec2(bvec2((bvec2(bvec2(bvec2(false, true)))))))))))
  {
   if((! (! ((false)))))
    barrier();
   barrier();
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if((false))
  barrier();
 uint workgroup_id = ((gl_WorkGroupID.x) >> 0u);
 if((((bool(bvec3((false), false, false)))) && ((bool(bvec3(((! ((! (! (! ((! (! ((((((vec2(injectionSwitch[0], injectionSwitch[1]))) * exp(vec2(0.0, 0.0))).x < injectionSwitch.y)))))))))))), false, false))) && true)))
  barrier();
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 if((false || ((true && ((false || ((((((true && (((! (! (((false || (true)) && ((bool(bvec4((((bool(bvec4(false, ((injectionSwitch.x > injectionSwitch.y)), ((injectionSwitch.x > injectionSwitch.y)), ((injectionSwitch.x > injectionSwitch.y))))) || false)), false, false, true))))) && true)))))) && true)))))))))))
  barrier();
 if((false))
  barrier();
 atomicStore(write_val, uint((((((uint(uint((max(((virtual_gid) << 0u), ((virtual_gid) << 0u))))))) | ((false ? (virtual_gid) : (((uint(((uint((virtual_gid))) / (clamp(1u, (~ (~ (1u))), (uint(((uvec3(1u, (0u << (uint(4u))), 1u)) | uvec3(0u, 0u, 0u)))))))))) / uint((injectionSwitch.y)))))) / 1u))), 4, 64, 0);
 if(((false || (false))))
  barrier();
 uint read_val = atomicLoad((uint((clamp(uint(write_val), (clamp((uint(uvec4(uint(write_val), 1u, 0u, 1u))), uint(write_val), (((uint(uvec3(uint(write_val), 0u, 1u)))) | 0u))), uint(write_val))))), 4, ((true ? 64 : (36118))), ((true ? 0 : (91834))));
 ((~ ((~ (~ (~ ((((~ (~ ((false ? (uint(uvec3(((true ? ((workgroup_base) ^ 0u) : workgroup_id)), 0u, 0u))) : buf[virtual_gid] = (((~ (~ ((((0u ^ (((((((uint(subgroupAllEqual(read_val))) >> 0u))) / 1u) >> 0u)))) * 1u) << 0u))))))))) << ((0u >> (uint(1u))) << ((false ? (subgroup_id) : (uint(((6u) << (0u & 42254u))))))))))))))));
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
