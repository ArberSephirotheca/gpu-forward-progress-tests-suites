#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((false))
  {
   if((false))
    barrier();
   if((false))
    return;
   barrier();
  }
 if((((bool(bvec3(! (! (false)), ((injectionSwitch.x < injectionSwitch.y)), ((injectionSwitch.x < injectionSwitch.y))))))))
  {
   if((false))
    barrier();
   return;
  }
 if((false))
  barrier();
 if((false))
  {
   if((false))
    return;
   return;
  }
 if((false))
  return;
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 if((((! (! ((false))))) && true))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     return;
    }
   if(((true && (((injectionSwitch.x > injectionSwitch.y))))))
    {
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if((false))
    {
     if((false))
      return;
     if((false))
      return;
     if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
      {
       if((false))
        barrier();
       return;
      }
     return;
    }
   return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(((false || (false))))
    return;
  }
 if((false))
  {
   if((false))
    {
     if((false))
      barrier();
     return;
    }
   return;
  }
 uint subgroup_id = gl_SubgroupID;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(((true && (((false) && true)))))
  {
   if((((injectionSwitch.x > ((min(float((mat2x3(mat2x4(((true ? mat2x3(injectionSwitch.y, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, sqrt(0.0), 0.0) : (mat2x3(5.9, - 75.14, - 6230.2857, - 25.70, 52.19, - 864.043)))))))), float((mat2x3(mat2x4(((true ? mat2x3(injectionSwitch.y, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, sqrt(0.0), 0.0) : (mat2x3(5.9, - 75.14, - 6230.2857, - 25.70, 52.19, - 864.043)))))))))))))))
    return;
   if(((! (! (false)))))
    barrier();
   if(((! (! (false)))))
    barrier();
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    return;
   return;
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     barrier();
    }
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
   if((((bool(bvec3(bool(bool(false)), false, true))))))
    return;
  }
 if((false))
  {
   if((false))
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(((true && ((false || (bool(((bvec3(bvec3(bvec3(bvec4(bvec3((false), false, true), false)))))))))))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
    {
     if((false))
      return;
     return;
    }
   if((false))
    {
     if((false))
      return;
     if((false))
      {
       if((false))
        return;
       barrier();
      }
     return;
    }
   return;
   if((false))
    return;
  }
 if(((((min(injectionSwitch, ((injectionSwitch) - vec2(0.0, 0.0)))).x > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    return;
   if((false))
    barrier();
   if((false))
    barrier();
   return;
  }
 if((false))
  return;
 if((false))
  {
   if((false))
    return;
   return;
   if((false))
    return;
  }
 if(((! (! (! ((! ((bool(bvec2(((injectionSwitch.x > injectionSwitch.y)), true)))))))))))
  {
   if((false))
    {
     if((false))
      barrier();
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     return;
    }
   if(((true && (false))))
    return;
   barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      {
       if((false))
        return;
       barrier();
      }
     return;
    }
  }
 if((false))
  return;
 if((((! (! ((false)))) && true)))
  barrier();
 if((false))
  barrier();
 if(((((true && (((injectionSwitch.x > injectionSwitch.y))))) || false)))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   return;
  }
 if(((true && (bool(bvec2(((bool(bvec4(! (! ((bool(bvec4((false), true, true, true))))), ((((injectionSwitch.x) - 0.0) > injectionSwitch.y)), false, (((true && (injectionSwitch.x < injectionSwitch.y)))))))), true))))))
  {
   if((false))
    return;
   if((false))
    {
     if((false))
      {
       if((false))
        barrier();
       return;
      }
     barrier();
    }
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      {
       if((false))
        barrier();
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((false))
        barrier();
       if((false))
        {
         if((((! (! (bool(bool(false))))))))
          barrier();
         return;
        }
       barrier();
      }
     if((false))
      return;
     if(((! (! ((bool(bvec4((((bool(bvec4(((injectionSwitch.x > injectionSwitch.y)), false, false, false)))) || false), true, true, false))))))))
      {
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        return;
       return;
      }
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
     if((false))
      return;
     if(((((! (! (injectionSwitch.x > injectionSwitch.y)))))))
      return;
     if((false))
      {
       if(((! (! (false)))))
        barrier();
       if((false))
        {
         if((false))
          barrier();
         if((false))
          return;
         return;
        }
       return;
      }
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    return;
   if((false))
    return;
   if((false))
    return;
   if((false))
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     barrier();
    }
   if((false))
    return;
  }
 if((false))
  {
   if((false))
    return;
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    return;
   return;
   if((false))
    barrier();
  }
 uint subgroup_size = gl_SubgroupSize;
 if((false))
  return;
 if((false))
  barrier();
 if((false))
  return;
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if((false))
    return;
   barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if((false))
  barrier();
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   barrier();
  }
 if((false))
  {
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
     if((false))
      barrier();
    }
   return;
  }
 if(((! (((! (bool(bvec2((((false)) && true), true)))) || false)))))
  return;
 if((((bool(bvec4(bool(bvec2((true && (false)), true)), false, true, false))))))
  barrier();
 if((false))
  return;
 if((false))
  {
   if((false))
    barrier();
   if((((false) && true)))
    barrier();
   return;
  }
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    {
     if((false))
      return;
     return;
    }
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    {
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
  }
 if((false))
  {
   if((false))
    barrier();
   if(((((injectionSwitch.x < injectionSwitch.y)) && (false))))
    return;
   if((false))
    return;
   return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((((false) && true)))
      barrier();
     if((false))
      return;
     return;
    }
   if((((false) || false)))
    barrier();
   return;
  }
 if((false))
  barrier();
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if((false))
    return;
   if(((bool(bool(false)))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   barrier();
   if((((injectionSwitch.x > (max(injectionSwitch.y, (max(injectionSwitch.y, injectionSwitch.y))))))))
    return;
   if((false))
    barrier();
   if((false))
    return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    {
     if((false))
      return;
     barrier();
    }
   barrier();
  }
 if((false))
  return;
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if((false))
      return;
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     if((false))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     if((false))
      {
       if((false))
        return;
       barrier();
      }
     if((false))
      {
       if((false))
        return;
       return;
      }
     return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(((! (! (false)))))
      barrier();
     if((false))
      return;
     if((false))
      return;
     return;
    }
   if((false))
    {
     if((false))
      return;
     if((false))
      return;
     return;
     if((false))
      return;
     if((false))
      return;
     if((false))
      return;
    }
   if((false))
    {
     if((false))
      return;
     return;
    }
   barrier();
   if(((((vec2(0.0, 0.0) + (injectionSwitch)).x > injectionSwitch.y))))
    {
     if((false))
      return;
     if((false))
      barrier();
     barrier();
    }
   if((false || ((false))))
    {
     if((false))
      barrier();
     return;
    }
   if((false))
    {
     if((false))
      return;
     barrier();
    }
   if((false))
    return;
   if((false))
    {
     if((false))
      barrier();
     if((false))
      barrier();
     if((false))
      barrier();
     barrier();
     if((false))
      return;
     if((false))
      return;
    }
   if((((((((injectionSwitch.x > injectionSwitch.y)))) || false)) || false))
    barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((((! (! (((bool(bvec2(false, ((injectionSwitch.x > injectionSwitch.y))))) && true)))))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 uint num_workgroup = gl_NumWorkGroups.x;
 if((false))
  {
   if((false))
    {
     if((false))
      barrier();
     return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if((((false) && true)))
    return;
   barrier();
  }
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  {
   if(((! (! (((! (! (bool(bvec4(bool(bvec3((false), false, false)), false, true, true)))))))))))
    return;
   if((false))
    return;
   barrier();
   if((false))
    {
     if((false))
      barrier();
     return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(((((false || (bool(bvec4(((! (! (((false || (true))) && true)))), false, true, true))))) && (((injectionSwitch.x > injectionSwitch.y))))))
  return;
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 if(((bool(bool(false)))))
  return;
 if((false))
  {
   if((false))
    {
     if((false))
      {
       if((false))
        return;
       barrier();
      }
     barrier();
    }
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     return;
    }
   barrier();
  }
 if(((((min(injectionSwitch.x, ((injectionSwitch.x) / sqrt(1.0)))) > injectionSwitch.y))))
  barrier();
 if(((((mix(float((- 4.4)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y))))
  {
   if((false))
    return;
   barrier();
  }
 if((false))
  {
   if((false))
    {
     if((false))
      {
       if((false))
        return;
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if((false))
      return;
     barrier();
     if((false))
      barrier();
    }
   if((false))
    return;
   if((false))
    {
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
     if((false))
      return;
     if((false))
      return;
    }
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      return;
     if((false))
      return;
     return;
    }
   return;
   if(((! ((false || (! (false)))))))
    barrier();
   if((false))
    return;
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        return;
       return;
      }
     barrier();
     if(((((vec2(((true ? mat2x3(injectionSwitch, determinant(mat3(1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0)), abs(1.0), 0.0, 0.0) : (mat2x3(- 433.157, - 51.71, - 808.873, - 2.2, 8297.0754, 39.59)))))).x > injectionSwitch.y))))
      barrier();
    }
   if((((injectionSwitch.x > (clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 uint workgroup_size = ((((max(((uvec3(0u, 0u, 0u) + (gl_WorkGroupSize))) ^ uvec3(0u, ((((false ? (197199u) : 0u))) << 0u), 0u), ((uvec3(0u, 0u, 0u) + (gl_WorkGroupSize))) ^ uvec3(0u, ((((false ? (197199u) : 0u))) << 0u), 0u)))) >> uvec3(0u, 0u, 0u))).x;
 if((false))
  return;
 if(((true && ((true && (false))))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((false))
  return;
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  {
   if((false))
    {
     if((false))
      return;
     if((false))
      barrier();
     return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  {
   if((false))
    return;
   return;
  }
 if((false))
  return;
 if((false))
  barrier();
 if((false))
  {
   if((false))
    {
     if(((! (! (false)))))
      return;
     if((false))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
     if((false))
      barrier();
    }
   barrier();
   if((false))
    barrier();
  }
 if((false))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  {
   if((false))
    barrier();
   if((((((injectionSwitch.x > injectionSwitch.y)) || false))))
    barrier();
   return;
  }
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if((! (! ((false)))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if((false))
    return;
  }
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  return;
 if((false))
  return;
 if(((bool(bvec4((bool(bvec3(! (! ((((((injectionSwitch.x > injectionSwitch.y))) || false)))), true, true))), true, true, true)))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if(((false || (false))))
    return;
   return;
  }
 if(((false || (false))))
  return;
 if((false))
  return;
 if(((! (! (false)))))
  barrier();
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 if((false))
  barrier();
 if((false))
  return;
 if((false))
  return;
 if((false))
  {
   if((false))
    return;
   return;
  }
 if((false))
  return;
 if((false))
  return;
 uint workgroup_base = workgroup_size * (((clamp(workgroup_id, workgroup_id, workgroup_id))) | 0u);
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   return;
  }
 if(((bool(bvec3((true && (false)), false, false)))))
  return;
 if((((false) || false)))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if((false))
    barrier();
   return;
  }
 if((false))
  {
   if((false))
    return;
   return;
  }
 uint virtual_gid = ((0u + ((workgroup_base) - (1u ^ uint((injectionSwitch.y)))))) + (uint(uvec3(subgroup_id * subgroup_size, 0u, 0u))) + ((0u + ((subgroup_local_id) | (subgroup_local_id))));
 if((false))
  {
   if((false))
    return;
   barrier();
  }
 if((false))
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   return;
  }
 if((((false) || false)))
  return;
 if((false))
  return;
 if((false))
  {
   if((false))
    return;
   return;
  }
 if((false || ((((((((injectionSwitch.x > injectionSwitch.y)) ? (vec2(- 3018.1815, - 67.61)) : injectionSwitch)).x > injectionSwitch.y))))))
  barrier();
 if((false))
  barrier();
 if(((bool(bvec2(false, true)))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if((false))
  return;
 if((false))
  {
   if((false))
    return;
   barrier();
  }
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  return;
 if((false))
  {
   if((false))
    {
     if((false))
      return;
     barrier();
    }
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    return;
   barrier();
  }
 if(((false || (false))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 if((false))
  barrier();
 atomicStore(write_val, (0u ^ (((uint(virtual_gid)) * 1u))), 4, 64, 0);
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false || ((false))))
  {
   if((false))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     return;
    }
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if(((! (! (false)))))
      barrier();
     if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
      return;
     if((false))
      return;
     if((false))
      barrier();
     barrier();
    }
   if((false))
    return;
   if((false))
    return;
   if((false))
    barrier();
   if((false))
    return;
   return;
   if((false))
    return;
   if(((! (! (false)))))
    {
     if((false))
      barrier();
     return;
    }
  }
 if((false))
  {
   if(((((float(mat4x2(injectionSwitch.x, 1.0, 1.0, 1.0, 0.0, 0.0, determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)))), 1.0))) > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  {
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   return;
  }
 if(((((bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, true, true)))))))
  {
   if((false))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        {
         if((false))
          return;
         barrier();
        }
       barrier();
       if(((bool(bvec4(false, true, true, false)))))
        return;
      }
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    return;
   if((false))
    return;
   barrier();
   if((false))
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     barrier();
    }
  }
 if((false))
  barrier();
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      barrier();
     return;
     if((false))
      barrier();
     if((false))
      return;
    }
   barrier();
   if((false))
    {
     if((false))
      return;
     return;
    }
  }
 if((false))
  return;
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint read_val = atomicLoad(write_val, 4, 64, 0);
 if((false))
  return;
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if((false))
  return;
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   return;
  }
 if((false))
  {
   if(((((clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     if((false))
      return;
     return;
     if((false))
      return;
     if((false))
      return;
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     if((false))
      return;
     if(((bool(bool((bool(bvec3(false, true, true))))))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     if((false))
      {
       if((false))
        barrier();
       return;
      }
    }
   if((((((injectionSwitch.x > injectionSwitch.y)))) && (! (! (true)))))
    {
     if((false))
      return;
     return;
    }
   if((false))
    return;
   if((false))
    {
     if((false))
      barrier();
     if((false))
      return;
     return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    return;
   if((false))
    return;
   if((false))
    {
     if((false))
      return;
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if((false))
    barrier();
   if((false))
    return;
   if((false))
    {
     if((false))
      {
       if(((! (! (false)))))
        return;
       return;
      }
     barrier();
    }
   if((false))
    return;
   if(((((vec2(mat3((vec2(injectionSwitch[0], (max(injectionSwitch[1], (float(((mat2x4((clamp(injectionSwitch[1], ((false ? (4.5) : injectionSwitch[1])), injectionSwitch[1])), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), abs(1.0), sin(0.0), 0.0, 0.0, 0.0, 1.0)) * mat2(1.0)))))))), 0.0, 0.0, 1.0, 0.0, ((true ? ((0.0) * exp(0.0)) : (1.1))), 1.0, abs(0.0)))).x > injectionSwitch.y))))
    return;
   if((false))
    return;
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
       if((false))
        barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     barrier();
    }
   if(((! (! (false)))))
    return;
   barrier();
   if((false))
    return;
  }
 if((false))
  barrier();
 if((false))
  return;
 buf[virtual_gid] = uint(subgroupAllEqual(read_val));
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  barrier();
 if((false))
  {
   if((false))
    {
     if((false))
      barrier();
     if((false))
      barrier();
     if((false))
      return;
     if((false))
      barrier();
     if((false))
      barrier();
     if((false))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       return;
      }
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   barrier();
   if((((false)) || ((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(((((injectionSwitch.x > injectionSwitch.y)) || (false))))
  {
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    return;
   if((false))
    return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    return;
   return;
  }
 if(((((bool(bvec3((bool(bvec2(false, true))), false, true))) || false))))
  {
   if((false))
    {
     if((false))
      return;
     if(((bool(bool(false)))))
      {
       if((false))
        return;
       return;
      }
     return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
   if((false))
    return;
  }
 if(((((false || ((! (! (injectionSwitch.x > injectionSwitch.y)))))))))
  {
   if((false))
    return;
   if((false))
    return;
   barrier();
   if((false))
    barrier();
  }
 if((false))
  {
   if((((((false ? (- 5.5) : (min(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if((false))
    barrier();
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     if((false))
      barrier();
     if((false))
      return;
     return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    {
     if((false))
      return;
     barrier();
    }
  }
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  return;
 if((false))
  return;
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
