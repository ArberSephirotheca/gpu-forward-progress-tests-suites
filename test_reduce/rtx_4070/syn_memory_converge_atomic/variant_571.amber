#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      return;
    }
   else
    {
    }
   for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != 1; _injected_loop_counter ++)
    {
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
       do
        {
         barrier();
        }
       while(false);
      }
    }
  }
 uint subgroup_id = gl_SubgroupID;
 if((false))
  barrier();
 do
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 while(false);
 if((false))
  {
   for(int _injected_loop_counter = ((1) >> 0); _injected_loop_counter != 0; _injected_loop_counter --)
    {
     return;
    }
  }
 do
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      {
       if(false)
        {
        }
       else
        {
         if((false))
          {
           if((false))
            break;
           for(int _injected_loop_counter = 0; _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
            {
             if(((bool(bvec2(false, false)))))
              barrier();
            }
           return;
          }
        }
       barrier();
      }
     do
      {
       barrier();
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
    }
   if(((false || (false))))
    barrier();
   for(int _injected_loop_counter = 1; _injected_loop_counter > ((0 << (int(4))) << (int(1))); _injected_loop_counter --)
    {
     if((false))
      barrier();
     do
      {
       do
        {
         if((false))
          return;
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
      }
     while(false);
     if((false))
      {
       if(true)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
         if((false))
          {
           if((false))
            {
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                break;
               barrier();
              }
             return;
            }
           barrier();
           if(true)
            {
             if((false))
              {
               if((false))
                barrier();
               if(true)
                {
                 barrier();
                }
               else
                {
                }
              }
             if((false))
              continue;
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                return;
               barrier();
              }
            }
           else
            {
            }
           if((false))
            break;
          }
        }
       else
        {
        }
      }
    }
   if((false))
    {
     if((false))
      {
       if(((false) && true))
        {
        }
       else
        {
         barrier();
        }
      }
     barrier();
    }
  }
 while(((injectionSwitch.x > injectionSwitch.y)));
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  barrier();
 for(int _injected_loop_counter = 1; _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    break;
   if((false))
    return;
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      break;
     continue;
    }
  }
 if((false))
  return;
 if(((true && (false))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(true)
      {
       return;
      }
     else
      {
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       barrier();
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
    }
   if((false))
    {
     if((false))
      return;
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     return;
    }
   return;
  }
 if((false))
  return;
 if((false))
  {
   if((false))
    {
     for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != 1; _injected_loop_counter ++)
      {
       barrier();
      }
    }
   if((false))
    return;
   if((false))
    barrier();
   barrier();
  }
 for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
      {
       if((false))
        {
         if((false))
          {
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             barrier();
            }
          }
         do
          {
           if((false))
            {
             if((false))
              barrier();
             barrier();
            }
           if((false))
            barrier();
           if(((! (! ((false || (false)))))))
            continue;
           if((false))
            barrier();
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
         if((false))
          {
           if((false))
            return;
           if(true)
            {
             return;
            }
           else
            {
             for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
              {
               if((false))
                {
                 for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != ((int((injectionSwitch.y)) << (int(1))) >> (int(1))); _injected_loop_counter ++)
                  {
                   for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
                    {
                     return;
                    }
                  }
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  return;
                }
              }
             if((false))
              return;
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 return;
                }
               barrier();
              }
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               return;
              }
             if((false))
              barrier();
            }
           if((((! (! (bool(((bool(((injectionSwitch.x > injectionSwitch.y)))) || false))))))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if(false)
                {
                }
               else
                {
                 barrier();
                }
              }
             for(int _injected_loop_counter = (1 & 1); _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
              {
               return;
              }
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if((false))
          {
           if((false))
            return;
           barrier();
          }
         do
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         while(((false) || false));
         if((false))
          barrier();
        }
      }
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       barrier();
      }
     for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != (0 | 1); _injected_loop_counter ++)
      {
       if((false))
        return;
      }
     if((false))
      barrier();
     if((false))
      barrier();
     if(((! (! (false)))))
      {
       for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
        {
         return;
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     for(int _injected_loop_counter = 1; _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
      {
       do
        {
         if((false))
          barrier();
        }
       while(false);
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           barrier();
          }
         else
          {
          }
        }
       else
        {
        }
      }
     if(((true && (false))))
      barrier();
     do
      {
       if((false))
        return;
       if((false))
        return;
      }
     while(false);
     if(true)
      {
       if((false))
        {
         do
          {
           if((false))
            return;
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
         if((false))
          return;
         return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     else
      {
      }
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if(true)
    {
     if((false))
      return;
    }
   else
    {
    }
   if(((bool(bvec3(false, false, false)))))
    barrier();
   if((false))
    {
     if(false)
      {
      }
     else
      {
       return;
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     return;
     if((false))
      barrier();
    }
   do
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        {
         if((false))
          break;
         barrier();
        }
       if((false))
        continue;
       break;
      }
     barrier();
    }
   while((! (! (false))));
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    return;
   barrier();
  }
 uint subgroup_size = gl_SubgroupSize;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if(false)
  {
  }
 else
  {
   do
    {
     if(false)
      {
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = (0 >> ((max(int(8), int(8))))); _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
          {
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                return;
               continue;
              }
             if((false))
              {
               if((false))
                return;
               barrier();
              }
             if((false))
              {
               if(((injectionSwitch.x < injectionSwitch.y)))
                {
                 if((false))
                  barrier();
                }
               else
                {
                }
               if(((injectionSwitch.x > injectionSwitch.y)))
                {
                 if((false))
                  barrier();
                }
               else
                {
                 barrier();
                 if((false))
                  {
                   if((false))
                    return;
                   barrier();
                  }
                }
               if((false))
                {
                 if((false))
                  continue;
                 return;
                }
              }
             for(int _injected_loop_counter = 1; _injected_loop_counter > ((0 << (int(8))) >> (int(4))); _injected_loop_counter --)
              {
               barrier();
              }
             if((false))
              break;
            }
          }
         for(int _injected_loop_counter = 1; _injected_loop_counter != (0 << (int(8))); _injected_loop_counter --)
          {
           barrier();
          }
         if((false))
          barrier();
         if(false)
          {
          }
         else
          {
           if(true)
            {
             if((false))
              return;
             if((false))
              return;
            }
           else
            {
             do
              {
               if((false))
                barrier();
              }
             while(false);
            }
          }
        }
       if(((bool(bvec3(false, false, true)))))
        barrier();
      }
    }
   while(false);
  }
 if(false)
  {
   if((false))
    {
     if((false))
      barrier();
     if(true)
      {
       if((false))
        return;
       if(true)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = 0; _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
            {
             if(((false || ((true && (false))))))
              return;
             if((false))
              return;
            }
           barrier();
          }
        }
       else
        {
        }
       barrier();
       if(true)
        {
         if((((false) && ((injectionSwitch.x < injectionSwitch.y)))))
          barrier();
        }
       else
        {
        }
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
       if((false))
        return;
       if((false))
        {
         do
          {
           if(((((true && (false))) || false)))
            return;
          }
         while(false);
         if((false))
          {
           if(true)
            {
             barrier();
            }
           else
            {
            }
          }
         if(true)
          {
           return;
          }
         else
          {
          }
        }
      }
    }
   if((false))
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(false)
          {
          }
         else
          {
           barrier();
          }
        }
       if((false))
        return;
       if((false))
        barrier();
       barrier();
      }
     return;
    }
   if((false))
    return;
   if((false))
    {
     if((false))
      {
       if((false))
        return;
       for(int _injected_loop_counter = (0 ^ 0); _injected_loop_counter != 1; _injected_loop_counter ++)
        {
         barrier();
        }
      }
     barrier();
    }
  }
 else
  {
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       if((false))
        {
         if(false)
          {
          }
         else
          {
           barrier();
          }
         if((bool(bool(((injectionSwitch.x < injectionSwitch.y))))))
          {
           if((false))
            {
             do
              {
               barrier();
              }
             while(false);
            }
          }
         else
          {
          }
        }
      }
     if((false))
      barrier();
     return;
    }
   if((false))
    return;
   if(false)
    {
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if((false))
    return;
   if((false))
    {
     if((false))
      {
       if((false))
        return;
       if((false))
        {
         if((false))
          barrier();
         return;
        }
       barrier();
      }
     return;
    }
   if((false))
    return;
  }
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  {
   if((false))
    return;
   for(int _injected_loop_counter = (0 | int((injectionSwitch.x))); _injected_loop_counter != 1; _injected_loop_counter ++)
    {
     barrier();
    }
  }
 if((false))
  {
   if((true && (false)))
    {
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      return;
     barrier();
    }
  }
 if((false))
  barrier();
 if((false))
  {
   if(false)
    {
    }
   else
    {
     barrier();
    }
  }
 if(true)
  {
   for(int _injected_loop_counter = 0; _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
    {
     if((false))
      return;
    }
  }
 else
  {
   if((false))
    return;
  }
 if((false))
  barrier();
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(false)
  {
  }
 else
  {
   if((bool(bvec4(true, true, false, false))))
    {
     if((false))
      barrier();
     if((false))
      {
       if((false))
        return;
       do
        {
         barrier();
        }
       while(false);
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
        }
      }
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  {
   if((false))
    return;
   if((false))
    return;
   return;
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
    }
   else
    {
     if((false))
      {
       for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
        {
         if((false))
          barrier();
         return;
        }
      }
    }
   if((false))
    return;
   if(true)
    {
     if((false))
      {
       for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
        {
         return;
        }
      }
    }
   else
    {
    }
  }
 for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
  {
   if((false))
    {
     if(false)
      {
      }
     else
      {
       barrier();
      }
    }
   if(((! (! (false)))))
    break;
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
  }
 if((false))
  {
   if((false))
    {
     if((false))
      return;
     barrier();
    }
   barrier();
  }
 do
  {
   if((false))
    barrier();
   if((false))
    return;
  }
 while((bool(bvec3(false, false, true))));
 if((false))
  {
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 0; _injected_loop_counter != (1 & (1 & 1)); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   for(int _injected_loop_counter = 1; _injected_loop_counter > (0 << (int(8))); _injected_loop_counter --)
    {
     return;
    }
   if((false))
    return;
   do
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   while(false);
  }
 if((false))
  {
   for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
    {
     if((false))
      break;
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        {
         if((false))
          barrier();
         barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
       if((false))
        {
         if((false))
          return;
         continue;
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
        }
       if((false))
        {
         if((false))
          return;
         barrier();
        }
       if(true)
        {
         if((false))
          barrier();
         if(true)
          {
           if(true)
            {
             if((false))
              return;
             barrier();
             if((false))
              barrier();
             if((false))
              break;
            }
           else
            {
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
           if((false))
            barrier();
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             if((false))
              barrier();
            }
           else
            {
            }
          }
         else
          {
          }
         if(((false || (false))))
          barrier();
         if((false))
          break;
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(false)
            {
            }
           else
            {
             barrier();
            }
          }
        }
       else
        {
         if(((! (! (false)))))
          {
           if((false))
            barrier();
           if(false)
            {
            }
           else
            {
             barrier();
            }
          }
         if((false))
          {
           if(((true && (false))))
            barrier();
           barrier();
          }
         if((false))
          {
           if((false))
            continue;
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
           return;
          }
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      continue;
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         do
          {
           barrier();
          }
         while(false);
        }
       while(false);
       if((false))
        continue;
      }
     do
      {
       barrier();
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
     if((((false) && true)))
      {
       if((false))
        continue;
       if(false)
        {
        }
       else
        {
         barrier();
        }
       if((false))
        barrier();
      }
    }
   if(((! (((! (false)) && true)))))
    barrier();
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    {
     if(false)
      {
      }
     else
      {
       if((false))
        barrier();
      }
     return;
    }
   barrier();
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(((false || (((injectionSwitch.x > injectionSwitch.y))))))
      barrier();
     if((false))
      {
       if(true)
        {
         if((false))
          {
           if((false))
            return;
           barrier();
          }
         if((false))
          barrier();
        }
       else
        {
        }
       return;
      }
     if((false))
      return;
     if(((bool(bvec4(false, true, true, false)))))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     do
      {
       barrier();
       if((false))
        barrier();
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
    }
  }
 if((false))
  {
   if((false))
    barrier();
   if((false))
    {
     for(int _injected_loop_counter = 0; _injected_loop_counter != ((1) | (1)); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(false)
      {
      }
     else
      {
       return;
      }
    }
   if(false)
    {
    }
   else
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(((bool(bvec3(false, false, false)))))
          return;
         barrier();
        }
       return;
      }
    }
  }
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     return;
    }
   while(false);
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    {
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       barrier();
      }
    }
   do
    {
     if(true)
      {
       if((false))
        {
         if(true)
          {
           barrier();
          }
         else
          {
          }
        }
      }
     else
      {
      }
     barrier();
     do
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           barrier();
          }
        }
      }
     while(false);
    }
   while(false);
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    return;
   if((false))
    return;
   barrier();
  }
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    {
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       barrier();
      }
    }
   if((false))
    return;
   return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if((false))
  return;
 if(true)
  {
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      {
       if(false)
        {
        }
       else
        {
         return;
        }
      }
     if((false))
      barrier();
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           barrier();
          }
         while(false);
        }
       barrier();
      }
     do
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
          {
           barrier();
           if((false))
            {
             if((false))
              continue;
             do
              {
               barrier();
              }
             while(false);
            }
          }
        }
      }
     while(false);
     do
      {
       if(false)
        {
         if(true)
          {
           if((false))
            return;
          }
         else
          {
          }
        }
       else
        {
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           if((false))
            {
             if((false))
              return;
             if((false))
              {
               if((false))
                barrier();
               return;
              }
             return;
             if(((((false || (false))) && true)))
              barrier();
            }
          }
        }
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
    }
   else
    {
     if((false))
      barrier();
     if((false))
      barrier();
    }
   if((false))
    {
     if((false))
      return;
     barrier();
    }
  }
 else
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(true)
  {
   do
    {
     if((false))
      {
       if((false))
        return;
       barrier();
      }
     if((false))
      {
       for(int _injected_loop_counter = 1; _injected_loop_counter != (0 | 0); _injected_loop_counter --)
        {
         barrier();
        }
      }
    }
   while(false);
   if((false))
    {
     if((false))
      {
       if(false)
        {
        }
       else
        {
         return;
        }
      }
     if(false)
      {
      }
     else
      {
       if((! (((! (true)) || false))))
        {
         if((((((injectionSwitch.x > injectionSwitch.y))) || false)))
          {
           if((false))
            return;
           barrier();
          }
         barrier();
        }
       else
        {
        }
      }
    }
  }
 else
  {
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(true)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    {
     for(int _injected_loop_counter = ((((1 << (int(6))) >> (int(6))) << (int(7))) >> (int(7))); _injected_loop_counter != (0 >> (int(8))); _injected_loop_counter --)
      {
       return;
      }
    }
  }
 else
  {
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if(((! (! (false)))))
    barrier();
  }
 if(false)
  {
  }
 else
  {
   if(true)
    {
     if((false))
      barrier();
    }
   else
    {
    }
   if((false))
    return;
  }
 if((false))
  return;
 if((false))
  barrier();
 if(((injectionSwitch.x < injectionSwitch.y)))
  {
   for(int _injected_loop_counter = 0; _injected_loop_counter < (0 | 1); _injected_loop_counter ++)
    {
     if(false)
      {
      }
     else
      {
       if((false))
        {
         if((false))
          barrier();
         barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
        }
      }
     if((false))
      continue;
     if((false))
      {
       if((false))
        continue;
       if(true)
        {
         return;
         for(int _injected_loop_counter = ((1 << (int(2))) >> ((max(int(2), int(2))))); _injected_loop_counter != 0; _injected_loop_counter --)
          {
           if((false))
            barrier();
          }
        }
       else
        {
        }
      }
     if((false))
      barrier();
     if((false))
      break;
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
         barrier();
        }
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        return;
       if(((bool(bvec4(false, true, true, true)))))
        {
         if((false))
          barrier();
         if((false))
          {
           if((false))
            barrier();
           if((false))
            {
             if((false))
              {
               for(int _injected_loop_counter = ((0 & 51080) << (int(8))); _injected_loop_counter < 1; _injected_loop_counter ++)
                {
                 barrier();
                }
              }
             barrier();
            }
           for(int _injected_loop_counter = (0 ^ 1); _injected_loop_counter != (0 << (int(6))); _injected_loop_counter --)
            {
             if((false))
              barrier();
             if(false)
              {
              }
             else
              {
               if(false)
                {
                }
               else
                {
                 if((false))
                  barrier();
                 return;
                 if((false))
                  return;
                }
              }
             if((false))
              continue;
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         continue;
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         if((false))
          barrier();
         if(false)
          {
          }
         else
          {
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             if((false))
              {
               for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                 if((false))
                  barrier();
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(((injectionSwitch.x < injectionSwitch.y)))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                }
              }
            }
           if((false))
            barrier();
          }
        }
       if((false))
        {
         if((false))
          barrier();
         do
          {
           do
            {
             if((false))
              {
               for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != 1; _injected_loop_counter ++)
                {
                 barrier();
                }
              }
             if((false))
              {
               if((false))
                continue;
               if(false)
                {
                }
               else
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if((false))
                    break;
                   barrier();
                  }
                 if((false))
                  barrier();
                 if((false))
                  {
                   if((false))
                    break;
                   break;
                  }
                 if((false))
                  barrier();
                 if((false))
                  continue;
                 barrier();
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(((injectionSwitch.x > injectionSwitch.y)))
                    {
                    }
                   else
                    {
                     barrier();
                    }
                  }
                 if((false))
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    {
                     if((false))
                      continue;
                     break;
                    }
                   if(true)
                    {
                     if((false))
                      barrier();
                    }
                   else
                    {
                    }
                   continue;
                  }
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  return;
                 if((false))
                  continue;
                }
               if((false))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((false))
                  return;
                 barrier();
                }
               if((false))
                break;
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
            }
           while(false);
           if((false))
            {
             do
              {
               barrier();
              }
             while(false);
            }
           if((false))
            continue;
          }
         while(false);
         for(int _injected_loop_counter = 1; _injected_loop_counter != (int((injectionSwitch.x)) >> (int(1))); _injected_loop_counter --)
          {
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
          }
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
           if((false))
            barrier();
           if((false))
            return;
           barrier();
          }
         if(true)
          {
           if((false))
            continue;
           return;
          }
         else
          {
           if((false))
            continue;
           if((false))
            {
             if((false))
              continue;
             break;
            }
           if((false))
            barrier();
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             break;
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
            }
          }
         if((false))
          {
           do
            {
             if((false))
              barrier();
             if((((false) && true)))
              return;
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             for(int _injected_loop_counter = 0; _injected_loop_counter != ((1 << (int(6))) >> (int(6))); _injected_loop_counter ++)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                continue;
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((false))
                  barrier();
                 if(((false) || false))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
               if((false))
                break;
               for(int _injected_loop_counter = 0; _injected_loop_counter < (1 | 1); _injected_loop_counter ++)
                {
                 if((false))
                  barrier();
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  break;
                 for(int _injected_loop_counter = (0 >> (int(0))); _injected_loop_counter < 1; _injected_loop_counter ++)
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(((injectionSwitch.x > injectionSwitch.y)))
                      {
                      }
                     else
                      {
                       if((false))
                        barrier();
                      }
                     continue;
                    }
                   barrier();
                  }
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               if((false))
                return;
               if((false))
                barrier();
               for(int _injected_loop_counter = 0; _injected_loop_counter != ((1 << (int(1))) >> (int(1))); _injected_loop_counter ++)
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(false)
                    {
                    }
                   else
                    {
                     barrier();
                    }
                  }
                }
               if((false))
                {
                 for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > 0; _injected_loop_counter --)
                  {
                   barrier();
                  }
                }
               if((false))
                {
                 if((false))
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   break;
                  }
                 barrier();
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                return;
               if((false))
                {
                 if(true)
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                continue;
               if((false))
                {
                 if((false))
                  {
                   if(false)
                    {
                    }
                   else
                    {
                     barrier();
                    }
                  }
                 if((false))
                  continue;
                 if((false))
                  {
                   if((false))
                    {
                     if((false))
                      {
                       if((false))
                        continue;
                       barrier();
                      }
                     do
                      {
                       barrier();
                      }
                     while((bool(bvec2(((injectionSwitch.x > injectionSwitch.y)), false))));
                    }
                   return;
                   if((false))
                    {
                     if(((injectionSwitch.x > injectionSwitch.y)))
                      {
                      }
                     else
                      {
                       return;
                      }
                    }
                  }
                 if((false))
                  return;
                 break;
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                return;
              }
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
           if((false))
            {
             if((false))
              continue;
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
             break;
             if(((true && (false))))
              {
               for(int _injected_loop_counter = ((0 << (int(4))) << (int(8))); _injected_loop_counter != 1; _injected_loop_counter ++)
                {
                 if(false)
                  {
                  }
                 else
                  {
                   if((false))
                    return;
                  }
                 return;
                }
              }
            }
           if((false))
            {
             if((false))
              {
               if(((injectionSwitch.x > injectionSwitch.y)))
                {
                }
               else
                {
                 barrier();
                }
              }
             if(true)
              {
               return;
              }
             else
              {
              }
            }
           if(true)
            {
             if(((true && (((false) || false)))))
              return;
             if((false))
              {
               if((false))
                continue;
               if(((! (! (false)))))
                barrier();
               barrier();
              }
            }
           else
            {
             if((false))
              {
               if(false)
                {
                }
               else
                {
                 barrier();
                }
              }
             do
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             while((true && (false)));
            }
           if((false))
            {
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
               if((false))
                return;
              }
             else
              {
               return;
               do
                {
                 if((((((injectionSwitch.x > injectionSwitch.y))) || false)))
                  return;
                }
               while(((injectionSwitch.x > injectionSwitch.y)));
              }
            }
          }
         if((false))
          {
           if((false))
            break;
           barrier();
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if((false))
          barrier();
         do
          {
           return;
           if((false))
            barrier();
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
        }
       else
        {
        }
       for(int _injected_loop_counter = 0; _injected_loop_counter < (1 | 1); _injected_loop_counter ++)
        {
         if(false)
          {
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(true)
          {
           if((false))
            barrier();
          }
         else
          {
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         if((false))
          barrier();
         if((false))
          {
           for(int _injected_loop_counter = ((1 << (int(2))) >> (int(2))); _injected_loop_counter != 0; _injected_loop_counter --)
            {
             barrier();
            }
          }
         if((false))
          continue;
         if((false))
          {
           if(false)
            {
            }
           else
            {
             barrier();
            }
          }
        }
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
         for(int _injected_loop_counter = (1 | 0); _injected_loop_counter > (1 ^ 1); _injected_loop_counter --)
          {
           if((((false) || false)))
            {
             if((false))
              break;
             barrier();
            }
           barrier();
          }
        }
       if(((bool(bvec2((bool(bool(false))), false)))))
        return;
       if((false))
        {
         if((false))
          barrier();
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
        }
       for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
        {
         for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < 1; _injected_loop_counter ++)
          {
           if((false))
            barrier();
          }
         if((false))
          {
           if((false))
            {
             if((false))
              return;
             barrier();
            }
           barrier();
          }
        }
      }
     for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < (0 | 1); _injected_loop_counter ++)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      continue;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(true)
        {
         return;
        }
       else
        {
        }
      }
     if((false))
      barrier();
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       barrier();
      }
    }
   if((false))
    barrier();
   if(false)
    {
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           if(((true && (false))))
            return;
          }
         while(false);
         barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 0; _injected_loop_counter != (0 ^ (1 ^ 0)); _injected_loop_counter ++)
          {
           return;
          }
        }
       return;
       if((false))
        return;
      }
    }
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if((false))
    {
     do
      {
       barrier();
      }
     while(false);
    }
   if((false))
    return;
  }
 else
  {
   if(false)
    {
    }
   else
    {
     if((false))
      {
       if((false))
        barrier();
       return;
      }
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   if((((! (! (bool(bvec3(false, true, ((injectionSwitch.x > injectionSwitch.y))))))))))
    barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 for(int _injected_loop_counter = 1; _injected_loop_counter > (0 << (int(0))); _injected_loop_counter --)
  {
   do
    {
     if((false))
      barrier();
    }
   while(false);
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       if(true)
        {
         if((false))
          {
           do
            {
             barrier();
            }
           while(false);
          }
        }
       else
        {
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(true)
          {
           if((false))
            return;
          }
         else
          {
          }
         barrier();
        }
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        {
         do
          {
           barrier();
          }
         while(false);
        }
       return;
      }
     for(int _injected_loop_counter = 1; _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         if((false))
          {
           if(true)
            {
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
              }
             else
              {
               if((false))
                barrier();
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
            }
           else
            {
            }
           if((false))
            return;
           barrier();
          }
         if(false)
          {
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if(true)
              {
               return;
               if((false))
                continue;
              }
             else
              {
              }
             if((false))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
            }
          }
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
           if((false))
            barrier();
           if((false))
            continue;
          }
         else
          {
           if((false))
            barrier();
           return;
          }
        }
      }
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       return;
       if((false))
        {
         if(((bool(bvec2(false, false)))))
          barrier();
         if((false))
          continue;
         return;
        }
      }
     if((false))
      continue;
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       do
        {
         barrier();
        }
       while(false);
       if((false))
        barrier();
      }
     if(true)
      {
       if((false))
        break;
       if(false)
        {
        }
       else
        {
         return;
        }
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         for(int _injected_loop_counter = (int((injectionSwitch.y)) | int((injectionSwitch.y))); _injected_loop_counter != (0 << (((false ? (81210) : (0 ^ (int(3))))))); _injected_loop_counter --)
          {
           if((false))
            {
             if((false))
              break;
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
             do
              {
               barrier();
              }
             while(((injectionSwitch.x > injectionSwitch.y)));
            }
           if((false))
            {
             if((false))
              {
               if(((injectionSwitch.x < injectionSwitch.y)))
                {
                 barrier();
                }
               else
                {
                }
              }
             continue;
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              continue;
             continue;
            }
          }
        }
       else
        {
        }
      }
     else
      {
       do
        {
         if((false))
          barrier();
         if((false))
          return;
         if(((bool(bvec4((! (! (false))), true, true, false)))))
          barrier();
        }
       while(false);
      }
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 if((false))
  {
   if((false))
    {
     if(false)
      {
      }
     else
      {
       barrier();
      }
    }
   if(true)
    {
     return;
    }
   else
    {
    }
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   do
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
       do
        {
         if((false))
          {
           if((((((((injectionSwitch.x > injectionSwitch.y))) || false)) && true)))
            break;
           barrier();
          }
        }
       while(false);
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
          {
           barrier();
          }
         if((false))
          barrier();
        }
       if((false))
        continue;
       if((false))
        barrier();
       if((false))
        break;
       if((false))
        barrier();
      }
     else
      {
       barrier();
       if(true)
        {
         if((false))
          {
           if(true)
            {
             return;
            }
           else
            {
            }
          }
        }
       else
        {
        }
      }
    }
   while(false);
   if((false))
    return;
  }
 if(true)
  {
   if(false)
    {
    }
   else
    {
     if((false))
      {
       do
        {
         for(int _injected_loop_counter = 1; _injected_loop_counter > (0 | 0); _injected_loop_counter --)
          {
           barrier();
           if((false))
            barrier();
          }
        }
       while(false);
      }
    }
   for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          return;
         if(((bool(bool(((false) || false))))))
          return;
         do
          {
           barrier();
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
         if((false))
          return;
        }
       do
        {
         if((false))
          {
           if(false)
            {
            }
           else
            {
             return;
            }
          }
        }
       while(false);
       if(false)
        {
         if(((bool(bvec3((! (! (false))), false, true)))))
          barrier();
        }
       else
        {
         return;
        }
      }
    }
  }
 else
  {
  }
 if((false))
  return;
 if(false)
  {
  }
 else
  {
   for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      continue;
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         if(false)
          {
          }
         else
          {
           do
            {
             for(int _injected_loop_counter = (0 << (int(4))); _injected_loop_counter != 1; _injected_loop_counter ++)
              {
               if(false)
                {
                 if((false))
                  barrier();
                }
               else
                {
                 if((false))
                  {
                   if((false))
                    barrier();
                   if((false))
                    continue;
                   if(((injectionSwitch.x < injectionSwitch.y)))
                    {
                     do
                      {
                       if(((! (((! (false)) && true)))))
                        {
                         for(int _injected_loop_counter = 0; _injected_loop_counter != ((1 << (int(1))) >> (int(1))); _injected_loop_counter ++)
                          {
                           do
                            {
                             if((false))
                              return;
                            }
                           while(((injectionSwitch.x > injectionSwitch.y)));
                           if((((injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                           barrier();
                           if((((injectionSwitch.x > injectionSwitch.y))))
                            {
                             if((false))
                              barrier();
                             break;
                            }
                           if((false))
                            barrier();
                           if((false))
                            {
                             for(int _injected_loop_counter = (1 | 1); _injected_loop_counter > 0; _injected_loop_counter --)
                              {
                               if((false))
                                {
                                 if(true)
                                  {
                                   barrier();
                                  }
                                 else
                                  {
                                  }
                                }
                              }
                             if(((injectionSwitch.x > injectionSwitch.y)))
                              {
                               if((((injectionSwitch.x > injectionSwitch.y))))
                                barrier();
                               if((false))
                                return;
                              }
                             else
                              {
                               if((false))
                                break;
                               return;
                              }
                            }
                           if((false))
                            {
                             if((false))
                              barrier();
                             barrier();
                            }
                          }
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          break;
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          {
                           if((false))
                            break;
                           barrier();
                          }
                         if((false))
                          barrier();
                         if(false)
                          {
                          }
                         else
                          {
                           if((((injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                           if((((injectionSwitch.x > injectionSwitch.y))))
                            {
                             if((false))
                              break;
                             if(true)
                              {
                               if(((bool(bvec4(false, true, false, false)))))
                                barrier();
                              }
                             else
                              {
                              }
                             if(false)
                              {
                              }
                             else
                              {
                               return;
                              }
                            }
                           if((((injectionSwitch.x > injectionSwitch.y))))
                            return;
                          }
                         if((false))
                          {
                           do
                            {
                             if((false))
                              barrier();
                             if((false))
                              continue;
                             barrier();
                            }
                           while(false);
                           if((false))
                            return;
                           if((false))
                            {
                             if((((injectionSwitch.x > injectionSwitch.y))))
                              break;
                             barrier();
                            }
                           if((false))
                            return;
                           if((false))
                            barrier();
                          }
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                         if((false))
                          {
                           if((((injectionSwitch.x > injectionSwitch.y))))
                            {
                             if((false))
                              barrier();
                             barrier();
                             if((false))
                              break;
                            }
                           barrier();
                          }
                         if((false))
                          {
                           for(int _injected_loop_counter = 1; _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
                            {
                             barrier();
                             if(((false || (false))))
                              continue;
                             if((false))
                              barrier();
                            }
                           if((false))
                            return;
                           if((((injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                           if((false))
                            break;
                          }
                         if((false))
                          break;
                        }
                       if((false))
                        continue;
                       if((false))
                        continue;
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        {
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          break;
                         continue;
                        }
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                      }
                     while(((injectionSwitch.x > injectionSwitch.y)));
                     for(int _injected_loop_counter = 1; _injected_loop_counter != (0 >> (int(1))); _injected_loop_counter --)
                      {
                       if((false))
                        return;
                      }
                    }
                   else
                    {
                     if((false))
                      {
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        continue;
                       barrier();
                      }
                    }
                   if(((injectionSwitch.x > injectionSwitch.y)))
                    {
                    }
                   else
                    {
                     if((((false) || false)))
                      barrier();
                     barrier();
                    }
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    {
                     if((false))
                      continue;
                     barrier();
                    }
                  }
                 if((false))
                  {
                   if((false))
                    barrier();
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    break;
                   return;
                  }
                }
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 break;
                }
               for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                {
                 if((false))
                  return;
                }
               if(true)
                {
                 if((false))
                  barrier();
                }
               else
                {
                }
              }
             if((false))
              {
               if((((((injectionSwitch.x > injectionSwitch.y))) || false)))
                barrier();
               barrier();
              }
             if(((! (! (false)))))
              barrier();
            }
           while(false);
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             barrier();
            }
           while(false);
          }
        }
       while(false);
       for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
        {
         return;
        }
       if((false))
        continue;
       if(((! ((! (! (! (false))))))))
        {
         if((false))
          barrier();
         if(((false || (false))))
          break;
         do
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            break;
           barrier();
           if((false))
            barrier();
          }
         while(false);
         if((false))
          return;
        }
      }
     if((false))
      barrier();
     if((false))
      break;
     if((false))
      break;
    }
  }
 if((false))
  {
   if((false))
    return;
   barrier();
  }
 do
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     return;
    }
  }
 while(false);
 if((false))
  return;
 uint workgroup_size = gl_WorkGroupSize.x;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((((false) || false)))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 if(false)
  {
   if((false))
    {
     if((false))
      return;
     barrier();
    }
  }
 else
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     if((false))
      barrier();
     if((false))
      {
       if(true)
        {
         if(true)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if(true)
            {
             barrier();
            }
           else
            {
            }
          }
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           for(int _injected_loop_counter = 1; _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
            {
             if((false))
              return;
            }
          }
        }
       else
        {
         if((false))
          {
           for(int _injected_loop_counter = 0; _injected_loop_counter != ((1 << (int(7))) >> (int(7))); _injected_loop_counter ++)
            {
             return;
            }
          }
        }
       if((false))
        {
         if((false))
          barrier();
         if(((true && (false))))
          return;
         if((false))
          {
           if((false))
            return;
           if((false))
            return;
           barrier();
          }
         return;
        }
       if((false))
        barrier();
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if(true)
            {
             if((false))
              barrier();
             for(int _injected_loop_counter = 1; _injected_loop_counter > (0 << (int(4))); _injected_loop_counter --)
              {
               return;
              }
            }
           else
            {
            }
          }
        }
      }
     if((false))
      {
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             return;
            }
           while(false);
          }
         return;
        }
       else
        {
        }
      }
     if((false))
      {
       if((((false) || false)))
        return;
       barrier();
      }
     if((false))
      {
       if((false))
        barrier();
       return;
      }
     if((false))
      barrier();
     do
      {
       if((false))
        break;
       do
        {
         barrier();
        }
       while(false);
       if((false))
        {
         do
          {
           barrier();
          }
         while(false);
        }
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
     if((false))
      {
       if((false))
        return;
       if((false))
        barrier();
       if((false))
        barrier();
       do
        {
         if((false))
          barrier();
         if((false))
          continue;
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
       if((false))
        barrier();
      }
    }
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
 if(((((injectionSwitch.x > injectionSwitch.y)) || ((false || (false))))))
  {
   if((! (! (true))))
    {
     if(((bool(bool(((injectionSwitch.x > injectionSwitch.y)))))))
      barrier();
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
    }
   else
    {
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
        {
         barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 0; _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
          {
           return;
          }
        }
      }
     else
      {
      }
    }
   if((false))
    {
     for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          {
           if((false))
            return;
           barrier();
          }
         do
          {
           if((false))
            barrier();
           barrier();
           if(((((bool(bool(false)))) || false)))
            barrier();
          }
         while(false);
        }
      }
     if(true)
      {
       if(false)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
         barrier();
        }
      }
     else
      {
       if((false))
        barrier();
      }
    }
   barrier();
   if((false))
    barrier();
  }
 if((false))
  barrier();
 if((false))
  return;
 if(((injectionSwitch.x > injectionSwitch.y)))
  {
  }
 else
  {
   if((false))
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     barrier();
    }
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if(true)
    {
     barrier();
    }
   else
    {
    }
  }
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 if(((! (! (false)))))
  {
   if((false))
    {
     if((! (! (true))))
      {
       barrier();
      }
     else
      {
      }
    }
   barrier();
  }
 if(false)
  {
  }
 else
  {
   if(true)
    {
     do
      {
       for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
        {
         if((false))
          barrier();
         if(true)
          {
           if((false))
            {
             do
              {
               barrier();
              }
             while(((injectionSwitch.x > injectionSwitch.y)));
            }
           if((false))
            {
             do
              {
               if((false))
                {
                 if((false))
                  continue;
                 barrier();
                }
               for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                {
                 if(true)
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 else
                  {
                  }
                }
               if((false))
                continue;
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  break;
                 continue;
                }
               barrier();
               for(int _injected_loop_counter = (1 & 1); _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(((injectionSwitch.x < injectionSwitch.y)))
                    {
                     barrier();
                    }
                   else
                    {
                     if((false))
                      barrier();
                     if((false))
                      barrier();
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      continue;
                    }
                   if((false))
                    break;
                   if((false))
                    barrier();
                   if((false))
                    barrier();
                  }
                 if((false))
                  {
                   if((false))
                    break;
                   return;
                  }
                }
               if((false))
                break;
               if((false))
                barrier();
               if((false))
                break;
               if(true)
                {
                 if((false))
                  barrier();
                }
               else
                {
                }
              }
             while(false);
             for(int _injected_loop_counter = 0; _injected_loop_counter != (1 ^ 0); _injected_loop_counter ++)
              {
               if((((false) || false)))
                return;
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
            }
          }
         else
          {
           if(true)
            {
             if((false))
              barrier();
            }
           else
            {
            }
           if((false))
            barrier();
          }
        }
       atomicStore(write_val, uint(virtual_gid), 4, 64, 0);
      }
     while(false);
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != (1 ^ (0 | (0))); _injected_loop_counter ++)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           for(int _injected_loop_counter = 1; _injected_loop_counter > ((true ? 0 : (90124))); _injected_loop_counter --)
            {
             barrier();
            }
           if(true)
            {
             if((false))
              barrier();
            }
           else
            {
            }
           if(((false || (false))))
            return;
          }
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      barrier();
    }
  }
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    {
     if((false))
      barrier();
     if(true)
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if((false))
          barrier();
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           barrier();
          }
        }
       if((false))
        barrier();
       if((false))
        {
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
         if((false))
          {
           do
            {
             if((false))
              {
               do
                {
                 barrier();
                }
               while(((injectionSwitch.x > injectionSwitch.y)));
              }
            }
           while(false);
           if(true)
            {
             return;
            }
           else
            {
            }
          }
         if((false))
          return;
         return;
        }
       if((false))
        {
         for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != 0; _injected_loop_counter --)
          {
           return;
          }
        }
       if((false))
        return;
       do
        {
         do
          {
           if((false))
            {
             if((false))
              return;
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if((false))
                barrier();
               barrier();
              }
             if((false))
              barrier();
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
               do
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               while(false);
              }
             else
              {
               if((false))
                break;
               if((false))
                {
                 if((false))
                  barrier();
                 do
                  {
                   if((false))
                    barrier();
                   return;
                   if((false))
                    continue;
                  }
                 while(false);
                }
              }
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((false))
                  return;
                 continue;
                }
               barrier();
               if((false))
                continue;
              }
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                return;
               barrier();
              }
             barrier();
             if(((true && (((false) && true)))))
              return;
            }
          }
         while(false);
        }
       while((! (! (false))));
       do
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            {
             for(int _injected_loop_counter = (min(0, 0)); _injected_loop_counter < 1; _injected_loop_counter ++)
              {
               barrier();
              }
            }
           if(false)
            {
            }
           else
            {
             do
              {
               if(((injectionSwitch.x < injectionSwitch.y)))
                {
                 if((false))
                  return;
                 if((false))
                  continue;
                 return;
                }
               else
                {
                 if((false))
                  continue;
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  return;
                 for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    {
                     if((false))
                      break;
                     do
                      {
                       if((false))
                        barrier();
                       barrier();
                       if((false))
                        barrier();
                      }
                     while(((injectionSwitch.x > injectionSwitch.y)));
                    }
                  }
                }
               if((false))
                barrier();
              }
             while(((injectionSwitch.x > injectionSwitch.y)));
            }
          }
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
      }
     else
      {
       if(false)
        {
        }
       else
        {
         if(((! (! (false)))))
          {
           if((false))
            barrier();
           barrier();
          }
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
    {
     if((false))
      barrier();
     do
      {
       return;
      }
     while(false);
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     return;
    }
   if((false))
    barrier();
   if((false))
    return;
   if(true)
    {
     if((false))
      return;
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if((false))
        return;
       if((false))
        return;
       if((false))
        barrier();
       if((false))
        barrier();
      }
     else
      {
      }
    }
   else
    {
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(true)
    {
     if((false))
      {
       for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
        {
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              return;
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                return;
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  return;
                 barrier();
                }
               barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                return;
              }
             if((false))
              {
               if(((true) && true))
                {
                 if(false)
                  {
                  }
                 else
                  {
                   return;
                  }
                }
               else
                {
                }
              }
             if(true)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if(false)
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
               return;
               if((false))
                barrier();
              }
             else
              {
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if(true)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                {
                 if(((injectionSwitch.x < injectionSwitch.y)))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
               barrier();
              }
            }
           else
            {
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if(false)
              {
              }
             else
              {
               return;
              }
            }
          }
         else
          {
           do
            {
             if((false))
              return;
            }
           while(false);
          }
        }
       barrier();
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
      }
     if((false))
      barrier();
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if((false))
        {
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           if((false))
            barrier();
          }
         else
          {
          }
         return;
         if((false))
          return;
        }
      }
     else
      {
      }
     if((false))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       do
        {
         if((false))
          return;
        }
       while(false);
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != (1 ^ 0); _injected_loop_counter ++)
          {
           if((false))
            barrier();
          }
         barrier();
        }
       for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if(false)
            {
            }
           else
            {
             return;
            }
          }
        }
       if((false))
        return;
       if(false)
        {
        }
       else
        {
         return;
        }
       if((false))
        barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(((false) || false))
        {
        }
       else
        {
         barrier();
        }
      }
     if((false))
      {
       for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
        {
         if(((bool(bvec2(((injectionSwitch.x > injectionSwitch.y)), true)))))
          return;
        }
       barrier();
      }
    }
   else
    {
     if((false))
      return;
     if((false))
      barrier();
     if((false))
      {
       do
        {
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         for(int _injected_loop_counter = 1; _injected_loop_counter != ((1 ^ int((injectionSwitch.y))) >> (int(8))); _injected_loop_counter --)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       while(false);
       do
        {
         if((false))
          {
           if((false))
            barrier();
           do
            {
             if(((injectionSwitch.x < injectionSwitch.y)))
              {
               return;
              }
             else
              {
               for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               if((false))
                return;
              }
            }
           while(false);
          }
        }
       while(false);
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((bool(bvec2(((((injectionSwitch.x < injectionSwitch.y))) && true), false))) && true)))
          {
           return;
          }
         else
          {
          }
        }
       barrier();
      }
    }
   if((false))
    return;
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     if((false))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       if(false)
        {
        }
       else
        {
         return;
        }
      }
    }
   else
    {
     if((false))
      {
       if(false)
        {
        }
       else
        {
         return;
        }
      }
    }
   if((false))
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
         if((false))
          return;
        }
       else
        {
         return;
        }
      }
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    barrier();
  }
 uint read_val = atomicLoad(write_val, 4, 64, 0);
 for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
  {
   if((false))
    {
     if((false))
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         continue;
        }
       if(true)
        {
         if(false)
          {
          }
         else
          {
           do
            {
             for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                return;
              }
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              continue;
             barrier();
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            {
             do
              {
               barrier();
              }
             while(false);
            }
           barrier();
          }
         if(true)
          {
           if(((false || (false))))
            {
             if((false))
              {
               if((false))
                break;
               barrier();
              }
             if((false))
              break;
             if(false)
              {
               if(true)
                {
                 if((false))
                  barrier();
                }
               else
                {
                }
              }
             else
              {
               barrier();
              }
            }
           if((false))
            break;
          }
         else
          {
          }
         if((false))
          return;
         if((false))
          break;
         if(true)
          {
           if((false))
            return;
           barrier();
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if(false)
                {
                }
               else
                {
                 barrier();
                }
              }
             break;
            }
          }
         else
          {
           if((false))
            continue;
           if((false))
            barrier();
          }
         for(int _injected_loop_counter = 0; _injected_loop_counter < ((1 << (int(1))) >> (int(1))); _injected_loop_counter ++)
          {
           do
            {
             if((false))
              return;
            }
           while(false);
           if((false))
            return;
          }
        }
       else
        {
         if(false)
          {
           if((false))
            {
             if(((bool(bvec2(false, false)))))
              continue;
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                continue;
               barrier();
              }
             if(false)
              {
              }
             else
              {
               if(false)
                {
                }
               else
                {
                 return;
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
              }
            }
          }
         else
          {
           if((false))
            barrier();
           if((((false) && true)))
            {
             if((false))
              barrier();
             return;
             if((false))
              barrier();
            }
           if((false))
            barrier();
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
             barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              continue;
             barrier();
            }
          }
        }
       if((false))
        break;
       if((false))
        barrier();
      }
     if((((false) && true)))
      return;
     if((false))
      continue;
     do
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       for(int _injected_loop_counter = 0; _injected_loop_counter != (int((injectionSwitch.y)) & 1); _injected_loop_counter ++)
        {
         if((false))
          barrier();
        }
       if((false))
        break;
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         if((false))
          barrier();
         break;
        }
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
       if((false))
        break;
       if((false))
        barrier();
       if(((bool(bool(false)))))
        {
         if((false))
          continue;
         if(false)
          {
          }
         else
          {
           if(false)
            {
            }
           else
            {
             barrier();
            }
          }
        }
       if((false))
        {
         if((false))
          continue;
         barrier();
        }
      }
     while(false);
     if((false))
      return;
     if((false))
      {
       do
        {
         barrier();
        }
       while(false);
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      break;
     if(false)
      {
      }
     else
      {
       if((false))
        {
         for(int _injected_loop_counter = 1; _injected_loop_counter != (0 | 0); _injected_loop_counter --)
          {
           if(false)
            {
             if((false))
              barrier();
            }
           else
            {
             do
              {
               barrier();
              }
             while(false);
            }
          }
        }
      }
     if((false))
      barrier();
     if((false))
      continue;
     if((false))
      barrier();
     if(false)
      {
      }
     else
      {
       do
        {
         if((false))
          return;
         if((false))
          {
           if((false))
            {
             for(int _injected_loop_counter = 0; _injected_loop_counter != (((1 ^ 0)) / 1); _injected_loop_counter ++)
              {
               barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 do
                  {
                   barrier();
                  }
                 while(false);
                }
              }
            }
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(((! (! (false)))))
            break;
           if((false))
            break;
           if((false))
            continue;
           if((false))
            {
             if((false))
              continue;
             barrier();
            }
           return;
           if((false))
            {
             do
              {
               barrier();
              }
             while(false);
            }
           if((false))
            {
             if((false))
              {
               if(true)
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  return;
                }
               else
                {
                }
               barrier();
              }
             barrier();
            }
           if((false))
            return;
          }
         if((false))
          return;
        }
       while(false);
      }
     if((false))
      {
       if(false)
        {
        }
       else
        {
         barrier();
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      break;
     if((false))
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
         if((false))
          return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         if((false))
          barrier();
         break;
        }
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      continue;
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
        {
         barrier();
         if((false))
          barrier();
        }
       if((false))
        barrier();
      }
     for(int _injected_loop_counter = 1; _injected_loop_counter > (0 << (int(7))); _injected_loop_counter --)
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         continue;
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
        }
       if((false))
        continue;
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            break;
           barrier();
          }
         if((false))
          {
           for(int _injected_loop_counter = 1; _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
            {
             barrier();
            }
          }
         if(false)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              return;
             barrier();
            }
          }
         else
          {
           return;
          }
         if((false))
          barrier();
        }
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           break;
           if((false))
            continue;
          }
         continue;
         if((false))
          barrier();
         if((false))
          {
           if((false))
            {
             for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
              {
               barrier();
              }
            }
           if(true)
            {
             barrier();
            }
           else
            {
            }
          }
        }
       if(false)
        {
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           if(true)
            {
             if((false))
              {
               do
                {
                 barrier();
                }
               while(false);
              }
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if(((false || (false))))
                  break;
                 barrier();
                }
               continue;
              }
             if((false))
              continue;
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if(false)
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  break;
                }
               else
                {
                 if((false))
                  barrier();
                 barrier();
                 if((false))
                  barrier();
                }
               if((false))
                {
                 if((false))
                  barrier();
                 if(((injectionSwitch.x < injectionSwitch.y)))
                  {
                   return;
                  }
                 else
                  {
                  }
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                break;
              }
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if((false))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                break;
               break;
               if((false))
                {
                 do
                  {
                   barrier();
                  }
                 while(false);
                }
              }
             barrier();
            }
           else
            {
             if((false))
              continue;
             if(((bool(bvec3((! (! (false))), true, true)))))
              continue;
             if((((false) && true)))
              {
               if(((! (! (false)))))
                {
                 if((false))
                  barrier();
                 for(int _injected_loop_counter = (min(((0) | (0)), 0)); _injected_loop_counter != (0 ^ int((injectionSwitch.y))); _injected_loop_counter ++)
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 return;
                }
               barrier();
               if((false))
                {
                 if(false)
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
              }
             if(((false || (((injectionSwitch.x > injectionSwitch.y))))))
              {
               if((false))
                break;
               break;
              }
            }
           if((false))
            break;
          }
         if((false))
          barrier();
        }
       else
        {
         if((false))
          barrier();
         do
          {
           if((false))
            {
             if((false))
              break;
             barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(true)
            {
             return;
            }
           else
            {
            }
          }
         while(false);
         if(false)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            barrier();
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
           for(int _injected_loop_counter = 1; _injected_loop_counter != (int((injectionSwitch.x)) | 0); _injected_loop_counter --)
            {
             if((((false) || false)))
              {
               for(int _injected_loop_counter = 1; _injected_loop_counter > ((0) | 0); _injected_loop_counter --)
                {
                 return;
                }
              }
             if((false))
              barrier();
            }
          }
         if((false))
          break;
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            {
             if((false))
              break;
             barrier();
            }
           if(false)
            {
            }
           else
            {
             barrier();
            }
           if((false))
            {
             if((false))
              break;
             barrier();
            }
           if((false))
            continue;
          }
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           continue;
           for(int _injected_loop_counter = ((1 << ((((int(ivec3(((int(5)) + 0), 0, 1))) | (int(ivec3(((int(5)) + 0), 0, 1))))))) >> (int(5))); _injected_loop_counter != 0; _injected_loop_counter --)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((false))
              break;
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         if(((! (! (false)))))
          barrier();
         if((false))
          barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        return;
       if(((! (((! (false)) || false)))))
        barrier();
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            return;
           barrier();
          }
         barrier();
        }
       if((false))
        {
         if((false))
          barrier();
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           if((false))
            barrier();
           if((false))
            barrier();
          }
         do
          {
           if((false))
            {
             if((false))
              barrier();
             return;
            }
          }
         while((! (! ((! (! (false)))))));
         barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            return;
           return;
          }
        }
       if((false))
        barrier();
       if((((false) || false)))
        {
         if(false)
          {
           if((false))
            barrier();
          }
         else
          {
           if((false))
            barrier();
           if((false))
            {
             if(true)
              {
               barrier();
               if((false))
                barrier();
              }
             else
              {
              }
             if((false))
              barrier();
            }
          }
         break;
        }
       if((false))
        barrier();
      }
     do
      {
       do
        {
         do
          {
           if((false))
            continue;
           if((false))
            barrier();
           for(int _injected_loop_counter = 0; _injected_loop_counter != (0 ^ ((1 << ((int(ivec3(int(2), 1, 1))))) >> (int(2)))); _injected_loop_counter ++)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                continue;
               if((false))
                {
                 if((false))
                  break;
                 barrier();
                }
               barrier();
              }
            }
           if((false))
            {
             if((false))
              continue;
             barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          barrier();
         if((false))
          return;
        }
       while(false);
      }
     while(false);
    }
   if((false))
    {
     if(false)
      {
      }
     else
      {
       if(((bool(bvec2(false, true)))))
        {
         do
          {
           return;
          }
         while(false);
        }
      }
     barrier();
    }
  }
 if((false))
  {
   if((false))
    barrier();
   return;
  }
 if(false)
  {
   if((false))
    {
     if(true)
      {
       return;
      }
     else
      {
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   do
    {
     if((false))
      {
       if((false))
        break;
       if((false))
        barrier();
       barrier();
      }
    }
   while(false);
   if((false))
    {
     if((false))
      {
       for(int _injected_loop_counter = 1; _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
        {
         return;
        }
      }
     barrier();
    }
   if((false))
    {
     for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < 1; _injected_loop_counter ++)
      {
       if(true)
        {
         if((false))
          return;
        }
       else
        {
        }
      }
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if((false))
        {
         if((false))
          return;
         if((false))
          barrier();
         barrier();
         for(int _injected_loop_counter = (int(- 1544.7142) & 0); _injected_loop_counter < 1; _injected_loop_counter ++)
          {
           if((false))
            barrier();
          }
         if((false))
          {
           do
            {
             return;
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
          }
        }
       for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
        {
         if((false))
          barrier();
        }
      }
     else
      {
       if((false))
        barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     do
      {
       return;
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
    }
   if((false))
    return;
   if((bool(bvec4((bool(bvec4(true, true, false, false))), ((injectionSwitch.x < injectionSwitch.y)), true, true))))
    {
     if((false))
      {
       if((((false) && true)))
        {
         if((false))
          return;
         if((false))
          return;
         if((false))
          return;
         if((false))
          return;
         if(false)
          {
          }
         else
          {
           if((false))
            {
             if((false))
              {
               for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                {
                 barrier();
                }
              }
             if((false))
              return;
             return;
            }
          }
         for(int _injected_loop_counter = (((1 & 1) << (int(7))) >> (int(7))); _injected_loop_counter != 0; _injected_loop_counter --)
          {
           if((((false) || false)))
            return;
          }
         if((false))
          return;
         do
          {
           if(true)
            {
             do
              {
               if((false))
                barrier();
               barrier();
               if((false))
                break;
              }
             while((bool(bvec4((false || (false)), false, false, false))));
            }
           else
            {
            }
           if((false))
            barrier();
          }
         while(false);
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           if(((bool(bvec3(false, false, true)))))
            barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
           if((false))
            barrier();
           barrier();
          }
         if((false))
          return;
         for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > (((int(ivec3(int((injectionSwitch.x)), 0, 0)))) >> 0); _injected_loop_counter --)
          {
           if((false))
            return;
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
             for(int _injected_loop_counter = 0; _injected_loop_counter != (int((injectionSwitch.y)) ^ 0); _injected_loop_counter ++)
              {
               if(((false || (false))))
                barrier();
              }
             if((false))
              {
               if((false))
                return;
               do
                {
                 barrier();
                }
               while(false);
              }
             if((false))
              barrier();
             if((false))
              {
               for(int _injected_loop_counter = 1; _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
                {
                 if((false))
                  barrier();
                }
               if((false))
                continue;
               if((false))
                {
                 if((false))
                  {
                   if(false)
                    {
                    }
                   else
                    {
                     barrier();
                    }
                  }
                 for(int _injected_loop_counter = (0 ^ 1); _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
                  {
                   if((false))
                    barrier();
                   return;
                   if((false))
                    barrier();
                  }
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if((false))
                break;
               continue;
              }
             if((false))
              barrier();
             if((false))
              barrier();
             return;
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                continue;
               barrier();
              }
            }
          }
         if((false))
          barrier();
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
           if((false))
            return;
           if((false))
            {
             if(false)
              {
              }
             else
              {
               if((false))
                return;
              }
             if((false))
              barrier();
             if(true)
              {
               barrier();
              }
             else
              {
              }
            }
          }
         else
          {
           if((false))
            {
             if((false))
              barrier();
             barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              return;
             if((false))
              barrier();
             return;
            }
          }
         if((false))
          return;
         if(((false || (false))))
          barrier();
        }
       if((false))
        {
         do
          {
           if((false))
            {
             if((false))
              continue;
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                break;
               if((false))
                barrier();
               if(false)
                {
                }
               else
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 barrier();
                }
              }
             if((false))
              {
               if((false))
                barrier();
               continue;
              }
             return;
            }
          }
         while((! (! ((! (! (false)))))));
         for(int _injected_loop_counter = (max(((1) << 0), ((1) - 0))); _injected_loop_counter > 0; _injected_loop_counter --)
          {
           return;
           if((false))
            break;
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(true)
          {
           barrier();
          }
         else
          {
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          {
           if((false))
            {
             if((! (! ((false || (false))))))
              {
              }
             else
              {
               if((false))
                return;
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   do
                    {
                     return;
                    }
                   while(((injectionSwitch.x > injectionSwitch.y)));
                  }
                 barrier();
                }
               return;
              }
             if((false))
              return;
            }
           return;
          }
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
             if((false))
              return;
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((false))
              {
               for(int _injected_loop_counter = 1; _injected_loop_counter != (0 >> (int(3))); _injected_loop_counter --)
                {
                 barrier();
                }
               if(((bool(bvec2(false, false)))))
                return;
               if((false))
                barrier();
              }
            }
           else
            {
             if((false))
              {
               if((false))
                return;
               barrier();
              }
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
              }
             else
              {
               if(((injectionSwitch.x < injectionSwitch.y)))
                {
                 do
                  {
                   if((false))
                    continue;
                   barrier();
                  }
                 while(false);
                }
               else
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  return;
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                    {
                     if((false))
                      {
                       if((false))
                        break;
                       barrier();
                      }
                     barrier();
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      break;
                    }
                   if((false))
                    {
                     do
                      {
                       return;
                      }
                     while(false);
                    }
                  }
                }
              }
            }
           if((false))
            return;
           if((false))
            return;
          }
         else
          {
           if(true)
            {
             if((false))
              barrier();
             if((false))
              {
               if(((injectionSwitch.x > injectionSwitch.y)))
                {
                }
               else
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               if((false))
                barrier();
               barrier();
               if(((bool(bvec4((bool(bvec2(false, false))), false, true, true)))))
                barrier();
              }
            }
           else
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             if((false))
              barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(true)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                return;
               if((false))
                barrier();
               do
                {
                 if(((false || (((injectionSwitch.x > injectionSwitch.y))))))
                  barrier();
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if((false))
                    break;
                   if(true)
                    {
                     barrier();
                    }
                   else
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      {
                       if((false))
                        {
                         if((false))
                          continue;
                         barrier();
                        }
                       return;
                      }
                    }
                  }
                }
               while(((injectionSwitch.x > injectionSwitch.y)));
               if((false))
                barrier();
               if(((injectionSwitch.x > injectionSwitch.y)))
                {
                }
               else
                {
                 return;
                }
               if((false))
                return;
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(true)
                    {
                     return;
                    }
                   else
                    {
                    }
                  }
                 barrier();
                }
              }
            }
           else
            {
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            return;
           barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             if(false)
              {
               if((false))
                barrier();
              }
             else
              {
               do
                {
                 if(((! ((bool(bvec4(! (false), true, true, false)))))))
                  return;
                }
               while(false);
               barrier();
              }
            }
           else
            {
             if((false))
              {
               if((false))
                barrier();
               if((false))
                return;
               barrier();
              }
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(false)
            {
            }
           else
            {
             if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
              return;
            }
          }
        }
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if((false))
          {
           if(true)
            {
             do
              {
               return;
              }
             while(false);
            }
           else
            {
            }
          }
         if(true)
          {
           if((false))
            return;
          }
         else
          {
          }
         do
          {
           if(true)
            {
             return;
            }
           else
            {
            }
          }
         while(false);
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = 1; _injected_loop_counter != (0 >> (int(5))); _injected_loop_counter --)
            {
             barrier();
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            return;
           if((false))
            {
             if(true)
              {
               barrier();
              }
             else
              {
              }
            }
           if((false))
            barrier();
           barrier();
           if((false))
            {
             if((false))
              barrier();
             barrier();
            }
           if((false))
            return;
          }
         if((false))
          barrier();
         if((false))
          {
           if((false))
            {
             if((false))
              {
               if(((injectionSwitch.x > injectionSwitch.y)))
                {
                 if((((false) && true)))
                  return;
                }
               else
                {
                 barrier();
                }
              }
             return;
            }
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             return;
            }
           if((false))
            {
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
              }
             else
              {
               return;
              }
            }
           if((false))
            {
             do
              {
               if(false)
                {
                }
               else
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
              }
             while(false);
            }
           if((false))
            barrier();
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          return;
         if(false)
          {
          }
         else
          {
           if(true)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                {
                 if((false))
                  return;
                 return;
                }
               return;
               if((false))
                {
                 for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                  {
                   barrier();
                  }
                }
              }
             if(((! ((bool(bvec3(! (false), true, false)))))))
              {
               if((false))
                return;
               barrier();
              }
             if(true)
              {
               return;
              }
             else
              {
              }
            }
           else
            {
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                return;
               return;
              }
            }
          }
        }
       if((false))
        return;
      }
     if((false))
      barrier();
    }
   else
    {
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(true)
      {
       if((false))
        barrier();
      }
     else
      {
      }
     return;
    }
   if((false))
    {
     do
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       do
        {
         if((false))
          {
           if(true)
            {
             barrier();
            }
           else
            {
            }
          }
         if((false))
          barrier();
        }
       while(false);
       if((false))
        barrier();
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         barrier();
        }
       if((false))
        break;
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         if((false))
          return;
        }
       do
        {
         if((((false) || false)))
          barrier();
        }
       while(false);
      }
     while(false);
     if((false))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       return;
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      {
       for(int _injected_loop_counter = 0; _injected_loop_counter != (1 | int((injectionSwitch.x))); _injected_loop_counter ++)
        {
         barrier();
        }
      }
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   do
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(((false || (false))))
          return;
         if((false))
          {
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
             barrier();
            }
           barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
         if((false))
          barrier();
        }
       if((((false) && ((injectionSwitch.x < injectionSwitch.y)))))
        barrier();
       for(int _injected_loop_counter = 0; _injected_loop_counter < ((1 << (((int(1)) / 1))) >> (((int(1)) / 1))); _injected_loop_counter ++)
        {
         if((false))
          return;
        }
       if((false))
        return;
       if((false))
        barrier();
       if((false))
        barrier();
       do
        {
         barrier();
        }
       while((true && (false)));
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
         break;
        }
       if(((((! (! (((injectionSwitch.x > injectionSwitch.y)))))) && true)))
        {
         if((false))
          break;
         barrier();
        }
      }
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = 0; _injected_loop_counter < ((1 << (int(6))) >> (int(6))); _injected_loop_counter ++)
      {
       return;
      }
     if(((bool(bvec2(false, false)))))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       if((false))
        return;
       for(int _injected_loop_counter = 0; _injected_loop_counter < ((0 | (int(ivec4(1, int((injectionSwitch.x)), 0, 0))))); _injected_loop_counter ++)
        {
         return;
        }
      }
    }
   if((false))
    {
     if((false))
      {
       if((false))
        {
         if(((((false) && true)) || false))
          {
          }
         else
          {
           return;
          }
        }
       barrier();
      }
     if((false))
      return;
     if((false))
      {
       if(true)
        {
         for(int _injected_loop_counter = (int((injectionSwitch.y)) & 1); _injected_loop_counter > 0; _injected_loop_counter --)
          {
           if((false))
            return;
          }
         if((false))
          barrier();
         do
          {
           if((false))
            return;
          }
         while(false);
         if((false))
          barrier();
         if((false))
          {
           if(true)
            {
             barrier();
            }
           else
            {
            }
          }
         if((false))
          return;
         if((false))
          barrier();
         return;
        }
       else
        {
        }
      }
     for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
      {
       if((false))
        barrier();
      }
     if((false))
      barrier();
     do
      {
       if(((! ((! (! (! (false))))))))
        return;
      }
     while(false);
     return;
     do
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           return;
          }
         while(false);
        }
      }
     while(false);
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      {
       do
        {
         return;
        }
       while(false);
      }
     do
      {
       if((false))
        barrier();
      }
     while(((false) && true));
     if((false))
      barrier();
     barrier();
     if((((((injectionSwitch.x > injectionSwitch.y))) && true)))
      {
       if(false)
        {
        }
       else
        {
         if(true)
          {
           return;
          }
         else
          {
          }
        }
      }
     if((false))
      barrier();
    }
   if((false))
    return;
  }
 else
  {
   if(false)
    {
     if((false))
      barrier();
     do
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(true)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           barrier();
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                return;
               if((false))
                barrier();
               barrier();
               if((false))
                barrier();
              }
            }
           else
            {
            }
           if((false))
            return;
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != (0 ^ 0); _injected_loop_counter --)
            {
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if((false))
                {
                 if((false))
                  continue;
                 break;
                }
               if((false))
                break;
               barrier();
              }
             if((false))
              continue;
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if((false))
              continue;
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                break;
               return;
               if(((! (! (false)))))
                continue;
               if((false))
                barrier();
              }
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                break;
               barrier();
              }
            }
          }
         else
          {
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             return;
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              return;
             if((false))
              {
               if((false))
                barrier();
               barrier();
               if((false))
                return;
              }
             return;
             if((false))
              barrier();
            }
           if(false)
            {
            }
           else
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                return;
               barrier();
              }
            }
           if((false))
            {
             for(int _injected_loop_counter = (1 & 1); _injected_loop_counter > ((0 >> (int(7))) << (int(5))); _injected_loop_counter --)
              {
               return;
               if((false))
                {
                 if((false))
                  break;
                 barrier();
                }
              }
            }
          }
         if((false))
          {
           if((false))
            return;
           if((false))
            barrier();
           if(false)
            {
            }
           else
            {
             barrier();
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if(((! (! (false)))))
              return;
             barrier();
            }
           for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           return;
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            return;
           barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if((false))
          return;
         if(((bool(bvec3(false, true, true)))))
          barrier();
         if((false))
          return;
        }
      }
     while(false);
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        return;
       if(false)
        {
        }
       else
        {
         if(false)
          {
          }
         else
          {
           if((false))
            barrier();
          }
         return;
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        {
         if((false))
          return;
         barrier();
        }
       barrier();
       if((false))
        barrier();
      }
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if(true)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
        }
       if((false))
        return;
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > 0; _injected_loop_counter --)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            break;
           barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          {
           if((false))
            return;
           continue;
          }
        }
      }
     if((false))
      return;
    }
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     do
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       buf[virtual_gid] = uint(subgroupAllEqual(read_val));
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(false);
    }
   else
    {
    }
   if(true)
    {
     if((false))
      barrier();
    }
   else
    {
    }
   do
    {
     if((false))
      {
       if((false))
        break;
       if((false))
        barrier();
       for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
        {
         barrier();
        }
      }
    }
   while(false);
   do
    {
     if((false))
      return;
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
   if((false))
    return;
   do
    {
     if(((! (! (false)))))
      barrier();
     for(int _injected_loop_counter = (1 & 1); _injected_loop_counter != (0 | 0); _injected_loop_counter --)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   while(false);
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     return;
    }
   while(false);
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
