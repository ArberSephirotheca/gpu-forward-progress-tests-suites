#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = (max(gl_WorkGroupSize.x, ((true ? gl_WorkGroupSize.x : (uint(uvec2((clamp((((((subgroup_local_id)) ^ 0u)) ^ 0u), (subgroup_local_id), (subgroup_local_id))), 0u)))))));
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = (uint(uvec4(((true ? workgroup_size : (169773u))), 0u, 0u, 1u))) * workgroup_id;
 uint virtual_gid = (((((uint(uvec4(((0u) | (0u)), 0u, 0u, 1u)))) | 0u) ^ (((((clamp((clamp((~ (~ ((uint(uvec3((uint((((uvec3(0u, 0u, 0u) ^ (uvec3(workgroup_base + subgroup_id * subgroup_size, (1u | 1u), 0u)))) >> uvec3(0u, 0u, 0u)))), 0u, 0u)))))), (uint((min(uvec3(workgroup_base + subgroup_id * (min((0u ^ (subgroup_size)), (~ (((~ (subgroup_size)) / 1u))))), 0u, 0u), uvec3(workgroup_base + (((0u ^ (subgroup_id)) * (min(subgroup_size, (~ (((~ (subgroup_size)) / 1u)))))) / 1u), 0u, 0u))))), (((((~ (~ (((min(uint(uvec3(workgroup_base + (((~ (~ (subgroup_id)))) >> 0u) * subgroup_size, 0u, 0u)), uint(uvec3(workgroup_base + subgroup_id * subgroup_size, 0u, 0u)))) * 1u))))) / 1u))))), (((uint(uint(0u))) | (((((1u << (((((((uint(3u))) - 0u)) | ((uint(3u)))) | (uint(3u))))) >> (0u << (uint(1u))))) >> (uint(uvec4((uint((max((clamp(3u, (((1u * (3u))) - 0u), 3u)), 3u)))), 0u, 1u, 0u)))) * ((uint(uvec3(workgroup_base + (clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, ((((subgroup_id) ^ uint((injectionSwitch.x))) * subgroup_size) | (subgroup_id * subgroup_size)))), 0u, (min(0u, 0u))))))))), (uint(uvec3(workgroup_base + subgroup_id * subgroup_size, 0u, 0u)))))) | (0u ^ (((clamp((((uint(uint((clamp((~ (~ ((uint(uvec3((uint((uvec3(0u, 0u, 0u) ^ (uvec3(workgroup_base + (~ (~ (((subgroup_id * subgroup_size) * 1u)))), (1u | 1u), 0u))))), 0u, 0u)))))), (uint((min(uvec3(workgroup_base + subgroup_id * (min(subgroup_size, (~ (((~ (subgroup_size)) / 1u))))), 0u, 0u), uvec3(workgroup_base + (~ (~ (subgroup_id * (min(subgroup_size, (~ (((((false ? (num_workgroup) : ~ (subgroup_size)))) / 1u)))))))), 0u, 0u))))), ((min(uint(uvec3(workgroup_base + ((subgroup_id) >> 0u) * subgroup_size, 0u, 0u)), uint(uvec3(workgroup_base + subgroup_id * subgroup_size, 0u, 0u)))))))))) | 0u)), ((0u | ((((clamp(1u << (((true ? ((uint(3u)) | (uint(3u))) : (173203u)))), (min(1u << (((true ? ((uint(3u)) | (uint(3u))) : (173203u)))), 1u << (((true ? ((uint(3u)) | (uint(3u))) : (173203u)))))), 1u << (((true ? ((uint(3u)) | (uint(3u))) : (173203u))))))) >> (uint((max(3u, 3u))))) * ((((1u * ((uint(uvec3(workgroup_base + (clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, ((((subgroup_id * subgroup_size) | uint((injectionSwitch.x)))) | (subgroup_id * subgroup_size)))), 0u, 0u))))))) * 1u)))), (uint(uvec3(workgroup_base + subgroup_id * subgroup_size, 0u, 0u)))))))))) << 0u))) + subgroup_local_id;
 atomicStore(write_val, uint(virtual_gid), 4, 64, 0);
 uint read_val = atomicLoad(write_val, 4, 64, 0);
 buf[virtual_gid] = uint(subgroupAllEqual(read_val));
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
