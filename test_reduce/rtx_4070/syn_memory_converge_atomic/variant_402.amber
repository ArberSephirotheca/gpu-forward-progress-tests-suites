#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((((((injectionSwitch.x > injectionSwitch.y))) && true)))
  {
   if((false))
    barrier();
   barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if((((injectionSwitch.x > (clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
  barrier();
 if((false))
  barrier();
 if(((((! (! (((injectionSwitch.x > (((mix(vec2((7.3), (injectionSwitch)[1]), vec2((injectionSwitch)[0], (- 6.4)), bvec2(true, false)))) / exp(vec2(0.0, 0.0))).y)))))) && true)))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((((false)) || false))
  barrier();
 if((false))
  {
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   barrier();
  }
 uint num_workgroup = ((gl_NumWorkGroups) | (gl_NumWorkGroups)).x;
 if((false))
  {
   if((false))
    barrier();
   if((! (! (((bool(bool(false))))))))
    {
     if((false))
      barrier();
     barrier();
    }
   barrier();
   if((false))
    barrier();
   if((false))
    barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(((bool(bool((false || (false)))))))
  barrier();
 if((false))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 if((false))
  barrier();
 uint workgroup_id = (clamp(gl_WorkGroupID, gl_WorkGroupID, gl_WorkGroupID)).x;
 uint workgroup_base = (min(workgroup_size * workgroup_id, ((false ? (floatBitsToUint(- 9444.6374)) : (((((bool((bvec3(bvec3(bvec3(true, true, true))))))) || false) ? workgroup_size * (uint(((true ? uint(((workgroup_id) - ((true ? 0u : (packUnorm2x16(vec2(- 165.435))))))) : (subgroup_size))))) : (uvec3(127321u, 124874u, 103804u)[2])))))));
 if((((injectionSwitch.x < injectionSwitch.y)) && ((bool(bvec2((((bool(bvec2(! (true && ((((injectionSwitch.x > injectionSwitch.y)) || (((bool(bvec3(! (true), false, true)))))))), false)))) && ((false))), false))))))
  {
   if((((injectionSwitch.x > (vec2(vec4(injectionSwitch, 0.0, 0.0))).y))))
    barrier();
   if((false))
    barrier();
   barrier();
  }
 if((((! ((bool(bool(! (false || (((injectionSwitch.x > injectionSwitch.y))))))))))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(((((false || (injectionSwitch.x > injectionSwitch.y))))))
  barrier();
 uint virtual_gid = ((((uint((((~ (~ (((((true ? ((uvec2(((((((injectionSwitch.x > injectionSwitch.y)) ? (((subgroup_id)) ^ 0u) : (uint((clamp(uvec4(((false ? (workgroup_base) : uint(uvec3((((clamp(workgroup_base, workgroup_base, workgroup_base)) + subgroup_id * subgroup_size) ^ 0u), 0u, 0u)))), 1u, 0u, (0u ^ 0u)), (uvec4(0u, 0u, 0u, 0u) | (uvec4(((false ? (workgroup_base) : uint(uvec3(((workgroup_base + subgroup_id * subgroup_size) ^ 0u), 0u, 0u)))), 1u, 0u, (0u ^ 0u)))), uvec4(((false ? (workgroup_base) : uint(((uvec3(((workgroup_base + subgroup_id * subgroup_size) ^ 0u), 0u, 0u)) << (((uvec3(0u, 0u, 0u)) << uvec3(0u, 0u, 0u)) >> (uvec3(3u))))))), 1u, 0u, (0u ^ 0u))))))))) - 0u), 1u)) | (uvec2(((((((injectionSwitch.x > injectionSwitch.y)) ? (subgroup_id) : (uint((clamp(((uvec4(95731u, 52704u, 129346u, 12388u) & uvec4(0u, 0u, 0u, 0u)) | ((max(uvec4(((false ? (workgroup_base) : uint(uvec3(((workgroup_base + subgroup_id * ((1u * (uint((~ ((uvec2(0u, 0u) ^ (~ (uvec2(subgroup_size, (1u & 1u)))))))))))) ^ 0u), 0u, 0u)))), 1u, 0u, (max(((min((min(0u ^ 0u, ((0u ^ 0u) / 1u))), 0u ^ 0u))), ((min(((~ (~ (((((min(0u ^ 0u, ((0u ^ 0u) / 1u))) >> 0u)) | 0u))))), 0u ^ 0u)))))), uvec4(((false ? (workgroup_base) : uint(uvec3(((workgroup_base + subgroup_id * ((1u * (uint((~ ((uvec2(0u, 0u) ^ (~ (uvec2(subgroup_size, (1u & 1u)))))))))))) ^ 0u), 0u, 0u)))), 1u, 0u, (max(((min((min(0u ^ 0u, ((0u ^ 0u) / 1u))), 0u ^ 0u))), ((min(((~ (~ (((((min(0u ^ 0u, ((0u ^ 0u) / 1u))) >> 0u)) | 0u))))), 0u ^ 0u)))))))))), (uvec4(0u, 0u, 0u, 0u) + (uvec4((uint(uvec3(((false ? (workgroup_base) : uint(uvec3((((1u * (workgroup_base)) + subgroup_id * subgroup_size) ^ 0u), 0u, 0u)))), uint((injectionSwitch.y)), ((1u << (((uint(4u))) | 0u)) >> (uint(4u)))))), 1u, 0u, (0u ^ 0u)))), uvec4(((false ? (workgroup_base) : uint(uvec3(((workgroup_base + subgroup_id * subgroup_size) ^ 0u), 0u, 0u)))), 1u, 0u, (0u ^ 0u))))))))) - 0u), 1u))) : (uvec2(1280u, 14238u))) - uvec2(0u, 0u)))))))) - uvec2(0u, 0u)))) - ((83004u & 0u) ^ ((0u >> (uint(5u)))))))) + subgroup_local_id;
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if(((bool(bvec2(((injectionSwitch.x > injectionSwitch.y)), true)))))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 if(((bool(bvec3((bool(bvec4(! (! ((false || ((false))))), true, false, false))), true, true)))))
  {
   if((! (! ((((((((injectionSwitch.x > ((injectionSwitch.y) / 1.0)))) || false)) || false))))))
    {
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     barrier();
    }
   if((false))
    {
     if((! (! ((false)))))
      barrier();
     if((false))
      barrier();
     barrier();
     if((bool(bvec4((((injectionSwitch.x > injectionSwitch.y))), true, (((max(injectionSwitch, injectionSwitch)).x < injectionSwitch.y)), false))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   barrier();
  }
 if(((((false || (injectionSwitch.x > injectionSwitch.y))))))
  barrier();
 if((false))
  {
   if(((false || ((bool(bool((bool(bvec2((bool(bvec3(false, ((injectionSwitch.x > injectionSwitch.y)), true))), false))))))))))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   barrier();
  }
 if((((((injectionSwitch.x > injectionSwitch.y))) || false)))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 atomicStore(write_val, uint(virtual_gid), ((4) << 0), 64, 0);
 if((! ((bool(bvec3(! (((! (! (bool(bool((false)))))))), true, true))))))
  {
   if((false))
    barrier();
   barrier();
  }
 if((! ((true && (! ((false)))))))
  barrier();
 if((((injectionSwitch.x > ((determinant(mat3(cos(0.0), 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, sin(0.0), 1.0)) * ((((((false ? (23.03) : (mix(float((- 1.3)), float(injectionSwitch.y), bool(true)))))) * 1.0)) * 1.0)))))))
  barrier();
 uint read_val = atomicLoad(write_val, 4, 64, (((((max(((((0) >> 0)) ^ 0), ((0) >> 0)))) | ((0) << ((~ (~ (((((0 ^ (min(0, ((0) | (0)))))) >> 0)) >> 0))))))) | ((((max(((((0) >> 0)) ^ 0), ((0) >> 0)))) | ((0) << ((~ (~ (((((0 ^ (min(0, ((0) | (0)))))) >> 0)) >> 0)))))))));
 if((((((false))) && true) || false))
  {
   if((false))
    {
     if((false))
      {
       if(((((((! (! (injectionSwitch.x > injectionSwitch.y)))) || false)))))
        barrier();
       barrier();
      }
     barrier();
    }
   barrier();
   if((((false || (bool(bvec3((((min(injectionSwitch, (vec2(vec2(injectionSwitch))))).x > injectionSwitch.y)), false, true)))))))
    barrier();
  }
 if((((((vec2(mat4((min((injectionSwitch), (mix(vec2(((injectionSwitch))[0], (- 945.658)), vec2((2.2), ((injectionSwitch))[1]), bvec2(false, true))))), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, sqrt(0.0), 0.0, 1.0, 0.0, sqrt(1.0), ((1.0) * 1.0), determinant(mat2(1.0, 1.0, 0.0, 1.0))))) / cos(vec2(0.0, 0.0))).x > injectionSwitch.y))))
  {
   if(((((injectionSwitch.x > ((injectionSwitch) + vec2(0.0, 0.0)).y)) || (false || ((false))))))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 (((((~ ((~ (((~ (~ (buf[virtual_gid] = (~ ((0u ^ (~ (uint(subgroupAllEqual(read_val)))))))))) << uint((injectionSwitch.x))))))) - 0u)) ^ 0u));
 if((false))
  barrier();
 if((false))
  barrier();
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
