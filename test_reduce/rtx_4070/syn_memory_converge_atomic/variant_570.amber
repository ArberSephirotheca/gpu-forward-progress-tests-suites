#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

struct _GLF_struct_3 {
 bvec4 _f0;
 mat3x2 _f1;
 bvec4 _f2;
 ivec3 _f3;
 ivec2 _f4;
} ;

struct _GLF_struct_2 {
 uint _f0;
 bool _f1;
 ivec2 _f2;
 mat2x4 _f3;
} ;

struct _GLF_struct_4 {
 float _f0;
 ivec2 _f1;
 _GLF_struct_2 _f2;
 _GLF_struct_3 _f3;
} ;

struct _GLF_struct_0 {
 mat4x3 _f0;
 mat4x3 _f1;
 mat3x2 _f2;
} ;

struct _GLF_struct_1 {
 bvec3 _f0;
 _GLF_struct_0 _f1;
 bvec2 _f2;
} ;

struct _GLF_struct_5 {
 uint read_val;
 _GLF_struct_1 _f0;
 _GLF_struct_4 _f1;
} ;

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(((true && (false))))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(((! (! (false)))))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   if((((false) && true)))
    barrier();
   barrier();
   if((false))
    barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if((false))
  barrier();
 if((((false) && true)))
  {
   if((false))
    barrier();
   if((((((((injectionSwitch.x > injectionSwitch.y) && true)) || false)))))
    {
     if((false))
      barrier();
     if(((bool(bvec4(false, false, false, false)))))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   if((false))
    barrier();
   barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((false))
  barrier();
 if((false))
  barrier();
 if((((((injectionSwitch.x > injectionSwitch.y))) && true)))
  {
   if((false))
    barrier();
   barrier();
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(((false || (false))))
  barrier();
 if((false))
  barrier();
 if(((((min((float(((((((false ? (vec2(- 513.701, 570.286)) : vec2(injectionSwitch.x, 1.0)) * mat2(1.0)) * vec2(1.0, 1.0))))))), injectionSwitch.x)) > injectionSwitch.y))))
  {
   if((false))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   barrier();
  }
 if((false))
  {
   if((false))
    barrier();
   if(((bool(bvec3((bool(bvec4(false, true, false, ((injectionSwitch.x > injectionSwitch.y))))), ((((injectionSwitch.x < injectionSwitch.y))) || false), false)))))
    {
     if(((true && (((injectionSwitch.x > injectionSwitch.y))))))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((bool(bvec2((false), false))))
  {
   if((false))
    barrier();
   if((bool(bvec2((false), false))))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((! (! ((false)))))
  barrier();
 uint workgroup_size = (clamp((uvec3(uvec3(gl_WorkGroupSize))), gl_WorkGroupSize, gl_WorkGroupSize)).x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * ((workgroup_id) ^ (clamp((0u | (((0u) ^ (((0u | (0u >> (uint(2u)))) >> 0u))))), ((0u) ^ (((0u | (0u >> (uint(2u)))) >> 0u))), ((0u) ^ (((0u | (0u >> (uint(2u)))) >> 0u))))));
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint virtual_gid = ((min(0u ^ (workgroup_base), (max(0u ^ (workgroup_base), ((((0u ^ (workgroup_base)) | 0u)) >> (0u << (uint(5u))))))))) + subgroup_id * subgroup_size + subgroup_local_id;
 if((((((false) && true))) && true))
  barrier();
 atomicStore(write_val, uint(virtual_gid), 4, 64, ((((0) ^ 0)) | 0));
 if((((true && (bool((! (! (! (! ((bool(((! (! (! ((! ((bool(bvec4(bool(bvec3((bool(bool((((mix(vec2((injectionSwitch)[0], (max((injectionSwitch), (injectionSwitch)))[1]), vec2((1350.3630), (((((((true ? (mix(((true ? float((9.8)) : (0.8))), float((- 3.4 - - 544.583)), bool(true))) : (- 748.934))))) - 0.0) - 0.0))), bvec2((true && (false)), false))).x > injectionSwitch.y))))), true, true)), (bool(bvec2((bool((bvec3(bvec3(bvec3((((((injectionSwitch.x < injectionSwitch.y)) && ((true && (injectionSwitch.x < injectionSwitch.y)))))), true, false)))))), (bool(bool(true)))))), (((false || (((((false ? (injectionSwitch) : injectionSwitch)).x > injectionSwitch.y)))) && true)), false)))))))))))))))))))))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 _GLF_struct_5 _GLF_struct_replacement_5 = _GLF_struct_5(atomicLoad(write_val, 4, 64, 0), _GLF_struct_1(bvec3(((! (! (! (((false || (! (bool(bool(((((! (((! (! (! ((((((((((bool(bvec3(false || (bool(bvec4((true), true, true, false))), false, ((injectionSwitch.x > injectionSwitch.y))))) && true))))) || ((injectionSwitch.x > injectionSwitch.y)))) || false) && true)))) || false)))))))))))))))) && ((((injectionSwitch.x < injectionSwitch.y)) && (true))))), _GLF_struct_0(mat4x3(1.0), mat4x3((((float(vec4(1.0, 1.0, 1.0, log(1.0)))) / 1.0))), mat3x2(1.0)), ((bvec2(bvec4(bvec2(bvec2(bvec2(((((true)) || false) && ((injectionSwitch.x < injectionSwitch.y)))))), false, false))))), _GLF_struct_4(1.0, ivec2(1), _GLF_struct_2(1u, true, ivec2(1), mat2x4(1.0)), _GLF_struct_3(bvec4(true), mat3x2(1.0), bvec4(true), ivec3(1), ivec2(1))));
 buf[virtual_gid] = uint(subgroupAllEqual(_GLF_struct_replacement_5.read_val));
 if((bool(bool(((((injectionSwitch.x > injectionSwitch.y)) || (((bool(bvec2((! (! ((false)))) || ((injectionSwitch.x > injectionSwitch.y)), false)))))))))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   barrier();
  }
 if((((((injectionSwitch.x > injectionSwitch.y)))) || false))
  {
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
