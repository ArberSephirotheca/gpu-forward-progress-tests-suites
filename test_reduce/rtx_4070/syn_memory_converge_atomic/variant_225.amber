#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

struct _GLF_struct_5 {
 mat2 _f0;
 ivec2 _f1;
 bvec3 _f2;
 bvec2 _f3;
 uint _f4;
 uint read_val;
 bvec3 _f5;
} ;

struct _GLF_struct_4 {
 vec3 _f0;
 ivec3 _f1;
 int _f2;
 mat4x2 _f3;
 bvec2 _f4;
 vec3 _f5;
 mat2x4 _f6;
} ;

struct _GLF_struct_6 {
 _GLF_struct_4 _f0;
 float _f1;
 _GLF_struct_5 _f2;
 uvec4 _f3;
} ;

struct _GLF_struct_7 {
 _GLF_struct_6 _f0;
} ;

struct _GLF_struct_1 {
 uvec2 _f0;
 bool _f1;
 uint _f2;
} ;

struct _GLF_struct_0 {
 bool _f0;
 uint num_workgroup;
 bvec3 _f1;
} ;

struct _GLF_struct_2 {
 _GLF_struct_0 _f0;
 _GLF_struct_1 _f1;
 mat2 _f2;
} ;

struct _GLF_struct_3 {
 _GLF_struct_2 _f0;
 mat3 _f1;
} ;

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 _GLF_struct_3 _GLF_struct_replacement_3 = _GLF_struct_3(_GLF_struct_2(_GLF_struct_0(true, ((((((((true ? ((gl_NumWorkGroups.x) | uint((injectionSwitch.x))) : (subgroup_id)))) << uint((injectionSwitch.x)))) / 1u)) / 1u), ((bvec3(bvec3(bvec3(bvec3((bvec3((bvec3(bvec3(bvec3(bvec3(true)))))))))))))), _GLF_struct_1(uvec2(1u), true, (~ (~ (((((((! (! (true))) ? (clamp(1u, 1u, 1u)) : (subgroup_local_id)))) - uint((injectionSwitch.x))) * (1u)))))), ((((injectionSwitch.x > ((injectionSwitch) * abs(vec2(1.0, 1.0))).y)) ? (mat2(8.1, (mix(float(33.31), float((5250.5797)), bool(false))), 76.23, - 333.489)) : mat2(1.0)))), mat3(1.0));
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = ((~ (~ ((true ? workgroup_size : (subgroup_id)))))) * (uint((max(uvec2(workgroup_id, 0u), uvec2(workgroup_id, 0u)))));
 uint virtual_gid = (min(workgroup_base, workgroup_base)) + ((1u * (max((((min(((subgroup_id * subgroup_size) + (max(0u, 0u))), (min(((false ? (30860u) : subgroup_id * subgroup_size)), (max(subgroup_id * subgroup_size, subgroup_id * subgroup_size)))))) ^ 0u)), subgroup_id * subgroup_size)))) + subgroup_local_id;
 atomicStore(write_val, uint((clamp((((((((injectionSwitch.x > (mat2(1.0) * (injectionSwitch)).y)) ? (virtual_gid) : ((((((~ (((~ (((((true ? virtual_gid : (atomicMax(subgroup_size, (0u ^ (uint(uvec4((virtual_gid), 0u, 0u, 1u)))))))) / 1u)) << 0u)) >> 0u)))))) >> (0u << (uint(8u))))))) - 0u)) ^ 0u), virtual_gid, virtual_gid))), 4, ((64) | 0), 0);
 _GLF_struct_7 _GLF_struct_replacement_7 = _GLF_struct_7(_GLF_struct_6(_GLF_struct_4(vec3((clamp((mix((((min(float((float(vec2(((float(mat2x3(max(1.0, 1.0), 1.0, 0.0, determinant(mat3((clamp(1.0, 1.0, 1.0)), log(1.0), 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0)), 0.0, 0.0)))), 1.0)))), float((float(vec2(((float(mat2x3(max(1.0, 1.0), 1.0, 0.0, determinant(mat3((clamp(1.0, 1.0, 1.0)), log(1.0), 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0)), 0.0, 0.0)))), 1.0))))))) + 0.0), float(((min(877.745, 877.745)))), bool(false))), 1.0, 1.0))), ivec3((~ (~ (1)))), 1, mat4x2(((1.0) / 1.0)), bvec2(true), vec3(1.0), mat2x4(1.0)), 1.0, _GLF_struct_5(mat2(1.0), ivec2((min(((1) / (((((true ? 1 : (((12234)) / 1)))) - (0 >> (((true ? int(0) : (- 20304)))))) ^ 0)), ((((1) / ((max(1, 1)) ^ 0))) ^ 0)))), bvec3(true), bvec2(true), 1u, atomicLoad((~ (((~ (max((((write_val)) | ((write_val))), (0u | ((((write_val)) | ((write_val)))))))) >> ((1u ^ uint((injectionSwitch.x))) * (((0u) | 0u)))))), 4, 64, ((0 | ((0) - 0)))), (((bvec3(bvec4((bvec3(bvec3(bvec3(bvec4(bvec3(((bvec3(bvec3(bvec3(bvec4(bvec3((bvec3(bvec3((bvec3(bvec4((bvec3(bvec3(bvec3(true)))), (((! (! (bool((false || (bool((! (! (bool(bvec2((bool(bvec3(false, true, true))), true))))))))))))))))))))), true))))))), false))))), true)))))), uvec4(1u)));
 (~ (~ (((((buf[virtual_gid] = uint(subgroupAllEqual(_GLF_struct_replacement_7._f0._f2.read_val))) ^ 0u)) - 0u))));
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
