#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = ((((gl_NumWorkGroups) * uvec3(1u, 1u, 1u)).x) << 0u);
 uint workgroup_size = ((((max(uint((((uvec2(0u, 0u) | (((uvec2(((gl_WorkGroupSize.x) | ((max((uvec3((min(gl_WorkGroupSize, gl_WorkGroupSize))[0], gl_WorkGroupSize[1], (((max(gl_WorkGroupSize, (uvec3(gl_WorkGroupSize[0], (uint((injectionSwitch.y)) * (gl_WorkGroupSize[1])), gl_WorkGroupSize[2]))))) | (gl_WorkGroupSize))[2])), gl_WorkGroupSize)).x)), 1u)) - (uvec2(0u, 0u) + (uvec2(0u, 0u))))))) | uvec2(0u, 0u))), uint((((uvec2(0u, 0u) | (((uvec2(((gl_WorkGroupSize.x) | ((uvec3(((uvec3((((max((uvec3((min(gl_WorkGroupSize, gl_WorkGroupSize))[0], gl_WorkGroupSize[1], gl_WorkGroupSize[2])), gl_WorkGroupSize))) | ((max((((uvec3((min(gl_WorkGroupSize, gl_WorkGroupSize))[0], gl_WorkGroupSize[1], gl_WorkGroupSize[2]))) >> uvec3(0u, 0u, 0u)), gl_WorkGroupSize)))))) + uvec3(0u, 0u, 0u)))).x)), 1u)) - uvec2(0u, 0u))))) | uvec2(0u, 0u)))))) << 0u));
 uint workgroup_id = (0u ^ (0u ^ ((gl_WorkGroupID.x))));
 uint workgroup_base = ((workgroup_size) + 0u) * workgroup_id;
 uint virtual_gid = ((true ? workgroup_base : (write_val))) + subgroup_id * (0u ^ (~ (~ (((max(subgroup_size, subgroup_size))))))) + subgroup_local_id;
 atomicStore(write_val, uint(virtual_gid), (~ (min((~ (((4) - 0))), (~ (((((((4) - 0) | (((true ? (4) - 0 : (73149)))))) ^ 0))))))), 64, 0);
 uint read_val = atomicLoad(write_val, 4, 64, 0);
 buf[virtual_gid] = uint(subgroupAllEqual(read_val));
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
