#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((((false || ((((((((injectionSwitch.x > injectionSwitch.y)))) || false)) && true)))) || (! ((false || (true && ((! (((((injectionSwitch.x < injectionSwitch.y)) && (((((true ? vec2(1.0, 1.0) : (vec2(- 958.964, - 33.51)))) * ((mix(vec2((1.0 * (((clamp((min(injectionSwitch, injectionSwitch)), (min(injectionSwitch, injectionSwitch)), (min(injectionSwitch, injectionSwitch)))))[0])), (828.903)), vec2((float(((true && (false || (true)))))), ((clamp((min((vec2((min(injectionSwitch[0], injectionSwitch[0])), (clamp(injectionSwitch, injectionSwitch, injectionSwitch))[(max(1, 1))])), injectionSwitch)), (min(injectionSwitch, injectionSwitch)), (min(injectionSwitch, injectionSwitch)))))[1]), bvec2(false, (((mix(vec2((injectionSwitch)[0], (clamp((injectionSwitch)[1], (injectionSwitch)[1], (injectionSwitch)[1]))), vec2((- 15.44), (9.4)), bvec2(false, false))).x < injectionSwitch.y))))))).x > injectionSwitch.y)))))))))))))
  {
   if(((true && ((true && (false))))))
    barrier();
   if((false))
    {
     if((((((exp(vec2(0.0, 0.0)) * ((injectionSwitch) * mat2(1.0)))).x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   if((((false || ((false))) && true)))
    {
     if((((false)) && true))
      {
       if((false))
        barrier();
       barrier();
      }
     if(((false || ((! (! (false)))))))
      barrier();
     barrier();
    }
   if(((bool(bool((! (((! (false)) || ((false) || false)))))))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       if((false))
        {
         if((false))
          barrier();
         barrier();
         if((false))
          barrier();
        }
       barrier();
      }
     if((false))
      barrier();
     if((((injectionSwitch.x > (mix(float((- 0.2)), float(((false ? (- 68.44) : injectionSwitch.y))), bool(true)))))))
      {
       if((false))
        barrier();
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(((! (! (false)))))
      barrier();
     barrier();
    }
   if(((((max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
    {
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((((((true ? injectionSwitch.x : (- 3.9))) > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if((((false) || false)))
    {
     if((((injectionSwitch.x > (vec2(mat3x2(injectionSwitch, 0.0, 1.0, 0.0, 0.0))).y))))
      barrier();
     if(((bool(((bvec3(bvec3(bvec3((bvec3(bvec3(bvec3(bvec3(false, true, false))))))))))))))
      barrier();
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((false)) || false))
        {
         if((false))
          barrier();
         barrier();
        }
       barrier();
      }
     barrier();
    }
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false || ((false))))
    {
     if((false))
      {
       if((((false)) && true))
        barrier();
       if((false))
        barrier();
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if(((true && (false))))
        barrier();
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      {
       if((((injectionSwitch.x > ((injectionSwitch) + vec2(0.0, 0.0)).y))))
        barrier();
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(((((false || (injectionSwitch.x > injectionSwitch.y))))))
        barrier();
       if((((((injectionSwitch.x) - 0.0) > injectionSwitch.y))))
        {
         if((((bool((bvec2(bvec4(bvec2(((bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)))), true), true, false))))))))
          barrier();
         barrier();
        }
       if((false))
        barrier();
       barrier();
       if(((((false || (injectionSwitch.x > (max(((true ? injectionSwitch.y : (303.196))), injectionSwitch.y))))))))
        barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y)) || ((((injectionSwitch.x > injectionSwitch.y))))))
      {
       if((false))
        barrier();
       barrier();
      }
     if((false))
      barrier();
     if(((((true && (bool(bvec4(false, true, ((injectionSwitch.x < injectionSwitch.y)), false))))) || (! (! ((((false) || false))))))))
      barrier();
     barrier();
     if((((! (! ((! (((! ((injectionSwitch.x > (min((float(mat2x3(injectionSwitch.y, 0.0, 0.0, (dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0))), 1.0, 1.0))), injectionSwitch.y))))) && (! (((bool((bvec3(bvec3(bvec3((! ((! (! (true))))), true, true))))))) && true)))))))))))
      barrier();
     if((true && ((((false || ((false))) || false)))))
      {
       if(((((false || (((false)) && true))) && true)))
        barrier();
       if(((false || ((bool(bvec4(false || (((false || (false)))), true, ((injectionSwitch.x < injectionSwitch.y)), true)))))))
        {
         if((false))
          barrier();
         barrier();
        }
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(((! (! (! (! ((false))))))))
      barrier();
     if((false))
      barrier();
    }
   barrier();
   if((false))
    {
     if((false))
      {
       if(((bool(bvec4(((injectionSwitch.x > injectionSwitch.y)), true, false, false)))))
        barrier();
       barrier();
      }
     barrier();
     if(((bool(bvec4(false, true, true, true)))))
      barrier();
     if((false))
      barrier();
    }
  }
 if(((bool(bool(false))) || (((((vec2(1.0, 1.0) * (injectionSwitch)).x > ((0.0 + ((max(max(injectionSwitch.y, injectionSwitch.y), max(injectionSwitch.y, injectionSwitch.y))))))))))))
  barrier();
 if((! ((! (! (! ((false))))))))
  {
   if((false || ((false))))
    {
     if((false))
      barrier();
     barrier();
    }
   barrier();
  }
 if((false || ((bool(bvec4(((((max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))), false, (((clamp(injectionSwitch, (clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)).x < injectionSwitch.y)), false))))))
  {
   if((((((injectionSwitch.x > injectionSwitch.y) && true)))))
    barrier();
   barrier();
   if((false))
    barrier();
  }
 if((false))
  barrier();
 if((false))
  {
   if((false || (((false || (false))))))
    barrier();
   barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 if(((((true && (false)) && true))))
  barrier();
 if((bool(bvec3((bool((bvec2(bvec2(bvec2((((injectionSwitch.x > injectionSwitch.y))), false)))))), true, false))))
  {
   if((((injectionSwitch.x > (mix(float((- 74.86)), float(((true ? (min(injectionSwitch.y, (float(mat3x2((((false ? (injectionSwitch) : vec2(0.0, 0.0) + (injectionSwitch)))).y, ((false ? (- 1404.4142) : (((true ? float(mat4(0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, abs(1.0), 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0)) : (1.0)))))), 1.0, 1.0, 1.0, (min((mix((min(((float(0.0)) + sin(0.0)), (min(float(0.0), float(0.0))))), float(((true ? 373.874 : 8740.3032))), bool(false))), 0.0))))))) : (5194.3318)))), bool(true)))))))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   barrier();
  }
 uint subgroup_size = gl_SubgroupSize;
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((false))
  barrier();
 if((((injectionSwitch.x > ((false ? (vec2(3.8, 2210.5178)) : (max(injectionSwitch, ((injectionSwitch) - vec2(0.0, 0.0)))))).y))))
  barrier();
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 uint num_workgroup = (((0u ^ (gl_NumWorkGroups.x))) ^ 0u);
 if((false))
  barrier();
 if((false))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 if((((((true && (true && ((! (((! ((bool(bvec2(injectionSwitch.x > injectionSwitch.y, ((true) || false)))))) && true)))))))))))
  {
   if(((! (! ((false || ((bool(bvec3(false, true, false))))))))))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
  }
 if((false || ((((false)) || ((injectionSwitch.x > injectionSwitch.y))))))
  {
   if(((((min(injectionSwitch, (mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2((558.334), (1.2)), bvec2(false, false))))).x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((false))
  {
   if((((false) && true)))
    barrier();
   barrier();
  }
 if((false))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   if((((((false)) || false)) || false))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(((! (! (bool(bvec4((((injectionSwitch.x > injectionSwitch.y))), false, false, false)))))))
    {
     if((false))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     barrier();
    }
   barrier();
   if(((bool(bool(bool(bvec4((false), false, true, true)))))))
    barrier();
   if(((((((! ((! (! (((false || (bool(bvec4(((! ((false || (true)))) || false), false, false, true)))))))))) ? injectionSwitch.x : (min((max((acos(5285.3323)), (acos(5285.3323)))), (clamp((min((acos(5285.3323)), (acos(5285.3323)))), (acos(5285.3323)), (acos(5285.3323)))))))) > (clamp(injectionSwitch, (vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)).y))))
    barrier();
  }
 if((false))
  barrier();
 if(((((float((mat4(1.0) * (mat3x4(((clamp(0.0 + (((true ? injectionSwitch.x : ((clamp(257.829, (clamp(257.829, 257.829, 257.829)), 257.829)))))), 0.0 + (((true ? injectionSwitch.x : ((clamp(257.829, (clamp(257.829, 257.829, 257.829)), 257.829)))))), 0.0 + (((true ? injectionSwitch.x : ((clamp(257.829, (clamp(257.829, 257.829, 257.829)), 257.829))))))))), 1.0, sin(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, sqrt(0.0), 1.0))))) > injectionSwitch.y))))
  barrier();
 uint workgroup_id = ((gl_WorkGroupID.x) >> (((((clamp((uint(uvec2(0u, (min(1u, ((uint(uint((0u >> (uint(0u)))))) | (((((1u) | (1u))) | (1u))))))))), (uint(uvec2(0u, (min(1u, ((uint(uint((0u >> (uint(0u)))))) | (((((1u) | (1u))) | (1u))))))))), (uint(uvec2(0u, (min(1u, ((uint(uint((0u >> (uint(0u)))))) | (((((1u) | (1u))) | (1u)))))))))))) + 0u)) - (clamp((0u ^ 0u), (0u ^ 0u), (0u ^ 0u)))));
 uint workgroup_base = ((workgroup_size) | 0u) * workgroup_id;
 if((((false)) || ((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((((false)) || false))
  barrier();
 if((false))
  barrier();
 uint virtual_gid = workgroup_base + ((subgroup_id * (min(((((clamp((max(max((1u * ((min((max(subgroup_size, subgroup_size)), ((subgroup_size) ^ (0u ^ 0u)))))), (1u * (subgroup_size))), max((1u * ((min(subgroup_size, ((subgroup_size) ^ (0u ^ 0u)))))), (1u * (subgroup_size))))), (((((uint(uvec3(max((1u * ((((min(subgroup_size, ((((subgroup_size) ^ (0u ^ 0u))) | (0u >> (uint(7u)))))))) - uint((injectionSwitch.x)))), (1u * (subgroup_size))), 1u, 1u)))) ^ 0u)) << 0u), max((1u * ((min(subgroup_size, ((subgroup_size) ^ (0u ^ 0u)))))), (1u * (subgroup_size))))))) | 0u), (1u * (subgroup_size))))) - 0u) + ((max((subgroup_local_id) | (subgroup_local_id), ((~ (~ (uint(uvec3((clamp((subgroup_local_id), (subgroup_local_id), (subgroup_local_id))), 0u, 0u)))))) | (subgroup_local_id))));
 if((false))
  barrier();
 atomicStore(write_val, uint(virtual_gid), 4, 64, (max(0, (min(0, 0)))));
 if((((bool((bool(((bvec3(bvec4(bvec3(bvec4(bvec3(bool(((true && (bool((bvec3(bvec4(bvec3((((! ((false || (bool((bvec2(bvec4((bvec2(bvec3(bvec2((((((! (true && (((injectionSwitch.x > injectionSwitch.y))))) && true)) || false)), true), false))), true, true)))))))))), false, true), false)))))))), true, (! ((bool(bvec3(! (((injectionSwitch.x < injectionSwitch.y))), true, false)))))), true)), true))))))))) || false))
  barrier();
 if((false || (((! (! (((((injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y)))))))))
  barrier();
 uint read_val = atomicLoad(write_val, 4, ((clamp(int(int((clamp(64, 64, 64)))), int(int(64)), int(int(64))))), 0);
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if(((bool(bvec3(((injectionSwitch.x > injectionSwitch.y)), true, ((injectionSwitch.x < injectionSwitch.y)))))))
    barrier();
   barrier();
   if(((((true && (bool(bool(bool(bvec2(false, true))))))))))
    barrier();
   if((((false)) || false))
    barrier();
  }
 if(((! (! (false)))))
  barrier();
 if((false))
  {
   if((((injectionSwitch.x > ((min(abs(vec2(1.0, 1.0)), abs(vec2(1.0, 1.0)))) * (injectionSwitch)).y))))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   barrier();
  }
 if(((bool(bool(false)))))
  {
   if((false))
    barrier();
   barrier();
  }
 buf[virtual_gid] = uint(subgroupAllEqual(read_val));
 if((false))
  barrier();
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((((! (! ((false))))) && true))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((false))
  barrier();
 if(((((((((max(injectionSwitch.x, injectionSwitch.x)) / 1.0)) - 0.0)) > ((mix(float(sin(0.0)), float((- 1.0)), bool(((injectionSwitch.x > injectionSwitch.y))))) + (mix(float((5.6)), float((injectionSwitch.y)), bool(true))))))))
  {
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(((((false) || false) || (false))))
    barrier();
   if((((false) && (true && (true)))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
   if((false))
    barrier();
  }
 if((! (((true && ((! ((bool(bvec3(! ((bool(bool(false || (! ((false))))))), true, false)))))))))))
  barrier();
 if((((injectionSwitch.x > ((mat2((min(1.0, 1.0))) * (min((mat2((mix(float((- 8.8)), float(1.0), bool(true)))) * (injectionSwitch)), (mat2((mix(float((- 8.8)), float(1.0), bool(true)))) * (injectionSwitch)))))).y))))
  {
   if(((true && (false))))
    barrier();
   barrier();
  }
 if(((bool(bvec3(false, true, true)))))
  barrier();
 if(((false || (false))))
  {
   if(((! (! (false)))))
    {
     if((((false) || false)))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   barrier();
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
