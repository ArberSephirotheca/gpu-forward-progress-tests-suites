#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if((false))
  barrier();
 if(((bool(bvec3(false, ((injectionSwitch.x < injectionSwitch.y)), ((injectionSwitch.x > injectionSwitch.y)))))))
  barrier();
 if((true && ((((((false || ((((bool(bool((bool(bvec2((false), true))) && true)))))))) && ((injectionSwitch.x < injectionSwitch.y)))) && true))))
  {
   if((((((injectionSwitch.x > injectionSwitch.y))) || false)))
    barrier();
   barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = ((clamp((max(~ (clamp((~ ((((1u * ((max(true ? (uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], ((gl_NumWorkGroups[2]) ^ (((~ ((0u ^ (~ (0u)))))) ^ 0u)))).x : (((0u | (((((1u * (73584u))) | ((uint(uint(((73584u) + 0u)))))))))) << 0u), true ? (uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], ((gl_NumWorkGroups[2]) ^ (((~ ((0u ^ (~ (0u)))))) ^ 0u)))).x : (((0u | (((((1u * (73584u))) | ((uint(uint(((73584u) + 0u)))))))))) << 0u))))))))), (~ (((true ? (uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], ((gl_NumWorkGroups[2]) ^ ((0u) ^ 0u)))).x : (clamp(((uint(uvec3(((0u | ((((73584u) | (((73584u) + 0u))))))), 0u, 0u))) << 0u), (uint(uvec4(((uint(uvec3(((0u | ((((73584u) | (((73584u) + 0u))))))), 0u, 0u))) << 0u), 1u, 1u, 1u))), ((uint(uvec3(((0u | ((((73584u) | (((73584u) + 0u))))))), 0u, 0u))) << 0u))))))), (~ (((true ? (uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], ((gl_NumWorkGroups[2]) ^ ((0u) ^ 0u)))).x : ((max(((0u | ((((73584u) | (((73584u) + 0u))))))), ((0u | ((((73584u) | (((73584u) + 0u))))))))) << 0u))))))), ~ (clamp((~ (((true ? (uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], ((gl_NumWorkGroups[2]) ^ ((((0u) | (0u))) ^ 0u)))).x : (((((0u) ^ 0u) | ((((uint(uvec3((((0u ^ (((1u * (73584u)))))) | 0u), 0u, 1u))) | ((uint(uint(((uint(uvec4((73584u) + 0u, 0u, 0u, 1u))))))))))))) << ((((0u) - 0u)) | (((0u) + 0u)))))))), (~ (((true ? (uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], ((gl_NumWorkGroups[2]) ^ ((0u) ^ 0u)))).x : ((uint(uvec3(((0u | ((((73584u) | (((73584u) + 0u))))))), 0u, 0u))) << 0u))))), (~ (((true ? (uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], ((gl_NumWorkGroups[2]) ^ ((0u) ^ 0u)))).x : ((max(((0u | ((((73584u) | (((73584u) + 0u))))))), ((0u | ((((73584u) | (((73584u) + 0u))))))))) << 0u))))))))), ~ (clamp((~ (((true ? (uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], ((gl_NumWorkGroups[2]) ^ ((0u) ^ 0u)))).x : (((0u | (((((1u * (73584u))) | (((clamp(uint(uint(((73584u) + 0u))), uint(uint(((73584u) + 0u))), uint(uint(((73584u) + 0u)))))))))))) << 0u))))), (~ (((true ? (uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], ((((gl_NumWorkGroups[2]) ^ 0u)) ^ ((min((((((0u)) | 0u)) + 0u), (0u ^ ((0u))))) ^ 0u)))).x : ((uint(uvec3((((((~ ((uint(uvec2(~ (0u | ((((73584u) | (((73584u) + 0u)))))), 1u)))))) | ((((0u ^ (0u | ((((73584u) | (((73584u) + 0u)))))))) | (0u | ((((73584u) | (((73584u) + 0u))))))))))), 0u, 0u))) << 0u))))), ((min(~ (((true ? (uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], ((gl_NumWorkGroups[2]) ^ ((0u) ^ 0u)))).x : ((max(((0u | ((((73584u) | (((73584u) + 0u))))))), ((0u | ((((73584u) | (((73584u) + 0u))))))))) << 0u)))), ~ (((true ? (uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], ((gl_NumWorkGroups[2]) ^ ((0u) ^ 0u)))).x : ((max(((0u | ((((73584u) | (((73584u) + 0u))))))), ((0u | ((((73584u) | (((73584u) + 0u))))))))) << 0u))))))))), ~ (clamp((~ (((true ? (max((uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], ((gl_NumWorkGroups[2]) ^ ((0u) ^ 0u)))).x, (((uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], ((gl_NumWorkGroups[2]) ^ ((0u) ^ 0u)))).x) << 0u))) : (((0u | (((((1u * (73584u))) | ((uint(uint(((73584u) + 0u)))))))))) << 0u))))), (~ (((true ? (uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], ((gl_NumWorkGroups[2]) ^ ((0u) ^ 0u)))).x : ((uint(uvec3(((0u | ((((73584u) | (((73584u) + 0u))))))), 0u, 0u))) << 0u))))), (~ ((((false ? (subgroup_size) : (true ? (uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], ((0u ^ ((((gl_NumWorkGroups[2])) ^ 0u))) ^ ((0u) ^ 0u)))).x : ((max(((0u | ((((73584u) | (((73584u) + 0u))))))), (~ (~ (((((((0u | ((((73584u) | (((73584u) + 0u)))))))) | (((0u | ((((73584u) | (((73584u) + 0u)))))))))) | 0u)))))) << 0u))))))))))));
 uint workgroup_size = ((min(((~ ((max(((min(~ (~ (~ ((((((uvec3(0u, 0u, 0u) + (gl_WorkGroupSize)).x) | (gl_WorkGroupSize.x))) << 0u)))), (uint(uvec3(~ (~ (~ ((((((uvec3(0u, 0u, 0u) + (gl_WorkGroupSize)).x) | (gl_WorkGroupSize.x))) << 0u)))), uint((injectionSwitch.y)), 0u)))))), ~ ((((((((uvec3(0u, 0u, 0u) + (gl_WorkGroupSize)).x) | (gl_WorkGroupSize.x))) << 0u)) << 0u))))))) | (((gl_WorkGroupSize.x) << 0u)), ((((((false ? (subgroup_local_id) : ((uvec3(0u, 0u, 0u) + ((clamp(uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u))) | ((max((((((gl_WorkGroupSize) << uvec3(0u, 0u, 0u)))) << uvec3(0u, 0u, 0u)), (uvec3((clamp(uvec4((gl_WorkGroupSize), 0u), uvec4((gl_WorkGroupSize), 0u), uvec4((gl_WorkGroupSize), 0u)))))))))).x))) | (gl_WorkGroupSize.x))) << 0u)) | ((min(gl_WorkGroupSize, gl_WorkGroupSize)).x))));
 uint workgroup_id = (1u * ((max((~ (~ ((clamp(((~ ((~ (gl_WorkGroupID)))) >> uvec3(0u, 0u, 0u)), ~ ((~ (gl_WorkGroupID))), ~ ((~ (gl_WorkGroupID)))))))), (uvec3((~ (~ (uvec3((max(gl_WorkGroupID, (clamp(((true ? gl_WorkGroupID : (uvec3(95576u, 35709u, 186884u)))), ((((true ? gl_WorkGroupID : (uvec3(95576u, 35709u, 186884u))))) >> uvec3(0u, 0u, 0u)), (uvec3(0u, 0u, 0u) ^ (((true ? gl_WorkGroupID : (uvec3(95576u, 35709u, 186884u)))))))))))))))))).x));
 if(((((true && (injectionSwitch.x > ((clamp(max(injectionSwitch.y, injectionSwitch.y), max(injectionSwitch.y, injectionSwitch.y), max(injectionSwitch.y, injectionSwitch.y))))))))))
  barrier();
 if((((injectionSwitch.x > (vec2(mat4x3(((true ? injectionSwitch : (injectionSwitch))), 1.0, 0.0, log(1.0), 0.0, 0.0, (injectionSwitch.x), 1.0, 1.0, 0.0, 0.0))).y))))
  barrier();
 uint workgroup_base = (min(((~ (~ ((workgroup_size * workgroup_id)))) | 0u), workgroup_size * workgroup_id));
 if((((false)) && true))
  {
   if(((((! (((! (false)) || false)))) || false)))
    barrier();
   if((false))
    barrier();
   barrier();
  }
 uint virtual_gid = (0u | (workgroup_base + subgroup_id * subgroup_size)) + ((subgroup_local_id) << 0u);
 if((((! (! ((injectionSwitch.x > ((injectionSwitch) + abs(vec2(0.0, 0.0))).y)))))))
  barrier();
 if(((bool((bvec3(bvec4(bvec3((true && ((((((! (! (((injectionSwitch.x > (clamp((min((min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)), (clamp((min((min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)), (min((min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)), (min(((mix(float((- 74.71)), float(min(injectionSwitch.y, injectionSwitch.y)), bool(true)))), ((injectionSwitch) - sin(vec2(0.0, 0.0))).y)))), ((true ? (((((injectionSwitch.x > injectionSwitch.y)) ? (min(2675.2398, fma(- 8.9, 144.526, - 5.1))) : min((min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)))) : (- 6.5)))))))))) || ((injectionSwitch.x > injectionSwitch.y)))) || ((injectionSwitch.x > injectionSwitch.y)))))), false, true), false)))))))
  barrier();
 if(((bool((bvec2(bvec2(bvec2(((((false)) && true) || false), true))))))))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   barrier();
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   barrier();
  }
 if((! (! ((false)))))
  barrier();
 if(((! ((! (! (bool(bvec4(((bool(bvec4(((true && (bool(bool(((! (true && ((false)))) || false)))))), false, true, ((true) || false))))), false, true, false)))))))))
  {
   if((false))
    barrier();
   if((((((false))) && ((injectionSwitch.x < injectionSwitch.y))) || false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
  }
 if((false))
  barrier();
 atomicStore(write_val, uint((uint(uvec2(virtual_gid, ((0u) ^ (1u ^ ((((1u << (uint(1u)))) / 1u) >> (uint(1u))))))))), (0 + ((int(ivec2(4, 0))))), 64, (((((1 * (0))) ^ 0)) + 0));
 uint read_val = atomicLoad(write_val, ((4) ^ 0), 64, 0);
 if(((((! (! (bool(bvec2((! (! ((bool(bool((((! (! ((injectionSwitch.x > injectionSwitch.y))))))))) || false))), false)))))))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(((true && ((false || (bool(bvec2((false), true))))))))
    barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((! (! ((false)))))
  {
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   barrier();
  }
 buf[virtual_gid] = uint(subgroupAllEqual(read_val));
 if(((((((clamp(injectionSwitch.x, injectionSwitch.x, (float(vec3(injectionSwitch.x, (injectionSwitch.y), 1.0))))) > injectionSwitch.y)) || false))))
  barrier();
 if((((((vec2(injectionSwitch[0], injectionSwitch[1])).x < injectionSwitch.y)) && ((bool(bool(((((false)) || (bool((bvec3(bvec4((bvec3(bvec3(bvec3((((! ((bool(bvec4(! (false), true, true, ((injectionSwitch.x > injectionSwitch.y)))))))) || false), false, false)))), false)))))) || (false || ((! (! (false)))))))))))))
  barrier();
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
