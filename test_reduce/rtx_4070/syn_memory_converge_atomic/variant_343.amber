#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 if((bool(bvec4((((true && ((false)))) && true), false, true, true))))
  {
   if((((injectionSwitch.x > (clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))))
    barrier();
   if(((bool(bvec4(((injectionSwitch.x > injectionSwitch.y)), ((injectionSwitch.x > injectionSwitch.y)), false, true)))))
    barrier();
   if((((! (! ((injectionSwitch.x > injectionSwitch.y)))))))
    {
     if((! (! ((false)))))
      barrier();
     if(((! (! (false)))))
      barrier();
     if(((((injectionSwitch.x < injectionSwitch.y)) && (false))))
      {
       if(((true && (bool(bvec3((((false || ((false))) && true)), false, true))))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           if((false))
            barrier();
           barrier();
           if((false))
            barrier();
          }
         barrier();
        }
       barrier();
      }
     if((false))
      barrier();
     barrier();
     if((false))
      barrier();
    }
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if((false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((((false)) || ((false || ((true && ((false))))) || false)))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((((! (! (((((injectionSwitch.x > injectionSwitch.y)) || ((bool(bool(((injectionSwitch.x > injectionSwitch.y))))))))))) && true)))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 if(((! (! ((true && (((injectionSwitch.x > injectionSwitch.y)))))))))
  {
   if((false))
    barrier();
   barrier();
  }
 if(((false || (((((injectionSwitch.x > injectionSwitch.y))) || false)))))
  {
   if((false))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   barrier();
   if((false))
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     barrier();
     if((false))
      barrier();
    }
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
  }
 if((true && (((((min((((((min((((injectionSwitch.x < injectionSwitch.y)) && (false)) ? ((float((((transpose(transpose(mat4x3(- 7.9, log(1.0), cos(0.0), exp(((mix(float(float(vec2(0.0, 0.0))), float((2.7)), bool(false))))), 0.0, 0.0, 0.0, determinant(mat2((mix(float((785.487)), float(((cos(0.0)) + 0.0)), bool(true))), ((0.0) * 1.0), 1.0, abs(1.0))), 1.0, (1.0 * (((0.0) - 0.0))), sqrt(0.0), 0.0))))) + mat4x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, (max((float(vec3((clamp(0.0, 0.0, 0.0)), 1.0, 0.0))), 0.0))))))) : injectionSwitch.x, (((injectionSwitch.x < injectionSwitch.y)) && (false)) ? ((float((((transpose(transpose(mat4x3(- 7.9, log(1.0), cos(0.0), exp(((mix(float(float(vec2(0.0, 0.0))), float((2.7)), bool(false))))), ((0.0) / 1.0), 0.0, 0.0, determinant(mat2((mix(float((785.487)), float(((cos(0.0)) + 0.0)), bool(true))), ((0.0) * 1.0), 1.0, abs(1.0))), 1.0, 0.0, sqrt(0.0), 0.0))))) + mat4x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, (max((float(vec3((clamp(0.0, 0.0, 0.0)), 1.0, 0.0))), 0.0))))))) : injectionSwitch.x))) * 1.0))), injectionSwitch.x)) > injectionSwitch.y))))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > (min(injectionSwitch.y, injectionSwitch.y))))))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   barrier();
  }
 if((false))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   barrier();
  }
 if(((bool(bvec4((((bool(bool(false))) || false)), true, (! ((bool(bvec4(! ((false || (true))), true, false, false))))), false)))))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  {
   if(((bool(bool(false)))))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(((bool(bvec3(((injectionSwitch.x > injectionSwitch.y)), false, true)))))
  {
   if(((bool(bvec3(((injectionSwitch.x > injectionSwitch.y)), true, false)))))
    barrier();
   if((false))
    barrier();
   if((bool(bvec4((false), true, true, true))))
    barrier();
   if((false))
    barrier();
   if(((((! (! (injectionSwitch.x > injectionSwitch.y)))))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
  }
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if(((((false || (bool(bvec3((((injectionSwitch.x > injectionSwitch.y))), false, false))))) && true)))
  barrier();
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if(((((mix(float(injectionSwitch.x), float((181.056)), bool(false))) > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((((injectionSwitch) * mat2((injectionSwitch.y))).x > (0.0 + (injectionSwitch.y))))))
        barrier();
       barrier();
      }
     barrier();
    }
   if(((bool(bvec2(false, true)))))
    barrier();
   if((false))
    barrier();
   barrier();
   if((((! (! ((injectionSwitch.x > injectionSwitch.y))))) || ((false))))
    barrier();
  }
 uint workgroup_base = (uint(uint((min((((0u ^ (workgroup_size))) << 0u), (0u + ((min(workgroup_size, ((workgroup_size) | (workgroup_size))))))))))) * workgroup_id;
 if((false))
  barrier();
 if((! (! ((((false)) && (! (! (true))))))))
  {
   if((((injectionSwitch.x > (vec2(1.0, 1.0) * (injectionSwitch)).y))))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint virtual_gid = (((((uint(uvec2(((~ (((~ ((((((true ? workgroup_base : (subgroup_id))) + subgroup_id * subgroup_size)) << 0u) ^ 0u)) / 1u)))), 1u))) | (uint(uvec2(((((true ? workgroup_base : (subgroup_id))) + (~ (~ (subgroup_id))) * subgroup_size) ^ 0u), 1u))))) + subgroup_local_id) >> 0u);
 if((false))
  barrier();
 if((false))
  barrier();
 if((((injectionSwitch.x > (clamp(injectionSwitch.y, (tan(0.0) + (injectionSwitch.y)), injectionSwitch.y))))))
  {
   if(((((mix(vec2((injectionSwitch)[0], (- 7.5)), vec2((- 7.1), (injectionSwitch)[1]), bvec2(((injectionSwitch.x > injectionSwitch.y)), true))).x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   if(((! (! (false)))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     barrier();
    }
   if((((false)) && true))
    {
     if((((((injectionSwitch.x > injectionSwitch.y))) && true)))
      barrier();
     barrier();
     if(((bool(bvec2(bool((bool(bvec3(bool((((((false)) || ((bool(bvec2((bool(bvec4(((min(injectionSwitch, (mix(vec2((injectionSwitch)[0], (6.5)), vec2((- 79.32), (clamp((injectionSwitch), (mix(vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), vec2(((15.74 / - 4.2)), (- 9.8)), bvec2(false, false))), ((vec2(0.0, 0.0) + (mat2(1.0) * ((injectionSwitch)))))))[1]), bvec2(false, true))))).x > injectionSwitch.y), false, false, true))), true)))))) && true)), true, false)))), false)))))
      barrier();
     if((false))
      barrier();
     if((((false) && true)))
      barrier();
    }
   barrier();
  }
 if(((((bool(bvec3((bool(bvec4((! (! (false))), false, false, true))), false, false))) && true))))
  barrier();
 atomicStore(write_val, uint(virtual_gid), 4, 64, 0);
 if((false))
  barrier();
 uint read_val = atomicLoad(write_val, 4, 64, 0);
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if((((injectionSwitch.x > ((false ? (round(injectionSwitch)) : injectionSwitch)).y))))
    barrier();
   if((((bool((bvec3(bvec3(bvec3((false), ((injectionSwitch.x < injectionSwitch.y)), true)))))) || false)))
    barrier();
   barrier();
  }
 if((((injectionSwitch.x > (max(injectionSwitch.y, (mix(float(injectionSwitch.y), float((- 0.4)), bool(false)))))))))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 ((1u & 1u) * ((((~ (~ ((~ (~ ((((((false ? (workgroup_base) : (buf[virtual_gid] = uint(subgroupAllEqual(read_val))) >> ((0u) >> 0u)))))) - uint((injectionSwitch.x)))))))) << 0u))));
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
