#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = (uvec3(0u, 0u, 0u) ^ ((uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], gl_NumWorkGroups[2])))).x;
 uint workgroup_size = (1u * (((((((((181112u) - 0u) & 0u) >> (uint(((2u) | (2u))))) / uint((injectionSwitch.y)))) ^ (((uint((injectionSwitch.x)) + (gl_WorkGroupSize.x)) - ((~ (~ (0u))) >> (uint(7u)))))))));
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = ((~ ((clamp((1u * ((clamp((clamp(~ (((((((uint((injectionSwitch.x)) + (((workgroup_size)))) << 0u))) - 0u)) - 0u), ~ ((workgroup_size)), ~ (((~ (~ (workgroup_size))))))), (clamp((((((uint(uvec2((clamp(~ ((workgroup_size)), ~ ((workgroup_size)), ~ ((((workgroup_size) / 1u))))), 1u))))) | (((uint(uvec2((clamp(~ ((workgroup_size)), ~ ((workgroup_size)), ~ ((((workgroup_size) / 1u))))), 1u)))))) ^ (((max(0u, 0u))) >> 0u)), (clamp(~ (((uint(uvec2(((0u ^ ((workgroup_size))) + 0u), 0u))))), ~ ((workgroup_size)), ~ ((workgroup_size)))), (clamp(~ ((workgroup_size)), (0u ^ (uint(uvec4(((((uint(uvec3(~ ((workgroup_size)), 0u, 0u)))) >> 0u)), uint((injectionSwitch.y)), (1u | 1u), 1u)))), ~ ((workgroup_size)))))), (clamp(~ ((workgroup_size)), ~ (((uint(((uvec3(workgroup_size, (~ (~ (((1u) | 0u)))), 0u)) | ((min(uvec3(workgroup_size, 1u, 0u), uvec3(workgroup_size, 1u, 0u))))))))), ~ ((workgroup_size)))))))), ~ ((workgroup_size)), ~ ((workgroup_size)))))) ^ 0u) * workgroup_id;
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 atomicStore(write_val, uint((~ (((false ? (0u + ((0u | (((false ? (workgroup_size) : (subgroup_size))))))) : ~ (virtual_gid)))))), (((((((((int(ivec2((((int(ivec2(4, 0)))) | ((((int(ivec2(((((true ? (max(4, 4)) : (56768))) << 0)), 0))))) * 1)), 1))) | 0)) / 1)) >> 0) | ((((int(ivec2(4, 0)))) | ((int(ivec2(((true ? (max(4, 4)) : (56768))), 0))))) >> 0)))), ((((((true) && true)) || false) ? ((64) ^ 0) : (((0 ^ (((((min(13707, 13707))) + 0))))) | (((((min(13707, 13707))) + 0)))))), 0);
 uint read_val = atomicLoad(write_val, (((0 ^ (4))) | ((((0 ^ (((4)) | (clamp(((4)), ((4)), ((4))))))) + 0))), 64, 0);
 (((~ ((((((~ (~ ((((((0u | (((0u | ((~ (true ? (~ (~ (buf[virtual_gid] = uint(subgroupAllEqual(read_val))))) : ((read_val --)))))) >> ((0u) ^ 0u)))))) << 0u)) - 0u)))) << 0u))) >> 0u))));
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
