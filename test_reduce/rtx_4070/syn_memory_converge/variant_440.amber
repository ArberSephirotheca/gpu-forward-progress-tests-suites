#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if(((! (! (false)))))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((! (! (((! (! (false))))))))
  return;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 if((true && ((((injectionSwitch.x > (clamp(((false ? (vec2(0.9, (float(mat3x4(- 94.92, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, (((clamp((float(float(1.0))), ((false ? (- 3.7) : 1.0)), 1.0))) + 0.0), 0.0, 0.0, 0.0))))) : (clamp((vec2(mat2(injectionSwitch, 0.0, 0.0))), (vec2(mat2(injectionSwitch, 0.0, 0.0))), (vec2(mat2((max((mix(vec2((6.8), (injectionSwitch)[1]), vec2((injectionSwitch)[(~ (~ (0)))], (clamp((- 63.01), (- 63.01), (- 63.01)))), bvec2(true, false))), injectionSwitch)), 0.0, ((true ? 0.0 : ((float(mat2((min(6699.7015, (min(6699.7015, 6699.7015)))), ((mix(float((float(mat2x4(dot(vec4(1.0, log(1.0), 0.0, log(1.0)), vec4(1.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0)))), float((- 4.9)), bool(false)))), 1.0, 0.0))))))))))))), ((vec2(mat4x3(vec2(injectionSwitch[0], injectionSwitch[1]), (injectionSwitch.y), 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0)))), injectionSwitch)).y))))))
  return;
 uint workgroup_base = ((((injectionSwitch.x < injectionSwitch.y)) ? workgroup_size : (((false ? (atomicExchange(subgroup_local_id, workgroup_id)) : workgroup_size))))) * workgroup_id;
 uint virtual_gid = ((workgroup_base + ((((subgroup_id * ((subgroup_size) | (subgroup_size))) | (clamp(((((((max(((((subgroup_id) / 1u) / 1u)), (uint(uvec4(subgroup_id, 1u, 1u, 1u)))))) - uint((injectionSwitch.x)))) + 0u) * subgroup_size), ((true ? (subgroup_id * subgroup_size) : ((uint((uvec3(0u, 0u, 0u) ^ (uvec3(((150844u)), 1u, 1u))))) | ((150844u))))), ((0u | (subgroup_id)) * subgroup_size))))) << 0u)) | 0u) + subgroup_local_id;
 atomicStore(write_val, uint(virtual_gid), 4, 64, 0);
 if((false))
  {
   if((! ((! (! ((! (! (! ((((injectionSwitch.x < injectionSwitch.y)) && ((false)))))))))))))
    return;
   return;
  }
 (((~ (~ (((((((false) && (bool(bvec2((! (! (true))), false)))) ? (subgroup_size) : ((buf[virtual_gid] = uint(subgroupAllEqual(write_val))) * 1u)))) >> 0u))))) / 1u);
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
