#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = ((false ? (uvec3((uint((clamp(uvec2(((121119u) ^ 0u), 1u), uvec2(((121119u) ^ 0u), 1u), uvec2((((clamp(((uint(((uvec3((121119u) ^ 0u, 0u, 1u)) / uvec3(1u, 1u, 1u))))) | 0u, ((((uint(((uvec3((121119u) ^ 0u, 0u, 1u)) / uvec3(1u, 1u, 1u))))) | 0u) / 1u), ((uint(((uvec3((121119u) ^ 0u, 0u, 1u)) / uvec3(1u, 1u, 1u))))) | 0u)))), 1u))))), 6948u, 187383u)) : gl_NumWorkGroups)).x;
 if((false))
  return;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = (((((((true ? uint((uvec3(1u, 1u, 1u) * (uvec3(0u, 0u, ((0u) | (0u))) ^ ((uvec3(0u, 0u, 0u) + ((((uvec3(((true ? ((uvec3(uvec4((uvec3(0u, 0u, 0u) + (min(gl_WorkGroupID, gl_WorkGroupID))), 1u)))).x : ((((min(workgroup_size, workgroup_size))) + 0u))) * 1u), (clamp((min(0u, 0u)), 0u, ((clamp(1u, 1u, 1u)) * (0u)))), 0u)) | (uvec3((clamp(((true ? ((uvec3(0u, 0u, 0u) + (min(gl_WorkGroupID, gl_WorkGroupID)))).x : ((((((min(uint(((true ? uvec3(min(workgroup_size, workgroup_size), 0u, uint((injectionSwitch.y))) : (uvec3(113532u, 106400u, 108339u))))), uint(((true ? uvec3(min(workgroup_size, workgroup_size), 0u, uint((injectionSwitch.y))) : (uvec3(113532u, 106400u, 108339u)))))))))) + 0u))) * 1u), (((0u ^ (((false ? (subgroup_size) : ((true ? ((uvec3(0u, 0u, 0u) + (min(((gl_WorkGroupID) | ((~ (~ (gl_WorkGroupID))))), gl_WorkGroupID)))).x : ((((min(workgroup_size, workgroup_size))) + 0u))) * 1u)))))) >> uint((injectionSwitch.x))), ((true ? ((uvec3(0u, 0u, 0u) + (min(gl_WorkGroupID, gl_WorkGroupID)))).x : ((((min(workgroup_size, workgroup_size))) + 0u))) * 1u))), 0u, 0u)))))))))) : ((subgroup_local_id & subgroup_local_id))) | (true ? uint((uvec3(1u, 1u, 1u) * (uvec3(0u, 0u, ((0u) | (0u))) ^ ((uvec3(0u, 0u, 0u) + ((((uvec3(((true ? ((uvec3(uvec4((uvec3(0u, 0u, 0u) + (min(gl_WorkGroupID, gl_WorkGroupID))), 1u)))).x : ((((min(workgroup_size, workgroup_size))) + 0u))) * 1u), (clamp((min(0u, 0u)), 0u, ((clamp(1u, 1u, 1u)) * (0u)))), 0u)) | (uvec3((clamp(((true ? ((uvec3(0u, 0u, 0u) + (min(gl_WorkGroupID, gl_WorkGroupID)))).x : ((((((min(uint(((true ? uvec3(min(workgroup_size, workgroup_size), 0u, uint((injectionSwitch.y))) : (uvec3(113532u, 106400u, 108339u))))), uint(((true ? uvec3(min(workgroup_size, workgroup_size), 0u, uint((injectionSwitch.y))) : (uvec3(113532u, 106400u, 108339u)))))))))) + 0u))) * 1u), (((0u ^ (((false ? (subgroup_size) : ((true ? ((uvec3(0u, 0u, 0u) + (min(((gl_WorkGroupID) | ((~ (~ (gl_WorkGroupID))))), gl_WorkGroupID)))).x : ((((min(workgroup_size, workgroup_size))) + 0u))) * 1u)))))) >> uint((injectionSwitch.x))), ((true ? ((uvec3(0u, 0u, 0u) + (min(gl_WorkGroupID, gl_WorkGroupID)))).x : ((((min(workgroup_size, workgroup_size))) + 0u))) * 1u))), 0u, 0u)))))))))) : ((subgroup_local_id & subgroup_local_id)))))))));
 uint workgroup_base = workgroup_size * ((workgroup_id) | (((workgroup_id)) - 0u));
 uint virtual_gid = (max(workgroup_base, workgroup_base)) + ((((subgroup_id * subgroup_size) - 0u)) | (((true ? subgroup_id * subgroup_size : (132075u))))) + subgroup_local_id;
 atomicStore(write_val, uint((uint(uvec4(virtual_gid, 1u, ((0u) ^ 0u), 1u)))), ((clamp((4) / 1, (4) / 1, (((((((((~ (~ ((((4) / 1)))))) | (0 ^ 0)) + 0))) + 0)) * 1) / 1))), 64, 0);
 buf[virtual_gid] = uint(subgroupAllEqual(write_val));
 if((false))
  return;
 if((((false) || (false || (false)))))
  return;
 if(((bool(bvec4(((((false) || false)) && true), true, ((injectionSwitch.x > injectionSwitch.y)), false)))))
  return;
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
