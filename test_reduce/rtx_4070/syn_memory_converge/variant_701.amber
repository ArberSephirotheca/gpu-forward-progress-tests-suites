#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 uint subgroup_size = gl_SubgroupSize;
 if((false))
  return;
 if((false))
  {
   if((false))
    return;
   if((false))
    return;
   return;
  }
 if((((((false ? (4463.1551) : injectionSwitch.x)) > injectionSwitch.y))))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((false))
  return;
 if((false))
  return;
 if((false))
  return;
 uint num_workgroup = ((uvec3(0u, 0u, 0u) & uvec3(71364u, 186214u, 173216u)) | ((max(gl_NumWorkGroups, gl_NumWorkGroups)))).x;
 if(((((bool(bool(((false) && true)))))) || false))
  {
   if(((! (! (! (! ((false))))))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      return;
     if((false))
      return;
     if((false))
      return;
     return;
    }
   return;
   if((false))
    {
     if((false))
      return;
     return;
    }
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if((false))
  {
   if((false))
    {
     if((false))
      return;
     return;
    }
   if((false))
    {
     if((false))
      return;
     return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(((((((! (! (injectionSwitch.x > (((true ? min(((true ? injectionSwitch.y : (- 2.6))), (vec2(injectionSwitch[0], injectionSwitch[1])).y) : (- 1271.7396)))))))) && true)))))
  {
   if((false))
    return;
   return;
  }
 uint workgroup_base = ((((~ (((~ ((false ? (((66341u & uint((injectionSwitch.x))) | (subgroup_size))) : workgroup_size))) >> 0u))))) ^ 0u) * ((min((0u + ((workgroup_id) | ((false ? (((workgroup_size)) | ((workgroup_size))) : ((clamp(workgroup_id, workgroup_id, workgroup_id))))))), (workgroup_id) | ((clamp(workgroup_id, workgroup_id, workgroup_id))))));
 if((! (! (((bool(bvec3(false, true, false))))))))
  {
   if((false))
    return;
   if((((bool(bvec2(bool((bvec2(bvec4((bvec2(bvec2(bvec2((false || (((((false) || false)) || false))), true)))), false, ((injectionSwitch.x < (max((min(injectionSwitch, injectionSwitch)), (clamp(injectionSwitch, injectionSwitch, (vec2((float(mat4x3(injectionSwitch[0], 1.0, exp(0.0), 1.0, abs(0.0), 0.0, 1.0, 0.0, 0.0, 0.0, (dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), length(vec4(0.0, 0.0, 0.0, 0.0))))), injectionSwitch[1])))))).y)))))), false))))))
    return;
   return;
  }
 if((! ((false || (! ((false || (((((((false ? (vec2(- 795.359, 9.6)) : max(injectionSwitch, ((false ? (mix(vec2((- 1092.4169), ((vec2(- 569.055, 1.2)))[1]), vec2(((vec2(- 569.055, 1.2)))[0], (189.487)), bvec2(((injectionSwitch.x < injectionSwitch.y)), false))) : injectionSwitch)))))).x > (vec2(mat4x2((((mix(vec2((((vec2(1.0, 1.0))[0]) - 0.0), (- 8.8)), vec2((- 328.788), (vec2(1.0, 1.0))[1]), bvec2(false, true))) * ((injectionSwitch))) * mat2(1.0)), 1.0, 0.0, log(1.0), 0.0, 0.0, (injectionSwitch.y)))).y)))))))))))
  return;
 uint virtual_gid = (uint(uvec2(((((min((clamp(uint((~ (~ (uvec3(workgroup_base + (uint(uvec4(((false ? (write_val) : subgroup_id * subgroup_size)), (0u >> (((uint(1u))) | 0u)), ((1u << ((~ (((~ (uint(2u))) >> 0u))))) >> (((uint(2u))) | (((0u << (uint(5u)))) | ((0u << (uint(5u))))))), 1u))), 1u, 1u))))), uint(uvec3(workgroup_base + (uint(uvec4(((((false ? (write_val) : ((true ? subgroup_id * subgroup_size : (write_val)))))) ^ 0u), (0u >> (uint(1u))), ((((true ? ((((1u << (uint(2u))) ^ 0u)) - (46475u & 0u)) : (uvec2(112508u, 68074u).t)))) >> (uint(2u))), 1u))), 1u, 1u)), uint(uvec3(workgroup_base + (uint(uvec4(((false ? (max(((clamp(write_val, write_val, write_val))), (clamp(((((injectionSwitch.x < injectionSwitch.y)) ? (write_val) : (subgroup_size))), (write_val), (clamp((1u * ((write_val))), (write_val), ((clamp(((write_val) / 1u), (((((true ? 0u + (write_val) : (subgroup_size)))) << 0u)), write_val))))))))) : (max(subgroup_id, subgroup_id)) * (max((clamp(subgroup_size, subgroup_size, subgroup_size)), (uint(uvec4(subgroup_size, 0u, 0u, uint((injectionSwitch.x))))))))), (0u >> (uint(1u))), ((((1u) | 0u) << (uint(2u))) >> (uint(2u))), 1u))), 1u, 1u)))), uint((clamp(uvec3(workgroup_base + subgroup_id * (clamp(subgroup_size, subgroup_size, ((subgroup_size) / 1u))), 1u, 1u), uvec3(workgroup_base + (clamp((clamp(subgroup_id * subgroup_size, ((max((1u * (1u)), 1u)) * (((true ? (((0u | (subgroup_id * subgroup_size))) / 1u) : (5862u))))), subgroup_id * subgroup_size)), (clamp(subgroup_id * subgroup_size, ((max((1u * (1u)), 1u)) * (((true ? (((0u | (subgroup_id * subgroup_size))) / 1u) : (5862u))))), subgroup_id * subgroup_size)), (0u | ((clamp(subgroup_id * subgroup_size, ((max((1u * (1u)), 1u)) * (((true ? (((0u | (subgroup_id * subgroup_size))) / 1u) : (5862u))))), subgroup_id * subgroup_size)))))), 1u, 1u), ((uvec3(workgroup_base + (uint(uvec3((clamp(((clamp((subgroup_id * subgroup_size), (subgroup_id * subgroup_size), (subgroup_id * subgroup_size))) | (subgroup_id * subgroup_size)), subgroup_id * subgroup_size, subgroup_id * subgroup_size)), 1u, 0u))), 1u, 1u)) << uvec3(0u, 0u, 0u))))))))) ^ 0u) + subgroup_local_id, 1u)));
 if((false))
  return;
 if((false || ((false))))
  {
   if((false))
    return;
   return;
  }
 if(((! (! ((((((false || (false || ((((((injectionSwitch.x < ((false ? (- 974.485) : injectionSwitch.y)))) && ((((bool(bvec2((bool(bvec2((injectionSwitch.x > (clamp(injectionSwitch, (mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2((5.8), (8.2)), bvec2(false, false))), injectionSwitch)).y), false))), false))) && (bool(bvec4((bool(bvec3(((true) || false), false, true))), false, false, false)))) || false))))))))))) || false))))))
  return;
 if((false))
  {
   if((false))
    return;
   return;
  }
 atomicStore(write_val, (uint((max(((float(((mat3x2(injectionSwitch.x, (dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0))), 0.0, 0.0, ((min(float(mat4(1.0, log(1.0), abs(0.0), 1.0, 1.0, abs(1.0), tan(0.0), 0.0, 1.0, 1.0, 1.0, 1.0, (mix(float((70.43)), float((float(((vec3(determinant(mat4(0.0, 0.0, 0.0, (mix(float(0.0), float((4.9)), bool(((injectionSwitch.x > injectionSwitch.y))))), 1.0, length(vec2(0.0, 0.0)), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0)), abs(0.0), (dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0))))) * mat3(1.0))))), bool(true))), determinant(mat3(sin(0.0), 0.0, (clamp(cos(0.0), cos(0.0), (0.0 + (cos(0.0))))), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), round(length(normalize((max(1.0, 1.0))))), 1.0)), float(mat4(1.0, log(1.0), abs(0.0), 1.0, 1.0, (min(abs(1.0), ((true ? abs(1.0) : (- 42.48))))), tan(0.0), 0.0, 1.0, 1.0, 1.0, 1.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, length((mix(vec2((vec2(0.0, 0.0))[0], (vec2(0.0, 0.0))[1]), vec2((8360.8424), (2.3)), bvec2(((injectionSwitch.x > injectionSwitch.y)), false)))), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0)), determinant(mat3(sin(0.0), 0.0, cos(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), round(length(normalize(1.0))), 1.0))))), 0.0)) * mat3(1.0))))), ((float(((mat3x2(injectionSwitch.x, (dot(vec3(0.0, 1.0, 0.0), vec3((clamp(0.0, 0.0, 0.0)), 1.0, 0.0))), 0.0, 0.0, (((max(min(float(mat4(1.0, log(1.0), abs(0.0), 1.0, 1.0, ((abs(1.0)) * 1.0), tan(0.0), 0.0, 1.0, 1.0, 1.0, 1.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, length(vec2(0.0, 0.0)), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0)), determinant(mat3((mix(float(sin(0.0)), float((vec4(7824.7326).x)), bool((! (! (false)))))), 0.0, cos(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), round(length(normalize(1.0))), 1.0)), float(mat4(1.0, log(1.0), abs(0.0), 1.0, (mix(float((1113.9768)), float((float(mat2x4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)))), bool(true))), abs(1.0), tan(0.0), 0.0, 1.0, 1.0, 1.0, 1.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, length(vec2(0.0, 0.0)), (0.0 + (0.0)), 0.0, 0.0, 1.0, (1.0 * (0.0)), 0.0, 1.0, 1.0, 1.0, 0.0)), determinant(mat3(sin(0.0), 0.0, cos(0.0), 0.0, 0.0, (clamp(0.0, (min(0.0, 0.0)), 0.0)), 0.0, 0.0, 0.0)), round(length(normalize(1.0))), 1.0))), min(float(mat4(1.0, log(1.0), abs(0.0), 1.0, 1.0, ((abs(1.0)) * 1.0), tan(0.0), 0.0, 1.0, 1.0, 1.0, 1.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, length(vec2(0.0, 0.0)), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0)), determinant(mat3((mix(float(sin(0.0)), float((vec4(7824.7326).x)), bool((! (! (false)))))), 0.0, cos(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), round(length(normalize(1.0))), 1.0)), float(mat4(1.0, log(1.0), abs(0.0), 1.0, (mix(float((1113.9768)), float((float(mat2x4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)))), bool(true))), abs(1.0), tan(0.0), 0.0, 1.0, 1.0, 1.0, 1.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, length(vec2(0.0, 0.0)), (0.0 + (0.0)), 0.0, 0.0, 1.0, (1.0 * (0.0)), 0.0, 1.0, 1.0, 1.0, 0.0)), determinant(mat3(sin(0.0), 0.0, cos(0.0), 0.0, 0.0, (clamp(0.0, (min(0.0, 0.0)), 0.0)), 0.0, 0.0, 0.0)), round(length(normalize(1.0))), 1.0))))))), 0.0)) * mat3(1.0)))))))) ^ (((uint(virtual_gid)) | (uint(virtual_gid))))), 4, 64, ((0) >> 0));
 buf[virtual_gid] = ((uint(subgroupAllEqual(((((write_val) >> 0u)) << uint((injectionSwitch.x)))))) << 0u);
 if((false))
  return;
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
