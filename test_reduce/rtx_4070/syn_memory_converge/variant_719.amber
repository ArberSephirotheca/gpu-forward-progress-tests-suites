#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if((false))
  {
   if((false))
    return;
   if((false))
    return;
   if((false))
    return;
   return;
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if((false))
  return;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((false))
  return;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 if((! (! ((false)))))
  return;
 if((((! (! (bool(bvec4((((! (! ((! (! (bool((bvec3(bvec4(bvec3(((! (! (bool(bvec4(((false || ((bool((bvec2(bvec3(bvec2(((false) && true), ((injectionSwitch.x < injectionSwitch.y))), (bool((bvec2((bvec3(bvec4(bvec3(bvec2((false || (((false)) || false)), false), true), false))))))))))))))), ((injectionSwitch.x > injectionSwitch.y)), true, false)))))), true, false), true))))))))))) && true), (((mix(float(injectionSwitch.x), float((34.99)), bool(false))) < injectionSwitch.y)), true, ((injectionSwitch.x < injectionSwitch.y))))))))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    return;
   return;
  }
 if((false))
  {
   if((false))
    return;
   return;
  }
 if((((injectionSwitch.x > (max(injectionSwitch, injectionSwitch)).y))))
  return;
 if((false))
  return;
 if((false))
  {
   if((false))
    return;
   if((false))
    return;
   if(((! (! (false)))))
    return;
   return;
  }
 uint workgroup_id = ((false ? ((++ write_val)) : (max(((((((injectionSwitch.x < injectionSwitch.y)) ? gl_WorkGroupID.x : ((workgroup_size))))) << 0u), (((uvec3(uvec4(gl_WorkGroupID, 0u))) / uvec3(1u, 1u, ((1u) | ((true ? ((clamp(1u, 1u, 1u))) : (subgroup_local_id))))))).x))));
 if(((((((! (((! (((((injectionSwitch.x > (float(mat4(injectionSwitch.y, 0.0, 0.0, 0.0, 0.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, 0.0, (injectionSwitch.x), 1.0, exp(0.0), 1.0, determinant(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, (injectionSwitch.y), 1.0)), 0.0, exp(0.0)))))) ? (- 3389.7831) : (0.0 + (injectionSwitch.x)))) > injectionSwitch.y)) || false))))) && true))))
  {
   if((false))
    return;
   return;
  }
 if((false))
  return;
 if((false))
  return;
 uint workgroup_base = workgroup_size * workgroup_id;
 if((((! (! ((! (! (((vec2(1.0, 1.0) * (injectionSwitch)).x > injectionSwitch.y))))))))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 uint virtual_gid = (max((clamp(workgroup_base, workgroup_base, ((workgroup_base) - 0u))), workgroup_base)) + subgroup_id * subgroup_size + subgroup_local_id;
 if((false))
  return;
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     if((false))
      return;
     return;
    }
   return;
   if((false))
    return;
  }
 if(((! (! (bool(bvec2((((bool(bvec2((((((((injectionSwitch.x > (min((float(float(injectionSwitch.y))), injectionSwitch.y)))) || false)))) && true), ((injectionSwitch.x < injectionSwitch.y))))) && true)), false)))))))
  {
   if((false))
    return;
   if((false))
    return;
   return;
  }
 if((((true && (bool(bvec3(false, false, ((injectionSwitch.x < (max((0.0 + (injectionSwitch.y)), (((clamp((mix(float((((((7.3) - 0.0)) + 0.0))), float(injectionSwitch.y), bool(true))), injectionSwitch.y, injectionSwitch.y))) / 1.0))))))))))))
  {
   if(((bool(bool((((! (! (false)))) || false))))))
    return;
   if((false))
    return;
   return;
   if((false))
    return;
  }
 atomicStore(write_val, uint(virtual_gid), 4, (((bool((true && ((bool(bvec4(bool(false), true, false, true))))))) ? (((0 & 37218) ^ (- 92081))) : 64)), 0);
 buf[virtual_gid] = uint(subgroupAllEqual(write_val));
 if((false))
  {
   if((false))
    return;
   if((false))
    return;
   return;
   if((false))
    return;
  }
 if((false))
  return;
 if((false))
  {
   if(((((bool(bool(false)))) && true)))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if(((false || (((injectionSwitch.x > injectionSwitch.y))))))
      return;
     if((false))
      return;
     return;
    }
   return;
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
