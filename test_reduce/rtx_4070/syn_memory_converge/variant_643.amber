#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((((false) || false)))
  {
   if(((bool(bvec2(false, true)))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if(((! ((bool(bvec4(! ((bool(bvec2(((! (! ((false || (((true && ((! (! (injectionSwitch.x > injectionSwitch.y)))))))))))), true)))), true, true, false)))))))
  {
   if((false))
    return;
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(((((true && (false))) || ((injectionSwitch.x > injectionSwitch.y)))))
  {
   if((false))
    return;
   if((false))
    return;
   if((((false || ((false)))) || false))
    return;
   return;
  }
 if((false))
  return;
 if((false))
  {
   if((((((injectionSwitch.x > ((true ? injectionSwitch.y : (- 15.77))))))) && true))
    return;
   if(((! (! ((((false || (injectionSwitch.x > injectionSwitch.y)))))))))
    return;
   if((false || (((bool(bvec3(((injectionSwitch.x > (clamp(injectionSwitch, ((true ? injectionSwitch : (vec2(129.434, - 9926.7637)))), (clamp(((mat2(0.0, 0.0, 0.0, 0.0) + (((((((((transpose(transpose(mat2(mat2x3(((true ? mat2(1.0) : (mat2(7.3, (((max((0.0 + ((((float(mat4x3(292.244, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0)))) / 1.0))), (((float(mat4x3(292.244, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0)))) / 1.0)))) - 0.0), 3.6, - 48.87)))))))))) * mat2(1.0))) - mat2(0.0, 0.0, 0.0, 0.0)))) / mat2(1.0, 1.0, 1.0, 1.0)))) * (injectionSwitch)), injectionSwitch, injectionSwitch)))).y)), true, true)))))))
    {
     if(((((vec2((injectionSwitch.y), (injectionSwitch.y)) * (injectionSwitch)).x > injectionSwitch.y))))
      return;
     return;
    }
   if(((((min(((true ? ((((((mat2(1.0) * (vec2(1.0, 1.0))) * ((max(injectionSwitch, injectionSwitch))))) + vec2(0.0, 0.0)).x) / 1.0) : (- 824.095))), (((vec2(1.0, 1.0) * (vec2(mat3x2(((max(injectionSwitch, (mix(vec2((- 9.7), (injectionSwitch)[1]), vec2((injectionSwitch)[0], (- 9.6)), bvec2(((injectionSwitch.x < injectionSwitch.y)), false)))))), 0.0, sin(0.0), 1.0, 0.0))))) + vec2(0.0, (max(0.0, 0.0)))).x)) > ((min(min((mix(float((1251.7869)), float((((vec2(injectionSwitch[0], injectionSwitch[1]))) - vec2((mix(float((min(0.0, 0.0))), float((- 57.88)), bool(false))), 0.0)).y), bool(true))), (min((mix(float((1251.7869)), float((((vec2(injectionSwitch[0], injectionSwitch[1]))) - vec2(0.0, 0.0)).y), bool(true))), (mix(float((1251.7869)), float(((mix(vec2((((vec2(injectionSwitch[0], injectionSwitch[1]))) - vec2(0.0, 0.0))[0], (- 12.72)), vec2(((- 0.0)), (((vec2(injectionSwitch[0], injectionSwitch[1]))) - vec2(0.0, 0.0))[1]), bvec2(false, true)))).y), bool(true)))))), min((mix(float((1251.7869)), float((((vec2(injectionSwitch[0], injectionSwitch[1]))) - vec2((mix(float((min(0.0, 0.0))), float((- 57.88)), bool(false))), 0.0)).y), bool(true))), (min((mix(float((1251.7869)), float((((vec2(injectionSwitch[0], injectionSwitch[1]))) - vec2(0.0, 0.0)).y), bool(true))), (mix(float((1251.7869)), float(((mix(vec2((((vec2(injectionSwitch[0], injectionSwitch[1]))) - vec2(0.0, 0.0))[0], (- 12.72)), vec2(((- 0.0)), (((vec2(injectionSwitch[0], injectionSwitch[1]))) - vec2(0.0, 0.0))[1]), bvec2(false, true)))).y), bool(true)))))))))))))
    return;
   return;
   if((false))
    return;
   if((false || ((false || (((! ((bool(bvec3(! ((! ((! (! (! (false))))))), (bool(bvec4((! (! (true))), true, true, true))), ((injectionSwitch.x > injectionSwitch.y)))))))))))))
    return;
  }
 if((false))
  {
   if((((false) || false)))
    return;
   return;
  }
 if((false))
  return;
 if(((! ((true && (! (! ((! (false))))))))))
  {
   if((false))
    return;
   return;
  }
 uint num_workgroup = (clamp(gl_NumWorkGroups, gl_NumWorkGroups, gl_NumWorkGroups)).x;
 uint workgroup_size = gl_WorkGroupSize.x;
 if((false))
  return;
 if(((false || ((! (false || ((bool(bool((((! (((! (! (((vec2(injectionSwitch[0], injectionSwitch[1])).x > (min(injectionSwitch.y, (max(injectionSwitch, injectionSwitch)).y)))))))))) && true)))))))))))
  return;
 if((false))
  {
   if((false))
    return;
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 if((false))
  return;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 atomicStore(write_val, uint(virtual_gid), 4, 64, 0);
 buf[virtual_gid] = (~ ((0u + (~ (((((true && ((injectionSwitch.x < (clamp(injectionSwitch.y, (mix(float(((true ? (2.5) : (round(- 9.2))))), float(injectionSwitch.y), bool(true))), injectionSwitch.y)))))) ? ((~ (((~ ((((((((uint(subgroupAllEqual(write_val))) / (min((min(1u, 1u)), 1u))))) << 0u)) | 0u) / (((uint(uvec3(1u, 0u, 1u)))) << 0u))) / 1u)))) : (workgroup_base))))))));
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
