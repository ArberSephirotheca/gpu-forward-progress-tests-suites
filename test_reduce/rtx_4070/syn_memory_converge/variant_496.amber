#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  {
   if(((true && (false))))
    {
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       barrier();
      }
    }
   if((false))
    barrier();
   barrier();
   if((false))
    barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((false))
  barrier();
 if((false || ((false))))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 uint num_workgroup = (((uvec3(uvec3(gl_NumWorkGroups)))) ^ uvec3((injectionSwitch.x), (injectionSwitch.x), (injectionSwitch.x))).x;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(((((injectionSwitch.x) - 0.0) > ((injectionSwitch) / vec2(1.0, 1.0)).y)))
  {
  }
 else
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
      {
       barrier();
      }
    }
   do
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(false);
   if((false))
    barrier();
  }
 uint workgroup_id = ((gl_WorkGroupID.x) | (gl_WorkGroupID.x));
 if((false))
  barrier();
 uint workgroup_base = ((((((((max((~ (~ ((workgroup_size * (((true ? uint(((uvec3(((workgroup_id) | (clamp((~ (~ (0u))), 0u, 0u))), 1u, 0u)) / uvec3(1u, 1u, 1u))) : (subgroup_local_id)))))))), ((0u ^ (((~ (~ ((workgroup_size * ((workgroup_id) | 0u))))) - 0u))))))) | ((~ (~ ((workgroup_size * ((workgroup_id) | 0u))))))) | 0u) ^ 0u))) - 0u);
 if(false)
  {
  }
 else
  {
   if(((((((clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)))) && true))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 if(((injectionSwitch.x > injectionSwitch.y)))
  {
  }
 else
  {
   if((false))
    {
     if((false))
      {
       if(false)
        {
        }
       else
        {
         for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
          {
           if((false))
            barrier();
          }
        }
       barrier();
      }
     for(int _injected_loop_counter = ((1 << (int(3))) >> ((((max(int(3), int(3))) | (max(int(3), int(3))))))); _injected_loop_counter > 0; _injected_loop_counter --)
      {
       if(((bool(bool((true && (((false) && true))))))))
        barrier();
       if(false)
        {
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if((bool(bool((false)))))
        barrier();
      }
     if(false)
      {
       if((((false)) && true))
        barrier();
       if((false))
        barrier();
      }
     else
      {
       if(true)
        {
         if((false))
          barrier();
         if(((false || ((((! (! ((true && (false))))))) || false))))
          {
           if((false))
            barrier();
           if((false))
            {
             if((false))
              barrier();
             barrier();
            }
           if((false))
            barrier();
           if((false))
            barrier();
           if(false)
            {
             if((false))
              {
               if((false))
                barrier();
               if(true)
                {
                 barrier();
                }
               else
                {
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             for(int _injected_loop_counter = 0; _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
              {
               for(int _injected_loop_counter = 1; _injected_loop_counter != (0 << (int(0))); _injected_loop_counter --)
                {
                 barrier();
                }
              }
            }
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(((bool(bvec4(false, false, false, false)))))
        {
         if(true)
          {
           barrier();
          }
         else
          {
          }
        }
      }
     if((false))
      barrier();
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((true && ((false))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((bool(bvec3(((injectionSwitch.x < injectionSwitch.y)), true, false))))
          {
           barrier();
          }
         else
          {
           if((false || ((false))))
            barrier();
           if((false))
            barrier();
          }
        }
       barrier();
      }
    }
  }
 uint virtual_gid = ((workgroup_base) >> 0u) + ((subgroup_id * subgroup_size) + 0u) + subgroup_local_id;
 if((false))
  barrier();
 for(int _injected_loop_counter = 1; _injected_loop_counter != (0 + (0)); _injected_loop_counter --)
  {
   if((false))
    barrier();
   if(((((injectionSwitch) * mat2(1.0)).x < (min((min(injectionSwitch.y, ((false ? (- 70.63) : injectionSwitch.y)))), injectionSwitch.y)))))
    {
     if((false))
      barrier();
     if(false)
      {
      }
     else
      {
       if(true)
        {
         for(int _injected_loop_counter = 0; _injected_loop_counter < (((((((1 << ((clamp(int((int((~ (((false ? (ivec4(55430, - 40401, - 86443, - 94349)) : ~ (ivec4(0, ((((1 << ((int(ivec2(((int(0)) | 0), (int((injectionSwitch.y)) ^ 1)))))) >> (int(0))) << (int((max(4, 4))))) >> (int(4))), 0, 1))))))))), int((int((~ (((false ? (ivec4(55430, - 40401, - 86443, - 94349)) : ~ (ivec4(0, ((((1 << ((int(ivec2(((int(0)) | 0), (int((injectionSwitch.y)) ^ 1)))))) >> (int(0))) << (int((max(4, 4))))) >> (int(4))), 0, 1))))))))), int((int((~ (((false ? (ivec4(55430, - 40401, - 86443, - 94349)) : ~ (ivec4(0, ((((1 << ((int(ivec2(((int(0)) | 0), (int((injectionSwitch.y)) ^ 1)))))) >> (int(0))) << (int((max(4, 4))))) >> (int(4))), 0, 1))))))))))))) * 1)) | (((((injectionSwitch.x < injectionSwitch.y)) ? (~ (~ ((clamp(1 << (int((int((~ (~ (ivec4(0, (((0 | (((((1 << (int(0))) >> (((int(0))) / 1)) << (int(4))) >> (int(4)))))) ^ 0), 0, 1)))))))), 1 << (int((int((~ (~ (ivec4(0, (((0 | (((((1 << (int(0))) >> (((int(0))) / 1)) << (int(4))) >> (int(4)))))) ^ 0), 0, 1)))))))), ((1 << (int((int((~ (~ (ivec4(0, (((0 | (((((1 << (int(0))) >> (((int(0))) / 1)) << (int(4))) >> (int(4)))))) ^ 0), 0, 1))))))))) << 0)))))) : (_injected_loop_counter)))))) >> (((int(0)) << (0 | (((((min((clamp((clamp((0), (0), (~ (((((~ ((0))) | (~ ((0))))) ^ 0))))), (0), (max((((0)) >> 0), (0))))) ^ 0, (~ (~ ((((0) ^ 0) | ((0) ^ 0)))))))))) + (0 >> (int(5)))))))) & ((1) - 0)); _injected_loop_counter ++)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(false)
            {
            }
           else
            {
             do
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if(false)
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
               for(int _injected_loop_counter = 1; _injected_loop_counter > ((min(0, 0)) << (int(6))); _injected_loop_counter --)
                {
                 if(((bool(bvec3((true && (false)), true, (false || (((((injectionSwitch.x < injectionSwitch.y) && true))))))))))
                  barrier();
                }
               if((false))
                {
                 if(((((injectionSwitch.x > injectionSwitch.y))) && true))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
               if((false))
                barrier();
              }
             while(((injectionSwitch.x > (vec2(injectionSwitch[0], injectionSwitch[1])).y)));
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(true)
            {
             do
              {
               atomicStore(write_val, (0u | ((min(uint(virtual_gid), (1u * (uint(virtual_gid))))))), 4, 64, 0);
              }
             while(((injectionSwitch.x > injectionSwitch.y)));
            }
           else
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(((! (! (false)))))
              barrier();
            }
          }
        }
       else
        {
        }
      }
     if((false))
      barrier();
     if(((! (! (false)))))
      barrier();
    }
   else
    {
     if((false))
      barrier();
    }
  }
 if((false))
  barrier();
 if((false))
  barrier();
 if(((injectionSwitch.x > injectionSwitch.y)))
  {
  }
 else
  {
   if((false))
    {
     if((true && ((false || ((! (! ((false)))))))))
      barrier();
     for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < 1; _injected_loop_counter ++)
      {
       if(false)
        {
        }
       else
        {
         for(int _injected_loop_counter = 1; _injected_loop_counter != 0; ((_injected_loop_counter --) >> 0))
          {
           if((false))
            {
             if((false))
              barrier();
             if((false))
              barrier();
             barrier();
            }
          }
        }
      }
     do
      {
       do
        {
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             do
              {
               if((bool(bvec4(true, false, true, false))))
                {
                 if((false))
                  barrier();
                 if((((((bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, true, false)))) || ((injectionSwitch.x > injectionSwitch.y))))))
                  barrier();
                 barrier();
                }
               else
                {
                }
              }
             while(((injectionSwitch.x > injectionSwitch.y)));
            }
           barrier();
          }
        }
       while(false);
      }
     while(false);
     if((false))
      barrier();
     for(int _injected_loop_counter = 1; _injected_loop_counter > (0 | (0 >> (int(5)))); _injected_loop_counter --)
      {
       do
        {
         barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(false);
      }
    }
  }
 if(((bool(bvec3((injectionSwitch.x > injectionSwitch.y), false, false)))))
  {
  }
 else
  {
   if(false)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      {
       if(true)
        {
         barrier();
        }
       else
        {
        }
      }
    }
   else
    {
     for(int _injected_loop_counter = 1; _injected_loop_counter > (70740 & (1 ^ 1)); _injected_loop_counter --)
      {
       if((false))
        barrier();
      }
     do
      {
       if((bool(bvec2((false), (false || ((bool((true && ((true && (((bool(((true && ((true))) || false))) && (! (! (((true) || false)))))))))))))))))
        barrier();
      }
     while(false);
     if((false))
      barrier();
     if(((true && ((bool(bvec3(false, true, false)))))))
      barrier();
    }
   if((false))
    {
     if((! (((! ((((injectionSwitch.x > injectionSwitch.y))))) && true))))
      {
       if((false))
        barrier();
       barrier();
      }
     for(int _injected_loop_counter = 0; _injected_loop_counter < (0 ^ (1)); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   if(true)
    {
     if((false))
      barrier();
    }
   else
    {
    }
   buf[virtual_gid] = uint(subgroupAllEqual(write_val));
   do
    {
     if((((bool(bvec4(bool(((bool(bool(bvec4((((injectionSwitch.x > injectionSwitch.y))), false, true, false)))) || false)), false, false, false))))))
      {
       for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
        {
         barrier();
        }
      }
     if(((((true ? injectionSwitch : (vec2(- 265.757, - 9.7)))).x < (min(injectionSwitch.y, ((true ? injectionSwitch.y : (6038.8460))))))))
      {
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if((! ((! (! (! (((((((injectionSwitch.x < injectionSwitch.y)) && ((! (! (false || (((((! (! ((! (! ((max(injectionSwitch.x, injectionSwitch.x)) > ((float(mat4((injectionSwitch.y), sqrt(0.0), 0.0, 0.0, 1.0, length(vec2(0.0, 0.0)), ((clamp(dot(vec3(1.0, sqrt(0.0), 0.0), vec3(0.0, 1.0, 1.0)), dot(vec3(1.0, sqrt(0.0), 0.0), vec3(0.0, 1.0, 1.0)), dot(vec3(1.0, sqrt(0.0), 0.0), vec3(0.0, 1.0, 1.0))))), 0.0, 1.0, 0.0, determinant(mat4(1.0, exp(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 1.0, 0.0, 1.0, cos(0.0), 0.0))) - ((false ? (3437.5002) : 0.0)))))))))))))))))))) && ((injectionSwitch.x < injectionSwitch.y))))))))))
          {
           do
            {
             if((false))
              barrier();
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
           if((false))
            barrier();
           barrier();
          }
        }
       else
        {
        }
      }
     else
      {
      }
    }
   while(false);
  }
 if((((false)) || false))
  {
   do
    {
     barrier();
    }
   while(false);
  }
 if((false || ((((clamp(((injectionSwitch.x) - 0.0), injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)))))
  {
   for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
    {
     if((false))
      barrier();
    }
  }
 else
  {
   if((false))
    barrier();
   if((((1.0 * (injectionSwitch.x)) < (mix(vec2((6.8), (injectionSwitch)[((1) >> 0)]), vec2((injectionSwitch)[0], (- 13.81)), bvec2(true, false))).y)))
    {
     if((false))
      barrier();
     for(int _injected_loop_counter = (0 >> (int(0))); _injected_loop_counter != 1; _injected_loop_counter ++)
      {
       if((false))
        barrier();
       if((false))
        barrier();
      }
    }
   else
    {
     if(false)
      {
      }
     else
      {
       if(((((((1.0 * (injectionSwitch.x))) - (((float(vec2(0.0, 1.0)))) + 0.0)) > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
      }
     do
      {
       for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
        {
         for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
          {
           if((false))
            barrier();
          }
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
      }
     while(false);
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       do
        {
         if((false))
          barrier();
        }
       while(((((injectionSwitch.x > injectionSwitch.y))) || false));
       if((false))
        {
         if((false))
          barrier();
         do
          {
           barrier();
          }
         while(false);
        }
      }
     if((((! (! (bool(bvec3(((((injectionSwitch.x > injectionSwitch.y))) && true), true, ((((injectionSwitch.x < injectionSwitch.y))) && true)))))))))
      barrier();
     do
      {
       if(((true && (false))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
     while(false);
     if((false))
      barrier();
     if((((! (! ((vec2(injectionSwitch[0], injectionSwitch[((1) * 1)])).x < injectionSwitch.y))))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if(true)
        {
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           if((((bool(bvec2((false), false))) && true)))
            {
             if(false)
              {
              }
             else
              {
               do
                {
                 barrier();
                }
               while((! (! (((false) || false)))));
              }
            }
          }
         else
          {
          }
        }
       else
        {
        }
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if((false))
      barrier();
     if((false))
      {
       if(false)
        {
         if((false))
          barrier();
        }
       else
        {
         barrier();
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > 0; _injected_loop_counter --)
      {
       if(((((((true && (false))) || false)) && (((float(mat4x2(injectionSwitch.x, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0))) < injectionSwitch.y)))))
        {
         if((false))
          barrier();
         if(((false || (((false) || (bool(bvec4((false || (false)), ((injectionSwitch.x < injectionSwitch.y)), ((injectionSwitch.x < injectionSwitch.y)), false))))))))
          {
           if((false))
            {
             if((false))
              barrier();
             barrier();
            }
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
             for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
              {
               if(((bool((bvec3((bvec3(bvec3(bvec3(bvec3((bool(bvec4((! (! (((injectionSwitch.x > injectionSwitch.y))))), true, false, true))), ((injectionSwitch.x < injectionSwitch.y)), false)))))))))))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
              }
            }
           else
            {
             do
              {
               barrier();
               if((false))
                barrier();
              }
             while(false);
            }
           if((false))
            barrier();
           if(false)
            {
            }
           else
            {
             if(false)
              {
               if((bool((bvec2(bvec2(bvec2((false), false)))))))
                {
                 if(((((clamp((vec2(1.0, 1.0) * (injectionSwitch)), (vec2(1.0, 1.0) * (injectionSwitch)), (vec2(1.0, 1.0) * (injectionSwitch)))).x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
              }
             else
              {
               do
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   do
                    {
                     if(true)
                      {
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                      }
                     else
                      {
                      }
                    }
                   while(false);
                   if((false))
                    {
                     if((false))
                      barrier();
                     barrier();
                    }
                   barrier();
                   do
                    {
                     if((false))
                      {
                       if(((injectionSwitch.x < injectionSwitch.y)))
                        {
                         barrier();
                        }
                       else
                        {
                        }
                      }
                    }
                   while(((injectionSwitch.x > injectionSwitch.y)));
                  }
                }
               while(false);
              }
            }
           if((false))
            barrier();
          }
         if(false)
          {
          }
         else
          {
           barrier();
          }
         if((false))
          {
           for(int _injected_loop_counter = ((1 << (int(3))) >> ((min(int(3), int(3))))); _injected_loop_counter > 0; _injected_loop_counter --)
            {
             barrier();
            }
          }
         for(int _injected_loop_counter = 1; _injected_loop_counter > (0 << (int(5))); _injected_loop_counter --)
          {
           if((false))
            barrier();
          }
        }
      }
     if((false))
      {
       for(int _injected_loop_counter = 1; (bool(bvec4((false || (_injected_loop_counter > 0)), false, false, true))); _injected_loop_counter --)
        {
         barrier();
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      {
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         barrier();
        }
      }
    }
  }
 if((((! (((! (((bool(bvec4((! (! ((! (! (false)))))), ((injectionSwitch.x < injectionSwitch.y)), ((true) && true), true)))))) || false)))) || false))
  {
   for(int _injected_loop_counter = (0 + ((~ (~ (0))))); _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
    {
     if(((true && (false))))
      {
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if((false))
          barrier();
        }
       else
        {
        }
       if((false))
        barrier();
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if((false))
      barrier();
     do
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         if((false))
          barrier();
        }
      }
     while(false);
    }
   if((false))
    barrier();
  }
 if((false))
  barrier();
 if((false))
  barrier();
 for(int _injected_loop_counter = 0; _injected_loop_counter != 1; (0 ^ (_injected_loop_counter ++)))
  {
   if((false))
    barrier();
   if(false)
    {
    }
   else
    {
     if((false))
      barrier();
     if((false))
      barrier();
    }
  }
 if((false))
  {
   if(true)
    {
     barrier();
    }
   else
    {
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if(false)
    {
    }
   else
    {
     barrier();
    }
  }
 if((false))
  {
   if(true)
    {
     if((false))
      barrier();
     if(false)
      {
      }
     else
      {
       do
        {
         if((false))
          barrier();
         if((((injectionSwitch.x < injectionSwitch.y)) && (true)))
          {
           if(false)
            {
            }
           else
            {
             if((false))
              barrier();
            }
           barrier();
           if((false))
            barrier();
          }
         else
          {
          }
        }
       while((bool(bvec4(((((((false) && true) && true)) && (true && (true)))), ((((false ? ((vec2(- 2.1, 47.52) + injectionSwitch)) : injectionSwitch)).x < injectionSwitch.y)), false, false))));
      }
     if((! (! ((false)))))
      barrier();
    }
   else
    {
    }
   if((false))
    barrier();
   if((false))
    {
     if(false)
      {
      }
     else
      {
       for(int _injected_loop_counter = 0; _injected_loop_counter < 1; ((_injected_loop_counter ++) - 0))
        {
         if((false))
          barrier();
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
         if((false))
          barrier();
         barrier();
         if((false))
          barrier();
        }
      }
     if(((bool(bvec3(false, true, false)))))
      barrier();
    }
  }
 if((false))
  barrier();
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
