#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if((false))
  barrier();
 if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
  {
   if((false))
    return;
   barrier();
   if((false))
    return;
  }
 if((false))
  return;
 if((false))
  barrier();
 if((false))
  return;
 if((false))
  return;
 if((bool(bvec3((false), false, false))))
  {
   if((false))
    {
     if((((false) && true) || ((false))))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(((false || (false))))
        barrier();
       if(((false || (((injectionSwitch.x > injectionSwitch.y))))))
        barrier();
       barrier();
       if((false))
        {
         if(((bool(bvec2(false, ((injectionSwitch.x > injectionSwitch.y)))))))
          return;
         return;
        }
       if((false))
        return;
      }
     return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      return;
    }
   if((((bool(bool((false || ((false)))))) && true)))
    return;
   if((((true && (true)) && (false))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      return;
     if((bool(bvec4((! ((true && ((true && (! ((false)))))))), false, true, (bool(bool(((true) || false))))))))
      {
       if((false))
        barrier();
       if((false))
        return;
       return;
      }
     barrier();
    }
   if((false))
    {
     if(((! (! (false)))))
      {
       if((false))
        {
         if((false))
          return;
         barrier();
        }
       barrier();
       if((false))
        return;
      }
     if((false))
      {
       if((false))
        return;
       return;
      }
     if((false))
      return;
     if((false))
      return;
     return;
    }
   barrier();
   if((! ((true && (! ((((! (! ((injectionSwitch.x > injectionSwitch.y))))))))))))
    {
     if((false))
      {
       if(((bool(bvec2(false, false)))))
        return;
       return;
      }
     barrier();
    }
   if((false))
    return;
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = ((gl_NumWorkGroups) - uvec3(0u, 0u, ((0u) + 0u))).x;
 if(((((bool(bvec4((! (! (injectionSwitch.x > injectionSwitch.y))), true, false, ((bool(bvec4((false || (bool(bvec4(false, false, true, true)))), true, true, ((injectionSwitch.x < injectionSwitch.y)))))))))))))
  return;
 uint workgroup_size = gl_WorkGroupSize.x;
 if((false))
  {
   if((((bool(bvec2((injectionSwitch.x > injectionSwitch.y), true))))))
    return;
   return;
  }
 if(((bool(bvec2((false || (((! (! (bool(bvec4((bool(bvec4(((! (false || ((! (((((mix(vec2((65.93), (86.85)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true)))) * vec2((injectionSwitch.y), (((injectionSwitch.y)) - length(vec4(0.0, 0.0, 0.0, 0.0))))).x > (mix((min(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2((injectionSwitch)[0], (injectionSwitch)[1]))), vec2((- 8.7), (- 8.8)), bvec2((! (! (false))), false))).y))))))), false, false, ((injectionSwitch.x > injectionSwitch.y))))), false, (true && (true)), false)))))))), true)))))
  barrier();
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  {
   if((false || ((((injectionSwitch.x > ((((min(((false ? ((mat2(1.0) * (((vec2(- 832.477, 22.65))))) * vec2(1.0, 1.0)) : (injectionSwitch))), (injectionSwitch)))) - vec2((min(0.0, 0.0)), 0.0)) - vec2(0.0, 0.0)).y))))))
    barrier();
   if(((((max((min(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > (min((vec2(mat2x4(injectionSwitch, 0.0, tan(0.0), (max(0.0, (clamp(0.0, ((0.0) * 1.0), 0.0)))), 1.0, 1.0, 1.0))), (min(injectionSwitch, injectionSwitch)))).y))))
    barrier();
   return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if(((bool(bvec4(((injectionSwitch.x > injectionSwitch.y)), ((injectionSwitch.x < injectionSwitch.y)), true, true)))))
  return;
 if(((((vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
  barrier();
 if((false))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if((((injectionSwitch.x > ((max((sqrt(vec2(0.0, ((0.0) + 0.0))) + ((vec2(mat2x3(max((min((((true ? vec2((((mix(float(max(injectionSwitch.y, injectionSwitch.y)), float((439.393)), bool(false))))), (((true ? injectionSwitch.y : (- 1.1))))) : (vec2(- 7187.2823, 4111.2075)))) * (min((injectionSwitch), (injectionSwitch)))), (vec2(((mix(vec2((vec3(- 8248.6213, 5.1, 276.596).g), (injectionSwitch)[1]), vec2((mix(float((2055.9749)), float((injectionSwitch)[0]), bool(true))), (6.7)), (((bvec2(bvec4(bvec2(bvec2((bvec2(bvec2(bvec2(bvec3(bvec2(true, ((injectionSwitch.x > injectionSwitch.y))), ((injectionSwitch.x < injectionSwitch.y))))))))), true, false))))))).y), (((((true ? injectionSwitch.y : (- 1.1)) + 0.0))))) * (injectionSwitch)))), (((vec2((injectionSwitch.y), (((true ? injectionSwitch.y : ((((true && (false)) ? (93.20) : - 1.1))))))) * (injectionSwitch))) - vec2((clamp((float(vec2(0.0, 0.0))), 0.0, 0.0)), 0.0))), 0.0, 0.0, 0.0, 0.0))))), (((vec2(0.0, 0.0) + (((((true ? max((min((((true ? vec2(((max(injectionSwitch.y, injectionSwitch.y))), ((((float((transpose(transpose(((mat3x4(((true ? injectionSwitch.y : (- 1.1))), 1.0, exp(0.0), 0.0, 1.0, 0.0, 0.0, log(1.0), determinant(mat2(1.0, sqrt(0.0), 0.0, 1.0)), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, 0.0)) * mat3(1.0))))))) * 1.0)))) : (vec2(- 7187.2823, 4111.2075)))) * (injectionSwitch)), (vec2(((((mix(vec2((vec3(- 8248.6213, 5.1, 276.596).g), (injectionSwitch)[1]), vec2((injectionSwitch)[0], (6.7)), bvec2(true, ((injectionSwitch.x > injectionSwitch.y))))).y) / 1.0)), (((true ? injectionSwitch.y : (- 1.1))))) * (injectionSwitch)))), (((vec2((injectionSwitch.y), (((min((true ? injectionSwitch.y : (((false ? (93.20) : - 1.1)))), (clamp((max((true ? injectionSwitch.y : (((false ? (93.20) : - 1.1)))), (true ? injectionSwitch.y : (((false ? (93.20) : - 1.1)))))), (((true ? injectionSwitch.y : (((false ? (93.20) : - 1.1))))) - 0.0), (true ? injectionSwitch.y : (((false ? (93.20) : - 1.1))))))))))) * ((vec2(injectionSwitch[0], injectionSwitch[1]))))) - vec2((clamp((float(vec2(0.0, 0.0))), 0.0, 0.0)), 0.0))) : (sinh(vec2(728.747, 6341.9504)))))) - tan(vec2(0.0, 0.0)))))) - vec2(0.0, 0.0))))).y))))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    return;
   return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint virtual_gid = (max((((clamp(workgroup_base, ((workgroup_base) | (((uint(uvec2((((min(uint(uint(workgroup_base)), uint(uint((0u | (workgroup_base))))))) | 0u), 0u)))))), ((workgroup_base) - (clamp(0u, 0u, ((0u) << 0u)))))) + subgroup_id * subgroup_size) >> (uint(((uint(0u)) / 1u)))), workgroup_base + (min(((subgroup_id * subgroup_size) / 1u), subgroup_id * subgroup_size)))) + (((1u | 0u) & 1u) * (subgroup_local_id));
 if((false))
  return;
 if((true && ((((injectionSwitch.x > injectionSwitch.y))))))
  return;
 if((false))
  return;
 if((((((injectionSwitch.x) * 1.0) > injectionSwitch.y))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  {
   if(((((vec2(vec2(injectionSwitch))).x > injectionSwitch.y))))
    return;
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   return;
  }
 atomicStore(write_val, (min(uint(virtual_gid), (max(uint(virtual_gid), uint(virtual_gid))))), ((4) ^ 0), ((64) ^ 0), 0);
 if((false))
  return;
 if((((false) && true)))
  {
   if((false))
    return;
   if((((false) || false)))
    return;
   if((false))
    barrier();
   return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    return;
   return;
  }
 if((false))
  barrier();
 ((((buf[virtual_gid] = uint(subgroupAllEqual(write_val))) | (((1u * (((((0u) ^ 0u))) >> 0u))) << 0u))) / 1u);
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((((((! (! ((! ((! ((! ((((bool(bvec2(! (! (! ((injectionSwitch.x > injectionSwitch.y)))), false)))) || ((injectionSwitch.x > injectionSwitch.y))))))))))))) && true))))
  {
   if((false))
    {
     if((! (((! ((((! (! ((injectionSwitch.x > injectionSwitch.y)))))))) || ((injectionSwitch.x > injectionSwitch.y))))))
      barrier();
     return;
    }
   if((false))
    return;
   barrier();
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
