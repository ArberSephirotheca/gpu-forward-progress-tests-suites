#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((((! (! (((((((! (! (injectionSwitch.x > injectionSwitch.y))))) && true) || ((injectionSwitch.x > injectionSwitch.y))))))))))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 if((true && (((false || (false))))))
  barrier();
 if(((false || (((false) && ((((true ? (max(injectionSwitch, ((false ? (vec2(exp2(6.2))) : injectionSwitch)))) : ((max(injectionSwitch, (min(injectionSwitch, injectionSwitch))))))).x < ((injectionSwitch) / abs(((((false ? (vec2(- 6329.5522, 552.745)) : ((((injectionSwitch.x > ((max((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0)))).y)) ? (vec2(- 36.80, - 1125.2820)) : vec2(1.0, 1.0)))))) - (max(vec2(0.0, 0.0), ((true ? vec2(0.0, 0.0) : (vec2(- 627.308, 29.36))))))))).y)))))))
  {
   if((false || ((bool(bool((bool(bvec4((false), true, true, true)))))))))
    {
     if((((true && (true && (false))))))
      {
       if((false))
        barrier();
       barrier();
      }
     barrier();
     if((false))
      barrier();
    }
   if(((((false || (((injectionSwitch.x > injectionSwitch.y)) || ((injectionSwitch.x > injectionSwitch.y))))))))
    barrier();
   barrier();
  }
 uint subgroup_size = gl_SubgroupSize;
 if((((false) && true)))
  barrier();
 if((! ((! (! (! (((bool((bool(bvec2(bool(false), (true && (false)))))))))))))))
  barrier();
 if((false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(((((! ((bool(bvec2(! (((bool(bvec2(true && ((false || (bool(bvec3((false), false, true))))), true))))), false)))))) && true)))
  {
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 uint num_workgroup = ((gl_NumWorkGroups.x) | ((0u | (((gl_NumWorkGroups) >> uvec3(0u, 0u, 0u)).x))));
 if((false))
  barrier();
 uint workgroup_size = (max(gl_WorkGroupSize, gl_WorkGroupSize)).x;
 if((! (! ((bool((bool(bvec4(bool((false)), true, ((injectionSwitch.x > injectionSwitch.y)), false)))))))))
  barrier();
 if((false))
  {
   if((((injectionSwitch.x > (vec2(injectionSwitch[0], (1.0 * (clamp((injectionSwitch[1]), (injectionSwitch[1]), (injectionSwitch[1])))))).y))))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   if((false))
    {
     if(((((vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
  }
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = ((workgroup_size * (((max(((((((~ (~ (((uint((uvec2(0u, 0u) | ((((~ (~ (uvec2(clamp(uint(uvec4(workgroup_id, 0u, 1u, 1u)), uint(uvec4(workgroup_id, 0u, 1u, 1u)), ((uint(uvec4(workgroup_id, 0u, 1u, 1u))) >> 0u)), 1u)))))) | uvec2((injectionSwitch.x), (injectionSwitch.x)))))) / 1u))))) - 0u)) | 0u)), clamp(uint(uvec4(workgroup_id, 0u, 1u, 1u)), ((uint(uvec4(workgroup_id, (~ (~ (((0u) << 0u)))), 1u, 1u))) | (0u << ((((max(false ? (subgroup_size) : uint(6u), false ? (((subgroup_size) << 0u)) : uint(6u)))))))), ((((uint(uvec4(workgroup_id, ((0u) | (0u)), (0u | (1u)), 1u))) >> (((uint(uvec3((min(((0u) * 1u), 0u)), 1u, ((0u + (uint(uvec2(((0u) | (0u)), 0u))))))))) ^ 0u))) - 0u))))))) >> 0u);
 if(((((min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y)) || ((false))))
    barrier();
   if((((bool(bvec3(bool(bvec4(((true && (false || (false)))), false, ((injectionSwitch.x > injectionSwitch.y)), (((true && (false))) || false))), false, false))))))
    {
     if((false))
      barrier();
     barrier();
    }
   barrier();
  }
 uint virtual_gid = workgroup_base + ((((0u << (uint(2u))) ^ (subgroup_id))) / (uint(((max(injectionSwitch, (min(injectionSwitch, ((false ? (injectionSwitch) : injectionSwitch)))))).x)) | (1u))) * subgroup_size + subgroup_local_id;
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   if((! (((((! ((false)))) && true) && true))))
    barrier();
   barrier();
  }
 if(((bool(bvec4(((bool(bool((((injectionSwitch.x > ((injectionSwitch) * mat2(1.0)).y))) || ((injectionSwitch.x > injectionSwitch.y)))))), false, false, true)))))
  barrier();
 atomicStore(write_val, uint(virtual_gid), 4, 64, 0);
 (0u ^ (buf[virtual_gid] = uint(subgroupAllEqual(write_val))));
 if((false))
  barrier();
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
