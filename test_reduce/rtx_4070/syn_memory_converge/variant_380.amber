#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

struct _GLF_struct_10 {
 mat4 _f0;
 mat4 _f1;
 vec2 _f2;
} ;

struct _GLF_struct_11 {
 _GLF_struct_10 _f0;
 mat2 _f1;
 mat3 _f2;
} ;

struct _GLF_struct_8 {
 vec2 _f0;
 float _f1;
 vec4 _f2;
 uvec3 _f3;
 mat4x3 _f4;
} ;

struct _GLF_struct_7 {
 uvec4 _f0;
 bool _f1;
 mat3 _f2;
 bool _f3;
 vec2 _f4;
 ivec4 _f5;
 ivec4 _f6;
} ;

struct _GLF_struct_6 {
 bvec2 _f0;
 mat3 _f1;
 vec3 _f2;
 uvec4 _f3;
 int _f4;
} ;

struct _GLF_struct_5 {
 mat2x3 _f0;
 ivec3 _f1;
} ;

struct _GLF_struct_9 {
 _GLF_struct_5 _f0;
 _GLF_struct_6 _f1;
 _GLF_struct_7 _f2;
 _GLF_struct_8 _f3;
} ;

struct _GLF_struct_3 {
 uint _f0;
 mat3 _f1;
 vec2 _f2;
} ;

struct _GLF_struct_4 {
 bool _f0;
 _GLF_struct_3 _f1;
} ;

struct _GLF_struct_12 {
 _GLF_struct_4 _f0;
 _GLF_struct_9 _f1;
 ivec3 _f2;
 ivec3 _f3;
 int _injected_loop_counter;
 _GLF_struct_11 _f4;
 vec3 _f5;
 mat3 _f6;
} ;

struct _GLF_struct_0 {
 mat4x3 _f0;
 uint _f1;
} ;

struct _GLF_struct_1 {
 vec2 _f0;
 uint workgroup_size;
 bvec2 _f1;
 _GLF_struct_0 _f2;
} ;

struct _GLF_struct_2 {
 uvec3 _f0;
 mat2 _f1;
 mat2 _f2;
 _GLF_struct_1 _f3;
} ;

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     for(int _injected_loop_counter = int((injectionSwitch.y)); ((_injected_loop_counter != (((0 >> (int(8))) << ((min(int(1), int(((1) + (0 >> (int(2))))))))) | 0)) && true); _injected_loop_counter --)
      {
       if((false))
        barrier();
       if((false))
        break;
       if((false))
        {
         if((false))
          barrier();
         if((false))
          barrier();
         break;
        }
       return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
    }
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(false)
  {
   if((false))
    barrier();
  }
 else
  {
   if((false))
    return;
  }
 if((false))
  {
   if(((false || (false))))
    return;
   if((false))
    barrier();
   do
    {
     if((false))
      barrier();
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
   if((false))
    barrier();
   barrier();
  }
 if(((bool(bvec4(false, false, true, false)))))
  {
   if((((false)) || false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 if((false))
  barrier();
 if(true)
  {
   if((false))
    return;
  }
 else
  {
  }
 if((false))
  return;
 if((((((injectionSwitch.x > injectionSwitch.y))) || false)))
  return;
 for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
  {
   if((false))
    barrier();
  }
 uint subgroup_size = gl_SubgroupSize;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 do
  {
   if((false))
    barrier();
  }
 while(false);
 if((false))
  barrier();
 if(true)
  {
   if((false))
    {
     if((false))
      barrier();
     if((false))
      barrier();
     if((false))
      return;
     return;
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 else
  {
  }
 if((false))
  {
   if((false || (false)))
    {
    }
   else
    {
     if((false))
      barrier();
    }
   if((false))
    {
     if(true)
      {
       if((false))
        barrier();
       return;
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
      }
    }
   if((false))
    {
     do
      {
       barrier();
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
     if((false))
      barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       barrier();
      }
     return;
     if((false))
      barrier();
    }
   if((false))
    {
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        return;
       barrier();
      }
     if((false))
      barrier();
     if(true)
      {
       barrier();
      }
     else
      {
      }
     if((false))
      barrier();
    }
   if((false))
    return;
   if(true)
    {
     if((false))
      return;
     if(((((clamp(injectionSwitch.x, (max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y))))
      return;
     barrier();
    }
   else
    {
    }
   if(((injectionSwitch.x > injectionSwitch.y)))
    {
    }
   else
    {
     if((false))
      barrier();
     if((false))
      return;
     if(false)
      {
      }
     else
      {
       if((false))
        return;
      }
     if((false))
      return;
     if(((! (! (false)))))
      return;
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 do
  {
   if((false))
    return;
  }
 while(false);
 uint num_workgroup = gl_NumWorkGroups.x;
 if(((! (! (false)))))
  {
   if(true)
    {
     return;
    }
   else
    {
    }
  }
 if((false))
  barrier();
 _GLF_struct_2 _GLF_struct_replacement_2 = _GLF_struct_2(uvec3(1u), mat2(1.0), mat2(1.0), _GLF_struct_1(vec2(1.0), gl_WorkGroupSize.x, bvec2(((true) && true)), _GLF_struct_0(mat4x3((1.0 * (float(mat2x4((mix(float((- 2.3)), float((1.0)), bool(true))), 0.0, 0.0, 0.0, 0.0, 0.0, (min((dot(vec4(0.0, 0.0, (injectionSwitch.y), (min(0.0, (clamp(0.0, 0.0, (mix(float(0.0), float((- 4.1)), bool(false)))))))), vec4(1.0, 1.0, 0.0, 1.0))), (max((dot(vec4(0.0, 0.0, (injectionSwitch.y), (min(0.0, (clamp(0.0, 0.0, (mix(float(0.0), float((- 4.1)), bool(false)))))))), vec4(1.0, 1.0, 0.0, 1.0))), (dot(vec4(0.0, 0.0, (injectionSwitch.y), (min(0.0, (clamp(0.0, 0.0, (mix(float(0.0), float((- 4.1)), bool(false)))))))), vec4(1.0, 1.0, 0.0, 1.0))))))), 0.0))))), 1u)));
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((bool(bool(false))))
    {
    }
   else
    {
     return;
    }
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(((injectionSwitch.x < injectionSwitch.y)))
  {
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 else
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(((injectionSwitch.x < injectionSwitch.y)))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    return;
  }
 else
  {
  }
 if((false))
  barrier();
 uint workgroup_base = (((((1u << (uint(7u))) | (1u << (uint((min(7u, 7u))))))) >> (((uint(7u)) - 0u))) * ((max(_GLF_struct_replacement_2._f3.workgroup_size, _GLF_struct_replacement_2._f3.workgroup_size)))) * ((workgroup_id) / 1u);
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 do
  {
   if(((bool(bvec4(false, false, true, false)))))
    break;
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
     return;
    }
   if((false))
    {
     do
      {
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
       if((false))
        break;
       if((false))
        barrier();
       if((false))
        continue;
       do
        {
         barrier();
        }
       while(false);
      }
     while(false);
     if((false))
      break;
    }
  }
 while(false);
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if(false)
  {
  }
 else
  {
   if((false))
    barrier();
   for(_GLF_struct_12 _GLF_struct_replacement_12 = _GLF_struct_12(_GLF_struct_4(true, _GLF_struct_3((~ (~ (1u))), mat3(1.0), vec2(1.0))), _GLF_struct_9(_GLF_struct_5(mat2x3(1.0), ivec3(1)), _GLF_struct_6(bvec2(((true) && true)), mat3(1.0), vec3(1.0), uvec4(1u), 1), _GLF_struct_7(uvec4(((1u) * (1u & 1u))), true, mat3(1.0), true, ((((vec2(1.0)) * mat2(1.0)) * mat2(1.0))), ivec4(1), ivec4(1)), _GLF_struct_8(vec2(1.0), ((true ? (max(1.0, ((1.0) / 1.0))) : (9.0))), vec4(1.0), uvec3(1u), mat4x3(1.0))), ivec3(1), ivec3(1), int(((((mix(vec2((vec4(3.9, 36.31, 12.33, 3.9).p), (- 941.679)), vec2(((true ? vec2(mat4x3(injectionSwitch, 0.0, 1.0, determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, (injectionSwitch.x))), 1.0, 0.0, 1.0, (mix(float((- 9.0)), float(0.0), bool(((injectionSwitch.x < injectionSwitch.y))))), cos(0.0), 1.0, 1.0)) : (vec2(- 0.7, 9867.2110))))[0], ((true ? vec2(mat4x3(injectionSwitch, 0.0, 1.0, determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, (injectionSwitch.x))), 1.0, 0.0, 1.0, 0.0, cos(0.0), 1.0, 1.0)) : (vec2(- 0.7, 9867.2110))))[1]), bvec2(true, true))))).x)), _GLF_struct_11(_GLF_struct_10(mat4((mix(float(1.0), float((5.5)), bool(false)))), mat4(1.0), vec2((mix(float(1.0), float((- 8398.7460)), bool(false))))), mat2(1.0), mat3((min(1.0, 1.0)))), vec3(1.0), mat3(1.0)); _GLF_struct_replacement_12._injected_loop_counter < (clamp(((1 << (max(((clamp(int((((clamp(6, 6, 6))) ^ (0 | 0))), (min((int((clamp(int(int(6)), int(((int(6)) + 0)), int(int(6)))))), (int((clamp((int(ivec4(int(int(6)), 0, ((1 << (int(6))) >> (((int(6)) | 0))), 1))), int(((int(6)) + 0)), int(int(6)))))))), (max(((1 * (int((min(int(int(6)), int(int(((((injectionSwitch.x > injectionSwitch.y)) ? (ivec4(- 39534, 12353, 52603, - 14337).g) : 6)))))))))), int(6)))))), ((clamp(int(6), (int(int(int(6)))), int(6))))))) >> (((((((int((int(int((min(6, 6))))))) + 0) ^ 0)) | ((int(6)) + 0))))), ((1 << (max(((clamp(int((((clamp(6, 6, 6))) ^ (0 | 0))), (min((int((clamp(int(int(6)), int(((int(6)) + 0)), int(int(6)))))), (int((clamp((int(ivec4(int(int(6)), 0, ((1 << (int(6))) >> (((int(6)) | 0))), 1))), int(((int(6)) + 0)), int(int(6)))))))), (max(((1 * (int((min(int(int(6)), int(int(((((injectionSwitch.x > injectionSwitch.y)) ? (ivec4(- 39534, 12353, 52603, - 14337).g) : 6)))))))))), int(6)))))), ((clamp(int(6), (int(int(int(6)))), int(6))))))) >> (((((((int((int(int((min(6, 6))))))) + 0) ^ 0)) | ((int(6)) + 0))))), ((1 << (max(((clamp(int((((clamp(6, 6, 6))) ^ (0 | 0))), (min((int((clamp(int(int(6)), int(((int(6)) + 0)), int(int(6)))))), (int((clamp((int(ivec4(int(int(6)), 0, ((1 << (int(6))) >> (((int(6)) | 0))), 1))), int(((int(6)) + 0)), int(int(6)))))))), (max(((1 * (int((min(int(int(6)), int(int(((((injectionSwitch.x > injectionSwitch.y)) ? (ivec4(- 39534, 12353, 52603, - 14337).g) : 6)))))))))), int(6)))))), ((clamp(int(6), (int(int(int(6)))), int(6))))))) >> (((((((int((int(int((min(6, 6))))))) + 0) ^ 0)) | ((int(6)) + 0))))))); _GLF_struct_replacement_12._injected_loop_counter ++)
    {
     if((bool(bvec4((((injectionSwitch.x > injectionSwitch.y))), false, true, false))))
      {
       if((false))
        {
         if((((false) || false)))
          continue;
         continue;
         if((false))
          barrier();
        }
       if(((! (! (false)))))
        continue;
       if((false))
        continue;
       if((false))
        {
         if((false))
          barrier();
         return;
        }
       if((false))
        barrier();
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         break;
        }
       do
        {
         if(false)
          {
          }
         else
          {
           if((false))
            barrier();
           barrier();
          }
         if((false))
          continue;
         if((((((((injectionSwitch.x > injectionSwitch.y))) || false)) || false)))
          {
           if((false))
            barrier();
           do
            {
             barrier();
            }
           while(false);
          }
         if((false))
          continue;
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
        }
       while(false);
      }
     if((false))
      return;
     if(true)
      {
       if((false))
        barrier();
       if((false))
        barrier();
      }
     else
      {
      }
     if((false))
      {
       if((false))
        continue;
       return;
      }
     if((false))
      {
       if(true)
        {
         if((((((injectionSwitch.x > injectionSwitch.y) && true)))))
          break;
         return;
        }
       else
        {
         if((false))
          {
           if((false))
            barrier();
           if((false))
            barrier();
           break;
           if((false))
            barrier();
          }
        }
      }
     if((((true) && true) && ((((injectionSwitch.x > injectionSwitch.y))))))
      return;
     atomicStore(write_val, uint(virtual_gid), 4, 64, 0);
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       barrier();
      }
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           barrier();
          }
         while(false);
        }
       break;
      }
     if((false))
      barrier();
     if(((((true && ((! (! (injectionSwitch.x > injectionSwitch.y)))))))))
      continue;
     if((false))
      return;
    }
  }
 if((false))
  return;
 if((false))
  barrier();
 if((false))
  barrier();
 for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
  {
   if((false))
    {
     do
      {
       if((false))
        barrier();
       if(((false || (((injectionSwitch.x > injectionSwitch.y))))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           return;
          }
         return;
        }
      }
     while((bool(bvec4(false, true, true, true))));
     return;
    }
  }
 do
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     do
      {
       if((false))
        break;
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
       if(((bool(bvec4(((injectionSwitch.x > injectionSwitch.y)), (((mix(float(injectionSwitch.x), float((200.923)), bool(false))) > injectionSwitch.y)), true, true)))))
        continue;
       if((false))
        {
         if((false))
          break;
         do
          {
           if((false))
            barrier();
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             if(((true && (false))))
              barrier();
             if((false))
              barrier();
             if((false))
              barrier();
            }
           else
            {
            }
          }
         while(false);
         return;
         if((false))
          barrier();
        }
       if((false))
        barrier();
       if((false))
        barrier();
      }
     while(((((injectionSwitch.x < injectionSwitch.y)) && (false || (false)))));
     barrier();
     if((false))
      barrier();
     if((false))
      continue;
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
    }
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    continue;
   if(((false || (! (! (((false || (((false) && true))))))))))
    continue;
   buf[virtual_gid] = uint(subgroupAllEqual(write_val));
   if((((injectionSwitch.x < (float(float(injectionSwitch.y))))) && ((((false) || (bool(bvec4(false, true, false, true))))))))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      break;
     break;
     if((false))
      barrier();
     if((false))
      continue;
     if(((false || (((injectionSwitch.x > injectionSwitch.y))))))
      barrier();
    }
   if((((false) || false)))
    break;
   if((false))
    continue;
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = (0 | (0)); _injected_loop_counter < 1; _injected_loop_counter ++)
        {
         barrier();
        }
       if((false))
        barrier();
      }
     if((false))
      {
       if((bool(bvec4((((injectionSwitch.x > injectionSwitch.y))), ((false) && true), ((injectionSwitch.x > injectionSwitch.y)), false))))
        barrier();
       continue;
       if((false))
        barrier();
       if((false))
        continue;
       if((false))
        barrier();
      }
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      {
       do
        {
         if((false))
          barrier();
         barrier();
        }
       while(((injectionSwitch.x > injectionSwitch.y)));
       if((false))
        barrier();
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     for(int _injected_loop_counter = 1; _injected_loop_counter != (0 << (((true ? ((int(6)) + 0) : (- 77464))))); _injected_loop_counter --)
      {
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         barrier();
        }
      }
    }
   if((false))
    {
     if((! (! (((injectionSwitch.x < injectionSwitch.y))))))
      {
       return;
      }
     else
      {
      }
    }
   if((false))
    {
     if(false)
      {
      }
     else
      {
       if((false))
        break;
       barrier();
      }
     if((((injectionSwitch.x > ((injectionSwitch.y) * 1.0)))))
      {
       if((false))
        barrier();
       break;
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    continue;
  }
 while(false);
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(true)
  {
   if((false))
    barrier();
   if((false))
    barrier();
   if((((injectionSwitch.x > (clamp(injectionSwitch.y, injectionSwitch.y, (min(injectionSwitch.y, injectionSwitch.y))))))))
    {
     if((false))
      barrier();
     if((false))
      barrier();
     do
      {
       do
        {
         if((((bool(bvec2(((injectionSwitch.x < (max(injectionSwitch.y, injectionSwitch.y)))), ((false) || ((injectionSwitch.x > injectionSwitch.y))))))) || false))
          {
           if((false))
            barrier();
           do
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(true)
              {
               if((false))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((false))
                  {
                   if((false))
                    return;
                   return;
                  }
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 if((false))
                  break;
                 if(((! (! (false)))))
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     if((false))
                      barrier();
                     continue;
                    }
                   barrier();
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if(((! (((! (((injectionSwitch.x > injectionSwitch.y)))) && true)))))
                    barrier();
                  }
                }
              }
             else
              {
              }
             if((((injectionSwitch.x > ((injectionSwitch.y) / 1.0)))))
              {
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 break;
                }
               do
                {
                 return;
                 if((false))
                  barrier();
                 if((false))
                  barrier();
                }
               while(false);
               if((false))
                {
                 if((false))
                  barrier();
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  return;
                 if((false))
                  break;
                 barrier();
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
              }
            }
           while(((injectionSwitch.x > ((((injectionSwitch.x < (min(injectionSwitch, injectionSwitch)).y)) ? injectionSwitch : ((false ? (floor(vec2(- 0.5, - 5001.5087))) : (((injectionSwitch)) * vec2(1.0, 1.0)))))).y)));
           if((false))
            return;
          }
         else
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            {
             if((false))
              barrier();
             barrier();
            }
           if((false))
            barrier();
          }
        }
       while(false);
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
     if((false))
      {
       if((false))
        return;
       barrier();
      }
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((false))
        barrier();
       if((bool(((bool(false)) || false))))
        {
        }
       else
        {
         do
          {
           return;
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
        }
      }
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((false))
          barrier();
         barrier();
        }
       return;
      }
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
       if((false))
        barrier();
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
     else
      {
       do
        {
         if((false))
          {
           do
            {
             if((false))
              {
               if((false))
                {
                 if(((bool(bvec2(false, true)))))
                  barrier();
                 break;
                }
               barrier();
              }
             if(((bool(bvec3(false, true, false)))))
              barrier();
            }
           while(false);
           barrier();
           if((false))
            barrier();
          }
        }
       while(false);
       if(((! ((((injectionSwitch.x > injectionSwitch.y)) || (! (false)))))))
        return;
      }
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     do
      {
       if(((injectionSwitch.x > ((injectionSwitch) / vec2(1.0, 1.0)).y)))
        {
         if((false))
          barrier();
        }
       else
        {
         if(((bool(bvec2(((injectionSwitch.x > ((true ? injectionSwitch.y : (((mix(float((546.549)), float((float(mat3x4((- 1.7), 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0)))), bool(((injectionSwitch.x < injectionSwitch.y)))))) + 0.0))))), true)))))
          barrier();
        }
       for(int _injected_loop_counter = 1; _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
        {
         if((false))
          barrier();
         if((false))
          barrier();
        }
       for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       do
        {
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          {
           if((false))
            {
             if((false))
              return;
             barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
           barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         if((false))
          barrier();
        }
       while(false);
       if((false))
        {
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          barrier();
         break;
        }
       if(((! (! (false)))))
        barrier();
       if((false))
        continue;
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           break;
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            barrier();
           if((false))
            return;
           break;
           if((false))
            {
             if((false))
              barrier();
             if((false))
              break;
             barrier();
            }
          }
         continue;
         if((false))
          barrier();
         if((false))
          barrier();
         if((false))
          continue;
         for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
          {
           if(((true && (false))))
            barrier();
           if((false))
            barrier();
          }
         if((false))
          continue;
        }
       if((((bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, true)))) || (true)))
        {
         barrier();
         if((false))
          {
           if(true)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           else
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               return;
              }
             barrier();
            }
           barrier();
          }
        }
       else
        {
         if((false))
          continue;
        }
       if((false))
        barrier();
      }
     while(((false || ((injectionSwitch.x > injectionSwitch.y)))));
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if((false))
        {
         do
          {
           barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(((! (! (false)))))
              break;
             break;
            }
          }
         while(false);
        }
       if((false))
        barrier();
      }
     else
      {
      }
    }
  }
 else
  {
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
