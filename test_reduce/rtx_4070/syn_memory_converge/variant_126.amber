#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  return;
 if(((bool(bvec2(false, true)))))
  return;
 if((((((bool(bvec3(bool(bvec4((! (! (((! (! ((((bool(bvec4(false, true, (bool(bvec3(false, true, false))), true))) || (bool(bvec3(((clamp(((injectionSwitch) - (max(log(vec2(1.0, 1.0)), log(vec2(1.0, 1.0))))), injectionSwitch, (clamp((vec2(vec4(injectionSwitch, 1.0, 1.0))), (mix(vec2((- 84.89), (injectionSwitch)[1]), vec2((injectionSwitch)[0], (- 314.335)), bvec2(true, ((injectionSwitch.x > injectionSwitch.y))))), injectionSwitch)))).x > injectionSwitch.y), (true && (false)), (! (! (! (! ((false))))))))))) && true))))))), ((injectionSwitch.x > (((mix(((false ? (acos(6.3)) : ((float(((((mix((max((float(mat3x2(float((3339.0339)), 1.0, 1.0, 0.0, 1.0, 0.0))), float((3339.0339)))), float((true ? injectionSwitch.y : (5.1))), bool(true)))) / 1.0)))) * 1.0))), float((- 5.5)), bool(false)))) / 1.0))), false, false)), false, true))))))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(((((bool((bvec2(bvec3(bvec2(bool(bvec3((injectionSwitch.x > (mat2(1.0) * (injectionSwitch)).y), true, false)), false), false)))))))))
  return;
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((! (! ((((((injectionSwitch.x > injectionSwitch.y))) && true))))))
  {
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if(((bool(bvec3(false, false, false)))))
      return;
     return;
    }
   return;
  }
 if((false))
  return;
 if((false))
  {
   if((false))
    return;
   return;
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      return;
     return;
    }
   return;
  }
 if(((((! (! (false)))) && true)))
  {
   if((false))
    return;
   return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if((false))
  return;
 if((((((injectionSwitch.x > injectionSwitch.y)))) && (bool(bvec2(true, true)))))
  {
   if((((((false))) || false) && ((injectionSwitch.x < (min(injectionSwitch, injectionSwitch)).y))))
    return;
   if((false))
    return;
   return;
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if((((((injectionSwitch.x) * 1.0) > (determinant(mat3(1.0, 1.0, 0.0, sin(0.0), 1.0, 0.0, 0.0, log(1.0), 1.0)) * (((true ? injectionSwitch.y : (- 9.2)))))))))
  {
   if((false))
    return;
   return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((((((true && ((true && (bool(bool((((((((bool(bvec4(bool(bvec4((injectionSwitch.x > (vec2(vec4(injectionSwitch, 0.0, 0.0))).y), true, (bool(bool(((injectionSwitch.x < (clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))), true)), (((injectionSwitch.x > injectionSwitch.y)) || ((true && (false)))), true, true))))))) || false) || false)))))))))) || (! (! (false)))))
  {
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((bool((bool(bvec3(bool((((injectionSwitch.x > injectionSwitch.y)))), ((injectionSwitch.x < injectionSwitch.y)), ((((true) && true)) || (true && (false)))))))))
    {
     if((false))
      return;
     return;
    }
   return;
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if((false))
  {
   if((true && ((false))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      return;
     if((true && (((((true && (injectionSwitch.x > injectionSwitch.y))))))))
      return;
     return;
    }
   if((false))
    return;
   if((false))
    return;
   if((false))
    return;
   return;
   if((false))
    return;
  }
 if((false))
  {
   if((((bool(bvec2((! (! (bool(bvec2(false, false))))), false))))))
    return;
   return;
  }
 if((false))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    return;
   if((false))
    return;
   return;
   if(((((! (! (((injectionSwitch.x > injectionSwitch.y)))))) && ((injectionSwitch.x < injectionSwitch.y)))))
    return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 uint workgroup_base = (~ (~ (~ (~ (((((0u & 95286u) ^ (uint(uint(((workgroup_size) / 1u)))))))))))) * workgroup_id;
 if((! (! ((false)))))
  return;
 if((((((bool(bvec3((! (! (! (! (((bool((! (! (bool((false) && true)))))))))))), false, true)))) && ((injectionSwitch.x < injectionSwitch.y))))))
  {
   if((false))
    {
     if((false))
      return;
     return;
    }
   if(((! (! (false)))))
    return;
   return;
  }
 if(((false || ((((! (! ((((! (! (((! (! (! (! (bool(bvec3(true && (false), false, false))))))))))))))))) || (! (! (false))))))))
  return;
 if((false))
  return;
 if((false))
  return;
 if(((((clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
  return;
 if((false))
  {
   if(((false || ((! ((true && (! ((bool(bool((((((mix(float((7.5)), float((min(injectionSwitch.x, (float(vec4(injectionSwitch.x, 1.0, 1.0, 1.0)))))), bool(true))) > (max(injectionSwitch.y, injectionSwitch.y))))) || false)))))))))))))
    {
     if((false))
      return;
     return;
    }
   if((false))
    return;
   if((false))
    return;
   return;
   if((((false || ((((injectionSwitch.x > injectionSwitch.y)))))) || false))
    return;
  }
 uint virtual_gid = (max(workgroup_base + subgroup_id * subgroup_size, ((((((injectionSwitch.x < injectionSwitch.y)) ? (((((~ (~ ((max((~ (~ (((workgroup_base + ((true ? subgroup_id : (subgroup_id))) * subgroup_size)) / 1u))), (~ (~ (workgroup_base + ((true ? subgroup_id : (subgroup_id))) * subgroup_size))))))))) | ((max((~ (~ (((workgroup_base + ((true ? subgroup_id : (subgroup_id))) * subgroup_size)) / 1u))), (~ (~ (workgroup_base + ((true ? subgroup_id : (subgroup_id))) * subgroup_size))))))) | (((~ (~ ((max((~ (~ (((workgroup_base + ((true ? subgroup_id : (subgroup_id))) * subgroup_size)) / 1u))), (~ (~ (workgroup_base + ((true ? subgroup_id : (subgroup_id))) * subgroup_size))))))))) | ((max((~ (~ (((workgroup_base + ((true ? subgroup_id : (subgroup_id))) * subgroup_size)) / 1u))), (~ (~ (workgroup_base + ((true ? subgroup_id : (subgroup_id))) * subgroup_size))))))))) : (subgroup_id)))) << (min((min(0u, 0u)), 0u))))) + subgroup_local_id;
 if((false))
  return;
 if((((false)) && true))
  return;
 if((((bool(bvec4((true && ((injectionSwitch.x > injectionSwitch.y))), true, false, false))))))
  return;
 if((false))
  {
   if((((injectionSwitch.x > ((mix(float((81.72)), float(float(mat2x3(injectionSwitch.y, round(length(normalize(exp(vec4(0.0, 0.0, 0.0, 0.0))))), 1.0, 0.0, 1.0, 0.0))), bool(true))))))))
    return;
   if((false))
    return;
   return;
  }
 atomicStore(write_val, (uint(uvec4(uint(virtual_gid), 1u, 1u, 1u))), 4, 64, 0);
 buf[virtual_gid] = uint(subgroupAllEqual(((min((min((write_val), (write_val))), ((min(((uint(uint(uint(uvec4((min(((((((false ? (subgroup_size) : ((write_val) | (write_val))))) - 0u) | ((((((false ? (subgroup_size) : write_val))) - 0u)) | (((((false ? (subgroup_size) : write_val))) - 0u))))), ((((((((injectionSwitch.x < injectionSwitch.y)) ? (((true ? (false ? (subgroup_size) : write_val) : (write_val))) ^ 0u) : (write_val)))))) - 0u))), 0u, 0u, 0u)))))), ((uint(uint(((1u ^ 1u) ^ (uint(uvec4((min(((((false ? (subgroup_size) : write_val))) - 0u), ((((((((injectionSwitch.x < ((injectionSwitch.y) + 0.0))) ? ((false ? (subgroup_size) : write_val) ^ 0u) : (write_val)))))) - 0u))), 0u, 0u, 0u))))))))))))) | (write_val))));
 if((false))
  return;
 if(((((((injectionSwitch.x < injectionSwitch.y))) && true) && (bool(bvec4((! (! ((false)))), ((false || ((injectionSwitch.x < (min(injectionSwitch.y, (mix(float((20.77)), float((max(injectionSwitch.y, injectionSwitch.y))), bool(true))))))))), false, false))))))
  {
   if((false))
    return;
   return;
  }
 if((! (! (((! (! (false))))))))
  {
   if((false))
    return;
   if((false))
    return;
   return;
   if(((((bool(bvec4(false, false, false, false)))) && true)))
    return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if(((! (! (false)))))
    {
     if((false))
      return;
     return;
    }
   return;
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
