#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((false))
  {
   if((((false) && true)))
    return;
   return;
  }
 uint subgroup_id = gl_SubgroupID;
 if((false))
  return;
 if((false))
  return;
 if((false))
  return;
 if(((! ((bool(bvec3(! ((! (! (((((injectionSwitch.x) + 0.0) > injectionSwitch.y)))))), false, true)))))))
  return;
 if(((! (! ((true && (false)))))))
  return;
 if((! (! (((((((max(injectionSwitch, ((injectionSwitch) - vec2(0.0, 0.0)))).x > injectionSwitch.y)))) || ((injectionSwitch.x > injectionSwitch.y)))))))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  return;
 if((false))
  return;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((false))
  return;
 if(((! (((! (! (bool((bvec3(bvec3(bvec3((! ((false || (((bool((bvec3(bvec3((bvec3(bvec3(bvec3(! (! ((((injectionSwitch.x > injectionSwitch.y))))), false, false)))))))))))))), ((injectionSwitch.x < injectionSwitch.y)), ((injectionSwitch.x > (max(injectionSwitch, injectionSwitch)).y)))))))))) || false)))))
  {
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     return;
    }
   if((bool((bvec3(bvec3(bvec3((! (! ((((injectionSwitch.x > (float(mat3x4(injectionSwitch.y, 0.0, log(1.0), determinant(mat3(0.0, 0.0, ((0.0) / 1.0), abs(0.0), determinant(mat2(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 0.0)), 1.0, abs(0.0), 0.0, 1.0, (dot(vec4(1.0, 1.0, length(vec2(0.0, 0.0)), 1.0), vec4(0.0, 0.0, 1.0, 0.0))), 0.0, (dot(vec2(0.0, 1.0), vec2(0.0, sqrt(1.0)))), 0.0))))))))), false, false)))))))
    {
     if((false))
      return;
     if(((((1.0 * (injectionSwitch.x)) > injectionSwitch.y))))
      {
       if((false))
        return;
       return;
      }
     return;
    }
   return;
   if((false))
    {
     if((false))
      return;
     return;
     if((false))
      return;
     if((false))
      return;
    }
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 if((false))
  return;
 if((false))
  return;
 if((false))
  return;
 uint workgroup_base = (clamp(((workgroup_size) * 1u), ((((workgroup_size) * 1u)) >> 0u), ((workgroup_size) * 1u))) * workgroup_id;
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 if((false))
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   return;
   if((false))
    return;
  }
 if((false))
  return;
 if((false))
  return;
 if((false))
  {
   if((false))
    return;
   return;
  }
 atomicStore(write_val, uint((0u ^ (virtual_gid))), ((4) | ((1 * (4)))), (clamp((int((ivec2(ivec2(ivec2((int((clamp(ivec4(64, 1, 0, 1), ivec4(64, 1, 0, 1), ivec4(64, 1, 0, 1))))), 1)))))), 64, 64)), 0);
 if((bool(bvec4((((false)) || false), ((injectionSwitch.x > injectionSwitch.y)), false, true))))
  {
   if((false))
    return;
   if((false))
    return;
   if((false))
    {
     if((false))
      return;
     if((false))
      {
       if((false))
        return;
       return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
     if(((bool(bvec2((true && (false)), false)))))
      return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    return;
   if((false))
    return;
   return;
  }
 if(((! (! (false)))))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    return;
   if((((((((injectionSwitch.x > injectionSwitch.y)) && ((injectionSwitch.x < injectionSwitch.y)))) && true))))
    {
     if((false))
      return;
     return;
    }
   if((false))
    return;
   return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 buf[virtual_gid] = uint(subgroupAllEqual(write_val));
 if((false))
  return;
 if((false))
  return;
 if((false))
  return;
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
