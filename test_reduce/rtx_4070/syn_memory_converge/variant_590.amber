#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

struct _GLF_struct_8 {
 mat2x4 _f0;
 vec2 _f1;
 mat3x4 _f2;
 bool _f3;
 mat4x2 _f4;
 bool _f5;
} ;

struct _GLF_struct_9 {
 _GLF_struct_8 _f0;
 bvec4 _f1;
 mat3 _f2;
} ;

struct _GLF_struct_6 {
 mat3 _f0;
 mat4 _f1;
 vec3 _f2;
 mat3x4 _f3;
} ;

struct _GLF_struct_5 {
 int _f0;
 bvec2 _f1;
 mat2 _f2;
 mat3 _f3;
 mat2 _f4;
} ;

struct _GLF_struct_7 {
 uint workgroup_id;
 _GLF_struct_5 _f0;
 bvec2 _f1;
 mat2x4 _f2;
 _GLF_struct_6 _f3;
} ;

struct _GLF_struct_3 {
 mat2x3 _f0;
} ;

struct _GLF_struct_2 {
 bvec4 _f0;
 vec4 _f1;
 mat3x2 _f2;
 uvec4 _f3;
 uvec2 _f4;
 mat3x2 _f5;
 ivec2 _f6;
} ;

struct _GLF_struct_4 {
 ivec3 _f0;
 _GLF_struct_2 _f1;
 mat2 _f2;
 _GLF_struct_3 _f3;
 bvec4 _f4;
 vec3 _f5;
} ;

struct _GLF_struct_0 {
 bvec2 _f0;
 int _f1;
} ;

struct _GLF_struct_1 {
 _GLF_struct_0 _f0;
} ;

struct _GLF_struct_10 {
 vec3 _f0;
 bvec3 _f1;
 _GLF_struct_1 _f2;
 _GLF_struct_4 _f3;
 _GLF_struct_7 _f4;
 _GLF_struct_9 _f5;
} ;

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if(((false || ((false || ((! (((((bool((bvec3(bvec3(bvec3((! ((bool(bool((bool(bvec4(((((false)) || false)) || ((injectionSwitch.x > injectionSwitch.y)), true, false, true)))))))), false, ((injectionSwitch.x > injectionSwitch.y)))))))) || false)) || false)))))))))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((false))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 _GLF_struct_10 _GLF_struct_replacement_10 = _GLF_struct_10(vec3(1.0), bvec3(true), _GLF_struct_1(_GLF_struct_0(bvec2(true), (0 ^ ((0 ^ (((min((1), (1))) | int((injectionSwitch.x))))))))), _GLF_struct_4(ivec3(1), _GLF_struct_2(bvec4(true), vec4(1.0), mat3x2(1.0), uvec4(1u), ((true ? (((((((! ((! (! ((bool(bool(! (true))))))))) ? ((uvec2(1u)) | uvec2((max(0u, 0u)), 0u)) : (uvec2(37625u, (max(148706u, 148706u))))))) | (((false ? (uvec2(137190u, 102356u)) : uvec2(1u))))) - uvec2(((0u) << 0u), 0u))) : (clamp((((uvec2(19457u, 120468u)) << (uvec2(0u, 0u) << (uvec2(2u))))), (uvec2(uvec3((uvec2(19457u, 120468u)), 1u))), (uvec2(19457u, 120468u)))))), mat3x2(1.0), ((false ? (ivec2(((55347) + 0), - 7053)) : ivec2(1)))), mat2(1.0), _GLF_struct_3(mat2x3(1.0)), bvec4(true), vec3(1.0)), _GLF_struct_7(gl_WorkGroupID.x, _GLF_struct_5(1, bvec2(true), mat2(((1.0) + determinant(mat3(abs(0.0), 0.0, 0.0, exp(0.0), 0.0, 0.0, 1.0, log(1.0), 0.0)))), mat3(1.0), mat2(1.0)), bvec2(true), mat2x4(1.0), _GLF_struct_6(mat3(1.0), mat4(1.0), vec3(1.0), mat3x4(1.0))), _GLF_struct_9(_GLF_struct_8(mat2x4(1.0), vec2(1.0), mat3x4(1.0), (bool(bvec4(true, true, false, false))), mat4x2(1.0), true), bvec4(true), ((mat3(1.0)) + mat3((clamp(0.0, 0.0, (clamp(0.0, 0.0, 0.0)))), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, (mix(float((- 6.6)), float(0.0), bool(true))), 0.0))));
 uint workgroup_base = workgroup_size * (uint(uvec4(_GLF_struct_replacement_10._f4.workgroup_id, 1u, 1u, ((((~ (min(((clamp(((false ? (num_workgroup) : ~ (((false ? (subgroup_id) : ((max((0u | (1u)), (0u | (1u)))))))))), ~ (((false ? (subgroup_id) : ((max((0u | (1u)), (0u | (1u)))))))), ~ (((false ? (subgroup_id) : ((max((0u | (1u)), (0u | (1u))))))))))), (~ (((false ? (((subgroup_id) - 0u)) : ((max((0u | (((1u) * 1u))), (0u | (1u)))))))))))) | (0u ^ ((min((1u), (1u))))))) / (((((((~ (~ ((false ? (subgroup_local_id) : uint(((((false ? (subgroup_id) : ((((uint(1u)) - 0u)) ^ 0u)))) / 1u)))))))) << (uint(0u))) | (1u << (uint(0u))))) >> (((((max((clamp((~ (~ ((uint(0u))))), (~ ((((0u) - 0u) | (~ ((uint(0u))))))), (~ (~ ((uint(0u))))))), (~ (~ ((uint(0u)))))))) | 0u)) | ((((max((((max((clamp((~ (~ ((uint(0u))))), (~ ((0u | (~ ((uint(0u))))))), (~ (~ ((uint(0u))))))), ((false ? (subgroup_size) : (clamp((~ (~ ((uint(0u))))), (~ ((0u | (~ ((uint(0u))))))), (~ (~ ((uint(0u)))))))))))) | ((clamp((~ (~ ((uint(0u))))), (~ ((0u | (~ ((uint(0u))))))), (~ (~ ((uint(0u))))))))), (~ (~ ((uint(0u)))))))) | 0u))))))));
 uint virtual_gid = (((((((0u << (uint(1u))) + ((max(((min((uint(uvec3(workgroup_base, ((1u) / 1u), 0u))), (((! (! (false))) ? (94801u) : ((true ? (0u + ((clamp(workgroup_base, ((((workgroup_base) ^ 0u)) + 0u), workgroup_base)))) : (subgroup_size)))))))) * (uint(uint(1u))), (((uint(uvec2((0u | (((min((uint(uvec3(workgroup_base, ((1u) / 1u), 0u))), (((! (! (false))) ? (94801u) : ((true ? (0u + ((clamp(workgroup_base, ((((workgroup_base) ^ 0u)) + 0u), workgroup_base)))) : (subgroup_size))))))) >> 0u))), 0u))))) * (uint(uint(1u)))))))) >> (clamp(0u, 0u, 0u))))) * (((0u ^ ((((true ? 1u : (workgroup_size)))) - 0u))) ^ 0u)) + subgroup_id * (uint(((uvec4((((0u + (subgroup_size))) >> 0u), 0u, 0u, 0u)) | uvec4(0u, (~ (~ (0u))), 0u, 0u)))) + ((max((max((0u ^ 1u), (0u ^ 1u))), (~ (~ ((((0u ^ ((((1u) - 0u)) - (0u | 0u)))) >> 0u)))))) * (subgroup_local_id));
 atomicStore(write_val, uint(virtual_gid), 4, 64, 0);
 if(((((vec2(mat2x4(injectionSwitch, 0.0, 0.0, 1.0, sin(0.0), 0.0, 0.0))).x > ((injectionSwitch) + vec2(0.0, 0.0)).y))))
  barrier();
 buf[virtual_gid] = ((uint(subgroupAllEqual(write_val))) << 0u);
 if((false))
  barrier();
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
