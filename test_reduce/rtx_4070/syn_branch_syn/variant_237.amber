#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

struct _GLF_struct_19 {
 uvec3 _f0;
 int _f1;
 ivec3 _f2;
} ;

struct _GLF_struct_18 {
 bvec4 _f0;
} ;

struct _GLF_struct_20 {
 _GLF_struct_18 _f0;
 vec4 _f1;
 _GLF_struct_19 _f2;
} ;

struct _GLF_struct_17 {
 vec4 _f0;
} ;

struct _GLF_struct_21 {
 uint next_virtual_gid;
 mat3x4 _f0;
 mat3x4 _f1;
 bool _f2;
 mat3x2 _f3;
 _GLF_struct_17 _f4;
 _GLF_struct_20 _f5;
} ;

struct _GLF_struct_14 {
 vec2 _f0;
} ;

struct _GLF_struct_13 {
 vec3 _f0;
 mat3x2 _f1;
} ;

struct _GLF_struct_12 {
 uvec3 _f0;
 mat2x3 _f1;
 ivec2 _f2;
 vec4 _f3;
} ;

struct _GLF_struct_11 {
 vec4 _f0;
 mat2 _f1;
 mat3 _f2;
 float _f3;
 mat4x2 _f4;
 bvec3 _f5;
} ;

struct _GLF_struct_10 {
 mat3x4 _f0;
 bvec3 _f1;
 mat2x4 _f2;
 bvec3 _f3;
 uvec4 _f4;
 float _f5;
 ivec3 _f6;
} ;

struct _GLF_struct_15 {
 float _f0;
 mat4x3 _f1;
 _GLF_struct_10 _f2;
 _GLF_struct_11 _f3;
 _GLF_struct_12 _f4;
 _GLF_struct_13 _f5;
 _GLF_struct_14 _f6;
} ;

struct _GLF_struct_8 {
 vec2 _f0;
 int _f1;
 uvec3 _f2;
} ;

struct _GLF_struct_9 {
 _GLF_struct_8 _f0;
} ;

struct _GLF_struct_6 {
 bvec3 _f0;
} ;

struct _GLF_struct_5 {
 float _f0;
 mat3 _f1;
 uvec3 _f2;
 uint _f3;
 uvec2 _f4;
 mat4 _f5;
 uvec2 _f6;
} ;

struct _GLF_struct_4 {
 bool _f0;
 bvec4 _f1;
 uvec2 _f2;
} ;

struct _GLF_struct_3 {
 bool _f0;
 mat3 _f1;
 int _f2;
 ivec3 _f3;
 float _f4;
 vec2 _f5;
} ;

struct _GLF_struct_2 {
 vec3 _f0;
 bvec3 _f1;
 ivec4 _f2;
 float _f3;
 mat3x4 _f4;
 ivec4 _f5;
} ;

struct _GLF_struct_1 {
 ivec4 _f0;
 mat2 _f1;
 vec2 _f2;
 mat2x4 _f3;
 uint _f4;
 mat3x4 _f5;
} ;

struct _GLF_struct_0 {
 mat2 _f0;
 mat2x4 _f1;
 uvec4 _f2;
 mat3x2 _f3;
 mat3x2 _f4;
 vec2 _f5;
} ;

struct _GLF_struct_7 {
 _GLF_struct_0 _f0;
 _GLF_struct_1 _f1;
 _GLF_struct_2 _f2;
 _GLF_struct_3 _f3;
 _GLF_struct_4 _f4;
 _GLF_struct_5 _f5;
 _GLF_struct_6 _f6;
} ;

struct _GLF_struct_16 {
 _GLF_struct_7 _f0;
 bvec3 _f1;
 _GLF_struct_9 _f2;
 uint subgroup_id;
 bvec4 _f3;
 mat2x4 _f4;
 float _f5;
 _GLF_struct_15 _f6;
} ;

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 _GLF_struct_16 _GLF_struct_replacement_16 = _GLF_struct_16(_GLF_struct_7(_GLF_struct_0(mat2(1.0), mat2x4(1.0), uvec4(1u), mat3x2(1.0), mat3x2(1.0), vec2(1.0)), _GLF_struct_1(ivec4(1), mat2(1.0), vec2((float(vec2(1.0, 0.0)))), mat2x4(1.0), 1u, mat3x4(1.0)), _GLF_struct_2(vec3(1.0), bvec3(true), ((ivec4(1)) | ((clamp(ivec4(1), (max(ivec4(1), ((ivec4(1)) / ivec4(1, 1, 1, 1)))), ivec4(((1) | 0)))))), 1.0, mat3x4(1.0), ivec4(1)), _GLF_struct_3(true, mat3(1.0), 1, ivec3(1), 1.0, vec2(1.0)), _GLF_struct_4(true, bvec4(true), ((uvec2(1u)) | (uvec2(0u, 0u) >> (uvec2(5u))))), _GLF_struct_5(1.0, (transpose(transpose(mat3(1.0)))), uvec3(1u), 1u, uvec2(1u), (transpose((((false ? ((((injectionSwitch.x < injectionSwitch.y)) ? (mat4(- 89.88, ((- 1.7) * determinant(mat3(1.0, 0.0, 0.0, abs(0.0), 1.0, 0.0, 0.0, 0.0, 1.0))), 44.46, - 69.86, - 39.16, - 8159.3611, - 9.0, - 6.3, 40.10, - 9957.8169, - 2095.4861, - 8.9, - 26.03, 9729.9493, 3656.6144, - 822.582)) : (mat4((max(7.7, (float(((false ? (mat4x3(5.1, - 18.49, 33.66, - 6461.0176, 7.8, 8.6, 99.03, - 481.317, - 7.2, 6054.2498, - 98.76, - 3981.3680)) : mat4x3(7.7, abs(0.0), 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, exp(0.0), 0.0, 0.0))))))), 8737.6293, - 606.646, 572.885, - 6273.5949, 9.2, 16.06, - 3132.8907, - 7.6, - 266.912, 52.86, 2.8, 2.8, - 5.4, - 6.9, - 57.93)))) : (mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + ((transpose(mat4(1.0))))) + mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, (clamp(0.0, 0.0, (mix(float(0.0), float((- 8.2)), bool(false))))), 0.0, 0.0, 0.0, 0.0, 0.0)))))), uvec2(1u)), _GLF_struct_6(bvec3(((bool((bvec2(bvec2(bvec2(((bool(bvec4(true, ((injectionSwitch.x > injectionSwitch.y)), false, false))) && true), false)))))))))), bvec3(true), _GLF_struct_9(_GLF_struct_8(vec2(1.0), (((0 ^ (1))) << 0), uvec3((~ (((((~ (1u))) / uint((injectionSwitch.y))) << 0u)))))), gl_SubgroupID, bvec4(true), mat2x4(1.0), 1.0, _GLF_struct_15(1.0, mat4x3(1.0), _GLF_struct_10(mat3x4(1.0), bvec3(true), mat2x4(1.0), bvec3(true), uvec4((0u | ((0u ^ (1u))))), 1.0, ivec3((0 ^ (1)))), _GLF_struct_11(vec4(1.0), mat2(1.0), mat3(1.0), 1.0, mat4x2(1.0), bvec3(true)), _GLF_struct_12(((uvec3(1u)) | (uvec3(1u))), mat2x3(1.0), ivec2(1), vec4(1.0)), _GLF_struct_13(vec3(1.0), mat3x2(1.0)), _GLF_struct_14((min(vec2(1.0), vec2(1.0))))));
 if((false))
  return;
 if((((false) || false)))
  return;
 if((((false) || false)))
  {
   if(false)
    {
    }
   else
    {
     if(((true) && true))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     else
      {
      }
    }
  }
 if((! (! ((true && (false))))))
  {
  }
 else
  {
   if((false))
    {
     if(true)
      {
       return;
      }
     else
      {
      }
    }
  }
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(false)
  {
  }
 else
  {
   if((false))
    return;
  }
 if(false)
  {
  }
 else
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       do
        {
         if(true)
          {
           if((false))
            break;
           if((false))
            return;
           if(true)
            {
             if((false))
              return;
            }
           else
            {
            }
          }
         else
          {
          }
        }
       while(false);
      }
     if((false))
      return;
     if(true)
      {
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         return;
        }
      }
     else
      {
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(((! (! (false)))))
    return;
  }
 do
  {
   if((false))
    {
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       return;
      }
     else
      {
      }
     if((false))
      break;
    }
  }
 while(false);
 uint num_workgroup = gl_NumWorkGroups.x;
 if(true)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     for(int _injected_loop_counter = ((((1) / 1) << (int(0))) >> (((((int(0)) | (int(0)))) + 0))); _injected_loop_counter > 0; _injected_loop_counter --)
      {
       return;
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if(((bool(bvec4(false, false, true, true)))))
    return;
   if(false)
    {
    }
   else
    {
     if((false))
      {
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         do
          {
           if((false))
            break;
           return;
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
        }
       if((false))
        return;
       if((((bool(bvec3(bool(bvec4(false, false, true, false)), ((injectionSwitch.x < injectionSwitch.y)), true))))))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
  }
 else
  {
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 do
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    continue;
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      continue;
     if((false))
      continue;
     if((false))
      continue;
     continue;
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        {
         if((false))
          break;
         continue;
        }
       if(false)
        {
        }
       else
        {
         return;
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      continue;
     if((((injectionSwitch.x > injectionSwitch.y))))
      continue;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    {
     for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != (0 << (((int(8)) << 0))); _injected_loop_counter --)
      {
       return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      continue;
     return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    continue;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     do
      {
       return;
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
    }
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      continue;
     continue;
    }
  }
 while(false);
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 do
  {
   if(false)
    {
    }
   else
    {
     if((false))
      return;
     if(true)
      {
       if(true)
        {
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           if(false)
            {
            }
           else
            {
             if(false)
              {
              }
             else
              {
               if((((injectionSwitch.x > (max(injectionSwitch.y, (min(injectionSwitch.y, (max(injectionSwitch, injectionSwitch)).y))))))))
                return;
               if(((! (! (((injectionSwitch.x > (vec2(0.0, (max((mix(float(0.0), float((64.95)), bool(false))), ((0.0) * 1.0)))) + ((max(injectionSwitch, injectionSwitch)))).y)))))))
                {
                 if(false)
                  {
                   if(true)
                    {
                     if((false))
                      return;
                     if(((((false || (injectionSwitch.x > injectionSwitch.y))))))
                      {
                       for(int _injected_loop_counter = 1; _injected_loop_counter > (int(ivec3(0, 1, 0))); _injected_loop_counter --)
                        {
                         for(int _injected_loop_counter = (0 & - 33422); _injected_loop_counter != ((1 << (int(2))) >> ((((! (! (((injectionSwitch.x < injectionSwitch.y))))) ? int(2) : (- 89253))))); _injected_loop_counter ++)
                          {
                           if(true)
                            {
                             if((false))
                              return;
                             if(false)
                              {
                              }
                             else
                              {
                               return;
                              }
                            }
                           else
                            {
                            }
                          }
                        }
                      }
                    }
                   else
                    {
                     if(false)
                      {
                       if((false))
                        break;
                      }
                     else
                      {
                       if((false))
                        return;
                      }
                    }
                  }
                 else
                  {
                   return;
                  }
                 if(((true && (! (! ((false)))))))
                  {
                   if((false))
                    {
                     if(((injectionSwitch.x > injectionSwitch.y)))
                      {
                      }
                     else
                      {
                       return;
                      }
                    }
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    break;
                   return;
                  }
                 if(((true) && true))
                  {
                   if((false))
                    return;
                   if((false))
                    break;
                   if((false))
                    return;
                   if(false)
                    {
                    }
                   else
                    {
                     if((false))
                      continue;
                     if((((injectionSwitch.x > (mix(float((0.5)), float((clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), bool(true)))))))
                      return;
                     if((false))
                      continue;
                    }
                  }
                 else
                  {
                  }
                 do
                  {
                   if((false))
                    break;
                   if((false))
                    {
                     if(false)
                      {
                      }
                     else
                      {
                       return;
                       if((((false) || ((injectionSwitch.x > injectionSwitch.y)))))
                        continue;
                      }
                     if((false))
                      continue;
                    }
                  }
                 while(false);
                }
               if((false))
                {
                 if(((true && (false))))
                  break;
                 return;
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                break;
              }
            }
          }
         else
          {
          }
        }
       else
        {
        }
      }
     else
      {
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 while(false);
 uint virtual_gid = ((workgroup_base) / (1u | 1u)) + _GLF_struct_replacement_16.subgroup_id * subgroup_size + subgroup_local_id;
 if((false))
  {
   if((false))
    return;
   return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if(true)
  {
   if((true && (true)))
    {
     for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if((false))
      return;
    }
   else
    {
    }
  }
 else
  {
  }
 _GLF_struct_21 _GLF_struct_replacement_21 = _GLF_struct_21(workgroup_base + _GLF_struct_replacement_16.subgroup_id * subgroup_size + ((((((subgroup_local_id + 1) % subgroup_size)) | (((subgroup_local_id + 1) % subgroup_size))) | (((true ? (subgroup_local_id + ((false ? (94809) : 1))) : (workgroup_size))) % subgroup_size))), mat3x4(1.0), mat3x4((min(1.0, (clamp((float(((mat2((((float(mat2x4((max(1.0, 1.0)), 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0))) + 0.0)), 1.0, 0.0, 0.0)) / mat2(1.0, 1.0, 1.0, 1.0)))), (((mix(float((- 1.4)), float((float(mat2x4((max(1.0, 1.0)), 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0)))), bool(((injectionSwitch.x < injectionSwitch.y))))) + 0.0)), (mix(float((((float(mat2x4((mix(float((- 137.020)), float((max(1.0, 1.0))), bool(true))), 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, ((1.0) - (injectionSwitch.x))))) + 0.0))), float((- 689.431)), bool(false)))))))), (((true && ((! (! ((true && (true)))))))) && true), mat3x2(1.0), _GLF_struct_17(vec4(1.0)), _GLF_struct_20(_GLF_struct_18(bvec4(true)), vec4(1.0), _GLF_struct_19(uvec3(1u), 1, ivec3(1))));
 if(true)
  {
   for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
    {
     if((false))
      break;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      continue;
    }
  }
 else
  {
  }
 if((false))
  {
   if(false)
    {
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
        {
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           if((false))
            return;
          }
         else
          {
          }
         return;
        }
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
   if((false))
    return;
   if((false))
    return;
  }
 buf[virtual_gid] = 1;
 if((false))
  return;
 if((false))
  {
   if((false))
    return;
   return;
  }
 for(int _injected_loop_counter = 1; _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
  {
   if((false))
    {
     if((false))
      {
       if((false))
        return;
       return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      continue;
     do
      {
       for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > (1 ^ 1); _injected_loop_counter --)
        {
         if((false))
          {
           for(int _injected_loop_counter = 0; _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
            {
             do
              {
               return;
               if((((injectionSwitch.x > injectionSwitch.y))))
                break;
              }
             while(((injectionSwitch.x > injectionSwitch.y)));
            }
          }
         if((false))
          continue;
         do
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
             if(false)
              {
              }
             else
              {
               return;
              }
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           if((false))
            {
             for(int _injected_loop_counter = (1 ^ 1); _injected_loop_counter != ((((1 << (int(3))) >> ((min(int(3), int(3))))) << (int(4))) >> (int(4))); _injected_loop_counter ++)
              {
               if((false))
                continue;
               return;
              }
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
         while(((false) || ((injectionSwitch.x > injectionSwitch.y))));
         return;
        }
      }
     while(false);
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    continue;
  }
 if((false))
  {
   if((false))
    return;
   if(false)
    {
    }
   else
    {
     if(true)
      {
       if((bool(bvec2(true, true))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
          {
           if((false))
            {
             if(((! (! (false)))))
              continue;
             return;
             do
              {
               if((false))
                {
                 if(false)
                  {
                  }
                 else
                  {
                   if((false))
                    break;
                   return;
                  }
                }
               if((((false) || false)))
                break;
              }
             while(false);
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
            }
          }
        }
       else
        {
        }
       return;
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
   if((false))
    return;
   do
    {
     if((false))
      {
       if((false))
        continue;
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         do
          {
           return;
           if((false))
            return;
          }
         while(false);
        }
      }
    }
   while(false);
  }
 if(false)
  {
  }
 else
  {
   do
    {
     if(((((true && (false))) && true)))
      {
       if((false))
        continue;
       for(int _injected_loop_counter = 1; _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
        {
         return;
        }
      }
     do
      {
       if((false))
        return;
      }
     while(false);
     if((false))
      return;
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
  }
 if(((injectionSwitch.x > injectionSwitch.y)))
  {
  }
 else
  {
   do
    {
     if((false))
      {
       if(false)
        {
         if((((injectionSwitch.x > (min(injectionSwitch, (mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2((0.3), (2.3)), bvec2(false, false))))).y))))
          {
           if((false))
            continue;
           continue;
           if((false))
            break;
          }
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if(((bool(bool(false)))))
          break;
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
         if((false))
          break;
         if((! (! (((((bool(bvec3(((injectionSwitch.x > injectionSwitch.y)), false, true)))) || ((injectionSwitch.x > (max(injectionSwitch.y, injectionSwitch.y))))))))))
          return;
        }
      }
    }
   while(false);
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if(((false || (false))))
    return;
   if((false))
    return;
   do
    {
     if(false)
      {
      }
     else
      {
       if((false))
        return;
       if(false)
        {
        }
       else
        {
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           return;
          }
         else
          {
          }
        }
      }
    }
   while(((bool(bvec2(bool(bool((bool(bvec4(false, false, false, (! (! (false)))))))), true)))));
   if((false))
    return;
   if(false)
    {
    }
   else
    {
     for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
      {
       if((false))
        break;
       if(((bool(bool(false)))))
        {
         if((false))
          break;
         do
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
           if((false))
            {
             if((false))
              return;
             continue;
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
           if((false))
            return;
           if((false))
            return;
           for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(true)
              {
               for(int _injected_loop_counter = (1 | 1); _injected_loop_counter != 0; _injected_loop_counter --)
                {
                 do
                  {
                   if((false))
                    return;
                  }
                 while((bool(bvec4(((injectionSwitch.x > (clamp((float(float((mix(float((9.1)), float(injectionSwitch.y), bool(true)))))), injectionSwitch.y, injectionSwitch.y)))), ((injectionSwitch.x < injectionSwitch.y)), false, ((injectionSwitch.x > injectionSwitch.y))))));
                }
              }
             else
              {
              }
             if((false))
              break;
            }
          }
         while(false);
         return;
         if((false))
          return;
        }
      }
    }
   if((false))
    {
     for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
      {
       return;
      }
    }
   if((false))
    return;
   if((false))
    {
     if(false)
      {
      }
     else
      {
       return;
      }
    }
   if((false))
    return;
   if((false))
    return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if(subgroup_local_id + 1 < subgroup_size)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if(false)
    {
    }
   else
    {
     if((false))
      {
       if(false)
        {
         if((false))
          return;
        }
       else
        {
         do
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if(((injectionSwitch.x > injectionSwitch.y)))
              {
              }
             else
              {
               if(true)
                {
                 return;
                }
               else
                {
                }
              }
            }
          }
         while(((false) || false));
         if(true)
          {
           do
            {
             if((false))
              break;
             do
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((false))
                  return;
                 if((((false) && ((injectionSwitch.x < injectionSwitch.y)))))
                  return;
                 return;
                }
               if((false))
                continue;
              }
             while(false);
            }
           while(false);
           if((false))
            return;
          }
         else
          {
          }
         if(false)
          {
          }
         else
          {
           if((false))
            return;
           do
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                {
                 if(((injectionSwitch.x > injectionSwitch.y)))
                  {
                  }
                 else
                  {
                   if(false)
                    {
                    }
                   else
                    {
                     return;
                    }
                  }
                 if((false))
                  {
                   if((false))
                    continue;
                   continue;
                  }
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                return;
               if((false))
                {
                 if(((injectionSwitch.x < injectionSwitch.y)))
                  {
                   return;
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    continue;
                  }
                 else
                  {
                  }
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                return;
              }
            }
           while(false);
           if((((injectionSwitch.x > (min(injectionSwitch.y, injectionSwitch.y))))))
            {
             if(true)
              {
               if(false)
                {
                }
               else
                {
                 if((false))
                  return;
                 if((false))
                  {
                   if((false))
                    return;
                   if(false)
                    {
                    }
                   else
                    {
                     return;
                    }
                  }
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  return;
                 return;
                 if((false))
                  return;
                }
              }
             else
              {
              }
            }
          }
         if((false))
          {
           do
            {
             if((false))
              return;
             return;
             if((false))
              return;
            }
           while(false);
          }
         if((false))
          {
           if(false)
            {
            }
           else
            {
             return;
            }
          }
         if((! (! (false))))
          {
          }
         else
          {
           return;
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = 0; (bool(bvec4(_injected_loop_counter < ((1 << (int(6))) >> (int(6))), true, true, (bool(bvec4(false, false, true, false)))))); _injected_loop_counter ++)
            {
             if((false))
              return;
             return;
            }
          }
         for(int _injected_loop_counter = (0 << (int((clamp(1, 1, 1))))); _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
          {
           if((false))
            {
             if(((injectionSwitch.x < injectionSwitch.y)))
              {
               if(((! (! (false)))))
                return;
              }
             else
              {
               if((false))
                continue;
              }
             if(true)
              {
               if((false))
                {
                 if(true)
                  {
                   return;
                  }
                 else
                  {
                  }
                }
              }
             else
              {
              }
             for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
              {
               for(int _injected_loop_counter = (1 & 1); _injected_loop_counter > (0 << ((~ (((~ (int(1))) | (~ (int(1)))))))); _injected_loop_counter --)
                {
                 return;
                }
              }
            }
          }
        }
      }
    }
   if(false)
    {
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      {
       if((false))
        {
         if(true)
          {
           return;
          }
         else
          {
          }
        }
       do
        {
         return;
        }
       while((bool(bvec2(false, ((false) || false)))));
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     if((false))
      return;
     if((false))
      return;
    }
   else
    {
     if((false))
      return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   do
    {
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if(((! (! ((false || (false)))))))
        break;
       if((false))
        continue;
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if(false)
            {
            }
           else
            {
             return;
             if((false))
              {
               do
                {
                 return;
                }
               while(false);
              }
             if((false))
              return;
             if((false))
              break;
            }
          }
         return;
        }
      }
     else
      {
      }
     if((false))
      {
       if((false))
        {
         if((false))
          {
           if((false))
            continue;
           return;
          }
         return;
        }
       continue;
      }
     if((false))
      continue;
     do
      {
       if((false))
        break;
       for(int _injected_loop_counter = (((int((injectionSwitch.x)) >> (((int(2)) >> 0)))) << 0); _injected_loop_counter != ((false ? (atomicAnd(_injected_loop_counter, 50875)) : 1)); _injected_loop_counter ++)
        {
         if((false))
          return;
         if((false))
          {
           if((false))
            return;
           break;
          }
         if((false))
          break;
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           do
            {
             if((false))
              return;
             for(int _injected_loop_counter = 1; _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
              {
               if((((((injectionSwitch.x > injectionSwitch.y)) && true))))
                return;
               if((false))
                continue;
              }
             if((false))
              return;
            }
           while(false);
          }
         else
          {
           if((false))
            {
             if((false))
              continue;
             break;
            }
          }
         if((false))
          return;
        }
       if((((false) && true)))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         return;
        }
      }
     while(false);
     if((((injectionSwitch.x > injectionSwitch.y))))
      break;
    }
   while((((bool(bvec3(false, ((injectionSwitch.x < injectionSwitch.y)), true))) || false)));
   if(false)
    {
    }
   else
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if(false)
        {
        }
       else
        {
         return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
        }
      }
     if((false))
      return;
    }
   if(((injectionSwitch.x < injectionSwitch.y)))
    {
     for(int _injected_loop_counter = (0 | 0); _injected_loop_counter < 1; _injected_loop_counter ++)
      {
       if((false))
        break;
       do
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            break;
           return;
          }
        }
       while(false);
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(false)
        {
        }
       else
        {
         do
          {
           return;
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
         if((((false) && true)))
          return;
        }
      }
    }
   else
    {
    }
   if((false))
    {
     if((false))
      return;
     return;
    }
   if(true)
    {
     if((false))
      return;
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       do
        {
         if((false))
          {
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
             if((false))
              continue;
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                return;
               continue;
              }
             if(false)
              {
              }
             else
              {
               if((false))
                break;
               return;
               if((((injectionSwitch.x > injectionSwitch.y))))
                return;
              }
            }
           if((false))
            continue;
           return;
           if((false))
            continue;
           if((false))
            continue;
          }
        }
       while(false);
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if((false))
      return;
    }
   else
    {
     if((false))
      return;
    }
   int i = 0;
   for(int _injected_loop_counter = 1; _injected_loop_counter != int((injectionSwitch.x)); _injected_loop_counter --)
    {
     if(((true && (bool(bvec2(((((injectionSwitch.x > injectionSwitch.y)) || (false))), true))))))
      return;
     if((false))
      return;
    }
   if(true)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
    }
   if((! (! ((true && ((! (! ((((false) && true)))))))))))
    return;
   for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
    {
     if((false))
      return;
    }
   if((false))
    return;
   if(true)
    {
     if(false)
      {
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
          {
           return;
          }
        }
      }
    }
   else
    {
    }
   do
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      return;
     if((false))
      break;
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
   do
    {
     if((((((((((injectionSwitch) * mat2(1.0)) - vec2(0.0, 0.0))) + vec2(0.0, (float(mat2(0.0, 1.0, 0.0, exp(0.0))))))).x > (float(mat3x4((max(injectionSwitch, (max(injectionSwitch, injectionSwitch)))).y, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), 1.0)))))))
      {
       if((false))
        break;
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
       continue;
      }
     if((false))
      {
       if((false))
        continue;
       if((false))
        break;
       if((false))
        break;
       continue;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if(true)
      {
       if((false))
        continue;
       if((((false) || false)))
        continue;
       if(false)
        {
        }
       else
        {
         do
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if(true)
              {
               do
                {
                 return;
                }
               while(((injectionSwitch.x > injectionSwitch.y)));
              }
             else
              {
              }
            }
           if((false))
            return;
          }
         while(false);
         if((false))
          break;
         buf[_GLF_struct_replacement_21.next_virtual_gid] = 2;
         if((false))
          {
           if((false))
            continue;
           if((false))
            {
             if((false))
              continue;
             continue;
             if((false))
              return;
            }
           if((false))
            break;
           if(((((! ((! (! (! (injectionSwitch.x > injectionSwitch.y))))))))))
            {
             if((false))
              continue;
             break;
            }
           if((false))
            return;
           continue;
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
         if(((injectionSwitch.x > injectionSwitch.y)))
          {
          }
         else
          {
           if(true)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               do
                {
                 return;
                }
               while(false);
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
            }
           else
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
            }
          }
         do
          {
           if((false))
            continue;
           if((false))
            return;
          }
         while(false);
        }
       if((false))
        {
         for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
          {
           for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
            {
             do
              {
               if(false)
                {
                }
               else
                {
                 return;
                }
              }
             while(false);
             if((false))
              break;
             if((false))
              break;
             if((false))
              {
               if((false))
                break;
               break;
              }
            }
          }
         if((false))
          return;
        }
       if((false))
        {
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           return;
          }
         else
          {
          }
        }
       if((false))
        break;
      }
     else
      {
      }
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
   if(false)
    {
    }
   else
    {
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        return;
       return;
      }
     do
      {
       if((false))
        continue;
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = (0 << (int(5))); _injected_loop_counter < ((1 << (int(5))) >> ((max(int(5), int(5))))); _injected_loop_counter ++)
          {
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             return;
             if(((! (! (((injectionSwitch.x > injectionSwitch.y)))))))
              continue;
            }
          }
        }
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      {
       for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
        {
         if(((true && ((bool(bool(bool(bvec4(((injectionSwitch.x > injectionSwitch.y)), ((injectionSwitch.x > injectionSwitch.y)), false, true)))))))))
          {
           if((false))
            return;
           if(((! (! (((false) && true))))))
            return;
          }
         else
          {
           do
            {
             return;
            }
           while(false);
           do
            {
             if((false))
              {
               do
                {
                 return;
                 if((false))
                  continue;
                }
               while(((injectionSwitch.x > injectionSwitch.y)));
              }
             if((false))
              break;
            }
           while(false);
           if(true)
            {
             do
              {
               if((false))
                return;
              }
             while(false);
            }
           else
            {
            }
          }
        }
      }
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(true)
          {
           for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
            {
             return;
            }
          }
         else
          {
          }
        }
       if((false))
        return;
       for(int _injected_loop_counter = 1; _injected_loop_counter != (0 >> (int(8))); _injected_loop_counter --)
        {
         if((false))
          {
           if(((! (! (false)))))
            return;
           return;
          }
        }
       return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(false)
        {
        }
       else
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
       if(((! (! (false)))))
        return;
      }
     for(int _injected_loop_counter = (0 >> (((int(0)) | (int(0))))); _injected_loop_counter != 1; _injected_loop_counter ++)
      {
       return;
      }
     if((false))
      return;
     do
      {
       if((false))
        continue;
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     while(false);
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if(false)
    {
    }
   else
    {
     if(true)
      {
       if((false))
        return;
       if(((injectionSwitch.x < (max(injectionSwitch, injectionSwitch)).y)))
        {
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           return;
          }
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           if(true)
            {
             for(int _injected_loop_counter = ((((1 << (int(4))) >> (int(4))) << (int(4))) >> (int(4))); _injected_loop_counter > (0 << ((int(int(int(8)))))); _injected_loop_counter --)
              {
               if((((injectionSwitch.x > (mat2(1.0) * (injectionSwitch)).y))))
                {
                 do
                  {
                   return;
                  }
                 while(((injectionSwitch.x > injectionSwitch.y)));
                }
              }
             if((false))
              return;
             do
              {
               if((false))
                return;
              }
             while(((injectionSwitch.x > injectionSwitch.y)));
             do
              {
               if(((((! (! (injectionSwitch.x > injectionSwitch.y)))))))
                {
                 if((false))
                  {
                   do
                    {
                     return;
                    }
                   while(false);
                  }
                 if(false)
                  {
                  }
                 else
                  {
                   if((false))
                    return;
                  }
                 if(false)
                  {
                   if((false))
                    continue;
                   if((! (! ((((injectionSwitch.x > injectionSwitch.y)))))))
                    {
                     if((false))
                      continue;
                     break;
                    }
                   if((((bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, true))))))
                    break;
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    return;
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    break;
                  }
                 else
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    break;
                   if((false))
                    {
                     if(((((injectionSwitch.x < injectionSwitch.y)) && (((false) && true)))))
                      break;
                     for(int _injected_loop_counter = 1; _injected_loop_counter > int((injectionSwitch.x)); _injected_loop_counter --)
                      {
                       if((false))
                        continue;
                       return;
                      }
                     if((false))
                      continue;
                    }
                   if(false)
                    {
                    }
                   else
                    {
                     if(false)
                      {
                      }
                     else
                      {
                       for(int _injected_loop_counter = int((injectionSwitch.x)); (~ (~ (_injected_loop_counter))) < ((((1 << ((((((0 | ((min(int(2), ((true ? int(2) : (20511)))))))) | (int(2))))) | (((((0 | ((min(int(2), ((true ? int(2) : (20511)))))))) | (int(2))))))) >> (int(2)))) - 0); _injected_loop_counter ++)
                        {
                         if((false))
                          {
                           if(true)
                            {
                             if((false))
                              return;
                             for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                              {
                               return;
                               if((((injectionSwitch.x > injectionSwitch.y))))
                                continue;
                              }
                            }
                           else
                            {
                            }
                          }
                         return;
                        }
                      }
                    }
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    break;
                  }
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                return;
               if((false))
                {
                 if((false))
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    continue;
                   continue;
                  }
                 if((false))
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    return;
                   if((false))
                    {
                     if((((((injectionSwitch.x) - determinant(mat3(0.0, 1.0, 1.0, 0.0, 0.0, exp(0.0), 0.0, 0.0, 0.0))) > injectionSwitch.y))))
                      return;
                     if((false))
                      {
                       if((false))
                        break;
                       break;
                      }
                     if((false))
                      continue;
                     continue;
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      continue;
                     if((false))
                      continue;
                    }
                   if((false))
                    return;
                   if(((((bool(bool(false)))) || false)))
                    break;
                   continue;
                   if((false))
                    return;
                  }
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  break;
                 if((false))
                  continue;
                 for(int _injected_loop_counter = 1; _injected_loop_counter > (0 ^ 0); ((_injected_loop_counter --) ^ 0))
                  {
                   do
                    {
                     do
                      {
                       do
                        {
                         for(int _injected_loop_counter = (0 >> (int(((4) ^ 0)))); _injected_loop_counter < 1; _injected_loop_counter ++)
                          {
                           if((false))
                            break;
                           do
                            {
                             if(((true && ((! (! (false)))))))
                              {
                               if((((injectionSwitch.x > injectionSwitch.y))))
                                continue;
                               if((false))
                                continue;
                               break;
                              }
                             return;
                             if((false))
                              continue;
                            }
                           while(((injectionSwitch.x > injectionSwitch.y)));
                           if((false))
                            continue;
                          }
                         if((false))
                          continue;
                         if((((injectionSwitch.x > injectionSwitch.y))))
                          continue;
                        }
                       while(false);
                       if((false))
                        break;
                       if((false))
                        break;
                       if((false))
                        {
                         do
                          {
                           if((((injectionSwitch.x > injectionSwitch.y))))
                            continue;
                           return;
                          }
                         while(((injectionSwitch.x > injectionSwitch.y)));
                        }
                      }
                     while(false);
                    }
                   while(false);
                   if((false))
                    continue;
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    break;
                  }
                 if((false))
                  break;
                }
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  return;
                 break;
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                break;
               if(((bool(bvec3((bool(bvec2(false, false))), false, false)))))
                break;
               if((false))
                break;
               if((((injectionSwitch.x > injectionSwitch.y))))
                return;
              }
             while(((injectionSwitch.x > injectionSwitch.y)));
             if(false)
              {
              }
             else
              {
               if((false))
                return;
               if((((injectionSwitch.x > injectionSwitch.y))))
                return;
              }
             if((false))
              return;
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               for(int _injected_loop_counter = (0 << (int(6))); _injected_loop_counter < 1; _injected_loop_counter ++)
                {
                 return;
                }
              }
            }
           else
            {
            }
           if(false)
            {
            }
           else
            {
             do
              {
               if((true && ((true && (false)))))
                {
                }
               else
                {
                 if((false))
                  continue;
                 do
                  {
                   return;
                  }
                 while((bool(bool(false))));
                 if((false))
                  continue;
                 if((false))
                  {
                   for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
                    {
                     return;
                    }
                  }
                }
              }
             while(false);
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           if((false))
            {
             for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
              {
               return;
              }
            }
          }
        }
       else
        {
        }
      }
     else
      {
       if((false))
        return;
      }
    }
   for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
    {
     if((false))
      return;
    }
   if(((true && (((false) && true)))))
    {
     if((false))
      return;
     if(((injectionSwitch.x > injectionSwitch.y)))
      {
      }
     else
      {
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         if(((bool(bvec4((false || ((injectionSwitch.x > injectionSwitch.y))), false, true, false)))))
          {
           if((false))
            return;
          }
         else
          {
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             if((false))
              {
               if((false))
                {
                 if(true)
                  {
                   return;
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    return;
                  }
                 else
                  {
                  }
                }
               return;
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
            }
          }
        }
       if((false))
        return;
       if((false))
        return;
      }
     do
      {
       if((false))
        return;
      }
     while((bool(bvec2(((injectionSwitch.x > injectionSwitch.y)), false))));
     return;
     if((false))
      return;
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = ((1 << (((int(5)) ^ 0))) >> ((int(int(int(5)))))); _injected_loop_counter != 0; _injected_loop_counter --)
        {
         return;
        }
       if((false))
        return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(false)
    {
    }
   else
    {
     if((false))
      {
       for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < (0 | 1); _injected_loop_counter ++)
        {
         return;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
  }
 else
  {
   if(((false || (false))))
    return;
   if(false)
    {
    }
   else
    {
     if(true)
      {
       if((false))
        {
         for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
          {
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             if((false))
              return;
            }
          }
         return;
        }
       if((false))
        return;
       if((false))
        return;
      }
     else
      {
      }
    }
   do
    {
     if((false))
      {
       if((! (! (true))))
        {
         return;
        }
       else
        {
        }
      }
     if((false))
      continue;
    }
   while(false);
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     if(((! (! (false)))))
      {
       do
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if(false)
          {
          }
         else
          {
           if((false))
            return;
          }
         return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            continue;
           continue;
          }
         if((false))
          {
           if((false))
            return;
           break;
          }
        }
       while(false);
       if((false))
        return;
      }
     if(false)
      {
      }
     else
      {
       if(true)
        {
         do
          {
           do
            {
             if((false))
              continue;
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
             return;
             if((! (((! ((false))) && true))))
              break;
             if(((bool(bvec3(false, ((injectionSwitch.x > injectionSwitch.y)), true)))))
              continue;
             if((false))
              break;
             if((((((false) || false)) || false)))
              {
               if(((injectionSwitch.x < injectionSwitch.y)))
                {
                 for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                  {
                   if((false))
                    {
                     if((false))
                      {
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        break;
                       return;
                      }
                     break;
                    }
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    return;
                   if((false))
                    continue;
                   for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                    {
                     return;
                    }
                  }
                }
               else
                {
                 if((false))
                  return;
                }
               if((false))
                return;
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((false))
                  break;
                 return;
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if((false))
                  return;
                 continue;
                }
               if((false))
                continue;
              }
             do
              {
               if((false))
                return;
               if((((injectionSwitch.x > injectionSwitch.y))))
                continue;
              }
             while(((false) || false));
             if((((injectionSwitch.x > (clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
              break;
             if((false))
              break;
            }
           while(false);
          }
         while(false);
        }
       else
        {
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         if(true)
          {
           do
            {
             if((false))
              continue;
             do
              {
               if((bool(bool((((injectionSwitch.x > injectionSwitch.y)))))))
                return;
              }
             while(((injectionSwitch.x > injectionSwitch.y)));
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           while(false);
           if((false))
            {
             if((false))
              return;
             do
              {
               return;
               if((false))
                {
                 if(false)
                  {
                  }
                 else
                  {
                   return;
                  }
                }
              }
             while(false);
             if((false))
              continue;
            }
          }
         else
          {
          }
        }
       while(false);
       return;
      }
     if(true)
      {
       if((false))
        return;
       if((((((((injectionSwitch.x < injectionSwitch.y)) && (true))) || false) && (((injectionSwitch.x > injectionSwitch.y))))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
   if(true)
    {
     if(true)
      {
       do
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             if(false)
              {
              }
             else
              {
               return;
              }
            }
           if((false))
            break;
           if((false))
            continue;
           do
            {
             if((false))
              return;
             if((false))
              continue;
             if((false))
              continue;
             do
              {
               do
                {
                 return;
                }
               while(false);
              }
             while((((bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))))));
             if((false))
              return;
             if((false))
              {
               for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > 0; _injected_loop_counter --)
                {
                 return;
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                break;
              }
             if(((injectionSwitch.x < injectionSwitch.y)))
              {
               do
                {
                 if((false))
                  {
                   if((false))
                    {
                     if(false)
                      {
                      }
                     else
                      {
                       if((false))
                        return;
                      }
                     continue;
                    }
                   for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      return;
                     if((false))
                      return;
                    }
                   if(((injectionSwitch.x > injectionSwitch.y)))
                    {
                    }
                   else
                    {
                     if((false))
                      {
                       if((((injectionSwitch.x > injectionSwitch.y))))
                        break;
                       break;
                      }
                     return;
                    }
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    {
                     if((false))
                      {
                       if(((injectionSwitch.x < injectionSwitch.y)))
                        {
                         return;
                        }
                       else
                        {
                        }
                      }
                     return;
                    }
                  }
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  continue;
                }
               while(false);
              }
             else
              {
              }
            }
           while(false);
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if((false))
          continue;
         if((false))
          {
           do
            {
             if(false)
              {
              }
             else
              {
               if((false))
                continue;
               return;
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
          }
        }
       while(false);
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
      }
     if((false))
      return;
     do
      {
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     while(false);
     if((false))
      return;
     if((false))
      {
       if(false)
        {
        }
       else
        {
         return;
         if((false))
          return;
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     buf[_GLF_struct_replacement_21.next_virtual_gid] = 2;
    }
   else
    {
     if(true)
      {
       if((false))
        {
         if(((injectionSwitch.x < injectionSwitch.y)))
          {
           return;
          }
         else
          {
          }
        }
      }
     else
      {
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         return;
         if((false))
          return;
        }
       while(false);
      }
    }
  }
 if((false))
  return;
 if((((((injectionSwitch.x > injectionSwitch.y) && true)))))
  {
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       return;
       if(((! (! (false)))))
        continue;
      }
     while(false);
    }
   if((false))
    {
     if(false)
      {
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         if((false))
          return;
         return;
        }
      }
    }
   for(int _injected_loop_counter = (1 & 1); _injected_loop_counter > (((1 << (int(2))) >> (int(2))) ^ int((injectionSwitch.y))); _injected_loop_counter --)
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
       for(int _injected_loop_counter = 1; _injected_loop_counter > ((int(ivec3(int(ivec2(((false ? (_injected_loop_counter) : int((injectionSwitch.x)))), 0)), 1, (max(1, 1)))))); _injected_loop_counter --)
        {
         if((false))
          return;
         return;
        }
      }
    }
   for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < (1 & 1); _injected_loop_counter ++)
    {
     return;
    }
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
