#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((false))
  return;
 if((! (! ((((injectionSwitch.x > ((clamp(float(mat4x2(injectionSwitch.y, 0.0, (min(1.0, (max(1.0, 1.0)))), 0.0, 1.0, 0.0, 1.0, 0.0)), float(mat4x2(injectionSwitch.y, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0)), float(mat4x2(injectionSwitch.y, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0))))))))))))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  {
   if((false))
    return;
   return;
  }
 uint subgroup_id = gl_SubgroupID;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if(((! (! (false)))))
  return;
 if(((((min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
  {
   if(((true && (((injectionSwitch.x > injectionSwitch.y))))))
    return;
   return;
  }
 if((false))
  return;
 uint subgroup_size = gl_SubgroupSize;
 if((false))
  return;
 if((((true && ((injectionSwitch.x > injectionSwitch.y))))))
  return;
 if(((! (! (false)))))
  return;
 if((false))
  return;
 if((false))
  return;
 if((false))
  {
   if((((false) || false)))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     return;
    }
   return;
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((false))
  return;
 if(((bool(bvec2(((! (! ((injectionSwitch.x > injectionSwitch.y))))), true)))))
  return;
 uint num_workgroup = (((((max(injectionSwitch.x, ((injectionSwitch.x) + 0.0))) < injectionSwitch.y)) ? gl_NumWorkGroups.x : (subgroup_local_id)));
 if((((injectionSwitch.x > (((mix(float((- 4.4)), float(injectionSwitch.y), bool(true)))) * 1.0)))))
  return;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(((bool(bvec4(false, true, true, false)))))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 uint workgroup_base = workgroup_size * workgroup_id;
 if((bool(bool((((injectionSwitch.x > injectionSwitch.y)))))))
  return;
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    return;
   if((false))
    return;
   return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(((bool(bvec4(((injectionSwitch.x > injectionSwitch.y)), false, true, true)))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if((false))
  {
   if((((false)) && true))
    return;
   if((((false)) || ((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if((false))
    return;
   return;
   if((false))
    return;
   if((((false)) && true))
    {
     if(((bool(((bool(bool(bool(bool((true && (bool(false)))))))))))))
      {
       if((false))
        return;
       return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
     if((((((true ? (mix(float(((- 578.222 - - 14.63))), float(injectionSwitch.x), bool(true))) : (inversesqrt(- 8609.8582)))) > (max(injectionSwitch.y, (float(mat3x2(injectionSwitch.y, 1.0, 0.0, 1.0, 1.0, 1.0)))))))))
      return;
    }
  }
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 uint virtual_gid = ((((((((((! (! ((bool((bvec3(bvec3(bvec3(((! (((! ((true && (((true)) && true)))) && true)))), (! (true && ((! ((bool(bvec3(false, true, false)))))))), true))))))))) && true) ? workgroup_base : ((0u + (((((((((((true ? atomicXor(workgroup_base, (~ ((min(~ (workgroup_base), ~ (workgroup_base)))))) : (workgroup_size)))) / ((1u << (uint(3u))) >> (uint(3u))))) + 0u)) - (0u | ((min(0u, (min(0u, 0u))))))) / 1u))))))) + subgroup_id * subgroup_size) / 1u) + subgroup_local_id)) * 1u) | 0u);
 uint next_virtual_gid = workgroup_base + (((min(min((subgroup_id * subgroup_size) << 0u, (((subgroup_id * subgroup_size) << 0u) / 1u)), min((subgroup_id * subgroup_size) << 0u, (((subgroup_id * subgroup_size) << 0u) / 1u)))))) + (uint((injectionSwitch.x)) | ((((((((0u | (((subgroup_local_id) - 0u))) + 1) % subgroup_size)) / ((true ? 1u : (atomicMax(subgroup_local_id, virtual_gid)))))) | 0u)));
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  return;
 if((bool((bvec2(bvec4(bvec2(((((bool(((bvec2(bvec4(bvec2(bvec4((bvec2(bvec2(bvec2((true), false)))), true, ((injectionSwitch.x > injectionSwitch.y)))), false, false)))))) && (((false || (true))) && ((injectionSwitch.x < injectionSwitch.y))))) && true), true), true, true))))))
  {
   if((false))
    return;
   buf[virtual_gid] = 1;
   if(((bool(bvec4(false, ((false) || false), true, false)))))
    return;
   if((false))
    return;
  }
 else
  {
   if((false))
    return;
  }
 if(((! (! ((true && ((bool(bvec3(((injectionSwitch.x > ((((injectionSwitch.x > injectionSwitch.y)) ? (injectionSwitch) : ((max(vec2(mat2(injectionSwitch, 0.0, 1.0)), vec2(mat2(injectionSwitch, 0.0, 1.0))))))).y)), true, ((injectionSwitch.x < injectionSwitch.y))))))))))))
  {
   if((false))
    return;
   return;
  }
 if(subgroup_local_id + 1 < subgroup_size)
  {
   if((false))
    return;
   if((false))
    {
     if((false))
      return;
     if(((false || (false))))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      return;
     if(((((! (! (((bool(bvec4(((((bool(bool(false))) && true))), false, false, (((mix(vec2((- 876.008), (709.434)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(((injectionSwitch.x < injectionSwitch.y)), true))).x < (min((max(injectionSwitch.y, injectionSwitch.y)), ((injectionSwitch) * mat2(1.0)).y))))))) || false))))) && true)))
      {
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((false))
        return;
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((false))
        return;
      }
     return;
    }
   int i = 0;
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if((false))
    return;
   if((false))
    return;
   if((false))
    return;
   (~ (~ (buf[next_virtual_gid] = 2)));
  }
 else
  {
   if((! ((! (! (! ((false))))))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      return;
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if(((((clamp(injectionSwitch, injectionSwitch, (vec2(vec3((clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 0.0))))).x > injectionSwitch.y))))
        return;
       return;
      }
     if((false))
      return;
     return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   buf[next_virtual_gid] = (min(2, 2));
   if((false))
    return;
   if((false))
    {
     if((false))
      return;
     return;
    }
  }
 if(((bool(bvec4(false, true, false, false)))))
  {
   if((false))
    return;
   return;
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
