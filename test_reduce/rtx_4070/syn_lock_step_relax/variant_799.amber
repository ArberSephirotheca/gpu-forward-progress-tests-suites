#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = (~ (~ (gl_NumWorkGroups.x)));
 uint workgroup_size = ((gl_WorkGroupSize.x) << (~ (~ (0u))));
 uint workgroup_id = ((((true ? 1u : (atomicExchange(num_workgroup, bitfieldExtract(subgroup_local_id, - 77964, - 48561))))) * ((false ? (uvec2(184977u, 177962u).x) : (uint((max((max(uvec2(((max((gl_WorkGroupID.x), (((gl_WorkGroupID.x) | (gl_WorkGroupID.x))))) >> 0u), 0u), uvec2(((((gl_WorkGroupID.x)) * ((1u) | 0u)) >> 0u), 0u))), (max(uvec2(((max((gl_WorkGroupID.x), (((gl_WorkGroupID.x) | (gl_WorkGroupID.x))))) >> 0u), 0u), uvec2(((((gl_WorkGroupID.x)) * ((1u) | 0u)) >> 0u), 0u)))))))))));
 uint workgroup_base = (~ (~ ((true ? ((((~ (~ (workgroup_size)))) - 0u)) : (subgroup_id))))) * workgroup_id;
 uint virtual_gid = (max((min(((0u << (uint(5u))) | (workgroup_base)) + subgroup_id * subgroup_size, (~ (((~ (workgroup_base + (uint(uint((max(subgroup_id, subgroup_id))))) * subgroup_size)) * 1u))))), (min(workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size)))) + subgroup_local_id;
 uint next_virtual_gid = (uint(((uvec4((clamp((clamp(workgroup_base, workgroup_base, (0u | (workgroup_base)))), workgroup_base, workgroup_base)) + subgroup_id * (uint((~ (~ (uvec3(((subgroup_size) + 0u), 1u, 1u)))))) + (((min(subgroup_local_id + (((true ? ((~ (((~ (~ (min(~ ((min(((clamp((((1) + 0) / 1), (1) + 0, (1) + 0))), 1))), ~ ((min(((1) + 0), 1))))))))))) : (- 40789))) | (((clamp(~ ((~ ((((0 ^ ((max(~ (~ ((min(((((1) + 0)) - 0), 1)))), (0 | (~ (~ ((min(((((0 ^ ((1))) + 0)) - 0), 1))))))))))) ^ 0)))), ~ (((0 + ((~ (~ (~ ((max(~ (~ ((min(((0 | ((((((1) + 0)) - 0) >> 0)))), 1)))), (0 | (max((~ (~ (int(int(((min(((((1) + 0)) - 0), 1)))))))), (~ (~ (int(int(((min((((((min(((1) | (((1) / 1))), 1))) + 0)) - 0), 1))))))))))))))))))))), ~ ((~ ((max(~ (~ ((min(((min(((int((~ (~ (ivec2(((((((1)) >> 0) + 0)) - 0), int((injectionSwitch.x)))))))) | (int((~ (((~ (ivec2(((((((1)) >> 0) + 0)) - 0), int((injectionSwitch.x))))) >> ivec2(0, 0))))))), int((~ (~ (ivec2((((~ (~ ((min(((((1)) >> 0) + 0), ((((1)) >> 0) + 0))))))) - 0), int((injectionSwitch.x)))))))))), 1)))), (0 | (~ (((~ ((min(((((1) + 0)) - 0), 1)))) << 0)))))))))))))), subgroup_local_id + (((~ ((min(~ ((min(((0 | ((1) + 0))), 1))), ~ ((min(((1) + 0), (((0 ^ (1))) >> 0))))))))) | ((max((~ ((~ (int(ivec4(((max(~ (~ ((((min(((((1) + 0)) - 0), 1)))) / int(((vec2(mat2(injectionSwitch, 1.0, sqrt(1.0)))).y)))), ((min(((0 | ((int(int(~ (~ ((min(((((1) + 0)) - 0), 1))))))))) - 0), ((0 | (~ (~ ((min((((((max((~ (~ (((((1) + 0)) - 0)))), (max(((((1) + 0)) - 0), ((((1) + 0)) - 0))))) << 0)) / 1)), 1)))))) >> 0))))))), 0, int((injectionSwitch.x)), 0)))))), (~ ((~ (int(ivec4(((max(~ (~ ((((min(((((1) + 0)) - 0), 1)))) / int(((vec2(mat2(injectionSwitch, 1.0, sqrt(1.0)))).y)))), ((min(((0 | ((int(int(~ (~ ((min(((((1) + 0)) - 0), 1))))))))) - 0), ((0 | (~ (~ ((min((((((max((~ (~ (((((1) + 0)) - 0)))), (max(((((1) + 0)) - 0), ((((1) + 0)) - 0))))) << 0)) / 1)), 1)))))) >> 0))))))), 0, int((injectionSwitch.x)), 0))))))))))))) % subgroup_size), ((false ? (subgroup_local_id) : 0u)), 0u, 0u)) / uvec4(1u, 1u, 1u, (max(1u, 1u))))));
 (0u + (buf[virtual_gid] = ((((1)) - 0) << (0 + ((int(((true ? ((ivec2(((((0) | (0))) | (((0) | (((max((0), (0)))) - 0)))), 1)) >> ivec2(0, 0)) : ((ivec2(0, 0) << (ivec2(2))) ^ ((ivec2(0, 0) | (((((ivec2((injectionSwitch.y), (injectionSwitch.y)) * (ivec2(94987, 65464))) ^ ivec2(0, 0)))))))))))))))));
 atomicStore(buf[next_virtual_gid], uint(((((injectionSwitch.x < injectionSwitch.y)) ? (min((((clamp(((((2)) / int((injectionSwitch.y))) << 0), (~ (~ (2))), 2))) << 0), (max((((clamp(((((2)) / int((injectionSwitch.y))) << 0), 2, 2))) << 0), (((clamp(((((2)) / int((injectionSwitch.y))) << 0), 2, 2))) << 0))))) : (- 92924)))), 4, (((int(ivec4(64, 1, 1, 1)))) << (1 ^ 1)), 0);
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
