#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
  {
   if((false))
    {
     if(false)
      {
      }
     else
      {
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
  }
 if((false))
  barrier();
 if((false))
  return;
 for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     if(false)
      {
       if((false))
        barrier();
       if((false))
        break;
      }
     else
      {
       return;
      }
     if((false))
      {
       if((false))
        break;
       barrier();
      }
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    return;
   return;
  }
 if((false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if((false))
  barrier();
 if(true)
  {
   if((false))
    {
     for(int _injected_loop_counter = 0; _injected_loop_counter != ((1 << (int(0))) >> ((clamp(int(0), int(0), int(0))))); _injected_loop_counter ++)
      {
       if((false))
        return;
       return;
      }
    }
  }
 else
  {
  }
 if(((! (((! (false)) && (true && (true)))))))
  barrier();
 if((false))
  barrier();
 for(int _injected_loop_counter = 1; (((bool(bvec3(_injected_loop_counter != 0, false, true))) && true)); _injected_loop_counter --)
  {
   for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter < 1; _injected_loop_counter ++)
    {
     if((false))
      {
       if((false))
        continue;
       if((false))
        continue;
       return;
      }
     if((false))
      barrier();
     do
      {
       do
        {
         if((false))
          barrier();
        }
       while((bool(bvec2(false, true))));
      }
     while((((clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y)));
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      continue;
    }
  }
 for(int _injected_loop_counter = ((((~ (~ (1))) | 0) << (int(4))) >> ((min(int(4), int(4))))); (false || (_injected_loop_counter > ((0) - ((((((0) | (0))) ^ (0 | ((~ (~ (0)))))) | ((((0) | (0))) ^ (0 | ((~ (~ (0))))))))))); _injected_loop_counter --)
  {
   if((false))
    {
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       do
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          break;
         if((false))
          {
           if(true)
            {
             if((((((false) || false)) || false)))
              return;
             if((false))
              return;
            }
           else
            {
            }
           continue;
          }
         do
          {
           if((false))
            barrier();
           if((false))
            return;
           barrier();
          }
         while(false);
         if((false))
          {
           if((false))
            barrier();
           if((false))
            {
             if((false))
              continue;
             continue;
            }
           barrier();
           if((false))
            barrier();
          }
         if(((bool(bvec4(false, false, false, false)))))
          {
           if((false))
            barrier();
           if((false))
            return;
           barrier();
          }
         if((false))
          continue;
        }
       while(((injectionSwitch.x > (vec2(injectionSwitch[0], injectionSwitch[1])).y)));
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        break;
       if((false))
        {
         if((false))
          continue;
         if(false)
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
           barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
      }
    }
   if((false))
    continue;
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    break;
   if((false))
    continue;
   if((false))
    barrier();
  }
 if(((false || (((injectionSwitch.x > injectionSwitch.y))))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    barrier();
   return;
   if((false))
    return;
   if((false))
    barrier();
  }
 for(int _injected_loop_counter = 0; ((_injected_loop_counter) ^ 0) != 1; ((_injected_loop_counter ++) - 0))
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     continue;
    }
   if((false))
    return;
   if((false))
    {
     if(((bool(bool(false)))))
      barrier();
     if((false))
      continue;
     if((false))
      break;
     if((false))
      continue;
     barrier();
    }
   if((false))
    barrier();
   if((false || ((! (! ((false)))))))
    {
     if((bool(bvec3((false), false, true))))
      return;
     barrier();
     if((false))
      barrier();
    }
  }
 if((false))
  barrier();
 if(((bool((bvec3(((bvec3(bvec3(bvec3(bvec3(bvec3(bvec3((! (! (false))), false, false))))))))))))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    return;
   return;
   if((false))
    {
     if((false))
      return;
     barrier();
    }
   if((false))
    return;
   if((false))
    barrier();
  }
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   return;
   if((false))
    return;
  }
 if((false))
  {
   if((false))
    return;
   if(false)
    {
    }
   else
    {
     do
      {
       if((false))
        barrier();
       barrier();
      }
     while(((injectionSwitch.x > injectionSwitch.y)));
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 if((((max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)))
  {
   if((false))
    return;
   if((false))
    return;
  }
 else
  {
   if((false))
    {
     if((false))
      return;
     barrier();
    }
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if(true)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      {
       do
        {
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
        }
       while(false);
       if(((false || (false))))
        barrier();
       return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      {
       if((false))
        return;
       barrier();
      }
     for(int _injected_loop_counter = 0; _injected_loop_counter < ((((((1 << (int(3))) >> (int(3))) << (int(3))) >> (int(3))) << (int(7))) >> ((~ ((clamp(~ (int(7)), ~ (int(7)), ~ (int(7)))))))); _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
        {
         if((false))
          continue;
         if((false))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           break;
          }
         if((false))
          {
           if((false))
            continue;
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           barrier();
          }
         if(((true && (false))))
          break;
        }
       if(((! (! (((false) || false))))))
        return;
      }
     if((false))
      barrier();
     if((false))
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
        }
       return;
      }
     if((false))
      {
       if(((injectionSwitch.x < injectionSwitch.y)))
        {
         if((false))
          barrier();
         if(((bool(bvec4(false, true, true, true)))))
          return;
         barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             return;
             if((false))
              return;
            }
           else
            {
            }
           if((false))
            barrier();
          }
         if((false))
          return;
         if((false))
          barrier();
        }
       else
        {
        }
       if((false))
        return;
      }
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       if(((true && (false))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         do
          {
           if((false))
            barrier();
           if((false))
            barrier();
           if((false))
            barrier();
           if((((bool(bvec3(bool(bvec2(false, false)), true, false))))))
            return;
          }
         while(((injectionSwitch.x > injectionSwitch.y)));
         if((false))
          return;
         if((false))
          {
           if((false))
            return;
           return;
          }
         if((false))
          barrier();
         if((false))
          return;
         barrier();
        }
       if(((((max(injectionSwitch, injectionSwitch)).x > ((false ? (vec2(- 3835.1073, 5313.0053)) : injectionSwitch)).y))))
        return;
      }
     else
      {
       if((false))
        barrier();
      }
     if((false))
      barrier();
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 if(((false || ((bool(bool(bool(bvec4((false), true, true, ((injectionSwitch.x > injectionSwitch.y)))))))))))
  {
   if((false))
    barrier();
   do
    {
     return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      break;
    }
   while((((! (((! ((false || ((! (! (false || ((injectionSwitch.x > injectionSwitch.y))))))))) || false))))));
   if((false))
    return;
  }
 if(((! (! (false)))))
  {
   if((! (! (true))))
    {
     if(((false || (false))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   else
    {
    }
  }
 if((false))
  return;
 uint subgroup_size = gl_SubgroupSize;
 if((false))
  {
   if((false))
    return;
   return;
  }
 for(int _injected_loop_counter = 1; _injected_loop_counter != (((((0 >> (int(3)))) - 0)) * 1); ((false ? (atomicMax(_injected_loop_counter, _injected_loop_counter)) : ((true ? _injected_loop_counter -- : (- 22824))))))
  {
   for(int _injected_loop_counter = int(((clamp((clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), ((false ? (- 6.4) : injectionSwitch.y)), injectionSwitch.y)))); _injected_loop_counter != (0 ^ 0); _injected_loop_counter --)
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      break;
     if(((true && (false))))
      {
       if((false))
        {
         if((false))
          return;
         barrier();
        }
       continue;
       if((false))
        return;
      }
     if(true)
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
        }
       if(((false || (((false) && true)))))
        {
         if((false))
          barrier();
         barrier();
        }
      }
     else
      {
       if(((! (! (false)))))
        barrier();
      }
     if(true)
      {
       if((false))
        {
         if((false))
          break;
         if((false))
          return;
         if((false))
          continue;
         return;
        }
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
         if((false))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
         if((((false)) || ((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            return;
           do
            {
             if((false))
              break;
             if((false))
              barrier();
            }
           while(false);
           break;
          }
        }
       else
        {
         if((false))
          barrier();
         if((false))
          continue;
         for(int _injected_loop_counter = 0; _injected_loop_counter != (int(ivec3(1, 0, 1))); _injected_loop_counter ++)
          {
           if((false))
            continue;
           if(((((max((mix(float(injectionSwitch.x), float((- 632.473)), bool((bool(bool((! (! (false))))))))), injectionSwitch.x)) > (min(injectionSwitch, injectionSwitch)).y))))
            {
             if(((((vec2(injectionSwitch[0], injectionSwitch[1])).x > ((injectionSwitch) / vec2(1.0, 1.0)).y))))
              break;
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if(true)
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
               else
                {
                }
              }
             if((false))
              barrier();
             return;
            }
           if((false))
            continue;
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
             if((false))
              continue;
            }
           else
            {
             if((false))
              return;
             if((false))
              barrier();
             if((true && ((((injectionSwitch.x > injectionSwitch.y))))))
              {
               if((false))
                {
                 if((false))
                  barrier();
                 if(((bool(bvec2((bool(bvec3(false, true, true))), false)))))
                  barrier();
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   continue;
                  }
                 if((false))
                  barrier();
                 for(int _injected_loop_counter = ((1 << ((~ (~ (int(5)))))) >> (int(5))); _injected_loop_counter != 0; _injected_loop_counter --)
                  {
                   if((false))
                    break;
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    {
                     if((((injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     barrier();
                    }
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    {
                     if((false))
                      continue;
                     break;
                    }
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   barrier();
                  }
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                {
                 if(((injectionSwitch.x < injectionSwitch.y)))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
               if((false))
                continue;
               do
                {
                 barrier();
                 if((false))
                  barrier();
                }
               while(false);
              }
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(((((bool(bvec3(false, true, false))) && true))))
            barrier();
          }
         if((((injectionSwitch.x > (float((mat3(1.0) * (mat3(((true ? injectionSwitch.y : (92.00))), 0.0, 0.0, 0.0, 1.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 0.0, exp(0.0))))))))))
          return;
         if((false))
          barrier();
        }
       if(((((injectionSwitch.x < injectionSwitch.y)) && (((injectionSwitch.x > injectionSwitch.y))))))
        {
         if((false))
          {
           if(true)
            {
             return;
            }
           else
            {
            }
          }
         if((false))
          continue;
         barrier();
         if((false))
          barrier();
        }
       if((false))
        barrier();
       if((false))
        return;
       if(((true && (((injectionSwitch.x > injectionSwitch.y))))))
        break;
       if((false))
        {
         if((false))
          barrier();
         if(((! (! (false)))))
          break;
         if((false))
          return;
         if(false)
          {
           if((false))
            barrier();
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
             break;
            }
          }
         else
          {
           barrier();
           if((false))
            return;
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             if((false))
              return;
             if((false))
              barrier();
            }
           else
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
        }
       if((((bool(bvec4((! (! (((injectionSwitch.x > injectionSwitch.y))))), ((injectionSwitch.x < injectionSwitch.y)), true, false)))) || false))
        {
        }
       else
        {
         if((false))
          {
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
           return;
          }
         if((false))
          barrier();
         if(((((injectionSwitch.x > injectionSwitch.y)) || (false))))
          {
           if(false)
            {
            }
           else
            {
             do
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if((false))
                barrier();
              }
             while(false);
             if((((false) || false)))
              {
               if((false))
                return;
               if((false))
                barrier();
               barrier();
               if((false))
                break;
              }
            }
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
           for(int _injected_loop_counter = ((0) | 0); _injected_loop_counter < 1; _injected_loop_counter ++)
            {
             if((false))
              {
               if(((bool(bvec3(false, true, true)))))
                barrier();
               if((false))
                {
                 if((false))
                  {
                   if(true)
                    {
                     barrier();
                     if((false))
                      return;
                    }
                   else
                    {
                     if((false))
                      continue;
                     if((false))
                      barrier();
                    }
                  }
                 return;
                }
               barrier();
              }
             if((false))
              barrier();
             if((false))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                return;
               continue;
              }
            }
           if((false))
            barrier();
           if((false))
            continue;
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           if(false)
            {
             if((false))
              barrier();
             if((false))
              return;
             if((false))
              barrier();
             if((false))
              {
               if((false))
                break;
               barrier();
              }
            }
           else
            {
             if((true && (((false)) || false)))
              {
               if((bool(bvec4((false), false, false, ((injectionSwitch.x < injectionSwitch.y))))))
                {
                 if((false))
                  break;
                 if(false)
                  {
                  }
                 else
                  {
                   if((false))
                    barrier();
                   if((false))
                    continue;
                   for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > 0; _injected_loop_counter --)
                    {
                     if((false))
                      return;
                     return;
                     if((false))
                      continue;
                    }
                  }
                }
               if((false))
                break;
               if((false))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             else
              {
               if((false))
                break;
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if((false))
                continue;
               return;
              }
             if(((bool(bool(false)))))
              return;
             if((false))
              barrier();
            }
          }
        }
       if(((((bool(bvec2(! (! ((((((min(injectionSwitch.x, (mix(float((6997.9004)), float(((injectionSwitch.x) + 0.0)), bool(true))))) > injectionSwitch.y)) || false)) || (false))), false)))))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            return;
           barrier();
           if((false))
            return;
          }
         if(((! (! (false)))))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          {
           if((false))
            return;
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((((false) || false)))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
             return;
            }
           if((false))
            break;
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                return;
               barrier();
              }
             barrier();
            }
           do
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                break;
               if((((injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if((((injectionSwitch.x > injectionSwitch.y))))
                return;
               barrier();
              }
            }
           while(((injectionSwitch.x > injectionSwitch.y)));
           if(((injectionSwitch.x < injectionSwitch.y)))
            {
             if((false))
              barrier();
             if(false)
              {
              }
             else
              {
               barrier();
              }
             if(((! (! (false)))))
              {
               do
                {
                 barrier();
                }
               while(false);
               if((false))
                barrier();
              }
            }
           else
            {
            }
           if((false))
            {
             if((false))
              barrier();
             return;
            }
           if(((true && (false))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           do
            {
             if(((bool(bool(false)))))
              {
               if((((injectionSwitch.x > injectionSwitch.y))))
                continue;
               do
                {
                 if((false))
                  barrier();
                 if((false))
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    {
                     if((false))
                      continue;
                     barrier();
                    }
                   barrier();
                  }
                 if((false))
                  barrier();
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 if(((bool(bvec4(false, false, false, true)))))
                  {
                   if((((injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   for(int _injected_loop_counter = (max(((1 << (((int(5)) | (int(5))))) >> ((max(int(5), int(5))))), ((1 << (((int(5)) | (int(5))))) >> ((max(int(5), int(5))))))); _injected_loop_counter > 0; _injected_loop_counter --)
                    {
                     barrier();
                    }
                   if((false))
                    barrier();
                  }
                 if((false))
                  break;
                 if((false))
                  break;
                 if((false))
                  barrier();
                 barrier();
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  return;
                }
               while(((injectionSwitch.x > injectionSwitch.y)));
               if((false))
                continue;
              }
            }
           while(false);
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              barrier();
             return;
            }
           if((false))
            return;
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
          }
         if((false))
          return;
         if((false))
          return;
         if((false))
          continue;
         if((false))
          barrier();
         if((false))
          return;
         if((false))
          {
           if((false))
            break;
           if((false))
            continue;
           if((false))
            barrier();
           barrier();
          }
         if(false)
          {
          }
         else
          {
           if((false))
            return;
           if((((((injectionSwitch.x > injectionSwitch.y)) && true))))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
             if((false))
              barrier();
             if((false))
              {
               if(((injectionSwitch.x < injectionSwitch.y)))
                {
                 if((false))
                  return;
                 return;
                 if((false))
                  return;
                }
               else
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  continue;
                }
              }
             return;
            }
          }
         for(int _injected_loop_counter = 1; (((injectionSwitch.x > injectionSwitch.y)) || (_injected_loop_counter != int((injectionSwitch.x)))); _injected_loop_counter --)
          {
           if((false))
            {
             if((false))
              continue;
             do
              {
               if((false))
                break;
               for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
                {
                 do
                  {
                   return;
                  }
                 while((((! (! (injectionSwitch.x > injectionSwitch.y))))));
                 if((false))
                  barrier();
                }
              }
             while(false);
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
             if((false))
              barrier();
             if((false))
              barrier();
             if((false))
              continue;
             if((false))
              continue;
            }
           if((false))
            break;
          }
         if((false))
          {
           if((false))
            barrier();
           barrier();
          }
         for(int _injected_loop_counter = (0 >> (int(6))); (bool(bool((((injectionSwitch.x > injectionSwitch.y)) || ((false || (_injected_loop_counter != (1 & 1)))))))); _injected_loop_counter ++)
          {
           if((false))
            {
             if((false))
              barrier();
             barrier();
            }
           if((false))
            continue;
           barrier();
           if((false))
            barrier();
          }
         if(false)
          {
          }
         else
          {
           if((false))
            barrier();
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if(((true && (false))))
                break;
               barrier();
              }
             do
              {
               if((false))
                return;
               if(((true && (((injectionSwitch.x > injectionSwitch.y))))))
                {
                 if((false))
                  break;
                 barrier();
                }
              }
             while(((injectionSwitch.x > injectionSwitch.y)));
             return;
            }
          }
         if((false))
          {
           if((false))
            return;
           barrier();
          }
         if(((! ((((bool(bvec2(! (((injectionSwitch.x > injectionSwitch.y))), false)))) && true)))))
          barrier();
         do
          {
           if((false))
            barrier();
           if((((false) && ((injectionSwitch.x < injectionSwitch.y)))))
            {
             if((false))
              continue;
             if(false)
              {
              }
             else
              {
               return;
              }
            }
          }
         while(false);
         if((false))
          return;
         if((false))
          break;
        }
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
         if((false))
          barrier();
        }
       if((false))
        return;
      }
     else
      {
       if((false))
        barrier();
      }
    }
  }
 if((! (! ((false)))))
  {
   if((false))
    {
     if((false))
      return;
     return;
     if((false))
      return;
    }
   if((false))
    barrier();
   return;
  }
 if((false))
  return;
 for(int _injected_loop_counter = 0; _injected_loop_counter != (clamp(int((injectionSwitch.y)), int((injectionSwitch.y)), int((injectionSwitch.y)))); _injected_loop_counter ++)
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      continue;
     if((false))
      {
       if((false))
        break;
       barrier();
      }
     if((false))
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
         return;
        }
       barrier();
      }
     if((false))
      return;
     for(int _injected_loop_counter = ((1 << (int(7))) >> (int(7))); _injected_loop_counter != ((false ? (_injected_loop_counter) : ((clamp((0), ((true ? (0) : (_injected_loop_counter))), (max((0), (0))))) - ((0) / 1)))); _injected_loop_counter --)
      {
       if((false))
        continue;
       if((false))
        barrier();
       if(false)
        {
        }
       else
        {
         if((bool(bool(false))))
          {
           if((((true && ((false))) || false)))
            return;
          }
         else
          {
           if((false))
            {
             for(int _injected_loop_counter = 1; _injected_loop_counter > ((true ? int((injectionSwitch.x)) : (int(- 79.33)))); _injected_loop_counter --)
              {
               if(((! ((! (! (! ((true && ((! (! ((! (! (((injectionSwitch.x > injectionSwitch.y))))))))))))))))))
                {
                 if((((false) || false)))
                  break;
                 if((false))
                  barrier();
                 return;
                 if((false))
                  barrier();
                }
               if(((injectionSwitch.x < injectionSwitch.y)))
                {
                 if((false))
                  barrier();
                 if((false))
                  return;
                }
               else
                {
                }
               if((false))
                continue;
              }
             if((false))
              continue;
             if(true)
              {
               return;
              }
             else
              {
              }
             if((((injectionSwitch.x > injectionSwitch.y))))
              {
               if((false))
                continue;
               barrier();
              }
            }
           if(false)
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              break;
            }
           else
            {
             if((false))
              {
               if((((! (((! ((injectionSwitch.x > injectionSwitch.y))) && true))))))
                {
                 if((false))
                  {
                   if((false))
                    break;
                   barrier();
                  }
                 continue;
                }
               if((false))
                {
                 if((((! (! (bool(bool(false))))))))
                  break;
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
               return;
               if((false))
                continue;
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  {
                   if((false))
                    return;
                   barrier();
                  }
                 break;
                }
               if((((injectionSwitch.x > injectionSwitch.y))))
                return;
               if((false))
                {
                 if((false))
                  continue;
                 return;
                }
               if(((bool(bvec3(false, true, ((injectionSwitch.x > injectionSwitch.y)))))))
                barrier();
              }
             if(((true && (false))))
              break;
            }
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
             barrier();
            }
           if((false))
            break;
           do
            {
             return;
             do
              {
               if((false))
                {
                 if((((injectionSwitch.x > injectionSwitch.y))))
                  break;
                 barrier();
                }
              }
             while(false);
            }
           while(false);
           if((((injectionSwitch.x > injectionSwitch.y))))
            {
             if((false))
              barrier();
             if((false))
              {
               if((false))
                break;
               barrier();
              }
             if((false))
              break;
             for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
              {
               return;
              }
             if((false))
              barrier();
             if((((injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if((false))
            barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
          }
        }
      }
    }
   if((false))
    barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((! (! (false))))
  {
  }
 else
  {
   if(false)
    {
     if((false))
      {
       if((false))
        return;
       barrier();
      }
    }
   else
    {
     if((false))
      return;
     if(((true && (! (! ((false)))))))
      {
       if(((bool(bvec2(false, false)))))
        return;
       if((false))
        return;
       barrier();
       if((false))
        return;
       if((false))
        {
         if((false))
          {
           for(int _injected_loop_counter = 0; _injected_loop_counter < ((1 << (int(2))) >> (int(2))); _injected_loop_counter ++)
            {
             barrier();
             if((false))
              continue;
            }
          }
         if((false))
          barrier();
         return;
        }
      }
     if((false))
      barrier();
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if((false))
    return;
  }
 if(((! (((! ((! (! (false))))) && true)))))
  barrier();
 if((false))
  {
   if((false))
    return;
   return;
  }
 if(((true && (false))))
  return;
 for(int _injected_loop_counter = int((injectionSwitch.x)); _injected_loop_counter != int((injectionSwitch.y)); _injected_loop_counter ++)
  {
   for(int _injected_loop_counter = (int((injectionSwitch.y)) & 1); _injected_loop_counter > (0 << ((min((max(int(0), int(0))), int(0))))); _injected_loop_counter --)
    {
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(((true && (false))))
        break;
       if((false))
        barrier();
       barrier();
      }
    }
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if(((bool(bvec2(((injectionSwitch.x > (vec2(injectionSwitch[0], injectionSwitch[1])).y)), (true && (true)))))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     if(true)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((((injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if((false))
          barrier();
         barrier();
        }
       barrier();
       if((false))
        barrier();
       if((false))
        barrier();
       if((false))
        return;
      }
     else
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if(((injectionSwitch.x > injectionSwitch.y)))
        {
        }
       else
        {
         barrier();
        }
      }
    }
   if(true)
    {
     return;
    }
   else
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if((((((injectionSwitch.x > injectionSwitch.y) || false)))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        return;
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
     if((false))
      barrier();
    }
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = (min((uvec3(uvec4(((((gl_WorkGroupID) ^ (uvec3(0u, 0u, 0u) << (uvec3(8u))))) | (((gl_WorkGroupID) ^ (uvec3(0u, 0u, 0u) << (uvec3(8u)))))), 1u))), ((true ? (uvec3(uvec4(((((gl_WorkGroupID) ^ (uvec3(0u, 0u, 0u) << (uvec3(8u))))) | (((gl_WorkGroupID) ^ (uvec3(0u, 0u, 0u) << (uvec3(8u)))))), 1u))) : (uvec3(29802u, 167771u, 175644u)))))).x;
 do
  {
   do
    {
     if(((((! (! (false))) && true))))
      return;
    }
   while(false);
   if((false))
    return;
  }
 while((false || ((! (! ((true && ((((bool(bvec4(((injectionSwitch.x > injectionSwitch.y)), false, true, true)))) || false)))))))));
 if((false))
  return;
 uint workgroup_base = workgroup_size * workgroup_id;
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   do
    {
     if((false))
      continue;
     barrier();
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    {
     for(int _injected_loop_counter = ((((0) - 0)) ^ 0); _injected_loop_counter != 1; _injected_loop_counter ++)
      {
       if((bool(bvec3(((injectionSwitch.x < injectionSwitch.y)), true, true))))
        {
         if((false))
          barrier();
        }
       else
        {
        }
      }
     if((false))
      {
       if((false))
        barrier();
       if((false))
        return;
       barrier();
      }
     do
      {
       if(true)
        {
         if((false))
          return;
         if((false))
          barrier();
        }
       else
        {
        }
       return;
      }
     while((! (bool(bvec4((! (false)), true, true, false)))));
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
    }
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   do
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   while(((((false) && true)) || false));
   if((false))
    barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    return;
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
 if((false))
  {
   if((false))
    return;
   if((false))
    barrier();
   for(int _injected_loop_counter = ((clamp(0, 0, 0)) << (int(1))); _injected_loop_counter != 1; _injected_loop_counter ++)
    {
     if((false))
      barrier();
     return;
    }
  }
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    return;
   barrier();
  }
 if(((((bool(bvec2(false, true)))) || false)))
  {
   if((false))
    return;
   return;
  }
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((false) && true)))
    return;
   barrier();
  }
 uint virtual_gid = (max(((true ? workgroup_base : (workgroup_base))) + subgroup_id * (((false ? (((((0u ^ 0u)) >> ((0u << (uint(5u))) | 0u)) ^ (subgroup_local_id))) : uint(uvec2(subgroup_size, ((1u << (uint(5u))) >> (uint(5u)))))))), (clamp(((workgroup_base) + 0u), workgroup_base, workgroup_base)) + subgroup_id * (((false ? (subgroup_local_id) : uint(uvec2(subgroup_size, ((1u << (uint(5u))) >> (uint(5u)))))))))) + subgroup_local_id;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    return;
   return;
   if((false))
    return;
  }
 uint next_virtual_gid = (0u | (workgroup_base + subgroup_id * subgroup_size)) + ((subgroup_local_id + 1) % subgroup_size);
 do
  {
   do
    {
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        barrier();
       for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
        {
         if(((bool(bool((! (! (false))))))))
          {
           if((((injectionSwitch.x > injectionSwitch.y))))
            break;
           barrier();
          }
         return;
        }
      }
     if((false))
      break;
     if(((bool(bvec2(((injectionSwitch.x > injectionSwitch.y)), true)))))
      {
       if((false))
        break;
       if((false))
        barrier();
       return;
      }
     for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter > 0; _injected_loop_counter --)
      {
       if((false))
        {
         if(((! ((! (! ((! (! (bool(bvec4(((! (! (! (false))))), false, true, true))))))))))))
          continue;
         if((false))
          barrier();
         if((false))
          break;
         if(false)
          {
          }
         else
          {
           if((false))
            continue;
           barrier();
           if((((injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
      }
    }
   while(false);
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 while(false);
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = (1 ^ int((injectionSwitch.y))); _injected_loop_counter < int((injectionSwitch.y)); _injected_loop_counter ++)
    {
     if((false))
      barrier();
     for(int _injected_loop_counter = 0; _injected_loop_counter != 1; _injected_loop_counter ++)
      {
       if((((false) && true)))
        break;
       do
        {
         if((false))
          break;
         if((false))
          {
           if((false))
            {
             if((false))
              barrier();
             continue;
            }
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              continue;
             break;
            }
           if((false))
            barrier();
           if((false))
            barrier();
           for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
            {
             if((false))
              barrier();
             return;
            }
          }
         if((false))
          barrier();
        }
       while(false);
      }
    }
   for(int _injected_loop_counter = 1; _injected_loop_counter != 0; _injected_loop_counter --)
    {
     if(((false || ((bool(bool(false)))))))
      barrier();
     if(((false || (false))))
      {
       if((false))
        return;
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      continue;
    }
   if((false))
    {
     if((false))
      return;
     if((false))
      barrier();
     return;
    }
   if(((! (! (false)))))
    barrier();
   do
    {
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      break;
    }
   while(((injectionSwitch.x > injectionSwitch.y)));
   if((false))
    return;
   if((false))
    {
     if((false))
      return;
     return;
    }
  }
 if((false))
  barrier();
 if((true && ((((((false)) || false)) || false))))
  {
   if((false))
    {
     for(int _injected_loop_counter = int((injectionSwitch.y)); _injected_loop_counter != 0; _injected_loop_counter --)
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     return;
    }
   return;
  }
 if((! (! ((((injectionSwitch.x > injectionSwitch.y)))))))
  {
   if((false))
    {
     if(((injectionSwitch.x < injectionSwitch.y)))
      {
       barrier();
      }
     else
      {
      }
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   for(int _injected_loop_counter = (max(1, 1)); _injected_loop_counter > 0; _injected_loop_counter --)
    {
     if(((((vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        {
         if((((false) && true)))
          return;
         barrier();
        }
       if((false))
        break;
       do
        {
         for(int _injected_loop_counter = 0; _injected_loop_counter < 1; _injected_loop_counter ++)
          {
           if((false))
            {
             if((((injectionSwitch.x > injectionSwitch.y))))
              return;
             barrier();
            }
           if(((injectionSwitch.x > injectionSwitch.y)))
            {
            }
           else
            {
             return;
            }
          }
        }
       while(false);
      }
    }
   if((((false)) || ((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    barrier();
   do
    {
     if((false))
      break;
     if((false))
      {
       if((false))
        barrier();
       if((false))
        continue;
       if((false))
        {
         if((false))
          return;
         if((false))
          barrier();
         barrier();
        }
       if((((injectionSwitch.x > injectionSwitch.y))))
        continue;
       return;
      }
    }
   while(false);
   barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 do
  {
   if((false))
    barrier();
   if((false))
    {
     if(((bool(bvec3(false, true, false)))))
      return;
     return;
    }
  }
 while(false);
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 buf[virtual_gid] = 1;
 do
  {
   if((false))
    break;
   if((false))
    return;
  }
 while((! (! (false))));
 if((false))
  barrier();
 if(((bool(bvec2(((! ((bool(bvec2(! (! (! (false))), false)))))), false)))))
  barrier();
 if((false))
  return;
 atomicStore(buf[next_virtual_gid], uint(2), 4, 64, (clamp(((0) | (0)), (~ ((~ (~ (~ ((max(0, 0)))))))), 0)));
 if((false))
  {
   if((false))
    return;
   if((((! (! ((((((((false || (injectionSwitch.x > injectionSwitch.y)))) || false)) || false))))) && true)))
    {
    }
   else
    {
     return;
    }
  }
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   for(int _injected_loop_counter = (((((1 << (int(1))) >> (int(((true ? 1 : (94767)))))) << (int(2))) >> (int(2))) & ((1 << (int(7))) >> ((clamp(int(7), int(7), int(7)))))); _injected_loop_counter != 0; _injected_loop_counter --)
    {
     for(int _injected_loop_counter = (0 >> ((clamp(int(7), int(7), int(7))))); _injected_loop_counter < 1; _injected_loop_counter ++)
      {
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
         return;
        }
       if((false))
        {
         if((false))
          {
           if((false))
            break;
           barrier();
          }
         if((((injectionSwitch.x > injectionSwitch.y))))
          continue;
         barrier();
        }
      }
    }
   if((false))
    barrier();
   for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
    {
     barrier();
    }
  }
 if(((true) || (! ((((bool((bvec3(bvec3(bvec3(! (false), true, true)))))) && true))))))
  {
   do
    {
     if((false))
      {
       if(false)
        {
         if((false))
          return;
         if((false))
          barrier();
        }
       else
        {
         barrier();
         if((false))
          continue;
        }
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      break;
     if((false))
      barrier();
    }
   while(((false) || false));
   if((false))
    {
     if((false))
      barrier();
     if((false))
      return;
     barrier();
    }
  }
 else
  {
  }
 if((false))
  return;
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
