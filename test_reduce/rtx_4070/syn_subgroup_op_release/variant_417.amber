#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if((false))
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   barrier();
  }
 uint subgroup_size = gl_SubgroupSize;
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = ((gl_NumWorkGroups) | (gl_NumWorkGroups)).x;
 if((((((injectionSwitch.x > injectionSwitch.y) && true)))))
  barrier();
 if((false))
  barrier();
 if((((bool(bool((bool(bvec3((false), false, true)))))) && true)))
  barrier();
 if((false))
  barrier();
 if((bool(bvec4((false), false, true, false))))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 if((false))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((true && ((((injectionSwitch.x > injectionSwitch.y))))))
  {
   if((false))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     if((false))
      barrier();
     barrier();
    }
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if(((! (! (false)))))
  barrier();
 if((false))
  barrier();
 if((false))
  {
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   barrier();
  }
 if((! (! (((((((((bool(bvec3(false, ((injectionSwitch.x < injectionSwitch.y)), true)))) && true)) && ((injectionSwitch.x < injectionSwitch.y)))) || false))))))
  {
   if((false))
    barrier();
   if(((bool(((bvec2((bvec3(bvec3((bvec3(bvec4(bvec3(bvec2(bvec4(bvec2(false, true), true, true)), false), false)))))))))))))
    barrier();
   if(((((bool(bvec4(((injectionSwitch.x > injectionSwitch.y)), false, true, true)))) || false)))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if((false))
      barrier();
    }
   barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
     barrier();
    }
  }
 uint workgroup_base = (~ (~ (workgroup_size * workgroup_id)));
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
 if((((((true && ((injectionSwitch.x > injectionSwitch.y))))) || false)))
  {
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    barrier();
   if(((bool((! (! (bool((! (! (((((injectionSwitch.x > injectionSwitch.y)))) && true)))))))))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
     if((false))
      barrier();
     if((false))
      barrier();
     if((false))
      barrier();
     if((false))
      barrier();
     barrier();
     if((((injectionSwitch.x > (max(injectionSwitch.y, injectionSwitch.y))))))
      barrier();
    }
   barrier();
  }
 if((((((false) && ((injectionSwitch.x < injectionSwitch.y)))) || false)))
  barrier();
 uint virtual_gid = ((((~ (~ ((((true ? workgroup_base : (atomicAnd(workgroup_size, workgroup_size)))) ^ 0u))))) + (uint(uvec4(subgroup_id, 0u, 1u, 1u))) * subgroup_size + subgroup_local_id) / 1u);
 if((false))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(((false || ((! (! (false)))))))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 uint next_virtual_gid = workgroup_base + ((subgroup_id) | (subgroup_id)) * subgroup_size + (min(((subgroup_local_id + ((1 * ((((1) ^ 0)))) | 0)) % subgroup_size), ((((subgroup_local_id + (min((((min((max(((1) ^ 0), ((1) ^ 0))), ((1) ^ 0)))) | ((0) * 1)), ((((1) ^ 0)) | 0)))) % subgroup_size)) - 0u)));
 if((((injectionSwitch.x > ((((injectionSwitch.x > injectionSwitch.y)) ? (595.773) : (min(injectionSwitch.y, injectionSwitch.y))))))))
  {
   if((bool((bvec3(bvec3(bvec3((((injectionSwitch.x > injectionSwitch.y))), false, true)))))))
    barrier();
   if(((((! (! ((! (! (false))))))) || false)))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((((false) && true)))
      barrier();
     barrier();
    }
   barrier();
   if(((false || (false))))
    barrier();
  }
 if((((false) && true)))
  barrier();
 if((((bool(bvec2((bool(bool((injectionSwitch.x > injectionSwitch.y)))), (bool(bvec2(true, false)))))))))
  {
   if(((! (! (false)))))
    barrier();
   barrier();
  }
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(((false || (false))))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((((((false ? (((- 6.7)) * 1.0) : ((mix(float(1.0 * ((min((clamp(injectionSwitch.x, (vec2(vec4((max((mix(vec2(((min(injectionSwitch, injectionSwitch)))[0], ((min(injectionSwitch, injectionSwitch)))[1]), vec2((float(12996u)), (8.0)), bvec2(false, ((injectionSwitch.x > injectionSwitch.y))))), injectionSwitch)), 1.0, 1.0))).x, injectionSwitch.x)), injectionSwitch.x)))), float((58.46)), bool(false)))))) > (mix(float((- 3.0)), float(injectionSwitch.y), bool(true)))))))
  {
   if((false))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     barrier();
    }
   if((false))
    barrier();
   if((((injectionSwitch.x > ((false ? (2109.1261) : injectionSwitch.y))))))
    barrier();
   barrier();
   if((((! (! (! ((! ((! (! (bool(bvec3(false, ((false) || (true && (false))), true))))))))))))))
    {
     if((false))
      barrier();
     barrier();
    }
  }
 if((false))
  barrier();
 buf[virtual_gid] = 1;
 if((false))
  barrier();
 if(((bool(bool((true && (((injectionSwitch.x > injectionSwitch.y)))))))))
  barrier();
 if((false))
  barrier();
 if((((false) || false)))
  barrier();
 if((((false) && true)))
  barrier();
 if(subgroup_local_id + 1 < subgroup_size)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(((! (! (false)))))
    {
     if((false))
      {
       if((false))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     barrier();
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
    }
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   if((((((injectionSwitch.x > injectionSwitch.y)))) && true))
    barrier();
   if(true)
    {
     atomicStore(buf[next_virtual_gid], uint(2), 4, (~ (~ (((min(((false ? (21648) : ((((clamp(64, (((int(int(((((max(clamp(64, 64, ((64) << 0)), clamp(64, 64, ((64) << 0))))) | (clamp(64, 64, ((64) << 0))))) ^ 0))))), ((true ? ((min(((int(ivec2((((0 + (64)) | (0 + (64)))), 0)))), ((int(ivec2((((0 + (64)) | (0 + (64)))), 0)))))) ^ 0) : (- 14546))))))) + 0))), ((((clamp(((64) | (64)), ((((((max(clamp(64, 64, ((64) << 0)), clamp(64, ((64) - 0), ((64) << 0))))) | (clamp(64, 64, ((64) << 0))))) ^ 0)), ((true ? ((min(((int(ivec2((((0 + (64)) | (0 + (64)))), 0)))), ((int(ivec2((((0 + (64)) | (0 + (64)))), 0)))))) ^ 0) : (- 14546))))))) + 0))) ^ 0)))), ((((4) / 1)) | (4)));
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     if((false))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       if((false))
        barrier();
       if((false))
        barrier();
       barrier();
      }
     if((((false) && true)))
      barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((! (! ((((false)) && true)))))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     if((false))
      barrier();
     if((false))
      barrier();
     barrier();
     if((false || ((bool(bvec3((false), true, false))))))
      barrier();
    }
   if((false))
    barrier();
   subgroupAll((bool(bvec4((! (! (false))), true, true, false))));
   if((false))
    {
     if((false))
      barrier();
     if((false))
      barrier();
     barrier();
     if((false))
      barrier();
    }
  }
 else
  {
   if((false))
    {
     if((((((((true ? (max(injectionSwitch, injectionSwitch)) : (vec2(674.805, - 9.2)))).x > injectionSwitch.y))) || false)))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((false))
    {
     if((false))
      {
       if((false))
        {
         if((false))
          barrier();
         barrier();
        }
       barrier();
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     if((false))
      {
       if((false))
        barrier();
       barrier();
       if((false))
        barrier();
      }
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   subgroupAll(true);
   if((((! ((true && (! (false))))) || (! (! (((true && (false)))))))))
    {
     if(((((bool(bvec2((! (! (false))), true)))) && true)))
      barrier();
     if((! (! (((! (! (false))))))))
      {
       if((false))
        barrier();
       barrier();
      }
     barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if((bool(bool((false)))))
      {
       if((false))
        barrier();
       barrier();
      }
    }
   if((false))
    {
     if(((! ((true && (! (false)))))))
      barrier();
     if(((((true && ((false || (((! (! (bool(bool(injectionSwitch.x > injectionSwitch.y))))))))))))))
      barrier();
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
     barrier();
     if((false))
      barrier();
     if((((false) && true)))
      barrier();
     if((false))
      barrier();
     if((false))
      barrier();
     if((false))
      barrier();
    }
   if((false))
    barrier();
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(((true && ((((bool(bvec3((true && ((bool((! (! (bool(true)))))) && ((((false || (bool(bvec2(false, false))))))))), true, true)))) && true)))))
  {
   if((false))
    barrier();
   barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(((false || (false))))
    barrier();
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
