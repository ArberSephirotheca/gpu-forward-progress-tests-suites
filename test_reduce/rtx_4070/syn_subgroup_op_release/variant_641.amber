#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 if((false))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if((((false) || false)))
  barrier();
 if(((((false || (bool(bvec3(((! (! ((! (! (false))))))), true, false)))))) || false))
  {
   if((((bool(bvec2(bool(bvec3((bool(bool(false))), false, false)), true))))))
    barrier();
   barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((false))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 if((false))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  {
   if((false))
    barrier();
   if((((injectionSwitch.x > ((min((mix(float(((false ? 7.7 : - 45.13))), float((((injectionSwitch.y) - 0.0)) / (((float(mat2(sqrt(1.0), 0.0, 0.0, 0.0)))) * ((true ? 1.0 : (1715.2356))))), bool(true))), (((injectionSwitch.y) / (((float(mat2(sqrt(1.0), 0.0, 0.0, 0.0)))) * 1.0)) / (clamp(1.0, 1.0, 1.0))))))))))
    {
     if((false))
      barrier();
     barrier();
    }
   barrier();
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if((false))
  barrier();
 uint workgroup_id = (clamp(gl_WorkGroupID, gl_WorkGroupID, (uvec3(uvec3(gl_WorkGroupID))))).x;
 uint workgroup_base = workgroup_size * workgroup_id;
 if(((((max(((((mix(vec2((mat2(1.0) * (injectionSwitch))[0], (mat2(1.0) * (injectionSwitch))[1]), vec2((2.5), (- 6.5)), bvec2((bool(bvec3(false, false, false))), false)))).x) * 1.0), injectionSwitch.x)) > injectionSwitch.y))))
  {
   if((false))
    barrier();
   if((false))
    {
     if((false))
      barrier();
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     barrier();
    }
   barrier();
  }
 if((false))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   barrier();
   if((false))
    barrier();
  }
 uint virtual_gid = ((~ (~ (min((min(((workgroup_base + (clamp(subgroup_id * (~ (~ (((subgroup_size) | (subgroup_size))))), subgroup_id * (~ (~ (((subgroup_size) | (subgroup_size))))), (0u | (((subgroup_id * (~ (~ (((subgroup_size) | (subgroup_size)))))) - 0u)))))) | ((min(workgroup_base + subgroup_id * (~ (~ (((((subgroup_size) | (subgroup_size)) | ((subgroup_size) | (subgroup_size))))))), workgroup_base + subgroup_id * (~ (~ (((((subgroup_size) | (subgroup_size)) | ((subgroup_size) | (subgroup_size))))))))))), workgroup_base + ((false ? (atomicCompSwap(workgroup_id, workgroup_size, num_workgroup)) : (0u ^ (subgroup_id * (((((~ (~ (((subgroup_size) | (subgroup_size))))) | ((((true ? (0u ^ ((~ (~ ((min(((subgroup_size) | (subgroup_size)), (min(((subgroup_size) | (subgroup_size)), ((subgroup_size) | (subgroup_size))))))))))) : (num_workgroup)))) | ((clamp((~ (~ (((subgroup_size) | (subgroup_size))))), (~ (~ (((subgroup_size) | (subgroup_size))))), (~ (~ (((((subgroup_size)) - 0u) | (subgroup_size)))))))))))) << 0u))))))), workgroup_base + (0u | (subgroup_id)) * (~ (~ (((subgroup_size) | (subgroup_size)))))))))) + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + ((true ? (clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size)) : (atomicAnd(subgroup_size, num_workgroup)))) + ((((subgroup_local_id) | (subgroup_local_id)) + 1) % ((subgroup_size) / 1u));
 buf[virtual_gid] = 1;
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  {
   if((((((false || ((true && ((((bool(bool((! (! (true && (((((! (! (bool(bool(((injectionSwitch.x > injectionSwitch.y)) && true))))))))))))))) && true))))))) && true))))
    barrier();
   if((false || ((false))))
    barrier();
   barrier();
  }
 if(subgroup_local_id + 1 < subgroup_size)
  {
   if((false))
    barrier();
   atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(((((! (! (((true && ((! (! (bool(bool((bool(bvec3(false, ((injectionSwitch.x > injectionSwitch.y)), ((injectionSwitch.x < injectionSwitch.y))))))))))))))))) && true)))
    barrier();
   subgroupAll(false);
   if((false))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((((((injectionSwitch.x > injectionSwitch.y))) && (false || (true)))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 else
  {
   if((((! (! ((injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
   if((((((false) || false))) && true))
    {
     if((false))
      barrier();
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
   if((((injectionSwitch.x > ((false ? (- 3603.8299) : injectionSwitch.y))))))
    barrier();
   if((false))
    barrier();
   subgroupAll(true);
   if(((true && (bool(bvec4((false || (((((bool(bvec4(((true && ((bool(bvec2(bool(((bvec2(bvec4(bvec2(bvec4(bvec2((false || (false)), false), false, true)), true, true))))), (bool(((bvec2(bvec2(bvec2(bvec3(bvec2(true, false), true)))))))))))))), false, true, false))) || false))))), true, (! (! ((true && (((injectionSwitch.x > injectionSwitch.y))))))), false))))))
    {
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     barrier();
    }
   if((false))
    barrier();
   if((false))
    barrier();
  }
 if((false))
  barrier();
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(((((false || (injectionSwitch.x > injectionSwitch.y))))))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   barrier();
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
