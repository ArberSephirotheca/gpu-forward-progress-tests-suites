#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((false))
  return;
 if((! (! ((false || (((false || ((! ((false || (! ((bool((bool(bvec2(bool(false), true)))))))))))))))))))
  {
   if((false))
    {
     if((false))
      barrier();
     return;
    }
   barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if(((((! (! (((((injectionSwitch.x > injectionSwitch.y) && true)) && true))))))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     barrier();
     if((false))
      barrier();
    }
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
 if((((((((bool(bvec2((((bool(bvec2(! (! (false)), false))) || false)), true)))))) || false) && ((injectionSwitch.x < injectionSwitch.y)))))
  {
   if((false))
    return;
   if((false))
    barrier();
   if((false))
    barrier();
   return;
  }
 if((false))
  {
   if((((((injectionSwitch.x > injectionSwitch.y))) || false)))
    barrier();
   if((false))
    {
     if((false))
      {
       if((false))
        return;
       barrier();
      }
     return;
    }
   if((false))
    barrier();
   if((bool(bvec4((false || ((((injectionSwitch.x > injectionSwitch.y))))), false, true, true))))
    return;
   barrier();
  }
 if((false))
  barrier();
 if((false))
  {
   if((((((min((mix(vec2((- 305.097), (clamp((- 5.9), (- 5.9), (- 5.9)))), vec2((vec2(vec2((max(((injectionSwitch) / vec2(1.0, 1.0)), (min((vec2(vec2((min(injectionSwitch, injectionSwitch))))), ((max((mix(vec2((min(injectionSwitch, injectionSwitch))[0], (min(injectionSwitch, injectionSwitch))[1]), vec2((422.925), (9066.1932)), bvec2(false, ((injectionSwitch.x > injectionSwitch.y))))), min(injectionSwitch, injectionSwitch)))))))))))[0], (((vec2(vec2((max(injectionSwitch, (min(injectionSwitch, injectionSwitch))))))) - vec2(0.0, 0.0)))[1]), bvec2(true, (false || ((! (! (true)))))))), vec2(vec2((max(injectionSwitch, (min(injectionSwitch, injectionSwitch))))))))).x > injectionSwitch.y))))
    barrier();
   barrier();
   if((false))
    {
     if((false))
      barrier();
     barrier();
    }
  }
 uint subgroup_id = gl_SubgroupID;
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    {
     if(((! ((bool(bvec3(! (false), true, true)))))))
      barrier();
     return;
    }
   return;
   if((false))
    barrier();
  }
 if((false))
  return;
 if((false))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if((false))
  barrier();
 if(((bool(bool((true && (false)))))))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if((false))
  {
   if((false))
    barrier();
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      {
       if((false))
        barrier();
       return;
       if((false))
        return;
      }
     barrier();
    }
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    return;
   barrier();
   if((false))
    barrier();
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
  }
 if((bool(bvec2((((false)) && true), ((injectionSwitch.x < injectionSwitch.y))))))
  return;
 if((false))
  return;
 if(((! (bool(bvec3((! (false)), true, true))))))
  {
   if((false))
    return;
   return;
  }
 if((false))
  barrier();
 uint num_workgroup = (uvec3((max((~ (~ (0u))), 0u)), 0u, 0u) ^ ((((~ (~ (gl_NumWorkGroups)))) / (min((uvec3(0u, 0u, 0u) | (uvec3(1u, ((uint(uvec2((1u) - 0u, 0u)))), (~ (~ (1u)))))), uvec3(1u, ((uint(uvec2((1u) - 0u, 0u)))), (~ (~ (1u))))))))).x;
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  return;
 uint workgroup_size = ((((((((true ? gl_WorkGroupSize.x : (((uvec4(127258u, 60029u, 66504u, 27074u)) / (clamp(((uvec4(1u, 1u, ((min(uint(uint((((uint(uvec4(1u, 1u, 1u, 1u)))) / 1u))), uint(uint(1u))))), 1u)) + uvec4(0u, 0u, 0u, 0u)), (uvec4(1u, 1u, 1u, 1u) * (uvec4(1u, 1u, ((min(uint(uint((((uint(uvec4(1u, 1u, 1u, 1u)))) / 1u))), uint(uint(1u))))), 1u))), uvec4(1u, 1u, ((min(uint(uint((((uint(uvec4(1u, 1u, 1u, 1u)))) / 1u))), uint(uint(1u))))), 1u)))).r))) - 0u)) | ((0u | ((((true ? gl_WorkGroupSize.x : (((uvec4(127258u, 60029u, 66504u, 27074u)) / ((uvec4(1u, 1u, ((min(uint((max(uint(1u), uint(1u)))), uint(uint(1u))))), 1u)) - uvec4(0u, 0u, 0u, 0u))).r))) | ((true ? gl_WorkGroupSize.x : (((uvec4(127258u, 60029u, 66504u, 27074u)) / ((uvec4(1u, 1u, ((min(uint((max(uint(1u), uint(1u)))), uint(uint(1u))))), 1u)) - uvec4(0u, 0u, 0u, 0u))).r))))))))) / 1u));
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if(((((! ((((bool(((bvec2(bvec4(bvec2(bvec4(bvec2(! ((((! (! (true))))) && true), ((injectionSwitch.x < ((((injectionSwitch) * vec2(1.0, 1.0))) * abs(vec2(1.0, 1.0))).y))), false, false)), true, true))))))) || false))) && ((injectionSwitch.x > injectionSwitch.y))))))
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        return;
       barrier();
      }
     if((false))
      barrier();
     return;
    }
   return;
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if((false))
      {
       if((false))
        barrier();
       return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((false))
        barrier();
      }
     barrier();
     if((false))
      barrier();
     if((false))
      barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   if(((false || ((! (! (false)))))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if((false))
  return;
 if((bool(bvec4((false), false, true, true))))
  barrier();
 if(((! ((! (! (! (false))))))))
  {
   if((false))
    return;
   barrier();
  }
 uint workgroup_id = (min(((gl_WorkGroupID) / uvec3(1u, (((1u << (uint(0u))) >> (uint(0u))) * (1u)), 1u)).x, (max(((gl_WorkGroupID) / uvec3(1u, 1u, 1u)).x, (~ (((false ? (108366u) : ~ (((gl_WorkGroupID) / uvec3(1u, (max(1u, 1u)), 1u)).x)))))))));
 if((false))
  return;
 if((false))
  barrier();
 if((false))
  barrier();
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 uint workgroup_base = ((((workgroup_size) * 1u)) << 0u) * workgroup_id;
 if(((((((mix(float((float(false))), float((min(injectionSwitch.x, injectionSwitch.x))), bool(true))) > injectionSwitch.y))) || false)))
  barrier();
 if((false))
  return;
 if((true && (((true && ((! (! (true))))) && ((true && ((! (! ((bool(((bool((true && ((bool(bvec2(bool(false), true))))))) || (bool(((true && (false))))))))))))))))))
  {
   if(((! ((! (! ((bool(bvec4(! (((injectionSwitch.x > injectionSwitch.y)) || ((false))), true, true, true))))))))))
    {
     if((false))
      barrier();
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
        }
       if((false))
        barrier();
       return;
      }
     barrier();
    }
   if((false))
    return;
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      {
       if(((bool(bvec2(false, false)))))
        barrier();
       barrier();
      }
     if((false))
      barrier();
     barrier();
     if(((bool(bvec2(false, true)))))
      barrier();
     if((false))
      {
       if((false))
        return;
       return;
      }
    }
   barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    return;
   if((((! (! (((log(vec2(1.0, (min((float((max(float(1.0), (1.0 * (float(1.0))))))), 1.0)))) + ((vec2((min(injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1])))).x > injectionSwitch.y)))))))
    barrier();
   if((false))
    barrier();
  }
 uint virtual_gid = (clamp(workgroup_base, workgroup_base, workgroup_base)) + (0u | ((~ (((~ (subgroup_id)) - 0u))))) * ((true ? (uint(uint(subgroup_size))) : ((min(subgroup_local_id, ((((subgroup_local_id) | (subgroup_local_id))) / 1u)))))) + subgroup_local_id;
 if((((injectionSwitch.x > injectionSwitch.y))))
  {
   if((false))
    barrier();
   barrier();
  }
 if(((((((bool(bvec4((((injectionSwitch.x < (max(injectionSwitch, injectionSwitch)).y)) || false), false, (((injectionSwitch.x > injectionSwitch.y)) || ((bool(bvec4(true, false, false, ((injectionSwitch.x > injectionSwitch.y))))))), true)))) && ((((bool(bool(((injectionSwitch.x > (vec2(((injectionSwitch[0]) - determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, log(1.0), 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, (float(mat4x2((max(0.0, 0.0)), (injectionSwitch.y), (mix(float((- 7.6)), float(((sqrt(1.0)) - 0.0)), bool(true))), round(length(normalize(1.0))), 0.0, (mix(float(((false ? - 5.4 : - 20.28))), float(1.0), bool(true))), 1.0, 0.0))), 0.0, 0.0, 0.0))), (vec2((min(1.0, (((float(mat2((min(1.0, 1.0)), 0.0, sqrt(0.0), 1.0))) / 1.0)))), ((false ? (injectionSwitch[0]) : 1.0))) * (injectionSwitch))[1])).y) && true))))) || false)))))))
  {
   if((false || ((((false) && true)))))
    return;
   return;
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     barrier();
    }
   if((false))
    return;
  }
 if((false))
  return;
 if((((injectionSwitch.x > (1.0 * (injectionSwitch.y))))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if((false))
    return;
   return;
   if((false))
    return;
  }
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(((((! (! ((bool(((bvec2(bvec4(bvec2(bvec4((((bvec2(bvec2(bvec2(bvec3(bvec2(bvec4(bvec2(! ((! ((((true) && true) && ((true && ((! (! ((true && ((! (! (bool(bvec4(((! (! (injectionSwitch.x > injectionSwitch.y)))), true, false, false))))))))))))))))), true), true, true)), false))))))), true, true)), true, false)))))))))))))
  barrier();
 if((false))
  barrier();
 if((((injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((false))
  barrier();
 uint next_virtual_gid = workgroup_base + (~ (~ ((max(subgroup_id * subgroup_size, subgroup_id * subgroup_size))))) + ((((uint(uvec2((0u | ((min((min((subgroup_local_id + 1), (subgroup_local_id + 1))), (min((subgroup_local_id + 1), (subgroup_local_id + 1))))))) | (subgroup_local_id + (clamp(1, 1, ((1) | (1))))), uint((injectionSwitch.y))))))) % ((subgroup_size) | (subgroup_size)));
 (((true ? ((((uint((injectionSwitch.x))) | (uint((injectionSwitch.x))))) / (uint(uint((max(1u, 1u)))))) ^ (buf[virtual_gid] = ((true ? 1 : (96824)))) : (atomicOr(workgroup_size, virtual_gid)))));
 if((false))
  {
   if((false))
    return;
   barrier();
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((((((injectionSwitch.x > ((((false ? (0.1) : injectionSwitch.y))) - 0.0)))) || ((injectionSwitch.x > injectionSwitch.y)))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(((true && ((! (! (false)))))))
    barrier();
   if((false))
    return;
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if((false))
  {
   if((false))
    return;
   return;
  }
 if((((injectionSwitch.x > (mix(float(injectionSwitch.y), float(((true ? (9.9) : (- 539.443)))), bool(((bool(bvec2((injectionSwitch.x > injectionSwitch.y), (! (true && ((! (true))))))))))))))))
  {
   if((false))
    barrier();
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      barrier();
     barrier();
    }
   return;
  }
 if(((! (! ((((true && (false))) && true))))))
  {
   if((false))
    barrier();
   barrier();
  }
 if((false))
  barrier();
 if(subgroup_local_id + 1 < subgroup_size)
  {
   if((false))
    return;
   if((false))
    barrier();
   if((false))
    return;
   atomicStore(buf[next_virtual_gid], ((((((((max((uint(2)), (uint(2))))) + 0u) ^ ((true ? 0u : (next_virtual_gid))))) | (((uint(2)) ^ (0u | (((0u) | (0u)))))))) / 1u), (((0 | ((clamp((max(((((true ? 4 : (- 39795)))) + 0), ((true ? 4 : (- 39795))))), 4, (0 ^ (4))))))) * 1), 64, (((clamp(4, 4, ((4) | (4)))) | 0)));
   if((false))
    barrier();
   subgroupAll(false);
  }
 else
  {
   if((true && ((false || ((((bool(bvec2((injectionSwitch.x > injectionSwitch.y), (! (! (false || ((! (! ((false || (((false || (((true) && true)))))))))))))))))))))))
    {
     if((false))
      barrier();
     barrier();
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if((false))
    barrier();
   if((bool((((bool(bvec4(bool((! (! ((((((injectionSwitch.x > injectionSwitch.y)) || false))))))), true, false, true))) && true)))))
    barrier();
   if(((false || (false))))
    barrier();
   atomicStore(buf[next_virtual_gid], uint(2), (max((int(int(4))), 4)), 64, 4);
   if((false))
    return;
   if((false))
    barrier();
   if((((true && (bool((bvec3(bvec3((bvec3(bvec3(bvec3((! (! (((injectionSwitch.x > injectionSwitch.y))))), true, ((true) && ((injectionSwitch.x < injectionSwitch.y))))))))))))))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     if((((((((vec2(mat4(vec2(mat3x2(injectionSwitch, 1.0, 0.0, 1.0, 1.0)), 1.0, 0.0, 1.0, (float(mat4x3(sin(0.0), determinant(mat3(0.0, 0.0, 1.0, sin(0.0), 0.0, 1.0, 0.0, 0.0, 0.0)), 0.0, 0.0, 0.0, length(tan(vec3(0.0, 0.0, 0.0))), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), 1.0, 0.0, 0.0, 1.0, 0.0, (dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), 0.0, 0.0, 0.0, 0.0)))).x) / 1.0) > (clamp(injectionSwitch, injectionSwitch, (((((vec2(((true ? mat2x4(injectionSwitch, 1.0, 1.0, ((mix(float((- 163.167)), float(float(vec2(0.0, 0.0))), bool(true)))), (((mix(float((- 7415.9987)), float((min(1.0, 1.0))), bool(true)))) + 0.0), 0.0, 0.0) : (mat2x4(- 4401.7996, - 4.9, (clamp(((mix(float((float(true))), float(float(vec2(((- 9390.6627) - 0.0), 0.0))), bool(true)))), - 9390.6627, - 9390.6627)), 51.60, - 9807.4445, 875.962, 8.2, 578.492))))))) - vec2(0.0, 0.0)) + vec2(0.0, 0.0))))).y))))
      {
       if((false))
        return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
        }
       return;
       if((false))
        barrier();
       if((false))
        barrier();
      }
     return;
     if((false))
      {
       if((false))
        barrier();
       barrier();
      }
     if((false))
      return;
     if((false))
      return;
    }
   if((false))
    barrier();
   if((false))
    return;
   if((((! (! (bool(bool(false))))))))
    barrier();
   if(((((max(injectionSwitch.x, injectionSwitch.x)) > (vec2(((mat2x4(injectionSwitch, sin(0.0), 1.0, 0.0, 1.0, (max(length(vec2(0.0, 0.0)), length(vec2(0.0, 0.0)))), 1.0)) - mat2x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))).y))))
    return;
   if(((true && (! (! ((((((true ? (min(((true ? ((true ? injectionSwitch.x : (84.07))) : (6.4))), ((true ? injectionSwitch.x : (84.07))))) : (- 9878.0635))) > injectionSwitch.y)))))))))
    {
     if((false))
      barrier();
     if((((((injectionSwitch.x > injectionSwitch.y)) || ((injectionSwitch.x > injectionSwitch.y))))))
      {
       if((false))
        barrier();
       if(((! (! (false)))))
        barrier();
       if((false))
        barrier();
       return;
       if((((injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if((false))
      barrier();
     barrier();
     if((false))
      barrier();
     if((false))
      return;
     if((((false) || false)))
      barrier();
     if((false))
      return;
    }
   subgroupAll(true);
   if((((((clamp(((false ? (- 3.8) : cos(0.0) * (injectionSwitch.x))), cos(0.0) * (injectionSwitch.x), cos(0.0) * (injectionSwitch.x)))) > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      barrier();
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
     if((false))
      return;
    }
  }
 if((false))
  return;
 if(((false || (false))))
  barrier();
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
