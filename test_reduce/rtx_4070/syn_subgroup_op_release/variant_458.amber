#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = (max(gl_NumWorkGroups.x, gl_NumWorkGroups.x));
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = ((false ? ((mat3x2(28.20, 3.8, 8.1, 67.56, - 3.3, 215.081) , subgroup_local_id)) : (((max(gl_WorkGroupID, gl_WorkGroupID))) * ((((true) || ((injectionSwitch.x > (vec2(mat2x3(injectionSwitch, 0.0, 1.0, determinant(mat2(0.0, 0.0, 1.0, 0.0)), 1.0))).y))) ? uvec3(1u, 1u, 1u) : ((~ (((~ (uvec3((((max(166202u, (1u * (166202u))))) ^ (0u >> (uint(7u)))), ((((((false ? (atomicAnd(subgroup_local_id, 180155u)) : (uint(uvec4(163587u, 0u, 1u, 0u)))) ^ 0u)) << 0u))), ((true ? 198993u : (134240u)))))) | uvec3(0u, 0u, 0u)))))))).x));
 uint workgroup_base = ((false ? (num_workgroup) : ((false ? (subgroup_id) : (0u ^ (workgroup_size * workgroup_id))))));
 uint virtual_gid = (0u | ((((~ (~ (uint((max(uvec3(max(workgroup_base + (clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, (((true ? uint((uvec2(uvec3(uvec2((~ (~ (subgroup_id * subgroup_size))), 1u), 0u)))) : (subgroup_local_id)))))), workgroup_base + (clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, (((true ? ((~ (~ (uint(uvec2(uint((uvec2(uvec3(uvec2((~ (~ (subgroup_id * subgroup_size))), 1u), 0u)))), (1u ^ 0u))))))) : ((false ? (96010u) : (subgroup_local_id))))))))), 1u, uint((injectionSwitch.y))), uvec3(max(workgroup_base + (clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, (((true ? uint((uvec2(uvec3(uvec2((~ (~ (subgroup_id * subgroup_size))), 1u), 0u)))) : (subgroup_local_id)))))), workgroup_base + (clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, (((true ? ((~ (~ (uint(uvec2(uint((uvec2(uvec3(uvec2((~ (~ (subgroup_id * subgroup_size))), 1u), 0u)))), (1u ^ 0u))))))) : ((false ? (96010u) : (subgroup_local_id))))))))), 1u, uint((injectionSwitch.y))))))))))) + subgroup_local_id));
 uint next_virtual_gid = (((((((max((vec2(((false ? (vec4(- 5.6, - 8.3, - 3.8, - 88.91)) : vec4(injectionSwitch, 0.0, 1.0))))), (((vec2(((false ? (vec4(- 5.6, - 8.3, - 3.8, - 88.91)) : vec4(injectionSwitch, 0.0, 1.0)))))) * mat2(1.0)))).x < injectionSwitch.y)) && true)) ? ((((((workgroup_base)) / 1u) - 0u)) / 1u) + (((0u + (((subgroup_id * subgroup_size) - (0u >> (((uint(3u)) / 1u))))))) | (subgroup_id * subgroup_size)) : (((clamp((min(~ (~ (~ ((0u | (~ ((workgroup_id))))))), ((~ (~ (workgroup_id))) + 0u))), ~ ((0u ^ (~ (workgroup_id)))), ~ (~ (workgroup_id)))))))) + ((((subgroup_local_id + (((((int((injectionSwitch.x)) + (min(int(((int(1)) >> 0)), int(((int(1)) >> 0))))))) * 1))) ^ 0u)) % subgroup_size);
 buf[virtual_gid] = 1;
 if(((false ? (atomicAnd(num_workgroup, next_virtual_gid)) : subgroup_local_id)) + 1 < subgroup_size)
  {
   atomicStore(buf[((next_virtual_gid) - 0u)], (0u | (uint(2))), 4, 64, (min((max(4, 4)), ((4) | (((4) ^ 0))))));
   subgroupAll(false);
  }
 else
  {
   atomicStore(buf[((next_virtual_gid) | (next_virtual_gid))], uint(2), (((false ? (- 12092) : (clamp(~ (max(((min(~ (min((4), (max((4), (4))))), ~ ((1 * (4)))))), (int(((false ? (20798) : (((0 ^ ((bool(bool(true))) ? int(((min(~ (clamp(((1 * (min((4), (max((4), (4))))))), ((1 * (min((4), (max((4), (4))))))), ((((1 * (min((4), (max((4), (4)))))) >> 0))))), ~ (4))))) : (- 62942))))))))))), ~ ((min(~ (min((min((4), (max(((true ? (4) : ((int((injectionSwitch.y)) & 1) * ((- 62132))))), (((4) ^ 0)))))), (min((4), (max(((true ? (4) : ((int((injectionSwitch.y)) & 1) * ((- 62132))))), (((4) ^ 0)))))))), ~ (4)))), (int(ivec4((int(ivec4(~ ((min(~ (min((4), (max((4), ((int((~ (~ (int(((4)) / 1))))))))))), ~ (((((((4) | (4))))) | (((((4) | (4)))))) / 1)))), 1, 1, (0 << (((((((int(5))) >> 0)) | 0)) >> 0))))), 1, 0, 0)))))))), 64, 4);
   subgroupAll(true);
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
