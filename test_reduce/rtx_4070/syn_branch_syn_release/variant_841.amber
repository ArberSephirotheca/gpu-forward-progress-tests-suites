#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = ((((false ? (uint(false)) : (uint(uvec2(gl_NumWorkGroups.x, 0u)))))) + 0u);
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = ((((((! (! ((bool(bool(true))) && (((((true)) && true)) || false))))) ? ((0u ^ (((~ (((max((((((~ (~ (uint(uvec2(~ (workgroup_size * workgroup_id), uint((injectionSwitch.y))))))))) << 0u)), (((~ (~ (uint(uvec2(~ (((workgroup_size * workgroup_id) >> 0u)), uint((injectionSwitch.y)))))))))))) / 1u)) - 0u)))) : ((subgroup_local_id % subgroup_local_id))))) | (((((! (! ((bool(bool(true))) && (((((true)) && true)) || false))))) ? ((0u ^ (((~ (((max((((((~ (~ (uint(uvec2(~ (workgroup_size * workgroup_id), uint((injectionSwitch.y))))))))) << 0u)), (((~ (~ (uint(uvec2(~ (((workgroup_size * workgroup_id) >> 0u)), uint((injectionSwitch.y)))))))))))) / 1u)) - 0u)))) : ((subgroup_local_id % subgroup_local_id))))));
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id) | (subgroup_local_id));
 uint next_virtual_gid = (((uint(uvec2(((workgroup_base) / 1u) + (((~ (((~ ((max((((uint((injectionSwitch.x)) + (subgroup_id))) - 0u) * subgroup_size, (((uint((injectionSwitch.x)) + (subgroup_id))) - 0u) * subgroup_size)))) | (~ (((false ? (subgroup_size) : ((max(((uint((injectionSwitch.x)) + (subgroup_id))), (((uint(uvec2(((uint((injectionSwitch.x)) + (subgroup_id))), 0u)))) | (((uint((injectionSwitch.x)) + (subgroup_id))))))) - 0u) * subgroup_size)))))))) * ((((max((1u << (uint(6u))), (1u << (uint(6u))))) >> (((uint(6u)) << 0u))) / uint((injectionSwitch.y))))), 0u))) / 1u)) + (((uint(uvec2(((subgroup_local_id + 1) % subgroup_size), 1u)))) << uint((injectionSwitch.x)));
 buf[virtual_gid] = 1;
 if(subgroup_local_id + 1 < (((bool(((bvec3(bvec4(bvec3(bvec3(bvec3(false, false, false))), true)))))) ? (atomicMax(subgroup_local_id, num_workgroup)) : subgroup_size)))
  {
   int i = 0;
   atomicStore(buf[((((0u ^ ((next_virtual_gid))) >> 0u) / 1u))], (uint(uint((clamp(((uint(2)) | (~ (~ ((((max((clamp(max(uint(2), (max(uint(2), uint(2)))), max(uint(2), (max(uint(2), uint(2)))), max(uint(2), (max(uint(2), uint(2)))))), max(uint(2), (max(uint(2), uint(2)))))))))))), ((uint(2)) | (~ (~ ((((max((clamp(max(uint(2), (max(uint(2), uint(2)))), max(uint(2), (((((max(((uint(2)) >> 0u), uint(2))) << 0u)) | 0u))), max(uint(2), (max(uint(2), uint(2)))))), max(uint(2), ((min(max(uint(2), uint(2)), max(uint(2), uint(2)))))))))))))), ((uint(2)) | (~ (~ ((((max((clamp(max(uint(2), (max(uint(2), uint(2)))), max(uint(2), (max(((uint(2)) | 0u), uint(2)))), max(uint(2), (max(uint(2), uint(2)))))), max(uint(2), (max(uint(2), uint(2))))))))))))))))), ((max(int(ivec3((((1 * (((~ (~ (int(((int(4)) + (0 >> (int(8)))))))))))) >> 0), 1, 0)), int(ivec3(4, 1, 0))))), 64, 4);
  }
 else
  {
   atomicStore(buf[next_virtual_gid], ((uint(2)) + 0u), 4, ((64) << 0), ((4) + 0));
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
