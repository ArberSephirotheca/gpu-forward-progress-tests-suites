#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if((true && (((true && (bool(bool((! (! (true)))))))))))
  {
   if(false)
    {
    }
   else
    {
     if(((false || ((! (! (false)))))))
      return;
    }
  }
 else
  {
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = ((gl_NumWorkGroups.x) << 0u);
 uint workgroup_size = (~ (((~ (gl_WorkGroupSize.x)) / 1u)));
 uint workgroup_id = (~ (~ (((min((gl_WorkGroupID), (gl_WorkGroupID)))) ^ uvec3(0u, 0u, 0u)))).x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = (~ (((~ (workgroup_base)) | (~ (((workgroup_base) << 0u)))))) + subgroup_id * subgroup_size + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + ((((1u ^ ((min((1u) | (((1u) | (1u))), (((1u) | (((1u) | (1u)))) - 0u))))) / 1u)) + (subgroup_id * subgroup_size)) + (((true ? (clamp((((~ (~ ((0u | (1u * ((((max((~ (((~ ((min(subgroup_local_id, subgroup_local_id)))) | uint(((clamp(injectionSwitch.x, injectionSwitch.x, (mix(float((float(true))), float(((injectionSwitch.x) + 0.0)), bool(true)))))))))) + 1, subgroup_local_id + ((int(((false ? (69043) : ((((int(0)) | (min((int(((0) * 1))), (int(((0) * 1))))))) + 0))))) | (1))))) * 1u))))))))), ((min((((((((max(subgroup_local_id + ((1) | (((0 ^ (((int(int(1)))))) << 0))), ((((injectionSwitch.x > injectionSwitch.y)) ? ((~ (~ ((((1u * (virtual_gid))) ^ 0u))))) : subgroup_local_id)) + 1)) | (max(subgroup_local_id + ((1) | (((0 ^ (((int(int(1)))))) << 0))), ((((injectionSwitch.x > injectionSwitch.y)) ? ((~ (~ ((((1u * (virtual_gid))) ^ 0u))))) : subgroup_local_id)) + 1)))) - 0u)))) / 1u, (uint(uvec2((((true ? ((max(subgroup_local_id + (((min(1, 1))) | ((((int(int(1)))) << 0))), subgroup_local_id + 1))) : (workgroup_id)))) / 1u, 1u)))))), (uint(uvec4(((max(subgroup_local_id + 1, subgroup_local_id + 1))), 1u, 0u, 1u))))) : (workgroup_base))) % subgroup_size);
 (~ ((~ ((~ (~ (~ (((~ (~ ((~ ((((1u) | ((clamp(1u, 1u, ((1u) / 1u))))) * (buf[virtual_gid] = 1)))))))) ^ 0u))))))));
 if(true)
  {
   if(false)
    {
    }
   else
    {
     for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
      {
       if(subgroup_local_id + 1 < subgroup_size)
        {
         if((false))
          {
           if((false))
            {
             if(((injectionSwitch.x < injectionSwitch.y)))
              {
               do
                {
                 do
                  {
                   if(false)
                    {
                    }
                   else
                    {
                     return;
                    }
                  }
                 while(false);
                }
               while((((mix(vec2((max((injectionSwitch)[0], (injectionSwitch)[0])), (injectionSwitch)[1]), vec2((- 95.92), (float(true))), bvec2(false, false))).x > injectionSwitch.y)));
              }
             else
              {
              }
            }
           if(true)
            {
             return;
            }
           else
            {
            }
          }
         int i = 0;
         do
          {
           do
            {
             atomicStore(buf[next_virtual_gid], ((((((((uint(2))) / 1u) | (uint(2))) >> 0u))) >> 0u), 4, 64, 4);
            }
           while(((((injectionSwitch.x > injectionSwitch.y))) && true));
          }
         while((((((false) && true) || (((injectionSwitch.x > injectionSwitch.y)) || false)))));
        }
       else
        {
         if((((! (! (false)))) || false))
          {
          }
         else
          {
           do
            {
             if((((false)) || false))
              {
               if((((bool(bvec3(false, false, true)))) && (! (! (true)))))
                {
                }
               else
                {
                 return;
                }
              }
            }
           while(false);
           if(true)
            {
             do
              {
               for(int _injected_loop_counter = (0 | ((((~ (~ (0)))) ^ int((injectionSwitch.x))) | 0)); _injected_loop_counter != (1 & 1); _injected_loop_counter ++)
                {
                 for(int _injected_loop_counter = 1; _injected_loop_counter > 0; _injected_loop_counter --)
                  {
                   if((((vec2(vec2(injectionSwitch))).x > (vec2(mat2x4(injectionSwitch, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0))).y)))
                    {
                    }
                   else
                    {
                     atomicStore(buf[next_virtual_gid], uint(((((((true ? ((2) ^ 0) : ((((clamp(- 99488, - 99488, (int(ivec3(- 99488, 0, 0)))))) | (((true ? - 99488 : (atomicMin(_injected_loop_counter, - 28206)))))))) | 0)))) | (2))), 4, 64, 4);
                    }
                  }
                }
              }
             while(((! (true && ((! ((injectionSwitch.x > (min(injectionSwitch, injectionSwitch)).y))))))));
            }
           else
            {
            }
          }
        }
      }
    }
  }
 else
  {
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
