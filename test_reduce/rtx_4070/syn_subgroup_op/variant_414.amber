#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = (~ (~ (clamp(((clamp(((uint(uint((~ ((~ ((((((1u * (gl_WorkGroupSize.x)) + uint((mix(float((injectionSwitch.x)), float((- 4.9)), bool((! (! (false)))))))))) / 1u))))))))), ((uint(uint((~ ((~ ((((((~ (~ ((1u * (gl_WorkGroupSize.x))))) + uint((mix(float((injectionSwitch.x)), float((- 4.9)), bool((! ((true && (! (false)))))))))))) / 1u))))))))), ((uint(uint((~ ((~ ((((((1u * (gl_WorkGroupSize.x)) + uint((mix(float((injectionSwitch.x)), float((- 4.9)), bool((! (! (false)))))))))) / 1u))))))))))) | 0u), (uint(uint((~ ((~ (uint(uvec3((max(((((((1u * (gl_WorkGroupSize.x)) + uint((injectionSwitch.x))))) / ((1u) | (1u)))), ((((((1u * (gl_WorkGroupSize.x)) + uint((injectionSwitch.x))))) / ((1u) | (1u)))))), 1u, 1u))))))))), (uint(uint((~ ((true ? (clamp(((((min((~ ((((((1u * (gl_WorkGroupSize.x)) + uint((injectionSwitch.x))))) / 1u))), (~ ((((((0u ^ ((~ (~ ((1u * (gl_WorkGroupSize.x)) + uint((injectionSwitch.x)))))))))) / 1u)))))) - 0u)), ((((min((~ ((((((1u * (gl_WorkGroupSize.x)) + uint((injectionSwitch.x))))) / 1u))), (~ ((((((0u ^ ((~ (~ ((1u * (gl_WorkGroupSize.x)) + uint((injectionSwitch.x)))))))))) / 1u)))))) - 0u)), ((((min((~ ((((((1u * (gl_WorkGroupSize.x)) + uint((injectionSwitch.x))))) / 1u))), (~ ((((((0u ^ ((~ (~ ((1u * (gl_WorkGroupSize.x)) + uint((injectionSwitch.x)))))))))) / 1u)))))) - 0u)))) : (num_workgroup)))))))))));
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = ((((1u * (((1u) | (1u))))) + 0u) * (((workgroup_base + subgroup_id * subgroup_size) << 0u))) + subgroup_local_id;
 uint next_virtual_gid = ((0u ^ ((workgroup_base + (((max(subgroup_id, subgroup_id))) ^ 0u) * ((true ? subgroup_size : (atomicMin(subgroup_size, subgroup_local_id)))) + (min(((((((((clamp((min(0u ^ ((max(subgroup_local_id + 1, subgroup_local_id + 1))), 0u ^ (((((uint(uvec4(max(subgroup_local_id + 1, subgroup_local_id + 1), 0u, 1u, (0u ^ 0u))))) ^ 0u))))), 0u ^ ((max(subgroup_local_id + 1, subgroup_local_id + 1))), ((0u ^ ((max(subgroup_local_id + 1, ((subgroup_local_id) / 1u) + 1)))) ^ 0u))))) % subgroup_size) - 0u)) << 0u)), ((((clamp((((uint(uvec4(uint(uint(min(0u ^ ((max(subgroup_local_id + 1, subgroup_local_id + 1))), 0u ^ (((((uint(uvec4(max(subgroup_local_id + 1, subgroup_local_id + 1), 0u, 1u, (0u ^ 0u))))) ^ 0u)))))), 0u, 1u, 0u))))), 0u ^ ((max(subgroup_local_id + 1, subgroup_local_id + 1))), ((0u ^ ((max(subgroup_local_id + 1, ((subgroup_local_id) / (((uint(uvec3(1u, 0u, 1u))) * 1u))) + 1)))) ^ 0u))))) % subgroup_size)))))) >> 0u);
 buf[virtual_gid] = 1;
 if((0u + (subgroup_local_id + 1)) < subgroup_size)
  {
   buf[next_virtual_gid] = 2;
   subgroupAll(false);
  }
 else
  {
   buf[next_virtual_gid] = (0 ^ (2));
   subgroupAll((! (! (true))));
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
