#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec3 GLF_merged3_0_1_13_1_1_13_2_1_14num_workgroupsubgroup_sizeworkgroup_base;
 if((false))
  return;
 uvec4 GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_11subgroup_idsubgroup_local_idsubgroup_sizevirtual_gid;
 uvec4 GLF_merged4_0_1_17_1_1_13_2_1_14_3_1_14subgroup_local_idsubgroup_sizeworkgroup_baseworkgroup_size;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((false))
  return;
 if((false))
  return;
 uvec2 GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gid;
 if((false))
  return;
 uint subgroup_id = gl_SubgroupID;
 GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_11subgroup_idsubgroup_local_idsubgroup_sizevirtual_gid.x = subgroup_id;
 uint subgroup_size = gl_SubgroupSize;
 GLF_merged3_0_1_13_1_1_13_2_1_14num_workgroupsubgroup_sizeworkgroup_base.y = subgroup_size;
 GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_11subgroup_idsubgroup_local_idsubgroup_sizevirtual_gid.z = (((~ (~ (GLF_merged3_0_1_13_1_1_13_2_1_14num_workgroupsubgroup_sizeworkgroup_base.y)))) << 0u);
 GLF_merged4_0_1_17_1_1_13_2_1_14_3_1_14subgroup_local_idsubgroup_sizeworkgroup_baseworkgroup_size.y = GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_11subgroup_idsubgroup_local_idsubgroup_sizevirtual_gid.z;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if((((((((injectionSwitch.x > injectionSwitch.y))) && true)) || false)))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 ((~ (~ ((GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_11subgroup_idsubgroup_local_idsubgroup_sizevirtual_gid.y = subgroup_local_id)))) + 0u);
 GLF_merged4_0_1_17_1_1_13_2_1_14_3_1_14subgroup_local_idsubgroup_sizeworkgroup_baseworkgroup_size.x = GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_11subgroup_idsubgroup_local_idsubgroup_sizevirtual_gid.y;
 if((! (! ((false)))))
  return;
 uint num_workgroup = gl_NumWorkGroups.x;
 if((false))
  return;
 GLF_merged3_0_1_13_1_1_13_2_1_14num_workgroupsubgroup_sizeworkgroup_base.x = num_workgroup;
 GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gid.x = (clamp(GLF_merged3_0_1_13_1_1_13_2_1_14num_workgroupsubgroup_sizeworkgroup_base.x, GLF_merged3_0_1_13_1_1_13_2_1_14num_workgroupsubgroup_sizeworkgroup_base.x, GLF_merged3_0_1_13_1_1_13_2_1_14num_workgroupsubgroup_sizeworkgroup_base.x));
 if((false))
  return;
 uint workgroup_size = gl_WorkGroupSize.x;
 if((false))
  return;
 GLF_merged4_0_1_17_1_1_13_2_1_14_3_1_14subgroup_local_idsubgroup_sizeworkgroup_baseworkgroup_size.w = workgroup_size;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = GLF_merged4_0_1_17_1_1_13_2_1_14_3_1_14subgroup_local_idsubgroup_sizeworkgroup_baseworkgroup_size.w * workgroup_id;
 GLF_merged3_0_1_13_1_1_13_2_1_14num_workgroupsubgroup_sizeworkgroup_base.z = workgroup_base;
 if((false))
  {
   if(((! (! ((! (! ((bool(bvec2(false, false)))))))))))
    {
     if((false))
      return;
     return;
    }
   return;
  }
 if((false))
  return;
 GLF_merged4_0_1_17_1_1_13_2_1_14_3_1_14subgroup_local_idsubgroup_sizeworkgroup_baseworkgroup_size.z = GLF_merged3_0_1_13_1_1_13_2_1_14num_workgroupsubgroup_sizeworkgroup_base.z;
 uint virtual_gid = GLF_merged4_0_1_17_1_1_13_2_1_14_3_1_14subgroup_local_idsubgroup_sizeworkgroup_baseworkgroup_size.z + (0u | (GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_11subgroup_idsubgroup_local_idsubgroup_sizevirtual_gid.x * GLF_merged4_0_1_17_1_1_13_2_1_14_3_1_14subgroup_local_idsubgroup_sizeworkgroup_baseworkgroup_size.y)) + GLF_merged4_0_1_17_1_1_13_2_1_14_3_1_14subgroup_local_idsubgroup_sizeworkgroup_baseworkgroup_size.x;
 if((false))
  return;
 if(((false || (((false)) && (bool(bool(true)))))))
  return;
 if(((false || (false))))
  return;
 if((false))
  return;
 GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_11subgroup_idsubgroup_local_idsubgroup_sizevirtual_gid.w = virtual_gid;
 if((false))
  return;
 ((((((false ? (atomicMax(virtual_gid, workgroup_size)) : GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gid.y = GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_11subgroup_idsubgroup_local_idsubgroup_sizevirtual_gid.w) ^ 0u)) * 1u)));
 uint next_virtual_gid = GLF_merged4_0_1_17_1_1_13_2_1_14_3_1_14subgroup_local_idsubgroup_sizeworkgroup_baseworkgroup_size.z + (((((0u ^ ((bool(bvec3(true, true, true))) ? (min((clamp((uvec4(1u, 1u, 1u, 1u) * (GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_11subgroup_idsubgroup_local_idsubgroup_sizevirtual_gid)), (uvec4(1u, 1u, 1u, 1u) * (GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_11subgroup_idsubgroup_local_idsubgroup_sizevirtual_gid)), (uvec4(1u, 1u, 1u, 1u) * (GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_11subgroup_idsubgroup_local_idsubgroup_sizevirtual_gid)))).x, (~ (~ ((max(GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_11subgroup_idsubgroup_local_idsubgroup_sizevirtual_gid.x, GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_11subgroup_idsubgroup_local_idsubgroup_sizevirtual_gid.x))))))) : ((uint((uvec2(0u, 0u) | ((~ (~ (uvec2(GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gid.y, 1u)))))))))))) - 0u))) * GLF_merged4_0_1_17_1_1_13_2_1_14_3_1_14subgroup_local_idsubgroup_sizeworkgroup_baseworkgroup_size.y + ((((min((GLF_merged4_0_1_17_1_1_13_2_1_14_3_1_14subgroup_local_idsubgroup_sizeworkgroup_baseworkgroup_size.x + (((min(1, 1))) >> 0)) % ((GLF_merged4_0_1_17_1_1_13_2_1_14_3_1_14subgroup_local_idsubgroup_sizeworkgroup_baseworkgroup_size.y) | 0u), (GLF_merged4_0_1_17_1_1_13_2_1_14_3_1_14subgroup_local_idsubgroup_sizeworkgroup_baseworkgroup_size.x + 1) % GLF_merged4_0_1_17_1_1_13_2_1_14_3_1_14subgroup_local_idsubgroup_sizeworkgroup_baseworkgroup_size.y)) ^ uint((injectionSwitch.x)))));
 if(((true && (false))))
  return;
 ((buf[GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gid.y] = 1) / uint((injectionSwitch.y)));
 if((false))
  return;
 if((min((uint(uint(((min(clamp((uvec4(GLF_merged4_0_1_17_1_1_13_2_1_14_3_1_14subgroup_local_idsubgroup_sizeworkgroup_baseworkgroup_size[0], GLF_merged4_0_1_17_1_1_13_2_1_14_3_1_14subgroup_local_idsubgroup_sizeworkgroup_baseworkgroup_size[1], GLF_merged4_0_1_17_1_1_13_2_1_14_3_1_14subgroup_local_idsubgroup_sizeworkgroup_baseworkgroup_size[2], GLF_merged4_0_1_17_1_1_13_2_1_14_3_1_14subgroup_local_idsubgroup_sizeworkgroup_baseworkgroup_size[3])), ((false ? (GLF_merged4_0_1_17_1_1_13_2_1_14_3_1_14subgroup_local_idsubgroup_sizeworkgroup_baseworkgroup_size) : GLF_merged4_0_1_17_1_1_13_2_1_14_3_1_14subgroup_local_idsubgroup_sizeworkgroup_baseworkgroup_size)), GLF_merged4_0_1_17_1_1_13_2_1_14_3_1_14subgroup_local_idsubgroup_sizeworkgroup_baseworkgroup_size), clamp((uvec4(GLF_merged4_0_1_17_1_1_13_2_1_14_3_1_14subgroup_local_idsubgroup_sizeworkgroup_baseworkgroup_size[0], GLF_merged4_0_1_17_1_1_13_2_1_14_3_1_14subgroup_local_idsubgroup_sizeworkgroup_baseworkgroup_size[1], GLF_merged4_0_1_17_1_1_13_2_1_14_3_1_14subgroup_local_idsubgroup_sizeworkgroup_baseworkgroup_size[2], GLF_merged4_0_1_17_1_1_13_2_1_14_3_1_14subgroup_local_idsubgroup_sizeworkgroup_baseworkgroup_size[3])), ((false ? (GLF_merged4_0_1_17_1_1_13_2_1_14_3_1_14subgroup_local_idsubgroup_sizeworkgroup_baseworkgroup_size) : GLF_merged4_0_1_17_1_1_13_2_1_14_3_1_14subgroup_local_idsubgroup_sizeworkgroup_baseworkgroup_size)), GLF_merged4_0_1_17_1_1_13_2_1_14_3_1_14subgroup_local_idsubgroup_sizeworkgroup_baseworkgroup_size)))).x + 1))), ((((false ? (atomicMin(subgroup_local_id, virtual_gid)) : ((GLF_merged4_0_1_17_1_1_13_2_1_14_3_1_14subgroup_local_idsubgroup_sizeworkgroup_baseworkgroup_size.x) * 1u)))) | (GLF_merged4_0_1_17_1_1_13_2_1_14_3_1_14subgroup_local_idsubgroup_sizeworkgroup_baseworkgroup_size.x)) + 1)) < GLF_merged4_0_1_17_1_1_13_2_1_14_3_1_14subgroup_local_idsubgroup_sizeworkgroup_baseworkgroup_size.y)
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   buf[next_virtual_gid] = ((2) | (((2) + 0)));
   subgroupAll(false);
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    return;
  }
 else
  {
   buf[next_virtual_gid] = 2;
   subgroupAll(true);
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
