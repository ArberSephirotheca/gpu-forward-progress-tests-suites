#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 430

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = (((((uvec3(uvec4((uvec3(uvec4((max(gl_WorkGroupID, (((bool(bvec3(false, false, false))) ? (((((true ? ((uvec3((uint(((((~ (~ ((uvec4(((0u ^ 0u) ^ (8126u)), uint(((max(injectionSwitch.x, injectionSwitch.x)))), 0u, 0u)) << uvec4(0u, 0u, 0u, 0u))))) * uvec4(((1u) / uint((injectionSwitch.y))), 1u, 1u, 1u))))), (clamp(((((((38943u) >> 0u)) - (((1u * (0u))) | 0u)) | ((((38943u) >> 0u)) - 0u))), (clamp(((38943u) >> (min(0u, 0u))), (((false ? (13684u) : uint(uvec2(((38943u) >> (min(0u, 0u))), 0u))))), ((38943u) >> (min(0u, 0u))))), ((38943u) >> 0u))), ((((((((min((90354u), (90354u))))) >> ((clamp((min(uint((injectionSwitch.x)) ^ 0u, (max(uint((injectionSwitch.x)) ^ 0u, uint((injectionSwitch.x)) ^ 0u)))), (((min(uint((injectionSwitch.x)) ^ 0u, (max(uint((injectionSwitch.x)) ^ 0u, uint((injectionSwitch.x)) ^ 0u))))) | ((min(uint((injectionSwitch.x)) ^ 0u, (max(uint((injectionSwitch.x)) ^ 0u, uint((injectionSwitch.x)) ^ 0u)))))), (min(uint((injectionSwitch.x)) ^ 0u, (max(uint((injectionSwitch.x)) ^ 0u, uint((injectionSwitch.x)) ^ 0u)))))))) - 0u) ^ 0u)) - 0u)))) : (uvec3(90296u, 177795u, 104828u))))) / uvec3(1u, 1u, 1u)) + uvec3(0u, 0u, 0u)) : ((gl_WorkGroupID) / uvec3(1u, 1u, 1u)))))), 1u))), 0u)))) - uvec3(0u, 0u, 0u))) ^ uvec3(0u, 0u, 0u)).x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = ((false ? ((((1u * (((true ? (false ? (~ ((clamp(~ (subgroup_local_id), ~ (subgroup_local_id), ~ (~ (~ ((subgroup_local_id)))))))) : (0u + (atomicCompSwap(subgroup_local_id, num_workgroup, num_workgroup)))) : (subgroup_local_id)))))) << 0u)) : workgroup_base + subgroup_id * (uint(uvec4(((subgroup_size) | 0u), 1u, 0u, 1u))))) + subgroup_local_id;
 uint next_virtual_gid = (((max((clamp(workgroup_base, workgroup_base, (max(workgroup_base, workgroup_base)))) + subgroup_id * (((! (! (false))) ? (workgroup_base) : (min(subgroup_size, ((true ? (((((min(subgroup_size, subgroup_size))) - (0u & 136371u))) | (0u >> (uint((max(4u, 4u)))))) : (workgroup_base))))))) + (((((0u ^ (((subgroup_local_id + 1) ^ (((min(0u, 0u))) << 0u))))) % subgroup_size)) | (((subgroup_local_id + 1) % subgroup_size))), workgroup_base + subgroup_id * (((max(uint(((uvec4((~ (~ (((! (! (false))) ? (clamp((0u | ((workgroup_base))), (workgroup_base), (workgroup_base))) : (min(subgroup_size, ((subgroup_size) | (0u >> (uint(4u)))))))))), 1u, 1u, 1u)) | uvec4(0u, 0u, 0u, 0u))), uint(((uvec4((~ (~ (((! (! (false))) ? (clamp((0u | ((workgroup_base))), (workgroup_base), (workgroup_base))) : (min(subgroup_size, ((subgroup_size) | (0u >> (uint(4u)))))))))), 1u, 1u, 1u)) | uvec4(0u, 0u, 0u, 0u))))))) + ((((subgroup_local_id + 1) % (((0u | (subgroup_size))) | 0u))) | (((((subgroup_local_id + 1) % subgroup_size)) - (0u >> (uint(8u))))))))) >> 0u);
 (0u ^ (buf[virtual_gid] = (min(((1) + ((false ? ((true ? (- 27134) : (21130))) : 0))), 1))));
 if((((((injectionSwitch.x < injectionSwitch.y)) && (((subgroup_local_id) ^ 0u) + ((1 * ((1))) << 0) < ((((((subgroup_size) - 0u)) * ((1u << (uint(5u))) >> (uint(5u))))) | ((max((1u * (subgroup_size)), subgroup_size)))))) && true)))
  {
   int i = 0;
   atomicStore(buf[(uint((uvec2(0u, 0u) ^ (uvec2(next_virtual_gid, 0u)))))], uint(2), 4, 64, 0);
  }
 else
  {
   atomicStore(buf[next_virtual_gid], ((true ? uint(2) : (workgroup_id))), 4, 64, 0);
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
