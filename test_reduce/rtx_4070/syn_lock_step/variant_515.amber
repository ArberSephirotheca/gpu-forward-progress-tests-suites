#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if((((((false || (((bool(bvec2((bool(bvec3(bool(bvec4(bool(bvec4(bool(bool(false || (false))), true, (! ((((injectionSwitch.x < injectionSwitch.y)) && (! (true))))), ((injectionSwitch.x < injectionSwitch.y)))), true, true, false)), false, true))), false)))))))))))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = (min(((((((((uvec3(uvec3(uvec3(0u, 0u, 0u) >> (uvec3(3u))))) * uvec3(1u, 1u, 1u)))) | (((uvec3(0u, 0u, 0u) + ((clamp((uvec3(0u, 0u, 0u)) ^ uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u) ^ ((uvec3(0u, 0u, 0u)) ^ uvec3(0u, 0u, 0u))), (uvec3(0u, 0u, 0u)) ^ uvec3(0u, 0u, 0u)))))))) | ((((uvec3(0u, 0u, 0u) ^ (clamp((uvec3(1u, 1u, 1u)), (uvec3(1u, 1u, 1u)), (uvec3(1u, 1u, 1u)))))) ^ uvec3(0u, 0u, 0u)) * (((((uvec3(0u, 0u, 0u)) | uvec3(0u, 0u, 0u))) ^ uvec3(0u, 0u, 0u)))))) ^ (((gl_WorkGroupID) | uvec3(0u, 0u, 0u)))), (((((uvec3(0u, 0u, 0u) >> (uvec3(3u))) | ((uvec3(uvec3(((uvec3(0u, 0u, 0u)) ^ uvec3(0u, 0u, 0u))))))) | ((uvec3(1u, 1u, 1u) * (((clamp(((uvec3(0u, 0u, 0u) ^ (uvec3(1u, 1u, 1u)))), ((((((uvec3(0u, 0u, 0u) ^ (uvec3(1u, 1u, 1u)))))) | uvec3(0u, 0u, 0u)) >> uvec3(0u, 0u, 0u)), ((uvec3(0u, 0u, 0u) ^ (uvec3(1u, 1u, 1u)))))) ^ uvec3(0u, 0u, 0u)) * (((uvec3(0u, 0u, 0u)) | uvec3(0u, 0u, 0u)))))))) ^ (gl_WorkGroupID)))).x;
 uint workgroup_base = ((~ (~ (~ (~ ((~ (~ (((true ? (((((true ? 0u | (workgroup_size) : (workgroup_size))))) | 0u) : (atomicAnd(subgroup_size, workgroup_id))))))))))))) * (max((min(workgroup_id, workgroup_id)), ((uint((injectionSwitch.x)) | ((min(uint(uvec3(workgroup_id, 0u, 0u)), (min((((((0u ^ (uint(uvec3(workgroup_id, 0u, 0u))))) * 1u)) | 0u), (((0u ^ (uint(uvec3(workgroup_id, 0u, 0u))))) * 1u))))))))));
 uint virtual_gid = (((((false ? (subgroup_local_id) : (0u ^ (max(workgroup_base, workgroup_base))))))) | (workgroup_base)) + ((subgroup_id) >> 0u) * subgroup_size + subgroup_local_id;
 uint next_virtual_gid = (clamp(workgroup_base, workgroup_base, workgroup_base)) + subgroup_id * subgroup_size + ((~ (~ ((((subgroup_local_id) >> 0u) + 1)))) % subgroup_size);
 ((0u >> (uint(1u))) ^ (0u ^ ((((((buf[virtual_gid] = 1) >> 0u)) + 0u)))));
 (uint((injectionSwitch.x)) | (buf[next_virtual_gid] = 2));
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
