#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(sqrt(vec2(1.0, 1.0)), vec2(1.0, 1.0) * (sqrt(vec2(1.0, 1.0)))) * (injectionSwitch)).x > injectionSwitch.y))))
  return;
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false))), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false)))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           barrier();
          }
         return;
        }
       barrier();
      }
    }
   else
    {
    }
   return;
  }
uint subgroup_size = 16;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(atanh(-1.3))))))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, (false ? _GLF_FUZZED(min(uvec3(123655u, 45331u, 136858u), uvec3(47773u, 109085u, 114838u))) : gl_NumWorkGroups))) << uvec3(_GLF_IDENTITY(0u, min(0u, _GLF_IDENTITY(0u, (0u) | (0u)))), 0u, 0u)).x;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)), (false) || false)))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_injected_loop_counter --, 0 + (_injected_loop_counter --)))
            {
             return;
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), true), bvec2(bvec3(bvec2(_GLF_DEAD(false), true), true)))), ! (! (bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), _GLF_IDENTITY(true, bool(bvec4(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))), bvec2(bvec3(bvec2(_GLF_DEAD(false), true), true)))))))))
        return;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bool(false)))))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(98.75) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-1287.1446))), _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))), max(injectionSwitch.y, injectionSwitch.y)), (true ? injectionSwitch.y : _GLF_FUZZED(15.84)))))))))
            barrier();
           return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
        }
       if(_GLF_DEAD(false))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], clamp(injectionSwitch[1], injectionSwitch[1], injectionSwitch[1])))).x, injectionSwitch.x)), injectionSwitch.x)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
          }
         else
          {
           barrier();
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          break;
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          barrier();
         barrier();
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat4(injectionSwitch, sin(0.0), 1.0, abs(0.0), 1.0, determinant(mat3(0.0, 1.0, 0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), abs(0.0), 0.0, 0.0, 0.0, 0.0)), 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, abs(1.0)))).x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
        }
      }
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat4x2(injectionSwitch.y, 1.0, tan(0.0), 1.0, 1.0, sin(0.0), exp(0.0), 1.0), (false ? _GLF_FUZZED(mat4x2(54.97, 84.54, -54.83, 76.36, -35.57, 49.54, 4804.8562, 4416.0997)) : mat4x2(injectionSwitch.y, 1.0, tan(0.0), 1.0, 1.0, sin(0.0), exp(0.0), 1.0)))))))))
      return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = _GLF_IDENTITY(1, clamp(1, 1, 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-666.364)), float(0.0), bool(_GLF_TRUE(_GLF_IDENTITY(true, ! (! (true))), (injectionSwitch.x < injectionSwitch.y))))))).x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), true && (_GLF_IDENTITY(! (! (false)), bool(bvec4(! (! (false)), true, false, false))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
      }
     barrier();
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, sqrt(vec2(1.0, 1.0)) * (injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(exp(0.0), 1.0)), dot(vec2(0.0, 0.0), vec2(exp(0.0), 1.0))))))))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    {
     do
      {
       return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         do
          {
           barrier();
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, (false) || false))))
              barrier();
            }
           else
            {
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x > injectionSwitch.y))));
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = _GLF_IDENTITY((int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(_GLF_IDENTITY(7, 0 + (_GLF_IDENTITY(_GLF_IDENTITY(7, (7) | (7)), 0 ^ (_GLF_IDENTITY(7, (7) / 1)))))), int(7))), max((int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(_GLF_IDENTITY(7, 0 + (_GLF_IDENTITY(_GLF_IDENTITY(7, (7) | (7)), 0 ^ (_GLF_IDENTITY(7, (7) / 1)))))), int(7))), (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(_GLF_IDENTITY(7, 0 + (_GLF_IDENTITY(_GLF_IDENTITY(7, (7) | (7)), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(7, (7) / 1), min(_GLF_IDENTITY(7, (7) / 1), _GLF_IDENTITY(_GLF_IDENTITY(7, (7) / 1), min(_GLF_IDENTITY(7, (7) / 1), _GLF_IDENTITY(7, (7) / 1)))))))))), int(7))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, _GLF_IDENTITY((1) | _GLF_IDENTITY(0, (0) * 1), _GLF_IDENTITY((_GLF_IDENTITY((1) | _GLF_IDENTITY(0, (0) * 1), 0 ^ ((1) | _GLF_IDENTITY(0, (0) * 1)))) ^ 0, ((_GLF_IDENTITY((1) | _GLF_IDENTITY(0, (0) * 1), 0 ^ ((1) | _GLF_IDENTITY(0, (0) * 1)))) ^ 0) | ((_GLF_IDENTITY((1) | _GLF_IDENTITY(0, (0) * 1), 0 ^ ((1) | _GLF_IDENTITY(0, (0) * 1)))) ^ 0))))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec4(true, false, true, false)))) && true)))
          {
           return;
          }
         else
          {
          }
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(false))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(distance(-53.16, 2041.1258)) : injectionSwitch[1])))).y, true && (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x, min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(max(injectionSwitch, injectionSwitch), max(_GLF_IDENTITY(max(injectionSwitch, injectionSwitch), mix(vec2(_GLF_FUZZED(4185.8087), (max(injectionSwitch, injectionSwitch))[1]), vec2((max(injectionSwitch, injectionSwitch))[0], _GLF_FUZZED(9.9)), bvec2(true, false))), max(injectionSwitch, injectionSwitch)))).x)) > injectionSwitch.y))))))
  {
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
            return;
           do
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            break;
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), true && (_GLF_IDENTITY(false, ! (! (false)))))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))), (((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))) ^ 0) & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 barrier();
                }
              }
             return;
            }
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)))))))))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * determinant(mat4(1.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0)), 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, round(length(normalize(1.0))), 0.0, 0.0, abs(0.0), 0.0, 1.0)))))))
            {
             if(_GLF_DEAD(false))
              continue;
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((1 | _GLF_IDENTITY(1, int(ivec2(1, 1)))), ((1 | _GLF_IDENTITY(1, int(ivec2(1, _GLF_IDENTITY(1, (1) / _GLF_IDENTITY(1, clamp(1, 1, 1)))))))) * ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))))); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                 barrier();
                }
              }
             break;
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           barrier();
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))))))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true, true)), ! (! (bool(bvec3(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true, false)))))), true, true))))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, bool(bvec3(false, true, false))))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true))))))
            {
             return;
            }
           else
            {
            }
          }
         barrier();
        }
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       return;
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), true && (_GLF_IDENTITY(false, ! (! (false))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, false || (false)), true, true, false)), bool(bvec4(bool(bvec4(_GLF_IDENTITY(false, false || (false)), true, true, false)), true, true, false)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), true && (_GLF_IDENTITY((false), true && ((false)))))), true, true, false)), bool(bvec4(bool(bvec4(_GLF_IDENTITY(false, false || (false)), true, true, false)), true, true, false))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, false || (false)), true, true, false)), bool(bvec4(bool(bvec4(_GLF_IDENTITY(false, false || (false)), true, true, false)), true, true, false))))), ! (! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, false || (false)), true, true, false)), bool(bvec4(bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), bool(bvec2(false || (false), true)))), true, true, false)), true, true, false))))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, false || (false)), true, true, false)), bool(bvec4(bool(bvec4(_GLF_IDENTITY(false, false || (false)), true, true, false)), true, true, false))))), ! (! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, false || (false)), true, true, false)), bool(bvec4(bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), bool(bvec2(false || (false), true)))), true, true, false)), true, true, false))))))))), (! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, false || (false)), true, true, false)), bool(bvec4(bool(bvec4(_GLF_IDENTITY(false, false || (false)), true, true, false)), true, true, false))))), ! (! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, false || (false)), true, true, false)), bool(bvec4(bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), bool(bvec2(false || (false), true)))), true, true, false)), true, true, false)))))))))) || false)), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, false || (false)), true, true, false)), bool(bvec4(bool(bvec4(_GLF_IDENTITY(false, false || (false)), true, true, false)), true, true, false))))), ! (! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, false || (false)), true, true, false)), bool(bvec4(bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), bool(bvec2(false || (false), true)))), true, true, false)), true, true, false))))))))), (! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, false || (false)), true, true, false)), bool(bvec4(bool(bvec4(_GLF_IDENTITY(false, false || (false)), true, true, false)), true, true, false))))), ! (! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, false || (false)), true, true, false)), bool(bvec4(bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), bool(bvec2(false || (false), true)))), true, true, false)), true, true, false)))))))))) || false))), (! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, false || (false)), true, true, false)), bool(bvec4(bool(bvec4(_GLF_IDENTITY(false, false || (false)), true, true, false)), true, true, false))))), ! (! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, false || (false)), true, true, false)), bool(bvec4(bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), bool(bvec2(false || (false), true)))), true, true, false)), true, true, false))))))))), (! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, false || (false)), true, true, false)), bool(bvec4(bool(bvec4(_GLF_IDENTITY(false, false || (false)), true, true, false)), true, true, false))))), ! (! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, false || (false)), true, true, false)), bool(bvec4(bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), bool(bvec2(false || (false), true)))), true, true, false)), true, true, false)))))))))) || false)))) && true)))))))))), bool(_GLF_IDENTITY(bool(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, false || (false)), true, true, false)), bool(bvec4(bool(bvec4(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), true && (_GLF_IDENTITY((false), true && ((false)))))), true, true, false)), true, true, false)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, false || (false)), true, true, false)), bool(bvec4(bool(bvec4(_GLF_IDENTITY(false, false || (false)), true, true, false)), true, _GLF_IDENTITY(true, (true) || false), false))))), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, false || (false)), true, true, false)), bool(bvec4(bool(bvec4(_GLF_IDENTITY(false, false || (false)), true, true, false)), true, true, false))))), ! (! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, false || (false)), true, true, false)), bool(bvec4(bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), bool(bvec2(false || (false), true)))), true, true, false)), true, true, false))))))))))))))), bool(bool(bool(! (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, false || (false)), true, true, false)), bool(bvec4(bool(bvec4(_GLF_IDENTITY(false, false || (false)), true, true, false)), true, true, false)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, false || (false)), true, true, false)), bool(bvec4(bool(bvec4(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY(true, true && (true)), true, false)), _GLF_IDENTITY(true, bool(bvec3(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true, false))))), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, false || (false)), true, true, false)), bool(bvec4(bool(bvec4(_GLF_IDENTITY(false, false || (false)), true, true, false)), true, true, false))))), ! (! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, false || (false)), true, true, false)), bool(bvec4(bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), bool(bvec2(false || (false), true)))), true, true, _GLF_IDENTITY(false, ! (! (false))))), true, true, false)))))))))))))))))))))), (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       return;
      }
    }
   barrier();
  }
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))
        continue;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      break;
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (((1 ^ 0) << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(mat3(injectionSwitch.y, 0.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, 1.0)), dot(vec2(1.0, 0.0), vec2(0.0, 1.0))), 0.0, 0.0, 1.0, 1.0)))))))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, false || (true)), false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, false || (true)), false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, false || (true)), false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, false || (true)), false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, false || (true)), false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, false || (true)), false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))), true && (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, false || (true)), false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, false || (true)), false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))), false, true)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
        }
       barrier();
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      return;
    }
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(float(139199u))), bool(false))))) > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true))), (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (int(_GLF_ONE(1.0, injectionSwitch.y)) & 1)); _injected_loop_counter ++)
      {
       return;
      }
    }
  }
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id, 0u | (workgroup_base + subgroup_id * subgroup_size + subgroup_local_id));
 if(_GLF_DEAD(false))
  return;
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base, 0u | (workgroup_base)) + subgroup_id * subgroup_size + ((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, 1u * (subgroup_local_id))) * 1u) + _GLF_IDENTITY(1, 0 + (1))) % _GLF_IDENTITY(subgroup_size, min(subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y))))) && true)) ? subgroup_size : _GLF_FUZZED(num_workgroup))), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y))))) ? subgroup_size : _GLF_FUZZED(num_workgroup))), max(_GLF_IDENTITY(subgroup_size, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))) ^ 0u) : _GLF_FUZZED(num_workgroup))), _GLF_IDENTITY(subgroup_size, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? subgroup_size : _GLF_FUZZED(num_workgroup)))))) << (185558u & 0u)), uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? subgroup_size : _GLF_FUZZED(num_workgroup))), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? subgroup_size : _GLF_FUZZED(num_workgroup))), max(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? subgroup_size : _GLF_FUZZED(num_workgroup))), clamp(_GLF_IDENTITY(subgroup_size, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? subgroup_size : _GLF_FUZZED(num_workgroup))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? subgroup_size : _GLF_FUZZED(num_workgroup))), 0u | (_GLF_IDENTITY(subgroup_size, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? subgroup_size : _GLF_FUZZED(num_workgroup))))), _GLF_IDENTITY(subgroup_size, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? subgroup_size : _GLF_FUZZED(num_workgroup))))), _GLF_IDENTITY(subgroup_size, (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0) < injectionSwitch.y)) ? subgroup_size : _GLF_FUZZED(num_workgroup)))))) << (185558u & 0u)), 1u, 1u, 0u), ~ (~ (uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) ? subgroup_size : _GLF_FUZZED(num_workgroup))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? subgroup_size : _GLF_FUZZED(num_workgroup))), max(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? subgroup_size : _GLF_FUZZED(num_workgroup))), uint(uvec2(_GLF_IDENTITY(subgroup_size, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? subgroup_size : _GLF_FUZZED(num_workgroup))), 1u))), _GLF_IDENTITY(subgroup_size, (_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec4((injectionSwitch.x < injectionSwitch.y), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))) ? subgroup_size : _GLF_FUZZED(num_workgroup)))))), _GLF_IDENTITY(((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? subgroup_size : _GLF_FUZZED(num_workgroup))), max(_GLF_IDENTITY(subgroup_size, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? subgroup_size : _GLF_FUZZED(num_workgroup))), _GLF_IDENTITY(subgroup_size, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? subgroup_size : _GLF_FUZZED(num_workgroup))))))), ~ (~ (((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? subgroup_size : _GLF_FUZZED(num_workgroup))), max(_GLF_IDENTITY(subgroup_size, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? subgroup_size : _GLF_FUZZED(num_workgroup))), _GLF_IDENTITY(subgroup_size, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? subgroup_size : _GLF_FUZZED(num_workgroup)))))))))) / 1u) << (185558u & 0u)), 1u, 1u, 0u)))))))));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false)))))
    barrier();
  }
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) || false), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))
    {
    }
   else
    {
     _GLF_IDENTITY(buf[virtual_gid] = 1, (buf[virtual_gid] = 1) >> uint(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(float(_GLF_IDENTITY(vec4(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, injectionSwitch.x)) + _GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, max(0.0, 0.0)) : _GLF_FUZZED(-307.883)))), 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0), (vec4(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, injectionSwitch.x)) + 0.0), 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0)) * vec4(1.0, 1.0, 1.0, 1.0))), mix(float(_GLF_FUZZED(-63.14)), float(float(_GLF_IDENTITY(vec4(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, injectionSwitch.x)) + 0.0), 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0), (vec4(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, injectionSwitch.x)) + 0.0), 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0)) * vec4(1.0, 1.0, _GLF_IDENTITY(1.0, float(vec4(_GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0, 0.0, 0.0))), 1.0)))), bool(true))))) / cos(_GLF_IDENTITY(0.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 0.0 : _GLF_FUZZED(3.0)))))));
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)), false || (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, (true) || false), false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && ((injectionSwitch.x > injectionSwitch.y))), ((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) - vec2(0.0, 0.0), (_GLF_IDENTITY((injectionSwitch) - vec2(0.0, 0.0), vec2(1.0, 1.0) * ((injectionSwitch) - vec2(0.0, 0.0)))) - sqrt(vec2(0.0, 0.0)))).x > injectionSwitch.y)) && true))))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (true ? _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, 0.0, sin(0.0), sin(0.0), 1.0, 0.0, 1.0))), injectionSwitch))[_GLF_IDENTITY(1, (false ? _GLF_FUZZED((-89425 * -52528)) : 1))] : _GLF_FUZZED(-33.64))))).y))))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), ! (! (_GLF_IDENTITY(false, bool(bool(false))))))), ! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false))))), bool(_GLF_IDENTITY(bvec2(! (_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec4(bvec2(! (_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false))))), (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false))))), bool(_GLF_IDENTITY(bvec2(! (_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec4(bvec2(! (_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false)))))) || false), (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false))))), bool(_GLF_IDENTITY(bvec2(! (_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, false || (false))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec4(bvec2(! (_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false))))), (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false))))), bool(_GLF_IDENTITY(bvec2(! (_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false))))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-3.4)), vec2(_GLF_FUZZED(vec3(6.2, -99.44, -84.03).g), (injectionSwitch)[1]), bvec2(false, true))).x < injectionSwitch.y))), bvec2(bvec4(bvec2(! (_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false)))))) || false)) && true))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! _GLF_IDENTITY((_GLF_WRAPPED_IF_FALSE(false)), ! (_GLF_IDENTITY(! ((_GLF_WRAPPED_IF_FALSE(false))), (! ((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) || false)))) && true))))))
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), 0 | (int(8)))))); _injected_loop_counter --)
        {
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (false) && true)));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, _GLF_IDENTITY((false), (_GLF_IDENTITY((false), false || ((false)))) && true) && true)))), (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      return;
    }
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(_GLF_IDENTITY(int(6), (int(6)) | 0), 0 ^ (_GLF_IDENTITY(int(6), (int(6)) | 0))))) >> _GLF_IDENTITY(int(6), int(6))), (((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) | 0))) >> _GLF_IDENTITY(int(6), int(6)))) | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) | 0))) >> _GLF_IDENTITY(int(6), int(6))), min(((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), (int(6)) ^ 0), _GLF_IDENTITY(int(6), (int(6)) | 0))) >> _GLF_IDENTITY(int(6), int(6))), ((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) | 0))) >> _GLF_IDENTITY(int(6), int(6))))))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(-77802 & 0, (-77802 & 0) >> 0))), (_GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(-77802 & 0, 0 | (-77802 & 0))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))); _injected_loop_counter --)
      {
       if(_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)) + 1 < _GLF_IDENTITY(subgroup_size, (0u | 0u) | (subgroup_size)))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y)))))))) && (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))))
            break;
           atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, max(next_virtual_gid, next_virtual_gid))], uint(2), _GLF_IDENTITY(_GLF_IDENTITY(4, (4) | (_GLF_IDENTITY(4, (4) << 0))), max(_GLF_IDENTITY(_GLF_IDENTITY(4, _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY(max(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (true ? int(_GLF_ZERO(_GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, (0.0) + 0.0) : _GLF_FUZZED(-1872.6655))), injectionSwitch.x)) : _GLF_FUZZED(-66539))), int(_GLF_ZERO(_GLF_IDENTITY(0.0, (0.0) - 0.0), injectionSwitch.x))), _GLF_IDENTITY(int(int(max(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY((true ? int(_GLF_ZERO(0.0, injectionSwitch.x)) : _GLF_FUZZED(-66539)), _GLF_IDENTITY((true ? (_GLF_IDENTITY(true ? int(_GLF_ZERO(0.0, injectionSwitch.x)) : _GLF_FUZZED(-66539), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : true ? int(_GLF_ZERO(0.0, injectionSwitch.x)) : _GLF_FUZZED(-66539)))) : _GLF_FUZZED(85836)), max((true ? (_GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false) ? int(_GLF_ZERO(0.0, injectionSwitch.x)) : _GLF_FUZZED(-66539), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : true ? int(_GLF_ZERO(0.0, injectionSwitch.x)) : _GLF_FUZZED(-66539)))) : _GLF_FUZZED(85836)), (true ? (_GLF_IDENTITY(true ? int(_GLF_ZERO(0.0, injectionSwitch.x)) : _GLF_FUZZED(-66539), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : true ? _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (int(_GLF_ZERO(0.0, injectionSwitch.x))) - 0)) << 0) : _GLF_FUZZED(-66539)))) : _GLF_FUZZED(85836)))))), _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), max(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x))))))), ~ (_GLF_IDENTITY(~ (int(int(max(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (true ? int(_GLF_ZERO(0.0, injectionSwitch.x)) : _GLF_FUZZED(-66539))), int(_GLF_ZERO(0.0, injectionSwitch.x)))))), (false ? _GLF_FUZZED((-85792)) : _GLF_IDENTITY(~ (int(int(max(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (true ? int(_GLF_ZERO(0.0, injectionSwitch.x)) : _GLF_FUZZED(-66539))), int(_GLF_ZERO(0.0, injectionSwitch.x)))))), ~ (~ (~ (int(int(max(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (true ? int(_GLF_ZERO(0.0, injectionSwitch.x)) : _GLF_FUZZED(-66539))), int(_GLF_ZERO(0.0, injectionSwitch.x))))))))))))))) | (4)), (_GLF_IDENTITY(4, _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (true ? int(_GLF_ZERO(0.0, injectionSwitch.x)) : _GLF_FUZZED(-66539))), ~ (~ (_GLF_IDENTITY(int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))), (true ? int(_GLF_ZERO(0.0, injectionSwitch.x)) : _GLF_FUZZED(-66539)))))), int(_GLF_ZERO(_GLF_IDENTITY(0.0, (0.0) - 0.0), injectionSwitch.x))), _GLF_IDENTITY(int(int(max(_GLF_IDENTITY(int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)) : _GLF_FUZZED(vec2(7.0, 3480.9695))))) / vec2(1.0, 1.0)).x)), _GLF_IDENTITY((true ? _GLF_IDENTITY(int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))), 0 ^ (_GLF_IDENTITY(int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))), 0 + (int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))))))) : _GLF_FUZZED(-66539)), _GLF_IDENTITY(_GLF_IDENTITY((true ? (_GLF_IDENTITY(true ? int(_GLF_ZERO(0.0, injectionSwitch.x)) : _GLF_FUZZED(-66539), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : true ? int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, float(mat2x3(injectionSwitch.x, 1.0, 0.0, 1.0, 1.0, determinant(mat4(0.0, 0.0, 1.0, determinant(mat2(1.0, 1.0, 0.0, 1.0)), 0.0, 0.0, exp(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))))) : _GLF_FUZZED(-66539)))) : _GLF_FUZZED(85836)), int(_GLF_ZERO(0.0, injectionSwitch.x)) + ((true ? (_GLF_IDENTITY(true ? int(_GLF_ZERO(0.0, injectionSwitch.x)) : _GLF_FUZZED(-66539), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : true ? int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, float(mat2x3(injectionSwitch.x, 1.0, 0.0, 1.0, 1.0, determinant(mat4(0.0, 0.0, 1.0, determinant(mat2(1.0, 1.0, 0.0, 1.0)), 0.0, 0.0, exp(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))))) : _GLF_FUZZED(-66539)))) : _GLF_FUZZED(85836)))), max((true ? (_GLF_IDENTITY(true ? _GLF_IDENTITY(int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / exp(vec2(0.0, 0.0))).x)), max(int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / exp(vec2(0.0, 0.0))).x)), int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / exp(vec2(0.0, 0.0))).x)))) : _GLF_FUZZED(-66539), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : true ? int(_GLF_ZERO(0.0, injectionSwitch.x)) : _GLF_FUZZED(-66539)))) : _GLF_FUZZED(85836)), (true ? (_GLF_IDENTITY(true ? int(_GLF_ZERO(0.0, injectionSwitch.x)) : _GLF_FUZZED(-66539), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_IDENTITY(_GLF_FUZZED(_injected_loop_counter), (true ? _GLF_IDENTITY(_GLF_FUZZED(_injected_loop_counter), (_GLF_FUZZED(_injected_loop_counter)) >> 0) : _GLF_FUZZED(_injected_loop_counter))) : true ? int(_GLF_ZERO(0.0, injectionSwitch.x)) : _GLF_FUZZED(-66539)))) : _GLF_FUZZED(85836)))))), _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), max(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x))))))), ~ (~ (int(int(max(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (true ? int(_GLF_ZERO(0.0, injectionSwitch.x)) : _GLF_FUZZED(-66539))), int(_GLF_ZERO(0.0, injectionSwitch.x)))))))))) | (4))) | 0), _GLF_IDENTITY(4, (4) + (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(2, (2) | (2))), int(2)))))), 64, 0);
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             break;
            }
           if(_GLF_DEAD(false))
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         subgroupAll(false);
         for(int _injected_loop_counter = ((((_GLF_IDENTITY(_GLF_IDENTITY(1, (1) / _GLF_IDENTITY(1, 1 * (1))) << _GLF_IDENTITY(int(5), int(5)), 0 ^ _GLF_IDENTITY((_GLF_IDENTITY(1, (1) / 1) << _GLF_IDENTITY(int(5), int(5))), ((_GLF_IDENTITY(1, (1) / 1) << _GLF_IDENTITY(int(5), int(5)))) << (-41234 & 0)))) >> _GLF_IDENTITY(int(5), int(5))) << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(3, 0 | (_GLF_IDENTITY(3, (true ? _GLF_IDENTITY(3, 0 | _GLF_IDENTITY((3), (_GLF_IDENTITY((3), ~ (~ ((3))))) / _GLF_IDENTITY(1, (1) - 0))) : _GLF_FUZZED(_injected_loop_counter)))))), (int(_GLF_IDENTITY(3, 0 | (_GLF_IDENTITY(3, (true ? _GLF_IDENTITY(3, 0 | (3)) : _GLF_FUZZED(_injected_loop_counter))))))) * (1 & 1)), int(3))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(_GLF_IDENTITY(3, (false ? _GLF_FUZZED(-44214) : 3))), _GLF_IDENTITY((int(3)), int(_GLF_IDENTITY(int((int(3))), 0 ^ (_GLF_IDENTITY(int((int(3))), (false ? _GLF_FUZZED(-33674) : int((int(3))))))))) >> 0)) + _GLF_IDENTITY((0 << _GLF_IDENTITY(int(5), int(5))), clamp(_GLF_IDENTITY((0 << _GLF_IDENTITY(int(5), int(5))), 0 + ((0 << _GLF_IDENTITY(int(5), int(5))))), _GLF_IDENTITY((0 << _GLF_IDENTITY(int(5), int(5))), min((0 << _GLF_IDENTITY(int(5), int(5))), (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(5, (5) >> 0)), int(_GLF_IDENTITY(5, _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(5, 0 + (5)), 1, (0 << _GLF_IDENTITY(int(1), int(1))), 1)), max(int(ivec4(5, 1, (0 << _GLF_IDENTITY(int(1), int(1))), 1)), int(ivec4(5, 1, (0 << _GLF_IDENTITY(int(1), int(1))), 1)))))))))), (0 << _GLF_IDENTITY(int(5), int(5)))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
          {
           do
            {
             if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))) && true)), ! (! (bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))) && true))))))), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false, true))))))))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               do
                {
                 barrier();
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_DEAD(false))
                  return;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           return;
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), false || (_GLF_WRAPPED_IF_FALSE(false))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
          }
        }
       else
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)), (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, _GLF_IDENTITY(false, ! (! (false)))), bvec2(bvec2(bvec2(false, false))))), _GLF_IDENTITY(bool(bvec2(bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(bvec2(false, false))))), false)), bool(bvec3(bool(bvec2(bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(bvec2(false, false))))), _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), false || (bool(false))))))), false, true))))))) || false)), ! (! ((_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, _GLF_IDENTITY(false, ! (! (false)))), bvec2(bvec2(bvec2(false, false))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), true, _GLF_IDENTITY(true, (true) && true)))))))), false), _GLF_IDENTITY(bvec2(bvec2(bvec2(bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), true, _GLF_IDENTITY(true, (true) && true)))))))), false))), bvec2(bvec2(bvec2(bvec2(bvec2(bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), true, _GLF_IDENTITY(true, (true) && true)))))))), false)))))))), bool(bvec3(bool(bvec2(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, (false) && true), false), bvec2(bvec2(bvec2(false, false))))), false)), false, true))))))), bool(bvec2((_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, _GLF_IDENTITY(false, ! (! (false)))), bvec2(bvec2(bvec2(false, false))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), true, _GLF_IDENTITY(true, (true) && true)))))))), false), _GLF_IDENTITY(bvec2(bvec2(bvec2(bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), true, _GLF_IDENTITY(true, (true) && true)))))))), false))), bvec2(bvec2(bvec2(bvec2(bvec2(bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), true, _GLF_IDENTITY(true, (true) && true)))))))), false)))))))), bool(bvec3(bool(bvec2(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, (false) && true), false), bvec2(bvec2(bvec2(false, false))))), false)), false, true))))))), false))) || false))))))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 return;
                }
              }
             else
              {
              }
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bool(! (_GLF_DEAD(false))))))))
                return;
               do
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
               return;
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
              barrier();
             if(_GLF_DEAD(false))
              continue;
             return;
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))))))
            barrier();
           break;
           if(_GLF_DEAD(false))
            {
             do
              {
               if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
                {
                 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                  {
                  }
                 else
                  {
                   return;
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(2, 0 ^ (2))), 4, _GLF_IDENTITY(64, (_GLF_IDENTITY(64, (64) - 0)) | (_GLF_IDENTITY(64, int(int(64))))), 0);
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            break;
           return;
          }
         subgroupAll(true);
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).y))))
          continue;
        }
      }
    }
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, ! (! ((false) && true))))) && true), _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(! ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))) : _GLF_FUZZED(injectionSwitch))).x, mix(float(_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))) : _GLF_FUZZED(injectionSwitch))).x), float(_GLF_FUZZED(-1.9)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) > injectionSwitch.y)), true && (! ((injectionSwitch.x > injectionSwitch.y)))))))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)))), _GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(bvec2(false, false))))), bool(bvec3(bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(bvec2(false, false))))), true, true)))) || (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), true && (! ((injectionSwitch.x > injectionSwitch.y))))))))))))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
        {
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   for(int _injected_loop_counter = (1 ^ _GLF_IDENTITY(1, 0 | _GLF_IDENTITY((1), (_GLF_IDENTITY((1), (true ? (1) : _GLF_FUZZED(-27582)))) - 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        break;
       barrier();
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   do
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ! (! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)), false, true))))))), false || (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))))))))))))
          return;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y))))
            barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          barrier();
         return;
         if(_GLF_DEAD(false))
          continue;
         for(int _injected_loop_counter = (0 & 3448); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true), bvec3(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true))))))))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)))), bool(bvec3((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)))), false, _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (! (true)) || false))))))))
        return;
       return;
      }
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(false)), ! (! (! (_GLF_WRAPPED_LOOP(false))))))));
  }
}
