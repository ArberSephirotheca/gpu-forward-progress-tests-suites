#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint subgroup_size = 16;
 for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    continue;
   do
    {
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false))))));
  }
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (true ? _injected_loop_counter : _GLF_FUZZED(_injected_loop_counter))) != ((1 ^ 1) << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (0 << _GLF_IDENTITY(int(0), int(0))) | (8))), int(_GLF_IDENTITY(8, (_GLF_IDENTITY(8, clamp(8, 8, 8))) | (0 | 0)))))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(max(injectionSwitch.x, injectionSwitch.x), clamp(_GLF_IDENTITY(max(injectionSwitch.x, injectionSwitch.x), (max(injectionSwitch.x, injectionSwitch.x)) / 1.0), max(injectionSwitch.x, injectionSwitch.x), max(injectionSwitch.x, injectionSwitch.x)))))))) > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(float(41012)), _GLF_IDENTITY((injectionSwitch)[1], max(_GLF_IDENTITY((injectionSwitch)[1], (false ? _GLF_FUZZED(-3.8) : _GLF_IDENTITY((injectionSwitch)[1], 1.0 * ((injectionSwitch)[1])))), (injectionSwitch)[1]))), vec2((injectionSwitch)[0], _GLF_FUZZED(2.8)), bvec2(true, false))).y, _GLF_IDENTITY(float(mat2(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(float(41012)), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(2.8)), bvec2(true, false))).y, tan(0.0), 0.0, 0.0)), max(_GLF_IDENTITY(_GLF_IDENTITY(float(mat2(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(float(41012)), (injectionSwitch)[1]), vec2((injectionSwitch)[_GLF_IDENTITY(0, clamp(0, 0, 0))], _GLF_FUZZED(2.8)), bvec2(true, false))).y, tan(0.0), 0.0, 0.0)), (false ? _GLF_FUZZED(-6136.9568) : float(mat2(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(float(41012)), (injectionSwitch)[1]), vec2((injectionSwitch)[_GLF_IDENTITY(0, clamp(0, 0, 0))], _GLF_FUZZED(2.8)), bvec2(true, false))).y, tan(0.0), 0.0, 0.0)))), min(float(mat2(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(float(41012)), _GLF_IDENTITY((injectionSwitch), clamp((injectionSwitch), (injectionSwitch), (injectionSwitch)))[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(2.8)), bvec2(true, false))).y, tan(0.0), 0.0, 0.0)), float(mat2(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(float(41012)), (injectionSwitch)[_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, _GLF_IDENTITY((1) | 0, ((1) | 0) >> int(_GLF_ZERO(0.0, injectionSwitch.x))))))]), vec2((injectionSwitch)[0], _GLF_FUZZED(2.8)), bvec2(true, false))).y, tan(0.0), 0.0, 0.0)))), _GLF_IDENTITY(float(mat2(_GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(vec2(_GLF_FUZZED(float(41012)), (injectionSwitch)[1]), max(vec2(_GLF_FUZZED(float(41012)), (injectionSwitch)[1]), vec2(_GLF_FUZZED(float(41012)), (injectionSwitch)[1]))), vec2((injectionSwitch)[0], _GLF_FUZZED(2.8)), bvec2(true, false))).y, tan(0.0), 0.0, 0.0)), min(float(mat2(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(float(41012)), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(2.8)), bvec2(true, false))).y, tan(0.0), 0.0, 0.0)), float(mat2(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(float(41012)), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(2.8)), bvec2(true, false))).y, tan(0.0), 0.0, 0.0))))))), mix(float(_GLF_FUZZED(-11.93)), float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(float(41012)), _GLF_IDENTITY((injectionSwitch), (true ? (injectionSwitch) : _GLF_FUZZED(unpackUnorm2x16(subgroup_id))))[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(2.8)), bvec2(true, _GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false), bool(bvec4(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false), false, false, false)))))).y, clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(float(41012)), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(2.8)), bvec2(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (true), (! (true)) && true), (_GLF_IDENTITY(_GLF_IDENTITY(! (true), (! (true)) && true), (_GLF_IDENTITY(! (true), _GLF_IDENTITY((! (true)), (_GLF_IDENTITY((! (true)), true && ((! (true))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)) || false)) || false))), false))).y, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(2.5), _GLF_FUZZED(-5.2)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), injectionSwitch)), mix(vec2(_GLF_FUZZED(float(41012)), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(_GLF_IDENTITY(2.8, max(2.8, 2.8)))), bvec2(true, false))).y, _GLF_IDENTITY(mix(float(_GLF_IDENTITY(_GLF_FUZZED(-1913.2275), (_GLF_FUZZED(-1913.2275)) / 1.0)), float(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(float(41012)), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_IDENTITY(_GLF_FUZZED(2.8), (false ? _GLF_FUZZED(-5.6) : _GLF_IDENTITY(_GLF_FUZZED(2.8), 0.0 + (_GLF_FUZZED(2.8)))))), bvec2(true, false))).y), bool(true)), float(mat4x3(mix(float(_GLF_FUZZED(-1913.2275)), float(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(float(41012)), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(2.8)), bvec2(true, false))).y), bool(true)), round(length(normalize(vec2(1.0, 1.0)))), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, float(mat2x3(1.0, 1.0, 1.0, 0.0, 1.0, 1.0)))))), float(_GLF_FUZZED(-687.492)), bool(false))), 1.0, determinant(mat4(0.0, determinant(mat3(0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (false ? _GLF_IDENTITY(_GLF_FUZZED(2.0), max(_GLF_FUZZED(2.0), _GLF_FUZZED(2.0))) : 0.0)), 1.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, abs(0.0), _GLF_ZERO(_GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, (0.0) * 1.0) : _GLF_FUZZED(0.7))), injectionSwitch.x), 0.0)), log(1.0))))), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(float(41012)), (_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)))[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(2.8)), bvec2(_GLF_IDENTITY(true, bool(bvec2(true, true))), false))).y))), bool(true)))))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (false))))))
      return;
     return;
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      return;
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, true, true)), ! (! (bool(bvec4(false, false, true, true)))))), (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(! (false), ! (! (! (false)))))), false || (bool(bool(_GLF_IDENTITY(! (false), ! (! (! (false))))))))))), _GLF_IDENTITY(bool(bvec4(false, false, true, true)), ! (! (bool(bvec4(false, false, true, true)))))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false), false, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false), false, false))))))))), bool(bool(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, true, true)), ! (! (bool(bvec4(false, false, true, true)))))), _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), min((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0)))).y), ((injectionSwitch.x > injectionSwitch.y)) || _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))))))))))) && true))
      return;
     do
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true)))))
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
       else
        {
         return;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(_GLF_IDENTITY(int(0), ~ (~ (int(0)))), 0 | (_GLF_IDENTITY(int(0), ~ (~ (int(0)))))))) & -17587)); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
        return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         return;
        }
      }
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
  return;
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups.x, uint(uint(gl_NumWorkGroups.x)));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, max(_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) - 0)) | 0, clamp((_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) - 0)) | 0, (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) - 0)) | 0, (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter)), (_injected_loop_counter) - 0)) | 0))), _GLF_IDENTITY(_injected_loop_counter, 0 + (_injected_loop_counter)))) < ((_GLF_IDENTITY(1, (1) - 0) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))), true && (_GLF_IDENTITY(_injected_loop_counter, max(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, int(int(_injected_loop_counter)))) - 0), (_injected_loop_counter) - 0)) | _GLF_IDENTITY(0, min(_GLF_IDENTITY(0, (0) - 0), _GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, clamp(0, 0, 0))))))), _GLF_IDENTITY(_injected_loop_counter, 0 + (_injected_loop_counter)))) < (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), int(1))), clamp(_GLF_IDENTITY((_GLF_IDENTITY(1, ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))) * (_GLF_IDENTITY(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter))))), 1)), max(int(ivec2(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter))))), 1)), int(ivec2(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter))))), 1))))))) << _GLF_IDENTITY(int(1), int(1))), ~ (~ ((1 << _GLF_IDENTITY(int(1), int(1)))))), _GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), int(1))), ((1 << _GLF_IDENTITY(int(1), int(1)))) | (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), int(1))), ~ (~ ((1 << _GLF_IDENTITY(int(1), int(1)))))))), _GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), int(1))), int(ivec2((1 << _GLF_IDENTITY(int(1), int(1))), 0))))) >> _GLF_IDENTITY(int(1), int(1)))))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      break;
     return;
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      continue;
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) ^ (0u >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(_GLF_IDENTITY(3u, (_GLF_IDENTITY(3u, ~ (~ (3u)))) | _GLF_IDENTITY((3u), uint(uvec3((3u), (1u ^ 0u), 1u)))), (3u) | 0u))))) + _GLF_IDENTITY(subgroup_local_id, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) * 1u) : _GLF_FUZZED(workgroup_base)));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, true)), bool(bvec3(bool(bvec3(false, false, true)), true, true))))), bool(bvec3((_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, true)), bool(bvec3(bool(bvec3(false, false, true)), true, true))))), true, false))) || false), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))), _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))))) - 0.0)), true && (_GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), (injectionSwitch.y) * _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))))) - 0.0)), false || ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y) * _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), (true ? (injectionSwitch.y) * _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))) : _GLF_FUZZED(9.7))))) - 0.0))))))) && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), _GLF_IDENTITY(bool(bvec3(false, false, true)), bool(bvec3(bool(bvec3(false, false, true)), true, true))))) || false), (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), bool(bvec4(bool(bvec2(false, true)), false, false, false)))), true, true, false)), bool(bvec3(bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), bool(bvec4(bool(bvec2(false, true)), false, false, false)))), true, true, false)), false, false)))), _GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, true)), bool(bvec3(bool(bvec3(false, false, true)), true, true))))) || false, false || ((_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, true)), bool(_GLF_IDENTITY(bvec3(bool(bvec3(false, false, true)), true, true), _GLF_IDENTITY(bvec3(bvec4(bvec3(bool(bvec3(false, false, true)), true, true), true)), bvec3(bvec3(bvec3(bvec4(bvec3(bool(bvec3(false, false, true)), true, true), true)))))))))) || false))), (injectionSwitch.x > injectionSwitch.y)))), (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec3(bvec2(false, false), true)))))) || false), (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), _GLF_IDENTITY(bool(bvec3(false, false, true)), bool(bvec3(bool(bvec3(false, false, true)), true, true))))) || false), (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), bool(bvec4(bool(bvec2(false, true)), false, false, false)))), true, true, false)), bool(bvec3(bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), bool(bvec4(bool(bvec2(false, true)), false, false, false)))), true, true, false)), false, false)))), _GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, true)), bool(bvec3(bool(bvec3(false, false, true)), true, true))))) || false, false || ((_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, true)), bool(_GLF_IDENTITY(bvec3(bool(bvec3(false, false, true)), true, true), _GLF_IDENTITY(bvec3(bvec4(bvec3(bool(bvec3(false, false, true)), true, true), true)), bvec3(bvec3(bvec3(bvec4(bvec3(bool(bvec3(false, false, true)), true, true), true)))))))))) || false))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(! (! (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))))), (! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) || _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false)))))))))
          {
           return;
          }
         else
          {
          }
        }
      }
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
    return;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false, bool(bool(false))) ? _GLF_FUZZED(_GLF_IDENTITY(acos(injectionSwitch), max(_GLF_IDENTITY(acos(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0))), (acos(injectionSwitch)) * vec2(1.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (1.0) - 0.0)) - 0.0))), acos(injectionSwitch)))) : _GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec2(938.015, -19.73)) : injectionSwitch)))).x > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(_GLF_IDENTITY(acos(injectionSwitch), max(_GLF_IDENTITY(acos(injectionSwitch), (acos(injectionSwitch)) * vec2(1.0, 1.0)), acos(injectionSwitch)))) : _GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))) ? _GLF_FUZZED(vec2(938.015, -19.73)) : injectionSwitch)))).x > injectionSwitch.y)))))))
  {
   for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)))); _injected_loop_counter --)
    {
     return;
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, min(1, 1)), max(subgroup_local_id + 1, subgroup_local_id + 1))) % subgroup_size), _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (((_GLF_IDENTITY(subgroup_local_id + 1, max(subgroup_local_id + 1, subgroup_local_id + 1))) % subgroup_size)), (~ (((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (1) >> 0), max(subgroup_local_id + 1, subgroup_local_id + _GLF_IDENTITY(1, (1) / 1)))) % subgroup_size))) | (~ ((_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, ~ (~ (1))), max(subgroup_local_id + 1, subgroup_local_id + 1))), (false ? _GLF_FUZZED((_GLF_IDENTITY(workgroup_size, max(workgroup_size, _GLF_IDENTITY(workgroup_size, (workgroup_size) >> 0u))) | subgroup_size)) : (_GLF_IDENTITY(subgroup_local_id + 1, max(subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id + 1, max(subgroup_local_id + 1, subgroup_local_id + 1))))))))) % subgroup_size, (true ? (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u) + _GLF_IDENTITY(1, (1) + 0), max(subgroup_local_id + 1, subgroup_local_id + 1)), max(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u) + _GLF_IDENTITY(1, (1) + 0), max(subgroup_local_id + 1, subgroup_local_id + 1)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u) + _GLF_IDENTITY(1, (1) + 0), max(subgroup_local_id + 1, subgroup_local_id + 1)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u) + _GLF_IDENTITY(1, _GLF_IDENTITY((1), ~ (~ ((1)))) + 0), max(subgroup_local_id + 1, subgroup_local_id + 1)), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + _GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(virtual_gid)))) + _GLF_IDENTITY(1, (1) + 0), max(subgroup_local_id + 1, subgroup_local_id + 1)), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u) + _GLF_IDENTITY(1, (1) + 0), max(subgroup_local_id + 1, subgroup_local_id + 1)))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(virtual_gid) : _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + _GLF_IDENTITY(0u, (0u) ^ 0u)) + _GLF_IDENTITY(1, (1) + 0), max(subgroup_local_id + 1, subgroup_local_id + 1))))) % subgroup_size : _GLF_FUZZED(subgroup_id)))))))), min(~ (_GLF_IDENTITY(~ (((_GLF_IDENTITY(subgroup_local_id + 1, max(subgroup_local_id + _GLF_IDENTITY(1, (1) | (1)), subgroup_local_id + 1))) % subgroup_size)), (~ (((_GLF_IDENTITY(subgroup_local_id + 1, max(subgroup_local_id + 1, subgroup_local_id + _GLF_IDENTITY(1, (1) / 1)))) % subgroup_size))) | (~ _GLF_IDENTITY(((_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, max(subgroup_local_id + 1, subgroup_local_id + 1))) % subgroup_size, (true ? (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u) + _GLF_IDENTITY(1, (1) + 0), max(subgroup_local_id + 1, subgroup_local_id + 1))) % subgroup_size : _GLF_FUZZED(subgroup_id))))), (((_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, max(subgroup_local_id + 1, subgroup_local_id + 1))) % subgroup_size, (true ? (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u) + _GLF_IDENTITY(1, (1) + 0), max(subgroup_local_id + 1, subgroup_local_id + 1))) % subgroup_size : _GLF_FUZZED(subgroup_id)))))) << 0u)))), ~ (_GLF_IDENTITY(~ (((_GLF_IDENTITY(subgroup_local_id + 1, max(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (subgroup_local_id + 1)), subgroup_local_id + 1))) % subgroup_size)), (~ (((_GLF_IDENTITY(subgroup_local_id + 1, max(subgroup_local_id + 1, subgroup_local_id + _GLF_IDENTITY(1, (1) / 1)))) % subgroup_size))) | _GLF_IDENTITY((~ ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, max(subgroup_local_id + 1, subgroup_local_id + 1))) % subgroup_size, (true ? (_GLF_IDENTITY(subgroup_local_id + 1, max(subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + 1, subgroup_local_id + 1))) * 1u)))) % subgroup_size : _GLF_FUZZED(subgroup_id))), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, max(subgroup_local_id + 1, subgroup_local_id + 1))) % subgroup_size, (true ? (_GLF_IDENTITY(subgroup_local_id + 1, max(subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + 1, subgroup_local_id + 1))) * 1u)))) % subgroup_size : _GLF_FUZZED(subgroup_id)))) << (0u >> _GLF_IDENTITY(uint(7u), uint(7u)))), (true ? (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u), uint(uvec2(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u), 1u)))) << 0u)) >> 0u) + _GLF_IDENTITY(1, (1) + 0), max(subgroup_local_id + 1, subgroup_local_id + 1))) % subgroup_size : _GLF_FUZZED(subgroup_id)))))), uint(_GLF_IDENTITY(uvec2((~ ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, max(subgroup_local_id + 1, subgroup_local_id + 1))) % subgroup_size, (true ? (_GLF_IDENTITY(subgroup_local_id + 1, max(subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + 1, subgroup_local_id + 1))) * 1u)))) % subgroup_size : _GLF_FUZZED(subgroup_id))), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, max(subgroup_local_id + 1, subgroup_local_id + 1))) % subgroup_size, (true ? (_GLF_IDENTITY(subgroup_local_id + 1, max(subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + 1, subgroup_local_id + 1))) * 1u)))) % subgroup_size : _GLF_FUZZED(subgroup_id)))) << (0u >> _GLF_IDENTITY(uint(7u), uint(7u)))), (true ? (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u), uint(uvec2(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u), 1u)))) << 0u)) >> 0u) + _GLF_IDENTITY(1, (1) + 0), max(subgroup_local_id + 1, subgroup_local_id + 1))) % subgroup_size : _GLF_FUZZED(subgroup_id)))))), uint(_GLF_ZERO(0.0, injectionSwitch.x))), (uvec2((~ ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, max(subgroup_local_id + 1, subgroup_local_id + 1))) % subgroup_size, (true ? (_GLF_IDENTITY(subgroup_local_id + 1, max(subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + 1, subgroup_local_id + 1))) * 1u)))) % subgroup_size : _GLF_FUZZED(subgroup_id))), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, max(subgroup_local_id + 1, subgroup_local_id + 1))) % subgroup_size, (true ? (_GLF_IDENTITY(subgroup_local_id + 1, max(subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + 1, subgroup_local_id + 1))) * 1u)))) % subgroup_size : _GLF_FUZZED(subgroup_id)))) << (0u >> _GLF_IDENTITY(uint(7u), uint(7u)))), (true ? (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u), uint(uvec2(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u), 1u)))) << 0u)) >> 0u) + _GLF_IDENTITY(1, (1) + 0), max(subgroup_local_id + 1, subgroup_local_id + 1))) % subgroup_size : _GLF_FUZZED(subgroup_id)))))), uint(_GLF_ZERO(0.0, injectionSwitch.x)))) | uvec2(0u, 0u)))))))));
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)); _injected_loop_counter --)
  {
   _GLF_IDENTITY(buf[virtual_gid] = 1, (_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid] = 1, (_GLF_IDENTITY(buf[virtual_gid] = 1, 0u ^ (buf[virtual_gid] = 1))) << 0u), (true ? buf[virtual_gid] = 1 : _GLF_IDENTITY(_GLF_FUZZED((mat2(3760.2093, -5.6, -6.8, -5.7) , num_workgroup)), max(_GLF_FUZZED((_GLF_IDENTITY((mat2(3760.2093, -5.6, -6.8, -5.7) , num_workgroup), (true ? (mat2(3760.2093, -5.6, -6.8, -5.7) , num_workgroup) : _GLF_FUZZED(workgroup_id))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED((mat2(3760.2093, -5.6, -6.8, -5.7) , num_workgroup)), (false ? _GLF_FUZZED(subgroup_id) : _GLF_FUZZED((mat2(3760.2093, -5.6, -6.8, -5.7) , num_workgroup)))), max(_GLF_FUZZED((mat2(3760.2093, _GLF_IDENTITY(-5.6, (false ? _GLF_FUZZED(-431.136) : -5.6)), -6.8, -5.7) , num_workgroup)), _GLF_FUZZED(_GLF_IDENTITY((_GLF_IDENTITY((mat2(3760.2093, _GLF_IDENTITY(-5.6, float(_GLF_IDENTITY(vec3(-5.6, 0.0, 0.0), mix(_GLF_IDENTITY(vec3(_GLF_IDENTITY((vec3(-5.6, 0.0, 0.0)), min((vec3(-5.6, 0.0, 0.0)), (vec3(-5.6, 0.0, 0.0))))[0], _GLF_FUZZED(-3.8), _GLF_FUZZED(744.269)), vec3(mat3x4(_GLF_IDENTITY(vec3(_GLF_IDENTITY((vec3(-5.6, 0.0, 0.0)), min((vec3(-5.6, 0.0, 0.0)), (vec3(-5.6, 0.0, 0.0))))[0], _GLF_FUZZED(-3.8), _GLF_FUZZED(744.269)), max(vec3(_GLF_IDENTITY((vec3(-5.6, 0.0, 0.0)), min((vec3(-5.6, 0.0, 0.0)), (vec3(-5.6, 0.0, 0.0))))[0], _GLF_FUZZED(-3.8), _GLF_FUZZED(744.269)), vec3(_GLF_IDENTITY((vec3(-5.6, 0.0, 0.0)), min((vec3(-5.6, 0.0, 0.0)), (vec3(-5.6, 0.0, 0.0))))[0], _GLF_FUZZED(-3.8), _GLF_FUZZED(744.269)))), abs(0.0), determinant(mat4(_GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 1.0), vec4(1.0, 0.0, 1.0, 0.0)), dot(vec4(0.0, 1.0, 0.0, 1.0), vec4(1.0, 0.0, 1.0, 0.0))), 1.0, abs(1.0), 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, max(0.0, 0.0))) / 1.0), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 0.0, sqrt(sqrt(1.0)), 1.0, 0.0, 1.0, 1.0))), vec3(_GLF_FUZZED(-0.6), (vec3(-5.6, 0.0, 0.0))[1], (vec3(-5.6, 0.0, 0.0))[2]), bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true))))), _GLF_IDENTITY(-6.8, max(-6.8, -6.8)), -5.7) , num_workgroup), ~ (~ (_GLF_IDENTITY((mat2(3760.2093, _GLF_IDENTITY(-5.6, float(_GLF_IDENTITY(vec3(_GLF_IDENTITY(-5.6, (-5.6) - log(1.0)), 0.0, 0.0), mix(vec3(_GLF_IDENTITY((vec3(-5.6, 0.0, 0.0)), min((vec3(-5.6, 0.0, 0.0)), (vec3(-5.6, 0.0, 0.0))))[0], _GLF_FUZZED(-3.8), _GLF_FUZZED(744.269)), vec3(_GLF_FUZZED(-0.6), (vec3(-5.6, 0.0, 0.0))[1], (vec3(-5.6, 0.0, 0.0))[_GLF_IDENTITY(2, max(2, _GLF_IDENTITY(2, min(2, 2))))]), bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true))))), _GLF_IDENTITY(-6.8, max(-6.8, -6.8)), -5.7) , num_workgroup), _GLF_IDENTITY((mat2(3760.2093, _GLF_IDENTITY(-5.6, float(_GLF_IDENTITY(vec3(-5.6, 0.0, 0.0), mix(vec3(_GLF_IDENTITY((vec3(-5.6, 0.0, 0.0)), min((vec3(-5.6, 0.0, 0.0)), (vec3(-5.6, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, float(float(0.0))))), 0.0))))[0], _GLF_FUZZED(-3.8), _GLF_FUZZED(744.269)), vec3(_GLF_FUZZED(-0.6), (vec3(-5.6, 0.0, 0.0))[1], (vec3(-5.6, 0.0, 0.0))[2]), bvec3(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-1.9)), bool(false))))), true, true))))), _GLF_IDENTITY(-6.8, max(-6.8, -6.8)), -5.7) , num_workgroup), 0u ^ (_GLF_IDENTITY((mat2(3760.2093, _GLF_IDENTITY(-5.6, float(_GLF_IDENTITY(vec3(-5.6, 0.0, 0.0), mix(vec3(_GLF_IDENTITY((vec3(-5.6, 0.0, 0.0)), min((vec3(-5.6, 0.0, 0.0)), (vec3(-5.6, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, float(float(0.0))))), 0.0))))[0], _GLF_FUZZED(-3.8), _GLF_FUZZED(744.269)), vec3(_GLF_FUZZED(-0.6), (vec3(-5.6, 0.0, 0.0))[1], (vec3(-5.6, 0.0, 0.0))[2]), bvec3(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-1.9)), bool(false))))), true, true))))), _GLF_IDENTITY(-6.8, max(-6.8, -6.8)), -5.7) , num_workgroup), min((mat2(3760.2093, _GLF_IDENTITY(-5.6, float(_GLF_IDENTITY(vec3(-5.6, 0.0, 0.0), mix(vec3(_GLF_IDENTITY((vec3(-5.6, 0.0, 0.0)), min((vec3(-5.6, 0.0, 0.0)), (vec3(-5.6, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, float(float(0.0))))), 0.0))))[0], _GLF_FUZZED(-3.8), _GLF_FUZZED(744.269)), vec3(_GLF_FUZZED(-0.6), (vec3(-5.6, 0.0, 0.0))[1], (vec3(-5.6, 0.0, 0.0))[2]), bvec3(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-1.9)), bool(false))))), true, true))))), _GLF_IDENTITY(-6.8, max(-6.8, -6.8)), -5.7) , num_workgroup), (mat2(3760.2093, _GLF_IDENTITY(-5.6, float(_GLF_IDENTITY(vec3(-5.6, 0.0, 0.0), mix(vec3(_GLF_IDENTITY((vec3(-5.6, 0.0, 0.0)), min((vec3(-5.6, 0.0, 0.0)), (vec3(-5.6, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, float(float(0.0))))), 0.0))))[0], _GLF_FUZZED(-3.8), _GLF_FUZZED(744.269)), vec3(_GLF_FUZZED(-0.6), (vec3(-5.6, 0.0, 0.0))[1], (vec3(-5.6, 0.0, 0.0))[2]), bvec3(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-1.9)), bool(false))))), true, true))))), _GLF_IDENTITY(-6.8, max(-6.8, -6.8)), -5.7) , num_workgroup))))) ^ 0u))))), (_GLF_IDENTITY((mat2(3760.2093, _GLF_IDENTITY(-5.6, float(_GLF_IDENTITY(vec3(-5.6, 0.0, 0.0), mix(vec3((vec3(-5.6, 0.0, 0.0))[0], _GLF_FUZZED(-3.8), _GLF_FUZZED(744.269)), vec3(_GLF_FUZZED(-0.6), (vec3(-5.6, 0.0, 0.0))[1], (vec3(-5.6, 0.0, 0.0))[2]), bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0), _GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-6.9))))) > injectionSwitch.y)), true, true))))), -6.8, -5.7) , num_workgroup), (_GLF_IDENTITY((mat2(3760.2093, _GLF_IDENTITY(-5.6, float(_GLF_IDENTITY(vec3(-5.6, 0.0, 0.0), mix(vec3((vec3(-5.6, 0.0, 0.0))[0], _GLF_FUZZED(-3.8), _GLF_FUZZED(744.269)), vec3(_GLF_FUZZED(-0.6), (vec3(-5.6, 0.0, 0.0))[1], (vec3(_GLF_IDENTITY(-5.6, max(-5.6, -5.6)), 0.0, 0.0))[2]), bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true))))), _GLF_IDENTITY(-6.8, float(mat3x2(-6.8, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(1.0, 0.0, 1.0, 1.0)), _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(1.0, 0.0, 1.0, 1.0)), max(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(1.0, 0.0, 1.0, 1.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(1.0, 0.0, 1.0, 1.0)))))))), -5.7) , num_workgroup), clamp((mat2(3760.2093, _GLF_IDENTITY(-5.6, float(_GLF_IDENTITY(vec3(-5.6, 0.0, 0.0), mix(vec3((vec3(-5.6, 0.0, 0.0))[0], _GLF_FUZZED(-3.8), _GLF_FUZZED(744.269)), vec3(_GLF_FUZZED(-0.6), (vec3(-5.6, 0.0, 0.0))[1], (vec3(-5.6, 0.0, 0.0))[2]), bvec3(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))), _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, true, false))), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), true, true))))), -6.8, -5.7) , num_workgroup), (mat2(3760.2093, _GLF_IDENTITY(-5.6, float(_GLF_IDENTITY(vec3(-5.6, 0.0, 0.0), mix(vec3((vec3(-5.6, 0.0, 0.0))[0], _GLF_FUZZED(-3.8), _GLF_FUZZED(744.269)), vec3(_GLF_FUZZED(-0.6), (vec3(-5.6, 0.0, 0.0))[1], (vec3(-5.6, 0.0, 0.0))[2]), bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true))))), -6.8, -5.7) , num_workgroup), (mat2(3760.2093, _GLF_IDENTITY(-5.6, float(_GLF_IDENTITY(vec3(-5.6, 0.0, 0.0), mix(vec3((vec3(-5.6, 0.0, 0.0))[0], _GLF_FUZZED(-3.8), _GLF_FUZZED(744.269)), vec3(_GLF_FUZZED(-0.6), (vec3(-5.6, 0.0, 0.0))[1], (vec3(-5.6, 0.0, 0.0))[2]), bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat4(injectionSwitch.x, 1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, float(vec4(1.0, 0.0, sin(0.0), 0.0))))), sqrt(1.0), cos(0.0), 0.0, abs(0.0), 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0))) > injectionSwitch.y)), true, true))))), -6.8, -5.7) , num_workgroup)))) | ((mat2(3760.2093, _GLF_IDENTITY(-5.6, float(_GLF_IDENTITY(vec3(-5.6, 0.0, 0.0), mix(vec3((vec3(-5.6, 0.0, 0.0))[0], _GLF_FUZZED(_GLF_IDENTITY(-3.8, 1.0 * (-3.8))), _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(744.269, mix(float(_GLF_FUZZED(-4.4)), float(_GLF_IDENTITY(744.269, max(744.269, 744.269))), bool(true)))), _GLF_IDENTITY((_GLF_FUZZED(_GLF_IDENTITY(744.269, mix(float(_GLF_FUZZED(-4.4)), float(_GLF_IDENTITY(744.269, max(744.269, 744.269))), bool(true))))) * sqrt(1.0), clamp((_GLF_FUZZED(_GLF_IDENTITY(744.269, mix(float(_GLF_FUZZED(-4.4)), float(_GLF_IDENTITY(744.269, max(744.269, 744.269))), bool(true))))) * sqrt(1.0), (_GLF_FUZZED(_GLF_IDENTITY(744.269, mix(float(_GLF_FUZZED(-4.4)), float(_GLF_IDENTITY(744.269, max(744.269, 744.269))), bool(true))))) * sqrt(1.0), (_GLF_FUZZED(_GLF_IDENTITY(744.269, mix(float(_GLF_FUZZED(-4.4)), float(_GLF_IDENTITY(744.269, max(744.269, 744.269))), bool(true))))) * sqrt(1.0))))), vec3(_GLF_FUZZED(-0.6), (vec3(-5.6, 0.0, 0.0))[1], _GLF_IDENTITY((vec3(-5.6, 0.0, 0.0))[2], max((vec3(-5.6, 0.0, 0.0))[2], (vec3(-5.6, 0.0, 0.0))[2]))), bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true))))), -6.8, -5.7) , num_workgroup)))) - 0u))))))))) * 1u);
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat3x4(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0)), 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0)), clamp(float(mat3x4(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0)), 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0)), float(mat3x4(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0)), 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0)), float(mat3x4(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0)), 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0))))), _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)), injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[_GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, (0) / 1), _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, ~ (~ (0))), 0, 0)), 0))], injectionSwitch[1])).y, clamp(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[_GLF_IDENTITY(0, (_GLF_IDENTITY(0, int(ivec4(0, 1, 0, 0)))) << 0)], injectionSwitch[1])).y, 1.0 * (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))))) && _GLF_IDENTITY(true, ! (! (true)))), _GLF_IDENTITY(false, bool(bvec4(false, false, false, false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false), false, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false), false, false)))))))))
    return;
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (_GLF_IDENTITY(1, clamp(1, 1, 1))) | (1))))); _injected_loop_counter ++)
      {
       return;
      }
    }
   do
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false))))))
      {
       do
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), true && (_GLF_WRAPPED_IF_FALSE(false))))
          {
          }
         else
          {
           return;
          }
         if(_GLF_DEAD(false))
          break;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  return;
 if(subgroup_local_id + 1 < subgroup_size)
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   do
    {
     if(_GLF_DEAD(false))
      return;
     do
      {
       for(int _injected_loop_counter = _GLF_IDENTITY((_GLF_IDENTITY((0 | 0), ((_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), (~ (0)) | (~ (0))))) | 0)) >> (0 ^ 0)) << _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(ivec2(int(2), _GLF_IDENTITY((0 ^ 0), clamp((0 ^ 0), (0 ^ 0), (0 ^ 0))))), min(int(ivec2(int(2), (0 ^ 0))), int(ivec2(int(2), (0 ^ _GLF_IDENTITY(0, (0) << 0))))))), (int(2)) ^ 0))), (true ? (_GLF_IDENTITY((0 | 0) << _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(ivec2(int(2), (0 ^ 0))), min(_GLF_IDENTITY(int(ivec2(int(2), (0 ^ 0))), min(int(ivec2(int(2), (0 ^ 0))), int(ivec2(int(2), (0 ^ 0))))), int(ivec2(int(2), (_GLF_IDENTITY(0 ^ 0, _GLF_IDENTITY((false ? _GLF_FUZZED(mix(1244, 84833, false)) : _GLF_IDENTITY(0 ^ 0, int(ivec3(0 ^ 0, 0, 1)))), min((_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(mix(1244, 84833, false)) : _GLF_IDENTITY(0 ^ 0, int(ivec3(0 ^ 0, 0, 1)))), (false ? _GLF_FUZZED(mix(1244, 84833, false)) : _GLF_IDENTITY(_GLF_IDENTITY(0 ^ 0, int(ivec3(0 ^ 0, 0, 1))), (_GLF_IDENTITY(0 ^ 0, int(ivec3(0 ^ 0, 0, 1)))) | 0))))))))))), (int(2)) ^ 0)), int(ivec3((0 | 0) << _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(ivec2(int(2), (0 ^ 0))), min(_GLF_IDENTITY(int(ivec2(int(2), (0 ^ 0))), min(int(ivec2(int(2), (0 ^ 0))), int(ivec2(int(2), (0 ^ 0))))), int(ivec2(int(2), (_GLF_IDENTITY(0 ^ 0, _GLF_IDENTITY((false ? _GLF_FUZZED(mix(1244, 84833, false)) : _GLF_IDENTITY(0 ^ 0, int(ivec3(0 ^ 0, 0, 1)))), min((_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(mix(1244, 84833, false)) : _GLF_IDENTITY(0 ^ 0, int(ivec3(0 ^ 0, 0, 1)))), (false ? _GLF_FUZZED(mix(1244, 84833, false)) : _GLF_IDENTITY(_GLF_IDENTITY(0 ^ 0, int(ivec3(0 ^ 0, 0, 1))), (_GLF_IDENTITY(0 ^ 0, int(ivec3(0 ^ 0, 0, 1)))) | 0))))))))))), (int(2)) ^ 0)), 0, 1)))) : _GLF_FUZZED(17158))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY(_GLF_IDENTITY(0 ^ (_injected_loop_counter), max(0 ^ (_injected_loop_counter), 0 ^ (_injected_loop_counter))), 0 ^ (_GLF_IDENTITY(0 ^ (_injected_loop_counter), (_GLF_IDENTITY(0, int(ivec2(_GLF_IDENTITY(0, int(ivec4(0, 1, 0, 0))), 1))) ^ (_injected_loop_counter)) + 0)))) < 1), _GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false))))) || (false)) || (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, 0 ^ (_injected_loop_counter)) < 1), false || (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, int(ivec2(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> 0), int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-287.537)), float(injectionSwitch.x), bool(true)))))))), 0 ^ (_injected_loop_counter)) < 1)))), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), ! (! (false || (false))))), (_GLF_IDENTITY(false, false || (false))) && true) || (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, 0 ^ (_injected_loop_counter)) < 1), _GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)) || (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, int(ivec2(_injected_loop_counter, int(_GLF_ZERO(0.0, injectionSwitch.x))))), 0 ^ _GLF_IDENTITY((_injected_loop_counter), min((_injected_loop_counter), (_injected_loop_counter)))) < _GLF_IDENTITY(1, 0 + (1))), false || (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, int(ivec2(_injected_loop_counter, int(_GLF_ZERO(0.0, injectionSwitch.x))))), 0 ^ (_injected_loop_counter)) < 1))))))))); _injected_loop_counter ++)
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _GLF_IDENTITY(_injected_loop_counter ++, _GLF_IDENTITY(1 * (_GLF_IDENTITY(_injected_loop_counter ++, (_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) | 0)) * (1 | 0))), (true ? 1 * (_GLF_IDENTITY(_injected_loop_counter ++, (_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) | 0)) * (1 | 0))) : _GLF_FUZZED(-96290)))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))))))
            continue;
           atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) ^ 0u)], _GLF_IDENTITY(uint(2), min(uint(_GLF_IDENTITY(2, (2) - 0)), uint(2))), 4, 64, 0);
           if(_GLF_DEAD(false))
            continue;
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(false)), false || (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(false)), true && (! _GLF_IDENTITY((_GLF_WRAPPED_LOOP(false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_WRAPPED_LOOP(false)), ! (! ((_GLF_WRAPPED_LOOP(false))))), bool(bvec4((_GLF_WRAPPED_LOOP(false)), false, true, false)))), bool(bool(! (_GLF_IDENTITY((_GLF_WRAPPED_LOOP(false)), bool(bvec4((_GLF_WRAPPED_LOOP(false)), false, true, false)))))))))))))), bool(bool((_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(false)), false || (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(false)), true && (! _GLF_IDENTITY((_GLF_WRAPPED_LOOP(false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_WRAPPED_LOOP(false)), ! (! ((_GLF_WRAPPED_LOOP(false))))), bool(bvec4((_GLF_WRAPPED_LOOP(false)), false, true, false)))), bool(bool(! (_GLF_IDENTITY((_GLF_WRAPPED_LOOP(false)), bool(bvec4((_GLF_WRAPPED_LOOP(false)), false, true, false)))))))))))))))))));
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))))))))))
      return;
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     subgroupAll(false);
    }
  }
 else
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + determinant(mat4(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 0.0, 0.0, sin(0.0), 1.0, 0.0, 0.0, 0.0, sin(0.0), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, 1.0)), dot(vec2(1.0, 0.0), vec2(0.0, 1.0))), 0.0, 0.0, 0.0))) > injectionSwitch.y))))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
   do
    {
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            break;
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], clamp(injectionSwitch[1], injectionSwitch[1], injectionSwitch[1])))), injectionSwitch)).y))))
                {
                 do
                  {
                   return;
                   if(_GLF_DEAD(false))
                    return;
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
            }
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x4(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0), mat3x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat3x4(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0))))))).x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x4(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0), mat3x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat3x4(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0)))))), (_GLF_IDENTITY(max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x4(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0), mat3x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat3x4(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0)))))), (max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x4(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0), mat3x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat3x4(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0))))))) - vec2(0.0, 0.0))) / vec2(1.0, 1.0))).x > injectionSwitch.y))))), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x4(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0), mat3x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat3x4(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0))))))).x > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x4(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0), mat3x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat3x4(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0))))))).x > injectionSwitch.y), true && (! (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x4(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, 1.0, 1.0), mat3x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat3x4(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0))))))).x > injectionSwitch.y))))))), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x4(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0), mat3x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat3x4(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0))))))).x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x4(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0), mat3x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0))) + (mat3x4(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, float(mat4x3(0.0, 0.0, exp(0.0), 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0))), 0.0)), 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0))))))).x > injectionSwitch.y)))))))), false, false, true)))))
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   return;
                  }
                }
              }
             else
              {
              }
            }
           return;
          }
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(true && _GLF_IDENTITY((false), ! (! ((false)))), ! (! (true && _GLF_IDENTITY((false), ! (! ((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (_GLF_IDENTITY(! (false), false || (! (false)))) || false)))))))))))));
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          break;
        }
      }
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         do
          {
           for(int _injected_loop_counter = ((0 ^ 1) | 0); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) - 0)) << 0) != 0); _GLF_IDENTITY(_injected_loop_counter --, int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_injected_loop_counter --)))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  break;
                 return;
                 if(_GLF_DEAD(false))
                  continue;
                }
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
              continue;
             if(_GLF_DEAD(false))
              continue;
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y))))))) || _GLF_IDENTITY(false, ! (! (false))))))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec2(_GLF_WRAPPED_IF_TRUE(true), false))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec2(_GLF_WRAPPED_IF_TRUE(true), false))))), ! (! (bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec2(_GLF_WRAPPED_IF_TRUE(true), false))))))))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   return;
                  }
                 else
                  {
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                }
               else
                {
                }
              }
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              continue;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
              continue;
            }
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            break;
           continue;
          }
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        return;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-4.0)), float(injectionSwitch.y), bool(true)))) + 0.0))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-4.0)), float(injectionSwitch.y), bool(true)))) + 0.0))), false || (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-4.0)), float(injectionSwitch.y), bool(true)))) + 0.0))))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))), false), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-4.0)), float(injectionSwitch.y), bool(true))), min(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-4.0)), float(injectionSwitch.y), bool(true))), _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(_GLF_FUZZED(-4.0), clamp(_GLF_IDENTITY(_GLF_FUZZED(-4.0), max(_GLF_FUZZED(-4.0), _GLF_FUZZED(-4.0))), _GLF_FUZZED(-4.0), _GLF_FUZZED(-4.0)))), float(injectionSwitch.y), bool(true)))))) + 0.0))), _GLF_IDENTITY(false || (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-4.0)), float(injectionSwitch.y), bool(true)))) + 0.0)))), (false || (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-4.0)), float(injectionSwitch.y), bool(true)))) + 0.0))))) && true)), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)))).x > injectionSwitch.y)), false), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))))))), true && (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-4.0)), float(injectionSwitch.y), bool(true)))) + 0.0), (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-4.0)), float(injectionSwitch.y), bool(true)))) + 0.0)) || false))), false || (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-4.0)), float(injectionSwitch.y), bool(true)))) + 0.0))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-4.0)), float(injectionSwitch.y), bool(true)))) + 0.0))), false || (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-4.0)), _GLF_IDENTITY(float(injectionSwitch.y), mix(float(float(injectionSwitch.y)), float(_GLF_FUZZED(1.8)), bool(false))), bool(true)))) + 0.0))))), _GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y)), false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))
        {
         do
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) || false)))))))))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               return;
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        continue;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-73.48), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) / 1.0), _GLF_FUZZED(6267.4374)), bvec2(true, false))).y), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-73.48), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) / 1.0), _GLF_FUZZED(6267.4374)), bvec2(true, false))).y))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))) || false), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), injectionSwitch.x)) > injectionSwitch.y))) || false)))) && true)))))));
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 | 1)); _injected_loop_counter ++)
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (injectionSwitch.x > injectionSwitch.y))))))
        break;
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        continue;
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2(injectionSwitch, 1.0, 1.0)), min(vec2(mat2(injectionSwitch, 1.0, 1.0)), vec2(mat2(injectionSwitch, 1.0, 1.0))))).y, (false ? _GLF_FUZZED(distance(vec2(2.6, -2.5).y, distance(injectionSwitch, vec2(133.167, -92.85)))) : _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2(injectionSwitch, 1.0, 1.0)), min(vec2(mat2(injectionSwitch, 1.0, 1.0)), vec2(mat2(injectionSwitch, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-6393.6127)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), 1.0))))).y)), max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2(injectionSwitch, 1.0, 1.0)), min(vec2(mat2(injectionSwitch, 1.0, 1.0)), vec2(mat2(injectionSwitch, 1.0, 1.0))))).y, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2(injectionSwitch, 1.0, _GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, (1.0) * 1.0) : _GLF_FUZZED(-28.27))))), min(vec2(mat2(injectionSwitch, 1.0, 1.0)), vec2(mat2(injectionSwitch, 1.0, 1.0))))).y) / _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-120.436) : 1.0)), 1.0, 1.0))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2(injectionSwitch, 1.0, 1.0)), min(vec2(mat2(injectionSwitch, 1.0, 1.0)), vec2(mat2(injectionSwitch, 1.0, 1.0))))).y, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2(injectionSwitch, 1.0, 1.0)), min(vec2(mat2(injectionSwitch, 1.0, 1.0)), vec2(mat2(injectionSwitch, 1.0, 1.0))))).y) / 1.0))), injectionSwitch.y, injectionSwitch.y), (clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(vec2(mat2(injectionSwitch, 1.0, 1.0)), (_GLF_IDENTITY(vec2(mat2(injectionSwitch, 1.0, 1.0)), mix(vec2(_GLF_FUZZED(5874.8999), (vec2(mat2(injectionSwitch, 1.0, 1.0)))[1]), vec2((vec2(mat2(injectionSwitch, 1.0, 1.0)))[0], _GLF_FUZZED((- 0.6))), bvec2(true, false)))) / vec2(1.0, 1.0)), min(vec2(mat2(injectionSwitch, 1.0, 1.0)), vec2(mat2(injectionSwitch, 1.0, 1.0))))).y, (false ? _GLF_FUZZED(distance(vec2(2.6, -2.5).y, distance(_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)), vec2(133.167, -92.85)))) : _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2(injectionSwitch, 1.0, 1.0)), min(vec2(mat2(injectionSwitch, 1.0, 1.0)), vec2(mat2(injectionSwitch, 1.0, 1.0))))).y)), max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(vec2(mat2(injectionSwitch, 1.0, 1.0)), min(vec2(mat2(injectionSwitch, 1.0, 1.0)), vec2(mat2(injectionSwitch, 1.0, 1.0)))), vec2(mat2x3(_GLF_IDENTITY(vec2(mat2(injectionSwitch, 1.0, 1.0)), min(vec2(mat2(injectionSwitch, 1.0, 1.0)), vec2(mat2(injectionSwitch, 1.0, 1.0)))), 1.0, 1.0, sin(0.0), 0.0)))).y, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2(injectionSwitch, 1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY((true ? _GLF_IDENTITY(1.0, (1.0) * 1.0) : _GLF_FUZZED(-28.27)), _GLF_IDENTITY((true ? (true ? _GLF_IDENTITY(1.0, (1.0) * 1.0) : _GLF_FUZZED(-28.27)) : _GLF_FUZZED(-0.7)), (_GLF_IDENTITY((true ? (true ? _GLF_IDENTITY(1.0, (1.0) * 1.0) : _GLF_FUZZED(-28.27)) : _GLF_FUZZED(-0.7)), min(_GLF_IDENTITY((true ? (true ? _GLF_IDENTITY(1.0, (1.0) * 1.0) : _GLF_FUZZED(-28.27)) : _GLF_FUZZED(-0.7)), min((true ? (true ? _GLF_IDENTITY(1.0, (1.0) * 1.0) : _GLF_FUZZED(-28.27)) : _GLF_FUZZED(-0.7)), (true ? (true ? _GLF_IDENTITY(1.0, (1.0) * 1.0) : _GLF_FUZZED(-28.27)) : _GLF_FUZZED(-0.7)))), (true ? (true ? _GLF_IDENTITY(1.0, (1.0) * 1.0) : _GLF_FUZZED(-28.27)) : _GLF_FUZZED(-0.7))))) + 0.0))))), min(_GLF_IDENTITY(vec2(mat2(injectionSwitch, 1.0, 1.0)), mat2(1.0) * (vec2(mat2(injectionSwitch, 1.0, 1.0)))), vec2(mat2(injectionSwitch, 1.0, 1.0))))).y) / 1.0), _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2(injectionSwitch, 1.0, 1.0)), min(vec2(mat2(injectionSwitch, _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0)), 1.0)), vec2(mat2(injectionSwitch, 1.0, 1.0))))).y)), injectionSwitch.y, injectionSwitch.y)) / 1.0)))), false, true, false)))))
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) && true))
          {
           if(_GLF_DEAD(false))
            continue;
           return;
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(float(false))), _GLF_IDENTITY(bool(false), bool(bool(bool(false)))))), true && (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0))) > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2x3(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], mix(float(injectionSwitch[0]), float(_GLF_FUZZED(9.8)), bool(false))), injectionSwitch[1])), 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), abs(0.0)), transpose(_GLF_IDENTITY(transpose(_GLF_IDENTITY(mat2x3(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], mix(float(injectionSwitch[0]), float(_GLF_FUZZED(9.8)), bool(false))), injectionSwitch[1])), 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), abs(0.0)), mat3(1.0) * (mat2x3(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch[0], mix(float(injectionSwitch[0]), float(_GLF_FUZZED(9.8)), bool(false))), injectionSwitch[1]), mix(vec2(_GLF_FUZZED(-56.92), (vec2(_GLF_IDENTITY(injectionSwitch[0], mix(float(injectionSwitch[0]), float(_GLF_FUZZED(9.8)), bool(false))), injectionSwitch[1]))[1]), vec2((vec2(_GLF_IDENTITY(injectionSwitch[0], mix(float(injectionSwitch[0]), float(_GLF_FUZZED(9.8)), bool(false))), injectionSwitch[1]))[0], _GLF_FUZZED(-3729.4702)), bvec2(true, false)))), 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), abs(0.0))))), (true ? transpose(_GLF_IDENTITY(mat2x3(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], mix(float(injectionSwitch[0]), float(_GLF_FUZZED(9.8)), bool(false))), injectionSwitch[1])), 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), abs(0.0)), mat3(1.0) * (mat2x3(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], mix(float(injectionSwitch[0]), float(_GLF_FUZZED(9.8)), bool(false))), injectionSwitch[1])), 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), abs(0.0))))) : _GLF_FUZZED(mat3x2(33.14, -3820.2934, -53.73, -8908.2968, 4.8, -2.4)))))))).y), float(_GLF_IDENTITY(_GLF_FUZZED(float(false)), float(vec3(_GLF_FUZZED(float(false)), 0.0, 1.0)))), _GLF_IDENTITY(bool(false), bool(_GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) && true)))))))))))
            break;
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            continue;
           break;
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              continue;
             return;
            }
          }
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(false ? _GLF_FUZZED(fract(-436.486)) : injectionSwitch.x, (true ? _GLF_IDENTITY(false ? _GLF_FUZZED(fract(-436.486)) : injectionSwitch.x, max(false ? _GLF_FUZZED(_GLF_IDENTITY(fract(-436.486), (fract(-436.486)) * 1.0)) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, 1.0 * (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x4(injectionSwitch, 1.0, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0, 1.0, 0.0, 0.0, cos(0.0), abs(1.0), 1.0), (mat3x4(injectionSwitch, 1.0, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0, 1.0, 0.0, 0.0, cos(0.0), abs(1.0), 1.0)) * mat3(1.0)))).x)), injectionSwitch.x)), (false ? _GLF_FUZZED(sqrt(4126.0069)) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)), injectionSwitch.x)), (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)), injectionSwitch.x))) / cos(0.0)))), false ? _GLF_FUZZED(fract(-436.486)) : injectionSwitch.x)) : _GLF_IDENTITY(_GLF_FUZZED(-6.6), min(_GLF_FUZZED(-6.6), _GLF_IDENTITY(_GLF_FUZZED(-6.6), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED(-6.6), (_GLF_FUZZED(-6.6)) + 0.0)), mix(float(_GLF_FUZZED(-4.6)), float(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED(-6.6), (_GLF_FUZZED(-6.6)) + 0.0)), max(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED(-6.6), (_GLF_FUZZED(-6.6)) + 0.0)), min((_GLF_IDENTITY(_GLF_FUZZED(-6.6), (_GLF_FUZZED(-6.6)) + 0.0)), (_GLF_IDENTITY(_GLF_FUZZED(-6.6), (_GLF_FUZZED(-6.6)) + 0.0)))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED(-6.6), (_GLF_FUZZED(-6.6)) + 0.0)), float(vec2((_GLF_IDENTITY(_GLF_FUZZED(-6.6), (_GLF_FUZZED(-6.6)) + 0.0)), 1.0)))))), bool(true))) - 0.0))))))), mix(float(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, float(vec3(injectionSwitch.x, 1.0, _GLF_IDENTITY(0.0, (0.0) + 0.0)))), injectionSwitch.x))), float(_GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(0.3, float(mat4x2(0.3, 0.0, 1.0, tan(0.0), 0.0, sqrt(abs(1.0)), 1.0, 0.0))), (false ? _GLF_FUZZED(-5.9) : _GLF_IDENTITY(_GLF_IDENTITY(0.3, float(mat4x2(0.3, 0.0, 1.0, tan(0.0), 0.0, sqrt(abs(1.0)), 1.0, 0.0))), (false ? _GLF_FUZZED(5.7) : _GLF_IDENTITY(0.3, float(mat4x2(0.3, 0.0, 1.0, _GLF_IDENTITY(tan(0.0), mix(float(_GLF_FUZZED(0.9)), float(tan(0.0)), bool(true))), 0.0, sqrt(abs(1.0)), 1.0, 0.0))))))))), bool(false))) > _GLF_IDENTITY(injectionSwitch.y, mix(_GLF_IDENTITY(float(_GLF_FUZZED(vec2(-92.67, 3.6).x)), min(_GLF_IDENTITY(float(_GLF_FUZZED(vec2(-92.67, 3.6).x)), _GLF_IDENTITY(float(mat4x3(float(_GLF_FUZZED(vec2(-92.67, 3.6).x)), 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0)), max(_GLF_IDENTITY(float(mat4x3(float(_GLF_FUZZED(vec2(-92.67, 3.6).x)), 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0)), clamp(float(mat4x3(float(_GLF_FUZZED(vec2(-92.67, 3.6).x)), 1.0, 1.0, 0.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0)), float(mat4x3(float(_GLF_FUZZED(vec2(-92.67, 3.6).x)), 1.0, _GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-76.90)), float(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), bool(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))).x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))).y))))), 1.0)), 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0)), float(mat4x3(float(_GLF_FUZZED(_GLF_IDENTITY(vec2(-92.67, 3.6).x, min(vec2(-92.67, 3.6).x, vec2(-92.67, 3.6).x)))), 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat3x4(0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-8.9) : float(mat3x4(0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0))))), min(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat3x4(0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)) ? _GLF_FUZZED(-8.9) : float(mat3x4(0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0))))), _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat3x4(0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(635.233)), bool(false))))) ? _GLF_FUZZED(-8.9) : float(mat3x4(0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0))))))), 1.0, 1.0, 0.0, 1.0)))), float(mat4x3(float(_GLF_FUZZED(vec2(-92.67, 3.6).x)), 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, 0.0, 1.0))))), _GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_FUZZED(vec2(-92.67, 3.6).x)), (float(_GLF_FUZZED(vec2(-92.67, 3.6).x))) * 1.0), clamp(_GLF_IDENTITY(float(_GLF_FUZZED(vec2(-92.67, 3.6).x)), (float(_GLF_FUZZED(vec2(-92.67, _GLF_IDENTITY(3.6, (3.6) / 1.0)).x))) * 1.0), _GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_FUZZED(_GLF_IDENTITY(vec2(-92.67, 3.6), vec2(mat4(vec2(-92.67, 3.6), 0.0, 0.0, tan(0.0), _GLF_ZERO(0.0, injectionSwitch.x), determinant(mat2(0.0, 0.0, 0.0, 0.0)), 1.0, 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)) : _GLF_FUZZED(7.9))), 0.0, 1.0, round(length(normalize(vec3(1.0, _GLF_IDENTITY(1.0, (1.0) / determinant(mat4(1.0, 1.0, 1.0, length(vec2(0.0, 0.0)), 0.0, 1.0, 0.0, 0.0, tan(0.0), 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0))), 1.0))))))).x)), 1.0 * (_GLF_IDENTITY(float(_GLF_FUZZED(_GLF_IDENTITY(vec2(-92.67, 3.6), vec2(mat4(vec2(-92.67, 3.6), 0.0, 0.0, tan(0.0), _GLF_ZERO(0.0, injectionSwitch.x), determinant(mat2(0.0, 0.0, 0.0, 0.0)), 1.0, 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)) : _GLF_FUZZED(7.9))), 0.0, 1.0, round(length(normalize(vec3(1.0, _GLF_IDENTITY(1.0, (1.0) / determinant(mat4(1.0, 1.0, 1.0, length(vec2(0.0, 0.0)), 0.0, 1.0, 0.0, 0.0, tan(0.0), 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0))), 1.0))))))).x)), (float(_GLF_FUZZED(_GLF_IDENTITY(vec2(-92.67, 3.6), vec2(mat4(vec2(-92.67, 3.6), 0.0, 0.0, tan(0.0), _GLF_ZERO(0.0, injectionSwitch.x), determinant(mat2(0.0, 0.0, 0.0, 0.0)), 1.0, 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)) : _GLF_FUZZED(7.9))), 0.0, 1.0, round(length(normalize(vec3(1.0, _GLF_IDENTITY(1.0, (1.0) / determinant(mat4(1.0, 1.0, 1.0, length(vec2(0.0, 0.0)), 0.0, 1.0, 0.0, 0.0, tan(0.0), 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0))), 1.0))))))).x))) / 1.0))), (float(_GLF_FUZZED(vec2(-92.67, 3.6).x))) * 1.0), _GLF_IDENTITY(float(_GLF_FUZZED(vec2(-92.67, 3.6).x)), (float(_GLF_FUZZED(vec2(-92.67, 3.6).x))) * 1.0))))), float(injectionSwitch.y), _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(_GLF_IDENTITY(true, true && (true)), (injectionSwitch.x < injectionSwitch.y))))), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))), ! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bvec3(! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false, false)))), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), (bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))) && true)) && true))))))))));
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat3(injectionSwitch.x, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0))) > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           return;
          }
         else
          {
          }
        }
      }
     else
      {
      }
    }
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       atomicStore(buf[_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(next_virtual_gid, clamp(next_virtual_gid, next_virtual_gid, _GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) + 0u))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(next_virtual_gid, clamp(next_virtual_gid, next_virtual_gid, _GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) + 0u))), min(_GLF_IDENTITY(next_virtual_gid, clamp(next_virtual_gid, next_virtual_gid, _GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) + 0u))), _GLF_IDENTITY(next_virtual_gid, clamp(next_virtual_gid, next_virtual_gid, _GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) + 0u))))), _GLF_IDENTITY(next_virtual_gid, clamp(next_virtual_gid, next_virtual_gid, _GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) + 0u))), _GLF_IDENTITY(next_virtual_gid, _GLF_IDENTITY(clamp(next_virtual_gid, next_virtual_gid, _GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) + 0u)), (true ? clamp(next_virtual_gid, next_virtual_gid, _GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) + 0u)) : _GLF_FUZZED(subgroup_local_id)))))), uint(uint(_GLF_IDENTITY(next_virtual_gid, clamp(next_virtual_gid, next_virtual_gid, _GLF_IDENTITY(_GLF_IDENTITY(next_virtual_gid, 0u | (next_virtual_gid)), (next_virtual_gid) + 0u))))))], uint(_GLF_IDENTITY(2, 0 ^ (2))), 4, 64, 0);
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    return;
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(0, ~ (~ (0)))), max(int(_GLF_IDENTITY(0, ~ (~ (0)))), _GLF_IDENTITY(int(_GLF_IDENTITY(0, ~ (~ (0)))), max(int(_GLF_IDENTITY(0, ~ (~ (0)))), int(_GLF_IDENTITY(0, ~ (~ (0)))))))), int(0))) >> _GLF_IDENTITY(int(0), int(0)), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, (0) << 0)))))))), (true ? _GLF_IDENTITY(int(_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, (0) << 0)))))))), max(int(_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, (0) << 0)))))))), _GLF_IDENTITY(int(_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, (0) << 0)))))))), (int(_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, (0) << 0))))))))) / 1))) : _GLF_FUZZED(67039))), int(0))) / 1))); _injected_loop_counter ++)
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)))), injectionSwitch), mix(vec2(_GLF_FUZZED((-5.2 + 8332.0289)), _GLF_IDENTITY((max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), injectionSwitch))[1], clamp(_GLF_IDENTITY((max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), injectionSwitch))[1], ((max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), injectionSwitch))[1]) + 0.0), (max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), injectionSwitch))[1], (max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), injectionSwitch))[1]))), vec2((max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), injectionSwitch))[0], _GLF_FUZZED(-2.6)), bvec2(true, false)))).y))))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = (0 ^ _GLF_IDENTITY(1, clamp(1, 1, 1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY((int(_GLF_ZERO(_GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-1.4)), float(0.0), bool(true))))), _GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0))), injectionSwitch.x, injectionSwitch.x)))) << _GLF_IDENTITY(int(8), int(8))), clamp((int(_GLF_ZERO(_GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-1.4)), float(0.0), bool(true))))), _GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0))), injectionSwitch.x, injectionSwitch.x)))) << _GLF_IDENTITY(int(8), int(8))), (int(_GLF_ZERO(_GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-1.4)), float(0.0), bool(true))))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0))), injectionSwitch.x, injectionSwitch.x)), max(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0))), injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0))), injectionSwitch.x, injectionSwitch.x)))))) << _GLF_IDENTITY(int(8), int(8))), (int(_GLF_ZERO(_GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-1.4)), float(0.0), bool(true))))), _GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0))), injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x)))) << _GLF_IDENTITY(int(8), int(8))))) ^ (-2172 & 0))); _injected_loop_counter --)
      {
       return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec3(false, false, false))))))))))
        continue;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(bool(bool(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), bool(bvec2(bool(bool(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false)))))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       subgroupAll(true);
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(2.8) : injectionSwitch.x)) > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
  {
  }
 else
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) || false)), ! (_GLF_IDENTITY(! (false), (_GLF_IDENTITY(! (false), ! (! (! (false))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           return;
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           break;
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          break;
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
}
