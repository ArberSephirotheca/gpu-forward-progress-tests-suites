#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 0) uniform buf0 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec2 GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_id;
 if(_GLF_DEAD(false))
  return;
 uvec4 GLF_merged2_0_3_79_3_1_16GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_sizenext_virtual_gid;
 uvec4 GLF_merged2_0_3_79_3_1_11GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_sizesubgroup_id;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).x > injectionSwitch.y, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).x > injectionSwitch.y))))))), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)))))))))))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
            {
             barrier();
            }
          }
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), clamp(_GLF_IDENTITY(int(0), clamp(int(0), int(0), int(0))), int(0), int(0))))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, (_injected_loop_counter > 0) && true)); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
              return;
            }
           else
            {
             for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter)) != 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                return;
              }
             if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
              continue;
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_DEAD(false)), (_GLF_IDENTITY((_GLF_DEAD(false)), true && ((_GLF_DEAD(false))))) || false) && true)))))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              return;
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
          }
         return;
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 uvec2 GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base;
 uvec3 GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_size;
 GLF_merged2_0_3_79_3_1_16GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_sizenext_virtual_gid.xyz = GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_size;
 do
  {
   GLF_merged2_0_3_79_3_1_11GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_sizesubgroup_id.xyz = GLF_merged2_0_3_79_3_1_16GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_sizenext_virtual_gid.xyz;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  {
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > ((_GLF_IDENTITY((-50285 - -89387) & 0, (_GLF_IDENTITY((-50285 - -89387) & 0, (_GLF_IDENTITY((-50285 - -89387) & 0, 0 ^ ((-50285 - -89387) & 0))) | 0)) << 0)) >> _GLF_IDENTITY(int(8), int(8)))); _injected_loop_counter --)
    {
     barrier();
    }
  }
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_IF_TRUE(true)), bool(_GLF_IDENTITY(bool(bool(_GLF_WRAPPED_IF_TRUE(true))), false || (bool(bool(_GLF_WRAPPED_IF_TRUE(true))))))))))
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
     do
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, _GLF_IDENTITY(false || (_GLF_IDENTITY(false, (false) || false)), (_GLF_IDENTITY(false, ! (! (false))) || (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false))) || false)))), bool(bvec4(_GLF_IDENTITY(false, (false) && true), false, true, true)))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), _GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec2(bvec4(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), true, false))), true, true)), bvec2(_GLF_IDENTITY(bvec3(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec2(bvec4(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), true, false))), true, true)), false), bvec3(bvec4(bvec3(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec2(bvec4(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), true, false))), true, true)), false), true)))))), bvec2(bvec4(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), false, false)))), _GLF_IDENTITY(! (! (bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec2(bvec4(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), false, false)))))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(! (! (bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec2(bvec4(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), false, false)))))), ! (! (! (! (bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec2(bvec4(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), false, false))))))))), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(! (! (bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec2(bvec4(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), false, false)))))), ! (! (! (! (bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec2(bvec4(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), false, false))))))))), false), true)))))))), ! (! (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), _GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(true, ! (! (true)))), bvec2(bvec4(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), true, false))), true, true)), bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec2(bvec4(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), true, false))), true, true)), false), _GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec2(bvec4(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), true, false))), true, true)), false), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec2(bvec4(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), true, false))), true, true)), false), bvec3(bvec3(bvec3(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec2(bvec4(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), true, false))), true, true)), false))))))), false)), bvec3(bvec4(bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec2(bvec4(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), true, false))), true, true)), false), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec2(bvec4(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), true, false))), true, true)), false), bvec3(bvec3(bvec3(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec2(bvec4(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), true, false))), true, true)), false))))))), false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), bvec3(bvec4(bvec3(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec2(bvec4(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), true, false))), true, true)), false), true)))))), bvec2(bvec4(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), false, false)))), _GLF_IDENTITY(! (! (bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec2(bvec4(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), false, false)))))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(! (! (bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec2(bvec4(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), false, false)))))), ! (! (! (! (bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec2(bvec4(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), false, false))))))))), ! (! (! (! (bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec2(bvec4(bvec2(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), false))), false)))), true), false, false))))))))), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(! (! (bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec2(bvec4(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), false, false))), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec2(bvec4(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), false, false))), true, true)))))), ! (! (! (! (bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec2(bvec4(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), false, false))))))))), false), true))))))))))))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 return;
                }
              }
             return;
            }
           else
            {
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(307.786), _GLF_FUZZED(6.1)), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-3.5), _GLF_FUZZED((+ -1805.3120))), bvec2(false, false))))).y))))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bool(false)))))), (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           else
            {
            }
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, true && (true)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(true, ! (! (true))), false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bvec2(bool(bvec4(_GLF_IDENTITY(true, ! (! (true))), false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true)))), true && (true)))))))
      {
       for(int _injected_loop_counter = (1 | 1); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), true && (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            continue;
           return;
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (! (_GLF_IDENTITY(false, (false) && true))))))
            return;
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        return;
      }
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false)))
      barrier();
    }
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      return;
    }
   else
    {
    }
  }
 for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, false)), false || (bool(bvec3(false, true, false)))))))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  return;
 GLF_merged2_0_3_79_3_1_11GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_sizesubgroup_id.w = subgroup_id;
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
  {
   for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) / 1); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY((1 & (1 | 1)), max((1 & (1 | 1)), (1 & (1 | 1))))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))
      continue;
     for(int _injected_loop_counter = (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), 0 ^ (int(1))), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), min(int(6), int(6))), int(6))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), ~ (~ (_GLF_IDENTITY(int(6), int(6))))))); _injected_loop_counter ++)
      {
       barrier();
      }
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), true)))))
        return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        return;
       barrier();
      }
    }
  }
 uint subgroup_size = 16;
 if(_GLF_DEAD(false))
  return;
 do
  {
   do
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         barrier();
        }
      }
     return;
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))));
 GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base.x = subgroup_size;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_id.x = subgroup_local_id;
 if(_GLF_DEAD(false))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y), false || (_GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y), ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y)) || false))))))
      {
       return;
      }
     else
      {
      }
    }
   else
    {
    }
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0)), dot(vec3(1.0, 0.0, 0.0), vec3(0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0))), 0.0, sin(0.0), abs(exp(0.0))))).y))))), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bool(injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((bool(bool(injectionSwitch.x > injectionSwitch.y))) || false, ((bool(bool(injectionSwitch.x > injectionSwitch.y))) || false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))
    return;
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), (true && (false)) && true))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter --)
      {
       return;
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((false)))))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)))), bool(bvec4(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))))))
      continue;
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 0.0, 0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat4x3(_GLF_IDENTITY(0.0, (0.0) * 1.0), 1.0, tan(0.0), 1.0, 1.0, determinant(mat2(1.0, 1.0, 0.0, 1.0)), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0)), max(_GLF_IDENTITY(float(mat4x3(_GLF_IDENTITY(0.0, (0.0) * 1.0), 1.0, tan(0.0), 1.0, 1.0, determinant(mat2(1.0, 1.0, 0.0, 1.0)), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0)), clamp(float(mat4x3(_GLF_IDENTITY(0.0, (0.0) * 1.0), 1.0, tan(0.0), 1.0, 1.0, determinant(mat2(1.0, 1.0, 0.0, 1.0)), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0)), float(mat4x3(_GLF_IDENTITY(0.0, _GLF_IDENTITY((0.0), min(_GLF_IDENTITY((0.0), mix(float((0.0)), float(_GLF_FUZZED((-56.26))), bool(false))), (0.0))) * 1.0), 1.0, tan(0.0), 1.0, 1.0, determinant(mat2(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, max(1.0, 1.0))) + 0.0), 1.0, 0.0, 1.0)), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0)), float(mat4x3(_GLF_IDENTITY(0.0, (0.0) * 1.0), 1.0, tan(0.0), 1.0, 1.0, determinant(mat2(1.0, 1.0, 0.0, 1.0)), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0)))), float(mat4x3(_GLF_IDENTITY(0.0, (0.0) * 1.0), 1.0, tan(0.0), 1.0, 1.0, determinant(mat2(1.0, 1.0, 0.0, 1.0)), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0))))), _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), dot(vec2(0.0, 0.0), vec2(1.0, 1.0)))), mat3x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat3x2(injectionSwitch, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(_GLF_IDENTITY(_GLF_IDENTITY(0.0, min(0.0, 0.0)), _GLF_IDENTITY(float(mat2x4(0.0, log(1.0), 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, abs(0.0), 0.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 1.0, abs(0.0), 0.0), vec4(0.0, 1.0, 0.0, 0.0))), 1.0, 1.0)), clamp(float(mat2x4(0.0, log(1.0), 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, abs(0.0), 0.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 1.0, abs(0.0), 0.0), _GLF_IDENTITY(vec4(0.0, 1.0, _GLF_IDENTITY(0.0, float(vec2(0.0, abs(0.0)))), 0.0), mix(vec4(_GLF_FUZZED(5.2), (vec4(0.0, 1.0, _GLF_IDENTITY(0.0, float(vec2(0.0, abs(0.0)))), 0.0))[1], _GLF_FUZZED(-1.5), (vec4(0.0, 1.0, _GLF_IDENTITY(0.0, float(vec2(0.0, abs(0.0)))), 0.0))[3]), vec4((vec4(0.0, 1.0, _GLF_IDENTITY(0.0, float(vec2(0.0, abs(0.0)))), 0.0))[0], _GLF_FUZZED(-43.18), (vec4(0.0, 1.0, _GLF_IDENTITY(0.0, float(vec2(0.0, abs(0.0)))), 0.0))[2], _GLF_FUZZED((15.30 * -1.1))), bvec4(true, false, true, false))))), 1.0, 1.0)), float(mat2x4(0.0, log(1.0), 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, abs(0.0), 0.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 1.0, abs(0.0), 0.0), vec4(0.0, 1.0, 0.0, 0.0))), 1.0, 1.0)), float(mat2x4(0.0, log(1.0), 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, abs(0.0), 0.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 1.0, abs(0.0), 0.0), vec4(0.0, 1.0, 0.0, 0.0))), 1.0, 1.0))))), 0.0), vec2(1.0, 1.0)), dot(vec2(0.0, 0.0), vec2(1.0, 1.0)))))))), injectionSwitch)).y))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 0.0, 0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat4x3(_GLF_IDENTITY(0.0, (0.0) * 1.0), 1.0, tan(0.0), 1.0, 1.0, determinant(_GLF_IDENTITY(mat2(1.0, 1.0, 0.0, 1.0), transpose(transpose(mat2(1.0, 1.0, 0.0, 1.0))))), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0)), max(_GLF_IDENTITY(float(mat4x3(_GLF_IDENTITY(0.0, (0.0) * 1.0), 1.0, tan(0.0), 1.0, 1.0, determinant(mat2(1.0, 1.0, 0.0, 1.0)), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0)), clamp(float(mat4x3(_GLF_IDENTITY(0.0, (0.0) * 1.0), 1.0, _GLF_IDENTITY(tan(0.0), (false ? _GLF_FUZZED(degrees(8.4)) : tan(0.0))), 1.0, 1.0, determinant(mat2(1.0, 1.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(5.8) : 0.0)), 1.0)), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0)), float(mat4x3(_GLF_IDENTITY(0.0, (0.0) * 1.0), 1.0, tan(0.0), 1.0, 1.0, determinant(mat2(1.0, 1.0, 0.0, 1.0)), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0)), float(mat4x3(_GLF_IDENTITY(0.0, (0.0) * 1.0), 1.0, tan(0.0), 1.0, 1.0, determinant(mat2(1.0, 1.0, 0.0, 1.0)), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0)))), float(mat4x3(_GLF_IDENTITY(_GLF_IDENTITY(0.0, (0.0) * 1.0), mix(float(_GLF_FUZZED((-20.86 * (+ -142.238)))), float(_GLF_IDENTITY(0.0, (0.0) * 1.0)), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), 1.0, tan(0.0), 1.0, 1.0, determinant(mat2(1.0, 1.0, 0.0, 1.0)), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0))))), _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), dot(vec2(0.0, 0.0), vec2(1.0, 1.0)))), mat3x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat3x2(injectionSwitch, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, (0.0) / 1.0)), float(_GLF_FUZZED(7.2)), bool(false))))), 0.0, 0.0, _GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat2x4(0.0, log(1.0), 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, abs(0.0), 0.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 1.0, abs(0.0), 0.0), vec4(0.0, 1.0, 0.0, 0.0))), 1.0, 1.0)), clamp(float(mat2x4(0.0, log(1.0), 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, abs(0.0), 0.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 1.0, abs(0.0), 0.0), vec4(0.0, 1.0, 0.0, 0.0))), 1.0, 1.0)), float(mat2x4(0.0, log(1.0), 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, abs(0.0), 0.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 1.0, abs(0.0), 0.0), vec4(0.0, 1.0, 0.0, 0.0))), 1.0, 1.0)), float(mat2x4(0.0, log(1.0), 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, abs(0.0), 0.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 1.0, abs(0.0), 0.0), vec4(0.0, 1.0, 0.0, 0.0))), 1.0, 1.0))))), 0.0), vec2(1.0, 1.0)), 0.0 + (dot(vec2(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat2x4(0.0, log(1.0), 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, abs(0.0), 0.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 1.0, abs(0.0), 0.0), vec4(0.0, 1.0, 0.0, 0.0))), 1.0, 1.0)), clamp(float(mat2x4(0.0, log(1.0), 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, abs(0.0), 0.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 1.0, abs(0.0), 0.0), vec4(0.0, 1.0, 0.0, 0.0))), 1.0, 1.0)), float(mat2x4(0.0, log(1.0), 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, abs(0.0), 0.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 1.0, abs(0.0), 0.0), vec4(0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, (0.0) / determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)))))), 1.0, 1.0)), float(mat2x4(0.0, log(1.0), 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, abs(0.0), 0.0), vec4(0.0, 1.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, (0.0) - _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0)))))), 0.0)), dot(vec4(0.0, 1.0, abs(0.0), 0.0), vec4(0.0, 1.0, 0.0, 0.0))), 1.0, 1.0))))), 0.0), vec2(1.0, 1.0)))), dot(vec2(0.0, 0.0), _GLF_IDENTITY(vec2(1.0, 1.0), max(_GLF_IDENTITY(vec2(1.0, 1.0), mix(vec2(_GLF_IDENTITY((vec2(1.0, 1.0))[0], ((vec2(1.0, 1.0))[0]) - 0.0), _GLF_FUZZED(-482.594)), vec2(_GLF_FUZZED((333.360 * -0.1)), (vec2(1.0, 1.0))[1]), bvec2(false, true))), vec2(1.0, 1.0)))))))))), injectionSwitch)).y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 0.0, 0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat4x3(_GLF_IDENTITY(0.0, _GLF_IDENTITY((0.0), (true ? (0.0) : _GLF_FUZZED(-7.5))) * 1.0), 1.0, tan(0.0), 1.0, 1.0, determinant(mat2(1.0, _GLF_IDENTITY(1.0, float(vec3(1.0, 0.0, determinant(mat4(1.0, 0.0, 0.0, log(1.0), 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0))))), 0.0, 1.0)), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0)), max(_GLF_IDENTITY(float(mat4x3(_GLF_IDENTITY(0.0, _GLF_IDENTITY((0.0) * 1.0, mix(float(_GLF_FUZZED(9.9)), _GLF_IDENTITY(float((0.0) * 1.0), (float((0.0) * 1.0)) + 0.0), bool(true)))), 1.0, tan(0.0), 1.0, 1.0, determinant(_GLF_IDENTITY(mat2(1.0, 1.0, 0.0, 1.0), (mat2(1.0, 1.0, 0.0, 1.0)) / mat2(1.0, 1.0, 1.0, 1.0))), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0)), clamp(float(mat4x3(_GLF_IDENTITY(0.0, (0.0) * 1.0), 1.0, tan(0.0), 1.0, 1.0, determinant(mat2(1.0, 1.0, 0.0, 1.0)), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0)), float(mat4x3(_GLF_IDENTITY(0.0, (0.0) * _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(5907.8724)), float(1.0), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), float(_GLF_FUZZED(-8.9)), bool(false)))), 1.0, tan(0.0), 1.0, 1.0, determinant(_GLF_IDENTITY(mat2(1.0, 1.0, 0.0, 1.0), _GLF_IDENTITY((mat2(1.0, 1.0, 0.0, 1.0)), ((mat2(1.0, 1.0, 0.0, 1.0))) * mat2(1.0)) + mat2(0.0, 0.0, 0.0, 0.0))), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0)), float(mat4x3(_GLF_IDENTITY(0.0, (0.0) * 1.0), 1.0, tan(0.0), 1.0, 1.0, determinant(mat2(1.0, 1.0, 0.0, 1.0)), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0)))), float(mat4x3(_GLF_IDENTITY(0.0, (0.0) * 1.0), _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, float(vec3(1.0, 1.0, 1.0))), 1.0, 1.0)), tan(0.0), 1.0, 1.0, determinant(_GLF_IDENTITY(mat2(1.0, 1.0, 0.0, 1.0), mat2(mat3(mat2(1.0, 1.0, 0.0, 1.0))))), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0))))), _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), dot(vec2(0.0, 0.0), vec2(1.0, 1.0)))), mat3x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat3x2(injectionSwitch, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat2x4(0.0, _GLF_IDENTITY(log(1.0), (log(1.0)) / cos(0.0)), 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, abs(_GLF_IDENTITY(0.0, (0.0) / 1.0)), _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(641.681) : _GLF_IDENTITY(0.0, max(0.0, 0.0))))), vec4(0.0, 1.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec4(0.0, 1.0, abs(0.0), 0.0), vec4(0.0, 1.0, 0.0, 0.0)), clamp(dot(vec4(0.0, 1.0, abs(0.0), 0.0), vec4(0.0, 1.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec4(0.0, 1.0, abs(0.0), 0.0), vec4(0.0, 1.0, 0.0, 0.0)), float(mat3x2(dot(vec4(0.0, 1.0, abs(0.0), 0.0), vec4(0.0, 1.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 1.0, 1.0))), dot(vec4(0.0, 1.0, abs(0.0), 0.0), vec4(0.0, 1.0, 0.0, 0.0))))), 1.0, 1.0)), clamp(float(mat2x4(0.0, log(_GLF_IDENTITY(1.0, (1.0) / 1.0)), 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, abs(0.0), 0.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 1.0, abs(0.0), 0.0), vec4(0.0, 1.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(float(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(1029.1656)), float(0.0), bool(true))))), _GLF_IDENTITY(float(mat4x2(float(float(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(1029.1656)), float(0.0), bool(true))))), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0)), max(float(mat4x2(float(float(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(1029.1656)), float(0.0), bool(true))))), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0)), float(mat4x2(float(float(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(1029.1656)), _GLF_IDENTITY(float(0.0), (float(0.0)) / _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)))), bool(true))))), 0.0, 1.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, float(mat2x4(0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0))), 0.0)), 0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0)))))), 0.0))), 1.0, 1.0)), float(mat2x4(0.0, log(1.0), 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, abs(0.0), 0.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 1.0, abs(_GLF_IDENTITY(_GLF_IDENTITY(0.0, float(mat2x3(0.0, 1.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0))), max(0.0, 0.0))), 0.0), vec4(0.0, 1.0, 0.0, 0.0))), 1.0, 1.0)), float(mat2x4(0.0, log(1.0), 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(_GLF_IDENTITY(_GLF_IDENTITY(vec4(0.0, 1.0, abs(0.0), 0.0), _GLF_IDENTITY(vec4(mat3x4(vec4(0.0, 1.0, abs(0.0), 0.0), 0.0, 1.0, 0.0, length(abs(vec3(0.0, 0.0, 0.0))), 1.0, cos(0.0), sqrt(0.0), sqrt(1.0))), (vec4(mat3x4(vec4(0.0, 1.0, abs(0.0), 0.0), 0.0, 1.0, 0.0, length(abs(vec3(0.0, 0.0, 0.0))), 1.0, cos(0.0), sqrt(0.0), sqrt(1.0)))) / vec4(1.0, 1.0, 1.0, 1.0))), _GLF_IDENTITY(mat4(_GLF_IDENTITY(1.0, min(1.0, 1.0))) * (vec4(0.0, 1.0, abs(0.0), 0.0)), min(mat4(1.0) * (vec4(0.0, 1.0, abs(0.0), 0.0)), mat4(1.0) * (vec4(0.0, 1.0, abs(0.0), 0.0))))), vec4(0.0, 1.0, 0.0, 0.0)), dot(_GLF_IDENTITY(vec4(0.0, 1.0, abs(0.0), 0.0), min(vec4(0.0, 1.0, abs(0.0), 0.0), vec4(0.0, 1.0, abs(0.0), 0.0))), vec4(0.0, 1.0, 0.0, 0.0))), 1.0, 1.0))))), 0.0), vec2(1.0, 1.0)), dot(vec2(0.0, 0.0), vec2(1.0, 1.0)))))))), injectionSwitch)).y)))) || false))))
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      continue;
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        continue;
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 do
  {
   for(int _injected_loop_counter = int(_GLF_ONE(_GLF_IDENTITY(1.0, _GLF_IDENTITY(0.0 + (_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(_GLF_IDENTITY(-98.35, (_GLF_IDENTITY(-98.35, max(_GLF_IDENTITY(-98.35, clamp(-98.35, -98.35, -98.35)), _GLF_IDENTITY(-98.35, 1.0 * (-98.35))))) / exp(0.0)))), bool(false)))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(9.7) : _GLF_IDENTITY(0.0 + (_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(_GLF_IDENTITY(-98.35, (_GLF_IDENTITY(-98.35, max(_GLF_IDENTITY(-98.35, clamp(-98.35, -98.35, -98.35)), _GLF_IDENTITY(-98.35, 1.0 * (-98.35))))) / exp(0.0)))), bool(false)))), _GLF_IDENTITY(float(vec4(0.0 + (_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(_GLF_IDENTITY(-98.35, (_GLF_IDENTITY(-98.35, max(_GLF_IDENTITY(-98.35, clamp(-98.35, -98.35, -98.35)), _GLF_IDENTITY(-98.35, 1.0 * (-98.35))))) / exp(0.0)))), bool(false)))), 1.0, 0.0, 0.0)), float(mat2x3(float(vec4(0.0 + (_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(_GLF_IDENTITY(-98.35, (_GLF_IDENTITY(-98.35, max(_GLF_IDENTITY(-98.35, clamp(-98.35, -98.35, -98.35)), _GLF_IDENTITY(-98.35, 1.0 * (-98.35))))) / exp(0.0)))), bool(false)))), 1.0, 0.0, 0.0)), 1.0, 0.0, 1.0, 1.0, 0.0))))))), injectionSwitch.y)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != 0, true && (_GLF_IDENTITY(_injected_loop_counter != 0, true && (_injected_loop_counter != 0)))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_injected_loop_counter != 0, (_injected_loop_counter != 0) || false), true), bvec2(bvec2(bvec2(_GLF_IDENTITY(_injected_loop_counter != 0, (_injected_loop_counter != 0) || false), true))))))); _injected_loop_counter --)
    {
     GLF_merged2_0_3_79_3_1_11GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_sizesubgroup_id.xyz.y = _GLF_IDENTITY(GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_id.x, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_id.x, max(_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_id.x, 0u ^ (GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_id.x)), GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_id.x))), ((_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_id.x, max(GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_id.x, GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_id.x)))) | ((_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_id.x, max(GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_id.x, GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_id.x)), (_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_id.x, max(GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_id.x, GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_id.x))) << 0u)))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_id, (_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_id, (GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_id) - uvec2(0u, 0u))) | (_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_id, (GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_id) >> uvec2(0u, 0u)))).x, max(GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_id.x, GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_id.x))), clamp((_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_id.x, max(GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_id.x, GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_id.x))), (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_id, (_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_id, (GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_id) / uvec2(1u, 1u))) ^ uvec2(0u, 0u)).x, max(GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_id.x, GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_id.x))), (_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_id.x, max(GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_id.x, _GLF_IDENTITY(GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_id.x, (GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_id.x) | (_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_id.x, 0u ^ (GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_id.x)))))))))) >> _GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, 0u | (0u))) / 1u)))) ^ (0u << _GLF_IDENTITY(uint(7u), uint(_GLF_IDENTITY(7u, clamp(7u, _GLF_IDENTITY(7u, 0u ^ (7u)), 7u))))));
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
        continue;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      break;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(877.685, 9899.1329)) : _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).y))))
          {
           barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          return;
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        break;
       break;
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_DEAD(false)) || false, ! (_GLF_IDENTITY(! ((_GLF_DEAD(false)) || false), true && (! (_GLF_IDENTITY((_GLF_DEAD(false)), ((_GLF_DEAD(false))) || false) || false)))))))
    return;
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
    {
    }
   else
    {
     return;
    }
  }
 if(_GLF_DEAD(false))
  return;
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) + (uvec3(0u, 0u, 0u) ^ uvec3(0u, 0u, 0u))).x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))))
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), true, true))))
    return;
   return;
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  return;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y))))
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
     for(int _injected_loop_counter = (_GLF_IDENTITY(0, (0) * 1) ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) > injectionSwitch.y))))))
          return;
        }
       else
        {
        }
      }
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, (false) && true))))))
    {
     for(int _injected_loop_counter = (1 ^ int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), clamp(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))) - 0.0), _GLF_ZERO(0.0, injectionSwitch.x))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, _GLF_IDENTITY(min(0, 0), (min(0, 0)) - 0))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, bool(bvec2(true, true))), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x < _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-4.2)), bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(20.16)), vec2(_GLF_FUZZED(-27.53), (injectionSwitch)[1]), bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), injectionSwitch, injectionSwitch)).x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x4(injectionSwitch, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0, 0.0, sin(0.0), 1.0, 0.0)), (vec2(mat2x4(injectionSwitch, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0, 0.0, sin(0.0), 1.0, 0.0))) / vec2(1.0, 1.0))).y, mix(float(_GLF_FUZZED(5.0)), float(injectionSwitch.y), _GLF_IDENTITY(bool(true), (bool(true)) || false))))))))) - 0.0, ((_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-4.2)), bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / abs(1.0)) > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(5.0)), float(injectionSwitch.y), bool(true))))))))) - 0.0) - _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))))))))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
          {
          }
         else
          {
           return;
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
       for(int _injected_loop_counter = ((97281 & 0) ^ 1); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, ! (! (_injected_loop_counter > 0))))) || false); _injected_loop_counter --)
        {
         barrier();
        }
      }
    }
   for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) ^ 0) != 0)), true && (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) ^ 0) != 0)))))); _GLF_IDENTITY(_injected_loop_counter --, (_GLF_IDENTITY(_injected_loop_counter --, 1 * (_GLF_IDENTITY(_injected_loop_counter --, 1 * (_injected_loop_counter --))))) >> 0))
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true))), false, false)))))
          barrier();
         continue;
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      break;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)) || false); _injected_loop_counter ++)
      {
       return;
       if(_GLF_DEAD(false))
        break;
      }
    }
  }
 _GLF_IDENTITY(GLF_merged2_0_3_79_3_1_11GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_sizesubgroup_id.xyz.z = _GLF_IDENTITY(workgroup_size, 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY(0u | (workgroup_size), min(0u | (workgroup_size), _GLF_IDENTITY(_GLF_IDENTITY(0u | (workgroup_size), (0u | (workgroup_size)) | 0u), (_GLF_IDENTITY(_GLF_IDENTITY(0u | (workgroup_size), (0u | (workgroup_size)) | 0u), clamp(_GLF_IDENTITY(_GLF_IDENTITY(0u | (workgroup_size), (0u | (workgroup_size)) | 0u), (_GLF_IDENTITY(0u | (workgroup_size), (0u | (workgroup_size)) | 0u)) ^ 0u), _GLF_IDENTITY(0u | (workgroup_size), (0u | (workgroup_size)) | 0u), _GLF_IDENTITY(0u | (workgroup_size), (0u | (workgroup_size)) | 0u)))) + 0u)))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, uint(uint(workgroup_size))), 0u | (workgroup_size))) | (_GLF_IDENTITY(workgroup_size, 0u | (workgroup_size))), 0u ^ ((_GLF_IDENTITY(workgroup_size, 0u | (workgroup_size))) | (_GLF_IDENTITY(workgroup_size, 0u | (workgroup_size)))))))), (0u << _GLF_IDENTITY(uint(_GLF_IDENTITY(3u, ~ (~ (3u)))), uint(3u))) ^ (_GLF_IDENTITY(GLF_merged2_0_3_79_3_1_11GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_sizesubgroup_id.xyz.z = _GLF_IDENTITY(workgroup_size, 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY(0u | (workgroup_size), min(0u | (workgroup_size), _GLF_IDENTITY(0u | (workgroup_size), (0u | (workgroup_size)) | 0u)))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, 0u | (workgroup_size)), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, 0u | (workgroup_size)), (false ? _GLF_FUZZED(79336u) : _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, 0u | (workgroup_size)), (_GLF_IDENTITY(workgroup_size, 0u | (workgroup_size))) + 0u)))) | (_GLF_IDENTITY(workgroup_size, 0u | (workgroup_size))))) | (_GLF_IDENTITY(workgroup_size, 0u | (workgroup_size))), 0u ^ ((_GLF_IDENTITY(workgroup_size, 0u | (workgroup_size))) | (_GLF_IDENTITY(workgroup_size, 0u | (workgroup_size)))))))), ~ (_GLF_IDENTITY(~ (GLF_merged2_0_3_79_3_1_11GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_sizesubgroup_id.xyz.z = _GLF_IDENTITY(workgroup_size, 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY(0u | (workgroup_size), min(0u | (workgroup_size), _GLF_IDENTITY(0u | (workgroup_size), (0u | (workgroup_size)) | 0u)))), _GLF_IDENTITY((_GLF_IDENTITY(workgroup_size, 0u | (workgroup_size))) | (_GLF_IDENTITY(workgroup_size, 0u | (workgroup_size))), 0u ^ ((_GLF_IDENTITY(workgroup_size, 0u | (workgroup_size))) | (_GLF_IDENTITY(workgroup_size, 0u | (workgroup_size))))))))), (false ? _GLF_FUZZED(subgroup_size) : ~ _GLF_IDENTITY((GLF_merged2_0_3_79_3_1_11GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_sizesubgroup_id.xyz.z = _GLF_IDENTITY(workgroup_size, 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY(0u | (workgroup_size), min(0u | (workgroup_size), _GLF_IDENTITY(0u | (workgroup_size), (0u | (workgroup_size)) | 0u)))), _GLF_IDENTITY((_GLF_IDENTITY(workgroup_size, 0u | (workgroup_size))) | (_GLF_IDENTITY(workgroup_size, 0u | (workgroup_size))), 0u ^ ((_GLF_IDENTITY(workgroup_size, 0u | (workgroup_size))) | (_GLF_IDENTITY(workgroup_size, 0u | _GLF_IDENTITY((workgroup_size), min(_GLF_IDENTITY((workgroup_size), uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY((workgroup_size), ~ (~ ((workgroup_size)))), 1u, 1u, 1u), (uvec4(_GLF_IDENTITY((workgroup_size), ~ (~ ((workgroup_size)))), 1u, 1u, 1u)) ^ uvec4(0u, 0u, 0u, 0u)))), (workgroup_size))))))))))), 0u ^ ((GLF_merged2_0_3_79_3_1_11GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_sizesubgroup_id.xyz.z = _GLF_IDENTITY(workgroup_size, 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY(0u | (workgroup_size), min(0u | (workgroup_size), _GLF_IDENTITY(0u | (workgroup_size), (0u | (workgroup_size)) | 0u)))), _GLF_IDENTITY((_GLF_IDENTITY(workgroup_size, 0u | (workgroup_size))) | (_GLF_IDENTITY(workgroup_size, 0u | (workgroup_size))), 0u ^ ((_GLF_IDENTITY(workgroup_size, 0u | (workgroup_size))) | (_GLF_IDENTITY(workgroup_size, 0u | _GLF_IDENTITY((workgroup_size), min(_GLF_IDENTITY((workgroup_size), uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY((workgroup_size), ~ (~ ((workgroup_size)))), 1u, 1u, 1u), (uvec4(_GLF_IDENTITY((workgroup_size), ~ (~ ((workgroup_size)))), 1u, 1u, 1u)) ^ uvec4(0u, 0u, 0u, 0u)))), (workgroup_size)))))))))))))))))));
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID, (_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | uvec3(_GLF_IDENTITY(0u, max(0u, 0u)), 0u, 0u))) | uvec3(0u, 0u, 0u)).x;
 if(_GLF_DEAD(false))
  barrier();
 GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_id.y = workgroup_id;
 if(_GLF_DEAD(false))
  return;
 uint workgroup_base = _GLF_IDENTITY(GLF_merged2_0_3_79_3_1_11GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_sizesubgroup_id, (GLF_merged2_0_3_79_3_1_11GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_sizesubgroup_id) | (GLF_merged2_0_3_79_3_1_11GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_sizesubgroup_id)).xyz.z * GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_id.y;
 GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base.y = _GLF_IDENTITY(workgroup_base, min(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)), _GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true)) || false), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED((- -4.4))), float(injectionSwitch.y), bool(true)))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         do
          {
           if(_GLF_DEAD(false))
            return;
          }
         while(_GLF_WRAPPED_LOOP(false));
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          return;
        }
      }
     else
      {
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (-9689 & 0)); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_TRUE(_GLF_IDENTITY(true, (true) && true), _GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y), true && ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y))))))))
        {
         if(_GLF_DEAD(false))
          return;
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 ^ _GLF_IDENTITY((_GLF_IDENTITY(0 | 0, (0 | 0) | (0 | 0))), int(int((_GLF_IDENTITY(0 | 0, (0 | 0) | (0 | 0))))))) | 0)); _injected_loop_counter --)
          {
           return;
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        return;
      }
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-9984.7923, -5969.4778)) : injectionSwitch)).x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat4x3(injectionSwitch.y, 1.0, 1.0, 1.0, 1.0, abs(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0)))), 1.0, exp(0.0), tan(0.0), length(vec2(0.0, 0.0)), 0.0, 0.0))))), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       return;
      }
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)))), false || (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(0, (false ? _GLF_FUZZED(bitCount(-69366)) : _GLF_IDENTITY(0, (0) | 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       return;
      }
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    return;
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 uint virtual_gid = _GLF_IDENTITY(GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base, (GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base) / uvec2(1u, 1u)).y + GLF_merged2_0_3_79_3_1_11GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_sizesubgroup_id.w * GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base.x + _GLF_IDENTITY(GLF_merged2_0_3_79_3_1_11GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_sizesubgroup_id, min(GLF_merged2_0_3_79_3_1_11GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_sizesubgroup_id, GLF_merged2_0_3_79_3_1_11GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_sizesubgroup_id)).xyz.y;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))))
  return;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(0, ~ (~ (0))) >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || false)) || false))
      barrier();
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) ^ 0))
          {
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
         do
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              return;
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)))).x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(7681.4563, -2.1)))))).y, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(7681.4563, -2.1)))))).y) + 0.0)))));
         if(_GLF_DEAD(false))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)) && true))
            return;
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))
            {
            }
           else
            {
             barrier();
            }
          }
        }
       barrier();
      }
     do
      {
       barrier();
       if(_GLF_DEAD(false))
        break;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base, min(GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base, _GLF_IDENTITY(GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base, max(GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base, GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base)))), (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base, (GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base) | (GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base)), min(GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base, _GLF_IDENTITY(GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base, max(GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base, GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base))))) | uvec2(0u, 0u)).y + GLF_merged2_0_3_79_3_1_11GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_sizesubgroup_id.w * GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base.x + (_GLF_IDENTITY((_GLF_IDENTITY(GLF_merged2_0_3_79_3_1_11GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_sizesubgroup_id.xyz.y + 1, ~ (~ (_GLF_IDENTITY(GLF_merged2_0_3_79_3_1_11GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_sizesubgroup_id.xyz.y + 1, min(_GLF_IDENTITY(GLF_merged2_0_3_79_3_1_11GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_sizesubgroup_id, uvec4(GLF_merged2_0_3_79_3_1_11GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_sizesubgroup_id[0], GLF_merged2_0_3_79_3_1_11GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_sizesubgroup_id[1], GLF_merged2_0_3_79_3_1_11GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_sizesubgroup_id[2], GLF_merged2_0_3_79_3_1_11GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_sizesubgroup_id[3])).xyz.y + 1, GLF_merged2_0_3_79_3_1_11GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_sizesubgroup_id.xyz.y + 1)))))) % _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base, (_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base, max(_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base, clamp(GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base, GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base, GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base)), GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base))) * uvec2(1u, 1u)), ~ (~ (GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base))).x, _GLF_IDENTITY(max((GLF_merged2_0_3_79_3_1_11GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_sizesubgroup_id.xyz.y + 1) % GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base.x, (GLF_merged2_0_3_79_3_1_11GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_sizesubgroup_id.xyz.y + 1) % GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base.x), (max((GLF_merged2_0_3_79_3_1_11GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_sizesubgroup_id.xyz.y + 1) % GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base.x, (GLF_merged2_0_3_79_3_1_11GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_sizesubgroup_id.xyz.y + 1) % GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base.x)) | (max((GLF_merged2_0_3_79_3_1_11GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_sizesubgroup_id.xyz.y + 1) % GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base.x, (GLF_merged2_0_3_79_3_1_11GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_sizesubgroup_id.xyz.y + 1) % GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base.x)))));
 GLF_merged2_0_3_79_3_1_16GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_sizenext_virtual_gid.w = _GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) ^ 0u);
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, false, false))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true, true))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true, true)))), (! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))).x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true, true)), false || (bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true, true))))))) && true)))))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = (0 | (-32124 & 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           return;
          }
        }
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      return;
    }
   else
    {
     do
      {
       return;
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false)))))))
            continue;
           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             barrier();
             if(_GLF_DEAD(false))
              break;
            }
          }
         return;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), false, true), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_DEAD(false), false, true), false)), bvec3(bvec4(bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), false, true), false)), false))))), _GLF_IDENTITY(true && (bool(bvec3(_GLF_DEAD(false), false, true))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true && (bool(bvec3(_GLF_DEAD(false), false, true))), false || (true && (bool(bvec3(_GLF_DEAD(false), false, true))))), false, false)), (bool(bvec3(_GLF_IDENTITY(true && (bool(bvec3(_GLF_DEAD(false), false, true))), false || (true && (bool(bvec3(_GLF_DEAD(false), false, true))))), false, false))) || false)))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
        {
         do
          {
           return;
          }
         while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) || false));
        }
      }
    }
  }
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     GLF_merged2_0_3_79_3_1_11GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_sizesubgroup_id.xyz.x = GLF_merged2_0_3_79_3_1_16GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_sizenext_virtual_gid.w;
     if(_GLF_DEAD(false))
      return;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) || false)))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
    }
  }
 for(int _injected_loop_counter = int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), mix(float(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (false ? _GLF_FUZZED(89.38) : _GLF_IDENTITY(_GLF_ONE(_GLF_IDENTITY(1.0, 1.0 * (1.0)), injectionSwitch.y), mix(float(_GLF_ONE(_GLF_IDENTITY(1.0, 1.0 * (1.0)), injectionSwitch.y)), float(_GLF_FUZZED(8.6)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), float(_GLF_FUZZED(-7.0)), bool(false)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     buf[virtual_gid] = 1;
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 do
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && true), (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, 1.0 * (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), max(injectionSwitch, injectionSwitch)).y))))))
      return;
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_IDENTITY(GLF_merged2_0_3_79_3_1_11GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_sizesubgroup_id, uvec4(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_size) : 1u))) * 1u), 1u, 1u, 1u) * _GLF_IDENTITY((GLF_merged2_0_3_79_3_1_11GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_sizesubgroup_id), ((GLF_merged2_0_3_79_3_1_11GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_sizesubgroup_id)) / uvec4(1u, 1u, 1u, 1u))).xyz.y + 1 < GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base.x)
      {
       if(_GLF_DEAD(false))
        barrier();
       int i = 0;
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y) - 0.0, min(_GLF_IDENTITY((injectionSwitch.y) - 0.0, clamp((injectionSwitch.y) - 0.0, (injectionSwitch.y) - 0.0, (injectionSwitch.y) - 0.0)), (injectionSwitch.y) - 0.0)))), _GLF_IDENTITY(true, (true) || false) && ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], float(vec2((injectionSwitch)[0], 1.0))), (injectionSwitch)[1]), vec2(_GLF_FUZZED(-736.665), _GLF_FUZZED(vec4(-3931.5867, 8.4, -23.62, 75.10).x)), bvec2(false, false))).x > injectionSwitch.y)))))), _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3((injectionSwitch.x < injectionSwitch.y), false, true), bvec3(bvec3(bvec3((injectionSwitch.x < injectionSwitch.y), false, true))))), ! (! (bool(_GLF_IDENTITY(bvec3((injectionSwitch.x < injectionSwitch.y), false, true), bvec3(bvec3(bvec3((injectionSwitch.x < injectionSwitch.y), false, true)))))))))) && (_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           continue;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0))) - vec2(0.0, 0.0)), min(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-9554.4452, 4.7)) : _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))), injectionSwitch)).y))))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y)), false || (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && true))))))
                {
                 return;
                }
               else
                {
                }
              }
             return;
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((injectionSwitch.x > injectionSwitch.y))))))
            continue;
           break;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           break;
          }
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
          barrier();
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, int(_GLF_IDENTITY(int(1), clamp(int(1), int(1), int(1)))))); _injected_loop_counter ++)
            {
             do
              {
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
                {
                 do
                  {
                   barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               if(_GLF_DEAD(false))
                continue;
              }
             while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) && true));
             barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(_GLF_DEAD(false))
              return;
            }
          }
        }
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ int(_GLF_ONE(1.0, injectionSwitch.y)))); _injected_loop_counter --)
            {
             return;
            }
          }
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       for(int _injected_loop_counter = (int(_GLF_ZERO(_GLF_IDENTITY(_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0)), (_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))) / 1.0), injectionSwitch.x)) << _GLF_IDENTITY(int(8), int(8))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (_GLF_IDENTITY(1, max(1, 1))) / 1)); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             buf[GLF_merged2_0_3_79_3_1_11GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_sizesubgroup_id.xyz.x] = _GLF_IDENTITY(2, (2) | (2));
            }
           if(_GLF_DEAD(false))
            break;
          }
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-99.00)), vec2(_GLF_FUZZED(_GLF_IDENTITY(-470.774, 1.0 * (-470.774))), _GLF_IDENTITY((injectionSwitch)[1], clamp((injectionSwitch)[1], (injectionSwitch)[1], (injectionSwitch)[1]))), bvec2(false, true))).y))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0), (mat2(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-9.1)), bool(false)))) / 1.0))))) / mat2(1.0, 1.0, 1.0, 1.0)) * (injectionSwitch)).y))), bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true))), (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, float(float(injectionSwitch.y))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, float(float(injectionSwitch.y))), clamp(_GLF_IDENTITY(injectionSwitch.y, float(float(injectionSwitch.y))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, float(float(injectionSwitch.y))), min(_GLF_IDENTITY(injectionSwitch.y, float(float(injectionSwitch.y))), _GLF_IDENTITY(injectionSwitch.y, float(float(injectionSwitch.y))))), _GLF_IDENTITY(injectionSwitch.y, float(float(injectionSwitch.y)))))) - 0.0))), true && (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true))), (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, float(float(injectionSwitch.y))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, float(float(injectionSwitch.y))), clamp(_GLF_IDENTITY(injectionSwitch.y, float(float(injectionSwitch.y))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, float(float(injectionSwitch.y))), min(_GLF_IDENTITY(injectionSwitch.y, float(float(injectionSwitch.y))), _GLF_IDENTITY(injectionSwitch.y, float(float(injectionSwitch.y))))), _GLF_IDENTITY(injectionSwitch.y, float(float(injectionSwitch.y)))))) - 0.0))), true && (_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(bvec2(false, true))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))))), true, true))), (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, float(float(injectionSwitch.y))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, float(float(injectionSwitch.y))), clamp(_GLF_IDENTITY(injectionSwitch.y, float(float(injectionSwitch.y))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, float(float(injectionSwitch.y))), min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, float(float(injectionSwitch.y))), max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, float(float(injectionSwitch.y))), (true ? _GLF_IDENTITY(injectionSwitch.y, float(float(injectionSwitch.y))) : _GLF_FUZZED(-3.9))), _GLF_IDENTITY(injectionSwitch.y, float(float(injectionSwitch.y))))), _GLF_IDENTITY(injectionSwitch.y, float(float(injectionSwitch.y))))), _GLF_IDENTITY(injectionSwitch.y, float(float(injectionSwitch.y)))))) - 0.0))))))), false || (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)), ! (_GLF_IDENTITY(! (bool(bvec4(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true))), bool(bvec4(! (bool(bvec4(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true))), false, false, false)))))), (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, float(float(injectionSwitch.y))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, float(float(injectionSwitch.y))), _GLF_IDENTITY(clamp(_GLF_IDENTITY(injectionSwitch.y, float(float(injectionSwitch.y))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, float(float(injectionSwitch.y))), min(_GLF_IDENTITY(injectionSwitch.y, float(float(injectionSwitch.y))), _GLF_IDENTITY(injectionSwitch.y, float(float(injectionSwitch.y))))), _GLF_IDENTITY(injectionSwitch.y, float(float(injectionSwitch.y)))), mix(float(_GLF_FUZZED(-5478.9308)), float(clamp(_GLF_IDENTITY(injectionSwitch.y, float(float(injectionSwitch.y))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, float(float(injectionSwitch.y))), min(_GLF_IDENTITY(injectionSwitch.y, float(float(injectionSwitch.y))), _GLF_IDENTITY(injectionSwitch.y, float(float(injectionSwitch.y))))), _GLF_IDENTITY(injectionSwitch.y, float(float(injectionSwitch.y))))), bool(true))))) - 0.0))), true && (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true))), (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, float(float(injectionSwitch.y))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, float(float(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, abs(1.0) * (injectionSwitch.y)), float(float(injectionSwitch.y))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, float(float(injectionSwitch.y))), min(_GLF_IDENTITY(injectionSwitch.y, float(float(injectionSwitch.y))), _GLF_IDENTITY(injectionSwitch.y, float(float(injectionSwitch.y))))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))), float(float(injectionSwitch.y)))))) - 0.0))), true && (_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(bvec2(false, true))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))))), true, true))), (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, float(float(injectionSwitch.y))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), float(float(injectionSwitch.y))), clamp(_GLF_IDENTITY(injectionSwitch.y, float(float(injectionSwitch.y))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, float(float(injectionSwitch.y))), min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, float(float(injectionSwitch.y))), max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, float(float(injectionSwitch.y))), (true ? _GLF_IDENTITY(injectionSwitch.y, float(float(injectionSwitch.y))) : _GLF_FUZZED(-3.9))), _GLF_IDENTITY(injectionSwitch.y, float(float(injectionSwitch.y))))), _GLF_IDENTITY(injectionSwitch.y, float(float(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], min((injectionSwitch)[0], (injectionSwitch)[0])), (injectionSwitch)[1]), vec2(_GLF_FUZZED(1.6), _GLF_FUZZED(3.7)), bvec2(false, false))).y))))), _GLF_IDENTITY(injectionSwitch.y, float(float(injectionSwitch.y)))))) - 0.0)))))))))), true, false, true))))))
          {
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  return;
                 barrier();
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              break;
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec2(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(_GLF_IDENTITY(vec3(injectionSwitch.y, 0.0, 0.0), vec3(0.0, 0.0, 0.0) + (vec3(injectionSwitch.y, 0.0, 0.0)))), min(float(_GLF_IDENTITY(vec3(injectionSwitch.y, 0.0, 0.0), vec3(0.0, 0.0, 0.0) + (vec3(injectionSwitch.y, 0.0, 0.0)))), float(_GLF_IDENTITY(vec3(injectionSwitch.y, 0.0, 0.0), vec3(0.0, 0.0, 0.0) + (vec3(injectionSwitch.y, 0.0, 0.0))))))))), true)))))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             continue;
            }
           continue;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y))))
            break;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
     else
      {
       do
        {
         _GLF_IDENTITY(buf[GLF_merged2_0_3_79_3_1_11GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_sizesubgroup_id.xyz.x] = 2, ~ (~ (buf[GLF_merged2_0_3_79_3_1_11GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_sizesubgroup_id.xyz.x] = 2)));
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = (-10006 & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & 1)); _injected_loop_counter ++)
        {
         barrier();
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), bool(bool(false)))));
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
}
