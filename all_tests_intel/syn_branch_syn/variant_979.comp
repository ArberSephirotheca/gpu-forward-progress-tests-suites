#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 0) uniform buf0 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        barrier();
      }
    }
   else
    {
    }
  }
 uint subgroup_size = _GLF_IDENTITY(_GLF_IDENTITY(16, int(ivec3(_GLF_IDENTITY(16, clamp(_GLF_IDENTITY(16, 0 ^ (16)), _GLF_IDENTITY(16, int(ivec2(16, 0))), 16)), 0, 1))), _GLF_IDENTITY((_GLF_IDENTITY(16, (_GLF_IDENTITY(16, max(_GLF_IDENTITY(16, (_GLF_IDENTITY(_GLF_IDENTITY(16, 0 | (16)), int(int(_GLF_IDENTITY(16, 0 | (16)))))) + 0), 16))) << _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (int(_GLF_ZERO(0.0, injectionSwitch.x))) << 0))) << 0, (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), clamp(int(0), int(0), int(0))), int(0))) + ((_GLF_IDENTITY(16, (16) << int(_GLF_ZERO(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(2.5) : 0.0)), injectionSwitch.x)))) << 0)));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), (_GLF_IDENTITY((false), ! (! ((false))))) && true))))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     do
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bvec3(! (_GLF_DEAD(false)), false, true)))))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat3x2(injectionSwitch.y, sqrt(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(9789.6889) : 0.0))), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), _GLF_ZERO(0.0, injectionSwitch.x), cos(0.0), sqrt(0.0))))))));
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))) || false)))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), false || ((injectionSwitch.x > injectionSwitch.y))))))
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 0)); _injected_loop_counter --)
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 ^ 0)); _injected_loop_counter --)
          {
           for(int _injected_loop_counter = _GLF_IDENTITY(0, int(ivec4(0, 0, 0, _GLF_IDENTITY(1, (1) >> 0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
              }
            }
          }
        }
      }
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false || (false), true && (_GLF_IDENTITY(false || (false), true && (false || (false)))))), (_GLF_IDENTITY(! (_GLF_IDENTITY(false || (false), true && (_GLF_IDENTITY(false || (false), true && (false || (false)))))), ! (! (! (_GLF_IDENTITY(false || (_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))), true && (_GLF_IDENTITY(false || (false), true && (_GLF_IDENTITY(false, ! (! (false))) || (false)))))))))) && true))))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
  }
 uint workgroup_base = _GLF_IDENTITY(workgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(workgroup_size, ~ _GLF_IDENTITY((~ (workgroup_size)), (_GLF_IDENTITY((~ (workgroup_size)), 0u ^ ((_GLF_IDENTITY(~ (workgroup_size), uint(uvec4(~ (workgroup_size), (1u ^ 0u), _GLF_IDENTITY(1u, 1u * (1u)), 1u))))))) | _GLF_IDENTITY((_GLF_IDENTITY((~ (workgroup_size)), clamp(_GLF_IDENTITY((~ (workgroup_size)), ~ (~ ((~ (workgroup_size))))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_size, min(_GLF_IDENTITY(workgroup_size, uint(_GLF_IDENTITY(uvec2(workgroup_size, 1u), (uvec2(workgroup_size, 1u)) / uvec2(1u, 1u)))), _GLF_IDENTITY(workgroup_size, (_GLF_IDENTITY(workgroup_size, (workgroup_size) | (workgroup_size))) << (0u & 143954u))))), (~ (_GLF_IDENTITY(workgroup_size, min(_GLF_IDENTITY(workgroup_size, uint(_GLF_IDENTITY(uvec2(workgroup_size, 1u), (uvec2(workgroup_size, 1u)) / uvec2(1u, 1u)))), _GLF_IDENTITY(workgroup_size, (_GLF_IDENTITY(workgroup_size, (workgroup_size) | (workgroup_size))) << (0u & 143954u)))))) << 0u)), (~ (workgroup_size))))), 0u | ((_GLF_IDENTITY((~ (workgroup_size)), clamp((~ _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(workgroup_size, clamp(workgroup_size, workgroup_size, _GLF_IDENTITY(workgroup_size, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(workgroup_id) : workgroup_size))))), clamp((workgroup_size), (workgroup_size), _GLF_IDENTITY((workgroup_size), (0u >> _GLF_IDENTITY(uint(5u), uint(5u))) | ((workgroup_size))))), ((workgroup_size)) | ((workgroup_size)))), (~ (_GLF_IDENTITY(workgroup_size, min(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, uint(uvec2(workgroup_size, 1u))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY(uint(uvec3(workgroup_size, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)), (_GLF_IDENTITY(uint(uvec3(workgroup_size, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)), 0u + (uint(uvec3(workgroup_size, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u))))) / 1u)), uint(uvec2(workgroup_size, 1u))), uint(uvec3(_GLF_IDENTITY(workgroup_size, uint(uvec2(workgroup_size, 1u))), 0u, 0u)))), min((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY(uint(uvec3(workgroup_size, _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), uint(_GLF_IDENTITY(uvec3(uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u, 0u), (uvec3(uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u, 0u)) | (uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(3u), uvec3(3u)))))), 0u)), (_GLF_IDENTITY(uint(uvec3(workgroup_size, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)), 0u + (uint(uvec3(workgroup_size, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u))))) / 1u)), uint(uvec2(workgroup_size, 1u))), uint(uvec3(_GLF_IDENTITY(workgroup_size, uint(uvec2(workgroup_size, 1u))), 0u, 0u)))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY(uint(uvec3(workgroup_size, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)), (_GLF_IDENTITY(uint(uvec3(workgroup_size, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)), 0u + (uint(uvec3(workgroup_size, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u))))) / 1u)), uint(uvec2(workgroup_size, 1u))), uint(uvec3(_GLF_IDENTITY(workgroup_size, uint(uvec2(workgroup_size, 1u))), 0u, 0u)))))), min((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY(uint(uvec3(workgroup_size, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)), (_GLF_IDENTITY(uint(uvec3(workgroup_size, uint(_GLF_ZERO(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (0.0) - 0.0)) - 0.0), injectionSwitch.x)), 0u)), 0u + (uint(uvec3(workgroup_size, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u))))) / 1u)), uint(uvec2(workgroup_size, 1u))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY(uint(uvec3(workgroup_size, uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x4(injectionSwitch, 0.0, 1.0, 0.0, abs(0.0), sin(_GLF_IDENTITY(dot(vec4(1.0, 0.0, 1.0, 0.0), vec4(0.0, 1.0, 0.0, 1.0)), dot(vec4(1.0, 0.0, 1.0, 0.0), vec4(0.0, 1.0, 0.0, 1.0)))), 0.0, 0.0, 1.0, 0.0, 1.0)), min(vec2(mat3x4(injectionSwitch, 0.0, 1.0, 0.0, abs(0.0), sin(_GLF_IDENTITY(dot(vec4(1.0, 0.0, 1.0, 0.0), vec4(0.0, 1.0, 0.0, 1.0)), dot(vec4(1.0, 0.0, 1.0, 0.0), vec4(0.0, 1.0, 0.0, 1.0)))), 0.0, 0.0, 1.0, 0.0, 1.0)), vec2(mat3x4(injectionSwitch, 0.0, 1.0, 0.0, abs(0.0), sin(_GLF_IDENTITY(dot(vec4(1.0, 0.0, 1.0, 0.0), vec4(0.0, 1.0, 0.0, 1.0)), dot(vec4(1.0, 0.0, 1.0, 0.0), vec4(0.0, 1.0, 0.0, 1.0)))), 0.0, 0.0, 1.0, 0.0, 1.0))))).x)), 0u)), (_GLF_IDENTITY(uint(uvec3(workgroup_size, uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-52.35) : injectionSwitch.x)), injectionSwitch.x)))), 0u)), 0u + (uint(uvec3(workgroup_size, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u))))) / _GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (1u))))))), uint(uvec2(workgroup_size, 1u)))), clamp((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY(uint(uvec3(workgroup_size, uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x4(injectionSwitch, 0.0, 1.0, 0.0, abs(0.0), sin(_GLF_IDENTITY(dot(vec4(1.0, 0.0, 1.0, 0.0), vec4(0.0, 1.0, 0.0, 1.0)), dot(vec4(1.0, 0.0, 1.0, 0.0), vec4(0.0, 1.0, 0.0, 1.0)))), 0.0, 0.0, 1.0, 0.0, 1.0)), min(vec2(mat3x4(injectionSwitch, 0.0, 1.0, 0.0, abs(0.0), sin(_GLF_IDENTITY(dot(vec4(1.0, 0.0, 1.0, 0.0), vec4(0.0, 1.0, 0.0, 1.0)), dot(vec4(1.0, 0.0, 1.0, 0.0), vec4(0.0, 1.0, 0.0, 1.0)))), 0.0, 0.0, 1.0, 0.0, 1.0)), vec2(mat3x4(injectionSwitch, 0.0, 1.0, 0.0, abs(0.0), sin(_GLF_IDENTITY(dot(vec4(1.0, 0.0, 1.0, 0.0), vec4(0.0, 1.0, 0.0, 1.0)), dot(vec4(1.0, 0.0, 1.0, 0.0), vec4(0.0, 1.0, 0.0, 1.0)))), 0.0, 0.0, 1.0, 0.0, 1.0))))).x)), 0u)), (_GLF_IDENTITY(uint(uvec3(workgroup_size, uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-52.35) : injectionSwitch.x)), injectionSwitch.x)))), 0u)), 0u + (uint(uvec3(workgroup_size, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u))))) / _GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (1u))))))), uint(uvec2(workgroup_size, 1u)))), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY(uint(uvec3(workgroup_size, uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x4(injectionSwitch, 0.0, 1.0, 0.0, abs(0.0), sin(_GLF_IDENTITY(dot(vec4(1.0, 0.0, 1.0, 0.0), vec4(0.0, 1.0, 0.0, 1.0)), dot(vec4(1.0, 0.0, 1.0, 0.0), vec4(0.0, 1.0, 0.0, 1.0)))), 0.0, 0.0, 1.0, 0.0, 1.0)), min(vec2(mat3x4(injectionSwitch, 0.0, 1.0, 0.0, abs(0.0), sin(_GLF_IDENTITY(dot(vec4(1.0, 0.0, 1.0, 0.0), vec4(0.0, 1.0, 0.0, 1.0)), dot(vec4(1.0, 0.0, 1.0, 0.0), vec4(0.0, 1.0, 0.0, 1.0)))), 0.0, 0.0, 1.0, 0.0, 1.0)), vec2(mat3x4(injectionSwitch, 0.0, 1.0, 0.0, abs(0.0), sin(_GLF_IDENTITY(dot(vec4(1.0, 0.0, 1.0, 0.0), vec4(0.0, 1.0, 0.0, 1.0)), dot(vec4(1.0, 0.0, 1.0, 0.0), vec4(0.0, 1.0, 0.0, 1.0)))), 0.0, 0.0, 1.0, 0.0, 1.0))))).x)), 0u)), (_GLF_IDENTITY(uint(uvec3(workgroup_size, uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-52.35) : injectionSwitch.x)), injectionSwitch.x)))), 0u)), 0u + (uint(uvec3(workgroup_size, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u))))) / _GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (1u))))))), uint(uvec2(workgroup_size, 1u)))), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY(uint(uvec3(workgroup_size, uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x4(injectionSwitch, 0.0, 1.0, 0.0, abs(0.0), sin(_GLF_IDENTITY(dot(vec4(1.0, 0.0, 1.0, 0.0), vec4(0.0, 1.0, 0.0, 1.0)), dot(vec4(1.0, 0.0, 1.0, 0.0), vec4(0.0, 1.0, 0.0, 1.0)))), 0.0, 0.0, 1.0, 0.0, 1.0)), min(vec2(mat3x4(injectionSwitch, 0.0, 1.0, 0.0, abs(0.0), sin(_GLF_IDENTITY(dot(vec4(1.0, 0.0, 1.0, 0.0), vec4(0.0, 1.0, 0.0, 1.0)), dot(vec4(1.0, 0.0, 1.0, 0.0), vec4(0.0, 1.0, 0.0, 1.0)))), 0.0, 0.0, 1.0, 0.0, 1.0)), vec2(mat3x4(injectionSwitch, 0.0, 1.0, 0.0, abs(0.0), sin(_GLF_IDENTITY(dot(vec4(1.0, 0.0, 1.0, 0.0), vec4(0.0, 1.0, 0.0, 1.0)), dot(vec4(1.0, 0.0, 1.0, 0.0), vec4(0.0, 1.0, 0.0, 1.0)))), 0.0, 0.0, 1.0, 0.0, 1.0))))).x)), 0u)), (_GLF_IDENTITY(uint(uvec3(workgroup_size, uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-52.35) : injectionSwitch.x)), injectionSwitch.x)))), 0u)), 0u + (uint(uvec3(workgroup_size, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u))))) / _GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (1u))))))), uint(uvec2(workgroup_size, 1u)))))) >> 0u), uint(uvec3(_GLF_IDENTITY(workgroup_size, uint(uvec2(workgroup_size, 1u))), 0u, 0u)))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY(uint(uvec3(workgroup_size, uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), min(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch)))).x)), 0u)), (_GLF_IDENTITY(uint(uvec3(workgroup_size, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)), 0u + (uint(uvec3(workgroup_size, uint(_GLF_ZERO(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(_GLF_IDENTITY(mat4(0.0, sqrt(1.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, log(1.0), 1.0), mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat4(0.0, sqrt(1.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, log(1.0), 1.0)))), clamp(float(_GLF_IDENTITY(mat4(0.0, sqrt(1.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, log(1.0), 1.0), mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat4(0.0, sqrt(1.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, log(1.0), 1.0)))), float(_GLF_IDENTITY(mat4(0.0, sqrt(1.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, log(1.0), 1.0), mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat4(0.0, sqrt(1.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, log(1.0), 1.0)))), float(_GLF_IDENTITY(mat4(0.0, sqrt(1.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, log(1.0), 1.0), mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat4(0.0, sqrt(1.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, log(1.0), 1.0))))))), injectionSwitch.x)), 0u))))) / 1u)), uint(uvec2(workgroup_size, 1u))), uint(uvec3(_GLF_IDENTITY(workgroup_size, uint(_GLF_IDENTITY(uvec2(workgroup_size, 1u), (uvec2(workgroup_size, 1u)) | (uvec2(workgroup_size, 1u))))), 0u, 0u)))))) ^ 0u), workgroup_size)))), (~ (_GLF_IDENTITY(workgroup_size, uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (workgroup_size)))))))))))) ^ 0u, (_GLF_IDENTITY((_GLF_IDENTITY(workgroup_size, ~ _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((~ _GLF_IDENTITY((workgroup_size), ((workgroup_size)) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))), min((~ _GLF_IDENTITY((workgroup_size), ((workgroup_size)) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))), (~ _GLF_IDENTITY((workgroup_size), ((workgroup_size)) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))))), 0u ^ ((~ (workgroup_size)))), (_GLF_IDENTITY((~ (workgroup_size)), 0u ^ ((~ (workgroup_size))))) | _GLF_IDENTITY((_GLF_IDENTITY((~ (workgroup_size)), clamp((~ (workgroup_size)), (~ (_GLF_IDENTITY(workgroup_size, min(_GLF_IDENTITY(workgroup_size, uint(_GLF_IDENTITY(uvec2(workgroup_size, 1u), (_GLF_IDENTITY(uvec2(workgroup_size, 1u), max(uvec2(workgroup_size, 1u), uvec2(workgroup_size, 1u)))) / uvec2(1u, 1u)))), workgroup_size)))), (~ (workgroup_size))))), 0u | ((_GLF_IDENTITY((~ (workgroup_size)), clamp((~ _GLF_IDENTITY((workgroup_size), (_GLF_IDENTITY((workgroup_size), clamp((workgroup_size), (workgroup_size), (workgroup_size)))) | (_GLF_IDENTITY((workgroup_size), ((workgroup_size)) - 0u)))), _GLF_IDENTITY((~ (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (workgroup_size) ^ 0u), uint(uvec2(workgroup_size, 1u))), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, uint(_GLF_IDENTITY(uvec2(workgroup_size, 1u), clamp(uvec2(workgroup_size, 1u), uvec2(workgroup_size, 1u), _GLF_IDENTITY(uvec2(workgroup_size, 1u), max(uvec2(workgroup_size, 1u), _GLF_IDENTITY(uvec2(workgroup_size, 1u), clamp(uvec2(workgroup_size, 1u), uvec2(_GLF_IDENTITY(workgroup_size, max(_GLF_IDENTITY(workgroup_size, clamp(workgroup_size, workgroup_size, workgroup_size)), workgroup_size)), 1u), uvec2(workgroup_size, 1u))))))))), uint(uvec3(_GLF_IDENTITY(workgroup_size, uint(uvec2(workgroup_size, 1u))), _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, max(0u, 0u)), 0u))) ^ 0u), 0u)))) ^ 0u), workgroup_size)), (_GLF_IDENTITY(workgroup_size, min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (workgroup_size) ^ 0u), uint(uvec2(workgroup_size, 1u))), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, uint(_GLF_IDENTITY(uvec2(workgroup_size, 1u), clamp(uvec2(workgroup_size, 1u), uvec2(workgroup_size, 1u), _GLF_IDENTITY(uvec2(workgroup_size, 1u), max(uvec2(workgroup_size, 1u), _GLF_IDENTITY(uvec2(workgroup_size, _GLF_IDENTITY(1u, (1u) ^ 0u)), clamp(uvec2(workgroup_size, 1u), uvec2(_GLF_IDENTITY(workgroup_size, max(_GLF_IDENTITY(workgroup_size, clamp(workgroup_size, workgroup_size, workgroup_size)), workgroup_size)), 1u), uvec2(workgroup_size, 1u))))))))), uint(uvec3(_GLF_IDENTITY(workgroup_size, uint(uvec2(workgroup_size, 1u))), _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, max(0u, 0u)), 0u))) ^ 0u), _GLF_IDENTITY(0u, clamp(0u, 0u, _GLF_IDENTITY(0u, (0u) >> 0u))))))) ^ 0u), workgroup_size))) | 0u))), 0u | (_GLF_IDENTITY((~ (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (workgroup_size) ^ 0u), uint(uvec2(workgroup_size, 1u))), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, uint(_GLF_IDENTITY(uvec2(workgroup_size, 1u), clamp(uvec2(workgroup_size, 1u), uvec2(workgroup_size, 1u), _GLF_IDENTITY(uvec2(workgroup_size, 1u), max(uvec2(workgroup_size, 1u), _GLF_IDENTITY(uvec2(workgroup_size, 1u), clamp(uvec2(workgroup_size, 1u), uvec2(_GLF_IDENTITY(workgroup_size, max(_GLF_IDENTITY(workgroup_size, clamp(workgroup_size, workgroup_size, workgroup_size)), workgroup_size)), 1u), uvec2(workgroup_size, 1u))))))))), uint(uvec3(_GLF_IDENTITY(workgroup_size, uint(uvec2(workgroup_size, 1u))), _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, max(0u, 0u)), 0u))) ^ 0u), 0u)))) ^ 0u), workgroup_size)), (_GLF_IDENTITY(workgroup_size, min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (workgroup_size) ^ 0u), uint(uvec2(workgroup_size, 1u))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, uint(_GLF_IDENTITY(uvec2(workgroup_size, 1u), clamp(uvec2(workgroup_size, 1u), uvec2(workgroup_size, 1u), _GLF_IDENTITY(uvec2(workgroup_size, 1u), max(uvec2(workgroup_size, 1u), _GLF_IDENTITY(uvec2(workgroup_size, 1u), clamp(uvec2(workgroup_size, 1u), uvec2(_GLF_IDENTITY(workgroup_size, max(_GLF_IDENTITY(workgroup_size, clamp(workgroup_size, workgroup_size, workgroup_size)), workgroup_size)), 1u), uvec2(workgroup_size, 1u))))))))), uint(uvec3(_GLF_IDENTITY(workgroup_size, uint(uvec2(workgroup_size, 1u))), _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, max(0u, 0u)), 0u))) ^ 0u), 0u)))) ^ 0u, ((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, uint(_GLF_IDENTITY(uvec2(workgroup_size, 1u), clamp(uvec2(workgroup_size, 1u), uvec2(workgroup_size, 1u), _GLF_IDENTITY(uvec2(workgroup_size, 1u), max(uvec2(workgroup_size, 1u), _GLF_IDENTITY(uvec2(workgroup_size, 1u), clamp(uvec2(workgroup_size, 1u), uvec2(_GLF_IDENTITY(workgroup_size, max(_GLF_IDENTITY(workgroup_size, clamp(workgroup_size, workgroup_size, workgroup_size)), workgroup_size)), 1u), uvec2(workgroup_size, 1u))))))))), uint(uvec3(_GLF_IDENTITY(workgroup_size, uint(uvec2(workgroup_size, 1u))), _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, max(0u, 0u)), 0u))) ^ 0u), 0u)))) ^ 0u) | 0u)), workgroup_size))) | 0u))), ((~ (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (workgroup_size) ^ 0u), uint(uvec2(workgroup_size, 1u))), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, uint(_GLF_IDENTITY(uvec2(workgroup_size, 1u), clamp(uvec2(workgroup_size, 1u), uvec2(workgroup_size, 1u), _GLF_IDENTITY(_GLF_IDENTITY(uvec2(workgroup_size, 1u), ~ (_GLF_IDENTITY(~ (uvec2(workgroup_size, 1u)), ~ (~ (~ (uvec2(workgroup_size, 1u))))))), max(uvec2(workgroup_size, 1u), _GLF_IDENTITY(uvec2(workgroup_size, 1u), clamp(uvec2(workgroup_size, 1u), uvec2(_GLF_IDENTITY(workgroup_size, max(_GLF_IDENTITY(workgroup_size, clamp(workgroup_size, workgroup_size, workgroup_size)), workgroup_size)), 1u), uvec2(workgroup_size, 1u))))))))), uint(uvec3(_GLF_IDENTITY(workgroup_size, uint(uvec2(workgroup_size, 1u))), _GLF_IDENTITY(_GLF_IDENTITY(0u, (0u | 0u) ^ (0u)), (_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, max(0u, 0u)), 0u))) ^ 0u), 0u)))) ^ 0u), workgroup_size)), (_GLF_IDENTITY(workgroup_size, min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (workgroup_size) ^ 0u), uint(uvec2(workgroup_size, 1u))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, uint(_GLF_IDENTITY(uvec2(workgroup_size, 1u), clamp(uvec2(workgroup_size, 1u), uvec2(workgroup_size, 1u), _GLF_IDENTITY(uvec2(workgroup_size, 1u), max(uvec2(workgroup_size, 1u), _GLF_IDENTITY(uvec2(workgroup_size, 1u), clamp(uvec2(workgroup_size, 1u), uvec2(_GLF_IDENTITY(workgroup_size, max(_GLF_IDENTITY(workgroup_size, clamp(workgroup_size, workgroup_size, workgroup_size)), workgroup_size)), 1u), uvec2(workgroup_size, 1u))))))))), 1u * (_GLF_IDENTITY(workgroup_size, uint(_GLF_IDENTITY(uvec2(workgroup_size, 1u), clamp(uvec2(workgroup_size, 1u), uvec2(_GLF_IDENTITY(workgroup_size, uint(uint(_GLF_IDENTITY(workgroup_size, ~ (~ (workgroup_size)))))), _GLF_IDENTITY(1u, (1u) | 0u)), _GLF_IDENTITY(uvec2(workgroup_size, 1u), max(uvec2(workgroup_size, 1u), _GLF_IDENTITY(uvec2(workgroup_size, 1u), clamp(uvec2(workgroup_size, 1u), uvec2(_GLF_IDENTITY(workgroup_size, max(_GLF_IDENTITY(workgroup_size, clamp(workgroup_size, workgroup_size, workgroup_size)), workgroup_size)), 1u), uvec2(workgroup_size, 1u))))))))))), uint(uvec3(_GLF_IDENTITY(workgroup_size, uint(uvec2(workgroup_size, 1u))), _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, max(0u, 0u)), _GLF_IDENTITY(0u, min(0u, 0u))))) ^ 0u), 0u)))) ^ 0u), workgroup_size))) | 0u)))) | ((~ (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (workgroup_size) ^ 0u), uint(uvec2(workgroup_size, 1u))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, uint(_GLF_IDENTITY(uvec2(workgroup_size, 1u), clamp(uvec2(workgroup_size, 1u), uvec2(workgroup_size, 1u), _GLF_IDENTITY(uvec2(workgroup_size, 1u), max(uvec2(workgroup_size, 1u), _GLF_IDENTITY(uvec2(workgroup_size, 1u), clamp(uvec2(workgroup_size, 1u), uvec2(_GLF_IDENTITY(workgroup_size, max(_GLF_IDENTITY(workgroup_size, clamp(workgroup_size, workgroup_size, workgroup_size)), workgroup_size)), 1u), uvec2(workgroup_size, 1u))))))))), _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(workgroup_size, uint(_GLF_IDENTITY(uvec2(workgroup_size, 1u), clamp(uvec2(workgroup_size, 1u), uvec2(workgroup_size, 1u), _GLF_IDENTITY(uvec2(workgroup_size, 1u), max(uvec2(workgroup_size, 1u), _GLF_IDENTITY(uvec2(workgroup_size, 1u), clamp(uvec2(workgroup_size, 1u), uvec2(_GLF_IDENTITY(workgroup_size, max(_GLF_IDENTITY(workgroup_size, clamp(workgroup_size, workgroup_size, workgroup_size)), workgroup_size)), 1u), uvec2(workgroup_size, 1u))))))))), 0u, 1u)), uint(_GLF_IDENTITY(uvec3(uint(uvec3(_GLF_IDENTITY(workgroup_size, uint(_GLF_IDENTITY(uvec2(workgroup_size, 1u), clamp(uvec2(workgroup_size, 1u), uvec2(workgroup_size, 1u), _GLF_IDENTITY(uvec2(workgroup_size, 1u), max(uvec2(workgroup_size, 1u), _GLF_IDENTITY(uvec2(workgroup_size, 1u), clamp(uvec2(workgroup_size, 1u), uvec2(_GLF_IDENTITY(workgroup_size, max(_GLF_IDENTITY(workgroup_size, clamp(workgroup_size, workgroup_size, workgroup_size)), workgroup_size)), 1u), uvec2(workgroup_size, 1u))))))))), 0u, 1u)), 1u, 1u), ~ (~ (uvec3(uint(uvec3(_GLF_IDENTITY(workgroup_size, uint(_GLF_IDENTITY(uvec2(workgroup_size, 1u), clamp(uvec2(workgroup_size, 1u), uvec2(workgroup_size, 1u), _GLF_IDENTITY(uvec2(workgroup_size, 1u), max(uvec2(workgroup_size, 1u), _GLF_IDENTITY(uvec2(workgroup_size, 1u), clamp(uvec2(workgroup_size, 1u), uvec2(_GLF_IDENTITY(workgroup_size, max(_GLF_IDENTITY(workgroup_size, clamp(workgroup_size, workgroup_size, workgroup_size)), workgroup_size)), 1u), uvec2(workgroup_size, 1u))))))))), 0u, 1u)), 1u, 1u))))))), uint(uvec3(_GLF_IDENTITY(workgroup_size, uint(uvec2(workgroup_size, 1u))), _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, max(0u, 0u)), 0u))) ^ 0u), 0u)))) ^ 0u), workgroup_size)), (_GLF_IDENTITY(workgroup_size, min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (workgroup_size) ^ 0u), uint(uvec2(workgroup_size, 1u))), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, uint(_GLF_IDENTITY(uvec2(workgroup_size, 1u), clamp(uvec2(workgroup_size, 1u), uvec2(workgroup_size, 1u), _GLF_IDENTITY(uvec2(workgroup_size, 1u), max(uvec2(workgroup_size, 1u), _GLF_IDENTITY(uvec2(workgroup_size, 1u), clamp(uvec2(workgroup_size, 1u), uvec2(_GLF_IDENTITY(workgroup_size, max(_GLF_IDENTITY(workgroup_size, clamp(workgroup_size, workgroup_size, workgroup_size)), workgroup_size)), 1u), uvec2(workgroup_size, 1u))))))))), uint(uvec3(_GLF_IDENTITY(workgroup_size, uint(uvec2(workgroup_size, 1u))), _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, max(0u, 0u)), 0u))) ^ 0u), 0u)))) ^ 0u), workgroup_size))) | 0u))))))), (~ (workgroup_size)))))))))) ^ 0u, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((_GLF_IDENTITY(workgroup_size, ~ _GLF_IDENTITY((~ (workgroup_size)), (_GLF_IDENTITY((~ (workgroup_size)), 0u ^ ((~ (workgroup_size))))) | _GLF_IDENTITY((_GLF_IDENTITY((~ (workgroup_size)), clamp((~ (workgroup_size)), (~ (_GLF_IDENTITY(workgroup_size, min(_GLF_IDENTITY(workgroup_size, uint(_GLF_IDENTITY(uvec2(workgroup_size, 1u), _GLF_IDENTITY((uvec2(workgroup_size, 1u)), (_GLF_IDENTITY((uvec2(workgroup_size, 1u)), ((uvec2(workgroup_size, 1u))) | ((uvec2(workgroup_size, 1u))))) | uvec2(0u, 0u)) / uvec2(1u, 1u)))), workgroup_size)))), (_GLF_IDENTITY(~ (workgroup_size), ~ (~ (~ (workgroup_size)))))))), 0u | ((_GLF_IDENTITY((~ (workgroup_size)), clamp(_GLF_IDENTITY((~ _GLF_IDENTITY((workgroup_size), ((workgroup_size)) * 1u)), min((~ _GLF_IDENTITY((workgroup_size), ((workgroup_size)) * 1u)), _GLF_IDENTITY((~ _GLF_IDENTITY((workgroup_size), ((workgroup_size)) * 1u)), min((~ _GLF_IDENTITY((workgroup_size), ((workgroup_size)) * 1u)), (~ _GLF_IDENTITY((workgroup_size), ((workgroup_size)) * 1u)))))), (~ (_GLF_IDENTITY(workgroup_size, min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, uint(uvec4(_GLF_IDENTITY(workgroup_size, (workgroup_size) | (workgroup_size)), 0u, 1u, uint(_GLF_ONE(1.0, injectionSwitch.y))))), uint(uvec2(workgroup_size, 1u))), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, uint(uvec2(workgroup_size, 1u))), uint(uvec3(_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY(uint(uvec2(workgroup_size, 1u)), 0u + (uint(uvec2(workgroup_size, 1u))))), 0u, 0u)))) ^ 0u), workgroup_size)))), (~ (workgroup_size)))))))))) ^ 0u, ((_GLF_IDENTITY(workgroup_size, ~ _GLF_IDENTITY((~ (workgroup_size)), (_GLF_IDENTITY(_GLF_IDENTITY((~ (workgroup_size)), ((~ (workgroup_size))) | ((~ (workgroup_size)))), 0u ^ ((~ (workgroup_size))))) | _GLF_IDENTITY((_GLF_IDENTITY((~ (workgroup_size)), clamp((~ (workgroup_size)), (~ (_GLF_IDENTITY(workgroup_size, min(_GLF_IDENTITY(workgroup_size, uint(_GLF_IDENTITY(uvec2(workgroup_size, 1u), (uvec2(workgroup_size, 1u)) / uvec2(1u, 1u)))), workgroup_size)))), (~ (workgroup_size))))), 0u | ((_GLF_IDENTITY((~ (workgroup_size)), clamp((~ (workgroup_size)), (~ (_GLF_IDENTITY(workgroup_size, min(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, uint(uvec2(workgroup_size, 1u))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, uint(uvec2(workgroup_size, 1u))), uint(uvec3(_GLF_IDENTITY(workgroup_size, uint(uvec2(workgroup_size, 1u))), 0u, 0u)))), max((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, uint(uvec2(workgroup_size, 1u))), uint(uvec3(_GLF_IDENTITY(workgroup_size, uint(uvec2(workgroup_size, _GLF_IDENTITY(1u, uint(uint(1u)))))), 0u, 0u)))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, uint(uvec2(workgroup_size, 1u))), uint(uvec3(_GLF_IDENTITY(workgroup_size, uint(uvec2(workgroup_size, 1u))), 0u, 0u)))), ((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, uint(uvec2(workgroup_size, 1u))), uint(uvec3(_GLF_IDENTITY(workgroup_size, uint(uvec2(workgroup_size, 1u))), 0u, 0u))))) ^ 0u))) ^ 0u), workgroup_size)))), (~ (workgroup_size)))))))))) ^ 0u) << 0u)), 0u + (~ ((_GLF_IDENTITY(workgroup_size, ~ _GLF_IDENTITY((~ (workgroup_size)), _GLF_IDENTITY((_GLF_IDENTITY((~ (workgroup_size)), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY((~ (workgroup_size)), uint(uvec2((~ (workgroup_size)), (183908u & 0u)))), uint(_GLF_IDENTITY(uint((~ (workgroup_size))), max(uint((~ (workgroup_size))), uint((~ (workgroup_size)))))))))), ((_GLF_IDENTITY((~ (workgroup_size)), 0u ^ (_GLF_IDENTITY((~ (workgroup_size)), uint(_GLF_IDENTITY(uint((~ (workgroup_size))), max(uint((~ (workgroup_size))), uint((~ (workgroup_size))))))))))) - 0u) | _GLF_IDENTITY((_GLF_IDENTITY((~ (workgroup_size)), clamp((~ (workgroup_size)), (~ (_GLF_IDENTITY(workgroup_size, min(_GLF_IDENTITY(workgroup_size, uint(_GLF_IDENTITY(uvec2(workgroup_size, 1u), (uvec2(_GLF_IDENTITY(workgroup_size, 1u * (workgroup_size)), 1u)) / uvec2(1u, 1u)))), workgroup_size)))), (~ (workgroup_size))))), 0u | ((_GLF_IDENTITY((~ (workgroup_size)), clamp((~ (workgroup_size)), (~ _GLF_IDENTITY((_GLF_IDENTITY(workgroup_size, min(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, uint(uvec2(workgroup_size, 1u))), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, uint(uvec2(workgroup_size, 1u))), uint(uvec3(_GLF_IDENTITY(workgroup_size, uint(uvec2(workgroup_size, 1u))), 0u, 0u)))) ^ 0u), workgroup_size))), (false ? _GLF_FUZZED(atomicCompSwap(num_workgroup, workgroup_size, subgroup_id)) : _GLF_IDENTITY((_GLF_IDENTITY(workgroup_size, min(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, uint(uvec2(workgroup_size, 1u))), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, uint(uvec2(workgroup_size, 1u))), uint(uvec3(_GLF_IDENTITY(workgroup_size, uint(uvec2(workgroup_size, 1u))), _GLF_IDENTITY(0u, min(0u, 0u)), 0u)))) ^ 0u), workgroup_size))), (false ? _GLF_FUZZED(subgroup_local_id) : (_GLF_IDENTITY(workgroup_size, min(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, uint(uvec2(workgroup_size, 1u))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, ~ (~ (_GLF_IDENTITY(workgroup_size, min(workgroup_size, _GLF_IDENTITY(workgroup_size, uint(uvec3(workgroup_size, 0u, 0u)))))))), uint(uvec2(workgroup_size, 1u))), uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(workgroup_size, uint(uvec2(workgroup_size, 1u))), 0u, 0u), (uvec3(_GLF_IDENTITY(workgroup_size, uint(uvec2(workgroup_size, 1u))), 0u, 0u)) << (uvec3(0u, 0u, 0u) ^ uvec3(0u, 0u, 0u)))))) ^ 0u), workgroup_size)))))))), (~ (workgroup_size)))))))))) ^ 0u)))))) >> 0u)) * workgroup_id;
 uint virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, uint(uvec3(_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), ~ (~ (~ (subgroup_size)))))), _GLF_IDENTITY((subgroup_id * subgroup_size), ((subgroup_id * subgroup_size)) * 1u) | (subgroup_id * _GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size)))), 1u, _GLF_IDENTITY(1u, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3(1u, 0u, (0u >> _GLF_IDENTITY(uint(8u), uint(8u)))), (uvec3(1u, 0u, (0u >> _GLF_IDENTITY(uint(8u), uint(8u))))) << uvec3(0u, 0u, 0u))), 0u + (uint(_GLF_IDENTITY(uvec3(1u, 0u, (0u >> _GLF_IDENTITY(uint(8u), uint(8u)))), (uvec3(1u, 0u, (0u >> _GLF_IDENTITY(uint(8u), uint(8u))))) << uvec3(0u, 0u, 0u))))))))) + _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) / 1u);
 uint next_virtual_gid = workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u) * subgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u) * subgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id) << 0u, clamp((subgroup_id) << 0u, (subgroup_id) << 0u, (subgroup_id) << 0u))), 0u ^ (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id) << 0u, clamp((subgroup_id) << 0u, (subgroup_id) << 0u, (subgroup_id) << 0u))))) * subgroup_size) | 0u)) + 0u), (0u >> _GLF_IDENTITY(uint(6u), uint(6u))) | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u) * subgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u) * subgroup_size, (_GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u) * subgroup_size) | 0u)) + 0u))) + (_GLF_IDENTITY((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, ~ (~ (_GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u) : _GLF_FUZZED(num_workgroup)))))), 0u | (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, 0u | (subgroup_local_id + 1))) % subgroup_size, (false ? _GLF_FUZZED(workgroup_base) : (subgroup_local_id + 1) % subgroup_size)), ((subgroup_local_id + 1) % subgroup_size) >> 0u))));
 for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bool(! (false))))))))
    {
    }
   else
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
          barrier();
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! _GLF_IDENTITY((! (true)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY((! (true)), ! (! (_GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bool(true))), (_GLF_IDENTITY(true, bool(bool(true)))) || false), ! (! (_GLF_IDENTITY(true, bool(bool(true)))))))), false || (_GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bool(true))), (_GLF_IDENTITY(true, bool(bool(true)))) || false), ! (! (_GLF_IDENTITY(true, bool(bool(true)))))))), ((! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bool(true))), (_GLF_IDENTITY(true, bool(bool(true)))) || false), ! (! (_GLF_IDENTITY(true, bool(bool(true))))))))) && true)))))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(! (true), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(! (true), ! (! (! (true)))))), (bool(bool(_GLF_IDENTITY(! (true), ! (! (! (true))))))) || false))), ! (! ((! (_GLF_IDENTITY(true, bool(bool(true)))))))), _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(true, false || (true)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), true && (bool(bvec4(_GLF_IDENTITY(true, false || (true)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))), false, false)), _GLF_IDENTITY(false || (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY((! (true)), ! (! ((! (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), (_GLF_IDENTITY(bool(true), (bool(true)) || false)) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), injectionSwitch.x)))) > injectionSwitch.y)))))))))), false || (_GLF_IDENTITY((! (true)), ! (! ((! (_GLF_IDENTITY(true, bool(bool(true)))))))))), true, _GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) && true))), (false) || false), false))), _GLF_IDENTITY(true, bool(bool(true))) && (_GLF_IDENTITY(false || (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY((! (true)), ! (! ((! (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), (_GLF_IDENTITY(bool(true), (bool(true)) || false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))), false || (_GLF_IDENTITY((! (true)), ! (! ((! (_GLF_IDENTITY(true, bool(bool(true)))))))))), true, _GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) && true))), (false) || false), false))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false || (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY((! (true)), ! (! ((! (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), (_GLF_IDENTITY(bool(true), (bool(true)) || false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))), false || (_GLF_IDENTITY((! (true)), ! (! ((! (_GLF_IDENTITY(true, bool(bool(true)))))))))), true, _GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) && true))), (false) || false), false))), _GLF_IDENTITY(bool(bvec2(false || (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY((! (true)), ! (! ((! (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), (_GLF_IDENTITY(bool(true), (bool(true)) || false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))), false || (_GLF_IDENTITY((! (true)), ! (! ((! (_GLF_IDENTITY(true, bool(bool(true)))))))))), true, _GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) && true))), (false) || false), false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(_GLF_IDENTITY(bvec2(bool(bvec2(false || (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY((! (true)), ! (! ((! (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), (_GLF_IDENTITY(bool(true), (bool(true)) || false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))), false || (_GLF_IDENTITY((! (true)), ! (! ((! (_GLF_IDENTITY(true, bool(bool(true)))))))))), true, _GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) && true))), (false) || false), false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false), bvec2(bvec2(bvec2(bool(bvec2(false || (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY((! (true)), ! (! ((! (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), (_GLF_IDENTITY(bool(true), (bool(true)) || false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))), false || (_GLF_IDENTITY((! (true)), ! (! ((! (_GLF_IDENTITY(true, bool(bool(true)))))))))), true, _GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) && true))), (false) || false), false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false))))))), ! (! (false || (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY((! (true)), ! (! ((! (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), (_GLF_IDENTITY(bool(true), (bool(true)) || false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))), false || _GLF_IDENTITY((_GLF_IDENTITY((! (true)), ! (! ((! (_GLF_IDENTITY(true, bool(bool(true))))))))), true && ((_GLF_IDENTITY((! (true)), ! (! ((! (_GLF_IDENTITY(true, bool(bool(true)))))))))))), true, _GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) && true))), (false) || false), _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false)))))))))), true, true, true)), (bool(bvec4(_GLF_IDENTITY(false || (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY((! (true)), ! (! ((! (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), (_GLF_IDENTITY(bool(true), (bool(true)) || false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))), false || (_GLF_IDENTITY((! (true)), ! (! ((! (_GLF_IDENTITY(true, bool(bool(true)))))))))), true, _GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) && true))), (false) || false), false))), ! (! (false || (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY((! _GLF_IDENTITY((true), ! (! (_GLF_IDENTITY((true), ((true)) || false))))), ! (! ((! (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), (_GLF_IDENTITY(bool(true), (bool(true)) || false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))), false || (_GLF_IDENTITY((! (true)), ! (! ((! (_GLF_IDENTITY(true, bool(bool(true)))))))))), true, _GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) && true))), (false) || false), false)))))), true, true, true))) || false))))))), ! _GLF_IDENTITY((! (! (_GLF_IDENTITY((! (true)), ! (! ((! (true)))))))), false || (_GLF_IDENTITY((! (! (_GLF_IDENTITY((! (true)), ! (! ((! _GLF_IDENTITY((true), ! (! ((_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! (! (true))))))) || false)))))))))))), (_GLF_IDENTITY((! (! _GLF_IDENTITY((_GLF_IDENTITY((! (true)), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(! (true), ! (! (_GLF_IDENTITY(! (true), bool(bvec4(! (true), false, true, true)))))))), bool(bvec4(! ((_GLF_IDENTITY(! (true), ! (! (_GLF_IDENTITY(! (true), bool(bvec4(! (true), false, true, true)))))))), false, false, true)))))), false || ((_GLF_IDENTITY((! (true)), ! (! ((! (true)))))))))), ! (! ((! (! _GLF_IDENTITY((_GLF_IDENTITY((! (true)), ! (! ((_GLF_IDENTITY(! (true), ! (! (_GLF_IDENTITY(! (true), bool(bvec4(! (true), false, true, true))))))))))), false || ((_GLF_IDENTITY((! (true)), ! (! ((! (true)))))))))))))) && true)))))))))
              {
               _GLF_IDENTITY(buf[virtual_gid] = 1, (true ? buf[virtual_gid] = 1 : _GLF_IDENTITY(_GLF_FUZZED(num_workgroup), 0u | (_GLF_FUZZED(num_workgroup)))));
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 do
                  {
                   if(_GLF_DEAD(false))
                    {
                     do
                      {
                       barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                    {
                     barrier();
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
                 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                  barrier();
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), (_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), injectionSwitch.y))) - 0.0)), bool(bool((injectionSwitch.x > injectionSwitch.y)))))));
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (false) || false), _GLF_IDENTITY(! _GLF_IDENTITY((! (false)), bool(bool(_GLF_IDENTITY((! (false)), false || ((! (false))))))), ! (_GLF_IDENTITY(! (! _GLF_IDENTITY((! (false)), bool(bool(_GLF_IDENTITY((! (false)), false || ((! (false)))))))), ! (! (! (! _GLF_IDENTITY((! (false)), bool(bool(_GLF_IDENTITY((! (false)), false || ((! (false))))))))))))))))
      barrier();
    }
   else
    {
    }
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(subgroup_local_id + 1 < subgroup_size)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / abs(vec2(1.0, 1.0))).x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      barrier();
     barrier();
    }
   int i = 0;
   buf[next_virtual_gid] = 2;
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
          {
           return;
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)) && true, bool(bvec3(((injectionSwitch.x > injectionSwitch.y)) && true, false, _GLF_IDENTITY(true, true && (true)))))))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! _GLF_IDENTITY((! _GLF_IDENTITY(_GLF_IDENTITY(((injectionSwitch.x < injectionSwitch.y)), false || (((injectionSwitch.x < injectionSwitch.y)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y, _GLF_IDENTITY(! (! (injectionSwitch.x < injectionSwitch.y)), bool(_GLF_IDENTITY(bvec3(! (! (injectionSwitch.x < injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec3(bvec3(! (! (injectionSwitch.x < injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))), false || ((_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y)))))))), true && (! (_GLF_IDENTITY(_GLF_IDENTITY(((injectionSwitch.x < injectionSwitch.y)), false || (((injectionSwitch.x < injectionSwitch.y)))), (_GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-8.9)), bool(false))) < injectionSwitch.y)), false || (((injectionSwitch.x < injectionSwitch.y))))) && true))))))), _GLF_IDENTITY(bool(bvec4((! _GLF_IDENTITY(_GLF_IDENTITY(((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat4(injectionSwitch, abs(1.0), 1.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(_GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(cos(mix(-8.8, -0.6, false))))), clamp(0.0, 0.0, 0.0)), 0.0)), 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), 0.0, 1.0)), _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), _GLF_IDENTITY(vec3(_GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), 0.0, 1.0), vec3(mat2x4(vec3(_GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), 0.0, 1.0), abs(1.0), 0.0, _GLF_ONE(1.0, injectionSwitch.y), cos(0.0), 1.0)))), mix(float(_GLF_FUZZED(-5.1)), float(dot(vec3(0.0, 0.0, 1.0), vec3(_GLF_IDENTITY(dot(vec2(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(629.358) : _GLF_IDENTITY(1.0, min(1.0, 1.0)))), 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED((18.97 + 5770.6028))), float(1.0), bool(true)))), vec2(0.0, 0.0))), 0.0, 1.0))), bool(true)))), abs(_GLF_ONE(1.0, injectionSwitch.y)), 1.0, round(length(normalize(1.0))), sin(sin(0.0)), 0.0, 0.0, 0.0, abs(0.0), 0.0, 1.0, 1.0), _GLF_IDENTITY((mat4(injectionSwitch, abs(1.0), 1.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(_GLF_IDENTITY(dot(vec2(_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, (1.0) + 0.0))), 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), 0.0, 1.0)), _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(_GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), 0.0, 1.0)), mix(float(_GLF_FUZZED(-5.1)), float(dot(vec3(0.0, 0.0, 1.0), vec3(_GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), 0.0, 1.0))), bool(true)))), abs(_GLF_ONE(1.0, injectionSwitch.y)), 1.0, round(length(normalize(1.0))), sin(sin(0.0)), 0.0, 0.0, 0.0, abs(0.0), 0.0, 1.0, 1.0)) / mat4(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0), mat4(1.0) * ((mat4(injectionSwitch, abs(1.0), 1.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(_GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), 0.0, 1.0)), _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(_GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), 0.0, 1.0)), mix(float(_GLF_FUZZED(-5.1)), float(dot(vec3(0.0, 0.0, 1.0), vec3(_GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), 0.0, 1.0))), bool(true)))), abs(_GLF_ONE(1.0, injectionSwitch.y)), 1.0, round(length(normalize(1.0))), sin(sin(0.0)), 0.0, 0.0, 0.0, abs(0.0), _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, (0.0) + 0.0))), 1.0, 1.0)) / mat4(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, 1.0 * (1.0)), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))))), (false ? _GLF_FUZZED(vec2(-60.57, -7399.2553)) : vec2(_GLF_IDENTITY(mat4(injectionSwitch, abs(1.0), 1.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(_GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0)), 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), 0.0, 1.0)), _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(_GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), 0.0, 1.0)), mix(float(_GLF_FUZZED(-5.1)), float(dot(vec3(0.0, 0.0, 1.0), vec3(_GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), 0.0, 1.0))), bool(true)))), abs(_GLF_ONE(1.0, injectionSwitch.y)), 1.0, round(length(normalize(1.0))), sin(sin(0.0)), 0.0, 0.0, 0.0, abs(0.0), 0.0, 1.0, 1.0), _GLF_IDENTITY((mat4(injectionSwitch, abs(1.0), 1.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(_GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0)), 1.0), vec2(0.0, 0.0))), 0.0, 1.0)), _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(_GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), 0.0, 1.0)), mix(float(_GLF_FUZZED(-5.1)), float(dot(vec3(0.0, 0.0, 1.0), vec3(_GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(98.21)), float(0.0), bool(true))))), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), 0.0, 1.0))), bool(true)))), abs(_GLF_ONE(1.0, injectionSwitch.y)), 1.0, round(length(normalize(1.0))), sin(sin(0.0)), 0.0, 0.0, 0.0, abs(0.0), 0.0, 1.0, 1.0)) / mat4(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0), mat4(1.0) * ((mat4(injectionSwitch, abs(1.0), 1.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(_GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), 0.0, 1.0)), _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(_GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), 0.0, 1.0)), mix(float(_GLF_FUZZED(-5.1)), float(dot(vec3(0.0, 0.0, 1.0), vec3(_GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), 0.0, 1.0))), bool(true)))), abs(_GLF_ONE(1.0, injectionSwitch.y)), 1.0, round(length(normalize(1.0))), sin(sin(0.0)), _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(distance(vec2(9.4, -1350.4784), injectionSwitch)))), 0.0, 0.0, abs(0.0), 0.0, 1.0, 1.0)) / mat4(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, 1.0 * (1.0)), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)))))))).y)), false || _GLF_IDENTITY((((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - _GLF_IDENTITY(tan(vec2(0.0, 0.0)), _GLF_IDENTITY(mat2(1.0) * (tan(vec2(0.0, 0.0))), (true ? mat2(1.0) * (tan(vec2(0.0, 0.0))) : _GLF_FUZZED(injectionSwitch))))), (false ? _GLF_FUZZED(vec2(-744.564, 9.9)) : _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - _GLF_IDENTITY(tan(vec2(0.0, 0.0)), _GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0) * (tan(vec2(0.0, 0.0))), (mat2(1.0) * (tan(_GLF_IDENTITY(vec2(0.0, 0.0), clamp(vec2(0.0, 0.0), vec2(0.0, 0.0), _GLF_IDENTITY(vec2(0.0, 0.0), (vec2(0.0, 0.0)) / vec2(1.0, 1.0))))))) - vec2(0.0, 0.0)), (true ? mat2(1.0) * (tan(vec2(0.0, 0.0))) : _GLF_FUZZED(injectionSwitch))))))).x < injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - _GLF_IDENTITY(tan(vec2(0.0, 0.0)), _GLF_IDENTITY(mat2(1.0) * (tan(vec2(0.0, 0.0))), (true ? mat2(1.0) * (tan(vec2(0.0, 0.0))) : _GLF_FUZZED(injectionSwitch))))), (false ? _GLF_IDENTITY(_GLF_FUZZED(vec2(-744.564, 9.9)), vec2(mat3x4(_GLF_IDENTITY(_GLF_FUZZED(vec2(-744.564, 9.9)), mix(vec2((_GLF_FUZZED(vec2(-744.564, 9.9)))[0], (_GLF_FUZZED(vec2(-744.564, 9.9)))[1]), vec2(_GLF_FUZZED(563.599), _GLF_FUZZED(7273.9448)), bvec2(false, false))), 1.0, abs(1.0), 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0))) : _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - _GLF_IDENTITY(tan(vec2(0.0, 0.0)), _GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0) * (tan(vec2(0.0, 0.0))), _GLF_IDENTITY((mat2(1.0) * (tan(vec2(0.0, 0.0)))) - vec2(0.0, 0.0), max(_GLF_IDENTITY((mat2(1.0) * (tan(vec2(0.0, 0.0)))) - vec2(0.0, 0.0), max((mat2(1.0) * (tan(vec2(0.0, 0.0)))) - vec2(0.0, 0.0), (mat2(1.0) * (tan(vec2(0.0, 0.0)))) - vec2(0.0, 0.0))), (mat2(1.0) * (tan(vec2(0.0, 0.0)))) - vec2(0.0, 0.0)))), (true ? mat2(1.0) * (tan(vec2(0.0, 0.0))) : _GLF_IDENTITY(_GLF_FUZZED(injectionSwitch), _GLF_IDENTITY((_GLF_FUZZED(injectionSwitch)) * mat2(1.0), min((_GLF_FUZZED(injectionSwitch)) * mat2(1.0), (_GLF_FUZZED(injectionSwitch)) * mat2(1.0)))))))))).x < injectionSwitch.y))), bool(bool((((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - _GLF_IDENTITY(tan(vec2(0.0, 0.0)), _GLF_IDENTITY(mat2(1.0) * (tan(vec2(0.0, 0.0))), (true ? mat2(1.0) * (tan(vec2(0.0, 0.0))) : _GLF_FUZZED(injectionSwitch))))), (false ? _GLF_IDENTITY(_GLF_FUZZED(vec2(-744.564, 9.9)), vec2(mat3x4(_GLF_IDENTITY(_GLF_FUZZED(vec2(-744.564, 9.9)), mix(vec2((_GLF_FUZZED(vec2(-744.564, 9.9)))[0], (_GLF_FUZZED(vec2(-744.564, 9.9)))[1]), vec2(_GLF_FUZZED(563.599), _GLF_FUZZED(7273.9448)), bvec2(false, false))), 1.0, abs(1.0), 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0))) : _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - _GLF_IDENTITY(tan(vec2(0.0, 0.0)), _GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0) * (tan(vec2(0.0, 0.0))), _GLF_IDENTITY((mat2(1.0) * (tan(vec2(0.0, 0.0)))) - vec2(0.0, 0.0), max(_GLF_IDENTITY((mat2(1.0) * (tan(vec2(0.0, 0.0)))) - vec2(0.0, 0.0), max((mat2(1.0) * (tan(vec2(0.0, 0.0)))) - vec2(0.0, 0.0), (mat2(1.0) * (tan(vec2(0.0, 0.0)))) - vec2(0.0, 0.0))), (mat2(1.0) * (tan(vec2(0.0, 0.0)))) - vec2(0.0, 0.0)))), (true ? mat2(1.0) * (tan(vec2(0.0, 0.0))) : _GLF_IDENTITY(_GLF_FUZZED(injectionSwitch), _GLF_IDENTITY((_GLF_FUZZED(injectionSwitch)) * mat2(1.0), min((_GLF_FUZZED(injectionSwitch)) * mat2(1.0), (_GLF_FUZZED(injectionSwitch)) * mat2(1.0)))))))))).x < injectionSwitch.y))))))), false || (! ((((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - _GLF_IDENTITY(tan(vec2(0.0, 0.0)), _GLF_IDENTITY(mat2(1.0) * (tan(vec2(0.0, 0.0))), _GLF_IDENTITY((true ? mat2(1.0) * (tan(vec2(0.0, _GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, float(mat3x4(0.0, 1.0, determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0)), 1.0, exp(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0))) : _GLF_FUZZED(-6672.2524)))))) : _GLF_FUZZED(injectionSwitch)), ((true ? mat2(1.0) * (tan(vec2(0.0, _GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, float(mat3x4(0.0, 1.0, determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0)), 1.0, exp(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0))) : _GLF_FUZZED(-6672.2524)))))) : _GLF_FUZZED(injectionSwitch))) / vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)))))), (false ? _GLF_FUZZED(vec2(-744.564, 9.9)) : _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - _GLF_IDENTITY(tan(vec2(0.0, 0.0)), _GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0) * (tan(vec2(0.0, 0.0))), (mat2(1.0) * (tan(vec2(0.0, 0.0)))) - vec2(0.0, 0.0)), (true ? mat2(1.0) * (tan(vec2(0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))) + 0.0)))) : _GLF_FUZZED(injectionSwitch))))))).x < injectionSwitch.y))))))))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(((injectionSwitch.x < injectionSwitch.y)), false || (((injectionSwitch.x < injectionSwitch.y)))), ! (! (_GLF_IDENTITY(((injectionSwitch.x < injectionSwitch.y)), false || (((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y)))))))), true && (! (_GLF_IDENTITY(((injectionSwitch.x < injectionSwitch.y)), false || (((injectionSwitch.x < injectionSwitch.y))))))), (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) + 0.0))).y)), true && (((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) + 0.0))).y)))), false || (((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(mat3x2(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-9.8)), vec2(_GLF_FUZZED(8.5), (injectionSwitch)[1]), bvec2(false, true))), 1.0, 0.0, 1.0, 0.0))).y)))), ! (! (_GLF_IDENTITY(((injectionSwitch.x < injectionSwitch.y)), false || (((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y)))))))), true && (! (_GLF_IDENTITY(((injectionSwitch.x < injectionSwitch.y)), false || (((injectionSwitch.x < injectionSwitch.y)))))))) || false)))), true, false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)).x < injectionSwitch.y)))), ! (! (bool(bvec4((! _GLF_IDENTITY(_GLF_IDENTITY(((injectionSwitch.x < injectionSwitch.y)), false || (((injectionSwitch.x < injectionSwitch.y)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(((injectionSwitch.x < injectionSwitch.y)), (((injectionSwitch.x < injectionSwitch.y))) || _GLF_IDENTITY(false, (false) || false)), false || _GLF_IDENTITY((((injectionSwitch.x < injectionSwitch.y))), bool(bvec3(_GLF_IDENTITY((((injectionSwitch.x < injectionSwitch.y))), true && ((((injectionSwitch.x < injectionSwitch.y))))), false, false))))), _GLF_IDENTITY(true, _GLF_IDENTITY(! (! (true)), ! (! (! (! (true)))))) && _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_IDENTITY(((injectionSwitch.x < injectionSwitch.y)), ! (_GLF_IDENTITY(! (((injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(bool(bvec4(! (((injectionSwitch.x < injectionSwitch.y))), true, true, false)), ! (! (bool(bvec4(! (((injectionSwitch.x < injectionSwitch.y))), true, true, false)))))))), false || (_GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(6.9), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-334.752)), bvec2(true, _GLF_IDENTITY(false, ! (! (false)))))), vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)).x < _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), vec2(0.0, 0.0) + ((injectionSwitch) * mat2(1.0)))).y)), false || (((_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)).x < _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), vec2(0.0, 0.0) + ((injectionSwitch) * mat2(1.0)))).y)))))))), ((! (_GLF_IDENTITY(_GLF_IDENTITY(((injectionSwitch.x < injectionSwitch.y)), ! (_GLF_IDENTITY(! _GLF_IDENTITY((((injectionSwitch.x < injectionSwitch.y))), bool(bool((((injectionSwitch.x < injectionSwitch.y)))))), _GLF_IDENTITY(bool(bvec4(! ((_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) && true)))))), true, true, false)), ! (! (bool(bvec4(! (((injectionSwitch.x < injectionSwitch.y))), true, true, false)))))))), false || (_GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), sin(0.0), 1.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 1.0), vec3(1.0, 0.0, log(1.0))), dot(vec3(0.0, 1.0, 1.0), vec3(1.0, 0.0, log(1.0)))), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))), (true ? mat3x2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), sin(0.0), 1.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 1.0), vec3(1.0, 0.0, log(1.0))), dot(vec3(0.0, 1.0, 1.0), vec3(1.0, 0.0, log(1.0)))), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))) : _GLF_FUZZED(mat3x2(4194.0636, 69.23, -89.45, -9941.8324, -13.05, 1.5)))))))).x < _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), vec2(0.0, 0.0) + ((injectionSwitch) * mat2(1.0)))).y)), false || (((_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)).x < _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * _GLF_IDENTITY(mat2(1.0), mat2(_GLF_IDENTITY(mat4x3(mat2(1.0)), mat3(1.0) * (mat4x3(mat2(1.0)))))), vec2(0.0, 0.0) + ((injectionSwitch) * mat2(1.0)))).y))))))))) || false))))), true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))))
        {
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
          {
          }
         else
          {
           do
            {
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 barrier();
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           buf[next_virtual_gid] = 2;
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
            {
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false)))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))), 0 | (((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), min(_GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), int(ivec4(_GLF_IDENTITY(int(5), int(5)), 0, 1, 0)))))))), (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))), 0 | (((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), min(_GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), int(ivec4(_GLF_IDENTITY(int(5), int(5)), 0, 1, 0))))))))) | (_GLF_IDENTITY(_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))), 0 | (((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), min(_GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), int(ivec4(_GLF_IDENTITY(int(5), int(5)), 0, 1, 0)))))))), (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))), 0 | (((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), min(_GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), int(ivec4(_GLF_IDENTITY(int(5), int(5)), 0, 1, 0))))))))) - 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y))))
                {
                }
               else
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) - _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, 0 | (0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), clamp(_GLF_IDENTITY(int(0), int(0)), _GLF_IDENTITY(int(0), int(0)), _GLF_IDENTITY(int(0), int(0))))) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter ++)
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
                        {
                         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), ((! (false))) && true)), (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), true && (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), true)))))) && true)))
                          {
                           do
                            {
                             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                              {
                               if(_GLF_WRAPPED_IF_FALSE(false))
                                {
                                }
                               else
                                {
                                 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_IDENTITY(_injected_loop_counter --, (true ? _injected_loop_counter -- : _GLF_FUZZED(_injected_loop_counter))))
                                  {
                                   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-28.82)), bool(false))) > injectionSwitch.y))))
                                    barrier();
                                   if(_GLF_WRAPPED_IF_FALSE(false))
                                    {
                                    }
                                   else
                                    {
                                     do
                                      {
                                       if(_GLF_WRAPPED_IF_TRUE(true))
                                        {
                                         do
                                          {
                                           if(_GLF_DEAD(false))
                                            barrier();
                                          }
                                         while(_GLF_WRAPPED_LOOP(false));
                                        }
                                       else
                                        {
                                         if(_GLF_DEAD(false))
                                          {
                                           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                            {
                                             barrier();
                                            }
                                           else
                                            {
                                            }
                                          }
                                        }
                                       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_IDENTITY(_GLF_FUZZED(injectionSwitch), clamp(_GLF_IDENTITY(_GLF_FUZZED(injectionSwitch), mat2(1.0) * (_GLF_FUZZED(injectionSwitch))), _GLF_FUZZED(injectionSwitch), _GLF_IDENTITY(_GLF_FUZZED(injectionSwitch), clamp(_GLF_IDENTITY(_GLF_FUZZED(injectionSwitch), min(_GLF_FUZZED(injectionSwitch), _GLF_FUZZED(injectionSwitch))), _GLF_FUZZED(injectionSwitch), _GLF_FUZZED(injectionSwitch))))))).y))))
                                        {
                                         return;
                                         do
                                          {
                                           if(_GLF_DEAD(false))
                                            {
                                             do
                                              {
                                               barrier();
                                               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                                {
                                                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                                  {
                                                   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
                                                    {
                                                     barrier();
                                                    }
                                                   else
                                                    {
                                                    }
                                                  }
                                                }
                                               else
                                                {
                                                }
                                              }
                                             while(_GLF_WRAPPED_LOOP(false));
                                             if(_GLF_DEAD(false))
                                              {
                                               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                                                {
                                                 barrier();
                                                }
                                              }
                                            }
                                          }
                                         while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false)))));
                                        }
                                       else
                                        {
                                        }
                                      }
                                     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))), _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_ONE(1.0, injectionSwitch.y) * (injectionSwitch.y))))))), ! (! (bool(bool(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), bool(bvec3(bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true)), true, true)))));
                                    }
                                  }
                                 for(int _injected_loop_counter = _GLF_IDENTITY((0 << _GLF_IDENTITY(int(1), int(1))), (true ? (0 << _GLF_IDENTITY(int(1), int(1))) : _GLF_FUZZED(_injected_loop_counter))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
                                  {
                                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, int(ivec2(0, 1)))); _injected_loop_counter --)
                                    {
                                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                      barrier();
                                    }
                                  }
                                }
                              }
                            }
                           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                          }
                        }
                       else
                        {
                        }
                      }
                    }
                  }
                 else
                  {
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
              }
             else
              {
              }
            }
          }
         else
          {
          }
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   else
    {
    }
  }
 for(int _injected_loop_counter = (_GLF_IDENTITY(1 ^ 1, ~ (~ (1 ^ 1)))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, bool(bvec2(_GLF_IDENTITY(_injected_loop_counter < 1, (_GLF_IDENTITY(_injected_loop_counter < 1, true && (_injected_loop_counter < 1))) || false), _GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, false || (false))))))))); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
          {
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true))
            {
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))))); _injected_loop_counter --)
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
               barrier();
              }
            }
          }
         else
          {
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
}
