#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 0) uniform buf0 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 do
  {
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bool((injectionSwitch.x > injectionSwitch.y))), bool(bvec4(bool(bool((injectionSwitch.x > injectionSwitch.y))), true, true, true))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && _GLF_IDENTITY(true, (true) && true)))) || false)))))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) > injectionSwitch.y))));
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false)))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = _GLF_IDENTITY(_GLF_IDENTITY(16, max(16, 16)), (_GLF_IDENTITY(16, max(16, 16))) | (_GLF_IDENTITY(16, max(16, 16))));
 uint subgroup_local_id = gl_SubgroupInvocationID;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize, min(gl_WorkGroupSize, gl_WorkGroupSize)).x;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bool(_GLF_WRAPPED_LOOP(false))))) || _GLF_IDENTITY(false, (false) && true)));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 1 * (_GLF_IDENTITY(int(4), min(int(4), int(4))))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) | 0)), int(1))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(1, int(ivec2(1, int(_GLF_ONE(1.0, injectionSwitch.y)))))), int(1))), bool(bvec4(_injected_loop_counter < (_GLF_IDENTITY((_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), int(1)), ~ (_GLF_IDENTITY(~ (int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), int(1))), (~ (int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), int(1)))) << 0)))) >> _GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(max((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)), (int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))), ~ (~ (_GLF_IDENTITY(max((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)), (int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))), max(max((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)), (int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))), max((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)), (int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))))))))), false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 uint workgroup_base = _GLF_IDENTITY(workgroup_size * workgroup_id, clamp(workgroup_size * workgroup_id, _GLF_IDENTITY(workgroup_size * workgroup_id, (true ? workgroup_size * workgroup_id : _GLF_FUZZED(198999u))), workgroup_size * workgroup_id));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x < injectionSwitch.y), _GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x < injectionSwitch.y)) && true, true && (((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), min(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).x < injectionSwitch.y)) && true))))), ! (! _GLF_IDENTITY((_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, float(mat3x2(injectionSwitch.y, 0.0, determinant(mat4(0.0, 1.0, 0.0, 1.0, log(1.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 0.0))))), ! (! (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, float(mat3x2(injectionSwitch.y, 0.0, determinant(mat4(0.0, 1.0, 0.0, 1.0, log(1.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 0.0))))), false || (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, float(mat3x2(injectionSwitch.y, 0.0, determinant(mat4(0.0, 1.0, 0.0, 1.0, log(1.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 0.0))))), false || (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, float(mat3x2(injectionSwitch.y, 0.0, determinant(mat4(0.0, 1.0, 0.0, 1.0, log(1.0), 0.0, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat2x4(0.0, 0.0, cos(_GLF_IDENTITY(dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0)), dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0)))), sqrt(0.0), 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), transpose(transpose(mat2x4(0.0, 0.0, cos(_GLF_IDENTITY(dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0)), dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0)))), sqrt(0.0), 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))))))), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 0.0)))))))))))))), ! _GLF_IDENTITY((! ((_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), bool(bvec3((_GLF_IDENTITY(! ((_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), bool(bvec2(! ((_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false)))), false, false)))))))
  {
   do
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, (0) / 1), max(_GLF_IDENTITY(0, (0) / 1), _GLF_IDENTITY(_GLF_IDENTITY(0, max(0, 0)), (0) / 1))), clamp(_GLF_IDENTITY(0, (0) / 1), _GLF_IDENTITY(_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, (0) << 0), 0)), (0) / 1), _GLF_IDENTITY(0, (0) / 1))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, int(int(0)))) << 0), int(int(0))), (0) / _GLF_IDENTITY(1, (1) - (8323 & 0))), _GLF_IDENTITY(_GLF_IDENTITY(0, (0) / 1), int(_GLF_IDENTITY(int(_GLF_IDENTITY(0, (0) / _GLF_IDENTITY(1, min(1, 1)))), ~ (~ (int(_GLF_IDENTITY(0, (0) / _GLF_IDENTITY(1, min(1, 1))))))))), _GLF_IDENTITY(0, (0) / 1))); _GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(1 ^ 0, (1 ^ 0) / 1))), bool(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(1 ^ 0, (1 ^ 0) / 1)))))), bool(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((1 ^ 0), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY((1 ^ 0), 0 ^ ((1 ^ 0)))) >> 0, clamp(((1 ^ 0)) >> 0, _GLF_IDENTITY(((1 ^ 0)) >> 0, (((1 ^ 0)) >> 0) - 0), ((1 ^ 0)) >> 0)), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY((1 ^ 0), 0 ^ ((1 ^ 0)))) >> 0, clamp(((1 ^ 0)) >> 0, _GLF_IDENTITY(((1 ^ 0)) >> 0, (((1 ^ 0)) >> 0) - 0), ((1 ^ 0)) >> 0))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((_GLF_IDENTITY(1 ^ 0, (1 ^ 0) << 0)), ((_GLF_IDENTITY(1 ^ _GLF_IDENTITY(0, min(0, 0)), (_GLF_IDENTITY(1 ^ _GLF_IDENTITY(0, min(0, 0)), max(1 ^ _GLF_IDENTITY(0, min(0, 0)), 1 ^ _GLF_IDENTITY(0, min(0, 0))))) - 0))) >> 0)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec3(bvec4(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((1 ^ 0), ((_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, (1) >> 0))) ^ 0)) >> 0)), _GLF_TRUE(_GLF_IDENTITY(true, false || (true)), (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(true, false || (true)) ? injectionSwitch.x : _GLF_FUZZED(7.9))) < injectionSwitch.y)), true), false)))))))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               do
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                  {
                   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), true && (_GLF_WRAPPED_IF_TRUE(true))))
                    {
                     if(_GLF_DEAD(false))
                      {
                       do
                        {
                         barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                    }
                   else
                    {
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                 for(int _injected_loop_counter = (((true ? 54144 : -61683) / 39401) & (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(8), (0 | (0 | 0)) | (int(8))), int(8)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_IDENTITY(_injected_loop_counter ++, _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter ++, ~ (~ (_injected_loop_counter ++)))) - 0, (false ? _GLF_FUZZED(_injected_loop_counter) : (_GLF_IDENTITY(_injected_loop_counter ++, ~ (~ (_injected_loop_counter ++)))) - 0))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   do
                    {
                     for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != (0 | 0), (_injected_loop_counter != (0 | 0)) || false)); _GLF_IDENTITY(_injected_loop_counter --, (_GLF_IDENTITY(_injected_loop_counter --, ~ (~ (_injected_loop_counter --)))) / 1))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
                        {
                        }
                       else
                        {
                         do
                          {
                           do
                            {
                             barrier();
                            }
                           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                          }
                         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))));
                        }
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))));
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
               while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(! (false), bool(bvec4(! (false), true, true, true)))), true && ((_GLF_IDENTITY(! (false), bool(bvec4(! (false), true, true, _GLF_IDENTITY(true, ! (! (true))))))))) || false, bool(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(! (false), bool(bvec4(! (false), true, true, true)))) || false, true && ((_GLF_IDENTITY(! (false), bool(bvec4(_GLF_IDENTITY(! (false), (_GLF_IDENTITY(! (false), ! (! (! (false))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, true, true)))) || false)), false))))))))), (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-497.802) : injectionSwitch.y))))), ! (! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(bvec4(false, true, true, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))), false, true, true))))))))), (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))), false || (_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, (false) && true), true))), (false) || _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-497.802) : _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(0.0)), bool(false))))))))), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-497.802) : _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(0.0)), bool(false)))))))))), false || (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-497.802) : _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(0.0)), bool(false)))))))))), (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-497.802) : _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(501.756)), float(injectionSwitch.y), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(0.0)), bool(false))))))))))) || false)))))), ! (! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), false || (_GLF_IDENTITY(bool(false), (bool(false)) && true))))), true, true, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))), false, true, _GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, true, true, false))), ! (_GLF_IDENTITY(! (true), true && (! (true)))))))))))))), (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)))))))));
              }
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-31.96)), bool(false))) > injectionSwitch.y)) || false)))))))
              {
               for(int _injected_loop_counter = (1 ^ ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), int(ivec4(int(5), 0, 1, 0))))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) | (int(5))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(int(5), (_GLF_IDENTITY(int(5), max(int(5), int(5)))) | (int(5))), (false ? _GLF_FUZZED(5548) : _GLF_IDENTITY(int(5), _GLF_IDENTITY((int(5)) | (int(5)), ((int(5)) | (int(5))) << 0)))), _GLF_IDENTITY(int(_GLF_IDENTITY(5, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(5, 0 + (5))), clamp(~ (_GLF_IDENTITY(5, 0 + (5))), ~ (_GLF_IDENTITY(5, 0 + (5))), ~ (_GLF_IDENTITY(5, 0 + (5)))))))), (int(5)) | (int(5))), _GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) | (int(5))), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) | (int(5))), (_GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) | (int(5))), (_GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) | (int(5))), int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(int(5), (int(5)) | (int(5))), int(_GLF_ONE(1.0, injectionSwitch.y)), 0), (_GLF_IDENTITY(ivec3(_GLF_IDENTITY(int(5), (int(5)) | (int(5))), int(_GLF_ONE(1.0, injectionSwitch.y)), 0), (ivec3(_GLF_IDENTITY(int(5), (int(5)) | (int(5))), int(_GLF_ONE(1.0, injectionSwitch.y)), 0)) ^ ivec3(0, 0, 0))) / ivec3(1, 1, 1))))) | _GLF_IDENTITY((_GLF_IDENTITY(int(5), (int(5)) | (int(5)))), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(int(5), (int(5)) | (int(5)))), (true ? (_GLF_IDENTITY(int(5), (int(5)) | (int(5)))) : _GLF_FUZZED(_injected_loop_counter)))))))) / 1)))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), max(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (_GLF_ONE(1.0, injectionSwitch.y)) / 1.0), _GLF_ONE(1.0, injectionSwitch.y))))); _injected_loop_counter ++)
                {
                 barrier();
                }
              }
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, bool(bvec4(_injected_loop_counter != 1, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, true, true), bvec3(bvec3(bvec3(true, true, true)))))), (injectionSwitch.x < injectionSwitch.y))))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
              }
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(bvec4(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))));
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(false, false || (false)) ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter)))) > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, false)), ! (! (bool(bvec2(true, false)))))), (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, false || (false)), true, true)), (bool(bvec3(_GLF_IDENTITY(false, false || (false)), true, true))) || false))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec2(_GLF_WRAPPED_IF_TRUE(true), false))))
            {
             barrier();
            }
           else
            {
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
        }
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)), true)), ! (! (bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)), true))))))))))), (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)), true)), ! (! (bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)), true))))))))))), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)), true)), ! (! (bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)), true))))))))))), bool(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)), true)), ! (! (bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)), true))))))))))), true, false))), false, false, false)))) || false)), false || (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * exp(0.0)) > injectionSwitch.y)), true)), ! (! (bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)), true)))))))))))))))
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_injected_loop_counter --, int(_GLF_ZERO(0.0, injectionSwitch.x)) + (_injected_loop_counter --)))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               barrier();
              }
            }
          }
         barrier();
        }
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - sin(0.0)) > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
              barrier();
             barrier();
            }
          }
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 if(_GLF_DEAD(false))
  barrier();
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)) / 1u), (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)) / 1u)) ^ (0u ^ 0u)) + ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)) + _GLF_IDENTITY(1, _GLF_IDENTITY((1), 0 | ((1))) ^ _GLF_IDENTITY(_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), 0 + (~ (0))))), (_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), 0 + (~ (0)))))) * (1 & 1))), (_GLF_IDENTITY(true ? _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (0u & 163657u) ^ (_GLF_IDENTITY(subgroup_local_id + 1, max(subgroup_local_id + 1, subgroup_local_id + 1)))), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (false ? _GLF_FUZZED(subgroup_id) : subgroup_local_id + 1)), (0u & 163657u) ^ (_GLF_IDENTITY(subgroup_local_id + 1, max(subgroup_local_id + 1, subgroup_local_id + 1))))) | uint(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, injectionSwitch.x)) - 0.0)))) | (subgroup_local_id + 1)), (_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (0u & 163657u) ^ (_GLF_IDENTITY(subgroup_local_id + 1, max(subgroup_local_id + 1, subgroup_local_id + 1)))), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (false ? _GLF_FUZZED(subgroup_id) : subgroup_local_id + 1)), (0u & 163657u) ^ (_GLF_IDENTITY(subgroup_local_id + 1, max(subgroup_local_id + 1, subgroup_local_id + 1))))) | uint(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, injectionSwitch.x)) - 0.0)))) | (subgroup_local_id + 1))) | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (0u & 163657u) ^ (_GLF_IDENTITY(subgroup_local_id + 1, max(subgroup_local_id + 1, subgroup_local_id + 1)))), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (false ? _GLF_FUZZED(subgroup_id) : subgroup_local_id + 1)), (0u & 163657u) ^ (_GLF_IDENTITY(subgroup_local_id + 1, max(subgroup_local_id + 1, subgroup_local_id + 1))))) | uint(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, injectionSwitch.x)) - 0.0)))) | (subgroup_local_id + 1)), (_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (0u & 163657u) ^ (_GLF_IDENTITY(subgroup_local_id + 1, max(subgroup_local_id + 1, subgroup_local_id + 1)))), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (false ? _GLF_FUZZED(subgroup_id) : subgroup_local_id + 1)), (0u & 163657u) ^ (_GLF_IDENTITY(subgroup_local_id + 1, max(subgroup_local_id + 1, subgroup_local_id + 1))))) | uint(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, injectionSwitch.x)) - 0.0)))) | (subgroup_local_id + 1))) << 0u))) : _GLF_FUZZED(uint(-9.2)), clamp(true ? _GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY((0u & 163657u), ((0u & 163657u)) - 0u) ^ (_GLF_IDENTITY(subgroup_local_id + 1, max(subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + 1)))))))) | (subgroup_local_id + 1), ((_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY((0u & 163657u), ((0u & 163657u)) - 0u) ^ (_GLF_IDENTITY(subgroup_local_id + 1, max(subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY(~ (~ (subgroup_local_id + 1)), (_GLF_IDENTITY(~ (~ (subgroup_local_id + 1)), (~ (~ (subgroup_local_id + 1))) / 1u)) | 0u))))))) | (subgroup_local_id + 1)) * 1u)) : _GLF_FUZZED(uint(-9.2)), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bool(true)))), bool(bool(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bool(true)))), false || (! (_GLF_IDENTITY(true, bool(bool(true))))))))))) ? _GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, 0u | (subgroup_local_id + 1)), (0u & _GLF_IDENTITY(163657u, ~ (~ (163657u)))) ^ (_GLF_IDENTITY(subgroup_local_id + 1, max(subgroup_local_id + 1, subgroup_local_id + 1))))) | (subgroup_local_id + 1)) : _GLF_FUZZED(uint(-9.2)), true ? _GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (false ? _GLF_FUZZED(-35556) : _GLF_IDENTITY(1, (1) / 1))), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY((0u & 163657u) ^ (_GLF_IDENTITY(subgroup_local_id + 1, max(subgroup_local_id + 1, subgroup_local_id + 1))), (false ? _GLF_FUZZED(workgroup_id) : _GLF_IDENTITY((0u & 163657u) ^ (_GLF_IDENTITY(subgroup_local_id + 1, max(subgroup_local_id + 1, subgroup_local_id + 1))), clamp((0u & 163657u) ^ (_GLF_IDENTITY(subgroup_local_id + 1, max(subgroup_local_id + 1, subgroup_local_id + 1))), (0u & 163657u) ^ (_GLF_IDENTITY(subgroup_local_id + 1, max(subgroup_local_id + 1, subgroup_local_id + 1))), (0u & 163657u) ^ (_GLF_IDENTITY(subgroup_local_id + 1, max(subgroup_local_id + 1, subgroup_local_id + 1))))))))) | (subgroup_local_id + 1), ((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, min(1, 1)), (0u & 163657u) ^ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, max(subgroup_local_id + 1, subgroup_local_id + 1)), (_GLF_IDENTITY(subgroup_local_id + 1, max(subgroup_local_id + 1, subgroup_local_id + 1))) - 0u)))) | (subgroup_local_id + 1)) >> 0u)) : _GLF_FUZZED(uint(-9.2))))))) % subgroup_size);
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y, float(mat2x3(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y, 1.0, 0.0, 0.0, 1.0, sin(0.0)))))), _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! _GLF_IDENTITY((false), ((false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) && true)))
    barrier();
   buf[virtual_gid] = 1;
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       barrier();
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 do
  {
   if(subgroup_local_id + _GLF_IDENTITY(1, 0 ^ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1, (1) - 0), ~ (~ (1)))), max((_GLF_IDENTITY(_GLF_IDENTITY(1, (1) - 0), ~ (~ (1)))), (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) - 0), ~ (~ (1))))))) < _GLF_IDENTITY(subgroup_size, 0u ^ _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), (~ _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) | 0u)) >> 0u)), ((_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size), min((subgroup_size), _GLF_IDENTITY((subgroup_size), ((subgroup_size)) - (0u >> _GLF_IDENTITY(uint(6u), uint(6u)))))) | 0u)) >> 0u))) - uint(_GLF_ZERO(0.0, injectionSwitch.x))), (true ? _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, (subgroup_size) | 0u)), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, (subgroup_size) | 0u)), ((_GLF_IDENTITY(subgroup_size, (subgroup_size) | 0u))) << 0u)) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))) >> 0u)), ((_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) | 0u)) >> 0u))) - uint(_GLF_ZERO(0.0, injectionSwitch.x))), min(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) | _GLF_IDENTITY(0u, (0u) + 0u))) >> 0u)), _GLF_IDENTITY(((_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) | 0u)) >> 0u))), (((_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) | 0u)) >> 0u)))) | (((_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) | 0u)) >> 0u))))) - uint(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) | 0u)) >> 0u)), ((_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) | 0u)) >> 0u))) - uint(_GLF_ZERO(0.0, injectionSwitch.x))))) : _GLF_FUZZED(subgroup_size)))) ^ _GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, ~ (~ (0u)))))))))), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_size), 0u | (~ (subgroup_size))), (true ? _GLF_IDENTITY(~ (subgroup_size), min(_GLF_IDENTITY(~ (subgroup_size), ~ (~ (~ (subgroup_size)))), ~ (subgroup_size))) : _GLF_FUZZED(subgroup_id))), _GLF_IDENTITY(_GLF_IDENTITY((~ _GLF_IDENTITY((subgroup_size), max((subgroup_size), _GLF_IDENTITY((subgroup_size), ((subgroup_size)) / 1u)))), 0u + (_GLF_IDENTITY((~ (subgroup_size)), (true ? _GLF_IDENTITY((~ (subgroup_size)), clamp((~ (subgroup_size)), (~ (subgroup_size)), (~ (subgroup_size)))) : _GLF_FUZZED(workgroup_id))))), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY((~ _GLF_IDENTITY((subgroup_size), max((subgroup_size), _GLF_IDENTITY((subgroup_size), ((subgroup_size)) / 1u)))), 0u + (_GLF_IDENTITY((~ (subgroup_size)), (true ? _GLF_IDENTITY((~ (subgroup_size)), clamp((~ (subgroup_size)), (~ (subgroup_size)), (~ (subgroup_size)))) : _GLF_FUZZED(workgroup_id))))))), _GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(uint(uint(_GLF_IDENTITY((~ _GLF_IDENTITY((subgroup_size), max((subgroup_size), _GLF_IDENTITY((subgroup_size), ((subgroup_size)) / 1u)))), 0u + (_GLF_IDENTITY((~ (subgroup_size)), (true ? _GLF_IDENTITY((~ (subgroup_size)), clamp((~ (subgroup_size)), (~ (subgroup_size)), (~ (subgroup_size)))) : _GLF_FUZZED(workgroup_id))))))), 0u ^ (uint(uint(_GLF_IDENTITY((~ _GLF_IDENTITY((subgroup_size), max((subgroup_size), _GLF_IDENTITY((subgroup_size), ((subgroup_size)) / 1u)))), 0u + (_GLF_IDENTITY((~ (subgroup_size)), (true ? _GLF_IDENTITY((~ (subgroup_size)), clamp((~ (subgroup_size)), (~ (subgroup_size)), (~ (subgroup_size)))) : _GLF_FUZZED(workgroup_id))))))))), 1u)), max(uint(uvec2(_GLF_IDENTITY(uint(uint(_GLF_IDENTITY((~ _GLF_IDENTITY((subgroup_size), max((subgroup_size), _GLF_IDENTITY((subgroup_size), ((subgroup_size)) / 1u)))), 0u + (_GLF_IDENTITY((~ (subgroup_size)), (true ? _GLF_IDENTITY((~ (subgroup_size)), clamp((~ (subgroup_size)), (~ (subgroup_size)), (~ (subgroup_size)))) : _GLF_FUZZED(workgroup_id))))))), 0u ^ (uint(uint(_GLF_IDENTITY((~ _GLF_IDENTITY((subgroup_size), max((subgroup_size), _GLF_IDENTITY((subgroup_size), ((subgroup_size)) / 1u)))), 0u + (_GLF_IDENTITY((~ (subgroup_size)), (true ? _GLF_IDENTITY((~ (subgroup_size)), clamp((~ (subgroup_size)), (~ (subgroup_size)), (~ (subgroup_size)))) : _GLF_FUZZED(workgroup_id))))))))), 1u)), uint(uvec2(_GLF_IDENTITY(uint(uint(_GLF_IDENTITY((~ _GLF_IDENTITY((subgroup_size), max((subgroup_size), _GLF_IDENTITY((subgroup_size), ((subgroup_size)) / 1u)))), 0u + (_GLF_IDENTITY((~ (subgroup_size)), (true ? _GLF_IDENTITY((~ (subgroup_size)), clamp((~ (subgroup_size)), (~ (subgroup_size)), (~ (subgroup_size)))) : _GLF_FUZZED(workgroup_id))))))), 0u ^ (uint(uint(_GLF_IDENTITY((~ _GLF_IDENTITY((subgroup_size), max((subgroup_size), _GLF_IDENTITY((subgroup_size), ((subgroup_size)) / 1u)))), 0u + (_GLF_IDENTITY((~ (subgroup_size)), (true ? _GLF_IDENTITY((~ (subgroup_size)), clamp((~ (subgroup_size)), (~ (subgroup_size)), (~ (subgroup_size)))) : _GLF_FUZZED(workgroup_id))))))))), 1u)))))) ^ _GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, ~ (~ _GLF_IDENTITY((0u), (false ? _GLF_FUZZED(subgroup_size) : (0u)))))))))))), max((_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), _GLF_IDENTITY((~ (subgroup_size)) ^ _GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, ~ (~ (0u)))))), (_GLF_IDENTITY((~ (subgroup_size)) ^ _GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(0u, ~ (~ (0u))), max(_GLF_IDENTITY(_GLF_IDENTITY(0u, ~ (~ (0u))), (_GLF_IDENTITY(0u, ~ (~ (0u)))) | 0u), _GLF_IDENTITY(0u, ~ (~ (0u)))))))), ~ (~ (_GLF_IDENTITY((~ (subgroup_size)), (_GLF_IDENTITY((~ (subgroup_size)), ((~ (subgroup_size))) ^ 0u)) | 0u) ^ _GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, ~ (~ (0u)))))))))) >> 0u))))), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), (~ (subgroup_size)) ^ _GLF_IDENTITY(_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, ~ _GLF_IDENTITY((~ (0u)), _GLF_IDENTITY(uint(uvec3((~ (0u)), 1u, 1u)), min(_GLF_IDENTITY(uint(uvec3((~ (0u)), 1u, 1u)), uint(uint(uint(uvec3((~ (0u)), 1u, 1u))))), uint(uvec3((~ (0u)), 1u, 1u))))))))), max(_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, ~ _GLF_IDENTITY((~ (0u)), _GLF_IDENTITY(uint(uvec3((~ _GLF_IDENTITY((0u), ((0u)) / 1u)), 1u, 1u)), min(_GLF_IDENTITY(uint(uvec3((~ (0u)), 1u, _GLF_IDENTITY(1u, (1u) / 1u))), uint(uint(uint(uvec3((~ (0u)), 1u, 1u))))), uint(uvec3((~ (0u)), 1u, 1u))))))))), _GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, _GLF_IDENTITY(~ _GLF_IDENTITY((~ (0u)), _GLF_IDENTITY(uint(uvec3((~ (0u)), 1u, 1u)), min(_GLF_IDENTITY(uint(uvec3((~ (0u)), 1u, 1u)), uint(uint(uint(uvec3((~ (0u)), 1u, 1u))))), uint(uvec3((~ (0u)), 1u, 1u))))), uint(uint(~ _GLF_IDENTITY((~ (0u)), _GLF_IDENTITY(uint(uvec3((~ (0u)), 1u, 1u)), min(_GLF_IDENTITY(uint(uvec3((~ (0u)), 1u, 1u)), uint(uint(uint(uvec3((~ (0u)), 1u, 1u))))), uint(uvec3((~ (0u)), 1u, 1u)))))))))))))))))), ((_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), _GLF_IDENTITY((~ (subgroup_size)) ^ _GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, ~ (~ (0u)))))), ~ (~ ((~ (subgroup_size)) ^ _GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, ~ (~ (0u)))))))))))))) << 0u))), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), (~ (subgroup_size)) ^ _GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(0u, 0u | (_GLF_IDENTITY(0u, (0u) | (0u)))), ~ (~ (0u)))))))))), _GLF_IDENTITY(_GLF_IDENTITY(max((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) >> 0u), ~ (_GLF_IDENTITY(~ (subgroup_size), (~ (subgroup_size)) ^ _GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, ~ (~ (0u)))))))))), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ _GLF_IDENTITY((subgroup_size), ((subgroup_size)) / 1u), (~ (subgroup_size)) ^ _GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, ~ (~ (0u)))))))))), ((_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)), 0u | (subgroup_size))), (~ (subgroup_size)) ^ _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(0u, ~ (~ (0u))))), (uint(uint(_GLF_IDENTITY(0u, ~ (~ (0u)))))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))))))))) << 0u)), (max((_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), (~ (subgroup_size)) ^ _GLF_IDENTITY(_GLF_IDENTITY(0u, ~ (~ (0u))), uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), (~ (0u)) | (~ (0u))))), clamp(_GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), (~ (0u)) | (~ (0u))))), _GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), (~ (0u)) | (~ (0u))))), _GLF_IDENTITY(_GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), (~ (0u)) | (~ (0u))))), (_GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), (~ (0u)) | (~ (0u)))))) << 0u)))))))))), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (subgroup_size), _GLF_IDENTITY((~ (subgroup_size)) ^ _GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, ~ (~ (0u)))))), max(_GLF_IDENTITY((~ (subgroup_size)) ^ _GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, ~ (~ (0u)))))), (true ? (~ (subgroup_size)) ^ _GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, ~ (~ (0u)))))) : _GLF_FUZZED(virtual_gid))), (~ (subgroup_size)) ^ _GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, ~ (~ (0u)))))))))), 0u | (~ (_GLF_IDENTITY(~ (subgroup_size), _GLF_IDENTITY((~ (subgroup_size)) ^ _GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, ~ (~ (0u)))))), max(_GLF_IDENTITY((~ (subgroup_size)) ^ _GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, ~ (~ (0u)))))), (true ? (~ (subgroup_size)) ^ _GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, ~ (~ (0u)))))) : _GLF_FUZZED(virtual_gid))), (~ (subgroup_size)) ^ _GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, ~ (~ (0u)))))))))))))), ((_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), (~ (subgroup_size)) ^ _GLF_IDENTITY(0u, uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(0u, ~ (~ (0u)))), uint(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(uint(_GLF_IDENTITY(0u, ~ (~ (0u)))), (_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(0u, ~ (~ (0u))), (_GLF_IDENTITY(0u, _GLF_IDENTITY(~ (~ (0u)), (~ (~ (0u))) | (~ (~ (0u)))))) + 0u)), (uint(_GLF_IDENTITY(0u, ~ (~ (0u))))) | 0u)) ^ 0u)))))))))) << 0u))) << 0u), (_GLF_IDENTITY(max((_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (subgroup_size), (~ (subgroup_size)) ^ _GLF_IDENTITY(_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, ~ _GLF_IDENTITY((~ (0u)), ((~ (0u))) << 0u))))), (_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, ~ _GLF_IDENTITY((~ (0u)), ((~ (0u))) << 0u)))))) * 1u))), (~ (_GLF_IDENTITY(~ (subgroup_size), _GLF_IDENTITY((_GLF_IDENTITY(~ (subgroup_size), uint(uint(_GLF_IDENTITY(~ (subgroup_size), (~ (subgroup_size)) ^ 0u))))) ^ _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(0u, ~ _GLF_IDENTITY((~ (0u)), ((~ (0u))) << 0u)))), min(uint(uint(_GLF_IDENTITY(0u, ~ _GLF_IDENTITY((~ (0u)), ((~ (0u))) << 0u)))), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(0u, ~ _GLF_IDENTITY((~ (0u)), ((~ (0u))) << 0u)))), (uint(uint(_GLF_IDENTITY(0u, ~ _GLF_IDENTITY((~ (0u)), ((~ (0u))) << 0u))))) ^ 0u)))), clamp((~ (subgroup_size)) ^ _GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, ~ _GLF_IDENTITY(_GLF_IDENTITY((~ (0u)), ((~ (0u))) << 0u), ~ (~ (_GLF_IDENTITY((~ (0u)), ((~ (0u))) << 0u)))))))), _GLF_IDENTITY((~ (subgroup_size)) ^ _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(0u, ~ _GLF_IDENTITY((~ (0u)), ((~ (0u))) << 0u)))), (uint(uint(_GLF_IDENTITY(0u, ~ _GLF_IDENTITY((~ (0u)), ((~ (0u))) << 0u))))) - 0u)), max((~ (subgroup_size)) ^ _GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, ~ _GLF_IDENTITY((~ (0u)), ((~ (0u))) << 0u))))), (~ (subgroup_size)) ^ _GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, ~ _GLF_IDENTITY((~ (0u)), ((~ (0u))) << 0u))))))), (~ (subgroup_size)) ^ _GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, ~ _GLF_IDENTITY((~ (0u)), ((~ (0u))) << 0u)))))))))) / 1u))), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), (~ _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(true, (true) && true) ? _GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u) : _GLF_FUZZED(183516u)))), _GLF_IDENTITY(0u | ((_GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u) : _GLF_FUZZED(183516u))))), ~ (~ (_GLF_IDENTITY(0u | ((_GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u) : _GLF_FUZZED(183516u))))), max(0u | ((_GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u) : _GLF_FUZZED(183516u))))), 0u | ((_GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u) : _GLF_FUZZED(183516u)))))))))))) ^ _GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) / 1u), uint(uint(_GLF_IDENTITY(0u, _GLF_IDENTITY(~ (~ (0u)), (~ (~ (0u))) | (~ (~ (0u)))))))))))), _GLF_IDENTITY(((_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), (~ (subgroup_size)) ^ _GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, _GLF_IDENTITY(~ (~ (0u)), (~ (~ (0u))) | _GLF_IDENTITY(0u, _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(subgroup_id) : 0u)) ^ (0u)))))))))))) << 0u, (((_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_size), (_GLF_IDENTITY(~ (subgroup_size), uint(_GLF_IDENTITY(uint(~ (subgroup_size)), (uint(~ (subgroup_size))) + _GLF_IDENTITY(0u, ~ (~ (0u))))))) ^ _GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, ~ _GLF_IDENTITY((~ (0u)), 0u ^ ((~ (0u))))))))), (_GLF_IDENTITY(~ (subgroup_size), (~ (subgroup_size)) ^ _GLF_IDENTITY(0u, uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(0u, ~ _GLF_IDENTITY((~ (0u)), ((~ (0u))) - 0u))), clamp(_GLF_IDENTITY(uint(_GLF_IDENTITY(0u, ~ _GLF_IDENTITY((~ (0u)), ((~ (0u))) - 0u))), 0u | (uint(_GLF_IDENTITY(0u, ~ _GLF_IDENTITY((~ (0u)), ((~ (0u))) - 0u))))), _GLF_IDENTITY(uint(_GLF_IDENTITY(0u, ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (0u), max(~ (0u), ~ (0u)))), ((~ (0u))) - 0u))), clamp(_GLF_IDENTITY(uint(_GLF_IDENTITY(0u, ~ _GLF_IDENTITY(_GLF_IDENTITY((~ (0u)), ((~ (0u))) - 0u), (_GLF_IDENTITY((~ (0u)), ((~ (0u))) - 0u)) ^ 0u))), 1u * (uint(_GLF_IDENTITY(0u, ~ _GLF_IDENTITY(_GLF_IDENTITY((~ (0u)), ((~ (0u))) - 0u), (_GLF_IDENTITY((~ (0u)), ((~ (0u))) - 0u)) ^ 0u))))), uint(_GLF_IDENTITY(0u, ~ _GLF_IDENTITY((~ (0u)), ((~ (0u))) - 0u))), uint(_GLF_IDENTITY(0u, ~ _GLF_IDENTITY((~ (0u)), ((_GLF_IDENTITY(~ (0u), 0u | (~ (0u))))) - 0u))))), uint(_GLF_IDENTITY(0u, ~ _GLF_IDENTITY((~ (0u)), ((~ (0u))) - 0u))))))))) / 1u))))) << 0u) / 1u))), min(max((_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), (~ _GLF_IDENTITY((subgroup_size), ((subgroup_size)) | ((subgroup_size)))) ^ _GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, ~ (~ (0u)))))))))), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))), (~ _GLF_IDENTITY((subgroup_size), ((subgroup_size)) | (_GLF_IDENTITY((subgroup_size), 0u ^ ((subgroup_size)))))) ^ _GLF_IDENTITY(0u, uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(0u, ~ (~ (0u)))), uint(uvec2(uint(_GLF_IDENTITY(0u, ~ (~ (0u)))), _GLF_IDENTITY(((0u << _GLF_IDENTITY(uint(6u), uint(_GLF_IDENTITY(6u, (6u) ^ 0u)))) & 147093u), max(_GLF_IDENTITY(((0u << _GLF_IDENTITY(uint(6u), uint(6u))) & 147093u), (((0u << _GLF_IDENTITY(uint(6u), uint(6u))) & 147093u)) | 0u), ((0u << _GLF_IDENTITY(uint(_GLF_IDENTITY(6u, 0u | (6u))), uint(6u))) & 147093u)))))))))), (0u ^ 0u) + ((_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))), (~ (subgroup_size)) ^ _GLF_IDENTITY(0u, uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(0u, ~ (~ (0u)))), uint(uvec2(uint(_GLF_IDENTITY(_GLF_IDENTITY(0u, max(0u, 0u)), ~ (~ (0u)))), (_GLF_IDENTITY((_GLF_IDENTITY(0u, (0u) << 0u) << _GLF_IDENTITY(uint(6u), uint(6u))), ((0u << _GLF_IDENTITY(uint(6u), uint(6u)))) ^ 0u) & 147093u)))))))))))), ((_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), _GLF_IDENTITY((~ (subgroup_size)), ((~ (subgroup_size))) << 0u) ^ _GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, _GLF_IDENTITY(~ (~ (0u)), min(~ (~ (0u)), _GLF_IDENTITY(~ (~ (0u)), _GLF_IDENTITY(min(~ (~ (0u)), _GLF_IDENTITY(~ (~ (0u)), (false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(~ (~ (0u)), clamp(~ (~ (0u)), ~ (~ (0u)), ~ (~ (0u))))))), 0u ^ (_GLF_IDENTITY(min(~ (~ (0u)), ~ (~ (0u))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(min(~ (~ (0u)), ~ (~ (0u))), (min(~ (~ (0u)), ~ (~ (0u)))) << 0u), (min(~ (~ (0u)), ~ (~ (0u)))) + 0u)), (true ? _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(min(~ (~ (0u)), ~ (~ (0u))), (min(~ (~ (0u)), ~ (~ (0u)))) << 0u), (min(~ (~ (0u)), ~ (~ (0u)))) + 0u)), ((_GLF_IDENTITY(_GLF_IDENTITY(min(~ (~ (0u)), ~ (~ (0u))), (min(~ (~ (0u)), ~ (~ (0u)))) << 0u), (min(~ (~ (0u)), ~ (~ (0u)))) + 0u))) >> 0u) : _GLF_FUZZED(packSnorm4x8(vec4(8913.8639, 7.1, -37.62, 4571.8484))))) << _GLF_IDENTITY(0u, (0u) | uint(_GLF_ZERO(0.0, injectionSwitch.x)))))))))))))))))) << 0u)), _GLF_IDENTITY(max((_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ _GLF_IDENTITY((subgroup_size), min((subgroup_size), (subgroup_size))), (~ (subgroup_size)) ^ _GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, ~ (~ (0u)))))))))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(136012u) : subgroup_size)), ~ (_GLF_IDENTITY(~ (subgroup_size), (~ (subgroup_size)) ^ _GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (0u), _GLF_IDENTITY(~ (~ (~ (0u))), ~ (~ (_GLF_IDENTITY(~ (~ (~ (0u))), _GLF_IDENTITY(0u + (~ (~ (~ (0u)))), (0u + (~ (~ (~ (0u))))) | 0u))))))), (0u << _GLF_IDENTITY(uint(3u), uint(3u))) ^ ((_GLF_IDENTITY(~ (0u), _GLF_IDENTITY(~ (~ (~ (0u))), ~ (~ (_GLF_IDENTITY(~ (~ (~ (0u))), _GLF_IDENTITY(0u + (~ (~ (~ (0u)))), (0u + (~ (~ (~ (0u))))) | 0u))))))))))))))))), ((_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ _GLF_IDENTITY((subgroup_size), _GLF_IDENTITY((true ? (subgroup_size) : _GLF_FUZZED((num_workgroup | next_virtual_gid))), min((true ? (subgroup_size) : _GLF_FUZZED((num_workgroup | next_virtual_gid))), (true ? (subgroup_size) : _GLF_FUZZED((num_workgroup | next_virtual_gid)))))), (~ (subgroup_size)) ^ _GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, ~ (~ (0u))))))))))) << _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(_GLF_IDENTITY(0u, uint(_GLF_IDENTITY(uvec3(0u, 1u, 1u), (true ? uvec3(0u, 1u, 1u) : _GLF_FUZZED(uvec3(19568u, 126493u, 89237u)))))), 0u | (_GLF_IDENTITY(0u, uint(_GLF_IDENTITY(uvec3(0u, 1u, 1u), (true ? uvec3(0u, 1u, 1u) : _GLF_FUZZED(uvec3(19568u, 126493u, 89237u)))))))))))), (max(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), (~ (subgroup_size)) ^ _GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) + 0u), uint(uint(_GLF_IDENTITY(0u, ~ (~ (0u)))))))))), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_size), (~ (subgroup_size)) ^ _GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) + 0u), uint(uint(_GLF_IDENTITY(0u, ~ (~ (0u))))))), max(_GLF_IDENTITY(~ (subgroup_size), (~ (subgroup_size)) ^ _GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) + 0u), uint(uint(_GLF_IDENTITY(0u, ~ (~ (0u))))))), _GLF_IDENTITY(~ (subgroup_size), (~ (subgroup_size)) ^ _GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) + 0u), uint(uint(_GLF_IDENTITY(0u, ~ (~ (0u)))))))))))), _GLF_IDENTITY((true ? (_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_size), 1u * (_GLF_IDENTITY(~ (subgroup_size), (~ (subgroup_size)) * ((1u << _GLF_IDENTITY(uint(5u), uint(5u))) >> _GLF_IDENTITY(uint(5u), uint(5u)))))), (~ (subgroup_size)) ^ _GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) + 0u), uint(uint(_GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), max(~ (0u), _GLF_IDENTITY(~ (0u), 0u | (~ (0u)))))))))))))) : _GLF_FUZZED(workgroup_id)), _GLF_IDENTITY(uint(uvec4((true ? (_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_size), 1u * (_GLF_IDENTITY(~ (subgroup_size), (~ (subgroup_size)) * ((1u << _GLF_IDENTITY(uint(5u), uint(5u))) >> _GLF_IDENTITY(uint(5u), uint(5u)))))), (~ (subgroup_size)) ^ _GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) + 0u), uint(uint(_GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), max(~ (0u), _GLF_IDENTITY(~ (0u), 0u | (~ (0u)))))))))))))) : _GLF_FUZZED(workgroup_id)), 1u, 0u, 1u)), max(uint(uvec4((true ? (_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_size), 1u * (_GLF_IDENTITY(~ (subgroup_size), (~ (subgroup_size)) * ((1u << _GLF_IDENTITY(uint(5u), uint(5u))) >> _GLF_IDENTITY(uint(5u), uint(5u)))))), (~ (subgroup_size)) ^ _GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) + 0u), uint(uint(_GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), max(~ (0u), _GLF_IDENTITY(~ (0u), 0u | (~ (0u)))))))))))))) : _GLF_FUZZED(workgroup_id)), 1u, 0u, 1u)), uint(uvec4((true ? (_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_size), 1u * (_GLF_IDENTITY(~ (subgroup_size), (~ (subgroup_size)) * ((1u << _GLF_IDENTITY(uint(5u), uint(5u))) >> _GLF_IDENTITY(uint(5u), uint(5u)))))), (~ (subgroup_size)) ^ _GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) + 0u), uint(uint(_GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), max(~ (0u), _GLF_IDENTITY(~ (0u), 0u | (~ (0u)))))))))))))) : _GLF_FUZZED(workgroup_id)), 1u, 0u, 1u))))))) / 1u), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, min(_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), 0u | (~ (subgroup_size))))), subgroup_size))), (~ (subgroup_size)) ^ _GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, ~ _GLF_IDENTITY((~ (0u)), (_GLF_IDENTITY((~ (0u)), ((~ (0u))) - 0u)) >> 0u))))))))), ((_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), _GLF_IDENTITY((~ (subgroup_size)), uint(_GLF_ZERO(0.0, injectionSwitch.x)) + (_GLF_IDENTITY((~ (subgroup_size)), max((~ (subgroup_size)), (~ (subgroup_size)))))) ^ _GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, ~ (~ (0u))))))))))) << 0u), uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, min(_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), 0u | (~ (_GLF_IDENTITY(subgroup_size, 0u | (subgroup_size))))))), subgroup_size))), ((_GLF_IDENTITY(subgroup_size, min(_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), 0u | (~ (_GLF_IDENTITY(subgroup_size, 0u | (subgroup_size))))))), subgroup_size)))) ^ 0u), (~ (_GLF_IDENTITY(subgroup_size, min(_GLF_IDENTITY(subgroup_size, (subgroup_size) * (1u & 1u)), subgroup_size)))) ^ _GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, ~ _GLF_IDENTITY((~ (0u)), (_GLF_IDENTITY((~ (0u)), ((~ (0u))) - 0u)) >> 0u))))))))), ((_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ _GLF_IDENTITY((subgroup_size), min((subgroup_size), (subgroup_size))), (~ (subgroup_size)) ^ _GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, ~ (~ (0u))))))))))) << 0u), 0u | (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, min(_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), 0u | (~ (subgroup_size))))), subgroup_size))), (~ (subgroup_size)) ^ _GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, ~ _GLF_IDENTITY((~ (0u)), (_GLF_IDENTITY((~ (0u)), ((~ (0u))) - 0u)) >> 0u))))))), min(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, min(_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), 0u | (~ (subgroup_size))))), subgroup_size))), (~ (subgroup_size)) ^ _GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, ~ _GLF_IDENTITY((~ (0u)), (_GLF_IDENTITY((~ (0u)), ((~ (0u))) - 0u)) >> 0u))))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, min(_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), 0u | (~ (subgroup_size))))), subgroup_size))), (~ (subgroup_size)) ^ _GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, ~ _GLF_IDENTITY((~ (0u)), (_GLF_IDENTITY((~ (0u)), ((~ (0u))) - 0u)) >> 0u))))))))))), ((_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), (~ (subgroup_size)) ^ _GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, _GLF_IDENTITY(~ (~ (0u)), (true ? ~ (~ (0u)) : _GLF_FUZZED(subgroup_size)))))))))))) << 0u))), (_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(6u), uint(6u))), ((1u << _GLF_IDENTITY(uint(6u), uint(6u)))) / 1u) >> _GLF_IDENTITY(uint(6u), uint(6u))), 0u, 1u))))) / _GLF_IDENTITY(1u, _GLF_IDENTITY(clamp(1u, _GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) >> 0u))), _GLF_IDENTITY(1u, 0u | (1u))), ~ (~ (clamp(1u, _GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) >> 0u), (_GLF_IDENTITY(1u, (1u) >> 0u)) + 0u))), _GLF_IDENTITY(1u, 0u | (1u))))))))))) / 1u))) / 1u)) | (_GLF_IDENTITY(0u, 0u | (0u)) | 0u))))
    {
     int i = _GLF_IDENTITY(_GLF_IDENTITY(0, 0 | (0)), (0) / 1);
     if(_GLF_DEAD(false))
      barrier();
     buf[next_virtual_gid] = 2;
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     buf[next_virtual_gid] = _GLF_IDENTITY(2, (2) | (0 | 0));
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
}
