#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 0) uniform buf0 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true))), true, true, false))), (injectionSwitch.x > injectionSwitch.y)), false, false, false))), _GLF_IDENTITY(true, (true) && true) && (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)), ! (! _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))), max(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))), (true ? (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))) : _GLF_FUZZED(-1.0))), (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0)))))) * 1.0)))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(3.2) : injectionSwitch.x)), max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(_GLF_IDENTITY(3.2, clamp(3.2, 3.2, _GLF_IDENTITY(3.2, mix(float(_GLF_FUZZED(4.4)), float(_GLF_IDENTITY(3.2, 1.0 * (3.2))), bool(true)))))) : _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x)), (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(3.2) : injectionSwitch.x))) * 1.0), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x, (false ? _GLF_FUZZED(3.2) : injectionSwitch.x)))) > injectionSwitch.y), bool(bool((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-305.032)), float(injectionSwitch.x), bool(true))), (false ? _GLF_FUZZED(3.2) : injectionSwitch.x)), max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(3.2) : injectionSwitch.x)), (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(3.2) : injectionSwitch.x))) * 1.0), _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(3.2) : injectionSwitch.x)))) > injectionSwitch.y)))))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
             if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)) || false))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true)))
                {
                }
               else
                {
                 barrier();
                }
              }
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), (_GLF_IDENTITY((! (false)), false || ((! (false))))) && true)), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), bool(bvec3((false), true, true))))), (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bool(_GLF_IDENTITY(! (false), ! (! (! (false)))))))))) || false))))), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) && true) || (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false))))), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), bool(bvec3((false), true, true))))), (_GLF_IDENTITY(false, _GLF_IDENTITY(! (_GLF_IDENTITY(! _GLF_IDENTITY((false), ((false)) || false), bool(bool(_GLF_IDENTITY(! (false), ! (! (! (false)))))))), false || (! (_GLF_IDENTITY(! _GLF_IDENTITY((false), ((false)) || false), bool(bool(_GLF_IDENTITY(! (false), ! (! (! (false)))))))))))) || false))))))))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y))))) || false)) || false)) || (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y)))), false || _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)))) || _GLF_IDENTITY((_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-1451.6907)), _GLF_IDENTITY(float(injectionSwitch.y), (_GLF_IDENTITY(float(injectionSwitch.y), mix(float(_GLF_FUZZED((2.4 - 5.3))), float(float(injectionSwitch.y)), bool(true)))) - _GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-236.979) : _GLF_IDENTITY(0.0, min(0.0, 0.0))))), bool(true)))), false || ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-1451.6907)), _GLF_IDENTITY(float(injectionSwitch.y), (_GLF_IDENTITY(float(injectionSwitch.y), mix(float(_GLF_FUZZED((2.4 - 5.3))), float(float(injectionSwitch.y)), bool(true)))) - _GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-236.979) : _GLF_IDENTITY(0.0, min(0.0, 0.0))))), bool(true)))))))), _GLF_IDENTITY((_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-1451.6907)), _GLF_IDENTITY(float(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(float(injectionSwitch.y), mix(float(_GLF_FUZZED((_GLF_IDENTITY(2.4 - 5.3, min(_GLF_IDENTITY(2.4 - 5.3, max(2.4 - 5.3, 2.4 - 5.3)), 2.4 - 5.3))))), float(float(injectionSwitch.y)), bool(true)))), (true ? _GLF_IDENTITY((_GLF_IDENTITY(float(injectionSwitch.y), mix(float(_GLF_FUZZED((_GLF_IDENTITY(2.4 - 5.3, min(_GLF_IDENTITY(2.4 - 5.3, max(2.4 - 5.3, 2.4 - 5.3)), 2.4 - 5.3))))), float(float(injectionSwitch.y)), bool(true)))), clamp((_GLF_IDENTITY(float(injectionSwitch.y), mix(float(_GLF_FUZZED((_GLF_IDENTITY(2.4 - 5.3, min(_GLF_IDENTITY(2.4 - 5.3, max(2.4 - 5.3, 2.4 - 5.3)), 2.4 - 5.3))))), float(float(injectionSwitch.y)), bool(true)))), (_GLF_IDENTITY(float(injectionSwitch.y), mix(float(_GLF_FUZZED((_GLF_IDENTITY(2.4 - 5.3, min(_GLF_IDENTITY(2.4 - 5.3, max(2.4 - 5.3, 2.4 - 5.3)), 2.4 - 5.3))))), float(float(injectionSwitch.y)), bool(true)))), (_GLF_IDENTITY(float(injectionSwitch.y), mix(float(_GLF_FUZZED((_GLF_IDENTITY(2.4 - 5.3, min(_GLF_IDENTITY(2.4 - 5.3, max(2.4 - 5.3, 2.4 - 5.3)), 2.4 - 5.3))))), float(float(injectionSwitch.y)), bool(true)))))) : _GLF_FUZZED(7.2))), 0.0 + ((_GLF_IDENTITY(float(injectionSwitch.y), mix(_GLF_IDENTITY(float(_GLF_FUZZED((_GLF_IDENTITY(2.4 - 5.3, min(_GLF_IDENTITY(2.4 - 5.3, max(_GLF_IDENTITY(2.4 - 5.3, float(_GLF_IDENTITY(float(2.4 - 5.3), clamp(float(2.4 - 5.3), _GLF_IDENTITY(float(2.4 - 5.3), clamp(float(2.4 - 5.3), float(2.4 - 5.3), float(2.4 - 5.3))), float(2.4 - 5.3))))), 2.4 - 5.3)), 2.4 - 5.3))))), max(float(_GLF_FUZZED((_GLF_IDENTITY(2.4 - 5.3, min(_GLF_IDENTITY(2.4 - 5.3, max(_GLF_IDENTITY(2.4 - 5.3, float(_GLF_IDENTITY(float(2.4 - 5.3), clamp(float(2.4 - 5.3), _GLF_IDENTITY(float(2.4 - 5.3), clamp(float(2.4 - 5.3), float(2.4 - 5.3), float(2.4 - 5.3))), float(2.4 - 5.3))))), 2.4 - 5.3)), 2.4 - 5.3))))), _GLF_IDENTITY(float(_GLF_FUZZED((_GLF_IDENTITY(2.4 - 5.3, min(_GLF_IDENTITY(2.4 - 5.3, max(_GLF_IDENTITY(2.4 - 5.3, float(_GLF_IDENTITY(float(2.4 - 5.3), clamp(float(2.4 - 5.3), _GLF_IDENTITY(float(2.4 - 5.3), clamp(float(2.4 - 5.3), float(2.4 - 5.3), float(2.4 - 5.3))), float(2.4 - 5.3))))), 2.4 - 5.3)), 2.4 - 5.3))))), max(float(_GLF_FUZZED((_GLF_IDENTITY(2.4 - 5.3, min(_GLF_IDENTITY(2.4 - 5.3, max(_GLF_IDENTITY(2.4 - 5.3, float(_GLF_IDENTITY(float(2.4 - 5.3), clamp(float(2.4 - 5.3), _GLF_IDENTITY(float(2.4 - 5.3), clamp(float(2.4 - 5.3), float(2.4 - 5.3), float(2.4 - 5.3))), float(2.4 - 5.3))))), 2.4 - 5.3)), 2.4 - 5.3))))), float(_GLF_FUZZED((_GLF_IDENTITY(2.4 - 5.3, min(_GLF_IDENTITY(2.4 - 5.3, max(_GLF_IDENTITY(2.4 - 5.3, float(_GLF_IDENTITY(float(2.4 - 5.3), clamp(float(2.4 - 5.3), _GLF_IDENTITY(float(2.4 - 5.3), clamp(float(2.4 - 5.3), float(2.4 - 5.3), float(2.4 - 5.3))), float(2.4 - 5.3))))), 2.4 - 5.3)), 2.4 - 5.3))))))))), float(float(injectionSwitch.y)), bool(true)))))) - 0.0), bool(true)))))), (_GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(_GLF_FUZZED(-1451.6907), mix(float(_GLF_FUZZED(-1451.6907)), float(_GLF_FUZZED((6.1 / 9.4))), bool(false)))), _GLF_IDENTITY(float(injectionSwitch.y), (_GLF_IDENTITY(float(injectionSwitch.y), mix(float(_GLF_FUZZED((_GLF_IDENTITY(2.4 - 5.3, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 2.4 - 5.3 : _GLF_FUZZED(5.6)))))), float(float(injectionSwitch.y)), bool(true)))) - 0.0), bool(true))), ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-1451.6907)), _GLF_IDENTITY(float(injectionSwitch.y), (_GLF_IDENTITY(float(injectionSwitch.y), mix(float(_GLF_FUZZED((2.4 - 5.3))), float(float(injectionSwitch.y)), bool(true)))) - _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-5182.4765)), float(_GLF_IDENTITY(0.0, (0.0) / 1.0)), bool(true)))), bool(true))))))))), false || ((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), min(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-348.546), _GLF_FUZZED(9.9)), bvec2(false, false))), injectionSwitch)).y, mix(float(_GLF_FUZZED(-1451.6907)), _GLF_IDENTITY(float(injectionSwitch.y), (_GLF_IDENTITY(float(injectionSwitch.y), mix(float(_GLF_FUZZED((2.4 - 5.3))), float(float(injectionSwitch.y)), bool(true)))) - 0.0), bool(true))))))))) && true)), ! (! (_GLF_IDENTITY((_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-1451.6907)), _GLF_IDENTITY(float(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(float(injectionSwitch.y), mix(float(_GLF_FUZZED((_GLF_IDENTITY(2.4 - 5.3, min(_GLF_IDENTITY(2.4 - 5.3, max(2.4 - 5.3, 2.4 - 5.3)), 2.4 - 5.3))))), float(float(injectionSwitch.y)), bool(true)))), (true ? _GLF_IDENTITY((_GLF_IDENTITY(float(injectionSwitch.y), mix(float(_GLF_FUZZED((_GLF_IDENTITY(2.4 - 5.3, min(_GLF_IDENTITY(2.4 - 5.3, max(2.4 - 5.3, 2.4 - 5.3)), 2.4 - 5.3))))), float(float(injectionSwitch.y)), bool(true)))), clamp((_GLF_IDENTITY(float(injectionSwitch.y), mix(float(_GLF_FUZZED((_GLF_IDENTITY(2.4 - 5.3, min(_GLF_IDENTITY(2.4 - 5.3, max(2.4 - 5.3, 2.4 - 5.3)), 2.4 - 5.3))))), float(float(injectionSwitch.y)), bool(true)))), (_GLF_IDENTITY(float(injectionSwitch.y), mix(float(_GLF_FUZZED((_GLF_IDENTITY(2.4 - 5.3, min(_GLF_IDENTITY(2.4 - 5.3, max(2.4 - 5.3, 2.4 - 5.3)), 2.4 - 5.3))))), float(float(injectionSwitch.y)), bool(true)))), (_GLF_IDENTITY(float(injectionSwitch.y), mix(float(_GLF_FUZZED((_GLF_IDENTITY(2.4 - 5.3, min(_GLF_IDENTITY(2.4 - 5.3, max(2.4 - 5.3, 2.4 - 5.3)), 2.4 - 5.3))))), float(float(injectionSwitch.y)), bool(true)))))) : _GLF_FUZZED(7.2))), 0.0 + ((_GLF_IDENTITY(float(injectionSwitch.y), mix(_GLF_IDENTITY(float(_GLF_FUZZED((_GLF_IDENTITY(2.4 - 5.3, min(_GLF_IDENTITY(2.4 - 5.3, max(_GLF_IDENTITY(2.4 - 5.3, float(_GLF_IDENTITY(float(2.4 - 5.3), clamp(float(2.4 - 5.3), _GLF_IDENTITY(float(2.4 - 5.3), clamp(float(2.4 - 5.3), float(2.4 - 5.3), float(2.4 - 5.3))), float(2.4 - 5.3))))), 2.4 - 5.3)), 2.4 - 5.3))))), max(float(_GLF_FUZZED((_GLF_IDENTITY(2.4 - 5.3, min(_GLF_IDENTITY(2.4 - 5.3, max(_GLF_IDENTITY(2.4 - 5.3, float(_GLF_IDENTITY(float(2.4 - 5.3), clamp(float(2.4 - 5.3), _GLF_IDENTITY(float(2.4 - 5.3), clamp(float(2.4 - 5.3), float(2.4 - 5.3), float(2.4 - 5.3))), float(2.4 - 5.3))))), 2.4 - 5.3)), 2.4 - 5.3))))), _GLF_IDENTITY(float(_GLF_FUZZED((_GLF_IDENTITY(2.4 - 5.3, min(_GLF_IDENTITY(2.4 - 5.3, max(_GLF_IDENTITY(2.4 - 5.3, float(_GLF_IDENTITY(float(2.4 - 5.3), clamp(float(2.4 - 5.3), _GLF_IDENTITY(float(2.4 - 5.3), clamp(float(2.4 - 5.3), float(2.4 - 5.3), float(2.4 - 5.3))), float(2.4 - 5.3))))), 2.4 - 5.3)), 2.4 - 5.3))))), max(float(_GLF_FUZZED((_GLF_IDENTITY(2.4 - 5.3, min(_GLF_IDENTITY(2.4 - 5.3, max(_GLF_IDENTITY(2.4 - 5.3, float(_GLF_IDENTITY(float(2.4 - 5.3), clamp(float(2.4 - 5.3), _GLF_IDENTITY(float(2.4 - 5.3), clamp(float(2.4 - 5.3), float(2.4 - 5.3), float(2.4 - 5.3))), float(2.4 - 5.3))))), 2.4 - 5.3)), 2.4 - 5.3))))), float(_GLF_FUZZED((_GLF_IDENTITY(2.4 - 5.3, min(_GLF_IDENTITY(2.4 - 5.3, max(_GLF_IDENTITY(2.4 - 5.3, float(_GLF_IDENTITY(float(2.4 - 5.3), clamp(float(2.4 - 5.3), _GLF_IDENTITY(float(2.4 - 5.3), clamp(float(2.4 - 5.3), float(2.4 - 5.3), float(2.4 - 5.3))), float(2.4 - 5.3))))), 2.4 - 5.3)), 2.4 - 5.3))))))))), float(float(injectionSwitch.y)), bool(true)))))) - 0.0), bool(true)))))), (_GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(_GLF_FUZZED(-1451.6907), mix(float(_GLF_FUZZED(-1451.6907)), float(_GLF_FUZZED((6.1 / 9.4))), bool(false)))), _GLF_IDENTITY(float(injectionSwitch.y), (_GLF_IDENTITY(float(injectionSwitch.y), mix(float(_GLF_FUZZED((_GLF_IDENTITY(2.4 - 5.3, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 2.4 - 5.3 : _GLF_FUZZED(5.6)))))), float(float(injectionSwitch.y)), bool(true)))) - 0.0), bool(true))), ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-1451.6907)), _GLF_IDENTITY(float(injectionSwitch.y), (_GLF_IDENTITY(float(injectionSwitch.y), mix(float(_GLF_FUZZED((2.4 - 5.3))), float(float(injectionSwitch.y)), bool(true)))) - _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-5182.4765)), float(_GLF_IDENTITY(0.0, (0.0) / 1.0)), bool(true)))), bool(true))))))))), false || ((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), min(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-348.546), _GLF_FUZZED(9.9)), bvec2(false, false))), injectionSwitch)).y, mix(float(_GLF_FUZZED(-1451.6907)), _GLF_IDENTITY(float(injectionSwitch.y), (_GLF_IDENTITY(float(injectionSwitch.y), mix(float(_GLF_FUZZED((2.4 - 5.3))), float(float(injectionSwitch.y)), bool(true)))) - 0.0), bool(true))))))))) && true)), false || ((_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-1451.6907)), _GLF_IDENTITY(float(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(float(injectionSwitch.y), mix(float(_GLF_FUZZED((_GLF_IDENTITY(2.4 - 5.3, min(_GLF_IDENTITY(2.4 - 5.3, max(2.4 - 5.3, 2.4 - 5.3)), 2.4 - 5.3))))), float(float(injectionSwitch.y)), bool(true)))), (true ? _GLF_IDENTITY((_GLF_IDENTITY(float(injectionSwitch.y), mix(float(_GLF_FUZZED((_GLF_IDENTITY(2.4 - 5.3, min(_GLF_IDENTITY(2.4 - 5.3, max(2.4 - 5.3, 2.4 - 5.3)), 2.4 - 5.3))))), float(float(injectionSwitch.y)), bool(true)))), clamp((_GLF_IDENTITY(float(injectionSwitch.y), mix(float(_GLF_FUZZED((_GLF_IDENTITY(2.4 - 5.3, min(_GLF_IDENTITY(2.4 - 5.3, max(2.4 - 5.3, 2.4 - 5.3)), 2.4 - 5.3))))), float(float(injectionSwitch.y)), bool(true)))), (_GLF_IDENTITY(float(injectionSwitch.y), mix(float(_GLF_FUZZED((_GLF_IDENTITY(2.4 - 5.3, min(_GLF_IDENTITY(2.4 - 5.3, max(2.4 - 5.3, 2.4 - 5.3)), 2.4 - 5.3))))), float(float(injectionSwitch.y)), bool(true)))), (_GLF_IDENTITY(float(injectionSwitch.y), mix(float(_GLF_FUZZED((_GLF_IDENTITY(2.4 - 5.3, min(_GLF_IDENTITY(2.4 - 5.3, max(2.4 - 5.3, 2.4 - 5.3)), 2.4 - 5.3))))), float(float(injectionSwitch.y)), bool(true)))))) : _GLF_FUZZED(7.2))), 0.0 + ((_GLF_IDENTITY(float(injectionSwitch.y), mix(_GLF_IDENTITY(float(_GLF_FUZZED((_GLF_IDENTITY(2.4 - 5.3, min(_GLF_IDENTITY(2.4 - 5.3, max(_GLF_IDENTITY(2.4 - 5.3, float(_GLF_IDENTITY(float(2.4 - 5.3), clamp(float(2.4 - 5.3), _GLF_IDENTITY(float(2.4 - 5.3), clamp(float(2.4 - 5.3), float(2.4 - 5.3), float(2.4 - 5.3))), float(2.4 - 5.3))))), 2.4 - 5.3)), 2.4 - 5.3))))), max(float(_GLF_FUZZED((_GLF_IDENTITY(2.4 - 5.3, min(_GLF_IDENTITY(2.4 - 5.3, max(_GLF_IDENTITY(2.4 - 5.3, float(_GLF_IDENTITY(float(2.4 - 5.3), clamp(float(2.4 - 5.3), _GLF_IDENTITY(float(2.4 - 5.3), clamp(float(2.4 - 5.3), float(2.4 - 5.3), float(2.4 - 5.3))), float(2.4 - 5.3))))), 2.4 - 5.3)), 2.4 - 5.3))))), _GLF_IDENTITY(float(_GLF_FUZZED((_GLF_IDENTITY(2.4 - 5.3, min(_GLF_IDENTITY(2.4 - 5.3, max(_GLF_IDENTITY(2.4 - 5.3, float(_GLF_IDENTITY(float(2.4 - 5.3), clamp(float(2.4 - 5.3), _GLF_IDENTITY(float(2.4 - 5.3), clamp(float(2.4 - 5.3), float(2.4 - 5.3), float(2.4 - 5.3))), float(2.4 - 5.3))))), 2.4 - 5.3)), 2.4 - 5.3))))), max(float(_GLF_FUZZED((_GLF_IDENTITY(2.4 - 5.3, min(_GLF_IDENTITY(2.4 - 5.3, max(_GLF_IDENTITY(2.4 - 5.3, float(_GLF_IDENTITY(float(2.4 - 5.3), clamp(float(2.4 - 5.3), _GLF_IDENTITY(float(2.4 - 5.3), clamp(float(2.4 - 5.3), float(2.4 - 5.3), float(2.4 - 5.3))), float(2.4 - 5.3))))), 2.4 - 5.3)), 2.4 - 5.3))))), float(_GLF_FUZZED((_GLF_IDENTITY(2.4 - 5.3, min(_GLF_IDENTITY(2.4 - 5.3, max(_GLF_IDENTITY(2.4 - 5.3, float(_GLF_IDENTITY(float(2.4 - 5.3), clamp(float(2.4 - 5.3), _GLF_IDENTITY(float(2.4 - 5.3), clamp(float(2.4 - 5.3), float(2.4 - 5.3), float(2.4 - 5.3))), float(2.4 - 5.3))))), 2.4 - 5.3)), 2.4 - 5.3))))))))), float(float(injectionSwitch.y)), bool(true)))))) - 0.0), bool(true)))))), (_GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(_GLF_FUZZED(-1451.6907), mix(float(_GLF_FUZZED(-1451.6907)), float(_GLF_FUZZED((6.1 / 9.4))), bool(false)))), _GLF_IDENTITY(float(injectionSwitch.y), (_GLF_IDENTITY(float(injectionSwitch.y), mix(float(_GLF_FUZZED((_GLF_IDENTITY(2.4 - 5.3, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 2.4 - 5.3 : _GLF_FUZZED(5.6)))))), float(float(injectionSwitch.y)), bool(true)))) - 0.0), bool(true))), ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-1451.6907)), _GLF_IDENTITY(float(injectionSwitch.y), (_GLF_IDENTITY(float(injectionSwitch.y), mix(float(_GLF_FUZZED((2.4 - 5.3))), float(float(injectionSwitch.y)), bool(true)))) - _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-5182.4765)), float(_GLF_IDENTITY(0.0, (0.0) / 1.0)), bool(true)))), bool(true))))))))), false || ((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), min(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-348.546), _GLF_FUZZED(9.9)), bvec2(false, false))), injectionSwitch)).y, mix(float(_GLF_FUZZED(-1451.6907)), _GLF_IDENTITY(float(injectionSwitch.y), (_GLF_IDENTITY(float(injectionSwitch.y), mix(float(_GLF_FUZZED((2.4 - 5.3))), float(float(injectionSwitch.y)), bool(true)))) - 0.0), bool(true))))))))) && true))))))) && true)), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bool(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) || false, bool(bvec2((_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bool(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) || false, false))), (_GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bool(! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), round(length(normalize(1.0))), 0.0, 0.0, 1.0, 0.0, 1.0))).y)) || (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED((false ? 29.84 : -40.56))), float(injectionSwitch.y), bool(true))), _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0))))))))))) || false, bool(bvec2((_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)))), bool(bool(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) || false, false)))) && true))), (_GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), float(mat3x4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), mix(float(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), float(_GLF_FUZZED(-69.39)), bool(false))), 0.0, 0.0, log(1.0), sin(0.0), 0.0, 0.0, 1.0, cos(0.0), 1.0, _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), dot(vec2(0.0, 0.0), vec2(1.0, 1.0))), round(length(normalize(1.0)))))))) || _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-1451.6907)), _GLF_IDENTITY(float(injectionSwitch.y), (_GLF_IDENTITY(float(injectionSwitch.y), mix(float(_GLF_FUZZED((2.4 - 5.3))), float(float(injectionSwitch.y)), bool(true)))) - _GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-236.979) : _GLF_IDENTITY(0.0, min(0.0, 0.0))))), bool(true)))))), (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-1451.6907)), _GLF_IDENTITY(float(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), max(_GLF_IDENTITY((injectionSwitch), vec2(mat2((injectionSwitch), 0.0, 0.0))), (injectionSwitch))) * vec2(1.0, 1.0)).y), _GLF_IDENTITY((_GLF_IDENTITY(float(injectionSwitch.y), mix(float(_GLF_FUZZED((_GLF_IDENTITY(2.4 - 5.3, min(_GLF_IDENTITY(2.4 - 5.3, max(2.4 - 5.3, 2.4 - 5.3)), 2.4 - 5.3))))), float(float(injectionSwitch.y)), bool(true)))), 0.0 + ((_GLF_IDENTITY(float(injectionSwitch.y), mix(float(_GLF_FUZZED((_GLF_IDENTITY(2.4 - 5.3, min(_GLF_IDENTITY(2.4 - 5.3, max(2.4 - _GLF_IDENTITY(5.3, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(round(-69.43)) : 5.3)), 2.4 - 5.3)), 2.4 - 5.3))))), float(float(injectionSwitch.y)), bool(true)))))) - 0.0), bool(true)))))), (_GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-59.38), _GLF_FUZZED(6201.1181)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), injectionSwitch)).y, mix(float(_GLF_FUZZED(-1451.6907)), _GLF_IDENTITY(float(injectionSwitch.y), (_GLF_IDENTITY(float(injectionSwitch.y), mix(float(_GLF_FUZZED((2.4 - 5.3))), float(float(injectionSwitch.y)), bool(true)))) - 0.0), bool(true))), ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-1451.6907)), _GLF_IDENTITY(float(injectionSwitch.y), (_GLF_IDENTITY(float(injectionSwitch.y), mix(float(_GLF_FUZZED((2.4 - 5.3))), float(float(injectionSwitch.y)), bool(true)))) - _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-5182.4765)), float(_GLF_IDENTITY(0.0, (0.0) / 1.0)), bool(true)))), bool(true))))))))), false || ((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], (false ? _GLF_FUZZED(atan(radians(9758.0774))) : (injectionSwitch)[0])), (injectionSwitch)[1]), vec2(_GLF_FUZZED(-348.546), _GLF_FUZZED(9.9)), bvec2(false, false))), injectionSwitch)).y, mix(float(_GLF_FUZZED(-1451.6907)), _GLF_IDENTITY(_GLF_IDENTITY(float(injectionSwitch.y), (_GLF_IDENTITY(float(injectionSwitch.y), mix(float(_GLF_FUZZED((2.4 - 5.3))), float(float(injectionSwitch.y)), bool(true)))) - 0.0), float(mat4x3(_GLF_IDENTITY(_GLF_IDENTITY(float(injectionSwitch.y), (_GLF_IDENTITY(float(injectionSwitch.y), mix(float(_GLF_FUZZED((2.4 - 5.3))), float(float(injectionSwitch.y)), bool(true)))) - 0.0), (_GLF_IDENTITY(float(injectionSwitch.y), (_GLF_IDENTITY(float(injectionSwitch.y), mix(float(_GLF_FUZZED((2.4 - 5.3))), float(float(injectionSwitch.y)), bool(true)))) - 0.0)) / 1.0), 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, tan(0.0), 1.0))), bool(true))))))))) && true)) && true)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && true), (injectionSwitch.x > injectionSwitch.y)))))), bool(bool(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-4526.0576)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) || false, bool(bvec2((_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bool(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, false)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, false))))))) || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true)))))))) || false, false))))), true && ((_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))) || _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-1451.6907)), _GLF_IDENTITY(_GLF_IDENTITY(float(injectionSwitch.y), (_GLF_IDENTITY(float(injectionSwitch.y), mix(float(_GLF_FUZZED((2.4 - 5.3))), float(float(injectionSwitch.y)), bool(true)))) - _GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-236.979) : _GLF_IDENTITY(0.0, min(0.0, 0.0))))), clamp(_GLF_IDENTITY(float(injectionSwitch.y), (_GLF_IDENTITY(float(injectionSwitch.y), mix(float(_GLF_FUZZED((2.4 - 5.3))), float(float(injectionSwitch.y)), bool(true)))) - _GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-236.979) : _GLF_IDENTITY(0.0, min(0.0, 0.0))))), _GLF_IDENTITY(float(injectionSwitch.y), (_GLF_IDENTITY(float(injectionSwitch.y), mix(float(_GLF_FUZZED((2.4 - 5.3))), float(float(injectionSwitch.y)), bool(true)))) - _GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-236.979) : _GLF_IDENTITY(0.0, min(0.0, 0.0))))), _GLF_IDENTITY(float(injectionSwitch.y), (_GLF_IDENTITY(float(injectionSwitch.y), mix(float(_GLF_FUZZED((2.4 - 5.3))), float(float(injectionSwitch.y)), bool(true)))) - _GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-236.979) : _GLF_IDENTITY(0.0, min(0.0, 0.0))))))), bool(true)))))), (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-1451.6907)), _GLF_IDENTITY(float(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y), _GLF_IDENTITY((_GLF_IDENTITY(float(injectionSwitch.y), mix(float(_GLF_FUZZED((_GLF_IDENTITY(2.4 - 5.3, _GLF_IDENTITY(min(_GLF_IDENTITY(2.4 - 5.3, max(2.4 - 5.3, 2.4 - 5.3)), 2.4 - 5.3), min(_GLF_IDENTITY(min(_GLF_IDENTITY(2.4 - 5.3, max(2.4 - 5.3, 2.4 - 5.3)), 2.4 - 5.3), mix(float(_GLF_FUZZED(-722.539)), float(_GLF_IDENTITY(min(_GLF_IDENTITY(2.4 - 5.3, max(2.4 - 5.3, 2.4 - 5.3)), 2.4 - 5.3), max(min(_GLF_IDENTITY(2.4 - 5.3, max(2.4 - 5.3, 2.4 - 5.3)), 2.4 - 5.3), min(_GLF_IDENTITY(2.4 - 5.3, max(2.4 - 5.3, 2.4 - 5.3)), 2.4 - 5.3)))), bool(true))), min(_GLF_IDENTITY(2.4 - 5.3, max(2.4 - 5.3, 2.4 - 5.3)), 2.4 - 5.3))))))), float(float(injectionSwitch.y)), bool(true)))), 0.0 + ((_GLF_IDENTITY(float(injectionSwitch.y), mix(float(_GLF_FUZZED((_GLF_IDENTITY(2.4 - 5.3, min(_GLF_IDENTITY(2.4 - 5.3, max(2.4 - 5.3, 2.4 - 5.3)), 2.4 - 5.3))))), float(float(injectionSwitch.y)), bool(true)))))) - 0.0), bool(true)))))), (_GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)) : _GLF_FUZZED(59.71))), mix(float(_GLF_FUZZED(-1451.6907)), _GLF_IDENTITY(float(injectionSwitch.y), (_GLF_IDENTITY(float(injectionSwitch.y), mix(float(_GLF_FUZZED((2.4 - 5.3))), float(float(injectionSwitch.y)), bool(true)))) - 0.0), bool(true))), ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-1451.6907)), _GLF_IDENTITY(float(injectionSwitch.y), (_GLF_IDENTITY(float(injectionSwitch.y), mix(float(_GLF_FUZZED((2.4 - 5.3))), float(float(injectionSwitch.y)), bool(true)))) - _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-5182.4765)), float(_GLF_IDENTITY(0.0, (0.0) / 1.0)), bool(true)))), bool(true))))))))), false || ((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-348.546), _GLF_FUZZED(9.9)), bvec2(false, false))), injectionSwitch)).y, mix(float(_GLF_FUZZED(-1451.6907)), _GLF_IDENTITY(float(injectionSwitch.y), (_GLF_IDENTITY(float(injectionSwitch.y), mix(float(_GLF_FUZZED((2.4 - 5.3))), float(float(injectionSwitch.y)), bool(true)))) - 0.0), bool(true))))))))) && _GLF_IDENTITY(true, ! (! (true))))) && true)), _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bool(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) || false, bool(bvec2((_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))))), _GLF_IDENTITY(bool(bool(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), bool(bvec2(_GLF_IDENTITY(bool(bool(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), (bool(bool(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) || false), false))))) || false, false)))))))) || false)))))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y))), _GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-1275.4985)), vec2(_GLF_FUZZED(-662.077), (injectionSwitch)[1]), bvec2(false, true))).y)))) && true)), (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(mix(float(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-7.6)))), float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED((61.67)), max(_GLF_FUZZED((61.67)), _GLF_FUZZED((61.67)))), min(_GLF_FUZZED((61.67)), _GLF_FUZZED((61.67))))), bool(false)), float(mat2x3(mix(float(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-7.6)))), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED((61.67)), min(_GLF_FUZZED((61.67)), _GLF_IDENTITY(_GLF_FUZZED((61.67)), (false ? _GLF_FUZZED(814.724) : _GLF_FUZZED((61.67)))))), min(_GLF_FUZZED((61.67)), _GLF_FUZZED((61.67))))), (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))) ? _GLF_FUZZED(-0.6) : float(_GLF_IDENTITY(_GLF_FUZZED((61.67)), min(_GLF_FUZZED((61.67)), _GLF_FUZZED((61.67))))))), bool(false)), 0.0, sin(0.0), 1.0, 1.0, 1.0)))) > injectionSwitch.y)))) && true))) || false)), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(roundEven(-90.18)) : injectionSwitch.x)) > injectionSwitch.y), bool(bvec2((_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(roundEven(-90.18)) : _GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, sin(0.0), 1.0, 0.0, 1.0))).x)) > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y)))) && true, bool(bvec4((_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y)))) && true, false, false, false))))), (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_IDENTITY(_GLF_FUZZED(-7.6), max(_GLF_FUZZED(-7.6), _GLF_FUZZED(-7.6)))))), float(_GLF_IDENTITY(_GLF_FUZZED((61.67)), min(_GLF_IDENTITY(_GLF_FUZZED((61.67)), (_GLF_IDENTITY(_GLF_FUZZED((61.67)), (true ? _GLF_FUZZED((61.67)) : _GLF_FUZZED(9761.6943)))) * sqrt(_GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))))), _GLF_FUZZED((61.67))))), bool(false))) > injectionSwitch.y))), ! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-7.6)))), float(_GLF_IDENTITY(_GLF_FUZZED((61.67)), min(_GLF_FUZZED((61.67)), _GLF_FUZZED((61.67))))), bool(false))) > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).y)))), true && ((_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-7.6)))), float(_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY((61.67), min((61.67), (61.67)))), min(_GLF_FUZZED((61.67)), _GLF_FUZZED((61.67))))), bool(false))) > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).y)))))), bool(bvec4(! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-7.6)))), float(_GLF_IDENTITY(_GLF_FUZZED((61.67)), min(_GLF_FUZZED((61.67)), _GLF_FUZZED((61.67))))), bool(false))), (false ? _GLF_FUZZED(acosh(484.961)) : _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-7.6)))), float(_GLF_IDENTITY(_GLF_FUZZED((61.67)), min(_GLF_FUZZED((61.67)), _GLF_FUZZED((61.67))))), bool(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), (! (! (false))) || false)))))))))) > injectionSwitch.y)))), false, true, true)))))) && true))) || false))), bool(bvec2(! ((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(vec2(vec4(injectionSwitch, 0.0, 1.0)), (_GLF_IDENTITY(true, _GLF_IDENTITY(true, (true) || false) && (true)) ? vec2(vec4(injectionSwitch, 0.0, 1.0)) : _GLF_FUZZED(injectionSwitch))), _GLF_IDENTITY((_GLF_IDENTITY(vec2(vec4(injectionSwitch, 0.0, 1.0)), (vec2(vec4(injectionSwitch, 0.0, 1.0))) * mat2(1.0))) - vec2(0.0, 0.0), vec2(_GLF_IDENTITY(vec4((_GLF_IDENTITY(vec2(vec4(injectionSwitch, 0.0, 1.0)), (vec2(vec4(injectionSwitch, 0.0, 1.0))) * mat2(1.0))) - vec2(0.0, 0.0), 1.0, 0.0), (vec4((_GLF_IDENTITY(vec2(vec4(injectionSwitch, 0.0, 1.0)), (vec2(vec4(injectionSwitch, 0.0, 1.0))) * mat2(1.0))) - vec2(0.0, 0.0), 1.0, 0.0)) / vec4(1.0, 1.0, 1.0, 1.0)))))).y)))) && true)), (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), ! (! (injectionSwitch.x > injectionSwitch.y)))))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(true, true && (true)) ? injectionSwitch.x : _GLF_FUZZED(-7.6))), mix(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(true, true && (true)) ? injectionSwitch.x : _GLF_FUZZED(-7.6))), (true ? _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(true, true && (true)) ? injectionSwitch.x : _GLF_FUZZED(-7.6))) : _GLF_FUZZED(-991.853)))), float(_GLF_FUZZED(5.1)), bool(false)))), float(_GLF_IDENTITY(_GLF_FUZZED((61.67)), min(_GLF_FUZZED((61.67)), _GLF_FUZZED(_GLF_IDENTITY((61.67), clamp((61.67), (61.67), _GLF_IDENTITY((61.67), clamp((61.67), (61.67), (61.67))))))))), bool(false))) > injectionSwitch.y)))) && true)), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x2(injectionSwitch, 0.0, 0.0, sqrt(0.0), 1.0)), (vec2(mat3x2(injectionSwitch, 0.0, 0.0, sqrt(0.0), 1.0))) * mat2(1.0))).y, float(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x2(injectionSwitch, 0.0, 0.0, sqrt(0.0), 1.0)), (vec2(mat3x2(injectionSwitch, 0.0, 0.0, sqrt(0.0), 1.0))) * mat2(1.0))).y, sin(0.0), 1.0, 0.0, 0.0, 1.0), (mat3x2(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x2(injectionSwitch, 0.0, 0.0, sqrt(0.0), 1.0)), (vec2(mat3x2(injectionSwitch, 0.0, 0.0, sqrt(0.0), 1.0))) * mat2(1.0))).y, sin(0.0), 1.0, 0.0, 0.0, 1.0)) - mat3x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(_GLF_IDENTITY(float(_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) : _GLF_FUZZED(-7.6)))), (false ? _GLF_FUZZED((-16.85 * -1.8)) : _GLF_IDENTITY(float(_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) : _GLF_FUZZED(-7.6)))), (float(_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) : _GLF_FUZZED(-7.6))))) + 0.0))), float(_GLF_IDENTITY(_GLF_FUZZED((61.67)), min(_GLF_FUZZED((61.67)), _GLF_FUZZED((61.67))))), bool(false))) > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x, mix(_GLF_IDENTITY(float(_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((injectionSwitch.x) * 1.0, (_GLF_IDENTITY((injectionSwitch.x) * 1.0, max((injectionSwitch.x) * 1.0, (injectionSwitch.x) * 1.0))) * 1.0)) : _GLF_FUZZED(-7.6)))), (false ? _GLF_IDENTITY(_GLF_FUZZED((-16.85 * -1.8)), max(_GLF_FUZZED((-16.85 * -1.8)), _GLF_FUZZED((-16.85 * -1.8)))) : _GLF_IDENTITY(float(_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) : _GLF_FUZZED(-7.6)))), _GLF_IDENTITY((float(_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) : _GLF_FUZZED(-7.6))))) + 0.0, min(_GLF_IDENTITY((float(_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) : _GLF_FUZZED(-7.6))))) + 0.0, clamp((float(_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) : _GLF_FUZZED(-7.6))))) + 0.0, (float(_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) : _GLF_FUZZED(-7.6))))) + 0.0, (float(_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) : _GLF_FUZZED(-7.6))))) + 0.0)), (float(_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) : _GLF_FUZZED(-7.6))))) + 0.0))))), float(_GLF_IDENTITY(_GLF_FUZZED((61.67)), min(_GLF_FUZZED((61.67)), _GLF_FUZZED((61.67))))), bool(false))) > injectionSwitch.y)))))) && true)), ((_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(8.3)), float(injectionSwitch.y), bool(true))), float(mat2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, mix(float(_GLF_FUZZED(8.3)), float(injectionSwitch.y), bool(true))), 0.0, 0.0, 1.0)))))), (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, false)), ! (! (bool(bvec3(false, true, false)))))), (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-7.6)))), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED((61.67)), min(_GLF_FUZZED(_GLF_IDENTITY((61.67), 0.0 + ((61.67)))), _GLF_FUZZED((61.67))))), _GLF_IDENTITY(_GLF_IDENTITY(min(float(_GLF_IDENTITY(_GLF_FUZZED((61.67)), min(_GLF_FUZZED((61.67)), _GLF_FUZZED((61.67))))), float(_GLF_IDENTITY(_GLF_FUZZED((61.67)), min(_GLF_FUZZED((61.67)), _GLF_FUZZED((61.67)))))), (min(float(_GLF_IDENTITY(_GLF_FUZZED((61.67)), min(_GLF_FUZZED((61.67)), _GLF_FUZZED((61.67))))), float(_GLF_IDENTITY(_GLF_FUZZED((61.67)), min(_GLF_FUZZED((61.67)), _GLF_FUZZED((61.67))))))) - 0.0), float(mat3x2(_GLF_IDENTITY(min(float(_GLF_IDENTITY(_GLF_FUZZED((61.67)), min(_GLF_FUZZED((61.67)), _GLF_FUZZED((61.67))))), float(_GLF_IDENTITY(_GLF_FUZZED((61.67)), min(_GLF_FUZZED((61.67)), _GLF_FUZZED((61.67)))))), (min(float(_GLF_IDENTITY(_GLF_FUZZED((61.67)), min(_GLF_FUZZED((61.67)), _GLF_FUZZED((61.67))))), float(_GLF_IDENTITY(_GLF_FUZZED((61.67)), min(_GLF_FUZZED((61.67)), _GLF_FUZZED((61.67))))))) - 0.0), 0.0, 0.0, 1.0, 1.0, 1.0)))), bool(false))) > injectionSwitch.y)))) && true))) || false), false, false)), _GLF_IDENTITY(! (! (bool(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-7.6)))), float(_GLF_IDENTITY(_GLF_FUZZED((61.67)), min(_GLF_FUZZED(_GLF_IDENTITY((61.67), float(_GLF_IDENTITY(vec2((61.67), 1.0), min(vec2((61.67), 1.0), vec2((61.67), 1.0)))))), _GLF_FUZZED((61.67))))), bool(false))) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), injectionSwitch)), mix(vec2(_GLF_FUZZED((2.3 - 8.9)), _GLF_FUZZED(-8.5)), vec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), injectionSwitch)))[0], float(_GLF_IDENTITY(mat2x4((_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), injectionSwitch)))[0], 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0), transpose(transpose(mat2x4((_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), injectionSwitch)))[0], 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0)))))), (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), injectionSwitch)))[1]), bvec2(true, true))).y)))) && true)), ((_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-7.6)))), float(_GLF_IDENTITY(_GLF_FUZZED((61.67)), min(_GLF_FUZZED((_GLF_IDENTITY(61.67, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-7614.0236) : 61.67)))), _GLF_FUZZED((61.67))))), bool(false))) > injectionSwitch.y)))) && true))) || false), false, false)))), ! (! (! (! (bool(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-7.6)))), float(_GLF_IDENTITY(_GLF_FUZZED((61.67)), min(_GLF_FUZZED(_GLF_IDENTITY((61.67), float(_GLF_IDENTITY(vec2((61.67), 1.0), min(vec2((61.67), 1.0), vec2((_GLF_IDENTITY(61.67, (_GLF_IDENTITY(false, true && (false)) ? _GLF_FUZZED(asinh(18.25)) : 61.67))), 1.0)))))), _GLF_FUZZED((61.67))))), bool(false))) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), injectionSwitch)), mix(vec2(_GLF_FUZZED((2.3 - 8.9)), _GLF_FUZZED(-8.5)), vec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), injectionSwitch)))[0], float(_GLF_IDENTITY(mat2x4((_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), injectionSwitch)))[0], 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0), transpose(transpose(mat2x4((_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), injectionSwitch)))[0], 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, 0.0 + (1.0)), 1.0, 1.0)))))))), (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), injectionSwitch)))[1]), bvec2(true, true))).y)))) && true)), ((_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-7.6)))), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED((61.67)), min(_GLF_FUZZED((_GLF_IDENTITY(61.67, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-7614.0236) : 61.67)))), _GLF_FUZZED((61.67))))), max(float(_GLF_IDENTITY(_GLF_FUZZED((61.67)), min(_GLF_FUZZED((_GLF_IDENTITY(61.67, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-7614.0236) : 61.67)))), _GLF_FUZZED((61.67))))), float(_GLF_IDENTITY(_GLF_FUZZED((61.67)), min(_GLF_FUZZED((_GLF_IDENTITY(61.67, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-7614.0236) : 61.67)))), _GLF_FUZZED((61.67))))))), bool(false))) > injectionSwitch.y)))) && true))) || false), false, false)))))))))) || false))), true))))), bool(bvec4(! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-1275.4985)), vec2(_GLF_FUZZED(-662.077), (injectionSwitch)[1]), bvec2(false, true))).y)))) && true)), (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(mix(float(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-7.6)))), float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED((61.67)), max(_GLF_FUZZED((61.67)), _GLF_FUZZED((61.67)))), min(_GLF_FUZZED((61.67)), _GLF_FUZZED((61.67))))), bool(false)), float(mat2x3(mix(float(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-7.6)))), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED((61.67)), min(_GLF_FUZZED((61.67)), _GLF_IDENTITY(_GLF_FUZZED((61.67)), (false ? _GLF_FUZZED(814.724) : _GLF_FUZZED((61.67)))))), min(_GLF_FUZZED((61.67)), _GLF_FUZZED((61.67))))), (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))) ? _GLF_FUZZED(-0.6) : float(_GLF_IDENTITY(_GLF_FUZZED((61.67)), min(_GLF_FUZZED((61.67)), _GLF_FUZZED((61.67))))))), bool(false)), 0.0, sin(0.0), 1.0, 1.0, 1.0)))) > injectionSwitch.y)))) && true))) || false)), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(roundEven(-90.18)) : injectionSwitch.x)) > injectionSwitch.y), bool(bvec2((_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(roundEven(-90.18)) : _GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, sin(0.0), 1.0, 0.0, 1.0))).x)) > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y)))) && true, bool(bvec4((_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y)))) && true, false, false, false))))), (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_IDENTITY(_GLF_FUZZED(-7.6), max(_GLF_FUZZED(-7.6), _GLF_FUZZED(-7.6)))))), float(_GLF_IDENTITY(_GLF_FUZZED((61.67)), min(_GLF_IDENTITY(_GLF_FUZZED((61.67)), (_GLF_IDENTITY(_GLF_FUZZED((61.67)), (true ? _GLF_FUZZED((61.67)) : _GLF_FUZZED(9761.6943)))) * sqrt(_GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))))), _GLF_FUZZED((61.67))))), bool(false))) > injectionSwitch.y))), ! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-7.6)))), float(_GLF_IDENTITY(_GLF_FUZZED((61.67)), min(_GLF_FUZZED((61.67)), _GLF_FUZZED((61.67))))), bool(false))) > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).y)))), true && ((_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-7.6)))), float(_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY((61.67), min((61.67), (61.67)))), min(_GLF_FUZZED((61.67)), _GLF_FUZZED((61.67))))), bool(false))) > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).y)))))), bool(bvec4(! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-7.6)))), float(_GLF_IDENTITY(_GLF_FUZZED((61.67)), min(_GLF_FUZZED((61.67)), _GLF_FUZZED((61.67))))), bool(false))), (false ? _GLF_FUZZED(acosh(484.961)) : _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-7.6)))), float(_GLF_IDENTITY(_GLF_FUZZED((61.67)), min(_GLF_FUZZED((61.67)), _GLF_FUZZED((61.67))))), bool(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), (! (! (false))) || false)))))))))) > injectionSwitch.y)))), false, true, true)))))) && true))) || false))), bool(bvec2(! ((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(vec2(vec4(injectionSwitch, 0.0, 1.0)), (_GLF_IDENTITY(true, _GLF_IDENTITY(true, (true) || false) && (true)) ? vec2(vec4(injectionSwitch, 0.0, 1.0)) : _GLF_FUZZED(injectionSwitch))), _GLF_IDENTITY((_GLF_IDENTITY(vec2(vec4(injectionSwitch, 0.0, 1.0)), (vec2(vec4(injectionSwitch, 0.0, 1.0))) * mat2(1.0))) - vec2(0.0, 0.0), vec2(_GLF_IDENTITY(vec4((_GLF_IDENTITY(vec2(vec4(injectionSwitch, 0.0, 1.0)), (vec2(vec4(injectionSwitch, 0.0, 1.0))) * mat2(1.0))) - vec2(0.0, 0.0), 1.0, 0.0), (vec4((_GLF_IDENTITY(vec2(vec4(injectionSwitch, 0.0, 1.0)), (vec2(vec4(injectionSwitch, 0.0, 1.0))) * mat2(1.0))) - vec2(0.0, 0.0), 1.0, 0.0)) / vec4(1.0, 1.0, 1.0, 1.0)))))).y)))) && true)), (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), ! (! (injectionSwitch.x > injectionSwitch.y)))))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(true, true && (true)) ? injectionSwitch.x : _GLF_FUZZED(-7.6))), mix(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(true, true && (true)) ? injectionSwitch.x : _GLF_FUZZED(-7.6))), (true ? _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(true, true && (true)) ? injectionSwitch.x : _GLF_FUZZED(-7.6))) : _GLF_FUZZED(-991.853)))), float(_GLF_FUZZED(5.1)), bool(false)))), float(_GLF_IDENTITY(_GLF_FUZZED((61.67)), min(_GLF_FUZZED((61.67)), _GLF_FUZZED(_GLF_IDENTITY((61.67), clamp((61.67), (61.67), _GLF_IDENTITY((61.67), clamp((61.67), (61.67), (61.67))))))))), bool(false))) > injectionSwitch.y)))) && true)), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x2(injectionSwitch, 0.0, 0.0, sqrt(0.0), 1.0)), (vec2(mat3x2(injectionSwitch, 0.0, 0.0, sqrt(0.0), 1.0))) * mat2(1.0))).y, float(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x2(injectionSwitch, 0.0, 0.0, sqrt(0.0), 1.0)), (vec2(mat3x2(injectionSwitch, 0.0, 0.0, sqrt(0.0), 1.0))) * mat2(1.0))).y, sin(0.0), 1.0, 0.0, 0.0, 1.0), (mat3x2(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x2(injectionSwitch, 0.0, 0.0, sqrt(0.0), 1.0)), (vec2(mat3x2(injectionSwitch, 0.0, 0.0, sqrt(0.0), 1.0))) * mat2(1.0))).y, sin(0.0), 1.0, 0.0, 0.0, 1.0)) - mat3x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(_GLF_IDENTITY(float(_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) : _GLF_FUZZED(-7.6)))), (false ? _GLF_FUZZED((-16.85 * -1.8)) : _GLF_IDENTITY(float(_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) : _GLF_FUZZED(-7.6)))), (float(_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) : _GLF_FUZZED(-7.6))))) + 0.0))), float(_GLF_IDENTITY(_GLF_FUZZED((61.67)), min(_GLF_FUZZED((61.67)), _GLF_FUZZED((61.67))))), bool(false))) > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x, mix(_GLF_IDENTITY(float(_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((injectionSwitch.x) * 1.0, (_GLF_IDENTITY((injectionSwitch.x) * 1.0, max((injectionSwitch.x) * 1.0, (injectionSwitch.x) * 1.0))) * 1.0)) : _GLF_FUZZED(-7.6)))), (false ? _GLF_IDENTITY(_GLF_FUZZED((-16.85 * -1.8)), max(_GLF_FUZZED((-16.85 * -1.8)), _GLF_FUZZED((-16.85 * -1.8)))) : _GLF_IDENTITY(float(_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) : _GLF_FUZZED(-7.6)))), _GLF_IDENTITY((float(_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) : _GLF_FUZZED(-7.6))))) + 0.0, min(_GLF_IDENTITY((float(_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) : _GLF_FUZZED(-7.6))))) + 0.0, clamp((float(_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) : _GLF_FUZZED(-7.6))))) + 0.0, (float(_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) : _GLF_FUZZED(-7.6))))) + 0.0, (float(_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) : _GLF_FUZZED(-7.6))))) + 0.0)), (float(_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) : _GLF_FUZZED(-7.6))))) + 0.0))))), float(_GLF_IDENTITY(_GLF_FUZZED((61.67)), min(_GLF_FUZZED((61.67)), _GLF_FUZZED((61.67))))), bool(false))) > injectionSwitch.y)))))) && true)), ((_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(8.3)), float(injectionSwitch.y), bool(true))), float(mat2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, mix(float(_GLF_FUZZED(8.3)), float(injectionSwitch.y), bool(true))), 0.0, 0.0, 1.0)))))), (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, false)), ! (! (bool(bvec3(false, true, false)))))), (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-7.6)))), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED((61.67)), min(_GLF_FUZZED(_GLF_IDENTITY((61.67), 0.0 + ((61.67)))), _GLF_FUZZED((61.67))))), _GLF_IDENTITY(_GLF_IDENTITY(min(float(_GLF_IDENTITY(_GLF_FUZZED((61.67)), min(_GLF_FUZZED((61.67)), _GLF_FUZZED((61.67))))), float(_GLF_IDENTITY(_GLF_FUZZED((61.67)), min(_GLF_FUZZED((61.67)), _GLF_FUZZED((61.67)))))), (min(float(_GLF_IDENTITY(_GLF_FUZZED((61.67)), min(_GLF_FUZZED((61.67)), _GLF_FUZZED((61.67))))), float(_GLF_IDENTITY(_GLF_FUZZED((61.67)), min(_GLF_FUZZED((61.67)), _GLF_FUZZED((61.67))))))) - 0.0), float(mat3x2(_GLF_IDENTITY(min(float(_GLF_IDENTITY(_GLF_FUZZED((61.67)), min(_GLF_FUZZED((61.67)), _GLF_FUZZED((61.67))))), float(_GLF_IDENTITY(_GLF_FUZZED((61.67)), min(_GLF_FUZZED((61.67)), _GLF_FUZZED((61.67)))))), (min(float(_GLF_IDENTITY(_GLF_FUZZED((61.67)), min(_GLF_FUZZED((61.67)), _GLF_FUZZED((61.67))))), float(_GLF_IDENTITY(_GLF_FUZZED((61.67)), min(_GLF_FUZZED((61.67)), _GLF_FUZZED((61.67))))))) - 0.0), 0.0, 0.0, 1.0, 1.0, 1.0)))), bool(false))) > injectionSwitch.y)))) && true))) || false), false, false)), _GLF_IDENTITY(! (! (bool(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-7.6)))), float(_GLF_IDENTITY(_GLF_FUZZED((61.67)), min(_GLF_FUZZED(_GLF_IDENTITY((61.67), float(_GLF_IDENTITY(vec2((61.67), 1.0), min(vec2((61.67), 1.0), vec2((61.67), 1.0)))))), _GLF_FUZZED((61.67))))), bool(false))) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), injectionSwitch)), mix(vec2(_GLF_FUZZED((2.3 - 8.9)), _GLF_FUZZED(-8.5)), vec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), injectionSwitch)))[0], float(_GLF_IDENTITY(mat2x4((_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), injectionSwitch)))[0], 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0), transpose(transpose(mat2x4((_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), injectionSwitch)))[0], 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0)))))), (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), injectionSwitch)))[1]), bvec2(true, true))).y)))) && true)), ((_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-7.6)))), float(_GLF_IDENTITY(_GLF_FUZZED((61.67)), min(_GLF_FUZZED((_GLF_IDENTITY(61.67, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-7614.0236) : 61.67)))), _GLF_FUZZED((61.67))))), bool(false))) > injectionSwitch.y)))) && true))) || false), false, false)))), ! (! (! (! (bool(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-7.6)))), float(_GLF_IDENTITY(_GLF_FUZZED((61.67)), min(_GLF_FUZZED(_GLF_IDENTITY((61.67), float(_GLF_IDENTITY(vec2((61.67), 1.0), min(vec2((61.67), 1.0), vec2((_GLF_IDENTITY(61.67, (_GLF_IDENTITY(false, true && (false)) ? _GLF_FUZZED(asinh(18.25)) : 61.67))), 1.0)))))), _GLF_FUZZED((61.67))))), bool(false))) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), injectionSwitch)), mix(vec2(_GLF_FUZZED((2.3 - 8.9)), _GLF_FUZZED(-8.5)), vec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), injectionSwitch)))[0], float(_GLF_IDENTITY(mat2x4((_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), injectionSwitch)))[0], 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0), transpose(transpose(mat2x4((_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), injectionSwitch)))[0], 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, 0.0 + (1.0)), 1.0, 1.0)))))))), (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), injectionSwitch)))[1]), bvec2(true, true))).y)))) && true)), ((_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-7.6)))), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED((61.67)), min(_GLF_FUZZED((_GLF_IDENTITY(61.67, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-7614.0236) : 61.67)))), _GLF_FUZZED((61.67))))), max(float(_GLF_IDENTITY(_GLF_FUZZED((61.67)), min(_GLF_FUZZED((_GLF_IDENTITY(61.67, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-7614.0236) : 61.67)))), _GLF_FUZZED((61.67))))), float(_GLF_IDENTITY(_GLF_FUZZED((61.67)), min(_GLF_FUZZED((_GLF_IDENTITY(61.67, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-7614.0236) : 61.67)))), _GLF_FUZZED((61.67))))))), bool(false))) > injectionSwitch.y)))) && true))) || false), false, false)))))))))) || false))), true))))), true, false, false)))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           barrier();
          }
        }
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec4(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false, false))) && _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), bool(bool((false)))))))), (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec4(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false, false))) && (false)), (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec4(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false, false))) && (false)), (_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec4(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false, false))) && (false))) && true)) && true), (injectionSwitch.x > injectionSwitch.y))), ! _GLF_IDENTITY((! (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec4(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)), min(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x))))) * 1.0) < injectionSwitch.y)), true, false, false))) && (false)), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y))))), bool(bool((! (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec4(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)), min(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x))))) * 1.0) < injectionSwitch.y)), true, false, false))) && (false)), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y)))))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))))
      barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * vec2(1.0, 1.0), (true ? (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch))) * vec2(1.0, 1.0) : _GLF_FUZZED(vec2(3.1, -8.0))))).y))))
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), clamp((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0)))).y)), min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y), min(clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y), clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))), (_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y))) / 1.0), _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), false, false, true)), bool(bvec2(bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), false, false, _GLF_IDENTITY(true, (true) && true))), false)))))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) / 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))))) || false), true, false, false))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), false || (_GLF_DEAD(false)))) && true))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))) && true)))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), bvec3(bvec3(bvec3(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))), ! (! (bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), bvec3(bvec3(bvec3(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))))))) && true))
        barrier();
      }
     else
      {
      }
    }
  }
 uint subgroup_size = 16;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], max((injectionSwitch)[1], (injectionSwitch)[1]))), vec2(_GLF_FUZZED(-935.818), _GLF_FUZZED(vec2(-7.5, 313.136).y)), bvec2(false, false))).y))))
        {
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), bool(_GLF_IDENTITY(bvec3((false), true, true), bvec3(bvec4(bvec3((false), true, true), true)))))))))
  barrier();
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec2(injectionSwitch.x < injectionSwitch.y, true))))))) && (false))))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(false, (false) && true) || (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))))), false || ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       else
        {
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), false || (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), true && (_GLF_WRAPPED_IF_FALSE(false))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
            {
            }
           else
            {
             barrier();
            }
          }
        }
      }
     for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) | _GLF_IDENTITY((0), min((0), _GLF_IDENTITY((0), (1 ^ 1) + ((0)))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < _GLF_IDENTITY(1, 0 | _GLF_IDENTITY((1), ~ (~ ((1))))), (_injected_loop_counter < _GLF_IDENTITY(1, 0 | (1))) && true)); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))[0], _GLF_IDENTITY(injectionSwitch[1], min(injectionSwitch[1], injectionSwitch[1])))), min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat4(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch), (vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)) * mat2(1.0))), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0))))).x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))[0], _GLF_IDENTITY(injectionSwitch[1], min(injectionSwitch[1], injectionSwitch[1])))), min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat4(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch), (vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)) * mat2(1.0))), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0))))).x > injectionSwitch.y)))))))
          barrier();
         do
          {
           do
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                    }
                   else
                    {
                     barrier();
                    }
                  }
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     barrier();
                    }
                  }
                 barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), false, true, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y)))), _GLF_IDENTITY((bool(bvec4(_GLF_DEAD(false), false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true, false || (_GLF_IDENTITY((bool(bvec4(_GLF_DEAD(false), false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true, (_GLF_IDENTITY((bool(bvec4(_GLF_DEAD(false), false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true, true && ((bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))), _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false))))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true))) || false))))))
                barrier();
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                  {
                   barrier();
                  }
                }
               barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), max(int(2), _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(clamp(int(2), int(2), int(2)), ~ (~ (clamp(int(2), int(2), int(2))))), (false ? _GLF_FUZZED(findMSB(-78581)) : _GLF_IDENTITY(clamp(int(2), int(2), int(2)), ~ (~ (clamp(int(2), int(2), int(2)))))))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - tan(0.0))))); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), (_GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), false || ((false))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false, true, false)))))
                barrier();
               barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), _GLF_IDENTITY(false || (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), bool(bvec4(_GLF_IDENTITY(false, (false) && true), true, true, true)))), (false || (_GLF_IDENTITY(false, (false) && true))) && true))), true && (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), _GLF_IDENTITY(false || (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), bool(bvec4(_GLF_IDENTITY(false, (false) && true), true, true, true)))), (false || (_GLF_IDENTITY(false, (false) && true))) && true))))))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), false || (false))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY(false || (false), ! (! (false || (false))))))) || false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               barrier();
              }
             else
              {
              }
            }
           barrier();
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
        barrier();
       do
        {
         do
          {
           barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false)))));
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(12.57), _GLF_FUZZED(-7.8)), _GLF_IDENTITY(bvec2(false, false), bvec2(bvec3(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec3(bvec2(false, false), true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))).y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((_GLF_IDENTITY(injectionSwitch, vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)), length(0.0), _GLF_IDENTITY(dot(vec2(0.0, _GLF_ONE(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-533.656)), float(1.0), bool(true))), injectionSwitch.y)), vec2(0.0, 1.0)), dot(vec2(0.0, _GLF_ONE(1.0, injectionSwitch.y)), vec2(0.0, 1.0))), 0.0, abs(1.0), 1.0, 1.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)), dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0))), 0.0, 0.0, 0.0))))[0], (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))[_GLF_IDENTITY(1, (1) | (1))]), vec2(_GLF_FUZZED(12.57), _GLF_FUZZED(-7.8)), bvec2(false, false))).y))) || false)))
      barrier();
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x)), false || (_injected_loop_counter != int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], (true ? injectionSwitch[0] : _GLF_FUZZED(-118.567))), injectionSwitch[1])).x, injectionSwitch.x))))))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)) || false)))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true)))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _GLF_IDENTITY(_injected_loop_counter ++, ~ (~ (_injected_loop_counter ++))))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) || false))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
        {
         barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (_GLF_IDENTITY(! (false), true && (! (false))))))), ! (! (false)))))
          barrier();
        }
      }
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  barrier();
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch.x, float(mat3x2(injectionSwitch.x, 1.0, 0.0, 0.0, 0.0, 0.0))) : _GLF_FUZZED(301.420))) > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))))))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         do
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               barrier();
              }
            }
           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           if(_GLF_DEAD(false))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, true, true))))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           barrier();
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & 47951)); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat4x3(injectionSwitch, exp(0.0), exp(0.0), 0.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), 0.0)), dot(vec3(0.0, 0.0, 1.0), vec3(1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), 0.0))), determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0)), 0.0, 1.0, 0.0, 0.0), (mat4x3(injectionSwitch, exp(0.0), exp(0.0), 0.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), 0.0)), dot(vec3(0.0, 0.0, 1.0), vec3(1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), 0.0))), determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0)), 0.0, 1.0, 0.0, 0.0)) * mat4(1.0))), (vec2(_GLF_IDENTITY(mat4x3(injectionSwitch, exp(0.0), exp(0.0), 0.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), 0.0)), dot(vec3(0.0, 0.0, 1.0), vec3(1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), 0.0))), determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0)), 0.0, 1.0, 0.0, 0.0), (mat4x3(injectionSwitch, exp(0.0), exp(0.0), 0.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), 0.0)), dot(vec3(0.0, 0.0, 1.0), vec3(1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), 0.0))), determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0)), 0.0, 1.0, 0.0, 0.0)) * mat4(1.0)))) * mat2(1.0))).y))))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY((_injected_loop_counter) | (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (true ? _injected_loop_counter : _GLF_FUZZED(_injected_loop_counter))), min(_injected_loop_counter, _injected_loop_counter))), ((_injected_loop_counter) | (_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)))) + (0 << _GLF_IDENTITY(int(0), int(0))))) > _GLF_IDENTITY(0, (0) | (0))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID.x, ~ (~ (gl_WorkGroupID.x)));
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _GLF_IDENTITY(_injected_loop_counter ++, ~ (~ (_injected_loop_counter ++))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, (injectionSwitch.x > injectionSwitch.y) && true)))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 uint virtual_gid = _GLF_IDENTITY(workgroup_base, ~ _GLF_IDENTITY((_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base))), max((_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base))), (_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base))))), clamp(_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base))), (_GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base))), clamp((_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base))), (_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base))), (_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)))))) ^ (1u ^ 1u)), (_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base))), (_GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base))), clamp((_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base))), (_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base))), (_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)))))) ^ (1u ^ 1u)), min(~ _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base))), (_GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base))), clamp((_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base))), (_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base))), (_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)))))) ^ (1u ^ 1u)), ~ _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base))), (_GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base))), clamp((_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base))), (_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base))), (_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)))))) ^ (1u ^ 1u))))) | (_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base))), (_GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base))), clamp((_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base))), (_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base))), (_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)))))) ^ (1u ^ 1u)), min(~ _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base))), (_GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base))), clamp((_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base))), (_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base))), (_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)))))) ^ (1u ^ 1u)), ~ _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base))), (_GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base))), clamp((_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base))), (_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base))), (_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)))))) ^ (1u ^ 1u)))))), ~ (_GLF_IDENTITY(workgroup_base, max(_GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)), workgroup_base))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, max(workgroup_base, _GLF_IDENTITY(workgroup_base, 0u + (workgroup_base)))), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)), 0u, 0u), _GLF_IDENTITY((uvec3(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(max(workgroup_base, workgroup_base), 0u ^ (_GLF_IDENTITY(max(workgroup_base, workgroup_base), min(max(workgroup_base, workgroup_base), max(workgroup_base, workgroup_base)))))), 0u, 0u)), ((uvec3(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)), 0u, 0u))) - uvec3(0u, 0u, 0u)) << uvec3(0u, 0u, 0u))), _GLF_IDENTITY((uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)), 0u, 0u), (uvec3(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)), 0u, 0u)) << uvec3(0u, 0u, 0u)))) | 0u, 1u * ((uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)), 0u, 0u), (uvec3(_GLF_IDENTITY(workgroup_base, max(workgroup_base, _GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, workgroup_base)))), 0u, 0u)) << uvec3(0u, 0u, 0u)))) | 0u)))))))), ~ (~ ((_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base))), max((_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base))), (_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base))))), clamp(~ _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base))), min((_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base))), (_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base))))), (_GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base))), clamp((_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base))), (_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base))), (_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)))))) ^ (1u ^ 1u)), ~ (_GLF_IDENTITY(workgroup_base, max(_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(min(_GLF_IDENTITY(workgroup_base, (workgroup_base) << 0u), _GLF_IDENTITY(workgroup_base, min(workgroup_base, _GLF_IDENTITY(workgroup_base, (workgroup_base) << 0u)))), clamp(_GLF_IDENTITY(min(_GLF_IDENTITY(workgroup_base, (workgroup_base) << 0u), _GLF_IDENTITY(workgroup_base, min(workgroup_base, _GLF_IDENTITY(workgroup_base, (workgroup_base) << 0u)))), (min(_GLF_IDENTITY(workgroup_base, (workgroup_base) << 0u), _GLF_IDENTITY(workgroup_base, min(workgroup_base, _GLF_IDENTITY(workgroup_base, (workgroup_base) << 0u))))) ^ 0u), min(_GLF_IDENTITY(workgroup_base, (workgroup_base) << 0u), _GLF_IDENTITY(workgroup_base, min(workgroup_base, _GLF_IDENTITY(workgroup_base, (workgroup_base) << 0u)))), min(_GLF_IDENTITY(workgroup_base, (workgroup_base) << 0u), _GLF_IDENTITY(workgroup_base, min(workgroup_base, _GLF_IDENTITY(workgroup_base, (workgroup_base) << 0u)))))))) | (workgroup_base)), workgroup_base))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, max(workgroup_base, _GLF_IDENTITY(workgroup_base, 0u + (workgroup_base)))), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)), 0u, 0u), _GLF_IDENTITY((uvec3(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)), 0u, 0u)), ((uvec3(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)), 0u, 0u))) - uvec3(0u, 0u, 0u)) << uvec3(0u, 0u, 0u))), (uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)), 0u, 0u), (uvec3(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, max(_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, workgroup_base)), workgroup_base)), max(workgroup_base, workgroup_base)), 0u, 0u)) << uvec3(0u, 0u, 0u)))) | 0u)))))))))) + subgroup_id * subgroup_size + subgroup_local_id;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
  }
 do
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y))));
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             barrier();
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                  {
                   barrier();
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
             barrier();
            }
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false))), true && (_GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))))))
            barrier();
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true, false))))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             do
              {
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec3(bvec3(false, false, true))))), (bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec3(bvec3(false, false, true)))))) || false))), (_GLF_DEAD(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(0, _GLF_IDENTITY(int(int(0)), 0 ^ (int(int(0))))) >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = (int(_GLF_ONE(1.0, injectionSwitch.y)) & 1); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, bool(_GLF_IDENTITY(bvec3(_injected_loop_counter > 0, false, true), bvec3(bvec4(bvec3(_injected_loop_counter > 0, false, true), false)))))); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) + 0))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                }
              }
            }
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         do
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_IDENTITY(false, ! (! (false))))))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y)) && true)))))))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                {
                 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter --)
                  {
                   barrier();
                  }
                }
              }
             barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (! ((injectionSwitch.x < injectionSwitch.y)))))))))
            {
             if(_GLF_DEAD(false))
              barrier();
             do
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(6, _GLF_IDENTITY(int(_GLF_IDENTITY(int(_GLF_IDENTITY(6, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(6, 1, 0), (ivec3(6, 1, 0)) - ivec3(0, 0, 0))), ~ (~ (int(_GLF_IDENTITY(ivec3(6, 1, 0), (ivec3(6, 1, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) | (0))) ^ (-74392 & 0)))) - ivec3(0, 0, 0)))))))), int(ivec2(_GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6))), (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), max(_GLF_IDENTITY(int(0), int(0)), _GLF_IDENTITY(int(0), int(0))))) | (_GLF_IDENTITY(int(0), int(0))))) / 1)))))), _GLF_IDENTITY(min(_GLF_IDENTITY(int(_GLF_IDENTITY(int(6), int(ivec2(_GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6))), (0 >> _GLF_IDENTITY(int(0), int(0))))))), ~ (~ (_GLF_IDENTITY(int(_GLF_IDENTITY(int(6), int(ivec2(_GLF_IDENTITY(int(6), clamp(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(ivec2(int(6), (1 | 1))), min(_GLF_IDENTITY(int(ivec2(int(6), (1 | 1))), (int(ivec2(int(6), (1 | 1)))) >> 0), int(ivec2(int(6), (1 | 1)))))), int(6), int(6))), (0 >> _GLF_IDENTITY(int(0), int(0))))))), 0 | (int(_GLF_IDENTITY(int(6), int(ivec2(_GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6))), (0 >> _GLF_IDENTITY(int(0), int(0)))))))))))), int(_GLF_IDENTITY(int(6), int(ivec2(_GLF_IDENTITY(int(6), clamp(_GLF_IDENTITY(int(6), (int(6)) - 0), _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(ivec2(int(6), 1), (ivec2(int(6), 1)) | (ivec2(int(6), 1))))), int(6))), (0 >> _GLF_IDENTITY(int(0), int(0)))))))), min(min(int(_GLF_IDENTITY(int(6), int(ivec2(_GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6))), (0 >> _GLF_IDENTITY(int(0), int(0))))))), int(_GLF_IDENTITY(int(6), int(ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(6, 0 | (6))), _GLF_IDENTITY(clamp(int(6), int(6), int(6)), max(_GLF_IDENTITY(clamp(int(6), int(6), int(6)), min(clamp(int(6), int(6), int(6)), _GLF_IDENTITY(clamp(int(6), int(6), int(6)), (clamp(int(6), int(6), int(6))) | (_GLF_IDENTITY(clamp(int(6), int(6), int(6)), (clamp(int(6), int(6), int(6))) >> 0))))), clamp(int(6), int(6), int(6))))), (0 >> _GLF_IDENTITY(int(0), int(0)))))))), _GLF_IDENTITY(_GLF_IDENTITY(min(int(_GLF_IDENTITY(int(6), int(ivec2(_GLF_IDENTITY(int(6), clamp(int(6), int(6), int(_GLF_IDENTITY(6, ~ (_GLF_IDENTITY(~ (6), int(ivec3(~ (6), 0, 1)))))))), (0 >> _GLF_IDENTITY(int(0), int(0))))))), int(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(ivec2(_GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6))), (0 >> _GLF_IDENTITY(int(0), int(0)))))), (0 & -10233) | (_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(ivec2(_GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6))), (0 >> _GLF_IDENTITY(int(0), int(0)))))), 0 + (_GLF_IDENTITY(int(6), int(ivec2(_GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6))), (0 >> _GLF_IDENTITY(int(0), int(0)))))))))))), (min(int(_GLF_IDENTITY(int(6), int(ivec2(_GLF_IDENTITY(int(6), clamp(int(6), int(6), int(_GLF_IDENTITY(6, ~ (_GLF_IDENTITY(~ (6), int(ivec3(~ (6), 0, 1)))))))), (0 >> _GLF_IDENTITY(int(0), int(0))))))), int(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(ivec2(_GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6))), (0 >> _GLF_IDENTITY(int(0), int(0)))))), (0 & -10233) | (_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(ivec2(_GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6))), (0 >> _GLF_IDENTITY(int(0), int(0)))))), 0 + (_GLF_IDENTITY(int(6), int(ivec2(_GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6))), (0 >> _GLF_IDENTITY(int(0), int(0))))))))))))) | 0), 0 + (min(int(_GLF_IDENTITY(int(6), int(ivec2(_GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6))), (_GLF_IDENTITY(0, (0) / ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))) >> _GLF_IDENTITY(int(0), int(0))))))), int(_GLF_IDENTITY(int(6), int(ivec2(_GLF_IDENTITY(int(6), clamp(int(6), _GLF_IDENTITY(int(6), max(_GLF_IDENTITY(int(6), (false ? _GLF_FUZZED(_injected_loop_counter) : int(6))), _GLF_IDENTITY(int(6), (true ? int(6) : _GLF_FUZZED(-56421))))), int(6))), (0 >> _GLF_IDENTITY(int(0), int(0)))))))))))))), (_GLF_IDENTITY(6, _GLF_IDENTITY(int(_GLF_IDENTITY(int(_GLF_IDENTITY(6, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(6, 1, 0), (ivec3(6, 1, 0)) - ivec3(0, 0, 0))), ~ (~ (int(_GLF_IDENTITY(ivec3(6, 1, 0), (ivec3(6, 1, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) | (0))) ^ (-74392 & 0)))) - ivec3(0, 0, 0)))))))), int(ivec2(_GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6))), (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), max(_GLF_IDENTITY(int(0), int(0)), _GLF_IDENTITY(int(0), int(0))))) | (_GLF_IDENTITY(int(0), int(0))))) / 1)))))), _GLF_IDENTITY(min(_GLF_IDENTITY(int(_GLF_IDENTITY(int(6), int(ivec2(_GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6))), (0 >> _GLF_IDENTITY(int(0), int(0))))))), ~ (~ (_GLF_IDENTITY(int(_GLF_IDENTITY(int(6), int(ivec2(_GLF_IDENTITY(int(6), clamp(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(ivec2(int(6), (1 | 1))), min(_GLF_IDENTITY(int(ivec2(int(6), (1 | 1))), (int(ivec2(int(6), (1 | 1)))) >> 0), int(ivec2(int(6), (1 | 1)))))), int(6), int(6))), (0 >> _GLF_IDENTITY(int(0), int(0))))))), 0 | (int(_GLF_IDENTITY(int(6), int(ivec2(_GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6))), (0 >> _GLF_IDENTITY(int(0), int(0)))))))))))), int(_GLF_IDENTITY(int(6), int(ivec2(_GLF_IDENTITY(int(6), clamp(_GLF_IDENTITY(int(6), (int(6)) - 0), _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(ivec2(int(6), 1), (ivec2(int(6), 1)) | (ivec2(int(6), 1))))), int(6))), (0 >> _GLF_IDENTITY(int(0), int(0)))))))), min(min(int(_GLF_IDENTITY(int(6), int(ivec2(_GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6))), (0 >> _GLF_IDENTITY(int(0), int(0))))))), int(_GLF_IDENTITY(int(6), int(ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(6, 0 | (6))), _GLF_IDENTITY(clamp(int(6), int(6), int(6)), max(_GLF_IDENTITY(clamp(int(6), int(6), int(6)), min(clamp(int(6), int(6), int(6)), _GLF_IDENTITY(clamp(int(6), int(6), int(6)), (clamp(int(6), int(6), int(6))) | (_GLF_IDENTITY(clamp(int(6), int(6), int(6)), (clamp(int(6), int(6), int(6))) >> 0))))), clamp(int(6), int(6), int(6))))), (0 >> _GLF_IDENTITY(int(0), int(0)))))))), _GLF_IDENTITY(_GLF_IDENTITY(min(int(_GLF_IDENTITY(int(6), int(ivec2(_GLF_IDENTITY(int(6), clamp(int(6), int(6), int(_GLF_IDENTITY(6, ~ (_GLF_IDENTITY(~ (6), int(ivec3(~ (6), 0, 1)))))))), (0 >> _GLF_IDENTITY(int(0), int(0))))))), int(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(ivec2(_GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6))), (0 >> _GLF_IDENTITY(int(0), int(0)))))), (0 & -10233) | (_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(ivec2(_GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6))), (0 >> _GLF_IDENTITY(int(0), int(0)))))), 0 + (_GLF_IDENTITY(int(6), int(ivec2(_GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6))), (0 >> _GLF_IDENTITY(int(0), int(0)))))))))))), (min(int(_GLF_IDENTITY(int(6), int(ivec2(_GLF_IDENTITY(int(6), clamp(int(6), int(6), int(_GLF_IDENTITY(6, ~ (_GLF_IDENTITY(~ (6), int(ivec3(~ (6), 0, 1)))))))), (0 >> _GLF_IDENTITY(int(0), int(0))))))), int(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(ivec2(_GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6))), (0 >> _GLF_IDENTITY(int(0), int(0)))))), (0 & -10233) | (_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(ivec2(_GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6))), (0 >> _GLF_IDENTITY(int(0), int(0)))))), 0 + (_GLF_IDENTITY(int(6), int(ivec2(_GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6))), (0 >> _GLF_IDENTITY(int(0), int(0))))))))))))) | 0), 0 + (min(int(_GLF_IDENTITY(int(6), int(ivec2(_GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6))), (_GLF_IDENTITY(0, (0) / ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))) >> _GLF_IDENTITY(int(0), int(0))))))), int(_GLF_IDENTITY(int(6), int(ivec2(_GLF_IDENTITY(int(6), clamp(int(6), _GLF_IDENTITY(int(6), max(_GLF_IDENTITY(int(6), (false ? _GLF_FUZZED(_injected_loop_counter) : int(6))), _GLF_IDENTITY(int(6), (true ? int(6) : _GLF_FUZZED(-56421))))), int(6))), (0 >> _GLF_IDENTITY(int(0), int(0))))))))))))))) | (_GLF_IDENTITY(6, _GLF_IDENTITY(int(_GLF_IDENTITY(int(_GLF_IDENTITY(6, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(6, 1, 0), (ivec3(6, 1, 0)) - ivec3(0, 0, 0))), ~ (~ (int(_GLF_IDENTITY(ivec3(6, 1, 0), (ivec3(6, 1, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) | (0))) ^ (-74392 & 0)))) - ivec3(0, 0, 0)))))))), int(ivec2(_GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6))), (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), max(_GLF_IDENTITY(int(0), int(0)), _GLF_IDENTITY(int(0), int(0))))) | (_GLF_IDENTITY(int(0), int(0))))) / 1)))))), _GLF_IDENTITY(min(_GLF_IDENTITY(int(_GLF_IDENTITY(int(6), int(ivec2(_GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6))), (0 >> _GLF_IDENTITY(int(0), int(0))))))), ~ (~ (_GLF_IDENTITY(int(_GLF_IDENTITY(int(6), int(ivec2(_GLF_IDENTITY(int(6), clamp(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(ivec2(int(6), (1 | 1))), min(_GLF_IDENTITY(int(ivec2(int(6), (1 | 1))), (int(ivec2(int(6), (1 | 1)))) >> 0), int(ivec2(int(6), (1 | 1)))))), int(6), int(6))), (0 >> _GLF_IDENTITY(int(0), int(0))))))), 0 | (int(_GLF_IDENTITY(int(6), int(ivec2(_GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6))), (0 >> _GLF_IDENTITY(int(0), int(0)))))))))))), int(_GLF_IDENTITY(int(6), int(ivec2(_GLF_IDENTITY(int(6), clamp(_GLF_IDENTITY(int(6), (int(6)) - 0), _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(ivec2(int(6), 1), (ivec2(int(6), 1)) | (ivec2(int(6), 1))))), int(6))), (0 >> _GLF_IDENTITY(int(0), int(0)))))))), min(min(int(_GLF_IDENTITY(int(6), int(ivec2(_GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6))), (0 >> _GLF_IDENTITY(int(0), int(0))))))), int(_GLF_IDENTITY(int(6), int(ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(6, 0 | (6))), _GLF_IDENTITY(clamp(int(6), int(6), int(6)), max(_GLF_IDENTITY(clamp(int(6), int(6), int(6)), min(clamp(int(6), int(6), int(6)), _GLF_IDENTITY(clamp(int(6), int(6), int(6)), (clamp(int(6), int(6), int(6))) | (_GLF_IDENTITY(clamp(int(6), int(6), int(6)), (clamp(int(6), int(6), int(6))) >> 0))))), clamp(int(6), int(6), int(6))))), (0 >> _GLF_IDENTITY(int(0), int(0)))))))), _GLF_IDENTITY(_GLF_IDENTITY(min(int(_GLF_IDENTITY(int(6), int(ivec2(_GLF_IDENTITY(int(6), clamp(int(6), int(6), int(_GLF_IDENTITY(6, ~ (_GLF_IDENTITY(~ (6), int(ivec3(~ (6), 0, 1)))))))), (0 >> _GLF_IDENTITY(int(0), int(0))))))), int(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(ivec2(_GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6))), (0 >> _GLF_IDENTITY(int(0), int(0)))))), (0 & -10233) | (_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(ivec2(_GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6))), (0 >> _GLF_IDENTITY(int(0), int(0)))))), 0 + (_GLF_IDENTITY(int(6), int(ivec2(_GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6))), (0 >> _GLF_IDENTITY(int(0), int(0)))))))))))), (min(int(_GLF_IDENTITY(int(6), int(ivec2(_GLF_IDENTITY(int(6), clamp(int(6), int(6), int(_GLF_IDENTITY(6, ~ (_GLF_IDENTITY(~ (6), int(ivec3(~ (6), 0, 1)))))))), (0 >> _GLF_IDENTITY(int(0), int(0))))))), int(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(ivec2(_GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6))), (0 >> _GLF_IDENTITY(int(0), int(0)))))), (0 & -10233) | (_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(ivec2(_GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6))), (0 >> _GLF_IDENTITY(int(0), int(0)))))), 0 + (_GLF_IDENTITY(int(6), int(ivec2(_GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6))), (0 >> _GLF_IDENTITY(int(0), int(0))))))))))))) | 0), 0 + (min(int(_GLF_IDENTITY(int(6), int(ivec2(_GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6))), (_GLF_IDENTITY(0, (0) / ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))) >> _GLF_IDENTITY(int(0), int(0))))))), int(_GLF_IDENTITY(int(6), int(ivec2(_GLF_IDENTITY(int(6), clamp(int(6), _GLF_IDENTITY(int(6), max(_GLF_IDENTITY(int(6), (false ? _GLF_FUZZED(_injected_loop_counter) : int(6))), _GLF_IDENTITY(int(6), (true ? int(6) : _GLF_FUZZED(-56421))))), int(6))), (0 >> _GLF_IDENTITY(int(0), int(0))))))))))))))))), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), int(ivec4(_GLF_IDENTITY(int(6), (int(6)) | _GLF_IDENTITY((int(6)), _GLF_IDENTITY((_GLF_IDENTITY((int(6)), ((int(6))) * 1)) * int(_GLF_ONE(1.0, injectionSwitch.y)), (_GLF_IDENTITY((_GLF_IDENTITY((int(6)), ((int(_GLF_IDENTITY(6, (0 ^ 1) * (6))))) * 1)) * int(_GLF_ONE(1.0, injectionSwitch.y)), ((_GLF_IDENTITY((int(6)), ((int(6))) * 1)) * int(_GLF_ONE(1.0, injectionSwitch.y))) | ((_GLF_IDENTITY((int(6)), ((int(_GLF_IDENTITY(6, 0 + (6))))) * 1)) * int(_GLF_ONE(1.0, injectionSwitch.y))))) | (_GLF_IDENTITY((_GLF_IDENTITY((int(6)), ((int(6))) * 1)) * int(_GLF_ONE(1.0, injectionSwitch.y)), clamp((_GLF_IDENTITY((int(6)), ((int(6))) * 1)) * int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y)), _GLF_IDENTITY((_GLF_IDENTITY((int(6)), ((int(6))) * 1)) * int(_GLF_ONE(1.0, injectionSwitch.y)), ((_GLF_IDENTITY((int(6)), ((int(6))) * 1)) * int(_GLF_ONE(1.0, injectionSwitch.y))) ^ 0), (_GLF_IDENTITY(_GLF_IDENTITY((int(6)), ((int(6))) * 1), ~ (~ (_GLF_IDENTITY((int(6)), ((int(6))) * 1))))) * int(_GLF_ONE(1.0, injectionSwitch.y)))))))), _GLF_IDENTITY(1, (1) >> (0 ^ 0)), _GLF_IDENTITY(0, min(_GLF_IDENTITY(0, clamp(0, 0, 0)), 0)), 0)))))); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   barrier();
                   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false)))))))))
                    barrier();
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(float(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(_GLF_IDENTITY(injectionSwitch[0], (true ? injectionSwitch[0] : _GLF_FUZZED(-8.0)))) : injectionSwitch.y))) + 0.0))), clamp(float(float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0))), float(float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + _GLF_IDENTITY(0.0, max(0.0, 0.0))))), float(float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0))))))))))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   barrier();
                  }
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               do
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
                    barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-8131.0284, -9.8)) : _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * exp(vec2(0.0, 0.0))))).x > injectionSwitch.y))))
                      barrier();
                    }
                   barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
               do
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat2x3(0.0, cos(0.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0)), clamp(float(mat2x3(0.0, cos(0.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0)), float(mat2x3(0.0, cos(0.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0)), float(mat2x3(0.0, cos(0.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0))))))) / 1.0))), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)), float(mat4((_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)), 0.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(1.0, 1.0, 1.0, 0.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(1.0, 1.0, 1.0, 0.0), vec4(0.0, 0.0, 0.0, 1.0))), 1.0, 0.0, 0.0, 0.0))), 0.0 + ((_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)))) / 1.0))), false, true, false)), (bool(bvec4(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y) + 0.0, clamp((injectionSwitch.y) + 0.0, (injectionSwitch.y) + 0.0, (injectionSwitch.y) + 0.0)))), 0.0 + ((_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)))) / 1.0))), false, true, false))) || false), _GLF_IDENTITY((_GLF_IDENTITY(bool(bvec4(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)) / 1.0))), false, true, false)), true && (bool(bvec4(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)) / 1.0))), false, true, false))))) && true, bool(bvec3((_GLF_IDENTITY(bool(bvec4(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)) / 1.0))), false, true, false)), true && (bool(bvec4(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)) / 1.0)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)) / 1.0)) : _GLF_FUZZED(6.8)))), false, true, false))))) && _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, bool(bvec3(true, true, false))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))))))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (mat2(1.0) * (injectionSwitch)) * mat2(1.0))).x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(mix(float(_GLF_IDENTITY(injectionSwitch.y, float(float(injectionSwitch.y)))), float(_GLF_FUZZED(-9160.1802)), bool(false)), (true ? mix(_GLF_IDENTITY(float(_GLF_IDENTITY(injectionSwitch.y, float(float(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y)))), min(float(_GLF_IDENTITY(injectionSwitch.y, float(float(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y)))), float(_GLF_IDENTITY(injectionSwitch.y, float(float(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y)))))), float(_GLF_FUZZED(-9160.1802)), bool(false)) : _GLF_FUZZED(2900.0670))))))))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                          barrier();
                        }
                       else
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         barrier();
                        }
                      }
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(false))
                      {
                       do
                        {
                         barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, true, false))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, true, false))), true, true, false))))))))))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          {
                           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                            barrier();
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             if(_GLF_WRAPPED_IF_FALSE(false))
                              {
                              }
                             else
                              {
                               barrier();
                              }
                            }
                          }
                        }
                       else
                        {
                        }
                       barrier();
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))
                      barrier();
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                      {
                       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
                        barrier();
                      }
                     else
                      {
                      }
                    }
                  }
                 else
                  {
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(max(-5507.8393, 98.23)) : injectionSwitch.y))))))) || false))))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, ! (! _GLF_IDENTITY(((false) && true), false || (((false) && true))))))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), ! (! (_GLF_DEAD(false)))), true)), _GLF_IDENTITY(bool(bvec4(bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, ! (_GLF_IDENTITY(! _GLF_IDENTITY(((false) || false), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(((false) || false), bool(_GLF_IDENTITY(bool(((false) || false)), ! (! (bool(((false) || false)))))))), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(((false) || false), bool(_GLF_IDENTITY(bool(((false) || false)), ! (! (bool(((false) || false))))))))), ! (! (! (bool(_GLF_IDENTITY(((false) || false), bool(_GLF_IDENTITY(bool(((false) || false)), ! (! (bool(((false) || false)))))))))))))))), ! (! (! ((false) || false))))))))))), true)), true, _GLF_IDENTITY(false, (false) && true), false)), (_GLF_IDENTITY(bool(bvec4(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(false, (false) || false)) || false))))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, true && (false)), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || (bool(bvec4(_GLF_IDENTITY(false, true && (false)), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))))))), true)), true, false, false)), (bool(bvec4(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, (false) || false))))), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))))))), true)), true, false, false))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false)), true && (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))))), true)), bool(bvec4(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))))), true), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), ! (! (_GLF_DEAD(false)))), true), true), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), ! (! (_GLF_DEAD(false)))), true), true))), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(bvec3(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), ! (! (_GLF_DEAD(false)))), true), true))))), bvec3(bvec4(bvec3(bvec3(bvec3(bvec3(bvec3(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), ! (! (_GLF_DEAD(false)))), true), true))))), false)))))), bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), true), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), true), true)), bvec3(bvec3(bvec3(bvec3(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), true), true)))))))), true, false)))), bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))))), true), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), ! (! (_GLF_DEAD(false)))), true), true), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), ! (! (_GLF_DEAD(false)))), true), true))), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(bvec3(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), ! (! (_GLF_DEAD(false)))), true), true))))), bvec3(bvec4(bvec3(bvec3(bvec3(bvec3(bvec3(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), ! (! (_GLF_DEAD(false)))), true), true))))), false)))))), bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), true), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), true), true)), bvec3(bvec3(bvec3(bvec3(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), true), true)))))))), true, false)))), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))))), true), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), ! (! (_GLF_DEAD(false)))), true), true), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), ! (! (_GLF_DEAD(false)))), true), true))), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(bvec3(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), ! (! (_GLF_DEAD(false)))), true), true))))), bvec3(bvec4(bvec3(bvec3(bvec3(bvec3(bvec3(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), ! (! (_GLF_DEAD(false)))), true), true))))), false)))))), bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), true), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), true), true)), bvec3(bvec3(bvec3(bvec3(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), true), true)))))))), true, false))))))))))), true, false, false)))))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))
                barrier();
              }
             do
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, true))), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), bool(bvec3(false, false, true))))), (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, true))), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), bool(_GLF_IDENTITY(bvec3(false, false, true), _GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec3(bvec3(false, false, true)))), true)), bvec3(bvec4(bvec3(bvec4(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec3(bvec3(false, false, true)))), true)), false))))))))) || false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, true))), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), true && (false)), bool(bvec3(false, false, _GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, bool(bvec4(true, true, false, true))), true))))))))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), bool(bvec3(false, false, true))), false || _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), bool(bvec3(false, false, true)))), bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), bool(bvec3(false, false, true)))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), bool(bvec3(false, false, true)))), false || ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), bool(bvec3(false, false, true))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), bool(bvec3(false, false, true))), false, false, true)))))))))))))), bool(bvec2(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, true))), false || _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), bool(bvec3(false, false, true)))), bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), bool(bvec3(false, false, true)))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), bool(bvec3(false, false, true)))), false || ((_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), bool(bvec3(false, false, true)))))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), bool(bvec3(false, false, true)))), false || ((_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), bool(bvec3(false, false, true))))))))))))))))), _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, true && (true)))))))) && true))))
            {
             do
              {
               do
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false))))) && true)))
              {
              }
             else
              {
               barrier();
              }
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 for(int _injected_loop_counter = _GLF_IDENTITY(1, 0 | (1)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat2x3(injectionSwitch.x, 1.0, 0.0, 1.0, length(0.0), 1.0)), min(float(mat2x3(injectionSwitch.x, 1.0, 0.0, 1.0, length(0.0), 1.0)), _GLF_IDENTITY(float(mat2x3(injectionSwitch.x, 1.0, 0.0, 1.0, length(0.0), 1.0)), clamp(float(mat2x3(injectionSwitch.x, 1.0, 0.0, 1.0, length(0.0), 1.0)), float(mat2x3(injectionSwitch.x, 1.0, 0.0, 1.0, length(0.0), 1.0)), float(mat2x3(injectionSwitch.x, 1.0, 0.0, 1.0, length(0.0), 1.0))))))) > injectionSwitch.y))))
                      barrier();
                     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, ! (! (true))))), bool(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), false || (! (true))))))), true))))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         barrier();
                        }
                       else
                        {
                         do
                          {
                           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                            barrier();
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                      }
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _GLF_IDENTITY(_injected_loop_counter --, ~ (~ (_injected_loop_counter --))))
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           do
                            {
                             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                              barrier();
                            }
                           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0)), min(_GLF_IDENTITY(max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0)), sin(0.0) + (max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0)))), max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0))))) > injectionSwitch.y))));
                          }
                         else
                          {
                          }
                         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                          barrier();
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           if(_GLF_DEAD(false))
                            {
                             if(_GLF_DEAD(false))
                              barrier();
                             barrier();
                            }
                          }
                         barrier();
                         if(_GLF_DEAD(false))
                          barrier();
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                            {
                             barrier();
                            }
                           else
                            {
                            }
                          }
                        }
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y))))
                      barrier();
                     do
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, 1.0, 0.0))).x > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, _GLF_IDENTITY(1.0, 0.0 + (1.0)), 0.0))).x > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, 1.0, 0.0))).x > injectionSwitch.y), ! (! (! (_GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, 1.0, 0.0))).x > injectionSwitch.y))))))) || false)))))
                          {
                           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y)), (_GLF_IDENTITY(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y)), true && (_GLF_IDENTITY(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y)), (_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))) && true)))) && true)); _injected_loop_counter ++)
                            {
                             barrier();
                            }
                          }
                         barrier();
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                      {
                       barrier();
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
                          barrier();
                         barrier();
                        }
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       else
                        {
                        }
                       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(36.17)), float(injectionSwitch.x), _GLF_IDENTITY(bool(true), ! (! (bool(true)))))) > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
                        barrier();
                       do
                        {
                         barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))))) && true))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             else
              {
              }
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 0.0))), injectionSwitch)), clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).x > injectionSwitch.y))))
          barrier();
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = (((0 ^ 1) << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) | (int(2))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(ivec4(int(2), 0, 0, 0)))))); _injected_loop_counter --)
            {
             barrier();
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, (false) && true), true, false)))))
            barrier();
           barrier();
          }
         atomicStore(write_val, _GLF_IDENTITY(uint(_GLF_IDENTITY(virtual_gid, (false ? _GLF_FUZZED(clamp(workgroup_id, subgroup_size, workgroup_id)) : virtual_gid))), _GLF_IDENTITY(min(uint(virtual_gid), uint(virtual_gid)), (min(uint(virtual_gid), uint(virtual_gid))) | 0u)), _GLF_IDENTITY(4, min(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, (4) / 1)) ^ 0), 4)), _GLF_IDENTITY(64, min(_GLF_IDENTITY(64, (64) + 0), 64)), 0);
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, true), _GLF_IDENTITY(bvec2(bvec3(bvec2(false, true), true)), bvec2(_GLF_IDENTITY(bvec2(bvec2(bvec3(bvec2(false, true), true))), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec2(bvec3(bvec2(false, true), true))), bvec2(bvec2(bvec2(bvec2(bvec3(bvec2(false, true), true)))))), bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec2(bvec3(bvec2(false, true), true))), bvec2(bvec2(bvec2(bvec2(bvec3(bvec2(false, true), true)))))), false))), false), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec2(bvec2(bvec3(bvec2(false, true), true))), bvec2(bvec2(bvec2(bvec2(bvec3(bvec2(false, true), true)))))), false))))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(bvec2(bvec3(bvec2(false, true), true))), bvec2(bvec2(bvec2(bvec2(bvec3(bvec2(false, true), true)))))), false), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec2(bvec2(bvec3(bvec2(false, true), true))), bvec2(bvec2(bvec2(bvec2(bvec3(bvec2(false, true), true)))))), false)), bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec2(bvec2(bvec3(bvec2(false, true), true))), bvec2(bvec2(bvec2(bvec2(bvec3(bvec2(false, true), true)))))), false)))))))), true))))))), bvec2(bvec3(_GLF_IDENTITY(bvec2(false, _GLF_IDENTITY(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (! (true)) || false))), (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bvec2(bvec3(bvec2(false, _GLF_IDENTITY(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (! (true)) || false))), (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false)))), ! (! (bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec3(bvec2(false, true), _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, (false) || false), true, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, (false) || false), true, false), true)))))))))))))), true && _GLF_IDENTITY((_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true)))), bvec2(bvec3(bvec2(false, true), false)))), ! (! (bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec3(bvec2(false, true), false)))))))))), ((_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true)))), bvec2(bvec3(bvec2(false, true), false)))), ! (! (bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec3(bvec2(false, true), false))))))))))) || false)))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(43.85)), float(injectionSwitch.y), bool(true)))))))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
        {
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           barrier();
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
              barrier();
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         else
          {
          }
        }
       else
        {
        }
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))), (injectionSwitch.x > injectionSwitch.y))));
  }
 uint read_val = atomicLoad(write_val, 4, 64, 0);
 if(_GLF_DEAD(false))
  barrier();
 buf[virtual_gid] = uint(subgroupAllEqual(_GLF_IDENTITY(read_val, (_GLF_IDENTITY(read_val, uint(uvec2(read_val, 1u)))) / ((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), _GLF_IDENTITY(uint(0u), clamp(uint(0u), uint(0u), uint(0u))))))));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, float(mat3(injectionSwitch.x, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0))), injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)), _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(vec2(injectionSwitch.y, 0.0)))))), false || ((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(vec2(injectionSwitch.y, 0.0)))))))) && true)))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(3521.4694), _GLF_FUZZED(3.1)), bvec2(false, false))).y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) && true)))
    barrier();
   barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) < injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) || _GLF_IDENTITY(false, ! (! (false))))), bool(bvec4(bool(_GLF_IDENTITY(true, _GLF_IDENTITY((_GLF_IDENTITY(true, ! (! (true)))) || false, bool(bool((_GLF_IDENTITY(true, ! (! (true)))) || false))))), true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), true, true)))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
}
