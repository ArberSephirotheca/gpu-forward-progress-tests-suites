#version 460
struct _GLF_struct_1 {
 mat4 _f0;
 int _f1;
 mat2x4 _f2;
 uint _f3;
} ;

struct _GLF_struct_0 {
 int _f0;
} ;

struct _GLF_struct_2 {
 uint _f0;
 _GLF_struct_0 _f1;
 mat3x2 _f2;
 _GLF_struct_1 _f3;
 uint workgroup_id;
} ;

struct _GLF_struct_3 {
 _GLF_struct_2 _f0;
 mat2x4 _f1;
 vec2 _f2;
 ivec2 _f3;
 uint _f4;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = 16;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 _GLF_struct_3 _GLF_struct_replacement_3 = _GLF_struct_3(_GLF_struct_2(1u, _GLF_struct_0(1), mat3x2(1.0), _GLF_struct_1(mat4(1.0), 1, mat2x4(1.0), 1u), gl_WorkGroupID.x), mat2x4(1.0), vec2(1.0), ivec2(1), 1u);
 uint workgroup_base = workgroup_size * _GLF_struct_replacement_3._f0.workgroup_id;
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 atomicStore(write_val, uint(virtual_gid), 4, 64, 0);
 uint read_val = atomicLoad(write_val, 4, 64, 0);
 buf[virtual_gid] = uint(subgroupAllEqual(read_val));
}
