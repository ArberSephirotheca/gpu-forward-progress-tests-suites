#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 0) uniform buf0 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y)), true && (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y)) || false))))))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3(injectionSwitch, 0.0, 0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 1.0, abs(1.0)), (false ? _GLF_FUZZED(mat3(-3.7, 794.397, -727.419, 8.5, -7723.5413, -2.4, 2.5, 8892.0611, -33.71)) : _GLF_IDENTITY(mat3(injectionSwitch, 0.0, 0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 1.0, _GLF_IDENTITY(abs(1.0), (abs(1.0)) / 1.0)), (true ? mat3(injectionSwitch, 0.0, 0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 1.0, _GLF_IDENTITY(abs(1.0), (abs(1.0)) / 1.0)) : _GLF_FUZZED(mat3(44.60, -4.5, 83.04, -983.147, -6.7, 795.729, -3.3, -4763.1309, -6.7)))))))), max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, log(1.0), 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, log(1.0), 0.0, 1.0)))))))).y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(! (! (true)), _GLF_IDENTITY(bool(bvec4(! (! (true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)), ! (! (_GLF_IDENTITY(bool(bvec4(! (! (true)), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true))), _GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true)), true)), _GLF_IDENTITY((bool(bvec4(! (! (true)), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, sin(0.0) + _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))), (true ? _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))), ((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))) + 0.0) : _GLF_FUZZED(intBitsToFloat(64201))))))) > injectionSwitch.y))))), true, true))), ((bool(bvec4(! (! (true)), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, sin(0.0) + _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))), (true ? _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))), ((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))) + 0.0) : _GLF_FUZZED(intBitsToFloat(64201))))))) > injectionSwitch.y))))), true, true)))) || false) || false))))))))
        {
         return;
        }
       else
        {
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
      return;
     if(_GLF_DEAD(false))
      return;
    }
  }
 do
  {
   for(int _injected_loop_counter = (1 & 1); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (false ? _GLF_FUZZED(_injected_loop_counter) : 0))), bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), true, true, false))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       continue;
      }
     for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & 1)), (_GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY(1, (1) + 0) & 1))) && _GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, _GLF_IDENTITY(! (! (true)), bool(bvec4(! (! (true)), true, true, false)))), true, true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))))))); _injected_loop_counter ++)
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))))))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), _GLF_IDENTITY(true, (true) || false) && (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)))))), bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))))))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
            break;
           return;
          }
        }
       if(_GLF_DEAD(false))
        return;
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(! (false), (! (false)) && true), true), bvec2(bvec2(bvec2(_GLF_IDENTITY(! (false), (! (false)) && true), true))))), bool(bvec4(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(! (false), (! (false)) && true), true), bvec2(bvec2(bvec2(_GLF_IDENTITY(! (false), (! (false)) && true), true))))), false, true, true)))))), (_GLF_IDENTITY(false, ! (! (false)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
    {
     if(_GLF_DEAD(false))
      break;
     continue;
    }
   if(_GLF_DEAD(false))
    break;
  }
 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), _GLF_IDENTITY(bvec3(bvec4(bvec3(false, false, _GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), injectionSwitch.x)) > injectionSwitch.y))), false)), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec4(bvec3(false, false, _GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))), false))), bvec3(bvec4(bvec3(bvec3(bvec4(bvec3(false, false, _GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))), false))), false))))))))), ! (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(bvec3(false, false, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(length(injectionSwitch)) : injectionSwitch.y))))), false))))))))));
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), max(_GLF_IDENTITY(int(5), _GLF_IDENTITY(int(ivec3(int(5), (1 | 0), 0)), (int(ivec3(int(5), (1 | 0), 0))) - int(_GLF_ZERO(0.0, injectionSwitch.x)))), int(5))), _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(int(5), ~ (_GLF_IDENTITY(~ (int(5)), 0 ^ (~ (int(5)))))), 1), ivec2(_GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, (0) + 0))), 0) + (ivec2(_GLF_IDENTITY(int(5), ~ (_GLF_IDENTITY(~ (int(5)), 0 ^ (~ (int(5)))))), 1))), ~ (~ (_GLF_IDENTITY(ivec2(_GLF_IDENTITY(int(5), ~ (_GLF_IDENTITY(~ (int(5)), 0 ^ (~ (int(5)))))), 1), ivec2(_GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, (0) + 0))), 0) + (ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(5, clamp(5, 5, 5))), ~ (_GLF_IDENTITY(~ (int(5)), 0 ^ (~ (int(5)))))), 1))))))), (_GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(int(5), ~ (_GLF_IDENTITY(~ (int(5)), 0 ^ (_GLF_IDENTITY(~ (int(5)), (~ (int(_GLF_IDENTITY(5, min(5, 5))))) - 0))))), 1), ivec2(0, 0) + (ivec2(_GLF_IDENTITY(int(5), ~ (_GLF_IDENTITY(~ (int(5)), 0 ^ (~ _GLF_IDENTITY((_GLF_IDENTITY(int(5), (int(5)) << 0)), (_GLF_IDENTITY((_GLF_IDENTITY(int(5), (int(5)) << 0)), ((_GLF_IDENTITY(int(5), (int(5)) << 0))) | ((_GLF_IDENTITY(int(5), (int(5)) << 0))))) ^ 0))))), 1)))), (false ? _GLF_FUZZED(58843) : int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(int(5), ~ (_GLF_IDENTITY(~ (int(5)), 0 ^ (~ (int(5)))))), 1), ivec2(0, 0) + (ivec2(_GLF_IDENTITY(int(5), ~ (_GLF_IDENTITY(~ (int(5)), 0 ^ (~ _GLF_IDENTITY((int(5)), int(ivec3(_GLF_IDENTITY((int(5)), int(int((int(5))))), 0, 0))))))), 1))))))) - 0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false)))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), false || (_GLF_IDENTITY(false, (false) && true)))) || false)))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(2.8, 12.62)) : injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)))).y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
         if(_GLF_DEAD(false))
          return;
        }
       continue;
      }
     if(_GLF_DEAD(false))
      continue;
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        continue;
       return;
      }
    }
  }
 uint subgroup_size = 16;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
      return;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, (false) && true), true), bvec2(bvec3(bvec2(_GLF_IDENTITY(false, (false) && true), true), false)))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        break;
       do
        {
         if(_GLF_DEAD(false))
          return;
         return;
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          {
           if(_GLF_DEAD(false))
            return;
           continue;
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-6.3)), float(injectionSwitch.y), bool(true)))))));
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
      {
      }
     else
      {
       return;
      }
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY((gl_WorkGroupSize.x) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) * ((uvec3(1u, 1u, 1u) << _GLF_IDENTITY(uvec3(3u), uvec3(3u))) >> _GLF_IDENTITY(uvec3(3u), uvec3(3u)))).x, _GLF_IDENTITY((gl_WorkGroupSize.x) ^ 0u, (0u | 0u) | ((gl_WorkGroupSize.x) ^ 0u))), (gl_WorkGroupSize.x) / 1u), (gl_WorkGroupSize.x) | _GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupSize.x, max(_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) - 0u), gl_WorkGroupSize.x))), max((gl_WorkGroupSize.x), (gl_WorkGroupSize.x))))), ((_GLF_IDENTITY(gl_WorkGroupSize, clamp(gl_WorkGroupSize, gl_WorkGroupSize, gl_WorkGroupSize)).x) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) ^ 0u), (gl_WorkGroupSize.x) / 1u), (gl_WorkGroupSize.x) | _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, max(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) - 0u), (_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) - 0u)) / 1u), gl_WorkGroupSize.x)), (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(gl_WorkGroupSize.x, max(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) - 0u), (_GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY((gl_WorkGroupSize.x), ((gl_WorkGroupSize.x)) * 1u) - 0u)) / 1u), gl_WorkGroupSize.x))))), ((_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, max(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) - 0u), (_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) - 0u)) / 1u), gl_WorkGroupSize.x)), (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(gl_WorkGroupSize.x, max(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) - 0u), (_GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY((gl_WorkGroupSize.x), ((gl_WorkGroupSize.x)) * 1u) - 0u)) / 1u), gl_WorkGroupSize.x)))))) | 0u), max(_GLF_IDENTITY((gl_WorkGroupSize.x), ((gl_WorkGroupSize.x)) * 1u), (gl_WorkGroupSize.x)))))) >> 0u));
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  return;
 uint virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), (workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, min(subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) + (0u | 0u))))) | (workgroup_base + subgroup_id * subgroup_size)) + subgroup_local_id, (_GLF_IDENTITY(workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), (workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, min(subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) + (0u | 0u))))) | (workgroup_base + subgroup_id * subgroup_size)) + subgroup_local_id) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), min(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), (workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, min(subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) + (0u | 0u))))) | (workgroup_base + subgroup_id * subgroup_size)) + subgroup_local_id, (_GLF_IDENTITY(workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), (workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, min(subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) + (0u | 0u))))) | (workgroup_base + subgroup_id * subgroup_size)) + subgroup_local_id) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), (workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, min(subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) + (0u | 0u))))) | (workgroup_base + subgroup_id * subgroup_size)) + subgroup_local_id, (_GLF_IDENTITY(workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), (workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, min(subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) + (0u | 0u))))) | (workgroup_base + subgroup_id * subgroup_size)) + subgroup_local_id) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))))), 0u | _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), uint(uint(subgroup_id * _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))))), (workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, min(subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) + (0u | 0u))))) | (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (true ? workgroup_base + subgroup_id * subgroup_size : _GLF_FUZZED(workgroup_size))))) + subgroup_local_id), clamp((_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), uint(uint(subgroup_id * _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))))), (workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, min(subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) + (0u | 0u))))) | (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (true ? workgroup_base + subgroup_id * subgroup_size : _GLF_FUZZED(workgroup_size))))) + subgroup_local_id), _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), uint(uint(subgroup_id * _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))))), (workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, min(subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) + (0u | 0u))))) | (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (true ? workgroup_base + subgroup_id * subgroup_size : _GLF_FUZZED(workgroup_size))))) + subgroup_local_id), ((_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), uint(uint(subgroup_id * _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))))), (workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, min(subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) + (0u | 0u))))) | (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (true ? workgroup_base + subgroup_id * subgroup_size : _GLF_FUZZED(workgroup_size))))) + subgroup_local_id)) << 0u), (_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), uint(uint(subgroup_id * _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))))), (workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, min(subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) + (0u | 0u))))) | (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (true ? workgroup_base + subgroup_id * subgroup_size : _GLF_FUZZED(workgroup_size))))) + subgroup_local_id))));
 if(_GLF_DEAD(false))
  {
   do
    {
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)) != (0 << _GLF_IDENTITY(int(8), int(8)))); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)), min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 0.0, 0.0))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 0.0, 0.0))), vec2(mat3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 0.0, 0.0))), (true ? _GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 0.0, 0.0))) : _GLF_FUZZED(vec2(-47.40, 84.47)))), 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), dot(vec2(0.0, 0.0), vec2(1.0, 1.0))), 0.0, 1.0))) : _GLF_FUZZED(refract(vec2(1716.0656, -6175.2696), vec2(5.0, -107.459), 98.49)))).x, min(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0)), float(_GLF_FUZZED(-5.9)), bool(false))) > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(! _GLF_IDENTITY((! (false)), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY((! (false)), bool(bvec4((! (false)), true, false, false))), false)), bool(bvec4(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY((! (false)), bool(bvec4((! (false)), true, false, false))), false)), bool(bvec4(bool(bvec2(_GLF_IDENTITY((! (false)), bool(bvec4((! (false)), true, false, false))), false)), false, true, false))), true, true, false)))), false || _GLF_IDENTITY((_GLF_IDENTITY(! _GLF_IDENTITY((! (false)), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY((! (false)), bool(bvec4((! (false)), true, false, false))), false)), bool(bvec4(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((! (false)), bool(bvec4((! (false)), true, false, false))), false), _GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_IDENTITY((! (false)), bool(bvec4((! (false)), true, false, false))), false), true, true)), bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_IDENTITY((! (false)), bool(bvec4((! (false)), true, false, false))), false), true, true)), bvec2(bvec4(bvec2(bvec4(bvec2(_GLF_IDENTITY((! (false)), bool(bvec4((! (false)), true, false, false))), false), true, true)), true, false))), true))))), bool(bvec4(bool(bvec2(_GLF_IDENTITY((! (false)), bool(bvec4((! (false)), true, false, false))), false)), false, true, false))), true, true, false)))), ! (! (! _GLF_IDENTITY((! (false)), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY((! (false)), bool(bvec4((! (false)), true, false, false))), false)), bool(bvec4(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY((! (false)), bool(bvec4((! (false)), true, false, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(bvec3(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))), false)), bool(bvec4(bool(bvec2(_GLF_IDENTITY((! (false)), bool(bvec4((! (false)), true, false, false))), _GLF_IDENTITY(false, (false) || false))), false, true, false))), true, true, false))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY((! (false)), bool(bvec4((! (false)), true, false, false))), false)), bool(bvec4(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY((! (false)), bool(bvec4((! (false)), true, false, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(bvec3(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))), false)), bool(bvec4(bool(bvec2(_GLF_IDENTITY((! (false)), bool(bvec4((! (false)), true, false, false))), _GLF_IDENTITY(false, (false) || false))), false, true, false))), true, true, false))), (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY((! (false)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool((! (false))), bool(bvec2(bool((! (false))), false)))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool((! (false))), bool(bvec2(bool((! (false))), false)))), (bool(_GLF_IDENTITY(bool((! (false))), bool(bvec2(bool((! (false))), false))))) || false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec4((! _GLF_IDENTITY((false), ! (! ((false))))), true, false, false))), false)), bool(bvec4(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY((! (false)), bool(bvec4((_GLF_IDENTITY(! (false), bool(bvec3(! (false), false, false)))), true, false, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / abs(1.0)))))), ! _GLF_IDENTITY((_GLF_IDENTITY(! (bool(bvec3(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bvec2(! (bool(bvec3(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true)))), ! (! ((_GLF_IDENTITY(! (bool(bvec3(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bvec2(! (bool(bvec3(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true)))))))))))), false)), bool(bvec4(bool(bvec2(_GLF_IDENTITY((! (false)), bool(bvec4((! (_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), true, false, false))), _GLF_IDENTITY(false, (false) || false))), false, true, false))), true, true, false)))) && true))))))))), ((_GLF_IDENTITY(! _GLF_IDENTITY((! (false)), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY((! (false)), bool(bvec4((! (false)), true, false, false))), false)), bool(bvec4(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((! (false)), bool(bvec4((! (false)), true, false, false))), false), _GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_IDENTITY((! (false)), bool(bvec4((! (false)), true, false, false))), false), true, true)), bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_IDENTITY((! (false)), bool(bvec4((! (false)), true, false, false))), false), true, true)), bvec2(bvec4(bvec2(bvec4(bvec2(_GLF_IDENTITY((! (false)), bool(bvec4((! (false)), true, false, false))), false), true, true)), true, false))), true))))), bool(bvec4(bool(bvec2(_GLF_IDENTITY((! (false)), bool(bvec4((! (false)), true, false, false))), false)), false, true, false))), true, true, false)))), ! (! (! _GLF_IDENTITY((! (false)), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY((! (false)), bool(bvec4((! (false)), true, false, false))), false)), bool(bvec4(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY((! (false)), bool(bvec4((! (false)), true, false, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(bvec3(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))), false)), bool(bvec4(bool(bvec2(_GLF_IDENTITY((! (false)), bool(bvec4((! (false)), true, false, false))), _GLF_IDENTITY(false, (false) || false))), false, true, false))), true, true, false))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY((! (false)), bool(bvec4((! (false)), true, false, false))), false)), bool(bvec4(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY((! (false)), bool(bvec4((! (false)), true, false, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(bvec3(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))), false)), bool(bvec4(bool(bvec2(_GLF_IDENTITY((! (false)), bool(bvec4((! (false)), true, false, false))), _GLF_IDENTITY(false, (false) || false))), false, true, false))), true, true, false))), (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY((! (false)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool((! (false))), bool(bvec2(bool((! (false))), false)))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool((! (false))), bool(bvec2(bool((! (false))), false)))), (bool(_GLF_IDENTITY(bool((! (false))), bool(bvec2(bool((! (false))), false))))) || false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec4((! _GLF_IDENTITY((false), ! (! ((false))))), true, false, false))), false)), bool(bvec4(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY((! (false)), bool(bvec4((_GLF_IDENTITY(! (false), bool(bvec3(! (false), false, false)))), true, false, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / abs(1.0)))))), ! _GLF_IDENTITY((_GLF_IDENTITY(! (bool(bvec3(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bvec2(! (bool(bvec3(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true)))), ! (! ((_GLF_IDENTITY(! (bool(bvec3(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bvec2(! (bool(bvec3(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true)))))))))))), false)), bool(bvec4(bool(bvec2(_GLF_IDENTITY((! (false)), bool(bvec4((! (_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), true, false, false))), _GLF_IDENTITY(false, (false) || false))), false, true, false))), true, true, false)))) && true)))))))))) || false)))) && true)))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        return;
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
        return;
      }
     else
      {
       return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
        return;
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 uint next_virtual_gid = workgroup_base + subgroup_id * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), min(subgroup_size, subgroup_size)) + (_GLF_IDENTITY((subgroup_local_id + 1), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), _GLF_IDENTITY(((subgroup_local_id + 1)), (((subgroup_local_id + 1))) | 0u) - 0u), (_GLF_IDENTITY((subgroup_local_id + 1), _GLF_IDENTITY(((subgroup_local_id + 1)), (((subgroup_local_id + 1))) | 0u) - 0u)) << 0u)) >> 0u, (_GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + _GLF_IDENTITY(1, 0 ^ (1)))) - 0u)) >> 0u, uint(uvec4((_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), ((_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)), (subgroup_local_id) / _GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, (1u) - 0u))))) << 0u)) * 1u))) + _GLF_IDENTITY(_GLF_IDENTITY(1, 0 + (1)), clamp(_GLF_IDENTITY(1, (1) | (1)), _GLF_IDENTITY(1, (1) | (1)), 1)))) - 0u), (false ? _GLF_FUZZED(workgroup_size) : _GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) - 0u)))) >> 0u, 0u, 0u, _GLF_IDENTITY(1u, min(1u, 1u)))))) - 0u)) % _GLF_IDENTITY(subgroup_size, 0u ^ (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u))));
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
  return;
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
  {
  }
 else
  {
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), bool(_GLF_IDENTITY(bool(false), ! (! (bool(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false))), ! (! (false)))))))))))
      return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   do
    {
     buf[virtual_gid] = 1;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, _GLF_IDENTITY(1u, (1u) >> 0u) * (next_virtual_gid))], uint(2), 4, 64, 0);
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch)).x, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch)).x, mix(float(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch)).x), float(_GLF_FUZZED(0.4)), bool(false))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch)).x, mix(float(_GLF_FUZZED(-4925.6892)), float(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch)).x), bool(true))))) > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (false))), ! (! (! (_GLF_IDENTITY(false, false || (false)))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (false))), ! (! (! (_GLF_IDENTITY(false, false || (false))))))), false || (! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (false))), ! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(false, false || (false))) || false))))))))))))), ! (! (! (_GLF_IDENTITY(false, false || (false)))))))))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))))) || false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), true && (true))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)), true && (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-5.7, 79.45)))).y), true && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-5.7, 79.45)))).y))))))))), ! (! ((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-5.7, 79.45)))).y), true && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-5.7, 79.45)))).y))))))))))))))))))))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(! (true), ! (! (! (true))))), bool(bvec3((_GLF_IDENTITY(_GLF_IDENTITY(! (true), ! (! (! (true)))), (_GLF_IDENTITY(! (true), ! (! (! (true))))) || false)), true, false))), bool(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(! (true), ! (! (! (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(bool(bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (! (bool(bvec2(true, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec4((injectionSwitch.x < injectionSwitch.y), false, false, true))))))))), false, true)), ! (! (bool(bvec3(_GLF_IDENTITY(bool(bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (! (bool(bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), false, true)))))))))))), _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true))))))), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(! (true), ! (! (! (true))))), bool(bvec3((_GLF_IDENTITY(! (true), ! (! (! (true))))), true, false))), bool(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(! (true), ! (! (! (true))))), bool(bvec3((_GLF_IDENTITY(! (true), ! (! (! (true))))), true, false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false), true, true))))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, bool(bvec2(_GLF_IDENTITY((false) || false, ! (_GLF_IDENTITY(! ((false) || false), ! (! (_GLF_IDENTITY(! ((false) || false), _GLF_IDENTITY(bool(bvec3(! ((false) || false), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec3(! ((false) || false), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true))))))), true))))))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             return;
             if(_GLF_DEAD(false))
              {
               do
                {
                 do
                  {
                   return;
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
            return;
          }
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), true, true)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      return;
     if(_GLF_DEAD(false))
      return;
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec3(true, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-517.782) : injectionSwitch.y)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (true) && true)))), bool(bvec3(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_IDENTITY(true, _GLF_IDENTITY((true), bool(bvec3((true), _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bool(! (false)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && _GLF_IDENTITY(true, true && (true)))))), false, false))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))), ! (! (((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))))) && true))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, false))))), bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat4(injectionSwitch, determinant(mat4(1.0, 0.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)), 0.0, 1.0, cos(0.0), 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0)), 0.0, cos(0.0), 1.0, log(1.0), 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(abs(0.0), 1.0)), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(abs(0.0), 1.0)), max(dot(vec2(0.0, 1.0), vec2(abs(0.0), 1.0)), dot(vec2(0.0, 1.0), vec2(abs(0.0), 1.0))))), abs(0.0), 0.0, 0.0), (mat4(injectionSwitch, determinant(mat4(1.0, 0.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)), 0.0, 1.0, cos(0.0), 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0)), 0.0, cos(0.0), 1.0, log(1.0), 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(abs(0.0), 1.0)), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(abs(0.0), 1.0)), max(dot(vec2(0.0, 1.0), vec2(abs(0.0), 1.0)), dot(vec2(0.0, 1.0), vec2(abs(0.0), 1.0))))), abs(0.0), 0.0, 0.0)) - mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), mat2(1.0) * (vec2(_GLF_IDENTITY(mat4(injectionSwitch, determinant(mat4(1.0, 0.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)), 0.0, 1.0, cos(0.0), 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0)), 0.0, cos(0.0), 1.0, log(1.0), 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(abs(0.0), 1.0)), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(abs(0.0), 1.0)), max(dot(vec2(0.0, 1.0), vec2(abs(0.0), 1.0)), dot(vec2(0.0, 1.0), vec2(abs(0.0), 1.0))))), abs(0.0), 0.0, 0.0), (mat4(injectionSwitch, determinant(mat4(1.0, 0.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)), 0.0, 1.0, cos(0.0), 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0)), 0.0, cos(0.0), 1.0, log(1.0), 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(abs(0.0), 1.0)), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(abs(0.0), 1.0)), max(dot(vec2(0.0, 1.0), vec2(abs(0.0), 1.0)), dot(vec2(0.0, 1.0), vec2(abs(0.0), 1.0))))), abs(0.0), 0.0, 0.0)) - mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))).y)), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, 0.0 + (_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))) / 1.0))), bool(bvec2(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, 0.0 + (_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))) / 1.0))), true))), true, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, false, false, true)), bool(_GLF_IDENTITY(bvec2(bool(bvec4(true, false, false, true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec4(bvec2(bool(bvec4(true, false, false, true)), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true)), true, false)))))))))))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, false))))), bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat4(injectionSwitch, determinant(mat4(1.0, 0.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)), 0.0, 1.0, cos(0.0), 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0)), 0.0, cos(0.0), 1.0, log(1.0), 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(abs(0.0), 1.0)), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(abs(0.0), 1.0)), max(dot(vec2(0.0, 1.0), vec2(abs(0.0), 1.0)), dot(vec2(0.0, 1.0), vec2(abs(0.0), 1.0))))), abs(0.0), 0.0, 0.0), (mat4(injectionSwitch, determinant(mat4(1.0, 0.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)), 0.0, 1.0, cos(0.0), 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0)), 0.0, cos(0.0), 1.0, log(1.0), 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(abs(0.0), 1.0)), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(abs(0.0), 1.0)), max(dot(vec2(0.0, 1.0), vec2(abs(0.0), 1.0)), dot(vec2(0.0, 1.0), vec2(abs(0.0), 1.0))))), abs(0.0), 0.0, 0.0)) - mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), mat2(1.0) * (vec2(_GLF_IDENTITY(mat4(injectionSwitch, determinant(mat4(1.0, 0.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)), 0.0, 1.0, cos(0.0), 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0)), 0.0, cos(0.0), 1.0, log(1.0), 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(abs(0.0), 1.0)), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(abs(0.0), 1.0)), max(dot(vec2(0.0, 1.0), vec2(abs(0.0), 1.0)), dot(vec2(0.0, 1.0), vec2(abs(0.0), 1.0))))), abs(0.0), 0.0, 0.0), (mat4(injectionSwitch, determinant(mat4(1.0, 0.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)), 0.0, 1.0, cos(0.0), 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0)), 0.0, cos(0.0), 1.0, log(1.0), 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(abs(0.0), 1.0)), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(abs(0.0), 1.0)), max(dot(vec2(0.0, 1.0), vec2(abs(0.0), 1.0)), dot(vec2(0.0, 1.0), vec2(abs(0.0), 1.0))))), abs(0.0), 0.0, 0.0)) - mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))).y)), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, 0.0 + (_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))) / 1.0))), bool(bvec2(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, 0.0 + (_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))) / 1.0))), true))), true, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, false, false, true)), bool(_GLF_IDENTITY(bvec2(bool(bvec4(true, false, false, true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec4(bvec2(bool(bvec4(true, false, false, true)), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true)), true, false)))))))))))), true, false, true)), ! (! (bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, false))))), bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat4(injectionSwitch, determinant(mat4(1.0, 0.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)), 0.0, 1.0, cos(0.0), 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0)), 0.0, cos(0.0), 1.0, log(1.0), 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(abs(0.0), 1.0)), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(abs(0.0), 1.0)), max(dot(vec2(0.0, 1.0), vec2(abs(0.0), 1.0)), dot(vec2(0.0, 1.0), vec2(abs(0.0), 1.0))))), abs(0.0), 0.0, 0.0), (mat4(injectionSwitch, determinant(mat4(1.0, 0.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)), 0.0, 1.0, cos(0.0), 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0)), 0.0, cos(0.0), 1.0, log(1.0), 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(abs(0.0), 1.0)), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(abs(0.0), 1.0)), max(dot(vec2(0.0, 1.0), vec2(abs(0.0), 1.0)), dot(vec2(0.0, 1.0), vec2(abs(0.0), 1.0))))), abs(0.0), 0.0, 0.0)) - mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), mat2(1.0) * (vec2(_GLF_IDENTITY(mat4(injectionSwitch, determinant(mat4(1.0, 0.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)), 0.0, 1.0, cos(0.0), 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0)), 0.0, cos(0.0), 1.0, log(1.0), 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(abs(0.0), 1.0)), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(abs(0.0), 1.0)), max(dot(vec2(0.0, 1.0), vec2(abs(0.0), 1.0)), dot(vec2(0.0, 1.0), vec2(abs(0.0), 1.0))))), abs(0.0), 0.0, 0.0), (mat4(injectionSwitch, determinant(mat4(1.0, 0.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)), 0.0, 1.0, cos(0.0), 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0)), 0.0, cos(0.0), 1.0, log(1.0), 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(abs(0.0), 1.0)), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(abs(0.0), 1.0)), max(dot(vec2(0.0, 1.0), vec2(abs(0.0), 1.0)), dot(vec2(0.0, 1.0), vec2(abs(0.0), 1.0))))), abs(0.0), 0.0, 0.0)) - mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))).y)), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, 0.0 + (_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))) / 1.0))), bool(bvec2(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, 0.0 + (_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))) / 1.0))), true))), true, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, false, false, true)), bool(_GLF_IDENTITY(bvec2(bool(bvec4(true, false, false, true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec4(bvec2(bool(bvec4(true, false, false, true)), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true)), true, false)))))))))))), true, false, true))))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               return;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
          }
        }
       else
        {
         for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < _GLF_IDENTITY(1, (1) / 1), (_injected_loop_counter < _GLF_IDENTITY(1, (1) / 1)) || false)); _injected_loop_counter ++)
          {
           return;
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat2x3(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)), _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0)), dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0))), 0.0, 0.0, 0.0, abs(1.0))), clamp(float(mat2x3(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)), _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0)), dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0))), 0.0, 0.0, 0.0, abs(1.0))), _GLF_IDENTITY(float(mat2x3(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)), _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0)), dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0))), 0.0, 0.0, 0.0, abs(1.0))), clamp(float(mat2x3(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)), _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0)), dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0))), 0.0, 0.0, 0.0, abs(1.0))), float(mat2x3(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)), _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0)), dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0))), 0.0, 0.0, 0.0, abs(1.0))), float(mat2x3(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)), _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0)), dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0))), 0.0, 0.0, 0.0, abs(1.0))))), float(mat2x3(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)), _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0)), dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0))), 0.0, 0.0, 0.0, abs(1.0))))))))))
          return;
        }
       else
        {
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || (_GLF_IDENTITY(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
      return;
     for(int _injected_loop_counter = _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) + 0)) << 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
         return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           break;
          }
        }
      }
    }
  }
 do
  {
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       return;
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
}
