#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_11 {
 vec4 _f0;
} ;

struct _GLF_struct_9 {
 mat4x3 _f0;
 mat3x4 _f1;
 mat4x2 _f2;
 uint _f3;
 mat3x2 _f4;
} ;

struct _GLF_struct_8 {
 uvec3 _f0;
 mat4x3 _f1;
 mat2 _f2;
 bvec3 _f3;
 ivec3 _f4;
} ;

struct _GLF_struct_10 {
 _GLF_struct_8 _f0;
 vec4 _f1;
 _GLF_struct_9 _f2;
} ;

struct _GLF_struct_6 {
 mat4x2 _f0;
 vec4 _f1;
 mat2 _f2;
 uvec2 _f3;
 vec2 _f4;
 bool _f5;
} ;

struct _GLF_struct_7 {
 mat3x4 _f0;
 _GLF_struct_6 _f1;
} ;

struct _GLF_struct_4 {
 mat2x3 _f0;
 uint _f1;
 uvec2 _f2;
} ;

struct _GLF_struct_3 {
 mat2x3 _f0;
 mat2x3 _f1;
 vec3 _f2;
 ivec3 _f3;
} ;

struct _GLF_struct_2 {
 mat3x2 _f0;
 mat2x3 _f1;
 uint workgroup_size;
 ivec2 _f2;
} ;

struct _GLF_struct_5 {
 _GLF_struct_2 _f0;
 _GLF_struct_3 _f1;
 _GLF_struct_4 _f2;
 int _f3;
} ;

struct _GLF_struct_0 {
 vec3 _f0;
 ivec4 _f1;
 bvec2 _f2;
 mat3 _f3;
 mat4x3 _f4;
 uint _f5;
} ;

struct _GLF_struct_1 {
 _GLF_struct_0 _f0;
 ivec4 _f1;
} ;

struct _GLF_struct_12 {
 _GLF_struct_1 _f0;
 _GLF_struct_5 _f1;
 _GLF_struct_7 _f2;
 _GLF_struct_10 _f3;
 _GLF_struct_11 _f4;
} ;

layout(set = 0, binding = 0) uniform buf0 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    return;
  }
 uvec4 GLF_merged4_0_1_16_1_1_11_2_1_14_3_1_14next_virtual_gidvirtual_gidworkgroup_baseworkgroup_size;
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = 16;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))), false))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(vec4(injectionSwitch.x, 0.0, 0.0, 1.0), mat4(1.0) * (vec4(injectionSwitch.x, 0.0, 0.0, 1.0)))))))))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     break;
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + abs(_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat4(0.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0))), 0.0, sqrt(0.0), 0.0, 0.0, 1.0, 1.0, 0.0, log(1.0), 1.0, 1.0, 0.0)), (false ? _GLF_FUZZED(7.5) : float(mat4(0.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)))), 0.0, 1.0))), 0.0, sqrt(0.0), 0.0, 0.0, 1.0, 1.0, 0.0, log(1.0), 1.0, 1.0, 0.0))))), _GLF_IDENTITY(0.0, min(0.0, 0.0)))))) < _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), _GLF_IDENTITY(float(_GLF_FUZZED(vec2(7.0, 877.896).s)), (float(_GLF_FUZZED(vec2(7.0, 877.896).s))) - tan(0.0)), _GLF_IDENTITY(bool(false), (bool(false)) || false)))))))))
      {
       return;
       if(_GLF_DEAD(false))
        break;
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         break;
        }
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (0) ^ 0)); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                break;
               return;
              }
            }
          }
        }
      }
     if(_GLF_DEAD(false))
      return;
    }
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
  }
 _GLF_struct_12 _GLF_struct_replacement_12 = _GLF_struct_12(_GLF_struct_1(_GLF_struct_0(vec3(1.0), ivec4(1), bvec2(true), mat3(1.0), mat4x3(1.0), 1u), ivec4(1)), _GLF_struct_5(_GLF_struct_2(mat3x2(1.0), mat2x3(1.0), gl_WorkGroupSize.x, ivec2(_GLF_IDENTITY(1, min(1, 1)))), _GLF_struct_3(mat2x3(1.0), mat2x3(1.0), vec3(1.0), _GLF_IDENTITY(ivec3(1), (_GLF_IDENTITY(ivec3(1), ~ (~ (ivec3(1))))) + ivec3(0, 0, 0))), _GLF_struct_4(mat2x3(1.0), 1u, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(1u), uvec2(0u, 0u) | (uvec2(1u))), max(_GLF_IDENTITY(uvec2(1u), _GLF_IDENTITY(uvec2(0u, 0u) | (_GLF_IDENTITY(uvec2(1u), _GLF_IDENTITY(clamp(uvec2(1u), uvec2(1u), _GLF_IDENTITY(uvec2(1u), ~ (~ (uvec2(1u))))), (clamp(uvec2(1u), uvec2(1u), _GLF_IDENTITY(uvec2(1u), ~ (~ (uvec2(1u)))))) << uvec2(0u, 0u)))), (uvec2(0u, 0u) | (uvec2(1u))) / uvec2(1u, _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, clamp(1u, 1u, 1u))) << 0u)))), _GLF_IDENTITY(uvec2(1u), _GLF_IDENTITY(uvec2(0u, 0u), (uvec2(0u, 0u)) | (_GLF_IDENTITY(_GLF_IDENTITY(uvec2(0u, 0u), (uvec2(0u, 0u)) >> uvec2(0u, 0u)), (uvec2(0u, 0u)) | (uvec2(0u, 0u))))) | (uvec2(1u))))), uvec2(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(1u), uvec2(0u, 0u) | _GLF_IDENTITY((uvec2(1u)), min((uvec2(1u)), (uvec2(1u))))), max(_GLF_IDENTITY(uvec2(1u), _GLF_IDENTITY(uvec2(0u, 0u) | (_GLF_IDENTITY(uvec2(1u), clamp(uvec2(1u), uvec2(1u), _GLF_IDENTITY(uvec2(1u), ~ (~ (uvec2(1u))))))), (uvec2(0u, 0u) | (uvec2(1u))) / uvec2(1u, _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, clamp(1u, 1u, 1u))) << 0u)))), _GLF_IDENTITY(uvec2(1u), _GLF_IDENTITY(uvec2(0u, 0u), (_GLF_IDENTITY(uvec2(0u, 0u), uvec2(uvec3(uvec2(0u, 0u), 0u)))) | (_GLF_IDENTITY(uvec2(0u, 0u), (uvec2(0u, 0u)) | (uvec2(0u, 0u))))) | (uvec2(1u))))), 0u, 1u), min(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(1u), uvec2(0u, 0u) | (uvec2(1u))), max(_GLF_IDENTITY(uvec2(1u), _GLF_IDENTITY(_GLF_IDENTITY(uvec2(0u, 0u), (uvec2(0u, 0u)) << uvec2(0u, 0u)) | (_GLF_IDENTITY(uvec2(1u), clamp(uvec2(1u), uvec2(1u), _GLF_IDENTITY(uvec2(1u), ~ (~ (uvec2(1u))))))), (uvec2(0u, 0u) | (uvec2(1u))) / uvec2(1u, _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, clamp(1u, 1u, 1u))) << 0u)))), _GLF_IDENTITY(_GLF_IDENTITY(uvec2(1u), max(uvec2(1u), uvec2(1u))), _GLF_IDENTITY(uvec2(0u, 0u), (uvec2(0u, 0u)) | (_GLF_IDENTITY(uvec2(0u, 0u), (uvec2(0u, 0u)) | (uvec2(0u, 0u))))) | (uvec2(1u))))), 0u, 1u), uvec4(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(1u), uvec2(0u, 0u) | (uvec2(1u))), max(_GLF_IDENTITY(uvec2(1u), _GLF_IDENTITY(uvec2(0u, 0u) | (_GLF_IDENTITY(uvec2(1u), clamp(uvec2(1u), uvec2(1u), _GLF_IDENTITY(uvec2(1u), ~ (~ (uvec2(1u))))))), (uvec2(0u, 0u) | (uvec2(1u))) / uvec2(1u, _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, clamp(1u, 1u, 1u))) << _GLF_IDENTITY(0u, clamp(0u, 0u, _GLF_IDENTITY(0u, (0u) | (0u)))))))), _GLF_IDENTITY(uvec2(1u), _GLF_IDENTITY(uvec2(0u, 0u), (uvec2(0u, 0u)) | (_GLF_IDENTITY(_GLF_IDENTITY(uvec2(0u, 0u), ~ (_GLF_IDENTITY(~ (uvec2(0u, 0u)), _GLF_IDENTITY(uvec2(_GLF_IDENTITY(uvec2(~ (uvec2(0u, 0u))), min(uvec2(~ (uvec2(0u, 0u))), uvec2(~ (uvec2(0u, 0u)))))), max(uvec2(_GLF_IDENTITY(uvec2(~ (uvec2(0u, 0u))), min(uvec2(~ (uvec2(0u, 0u))), uvec2(~ (uvec2(0u, 0u)))))), uvec2(_GLF_IDENTITY(uvec2(~ (uvec2(0u, 0u))), min(uvec2(~ (uvec2(0u, 0u))), uvec2(~ (uvec2(0u, 0u))))))))))), (uvec2(0u, 0u)) | (uvec2(0u, 0u))))) | (uvec2(1u))))), 0u, 1u)))))), _GLF_IDENTITY(1, _GLF_IDENTITY(clamp(1, 1, 1), max(_GLF_IDENTITY(clamp(1, 1, 1), 0 | (clamp(1, 1, 1))), _GLF_IDENTITY(clamp(1, 1, 1), min(clamp(1, 1, _GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) | (1)), 1))), clamp(1, 1, 1))))))), _GLF_struct_7(mat3x4(1.0), _GLF_struct_6(mat4x2(1.0), vec4(1.0), mat2(1.0), uvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) + 0u))), 0u | (_GLF_IDENTITY(1u, (1u) + 0u))), (_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, (subgroup_size) >> 0u)) : _GLF_IDENTITY(_GLF_IDENTITY(1u, 0u | (_GLF_IDENTITY(1u, (1u) + 0u))), clamp(_GLF_IDENTITY(1u, 0u | (_GLF_IDENTITY(1u, (1u) + 0u))), _GLF_IDENTITY(1u, _GLF_IDENTITY(_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(subgroup_local_id) : 0u)) | (_GLF_IDENTITY(1u, (1u) + 0u)), (0u | (_GLF_IDENTITY(1u, (1u) + 0u))) << 0u)), _GLF_IDENTITY(1u, _GLF_IDENTITY(0u | (_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, (1u) | (1u)))))) + _GLF_IDENTITY(0u, (0u) | 0u))), min(_GLF_IDENTITY(0u | (_GLF_IDENTITY(1u, _GLF_IDENTITY((1u) + 0u, uint(uvec3(_GLF_IDENTITY((1u) + 0u, clamp((1u) + 0u, (1u) + 0u, (1u) + 0u)), 0u, 0u))))), max(0u | (_GLF_IDENTITY(1u, _GLF_IDENTITY((1u), uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec3((1u), 0u, 1u), ~ (~ (_GLF_IDENTITY(uvec3((1u), 0u, 1u), clamp(uvec3((1u), 0u, 1u), uvec3((1u), 0u, 1u), uvec3((1u), 0u, 1u)))))), (_GLF_IDENTITY(uvec3((1u), 0u, 1u), ~ (~ (_GLF_IDENTITY(uvec3((1u), 0u, 1u), clamp(uvec3((1u), 0u, 1u), uvec3((1u), 0u, 1u), uvec3((1u), 0u, 1u))))))) ^ uvec3(0u, 0u, 0u)))) + 0u)), _GLF_IDENTITY(0u | (_GLF_IDENTITY(1u, (1u) + 0u)), (0u | (_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) ^ 0u), (1u) + 0u))) / 1u))), 0u | (_GLF_IDENTITY(1u, _GLF_IDENTITY((1u) + 0u, ((1u) + 0u) ^ 0u)))))))), 0u | (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(_GLF_IDENTITY(1u, 0u | (_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) + 0u), clamp(_GLF_IDENTITY(1u, (1u) + 0u), _GLF_IDENTITY(1u, (1u) + 0u), _GLF_IDENTITY(1u, (1u) + 0u))))), clamp(_GLF_IDENTITY(1u, 0u | (_GLF_IDENTITY(1u, (1u) + 0u))), _GLF_IDENTITY(1u, _GLF_IDENTITY(0u | (_GLF_IDENTITY(1u, (1u) + 0u)), (0u | (_GLF_IDENTITY(1u, (1u) + 0u))) << 0u)), _GLF_IDENTITY(1u, _GLF_IDENTITY(0u | (_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, (1u) | (1u)))))) + _GLF_IDENTITY(0u, (0u) | 0u))), _GLF_IDENTITY(min(_GLF_IDENTITY(0u | (_GLF_IDENTITY(1u, _GLF_IDENTITY((1u) + 0u, uint(uvec3(_GLF_IDENTITY((1u) + 0u, clamp((1u) + 0u, (1u) + 0u, (1u) + 0u)), 0u, 0u))))), max(0u | (_GLF_IDENTITY(1u, _GLF_IDENTITY((1u), uint(_GLF_IDENTITY(uvec3((1u), 0u, 1u), ~ (~ (_GLF_IDENTITY(uvec3((1u), 0u, 1u), clamp(uvec3((1u), 0u, 1u), uvec3((1u), 0u, 1u), uvec3((1u), 0u, 1u)))))))) + 0u)), _GLF_IDENTITY(0u | (_GLF_IDENTITY(1u, (1u) + 0u)), (0u | (_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) ^ 0u), (1u) + 0u))) / 1u))), 0u | (_GLF_IDENTITY(1u, _GLF_IDENTITY((1u) + 0u, ((1u) + 0u) ^ 0u)))), min(_GLF_IDENTITY(min(_GLF_IDENTITY(0u | (_GLF_IDENTITY(1u, _GLF_IDENTITY((1u) + 0u, uint(uvec3(_GLF_IDENTITY((1u) + 0u, clamp((1u) + 0u, (1u) + 0u, (1u) + 0u)), 0u, 0u))))), max(0u | (_GLF_IDENTITY(1u, _GLF_IDENTITY((1u), uint(_GLF_IDENTITY(uvec3((1u), 0u, 1u), ~ (~ (_GLF_IDENTITY(uvec3((1u), 0u, 1u), clamp(uvec3((1u), 0u, 1u), uvec3((1u), 0u, 1u), uvec3((1u), 0u, 1u)))))))) + 0u)), _GLF_IDENTITY(0u | (_GLF_IDENTITY(1u, (1u) + 0u)), (0u | (_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) ^ 0u), (1u) + 0u))) / 1u))), 0u | (_GLF_IDENTITY(1u, _GLF_IDENTITY((1u) + 0u, ((1u) + 0u) ^ 0u)))), (min(_GLF_IDENTITY(0u | (_GLF_IDENTITY(1u, _GLF_IDENTITY((1u) + 0u, uint(uvec3(_GLF_IDENTITY((1u) + 0u, clamp((1u) + 0u, (1u) + 0u, (1u) + 0u)), 0u, 0u))))), max(0u | (_GLF_IDENTITY(1u, _GLF_IDENTITY((1u), uint(_GLF_IDENTITY(uvec3((1u), 0u, 1u), ~ (~ (_GLF_IDENTITY(uvec3((1u), 0u, 1u), clamp(uvec3((1u), 0u, 1u), uvec3((1u), 0u, 1u), uvec3((1u), 0u, 1u)))))))) + 0u)), _GLF_IDENTITY(0u | (_GLF_IDENTITY(1u, (1u) + 0u)), (0u | (_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) ^ 0u), (1u) + 0u))) / 1u))), 0u | (_GLF_IDENTITY(1u, _GLF_IDENTITY((1u) + 0u, ((1u) + 0u) ^ 0u))))) - 0u), min(_GLF_IDENTITY(0u | (_GLF_IDENTITY(1u, _GLF_IDENTITY((1u) + 0u, uint(uvec3(_GLF_IDENTITY((1u) + 0u, clamp((1u) + 0u, (1u) + 0u, (1u) + 0u)), 0u, 0u))))), max(0u | (_GLF_IDENTITY(1u, _GLF_IDENTITY((1u), uint(_GLF_IDENTITY(uvec3((1u), 0u, 1u), ~ (~ (_GLF_IDENTITY(uvec3((1u), 0u, 1u), clamp(uvec3((1u), 0u, 1u), uvec3((1u), 0u, 1u), uvec3((1u), 0u, 1u)))))))) + 0u)), _GLF_IDENTITY(0u | (_GLF_IDENTITY(1u, (1u) + 0u)), (0u | (_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) ^ 0u), (1u) + 0u))) / 1u))), 0u | (_GLF_IDENTITY(1u, _GLF_IDENTITY((1u) + 0u, ((1u) + 0u) ^ 0u))))))))))))))), vec2(1.0), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! (! (true)))))))), _GLF_struct_10(_GLF_struct_8(uvec3(1u), mat4x3(1.0), mat2(1.0), bvec3(_GLF_IDENTITY(true, true && (true))), ivec3(1)), vec4(1.0), _GLF_struct_9(mat4x3(1.0), mat3x4(1.0), mat4x2(1.0), 1u, mat3x2(1.0))), _GLF_struct_11(vec4(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(57.31) : _GLF_IDENTITY(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(50.33)), float(1.0), bool(true))), min(1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)))))))));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), false || (bool(false)))), (bool(_GLF_IDENTITY(bool(false), false || (bool(false))))) || _GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false || (false), (false || (false)) && true), false, false), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false || (false), (false || (false)) && true), false, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(false || (false), (false || (false)) && true), false, false))))))))))))))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true)))), _GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_TRUE(true)), _GLF_IDENTITY(bool(bvec2(! (_GLF_WRAPPED_IF_TRUE(true)), false)), (bool(bvec2(! (_GLF_WRAPPED_IF_TRUE(true)), false))) || false)))))), ! (! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_TRUE(true)), _GLF_IDENTITY(bool(bvec2(! (_GLF_WRAPPED_IF_TRUE(true)), false)), (bool(bvec2(! (_GLF_WRAPPED_IF_TRUE(true)), false))) || false)))))), (! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_TRUE(true)), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(! (_GLF_WRAPPED_IF_TRUE(true)), (! (_GLF_WRAPPED_IF_TRUE(true))) || false), false)), (bool(bvec2(! (_GLF_WRAPPED_IF_TRUE(true)), false))) || false))))))) || false)))))) && _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) && true)) && true), false, false)), (bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(true, true && (true))))), (_GLF_IDENTITY(true, (true) && true)) && true), false, false))) && true))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(5), int(5)), min(_GLF_IDENTITY(0 << _GLF_IDENTITY(int(5), int(5)), (0 << _GLF_IDENTITY(int(5), int(5))) << 0), 0 << _GLF_IDENTITY(int(_GLF_IDENTITY(5, int(int(_GLF_IDENTITY(5, (5) | 0))))), int(_GLF_IDENTITY(5, (5) | (5)))))))), (_GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(5), int(5)), min(_GLF_IDENTITY(0 << _GLF_IDENTITY(int(5), int(5)), (0 << _GLF_IDENTITY(int(5), int(5))) << _GLF_IDENTITY(0, (0) | (0))), _GLF_IDENTITY(0 << _GLF_IDENTITY(int(5), int(5)), int(ivec4(0 << _GLF_IDENTITY(int(5), int(5)), (0 ^ 0), 1, 1)))))))) || _GLF_IDENTITY(false, true && (false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(5), int(5)), min(_GLF_IDENTITY(0 << _GLF_IDENTITY(int(5), int(5)), (0 << _GLF_IDENTITY(int(5), int(5))) << 0), 0 << _GLF_IDENTITY(int(_GLF_IDENTITY(5, int(int(_GLF_IDENTITY(5, (5) | 0))))), int(_GLF_IDENTITY(5, (5) | (5)))))))), (_GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(5), int(5)), min(_GLF_IDENTITY(0 << _GLF_IDENTITY(int(5), int(5)), (0 << _GLF_IDENTITY(int(5), int(5))) << _GLF_IDENTITY(0, (0) | (0))), _GLF_IDENTITY(0 << _GLF_IDENTITY(int(5), int(5)), int(ivec4(0 << _GLF_IDENTITY(int(5), int(5)), (0 ^ 0), 1, 1)))))))) || _GLF_IDENTITY(false, true && (false)))), false || (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(5), int(5)), min(_GLF_IDENTITY(0 << _GLF_IDENTITY(int(5), int(5)), (0 << _GLF_IDENTITY(int(5), int(5))) << 0), 0 << _GLF_IDENTITY(int(_GLF_IDENTITY(5, int(int(_GLF_IDENTITY(5, (5) | 0))))), int(_GLF_IDENTITY(5, (5) | (5)))))))), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(5), int(5)), min(_GLF_IDENTITY(0 << _GLF_IDENTITY(int(5), int(5)), (0 << _GLF_IDENTITY(int(5), int(5))) << 0), 0 << _GLF_IDENTITY(int(_GLF_IDENTITY(5, int(int(_GLF_IDENTITY(5, (5) | 0))))), int(_GLF_IDENTITY(5, (5) | (5))))))))), ! (! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(0 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), (_GLF_IDENTITY(int(5), int(5))) >> 0), min(_GLF_IDENTITY(0 << _GLF_IDENTITY(int(5), int(5)), (0 << _GLF_IDENTITY(int(5), int(5))) << 0), 0 << _GLF_IDENTITY(int(_GLF_IDENTITY(5, int(int(_GLF_IDENTITY(5, (5) | 0))))), int(_GLF_IDENTITY(5, (5) | (5)))))))))))))), (_GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(5), int(5)), min(_GLF_IDENTITY(0 << _GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY((0 << _GLF_IDENTITY(int(5), int(5))) << _GLF_IDENTITY(0, (0) | (0)), min(_GLF_IDENTITY((0 << _GLF_IDENTITY(int(5), int(5))) << _GLF_IDENTITY(0, (0) | (0)), (_GLF_IDENTITY((0 << _GLF_IDENTITY(int(5), int(5))) << _GLF_IDENTITY(0, (0) | (0)), ((0 << _GLF_IDENTITY(int(5), int(5))) << _GLF_IDENTITY(0, (0) | (0))) / 1)) | 0), (0 << _GLF_IDENTITY(int(5), int(5))) << _GLF_IDENTITY(0, (0) | (0))))), _GLF_IDENTITY(0 << _GLF_IDENTITY(int(5), int(5)), int(ivec4(0 << _GLF_IDENTITY(int(5), int(5)), (0 ^ 0), 1, 1)))))))) || _GLF_IDENTITY(false, true && (false)))))))); _injected_loop_counter --)
        {
         if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(bool(bool(! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), (bool(bool(! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) && true)))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(bool(bool(! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), (bool(bool(! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) && true))))) || false))
          {
          }
         else
          {
           GLF_merged4_0_1_16_1_1_11_2_1_14_3_1_14next_virtual_gidvirtual_gidworkgroup_baseworkgroup_size.w = _GLF_struct_replacement_12._f1._f0.workgroup_size;
          }
        }
      }
     else
      {
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), ! (_GLF_IDENTITY(! (false), false || (! (false)))))))
      {
       for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), min(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x)))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / int(_GLF_ONE(1.0, injectionSwitch.y))) < 1); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
            return;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 return;
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                return;
              }
            }
           else
            {
             if(_GLF_DEAD(false))
              return;
            }
           if(_GLF_DEAD(false))
            continue;
          }
         else
          {
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
    }
  }
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = GLF_merged4_0_1_16_1_1_11_2_1_14_3_1_14next_virtual_gidvirtual_gidworkgroup_baseworkgroup_size.w * workgroup_id;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! _GLF_IDENTITY((! (true)), false || ((! (true)))))))
    {
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = (1 & (_GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), _GLF_IDENTITY((int(5)), 1 * ((int(5)))) | (0 | 0))), int(int(_GLF_IDENTITY(_GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), _GLF_IDENTITY((int(5)), 1 * ((int(5)))) | (0 | 0))), (false ? _GLF_FUZZED(41489) : _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), _GLF_IDENTITY((int(5)), 1 * ((int(5)))) | (0 | 0))))))))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (_GLF_IDENTITY(int(5), min(_GLF_IDENTITY(int(5), clamp(int(5), int(5), _GLF_IDENTITY(int(5), (true ? int(5) : _GLF_FUZZED(_GLF_IDENTITY(-65223, ~ (~ (-65223)))))))), int(5)))) >> 0)), ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) | (0 | 0)), 0 ^ (_GLF_IDENTITY(int(5), (int(5)) | (0 | 0)))))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) >> 0))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       GLF_merged4_0_1_16_1_1_11_2_1_14_3_1_14next_virtual_gidvirtual_gidworkgroup_baseworkgroup_size.z = workgroup_base;
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)), ! (! (bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true))))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, true && (true)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, true && (true)), true), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, true && (true)), true), bvec2(bvec2(bvec2(_GLF_IDENTITY(true, true && (true)), true)))), true)))), (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, true && (true)), true), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, true && (true)), true), bvec2(bvec2(bvec2(_GLF_IDENTITY(true, true && (true)), true)))), true))))) || false))))
            {
             if(_GLF_DEAD(false))
              return;
             return;
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 return;
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(false))
          return;
        }
      }
     else
      {
      }
    }
   else
    {
    }
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true), bvec2(bvec3(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true), true))))))
    {
    }
   else
    {
     return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, min(0, 0))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
  return;
 uint virtual_gid = _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_11_2_1_14_3_1_14next_virtual_gidvirtual_gidworkgroup_baseworkgroup_size.z + subgroup_id * _GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec2(subgroup_size, 1u), (uvec2(subgroup_size, 1u)) | (uvec2(subgroup_size, 1u))))) + _GLF_IDENTITY(subgroup_local_id, 0u | (_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id))) - 0u))), ~ (~ (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_11_2_1_14_3_1_14next_virtual_gidvirtual_gidworkgroup_baseworkgroup_size.z + subgroup_id * _GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec2(subgroup_size, 1u), (uvec2(subgroup_size, 1u)) | (uvec2(subgroup_size, 1u))))) + _GLF_IDENTITY(subgroup_local_id, 0u | (_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id))) - 0u))), (GLF_merged4_0_1_16_1_1_11_2_1_14_3_1_14next_virtual_gidvirtual_gidworkgroup_baseworkgroup_size.z + subgroup_id * _GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec2(subgroup_size, 1u), (uvec2(subgroup_size, 1u)) | (uvec2(subgroup_size, 1u))))) + _GLF_IDENTITY(subgroup_local_id, 0u | (_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id))) - 0u)))) | (GLF_merged4_0_1_16_1_1_11_2_1_14_3_1_14next_virtual_gidvirtual_gidworkgroup_baseworkgroup_size.z + subgroup_id * _GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec2(subgroup_size, 1u), (uvec2(subgroup_size, 1u)) | (uvec2(subgroup_size, 1u))))) + _GLF_IDENTITY(subgroup_local_id, 0u | (_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id))) - 0u))))))));
 do
  {
   if(_GLF_DEAD(false))
    break;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, vec2(mat4x3(injectionSwitch, 1.0, 0.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(69.76)))) / 1.0), 0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2x4(1.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(_GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, 1.0)), dot(vec2(1.0, 0.0), vec2(0.0, 1.0))), 1.0, 1.0)), _GLF_IDENTITY(dot(vec3(1.0, 0.0, _GLF_IDENTITY(0.0, float(vec3(0.0, sqrt(1.0), 1.0)))), vec3(_GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, 1.0)), dot(vec2(1.0, 0.0), vec2(0.0, 1.0))), 1.0, 1.0)), mix(float(_GLF_FUZZED(469.115)), float(dot(vec3(1.0, 0.0, 0.0), vec3(_GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, 1.0)), round(length(normalize(determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0))))) * (dot(vec2(1.0, 0.0), vec2(0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, float(vec4(1.0, 1.0, 1.0, 0.0)))), float(_GLF_FUZZED(((2.4 < -2.8) ? -2.8 : -6.4))), bool(false))))))), dot(vec2(1.0, 0.0), vec2(0.0, 1.0))), _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-191.667) : 1.0)), 1.0))), bool(true)))), sqrt(1.0), 0.0, 1.0, 1.0)), (float(mat2x4(1.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(_GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, 1.0)), dot(vec2(1.0, 0.0), vec2(0.0, 1.0))), 1.0, 1.0)), _GLF_IDENTITY(dot(vec3(1.0, 0.0, _GLF_IDENTITY(0.0, float(vec3(0.0, sqrt(1.0), 1.0)))), vec3(_GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, 1.0)), dot(vec2(1.0, 0.0), vec2(0.0, 1.0))), 1.0, 1.0)), mix(float(_GLF_FUZZED(469.115)), float(dot(vec3(1.0, 0.0, 0.0), vec3(_GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, 1.0)), round(length(normalize(determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0))))) * (dot(vec2(1.0, 0.0), vec2(0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, float(vec4(1.0, 1.0, 1.0, 0.0)))), float(_GLF_FUZZED(((2.4 < -2.8) ? -2.8 : -6.4))), bool(false))))))), dot(vec2(1.0, 0.0), vec2(0.0, 1.0))), _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-191.667) : 1.0)), 1.0))), bool(true)))), sqrt(1.0), 0.0, 1.0, 1.0))) * 1.0)), 1.0, 0.0, 0.0))))).y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y)))))))))
      {
       if(_GLF_DEAD(false))
        continue;
       return;
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      continue;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    continue;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, clamp(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / 1), _GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)), _injected_loop_counter)) != 1); _GLF_IDENTITY(_injected_loop_counter ++, (false ? _GLF_FUZZED((~ _injected_loop_counter)) : _injected_loop_counter ++)))
    {
     GLF_merged4_0_1_16_1_1_11_2_1_14_3_1_14next_virtual_gidvirtual_gidworkgroup_baseworkgroup_size.y = virtual_gid;
    }
  }
 else
  {
  }
 do
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       return;
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  return;
 uint next_virtual_gid = _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_11_2_1_14_3_1_14next_virtual_gidvirtual_gidworkgroup_baseworkgroup_size, (false ? _GLF_FUZZED(GLF_merged4_0_1_16_1_1_11_2_1_14_3_1_14next_virtual_gidvirtual_gidworkgroup_baseworkgroup_size) : GLF_merged4_0_1_16_1_1_11_2_1_14_3_1_14next_virtual_gidvirtual_gidworkgroup_baseworkgroup_size)).z + _GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(true ? _GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u) : _GLF_FUZZED(184814u), clamp(_GLF_IDENTITY(true ? _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id) << 0u, (true ? (_GLF_IDENTITY(subgroup_id, (subgroup_id) | 0u)) << 0u : _GLF_FUZZED(subgroup_id)))) : _GLF_FUZZED(184814u), (false ? _GLF_FUZZED(uvec2(131164u, 94740u)[0]) : _GLF_IDENTITY(true ? _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id) << 0u, (true ? (subgroup_id) << 0u : _GLF_FUZZED(subgroup_id)))) : _GLF_FUZZED(184814u), uint(_GLF_IDENTITY(uvec3(true ? _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id) << 0u, (true ? (subgroup_id) << 0u : _GLF_FUZZED(subgroup_id)))) : _GLF_FUZZED(184814u), 0u, 0u), (uvec3(_GLF_IDENTITY(true ? _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id))) << 0u, (true ? (subgroup_id) << 0u : _GLF_FUZZED(subgroup_id)))) : _GLF_FUZZED(184814u), (true ? _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id))) << 0u, (true ? (subgroup_id) << 0u : _GLF_FUZZED(subgroup_id)))) : _GLF_FUZZED(184814u)) << 0u), 0u, 0u)) ^ uvec3(0u, 0u, 0u)))))), true ? _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) - (_GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(subgroup_id))) >> _GLF_IDENTITY(uint(0u), _GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u)))), (subgroup_id) << 0u) : _GLF_FUZZED(184814u), true ? _GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u) : _GLF_FUZZED(184814u))))) * subgroup_size + (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)), (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id))) * (1u & 1u)) + 1), 0u | (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + 1, subgroup_local_id + 1))), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + 1, subgroup_local_id + 1))), (_GLF_IDENTITY(false ? _GLF_FUZZED(192824u) : (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + 1, subgroup_local_id + 1)), 1u * (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + 1, (true ? subgroup_local_id + 1 : _GLF_FUZZED(uint(62765))))) | (subgroup_local_id + 1)), (subgroup_local_id + 1) | _GLF_IDENTITY(0u, 1u * _GLF_IDENTITY((0u), min((0u), _GLF_IDENTITY((0u), (true ? (0u) : _GLF_FUZZED(workgroup_id))))))), min(subgroup_local_id + 1, subgroup_local_id + 1))))), min(false ? _GLF_FUZZED(192824u) : (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + 1, subgroup_local_id + 1)), 1u * (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | _GLF_IDENTITY(0u, 1u * (0u))), min(subgroup_local_id + 1, subgroup_local_id + 1))))), false ? _GLF_FUZZED(192824u) : (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY(min(subgroup_local_id + 1, subgroup_local_id + 1), (min(subgroup_local_id + 1, subgroup_local_id + 1)) | (min(subgroup_local_id + 1, subgroup_local_id + 1)))), _GLF_IDENTITY(1u * (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | _GLF_IDENTITY(0u, 1u * (0u))), min(subgroup_local_id + 1, subgroup_local_id + 1))), (1u * (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | _GLF_IDENTITY(0u, 1u * (0u))), min(subgroup_local_id + 1, subgroup_local_id + 1)))) >> 0u)))))))) / 1u))) % subgroup_size, _GLF_IDENTITY(min((subgroup_local_id + 1) % subgroup_size, _GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((subgroup_local_id + _GLF_IDENTITY(1, (1 ^ 1) ^ (1))) % _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size) / 1u, uint(_GLF_IDENTITY(uvec4((subgroup_size) / 1u, 1u, 0u, 1u), uvec4(0u, 0u, 0u, 0u) + (uvec4((subgroup_size) / 1u, 1u, 0u, 1u)))))), 0u + (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size))))) * 1u)), _GLF_IDENTITY(1u * (_GLF_IDENTITY(min(_GLF_IDENTITY((subgroup_local_id + 1), clamp((subgroup_local_id + 1), (subgroup_local_id + 1), (subgroup_local_id + 1))) % subgroup_size, _GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, uint(uvec4(_GLF_IDENTITY(subgroup_local_id, (true ? subgroup_local_id : _GLF_FUZZED(num_workgroup))), 1u, (31733u & 0u), (uint(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(uint(1u), uint(1u)))))), subgroup_local_id)) + 1) % subgroup_size, ((subgroup_local_id + 1) % subgroup_size) - 0u))))) * 1u)), clamp(min((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id))))) | 0u) + 1) % subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + _GLF_IDENTITY(1, 0 | (1))) + 0u)) % subgroup_size) * 1u), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, uint(uvec2(_GLF_IDENTITY(subgroup_local_id + 1, uint(uvec2(subgroup_local_id + 1, 0u))), 1u)))) % subgroup_size, ((subgroup_local_id + 1) % subgroup_size) * _GLF_IDENTITY(1u, 0u ^ (1u)))) + 0u)), min((subgroup_local_id + 1) % subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)), (_GLF_IDENTITY((subgroup_local_id + 1), 1u * (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) | ((subgroup_local_id + 1))))) % subgroup_size) * 1u), (true ? _GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((subgroup_local_id + 1) % subgroup_size) * 1u) : _GLF_FUZZED(num_workgroup)))), min((_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)) + _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, (_GLF_IDENTITY(false ? _GLF_FUZZED(-40198) : 1, min(false ? _GLF_FUZZED(-40198) : 1, false ? _GLF_FUZZED(-40198) : 1))))))) % subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u) + 1) % subgroup_size, (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, max(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + 1, uint(uvec4(subgroup_local_id + 1, 1u, 1u, 0u)))) >> 0u)) % subgroup_size, 1u * ((subgroup_local_id + 1) % subgroup_size)), (subgroup_local_id + _GLF_IDENTITY(1, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1 : _GLF_FUZZED(-50043)))) % subgroup_size))) * 1u))))), (1u * (_GLF_IDENTITY(min(_GLF_IDENTITY((subgroup_local_id + 1), clamp((subgroup_local_id + 1), (subgroup_local_id + 1), (subgroup_local_id + 1))) % subgroup_size, _GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, uint(uvec4(_GLF_IDENTITY(subgroup_local_id, (true ? subgroup_local_id : _GLF_FUZZED(num_workgroup))), 1u, (31733u & 0u), (uint(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(uint(1u), uint(1u)))))), subgroup_local_id)) + 1) % subgroup_size, ((subgroup_local_id + 1) % subgroup_size) - 0u))))) * 1u)), clamp(min((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id))))) | 0u) + 1) % subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + _GLF_IDENTITY(1, 0 | (1))) + 0u)) % subgroup_size) * 1u), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, uint(uvec2(_GLF_IDENTITY(subgroup_local_id + 1, uint(uvec2(subgroup_local_id + 1, 0u))), 1u)))) % subgroup_size, ((subgroup_local_id + 1) % subgroup_size) * _GLF_IDENTITY(1u, 0u ^ (1u)))) + 0u)), min((subgroup_local_id + 1) % subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)), (_GLF_IDENTITY((subgroup_local_id + 1), 1u * (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) | ((subgroup_local_id + 1))))) % subgroup_size) * 1u), (true ? _GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((subgroup_local_id + 1) % subgroup_size) * 1u) : _GLF_FUZZED(num_workgroup)))), min((_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)) + _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, (_GLF_IDENTITY(false ? _GLF_FUZZED(-40198) : 1, min(false ? _GLF_FUZZED(-40198) : 1, false ? _GLF_FUZZED(-40198) : 1))))))) % subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u) + 1) % subgroup_size, (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, max(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + 1, uint(uvec4(subgroup_local_id + 1, 1u, 1u, 0u)))) >> 0u)) % subgroup_size, 1u * ((subgroup_local_id + 1) % subgroup_size)), (subgroup_local_id + _GLF_IDENTITY(1, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1 : _GLF_FUZZED(-50043)))) % subgroup_size))) * 1u)))))) ^ (1u ^ uint(_GLF_ONE(1.0, injectionSwitch.y)))))));
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    return;
  }
 GLF_merged4_0_1_16_1_1_11_2_1_14_3_1_14next_virtual_gidvirtual_gidworkgroup_baseworkgroup_size.x = _GLF_IDENTITY(next_virtual_gid, (false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) >> 0u)));
 _GLF_IDENTITY(buf[GLF_merged4_0_1_16_1_1_11_2_1_14_3_1_14next_virtual_gidvirtual_gidworkgroup_baseworkgroup_size.y] = 1, (buf[GLF_merged4_0_1_16_1_1_11_2_1_14_3_1_14next_virtual_gidvirtual_gidworkgroup_baseworkgroup_size.y] = 1) ^ (0u ^ 0u));
 if(_GLF_DEAD(false))
  return;
 if(subgroup_local_id + 1 < subgroup_size)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
     return;
    }
   for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, bool(bool(_injected_loop_counter != 0)))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         return;
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
      {
      }
     else
      {
       buf[GLF_merged4_0_1_16_1_1_11_2_1_14_3_1_14next_virtual_gidvirtual_gidworkgroup_baseworkgroup_size.x] = 2;
       if(_GLF_DEAD(false))
        break;
      }
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)), (bool(bvec2(injectionSwitch.x > injectionSwitch.y, false))) && true)), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y))))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))))), bool(bvec3(! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))))), false, false))))))) || false), false, true, false))))), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED((_GLF_IDENTITY(59.92, mix(float(_GLF_FUZZED(79.50)), float(59.92), bool(true))) + 152.281))), float(injectionSwitch.y), bool(true))))), _GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), injectionSwitch, injectionSwitch), max(clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), injectionSwitch, injectionSwitch), _GLF_IDENTITY(clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), injectionSwitch, injectionSwitch), mat2(1.0) * (clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), injectionSwitch, injectionSwitch)))))).x > injectionSwitch.y))) && true, bool(bvec4((_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), injectionSwitch, injectionSwitch)).x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), injectionSwitch, injectionSwitch)).x > injectionSwitch.y)))))) && true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false)))))))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     subgroupAll(false);
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
       if(_GLF_DEAD(false))
        return;
      }
    }
   do
    {
     for(int _injected_loop_counter = (_GLF_IDENTITY(_GLF_IDENTITY(0, min(0, 0)), _GLF_IDENTITY(clamp(_GLF_IDENTITY(_GLF_IDENTITY(0, min(0, 0)), (_GLF_IDENTITY(0, min(0, 0))) | 0), _GLF_IDENTITY(0, min(0, 0)), _GLF_IDENTITY(0, min(0, 0))), (clamp(_GLF_IDENTITY(_GLF_IDENTITY(0, min(0, 0)), (_GLF_IDENTITY(0, min(0, 0))) | 0), _GLF_IDENTITY(0, min(0, 0)), _GLF_IDENTITY(0, min(0, 0)))) | (clamp(_GLF_IDENTITY(_GLF_IDENTITY(0, min(0, 0)), (_GLF_IDENTITY(0, min(0, 0))) | 0), _GLF_IDENTITY(0, min(0, 0)), _GLF_IDENTITY(0, min(0, 0)))))) ^ 0); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, ! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(_injected_loop_counter, max(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)), _injected_loop_counter)) < 1), ! (! (! (_injected_loop_counter < 1))))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! ((_GLF_IDENTITY(! (_GLF_IDENTITY(_injected_loop_counter, max(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)), _injected_loop_counter)) < 1), ! (! (! (_injected_loop_counter < 1)))))), (_GLF_IDENTITY(! ((_GLF_IDENTITY(! (_GLF_IDENTITY(_injected_loop_counter, max(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)), _injected_loop_counter)) < 1), ! (! (! (_injected_loop_counter < 1)))))), (! ((_GLF_IDENTITY(! (_GLF_IDENTITY(_injected_loop_counter, max(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)), _injected_loop_counter)) < 1), ! (! (! (_injected_loop_counter < 1))))))) || false)) || false), ! (! (_GLF_IDENTITY(! ((_GLF_IDENTITY(! (_GLF_IDENTITY(_injected_loop_counter, max(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)), _injected_loop_counter)) < 1), ! (! (! (_injected_loop_counter < 1)))))), (_GLF_IDENTITY(! ((_GLF_IDENTITY(! (_GLF_IDENTITY(_injected_loop_counter, max(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)), _injected_loop_counter)) < 1), ! (! (! (_injected_loop_counter < 1)))))), (! ((_GLF_IDENTITY(! (_GLF_IDENTITY(_injected_loop_counter, max(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)), _injected_loop_counter)) < 1), ! (! (_GLF_IDENTITY(! (_injected_loop_counter < 1), (_GLF_IDENTITY(! (_injected_loop_counter < 1), _GLF_IDENTITY(bool(bool(! (_injected_loop_counter < 1))), ! (! (bool(bool(! (_injected_loop_counter < 1)))))))) && true))))))) || false)) || false)))))))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         continue;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(true, true && (true)), true && (_GLF_IDENTITY(true, bool(bvec4(true, true, false, false))))) && (_GLF_IDENTITY(false, ! (! (false)))))))
        return;
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    {
     if(_GLF_DEAD(false))
      return;
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
            }
          }
         while(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false)))), bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false))))))));
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), bool(bvec4(bool(bvec2(false, true)), false, false, false))))), (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), bool(bvec4(bool(bvec2(false, true)), false, false, false)))))) || false))), false, false)))), bool(bool(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), bool(bvec4(bool(bvec2(false, true)), false, false, false))))), (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), bool(bvec4(bool(bvec2(false, true)), false, false, false)))))) || false))), false, false))))))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, 0.0, 0.0, 1.0, cos(0.0), 1.0))))).y))))
      {
       return;
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   buf[GLF_merged4_0_1_16_1_1_11_2_1_14_3_1_14next_virtual_gidvirtual_gidworkgroup_baseworkgroup_size.x] = 2;
   do
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          continue;
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(7, (_GLF_IDENTITY(7, (7) << 0)) - 0)))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (0) | (0))); _injected_loop_counter --)
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         subgroupAll(true);
        }
      }
    }
  }
}
