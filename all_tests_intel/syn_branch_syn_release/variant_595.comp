#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 & -34096)); _injected_loop_counter --)
            {
             barrier();
            }
          }
         else
          {
          }
        }
      }
     else
      {
      }
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
    barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat2x3(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(3.6)), float(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y), bool(true))), 0.0, log(1.0), abs(0.0), 0.0, 1.0)), clamp(_GLF_IDENTITY(float(mat2x3(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(_GLF_IDENTITY(3.6, (_GLF_IDENTITY(3.6, float(mat3x2(3.6, 1.0, 0.0, 1.0, 1.0, 1.0)))) / 1.0))), float(injectionSwitch.y), _GLF_IDENTITY(bool(true), false || (bool(true))))), 0.0, log(1.0), abs(0.0), 0.0, _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, (1.0) - sqrt(0.0)))))), max(float(mat2x3(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(3.6)), float(injectionSwitch.y), bool(true))), 0.0, log(1.0), abs(0.0), 0.0, 1.0)), float(mat2x3(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(mix(float(_GLF_FUZZED(3.6)), float(injectionSwitch.y), bool(true)), (_GLF_IDENTITY(mix(float(_GLF_FUZZED(3.6)), float(injectionSwitch.y), bool(true)), clamp(_GLF_IDENTITY(mix(float(_GLF_FUZZED(3.6)), float(injectionSwitch.y), bool(true)), max(mix(float(_GLF_FUZZED(3.6)), float(injectionSwitch.y), bool(true)), mix(float(_GLF_FUZZED(3.6)), float(injectionSwitch.y), bool(true)))), mix(float(_GLF_FUZZED(3.6)), float(injectionSwitch.y), bool(true)), mix(float(_GLF_FUZZED(3.6)), float(injectionSwitch.y), bool(true))))) / 1.0)), 0.0, log(1.0), abs(0.0), 0.0, 1.0)))), float(mat2x3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), mix(float(_GLF_FUZZED(3.6)), float(injectionSwitch.y), bool(true))), 0.0, log(1.0), abs(0.0), 0.0, 1.0)), float(mat2x3(_GLF_IDENTITY(injectionSwitch.y, mix(_GLF_IDENTITY(float(_GLF_FUZZED(3.6)), clamp(float(_GLF_FUZZED(3.6)), _GLF_IDENTITY(float(_GLF_FUZZED(3.6)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(float(_GLF_FUZZED(3.6)), min(float(_GLF_FUZZED(3.6)), float(_GLF_FUZZED(3.6)))) : _GLF_FUZZED(3916.4221))), float(_GLF_FUZZED(3.6)))), _GLF_IDENTITY(float(injectionSwitch.y), max(float(injectionSwitch.y), float(injectionSwitch.y))), bool(true))), 0.0, log(1.0), abs(0.0), 0.0, 1.0))))), (injectionSwitch.x > injectionSwitch.y) || false)))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) || false), (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
    }
   else
    {
    }
   return;
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bvec4(! (_GLF_DEAD(false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false)))), true && ((_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bvec4(! (_GLF_DEAD(false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false)))))), bool(bvec4(! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bvec4(! (_GLF_DEAD(false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, false || (false)), false)))), true, true, true)))))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, true, true))), (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)), (injectionSwitch) / vec2(1.0, 1.0)).y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, true, true))), (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)), (injectionSwitch) / vec2(1.0, 1.0)).y))), true && (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), bool(bvec3(false, true, true))), (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)), (injectionSwitch) / vec2(1.0, 1.0)).y)))))) && true))
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-3.4, -4.7)))), (false ? _GLF_FUZZED(vec2(4.3, -4.1)) : _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)))).x > injectionSwitch.y)))))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
          }
        }
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-72.88)), float(_GLF_IDENTITY(injectionSwitch.y, float(mat2x4(injectionSwitch.y, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0)))), bool(true))), clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), ! (! _GLF_IDENTITY((false || _GLF_IDENTITY((false), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false), bool(bvec4((false), false, true, false)))), true && (_GLF_IDENTITY(bool(_GLF_IDENTITY((false), bool(bvec4((false), false, true, false)))), bool(bvec4(bool(_GLF_IDENTITY((false), bool(bvec4((false), false, true, false)))), false, true, false)))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((false || (false)), ((false || (false))) && true)), false || (! (_GLF_IDENTITY((false || (false)), ((false || (false))) && true)))))))))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false, false)))))
          barrier();
         return;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          continue;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)))) || false))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true))))
            break;
           barrier();
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
    }
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     barrier();
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           barrier();
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
uint subgroup_size = 16;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bool(! (injectionSwitch.x > injectionSwitch.y)), ! (! (bool(! (injectionSwitch.x > injectionSwitch.y)))))))))))))
      break;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + sin(0.0)) > injectionSwitch.y))));
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), min(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      barrier();
    }
   barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true)))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
    }
  }
 else
  {
  }
 do
  {
   for(int _injected_loop_counter = int(_GLF_ONE(_GLF_IDENTITY(1.0, (1.0) / _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (false ? _GLF_FUZZED(82.05) : _GLF_ONE(1.0, injectionSwitch.y)))), _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > (44992 & 0), bool(bvec4(_GLF_IDENTITY(_injected_loop_counter > (44992 & 0), true && (_injected_loop_counter > (44992 & 0))), true, false, false)))); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) | (0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      barrier();
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize.x, (false ? _GLF_FUZZED(subgroup_size) : gl_WorkGroupSize.x));
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), clamp(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), min(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(int(4), int(4)))), _GLF_IDENTITY(int(4), int(4))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, 0 | (1))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))), bool(bvec4(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false, false))))
          {
           barrier();
          }
         else
          {
          }
        }
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         barrier();
        }
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))), (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true)))) || false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       else
        {
        }
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / cos(_GLF_ZERO(0.0, injectionSwitch.x))) > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false)))))))
          barrier();
        }
       else
        {
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (true) || false)))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
      }
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true)))), ! (! (bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true)))))))), true && (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true)))), ! (! (bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true)))))))), (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true)))), ! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true)))), (bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true))))) || false)))))) && true)))))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = (int((false ? false : true)) & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(ivec3(int(4), 1, (0 >> _GLF_IDENTITY(int(7), int(7))))), int(ivec3(_GLF_IDENTITY(int(ivec3(int(4), 1, (0 >> _GLF_IDENTITY(int(7), int(7))))), (int(ivec3(int(4), 1, (0 >> _GLF_IDENTITY(int(7), int(7)))))) | 0), 0, 0)))))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter ++)
          {
           return;
          }
        }
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-8559.3966), _GLF_FUZZED(-7.7)), bvec2(false, false))).x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           barrier();
          }
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3x4(injectionSwitch, 1.0, 0.0, 0.0, log(1.0), 0.0, 1.0, 0.0, 1.0, 0.0, 1.0), (mat3x4(injectionSwitch, 1.0, 0.0, 0.0, log(1.0), 0.0, 1.0, 0.0, 1.0, 0.0, 1.0)) - mat3x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), (false ? _GLF_FUZZED(vec2(46.67, -985.256)) : vec2(_GLF_IDENTITY(mat3x4(injectionSwitch, 1.0, 0.0, 0.0, log(1.0), 0.0, 1.0, 0.0, 1.0, 0.0, 1.0), (mat3x4(injectionSwitch, 1.0, 0.0, 0.0, log(1.0), 0.0, 1.0, 0.0, 1.0, 0.0, 1.0)) - mat3x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))), vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], max(_GLF_IDENTITY(injectionSwitch[1], max(_GLF_IDENTITY(injectionSwitch[1], min(injectionSwitch[1], injectionSwitch[1])), injectionSwitch[1])), injectionSwitch[1])))).y), ((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).y)) || false))));
 for(int _injected_loop_counter = _GLF_IDENTITY((0 ^ 0), max(_GLF_IDENTITY((0 ^ 0), clamp((0 ^ 0), (0 ^ 0), (0 ^ 0))), (0 ^ 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, min(0, 0))); _injected_loop_counter --)
      {
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), int(ivec3(int(3), 1, 1))))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) * 1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       barrier();
      }
    }
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(_GLF_IDENTITY(vec2(injectionSwitch.y, 1.0), clamp(vec2(injectionSwitch.y, 1.0), vec2(injectionSwitch.y, 1.0), vec2(injectionSwitch.y, 1.0)))), mix(float(float(_GLF_IDENTITY(vec2(injectionSwitch.y, 1.0), clamp(vec2(injectionSwitch.y, 1.0), vec2(injectionSwitch.y, 1.0), vec2(injectionSwitch.y, 1.0))))), float(_GLF_FUZZED(576.383)), bool(false)))), _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))))) ? _GLF_IDENTITY(0, clamp(0, 0, 0)) : _GLF_FUZZED(_GLF_IDENTITY(-9479, (-9479) << 0))))); _injected_loop_counter --)
      {
       barrier();
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch)).y))))
    {
     do
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || _GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true), (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY((false), false || ((false))) || false))))))
          continue;
        }
       else
        {
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               barrier();
              }
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false))))), ! (! (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false))))))))))
          continue;
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id) | (subgroup_local_id), uint(uint((subgroup_local_id) | (subgroup_local_id)))), uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id), 0u | (_GLF_IDENTITY((subgroup_local_id), ((subgroup_local_id)) >> 0u))) | (subgroup_local_id), _GLF_IDENTITY(((subgroup_local_id) | _GLF_IDENTITY((subgroup_local_id), max(_GLF_IDENTITY((subgroup_local_id), uint(uvec2((subgroup_local_id), 1u))), (subgroup_local_id)))), (_GLF_IDENTITY(((subgroup_local_id) | (subgroup_local_id)), clamp(((subgroup_local_id) | (subgroup_local_id)), (_GLF_IDENTITY((subgroup_local_id), uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY((subgroup_local_id), 0u ^ ((subgroup_local_id))), (0u | 0u), 0u), (true ? _GLF_IDENTITY(uvec3(_GLF_IDENTITY((subgroup_local_id), 0u ^ ((subgroup_local_id))), (0u | 0u), 0u), min(uvec3(_GLF_IDENTITY((subgroup_local_id), 0u ^ ((subgroup_local_id))), (0u | 0u), 0u), uvec3(_GLF_IDENTITY((subgroup_local_id), 0u ^ ((subgroup_local_id))), (0u | 0u), 0u))) : _GLF_FUZZED(uvec3(120161u, 4778u, 2051u)))))) | (subgroup_local_id)), _GLF_IDENTITY(((subgroup_local_id) | (subgroup_local_id)), (_GLF_IDENTITY(((subgroup_local_id) | (subgroup_local_id)), ~ (~ (_GLF_IDENTITY(((subgroup_local_id) | (subgroup_local_id)), (((subgroup_local_id) | (subgroup_local_id))) | 0u))))) >> 0u)))) | (((subgroup_local_id) | (subgroup_local_id)))) ^ 0u), 0u, 0u, 0u), (uvec4(_GLF_IDENTITY((subgroup_local_id) | (subgroup_local_id), ((subgroup_local_id) | (subgroup_local_id)) ^ 0u), 0u, 0u, 0u)) | (_GLF_IDENTITY(uvec4(_GLF_IDENTITY((subgroup_local_id) | (subgroup_local_id), ((subgroup_local_id) | (subgroup_local_id)) ^ 0u), 0u, 0u, 0u), max(uvec4(_GLF_IDENTITY((subgroup_local_id) | (_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id)))), ((subgroup_local_id) | (subgroup_local_id)) ^ 0u), 0u, 0u, 0u), uvec4(_GLF_IDENTITY((subgroup_local_id) | (subgroup_local_id), ((subgroup_local_id) | _GLF_IDENTITY((subgroup_local_id), 1u * (_GLF_IDENTITY((subgroup_local_id), (true ? (subgroup_local_id) : _GLF_FUZZED(workgroup_id)))))) ^ 0u), 0u, 0u, 0u)))))))), (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, ~ (~ (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u))))) | (subgroup_local_id), uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id))), (~ (_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)))) - 0u))), subgroup_local_id))) | _GLF_IDENTITY((subgroup_local_id), uint(uvec3((subgroup_local_id), 1u, 0u))), ((subgroup_local_id) | (subgroup_local_id)) ^ 0u), 0u, _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, min(0u, 0u))) / 1u), 0u), (uvec4(_GLF_IDENTITY((subgroup_local_id) | (subgroup_local_id), (_GLF_IDENTITY((subgroup_local_id) | (subgroup_local_id), (_GLF_IDENTITY((subgroup_local_id), _GLF_IDENTITY((false ? _GLF_FUZZED(atomicAnd(workgroup_base, 89809u)) : (subgroup_local_id)), ((false ? _GLF_FUZZED(atomicAnd(workgroup_base, 89809u)) : (subgroup_local_id))) >> 0u)) | (subgroup_local_id)) / 1u)) ^ 0u), 0u, 0u, 0u)) | _GLF_IDENTITY((_GLF_IDENTITY(uvec4(_GLF_IDENTITY((subgroup_local_id) | (subgroup_local_id), ((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) / 1u)) | (subgroup_local_id)) ^ 0u), 0u, 0u, 0u), _GLF_IDENTITY(max(uvec4(_GLF_IDENTITY((subgroup_local_id) | (subgroup_local_id), _GLF_IDENTITY(((subgroup_local_id) | (subgroup_local_id)), (_GLF_IDENTITY(false, false || (false)) ? _GLF_FUZZED(130945u) : ((subgroup_local_id) | _GLF_IDENTITY((subgroup_local_id), (_GLF_IDENTITY((subgroup_local_id), ((subgroup_local_id)) ^ 0u)) | ((subgroup_local_id)))))) ^ 0u), 0u, _GLF_IDENTITY(0u, (0u) >> 0u), 0u), uvec4(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id) | (subgroup_local_id), ((subgroup_local_id) | (subgroup_local_id)) ^ 0u), (_GLF_IDENTITY((subgroup_local_id) | (subgroup_local_id), ((subgroup_local_id) | (subgroup_local_id)) ^ 0u)) - uint(_GLF_ZERO(0.0, injectionSwitch.x))), 0u, 0u, 0u)), (false ? _GLF_FUZZED(uvec4(102636u, 193247u, 114135u, 140328u)) : max(uvec4(_GLF_IDENTITY((subgroup_local_id) | (subgroup_local_id), _GLF_IDENTITY(((subgroup_local_id) | (subgroup_local_id)), (_GLF_IDENTITY(false, false || (false)) ? _GLF_FUZZED(130945u) : ((subgroup_local_id) | _GLF_IDENTITY((subgroup_local_id), _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id), ((subgroup_local_id)) ^ 0u)) | ((subgroup_local_id)), min((_GLF_IDENTITY((subgroup_local_id), ((subgroup_local_id)) ^ 0u)) | ((subgroup_local_id)), (_GLF_IDENTITY((subgroup_local_id), ((subgroup_local_id)) ^ 0u)) | ((subgroup_local_id)))))))) ^ 0u), 0u, _GLF_IDENTITY(0u, (0u) >> 0u), 0u), uvec4(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id) | (subgroup_local_id), _GLF_IDENTITY(((subgroup_local_id) | (subgroup_local_id)), min(((subgroup_local_id) | (subgroup_local_id)), _GLF_IDENTITY(((subgroup_local_id) | (subgroup_local_id)), ~ (~ (((subgroup_local_id) | (subgroup_local_id))))))) ^ 0u), (_GLF_IDENTITY((subgroup_local_id) | (subgroup_local_id), ((subgroup_local_id) | (subgroup_local_id)) ^ 0u)) - uint(_GLF_ZERO(0.0, injectionSwitch.x))), 0u, 0u, 0u)))))), ((_GLF_IDENTITY(uvec4(_GLF_IDENTITY((subgroup_local_id) | (subgroup_local_id), ((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) / 1u)) | (subgroup_local_id)) ^ 0u), 0u, 0u, 0u), max(uvec4(_GLF_IDENTITY((subgroup_local_id) | (subgroup_local_id), _GLF_IDENTITY(((subgroup_local_id) | (subgroup_local_id)), (_GLF_IDENTITY(false, false || (false)) ? _GLF_FUZZED(130945u) : ((subgroup_local_id) | _GLF_IDENTITY((subgroup_local_id), (_GLF_IDENTITY((subgroup_local_id), ((subgroup_local_id)) ^ 0u)) | ((subgroup_local_id)))))) ^ 0u), 0u, _GLF_IDENTITY(0u, (0u) >> 0u), 0u), uvec4(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id) | (subgroup_local_id), ((subgroup_local_id) | (subgroup_local_id)) ^ 0u), (_GLF_IDENTITY((subgroup_local_id) | (subgroup_local_id), ((subgroup_local_id) | (subgroup_local_id)) ^ 0u)) - uint(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(0u, (0u) << 0u), 0u, 0u))))) | _GLF_IDENTITY(uvec4(0u, 0u, 0u, 0u), min(uvec4(0u, 0u, 0u, 0u), uvec4(0u, 0u, 0u, 0u)))))))), (_GLF_IDENTITY(workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) + _GLF_IDENTITY(0u, min(0u, 0u)))) ^ 0u)) - 0u) + _GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id) | (subgroup_local_id), uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY((subgroup_local_id) | (subgroup_local_id), ((subgroup_local_id) | (subgroup_local_id)) ^ _GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, (0u) >> 0u), 0u, 0u)), _GLF_IDENTITY(0u, uint(uint(0u))), 0u))), 0u, 0u, 0u), (uvec4(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id) | (subgroup_local_id), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((subgroup_local_id) | (subgroup_local_id), ((subgroup_local_id) | (subgroup_local_id)) >> 0u)), 0u | (~ (_GLF_IDENTITY((subgroup_local_id) | (subgroup_local_id), ((subgroup_local_id) | (subgroup_local_id)) >> 0u)))))), ((subgroup_local_id) | (subgroup_local_id)) ^ 0u), 0u, 0u, 0u)) | (_GLF_IDENTITY(uvec4(_GLF_IDENTITY((subgroup_local_id) | (subgroup_local_id), _GLF_IDENTITY(((subgroup_local_id) | (subgroup_local_id)) ^ 0u, (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(((subgroup_local_id) | (subgroup_local_id)) ^ 0u, ((_GLF_IDENTITY((subgroup_local_id), uint(uvec4((subgroup_local_id), 1u, 0u, 0u))) | (subgroup_local_id)) ^ 0u) << 0u)))), 0u, 0u, _GLF_IDENTITY(0u, min(0u, 0u))), max(uvec4(_GLF_IDENTITY((subgroup_local_id) | (subgroup_local_id), ((subgroup_local_id) | (subgroup_local_id)) ^ _GLF_IDENTITY(_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(workgroup_size) : 0u)), (_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(workgroup_size) : 0u))) >> 0u)), 0u, 0u, 0u), uvec4(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id) | (subgroup_local_id), ((subgroup_local_id) | (subgroup_local_id)) ^ 0u), (_GLF_IDENTITY((subgroup_local_id) | (subgroup_local_id), ((subgroup_local_id) | (subgroup_local_id)) ^ 0u)) - 0u), 0u, 0u, 0u)))))))), ~ (~ (_GLF_IDENTITY(workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) + _GLF_IDENTITY(0u, min(0u, 0u)))) ^ 0u)) - 0u), ~ (~ (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) + _GLF_IDENTITY(0u, min(0u, 0u)))) ^ 0u)) - 0u)))) + _GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id) | _GLF_IDENTITY((subgroup_local_id), clamp((subgroup_local_id), (subgroup_local_id), (subgroup_local_id))), uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY((subgroup_local_id) | (subgroup_local_id), ((subgroup_local_id) | _GLF_IDENTITY((subgroup_local_id), ((subgroup_local_id)) + 0u)) ^ _GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, _GLF_IDENTITY((0u) >> 0u, ((0u) >> 0u) | ((0u) >> 0u))), 0u, 0u)), _GLF_IDENTITY(0u, uint(uint(0u))), 0u))), _GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, (0u) / ((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u)))), 0u)), 0u, 0u), (uvec4(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id) | (subgroup_local_id), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((subgroup_local_id) | (subgroup_local_id), ((subgroup_local_id) | (subgroup_local_id)) >> 0u)), 0u | (~ (_GLF_IDENTITY((subgroup_local_id) | (subgroup_local_id), ((subgroup_local_id) | (subgroup_local_id)) >> 0u)))))), ((subgroup_local_id) | (subgroup_local_id)) ^ 0u), 0u, 0u, 0u)) | (_GLF_IDENTITY(uvec4(_GLF_IDENTITY((subgroup_local_id) | (subgroup_local_id), _GLF_IDENTITY(_GLF_IDENTITY(((subgroup_local_id) | (subgroup_local_id)) ^ 0u, (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(((subgroup_local_id) | (subgroup_local_id)) ^ 0u, ((_GLF_IDENTITY((subgroup_local_id), uint(uvec4((subgroup_local_id), 1u, 0u, 0u))) | (subgroup_local_id)) ^ 0u) << 0u))), (_GLF_IDENTITY(((subgroup_local_id) | (subgroup_local_id)) ^ 0u, (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(((subgroup_local_id) | (subgroup_local_id)) ^ 0u, ((_GLF_IDENTITY((subgroup_local_id), uint(uvec4((subgroup_local_id), 1u, 0u, 0u))) | (subgroup_local_id)) ^ 0u) << 0u)))) | 0u)), 0u, 0u, _GLF_IDENTITY(0u, min(0u, 0u))), max(uvec4(_GLF_IDENTITY((subgroup_local_id) | (subgroup_local_id), ((subgroup_local_id) | (subgroup_local_id)) ^ _GLF_IDENTITY(_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(workgroup_size) : 0u)), (_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(workgroup_size) : _GLF_IDENTITY(0u, 0u | (0u))))) >> 0u)), 0u, 0u, 0u), uvec4(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id) | (subgroup_local_id), ((subgroup_local_id) | (subgroup_local_id)) ^ 0u), (_GLF_IDENTITY((subgroup_local_id) | (subgroup_local_id), ((subgroup_local_id) | (subgroup_local_id)) ^ 0u)) - 0u), 0u, 0u, 0u)))))))))))) / 1u)) + 0u);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y, 0.0 + (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
   barrier();
  }
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (true ? _GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)) : _GLF_FUZZED((~ 161032u)))) + subgroup_id * subgroup_size + ((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) - 0u)) % subgroup_size), clamp(workgroup_base + _GLF_IDENTITY(subgroup_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (subgroup_id)) * subgroup_size + ((subgroup_local_id + 1) % subgroup_size), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)) * _GLF_IDENTITY(subgroup_size, (subgroup_size) | 0u) + (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, 0u + ((subgroup_local_id + 1) % subgroup_size))) << 0u)), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)) * subgroup_size + (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, 0u + ((subgroup_local_id + 1) % subgroup_size))) << 0u)), (workgroup_base + _GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)) * subgroup_size + (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, 0u + ((subgroup_local_id + 1) % subgroup_size))) << 0u))) | 0u), clamp(_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)) * subgroup_size + (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, 0u + ((subgroup_local_id + 1) % subgroup_size))) << 0u)), (workgroup_base + _GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)) * subgroup_size + (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, 0u + ((subgroup_local_id + 1) % subgroup_size))) << 0u))) | 0u), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)) * subgroup_size + (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, 0u + ((subgroup_local_id + 1) % subgroup_size))) << 0u)), (workgroup_base + _GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)) * subgroup_size + (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, 0u + ((subgroup_local_id + 1) % subgroup_size))) << 0u))) | 0u), uint(uvec3(_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)) * subgroup_size + (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, 0u + ((subgroup_local_id + 1) % subgroup_size))) << 0u)), (workgroup_base + _GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)) * subgroup_size + (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, 0u + ((subgroup_local_id + 1) % subgroup_size))) << 0u))) | 0u), 0u, 1u))), _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)) * subgroup_size + (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, 0u + ((subgroup_local_id + 1) % subgroup_size))) << 0u)), (workgroup_base + _GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)) * subgroup_size + (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, 0u + ((subgroup_local_id + 1) % subgroup_size))) << 0u))) | 0u)))) - _GLF_IDENTITY((uint(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(uint(1u), uint(1u))), (_GLF_IDENTITY((uint(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(uint(1u), uint(1u))), ((uint(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(uint(1u), uint(1u)))) | ((uint(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(uint(1u), uint(1u)))))) | (_GLF_IDENTITY((uint(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(uint(1u), uint(1u))), min((uint(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(uint(1u), uint(1u))), (uint(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(uint(1u), uint(1u)))))))), clamp(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + ((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) * (1u | 0u)) + 1) % subgroup_size), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, (true ? _GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, 0u + ((subgroup_local_id + 1) % subgroup_size)) : _GLF_FUZZED((workgroup_base + workgroup_id))))), uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size), max(workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size), _GLF_IDENTITY(workgroup_base, ~ (~ (_GLF_IDENTITY(workgroup_base, (workgroup_base) >> 0u)))) + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size))))), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, _GLF_IDENTITY(workgroup_base, (false ? _GLF_IDENTITY(_GLF_FUZZED(virtual_gid), (_GLF_FUZZED(virtual_gid)) / 1u) : workgroup_base)))) + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size), 0u | (_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, (0u ^ 0u) ^ (subgroup_id * subgroup_size)) + ((subgroup_local_id + 1) % subgroup_size), (workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY((0u << _GLF_IDENTITY(uint(_GLF_IDENTITY(4u, ~ (~ (4u)))), uint(4u))), ((0u << _GLF_IDENTITY(uint(4u), uint(4u)))) / 1u) | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(subgroup_id, _GLF_IDENTITY(subgroup_id, clamp(subgroup_id, subgroup_id, subgroup_id)))) * subgroup_size, (false ? _GLF_FUZZED(workgroup_base) : subgroup_id * subgroup_size)))) + ((subgroup_local_id + 1) % subgroup_size)) >> 0u)))) >> 0u)) * 1u), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + subgroup_id * subgroup_size) | (0u >> _GLF_IDENTITY(uint(2u), _GLF_IDENTITY(uint(2u), min(uint(2u), uint(2u)))))) + ((subgroup_local_id + 1) % subgroup_size), ~ (~ (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + subgroup_id * subgroup_size) | (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(2u), _GLF_IDENTITY(uint(2u), min(uint(2u), uint(2u)))), max(_GLF_IDENTITY(_GLF_IDENTITY(uint(2u), _GLF_IDENTITY(uint(2u), min(uint(2u), uint(2u)))), (_GLF_IDENTITY(uint(2u), _GLF_IDENTITY(uint(2u), min(uint(2u), uint(2u))))) * 1u), _GLF_IDENTITY(uint(2u), _GLF_IDENTITY(uint(2u), min(uint(2u), uint(2u)))))))) + ((subgroup_local_id + 1) % subgroup_size)))), _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size), (true ? _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u) * _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(num_workgroup) : subgroup_size))) | (subgroup_size))) | (subgroup_size)), (workgroup_base + _GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u) * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(num_workgroup) : subgroup_size))) | (subgroup_size))) | (subgroup_size)), (true ? _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(num_workgroup) : subgroup_size))) | (subgroup_size))) | (subgroup_size)) : _GLF_FUZZED(num_workgroup)))) / 1u) + ((subgroup_local_id + 1) % subgroup_size) : _GLF_FUZZED(num_workgroup))))), workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) ^ 0u) + ((subgroup_local_id + 1) % subgroup_size)));
 do
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (-22825 & (0 << _GLF_IDENTITY(int(2), int(2))))), (_GLF_WRAPPED_LOOP(_injected_loop_counter != (-22825 & (0 << _GLF_IDENTITY(int(2), int(2)))))) && true); _injected_loop_counter --)
    {
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        barrier();
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       buf[virtual_gid] = 1;
       do
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             barrier();
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(false))
        break;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 else
  {
  }
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)), clamp(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)), subgroup_local_id)) + 1 < subgroup_size)
      {
       int i = _GLF_IDENTITY(0, (0) / _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(20088))));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))))
          {
          }
         else
          {
           barrier();
          }
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)) && true))
        {
         for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(1 & 1, clamp(_GLF_IDENTITY(1 & 1, clamp(1 & 1, 1 & 1, 1 & 1)), _GLF_IDENTITY(1 & 1, int(ivec4(1 & 1, 0, 1, 1))), _GLF_IDENTITY(1 & 1, ~ (~ (1 & 1))))))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               do
                {
                 do
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(false))
                      return;
                     barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   else
                    {
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
           return;
          }
         do
          {
           do
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false))))))))));
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             return;
             if(_GLF_DEAD(false))
              continue;
            }
          }
         while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_LOOP(false), false, true, true)), ! (_GLF_IDENTITY(! (bool(bvec4(_GLF_WRAPPED_LOOP(false), false, true, true))), (! (bool(bvec4(_GLF_WRAPPED_LOOP(false), false, true, true)))) || false)))));
        }
       do
        {
         do
          {
           atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, 0u | (next_virtual_gid))], _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(2, (false ? _GLF_FUZZED(11904) : 2)), (_GLF_IDENTITY(2, (false ? _GLF_IDENTITY(_GLF_FUZZED(11904), (_GLF_FUZZED(11904)) | (0 & -71243)) : 2))) | (_GLF_IDENTITY(_GLF_IDENTITY(2, _GLF_IDENTITY((false ? _GLF_FUZZED(11904) : 2), (false ? _GLF_FUZZED(75275) : (false ? _GLF_FUZZED(11904) : 2)))), (_GLF_IDENTITY(2, (false ? _GLF_FUZZED(11904) : 2))) ^ 0))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(2, (_GLF_IDENTITY(false ? _GLF_FUZZED(11904) : 2, ~ (~ (false ? _GLF_FUZZED(11904) : 2))))), (_GLF_IDENTITY(2, (false ? _GLF_IDENTITY(_GLF_FUZZED(11904), (_GLF_FUZZED(11904)) | (0 & -71243)) : 2))) | (_GLF_IDENTITY(_GLF_IDENTITY(2, (_GLF_IDENTITY(false ? _GLF_FUZZED(11904) : 2, (false ? _GLF_FUZZED(11904) : 2) * 1))), (_GLF_IDENTITY(2, (_GLF_IDENTITY(false ? _GLF_FUZZED(11904) : 2, (_GLF_IDENTITY(false ? _GLF_FUZZED(11904) : 2, ~ (~ (false ? _GLF_FUZZED(11904) : 2)))) | (false ? _GLF_FUZZED(11904) : 2))))) ^ 0))), _GLF_IDENTITY(_GLF_IDENTITY(2, (false ? _GLF_FUZZED(11904) : 2)), (_GLF_IDENTITY(2, (false ? _GLF_IDENTITY(_GLF_FUZZED(11904), (_GLF_FUZZED(11904)) | (0 & -71243)) : 2))) | (_GLF_IDENTITY(_GLF_IDENTITY(2, (false ? _GLF_FUZZED(11904) : 2)), (_GLF_IDENTITY(2, (false ? _GLF_FUZZED(11904) : 2))) ^ 0))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(2, (false ? _GLF_FUZZED(11904) : 2)), (_GLF_IDENTITY(2, (false ? _GLF_IDENTITY(_GLF_FUZZED(11904), (_GLF_FUZZED(11904)) | (0 & -71243)) : 2))) | (_GLF_IDENTITY(_GLF_IDENTITY(2, (false ? _GLF_FUZZED(11904) : 2)), (_GLF_IDENTITY(2, (false ? _GLF_FUZZED(11904) : 2))) ^ 0))), min(_GLF_IDENTITY(_GLF_IDENTITY(2, (false ? _GLF_FUZZED(11904) : 2)), (_GLF_IDENTITY(2, (false ? _GLF_IDENTITY(_GLF_FUZZED(11904), (_GLF_FUZZED(11904)) | (0 & -71243)) : 2))) | (_GLF_IDENTITY(_GLF_IDENTITY(2, (false ? _GLF_FUZZED(11904) : 2)), (_GLF_IDENTITY(2, (false ? _GLF_FUZZED(11904) : 2))) ^ 0))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(2, (false ? _GLF_FUZZED(11904) : 2)), (_GLF_IDENTITY(2, (false ? _GLF_IDENTITY(_GLF_FUZZED(11904), (_GLF_FUZZED(11904)) | (0 & -71243)) : 2))) | (_GLF_IDENTITY(_GLF_IDENTITY(2, (false ? _GLF_FUZZED(11904) : 2)), (_GLF_IDENTITY(2, (false ? _GLF_FUZZED(11904) : 2))) ^ 0))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(2, (false ? _GLF_FUZZED(11904) : 2)), (_GLF_IDENTITY(2, (false ? _GLF_IDENTITY(_GLF_FUZZED(11904), (_GLF_FUZZED(11904)) | (0 & -71243)) : 2))) | (_GLF_IDENTITY(_GLF_IDENTITY(2, (false ? _GLF_FUZZED(11904) : 2)), (_GLF_IDENTITY(2, (false ? _GLF_FUZZED(11904) : 2))) ^ 0))), _GLF_IDENTITY(_GLF_IDENTITY(2, (false ? _GLF_FUZZED(11904) : 2)), (_GLF_IDENTITY(2, (false ? _GLF_IDENTITY(_GLF_FUZZED(11904), (_GLF_FUZZED(11904)) | (0 & -71243)) : 2))) | (_GLF_IDENTITY(_GLF_IDENTITY(2, (false ? _GLF_FUZZED(11904) : 2)), (_GLF_IDENTITY(2, (false ? _GLF_FUZZED(11904) : 2))) ^ 0))), _GLF_IDENTITY(_GLF_IDENTITY(2, (false ? _GLF_FUZZED(11904) : 2)), (_GLF_IDENTITY(2, (false ? _GLF_IDENTITY(_GLF_FUZZED(11904), (_GLF_FUZZED(11904)) | (0 & -71243)) : 2))) | (_GLF_IDENTITY(_GLF_IDENTITY(2, (false ? _GLF_FUZZED(11904) : 2)), (_GLF_IDENTITY(2, (false ? _GLF_FUZZED(11904) : 2))) ^ 0))))))), _GLF_IDENTITY((false ? _GLF_FUZZED(i) : _GLF_IDENTITY(_GLF_IDENTITY(2, (false ? _GLF_FUZZED(11904) : 2)), (_GLF_IDENTITY(_GLF_IDENTITY(2, (2) + 0), (false ? _GLF_IDENTITY(_GLF_FUZZED(11904), (_GLF_FUZZED(11904)) | (0 & -71243)) : 2))) | (_GLF_IDENTITY(_GLF_IDENTITY(2, (false ? _GLF_FUZZED(11904) : _GLF_IDENTITY(2, min(2, _GLF_IDENTITY(2, ~ (~ (2))))))), (_GLF_IDENTITY(2, (false ? _GLF_FUZZED(11904) : 2))) ^ 0)))), ((false ? _GLF_FUZZED(i) : _GLF_IDENTITY(_GLF_IDENTITY(2, (false ? _GLF_FUZZED(11904) : 2)), (_GLF_IDENTITY(_GLF_IDENTITY(2, (2) + 0), (false ? _GLF_IDENTITY(_GLF_FUZZED(11904), (_GLF_FUZZED(11904)) | (0 & -71243)) : 2))) | (_GLF_IDENTITY(_GLF_IDENTITY(2, (false ? _GLF_FUZZED(11904) : _GLF_IDENTITY(2, min(2, _GLF_IDENTITY(2, ~ (~ (2))))))), (_GLF_IDENTITY(2, (false ? _GLF_FUZZED(11904) : 2))) ^ 0))))) * 1))))), (uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(2, (false ? _GLF_FUZZED(11904) : 2)), (_GLF_IDENTITY(2, (false ? _GLF_IDENTITY(_GLF_FUZZED(11904), (_GLF_FUZZED(11904)) | (0 & -71243)) : 2))) | (_GLF_IDENTITY(_GLF_IDENTITY(2, _GLF_IDENTITY((false ? _GLF_FUZZED(11904) : 2), (false ? _GLF_FUZZED(75275) : (false ? _GLF_FUZZED(11904) : 2)))), (_GLF_IDENTITY(2, (false ? _GLF_FUZZED(11904) : 2))) ^ 0))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(2, (_GLF_IDENTITY(false ? _GLF_FUZZED(11904) : 2, ~ (~ (false ? _GLF_FUZZED(11904) : 2))))), (_GLF_IDENTITY(2, (false ? _GLF_IDENTITY(_GLF_FUZZED(11904), (_GLF_FUZZED(11904)) | (0 & -71243)) : 2))) | (_GLF_IDENTITY(_GLF_IDENTITY(2, (_GLF_IDENTITY(false ? _GLF_FUZZED(11904) : 2, (false ? _GLF_FUZZED(11904) : 2) * 1))), (_GLF_IDENTITY(2, (_GLF_IDENTITY(false ? _GLF_FUZZED(11904) : 2, (_GLF_IDENTITY(false ? _GLF_FUZZED(11904) : 2, ~ (~ (false ? _GLF_FUZZED(11904) : 2)))) | (false ? _GLF_FUZZED(11904) : 2))))) ^ 0))), _GLF_IDENTITY(_GLF_IDENTITY(2, (false ? _GLF_FUZZED(11904) : 2)), (_GLF_IDENTITY(2, (false ? _GLF_IDENTITY(_GLF_FUZZED(11904), (_GLF_FUZZED(11904)) | (0 & -71243)) : 2))) | (_GLF_IDENTITY(_GLF_IDENTITY(2, (false ? _GLF_FUZZED(11904) : 2)), (_GLF_IDENTITY(2, (false ? _GLF_FUZZED(11904) : 2))) ^ 0))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(2, (false ? _GLF_FUZZED(11904) : 2)), (_GLF_IDENTITY(2, (false ? _GLF_IDENTITY(_GLF_FUZZED(11904), (_GLF_FUZZED(11904)) | (0 & -71243)) : 2))) | (_GLF_IDENTITY(_GLF_IDENTITY(2, (false ? _GLF_FUZZED(11904) : 2)), (_GLF_IDENTITY(2, (false ? _GLF_FUZZED(11904) : 2))) ^ 0))), min(_GLF_IDENTITY(_GLF_IDENTITY(2, (false ? _GLF_FUZZED(11904) : 2)), (_GLF_IDENTITY(2, (false ? _GLF_IDENTITY(_GLF_FUZZED(11904), (_GLF_FUZZED(11904)) | (0 & -71243)) : 2))) | (_GLF_IDENTITY(_GLF_IDENTITY(2, (false ? _GLF_FUZZED(11904) : 2)), (_GLF_IDENTITY(2, (false ? _GLF_FUZZED(11904) : 2))) ^ 0))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(2, (false ? _GLF_FUZZED(11904) : 2)), (_GLF_IDENTITY(2, (false ? _GLF_IDENTITY(_GLF_FUZZED(11904), (_GLF_FUZZED(11904)) | (0 & -71243)) : 2))) | (_GLF_IDENTITY(_GLF_IDENTITY(2, (false ? _GLF_FUZZED(11904) : 2)), (_GLF_IDENTITY(2, (false ? _GLF_FUZZED(11904) : 2))) ^ 0))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(2, (false ? _GLF_FUZZED(11904) : 2)), (_GLF_IDENTITY(2, (false ? _GLF_IDENTITY(_GLF_FUZZED(11904), (_GLF_FUZZED(11904)) | (0 & -71243)) : 2))) | (_GLF_IDENTITY(_GLF_IDENTITY(2, (false ? _GLF_FUZZED(11904) : 2)), (_GLF_IDENTITY(2, (false ? _GLF_FUZZED(11904) : 2))) ^ 0))), _GLF_IDENTITY(_GLF_IDENTITY(2, (false ? _GLF_FUZZED(11904) : 2)), (_GLF_IDENTITY(2, (false ? _GLF_IDENTITY(_GLF_FUZZED(11904), (_GLF_FUZZED(11904)) | (0 & -71243)) : 2))) | (_GLF_IDENTITY(_GLF_IDENTITY(2, (false ? _GLF_FUZZED(11904) : 2)), (_GLF_IDENTITY(2, (false ? _GLF_FUZZED(11904) : 2))) ^ 0))), _GLF_IDENTITY(_GLF_IDENTITY(2, (false ? _GLF_FUZZED(11904) : 2)), (_GLF_IDENTITY(2, (false ? _GLF_IDENTITY(_GLF_FUZZED(11904), (_GLF_FUZZED(11904)) | (0 & -71243)) : 2))) | (_GLF_IDENTITY(_GLF_IDENTITY(2, (false ? _GLF_FUZZED(11904) : 2)), (_GLF_IDENTITY(2, (false ? _GLF_FUZZED(11904) : 2))) ^ 0))))))), _GLF_IDENTITY((false ? _GLF_FUZZED(i) : _GLF_IDENTITY(_GLF_IDENTITY(2, (false ? _GLF_FUZZED(11904) : 2)), (_GLF_IDENTITY(_GLF_IDENTITY(2, (2) + 0), (false ? _GLF_IDENTITY(_GLF_FUZZED(11904), (_GLF_FUZZED(11904)) | (0 & -71243)) : 2))) | (_GLF_IDENTITY(_GLF_IDENTITY(2, (false ? _GLF_FUZZED(11904) : _GLF_IDENTITY(2, min(2, _GLF_IDENTITY(2, ~ (~ (2))))))), (_GLF_IDENTITY(2, (false ? _GLF_FUZZED(11904) : 2))) ^ 0)))), ((false ? _GLF_FUZZED(i) : _GLF_IDENTITY(_GLF_IDENTITY(2, (false ? _GLF_FUZZED(11904) : 2)), (_GLF_IDENTITY(_GLF_IDENTITY(2, (2) + 0), (false ? _GLF_IDENTITY(_GLF_FUZZED(11904), (_GLF_FUZZED(11904)) | (0 & -71243)) : 2))) | (_GLF_IDENTITY(_GLF_IDENTITY(2, (false ? _GLF_FUZZED(11904) : _GLF_IDENTITY(2, min(2, _GLF_IDENTITY(2, ~ (~ (2))))))), (_GLF_IDENTITY(2, (false ? _GLF_FUZZED(11904) : 2))) ^ 0))))) * 1)))))) + 0u), min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(2, (false ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(11904, (11904) | (11904))), max(_GLF_FUZZED(11904), _GLF_FUZZED(11904))) : 2))), uint(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(2, (false ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(11904, (11904) | (11904))), max(_GLF_FUZZED(11904), _GLF_FUZZED(11904))) : 2))), min(_GLF_IDENTITY(uint(_GLF_IDENTITY(2, (false ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(11904, (11904) | (11904))), max(_GLF_FUZZED(11904), _GLF_FUZZED(11904))) : 2))), uint(uvec2(_GLF_IDENTITY(uint(_GLF_IDENTITY(2, (false ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(11904, (11904) | (11904))), max(_GLF_FUZZED(11904), _GLF_FUZZED(11904))) : 2))), 0u | (uint(_GLF_IDENTITY(2, (false ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(11904, (11904) | (11904))), max(_GLF_FUZZED(11904), _GLF_FUZZED(11904))) : 2))))), 0u))), _GLF_IDENTITY(uint(_GLF_IDENTITY(2, (false ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(11904, (11904) | (11904))), max(_GLF_FUZZED(11904), _GLF_FUZZED(11904))) : 2))), (uint(_GLF_IDENTITY(2, (false ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(11904, (11904) | (11904))), max(_GLF_FUZZED(11904), _GLF_FUZZED(11904))) : 2)))) | (0u >> _GLF_IDENTITY(uint(2u), uint(2u)))))), (false ? _GLF_FUZZED(subgroup_size) : uint(_GLF_IDENTITY(2, (false ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(11904, (11904) | (11904))), max(_GLF_FUZZED(11904), _GLF_FUZZED(11904))) : 2))))))), (uint(_GLF_IDENTITY(_GLF_IDENTITY(2, 0 + (_GLF_IDENTITY(2, (_GLF_IDENTITY(2, 0 + (2))) * 1))), (_GLF_IDENTITY(false ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(11904), max(_GLF_FUZZED(11904), _GLF_FUZZED(11904))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(11904), max(_GLF_FUZZED(11904), _GLF_FUZZED(11904))), (_GLF_IDENTITY(_GLF_FUZZED(11904), max(_GLF_FUZZED(11904), _GLF_FUZZED(11904)))) | 0)) * 1) : 2, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(false ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(11904), max(_GLF_FUZZED(11904), _GLF_FUZZED(11904))), (_GLF_IDENTITY(false ? _GLF_FUZZED(-21754) : _GLF_IDENTITY(_GLF_FUZZED(11904), max(_GLF_FUZZED(11904), _GLF_FUZZED(11904))), 0 | (false ? _GLF_FUZZED(-21754) : _GLF_IDENTITY(_GLF_FUZZED(11904), max(_GLF_FUZZED(11904), _GLF_FUZZED(11904))))))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(11904), max(_GLF_FUZZED(11904), _GLF_FUZZED(11904))), int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(_GLF_FUZZED(11904), max(_GLF_FUZZED(11904), _GLF_FUZZED(11904))), 0), (ivec2(_GLF_IDENTITY(_GLF_FUZZED(11904), max(_GLF_FUZZED(11904), _GLF_FUZZED(11904))), 0)) | (ivec2(_GLF_IDENTITY(_GLF_FUZZED(11904), max(_GLF_FUZZED(11904), _GLF_FUZZED(11904))), 0)))))) * 1, clamp(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(11904), max(_GLF_FUZZED(11904), _GLF_FUZZED(11904))), int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(_GLF_FUZZED(11904), max(_GLF_FUZZED(11904), _GLF_FUZZED(11904))), 0), (ivec2(_GLF_IDENTITY(_GLF_FUZZED(11904), max(_GLF_FUZZED(11904), _GLF_FUZZED(11904))), 0)) | (ivec2(_GLF_IDENTITY(_GLF_FUZZED(11904), max(_GLF_FUZZED(11904), _GLF_FUZZED(11904))), 0)))))) * 1, ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(11904), max(_GLF_FUZZED(11904), _GLF_FUZZED(11904))), int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(_GLF_FUZZED(11904), max(_GLF_FUZZED(11904), _GLF_FUZZED(11904))), 0), (ivec2(_GLF_IDENTITY(_GLF_FUZZED(11904), max(_GLF_FUZZED(11904), _GLF_FUZZED(11904))), 0)) | (ivec2(_GLF_IDENTITY(_GLF_FUZZED(11904), max(_GLF_FUZZED(11904), _GLF_FUZZED(11904))), 0)))))) * 1) - 0), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(11904), max(_GLF_FUZZED(11904), _GLF_FUZZED(11904))), int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(_GLF_FUZZED(11904), max(_GLF_FUZZED(11904), _GLF_FUZZED(11904))), 0), (ivec2(_GLF_IDENTITY(_GLF_FUZZED(11904), max(_GLF_FUZZED(11904), _GLF_FUZZED(11904))), 0)) | (ivec2(_GLF_IDENTITY(_GLF_FUZZED(11904), max(_GLF_FUZZED(11904), _GLF_FUZZED(11904))), 0)))))) * 1, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(11904), max(_GLF_FUZZED(11904), _GLF_FUZZED(11904))), int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(_GLF_FUZZED(11904), max(_GLF_FUZZED(11904), _GLF_FUZZED(11904))), 0), (ivec2(_GLF_IDENTITY(_GLF_FUZZED(11904), max(_GLF_FUZZED(11904), _GLF_FUZZED(11904))), 0)) | (ivec2(_GLF_IDENTITY(_GLF_FUZZED(11904), max(_GLF_FUZZED(11904), _GLF_FUZZED(11904))), 0)))))) * 1))) : 2, (false ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(11904), max(_GLF_FUZZED(11904), _GLF_IDENTITY(_GLF_FUZZED(11904), (_GLF_FUZZED(11904)) - 0))), (_GLF_IDENTITY(_GLF_FUZZED(11904), max(_GLF_FUZZED(11904), _GLF_FUZZED(11904)))) * 1) : 2) - 0)), min(~ (_GLF_IDENTITY(false ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(11904), max(_GLF_FUZZED(11904), _GLF_FUZZED(11904))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(11904), 0 | (_GLF_FUZZED(11904))), max(_GLF_FUZZED(11904), _GLF_FUZZED(11904)))) * 1), (1 ^ 1) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(11904), max(_GLF_FUZZED(11904), _GLF_FUZZED(11904))), (_GLF_IDENTITY(_GLF_FUZZED(11904), max(_GLF_FUZZED(11904), _GLF_FUZZED(11904)))) * 1))) : 2, (false ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(11904, 0 | (11904))), max(_GLF_FUZZED(11904), _GLF_FUZZED(_GLF_IDENTITY(11904, clamp(11904, 11904, _GLF_IDENTITY(11904, (11904) - 0)))))), (_GLF_IDENTITY(_GLF_FUZZED(11904), max(_GLF_IDENTITY(_GLF_FUZZED(11904), ~ (_GLF_IDENTITY(~ (_GLF_FUZZED(11904)), (~ (_GLF_FUZZED(11904))) * 1))), _GLF_FUZZED(11904)))) * 1) : 2) - 0)), ~ (_GLF_IDENTITY(false ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(11904), max(_GLF_FUZZED(11904), _GLF_FUZZED(11904))), max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(11904), max(_GLF_FUZZED(11904), _GLF_FUZZED(11904))), int(int(_GLF_IDENTITY(_GLF_FUZZED(11904), max(_GLF_FUZZED(11904), _GLF_FUZZED(11904)))))), 0 | (_GLF_IDENTITY(_GLF_FUZZED(11904), max(_GLF_FUZZED(11904), _GLF_FUZZED(11904))))), _GLF_IDENTITY(_GLF_FUZZED(11904), max(_GLF_FUZZED(11904), _GLF_FUZZED(11904))))), (_GLF_IDENTITY(_GLF_FUZZED(11904), _GLF_IDENTITY(max(_GLF_FUZZED(11904), _GLF_FUZZED(11904)), 0 ^ (max(_GLF_FUZZED(11904), _GLF_FUZZED(11904)))))) * 1) : 2, (false ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(11904), max(_GLF_FUZZED(_GLF_IDENTITY(11904, max(11904, 11904))), _GLF_FUZZED(11904))), (_GLF_IDENTITY(_GLF_FUZZED(11904), max(_GLF_FUZZED(11904), _GLF_FUZZED(11904)))) * 1) : 2) - _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-36891))))))))))))) >> 0u), max(uint(_GLF_IDENTITY(2, (false ? _GLF_FUZZED(11904) : 2))), uint(_GLF_IDENTITY(2, (false ? _GLF_FUZZED(11904) : 2))))), uint(_GLF_IDENTITY(2, (false ? _GLF_FUZZED(11904) : 2))))), _GLF_IDENTITY(4, max(_GLF_IDENTITY(4, min(4, 4)), 4)), _GLF_IDENTITY(64, (64) >> (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(0, ~ (~ (0)))), _GLF_IDENTITY((_GLF_IDENTITY(int(0), (true ? int(0) : _GLF_FUZZED(i)))), (_GLF_IDENTITY((_GLF_IDENTITY(int(0), (true ? int(0) : _GLF_FUZZED(i)))), ((_GLF_IDENTITY(int(0), (true ? int(0) : _GLF_FUZZED(i))))) << (0 >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), clamp(int(1), int(1), int(1))))))) - int(_GLF_ZERO(0.0, injectionSwitch.x))) << (_GLF_IDENTITY(0, (0) << 0) | 0)), ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))))), clamp(int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(int(0), _GLF_IDENTITY((_GLF_IDENTITY(int(0), (true ? int(0) : _GLF_IDENTITY(_GLF_FUZZED(i), (_GLF_FUZZED(i)) << (1 ^ 1))))), (_GLF_IDENTITY((_GLF_IDENTITY(int(0), (true ? int(0) : _GLF_FUZZED(i)))), ((_GLF_IDENTITY(int(0), (true ? int(0) : _GLF_IDENTITY(_GLF_FUZZED(i), (-88464 & 0) ^ (_GLF_IDENTITY(_GLF_FUZZED(i), (true ? _GLF_FUZZED(i) : _GLF_FUZZED(i))))))))) << (0 >> _GLF_IDENTITY(int(1), int(1))))) - int(_GLF_ZERO(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(9744.8115) : 0.0)), injectionSwitch.x))) << (0 | 0)), ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))), (_GLF_IDENTITY(ivec2(_GLF_IDENTITY(int(0), _GLF_IDENTITY((_GLF_IDENTITY(int(0), (true ? int(0) : _GLF_IDENTITY(_GLF_FUZZED(i), (_GLF_FUZZED(i)) << (1 ^ 1))))), (_GLF_IDENTITY((_GLF_IDENTITY(int(0), (true ? int(0) : _GLF_FUZZED(i)))), ((_GLF_IDENTITY(int(0), (true ? int(0) : _GLF_IDENTITY(_GLF_FUZZED(i), (-88464 & 0) ^ (_GLF_IDENTITY(_GLF_FUZZED(i), (true ? _GLF_FUZZED(i) : _GLF_FUZZED(i))))))))) << (0 >> _GLF_IDENTITY(int(1), int(1))))) - int(_GLF_ZERO(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(9744.8115) : 0.0)), injectionSwitch.x))) << (0 | 0)), ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))), ~ (~ (ivec2(_GLF_IDENTITY(int(0), _GLF_IDENTITY((_GLF_IDENTITY(int(0), (true ? int(0) : _GLF_IDENTITY(_GLF_FUZZED(i), (_GLF_FUZZED(i)) << (1 ^ 1))))), (_GLF_IDENTITY((_GLF_IDENTITY(int(0), (true ? int(0) : _GLF_FUZZED(i)))), ((_GLF_IDENTITY(int(0), (true ? int(0) : _GLF_IDENTITY(_GLF_FUZZED(i), (-88464 & 0) ^ (_GLF_IDENTITY(_GLF_FUZZED(i), (true ? _GLF_FUZZED(i) : _GLF_FUZZED(i))))))))) << (0 >> _GLF_IDENTITY(int(1), int(1))))) - int(_GLF_ZERO(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(9744.8115) : 0.0)), injectionSwitch.x))) << (0 | 0)), ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))))))) - ivec2(0, 0))), int(ivec2(_GLF_IDENTITY(int(0), _GLF_IDENTITY((_GLF_IDENTITY(int(0), (true ? int(0) : _GLF_FUZZED(i)))), (_GLF_IDENTITY((_GLF_IDENTITY(int(0), (true ? int(0) : _GLF_FUZZED(i)))), ((_GLF_IDENTITY(int(0), (true ? _GLF_IDENTITY(int(0), 0 ^ (_GLF_IDENTITY(int(0), (int(0)) | 0))) : _GLF_FUZZED(i))))) << (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) >> 0)))) - int(_GLF_ZERO(0.0, injectionSwitch.x))) << (0 | 0)), ((1 << _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, (_GLF_IDENTITY(3, int(_GLF_IDENTITY(ivec4(3, 0, 0, 1), (ivec4(3, 0, 0, 1)) ^ ivec4(0, 0, 0, 0))))) / 1)))) >> _GLF_IDENTITY(int(3), int(3))))), _GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(int(0), _GLF_IDENTITY((_GLF_IDENTITY(int(0), (true ? int(0) : _GLF_FUZZED(i)))), (_GLF_IDENTITY((_GLF_IDENTITY(int(0), (true ? int(0) : _GLF_FUZZED(i)))), ((_GLF_IDENTITY(int(0), (true ? int(0) : _GLF_FUZZED(i))))) << (0 >> _GLF_IDENTITY(int(1), int(1))))) - int(_GLF_ZERO(0.0, injectionSwitch.x))) << (0 | 0)), ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))))), clamp(int(ivec2(_GLF_IDENTITY(int(0), _GLF_IDENTITY((_GLF_IDENTITY(int(0), (true ? int(0) : _GLF_FUZZED(i)))), (_GLF_IDENTITY((_GLF_IDENTITY(int(0), (true ? int(0) : _GLF_FUZZED(i)))), ((_GLF_IDENTITY(int(0), (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, bool(bvec2(true, false))), true), bvec2(bvec3(bvec2(_GLF_IDENTITY(true, bool(bvec2(true, false))), true), false)))))), bool(bvec3(! (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, bool(bvec2(true, false))), true), bvec2(bvec3(bvec2(_GLF_IDENTITY(true, bool(bvec2(true, false))), true), false)))))), false, false))))) ? _GLF_IDENTITY(int(0), ~ (~ (int(0)))) : _GLF_FUZZED(i))))) << (0 >> _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, (1) - 0)))))) - int(_GLF_ZERO(0.0, injectionSwitch.x))) << _GLF_IDENTITY((0 | 0), clamp(_GLF_IDENTITY((0 | 0), clamp((0 | 0), (0 | 0), (0 | 0))), (0 | 0), (0 | 0)))), ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))))), int(ivec2(_GLF_IDENTITY(int(0), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(int(0), (true ? int(0) : _GLF_FUZZED(i)))), (true ? (_GLF_IDENTITY(int(0), (true ? int(0) : _GLF_FUZZED(i)))) : _GLF_FUZZED(i))), (_GLF_IDENTITY((_GLF_IDENTITY(int(0), (true ? _GLF_IDENTITY(int(0), (int(0)) | (int(0))) : _GLF_FUZZED(i)))), ((_GLF_IDENTITY(int(0), (true ? int(0) : _GLF_FUZZED(i))))) << (0 >> _GLF_IDENTITY(int(1), int(1))))) - int(_GLF_ZERO(0.0, injectionSwitch.x))) << (0 | 0)), (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)), min(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)), min((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)), (1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))), (1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))))))), int(ivec2(_GLF_IDENTITY(int(0), _GLF_IDENTITY((_GLF_IDENTITY(int(0), (true ? int(0) : _GLF_FUZZED(i)))), (_GLF_IDENTITY((_GLF_IDENTITY(int(0), (true ? int(0) : _GLF_FUZZED(i)))), ((_GLF_IDENTITY(int(0), (true ? int(0) : _GLF_FUZZED(i))))) << (0 >> _GLF_IDENTITY(int(1), int(1))))) - int(_GLF_ZERO(0.0, injectionSwitch.x))) << (0 | 0)), ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))))))))), int(0)))), 4);
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), _GLF_IDENTITY(! (! _GLF_IDENTITY((false), true && _GLF_IDENTITY((_GLF_IDENTITY((false), ((false)) || false)), ! (! ((_GLF_IDENTITY((false), ((false)) || false))))))), (_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, true && (false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false))))), (! (! (false))) && true)) || false))) || false), bool(bvec3(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), (_GLF_IDENTITY(! (! (false)), (! (! (false))) && true)) || false))) || false), false, false))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))), _GLF_IDENTITY(true && (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), clamp(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch))))) * vec2(1.0, 1.0))) * mat2(1.0)).x > injectionSwitch.y) && true)), _GLF_IDENTITY(true, (true) && true) && (_GLF_IDENTITY(true, bool(bvec4(true, false, true, true))) && (injectionSwitch.x > injectionSwitch.y))))))));
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-2.4))))) > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false))), false, false, false)))))))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(false))
          continue;
         for(int _injected_loop_counter = _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) | (int(2))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(29836) : ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) | (int(2))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, (0u & 86735u) | (next_virtual_gid))], uint(2), 4, 64, 4);
          }
         else
          {
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), min(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), _GLF_IDENTITY(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)) + (clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))))), float(mat3(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), min(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), _GLF_IDENTITY(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)) + (clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))))), 1.0, 1.0, tan(0.0), 1.0, 1.0, 1.0, 1.0, 1.0))) > injectionSwitch.y, true && (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
                    {
                     if(_GLF_DEAD(false))
                      return;
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         barrier();
                        }
                      }
                     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       for(int _injected_loop_counter = (0 & 95640); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, 1 * (1))))); _injected_loop_counter ++)
                        {
                         barrier();
                        }
                      }
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                        }
                       else
                        {
                         return;
                        }
                      }
                    }
                  }
                 return;
                }
               else
                {
                }
              }
            }
           else
            {
            }
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, (_injected_loop_counter > 0) || false)); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
                    return;
                  }
                 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))), bool(bool((_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)))))), true, true)), ! (! (bool(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))), bool(bool((_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)))))), true, true)))))) && true)))
                  return;
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
               do
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)) < ((_GLF_IDENTITY(1, max(1, 1)) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), max(int(5), _GLF_IDENTITY(_GLF_IDENTITY(int(5), max(int(5), int(5))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) ^ (0 << _GLF_IDENTITY(int(0), int(0)))), max(int(5), int(5))), _GLF_IDENTITY(int(5), _GLF_IDENTITY(max(int(5), int(5)), (_GLF_IDENTITY(max(int(5), int(5)), (max(int(5), int(5))) * 1)) - (0 >> _GLF_IDENTITY(int(2), int(2))))), _GLF_IDENTITY(int(5), max(int(5), int(5))))))))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(5, _GLF_IDENTITY(min(5, _GLF_IDENTITY(5, ~ (_GLF_IDENTITY(~ (5), clamp(~ (5), ~ (5), ~ (5)))))), (min(5, _GLF_IDENTITY(5, ~ (_GLF_IDENTITY(~ (5), clamp(~ (5), ~ (5), ~ (5))))))) | (_GLF_IDENTITY(min(5, _GLF_IDENTITY(5, ~ (_GLF_IDENTITY(~ (5), clamp(~ (5), ~ _GLF_IDENTITY((5), (_GLF_IDENTITY((5), clamp((5), (5), (5)))) - 0), ~ (5)))))), (_GLF_IDENTITY(_GLF_IDENTITY(min(5, _GLF_IDENTITY(5, ~ (_GLF_IDENTITY(~ (5), clamp(~ (5), ~ (5), ~ (5)))))), 1 * (min(5, _GLF_IDENTITY(5, ~ (_GLF_IDENTITY(~ (5), clamp(~ (5), ~ (5), ~ (5)))))))), (0 | 0) ^ (_GLF_IDENTITY(min(5, _GLF_IDENTITY(5, ~ (_GLF_IDENTITY(~ (5), clamp(~ (5), ~ (5), ~ (5)))))), 1 * (min(5, _GLF_IDENTITY(5, ~ (_GLF_IDENTITY(~ (5), clamp(~ (5), ~ (5), ~ (5))))))))))) | 0))))), min(int(_GLF_IDENTITY(5, min(5, _GLF_IDENTITY(5, ~ (_GLF_IDENTITY(~ (5), clamp(~ (5), ~ (5), ~ (5)))))))), int(_GLF_IDENTITY(5, min(5, _GLF_IDENTITY(5, ~ (_GLF_IDENTITY(~ (5), clamp(~ (5), ~ (5), ~ (5)))))))))), (_GLF_IDENTITY(int(_GLF_IDENTITY(5, _GLF_IDENTITY(min(5, _GLF_IDENTITY(5, ~ (_GLF_IDENTITY(~ (5), clamp(~ (5), ~ (5), ~ (5)))))), int(_GLF_IDENTITY(ivec2(min(5, _GLF_IDENTITY(5, ~ (_GLF_IDENTITY(~ (5), clamp(~ (5), ~ (5), ~ (5)))))), ((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) | 0))) >> _GLF_IDENTITY(int(3), int(3)))), (ivec2(min(5, _GLF_IDENTITY(5, ~ (_GLF_IDENTITY(~ (5), clamp(~ (5), ~ (5), ~ (5)))))), ((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) | 0))) >> _GLF_IDENTITY(int(3), int(3))))) / ivec2(1, 1)))))), min(_GLF_IDENTITY(int(_GLF_IDENTITY(5, min(_GLF_IDENTITY(5, (false ? _GLF_FUZZED(_injected_loop_counter) : 5)), _GLF_IDENTITY(5, ~ (_GLF_IDENTITY(~ (5), clamp(~ (_GLF_IDENTITY(5, clamp(5, 5, 5))), _GLF_IDENTITY(~ (5), (~ (5)) << 0), ~ (5)))))))), (_GLF_IDENTITY(int(_GLF_IDENTITY(5, min(5, _GLF_IDENTITY(5, ~ (_GLF_IDENTITY(~ _GLF_IDENTITY((5), ((5)) >> 0), clamp(~ (_GLF_IDENTITY(_GLF_IDENTITY(5, clamp(5, 5, 5)), (true ? _GLF_IDENTITY(_GLF_IDENTITY(5, clamp(5, 5, 5)), (_GLF_IDENTITY(_GLF_IDENTITY(5, clamp(5, 5, 5)), (_GLF_IDENTITY(5, clamp(5, 5, 5))) << 0)) * 1) : _GLF_FUZZED((_injected_loop_counter))))), ~ (5), ~ (5)))))))), _GLF_IDENTITY(int(ivec2(int(_GLF_IDENTITY(5, min(5, _GLF_IDENTITY(5, _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (5), clamp(~ (_GLF_IDENTITY(5, clamp(5, 5, 5))), ~ (5), ~ (5)))), (0 | (0 ^ 0)) ^ (~ (_GLF_IDENTITY(~ (5), clamp(~ (_GLF_IDENTITY(5, clamp(5, 5, 5))), ~ (5), ~ (5)))))))))), 0)), 1 * (int(ivec2(int(_GLF_IDENTITY(5, min(5, _GLF_IDENTITY(5, _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (5), clamp(~ (_GLF_IDENTITY(5, clamp(5, 5, 5))), ~ (5), ~ (5)))), (0 | (0 ^ 0)) ^ (~ (_GLF_IDENTITY(~ (5), clamp(~ (_GLF_IDENTITY(5, clamp(5, 5, 5))), ~ (5), ~ (5)))))))))), 0)))))) / 1), int(_GLF_IDENTITY(5, min(5, _GLF_IDENTITY(5, ~ (_GLF_IDENTITY(~ (5), clamp(~ (5), ~ (5), ~ (5))))))))))) >> 0)))); _injected_loop_counter ++)
                  {
                   return;
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(175.426) : injectionSwitch.y)))))))))
                      continue;
                     barrier();
                    }
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))));
               do
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec2(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), true))))))))))
              return;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
           barrier();
          }
        }
       else
        {
        }
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x, injectionSwitch.x, injectionSwitch.x)))) > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).y))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, false || (true)))), true), bvec3(bvec4(bvec3(false, _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, false || (true)))), true), true))), bvec3(bvec3(bvec3(false, true, true))))))))
        {
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), 0 ^ (int(5))))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), ~ (~ (int(5)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))))); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   barrier();
  }
}
