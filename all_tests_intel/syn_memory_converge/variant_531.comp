#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
  {
   do
    {
     return;
     if(_GLF_DEAD(false))
      continue;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y))))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 do
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), ! (! (_GLF_IDENTITY(false, false || (false)))))) || false), (false) || false)))
    break;
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, int(_GLF_IDENTITY(ivec2(_injected_loop_counter, 1), ~ (_GLF_IDENTITY(~ (ivec2(_injected_loop_counter, 1)), ivec2(0, 0) + (~ (ivec2(_injected_loop_counter, 1)))))))) > (0 << _GLF_IDENTITY(int(8), int(8)))); _GLF_IDENTITY(_injected_loop_counter --, (true ? _injected_loop_counter -- : _GLF_FUZZED(ivec4(262, 42942, 86407, _GLF_IDENTITY(-94947, (_GLF_IDENTITY(_GLF_IDENTITY(-94947, (-94947) / 1), int(_GLF_IDENTITY(ivec2(-94947, 1), _GLF_IDENTITY(~ (~ (ivec2(-94947, _GLF_IDENTITY(1, (1) >> 0)))), clamp(~ (_GLF_IDENTITY(~ (ivec2(-94947, _GLF_IDENTITY(1, (1) >> 0))), (~ (ivec2(-94947, _GLF_IDENTITY(1, (1) >> 0)))) ^ ivec2(0, 0))), ~ (~ (ivec2(-94947, _GLF_IDENTITY(1, (1) >> 0)))), ~ (~ (ivec2(-94947, _GLF_IDENTITY(1, (1) >> 0)))))))))) | (-94947)))[0]))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y))))
        break;
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (! ((false)))) && true)), _GLF_IDENTITY(! (! (_GLF_DEAD(false))), bool(bvec2(! (! (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bool(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))), (bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), (_GLF_IDENTITY(bool(_GLF_DEAD(false)), (bool(_GLF_DEAD(false))) && true)) || false))) && true)))), _GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, (true) || false), false, true, false)))))))) || false))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(false, (false) && true))), ! (! (! (_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))))))))))
          break;
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y)), false, true, false))))))))
          return;
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
                {
                 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
                  break;
                 return;
                }
               continue;
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              break;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               if(_GLF_DEAD(false))
                break;
               continue;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, (false ? _GLF_FUZZED(22274) : 1))))])), min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, (false ? _GLF_FUZZED(22274) : 1))))])), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, (false ? _GLF_FUZZED(22274) : 1))))])))).y, (_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0))))) : _GLF_FUZZED(vec2(-7.9, -58.93)))).y) / exp(0.0))))))
              {
               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(bool(bool(injectionSwitch.x < injectionSwitch.y)), bool(bvec3(bool(bool(injectionSwitch.x < injectionSwitch.y)), false, false)))))) && (! _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! _GLF_IDENTITY((! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y, (injectionSwitch.y) * 1.0)))))), bool(bvec4((! (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0))), false || (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)))))))), false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), ! (! (_GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! _GLF_IDENTITY((! _GLF_IDENTITY((_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y), ((injectionSwitch.y)) + 0.0) * 1.0))))), (_GLF_IDENTITY((_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y), ((injectionSwitch.y)) + 0.0) * 1.0), max(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y), ((injectionSwitch.y)) + 0.0) * 1.0), _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y), ((injectionSwitch.y)) + 0.0) * 1.0))))))), true && ((_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y), ((injectionSwitch.y)) + 0.0) * 1.0)))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bvec4((! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)))))), false, true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(float(_GLF_IDENTITY(injectionSwitch.x, float(mat3(injectionSwitch.x, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0)))))))) > injectionSwitch.y)))))))), ! (_GLF_IDENTITY(! ((! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! _GLF_IDENTITY((! (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0))), (_GLF_TRUE(_GLF_IDENTITY(true, bool(bvec4(true, false, false, true))), _GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)), bool(bvec3((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)), false, false))))) || false)))), bool(bvec4((! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)))))), false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), true && (! _GLF_IDENTITY(((! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! _GLF_IDENTITY((! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - tan(0.0))) * 1.0)))))), bool(bvec4((! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)))))), false, true, _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))))))), bool(bvec2(((! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! _GLF_IDENTITY((! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - tan(0.0))) * 1.0)))))), bool(bvec4((! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)))))), false, true, _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))))))), false))))))))))))))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    break;
                   break;
                  }
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0, (0) << 0), 0 | (_GLF_IDENTITY(0, (0) << 0))) >> _GLF_IDENTITY(int(7), int(7))), clamp(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0, (0) << 0), 0 | (_GLF_IDENTITY(0, (0) << 0))) >> _GLF_IDENTITY(int(7), int(7))), _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0, (0) << 0), 0 | (_GLF_IDENTITY(0, (0) << 0))) >> _GLF_IDENTITY(int(7), int(7))), ((_GLF_IDENTITY(_GLF_IDENTITY(0, (0) << 0), 0 | (_GLF_IDENTITY(0, (0) << 0))) >> _GLF_IDENTITY(int(7), int(7)))) | ((_GLF_IDENTITY(_GLF_IDENTITY(0, (0) << 0), 0 | (_GLF_IDENTITY(0, (0) << 0))) >> _GLF_IDENTITY(int(7), int(7)))))), (_GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0, (0) << 0), 0 | (_GLF_IDENTITY(0, (0) << 0))) >> _GLF_IDENTITY(int(7), int(7))), ((_GLF_IDENTITY(_GLF_IDENTITY(0, (0) << 0), 0 | (_GLF_IDENTITY(0, (0) << 0))) >> _GLF_IDENTITY(int(7), int(7)))) | ((_GLF_IDENTITY(_GLF_IDENTITY(0, (0) << 0), 0 | (_GLF_IDENTITY(0, (0) << 0))) >> _GLF_IDENTITY(int(7), int(7)))))), max((_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0, (0) << 0), 0 | (_GLF_IDENTITY(0, (0) << 0))) >> _GLF_IDENTITY(int(7), int(7))), ((_GLF_IDENTITY(_GLF_IDENTITY(0, (0) << 0), 0 | (_GLF_IDENTITY(0, (0) << 0))) >> _GLF_IDENTITY(int(7), int(7)))) | ((_GLF_IDENTITY(_GLF_IDENTITY(0, (0) << 0), 0 | (_GLF_IDENTITY(0, (0) << 0))) >> _GLF_IDENTITY(int(7), int(7)))))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0, (0) << 0), 0 | (_GLF_IDENTITY(0, (0) << 0))) >> _GLF_IDENTITY(int(7), int(7))), ((_GLF_IDENTITY(_GLF_IDENTITY(0, (0) << 0), 0 | (_GLF_IDENTITY(0, (0) << 0))) >> _GLF_IDENTITY(int(7), int(7)))) | ((_GLF_IDENTITY(_GLF_IDENTITY(0, (0) << 0), 0 | (_GLF_IDENTITY(0, (0) << 0))) >> _GLF_IDENTITY(int(7), int(7))))))))) / 1) >> 0), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0, (0) << 0), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(0, max(0, 0)), (0) << 0))) >> _GLF_IDENTITY(int(7), int(7))), 0 + ((_GLF_IDENTITY(_GLF_IDENTITY(0, (0) << 0), 0 | (_GLF_IDENTITY(0, _GLF_IDENTITY((0), 0 | _GLF_IDENTITY(((0)), 0 ^ (((0))))) << 0))) >> _GLF_IDENTITY(int(7), int(7))))), (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) << _GLF_IDENTITY(0, int(ivec2(0, 0)))), 0 | (_GLF_IDENTITY(0, (0) << 0))) >> _GLF_IDENTITY(int(7), int(7)))))); _GLF_IDENTITY(_injected_loop_counter --, ~ (~ (_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) ^ 0)))))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
                    {
                     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec2(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false)))))) || false))
                      {
                       if(_GLF_DEAD(false))
                        break;
                       if(_GLF_DEAD(false))
                        return;
                       continue;
                       if(_GLF_DEAD(false))
                        continue;
                      }
                    }
                   else
                    {
                     return;
                    }
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      {
                       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                        {
                         return;
                        }
                      }
                     if(_GLF_DEAD(false))
                      return;
                     break;
                    }
                  }
                }
               else
                {
                }
               if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
                return;
               if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
                continue;
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                break;
               continue;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x < injectionSwitch.y) || false), false, false, true)))))))
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   return;
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(false, false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bool(bool(bvec4(false, false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), (_GLF_IDENTITY(bool(bvec4(false, false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bool(bool(bvec4(false, false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))) && true))));
             break;
            }
           if(_GLF_DEAD(false))
            break;
           do
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
              return;
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            continue;
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) | (0 << _GLF_IDENTITY(int(0), int(0)))))
            {
             return;
            }
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (false), bool(_GLF_IDENTITY(bvec2(! (false), true), bvec2(bvec3(bvec2(! (false), true), false))))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(! (false), bool(_GLF_IDENTITY(bvec3(! (false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec3(bvec4(bvec3(! (false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), true))))), ! (! (_GLF_IDENTITY(! (false), bool(_GLF_IDENTITY(bvec3(! (false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec3(bvec4(bvec3(! (false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), true))))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(! (false), bool(_GLF_IDENTITY(bvec3(! (false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec3(bvec4(bvec3(! (false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), true))))), ! (! (_GLF_IDENTITY(! (false), bool(_GLF_IDENTITY(bvec3(! (false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec3(bvec4(bvec3(! (false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), true))))))))), true && (bool(_GLF_IDENTITY(_GLF_IDENTITY(! (false), bool(_GLF_IDENTITY(bvec3(! (false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec3(bvec4(bvec3(! (false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), true))))), ! (! (_GLF_IDENTITY(! (false), bool(_GLF_IDENTITY(bvec3(! (false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec3(bvec4(bvec3(! (false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), true)))))))))))), false || (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(! (false), bool(_GLF_IDENTITY(bvec3(! (false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec3(bvec4(bvec3(! (false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), true))))), ! (! (_GLF_IDENTITY(! (false), bool(_GLF_IDENTITY(bvec3(! (false), _GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false))))), (injectionSwitch.x > injectionSwitch.y)), false), bvec3(bvec4(bvec3(! (false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), true))))))))), true && (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(! (false), bool(_GLF_IDENTITY(bvec3(! (false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec3(bvec4(bvec3(! (false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), true))))), ! (! (_GLF_IDENTITY(! (false), bool(_GLF_IDENTITY(bvec3(! (false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec3(bvec4(bvec3(! (_GLF_IDENTITY(false, (false) && true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), true))))))))), true && (bool(_GLF_IDENTITY(_GLF_IDENTITY(! (false), bool(_GLF_IDENTITY(bvec3(! (false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec3(bvec4(bvec3(! (false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), true))))), ! (! (_GLF_IDENTITY(! (false), bool(_GLF_IDENTITY(bvec3(! (false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec3(bvec4(bvec3(! (_GLF_IDENTITY(false, (false) && true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), true)))))))))))))))))))), false || (_GLF_IDENTITY(! (false), bool(bool(_GLF_IDENTITY(! (_GLF_IDENTITY(false, _GLF_IDENTITY(false, ! (! (false))) || (false))), bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(! (false), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)) && true), false), bvec3(bvec3(bvec3(! (false), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)) && true), false)))), bvec3(bvec4(_GLF_IDENTITY(bvec3(! (false), _GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), injectionSwitch, injectionSwitch)), injectionSwitch)).y), true && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), injectionSwitch, injectionSwitch)), injectionSwitch)).y))), bool(bvec4((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), injectionSwitch, injectionSwitch)), injectionSwitch)).y), false, true, false)))), false), bvec3(bvec3(bvec3(! (false), _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), injectionSwitch, injectionSwitch)), injectionSwitch)), (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), injectionSwitch, injectionSwitch)), injectionSwitch))) - abs(vec2(0.0, 0.0))).y), bool(bvec4((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-82.06), _GLF_FUZZED(-833.182)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true)))) - vec2(0.0, 0.0)), clamp(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), injectionSwitch, injectionSwitch)), injectionSwitch)).y), false, true, false)))), false)))), true)))))))))), (_GLF_IDENTITY(! (false), true && (_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), true && (! (! (false))))))))) || false)))))
          {
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), _GLF_IDENTITY(bool(bvec4(bool(bvec2(false, true)), false, false, false)), ! (_GLF_IDENTITY(! (bool(bvec4(bool(bvec2(false, true)), false, false, false))), bool(bvec2(! (bool(bvec4(bool(bvec2(false, true)), false, false, false))), true)))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
            continue;
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
            {
             if(_GLF_DEAD(false))
              break;
            }
           else
            {
             return;
            }
           if(_GLF_DEAD(false))
            break;
          }
        }
       if(_GLF_DEAD(false))
        continue;
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      break;
     continue;
    }
   if(_GLF_DEAD(false))
    continue;
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint subgroup_size = 16;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))), (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))), false))))) || false))))))
      {
      }
     else
      {
       return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
      }
    }
  }
 else
  {
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_TRUE(true)), true && (! (_GLF_WRAPPED_IF_TRUE(true)))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)).y)))))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y, false, false)), _GLF_IDENTITY(bool(bvec4(bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, false)), true, true, false)), (bool(bvec4(bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, false)), true, true, false))) && true))))))))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        return;
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).y, mix(float(_GLF_FUZZED(-58.65)), float(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y), bool(true))))) || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat3x2(injectionSwitch.x, 0.0, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(837.096)), bool(false))), injectionSwitch.x))), 0.0, 1.0, tan(0.0)))) > injectionSwitch.y))))
      return;
    }
  }
 else
  {
  }
 uint workgroup_base = _GLF_IDENTITY(workgroup_size, clamp(workgroup_size, workgroup_size, _GLF_IDENTITY(workgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(workgroup_size, 1u), min(uvec2(workgroup_size, 1u), uvec2(workgroup_size, 1u)))), (_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(workgroup_size, 1u), min(uvec2(workgroup_size, 1u), uvec2(workgroup_size, 1u)))), _GLF_IDENTITY((_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(workgroup_size, 1u), min(uvec2(workgroup_size, _GLF_IDENTITY(1u, max(1u, 1u))), uvec2(workgroup_size, 1u)))), max(uint(_GLF_IDENTITY(uvec2(workgroup_size, 1u), min(uvec2(workgroup_size, _GLF_IDENTITY(1u, max(1u, 1u))), uvec2(workgroup_size, 1u)))), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(workgroup_size, 1u), min(uvec2(workgroup_size, _GLF_IDENTITY(1u, max(1u, 1u))), uvec2(workgroup_size, 1u)))), clamp(uint(_GLF_IDENTITY(uvec2(workgroup_size, 1u), min(uvec2(workgroup_size, _GLF_IDENTITY(1u, max(1u, 1u))), uvec2(workgroup_size, 1u)))), uint(_GLF_IDENTITY(uvec2(workgroup_size, 1u), min(uvec2(workgroup_size, _GLF_IDENTITY(1u, max(1u, 1u))), uvec2(workgroup_size, 1u)))), uint(_GLF_IDENTITY(uvec2(workgroup_size, 1u), min(uvec2(workgroup_size, _GLF_IDENTITY(1u, max(1u, 1u))), uvec2(workgroup_size, 1u))))))))) >> 0u, ((uint(_GLF_IDENTITY(uvec2(workgroup_size, 1u), min(uvec2(workgroup_size, 1u), uvec2(workgroup_size, 1u))))) >> 0u) | (_GLF_IDENTITY((uint(_GLF_IDENTITY(uvec2(workgroup_size, 1u), min(uvec2(workgroup_size, 1u), uvec2(workgroup_size, 1u))))) >> 0u, uint(_GLF_IDENTITY(uvec3((uint(_GLF_IDENTITY(uvec2(workgroup_size, 1u), min(uvec2(workgroup_size, 1u), uvec2(workgroup_size, 1u))))) >> 0u, 0u, 0u), _GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(uvec3(32893u, 134394u, 119762u)) : uvec3((uint(_GLF_IDENTITY(uvec2(workgroup_size, 1u), min(uvec2(workgroup_size, 1u), uvec2(workgroup_size, 1u))))) >> 0u, 0u, 0u)), min(_GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(uvec3(32893u, 134394u, 119762u)) : uvec3((uint(_GLF_IDENTITY(uvec2(workgroup_size, 1u), min(uvec2(workgroup_size, 1u), uvec2(workgroup_size, 1u))))) >> 0u, 0u, 0u)), max((_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(uvec3(32893u, 134394u, 119762u)) : uvec3((uint(_GLF_IDENTITY(uvec2(workgroup_size, 1u), min(uvec2(workgroup_size, 1u), uvec2(workgroup_size, 1u))))) >> 0u, 0u, 0u)), (_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(uvec3(32893u, 134394u, 119762u)) : uvec3((uint(_GLF_IDENTITY(uvec2(workgroup_size, 1u), min(uvec2(workgroup_size, 1u), uvec2(workgroup_size, 1u))))) >> 0u, 0u, 0u)))), (_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(uvec3(32893u, 134394u, 119762u)) : uvec3((uint(_GLF_IDENTITY(uvec2(workgroup_size, 1u), min(uvec2(workgroup_size, 1u), uvec2(workgroup_size, 1u))))) >> 0u, 0u, 0u)))))))))), max(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(workgroup_size, 1u), min(uvec2(workgroup_size, 1u), uvec2(workgroup_size, 1u)))), _GLF_IDENTITY(_GLF_IDENTITY((uint(_GLF_IDENTITY(uvec2(workgroup_size, 1u), min(uvec2(workgroup_size, _GLF_IDENTITY(1u, max(1u, 1u))), uvec2(workgroup_size, 1u))))) >> 0u, ~ (~ ((uint(_GLF_IDENTITY(uvec2(workgroup_size, 1u), min(uvec2(workgroup_size, _GLF_IDENTITY(1u, max(1u, 1u))), uvec2(workgroup_size, 1u))))) >> 0u))), ((uint(_GLF_IDENTITY(uvec2(workgroup_size, 1u), min(uvec2(workgroup_size, 1u), uvec2(workgroup_size, 1u))))) >> 0u) | (_GLF_IDENTITY((uint(_GLF_IDENTITY(uvec2(workgroup_size, 1u), min(uvec2(workgroup_size, 1u), uvec2(workgroup_size, 1u))))) >> 0u, uint(_GLF_IDENTITY(uvec3((uint(_GLF_IDENTITY(uvec2(workgroup_size, 1u), min(_GLF_IDENTITY(uvec2(workgroup_size, 1u), uvec2(0u, 0u) | (uvec2(workgroup_size, 1u))), uvec2(workgroup_size, 1u))))) >> 0u, 0u, 0u), (false ? _GLF_FUZZED(uvec3(32893u, 134394u, _GLF_IDENTITY(119762u, (119762u) >> 0u))) : uvec3((uint(_GLF_IDENTITY(uvec2(workgroup_size, 1u), min(uvec2(workgroup_size, 1u), uvec2(workgroup_size, 1u))))) >> 0u, 0u, 0u)))))))), _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(workgroup_size, 1u), min(uvec2(workgroup_size, 1u), uvec2(workgroup_size, 1u)))), _GLF_IDENTITY((uint(_GLF_IDENTITY(uvec2(workgroup_size, 1u), min(uvec2(workgroup_size, _GLF_IDENTITY(1u, max(1u, 1u))), uvec2(workgroup_size, 1u))))) >> 0u, ((uint(_GLF_IDENTITY(uvec2(workgroup_size, 1u), min(uvec2(workgroup_size, 1u), uvec2(workgroup_size, 1u))))) >> 0u) | (_GLF_IDENTITY((uint(_GLF_IDENTITY(uvec2(workgroup_size, 1u), min(uvec2(workgroup_size, 1u), uvec2(workgroup_size, 1u))))) >> 0u, uint(_GLF_IDENTITY(uvec3((_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(workgroup_size, 1u), min(uvec2(workgroup_size, 1u), uvec2(workgroup_size, 1u)))), (uint(_GLF_IDENTITY(uvec2(workgroup_size, 1u), min(uvec2(workgroup_size, 1u), uvec2(workgroup_size, 1u))))) / 1u)) >> 0u, 0u, 0u), (false ? _GLF_FUZZED(uvec3(32893u, 134394u, 119762u)) : uvec3((uint(_GLF_IDENTITY(uvec2(workgroup_size, 1u), min(uvec2(workgroup_size, 1u), uvec2(workgroup_size, 1u))))) >> 0u, 0u, 0u)))))))), ~ (~ (_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(workgroup_size, 1u), _GLF_IDENTITY(min(uvec2(workgroup_size, 1u), uvec2(workgroup_size, 1u)), (true ? min(uvec2(workgroup_size, 1u), uvec2(workgroup_size, 1u)) : _GLF_FUZZED(uvec2(141954u, 120520u)))))), _GLF_IDENTITY((uint(_GLF_IDENTITY(uvec2(workgroup_size, 1u), _GLF_IDENTITY(min(uvec2(workgroup_size, _GLF_IDENTITY(1u, max(1u, 1u))), uvec2(workgroup_size, 1u)), uvec2(1u, 1u) * (min(uvec2(workgroup_size, _GLF_IDENTITY(1u, max(1u, 1u))), uvec2(workgroup_size, 1u))))))) >> 0u, ((uint(_GLF_IDENTITY(uvec2(workgroup_size, 1u), min(uvec2(workgroup_size, 1u), uvec2(_GLF_IDENTITY(workgroup_size, 0u ^ (workgroup_size)), 1u))))) >> 0u) | (_GLF_IDENTITY((uint(_GLF_IDENTITY(uvec2(workgroup_size, 1u), min(uvec2(workgroup_size, 1u), uvec2(workgroup_size, 1u))))) >> 0u, uint(_GLF_IDENTITY(uvec3((uint(_GLF_IDENTITY(uvec2(workgroup_size, 1u), min(uvec2(workgroup_size, 1u), uvec2(workgroup_size, 1u))))) >> 0u, 0u, 0u), (false ? _GLF_FUZZED(uvec3(32893u, 134394u, 119762u)) : _GLF_IDENTITY(uvec3((uint(_GLF_IDENTITY(uvec2(workgroup_size, 1u), min(uvec2(workgroup_size, 1u), uvec2(_GLF_IDENTITY(workgroup_size, clamp(workgroup_size, workgroup_size, workgroup_size)), 1u))))) >> 0u, 0u, 0u), uvec3(0u, 0u, 0u) ^ (uvec3((uint(_GLF_IDENTITY(uvec2(workgroup_size, 1u), min(uvec2(workgroup_size, 1u), uvec2(_GLF_IDENTITY(workgroup_size, clamp(workgroup_size, workgroup_size, workgroup_size)), 1u))))) >> 0u, 0u, 0u)))))))))))))))) ^ 0u)))) * workgroup_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
  return;
 if(_GLF_DEAD(false))
  return;
 uint virtual_gid = _GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(_GLF_IDENTITY((workgroup_base), ~ (~ _GLF_IDENTITY(((workgroup_base)), (((workgroup_base))) << 0u))), uint(uvec3((workgroup_base), 0u, 0u))) + 0u) + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u);
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, clamp(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) + 0), _injected_loop_counter, _injected_loop_counter)) > (_GLF_IDENTITY(-71289 & 0, min(_GLF_IDENTITY(-71289 & _GLF_IDENTITY(0, clamp(0, 0, 0)), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(-71289, (-71289) | 0) & 0), _GLF_IDENTITY(int(ivec4((_GLF_IDENTITY(_GLF_IDENTITY(-71289 & 0, (false ? _GLF_FUZZED(-78214) : -71289 & 0)), clamp(-71289 & 0, _GLF_IDENTITY(-71289 & 0, clamp(-71289 & 0, -71289 & 0, -71289 & 0)), -71289 & 0))), 0, 0, int(_GLF_ONE(1.0, injectionSwitch.y)))), (int(_GLF_IDENTITY(_GLF_IDENTITY(ivec4((-71289 & 0), 0, 0, int(_GLF_ONE(1.0, injectionSwitch.y))), _GLF_IDENTITY(ivec4(1, 1, 1, 1), ivec4(0, 0, 0, 0) ^ (ivec4(1, 1, 1, 1))) * (ivec4(_GLF_IDENTITY((-71289 & 0), ((-71289 & 0)) * 1), 0, 0, int(_GLF_ONE(1.0, injectionSwitch.y))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(ivec4((-71289 & 0), _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) >> 0)) - 0), 0, int(_GLF_ONE(1.0, injectionSwitch.y))), _GLF_IDENTITY(ivec4(1, 1, 1, 1), ivec4(0, _GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, clamp(0, 0, 0))))), 0, 0) ^ (_GLF_IDENTITY(ivec4(1, 1, 1, 1), min(ivec4(1, 1, 1, 1), _GLF_IDENTITY(ivec4(1, 1, 1, 1), max(ivec4(1, 1, 1, 1), ivec4(1, 1, 1, 1))))))) * (ivec4((-71289 & 0), 0, _GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, 0 + (0)))), int(_GLF_ONE(1.0, injectionSwitch.y))))), ivec4(0, 0, 0, 0) + (_GLF_IDENTITY(_GLF_IDENTITY(ivec4((-71289 & 0), 0, 0, int(_GLF_ONE(1.0, injectionSwitch.y))), (ivec4((-71289 & 0), 0, 0, int(_GLF_ONE(1.0, injectionSwitch.y)))) / ivec4(1, 1, 1, 1)), _GLF_IDENTITY(ivec4(1, 1, 1, 1), ivec4(0, 0, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, ~ (~ (0)))) << 0), 0) ^ (ivec4(1, 1, 1, 1))) * (ivec4((-71289 & 0), 0, 0, _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (false ? _GLF_FUZZED(_injected_loop_counter) : int(_GLF_ONE(1.0, injectionSwitch.y))))) >> 0)))))), _GLF_IDENTITY(_GLF_IDENTITY(ivec4((-71289 & 0), 0, _GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) | (0)), 0)), int(_GLF_ONE(1.0, injectionSwitch.y))), _GLF_IDENTITY(ivec4(1, 1, 1, 1), ivec4(0, 0, 0, 0) ^ _GLF_IDENTITY((ivec4(1, 1, 1, 1)), ((ivec4(1, 1, 1, 1))) << ivec4(0, 0, 0, 0))) * (ivec4((-71289 & 0), 0, 0, int(_GLF_ONE(1.0, injectionSwitch.y))))), ivec4(0, 0, 0, 0) ^ (_GLF_IDENTITY(ivec4((-71289 & 0), 0, 0, int(_GLF_ONE(1.0, injectionSwitch.y))), _GLF_IDENTITY(ivec4(1, 1, 1, 1), ivec4(0, 0, 0, 0) ^ (ivec4(1, 1, 1, 1))) * (ivec4((-71289 & 0), 0, 0, int(_GLF_ONE(1.0, injectionSwitch.y))))))), _GLF_IDENTITY(ivec4((-71289 & 0), 0, 0, int(_GLF_ONE(1.0, injectionSwitch.y))), _GLF_IDENTITY(ivec4(1, 1, 1, 1), ivec4(0, 0, 0, 0) ^ (ivec4(1, 1, 1, 1))) * (ivec4((-71289 & 0), 0, _GLF_IDENTITY(0, max(0, 0)), int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y))))))))) / 1)), (_GLF_IDENTITY((-71289 & 0), _GLF_IDENTITY(int(ivec4((-71289 & 0), 0, 0, int(_GLF_ONE(1.0, injectionSwitch.y)))), (_GLF_IDENTITY(int(ivec4((-71289 & _GLF_IDENTITY(0, max(0, 0))), 0, 0, int(_GLF_ONE(1.0, injectionSwitch.y)))), (int(ivec4((-71289 & _GLF_IDENTITY(0, max(0, 0))), 0, 0, int(_GLF_ONE(1.0, injectionSwitch.y))))) / 1)) / 1))) * 1) << 0), -71289 & 0)))); _GLF_IDENTITY(_injected_loop_counter --, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter --, 0 + (_injected_loop_counter --)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter --, 0 + (_injected_loop_counter --)), (_GLF_IDENTITY(_injected_loop_counter --, 0 + (_injected_loop_counter --))) - 0))))))))
  {
   atomicStore(write_val, _GLF_IDENTITY(uint(virtual_gid), ~ _GLF_IDENTITY((~ (uint(virtual_gid))), _GLF_IDENTITY(~ (~ ((~ (uint(virtual_gid))))), (~ (~ _GLF_IDENTITY(((~ _GLF_IDENTITY((uint(_GLF_IDENTITY(virtual_gid, max(virtual_gid, _GLF_IDENTITY(virtual_gid, (true ? virtual_gid : _GLF_FUZZED(write_val))))))), (_GLF_IDENTITY(_GLF_IDENTITY((uint(virtual_gid)), (false ? _GLF_FUZZED(subgroup_size) : (uint(virtual_gid)))), _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY((uint(virtual_gid)), (false ? _GLF_FUZZED(subgroup_size) : (uint(virtual_gid)))), 0u, 1u)), (uint(uvec3(_GLF_IDENTITY((uint(virtual_gid)), (false ? _GLF_FUZZED(subgroup_size) : (uint(virtual_gid)))), 0u, 1u))) + 0u))) << 0u))), (((~ _GLF_IDENTITY((uint(_GLF_IDENTITY(virtual_gid, max(virtual_gid, _GLF_IDENTITY(virtual_gid, (true ? virtual_gid : _GLF_FUZZED(write_val))))))), (_GLF_IDENTITY((uint(virtual_gid)), (false ? _GLF_FUZZED(subgroup_size) : (_GLF_IDENTITY(uint(virtual_gid), (uint(virtual_gid)) | (uint(virtual_gid))))))) << 0u)))) << 0u))) | 0u))), _GLF_IDENTITY(4, (4) | (4)), 64, 0);
   do
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      break;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0) * (injectionSwitch), min(_GLF_IDENTITY(mat2(1.0) * (injectionSwitch), vec2(1.0, 1.0) * (mat2(1.0) * (injectionSwitch))), mat2(1.0) * (injectionSwitch))), _GLF_IDENTITY(max(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch)), (max(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch))) / cos(vec2(0.0, 0.0))))).x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) | 0))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec2(injectionSwitch.x < injectionSwitch.y, true))))), false || (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false))))))
  {
  }
 else
  {
   do
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  return;
 buf[virtual_gid] = uint(subgroupAllEqual(write_val));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), true && (bool(false)))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
      return;
     return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 | 1)); _injected_loop_counter ++)
          {
           return;
          }
        }
       return;
      }
    }
  }
 do
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), bool(bvec4(_GLF_IDENTITY((false), true && ((false))), false, true, true))))))))))))
    return;
   if(_GLF_DEAD(false))
    continue;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
     do
      {
       do
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, 1.0, 1.0))).y))))
            continue;
           if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                break;
              }
             else
              {
               return;
              }
            }
           if(_GLF_DEAD(false))
            break;
           return;
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
           if(_GLF_DEAD(false))
            continue;
           return;
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
}
