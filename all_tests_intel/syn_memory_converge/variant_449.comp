#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_12 {
 mat4x3 _f0;
 ivec2 _f1;
 bool _f2;
 uvec3 _f3;
 ivec3 _f4;
} ;

struct _GLF_struct_11 {
 ivec2 _f0;
 uvec2 _f1;
 ivec4 _f2;
 mat4x3 _f3;
 mat2 _f4;
 mat4x3 _f5;
 uvec2 _f6;
} ;

struct _GLF_struct_10 {
 bvec4 _f0;
 mat4x2 _f1;
 int _f2;
 bvec2 _f3;
 uvec4 _f4;
 bvec4 _f5;
} ;

struct _GLF_struct_13 {
 bvec2 _f0;
 _GLF_struct_10 _f1;
 _GLF_struct_11 _f2;
 vec3 _f3;
 mat4 _f4;
 _GLF_struct_12 _f5;
 mat4x3 _f6;
} ;

struct _GLF_struct_8 {
 vec2 _f0;
 float _f1;
 ivec3 _f2;
 vec2 _f3;
 vec4 _f4;
 vec2 _f5;
 ivec4 _f6;
} ;

struct _GLF_struct_7 {
 uvec3 _f0;
 vec4 _f1;
 mat2 _f2;
 bool _f3;
 bvec3 _f4;
 uvec4 _f5;
} ;

struct _GLF_struct_9 {
 vec2 _f0;
 ivec2 _f1;
 ivec2 _f2;
 _GLF_struct_7 _f3;
 vec3 _f4;
 float _f5;
 _GLF_struct_8 _f6;
} ;

struct _GLF_struct_5 {
 ivec3 _f0;
 vec3 _f1;
 mat3x2 _f2;
 mat2 _f3;
 uint _f4;
 mat2x3 _f5;
} ;

struct _GLF_struct_4 {
 uvec2 _f0;
 vec3 _f1;
 mat4 _f2;
 mat3x2 _f3;
 mat2x3 _f4;
 uvec3 _f5;
 mat2x4 _f6;
} ;

struct _GLF_struct_6 {
 _GLF_struct_4 _f0;
 _GLF_struct_5 _f1;
 mat2 _f2;
 ivec3 _f3;
} ;

struct _GLF_struct_2 {
 bvec3 _f0;
 uint _f1;
 mat4 _f2;
 mat2x3 _f3;
 ivec2 _f4;
 float _f5;
 mat4x2 _f6;
} ;

struct _GLF_struct_1 {
 mat4x3 _f0;
} ;

struct _GLF_struct_0 {
 mat2x3 _f0;
 ivec4 _f1;
 bvec3 _f2;
 mat3 _f3;
 mat4x2 _f4;
 ivec3 _f5;
} ;

struct _GLF_struct_3 {
 _GLF_struct_0 _f0;
 _GLF_struct_1 _f1;
 _GLF_struct_2 _f2;
 vec3 _f3;
} ;

struct _GLF_struct_14 {
 bvec4 _f0;
 _GLF_struct_3 _f1;
 _GLF_struct_6 _f2;
 bvec4 _f3;
 uint _f4;
 _GLF_struct_9 _f5;
 _GLF_struct_13 _f6;
 uint num_workgroup;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     barrier();
    }
   else
    {
    }
  }
 uint subgroup_size = 16;
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(! (_GLF_IDENTITY(! ((injectionSwitch.x < injectionSwitch.y)), false || (! ((injectionSwitch.x < injectionSwitch.y))))), true && (! (_GLF_IDENTITY(! ((injectionSwitch.x < injectionSwitch.y)), false || (! ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)))))))))))))
        {
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), clamp(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x)))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true)))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], (false ? _GLF_FUZZED(7477.6091) : (injectionSwitch)[0])), _GLF_FUZZED(0.3)), vec2(_GLF_FUZZED((+ (64.22 / -7.5))), (injectionSwitch)[1]), bvec2(false, true))).x < injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), bvec2(bvec4(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), false, false)))))))
            {
             barrier();
            }
           else
            {
            }
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
          }
        }
       else
        {
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y)), (_injected_loop_counter < int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(vec3(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-3.2)), float(injectionSwitch.y), bool(true))), determinant(mat2(0.0, 0.0, 0.0, 0.0)), determinant(mat2(0.0, sin(0.0), 0.0, 0.0)))), _GLF_IDENTITY((float(vec3(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(_GLF_IDENTITY(-3.2, clamp(-3.2, -3.2, -3.2)))), float(injectionSwitch.y), bool(true))), determinant(mat2(0.0, 0.0, 0.0, 0.0)), determinant(mat2(0.0, sin(0.0), 0.0, 0.0))))), max((float(vec3(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(_GLF_IDENTITY(-3.2, clamp(-3.2, -3.2, -3.2)))), float(injectionSwitch.y), bool(true))), determinant(mat2(0.0, 0.0, 0.0, 0.0)), determinant(mat2(0.0, sin(0.0), 0.0, 0.0))))), (float(vec3(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(_GLF_IDENTITY(-3.2, clamp(-3.2, -3.2, -3.2)))), float(injectionSwitch.y), bool(true))), determinant(mat2(0.0, 0.0, 0.0, 0.0)), determinant(mat2(0.0, sin(0.0), 0.0, 0.0))))))) - 0.0))))) || false)); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
        }
      }
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))))))
    barrier();
  }
 else
  {
   for(int _injected_loop_counter = (_GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) | 1), max(_GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) | 1), ((int(_GLF_ONE(1.0, injectionSwitch.y)) | 1)) | 0), (int(_GLF_ONE(1.0, injectionSwitch.y)) | 1))) | (int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0))) ^ 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 _GLF_struct_14 _GLF_struct_replacement_14 = _GLF_struct_14(bvec4(true), _GLF_struct_3(_GLF_struct_0(mat2x3(1.0), ivec4(1), bvec3(true), mat3(1.0), mat4x2(1.0), ivec3(1)), _GLF_struct_1(mat4x3(1.0)), _GLF_struct_2(bvec3(true), 1u, mat4(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(_GLF_IDENTITY(mat4x2(_GLF_IDENTITY(1.0, float(mat3x2(1.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat2(0.0, exp(0.0), log(1.0), 1.0), (true ? mat2(0.0, exp(0.0), log(1.0), 1.0) : _GLF_FUZZED(mat2(-2.2, -50.39, 8.7, -22.26))))))))), 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0), mat4x2(mat4(mat4x2(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat3x2(1.0, 0.0, 1.0, 0.0, 0.0, 0.0)), (float(mat3x2(1.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, min(0.0, 0.0)), _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(8064.5049) : 0.0)))), 0.0))) / sqrt(_GLF_ONE(1.0, injectionSwitch.y)))), 0.0, 1.0, 1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)))), 1.0, 0.0, 1.0))))), (false ? _GLF_FUZZED(9.1) : float(_GLF_IDENTITY(mat4x2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) - sqrt(0.0)), (true ? _GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) - sqrt(0.0)), min(_GLF_IDENTITY(1.0, (1.0) - sqrt(0.0)), _GLF_IDENTITY(1.0, (1.0) - sqrt(0.0)))) : _GLF_FUZZED(sinh(-6.7)))), float(mat3x2(1.0, 0.0, 1.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(677.858)), bool(false))), _GLF_IDENTITY(0.0, _GLF_IDENTITY((0.0) - 0.0, 0.0 + ((0.0) - 0.0))))), 1.0 * (_GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(677.858)), bool(false))), _GLF_IDENTITY(0.0, (0.0) - 0.0))))), 0.0, 0.0))), 0.0, 1.0, 1.0, _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, min(1.0, 1.0)), _GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0)), 1.0)), 1.0, 1.0)), 1.0, 0.0, 1.0), mat4x2(mat4(mat4x2(_GLF_IDENTITY(1.0, float(mat3x2(1.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(clamp(0.0, _GLF_IDENTITY(0.0, (0.0) - _GLF_ZERO(0.0, injectionSwitch.x)), 0.0), max(_GLF_IDENTITY(clamp(0.0, _GLF_IDENTITY(0.0, (0.0) - _GLF_ZERO(0.0, injectionSwitch.x)), 0.0), min(clamp(0.0, _GLF_IDENTITY(0.0, (0.0) - _GLF_ZERO(0.0, injectionSwitch.x)), 0.0), clamp(0.0, _GLF_IDENTITY(0.0, (0.0) - _GLF_ZERO(0.0, injectionSwitch.x)), 0.0))), _GLF_IDENTITY(clamp(0.0, _GLF_IDENTITY(0.0, (0.0) - _GLF_ZERO(0.0, injectionSwitch.x)), 0.0), mix(float(clamp(0.0, _GLF_IDENTITY(0.0, (0.0) - _GLF_ZERO(0.0, injectionSwitch.x)), 0.0)), float(_GLF_FUZZED(-158.081)), bool(false)))))), 1.0, 0.0, 0.0, 0.0))), 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0)))))))), 1.0))), mat2x3(1.0), ivec2(1), _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(1.2))), mat4x2(1.0)), vec3(1.0)), _GLF_struct_6(_GLF_struct_4(uvec2(1u), vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(vec4(1.0, 1.0, sqrt(0.0), 1.0)), mix(float(float(vec4(1.0, 1.0, sqrt(0.0), 1.0))), float(_GLF_FUZZED(467.166)), bool(false))))), mat4(1.0), mat3x2(1.0), mat2x3(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(94.82) : 1.0))), uvec3(1u), mat2x4(1.0)), _GLF_struct_5(ivec3(_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, (1) | _GLF_IDENTITY((_GLF_IDENTITY(1, min(1, 1))), clamp((_GLF_IDENTITY(1, min(1, 1))), (_GLF_IDENTITY(1, min(1, 1))), (_GLF_IDENTITY(1, min(1, 1))))))))), vec3(1.0), mat3x2(1.0), mat2(_GLF_IDENTITY(1.0, float(mat3x4(_GLF_IDENTITY(1.0, float(mat3x2(1.0, 1.0, 1.0, 0.0, 0.0, 0.0))), 0.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 0.0, 1.0, 1.0, 0.0, 0.0, abs(1.0), 0.0, determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))), 1u, mat2x3(_GLF_IDENTITY(1.0, min(1.0, 1.0)))), mat2(1.0), ivec3(1)), bvec4(true), 1u, _GLF_struct_9(vec2(1.0), _GLF_IDENTITY(ivec2(1), ivec2(0, 0) | (ivec2(1))), ivec2(1), _GLF_struct_7(uvec3(1u), vec4(1.0), mat2(_GLF_IDENTITY(1.0, 1.0 * (1.0))), true, bvec3(true), uvec4(1u)), _GLF_IDENTITY(vec3(1.0), min(_GLF_IDENTITY(vec3(1.0), (vec3(1.0)) * mat3(1.0)), _GLF_IDENTITY(vec3(1.0), (vec3(1.0)) - vec3(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(_GLF_IDENTITY(-2.2, (-2.2) - 0.0)))), 0.0, 0.0)))), 1.0, _GLF_struct_8(vec2(1.0), 1.0, ivec3(1), vec2(_GLF_IDENTITY(1.0, float(mat4x2(_GLF_IDENTITY(1.0, _GLF_IDENTITY(mix(float(_GLF_FUZZED(911.462)), _GLF_IDENTITY(float(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(9.4)), float(1.0), bool(true)))), _GLF_IDENTITY(clamp(float(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(9.4)), float(1.0), bool(true)))), float(_GLF_IDENTITY(1.0, mix(_GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_FUZZED(9.4)), clamp(float(_GLF_FUZZED(9.4)), float(_GLF_FUZZED(9.4)), float(_GLF_FUZZED(9.4)))), (true ? _GLF_IDENTITY(float(_GLF_FUZZED(9.4)), clamp(float(_GLF_FUZZED(9.4)), float(_GLF_FUZZED(9.4)), float(_GLF_FUZZED(9.4)))) : _GLF_FUZZED(9.5))), float(1.0), bool(true)))), float(_GLF_IDENTITY(1.0, _GLF_IDENTITY(mix(float(_GLF_IDENTITY(_GLF_FUZZED(9.4), (_GLF_IDENTITY(_GLF_FUZZED(9.4), (_GLF_IDENTITY(false ? _GLF_FUZZED(-11.08) : _GLF_FUZZED(9.4), clamp(_GLF_IDENTITY(false ? _GLF_FUZZED(-11.08) : _GLF_FUZZED(9.4), min(false ? _GLF_FUZZED(-11.08) : _GLF_FUZZED(9.4), false ? _GLF_FUZZED(-11.08) : _GLF_FUZZED(9.4))), false ? _GLF_FUZZED(_GLF_IDENTITY(-11.08, float(mat2(-11.08, 0.0, exp(0.0), 0.0)))) : _GLF_FUZZED(9.4), false ? _GLF_FUZZED(-11.08) : _GLF_FUZZED(9.4)))))) - 0.0)), float(1.0), bool(true)), max(mix(float(_GLF_FUZZED(9.4)), float(1.0), _GLF_IDENTITY(bool(true), true && (bool(true)))), mix(_GLF_IDENTITY(float(_GLF_FUZZED(9.4)), mix(float(_GLF_FUZZED(31.78)), float(float(_GLF_FUZZED(9.4))), bool(true))), _GLF_IDENTITY(float(1.0), max(float(1.0), _GLF_IDENTITY(float(1.0), min(float(1.0), float(1.0))))), bool(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, false, true, false)), (bool(bvec4(true, false, true, false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))), float(vec4(_GLF_IDENTITY(clamp(float(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(9.4)), float(1.0), bool(true)))), float(_GLF_IDENTITY(1.0, mix(_GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_FUZZED(9.4)), clamp(float(_GLF_FUZZED(9.4)), float(_GLF_FUZZED(9.4)), float(_GLF_FUZZED(9.4)))), (true ? _GLF_IDENTITY(float(_GLF_FUZZED(9.4)), clamp(float(_GLF_FUZZED(9.4)), float(_GLF_FUZZED(9.4)), float(_GLF_FUZZED(9.4)))) : _GLF_FUZZED(9.5))), float(1.0), bool(true)))), float(_GLF_IDENTITY(1.0, _GLF_IDENTITY(mix(float(_GLF_IDENTITY(_GLF_FUZZED(9.4), (_GLF_IDENTITY(_GLF_FUZZED(9.4), (_GLF_IDENTITY(false ? _GLF_FUZZED(-11.08) : _GLF_FUZZED(9.4), clamp(_GLF_IDENTITY(false ? _GLF_FUZZED(-11.08) : _GLF_FUZZED(9.4), min(false ? _GLF_FUZZED(-11.08) : _GLF_FUZZED(9.4), false ? _GLF_FUZZED(-11.08) : _GLF_FUZZED(9.4))), false ? _GLF_FUZZED(_GLF_IDENTITY(-11.08, float(mat2(-11.08, 0.0, exp(0.0), 0.0)))) : _GLF_FUZZED(9.4), false ? _GLF_FUZZED(-11.08) : _GLF_FUZZED(9.4)))))) - 0.0)), float(1.0), bool(true)), max(mix(float(_GLF_FUZZED(9.4)), float(1.0), _GLF_IDENTITY(bool(true), true && (bool(true)))), mix(_GLF_IDENTITY(float(_GLF_FUZZED(9.4)), mix(float(_GLF_FUZZED(31.78)), float(float(_GLF_FUZZED(9.4))), bool(true))), _GLF_IDENTITY(float(1.0), max(float(1.0), _GLF_IDENTITY(float(1.0), min(float(1.0), float(1.0))))), bool(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, false, true, false)), (bool(bvec4(true, false, true, false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))), clamp(clamp(float(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(9.4)), float(1.0), bool(true)))), float(_GLF_IDENTITY(1.0, mix(_GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_FUZZED(9.4)), clamp(float(_GLF_FUZZED(9.4)), float(_GLF_FUZZED(9.4)), float(_GLF_FUZZED(9.4)))), (true ? _GLF_IDENTITY(float(_GLF_FUZZED(9.4)), clamp(float(_GLF_FUZZED(9.4)), float(_GLF_FUZZED(9.4)), float(_GLF_FUZZED(9.4)))) : _GLF_FUZZED(9.5))), float(1.0), bool(true)))), float(_GLF_IDENTITY(1.0, _GLF_IDENTITY(mix(float(_GLF_IDENTITY(_GLF_FUZZED(9.4), (_GLF_IDENTITY(_GLF_FUZZED(9.4), (_GLF_IDENTITY(false ? _GLF_FUZZED(-11.08) : _GLF_FUZZED(9.4), clamp(_GLF_IDENTITY(false ? _GLF_FUZZED(-11.08) : _GLF_FUZZED(9.4), min(false ? _GLF_FUZZED(-11.08) : _GLF_FUZZED(9.4), false ? _GLF_FUZZED(-11.08) : _GLF_FUZZED(9.4))), false ? _GLF_FUZZED(_GLF_IDENTITY(-11.08, float(mat2(-11.08, 0.0, exp(0.0), 0.0)))) : _GLF_FUZZED(9.4), false ? _GLF_FUZZED(-11.08) : _GLF_FUZZED(9.4)))))) - 0.0)), float(1.0), bool(true)), max(mix(float(_GLF_FUZZED(9.4)), float(1.0), _GLF_IDENTITY(bool(true), true && (bool(true)))), mix(_GLF_IDENTITY(float(_GLF_FUZZED(9.4)), mix(float(_GLF_FUZZED(31.78)), float(float(_GLF_FUZZED(9.4))), bool(true))), _GLF_IDENTITY(float(1.0), max(float(1.0), _GLF_IDENTITY(float(1.0), min(float(1.0), float(1.0))))), bool(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, false, true, false)), (bool(bvec4(true, false, true, false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))), clamp(float(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(9.4)), float(1.0), bool(true)))), float(_GLF_IDENTITY(1.0, mix(_GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_FUZZED(9.4)), clamp(float(_GLF_FUZZED(9.4)), float(_GLF_FUZZED(9.4)), float(_GLF_FUZZED(9.4)))), (true ? _GLF_IDENTITY(float(_GLF_FUZZED(9.4)), clamp(float(_GLF_FUZZED(9.4)), float(_GLF_FUZZED(9.4)), float(_GLF_FUZZED(9.4)))) : _GLF_FUZZED(9.5))), float(1.0), bool(true)))), float(_GLF_IDENTITY(1.0, _GLF_IDENTITY(mix(float(_GLF_IDENTITY(_GLF_FUZZED(9.4), (_GLF_IDENTITY(_GLF_FUZZED(9.4), (_GLF_IDENTITY(false ? _GLF_FUZZED(-11.08) : _GLF_FUZZED(9.4), clamp(_GLF_IDENTITY(false ? _GLF_FUZZED(-11.08) : _GLF_FUZZED(9.4), min(false ? _GLF_FUZZED(-11.08) : _GLF_FUZZED(9.4), false ? _GLF_FUZZED(-11.08) : _GLF_FUZZED(9.4))), false ? _GLF_FUZZED(_GLF_IDENTITY(-11.08, float(mat2(-11.08, 0.0, exp(0.0), 0.0)))) : _GLF_FUZZED(9.4), false ? _GLF_FUZZED(-11.08) : _GLF_FUZZED(9.4)))))) - 0.0)), float(1.0), bool(true)), max(mix(float(_GLF_FUZZED(9.4)), float(1.0), _GLF_IDENTITY(bool(true), true && (bool(true)))), mix(_GLF_IDENTITY(float(_GLF_FUZZED(9.4)), mix(float(_GLF_FUZZED(31.78)), float(float(_GLF_FUZZED(9.4))), bool(true))), _GLF_IDENTITY(float(1.0), max(float(1.0), _GLF_IDENTITY(float(1.0), min(float(1.0), float(1.0))))), bool(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, false, true, false)), (bool(bvec4(true, false, true, false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))), clamp(float(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(9.4)), float(1.0), bool(true)))), float(_GLF_IDENTITY(1.0, mix(_GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_FUZZED(9.4)), clamp(float(_GLF_FUZZED(9.4)), float(_GLF_FUZZED(9.4)), float(_GLF_FUZZED(9.4)))), (true ? _GLF_IDENTITY(float(_GLF_FUZZED(9.4)), clamp(float(_GLF_FUZZED(9.4)), float(_GLF_FUZZED(9.4)), float(_GLF_FUZZED(9.4)))) : _GLF_FUZZED(9.5))), float(1.0), bool(true)))), float(_GLF_IDENTITY(1.0, _GLF_IDENTITY(mix(float(_GLF_IDENTITY(_GLF_FUZZED(9.4), (_GLF_IDENTITY(_GLF_FUZZED(9.4), (_GLF_IDENTITY(false ? _GLF_FUZZED(-11.08) : _GLF_FUZZED(9.4), clamp(_GLF_IDENTITY(false ? _GLF_FUZZED(-11.08) : _GLF_FUZZED(9.4), min(false ? _GLF_FUZZED(-11.08) : _GLF_FUZZED(9.4), false ? _GLF_FUZZED(-11.08) : _GLF_FUZZED(9.4))), false ? _GLF_FUZZED(_GLF_IDENTITY(-11.08, float(mat2(-11.08, 0.0, exp(0.0), 0.0)))) : _GLF_FUZZED(9.4), false ? _GLF_FUZZED(-11.08) : _GLF_FUZZED(9.4)))))) - 0.0)), float(1.0), bool(true)), max(mix(float(_GLF_FUZZED(9.4)), float(1.0), _GLF_IDENTITY(bool(true), true && (bool(true)))), mix(_GLF_IDENTITY(float(_GLF_FUZZED(9.4)), mix(float(_GLF_FUZZED(31.78)), float(float(_GLF_FUZZED(9.4))), bool(true))), _GLF_IDENTITY(float(1.0), max(float(1.0), _GLF_IDENTITY(float(1.0), min(float(1.0), float(1.0))))), bool(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, false, true, false)), (bool(bvec4(true, false, true, false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))))), 0.0, log(1.0), 1.0)))), _GLF_IDENTITY(bool(true), _GLF_IDENTITY(bool(bvec4(bool(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bvec2(_GLF_IDENTITY(! (true), false || (! (true))), true)))))), false, true, _GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), false || (_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), bool(bool(_GLF_IDENTITY(true, false || (true))))))))), false || (bool(bvec4(bool(true), false, _GLF_IDENTITY(true, ! (! (true))), true)))))), mix(float(_GLF_FUZZED(2.7)), float(mix(float(_GLF_FUZZED(911.462)), _GLF_IDENTITY(float(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(9.4)), float(1.0), bool(true)))), _GLF_IDENTITY(clamp(float(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(9.4)), float(1.0), bool(true)))), float(_GLF_IDENTITY(1.0, mix(_GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_FUZZED(9.4)), clamp(float(_GLF_FUZZED(9.4)), float(_GLF_FUZZED(9.4)), float(_GLF_FUZZED(9.4)))), (true ? _GLF_IDENTITY(float(_GLF_FUZZED(9.4)), clamp(float(_GLF_FUZZED(9.4)), float(_GLF_FUZZED(9.4)), float(_GLF_FUZZED(9.4)))) : _GLF_FUZZED(9.5))), float(1.0), bool(true)))), float(_GLF_IDENTITY(1.0, _GLF_IDENTITY(mix(float(_GLF_IDENTITY(_GLF_FUZZED(9.4), (_GLF_IDENTITY(_GLF_FUZZED(9.4), (_GLF_IDENTITY(false ? _GLF_FUZZED(-11.08) : _GLF_FUZZED(9.4), clamp(_GLF_IDENTITY(false ? _GLF_FUZZED(-11.08) : _GLF_FUZZED(9.4), min(false ? _GLF_FUZZED(-11.08) : _GLF_FUZZED(9.4), false ? _GLF_FUZZED(-11.08) : _GLF_FUZZED(9.4))), false ? _GLF_FUZZED(_GLF_IDENTITY(-11.08, float(mat2(-11.08, 0.0, exp(0.0), 0.0)))) : _GLF_FUZZED(9.4), false ? _GLF_FUZZED(-11.08) : _GLF_FUZZED(9.4)))))) - 0.0)), float(1.0), bool(true)), max(mix(float(_GLF_FUZZED(9.4)), float(1.0), _GLF_IDENTITY(bool(true), true && (bool(true)))), mix(_GLF_IDENTITY(float(_GLF_FUZZED(9.4)), mix(float(_GLF_FUZZED(31.78)), float(float(_GLF_FUZZED(9.4))), bool(true))), _GLF_IDENTITY(float(1.0), max(float(1.0), _GLF_IDENTITY(float(1.0), min(float(1.0), float(1.0))))), bool(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, false, true, false)), (bool(bvec4(true, false, true, false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))), float(vec4(_GLF_IDENTITY(clamp(float(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(9.4)), float(1.0), bool(true)))), float(_GLF_IDENTITY(1.0, mix(_GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_FUZZED(9.4)), clamp(float(_GLF_FUZZED(9.4)), float(_GLF_FUZZED(9.4)), float(_GLF_FUZZED(9.4)))), (true ? _GLF_IDENTITY(float(_GLF_FUZZED(9.4)), clamp(float(_GLF_FUZZED(9.4)), float(_GLF_FUZZED(9.4)), float(_GLF_FUZZED(9.4)))) : _GLF_FUZZED(9.5))), float(1.0), bool(true)))), float(_GLF_IDENTITY(1.0, _GLF_IDENTITY(mix(float(_GLF_IDENTITY(_GLF_FUZZED(9.4), (_GLF_IDENTITY(_GLF_FUZZED(9.4), (_GLF_IDENTITY(false ? _GLF_FUZZED(-11.08) : _GLF_FUZZED(9.4), clamp(_GLF_IDENTITY(false ? _GLF_FUZZED(-11.08) : _GLF_FUZZED(9.4), min(false ? _GLF_FUZZED(-11.08) : _GLF_FUZZED(9.4), false ? _GLF_FUZZED(-11.08) : _GLF_FUZZED(9.4))), false ? _GLF_FUZZED(_GLF_IDENTITY(-11.08, float(mat2(-11.08, 0.0, exp(0.0), 0.0)))) : _GLF_FUZZED(9.4), false ? _GLF_FUZZED(-11.08) : _GLF_FUZZED(9.4)))))) - 0.0)), float(1.0), bool(true)), max(mix(float(_GLF_FUZZED(9.4)), float(1.0), _GLF_IDENTITY(bool(true), true && (bool(true)))), mix(_GLF_IDENTITY(float(_GLF_FUZZED(9.4)), mix(float(_GLF_FUZZED(31.78)), float(float(_GLF_FUZZED(9.4))), bool(true))), _GLF_IDENTITY(float(1.0), max(float(1.0), _GLF_IDENTITY(float(1.0), min(float(1.0), float(1.0))))), bool(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, false, true, false)), (bool(bvec4(true, false, true, false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))), clamp(clamp(float(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(9.4)), float(1.0), bool(true)))), float(_GLF_IDENTITY(1.0, mix(_GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_FUZZED(9.4)), clamp(float(_GLF_FUZZED(9.4)), float(_GLF_FUZZED(9.4)), float(_GLF_FUZZED(9.4)))), (true ? _GLF_IDENTITY(float(_GLF_FUZZED(9.4)), clamp(float(_GLF_FUZZED(9.4)), float(_GLF_FUZZED(9.4)), float(_GLF_FUZZED(9.4)))) : _GLF_FUZZED(9.5))), float(1.0), bool(true)))), float(_GLF_IDENTITY(1.0, _GLF_IDENTITY(mix(float(_GLF_IDENTITY(_GLF_FUZZED(9.4), (_GLF_IDENTITY(_GLF_FUZZED(9.4), (_GLF_IDENTITY(false ? _GLF_FUZZED(-11.08) : _GLF_FUZZED(9.4), clamp(_GLF_IDENTITY(false ? _GLF_FUZZED(-11.08) : _GLF_FUZZED(9.4), min(false ? _GLF_FUZZED(-11.08) : _GLF_FUZZED(9.4), false ? _GLF_FUZZED(-11.08) : _GLF_FUZZED(9.4))), false ? _GLF_FUZZED(_GLF_IDENTITY(-11.08, float(mat2(-11.08, 0.0, exp(0.0), 0.0)))) : _GLF_FUZZED(9.4), false ? _GLF_FUZZED(-11.08) : _GLF_FUZZED(9.4)))))) - 0.0)), float(1.0), bool(true)), max(mix(float(_GLF_FUZZED(9.4)), float(1.0), _GLF_IDENTITY(bool(true), true && (bool(true)))), mix(_GLF_IDENTITY(float(_GLF_FUZZED(9.4)), mix(float(_GLF_FUZZED(31.78)), float(float(_GLF_FUZZED(9.4))), bool(true))), _GLF_IDENTITY(float(1.0), max(float(1.0), _GLF_IDENTITY(float(1.0), min(float(1.0), float(1.0))))), bool(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, false, true, false)), (bool(bvec4(true, false, true, false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))), clamp(float(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(9.4)), float(1.0), bool(true)))), float(_GLF_IDENTITY(1.0, mix(_GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_FUZZED(9.4)), clamp(float(_GLF_FUZZED(9.4)), float(_GLF_FUZZED(9.4)), float(_GLF_FUZZED(9.4)))), (true ? _GLF_IDENTITY(float(_GLF_FUZZED(9.4)), clamp(float(_GLF_FUZZED(9.4)), float(_GLF_FUZZED(9.4)), float(_GLF_FUZZED(9.4)))) : _GLF_FUZZED(9.5))), float(1.0), bool(true)))), float(_GLF_IDENTITY(1.0, _GLF_IDENTITY(mix(float(_GLF_IDENTITY(_GLF_FUZZED(9.4), (_GLF_IDENTITY(_GLF_FUZZED(9.4), (_GLF_IDENTITY(false ? _GLF_FUZZED(-11.08) : _GLF_FUZZED(9.4), clamp(_GLF_IDENTITY(false ? _GLF_FUZZED(-11.08) : _GLF_FUZZED(9.4), min(false ? _GLF_FUZZED(-11.08) : _GLF_FUZZED(9.4), false ? _GLF_FUZZED(-11.08) : _GLF_FUZZED(9.4))), false ? _GLF_FUZZED(_GLF_IDENTITY(-11.08, float(mat2(-11.08, 0.0, exp(0.0), 0.0)))) : _GLF_FUZZED(9.4), false ? _GLF_FUZZED(-11.08) : _GLF_FUZZED(9.4)))))) - 0.0)), float(1.0), bool(true)), max(mix(float(_GLF_FUZZED(9.4)), float(1.0), _GLF_IDENTITY(bool(true), true && (bool(true)))), mix(_GLF_IDENTITY(float(_GLF_FUZZED(9.4)), mix(float(_GLF_FUZZED(31.78)), float(float(_GLF_FUZZED(9.4))), bool(true))), _GLF_IDENTITY(float(1.0), max(float(1.0), _GLF_IDENTITY(float(1.0), min(float(1.0), float(1.0))))), bool(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, false, true, false)), (bool(bvec4(true, false, true, false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))), clamp(float(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(9.4)), float(1.0), bool(true)))), float(_GLF_IDENTITY(1.0, mix(_GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_FUZZED(9.4)), clamp(float(_GLF_FUZZED(9.4)), float(_GLF_FUZZED(9.4)), float(_GLF_FUZZED(9.4)))), (true ? _GLF_IDENTITY(float(_GLF_FUZZED(9.4)), clamp(float(_GLF_FUZZED(9.4)), float(_GLF_FUZZED(9.4)), float(_GLF_FUZZED(9.4)))) : _GLF_FUZZED(9.5))), float(1.0), bool(true)))), float(_GLF_IDENTITY(1.0, _GLF_IDENTITY(mix(float(_GLF_IDENTITY(_GLF_FUZZED(9.4), (_GLF_IDENTITY(_GLF_FUZZED(9.4), (_GLF_IDENTITY(false ? _GLF_FUZZED(-11.08) : _GLF_FUZZED(9.4), clamp(_GLF_IDENTITY(false ? _GLF_FUZZED(-11.08) : _GLF_FUZZED(9.4), min(false ? _GLF_FUZZED(-11.08) : _GLF_FUZZED(9.4), false ? _GLF_FUZZED(-11.08) : _GLF_FUZZED(9.4))), false ? _GLF_FUZZED(_GLF_IDENTITY(-11.08, float(mat2(-11.08, 0.0, exp(0.0), 0.0)))) : _GLF_FUZZED(9.4), false ? _GLF_FUZZED(-11.08) : _GLF_FUZZED(9.4)))))) - 0.0)), float(1.0), bool(true)), max(mix(float(_GLF_FUZZED(9.4)), float(1.0), _GLF_IDENTITY(bool(true), true && (bool(true)))), mix(_GLF_IDENTITY(float(_GLF_FUZZED(9.4)), mix(float(_GLF_FUZZED(31.78)), float(float(_GLF_FUZZED(9.4))), bool(true))), _GLF_IDENTITY(float(1.0), max(float(1.0), _GLF_IDENTITY(float(1.0), min(float(1.0), float(1.0))))), bool(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, false, true, false)), (bool(bvec4(true, false, true, false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))))), 0.0, log(1.0), 1.0)))), _GLF_IDENTITY(bool(true), _GLF_IDENTITY(bool(bvec4(bool(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bvec2(_GLF_IDENTITY(! (true), false || (! (true))), true)))))), false, true, _GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), false || (_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), bool(bool(_GLF_IDENTITY(true, false || (true))))))))), false || (bool(bvec4(bool(true), false, _GLF_IDENTITY(true, ! (! (true))), true))))))), bool(true)))), round(length(normalize(_GLF_IDENTITY(vec2(1.0, 1.0), _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat2x3(_GLF_IDENTITY(vec2(_GLF_IDENTITY(1.0, 0.0 + _GLF_IDENTITY((1.0), min(_GLF_IDENTITY((1.0), mix(float(_GLF_FUZZED(34.39)), float((1.0)), bool(true))), (1.0)))), 1.0), vec2(mat3x4(vec2(1.0, 1.0), 0.0, 1.0, 1.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, float(mat4x3(1.0, 1.0, _GLF_IDENTITY(0.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 0.0 : _GLF_FUZZED(1659.8726))), 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(1.0, (1.0) - 0.0), 1.0, 0.0, 1.0, 1.0))), 1.0)), exp(0.0) * (_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, float(mat4x3(1.0, 1.0, _GLF_IDENTITY(0.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 0.0 : _GLF_FUZZED(1659.8726))), 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(1.0, (1.0) - 0.0), 1.0, 0.0, 1.0, 1.0))), 1.0))))) / 1.0), 1.0, 0.0, 0.0, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED((9.3 + -62.88))), bool(false))), (true ? _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 0.0)) : _GLF_FUZZED(66.72))), min(_GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-4.7)), float(0.0), bool(true)))) / 1.0), _GLF_IDENTITY(0.0, (0.0) - 0.0))), 0.0)), 1.0, 0.0))), 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0), transpose(transpose(mat2x3(_GLF_IDENTITY(vec2(1.0, 1.0), vec2(mat3x4(vec2(1.0, 1.0), _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED((-787.792 - 646.037))), bool(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))))), 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 0.0, 1.0, 0.0))), 0.0, 0.0, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-9036.4179)), float(injectionSwitch.x), bool(true)))), 0.0))))), (false ? _GLF_FUZZED(vec2(-1118.0778, -9.9)) : vec2(_GLF_IDENTITY(mat2x3(_GLF_IDENTITY(vec2(1.0, 1.0), vec2(mat3x4(vec2(1.0, 1.0), 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0))), 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0), transpose(transpose(mat2x3(_GLF_IDENTITY(vec2(1.0, 1.0), vec2(mat3x4(vec2(_GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0), (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), true, false))))) ? _GLF_FUZZED(-0.3) : (1.0))) - 0.0), _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(36.35) : 1.0))), 0.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(7.0)), float(1.0), bool(true))), 0.0, 0.0, 0.0, 1.0, 0.0))), 0.0, 0.0, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))[0], injectionSwitch[1])).x > injectionSwitch.y)) ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-72.61, -9.4)) : _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (_GLF_IDENTITY(injectionSwitch[1], max(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch), vec2(mat3x2(_GLF_IDENTITY((injectionSwitch), clamp(_GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch))), (injectionSwitch), (injectionSwitch))), sin(_GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0)))), 0.0, 1.0, 0.0)))[0], _GLF_FUZZED(82.10)), vec2(_GLF_FUZZED(-9.2), (injectionSwitch)[1]), bvec2(false, true)))[1], injectionSwitch[1]))) - determinant(mat2(0.0, 0.0, 0.0, 0.0))))))))).x), 0.0))))))))))), 0.0, 0.0, 1.0, 1.0, 0.0, 0.0)))), vec4(1.0), vec2(1.0), ivec4(1))), _GLF_struct_13(bvec2(_GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (true))), _GLF_struct_10(bvec4(_GLF_IDENTITY(true, ! (! (true)))), mat4x2(_GLF_IDENTITY(1.0, (1.0) - 0.0)), 1, bvec2(true), uvec4(1u), bvec4(true)), _GLF_struct_11(_GLF_IDENTITY(ivec2(1), (false ? _GLF_FUZZED(ivec2(-6876, -78832)) : ivec2(1))), uvec2(1u), ivec4(1), mat4x3(1.0), _GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0), transpose(transpose(mat2(1.0)))), (_GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0), transpose(transpose(mat2(1.0)))), (_GLF_IDENTITY(mat2(1.0), transpose(transpose(mat2(1.0))))) * mat2(_GLF_ONE(1.0, injectionSwitch.y)))) * mat2(_GLF_ONE(1.0, injectionSwitch.y))), mat4x3(1.0), uvec2(1u)), vec3(1.0), mat4(1.0), _GLF_struct_12(mat4x3(1.0), ivec2(1), true, uvec3(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (1u) - 0u)) | _GLF_IDENTITY((1u), ((1u)) | (_GLF_IDENTITY((1u), (_GLF_IDENTITY((1u), max((1u), (1u)))) >> 0u))))), ivec3(_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) << 0), _GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, (1) | 0))))))), mat4x3(1.0)), gl_NumWorkGroups.x);
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) || false)))
  {
  }
 else
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(vec3(injectionSwitch.x, 0.0, 0.0))))) > injectionSwitch.y))))
            barrier();
          }
        }
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).y))))
        {
         barrier();
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (! ((injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec3(! (! ((injectionSwitch.x > injectionSwitch.y))), false, false)), (bool(bvec3(! (! ((injectionSwitch.x > injectionSwitch.y))), false, false))) && true)))))))))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                 do
                  {
                   if(_GLF_DEAD(false))
                    {
                     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                      {
                       barrier();
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false))))
                  barrier();
                }
              }
            }
          }
         else
          {
          }
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
             barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)));
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), (_GLF_IDENTITY((! (false)), true && ((! (false))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), (_GLF_IDENTITY((! (false)), true && ((! (false))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true)))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   else
    {
    }
   for(int _injected_loop_counter = (_GLF_IDENTITY(_GLF_IDENTITY(0, (false ? _GLF_FUZZED(-22908) : _GLF_IDENTITY(0, (0) - 0))) << _GLF_IDENTITY(int(1), int(1)), (false ? _GLF_FUZZED(-12838) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, (false ? _GLF_FUZZED(-22908) : _GLF_IDENTITY(0, (0) - 0))), (_GLF_IDENTITY(_GLF_IDENTITY(0, (false ? _GLF_FUZZED(-22908) : _GLF_IDENTITY(0, (0) - 0))), (_GLF_IDENTITY(0, (false ? _GLF_FUZZED(-22908) : _GLF_IDENTITY(0, (0) - 0)))) >> 0)) + 0) << _GLF_IDENTITY(int(1), int(1)), max(_GLF_IDENTITY(0, (false ? _GLF_FUZZED(-22908) : _GLF_IDENTITY(0, (0) - 0))) << _GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(0, (false ? _GLF_FUZZED(-22908) : _GLF_IDENTITY(0, (0) - 0))) << _GLF_IDENTITY(int(1), int(1))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (int(_GLF_ONE(1.0, injectionSwitch.y)) & int(_GLF_ONE(1.0, injectionSwitch.y)))); _injected_loop_counter ++)
    {
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))
    {
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), false || (bool(bvec3(_GLF_WRAPPED_IF_TRUE(true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))
        {
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
      }
    }
   else
    {
    }
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(false, true, true)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), false, false, true))), false, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) && true), true)))), bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_IDENTITY(false, true && (false)), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) && true), true)))), false || (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) && true), true))))))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) > injectionSwitch.y))));
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(190.011), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) + 0.0), _GLF_FUZZED(-887.908)), bvec2(true, false))).y)), _GLF_IDENTITY((_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, false || (true))) && true), (true) || false))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x < injectionSwitch.y)) && (true)) ? injectionSwitch.x : _GLF_FUZZED(6940.2637)), ((_GLF_IDENTITY(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (true) || false))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x < injectionSwitch.y)) && _GLF_IDENTITY((true), true && (_GLF_IDENTITY((true), bool(bvec2(_GLF_IDENTITY((true), ((true)) || false), false)))))) ? injectionSwitch.x : _GLF_FUZZED(6940.2637))) / 1.0)), injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y), false || ((_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (true) || false))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x < injectionSwitch.y)) && (true)) ? injectionSwitch.x : _GLF_FUZZED(6940.2637)), ((_GLF_IDENTITY(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (true) || false))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y)) && (true)) ? injectionSwitch.x : _GLF_FUZZED(6940.2637))) / 1.0)), injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)))) && true), false))))), bool(bvec4(_GLF_IDENTITY((_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x < injectionSwitch.y)) && (true)) ? injectionSwitch.x : _GLF_FUZZED(6940.2637))), injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)) && true), false))))), false || ((_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y)) && _GLF_IDENTITY((true), bool(bool((true))))) ? injectionSwitch.x : _GLF_FUZZED(6940.2637))), injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)) && true), false))))))), true, true, true))) || false)))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), ! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(bool(_GLF_DEAD(false)), ! (! (_GLF_IDENTITY(bool(_GLF_DEAD(false)), (bool(_GLF_DEAD(false))) && true))))), bool(bvec3(_GLF_IDENTITY(! (_GLF_IDENTITY(bool(_GLF_DEAD(false)), ! (! (_GLF_IDENTITY(bool(_GLF_DEAD(false)), bool(bvec4(bool(_GLF_DEAD(false)), false, false, true))))))), bool(bvec4(! (_GLF_IDENTITY(bool(_GLF_DEAD(false)), ! (! (bool(_GLF_DEAD(false)))))), false, false, false))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ((_GLF_IDENTITY(! (_GLF_IDENTITY(bool(_GLF_DEAD(false)), ! (! (_GLF_IDENTITY(bool(_GLF_DEAD(false)), (bool(_GLF_DEAD(false))) && true))))), bool(bvec3(_GLF_IDENTITY(! (_GLF_IDENTITY(bool(_GLF_DEAD(false)), ! (! (_GLF_IDENTITY(bool(_GLF_DEAD(false)), bool(bvec4(bool(_GLF_DEAD(false)), false, false, true))))))), bool(bvec4(! (_GLF_IDENTITY(bool(_GLF_DEAD(false)), ! (! (bool(_GLF_DEAD(false)))))), false, false, false))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) || false))), bool(bvec3(bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(_GLF_DEAD(false)), ! (! (bool(_GLF_DEAD(false)))))), bool(bvec3(_GLF_IDENTITY(! (_GLF_IDENTITY(bool(_GLF_DEAD(false)), ! (! (bool(_GLF_DEAD(false)))))), bool(bvec4(! (_GLF_IDENTITY(bool(_GLF_DEAD(false)), ! (! (bool(_GLF_DEAD(false)))))), false, false, _GLF_IDENTITY(false, (false) && true)))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, 0.0, 1.0))), injectionSwitch, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))))).x > injectionSwitch.y))))
                barrier();
              }
             do
              {
               for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (int(_GLF_ZERO(0.0, injectionSwitch.x))) - 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 0)); _injected_loop_counter ++)
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     do
                      {
                       barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 else
                  {
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), _GLF_IDENTITY(bool(bvec2(bool(bool(false)), false)), true && (bool(bvec2(bool(bool(false)), false)))))), (injectionSwitch.x > injectionSwitch.y))))
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               barrier();
              }
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (_GLF_IDENTITY(false, ! (! (false)))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), false || (! (! (false))))))))))) && true)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true)), bool(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true)), false, true))), bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (_GLF_IDENTITY(! (false), (! (false)) && true)))))) && true)), true, false, true))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), (! (! (false))) || false))) && true)), bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true)), true, false, true)))) || false), true && (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))) && true, bool(_GLF_IDENTITY(bvec3((_GLF_IDENTITY(false, ! (! (false)))) && true, false, true), bvec3(bvec3(bvec3((_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bool(false))))))) && true, false, true))))))))))))))
              barrier();
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) ^ 0))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                  {
                   barrier();
                  }
                }
              }
             else
              {
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         else
          {
          }
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
          {
           for(int _injected_loop_counter = _GLF_IDENTITY(0, max(_GLF_IDENTITY(0, 0 + (0)), _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), int(ivec2(~ (0), 1))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-28.08)), float(injectionSwitch.x), bool(true)))) * 1.0) < injectionSwitch.y)))))))
              {
               barrier();
              }
             else
              {
              }
            }
          }
         if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
          barrier();
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, ! (! (true))), (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(7.3)), float(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(7358.8878))), injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(0.1)), bool(false)))))), bool(true))) < injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), mix(float(_GLF_FUZZED(-638.789)), float(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), min(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)))), bool(true))))); _injected_loop_counter ++)
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 barrier();
                }
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, _GLF_IDENTITY(false, false || (false)))), (bool(bvec2(false, _GLF_IDENTITY(false, false || (false))))) && true)), (injectionSwitch.x > injectionSwitch.y))))
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                    {
                     barrier();
                    }
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
             do
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))) < _GLF_IDENTITY(1, 0 + (1))); _injected_loop_counter ++)
                {
                 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))), true), true, false))))))
                  barrier();
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-4.7)), bool(false))) > _GLF_IDENTITY(injectionSwitch.y, 1.0 * (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-4.1)), float(injectionSwitch.y), bool(true)))))))))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                        {
                         barrier();
                        }
                       else
                        {
                        }
                      }
                    }
                   else
                    {
                    }
                   barrier();
                  }
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) << 0), 1, _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(_injected_loop_counter)))))), int(ivec2(~ (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) << 0), 1, _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(_injected_loop_counter)))))), 1)))))); _injected_loop_counter ++)
                    {
                     barrier();
                    }
                  }
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))));
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)) && true)))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           do
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))), true, false)))))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
               barrier();
              }
            }
           while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x4(injectionSwitch, 0.0, 0.0, 0.0, 0.0, 1.0, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0)), sqrt(1.0), sqrt(1.0), length(vec2(0.0, 0.0)), determinant(mat3(1.0, 0.0, log(1.0), 1.0, 1.0, 0.0, 0.0, 1.0, 1.0))), (mat3x4(injectionSwitch, 0.0, 0.0, 0.0, 0.0, 1.0, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0)), sqrt(1.0), sqrt(1.0), length(vec2(0.0, 0.0)), determinant(mat3(1.0, 0.0, log(1.0), 1.0, 1.0, 0.0, 0.0, 1.0, 1.0)))) * mat3(1.0)))).y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)), true && (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)), true && (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false))))))), ! (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)), true && (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false))))))))))), (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)), true && (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))))))), bool(bvec2(! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)), true && (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))))))), true)))) || false))));
          }
         barrier();
        }
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 do
                  {
                   for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, (1) / 1))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                  barrier();
                }
              }
            }
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y)))), (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! _GLF_IDENTITY((! ((injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_IDENTITY((! ((injectionSwitch.x < injectionSwitch.y))), ! (! ((! ((injectionSwitch.x < injectionSwitch.y))))))))))) && true))))
            {
             do
              {
               do
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                  {
                   do
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), true && (_GLF_WRAPPED_LOOP(false))));
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true), false), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(vec4(injectionSwitch.y, 0.0, 0.0, 1.0), vec4(mat2x4(_GLF_IDENTITY(vec4(injectionSwitch.y, 0.0, 0.0, 1.0), (false ? _GLF_FUZZED(vec4(2.6, -0.2, 51.36, 31.47)) : vec4(injectionSwitch.y, 0.0, 0.0, 1.0))), 1.0, 0.0, 1.0, 1.0))))))), false)))))) || false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (false))))))
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                  {
                   barrier();
                  }
                }
               for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), bool(bvec3(true && _GLF_IDENTITY((false), bool(bvec2((false), false))), true, false))))))
                  {
                  }
                 else
                  {
                   do
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       else
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          {
                           do
                            {
                             if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, true))))
                              barrier();
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                           if(_GLF_DEAD(false))
                            {
                             if(_GLF_WRAPPED_IF_FALSE(false))
                              {
                              }
                             else
                              {
                               barrier();
                              }
                            }
                           if(_GLF_DEAD(false))
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              barrier();
                             barrier();
                            }
                           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), _GLF_IDENTITY((_GLF_IDENTITY(true, ! (! (true)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(true, ! (! (true)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(bool(bvec4(! ((_GLF_IDENTITY(true, ! (! (true)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, true, true)), ! (! (bool(bvec4(! ((_GLF_IDENTITY(true, ! (! (true)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, true, true)))))))))))
                            {
                             if(_GLF_WRAPPED_IF_FALSE(false))
                              {
                               if(_GLF_DEAD(false))
                                barrier();
                              }
                             else
                              {
                               barrier();
                              }
                            }
                           else
                            {
                            }
                          }
                        }
                      }
                     else
                      {
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x4(injectionSwitch, 1.0, 0.0, 0.0, 0.0, 0.0, length(0.0))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? vec2(mat2x4(injectionSwitch, 1.0, 0.0, 0.0, 0.0, 0.0, length(0.0))) : _GLF_FUZZED(injectionSwitch)))))).x > injectionSwitch.y, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), injectionSwitch.y)), float(mat4x3(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0))), true && (_GLF_IDENTITY(injectionSwitch.x, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-23.50) : _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))) > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))), ! (! ((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat4x3(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), 1.0, 1.0, _GLF_ONE(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(mod(-1.7, asinh(7.1))) : 1.0)), injectionSwitch.y), 1.0, 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(0.0)), float(1.0), bool(true))), 1.0, 0.0))), true && (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * cos(tan(0.0))), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y)) ? _GLF_FUZZED(-23.50) : injectionSwitch.x)) > injectionSwitch.y)))))) && true)))));
             if(_GLF_DEAD(false))
              {
               do
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, int(ivec2(_injected_loop_counter, 0))) != 1); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   barrier();
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             else
              {
              }
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
                {
                }
               else
                {
                 barrier();
                }
              }
            }
           else
            {
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              barrier();
            }
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
               barrier();
              }
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0))).y))))
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 | (0 << _GLF_IDENTITY(int(5), int(5)))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 1 * (int(4)))))); _injected_loop_counter --)
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, round(length(normalize(1.0))))))) * vec2(1.0, 1.0)).x > injectionSwitch.y))))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           barrier();
                          }
                        }
                      }
                     for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), bool(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0))))) || false); _injected_loop_counter --)
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, 0 | (0))); _injected_loop_counter --)
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            {
                             if(_GLF_WRAPPED_IF_FALSE(false))
                              {
                              }
                             else
                              {
                               barrier();
                              }
                            }
                           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            {
                            }
                           else
                            {
                             barrier();
                            }
                           if(_GLF_DEAD(false))
                            barrier();
                          }
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                      }
                    }
                  }
                }
               if(_GLF_DEAD(false))
                barrier();
               barrier();
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x2(injectionSwitch, 1.0, 0.0, cos(0.0), 1.0)), clamp(vec2(mat3x2(injectionSwitch, 1.0, 0.0, cos(0.0), 1.0)), _GLF_IDENTITY(vec2(mat3x2(injectionSwitch, 1.0, 0.0, cos(0.0), 1.0)), vec2(mat2(vec2(mat3x2(injectionSwitch, 1.0, 0.0, cos(0.0), 1.0)), 1.0, 0.0))), vec2(mat3x2(injectionSwitch, 1.0, 0.0, cos(0.0), 1.0))))).y))))
                    barrier();
                  }
                 barrier();
                }
              }
             else
              {
              }
             for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           else
            {
            }
          }
         barrier();
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))))
            barrier();
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             do
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (_GLF_IDENTITY(false, ! (! (false))))))));
            }
           else
            {
            }
          }
         else
          {
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        barrier();
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           barrier();
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / 1) != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), injectionSwitch.y))))); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      {
      }
     else
      {
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) ? _GLF_FUZZED(vec2(-49.56, -64.83)) : injectionSwitch)).x, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) ? _GLF_FUZZED(vec2(-49.56, -64.83)) : injectionSwitch)).x, mix(float(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) ? _GLF_FUZZED(vec2(-49.56, -64.83)) : injectionSwitch)).x), float(_GLF_FUZZED(3.0)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) ? _GLF_FUZZED(vec2(-49.56, -64.83)) : injectionSwitch)).x)) > injectionSwitch.y))))
        barrier();
      }
    }
  }
 uint workgroup_base = _GLF_IDENTITY(workgroup_size * workgroup_id, _GLF_IDENTITY((workgroup_size * workgroup_id), max((workgroup_size * workgroup_id), (_GLF_IDENTITY(workgroup_size, (false ? _GLF_IDENTITY(_GLF_FUZZED(subgroup_size), max(_GLF_FUZZED(subgroup_size), _GLF_FUZZED(subgroup_size))) : workgroup_size)) * _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u)))) * 1u);
 for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! _GLF_IDENTITY((_GLF_DEAD(false)), bool(bvec4((_GLF_DEAD(false)), false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), (injectionSwitch.x > injectionSwitch.y) && true)))));
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))
        {
         do
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
          barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
             for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), true && (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)))))); _injected_loop_counter --)
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                  {
                   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                        {
                         barrier();
                        }
                       else
                        {
                        }
                      }
                    }
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                  }
                }
               else
                {
                }
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | 0) != (_GLF_IDENTITY((0 ^ _GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 ^ (1))) | (1))) ^ 0, (_GLF_IDENTITY(_GLF_IDENTITY((0 ^ 1) ^ 0, ((0 ^ 1) ^ 0) - _GLF_IDENTITY(0, 0 + (0))), 0 ^ (_GLF_IDENTITY((0 ^ 1) ^ 0, _GLF_IDENTITY(((0 ^ 1) ^ 0), (((0 ^ 1) ^ 0)) - 0) - 0)))) | ((0 ^ 1) ^ 0)))); _injected_loop_counter ++)
                {
                 barrier();
                 do
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 do
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-0.3), _GLF_FUZZED(7.2)), bvec2(false, _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), false, true))))))))))).x > injectionSwitch.y))))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       barrier();
                      }
                     else
                      {
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               do
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
               for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)) || false); _injected_loop_counter ++)
                {
                 barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
       barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true), ! _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) && true), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false) && true))))), ((! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) && true), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false) && true)))))) && true)))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             barrier();
            }
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)) && true); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(mat4x3(injectionSwitch.y, 1.0, exp(0.0), _GLF_IDENTITY(1.0, (1.0) - 0.0), 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0)))) - 0.0)), float(_GLF_FUZZED(float(false))), bool(false)))))))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                  barrier();
                 barrier();
                }
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             barrier();
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           else
            {
            }
          }
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 do
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY((0 ^ 1), max(_GLF_IDENTITY((0 ^ _GLF_IDENTITY(_GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(1, max(1, 1)))), clamp(1, 1, 1))), int(ivec3((0 ^ _GLF_IDENTITY(_GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(1, max(1, 1)))), clamp(1, 1, 1))), 0, 1))), (0 ^ 1)))); _GLF_IDENTITY(_injected_loop_counter ++, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_injected_loop_counter ++), ~ (~ (~ (_injected_loop_counter ++)))), (_GLF_IDENTITY(~ (_injected_loop_counter ++), ~ (~ (~ (_injected_loop_counter ++))))) ^ 0))))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     atomicStore(write_val, uint(virtual_gid), 4, 64, 0);
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
      {
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0))[0], injectionSwitch[1])).x < injectionSwitch.y))))
              {
               barrier();
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         else
          {
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false))))), (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             barrier();
            }
           else
            {
            }
          }
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true))), (_GLF_IDENTITY(false, bool(bvec4(false, false, true, true)))) && true))))))
    {
     for(int _injected_loop_counter = (72541 & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                barrier();
               barrier();
              }
             else
              {
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       do
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)))) > injectionSwitch.y)))))))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), true && (_GLF_WRAPPED_IF_FALSE(false))))
              {
              }
             else
              {
               barrier();
              }
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
              }
             else
              {
               barrier();
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
              }
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) ^ 0) > 0); _injected_loop_counter --)
                {
                 barrier();
                }
              }
            }
           else
            {
            }
          }
         else
          {
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), bool(bvec3(bool(false), true, false)))))))
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
            {
            }
           else
            {
             barrier();
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
           else
            {
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))));
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || (_GLF_WRAPPED_IF_TRUE(true))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec4(true, true, false, true)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(true, ! (! (true))) && (_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(0, (true ? _GLF_IDENTITY(0, (false ? _GLF_FUZZED(_injected_loop_counter) : 0)) : _GLF_FUZZED(_GLF_IDENTITY(_injected_loop_counter, 1 * (_injected_loop_counter)))))], _GLF_IDENTITY(_GLF_IDENTITY(clamp(injectionSwitch[0], injectionSwitch[0], injectionSwitch[0]), mix(float(clamp(injectionSwitch[0], injectionSwitch[0], injectionSwitch[0])), float(_GLF_FUZZED(6.9)), bool(false))), max(clamp(injectionSwitch[0], injectionSwitch[0], injectionSwitch[0]), clamp(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(6.9), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-1.5)), bvec2(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))[0], injectionSwitch[0], injectionSwitch[0])))), injectionSwitch[_GLF_IDENTITY(_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, 0 | (1)))), (_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(1, int(ivec3(1, (0 & (true ? -74317 : -10177)), 1))), 0 | (1))))) | (_GLF_IDENTITY(_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, 0 | (1)))), min(_GLF_IDENTITY(_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, 0 | (1)))), (false ? _GLF_FUZZED(24703) : _GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, _GLF_IDENTITY(0 | (1), (_GLF_IDENTITY(0 | (1), clamp(0 | (1), _GLF_IDENTITY(0 | (1), 1 * (0 | (1))), 0 | (_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec4(1, 1, int(_GLF_ZERO(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (0.0) * 1.0)) - 0.0), injectionSwitch.x)), 0), max(_GLF_IDENTITY(_GLF_IDENTITY(ivec4(1, 1, int(_GLF_ZERO(0.0, injectionSwitch.x)), 0), (ivec4(1, 1, int(_GLF_ZERO(0.0, injectionSwitch.x)), 0)) ^ ivec4(0, 0, 0, 0)), ivec4(0, 0, 0, 0) | (ivec4(1, 1, int(_GLF_ZERO(0.0, injectionSwitch.x)), 0))), ivec4(1, 1, int(_GLF_ZERO(0.0, injectionSwitch.x)), 0))))))))) + 0)))))), _GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0, (0) | (0))), (~ (_GLF_IDENTITY(0, (0) | (0)))) >> 0))) ^ (_GLF_IDENTITY(1, 0 | _GLF_IDENTITY((1), ((1)) / 1)))), (_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, 0 | (1))))) - 0)))))])).y, false || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(0, (true ? _GLF_IDENTITY(0, (false ? _GLF_FUZZED(_injected_loop_counter) : 0)) : _GLF_FUZZED(_GLF_IDENTITY(_injected_loop_counter, 1 * (_injected_loop_counter)))))], _GLF_IDENTITY(_GLF_IDENTITY(clamp(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(0, 0 | (_GLF_IDENTITY(0, ~ (~ (0)))))], injectionSwitch[0]), mix(float(clamp(injectionSwitch[0], injectionSwitch[0], injectionSwitch[0])), float(_GLF_FUZZED(6.9)), bool(false))), max(clamp(injectionSwitch[0], injectionSwitch[0], injectionSwitch[0]), clamp(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(6.9), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-1.5)), bvec2(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x))) - abs(0.0)) < injectionSwitch.y))))) && true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))[0], injectionSwitch[0], injectionSwitch[0])))), injectionSwitch[_GLF_IDENTITY(_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, 0 | (1)))), (_GLF_IDENTITY(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(_injected_loop_counter) : 1)), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(1, int(ivec3(1, (0 & (true ? -74317 : -10177)), _GLF_IDENTITY(1, 0 + (1))))), 0 | (1))))) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) << int(_GLF_ZERO(0.0, injectionSwitch.x))), 0 ^ (_GLF_IDENTITY(1, 0 | (1)))), min(_GLF_IDENTITY(_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, 0 | (1)))), (false ? _GLF_FUZZED(24703) : _GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, _GLF_IDENTITY(0 | (1), (_GLF_IDENTITY(0 | (1), clamp(0 | (1), _GLF_IDENTITY(0 | (1), 1 * (0 | (1))), 0 | (_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec4(1, 1, int(_GLF_ZERO(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (0.0) * 1.0)) - 0.0), injectionSwitch.x)), 0), max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(ivec4(1, 1, int(_GLF_ZERO(0.0, injectionSwitch.x)), 0), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(ivec4(1, 1, int(_GLF_ZERO(0.0, injectionSwitch.x)), 0), (ivec4(1, 1, int(_GLF_ZERO(0.0, injectionSwitch.x)), 0)) >> ivec4(0, 0, 0, 0))), ~ (~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(ivec4(1, 1, int(_GLF_ZERO(0.0, injectionSwitch.x)), 0), (ivec4(1, 1, int(_GLF_ZERO(0.0, injectionSwitch.x)), 0)) >> ivec4(0, 0, 0, 0))), max(~ (_GLF_IDENTITY(ivec4(1, 1, int(_GLF_ZERO(0.0, injectionSwitch.x)), 0), (ivec4(1, 1, int(_GLF_ZERO(0.0, injectionSwitch.x)), 0)) >> ivec4(0, 0, 0, 0))), ~ (_GLF_IDENTITY(ivec4(1, 1, int(_GLF_ZERO(0.0, injectionSwitch.x)), 0), (ivec4(1, 1, int(_GLF_ZERO(0.0, injectionSwitch.x)), 0)) >> ivec4(0, 0, 0, 0)))))))))), (ivec4(1, 1, int(_GLF_ZERO(0.0, injectionSwitch.x)), 0)) ^ ivec4(0, 0, 0, 0)), ivec4(0, 0, 0, 0) | _GLF_IDENTITY((ivec4(1, 1, int(_GLF_ZERO(0.0, injectionSwitch.x)), 0)), ((ivec4(1, 1, int(_GLF_ZERO(0.0, injectionSwitch.x)), 0))) | ((ivec4(1, 1, int(_GLF_ZERO(0.0, injectionSwitch.x)), 0))))), ivec4(1, 1, int(_GLF_ZERO(0.0, injectionSwitch.x)), 0))))))))) + 0)))))), _GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0, (0) | (0))), (~ (_GLF_IDENTITY(0, (0) | (0)))) >> _GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, (0) - 0)))))) ^ (_GLF_IDENTITY(1, 0 | _GLF_IDENTITY((1), ((1)) / 1)))), (_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, 0 | (1))))) - _GLF_IDENTITY(0, int(_GLF_IDENTITY(ivec4(0, 0, 0, 1), (ivec4(0, 0, 0, 1)) | ivec4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))))))))])).y))), _GLF_IDENTITY(bool(bvec3((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], _GLF_IDENTITY(_GLF_IDENTITY(clamp(injectionSwitch[0], injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(0, ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))) * (0))]), max(clamp(injectionSwitch[0], injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(0, ~ (~ (0)))]), clamp(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))[0], _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch)))[0]))), float(mat2x4(_GLF_IDENTITY(clamp(injectionSwitch[0], injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(0, ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(0), int(0)), 0 ^ (1 << _GLF_IDENTITY(int(0), int(0))))) >> _GLF_IDENTITY(int(0), int(0))) * (0))]), max(clamp(injectionSwitch[0], injectionSwitch[0], injectionSwitch[0]), clamp(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))[0], injectionSwitch[0]))), 0.0, exp(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, 0.0, 0.0, 0.0, 0.0)))), injectionSwitch[_GLF_IDENTITY(_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, 0 | (1)))), _GLF_IDENTITY((_GLF_IDENTITY(1, _GLF_IDENTITY(0, _GLF_IDENTITY((0), 0 + ((0))) / 1) ^ (_GLF_IDENTITY(1, 0 | (1))))) | (_GLF_IDENTITY(_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, 0 | (1)))), min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, 0 | (1)))), (false ? _GLF_FUZZED(24703) : _GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), 0 ^ (_GLF_IDENTITY(1, 0 | (1)))))), min(_GLF_IDENTITY(_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(1, 0 | (1)), min(_GLF_IDENTITY(_GLF_IDENTITY(1, 0 | (1)), min(_GLF_IDENTITY(1, 0 | (1)), _GLF_IDENTITY(1, 0 | (1)))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, 0 | (1)), (_GLF_IDENTITY(1, 0 | (1))) << 0), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(1, 0 | (1)), (_GLF_IDENTITY(1, _GLF_IDENTITY(0, max(_GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, (0) | (0)))), 0)) | (1))) << _GLF_IDENTITY(0, min(0, 0)))))))))), (false ? _GLF_FUZZED(24703) : _GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, 0 | (1)))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, 0 | (1)))), (false ? _GLF_FUZZED(24703) : _GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, 0 | (1)))))), (_GLF_IDENTITY(_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, 0 | (1)))), (false ? _GLF_FUZZED(24703) : _GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, 0 | (1))))))) - 0), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, 0 | (1)))), (false ? _GLF_FUZZED(24703) : _GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, 0 | (1)))))), (_GLF_IDENTITY(_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, 0 | (1)))), (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec3(bvec2(false, true), false))))) ? _GLF_FUZZED(24703) : _GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, 0 | (1))))))) - 0)) * 1))), _GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(0 ^ (_GLF_IDENTITY(1, 0 | (1))), ~ _GLF_IDENTITY((~ (0 ^ (_GLF_IDENTITY(1, 0 | (1))))), max((~ (0 ^ (_GLF_IDENTITY(1, 0 | (1))))), (~ (0 ^ (_GLF_IDENTITY(1, 0 | (1))))))))), (_GLF_IDENTITY(1, 0 ^ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1, (1) + 0), 0 | (1))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(1, (false ? _GLF_FUZZED((~ atomicXor(_injected_loop_counter, _injected_loop_counter))) : _GLF_IDENTITY(1, (1) ^ 0))), ~ (~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED((~ _GLF_IDENTITY(atomicXor(_injected_loop_counter, _injected_loop_counter), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (atomicXor(_injected_loop_counter, _injected_loop_counter))))) : _GLF_IDENTITY(1, (1) ^ 0))))))) + 0), 0 | _GLF_IDENTITY((1), min((1), (1))))), ((_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((1), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((1), min((1), (1)))), (_GLF_IDENTITY(~ (_GLF_IDENTITY((1), min((1), (1)))), (~ (_GLF_IDENTITY((1), min((1), (1))))) | (~ (_GLF_IDENTITY((1), min((1), (1))))))) >> int(_GLF_ZERO(0.0, injectionSwitch.x))))) + 0), 0 | (1)))) - 0)) / 1))) - 0)))), 0 | _GLF_IDENTITY(((_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, 0 | (1))))) | (_GLF_IDENTITY(_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(1, max(1, 1)), 0 | (1)))), min(_GLF_IDENTITY(_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, max(1, 1)))))), (false ? _GLF_FUZZED(24703) : _GLF_IDENTITY(_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, 0 | (1)))), (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(0 ^ (_GLF_IDENTITY(1, 0 | (1))), (0 ^ (_GLF_IDENTITY(1, 0 | (1)))) | (_GLF_IDENTITY(0 ^ (_GLF_IDENTITY(1, 0 | (1))), 0 + (0 ^ (_GLF_IDENTITY(1, 0 | (1)))))))), min(_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(0 ^ (_GLF_IDENTITY(1, 0 | (1))), (0 ^ (_GLF_IDENTITY(1, 0 | (1)))) | (_GLF_IDENTITY(0 ^ (_GLF_IDENTITY(1, 0 | (1))), 0 + (0 ^ (_GLF_IDENTITY(1, 0 | (1)))))))), (_GLF_IDENTITY(1, _GLF_IDENTITY(0 ^ (_GLF_IDENTITY(1, 0 | (1))), (0 ^ (_GLF_IDENTITY(1, 0 | (1)))) | (_GLF_IDENTITY(0 ^ (_GLF_IDENTITY(1, 0 | (1))), 0 + (0 ^ (_GLF_IDENTITY(1, 0 | (1))))))))) | 0), _GLF_IDENTITY(1, _GLF_IDENTITY(0 ^ (_GLF_IDENTITY(1, 0 | (1))), (0 ^ (_GLF_IDENTITY(1, 0 | (1)))) | (_GLF_IDENTITY(0 ^ (_GLF_IDENTITY(1, 0 | (1))), 0 + (0 ^ (_GLF_IDENTITY(1, 0 | (1))))))))))) / 1))), _GLF_IDENTITY(_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, 0 | _GLF_IDENTITY((1), ((1)) >> 0)))), (_GLF_IDENTITY(1, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, int(ivec4(0, 0, 1, 0)))) + 0) ^ (_GLF_IDENTITY(1, _GLF_IDENTITY(0 | _GLF_IDENTITY((1), 0 ^ ((1))), (false ? _GLF_FUZZED(-41949) : 0 | _GLF_IDENTITY((1), 0 ^ ((1))))))))) - 0))))), ~ (~ (((_GLF_IDENTITY(1, 0 ^ _GLF_IDENTITY((_GLF_IDENTITY(1, 0 | (1))), clamp((_GLF_IDENTITY(1, 0 | (1))), (_GLF_IDENTITY(1, 0 | (1))), _GLF_IDENTITY((_GLF_IDENTITY(1, 0 | (1))), ((_GLF_IDENTITY(1, 0 | (1)))) - 0))))) | (_GLF_IDENTITY(_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(1, max(1, 1)), 0 | (1)))), min(_GLF_IDENTITY(_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, max(1, 1)))))), (false ? _GLF_FUZZED(24703) : _GLF_IDENTITY(_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, 0 | (1)))), (_GLF_IDENTITY(1, _GLF_IDENTITY(0 ^ (_GLF_IDENTITY(1, 0 | (1))), (0 ^ (_GLF_IDENTITY(1, _GLF_IDENTITY(0, (0) | (0)) | (1)))) | (_GLF_IDENTITY(0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) - 0), 0 | (1))), 0 + (0 ^ (_GLF_IDENTITY(1, 0 | (1))))))))) / 1))), _GLF_IDENTITY(_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, 0 | _GLF_IDENTITY((1), ((1)) >> 0)))), (_GLF_IDENTITY(1, _GLF_IDENTITY(0, (0) + 0) ^ (_GLF_IDENTITY(1, _GLF_IDENTITY(0 | _GLF_IDENTITY((1), 0 ^ ((1))), (false ? _GLF_FUZZED(-41949) : 0 | _GLF_IDENTITY((1), 0 ^ ((1))))))))) - 0))))))))))])).y), _GLF_IDENTITY(false, bool(bvec4(false, false, true, true))), false)), false || (_GLF_IDENTITY(bool(bvec3((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], _GLF_IDENTITY(clamp(injectionSwitch[0], injectionSwitch[0], injectionSwitch[0]), max(clamp(injectionSwitch[_GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) * 1)))], injectionSwitch[0], injectionSwitch[0]), clamp(injectionSwitch[0], injectionSwitch[0], injectionSwitch[0])))), injectionSwitch[_GLF_IDENTITY(_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, 0 | (1)))), (_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, 1, 1)), 0 | (1))))) | (_GLF_IDENTITY(_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, 0 | (1)))), min(_GLF_IDENTITY(_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, 0 | (1)))), (false ? _GLF_FUZZED(24703) : _GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, 0 | (1)))))), _GLF_IDENTITY(_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, 0 | (1)))), (_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, 0 | (1))))) - 0)))))])).y, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], _GLF_IDENTITY(_GLF_IDENTITY(clamp(injectionSwitch[0], injectionSwitch[0], injectionSwitch[0]), max(clamp(injectionSwitch[0], injectionSwitch[0], injectionSwitch[0]), _GLF_IDENTITY(clamp(injectionSwitch[0], injectionSwitch[0], injectionSwitch[0]), max(clamp(injectionSwitch[0], injectionSwitch[0], injectionSwitch[0]), clamp(injectionSwitch[0], injectionSwitch[0], injectionSwitch[0]))))), max(clamp(injectionSwitch[0], injectionSwitch[0], injectionSwitch[0]), clamp(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec4(0, (int(_GLF_ONE(1.0, injectionSwitch.y)) | 0), 0, 0)), _GLF_IDENTITY(clamp(int(ivec4(0, (int(_GLF_ONE(1.0, injectionSwitch.y)) | 0), 0, 0)), _GLF_IDENTITY(int(ivec4(0, (int(_GLF_ONE(1.0, injectionSwitch.y)) | 0), 0, 0)), (int(ivec4(0, (int(_GLF_ONE(1.0, injectionSwitch.y)) | 0), 0, 0))) ^ 0), _GLF_IDENTITY(int(ivec4(0, (int(_GLF_ONE(1.0, injectionSwitch.y)) | 0), 0, 0)), 1 * (int(ivec4(0, (int(_GLF_ONE(1.0, injectionSwitch.y)) | 0), 0, 0))))), (clamp(int(ivec4(0, (int(_GLF_ONE(1.0, injectionSwitch.y)) | 0), 0, 0)), _GLF_IDENTITY(int(ivec4(0, (int(_GLF_ONE(1.0, injectionSwitch.y)) | 0), 0, 0)), (int(ivec4(0, (int(_GLF_ONE(1.0, injectionSwitch.y)) | 0), 0, 0))) ^ 0), _GLF_IDENTITY(int(ivec4(0, (int(_GLF_ONE(1.0, injectionSwitch.y)) | 0), 0, 0)), 1 * (int(ivec4(0, (int(_GLF_ONE(1.0, injectionSwitch.y)) | 0), _GLF_IDENTITY(0, ~ (~ (0))), 0)))))) / (1 | (1 ^ 0))))), _GLF_IDENTITY(0, (0) - 0), 0))], injectionSwitch[0])))), injectionSwitch[_GLF_IDENTITY(_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, 0 | (1)))), (_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, 0 | (1)), 0 ^ (_GLF_IDENTITY(1, 0 | (1)))), ~ (~ (_GLF_IDENTITY(1, 0 | (1)))))))) | (_GLF_IDENTITY(_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, 0 | (1)))), min(_GLF_IDENTITY(_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, 0 | (1)))), (false ? _GLF_IDENTITY(_GLF_FUZZED(24703), ~ (_GLF_IDENTITY(~ (_GLF_FUZZED(24703)), max(_GLF_IDENTITY(~ (_GLF_FUZZED(24703)), min(~ (_GLF_FUZZED(24703)), ~ (_GLF_FUZZED(24703)))), ~ (_GLF_FUZZED(24703)))))) : _GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, _GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, int(ivec4(0, 1, 1, 0))))) | (1)))))), _GLF_IDENTITY(_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, 0 | (1)))), (_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, 0 | (1))))) - 0)))))])), (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], _GLF_IDENTITY(_GLF_IDENTITY(clamp(injectionSwitch[0], injectionSwitch[0], injectionSwitch[0]), max(clamp(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(0, max(0, 0))], injectionSwitch[0]), clamp(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) - 0), 0))], injectionSwitch[0]))), min(_GLF_IDENTITY(clamp(injectionSwitch[0], injectionSwitch[0], injectionSwitch[0]), max(clamp(injectionSwitch[0], injectionSwitch[0], injectionSwitch[0]), clamp(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) - 0), 0)), 1 * (_GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) - 0), 0))))], injectionSwitch[0]))), _GLF_IDENTITY(clamp(injectionSwitch[0], injectionSwitch[0], injectionSwitch[0]), max(clamp(injectionSwitch[0], injectionSwitch[0], injectionSwitch[0]), _GLF_IDENTITY(clamp(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) - 0), 0))], injectionSwitch[0]), (clamp(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) - 0), 0))], injectionSwitch[0])) + 0.0)))))), injectionSwitch[_GLF_IDENTITY(_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, 0 | (1)))), (_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, 0 | (1))))) | (_GLF_IDENTITY(_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, 0 | (1)))), min(_GLF_IDENTITY(_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, 0 | (1)))), (false ? _GLF_FUZZED(24703) : _GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, 0 | (1)))))), _GLF_IDENTITY(_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, 0 | (1)))), (_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, 0 | (1))))) - 0)))))]))) - vec2(0.0, 0.0)).y) || _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(_GLF_IDENTITY(bvec3(bvec3(false, false, true)), bvec3(bvec3(bvec3(bvec3(false, false, true))))))))))), _GLF_IDENTITY(false, bool(bvec4(false, false, true, true))), false)), bool(bvec4(bool(bvec3((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), vec2(_GLF_IDENTITY(injectionSwitch[0], _GLF_IDENTITY(clamp(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))[0], _GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) - sin(0.0)), injectionSwitch[_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, 0 | (0))))]), max(clamp(_GLF_IDENTITY(injectionSwitch[0], (true ? injectionSwitch[0] : _GLF_FUZZED(3.9))), injectionSwitch[0], injectionSwitch[0]), clamp(injectionSwitch[0], injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, _GLF_IDENTITY((0) | (0), min((0) | (0), (0) | (0)))), 0))])))), injectionSwitch[_GLF_IDENTITY(_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, _GLF_IDENTITY(0, max(0, 0)) | (1)))), (_GLF_IDENTITY(_GLF_IDENTITY(1, 0 | _GLF_IDENTITY((1), (_GLF_IDENTITY((1), ((1)) << 0)) | ((1)))), _GLF_IDENTITY(0 ^ (_GLF_IDENTITY(1, 0 | (1))), int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(0 ^ (_GLF_IDENTITY(1, 0 | (1))), min(0 ^ (_GLF_IDENTITY(1, 0 | (1))), _GLF_IDENTITY(0 ^ (_GLF_IDENTITY(1, 0 | (1))), (0 ^ (_GLF_IDENTITY(1, 0 | (1)))) >> 0))), 1, (1 & 1)), ~ (~ (_GLF_IDENTITY(ivec3(_GLF_IDENTITY(0 ^ (_GLF_IDENTITY(1, 0 | (1))), min(0 ^ (_GLF_IDENTITY(1, 0 | (1))), _GLF_IDENTITY(0 ^ (_GLF_IDENTITY(1, 0 | (1))), (0 ^ (_GLF_IDENTITY(1, 0 | (1)))) >> 0))), 1, (1 & 1)), ivec3(ivec4(ivec3(_GLF_IDENTITY(0 ^ (_GLF_IDENTITY(1, 0 | (1))), min(0 ^ (_GLF_IDENTITY(1, 0 | (1))), _GLF_IDENTITY(0 ^ (_GLF_IDENTITY(1, 0 | (1))), (0 ^ (_GLF_IDENTITY(1, 0 | (1)))) >> 0))), 1, (1 & 1)), 1)))))))))) | (_GLF_IDENTITY(_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(0, max(_GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, min(0, 0)), 0, 0)), _GLF_IDENTITY(0, max(0, 0)))) | (1)), (_GLF_IDENTITY(1, 0 | (1))) | (_GLF_IDENTITY(_GLF_IDENTITY(1, 0 | (1)), (_GLF_IDENTITY(1, 0 | (1))) | 0))))), min(_GLF_IDENTITY(_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, 0 | (1)))), (false ? _GLF_FUZZED(24703) : _GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, 0 | (1)))))), _GLF_IDENTITY(_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, 0 | (1)))), (_GLF_IDENTITY(1, _GLF_IDENTITY(0, clamp(0, 0, 0)) ^ (_GLF_IDENTITY(_GLF_IDENTITY(1, 0 | (1)), clamp(_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, int(ivec3(_GLF_IDENTITY(1, int(ivec4(1, 1, 1, int(_GLF_ONE(1.0, injectionSwitch.y))))), (1 ^ (0 | 0)), ((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), 0 ^ (int(0))))) >> _GLF_IDENTITY(int(0), int(0)))))))), _GLF_IDENTITY(1, 0 | (1)), _GLF_IDENTITY(1, 0 | (1))))))) - 0)))))])).y, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / _GLF_IDENTITY(dot(vec4(1.0, 0.0, _GLF_IDENTITY(sqrt(0.0), (false ? _GLF_FUZZED(radians(-4.8)) : sqrt(0.0))), 0.0), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, sqrt(0.0), 0.0), vec4(1.0, 0.0, 0.0, 0.0)))) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))), vec2(_GLF_IDENTITY(injectionSwitch[0], _GLF_IDENTITY(_GLF_IDENTITY(clamp(injectionSwitch[0], injectionSwitch[0], injectionSwitch[0]), max(clamp(injectionSwitch[0], injectionSwitch[0], injectionSwitch[0]), clamp(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec4(injectionSwitch, 1.0, 1.0)), mix(vec2(_GLF_FUZZED(-69.42), _GLF_FUZZED((+ -79.47))), vec2((vec2(_GLF_IDENTITY(vec4(injectionSwitch, 1.0, 1.0), clamp(vec4(injectionSwitch, 1.0, 1.0), vec4(injectionSwitch, 1.0, 1.0), _GLF_IDENTITY(vec4(injectionSwitch, 1.0, 1.0), (vec4(injectionSwitch, 1.0, 1.0)) * mat4(1.0))))))[0], (vec2(vec4(injectionSwitch, 1.0, 1.0)))[1]), bvec2(true, _GLF_IDENTITY(true, (true) && true)))))[0], injectionSwitch[_GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) - 0), 0))], injectionSwitch[0]))), clamp(_GLF_IDENTITY(clamp(injectionSwitch[0], injectionSwitch[0], injectionSwitch[0]), max(clamp(injectionSwitch[0], injectionSwitch[0], injectionSwitch[0]), clamp(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec4(injectionSwitch, 1.0, 1.0)), mix(vec2(_GLF_FUZZED(-69.42), _GLF_FUZZED((+ -79.47))), vec2((vec2(_GLF_IDENTITY(vec4(injectionSwitch, 1.0, 1.0), clamp(vec4(injectionSwitch, 1.0, 1.0), vec4(injectionSwitch, 1.0, 1.0), _GLF_IDENTITY(vec4(injectionSwitch, 1.0, 1.0), (vec4(injectionSwitch, 1.0, 1.0)) * mat4(1.0))))))[0], (vec2(vec4(injectionSwitch, 1.0, 1.0)))[1]), bvec2(true, _GLF_IDENTITY(true, (true) && true)))))[0], injectionSwitch[_GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) - 0), 0))], injectionSwitch[0]))), _GLF_IDENTITY(clamp(injectionSwitch[0], injectionSwitch[0], injectionSwitch[0]), max(clamp(injectionSwitch[0], injectionSwitch[0], injectionSwitch[0]), clamp(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec4(injectionSwitch, 1.0, 1.0)), mix(vec2(_GLF_FUZZED(-69.42), _GLF_FUZZED((+ -79.47))), vec2((vec2(_GLF_IDENTITY(vec4(injectionSwitch, 1.0, 1.0), clamp(vec4(injectionSwitch, 1.0, 1.0), vec4(injectionSwitch, 1.0, 1.0), _GLF_IDENTITY(vec4(injectionSwitch, 1.0, 1.0), (vec4(injectionSwitch, 1.0, 1.0)) * mat4(1.0))))))[0], (vec2(vec4(injectionSwitch, 1.0, 1.0)))[1]), bvec2(true, _GLF_IDENTITY(true, (true) && true)))))[0], injectionSwitch[_GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) - 0), 0))], injectionSwitch[0]))), _GLF_IDENTITY(clamp(injectionSwitch[0], injectionSwitch[0], injectionSwitch[0]), max(clamp(injectionSwitch[0], injectionSwitch[0], injectionSwitch[0]), clamp(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec4(injectionSwitch, 1.0, 1.0)), mix(vec2(_GLF_FUZZED(-69.42), _GLF_FUZZED((+ -79.47))), vec2((vec2(_GLF_IDENTITY(vec4(injectionSwitch, 1.0, 1.0), clamp(vec4(injectionSwitch, 1.0, 1.0), vec4(injectionSwitch, 1.0, 1.0), _GLF_IDENTITY(vec4(injectionSwitch, 1.0, 1.0), (vec4(injectionSwitch, 1.0, 1.0)) * mat4(1.0))))))[0], (vec2(vec4(injectionSwitch, 1.0, 1.0)))[1]), bvec2(true, _GLF_IDENTITY(true, (true) && true)))))[0], injectionSwitch[_GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) - 0), 0))], injectionSwitch[0])))))), injectionSwitch[_GLF_IDENTITY(_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(1, 0 | (1)), (_GLF_IDENTITY(_GLF_IDENTITY(1, 0 | (1)), min(_GLF_IDENTITY(1, 0 | (1)), _GLF_IDENTITY(1, _GLF_IDENTITY(0, (0) >> 0) | (1))))) / 1))), (_GLF_IDENTITY(_GLF_IDENTITY(1, 0 + (1)), 0 ^ (_GLF_IDENTITY(1, 0 | (1))))) | (_GLF_IDENTITY(_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, 0 | (1)))), min(_GLF_IDENTITY(_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, ~ (~ _GLF_IDENTITY((1), (true ? (1) : _GLF_FUZZED(22736))))))))), (false ? _GLF_FUZZED(24703) : _GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, 0 | (1)))))), _GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(0, max(_GLF_IDENTITY(0, clamp(0, 0, 0)), 0)) ^ (_GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY(0, max(0, 0)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(0, (false ? _GLF_FUZZED(-14108) : _GLF_IDENTITY(0, (0) - 0))) : _GLF_IDENTITY(_GLF_FUZZED(_injected_loop_counter), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(_GLF_FUZZED(_injected_loop_counter), (_GLF_FUZZED(_injected_loop_counter)) << 0) : _GLF_FUZZED(-88083))))) | (1)))), (_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, 0 | (1))))) - 0)))))])).y) || false)), _GLF_IDENTITY(false, bool(bvec4(false, _GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, true && (true)), true))), true))), false)), true, true, false)))))))))))
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (_GLF_IDENTITY(int(5), 0 | (int(5)))) - 0)))); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               do
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             else
              {
              }
             if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)), (injectionSwitch.x > injectionSwitch.y))))
              {
               for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY((1 & int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (_GLF_ONE(1.0, injectionSwitch.y)) + 0.0), (false ? _GLF_FUZZED(77.95) : _GLF_ONE(1.0, injectionSwitch.y))), _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), max(_GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (false ? _GLF_FUZZED(-299.243) : _GLF_ONE(1.0, injectionSwitch.y))), clamp(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)))))))) + 0.0))), (false ? _GLF_FUZZED(_injected_loop_counter) : (1 & int(_GLF_IDENTITY(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), injectionSwitch)).y), (_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (_GLF_ONE(1.0, injectionSwitch.y)) + 0.0), (false ? _GLF_FUZZED(77.95) : _GLF_ONE(1.0, injectionSwitch.y))), _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(1.1)), bool(false)))), _GLF_ONE(1.0, injectionSwitch.y)))) + 0.0))))), max((1 & int(_GLF_ONE(1.0, injectionSwitch.y))), (1 & int(_GLF_IDENTITY(_GLF_ONE(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-4.9)), float(1.0), bool(true))), injectionSwitch.y), (_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)) / 1.0))))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(6), int(6)))), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(6), int(6)))), bool(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(6), int(6)))), true)))) || false); _injected_loop_counter --)
                {
                 barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             do
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 do
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, true && (_GLF_IDENTITY((false) || false, ! (! ((false) || false))))))))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, int(ivec2(_injected_loop_counter, 0))) > 0); _GLF_IDENTITY(_injected_loop_counter --, 0 ^ (_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) >> 0))))
                        {
                         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec3(injectionSwitch.x < injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))))
                          {
                           barrier();
                          }
                         else
                          {
                           if(_GLF_DEAD(false))
                            {
                             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              {
                              }
                             else
                              {
                               barrier();
                              }
                            }
                          }
                        }
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     barrier();
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                    }
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
              {
               do
                {
                 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                  {
                  }
                 else
                  {
                   barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
          }
         else
          {
          }
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), true, false)))), bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), true, false)))))))))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))))) > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(exp2(injectionSwitch)))), injectionSwitch)).y) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      barrier();
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_IDENTITY(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), clamp(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, 0.0 + (1.0)), 1.0)), injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))))) + 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0), transpose(transpose(mat2(1.0)))) * _GLF_IDENTITY((injectionSwitch), max(_GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) * vec2(1.0, 1.0)), _GLF_IDENTITY((injectionSwitch), max(_GLF_IDENTITY((injectionSwitch), clamp((injectionSwitch), (injectionSwitch), (injectionSwitch))), (injectionSwitch)))))), clamp(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (mat2(1.0) * (injectionSwitch)) * vec2(1.0, 1.0))), _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))).x))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             barrier();
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(504.206)), float(injectionSwitch.x), bool(true)))) - 0.0) < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(2511.9212)), bool(false))), injectionSwitch.x)) > injectionSwitch.y), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(2511.9212)), bool(false))), injectionSwitch.x)) > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(2511.9212)), bool(false))), injectionSwitch.x)) > injectionSwitch.y)) && true), true, false)), (bool(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(2511.9212)), bool(false))), injectionSwitch.x)) > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(2511.9212)), bool(false))), injectionSwitch.x)) > injectionSwitch.y)) && true), true, false))) || false)))))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec3(_GLF_DEAD(false), true, false)), true && (bool(bvec3(_GLF_DEAD(false), true, false))))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         else
          {
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat3x4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(9.2, -67.22)) : injectionSwitch)).x, min(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-6.3)), float(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x), bool(true))), injectionSwitch.x)), 0.0, 0.0, 0.0, cos(0.0), 1.0, 0.0, 1.0, 1.0, abs(0.0), tan(0.0), 1.0)), (true ? float(mat3x4(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-6.3)), float(injectionSwitch.x), bool(true))), injectionSwitch.x)), 0.0, 0.0, 0.0, cos(0.0), 1.0, 0.0, 1.0, 1.0, abs(0.0), tan(0.0), 1.0)) : _GLF_FUZZED(6597.9310)))) < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, true && (true)), (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * _GLF_IDENTITY(1.0, mix(_GLF_IDENTITY(float(1.0), (false ? _GLF_FUZZED(-334.663) : float(1.0))), float(_GLF_FUZZED(vec3(5.5, 1595.7422, 1.9).t)), _GLF_IDENTITY(bool(false), true && (_GLF_IDENTITY(bool(false), bool(bool(bool(false))))))))) < injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y))))
                  {
                   barrier();
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                }
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) >> 0))) >> _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, int(int(1)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (0) << 0)); _injected_loop_counter --)
                  {
                   do
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                        }
                       else
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           barrier();
                          }
                        }
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false)))))))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
                    {
                    }
                   else
                    {
                     barrier();
                    }
                  }
                }
               do
                {
                 for(int _injected_loop_counter = _GLF_IDENTITY((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(0), int(0))), int(ivec4((1 << _GLF_IDENTITY(int(0), int(0))), 0, 0, 0))) >> _GLF_IDENTITY(int(0), int(0))), int(ivec2(((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 1))); _GLF_WRAPPED_LOOP(_injected_loop_counter > ((0 << _GLF_IDENTITY(int(8), int(_GLF_IDENTITY(8, min(8, _GLF_IDENTITY(8, ~ (~ (8)))))))) | 0)); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      {
                       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                        {
                         barrier();
                        }
                      }
                     barrier();
                    }
                   barrier();
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                 do
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 do
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4x2(injectionSwitch, abs(1.0), 1.0, 1.0, sin(0.0), 0.0, sqrt(0.0))), min(vec2(mat4x2(injectionSwitch, abs(1.0), 1.0, 1.0, sin(0.0), 0.0, sqrt(0.0))), vec2(mat4x2(injectionSwitch, abs(1.0), 1.0, 1.0, sin(0.0), 0.0, sqrt(0.0)))))).x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY((1 ^ 0), max((1 ^ 0), (1 ^ 0)))); _injected_loop_counter ++)
                      {
                       if(_GLF_DEAD(false))
                        {
                         for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                          {
                           barrier();
                          }
                        }
                       barrier();
                      }
                    }
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(false))
                        {
                         do
                          {
                           barrier();
                          }
                         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
                        }
                       barrier();
                      }
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           if(_GLF_DEAD(false))
                            {
                             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))) || false)), ! (! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))) || false, _GLF_IDENTITY(bool(bvec2((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))) || false, true)), ! (! (bool(bvec2((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))) || false, true)))))))))))))
                              barrier();
                             do
                              {
                               barrier();
                              }
                             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                            }
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             barrier();
                            }
                           else
                            {
                            }
                           if(_GLF_DEAD(false))
                            barrier();
                          }
                         else
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            {
                             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) || false)))
                              {
                              }
                             else
                              {
                               if(_GLF_DEAD(false))
                                barrier();
                               if(_GLF_WRAPPED_IF_FALSE(false))
                                {
                                }
                               else
                                {
                                 if(_GLF_DEAD(false))
                                  barrier();
                                 barrier();
                                }
                              }
                            }
                           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))))
                            barrier();
                           for(int _injected_loop_counter = (0 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 ^ 0)); _injected_loop_counter --)
                            {
                             if(_GLF_DEAD(false))
                              {
                               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                                {
                                 do
                                  {
                                   barrier();
                                  }
                                 while(_GLF_WRAPPED_LOOP(false));
                                }
                               if(_GLF_DEAD(false))
                                barrier();
                              }
                            }
                          }
                        }
                       if(_GLF_DEAD(false))
                        {
                         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, _GLF_IDENTITY((1) - 0, max((1) - 0, _GLF_IDENTITY((1) - 0, (false ? _GLF_FUZZED(_injected_loop_counter) : (1) - 0)))))); _injected_loop_counter ++)
                          {
                           barrier();
                          }
                        }
                      }
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter --)
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                    }
                   else
                    {
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               else
                {
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), ~ (_GLF_IDENTITY(~ (int(1)), _GLF_IDENTITY((~ (int(1))) | 0, (0 | 0) + ((~ (int(1))) | 0))))))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), min(int(1), int(1))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 barrier();
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 else
                  {
                  }
                }
               else
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                    barrier();
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     barrier();
                    }
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                   do
                    {
                     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(_GLF_IDENTITY(false, (false) || false))) || false))
                      {
                       do
                        {
                         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (1 ^ 1)); _injected_loop_counter --)
                          {
                           barrier();
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 else
                  {
                  }
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 else
                  {
                  }
                 do
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                        {
                         barrier();
                        }
                      }
                    }
                   else
                    {
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                 do
                  {
                   do
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), _GLF_IDENTITY(bvec2(bvec2(bvec2(false, false))), bvec2(bvec2(bvec2(bvec2(bvec2(false, false)))))))))))
                      barrier();
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         barrier();
                        }
                       else
                        {
                        }
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), int(ivec4(int(4), 1, 0, 0)))) | (int(4))))) >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter ++)
                  {
                   _GLF_IDENTITY(buf[virtual_gid] = uint(subgroupAllEqual(write_val)), 0u | (_GLF_IDENTITY(buf[virtual_gid] = uint(subgroupAllEqual(write_val)), ~ (~ (buf[virtual_gid] = uint(subgroupAllEqual(write_val)))))));
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-768.679, -2.6)) : injectionSwitch)).y))))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if(_GLF_DEAD(false))
                    {
                     for(int _injected_loop_counter = ((((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), (_GLF_IDENTITY(int(2), int(2))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), ~ (~ (_GLF_IDENTITY(int(2), int(2))))))))))) << _GLF_IDENTITY(_GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(int(4), (int(4)) | 0), 0, 1, int(_GLF_ONE(1.0, injectionSwitch.y))), clamp(ivec4(_GLF_IDENTITY(int(4), (int(4)) | 0), 0, 1, int(_GLF_ONE(1.0, injectionSwitch.y))), ivec4(_GLF_IDENTITY(int(4), (int(4)) | 0), 0, 1, int(_GLF_ONE(1.0, injectionSwitch.y))), ivec4(_GLF_IDENTITY(int(4), (int(4)) | 0), 0, 1, int(_GLF_ONE(1.0, injectionSwitch.y)))))))), min(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(int(4), int(4))))) >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != (_GLF_IDENTITY(0 | (0 >> _GLF_IDENTITY(int(4), int(4))), (0 | (0 >> _GLF_IDENTITY(int(4), int(4)))) | 0)), false || (_injected_loop_counter != (0 | (0 >> _GLF_IDENTITY(int(4), int(4))))))); _injected_loop_counter --)
                      {
                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)) > _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(8), int(8))), 0 | ((0 >> _GLF_IDENTITY(int(8), int(8)))))); _injected_loop_counter --)
                        {
                         barrier();
                        }
                       do
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                      }
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   else
                    {
                    }
                   barrier();
                  }
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
             else
              {
              }
             if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
              {
               do
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 else
                  {
                  }
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, 1 * (0))); _injected_loop_counter --)
                    {
                     barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                  }
                 else
                  {
                  }
                }
               while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! (! (_GLF_IDENTITY(bool(bool(false)), false || (_GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) && true)))))))), true && (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! (! (_GLF_IDENTITY(bool(bool(false)), false || (_GLF_IDENTITY(bool(bool(false)), _GLF_IDENTITY((bool(bool(false))) && true, ((bool(bool(false))) && true) && true))))))))))));
              }
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
           if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), (bool(_GLF_DEAD(false))) || false))), false, true)), (bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), (bool(_GLF_DEAD(false))) || false))), false, true))) || false)))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
          }
         else
          {
          }
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
            }
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
            barrier();
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
            {
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
  }
 else
  {
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), _GLF_IDENTITY(! (! (! (_GLF_DEAD(false)))), false || (! (! (! (_GLF_DEAD(false))))))))))
  {
   for(int _injected_loop_counter = ((1 ^ 1) ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, (0.0) - 0.0) : _GLF_FUZZED(-90.64))), _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), injectionSwitch.x))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
              barrier();
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
          }
        }
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   for(int _injected_loop_counter = (_GLF_IDENTITY((_GLF_IDENTITY(0 << _GLF_IDENTITY(int(4), int(4)), ~ (_GLF_IDENTITY(~ (0 << _GLF_IDENTITY(int(4), int(4))), int(ivec3(~ (0 << _GLF_IDENTITY(int(4), int(4))), 0, 0)))))), ((_GLF_IDENTITY(0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), max(int(4), int(4)))), (0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), max(int(4), int(4))))) | 0))) ^ (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(6), int(6)), max(_GLF_IDENTITY(0 << _GLF_IDENTITY(int(6), int(6)), min(_GLF_IDENTITY(0 << _GLF_IDENTITY(int(6), int(6)), (true ? 0 << _GLF_IDENTITY(int(6), int(6)) : _GLF_FUZZED(-79995))), 0 << _GLF_IDENTITY(int(6), int(6)))), 0 << _GLF_IDENTITY(int(6), int(6)))))) | int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
      }
     else
      {
      }
     barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))) * determinant(mat3(1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, cos(0.0)))) > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         do
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 & 76713)); _injected_loop_counter --)
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(2), int(2))), ((1 << _GLF_IDENTITY(int(2), int(2)))) / 1) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter ++)
        {
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           barrier();
          }
        }
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
}
