#version 430

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true && (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0))))) > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), true, true, true)))))))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    {
     for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                continue;
               return;
              }
            }
          }
         else
          {
           return;
          }
        }
       else
        {
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, true && (false)))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   return;
  }
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = 16;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY((gl_NumWorkGroups) | (_GLF_IDENTITY(uvec3(168610u, 161576u, 59888u) & uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u) ^ (uvec3(168610u, 161576u, 59888u) & uvec3(0u, 0u, 0u)))), max((gl_NumWorkGroups) | (_GLF_IDENTITY(uvec3(168610u, 161576u, 59888u) & uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u) ^ (uvec3(168610u, 161576u, 59888u) & uvec3(0u, 0u, 0u)))), (gl_NumWorkGroups) | (_GLF_IDENTITY(uvec3(168610u, 161576u, 59888u) & uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u) ^ (uvec3(168610u, 161576u, 59888u) & uvec3(0u, 0u, 0u))))))).x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = _GLF_IDENTITY(workgroup_size, _GLF_IDENTITY((workgroup_size), ((workgroup_size)) ^ 0u) - 0u) * workgroup_id;
 uint virtual_gid = _GLF_IDENTITY(workgroup_base, max(workgroup_base, _GLF_IDENTITY(workgroup_base, uint(uvec2(_GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)), 0u))))) + subgroup_id * subgroup_size + subgroup_local_id;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = _GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((1) ^ _GLF_IDENTITY((1 ^ 1), _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, (0) - 0), 0, 0)) + ((1 ^ 1))), (_GLF_IDENTITY(_GLF_IDENTITY((1) ^ _GLF_IDENTITY(_GLF_IDENTITY((1 ^ 1), 0 ^ ((1 ^ 1))), 0 + ((1 ^ 1))), ((1) ^ _GLF_IDENTITY((1 ^ 1), 0 + ((1 ^ 1)))) - 0), clamp((1) ^ _GLF_IDENTITY((1 ^ 1), 0 + ((1 ^ 1))), (1) ^ _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, int(ivec3(1, 0, 0))))) ^ 1), ((1 ^ 1)) * 1), 0 + ((1 ^ 1))), _GLF_IDENTITY(_GLF_IDENTITY((1) ^ _GLF_IDENTITY((1 ^ 1), 0 + ((1 ^ 1))), (false ? _GLF_FUZZED(-60120) : (1) ^ _GLF_IDENTITY((1 ^ 1), 0 + ((1 ^ 1))))), (_GLF_IDENTITY(_GLF_IDENTITY((1) ^ _GLF_IDENTITY((1 ^ 1), 0 + ((1 ^ 1))), (false ? _GLF_FUZZED(-60120) : (1) ^ _GLF_IDENTITY((1 ^ 1), 0 + ((1 ^ 1))))), (_GLF_IDENTITY((1) ^ _GLF_IDENTITY((1 ^ 1), 0 + ((1 ^ 1))), (false ? _GLF_FUZZED(-60120) : (1) ^ _GLF_IDENTITY((1 ^ 1), 0 + ((1 ^ 1)))))) >> 0)) << 0)))) | (_GLF_IDENTITY((1), min((1), (1))) ^ _GLF_IDENTITY(_GLF_IDENTITY((1 ^ 1), (_GLF_IDENTITY((1 ^ 1), 0 ^ (_GLF_IDENTITY((1 ^ 1), ~ (~ ((1 ^ 1))))))) | _GLF_IDENTITY((_GLF_IDENTITY((1 ^ 1), min(_GLF_IDENTITY((1 ^ 1), int(ivec2((1 ^ 1), 0))), (1 ^ 1)))), 1 * ((_GLF_IDENTITY((1 ^ 1), min(_GLF_IDENTITY((1 ^ 1), int(ivec2((1 ^ 1), 0))), (1 ^ 1))))))), 0 + ((1 ^ 1)))))), int(ivec3(1, 1, 0))), 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      continue;
     for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
      {
       return;
      }
    }
  }
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, 0u | (_GLF_IDENTITY(workgroup_base, (true ? workgroup_base : _GLF_FUZZED((subgroup_id >> workgroup_base)))))), uint(_GLF_IDENTITY(uint(workgroup_base), 0u ^ (uint(workgroup_base))))) + _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u)) | 0u, uint(uvec2((_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u)) | 0u, 0u)))) * subgroup_size + _GLF_IDENTITY(_GLF_IDENTITY(((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, clamp(_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)), subgroup_local_id, subgroup_local_id)) + 1, (_GLF_IDENTITY(subgroup_local_id, clamp(_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)), subgroup_local_id, subgroup_local_id)) + 1) | 0u)) % subgroup_size), min(((subgroup_local_id + 1) % subgroup_size), ((subgroup_local_id + 1) % subgroup_size))), (_GLF_IDENTITY(false ? _GLF_FUZZED((workgroup_id)) : _GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id + 1, (1u | 1u) * (_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1))))) % _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))), (((subgroup_local_id + 1) % subgroup_size)) / 1u), 0u | (_GLF_IDENTITY(false ? _GLF_FUZZED((workgroup_id)) : _GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id + 1, (1u | 1u) * (_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1))))) % _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))), (((subgroup_local_id + 1) % subgroup_size)) / 1u), 0u ^ (_GLF_IDENTITY(false ? _GLF_FUZZED((workgroup_id)) : _GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id + 1, (1u | 1u) * (_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1))))) % _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))), (((subgroup_local_id + 1) % subgroup_size)) / 1u), 0u | (false ? _GLF_FUZZED((workgroup_id)) : _GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id + 1, (1u | 1u) * (_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1))))) % _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))), (((subgroup_local_id + 1) % subgroup_size)) / 1u)))))))));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (int(8)) >> 0))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y)), (_GLF_IDENTITY(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(bool(bvec4(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y)), false, _GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) || false)))) || false), (injectionSwitch.x > injectionSwitch.y)), true)), false || (bool(bvec4(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y)), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))) && true)); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       buf[virtual_gid] = 1;
       if(_GLF_DEAD(false))
        continue;
      }
    }
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))), (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false))))) && true))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-99422)))); _injected_loop_counter --)
      {
       return;
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec2(false, false)))))))))
    {
     return;
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         do
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 & (~ ivec3(-82666, -4483, -16507)).x)); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              break;
             return;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       else
        {
        }
       do
        {
         if(_GLF_DEAD(false))
          return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
      }
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           return;
          }
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
    }
  }
 for(int _injected_loop_counter = ((1 ^ 1) << _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat4(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), 0.0, 0.0, 1.0, 0.0, log(1.0), 1.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, 1.0, determinant(mat4(0.0, 1.0, 0.0, 1.0, tan(0.0), 0.0, cos(0.0), 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, float(mat2x3(0.0, 1.0, 1.0, 0.0, 0.0, 0.0))), 0.0, 0.0)), 0.0)), 0.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, 1.0 * (0.0)), 0.0)), 0.0)), 0.0, 0.0, 0.0)), 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0))), _GLF_ONE(1.0, injectionSwitch.y), abs(0.0), exp(log(1.0))))))), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (! (bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))) || false)))) || false)))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
          }
        }
       else
        {
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         for(int _injected_loop_counter = (1 & ((((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))) << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id), min(_GLF_IDENTITY((subgroup_local_id), ((subgroup_local_id)) | ((subgroup_local_id))), (subgroup_local_id))) + _GLF_IDENTITY(0u, (0u) | (0u)))) / 1u)) | 0u) + _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((false ? _GLF_FUZZED(25865) : _GLF_IDENTITY(1, _GLF_IDENTITY(0, (0) / 1) | (_GLF_IDENTITY(1, clamp(1, 1, 1))))), (true ? _GLF_IDENTITY((false ? _GLF_FUZZED(25865) : _GLF_IDENTITY(1, _GLF_IDENTITY(0, (0) / 1) | (_GLF_IDENTITY(1, clamp(1, 1, 1))))), 1 * ((false ? _GLF_FUZZED(25865) : _GLF_IDENTITY(1, _GLF_IDENTITY(0, (0) / 1) | (_GLF_IDENTITY(1, clamp(1, 1, 1))))))) : _GLF_FUZZED(_injected_loop_counter)))), _GLF_IDENTITY((1) ^ 0, min(_GLF_IDENTITY((1) ^ 0, _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY((1), ~ (~ ((1)))) ^ 0), (false ? _GLF_FUZZED(int(-538.280)) : int(_GLF_ZERO(0.0, injectionSwitch.x)) | ((1) ^ 0)))), (1) ^ 0))), ~ (_GLF_IDENTITY(~ (1), _GLF_IDENTITY((_GLF_IDENTITY(~ (1), _GLF_IDENTITY(0 | (~ (1)), _GLF_IDENTITY((_GLF_IDENTITY(0 | (~ (1)), _GLF_IDENTITY(0, (_GLF_IDENTITY(0, clamp(0, 0, 0))) | (_GLF_IDENTITY(0, clamp(0, 0, 0)))) + _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0 | (~ (1)), max(0 | (~ _GLF_IDENTITY((1), (73643 & 0) | ((1)))), _GLF_IDENTITY(0 | (~ (1)), min(0 | (~ (1)), 0 | (~ (1)))))), (_GLF_IDENTITY(_GLF_IDENTITY(0 | (~ (1)), max(0 | (~ (1)), _GLF_IDENTITY(0 | (~ (1)), min(0 | (~ (1)), 0 | (~ (1)))))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(0 | (~ (1)), _GLF_IDENTITY(max(0 | (~ (1)), _GLF_IDENTITY(0 | (~ (1)), min(0 | (~ (1)), 0 | (~ (1))))), max(max(0 | (~ (1)), _GLF_IDENTITY(0 | (~ (1)), min(0 | (~ (1)), 0 | (~ (1))))), max(0 | (~ (1)), _GLF_IDENTITY(0 | (~ (1)), min(0 | (~ (1)), 0 | (~ (1)))))))), ~ (~ (_GLF_IDENTITY(0 | (~ (1)), max(0 | _GLF_IDENTITY((~ (1)), ((~ (1))) + 0), _GLF_IDENTITY(_GLF_IDENTITY(0 | (~ (1)), min(0 | (~ (1)), 0 | (~ (1)))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(0 | (~ (1)), min(0 | (~ (1)), 0 | (~ (1))))))))))) : _GLF_FUZZED(_injected_loop_counter)))) - 0)), max((0 | (~ (1))), (0 | (~ (_GLF_IDENTITY(1, 0 + (1))))))), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0 | (~ (1)), max(0 | (~ (1)), _GLF_IDENTITY(0 | (~ (1)), min(0 | (~ (1)), 0 | (~ (1)))))), (_GLF_IDENTITY(_GLF_IDENTITY(0 | (~ (1)), max(0 | (~ _GLF_IDENTITY((1), 0 | ((1)))), _GLF_IDENTITY(0 | (~ (1)), min(0 | (~ (1)), 0 | (~ (1)))))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(0 | (~ (1)), max(0 | (~ (1)), _GLF_IDENTITY(0 | (~ (1)), min(0 | (~ (1)), 0 | (~ (1)))))), ~ (~ (_GLF_IDENTITY(0 | (~ (1)), max(_GLF_IDENTITY(0, ~ (~ (0))) | _GLF_IDENTITY((~ (1)), ((~ (1))) + 0), _GLF_IDENTITY(_GLF_IDENTITY(0 | (~ (1)), min(0 | (~ (1)), 0 | (~ (1)))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(0 | (~ (1)), min(0 | (~ (1)), 0 | (~ (_GLF_IDENTITY(1, 1 * (1))))))))))))) : _GLF_FUZZED(_injected_loop_counter)))) - 0), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, 0 | (0)) | (~ (1)), max(0 | (~ _GLF_IDENTITY((1), (_GLF_IDENTITY((1), max((1), (1)))) / 1)), _GLF_IDENTITY(0 | (~ (1)), min(0 | (~ (1)), 0 | (~ (1)))))), (_GLF_IDENTITY(_GLF_IDENTITY(0 | (~ (1)), max(0 | (~ (1)), _GLF_IDENTITY(0 | (~ (1)), min(0 | (~ (1)), 0 | (~ (1)))))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(0 | (~ (1)), max(0 | (~ (1)), _GLF_IDENTITY(0 | (~ (1)), _GLF_IDENTITY(min(0 | (~ (1)), 0 | (~ (1))), (min(0 | (~ (1)), 0 | (~ (1)))) >> 0)))), ~ (~ (_GLF_IDENTITY(0 | (~ (1)), max(0 | _GLF_IDENTITY((~ (1)), _GLF_IDENTITY(((~ (1))), int(ivec3(((~ (1))), 1, (1 ^ 1)))) + 0), _GLF_IDENTITY(_GLF_IDENTITY(0 | (~ (1)), min(0 | (~ (1)), 0 | (~ (1)))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(0 | (~ (1)), min(0 | (~ (1)), 0 | (~ (1)))), 1 * (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(0 | (~ (1)), min(0 | (~ (1)), 0 | (~ (1)))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(0 | (~ (1)), min(0 | (~ (1)), 0 | (~ (1))))) >> 0)))))))))) : _GLF_FUZZED(_injected_loop_counter)))) - 0), (_GLF_IDENTITY(_GLF_IDENTITY(0 | (~ (1)), max(0 | (~ (1)), _GLF_IDENTITY(0 | (~ (1)), min(0 | (~ (1)), 0 | _GLF_IDENTITY((~ (1)), ((~ (1))) >> 0))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0 | (~ (1)), max(0 | (~ (1)), _GLF_IDENTITY(0 | (~ (1)), min(0 | (~ (1)), 0 | (~ (1)))))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(0 | (~ (1)), max(0 | (~ (1)), _GLF_IDENTITY(0 | (~ (1)), min(0 | (~ (1)), 0 | (~ (1)))))), ~ (~ (_GLF_IDENTITY(0 | (~ (1)), max(0 | _GLF_IDENTITY((~ (1)), ((~ (1))) + 0), _GLF_IDENTITY(_GLF_IDENTITY(0 | (~ (1)), min(0 | (~ (1)), 0 | (~ (1)))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(0 | (~ (1)), min(0 | (~ (1)), 0 | (~ (1))))))))))) : _GLF_FUZZED(_injected_loop_counter))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(0 | (~ (1)), max(0 | (~ (1)), _GLF_IDENTITY(0 | (~ (1)), min(0 | (~ (1)), 0 | (~ (1)))))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(0 | (~ (1)), max(0 | (~ (1)), _GLF_IDENTITY(0 | (~ (1)), min(0 | (~ (1)), 0 | (~ (1)))))), ~ (~ (_GLF_IDENTITY(0 | (~ (1)), max(0 | _GLF_IDENTITY((~ (1)), ((~ (1))) + 0), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0 | (~ (1)), min(0 | (~ (1)), 0 | (~ (1)))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(0 | (~ (1)), min(0 | (~ (1)), 0 | (~ (1)))), (_GLF_IDENTITY(0 | (~ (1)), min(0 | (~ (1)), 0 | (~ (1))))) | (_GLF_IDENTITY(0 | (~ (1)), min(0 | (~ (1)), 0 | (~ (1))))))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(0 | (~ (1)), min(0 | (~ (_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(_injected_loop_counter) : 1)))))), 0 | (~ (1))))))))))) : _GLF_FUZZED(_injected_loop_counter))))))) - 0)) + 0)) << 0)), max((0 | (~ (1))), (0 | (~ (1)))))))))), ((_GLF_IDENTITY(0 | (~ (1)), _GLF_IDENTITY(0, (_GLF_IDENTITY(0, clamp(0, 0, 0))) | (_GLF_IDENTITY(0, clamp(0, 0, 0)))) + _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0 | (~ (1)), max(0 | (~ _GLF_IDENTITY((1), (73643 & 0) | ((1)))), _GLF_IDENTITY(0 | (~ (1)), min(0 | (~ (1)), 0 | (~ (1)))))), (_GLF_IDENTITY(_GLF_IDENTITY(0 | (~ (1)), max(0 | (~ (1)), _GLF_IDENTITY(0 | (~ (1)), min(0 | (~ (1)), 0 | (~ (1)))))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(0 | (~ (1)), _GLF_IDENTITY(max(0 | (~ (1)), _GLF_IDENTITY(0 | (~ (1)), min(0 | (~ (1)), 0 | (~ (1))))), max(max(0 | (~ (1)), _GLF_IDENTITY(0 | (~ (1)), min(0 | (~ (1)), 0 | (~ (1))))), max(0 | (~ (1)), _GLF_IDENTITY(0 | (~ (1)), min(0 | (~ (1)), 0 | (~ (1)))))))), ~ (~ (_GLF_IDENTITY(0 | (~ (1)), max(0 | _GLF_IDENTITY((~ (1)), ((~ (1))) + 0), _GLF_IDENTITY(_GLF_IDENTITY(0 | (~ (1)), min(0 | (~ (1)), 0 | (~ (1)))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(0 | (~ (1)), min(0 | (~ (1)), 0 | (~ (1))))))))))) : _GLF_FUZZED(_injected_loop_counter)))) - 0)), max((0 | (~ (1))), (0 | (~ (_GLF_IDENTITY(1, 0 + (1))))))), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0 | (~ (1)), max(0 | (~ (1)), _GLF_IDENTITY(0 | (~ (1)), min(0 | (~ (1)), 0 | (~ (1)))))), (_GLF_IDENTITY(_GLF_IDENTITY(0 | (~ (1)), max(0 | (~ _GLF_IDENTITY((1), 0 | ((1)))), _GLF_IDENTITY(0 | (~ (1)), min(0 | (~ (1)), 0 | (~ (1)))))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(0 | (~ (1)), max(0 | (~ (1)), _GLF_IDENTITY(0 | (~ (1)), min(0 | (~ (1)), 0 | (~ (1)))))), ~ (~ (_GLF_IDENTITY(0 | (~ (1)), max(_GLF_IDENTITY(0, ~ (~ (0))) | _GLF_IDENTITY((~ (1)), ((~ (1))) + 0), _GLF_IDENTITY(_GLF_IDENTITY(0 | (~ (1)), min(0 | (~ (1)), 0 | (~ (1)))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(0 | (~ (1)), min(0 | (~ (1)), 0 | (~ (_GLF_IDENTITY(1, 1 * (1))))))))))))) : _GLF_FUZZED(_injected_loop_counter)))) - 0), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, 0 | (0)) | (~ (1)), max(0 | (~ _GLF_IDENTITY((1), (_GLF_IDENTITY((1), max((1), (1)))) / 1)), _GLF_IDENTITY(0 | (~ (1)), min(0 | (~ (1)), 0 | (~ (1)))))), (_GLF_IDENTITY(_GLF_IDENTITY(0 | (~ (1)), max(0 | (~ (1)), _GLF_IDENTITY(0 | (~ (1)), min(0 | (~ (1)), 0 | (~ (1)))))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(0 | (~ (1)), max(0 | (~ (1)), _GLF_IDENTITY(0 | (~ (1)), _GLF_IDENTITY(min(0 | (~ (1)), 0 | (~ (1))), (min(0 | (~ (1)), 0 | (~ (1)))) >> 0)))), ~ (~ (_GLF_IDENTITY(0 | (~ (1)), max(0 | _GLF_IDENTITY((~ (1)), _GLF_IDENTITY(((~ (1))), int(ivec3(((~ (1))), 1, (1 ^ 1)))) + 0), _GLF_IDENTITY(_GLF_IDENTITY(0 | (~ (1)), min(0 | (~ (1)), 0 | (~ (1)))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(0 | (~ (1)), min(0 | (~ (1)), 0 | (~ (1)))), 1 * (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(0 | (~ (1)), min(0 | (~ (1)), 0 | (~ (1)))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(0 | (~ (1)), min(0 | (~ (1)), 0 | (~ (1))))) >> 0)))))))))) : _GLF_FUZZED(_injected_loop_counter)))) - 0), (_GLF_IDENTITY(_GLF_IDENTITY(0 | (~ (1)), max(0 | (~ (1)), _GLF_IDENTITY(0 | (~ (1)), min(0 | (~ (1)), 0 | _GLF_IDENTITY((~ (1)), ((~ (1))) >> 0))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0 | (~ (1)), max(0 | (~ (1)), _GLF_IDENTITY(0 | (~ (1)), min(0 | (~ (1)), 0 | (~ (1)))))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(0 | (~ (1)), max(0 | (~ (1)), _GLF_IDENTITY(0 | (~ (1)), min(0 | (~ (1)), 0 | (~ (1)))))), ~ (~ (_GLF_IDENTITY(0 | (~ (1)), max(0 | _GLF_IDENTITY((~ (1)), ((~ (1))) + 0), _GLF_IDENTITY(_GLF_IDENTITY(0 | (~ (1)), min(0 | (~ (1)), 0 | (~ (1)))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(0 | (~ (1)), min(0 | (~ (1)), 0 | (~ (1))))))))))) : _GLF_FUZZED(_injected_loop_counter))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(0 | (~ (1)), max(0 | (~ (1)), _GLF_IDENTITY(0 | (~ (1)), min(0 | (~ (1)), 0 | (~ (1)))))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(0 | (~ (1)), max(0 | (~ (1)), _GLF_IDENTITY(0 | (~ (1)), min(0 | (~ (1)), 0 | (~ (1)))))), ~ (~ (_GLF_IDENTITY(0 | (~ (1)), max(0 | _GLF_IDENTITY((~ (1)), ((~ (1))) + 0), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0 | (~ (1)), min(0 | (~ (1)), 0 | (~ (1)))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(0 | (~ (1)), min(0 | (~ (1)), 0 | (~ (1)))), (_GLF_IDENTITY(0 | (~ (1)), min(0 | (~ (1)), 0 | (~ (1))))) | (_GLF_IDENTITY(0 | (~ (1)), min(0 | (~ (1)), 0 | (~ (1))))))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(0 | (~ (1)), min(0 | (~ (_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(_injected_loop_counter) : 1)))))), 0 | (~ (1))))))))))) : _GLF_FUZZED(_injected_loop_counter))))))) - 0)) + 0)) << 0)), max((0 | (~ (1))), (0 | (~ (1))))))))))) >> ((0 ^ 0) & 65229)) << 0))) / ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(3, (3) << 0)), int(3))) >> _GLF_IDENTITY(int(3), int(3))), ((_GLF_IDENTITY(~ (1), _GLF_IDENTITY(0 | (~ (1)), (_GLF_IDENTITY(0 | (~ (1)), _GLF_IDENTITY(0, _GLF_IDENTITY((_GLF_IDENTITY(0, clamp(0, 0, 0))) | (_GLF_IDENTITY(0, clamp(0, 0, 0))), ((_GLF_IDENTITY(0, clamp(0, 0, 0))) | (_GLF_IDENTITY(0, clamp(0, 0, 0)))) | ((_GLF_IDENTITY(0, clamp(0, 0, 0))) | (_GLF_IDENTITY(0, clamp(0, 0, 0)))))) + _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0 | (~ (1)), max(0 | (~ (1)), _GLF_IDENTITY(_GLF_IDENTITY(0 | (~ (1)), ~ (~ (0 | (~ (1))))), _GLF_IDENTITY(min(0 | (~ (1)), 0 | (~ (1))), 0 ^ (_GLF_IDENTITY(min(0 | (~ (1)), 0 | (~ (1))), max(min(0 | (~ (1)), 0 | (~ (1))), min(0 | (~ (1)), 0 | (~ (1)))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(0 | (~ (1)), max(0 | (~ (1)), _GLF_IDENTITY(0 | (~ (1)), min(0 | (~ (1)), 0 | (~ (1)))))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(0 | (~ (1)), max(0 | (~ (1)), _GLF_IDENTITY(_GLF_IDENTITY(0 | (~ (1)), min(0 | (~ (1)), 0 | (~ (1)))), (_GLF_IDENTITY(0 | (~ (1)), min(0 | (~ (1)), 0 | (~ (1))))) << 0))), ~ (~ (_GLF_IDENTITY(0 | (~ (1)), max(0 | _GLF_IDENTITY((~ (1)), ((~ (1))) + 0), _GLF_IDENTITY(_GLF_IDENTITY(0 | (~ (1)), min(0 | (~ (1)), 0 | (~ (1)))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(0 | (~ (1)), min(_GLF_IDENTITY(0, int(ivec3(0, 1, (0 << _GLF_IDENTITY(int(8), int(8)))))) | (~ (1)), _GLF_IDENTITY(0 | (~ (1)), (0 | (~ (1))) | (0 | (~ (1))))))))))))) : _GLF_FUZZED(_injected_loop_counter)))) - 0)), _GLF_IDENTITY(max((0 | (~ (1))), (0 | (~ (1)))), (true ? max((0 | (~ (1))), (0 | (~ (1)))) : _GLF_FUZZED((_injected_loop_counter | _injected_loop_counter))))), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0 | (~ (1)), max(_GLF_IDENTITY(0 | (~ (1)), min(0 | (~ (1)), 0 | (~ (1)))), _GLF_IDENTITY(0 | (~ (1)), min(0 | (~ (1)), 0 | (~ (1)))))), (_GLF_IDENTITY(_GLF_IDENTITY(0 | (~ (_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) >> 0), 1)))), max(0 | (~ (1)), _GLF_IDENTITY(0 | (~ (_GLF_IDENTITY(1, int(ivec3(1, 1, 0))))), min(0 | (~ (1)), 0 | (~ (1)))))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(0 | (~ (1)), max(0 | (~ (1)), _GLF_IDENTITY(0 | (~ (1)), min(_GLF_IDENTITY(0, (0) - 0) | (~ (1)), 0 | (~ (1)))))), ~ (~ (_GLF_IDENTITY(0 | (~ (1)), max(_GLF_IDENTITY(0, 1 * (_GLF_IDENTITY(0, (0) ^ 0))) | _GLF_IDENTITY((~ (1)), ((~ (1))) + 0), _GLF_IDENTITY(_GLF_IDENTITY(0 | (~ (1)), min(0 | (~ (1)), 0 | (~ (1)))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(0 | (~ (1)), min(0 | (_GLF_IDENTITY(~ (1), (~ (1)) / 1)), 0 | (~ (1))))))))))) : _GLF_FUZZED(_injected_loop_counter)))) - 0), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0 | (~ (1)), max(0 | (~ (1)), _GLF_IDENTITY(0 | (~ (1)), min(0 | (~ (1)), 0 | _GLF_IDENTITY((~ (1)), min((~ (1)), _GLF_IDENTITY((~ (1)), ((~ (1))) ^ 0))))))), (_GLF_IDENTITY(_GLF_IDENTITY(0 | (~ (1)), max(0 | (_GLF_IDENTITY(~ (1), (~ (1)) | (~ (1)))), _GLF_IDENTITY(0 | (~ (1)), min(0 | (~ (1)), 0 | (~ (1)))))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(0 | (~ (1)), max(0 | (~ (1)), _GLF_IDENTITY(0 | (~ (1)), min(0 | (~ (1)), 0 | (~ _GLF_IDENTITY((1), clamp((1), (1), (1)))))))), ~ (~ (_GLF_IDENTITY(0 | (~ (1)), max(0 | _GLF_IDENTITY((~ (1)), _GLF_IDENTITY(((~ (1))), (_GLF_IDENTITY(((~ (1))), (((~ (1)))) << 0)) | (((~ (1))))) + _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(74449)))), _GLF_IDENTITY(_GLF_IDENTITY(0 | (~ (1)), min(0 | (~ (1)), 0 | (~ (1)))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(0 | (~ (1)), min(0 | (~ (1)), 0 | (~ (1))))))))))) : _GLF_FUZZED(_injected_loop_counter)))) - 0), (_GLF_IDENTITY(_GLF_IDENTITY(0 | (~ (1)), max(0 | (~ (1)), _GLF_IDENTITY(0 | (~ (1)), min(0 | (~ (1)), 0 | (~ (1)))))), (_GLF_IDENTITY(_GLF_IDENTITY(0 | (~ (1)), max(0 | (~ (1)), _GLF_IDENTITY(0 | (~ (1)), min(0 | (~ _GLF_IDENTITY((1), max((1), (1)))), 0 | (~ (1)))))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0 | (~ (1)), max(0 | (~ (1)), _GLF_IDENTITY(0 | (~ (1)), min(0 | (~ (1)), 0 | (~ (1)))))), ~ (~ (_GLF_IDENTITY(0 | (~ (1)), max(0 | _GLF_IDENTITY((~ (1)), ((~ (1))) + 0), _GLF_IDENTITY(_GLF_IDENTITY(0 | (~ (1)), min(0 | (~ (1)), 0 | (~ (1)))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(0 | (~ (1)), min(0 | (~ (1)), 0 | (~ (1))))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(0 | (~ (1)), max(0 | (~ (1)), _GLF_IDENTITY(0 | (~ (1)), min(0 | (~ (1)), 0 | (~ (1)))))), ~ (~ (_GLF_IDENTITY(0 | (~ (1)), max(0 | _GLF_IDENTITY((~ (1)), ((~ (1))) + 0), _GLF_IDENTITY(_GLF_IDENTITY(0 | (~ (1)), min(0 | (~ (1)), 0 | (~ (1)))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(0 | (~ (1)), min(0 | (~ (1)), 0 | (~ (1)))))))))))) | (_GLF_IDENTITY(_GLF_IDENTITY(0 | (~ (1)), max(0 | (~ (1)), _GLF_IDENTITY(0 | (~ (1)), min(0 | (~ (1)), 0 | (~ (1)))))), ~ (~ (_GLF_IDENTITY(0 | (~ (1)), max(0 | _GLF_IDENTITY((~ (1)), ((~ (1))) + 0), _GLF_IDENTITY(_GLF_IDENTITY(0 | (~ (1)), min(0 | (~ (1)), 0 | (~ (1)))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(0 | (~ (1)), min(0 | (~ (1)), 0 | (~ (1))))))))))))) : _GLF_FUZZED(_injected_loop_counter)))) - 0)) + 0)) << 0)), max((0 | (~ (1))), (0 | (~ (1)))))))))) << 0))) / ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))) >> (0 << _GLF_IDENTITY(int(5), int(5))))))) < _GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, (0u >> _GLF_IDENTITY(uint(3u), uint(3u))) | (subgroup_size)), subgroup_size, subgroup_size)))
            {
             int i = 0;
             do
              {
               do
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   atomicStore(buf[_GLF_IDENTITY(_GLF_IDENTITY(next_virtual_gid, min(_GLF_IDENTITY(next_virtual_gid, (_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) | 0u)) | 0u), next_virtual_gid)), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(next_virtual_gid, min(_GLF_IDENTITY(next_virtual_gid, (_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) | 0u)) | 0u), next_virtual_gid)), (true ? _GLF_IDENTITY(next_virtual_gid, min(_GLF_IDENTITY(_GLF_IDENTITY(next_virtual_gid, (_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) | (_GLF_IDENTITY(next_virtual_gid, ~ (~ _GLF_IDENTITY((next_virtual_gid), ((next_virtual_gid)) / 1u)))))) - (0u >> _GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(4u), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(workgroup_id) : uint(4u)))))), (_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) | 0u)) | 0u), next_virtual_gid)) : _GLF_FUZZED(atomicAnd(subgroup_size, subgroup_id)))))), 1u * (~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) + 0u), min(_GLF_IDENTITY(next_virtual_gid, (_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) | 0u)) | 0u), next_virtual_gid)), ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(next_virtual_gid, min(_GLF_IDENTITY(next_virtual_gid, (_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) | 0u)) | 0u), next_virtual_gid)), 0u + (_GLF_IDENTITY(next_virtual_gid, min(_GLF_IDENTITY(next_virtual_gid, (_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) | 0u)) | _GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0u, clamp(0u, 0u, 0u))), (~ (_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)))) | (_GLF_IDENTITY(~ (_GLF_IDENTITY(0u, clamp(0u, 0u, 0u))), uint(uvec4(~ (_GLF_IDENTITY(0u, clamp(0u, 0u, 0u))), 0u, 0u, 0u)))))))), next_virtual_gid))))), 1u * (~ (_GLF_IDENTITY(_GLF_IDENTITY(next_virtual_gid, _GLF_IDENTITY(min(_GLF_IDENTITY(next_virtual_gid, (_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) | 0u)) | 0u), next_virtual_gid), min(min(_GLF_IDENTITY(next_virtual_gid, (_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) | 0u)) | 0u), next_virtual_gid), min(_GLF_IDENTITY(next_virtual_gid, (_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) | 0u)) | 0u), next_virtual_gid)))), 0u + (_GLF_IDENTITY(next_virtual_gid, min(_GLF_IDENTITY(next_virtual_gid, (_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) | 0u)) | 0u), next_virtual_gid)))))))), ((_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(next_virtual_gid, min(_GLF_IDENTITY(next_virtual_gid, (_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) | 0u)) | 0u), next_virtual_gid)), 0u + (_GLF_IDENTITY(next_virtual_gid, min(_GLF_IDENTITY(next_virtual_gid, (_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) | 0u)) | _GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0u, clamp(0u, 0u, 0u))), (~ (_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)))) | (_GLF_IDENTITY(~ (_GLF_IDENTITY(0u, clamp(0u, 0u, 0u))), uint(uvec4(~ (_GLF_IDENTITY(0u, clamp(0u, 0u, 0u))), 0u, 0u, 0u)))))))), next_virtual_gid))))), 1u * (~ (_GLF_IDENTITY(_GLF_IDENTITY(next_virtual_gid, _GLF_IDENTITY(min(_GLF_IDENTITY(next_virtual_gid, (_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) | 0u)) | 0u), next_virtual_gid), min(min(_GLF_IDENTITY(next_virtual_gid, (_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) | 0u)) | 0u), next_virtual_gid), min(_GLF_IDENTITY(next_virtual_gid, (_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) | 0u)) | 0u), next_virtual_gid)))), 0u + (_GLF_IDENTITY(next_virtual_gid, min(_GLF_IDENTITY(next_virtual_gid, (_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) | 0u)) | 0u), next_virtual_gid))))))))) | ((_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(next_virtual_gid, min(_GLF_IDENTITY(next_virtual_gid, (_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) | 0u)) | 0u), next_virtual_gid)), 0u + (_GLF_IDENTITY(next_virtual_gid, min(_GLF_IDENTITY(next_virtual_gid, (_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) | 0u)) | _GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0u, clamp(0u, 0u, 0u))), (~ (_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)))) | (_GLF_IDENTITY(~ (_GLF_IDENTITY(0u, clamp(0u, 0u, 0u))), uint(uvec4(~ (_GLF_IDENTITY(0u, clamp(0u, 0u, 0u))), 0u, 0u, 0u)))))))), next_virtual_gid))))), 1u * (~ (_GLF_IDENTITY(_GLF_IDENTITY(next_virtual_gid, _GLF_IDENTITY(min(_GLF_IDENTITY(next_virtual_gid, (_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) | 0u)) | 0u), next_virtual_gid), min(min(_GLF_IDENTITY(next_virtual_gid, (_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) | 0u)) | 0u), next_virtual_gid), min(_GLF_IDENTITY(next_virtual_gid, (_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) | 0u)) | 0u), next_virtual_gid)))), 0u + (_GLF_IDENTITY(next_virtual_gid, min(_GLF_IDENTITY(next_virtual_gid, (_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) | 0u)) | 0u), next_virtual_gid))))))))))), min(_GLF_IDENTITY(next_virtual_gid, min(_GLF_IDENTITY(next_virtual_gid, (_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) | 0u)) | 0u), next_virtual_gid)), _GLF_IDENTITY(_GLF_IDENTITY(next_virtual_gid, min(_GLF_IDENTITY(next_virtual_gid, (_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) | 0u)) | 0u), _GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) | 0u))), ~ (~ (_GLF_IDENTITY(next_virtual_gid, min(_GLF_IDENTITY(next_virtual_gid, (_GLF_IDENTITY(next_virtual_gid, _GLF_IDENTITY((next_virtual_gid), min((next_virtual_gid), _GLF_IDENTITY((next_virtual_gid), 0u ^ ((next_virtual_gid))))) | 0u)) | 0u), next_virtual_gid))))))), (true ? _GLF_IDENTITY(next_virtual_gid, min(_GLF_IDENTITY(next_virtual_gid, (_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) | 0u)) | 0u), next_virtual_gid)) : _GLF_FUZZED(atomicAnd(subgroup_size, subgroup_id)))))))))], uint(_GLF_IDENTITY(2, ~ (_GLF_IDENTITY(~ (2), int(ivec2(_GLF_IDENTITY(~ (2), _GLF_IDENTITY(0 | (~ (2)), (0 | (~ (2))) / (0 | 1))), (_GLF_IDENTITY(-90364 & 0, min(_GLF_IDENTITY(-90364 & 0, (_GLF_IDENTITY(-90364 & 0, (-90364 & 0) << 0)) >> 0), -90364 & 0))))))))), 4, 64, 0);
                  }
                 else
                  {
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           else
            {
             atomicStore(buf[next_virtual_gid], uint(2), 4, _GLF_IDENTITY(64, _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (64), (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec3(bvec4(bvec3(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), false))))) ? ~ (64) : _GLF_FUZZED(-37621)))), (~ (~ (64))) | 0)), 0);
            }
          }
        }
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, abs(1.0) * (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x) - 0.0), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), 1.0, length(0.0), 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), _GLF_ONE(1.0, injectionSwitch.y), 1.0)), max(_GLF_IDENTITY(vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), 1.0, length(0.0), 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), _GLF_ONE(1.0, injectionSwitch.y), 1.0)), vec2(0.0, 0.0) + (vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), 1.0, length(0.0), 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), _GLF_ONE(1.0, injectionSwitch.y), 1.0)))), vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), 1.0, length(0.0), 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), _GLF_ONE(1.0, injectionSwitch.y), 1.0))))).x)))) > injectionSwitch.y))))
  {
   do
    {
     if(_GLF_DEAD(false))
      break;
     return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, 1.0 * (injectionSwitch.y))), ((injectionSwitch.x > injectionSwitch.y)) && true))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 1)); _GLF_IDENTITY(_injected_loop_counter ++, (true ? _injected_loop_counter ++ : _GLF_FUZZED(_injected_loop_counter))))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   else
    {
    }
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         return;
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
}
