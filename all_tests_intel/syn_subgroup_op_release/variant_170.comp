#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_12 {
 mat4x3 _f0;
 uint _f1;
} ;

struct _GLF_struct_11 {
 mat2x3 _f0;
} ;

struct _GLF_struct_13 {
 _GLF_struct_11 _f0;
 mat3x4 _f1;
 _GLF_struct_12 _f2;
 uvec4 _f3;
} ;

struct _GLF_struct_14 {
 uint subgroup_id;
 bvec4 _f0;
 _GLF_struct_13 _f1;
} ;

struct _GLF_struct_8 {
 mat2x4 _f0;
 uint _f1;
} ;

struct _GLF_struct_9 {
 _GLF_struct_8 _f0;
} ;

struct _GLF_struct_6 {
 mat2x4 _f0;
 mat4x2 _f1;
 mat2x3 _f2;
} ;

struct _GLF_struct_5 {
 ivec4 _f0;
 bool _f1;
 int _f2;
 mat3x4 _f3;
 mat4x2 _f4;
 mat2x4 _f5;
} ;

struct _GLF_struct_4 {
 uint _f0;
 mat4x3 _f1;
 bvec2 _f2;
} ;

struct _GLF_struct_7 {
 uvec2 _f0;
 uint _f1;
 _GLF_struct_4 _f2;
 _GLF_struct_5 _f3;
 ivec4 _f4;
 mat4x2 _f5;
 _GLF_struct_6 _f6;
} ;

struct _GLF_struct_2 {
 uint _f0;
} ;

struct _GLF_struct_1 {
 uint _f0;
 mat2 _f1;
 mat2 _f2;
} ;

struct _GLF_struct_0 {
 mat3x4 _f0;
} ;

struct _GLF_struct_3 {
 _GLF_struct_0 _f0;
 _GLF_struct_1 _f1;
 _GLF_struct_2 _f2;
 uint subgroup_local_id;
 vec3 _f3;
} ;

struct _GLF_struct_10 {
 mat4x2 _f0;
 _GLF_struct_3 _f1;
 vec3 _f2;
 _GLF_struct_7 _f3;
 _GLF_struct_9 _f4;
 mat3x2 _f5;
 float _f6;
} ;

layout(set = 0, binding = 0) uniform buf0 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 _GLF_struct_14 _GLF_struct_replacement_14 = _GLF_struct_14(gl_SubgroupID, bvec4(true), _GLF_struct_13(_GLF_struct_11(mat2x3(1.0)), mat3x4(1.0), _GLF_struct_12(mat4x3(1.0), 1u), uvec4(1u)));
 uint subgroup_size = 16;
 do
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          break;
        }
       else
        {
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      break;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  return;
 _GLF_struct_10 _GLF_struct_replacement_10 = _GLF_struct_10(mat4x2(1.0), _GLF_struct_3(_GLF_struct_0(mat3x4(1.0)), _GLF_struct_1(1u, mat2(_GLF_IDENTITY(1.0, min(1.0, 1.0))), mat2(1.0)), _GLF_struct_2(1u), gl_SubgroupInvocationID, vec3(1.0)), vec3(1.0), _GLF_struct_7(uvec2(1u), 1u, _GLF_struct_4(_GLF_IDENTITY(1u, max(1u, 1u)), mat4x3(1.0), bvec2(true)), _GLF_struct_5(ivec4(1), true, 1, mat3x4(1.0), mat4x2(1.0), mat2x4(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(vec3(227.386, -941.797, -55.55).x)), float(1.0), bool(true))))), ivec4(1), mat4x2(1.0), _GLF_struct_6(mat2x4(_GLF_IDENTITY(1.0, (1.0) / 1.0)), mat4x2(1.0), mat2x3(1.0))), _GLF_struct_9(_GLF_struct_8(mat2x4(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(863.208)))), 1u)), mat3x2(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-7.0)))), 1.0);
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize.x, min(gl_WorkGroupSize.x, _GLF_IDENTITY(gl_WorkGroupSize.x, max(gl_WorkGroupSize.x, gl_WorkGroupSize.x))));
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_DEAD(false)) && true, ! (! ((_GLF_DEAD(false)) && true))))))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    {
     do
      {
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
    }
  }
 do
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < _GLF_IDENTITY((1 & 1), ((1 & 1)) - 0), _GLF_IDENTITY(bool(bvec4(_injected_loop_counter < _GLF_IDENTITY((1 & 1), ((1 & 1)) - 0), true, true, false)), false || (bool(bvec4(_injected_loop_counter < _GLF_IDENTITY((1 & 1), ((1 & 1)) - 0), true, true, false)))))); _GLF_IDENTITY(_injected_loop_counter ++, (true ? _GLF_IDENTITY(_injected_loop_counter ++, ~ (~ (_injected_loop_counter ++))) : _GLF_FUZZED(_injected_loop_counter))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             return;
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            continue;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
        }
       if(_GLF_DEAD(false))
        break;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     return;
    }
   if(_GLF_DEAD(false))
    break;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint workgroup_id = _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) ^ uvec3(0u, _GLF_IDENTITY(0u, (0u) >> (_GLF_IDENTITY(0u, (0u) ^ 0u) >> _GLF_IDENTITY(uint(5u), uint(5u)))), 0u)).x, (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY((gl_WorkGroupID) ^ uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u) | (_GLF_IDENTITY((gl_WorkGroupID), (true ? (gl_WorkGroupID) : _GLF_FUZZED(uvec3(8129u, 76729u, 125284u)))) ^ uvec3(0u, 0u, 0u)))), ~ (~ (_GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY((gl_WorkGroupID) ^ uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u) | (_GLF_IDENTITY((gl_WorkGroupID), (true ? (gl_WorkGroupID) : _GLF_FUZZED(uvec3(8129u, 76729u, 125284u)))) ^ uvec3(0u, 0u, 0u))))))).x) | (0u | 0u));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(false))
            return;
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
            {
             do
              {
               if(_GLF_DEAD(false))
                continue;
               return;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))) || false), (injectionSwitch.x > injectionSwitch.y))));
            }
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
         return;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
            return;
           return;
          }
        }
      }
     else
      {
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     return;
    }
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     else
      {
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(false))
      break;
     return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch)).y))));
  }
 uint virtual_gid = workgroup_base + _GLF_struct_replacement_14.subgroup_id * subgroup_size + _GLF_IDENTITY(_GLF_struct_replacement_10._f1.subgroup_local_id, (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-371.196), _GLF_FUZZED(vec3(-59.59, 4.2, 9730.6802).x)), vec2(_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) / 1.0), _GLF_IDENTITY((injectionSwitch), (false ? _GLF_FUZZED(vec2(342.748, 0.7)) : (injectionSwitch)))[1]), bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))).x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_IDENTITY(_GLF_FUZZED(-7960.2718), mix(float(_GLF_FUZZED(-7960.2718)), float(_GLF_FUZZED(4803.3752)), bool(false))), _GLF_FUZZED(-7240.7574)), bvec2(false, false))), injectionSwitch)).y)) ? _GLF_FUZZED(num_workgroup) : _GLF_struct_replacement_10._f1.subgroup_local_id));
 uint next_virtual_gid = workgroup_base + _GLF_struct_replacement_14.subgroup_id * subgroup_size + (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_struct_replacement_10._f1.subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, (1) | (1)))))) - 0)) % subgroup_size, ((_GLF_IDENTITY(_GLF_struct_replacement_10._f1.subgroup_local_id, (_GLF_struct_replacement_10._f1.subgroup_local_id) | 0u) + _GLF_IDENTITY(1, (1) - 0)) % subgroup_size) - 0u), uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY((_GLF_struct_replacement_10._f1.subgroup_local_id + 1) % subgroup_size, uint(uint((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_10._f1.subgroup_local_id + 1, clamp(_GLF_struct_replacement_10._f1.subgroup_local_id + 1, _GLF_struct_replacement_10._f1.subgroup_local_id + 1, _GLF_IDENTITY(_GLF_struct_replacement_10._f1.subgroup_local_id + 1, ~ (_GLF_IDENTITY(~ (_GLF_struct_replacement_10._f1.subgroup_local_id + 1), max(~ (_GLF_struct_replacement_10._f1.subgroup_local_id + 1), ~ (_GLF_struct_replacement_10._f1.subgroup_local_id + 1))))))), ~ (_GLF_IDENTITY(~ (_GLF_struct_replacement_10._f1.subgroup_local_id + 1), clamp(_GLF_IDENTITY(~ (_GLF_struct_replacement_10._f1.subgroup_local_id + 1), (_GLF_IDENTITY(~ (_GLF_struct_replacement_10._f1.subgroup_local_id + 1), (false ? _GLF_FUZZED(workgroup_id) : ~ (_GLF_struct_replacement_10._f1.subgroup_local_id + 1)))) + 0u), ~ (_GLF_struct_replacement_10._f1.subgroup_local_id + 1), ~ (_GLF_struct_replacement_10._f1.subgroup_local_id + 1)))))) % subgroup_size))), _GLF_IDENTITY((_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (uint(0u)) | 0u), uint(0u)), 0u ^ (_GLF_IDENTITY((_GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, _GLF_IDENTITY(uint(uint(1u)), (uint(uint(1u))) << 0u)))) << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u)), (false ? _GLF_FUZZED(workgroup_size) : (1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))))))), clamp(_GLF_IDENTITY((_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (false ? _GLF_FUZZED(workgroup_base) : uint(0u))), (uint(0u)) | 0u), uint(0u)), 0u ^ (_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u)), (false ? _GLF_FUZZED(workgroup_size) : _GLF_IDENTITY((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u)), (_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u)), max(_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u)), ((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))) | 0u), (1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))))) | (_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u)), ((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))) ^ 0u)))))))), (true ? (_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (uint(0u)) | 0u), uint(0u)), 0u ^ (_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u)), (false ? _GLF_FUZZED(workgroup_size) : (1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), (false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(uint(0u), uint(0u))))))))) : _GLF_FUZZED(num_workgroup))), _GLF_IDENTITY((_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (uint(0u)) | 0u), uint(0u)), 0u ^ _GLF_IDENTITY((_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(_GLF_IDENTITY(0u, ~ (~ (0u))))), (false ? _GLF_FUZZED(workgroup_size) : (1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))))), uint(uvec3((_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(_GLF_IDENTITY(0u, ~ (~ (0u))))), (false ? _GLF_FUZZED(workgroup_size) : (1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))))), 1u, ((1u << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u)))))))), max((_GLF_IDENTITY(_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (uint(0u)) | 0u), uint(0u)), 0u ^ (_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(0u), uint(_GLF_IDENTITY(0u, ~ (~ (0u)))))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), clamp(_GLF_IDENTITY(uint(0u), (uint(0u)) * 1u), uint(0u), uint(0u))), uint(0u)), (false ? _GLF_FUZZED(workgroup_size) : (1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u)))))), (_GLF_IDENTITY(_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (uint(0u)) | 0u), uint(0u)), 0u ^ (_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(0u), uint(_GLF_IDENTITY(0u, ~ (~ (0u)))))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), clamp(_GLF_IDENTITY(uint(0u), (uint(0u)) * 1u), uint(0u), uint(0u))), uint(0u)), (false ? _GLF_FUZZED(workgroup_size) : (1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u)))))), (false ? _GLF_FUZZED(workgroup_id) : _GLF_IDENTITY(_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (uint(0u)) | 0u), uint(0u)), 0u ^ (_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(0u), uint(_GLF_IDENTITY(0u, ~ (~ (0u)))))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), clamp(_GLF_IDENTITY(uint(0u), (uint(0u)) * 1u), uint(0u), uint(0u))), uint(0u)), (false ? _GLF_FUZZED(workgroup_size) : (1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u)))))), min(_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (uint(0u)) | 0u), uint(0u)), 0u ^ (_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(0u), uint(_GLF_IDENTITY(0u, ~ (~ (0u)))))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), clamp(_GLF_IDENTITY(uint(0u), (uint(0u)) * 1u), uint(0u), uint(0u))), uint(0u)), (false ? _GLF_FUZZED(workgroup_size) : (1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u)))))), _GLF_IDENTITY((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (uint(0u)) | 0u), uint(0u)), 0u ^ (_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(0u), uint(_GLF_IDENTITY(0u, ~ (~ (0u)))))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), clamp(_GLF_IDENTITY(uint(0u), (uint(0u)) * 1u), uint(0u), uint(0u))), uint(0u)), (false ? _GLF_FUZZED(workgroup_size) : (1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))))))))))) | 0u)), _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(1u, (1u) ^ 0u) << _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), min(_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), (_GLF_IDENTITY(uint(0u), uint(0u))) ^ 0u), _GLF_IDENTITY(uint(0u), uint(0u))))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (uint(0u)) | 0u), uint(0u)), 0u ^ (_GLF_IDENTITY((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), (_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), (_GLF_IDENTITY(uint(0u), uint(0u))) ^ 0u)) | (_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), 0u | (_GLF_IDENTITY(uint(0u), uint(0u))))))) >> _GLF_IDENTITY(uint(0u), uint(0u)), (false ? _GLF_FUZZED(workgroup_size) : (1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))))))), ((_GLF_IDENTITY((_GLF_IDENTITY(1u, (1u) ^ 0u) << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (uint(0u)) | 0u), uint(0u)), max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (uint(0u)) | 0u), uint(0u)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (uint(0u)) | 0u), uint(0u)), (_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (uint(0u)) | 0u), uint(0u))) | (_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (uint(0u)) | 0u), uint(0u))))) ^ 0u), _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (uint(0u)) | 0u), uint(0u)))), 0u ^ (_GLF_IDENTITY((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), (_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), (_GLF_IDENTITY(uint(0u), uint(0u))) ^ 0u)) | (_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), 0u | (_GLF_IDENTITY(uint(0u), uint(0u))))))) >> _GLF_IDENTITY(uint(0u), uint(0u)), (false ? _GLF_FUZZED(workgroup_size) : (1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u)))))))) << 0u))), (_GLF_IDENTITY(_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(0u), uint(0u))), max((1u << _GLF_IDENTITY(uint(0u), uint(0u))), (1u << _GLF_IDENTITY(uint(0u), uint(0u))))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (uint(0u)) | 0u), uint(0u)), 0u ^ (_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u)), (false ? _GLF_FUZZED(workgroup_size) : (1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))))))))), 0u), (uvec3(_GLF_IDENTITY((_GLF_struct_replacement_10._f1.subgroup_local_id + 1) % subgroup_size, uint(uint((_GLF_struct_replacement_10._f1.subgroup_local_id + 1) % subgroup_size))), ((1u << _GLF_IDENTITY(uint(0u), _GLF_IDENTITY(uint(0u), uint(_GLF_IDENTITY(uint(uint(0u)), (true ? uint(uint(0u)) : _GLF_FUZZED(virtual_gid))))))) >> _GLF_IDENTITY(uint(0u), _GLF_IDENTITY(uint(0u), clamp(_GLF_IDENTITY(uint(0u), ~ (_GLF_IDENTITY(~ (uint(0u)), clamp(~ (uint(_GLF_IDENTITY(0u, (_GLF_IDENTITY(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, min(0u, 0u))) + 0u), clamp(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, min(0u, 0u))) + 0u), _GLF_IDENTITY(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, min(0u, 0u))) + 0u), clamp(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, min(0u, 0u))) + 0u), _GLF_IDENTITY(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, min(0u, 0u))) + 0u), (_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, min(0u, 0u))) + 0u)) << 0u), _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, min(0u, 0u))) + 0u))), _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, min(0u, 0u))) + 0u)))) + 0u))), ~ (uint(0u)), _GLF_IDENTITY(~ (uint(0u)), 0u ^ (~ (uint(0u)))))))), uint(0u), uint(0u))))), 0u)) * uvec3(1u, 1u, _GLF_IDENTITY(1u, 0u + (_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, 0u | (1u))) / 1u))))))));
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).y))) && true)))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(false))
      return;
    }
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    break;
   for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), _GLF_IDENTITY(true && (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)), (_GLF_IDENTITY(true && (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)), ! (! (true && (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)))))) || false)); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            continue;
           return;
          }
        }
       else
        {
        }
       break;
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       do
        {
         buf[virtual_gid] = 1;
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        break;
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, true, true)), ! (_GLF_IDENTITY(! (bool(bvec4(false, true, true, true))), ! (! (_GLF_IDENTITY(! (bool(bvec4(false, true, true, true))), ! (! (! (bool(bvec4(false, true, true, true))))))))))))), (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))))) || false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              break;
             return;
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          break;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
            return;
          }
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
    }
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true)))
        {
        }
       else
        {
         return;
        }
       if(_GLF_DEAD(false))
        continue;
      }
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     break;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       return;
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
  {
   do
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), clamp(int(6), int(6), _GLF_IDENTITY(int(6), (int(6)) / 1)))), int(int(1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), clamp(int(6), int(6), _GLF_IDENTITY(int(6), (int(6)) / 1)))))))) >> _GLF_IDENTITY(int(6), int(6)))); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) ^ 0))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, (true) || false)), (! (_GLF_IDENTITY(true, (true) || false))) && true)))))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_DEAD(false))
              return;
             return;
            }
           else
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             return;
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           break;
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      {
       do
        {
         if(_GLF_DEAD(false))
          return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       do
        {
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || _GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(false, ! (! (false))) || (false))), ! (! ((_GLF_IDENTITY(false, _GLF_IDENTITY(false, ! (! (false))) || (false)))))))))
            {
            }
           else
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               return;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  break;
                 return;
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         return;
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_struct_replacement_10._f1.subgroup_local_id + 1 < subgroup_size)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           return;
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            return;
           return;
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
          break;
         if(_GLF_DEAD(false))
          continue;
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)))[0], (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x4(injectionSwitch, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, sqrt(1.0), determinant(mat2(0.0, 0.0, 1.0, 0.0)), 0.0, 1.0)), clamp(vec2(mat3x4(injectionSwitch, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, sqrt(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat2x3(1.0, 1.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0), transpose(transpose(_GLF_IDENTITY(mat2x3(1.0, 1.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0), mat2x3(mat3x4(mat2x3(1.0, 1.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0)))))))))), determinant(mat2(0.0, 0.0, 1.0, 0.0)), 0.0, 1.0)), vec2(mat3x4(injectionSwitch, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(sqrt(1.0), (true ? sqrt(1.0) : _GLF_FUZZED(-596.189))), determinant(mat2(0.0, 0.0, 1.0, 0.0)), 0.0, 1.0)), vec2(mat3x4(injectionSwitch, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, sqrt(1.0), determinant(mat2(0.0, 0.0, 1.0, 0.0)), 0.0, 1.0))))))[1]), vec2(_GLF_IDENTITY(_GLF_FUZZED(8.8), min(_GLF_FUZZED(8.8), _GLF_FUZZED(8.8))), _GLF_FUZZED(vec3(2244.6578, -9.4, -61.07).b)), bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).x, float(vec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(1.0, 1.0), max(vec2(1.0, 1.0), vec2(1.0, 1.0))) * (injectionSwitch)))[0], (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x4(injectionSwitch, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, sqrt(1.0), determinant(mat2(0.0, 0.0, 1.0, 0.0)), 0.0, 1.0)), clamp(vec2(mat3x4(injectionSwitch, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, sqrt(1.0), determinant(mat2(0.0, 0.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0))), 0.0)), 0.0, 1.0)), vec2(mat3x4(injectionSwitch, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, sqrt(1.0), determinant(mat2(0.0, 0.0, 1.0, 0.0)), 0.0, 1.0)), vec2(mat3x4(injectionSwitch, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, sqrt(1.0), determinant(mat2(0.0, 0.0, 1.0, 0.0)), 0.0, 1.0))))))[1]), vec2(_GLF_IDENTITY(_GLF_FUZZED(8.8), min(_GLF_FUZZED(8.8), _GLF_FUZZED(8.8))), _GLF_FUZZED(vec3(2244.6578, -9.4, -61.07).b)), bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).x, float(mat2x4(_GLF_IDENTITY(injectionSwitch, mix(vec2((_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)))[0], (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x4(injectionSwitch, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, sqrt(1.0), determinant(mat2(0.0, 0.0, 1.0, 0.0)), 0.0, 1.0)), clamp(vec2(mat3x4(injectionSwitch, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, sqrt(1.0), determinant(mat2(0.0, 0.0, _GLF_IDENTITY(1.0, float(vec4(1.0, 1.0, 1.0, 1.0))), 0.0)), 0.0, 1.0)), vec2(mat3x4(injectionSwitch, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, sqrt(1.0), determinant(mat2(0.0, 0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-103.106)), float(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), 0.0)), 0.0, 1.0)), vec2(mat3x4(injectionSwitch, 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), sqrt(1.0), determinant(mat2(0.0, 0.0, 1.0, 0.0)), 0.0, 1.0))))))[1]), vec2(_GLF_IDENTITY(_GLF_FUZZED(8.8), min(_GLF_FUZZED(8.8), _GLF_FUZZED(8.8))), _GLF_FUZZED(vec3(2244.6578, -9.4, -61.07).b)), bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).x, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0))), 0.0, 1.0, 1.0))) > injectionSwitch.y), _GLF_IDENTITY(bool(bvec2((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)))[0], (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(vec2(mat3x4(injectionSwitch, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, sqrt(1.0), determinant(mat2(0.0, 0.0, 1.0, 0.0)), 0.0, 1.0)), (vec2(mat3x4(injectionSwitch, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, sqrt(1.0), determinant(mat2(0.0, 0.0, 1.0, 0.0)), 0.0, 1.0))) / vec2(1.0, 1.0)), clamp(vec2(mat3x4(injectionSwitch, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, sqrt(1.0), determinant(mat2(0.0, 0.0, 1.0, 0.0)), 0.0, 1.0)), vec2(mat3x4(injectionSwitch, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, sqrt(1.0), determinant(mat2(0.0, 0.0, 1.0, 0.0)), 0.0, 1.0)), vec2(mat3x4(injectionSwitch, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, sqrt(1.0), determinant(mat2(0.0, 0.0, 1.0, 0.0)), 0.0, 1.0))))))[1]), vec2(_GLF_IDENTITY(_GLF_FUZZED(8.8), min(_GLF_FUZZED(8.8), _GLF_FUZZED(8.8))), _GLF_FUZZED(vec3(2244.6578, -9.4, -61.07).b)), bvec2(false, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))).x, float(vec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)))[0], (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x4(injectionSwitch, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, sqrt(1.0), determinant(mat2(0.0, 0.0, 1.0, 0.0)), 0.0, 1.0)), clamp(vec2(mat3x4(injectionSwitch, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, sqrt(1.0), determinant(mat2(0.0, 0.0, 1.0, 0.0)), 0.0, 1.0)), vec2(mat3x4(injectionSwitch, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, sqrt(1.0), determinant(mat2(0.0, 0.0, 1.0, 0.0)), 0.0, 1.0)), vec2(mat3x4(injectionSwitch, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, sqrt(1.0), determinant(mat2(0.0, 0.0, 1.0, 0.0)), 0.0, 1.0))))))[1]), vec2(_GLF_IDENTITY(_GLF_FUZZED(8.8), min(_GLF_FUZZED(8.8), _GLF_FUZZED(_GLF_IDENTITY(8.8, min(8.8, 8.8))))), _GLF_FUZZED(vec3(2244.6578, -9.4, -61.07).b)), bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).x, float(mat2x4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)))[0], (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), _GLF_IDENTITY(vec2(mat3x4(injectionSwitch, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, sqrt(1.0), determinant(mat2(0.0, 0.0, 1.0, 0.0)), 0.0, 1.0)), clamp(vec2(mat3x4(injectionSwitch, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, sqrt(1.0), determinant(mat2(0.0, 0.0, 1.0, 0.0)), 0.0, 1.0)), vec2(mat3x4(injectionSwitch, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, sqrt(1.0), determinant(mat2(0.0, 0.0, 1.0, 0.0)), 0.0, 1.0)), vec2(mat3x4(injectionSwitch, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, sqrt(1.0), determinant(mat2(0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(7239.3671)), float(_GLF_IDENTITY(0.0, min(0.0, 0.0))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), 1.0, 0.0)), 0.0, 1.0))))))[1]), vec2(_GLF_IDENTITY(_GLF_FUZZED(8.8), min(_GLF_FUZZED(8.8), _GLF_FUZZED(8.8))), _GLF_FUZZED(vec3(2244.6578, -9.4, -61.07).b)), bvec2(false, _GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, true && (false))), (bool(_GLF_IDENTITY(false, true && (false)))) || false))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))).x, float(mat3x2(_GLF_IDENTITY(injectionSwitch, mix(vec2((_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)))[0], (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), _GLF_IDENTITY(vec2(mat3x4(injectionSwitch, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, sqrt(1.0), determinant(mat2(0.0, 0.0, 1.0, 0.0)), 0.0, 1.0)), clamp(vec2(mat3x4(injectionSwitch, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, sqrt(1.0), determinant(mat2(0.0, 0.0, 1.0, 0.0)), 0.0, 1.0)), vec2(mat3x4(injectionSwitch, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, sqrt(1.0), determinant(mat2(0.0, 0.0, 1.0, 0.0)), 0.0, 1.0)), vec2(mat3x4(injectionSwitch, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, sqrt(1.0), determinant(mat2(0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(7239.3671)), float(_GLF_IDENTITY(0.0, min(0.0, 0.0))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), 1.0, 0.0)), 0.0, 1.0))))))[1]), vec2(_GLF_IDENTITY(_GLF_FUZZED(8.8), min(_GLF_FUZZED(8.8), _GLF_FUZZED(8.8))), _GLF_FUZZED(vec3(2244.6578, -9.4, -61.07).b)), bvec2(false, _GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, true && (false))), (bool(_GLF_IDENTITY(false, true && (false)))) || false))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))).x, 1.0, 0.0, 1.0, 0.0, sqrt(1.0)))), 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0))), 0.0, 1.0, 1.0))) > injectionSwitch.y), false)), true && (bool(bvec2((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)))[0], (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x4(injectionSwitch, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, sqrt(1.0), determinant(mat2(0.0, 0.0, 1.0, 0.0)), 0.0, 1.0)), clamp(vec2(mat3x4(injectionSwitch, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, sqrt(1.0), determinant(mat2(0.0, 0.0, 1.0, 0.0)), 0.0, 1.0)), vec2(mat3x4(injectionSwitch, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, sqrt(1.0), determinant(mat2(0.0, 0.0, 1.0, 0.0)), 0.0, 1.0)), vec2(mat3x4(injectionSwitch, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, sqrt(1.0), determinant(mat2(_GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), 0.0, 1.0, 0.0)), 0.0, 1.0))))))[1]), vec2(_GLF_IDENTITY(_GLF_FUZZED(8.8), min(_GLF_FUZZED(8.8), _GLF_FUZZED(8.8))), _GLF_FUZZED(vec3(2244.6578, -9.4, -61.07).b)), bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).x, float(vec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)))[0], (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x4(injectionSwitch, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, sqrt(1.0), determinant(mat2(0.0, 0.0, 1.0, 0.0)), 0.0, 1.0)), clamp(vec2(mat3x4(injectionSwitch, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, sqrt(1.0), determinant(mat2(0.0, 0.0, 1.0, 0.0)), 0.0, 1.0)), vec2(mat3x4(injectionSwitch, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, sqrt(1.0), determinant(mat2(0.0, 0.0, 1.0, 0.0)), 0.0, 1.0)), vec2(mat3x4(injectionSwitch, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, sqrt(1.0), determinant(mat2(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, float(mat3x4(0.0, 0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), tan(0.0), 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, exp(0.0), 0.0)))) - 0.0), 0.0, 1.0, 0.0)), 0.0, 1.0))))))[1]), vec2(_GLF_IDENTITY(_GLF_FUZZED(8.8), min(_GLF_FUZZED(8.8), _GLF_FUZZED(8.8))), _GLF_FUZZED(vec3(2244.6578, -9.4, -61.07).b)), bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).x, float(mat2x4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)), mix(vec2((_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)))[0], (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x4(injectionSwitch, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, sqrt(1.0), determinant(mat2(0.0, 0.0, 1.0, 0.0)), 0.0, 1.0)), clamp(vec2(mat3x4(injectionSwitch, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, sqrt(1.0), determinant(mat2(0.0, 0.0, 1.0, 0.0)), 0.0, 1.0)), vec2(mat3x4(injectionSwitch, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, sqrt(1.0), determinant(mat2(0.0, 0.0, 1.0, 0.0)), 0.0, 1.0)), vec2(mat3x4(injectionSwitch, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, sqrt(1.0), determinant(mat2(0.0, 0.0, 1.0, 0.0)), 0.0, 1.0))))))[1]), vec2(_GLF_IDENTITY(_GLF_FUZZED(8.8), min(_GLF_FUZZED(8.8), _GLF_FUZZED(8.8))), _GLF_FUZZED(vec3(2244.6578, -9.4, -61.07).b)), bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).x, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0))), 0.0, 1.0, 1.0))) > injectionSwitch.y), false))))))))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(false))
                break;
              }
             else
              {
               if(_GLF_DEAD(false))
                return;
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 return;
                }
              }
             do
              {
               do
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    return;
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     do
                      {
                       return;
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                    }
                   return;
                   if(_GLF_DEAD(false))
                    break;
                  }
                 if(_GLF_DEAD(false))
                  return;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             return;
            }
           else
            {
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
          {
           do
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(false))
                break;
               continue;
              }
             atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(2), (_GLF_IDENTITY(uint(2), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(2), clamp(uint(2), uint(2), uint(2))), ~ _GLF_IDENTITY((~ (uint(2))), (_GLF_IDENTITY((~ (uint(2))), max((~ (uint(2))), (_GLF_IDENTITY(~ (uint(2)), (~ (uint(2))) | (~ (uint(2)))))))) >> _GLF_IDENTITY(0u, (0u) >> 0u))), (_GLF_IDENTITY(_GLF_IDENTITY(uint(2), clamp(uint(2), uint(2), uint(2))), ~ _GLF_IDENTITY((~ (uint(2))), (_GLF_IDENTITY((~ (uint(2))), max((~ (uint(2))), (_GLF_IDENTITY(~ (uint(2)), (~ (uint(2))) | (~ (uint(2)))))))) >> _GLF_IDENTITY(0u, (0u) >> 0u)))) >> (0u >> _GLF_IDENTITY(uint(3u), uint(3u))))) | (uint(2)))) | uint(_GLF_ZERO(0.0, injectionSwitch.x))), 4, 64, 4);
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         else
          {
          }
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) && true), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
            return;
          }
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))).x > injectionSwitch.y), _GLF_IDENTITY(false || ((injectionSwitch.x > injectionSwitch.y)), ! (! (false || ((injectionSwitch.x > injectionSwitch.y))))))), (bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && (false))), true && (! (_GLF_IDENTITY(false, true && (false))))))) || ((injectionSwitch.x > injectionSwitch.y))))) || false)), false || (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) && true), ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))) || ((injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY((bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))), ((bool(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false), false || ((injectionSwitch.x > injectionSwitch.y)))))) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x < injectionSwitch.y), bool(bvec2(! (injectionSwitch.x < injectionSwitch.y), false)))))))) || false))))))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
          }
         subgroupAll(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), true && _GLF_IDENTITY(((false)), bool(bool(((false)))))))));
        }
       else
        {
         do
          {
           atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, _GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(next_virtual_gid, (true ? next_virtual_gid : _GLF_FUZZED(workgroup_id))), 1u)), min(uint(uvec2(_GLF_IDENTITY(next_virtual_gid, (true ? next_virtual_gid : _GLF_FUZZED(workgroup_id))), 1u)), uint(uvec2(_GLF_IDENTITY(next_virtual_gid, (true ? next_virtual_gid : _GLF_IDENTITY(_GLF_FUZZED(workgroup_id), ~ (~ (_GLF_FUZZED(workgroup_id)))))), 1u)))))], uint(2), 4, 64, 4);
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, ~ _GLF_IDENTITY((~ (_injected_loop_counter)), int(int((~ (_injected_loop_counter)))))) < 1, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))) < 1), (_GLF_IDENTITY(! (_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY(~ (~ (_injected_loop_counter)), ~ (~ (~ (~ (_injected_loop_counter)))))) < 1), ! (! (! (_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY(~ (~ (_injected_loop_counter)), ~ (~ (_GLF_IDENTITY(~ (~ (_injected_loop_counter)), clamp(_GLF_IDENTITY(~ (~ (_injected_loop_counter)), clamp(~ (~ (_injected_loop_counter)), ~ (~ (_injected_loop_counter)), ~ (~ (_injected_loop_counter)))), ~ (~ (_injected_loop_counter)), ~ (~ (_injected_loop_counter)))))))) < 1))))) || false)))); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             do
              {
               subgroupAll(true);
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
             if(_GLF_DEAD(false))
              break;
            }
           if(_GLF_DEAD(false))
            continue;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))
            {
             return;
            }
           else
            {
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(5.0, -3041.2111)) : injectionSwitch)), injectionSwitch)).x > injectionSwitch.y))))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bool(false)))));
        }
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(false))
    break;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, (false) && true))))
    return;
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / cos(vec2(0.0, 0.0))))).y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       return;
      }
    }
   return;
  }
}
