#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(false, true)))) || false)));
   barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY((false), true && _GLF_IDENTITY(((false)), _GLF_IDENTITY(bool(bvec2(((false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (bool(bvec2(((false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && true))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) || false)))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    barrier();
  }
uint subgroup_size = 16;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, false || (true))))), (injectionSwitch.x < injectionSwitch.y))))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), false || (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false))))))))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     else
      {
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, bool(bvec3(false, true, true))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(false, bool(bvec3(false, true, true))), false), true, _GLF_IDENTITY(true, (true) || false)))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, bool(bvec3(false, true, true))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(false, bool(bvec3(false, true, true))), false), true, _GLF_IDENTITY(true, (true) || _GLF_IDENTITY(false, ! (! (false))))))))), true && (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, bool(bvec3(false, true, true))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(false, bool(bvec3(false, true, true))), false), true, _GLF_IDENTITY(true, (true) || false))))))))), true && (! (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, bool(bvec3(false, true, true))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(false, bool(bvec3(false, true, true))), false), true, _GLF_IDENTITY(true, (true) || false))))), (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, bool(bvec3(false, true, true))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(false, bool(bvec3(false, true, true))), false), true, _GLF_IDENTITY(true, (true) || false)))))) && true)), true && (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, bool(bvec3(false, true, true))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(false, bool(bvec3(false, true, true))), false), _GLF_IDENTITY(true, bool(bool(true))), _GLF_IDENTITY(true, (true) || false)))))))))))))))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, false || (_injected_loop_counter > 0))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       barrier();
      }
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               for(int _injected_loop_counter = (_GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) << (0 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), ~ (~ (int(1))))))), (int(1)) >> 0))), 0 ^ (_GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) << (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), ~ (_GLF_IDENTITY(~ (int(1)), max(_GLF_IDENTITY(~ (int(1)), (~ (int(1))) - 0), _GLF_IDENTITY(~ (int(1)), (~ (int(1))) | (~ (int(1))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), ~ (~ (int(1))))), (true ? _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), ~ (~ (int(1))))) : _GLF_FUZZED(-19334)))) | (_GLF_IDENTITY(int(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) << (0 << _GLF_IDENTITY(int(6), int(6))))) - 0)), _GLF_IDENTITY(int(1), ~ (~ (int(1))))))))), (int(1)) >> 0))), max((_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) << (0 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, 0 | (1)), _GLF_IDENTITY(1, (0 >> _GLF_IDENTITY(int(0), int(0))) | (_GLF_IDENTITY(1, int(ivec3(1, 1, 0)))))))), ~ (~ (int(1))))))), (int(1)) >> 0)), (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) << (0 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), ~ (~ (int(1))))))), (int(1)) >> 0)), min(int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) << (0 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), ~ _GLF_IDENTITY((~ (int(1))), min((~ (int(1))), (~ (int(1))))))))), (int(1)) >> 0)), int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) << (0 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), _GLF_IDENTITY(~ (~ (int(1))), int(ivec3(~ (~ (int(1))), 1, 1))))))), (int(1)) >> 0))))) | (int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(1, 1))) | (1))), _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) << (0 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), ~ (_GLF_IDENTITY(~ (int(1)), 0 | (~ (int(1))))))))), (int(1)) >> 0)))), max(int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(_GLF_IDENTITY(1, 1 * (1))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(ivec2(int(1), 1))), (int(1)) << (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) - 0)), _GLF_IDENTITY(int(1), ~ (_GLF_IDENTITY(~ (int(1)), min(~ (int(1)), ~ (int(1))))))))), _GLF_IDENTITY((int(1)) >> 0, ((int(1)) >> _GLF_IDENTITY(_GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, clamp(0, 0, 0)))), (0) / 1)) / 1))), int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) << (0 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), ~ (~ (int(1))))))), (int(1)) >> 0))))), (int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (_GLF_IDENTITY(true, true && (true)) ? _GLF_ONE(1.0, injectionSwitch.y) : _GLF_FUZZED(-6.4)))) << _GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | (1))) | 0)), (int(1)) << (0 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), ~ (~ (int(1))))))), (int(1)) >> 0))))))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter --)
                {
                 barrier();
                }
               for(int _injected_loop_counter = ((0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) | (int(6))))) & 81359); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter ++)
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false, false || (false)) || (_GLF_IDENTITY(false, (false) || false)))))
                    barrier();
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                    barrier();
                  }
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y), float(_GLF_FUZZED((-3.8 - 172.814))), bool(false)))))));
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec2(false, false)))))))
      barrier();
     barrier();
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize.x, (true ? gl_WorkGroupSize.x : _GLF_FUZZED(subgroup_id)));
 for(int _injected_loop_counter = ((0 >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(int(6), int(6)), 0, 1, 0), (ivec4(_GLF_IDENTITY(int(6), int(6)), 0, 1, 0)) ^ ivec4(0, 0, 0, 0)))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(ivec2(int(6), 0), ~ (~ (ivec2(int(6), 0))))))), (_GLF_IDENTITY(int(6), int(6))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) | (6))), int(6))) * 1)))))), (true ? _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, 0 + (6)))), (_GLF_IDENTITY(int(6), int(6))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(6), max(int(6), int(6))), int(6))))))), int(int(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) | (_GLF_IDENTITY(int(6), int(6))))))), ((_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), _GLF_IDENTITY((_GLF_IDENTITY(int(6), int(6))), (true ? _GLF_IDENTITY((_GLF_IDENTITY(int(6), int(6))), ((_GLF_IDENTITY(int(6), int(6)))) / 1) : _GLF_FUZZED(ivec3(-86946, -86757, -23948)[2]))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) | (_GLF_IDENTITY(int(6), int(6)))))))) - 0), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(_GLF_IDENTITY(_GLF_IDENTITY(6, ~ (~ (_GLF_IDENTITY(6, (6) | (6))))), (_GLF_IDENTITY(6, ~ (~ (_GLF_IDENTITY(6, (6) | (6)))))) | 0)))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (1 & 1) * _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) | 0)), clamp((_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) | 0)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) | 0)), int(ivec3((_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) | 0)), 1, 0))), (_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) | 0)))))))))), ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) - 0), (_GLF_IDENTITY(int(6), int(6))) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(6), (false ? _GLF_FUZZED(-46091) : int(6))), int(6)), (_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), min(_GLF_IDENTITY(int(6), int(6)), _GLF_IDENTITY(int(6), int(6))))) >> int(_GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_IDENTITY(_GLF_IDENTITY(int(6), min(_GLF_IDENTITY(int(6), min(int(6), int(6))), int(6))), _GLF_IDENTITY(int(6), (_GLF_IDENTITY(int(6), (int(6)) << 0)) | (int(6))))) | (_GLF_IDENTITY(int(6), int(6)))))))) - 0)) / 1)))) : _GLF_FUZZED(83278))) / 1)) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(_GLF_IDENTITY(-45229, 0 | (-45229))) : _GLF_IDENTITY(1, 0 | (1)))), 1))); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     for(int _injected_loop_counter = (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, int(_GLF_IDENTITY(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(7, max(_GLF_IDENTITY(7, 1 * (7)), 7)), 0, 0), (_GLF_IDENTITY(ivec3(7, 0, 0), ivec3(ivec3(ivec3(7, 0, 0))))) ^ ivec3(0, 0, 0)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(ivec3(20386, 94878, 14014)) : _GLF_IDENTITY(ivec3(_GLF_IDENTITY(7, (true ? _GLF_IDENTITY(7, max(7, 7)) : _GLF_FUZZED(53192))), 0, 0), (_GLF_IDENTITY(ivec3(7, 0, 0), ivec3(ivec3(ivec3(7, 0, 0))))) ^ ivec3(_GLF_IDENTITY(0, (0) << 0), 0, 0))))))), _GLF_IDENTITY(int(7), (int(7)) - 0)), max(0 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(7, _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(ivec3(7, 0, 0), (ivec3(7, 0, 0)) | (ivec3(7, 0, 0))), (_GLF_IDENTITY(_GLF_IDENTITY(ivec3(7, 0, 0), clamp(ivec3(7, 0, 0), ivec3(7, 0, 0), ivec3(7, 0, 0))), ivec3(ivec3(ivec3(7, 0, 0))))) ^ ivec3(0, 0, 0))), ~ (~ (_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(ivec3(7, 0, 0), (ivec3(7, 0, 0)) | (ivec3(7, 0, 0))), (_GLF_IDENTITY(_GLF_IDENTITY(ivec3(7, 0, 0), clamp(ivec3(7, 0, 0), ivec3(7, 0, 0), ivec3(7, 0, 0))), ivec3(ivec3(ivec3(7, 0, 0))))) ^ ivec3(0, 0, 0))), clamp(int(_GLF_IDENTITY(_GLF_IDENTITY(ivec3(7, 0, 0), (ivec3(7, 0, 0)) | (ivec3(7, 0, 0))), (_GLF_IDENTITY(_GLF_IDENTITY(ivec3(7, 0, 0), clamp(ivec3(7, 0, 0), ivec3(7, 0, 0), ivec3(7, 0, 0))), ivec3(ivec3(ivec3(7, 0, 0))))) ^ ivec3(0, 0, 0))), int(_GLF_IDENTITY(_GLF_IDENTITY(ivec3(7, 0, 0), (ivec3(7, 0, 0)) | (ivec3(7, 0, 0))), (_GLF_IDENTITY(_GLF_IDENTITY(ivec3(7, 0, 0), clamp(ivec3(7, 0, 0), ivec3(7, 0, 0), ivec3(7, 0, 0))), ivec3(ivec3(ivec3(7, 0, 0))))) ^ ivec3(0, 0, 0))), int(_GLF_IDENTITY(_GLF_IDENTITY(ivec3(7, 0, 0), (ivec3(7, 0, 0)) | (ivec3(7, 0, 0))), (_GLF_IDENTITY(_GLF_IDENTITY(ivec3(7, 0, 0), clamp(ivec3(7, 0, 0), ivec3(7, 0, 0), ivec3(7, 0, 0))), ivec3(ivec3(ivec3(7, 0, 0))))) ^ ivec3(0, 0, 0)))))))))), _GLF_IDENTITY(int(7), (int(7)) - 0)), (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(7, int(_GLF_IDENTITY(ivec3(7, 0, 0), (_GLF_IDENTITY(ivec3(7, 0, 0), ivec3(ivec3(ivec3(7, 0, 0))))) ^ ivec3(0, 0, 0))))), _GLF_IDENTITY(_GLF_IDENTITY(int(7), min(_GLF_IDENTITY(int(7), ~ (~ (int(7)))), int(7))), (int(7)) - 0)), max(_GLF_IDENTITY(int(_GLF_IDENTITY(7, int(_GLF_IDENTITY(ivec3(7, 0, 0), (_GLF_IDENTITY(ivec3(7, 0, 0), ivec3(ivec3(ivec3(7, 0, 0))))) ^ ivec3(0, 0, 0))))), _GLF_IDENTITY(int(7), (int(7)) - 0)), _GLF_IDENTITY(int(_GLF_IDENTITY(7, int(_GLF_IDENTITY(ivec3(7, 0, 0), (_GLF_IDENTITY(ivec3(7, 0, 0), ivec3(ivec3(ivec3(7, 0, 0))))) ^ ivec3(0, 0, 0))))), _GLF_IDENTITY(int(7), (int(7)) - 0))))) - 0), 0 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, int(_GLF_IDENTITY(ivec3(7, 0, 0), (_GLF_IDENTITY(ivec3(7, 0, 0), ivec3(ivec3(_GLF_IDENTITY(ivec3(7, 0, 0), (ivec3(7, 0, 0)) | (ivec3(7, 0, 0))))))) ^ ivec3(0, 0, 0))))), _GLF_IDENTITY(int(7), (int(7)) - 0))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) + 0)), (true ? _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), _GLF_IDENTITY((int(5)), ~ (~ (_GLF_IDENTITY((int(5)), ((int(5))) >> 0)))) + 0)) : _GLF_FUZZED((ivec2(-58230, -63130) & ivec2(-98015, 24756)).g)))), (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) + 0))), bool(bool(_GLF_IDENTITY(_injected_loop_counter < (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(5), int(5))), ((1 << _GLF_IDENTITY(int(5), int(5)))) / 1) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) + 0))), bool(bvec4(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) + 0))), true, false, false)))))), (_GLF_IDENTITY(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(5, 0 | (5))), _GLF_IDENTITY(int(5), (int(5)) + 0))), ! (! (_injected_loop_counter < ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(_GLF_IDENTITY(5, (true ? _GLF_IDENTITY(5, min(5, 5)) : _GLF_IDENTITY(_GLF_FUZZED(_injected_loop_counter), (_GLF_FUZZED(_injected_loop_counter)) / 1))))) + 0))))))) && _GLF_IDENTITY(true, true && (true)))) || false)); _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter --)
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), false), _GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), false), true, true)), bvec2(bvec2(bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), false), true, true))))))), ! (_GLF_IDENTITY(! (bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), false))), (! (bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), false)))) && true)))))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           barrier();
          }
        }
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
        barrier();
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))) ? _GLF_FUZZED(19997) : int(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(mat4x2(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0))), (_GLF_ZERO(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, float(vec4(0.0, abs(1.0), abs(0.0), 0.0))))), injectionSwitch.x)) / 1.0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             barrier();
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (1) << 0)); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 for(int _injected_loop_counter = ((0 << _GLF_IDENTITY(int(3), int(3))) << _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                  {
                   for(int _injected_loop_counter = (0 & (-54814 / -35149)); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter ++)
                    {
                     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), _GLF_IDENTITY(false, false || (false)), false, false)), ! (! (bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), _GLF_IDENTITY(false, false || (false)), false, false)))))))
                      barrier();
                    }
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   do
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                          barrier();
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                            {
                             barrier();
                            }
                           else
                            {
                             if(_GLF_WRAPPED_IF_TRUE(true))
                              {
                               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                barrier();
                              }
                             else
                              {
                              }
                            }
                           if(_GLF_DEAD(false))
                            barrier();
                          }
                        }
                       else
                        {
                        }
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec3(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false)))), bool(bvec4(bool(_GLF_IDENTITY(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec3(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false)))), true, false, true))))))
                        barrier();
                       do
                        {
                         barrier();
                         if(_GLF_DEAD(false))
                          {
                           for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_injected_loop_counter != 0, false), bvec2(bvec3(bvec2(_injected_loop_counter != 0, false), false)))), ! (! (bool(_GLF_IDENTITY(bvec2(_injected_loop_counter != 0, false), bvec2(bvec3(bvec2(_injected_loop_counter != 0, false), false))))))))); _injected_loop_counter --)
                            {
                             do
                              {
                               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                barrier();
                               barrier();
                               if(_GLF_DEAD(false))
                                barrier();
                              }
                             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                            }
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).x, clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(vec4(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))), exp(_GLF_IDENTITY(0.0, (0.0) * 1.0)), 0.0))), max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).x, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).x)) > injectionSwitch.y), bool(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).x, clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(vec4(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))), exp(_GLF_IDENTITY(0.0, (0.0) * 1.0)), 0.0))), max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).x, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).x)) > injectionSwitch.y), bool(bvec4((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).x, clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(vec4(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))), exp(_GLF_IDENTITY(0.0, (0.0) * 1.0)), 0.0))), max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).x, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).x)) > injectionSwitch.y), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))), true, false))))));
                  }
                }
              }
             else
              {
              }
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     else
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (true ? int(3) : _GLF_FUZZED(18147))))) >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter ++)
        {
         do
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
    }
   else
    {
    }
  }
 else
  {
  }
 uint workgroup_base = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (_GLF_IDENTITY(workgroup_size, (workgroup_size) * 1u)) | (workgroup_size)), 0u | (workgroup_size)) * workgroup_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, false, false)))))), false || (_GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, false, false)))))), false || ((_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, false, false)))))))))) || false)))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, bool(bool(false))), true, true))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY(_GLF_FUZZED(6.1), (true ? _GLF_FUZZED(6.1) : _GLF_FUZZED(dot(asin(vec3(-139.370, 9588.6800, -5.8)), vec3(-42.00, 164.625, -893.692))))), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-8.2)), bvec2(true, false))).x))).y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           barrier();
          }
        }
       else
        {
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), true, false, false))))
        barrier();
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_IF_FALSE(false), false, true), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_IF_FALSE(false), false, _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (true)))))), _GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_WRAPPED_IF_FALSE(false), false, true))), bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_WRAPPED_IF_FALSE(false), false, true))), bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_WRAPPED_IF_FALSE(false), false, true))))))), _GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_WRAPPED_IF_FALSE(false), false, true))), bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_WRAPPED_IF_FALSE(false), false, true))))))))), bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_WRAPPED_IF_FALSE(false), false, true))), bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_WRAPPED_IF_FALSE(false), false, true))))))))))))))))))))))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
                barrier();
               for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
              }
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))[1])).x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(_GLF_IDENTITY(float(_GLF_FUZZED(6.9)), 1.0 * (float(_GLF_FUZZED(6.9)))), float(injectionSwitch.y), bool(true)))))) || _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), true && (! ((injectionSwitch.x > injectionSwitch.y)))), ! (! (! ((injectionSwitch.x > injectionSwitch.y))))))))))))))
        barrier();
      }
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-339.625), _GLF_FUZZED(-9.8)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bvec2(! (true), true)))))))).y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-339.625), _GLF_FUZZED(-9.8)), vec2((injectionSwitch)[0], (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)))[1]), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], (true ? (injectionSwitch)[0] : _GLF_FUZZED(-1.4))), (injectionSwitch)[1]), vec2(_GLF_FUZZED(-2.8), _GLF_FUZZED(-479.113)), bvec2(false, false))).y)) && (true), (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y)) && (true)) && true), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true))))), _GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), (_GLF_IDENTITY(_GLF_IDENTITY(true, ! _GLF_IDENTITY((! (true)), _GLF_IDENTITY(bool(bvec4((! (true)), true, false, true)), (_GLF_IDENTITY(bool(bvec4((! (true)), true, false, true)), bool(bool(bool(bvec4((! (true)), true, false, true)))))) && true))), ! (! (_GLF_IDENTITY(true, ! (! (true))))))) || false)), _GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_IDENTITY(true, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], (true ? (injectionSwitch)[0] : _GLF_FUZZED(-1.4))), (injectionSwitch)[1]), vec2(_GLF_FUZZED(-2.8), _GLF_FUZZED(-479.113)), bvec2(false, false))).y)) && (true), (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y)) && (true)) && true), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true))))), _GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), (_GLF_IDENTITY(_GLF_IDENTITY(true, ! _GLF_IDENTITY((! (true)), _GLF_IDENTITY(bool(bvec4((! (true)), true, false, true)), (_GLF_IDENTITY(bool(bvec4((! (true)), true, false, true)), bool(bool(bool(bvec4((! (true)), true, false, true)))))) && true))), ! (! (_GLF_IDENTITY(true, ! (! (true))))))) || false)), false, false)), bvec2(bvec3(bvec2(bvec4(bvec2(_GLF_IDENTITY(true, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], (true ? (injectionSwitch)[0] : _GLF_FUZZED(-1.4))), (injectionSwitch)[1]), vec2(_GLF_FUZZED(-2.8), _GLF_FUZZED(-479.113)), bvec2(false, false))).y)) && (true), (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y)) && (true)) && true), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true))))), _GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), (_GLF_IDENTITY(_GLF_IDENTITY(true, ! _GLF_IDENTITY((! (true)), _GLF_IDENTITY(bool(bvec4((! (true)), true, false, true)), (_GLF_IDENTITY(bool(bvec4((! (true)), true, false, true)), bool(bool(bool(bvec4((! (true)), true, false, true)))))) && true))), ! (! (_GLF_IDENTITY(true, ! (! (true))))))) || false)), false, false)), true)))))).y)))))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
             barrier();
            }
          }
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bool(false)))))))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)), false || (_GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)), (bool(bvec2(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, true))) && _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(true, ! (! (true))))))), ! (! (bool(_GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(true, ! (! (true)))))))))))))))))) || (true))))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = (0 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 barrier();
                }
              }
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true), (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec2(injectionSwitch)), max(_GLF_IDENTITY(vec2(vec2(injectionSwitch)), vec2(0.0, 0.0) + (vec2(vec2(injectionSwitch)))), vec2(vec2(injectionSwitch))))).y)), false)))))))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                  {
                   barrier();
                  }
                }
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
                }
               for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (-72711 & 0)); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, bool(bvec2(false, false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false || (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), true && (_GLF_IDENTITY(! (false), bool(bool(! (false))))))))))))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(false, true, true)))) || false)))
                    barrier();
                   do
                    {
                     do
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                }
               do
                {
                 do
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                   do
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                      barrier();
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       do
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   else
                    {
                    }
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(false))
                barrier();
              }
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), (true && (false)) || false))) && true), _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(true, ! (! (true))), false)), false || (bool(bvec2(_GLF_IDENTITY(true, ! (! (true))), false))))) && (false))) && true)), (! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) && true))) || false)), ! (! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(true, ! (! (true))), false)), false || (bool(bvec2(_GLF_IDENTITY(true, ! (! (true))), false))))), ! (! (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! (! (true)))))), false)), false || (bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), ! (! (_GLF_IDENTITY(true, ! (! (true)))))), false)))))))) && (false))) && true)), (! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) && true))) || false))))))), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) && true)), false)), true && (bool(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), ! (! ((false)))))) && true)), false))))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   do
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 barrier();
                }
              }
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(2, (2) | (2))), int(2)), (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(2, (2) | (2))), int(2)), max(_GLF_IDENTITY(int(_GLF_IDENTITY(2, (2) | (2))), int(2)), _GLF_IDENTITY(int(_GLF_IDENTITY(2, (2) | (2))), int(2))))) - 0))); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                barrier();
               do
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))) && true))));
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 do
                  {
                   for(int _injected_loop_counter = (1 ^ 0); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))) > (0 << _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter --)
                    {
                     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(true), true, false)), bool(bvec4(_GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(true), true, false)), (bool(bvec3(_GLF_WRAPPED_IF_TRUE(true), true, false))) && true), true, true, true)))))
                      {
                       barrier();
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
                {
                 barrier();
                }
               else
                {
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))))
                barrier();
               barrier();
              }
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               do
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             else
              {
               if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec2(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), (bool(_GLF_IDENTITY(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec2(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))) || false)))) || _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false))))))) || false), true && (_GLF_DEAD(false))))
                barrier();
               for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                }
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, true), _GLF_IDENTITY(bvec3(bvec4(bvec3(false, false, true), true)), bvec3(bvec3(bvec3(bvec4(bvec3(false, false, true), true)))))))), (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y)), false)))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (! (! (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && _GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y))), bool(bvec3(! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y))), false, false)))))))))))), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (! (! (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && _GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y))), bool(bvec3(! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y))), false, false))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y))), bool(bvec3(! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y))), false, false))))), true && (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y))), bool(bvec3(! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y))), false, false)))))))), (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y))), bool(bvec3(! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y))), false, false))))), true && (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y))), bool(bvec3(! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y))), false, false)))))))), ! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y))), bool(bvec3(! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y))), false, false))))), true && (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], float(mat2x3(injectionSwitch[0], 1.0, 0.0, 0.0, 0.0, 0.0))), injectionSwitch[1]))) * mat2(1.0)).y))), bool(bvec3(! (_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))) / vec2(1.0, 1.0)).y, false || (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y))), false, false)))))))))))) || false)))))))))))))))))))
                barrier();
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) | int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(_GLF_IDENTITY(1.0, max(1.0, 1.0)), injectionSwitch.y))); _injected_loop_counter ++)
              {
               barrier();
              }
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               barrier();
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec3(bvec2(false, true), true)))))))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                    barrier();
                  }
                }
              }
             else
              {
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false)))));
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
      {
       barrier();
      }
     else
      {
      }
    }
   else
    {
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) >> 0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(_GLF_IDENTITY(int(0), (int(0)) - 0), 0 ^ (_GLF_IDENTITY(int(0), (int(0)) - 0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec4((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0) > injectionSwitch.y), true, false, true)), bool(bvec2(bool(bvec4((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0) > injectionSwitch.y), true, false, true)), false)))))))
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), false || (_GLF_WRAPPED_IF_FALSE(false))))
          {
          }
         else
          {
           barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true)))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               barrier();
              }
             else
              {
              }
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
            }
          }
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
        }
      }
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false)))))))))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false)))))))))), true && (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false)))))))))))))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec4(_GLF_WRAPPED_IF_FALSE(false), true, true, true))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec4(_GLF_WRAPPED_IF_FALSE(false), true, true, _GLF_IDENTITY(true, ! (! (true))))))))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           barrier();
          }
        }
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false))))))))))
        barrier();
       barrier();
      }
    }
   else
    {
    }
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[_GLF_IDENTITY(0, min(0, 0))], injectionSwitch[1])).y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false)))))
        barrier();
       barrier();
      }
    }
   else
    {
    }
  }
 uint virtual_gid = _GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base) - 0u, uint(_GLF_IDENTITY(uvec2((workgroup_base) - 0u, 0u), uvec2(uvec2(uvec2((workgroup_base) - 0u, 0u)))))))) >> 0u, ((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, 1u * (workgroup_base)), (workgroup_base) - 0u)) >> 0u) * 1u)) + subgroup_id * subgroup_size + subgroup_local_id;
 do
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0))) > injectionSwitch.y))))
        barrier();
      }
    }
   for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(true, bool(bvec4(true, true, true, true))) && (true))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false)))))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_injected_loop_counter --, ~ (~ (_injected_loop_counter --))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
              barrier();
             barrier();
            }
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), max(int(4), int(4))), int(4))) << _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter --)
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(_GLF_IDENTITY(mat3(injectionSwitch.x, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 1.0), transpose(transpose(mat3(injectionSwitch.x, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 1.0))))), (float(_GLF_IDENTITY(mat3(injectionSwitch.x, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 1.0), transpose(_GLF_IDENTITY(transpose(mat3(injectionSwitch.x, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 1.0)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(mat3(848.404, 2804.5511, _GLF_IDENTITY(-631.300, float(mat4(-631.300, 0.0, sin(0.0), 1.0, sin(0.0), 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 1.0), vec3(determinant(mat2(0.0, 0.0, 1.0, 0.0)), 1.0, 0.0)), dot(vec3(1.0, 0.0, 1.0), vec3(determinant(mat2(0.0, 0.0, 1.0, 0.0)), 1.0, 0.0))), 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0)), 0.0, 0.0, 1.0, sin(0.0)))), -456.051, 69.90, -7.7, -6797.2585, 2.3, -35.65)) : transpose(mat3(injectionSwitch.x, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 1.0)))))))) - 0.0)) > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  {
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     do
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                         for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(8), int(8))); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                          {
                           barrier();
                          }
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   else
                    {
                    }
                  }
                 else
                  {
                  }
                 barrier();
                }
              }
            }
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter))) - 0))) > int(_GLF_ZERO(0.0, injectionSwitch.x)), ! (! (_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)), min(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)), _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)), (_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter))) + 0))), _GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)), _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)), min(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)), _GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter))))))) - 0))) > int(_GLF_ZERO(0.0, injectionSwitch.x)))))); _injected_loop_counter --)
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
    }
   else
    {
    }
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), true && ((injectionSwitch.x < injectionSwitch.y))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
        barrier();
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     barrier();
    }
  }
 else
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (_GLF_IDENTITY(int(5), (int(5)) | (int(5)))) ^ 0)), (1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (_GLF_IDENTITY(int(5), (int(5)) | (int(5)))) ^ 0))) / 1)) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (_GLF_IDENTITY(int(5), (int(5)) ^ 0)) ^ 0)))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(7.2)), bool(false))) > injectionSwitch.y))))
    barrier();
  }
 uint next_virtual_gid = workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u) + ((_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)))) + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(1, 1))) / ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))))) % subgroup_size);
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       barrier();
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec2((injectionSwitch.x > injectionSwitch.y), true), bvec2(bvec4(bvec2((injectionSwitch.x > injectionSwitch.y), true), true, true)))))), true && (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec2((injectionSwitch.x > injectionSwitch.y), true), bvec2(bvec4(bvec2((injectionSwitch.x > injectionSwitch.y), true), true, true)))))), (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec2((injectionSwitch.x > injectionSwitch.y), true), bvec2(bvec4(bvec2((injectionSwitch.x > injectionSwitch.y), true), true, true))))))) || false))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(vec3(4.2, 0.5, -6615.5919)[1])))))); _injected_loop_counter ++)
        {
         barrier();
        }
      }
     barrier();
    }
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true)))))
        barrier();
       barrier();
      }
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((false), bool(bool(_GLF_IDENTITY((false), ! (! ((false))))))) || false)))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((true), bool(bvec3(_GLF_IDENTITY((true), (_GLF_IDENTITY((true), bool(bvec2((true), true)))) || false), false, true))), bool(bvec2(_GLF_IDENTITY((true), ! (! ((true)))), false))), bool(bvec4((true), _GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), bool(bvec3(_GLF_IDENTITY(true, false || (true)), true, false))), true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false, true))))), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(false || _GLF_IDENTITY((true), bool(bvec4(_GLF_IDENTITY((true), true && (_GLF_IDENTITY((true), ! (! ((_GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), true, false, true))), (_GLF_IDENTITY(false || _GLF_IDENTITY((true), bool(bvec4((true), true, _GLF_IDENTITY(false, (false) && true), true))), (false || _GLF_IDENTITY((true), bool(bvec4((true), true, false, true)))) || false)) || false))), bool(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || _GLF_IDENTITY((true), bool(bvec4((true), true, false, true))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec3(bvec4(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || _GLF_IDENTITY((true), bool(bvec4((true), true, false, true))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), true))))), bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(false || _GLF_IDENTITY((true), bool(bvec4(_GLF_IDENTITY((true), true && (_GLF_IDENTITY((_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, false || (true))))), ! (! ((true)))))), true, false, true))), (_GLF_IDENTITY(false || _GLF_IDENTITY((true), bool(bvec4((true), true, false, true))), (false || _GLF_IDENTITY((true), bool(bvec4((true), true, false, true)))) || false)) || false))), bool(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || _GLF_IDENTITY((true), bool(bvec4((true), true, false, true))))), _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y))))), true), bvec3(bvec4(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || _GLF_IDENTITY((true), bool(bvec4((true), true, false, true))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), true))))))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 barrier();
                }
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           do
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
        {
         barrier();
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (0 ^ 1)); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 do
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(1.0, 1.0), max(_GLF_IDENTITY(vec2(1.0, 1.0), clamp(_GLF_IDENTITY(vec2(1.0, 1.0), (vec2(1.0, 1.0)) - vec2(0.0, 0.0)), vec2(1.0, 1.0), _GLF_IDENTITY(vec2(1.0, 1.0), clamp(vec2(1.0, 1.0), vec2(1.0, 1.0), vec2(1.0, 1.0))))), _GLF_IDENTITY(_GLF_IDENTITY(vec2(1.0, 1.0), vec2(mat4x2(vec2(1.0, 1.0), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(vec2(1.0, 1.0), vec2(mat4x2(vec2(1.0, 1.0), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0))) : _GLF_FUZZED(vec2(58.72, -6.4)))))) * (injectionSwitch)).x > injectionSwitch.y)), false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x > injectionSwitch.y))))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! _GLF_IDENTITY((! (false)), bool(_GLF_IDENTITY(bvec2((! (false)), true), bvec2(bvec3(bvec2((! (false)), true), true))))), bool(bvec4(! (! (false)), false, false, false)))))))))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)), mix(float(_GLF_FUZZED(float(120054u))), float(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-3.8)), _GLF_IDENTITY(float(injectionSwitch.x), min(_GLF_IDENTITY(float(injectionSwitch.x), max(float(injectionSwitch.x), float(injectionSwitch.x))), float(injectionSwitch.x))), bool(true)))), bool(true))), max(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED((7.5 - vec2(-8.8, -8.6))))).x, injectionSwitch.x)) > injectionSwitch.y))))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false)))))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         do
          {
           if(_GLF_DEAD(false))
            barrier();
           buf[virtual_gid] = 1;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || _GLF_IDENTITY(false, bool(bvec4(false, false, true, true))))))));
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = (1 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) - 0.0), injectionSwitch[1])).x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             do
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
              barrier();
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = ((_GLF_IDENTITY((1 | 0) << _GLF_IDENTITY(int(1), int(1)), ((1 | 0) << _GLF_IDENTITY(int(1), int(1))) | ((1 | 0) << _GLF_IDENTITY(int(1), int(1))))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)) || false)) || false); _injected_loop_counter --)
                {
                 for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (_GLF_IDENTITY(int(4), int(4))) >> 0)), 0 + ((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (_GLF_IDENTITY(int(4), int(4))) >> 0)))), ~ (~ ((0 << _GLF_IDENTITY(int(4), int(4)))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, min(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)), _GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> (79288 & 0)))) < 1); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       barrier();
                      }
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     do
                      {
                       barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
                      barrier();
                    }
                   else
                    {
                     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true))
                      {
                       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                        {
                         do
                          {
                           barrier();
                          }
                         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
                        }
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       do
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          {
                           for(int _injected_loop_counter = _GLF_IDENTITY((0 ^ (0 | 0)), ((0 ^ (0 | 0))) | int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                            {
                             if(_GLF_DEAD(false))
                              barrier();
                             if(_GLF_DEAD(false))
                              barrier();
                            }
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                           barrier();
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y))))
                      barrier();
                    }
                  }
                }
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             barrier();
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) / 1)), clamp(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) / 1)), _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) / 1)), _GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) / 1)), max(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) / 1)), _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) / 1))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), int(_GLF_ONE(1.0, injectionSwitch.y)) * (int(3)))), (_GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), int(_GLF_ONE(1.0, injectionSwitch.y)) * (int(3)))), (_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), int(_GLF_ONE(1.0, injectionSwitch.y)) * (int(3))))) | 0)) - 0))); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       barrier();
      }
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, ~ (~ (0))))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(37341) : ~ (_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, ~ (~ (0))))))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         barrier();
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)), injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec4(! _GLF_IDENTITY((false), false || ((false))), false, true, false))))), (injectionSwitch.x > injectionSwitch.y)))))))), (! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)), injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec4(_GLF_IDENTITY(! _GLF_IDENTITY((false), false || ((false))), (! _GLF_IDENTITY((false), false || ((false)))) && true), false, true, false))))), (injectionSwitch.x > injectionSwitch.y))))))))) || false)))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 >> _GLF_IDENTITY(int(7), int(7))) & 12074)); _injected_loop_counter --)
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, false || (false)), false, true, false)))));
          }
        }
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             barrier();
            }
           else
            {
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), true && (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), ! (! (_GLF_IDENTITY(false, true && (false)))))))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false))))))))))
        barrier();
       do
        {
         buf[next_virtual_gid] = _GLF_IDENTITY(2, (2) | ((0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(8, (_GLF_IDENTITY(8, _GLF_IDENTITY(max(8, 8), min(max(8, 8), _GLF_IDENTITY(max(8, 8), min(max(8, 8), max(8, 8))))))) >> 0)), _GLF_IDENTITY(int(8), min(_GLF_IDENTITY(int(8), (int(8)) << 0), int(8)))), (_GLF_IDENTITY(_GLF_IDENTITY(int(8), int(8)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(int(8), int(8)) : _GLF_FUZZED(min(_GLF_IDENTITY(81207, (_GLF_IDENTITY(81207, 0 + (81207))) << 0), 42350))))) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(8), int(int(_GLF_IDENTITY(int(8), (false ? _GLF_FUZZED(1158) : int(8)))))), int(_GLF_IDENTITY(_GLF_IDENTITY(8, (8) << 0), (8) >> 0))), clamp(_GLF_IDENTITY(int(8), int(_GLF_IDENTITY(8, ~ (~ (8))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(8), int(8)), (_GLF_IDENTITY(int(8), int(8))) | (_GLF_IDENTITY(int(8), int(8)))), (_GLF_IDENTITY(int(8), int(8))) / 1), (_GLF_IDENTITY(int(8), int(_GLF_IDENTITY(8, ~ (~ (_GLF_IDENTITY(8, (8) | (8)))))))) >> _GLF_IDENTITY(0, (0 >> _GLF_IDENTITY(int(0), int(0))) | (_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, (0) | (0)), 0))))), _GLF_IDENTITY(int(8), int(8)))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(8), int(int(_GLF_IDENTITY(int(8), (false ? _GLF_FUZZED(1158) : int(8)))))), int(_GLF_IDENTITY(_GLF_IDENTITY(8, (8) << 0), (8) >> 0))), clamp(_GLF_IDENTITY(int(8), int(_GLF_IDENTITY(8, ~ (~ (8))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(8), int(8)), (_GLF_IDENTITY(int(8), int(8))) | (_GLF_IDENTITY(int(8), int(8)))), (_GLF_IDENTITY(int(8), int(8))) / 1), (_GLF_IDENTITY(int(8), int(_GLF_IDENTITY(8, ~ (~ (_GLF_IDENTITY(8, (8) | (8)))))))) >> _GLF_IDENTITY(0, (0 >> _GLF_IDENTITY(int(0), int(0))) | (_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, (0) | (0)), 0))))), _GLF_IDENTITY(int(8), int(8)))), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(8), int(int(_GLF_IDENTITY(int(8), (false ? _GLF_FUZZED(1158) : int(8)))))), int(_GLF_IDENTITY(_GLF_IDENTITY(8, (8) << 0), (8) >> 0))), clamp(_GLF_IDENTITY(int(8), int(_GLF_IDENTITY(8, ~ (~ (8))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(8), int(8)), (_GLF_IDENTITY(int(8), int(8))) | (_GLF_IDENTITY(int(8), int(8)))), (_GLF_IDENTITY(int(8), int(8))) / 1), (_GLF_IDENTITY(int(8), int(_GLF_IDENTITY(8, ~ (~ (_GLF_IDENTITY(8, (8) | (8)))))))) >> _GLF_IDENTITY(0, (0 >> _GLF_IDENTITY(int(0), int(0))) | (_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, (0) | (0)), 0))))), _GLF_IDENTITY(int(8), int(8))))))), min(~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(8), int(int(_GLF_IDENTITY(int(8), (false ? _GLF_FUZZED(1158) : int(8)))))), int(_GLF_IDENTITY(_GLF_IDENTITY(8, (8) << 0), (8) >> 0))), clamp(_GLF_IDENTITY(int(8), int(_GLF_IDENTITY(8, ~ (~ (8))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(8), int(8)), (_GLF_IDENTITY(int(8), int(8))) | (_GLF_IDENTITY(int(8), int(8)))), (_GLF_IDENTITY(int(8), int(8))) / 1), (_GLF_IDENTITY(int(8), int(_GLF_IDENTITY(8, ~ (~ (_GLF_IDENTITY(8, (8) | (8)))))))) >> _GLF_IDENTITY(0, (0 >> _GLF_IDENTITY(int(0), int(0))) | (_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, (0) | (0)), 0))))), _GLF_IDENTITY(int(8), int(8)))), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(8), int(int(_GLF_IDENTITY(int(8), (false ? _GLF_FUZZED(1158) : int(8)))))), int(_GLF_IDENTITY(_GLF_IDENTITY(8, (8) << 0), (8) >> 0))), clamp(_GLF_IDENTITY(int(8), int(_GLF_IDENTITY(8, ~ (~ (8))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(8), int(8)), (_GLF_IDENTITY(int(8), int(8))) | (_GLF_IDENTITY(int(8), int(8)))), (_GLF_IDENTITY(int(8), int(8))) / 1), (_GLF_IDENTITY(int(8), int(_GLF_IDENTITY(8, ~ (~ (_GLF_IDENTITY(8, (8) | (8)))))))) >> _GLF_IDENTITY(0, (0 >> _GLF_IDENTITY(int(0), int(0))) | (_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, (0) | (0)), 0))))), _GLF_IDENTITY(int(8), int(8))))))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(8), int(int(_GLF_IDENTITY(int(8), (false ? _GLF_FUZZED(1158) : int(8)))))), int(_GLF_IDENTITY(_GLF_IDENTITY(8, (8) << 0), (8) >> 0))), clamp(_GLF_IDENTITY(int(8), int(_GLF_IDENTITY(8, ~ (~ (8))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(8), int(8)), (_GLF_IDENTITY(int(8), int(8))) | (_GLF_IDENTITY(int(8), int(8)))), (_GLF_IDENTITY(int(8), int(8))) / 1), (_GLF_IDENTITY(int(8), int(_GLF_IDENTITY(8, ~ (~ (_GLF_IDENTITY(8, (8) | (8)))))))) >> _GLF_IDENTITY(0, (0 >> _GLF_IDENTITY(int(0), int(0))) | (_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, (0) | (0)), 0))))), _GLF_IDENTITY(int(8), int(8)))), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(8), int(int(_GLF_IDENTITY(int(8), (false ? _GLF_FUZZED(1158) : int(8)))))), int(_GLF_IDENTITY(_GLF_IDENTITY(8, (8) << 0), (8) >> 0))), clamp(_GLF_IDENTITY(int(8), int(_GLF_IDENTITY(8, ~ (~ (8))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(8), int(8)), (_GLF_IDENTITY(int(8), int(8))) | (_GLF_IDENTITY(int(8), int(8)))), (_GLF_IDENTITY(int(8), int(8))) / 1), (_GLF_IDENTITY(int(8), int(_GLF_IDENTITY(8, ~ (~ (_GLF_IDENTITY(8, (8) | (8)))))))) >> _GLF_IDENTITY(0, (0 >> _GLF_IDENTITY(int(0), int(0))) | (_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, (0) | (0)), 0))))), _GLF_IDENTITY(int(8), int(8))))))))))), int(int(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(8), int(int(_GLF_IDENTITY(_GLF_IDENTITY(int(8), (false ? _GLF_FUZZED(1158) : int(8))), (_GLF_IDENTITY(int(8), (false ? _GLF_FUZZED(1158) : int(8)))) << 0)))), int(_GLF_IDENTITY(_GLF_IDENTITY(8, (8) | (8)), (8) >> 0))), clamp(_GLF_IDENTITY(int(8), int(8)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(8, ~ (~ (8)))), int(8)), (_GLF_IDENTITY(int(8), int(8))) >> _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (1 & 1) * (0))) | (_GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, 0 + (0)), 0, 0)))) >> _GLF_IDENTITY(int(0), int(0))) | (0))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(8), int(8)), _GLF_IDENTITY((_GLF_IDENTITY(int(8), int(8))) >> _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (1 & 1) * (0))) | (_GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, 0 + (0)), 0, 0)))) >> _GLF_IDENTITY(int(0), int(0))) | (0)), (true ? (_GLF_IDENTITY(int(8), int(8))) >> _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (_GLF_IDENTITY(1, (1) + 0) & 1) * (0))) | (_GLF_IDENTITY(0, _GLF_IDENTITY(clamp(_GLF_IDENTITY(0, 0 + (0)), 0, 0), ~ (~ (clamp(_GLF_IDENTITY(0, 0 + (0)), 0, 0))))))) >> _GLF_IDENTITY(int(0), int(0))) | (0)) : _GLF_FUZZED(-19757)))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(int(8), int(8)), (_GLF_IDENTITY(int(8), int(8))) >> _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (1 & 1) * (0))) | (_GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, 0 + (0)), 0, 0)))) >> _GLF_IDENTITY(int(0), int(0))) | (0)))) ^ 0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-97149) : (_GLF_IDENTITY(_GLF_IDENTITY(int(8), int(8)), (_GLF_IDENTITY(int(8), int(8))) >> _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (1 & 1) * (0))) | (_GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, _GLF_IDENTITY(0 + (0), (0 + (0)) | (0 & 77258))), 0, 0)))) >> _GLF_IDENTITY(int(0), int(0))) | (0)))) ^ 0)))))), _GLF_IDENTITY(int(_GLF_IDENTITY(8, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(findLSB(-64464)) : 8))), int(8)))))))))) & (- 99202)));
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = _GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, (false ? _GLF_FUZZED(-31266) : 0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, 0 ^ (_injected_loop_counter)) > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               barrier();
              }
             else
              {
              }
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             do
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           else
            {
            }
          }
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((_GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, _GLF_IDENTITY((1) << 0, (_GLF_IDENTITY((1) << 0, ((1) << 0) - 0)) * ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))))))) << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(_GLF_IDENTITY(int(0), 1 * (_GLF_IDENTITY(int(0), (int(0)) - 0))), _GLF_IDENTITY(int(ivec4(int(0), 1, 0, 1)), (int(ivec4(int(0), 1, 0, 1))) >> 0))))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false, true)))))
            barrier();
           if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(false)))) || false), bool(bool(_GLF_DEAD(false)))), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bvec4(_GLF_IDENTITY(! (true), true && (! (true))), true, true, true))))), false), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(false)))) || false), bool(bool(_GLF_DEAD(false)))), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bvec4(_GLF_IDENTITY(! (true), true && (! (true))), true, true, true))))), false), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(false)))) || false), bool(bool(_GLF_DEAD(false)))), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bvec4(_GLF_IDENTITY(! (true), true && (! (true))), true, true, true))))), false), false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))), true, false)), bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))), true, false))))))))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4x2(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 0.0, 1.0, 1.0, 1.0, 0.0, 1.0), (mat4x2(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 0.0, 1.0, 1.0, 1.0, 0.0, 1.0)) * mat4(1.0)))).y))))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       barrier();
                      }
                     else
                      {
                      }
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                }
              }
             else
              {
              }
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), (bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))) && true)))), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false))), true && (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))))))
            {
            }
           else
            {
             barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
              barrier();
            }
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(3.7, -39.65)) : injectionSwitch)), _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), injectionSwitch)), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))), injectionSwitch)))), (injectionSwitch) + vec2(0.0, 0.0)), _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), injectionSwitch)))).x, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(_GLF_IDENTITY(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), (false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), 0.0)), injectionSwitch)), (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(_GLF_IDENTITY(0.0, float(mat2x4(0.0, _GLF_ZERO(0.0, injectionSwitch.x), sin(0.0), 0.0, 1.0, 0.0, determinant(mat4(0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, log(1.0), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec4(0.0, 0.0, determinant(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0), vec4(1.0, sqrt(1.0), 0.0, 1.0)), dot(vec4(0.0, 0.0, determinant(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0), vec4(1.0, sqrt(1.0), 0.0, 1.0)))))), clamp(0.0, 0.0, 0.0)))), 0.0)), injectionSwitch))) * mat2(1.0)).x) * 1.0, clamp(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), 0.0)), injectionSwitch)).x) * 1.0, _GLF_IDENTITY(_GLF_IDENTITY(float(mat2x3((_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(_GLF_IDENTITY(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), (_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))))) + log(1.0)), 0.0)), injectionSwitch)).x) * _GLF_IDENTITY(1.0, (1.0) - 0.0), 0.0, 0.0, 1.0, 1.0, 1.0)), min(float(mat2x3((_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), 0.0)), injectionSwitch)).x) * 1.0, 0.0, 0.0, 1.0, 1.0, 1.0)), float(mat2x3(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch))) + _GLF_IDENTITY(vec2(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), max(false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, _GLF_IDENTITY(clamp(0.0, 0.0, 0.0), max(clamp(0.0, 0.0, 0.0), _GLF_IDENTITY(clamp(0.0, 0.0, 0.0), mix(float(_GLF_FUZZED(7.5)), float(clamp(0.0, 0.0, 0.0)), bool(true)))))))))), 0.0), mat2(1.0) * (vec2(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), max(false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, _GLF_IDENTITY(clamp(0.0, 0.0, 0.0), max(clamp(0.0, 0.0, 0.0), _GLF_IDENTITY(clamp(0.0, 0.0, 0.0), mix(float(_GLF_FUZZED(7.5)), float(clamp(0.0, 0.0, 0.0)), bool(true)))))))))), 0.0)))), injectionSwitch)).x, float(vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch))) + _GLF_IDENTITY(vec2(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), max(false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, _GLF_IDENTITY(clamp(0.0, 0.0, 0.0), max(clamp(0.0, 0.0, 0.0), _GLF_IDENTITY(clamp(0.0, 0.0, 0.0), mix(float(_GLF_FUZZED(7.5)), float(clamp(0.0, 0.0, 0.0)), bool(true)))))))))), 0.0), mat2(1.0) * (vec2(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), max(false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, _GLF_IDENTITY(clamp(0.0, 0.0, 0.0), max(clamp(0.0, 0.0, 0.0), _GLF_IDENTITY(clamp(0.0, 0.0, 0.0), mix(float(_GLF_FUZZED(7.5)), float(clamp(0.0, 0.0, 0.0)), bool(true)))))))))), 0.0)))), injectionSwitch)).x, max(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch))) + _GLF_IDENTITY(vec2(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), max(false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, _GLF_IDENTITY(clamp(0.0, 0.0, 0.0), max(clamp(0.0, 0.0, 0.0), _GLF_IDENTITY(clamp(0.0, 0.0, 0.0), mix(float(_GLF_FUZZED(7.5)), float(clamp(0.0, 0.0, 0.0)), bool(true)))))))))), 0.0), mat2(1.0) * (vec2(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), max(false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, _GLF_IDENTITY(clamp(0.0, 0.0, 0.0), max(clamp(0.0, 0.0, 0.0), _GLF_IDENTITY(clamp(0.0, 0.0, 0.0), mix(float(_GLF_FUZZED(7.5)), float(clamp(0.0, 0.0, 0.0)), bool(true)))))))))), 0.0)))), injectionSwitch)).x, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch))) + _GLF_IDENTITY(vec2(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), max(false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, _GLF_IDENTITY(clamp(0.0, 0.0, 0.0), max(clamp(0.0, 0.0, 0.0), _GLF_IDENTITY(clamp(0.0, 0.0, 0.0), mix(float(_GLF_FUZZED(7.5)), float(clamp(0.0, 0.0, 0.0)), bool(true)))))))))), 0.0), mat2(1.0) * (vec2(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), max(false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, _GLF_IDENTITY(clamp(0.0, 0.0, 0.0), max(clamp(0.0, 0.0, 0.0), _GLF_IDENTITY(clamp(0.0, 0.0, 0.0), mix(float(_GLF_FUZZED(7.5)), float(clamp(0.0, 0.0, 0.0)), bool(true)))))))))), 0.0)))), injectionSwitch)).x)), abs(0.0))))), mix(float((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch))) + _GLF_IDENTITY(vec2(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), max(false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, _GLF_IDENTITY(clamp(0.0, 0.0, 0.0), max(clamp(0.0, 0.0, 0.0), _GLF_IDENTITY(clamp(0.0, 0.0, 0.0), mix(float(_GLF_FUZZED(7.5)), float(clamp(0.0, 0.0, 0.0)), bool(true)))))))))), 0.0), mat2(1.0) * (vec2(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), max(false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, _GLF_IDENTITY(clamp(0.0, 0.0, 0.0), max(clamp(0.0, 0.0, 0.0), _GLF_IDENTITY(clamp(0.0, 0.0, 0.0), mix(float(_GLF_FUZZED(7.5)), float(clamp(0.0, 0.0, 0.0)), bool(true)))))))))), 0.0)))), injectionSwitch)).x, float(vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch))) + _GLF_IDENTITY(vec2(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), max(false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, _GLF_IDENTITY(clamp(0.0, 0.0, 0.0), max(clamp(0.0, 0.0, 0.0), _GLF_IDENTITY(clamp(0.0, 0.0, 0.0), mix(float(_GLF_FUZZED(7.5)), float(clamp(0.0, 0.0, 0.0)), bool(true)))))))))), 0.0), mat2(1.0) * (vec2(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), max(false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, _GLF_IDENTITY(clamp(0.0, 0.0, 0.0), max(clamp(0.0, 0.0, 0.0), _GLF_IDENTITY(clamp(0.0, 0.0, 0.0), mix(float(_GLF_FUZZED(7.5)), float(clamp(0.0, 0.0, 0.0)), bool(true)))))))))), 0.0)))), injectionSwitch)).x, max(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch))) + _GLF_IDENTITY(vec2(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), max(false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, _GLF_IDENTITY(clamp(0.0, 0.0, 0.0), max(clamp(0.0, 0.0, 0.0), _GLF_IDENTITY(clamp(0.0, 0.0, 0.0), mix(float(_GLF_FUZZED(7.5)), float(clamp(0.0, 0.0, 0.0)), bool(true)))))))))), 0.0), mat2(1.0) * (vec2(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), max(false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, _GLF_IDENTITY(clamp(0.0, 0.0, 0.0), max(clamp(0.0, 0.0, 0.0), _GLF_IDENTITY(clamp(0.0, 0.0, 0.0), mix(float(_GLF_FUZZED(7.5)), float(clamp(0.0, 0.0, 0.0)), bool(true)))))))))), 0.0)))), injectionSwitch)).x, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch))) + _GLF_IDENTITY(vec2(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), max(false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, _GLF_IDENTITY(clamp(0.0, 0.0, 0.0), max(clamp(0.0, 0.0, 0.0), _GLF_IDENTITY(clamp(0.0, 0.0, 0.0), mix(float(_GLF_FUZZED(7.5)), float(clamp(0.0, 0.0, 0.0)), bool(true)))))))))), 0.0), mat2(1.0) * (vec2(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), max(false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, _GLF_IDENTITY(clamp(0.0, 0.0, 0.0), max(clamp(0.0, 0.0, 0.0), _GLF_IDENTITY(clamp(0.0, 0.0, 0.0), mix(float(_GLF_FUZZED(7.5)), float(clamp(0.0, 0.0, 0.0)), bool(true)))))))))), 0.0)))), injectionSwitch)).x)), abs(0.0)))))), float(_GLF_FUZZED(-2.0)), bool(false))) * 1.0, 0.0, 0.0, 1.0, 1.0, 1.0)))), float(_GLF_IDENTITY(mat3(_GLF_IDENTITY(float(mat2x3((_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(_GLF_IDENTITY(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), (_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))))) + log(1.0)), 0.0)), injectionSwitch)).x) * _GLF_IDENTITY(1.0, (1.0) - 0.0), 0.0, 0.0, 1.0, 1.0, 1.0)), min(float(mat2x3((_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), 0.0)), injectionSwitch)).x) * 1.0, 0.0, 0.0, 1.0, 1.0, 1.0)), float(mat2x3(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch))) + _GLF_IDENTITY(vec2(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), max(false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, _GLF_IDENTITY(clamp(0.0, 0.0, 0.0), max(clamp(0.0, 0.0, 0.0), _GLF_IDENTITY(clamp(0.0, 0.0, 0.0), mix(float(_GLF_FUZZED(7.5)), float(clamp(0.0, 0.0, 0.0)), bool(true)))))))))), 0.0), mat2(1.0) * (vec2(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), max(false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, _GLF_IDENTITY(clamp(0.0, 0.0, 0.0), max(clamp(0.0, 0.0, 0.0), _GLF_IDENTITY(clamp(0.0, 0.0, 0.0), mix(float(_GLF_FUZZED(7.5)), float(clamp(0.0, 0.0, 0.0)), bool(true)))))))))), 0.0)))), injectionSwitch)).x, float(vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch))) + _GLF_IDENTITY(vec2(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), max(false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, _GLF_IDENTITY(clamp(0.0, 0.0, 0.0), max(clamp(0.0, 0.0, 0.0), _GLF_IDENTITY(clamp(0.0, 0.0, 0.0), mix(float(_GLF_FUZZED(7.5)), float(clamp(0.0, 0.0, 0.0)), bool(true)))))))))), 0.0), mat2(1.0) * (vec2(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), max(false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, _GLF_IDENTITY(clamp(0.0, 0.0, 0.0), max(clamp(0.0, 0.0, 0.0), _GLF_IDENTITY(clamp(0.0, 0.0, 0.0), mix(float(_GLF_FUZZED(7.5)), float(clamp(0.0, 0.0, 0.0)), bool(true)))))))))), 0.0)))), injectionSwitch)).x, max(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch))) + _GLF_IDENTITY(vec2(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), max(false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, _GLF_IDENTITY(clamp(0.0, 0.0, 0.0), max(clamp(0.0, 0.0, 0.0), _GLF_IDENTITY(clamp(0.0, 0.0, 0.0), mix(float(_GLF_FUZZED(7.5)), float(clamp(0.0, 0.0, 0.0)), bool(true)))))))))), 0.0), mat2(1.0) * (vec2(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), max(false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, _GLF_IDENTITY(clamp(0.0, 0.0, 0.0), max(clamp(0.0, 0.0, 0.0), _GLF_IDENTITY(clamp(0.0, 0.0, 0.0), mix(float(_GLF_FUZZED(7.5)), float(clamp(0.0, 0.0, 0.0)), bool(true)))))))))), 0.0)))), injectionSwitch)).x, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch))) + _GLF_IDENTITY(vec2(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), max(false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, _GLF_IDENTITY(clamp(0.0, 0.0, 0.0), max(clamp(0.0, 0.0, 0.0), _GLF_IDENTITY(clamp(0.0, 0.0, 0.0), mix(float(_GLF_FUZZED(7.5)), float(clamp(0.0, 0.0, 0.0)), bool(true)))))))))), 0.0), mat2(1.0) * (vec2(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), max(false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, _GLF_IDENTITY(clamp(0.0, 0.0, 0.0), max(clamp(0.0, 0.0, 0.0), _GLF_IDENTITY(clamp(0.0, 0.0, 0.0), mix(float(_GLF_FUZZED(7.5)), float(clamp(0.0, 0.0, 0.0)), bool(true)))))))))), 0.0)))), injectionSwitch)).x)), abs(0.0))))), mix(float((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch))) + _GLF_IDENTITY(vec2(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), max(false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, _GLF_IDENTITY(clamp(0.0, 0.0, 0.0), max(clamp(0.0, 0.0, 0.0), _GLF_IDENTITY(clamp(0.0, 0.0, 0.0), mix(float(_GLF_FUZZED(7.5)), float(clamp(0.0, 0.0, 0.0)), bool(true)))))))))), 0.0), mat2(1.0) * (vec2(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), max(false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, _GLF_IDENTITY(clamp(0.0, 0.0, 0.0), max(clamp(0.0, 0.0, 0.0), _GLF_IDENTITY(clamp(0.0, 0.0, 0.0), mix(float(_GLF_FUZZED(7.5)), float(clamp(0.0, 0.0, 0.0)), bool(true)))))))))), 0.0)))), injectionSwitch)).x, float(vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch))) + _GLF_IDENTITY(vec2(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), max(false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, _GLF_IDENTITY(clamp(0.0, 0.0, 0.0), max(clamp(0.0, 0.0, 0.0), _GLF_IDENTITY(clamp(0.0, 0.0, 0.0), mix(float(_GLF_FUZZED(7.5)), float(clamp(0.0, 0.0, 0.0)), bool(true)))))))))), 0.0), mat2(1.0) * (vec2(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), max(false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, _GLF_IDENTITY(clamp(0.0, 0.0, 0.0), max(clamp(0.0, 0.0, 0.0), _GLF_IDENTITY(clamp(0.0, 0.0, 0.0), mix(float(_GLF_FUZZED(7.5)), float(clamp(0.0, 0.0, 0.0)), bool(true)))))))))), 0.0)))), injectionSwitch)).x, max(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch))) + _GLF_IDENTITY(vec2(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), max(false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, _GLF_IDENTITY(clamp(0.0, 0.0, 0.0), max(clamp(0.0, 0.0, 0.0), _GLF_IDENTITY(clamp(0.0, 0.0, 0.0), mix(float(_GLF_FUZZED(7.5)), float(clamp(0.0, 0.0, 0.0)), bool(true)))))))))), 0.0), mat2(1.0) * (vec2(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), max(false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, _GLF_IDENTITY(clamp(0.0, 0.0, 0.0), max(clamp(0.0, 0.0, 0.0), _GLF_IDENTITY(clamp(0.0, 0.0, 0.0), mix(float(_GLF_FUZZED(7.5)), float(clamp(0.0, 0.0, 0.0)), bool(true)))))))))), 0.0)))), injectionSwitch)).x, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch))) + _GLF_IDENTITY(vec2(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), max(false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, _GLF_IDENTITY(clamp(0.0, 0.0, 0.0), max(clamp(0.0, 0.0, 0.0), _GLF_IDENTITY(clamp(0.0, 0.0, 0.0), mix(float(_GLF_FUZZED(7.5)), float(clamp(0.0, 0.0, 0.0)), bool(true)))))))))), 0.0), mat2(1.0) * (vec2(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), max(false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, _GLF_IDENTITY(clamp(0.0, 0.0, 0.0), max(clamp(0.0, 0.0, 0.0), _GLF_IDENTITY(clamp(0.0, 0.0, 0.0), mix(float(_GLF_FUZZED(7.5)), float(clamp(0.0, 0.0, 0.0)), bool(true)))))))))), 0.0)))), injectionSwitch)).x)), abs(0.0)))))), float(_GLF_FUZZED(-2.0)), bool(false))) * 1.0, 0.0, 0.0, 1.0, 1.0, 1.0)))), 0.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(abs(1.0), 1.0, 0.0), vec3(length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 1.0)), dot(vec3(abs(1.0), 1.0, 0.0), vec3(length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 1.0))), 0.0, 0.0, 1.0, 1.0), transpose(transpose(mat3(_GLF_IDENTITY(float(mat2x3((_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(_GLF_IDENTITY(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), (_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))))) + log(1.0)), 0.0)), injectionSwitch)).x) * _GLF_IDENTITY(1.0, (1.0) - 0.0), 0.0, 0.0, 1.0, 1.0, 1.0)), min(float(mat2x3((_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), 0.0)), injectionSwitch)).x) * 1.0, 0.0, 0.0, 1.0, 1.0, 1.0)), float(mat2x3(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch))) + _GLF_IDENTITY(vec2(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), max(false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, _GLF_IDENTITY(clamp(0.0, 0.0, 0.0), max(clamp(0.0, 0.0, 0.0), _GLF_IDENTITY(clamp(0.0, 0.0, 0.0), mix(float(_GLF_FUZZED(7.5)), float(clamp(0.0, 0.0, 0.0)), bool(true)))))))))), 0.0), mat2(1.0) * (vec2(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), max(false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, _GLF_IDENTITY(clamp(0.0, 0.0, 0.0), max(clamp(0.0, 0.0, 0.0), _GLF_IDENTITY(clamp(0.0, 0.0, 0.0), mix(float(_GLF_FUZZED(7.5)), float(clamp(0.0, 0.0, 0.0)), bool(true)))))))))), 0.0)))), injectionSwitch)).x, float(vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch))) + _GLF_IDENTITY(vec2(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), max(false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, _GLF_IDENTITY(clamp(0.0, 0.0, 0.0), max(clamp(0.0, 0.0, 0.0), _GLF_IDENTITY(clamp(0.0, 0.0, 0.0), mix(float(_GLF_FUZZED(7.5)), float(clamp(0.0, 0.0, 0.0)), bool(true)))))))))), 0.0), mat2(1.0) * (vec2(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), max(false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, _GLF_IDENTITY(clamp(0.0, 0.0, 0.0), max(clamp(0.0, 0.0, 0.0), _GLF_IDENTITY(clamp(0.0, 0.0, 0.0), mix(float(_GLF_FUZZED(7.5)), float(clamp(0.0, 0.0, 0.0)), bool(true)))))))))), 0.0)))), injectionSwitch)).x, max(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch))) + _GLF_IDENTITY(vec2(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), max(false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, _GLF_IDENTITY(clamp(0.0, 0.0, 0.0), max(clamp(0.0, 0.0, 0.0), _GLF_IDENTITY(clamp(0.0, 0.0, 0.0), mix(float(_GLF_FUZZED(7.5)), float(clamp(0.0, 0.0, 0.0)), bool(true)))))))))), 0.0), mat2(1.0) * (vec2(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), max(false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, _GLF_IDENTITY(clamp(0.0, 0.0, 0.0), max(clamp(0.0, 0.0, 0.0), _GLF_IDENTITY(clamp(0.0, 0.0, 0.0), mix(float(_GLF_FUZZED(7.5)), float(clamp(0.0, 0.0, 0.0)), bool(true)))))))))), 0.0)))), injectionSwitch)).x, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch))) + _GLF_IDENTITY(vec2(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), max(false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, _GLF_IDENTITY(clamp(0.0, 0.0, 0.0), max(clamp(0.0, 0.0, 0.0), _GLF_IDENTITY(clamp(0.0, 0.0, 0.0), mix(float(_GLF_FUZZED(7.5)), float(clamp(0.0, 0.0, 0.0)), bool(true)))))))))), 0.0), mat2(1.0) * (vec2(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), max(false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, _GLF_IDENTITY(clamp(0.0, 0.0, 0.0), max(clamp(0.0, 0.0, 0.0), _GLF_IDENTITY(clamp(0.0, 0.0, 0.0), mix(float(_GLF_FUZZED(7.5)), float(clamp(0.0, 0.0, 0.0)), bool(true)))))))))), 0.0)))), injectionSwitch)).x)), abs(0.0))))), mix(float((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch))) + _GLF_IDENTITY(vec2(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), max(false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, _GLF_IDENTITY(clamp(0.0, 0.0, 0.0), max(clamp(0.0, 0.0, 0.0), _GLF_IDENTITY(clamp(0.0, 0.0, 0.0), mix(float(_GLF_FUZZED(7.5)), float(clamp(0.0, 0.0, 0.0)), bool(true)))))))))), 0.0), mat2(1.0) * (vec2(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), max(false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, _GLF_IDENTITY(clamp(0.0, 0.0, 0.0), max(clamp(0.0, 0.0, 0.0), _GLF_IDENTITY(clamp(0.0, 0.0, 0.0), mix(float(_GLF_FUZZED(7.5)), float(clamp(0.0, 0.0, 0.0)), bool(true)))))))))), 0.0)))), injectionSwitch)).x, float(vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch))) + _GLF_IDENTITY(vec2(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), max(false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, _GLF_IDENTITY(clamp(0.0, 0.0, 0.0), max(clamp(0.0, 0.0, 0.0), _GLF_IDENTITY(clamp(0.0, 0.0, 0.0), mix(float(_GLF_FUZZED(7.5)), float(clamp(0.0, 0.0, 0.0)), bool(true)))))))))), 0.0), mat2(1.0) * (vec2(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), max(false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, _GLF_IDENTITY(clamp(0.0, 0.0, 0.0), max(clamp(0.0, 0.0, 0.0), _GLF_IDENTITY(clamp(0.0, 0.0, 0.0), mix(float(_GLF_FUZZED(7.5)), float(clamp(0.0, 0.0, 0.0)), bool(true)))))))))), 0.0)))), injectionSwitch)).x, max(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch))) + _GLF_IDENTITY(vec2(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), max(false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, _GLF_IDENTITY(clamp(0.0, 0.0, 0.0), max(clamp(0.0, 0.0, 0.0), _GLF_IDENTITY(clamp(0.0, 0.0, 0.0), mix(float(_GLF_FUZZED(7.5)), float(clamp(0.0, 0.0, 0.0)), bool(true)))))))))), 0.0), mat2(1.0) * (vec2(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), max(false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, _GLF_IDENTITY(clamp(0.0, 0.0, 0.0), max(clamp(0.0, 0.0, 0.0), _GLF_IDENTITY(clamp(0.0, 0.0, 0.0), mix(float(_GLF_FUZZED(7.5)), float(clamp(0.0, 0.0, 0.0)), bool(true)))))))))), 0.0)))), injectionSwitch)).x, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch))) + _GLF_IDENTITY(vec2(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), max(false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, _GLF_IDENTITY(clamp(0.0, 0.0, 0.0), max(clamp(0.0, 0.0, 0.0), _GLF_IDENTITY(clamp(0.0, 0.0, 0.0), mix(float(_GLF_FUZZED(7.5)), float(clamp(0.0, 0.0, 0.0)), bool(true)))))))))), 0.0), mat2(1.0) * (vec2(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), max(false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, _GLF_IDENTITY(clamp(0.0, 0.0, 0.0), max(clamp(0.0, 0.0, 0.0), _GLF_IDENTITY(clamp(0.0, 0.0, 0.0), mix(float(_GLF_FUZZED(7.5)), float(clamp(0.0, 0.0, 0.0)), bool(true)))))))))), 0.0)))), injectionSwitch)).x)), abs(0.0)))))), float(_GLF_FUZZED(-2.0)), bool(false))) * 1.0, 0.0, 0.0, 1.0, 1.0, 1.0)))), 0.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(abs(1.0), 1.0, 0.0), vec3(length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 1.0)), dot(vec3(abs(1.0), 1.0, 0.0), vec3(length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 1.0))), 0.0, 0.0, 1.0, 1.0))))))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(min(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], (_GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) - 0.0)) - 0.0), injectionSwitch[1])), injectionSwitch), _GLF_IDENTITY((min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)), vec2(mat3x4(_GLF_IDENTITY((min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)), abs(vec2(0.0, 0.0)) + ((min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)))), sqrt(1.0), abs(0.0), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0))), 1.0))) * _GLF_IDENTITY(mat2(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y)), (true ? mat2(_GLF_ONE(1.0, injectionSwitch.y)) : _GLF_FUZZED(mat2(-7.7, -658.724, 3.1, 6.4)))))), (injectionSwitch) + vec2(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), min(_GLF_IDENTITY(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), float(mat2x3(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0, 0.0))), _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(2.1) : 0.0)), 0.0)))))), 0.0)), injectionSwitch)).x) * 1.0, _GLF_IDENTITY(max((_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), 0.0)), _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(cos(injectionSwitch)) : injectionSwitch)))).x) * 1.0, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), 0.0)), injectionSwitch)).x) * 1.0), (true ? _GLF_IDENTITY(max((_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + _GLF_IDENTITY(vec2(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), 0.0), (vec2(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(_GLF_IDENTITY(-705.933, mix(float(_GLF_FUZZED(6735.3363)), float(-705.933), bool(true)))) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), 0.0)) * mat2(1.0))), injectionSwitch)).x) * 1.0, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) + vec2(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), 0.0), mix(vec2(_GLF_IDENTITY(((injectionSwitch) + _GLF_IDENTITY(vec2(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), 0.0), (vec2(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), 0.0)) * vec2(1.0, 1.0))), vec2(mat3x4(_GLF_IDENTITY(((injectionSwitch) + _GLF_IDENTITY(vec2(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), 0.0), (vec2(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), 0.0)) * vec2(1.0, 1.0))), (_GLF_IDENTITY(((injectionSwitch) + _GLF_IDENTITY(vec2(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), 0.0), (vec2(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), 0.0)) * vec2(1.0, 1.0))), mat2(1.0) * (((injectionSwitch) + _GLF_IDENTITY(vec2(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), 0.0), (vec2(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), 0.0)) * vec2(1.0, 1.0)))))) - vec2(0.0, 0.0)), abs(0.0), 0.0, abs(1.0), abs(1.0), sqrt(1.0), 0.0, cos(log(1.0)), 1.0, 0.0, 0.0)))[0], ((injectionSwitch) + vec2(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), 0.0))[1]), vec2(_GLF_FUZZED(_GLF_IDENTITY(301.076, 0.0 + (301.076))), _GLF_FUZZED(2807.9256)), bvec2(false, false)))), injectionSwitch)).x) * 1.0), (false ? _GLF_FUZZED(41.37) : max((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) / cos(0.0)))))), 0.0)), injectionSwitch)).x, float(vec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))) : _GLF_FUZZED(vec4(-108.157, -410.794, 7.8, 8.9).zw))), max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(_GLF_IDENTITY(0.0, (0.0) + 0.0), clamp(0.0, 0.0, 0.0)), mix(float(_GLF_FUZZED(vec3(-8.1, 2.4, -906.235).b)), float(false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(_GLF_IDENTITY(0.0, (0.0) + 0.0), clamp(0.0, 0.0, 0.0))), bool(true))))), 0.0)), injectionSwitch)).x, float(mat2(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), 0.0)), injectionSwitch)).x, 0.0, 1.0, 1.0))), 1.0, sin(0.0))))) * 1.0, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(_GLF_IDENTITY(0.0, float(mat4(_GLF_IDENTITY(0.0, (0.0) + 0.0), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))), 0.0, 0.0, determinant(mat4(0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)), 1.0, exp(0.0), 1.0, 1.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 0.0, 1.0))), clamp(0.0, 0.0, 0.0)))), 0.0)), injectionSwitch)).x) * 1.0))) : _GLF_FUZZED((- 6.1))))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), 0.0)), injectionSwitch)).x) * 1.0, max(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), 0.0)), injectionSwitch)).x) * 1.0, float(mat3((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch))) + vec2(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), 0.0)), injectionSwitch)).x, (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch))) + vec2(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), 0.0)), injectionSwitch)).x, clamp(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch))) + vec2(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), 0.0)), injectionSwitch)).x, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch))) + vec2(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), 0.0)), injectionSwitch)).x, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch))) + vec2(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), 0.0)), injectionSwitch)).x)) : _GLF_FUZZED(2.7)))) * 1.0, sqrt(1.0), 1.0, sin(0.0), 0.0, 0.0, 0.0, 1.0, 0.0))), (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), 0.0)), injectionSwitch)).x) * 1.0)), clamp(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), 0.0)), injectionSwitch)).x) * 1.0, max(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) + vec2(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), 0.0), min((injectionSwitch) + vec2(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), 0.0), (injectionSwitch) + vec2(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), 0.0)))), injectionSwitch)).x), min((_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) + vec2(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), 0.0), min((injectionSwitch) + vec2(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), 0.0), (injectionSwitch) + vec2(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), 0.0)))), injectionSwitch)).x), (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) + vec2(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), 0.0), min((injectionSwitch) + vec2(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), 0.0), (injectionSwitch) + vec2(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), 0.0)))), injectionSwitch)).x))) * 1.0, float(mat3((_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), 0.0)), injectionSwitch)).x) * 1.0, sqrt(1.0), 1.0, sin(0.0), 0.0, 0.0, 0.0, 1.0, 0.0))), (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), 0.0)), injectionSwitch)).x) * 1.0)), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), 0.0)), injectionSwitch)).x) * 1.0, max(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), mix(vec2((mat2(1.0) * (injectionSwitch))[0], (mat2(1.0) * (injectionSwitch))[1]), vec2(_GLF_FUZZED(-5.2), _GLF_FUZZED((false ? 8.1 : -994.613))), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))), max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), 0.0)), injectionSwitch)).x) * 1.0, float(mat3((_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), 0.0)), injectionSwitch)).x) * 1.0, sqrt(1.0), 1.0, sin(0.0), 0.0, 0.0, 0.0, 1.0, 0.0))), (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), 0.0)), injectionSwitch)).x) * 1.0)), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), 0.0)), injectionSwitch)).x) * 1.0, max(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + _GLF_IDENTITY(vec2(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), 0.0), (false ? _GLF_FUZZED(injectionSwitch) : vec2(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), 0.0)))), injectionSwitch)).x) * 1.0, float(mat3((_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(_GLF_IDENTITY(-705.933, float(mat2x4(_GLF_IDENTITY(-705.933, (-705.933) - 0.0), 1.0, 0.0, 0.0, 0.0, 0.0, cos(0.0), 0.0)))) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), 0.0)), injectionSwitch)).x) * 1.0, sqrt(1.0), 1.0, sin(0.0), 0.0, 0.0, 0.0, 1.0, 0.0))), (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-705.933) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), 0.0)), injectionSwitch)).x) * 1.0))))))) > injectionSwitch.y)))) || false));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = _GLF_IDENTITY(0, min(_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-8360))), 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))), ~ (_GLF_IDENTITY(~ (((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)))), max(~ (((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)))), ~ (((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))))))))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (false ? _GLF_FUZZED(0.0) : _GLF_ZERO(0.0, injectionSwitch.x)))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, (false) && true), false)))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 | 1)); _injected_loop_counter ++)
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), false, true, false)), (bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), false, true, false))) || false))))))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
            }
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch), (false ? _GLF_FUZZED(injectionSwitch) : mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)))).x > injectionSwitch.y))))
        barrier();
       barrier();
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, ! (! (true))), true, false, true)))))
        {
         do
          {
           for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ 1)); _injected_loop_counter ++)
                {
                 for(int _injected_loop_counter = (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (int(8)) - 0)), ~ (~ (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (int(8)) - 0)), max(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (_GLF_IDENTITY(8, int(_GLF_ZERO(0.0, injectionSwitch.x)) | _GLF_IDENTITY((8), ((8)) - int(_GLF_ZERO(0.0, injectionSwitch.x))))) << ((_GLF_IDENTITY(82546, _GLF_IDENTITY((82546), clamp((82546), (82546), (82546))) << 0) << -50231) & 0))), _GLF_IDENTITY(int(8), (_GLF_IDENTITY(int(8), (int(8)) | (int(8)))) - 0)), _GLF_IDENTITY(0 << _GLF_IDENTITY(_GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (int(8)) - 0)), (true ? _GLF_IDENTITY(_GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (int(8)) - 0)), (true ? _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(_GLF_IDENTITY(8, _GLF_IDENTITY(int(int(8)), (int(int(8))) - 0))), (int(8)) - 0)) : _GLF_FUZZED(_injected_loop_counter))) : _GLF_FUZZED(79022))), _GLF_IDENTITY((_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(bitfieldReverse(16069)))) << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (int(8)) - 0))) >> 0, 1 * ((_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(bitfieldReverse(16069)))) << _GLF_IDENTITY(int(8), _GLF_IDENTITY(_GLF_IDENTITY(int(8), (int(8)) - 0), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(_GLF_IDENTITY(int(8), (int(8)) - 0), (_GLF_IDENTITY(int(8), (int(8)) - 0)) >> 0))))) >> 0))))))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y)), (_GLF_IDENTITY(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y)), bool(bool(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y)))))) && true)); _injected_loop_counter ++)
                  {
                   barrier();
                   if(_GLF_DEAD(false))
                    {
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (1 ^ 1)); _injected_loop_counter --)
                      {
                       barrier();
                      }
                    }
                  }
                }
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         do
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), vec2(0.0, 0.0) + ((injectionSwitch) * mat2(1.0)))))).x > injectionSwitch.y))));
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               barrier();
              }
             else
              {
              }
            }
          }
         else
          {
          }
        }
       else
        {
        }
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false)))))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, true && (false)), true)))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(244.551)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) && true)), true && (! (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) && true)))))))))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
      }
     else
      {
      }
    }
  }
}
