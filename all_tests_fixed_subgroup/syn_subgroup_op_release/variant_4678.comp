#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec3 GLF_merged2_0_2_54_2_1_13GLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroupnum_workgroup;
 uvec4 GLF_merged3_0_2_50_2_1_16_3_1_11GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_basenext_virtual_gidsubgroup_id;
 uvec4 GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      return;
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = (1 & (1 & _GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (1) | (1)))))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 ^ 0) << _GLF_IDENTITY(int(8), int(8)))), (_GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 ^ 0) << _GLF_IDENTITY(int(8), int(8))))) && true); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec3(false, false, true)))), ! (_GLF_IDENTITY(! ((false)), false || (_GLF_IDENTITY(! ((false)), false || (! ((false)))))))))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter --)
      {
       return;
      }
    }
  }
 uvec2 GLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))) || false))), (bool(bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)))) || false)))))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   GLF_merged2_0_2_54_2_1_13GLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroupnum_workgroup.xy = GLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
  }
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (false)))), bool(bvec4(_GLF_IDENTITY(! (false), ! (! (! (false)))), false, false, false))))))), (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       return;
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        break;
      }
    }
  }
 do
  {
   if(_GLF_DEAD(false))
    break;
   GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup.zw = GLF_merged2_0_2_54_2_1_13GLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroupnum_workgroup.xy;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     break;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uvec2 GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base;
 do
  {
   GLF_merged3_0_2_50_2_1_16_3_1_11GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_basenext_virtual_gidsubgroup_id.xy = GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    break;
  }
 do
  {
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter ++)
  {
   GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup.xy = _GLF_IDENTITY(GLF_merged3_0_2_50_2_1_16_3_1_11GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_basenext_virtual_gidsubgroup_id.xy, (GLF_merged3_0_2_50_2_1_16_3_1_11GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_basenext_virtual_gidsubgroup_id.xy) << uvec2(0u, 0u));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     do
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 GLF_merged3_0_2_50_2_1_16_3_1_11GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_basenext_virtual_gidsubgroup_id.w = subgroup_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > ((55989 & 0) ^ 0)); _injected_loop_counter --)
    {
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup.xy.x = GLF_merged3_0_2_50_2_1_16_3_1_11GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_basenext_virtual_gidsubgroup_id.w;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
           if(_GLF_DEAD(false))
            return;
          }
        }
       else
        {
        }
      }
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != (1 & 1), (_GLF_IDENTITY(_injected_loop_counter != (1 & 1), ! (! (_injected_loop_counter != (1 & 1))))) && true)); _GLF_IDENTITY(_injected_loop_counter ++, ~ (~ (_injected_loop_counter ++))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
uint subgroup_size = 16;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 GLF_merged2_0_2_54_2_1_13GLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroupnum_workgroup.z = num_workgroup;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(8), int(8))); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       return;
      }
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     do
      {
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
     GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup.zw.y = GLF_merged2_0_2_54_2_1_13GLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroupnum_workgroup.z;
     for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           break;
          }
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
      }
    }
   else
    {
     for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         return;
        }
       if(_GLF_DEAD(false))
        continue;
      }
     do
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          break;
         return;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 else
  {
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    return;
  }
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    return;
  }
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false))), false, true)), ! (! (bool(bvec3(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false))), false, true)))))), true && (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false))), false, true)), ! (! (bool(bvec3(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false))), false, true))))))))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             return;
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                continue;
               return;
              }
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           _GLF_IDENTITY(GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup.xy.y = workgroup_base, ~ (_GLF_IDENTITY(~ (GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup.xy.y = workgroup_base), (~ (GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup.xy.y = workgroup_base)) | uint(_GLF_ZERO(0.0, injectionSwitch.x)))));
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          continue;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint virtual_gid = _GLF_IDENTITY(GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup.xy.y + GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup.xy.x * subgroup_size, max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup, (GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup) / uvec4(1u, 1u, 1u, 1u)), clamp(_GLF_IDENTITY(GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup, (GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup) / uvec4(1u, 1u, 1u, 1u)), _GLF_IDENTITY(GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup, (GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup) / uvec4(1u, 1u, 1u, 1u)), _GLF_IDENTITY(GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup, (GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup) / uvec4(1u, 1u, 1u, 1u)))).xy, max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup, (GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup) / uvec4(1u, 1u, 1u, 1u)), min(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup, (GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup) / uvec4(1u, 1u, 1u, 1u)), (_GLF_IDENTITY(GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup, (GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup) / uvec4(1u, 1u, 1u, 1u))) * uvec4(1u, 1u, 1u, 1u)), _GLF_IDENTITY(GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup, (GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup) / uvec4(1u, _GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, (1u) | 0u))), 1u, 1u)))).xy, (_GLF_IDENTITY(GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup, (GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup) / uvec4(1u, 1u, 1u, 1u)).xy) >> (uvec2(0u, 0u) >> _GLF_IDENTITY(uvec2(0u), uvec2(0u)))), _GLF_IDENTITY(GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup, (_GLF_IDENTITY(GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup, ~ (~ (GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup)))) / uvec4(1u, 1u, 1u, 1u)).xy)).y, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup, (GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup) / uvec4(1u, 1u, 1u, 1u)), clamp(_GLF_IDENTITY(GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup, (GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup) / uvec4(1u, 1u, 1u, 1u)), _GLF_IDENTITY(GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup, (GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup) / uvec4(1u, 1u, 1u, 1u)), _GLF_IDENTITY(GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup, (GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup) / uvec4(1u, 1u, 1u, 1u)))).xy, max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup, (GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup) / uvec4(1u, 1u, 1u, 1u)), min(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup, (GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup) / uvec4(1u, 1u, 1u, 1u)), (_GLF_IDENTITY(GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup, (GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup) / uvec4(1u, 1u, 1u, 1u))) * uvec4(1u, 1u, 1u, 1u)), _GLF_IDENTITY(GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup, (GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup) / uvec4(1u, _GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, (1u) | 0u))), 1u, 1u)))).xy, (_GLF_IDENTITY(GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup, (GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup) / uvec4(1u, 1u, 1u, 1u)).xy) >> (uvec2(0u, 0u) >> _GLF_IDENTITY(uvec2(0u), uvec2(0u)))), _GLF_IDENTITY(GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup, (_GLF_IDENTITY(GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup, ~ (~ (GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup)))) / uvec4(1u, 1u, 1u, 1u)).xy)).y) ^ 0u), _GLF_IDENTITY(clamp(GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup.xy.y, GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup.xy.y, _GLF_IDENTITY(GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup.xy.y, (_GLF_IDENTITY(GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup.xy.y, _GLF_IDENTITY((GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup.xy.y) << 0u, clamp((GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup.xy.y) << 0u, (GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup.xy.y) << 0u, _GLF_IDENTITY((GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup.xy.y) << 0u, ((GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup.xy.y) << 0u) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))))))) << 0u)), (clamp(GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup.xy.y, GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup.xy.y, _GLF_IDENTITY(GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup.xy.y, (_GLF_IDENTITY(GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup.xy.y, _GLF_IDENTITY((GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup.xy.y) << 0u, clamp((GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup.xy.y) << 0u, (GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup.xy.y) << 0u, _GLF_IDENTITY((GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup.xy.y) << 0u, ((GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup.xy.y) << 0u) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))))))) << 0u))) ^ 0u)) + GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup.xy.x * subgroup_size, _GLF_IDENTITY(GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup.xy.y + GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup.xy.x * subgroup_size, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup.xy.y, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup, (GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup) | (GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup)).xy, (_GLF_IDENTITY(GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup.xy, clamp(GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup.xy, GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup.xy, GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup.xy))) | (GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup.xy)).y, max(GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup.xy.y, GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup.xy.y))) ^ 0u) + _GLF_IDENTITY(GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup, (GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup) >> _GLF_IDENTITY(uvec4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)), (uvec4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x))) | (uvec4(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), 1.0 * (_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))).xy.x * subgroup_size, 0u ^ (GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup.xy.y + GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup.xy.x * subgroup_size))))))) + subgroup_local_id;
 uint next_virtual_gid = GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup.xy.y + GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup.xy.x * subgroup_size + _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, 0u | ((subgroup_local_id + 1) % subgroup_size))), 0u ^ (_GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), _GLF_IDENTITY((((subgroup_local_id + 1) % subgroup_size)), max(_GLF_IDENTITY(((_GLF_IDENTITY((subgroup_local_id + 1), ~ (~ (_GLF_IDENTITY((subgroup_local_id + 1), (false ? _GLF_FUZZED(workgroup_size) : (subgroup_local_id + 1)))))) % subgroup_size)), min((((subgroup_local_id + 1) % subgroup_size)), _GLF_IDENTITY((((subgroup_local_id + 1) % subgroup_size)), max((((subgroup_local_id + 1) % subgroup_size)), (((subgroup_local_id + 1) % subgroup_size)))))), _GLF_IDENTITY((((subgroup_local_id + 1) % subgroup_size)), (((_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, uint(uvec2(_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, uint(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((subgroup_local_id + 1) % subgroup_size) ^ 0u)), uint(uvec4(uint(_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((subgroup_local_id + 1) % subgroup_size) ^ 0u)), 0u, 1u, 0u))), (_GLF_IDENTITY(uint(_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((subgroup_local_id + 1) % subgroup_size) ^ 0u)), uint(uvec4(uint(_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((subgroup_local_id + 1) % subgroup_size) ^ 0u)), 0u, 1u, 0u)))) >> (0u & 136610u)))), 0u)))))) * (1u | 1u)))) | 0u)));
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), int(ivec3(int(4), 0, 0))))) >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter ++)
  {
   GLF_merged3_0_2_50_2_1_16_3_1_11GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_basenext_virtual_gidsubgroup_id.z = next_virtual_gid;
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
            return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                return;
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
              }
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
              }
             else
              {
              }
            }
          }
         else
          {
           return;
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, min(_GLF_IDENTITY(1, 0 | (1)), 1))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))))
            break;
          }
        }
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           do
            {
             return;
             if(_GLF_DEAD(false))
              return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = _GLF_IDENTITY((ivec3(25658, 64346, 72168).z & 0), clamp((ivec3(25658, 64346, 72168).z & 0), (ivec3(25658, 64346, 72168).z & 0), (ivec3(25658, 64346, 72168).z & 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           return;
          }
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) && true), false, true, false)))))
          {
          }
         else
          {
           GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup.zw.x = GLF_merged3_0_2_50_2_1_16_3_1_11GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_basenext_virtual_gidsubgroup_id.z;
          }
        }
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)))))))
    {
     for(int _injected_loop_counter = (0 | (0 >> _GLF_IDENTITY(int(2), int(2)))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
        return;
      }
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       for(int _injected_loop_counter = (0 | 0); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))); _injected_loop_counter ++)
        {
         for(int _injected_loop_counter = (1 & int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_WRAPPED_LOOP(_injected_loop_counter > ((0 >> _GLF_IDENTITY(int(6), int(6))) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), min(int(5), int(5)))))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              {
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             return;
            }
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))));
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    break;
  }
 while(_GLF_WRAPPED_LOOP(false));
 buf[virtual_gid] = _GLF_IDENTITY(1, (1) >> 0);
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-9852.2927, -1.9)))).x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(mat4x3(injectionSwitch, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, 1.0)), dot(vec2(1.0, 0.0), _GLF_IDENTITY(vec2(0.0, 1.0), min(vec2(0.0, 1.0), vec2(0.0, 1.0))))), 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(1.0, min(1.0, 1.0))))), injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           return;
           if(_GLF_DEAD(false))
            break;
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       else
        {
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_DEAD(false))
            return;
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          return;
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               return;
              }
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          return;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 do
  {
   if(subgroup_local_id + 1 < subgroup_size)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
      continue;
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(_GLF_IDENTITY(mat2x3(injectionSwitch.y, 1.0, 1.0, 1.0, abs(1.0), 1.0), (mat2x3(injectionSwitch.y, 1.0, 1.0, 1.0, abs(1.0), 1.0)) * mat2(1.0))), min(float(_GLF_IDENTITY(mat2x3(injectionSwitch.y, _GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0)), 1.0, 1.0, abs(1.0), 1.0), (mat2x3(injectionSwitch.y, 1.0, 1.0, 1.0, abs(1.0), 1.0)) * mat2(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-21.09)))))), float(_GLF_IDENTITY(mat2x3(injectionSwitch.y, 1.0, 1.0, 1.0, abs(1.0), 1.0), (mat2x3(injectionSwitch.y, 1.0, 1.0, 1.0, abs(1.0), 1.0)) * mat2(1.0))))))))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          continue;
         continue;
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          break;
         atomicStore(buf[GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup.zw.x], uint(2), 4, 64, 4);
        }
       else
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), ! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (_GLF_DEAD(false)), false || (! (_GLF_DEAD(false))))), bool(bvec3(bool(_GLF_IDENTITY(! (_GLF_DEAD(false)), false || (! (_GLF_DEAD(false))))), true, true)))))))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (_GLF_DEAD(false)), false || (! (_GLF_DEAD(false))))), bool(bvec3(bool(_GLF_IDENTITY(! (_GLF_DEAD(false)), false || (! (_GLF_DEAD(false))))), true, true)))))))), ! (! ((_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (_GLF_DEAD(false)), false || (! (_GLF_DEAD(false))))), bool(bvec3(bool(_GLF_IDENTITY(! (_GLF_DEAD(false)), false || (! (_GLF_DEAD(false))))), true, true))))))))))))))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(false))
            break;
           continue;
          }
        }
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec4(! (false), true, false, false))))) || (_GLF_IDENTITY(false || (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))), (false || (_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y)))) || false))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch)).x > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
        {
         if(_GLF_DEAD(false))
          break;
         continue;
        }
       if(_GLF_DEAD(false))
        continue;
       continue;
      }
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          break;
         subgroupAll(false);
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      continue;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       for(int _injected_loop_counter = _GLF_IDENTITY(1, clamp(1, 1, 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          return;
         do
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
            break;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 return;
                 for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) - 0); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_injected_loop_counter, int(int(_injected_loop_counter)))), int(ivec4(_GLF_IDENTITY(~ (_GLF_IDENTITY(_injected_loop_counter, int(int(_injected_loop_counter)))), (~ (_GLF_IDENTITY(_injected_loop_counter, int(int(_injected_loop_counter))))) ^ 0), 1, 0, 0))))) < 1); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       return;
                       if(_GLF_DEAD(false))
                        return;
                      }
                     else
                      {
                      }
                     if(_GLF_DEAD(false))
                      return;
                    }
                  }
                }
               else
                {
                }
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     do
      {
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       break;
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          continue;
         continue;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           return;
          }
         if(_GLF_DEAD(false))
          return;
        }
      }
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  continue;
                 return;
                }
              }
             else
              {
              }
             do
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    break;
                   return;
                  }
                }
               else
                {
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(false))
          return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), 0 | (int(2))))) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            return;
          }
         break;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          break;
         return;
        }
       if(_GLF_DEAD(false))
        continue;
      }
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         break;
         if(_GLF_DEAD(false))
          continue;
        }
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, false)), bool(bvec3(bool(bvec3(false, false, false)), true, true))))))
        return;
       continue;
      }
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))
      break;
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y)))) && true)))))
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
        {
         do
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             break;
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             continue;
            }
           do
            {
             return;
             if(_GLF_DEAD(false))
              return;
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              continue;
             continue;
            }
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_DEAD(false))
        break;
      }
     else
      {
       if(_GLF_DEAD(false))
        break;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))
        continue;
       break;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         continue;
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
        {
         return;
        }
       else
        {
        }
      }
     for(int _injected_loop_counter = ((0 | 0) ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       atomicStore(buf[_GLF_IDENTITY(GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup.zw.x, uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup.zw.x, max(_GLF_IDENTITY(GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup.zw.x, min(GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup.zw.x, GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup.zw.x)), GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup.zw.x))), clamp(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup.zw.x, max(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup, (GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup) / uvec4(1u, 1u, 1u, 1u)).zw, (_GLF_IDENTITY(GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup, (GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup) / uvec4(1u, 1u, 1u, 1u)).zw) ^ (uvec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(uvec2(8u), uvec2(8u)))).x, GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup.zw.x)), (_GLF_IDENTITY(GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup.zw.x, max(_GLF_IDENTITY(GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup, ~ (_GLF_IDENTITY(~ (GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup), (~ (GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup)) * uvec4(1u, 1u, 1u, 1u)))).zw.x, GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup.zw.x))) | (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup.zw.x, max(_GLF_IDENTITY(GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup, uvec4(0u, 0u, 0u, 0u) + (GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup)).zw.x, GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup.zw.x)), uint(uvec2(_GLF_IDENTITY(GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup.zw.x, _GLF_IDENTITY(max(_GLF_IDENTITY(GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup.zw.x, (GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup.zw.x) | (GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup.zw.x)), GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup.zw.x), (_GLF_IDENTITY(max(GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup.zw.x, GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup.zw.x), 1u * (max(GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup.zw.x, GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup.zw.x)))) / 1u)), 1u)))))), (false ? _GLF_FUZZED(GLF_merged3_0_2_50_2_1_16_3_1_11GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_basenext_virtual_gidsubgroup_id.w) : uint(_GLF_IDENTITY(GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup.zw.x, max(GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup.zw.x, GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup.zw.x))))), uint(_GLF_IDENTITY(GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup.zw.x, max(GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup.zw.x, _GLF_IDENTITY(GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup.zw.x, _GLF_IDENTITY(0u, (0u) >> 0u) | (GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup.zw.x))))), uint(_GLF_IDENTITY(GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup.zw.x, max(GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup.zw.x, _GLF_IDENTITY(GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup, uvec4(0u, 0u, 0u, 0u) ^ (GLF_merged2_0_2_50_2_2_54GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_baseGLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup)).zw.x)))))))], uint(_GLF_IDENTITY(2, (2) | (2))), 4, 64, 4);
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        {
         if(_GLF_DEAD(false))
          return;
         break;
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
        continue;
       break;
      }
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(vec3(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, determinant(mat4(0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, float(mat3x4(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, _GLF_IDENTITY(dot(vec4(sqrt(1.0), 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, 1.0)), dot(vec4(sqrt(1.0), 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, 1.0))), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, sin(0.0), 1.0))), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)), 1.0)), min(dot(vec4(0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-0.3)), float(0.0), bool(true))), 0.0, 1.0), vec4(0.0, 0.0, determinant(mat4(0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)), 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, _GLF_IDENTITY(determinant(mat4(0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)), clamp(determinant(mat4(0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)), determinant(mat4(0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) - 0.0))), 0.0)), determinant(mat4(0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)))), 1.0)))), dot(vec4(_GLF_IDENTITY(0.0, (0.0) * 1.0), 0.0, 0.0, 1.0), vec4(0.0, 0.0, determinant(mat4(0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(mix(float(_GLF_FUZZED((-675.021 / -186.843))), float(_GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), float(_GLF_FUZZED(5.1)), bool(false)))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), _GLF_IDENTITY((true ? mix(float(_GLF_FUZZED((-675.021 / -186.843))), float(_GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), float(_GLF_FUZZED(5.1)), bool(false)))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) : _GLF_FUZZED(18.69)), max((true ? mix(float(_GLF_FUZZED((-675.021 / -186.843))), float(_GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), float(_GLF_FUZZED(5.1)), bool(false)))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) : _GLF_FUZZED(18.69)), (true ? mix(float(_GLF_FUZZED((-675.021 / -186.843))), float(_GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), float(_GLF_FUZZED(5.1)), bool(false)))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) : _GLF_FUZZED(18.69)))))), 0.0, 0.0, 0.0, 0.0)), 1.0))), abs(0.0)), vec3(_GLF_IDENTITY(mat3(vec3(injectionSwitch.y, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, determinant(mat4(0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)), 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, determinant(mat4(0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)), 1.0))), abs(0.0)), 0.0, 1.0, abs(1.0), 0.0, 1.0, 0.0), mat3(mat4x3(mat3(vec3(injectionSwitch.y, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, determinant(mat4(0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)), 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, determinant(_GLF_IDENTITY(mat4(0.0, 1.0, _GLF_IDENTITY(0.0, (0.0) + log(sqrt(1.0))), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0)), 0.0), (true ? mat4(0.0, 1.0, _GLF_IDENTITY(0.0, (0.0) + log(sqrt(1.0))), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0)), 0.0) : _GLF_FUZZED(mat4(-49.27, -64.28, 634.213, 3691.7284, -5752.9695, -4.3, -6335.9502, -9929.7811, 11.14, 5.4, -7.8, 2.3, -3.0, -7.0, 7.3, -2.7))))), 1.0))), abs(0.0)), _GLF_IDENTITY(0.0, float(mat3x2(0.0, 0.0, 1.0, 0.0, 1.0, 1.0))), 1.0, abs(1.0), 0.0, 1.0, 0.0))))))))))))
      {
       do
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bool(false)))));
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       do
        {
         if(_GLF_DEAD(false))
          return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       continue;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), clamp(int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), mix(float(_GLF_FUZZED((+ 960.632))), float(_GLF_ONE(1.0, injectionSwitch.y)), bool(true)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       for(int _injected_loop_counter = _GLF_IDENTITY(((0 ^ 1) ^ 0), clamp(((0 ^ 1) ^ 0), ((0 ^ 1) ^ 0), ((0 ^ 1) ^ 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         subgroupAll(true);
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
}
