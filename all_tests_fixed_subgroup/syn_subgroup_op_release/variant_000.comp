#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (! (_GLF_IDENTITY(false, (false) && true))))), _GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (! (_GLF_IDENTITY(false, (false) && true))))), false, true, true)), (bool(bvec4(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (! (_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, (true) || false)))))), false, true, true))) || false)))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(bvec2(false, false))))))))
        {
        }
       else
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       do
        {
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)), mix(vec2((_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)))[0], (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)))[1]), vec2(_GLF_FUZZED(8.2), _GLF_FUZZED(-0.0)), bvec2(false, false))).y)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)) > _GLF_IDENTITY(0, (0) >> 0)); _GLF_IDENTITY(_injected_loop_counter --, (false ? _GLF_FUZZED(clamp(_GLF_IDENTITY(findLSB(82579u), (findLSB(82579u)) >> 0), _injected_loop_counter, _injected_loop_counter)) : _injected_loop_counter --)))
          {
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-423.369) : injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), 0.0, 0.0, determinant(mat4(1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, 1.0)), dot(vec2(1.0, 0.0), vec2(0.0, 1.0))), 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, exp(0.0))), round(length(normalize(vec2(1.0, 1.0)))), abs(1.0), 1.0)), clamp(_GLF_IDENTITY(vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), 0.0, 0.0, determinant(mat4(1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, 1.0)), dot(vec2(1.0, 0.0), vec2(0.0, 1.0))), 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, exp(0.0))), round(length(normalize(vec2(1.0, 1.0)))), abs(1.0), 1.0)), vec2(0.0, 0.0) + (vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), 0.0, 0.0, determinant(mat4(1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, 1.0)), dot(vec2(1.0, 0.0), vec2(0.0, 1.0))), 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, exp(0.0))), round(length(normalize(vec2(1.0, 1.0)))), abs(1.0), 1.0)))), vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), 0.0, 0.0, determinant(mat4(1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, 1.0)), dot(vec2(1.0, 0.0), vec2(0.0, 1.0))), 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, exp(0.0))), round(length(normalize(vec2(1.0, 1.0)))), abs(1.0), 1.0)), vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), 0.0, 0.0, determinant(mat4(1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, 1.0)), dot(vec2(1.0, 0.0), vec2(0.0, 1.0))), 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, exp(0.0))), round(length(normalize(vec2(1.0, 1.0)))), abs(1.0), 1.0))))).y))))
            barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
  }
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(bool(bool(_GLF_WRAPPED_IF_TRUE(true))), (bool(bool(_GLF_WRAPPED_IF_TRUE(true)))) || false)))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))).y))))
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           barrier();
          }
        }
      }
     else
      {
      }
    }
   else
    {
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true, true)))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (-50367 & 0)); _injected_loop_counter --)
      {
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
uint subgroup_size = 16;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, ! (! (true))), false, false, true)))), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bool(true), (_GLF_IDENTITY(bool(true), bool(bvec4(_GLF_IDENTITY(bool(true), ! (! (bool(true)))), true, false, true)))) && _GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec3(true, true, true)))) || false)), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(true), _GLF_IDENTITY((bool(true)), ! (! ((bool(true))))) && true), _GLF_IDENTITY(true && (_GLF_IDENTITY(bool(true), (bool(true)) && true)), ! (! (_GLF_IDENTITY(true && (_GLF_IDENTITY(bool(true), (bool(true)) && true)), (true && (_GLF_IDENTITY(_GLF_IDENTITY(bool(true), bool(bvec3(bool(true), false, false))), (bool(true)) && true))) || false)))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(true), _GLF_IDENTITY((bool(true)), ! (! ((bool(true))))) && true), _GLF_IDENTITY(true && (_GLF_IDENTITY(bool(true), (bool(true)) && true)), ! (! (_GLF_IDENTITY(true && (_GLF_IDENTITY(bool(true), (bool(true)) && true)), (true && (_GLF_IDENTITY(_GLF_IDENTITY(bool(true), bool(bvec3(bool(true), false, false))), (bool(true)) && true))) || false)))))), bool(bvec2(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(true), _GLF_IDENTITY((bool(true)), ! (! ((bool(true))))) && true), _GLF_IDENTITY(true && (_GLF_IDENTITY(bool(true), (bool(true)) && true)), ! (! (_GLF_IDENTITY(true && (_GLF_IDENTITY(bool(true), (bool(true)) && true)), (true && (_GLF_IDENTITY(_GLF_IDENTITY(bool(true), bool(bvec3(bool(true), false, false))), (bool(true)) && true))) || false)))))), false)))), _GLF_IDENTITY(bool(bvec4(! (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(true), _GLF_IDENTITY((bool(true)), ! (! ((bool(true))))) && true), _GLF_IDENTITY(true && (_GLF_IDENTITY(bool(true), (bool(true)) && true)), ! (! (_GLF_IDENTITY(true && (_GLF_IDENTITY(bool(true), (bool(true)) && true)), (true && (_GLF_IDENTITY(_GLF_IDENTITY(bool(true), bool(bvec3(bool(true), false, false))), (bool(true)) && true))) || false)))))), bool(bvec2(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(true), _GLF_IDENTITY((bool(true)), ! (! ((bool(true))))) && true), _GLF_IDENTITY(true && (_GLF_IDENTITY(bool(true), (bool(true)) && true)), ! (! (_GLF_IDENTITY(true && (_GLF_IDENTITY(bool(true), (bool(true)) && true)), (true && (_GLF_IDENTITY(_GLF_IDENTITY(bool(true), bool(bvec3(bool(true), false, false))), (bool(true)) && true))) || false)))))), false)))), true, false, false)), bool(bvec2(bool(bvec4(! (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(true), _GLF_IDENTITY((bool(true)), ! (! ((bool(true))))) && true), _GLF_IDENTITY(true && (_GLF_IDENTITY(bool(true), (bool(true)) && true)), ! (! (_GLF_IDENTITY(true && (_GLF_IDENTITY(bool(true), (bool(true)) && true)), (true && (_GLF_IDENTITY(_GLF_IDENTITY(bool(true), bool(bvec3(bool(true), false, false))), (bool(true)) && true))) || false)))))), bool(bvec2(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(true), _GLF_IDENTITY((bool(true)), ! (! ((bool(true))))) && true), _GLF_IDENTITY(true && (_GLF_IDENTITY(bool(true), (bool(true)) && true)), ! (! (_GLF_IDENTITY(true && (_GLF_IDENTITY(bool(true), (bool(true)) && true)), (true && (_GLF_IDENTITY(_GLF_IDENTITY(bool(true), bool(bvec3(bool(true), false, false))), (bool(true)) && true))) || false)))))), false)))), true, false, false)), false)))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), true, false)), ! (_GLF_IDENTITY(! (bool(bvec3(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, ! (! (true))), false, false, true)))), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bool(true), (_GLF_IDENTITY(bool(true), bool(bvec4(_GLF_IDENTITY(bool(true), ! (! (bool(true)))), true, false, true)))) && _GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec3(true, true, true)))) || false)), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(true), _GLF_IDENTITY((bool(true)), ! (! ((bool(true))))) && true), _GLF_IDENTITY(true && (_GLF_IDENTITY(bool(true), (bool(true)) && true)), ! (! (_GLF_IDENTITY(true && (_GLF_IDENTITY(bool(true), (bool(true)) && true)), (true && (_GLF_IDENTITY(_GLF_IDENTITY(bool(true), bool(bvec3(bool(true), false, false))), (bool(true)) && true))) || false)))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(true), _GLF_IDENTITY((bool(true)), ! (! ((bool(true))))) && true), _GLF_IDENTITY(true && (_GLF_IDENTITY(bool(true), (bool(true)) && true)), ! (! (_GLF_IDENTITY(true && (_GLF_IDENTITY(bool(true), (bool(true)) && true)), (true && (_GLF_IDENTITY(_GLF_IDENTITY(bool(true), bool(bvec3(bool(true), false, false))), (bool(true)) && true))) || false)))))), bool(bvec2(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(true), _GLF_IDENTITY((bool(true)), ! (! ((bool(true))))) && true), _GLF_IDENTITY(true && (_GLF_IDENTITY(bool(true), (bool(true)) && true)), ! (! (_GLF_IDENTITY(true && (_GLF_IDENTITY(bool(true), (bool(true)) && true)), (true && (_GLF_IDENTITY(_GLF_IDENTITY(bool(true), bool(bvec3(bool(true), false, false))), (bool(true)) && true))) || false)))))), false)))), _GLF_IDENTITY(bool(bvec4(! (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(true), _GLF_IDENTITY((bool(true)), ! (! ((bool(true))))) && true), _GLF_IDENTITY(true && (_GLF_IDENTITY(bool(true), (bool(true)) && true)), ! (! (_GLF_IDENTITY(true && (_GLF_IDENTITY(bool(true), (bool(true)) && true)), (true && (_GLF_IDENTITY(_GLF_IDENTITY(bool(true), bool(bvec3(bool(true), false, false))), (bool(true)) && true))) || false)))))), bool(bvec2(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(true), _GLF_IDENTITY((bool(true)), ! (! ((bool(true))))) && true), _GLF_IDENTITY(true && (_GLF_IDENTITY(bool(true), (bool(true)) && true)), ! (! (_GLF_IDENTITY(true && (_GLF_IDENTITY(bool(true), (bool(true)) && true)), (true && (_GLF_IDENTITY(_GLF_IDENTITY(bool(true), bool(bvec3(bool(true), false, false))), (bool(true)) && true))) || false)))))), false)))), true, false, false)), bool(bvec2(bool(bvec4(! (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(true), _GLF_IDENTITY((bool(true)), ! (! ((bool(true))))) && true), _GLF_IDENTITY(true && (_GLF_IDENTITY(bool(true), (bool(true)) && true)), ! (! (_GLF_IDENTITY(true && (_GLF_IDENTITY(bool(true), (bool(true)) && true)), (true && (_GLF_IDENTITY(_GLF_IDENTITY(bool(true), bool(bvec3(bool(true), false, false))), (bool(true)) && true))) || false)))))), bool(bvec2(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(true), _GLF_IDENTITY((bool(true)), ! (! ((bool(true))))) && true), _GLF_IDENTITY(true && (_GLF_IDENTITY(bool(true), (bool(true)) && true)), ! (! (_GLF_IDENTITY(true && (_GLF_IDENTITY(bool(true), (bool(true)) && true)), (true && (_GLF_IDENTITY(_GLF_IDENTITY(bool(true), bool(bvec3(bool(true), false, false))), (bool(true)) && true))) || false)))))), false)))), true, false, false)), false)))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), true, false))), bool(bvec3(! (bool(bvec3(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, ! (! (true))), false, false, true)))), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bool(true), (_GLF_IDENTITY(bool(true), bool(bvec4(_GLF_IDENTITY(bool(true), ! (! (bool(true)))), true, false, true)))) && _GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec3(true, true, true)))) || false)), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(true), _GLF_IDENTITY((bool(true)), ! (! ((bool(true))))) && true), _GLF_IDENTITY(true && (_GLF_IDENTITY(bool(true), (bool(true)) && true)), ! (! (_GLF_IDENTITY(true && (_GLF_IDENTITY(bool(true), (bool(true)) && true)), (true && (_GLF_IDENTITY(_GLF_IDENTITY(bool(true), bool(bvec3(bool(true), false, false))), (bool(true)) && true))) || false)))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(true), _GLF_IDENTITY((bool(true)), ! (! ((bool(true))))) && true), _GLF_IDENTITY(true && (_GLF_IDENTITY(bool(true), (bool(true)) && true)), ! (! (_GLF_IDENTITY(true && (_GLF_IDENTITY(bool(true), (bool(true)) && true)), (true && (_GLF_IDENTITY(_GLF_IDENTITY(bool(true), bool(bvec3(bool(true), false, false))), (bool(true)) && true))) || false)))))), bool(bvec2(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(true), _GLF_IDENTITY((bool(true)), ! (! ((bool(true))))) && true), _GLF_IDENTITY(true && (_GLF_IDENTITY(bool(true), (bool(true)) && true)), ! (! (_GLF_IDENTITY(true && (_GLF_IDENTITY(bool(true), (bool(true)) && true)), (true && (_GLF_IDENTITY(_GLF_IDENTITY(bool(true), bool(bvec3(bool(true), false, false))), (bool(true)) && true))) || false)))))), false)))), _GLF_IDENTITY(bool(bvec4(! (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(true), _GLF_IDENTITY((bool(true)), ! (! ((bool(true))))) && true), _GLF_IDENTITY(true && (_GLF_IDENTITY(bool(true), (bool(true)) && true)), ! (! (_GLF_IDENTITY(true && (_GLF_IDENTITY(bool(true), (bool(true)) && true)), (true && (_GLF_IDENTITY(_GLF_IDENTITY(bool(true), bool(bvec3(bool(true), false, false))), (bool(true)) && true))) || false)))))), bool(bvec2(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(true), _GLF_IDENTITY((bool(true)), ! (! ((bool(true))))) && true), _GLF_IDENTITY(true && (_GLF_IDENTITY(bool(true), (bool(true)) && true)), ! (! (_GLF_IDENTITY(true && (_GLF_IDENTITY(bool(true), (bool(true)) && true)), (true && (_GLF_IDENTITY(_GLF_IDENTITY(bool(true), bool(bvec3(bool(true), false, false))), (bool(true)) && true))) || false)))))), false)))), true, false, false)), bool(bvec2(bool(bvec4(! (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(true), _GLF_IDENTITY((bool(true)), ! (! ((bool(true))))) && true), _GLF_IDENTITY(true && (_GLF_IDENTITY(bool(true), (bool(true)) && true)), ! (! (_GLF_IDENTITY(true && (_GLF_IDENTITY(bool(true), (bool(true)) && true)), (true && (_GLF_IDENTITY(_GLF_IDENTITY(bool(true), bool(bvec3(bool(true), false, false))), (bool(true)) && true))) || false)))))), bool(bvec2(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(true), _GLF_IDENTITY((bool(true)), ! (! ((bool(true))))) && true), _GLF_IDENTITY(true && (_GLF_IDENTITY(bool(true), (bool(true)) && true)), ! (! (_GLF_IDENTITY(true && (_GLF_IDENTITY(bool(true), (bool(true)) && true)), (true && (_GLF_IDENTITY(_GLF_IDENTITY(bool(true), bool(bvec3(bool(true), false, false))), (bool(true)) && true))) || false)))))), false)))), true, false, false)), false)))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), true, false))), true, true))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 0)); _injected_loop_counter --)
      {
       barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
      }
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false, false))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], (false ? _GLF_FUZZED(8.8) : (injectionSwitch)[0])), (injectionSwitch)[1]), vec2(_GLF_FUZZED(990.180), _GLF_FUZZED((true ? -4.7 : -7.1))), bvec2(false, false))).y)), false, false, false)))) || false)))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))))
    barrier();
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), false, false))))), bool(bool(_GLF_IDENTITY(false, bool(bvec3(false, false, true))))))), true && (! (_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, bool(bvec3(false, false, true))))))))))), true && (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, bool(bvec3(false, false, true))))))), _GLF_IDENTITY(true, ! (! (true))) && (! (_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, bool(bvec3(false, false, true))))))))))))), (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! _GLF_IDENTITY((! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ((! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (! (true)) || false))))))) && true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 uint workgroup_size = _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, uvec3(uvec3(gl_WorkGroupSize))), (_GLF_IDENTITY(gl_WorkGroupSize, uvec3(uvec3(gl_WorkGroupSize)))) | (_GLF_IDENTITY(gl_WorkGroupSize, uvec3(uvec3(gl_WorkGroupSize))))).x;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), ! (! (_GLF_IDENTITY(false, bool(bool(false))))))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))) - _GLF_IDENTITY(sqrt(vec2(0.0, 0.0)), (true ? sqrt(vec2(0.0, 0.0)) : _GLF_FUZZED(injectionSwitch)))).y)), (_GLF_IDENTITY(_GLF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(! (! (_GLF_IDENTITY(true, ! (! (true))))), true && (! (! (_GLF_IDENTITY(true, ! (! (true)))))))), (injectionSwitch.x < injectionSwitch.y)), bool(bvec2(_GLF_TRUE(_GLF_IDENTITY(true, (true) || false), (injectionSwitch.x < injectionSwitch.y)), true)))) && true)))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       do
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))));
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) | _GLF_IDENTITY(0, 0 | (0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             barrier();
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))))
      barrier();
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(9905.1102) : _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0))), injectionSwitch.x)) < injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), false || (_GLF_WRAPPED_IF_FALSE(false))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), ((injectionSwitch) * mat2(1.0)) * vec2(1.0, 1.0))).x, float(float(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), ((injectionSwitch) * mat2(1.0)) * vec2(1.0, 1.0))).x))) > injectionSwitch.y))))
        {
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0), (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((injectionSwitch.x) * 1.0, max(_GLF_IDENTITY((injectionSwitch.x) * 1.0, (false ? _GLF_FUZZED(401.739) : (injectionSwitch.x) * 1.0)), _GLF_IDENTITY((injectionSwitch.x) * 1.0, float(_GLF_IDENTITY(vec4((injectionSwitch.x) * 1.0, 1.0, 0.0, tan(0.0)), clamp(vec4((injectionSwitch.x) * 1.0, 1.0, 0.0, tan(0.0)), vec4((injectionSwitch.x) * 1.0, 1.0, 0.0, tan(0.0)), vec4((injectionSwitch.x) * 1.0, 1.0, 0.0, tan(0.0)))))))))) - _GLF_IDENTITY(dot(vec4(0.0, 1.0, 1.0, 1.0), vec4(1.0, 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)))), dot(vec4(0.0, 1.0, 1.0, 1.0), vec4(1.0, 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)))))) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, determinant(mat4(0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, abs(0.0))) + (_GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat4x3(injectionSwitch.y, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 0.0, 1.0, tan(0.0), _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0)))), transpose(transpose(mat4x3(injectionSwitch.y, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 0.0, 1.0, tan(0.0), _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0))))))))))), min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))), _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0), mix(float(_GLF_FUZZED(-60.12)), float(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)))).y), bool(true)))) - 0.0)))), false || (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x, _GLF_IDENTITY((injectionSwitch.x) * 1.0, max(_GLF_IDENTITY((injectionSwitch.x) * 1.0, (false ? _GLF_FUZZED(401.739) : (injectionSwitch.x) * 1.0)), _GLF_IDENTITY((injectionSwitch.x) * 1.0, float(_GLF_IDENTITY(vec4((injectionSwitch.x) * 1.0, 1.0, 0.0, tan(0.0)), clamp(vec4((injectionSwitch.x) * 1.0, 1.0, 0.0, tan(0.0)), vec4((injectionSwitch.x) * 1.0, 1.0, 0.0, tan(0.0)), vec4((injectionSwitch.x) * 1.0, 1.0, 0.0, _GLF_IDENTITY(tan(0.0), (tan(0.0)) / 1.0)))))))))) - _GLF_IDENTITY(dot(vec4(0.0, 1.0, 1.0, 1.0), vec4(1.0, 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)))), dot(vec4(0.0, 1.0, 1.0, 1.0), vec4(1.0, 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)))))) > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).y, _GLF_IDENTITY(clamp(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, determinant(mat4(0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, abs(0.0))) + (_GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat4x3(injectionSwitch.y, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 0.0, 1.0, tan(0.0), _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0)))), transpose(transpose(mat4x3(injectionSwitch.y, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 0.0, 1.0, tan(0.0), _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0))))))))))), min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))), _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), clamp(clamp(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, determinant(mat4(0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, abs(0.0))) + (_GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat4x3(injectionSwitch.y, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 0.0, 1.0, tan(0.0), _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0)))), transpose(transpose(mat4x3(injectionSwitch.y, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 0.0, 1.0, tan(0.0), _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0))))))))))), min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))), _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), clamp(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, determinant(mat4(0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, abs(0.0))) + (_GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat4x3(injectionSwitch.y, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 0.0, 1.0, tan(0.0), _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0)))), transpose(transpose(mat4x3(injectionSwitch.y, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 0.0, 1.0, tan(0.0), _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0))))))))))), min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))), _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), clamp(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, determinant(mat4(0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, abs(0.0))) + (_GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat4x3(injectionSwitch.y, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 0.0, 1.0, tan(0.0), _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0)))), transpose(transpose(mat4x3(injectionSwitch.y, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 0.0, 1.0, tan(0.0), _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0))))))))))), min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))), _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0), mix(float(_GLF_FUZZED(-60.12)), float(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)))).y), bool(true)))) - 0.0, (true ? (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0), mix(float(_GLF_FUZZED(-60.12)), float(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)))).y), bool(true)))) - 0.0 : _GLF_FUZZED(-6013.6480))))))))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  barrier();
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, workgroup_base)) + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size), 0u + (_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, max(subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id * subgroup_size, max(subgroup_id * subgroup_size, subgroup_id * subgroup_size)))), 0u ^ (_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), max(subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id * subgroup_size, max(subgroup_id * subgroup_size, subgroup_id * subgroup_size)))))), 0u + (_GLF_IDENTITY(subgroup_id * subgroup_size, max(subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id * subgroup_size, max(subgroup_id * subgroup_size, subgroup_id * subgroup_size)))))) + _GLF_IDENTITY(((subgroup_local_id + _GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) | (1))) % subgroup_size), _GLF_IDENTITY((((subgroup_local_id + 1) % subgroup_size)), 1u * ((((subgroup_local_id + 1) % subgroup_size)))) | 0u), clamp(_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, clamp(_GLF_IDENTITY(subgroup_id, uint(uvec2(subgroup_id, 1u))), subgroup_id, subgroup_id)) * _GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) << uint(_GLF_ZERO(0.0, injectionSwitch.x))))), clamp(_GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)) + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size)) + ((_GLF_IDENTITY(subgroup_local_id, (true ? subgroup_local_id : _GLF_FUZZED(subgroup_local_id))) + 1) % subgroup_size), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size), (workgroup_base + subgroup_id * subgroup_size + ((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, uint(uvec4(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u), 1u, _GLF_IDENTITY(0u, (0u) / 1u), 0u)))) | (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u))) + 1) % subgroup_size)) + 0u), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), min(((subgroup_local_id + 1) % subgroup_size), ((subgroup_local_id + 1) % subgroup_size))), (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) >> 0u) + ((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, uint(uvec4(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u), 1u, _GLF_IDENTITY(0u, (0u) / 1u), 0u)))) | (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u))) + 1) % subgroup_size)) + 0u), uint(uint(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size), (workgroup_base + subgroup_id * subgroup_size + ((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u), 1u, _GLF_IDENTITY(0u, (0u) / 1u), 0u), uvec4(0u, 0u, 0u, 0u) | (_GLF_IDENTITY(uvec4(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u), 1u, _GLF_IDENTITY(0u, (0u) / 1u), 0u), clamp(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u), 1u, _GLF_IDENTITY(0u, (0u) / 1u), 0u), (false ? _GLF_FUZZED(uvec4(39594u, 56913u, 42390u, 128683u)) : uvec4(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u), 1u, _GLF_IDENTITY(0u, (0u) / 1u), 0u))), _GLF_IDENTITY(uvec4(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u), 1u, _GLF_IDENTITY(0u, (0u) / 1u), 0u), (uvec4(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u), 1u, _GLF_IDENTITY(0u, (0u) / 1u), 0u)) - uvec4(0u, 0u, 0u, 0u)), _GLF_IDENTITY(uvec4(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u), 1u, _GLF_IDENTITY(0u, (0u) / 1u), 0u), uvec4(0u, 0u, 0u, 0u) | (uvec4(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u), 1u, _GLF_IDENTITY(0u, (0u) / 1u), 0u)))))))))) | (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u))) + 1) % subgroup_size)) + 0u))))) ^ 0u), workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size)))));
 _GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid] = 1, (buf[virtual_gid] = 1) * ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u)))), ~ (~ _GLF_IDENTITY(_GLF_IDENTITY((buf[virtual_gid] = 1), ((buf[virtual_gid] = 1)) >> 0u), 0u | ((buf[virtual_gid] = 1)))));
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec2(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y)), true)))))
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
                barrier();
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY(1, max(1, 1)) & 1)); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(false))
                    {
                     for(int _injected_loop_counter = (1 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                      {
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
                        {
                        }
                       else
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         barrier();
                         if(_GLF_DEAD(false))
                          barrier();
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                        }
                      }
                    }
                   barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               barrier();
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(true, (true) || false)))), (injectionSwitch.x < injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false)))));
            }
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], float(mat4x3(_GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) * 1.0), 1.0, 0.0, 0.0, cos(0.0), 0.0, sqrt(0.0), 0.0, 1.0, 1.0, 1.0, 1.0))), injectionSwitch[1])).y))), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], float(mat4x3(_GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) * 1.0), 1.0, 0.0, 0.0, cos(0.0), 0.0, sqrt(0.0), 0.0, 1.0, 1.0, 1.0, 1.0))), injectionSwitch[1])).y))), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], float(mat4x3(_GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) * 1.0), 1.0, 0.0, 0.0, cos(0.0), 0.0, sqrt(0.0), 0.0, 1.0, 1.0, 1.0, 1.0))), injectionSwitch[1])).y))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (! (bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], float(mat4x3(_GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) * 1.0), 1.0, 0.0, 0.0, cos(0.0), 0.0, sqrt(0.0), 0.0, 1.0, 1.0, 1.0, 1.0))), injectionSwitch[1])).y))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), true && (_GLF_IDENTITY(bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], float(mat4x3(_GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) * 1.0), 1.0, 0.0, 0.0, cos(0.0), 0.0, sqrt(0.0), 0.0, 1.0, 1.0, 1.0, 1.0))), injectionSwitch[1])).y))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (! (bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], float(mat4x3(_GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) * 1.0), 1.0, 0.0, 0.0, cos(0.0), 0.0, sqrt(0.0), 0.0, 1.0, 1.0, 1.0, 1.0))), injectionSwitch[1])).y))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))), false))))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(false))), (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
      }
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), true && (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))))));
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
            barrier();
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             do
              {
               do
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   barrier();
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(! (! (true)), bool(_GLF_IDENTITY(bool(! (! (true))), ! (! (bool(! (! (true)))))))))))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))), injectionSwitch.y, injectionSwitch.y))))))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((injectionSwitch.x < injectionSwitch.y)))) || false))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         barrier();
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                        }
                       else
                        {
                        }
                      }
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                      barrier();
                    }
                   barrier();
                   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(false))))
                    barrier();
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false)))))
                      barrier();
                    }
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y)), ! (_GLF_IDENTITY(! (_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))), (! (_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y)))) && true)))); _injected_loop_counter ++)
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    {
                     do
                      {
                       barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       barrier();
                      }
                     else
                      {
                      }
                    }
                  }
                }
               for(int _injected_loop_counter = _GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, int(ivec4(1, 1, 1, 0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(0, _GLF_IDENTITY((0) | _GLF_IDENTITY((0), _GLF_IDENTITY((_GLF_IDENTITY((0), clamp((0), (0), (0)))), 1 * ((_GLF_IDENTITY((0), clamp((0), (0), (0)))))) + (0 | 0)), clamp((_GLF_IDENTITY(0, _GLF_IDENTITY(_GLF_IDENTITY((0), (_GLF_IDENTITY((0), min((0), (0)))) / 1), _GLF_IDENTITY(((0)), (false ? _GLF_FUZZED(_injected_loop_counter) : ((0)))) << 0) * 1)) | _GLF_IDENTITY((0), (_GLF_IDENTITY((0), clamp((0), (0), (0)))) + (0 | 0)), (0) | _GLF_IDENTITY((0), (_GLF_IDENTITY((0), _GLF_IDENTITY(clamp((_GLF_IDENTITY(0, (0) * 1)), (0), (0)), ~ (~ (_GLF_IDENTITY(clamp((0), (0), (0)), int(_GLF_IDENTITY(int(_GLF_IDENTITY(clamp((0), (0), (0)), (clamp((0), (0), (0))) >> 0)), _GLF_IDENTITY((int(_GLF_IDENTITY(clamp((0), (0), (0)), (clamp((0), (0), (0))) >> 0))) << 0, int(_GLF_IDENTITY(int((int(_GLF_IDENTITY(clamp((0), (0), (0)), (clamp((0), (0), (0))) >> 0))) << 0), 1 * (int((int(_GLF_IDENTITY(clamp((0), (0), (0)), (clamp((0), (0), (0))) >> 0))) << 0))))))))))))) + (0 | _GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, ~ (~ _GLF_IDENTITY((0), ((0)) - 0))))))), _GLF_IDENTITY((0) | _GLF_IDENTITY((0), (_GLF_IDENTITY((0), clamp((0), (0), (0)))) + (0 | 0)), (_GLF_IDENTITY((0) | _GLF_IDENTITY((0), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((0), max((0), (0))), clamp((_GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(0, 0))) | 0)), (0), (0)))) + (0 | 0), max(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((0), max((0), (0))), clamp((_GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(0, 0))) | 0)), (0), (0)))) + (0 | 0), min((_GLF_IDENTITY(_GLF_IDENTITY((0), max((0), (0))), clamp((_GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(0, 0))) | 0)), (0), (0)))) + (0 | 0), (_GLF_IDENTITY(_GLF_IDENTITY((0), max((0), (0))), clamp((_GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(0, 0))) | 0)), (0), (0)))) + (0 | 0))), (_GLF_IDENTITY(_GLF_IDENTITY((0), max((0), (0))), clamp((_GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(0, 0))) | 0)), (0), (0)))) + (0 | 0)))), 0 | ((0) | _GLF_IDENTITY((0), (_GLF_IDENTITY(_GLF_IDENTITY((0), min((0), (0))), clamp((_GLF_IDENTITY(0, (0) | (0))), (0), (0)))) + (0 | 0))))) * 1))))), ((_GLF_IDENTITY(0, _GLF_IDENTITY((0) | _GLF_IDENTITY((0), _GLF_IDENTITY((_GLF_IDENTITY((0), clamp((0), (0), (0)))), 1 * ((_GLF_IDENTITY((_GLF_IDENTITY(0, int(_GLF_IDENTITY(ivec4(0, 1, int(_GLF_ONE(1.0, injectionSwitch.y)), 0), (ivec4(0, 1, int(_GLF_ONE(1.0, injectionSwitch.y)), 0)) << ivec4(0, 0, 0, 0))))), clamp((0), (0), (0)))))) + (0 | 0)), clamp((_GLF_IDENTITY(0, _GLF_IDENTITY(_GLF_IDENTITY((0), (_GLF_IDENTITY((0), min((0), (0)))) / 1), ((0)) << 0) * 1)) | _GLF_IDENTITY((0), (_GLF_IDENTITY((0), clamp((0), (0), (0)))) + _GLF_IDENTITY((0 | 0), 0 ^ ((0 | 0)))), (0) | _GLF_IDENTITY((0), (_GLF_IDENTITY((0), _GLF_IDENTITY(clamp((_GLF_IDENTITY(0, (0) * 1)), (0), (0)), ~ (~ (_GLF_IDENTITY(clamp((0), (0), (0)), int(_GLF_IDENTITY(int(_GLF_IDENTITY(clamp((0), (0), (0)), (clamp((0), (0), (0))) >> 0)), (int(_GLF_IDENTITY(clamp((0), (0), (0)), (clamp((0), _GLF_IDENTITY((0), ((0)) + 0), (0))) >> 0))) << 0)))))))) + (_GLF_IDENTITY(0, 0 | (0)) | _GLF_IDENTITY(0, max(0, _GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (0))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (0))), ~ (~ (_GLF_IDENTITY(0, ~ (~ (0)))))), _GLF_IDENTITY(0, ~ (~ (0))), _GLF_IDENTITY(0, ~ (~ (0))))))))), _GLF_IDENTITY(_GLF_IDENTITY((0), ((0)) / 1) | _GLF_IDENTITY(_GLF_IDENTITY((0), (_GLF_IDENTITY((0), clamp((0), (0), (0)))) + (0 | 0)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY((0), (_GLF_IDENTITY((0), clamp((0), (0), (0)))) + (0 | 0)), min(_GLF_IDENTITY((0), (_GLF_IDENTITY((0), clamp((0), (0), (0)))) + (0 | 0)), _GLF_IDENTITY((0), (_GLF_IDENTITY((0), clamp((0), (0), (0)))) + (0 | 0))))))), (_GLF_IDENTITY((0) | _GLF_IDENTITY((0), (_GLF_IDENTITY(_GLF_IDENTITY((0), max((0), (0))), clamp((_GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(0, 0))) | 0)), (0), (0)))) + (0 | 0)), _GLF_IDENTITY(0 | ((0) | _GLF_IDENTITY((0), (_GLF_IDENTITY(_GLF_IDENTITY((0), min((0), (0))), clamp((_GLF_IDENTITY(0, (0) | (0))), (0), (0)))) + (0 | 0))), int(ivec3(0 | ((0) | _GLF_IDENTITY((0), (_GLF_IDENTITY(_GLF_IDENTITY((0), min((0), (0))), clamp((_GLF_IDENTITY(0, (0) | (0))), (0), (0)))) + (0 | 0))), 0, 1))))) * 1)))))) * 1)))); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 if(subgroup_local_id + 1 < subgroup_size)
                  {
                   atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
                   do
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                         if(_GLF_DEAD(false))
                          barrier();
                         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          {
                          }
                         else
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                          }
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), true && (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec4(_GLF_WRAPPED_IF_FALSE(false), false, true, false))))))
                            {
                            }
                           else
                            {
                             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                              {
                               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                {
                                }
                               else
                                {
                                 if(_GLF_DEAD(false))
                                  barrier();
                                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                  barrier();
                                }
                               if(_GLF_DEAD(false))
                                barrier();
                               barrier();
                              }
                            }
                           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY(int(1), (0 & 5937) ^ (int(1))), (true ? int(1) : _GLF_FUZZED(-65148)))))); _injected_loop_counter --)
                            {
                             if(_GLF_DEAD(false))
                              barrier();
                             do
                              {
                               if(_GLF_DEAD(false))
                                barrier();
                              }
                             while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false)))));
                             if(_GLF_DEAD(false))
                              barrier();
                             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                              {
                               for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_injected_loop_counter < 1, true && (_injected_loop_counter < 1)), true, false, true)), ! (! (bool(bvec4(_GLF_IDENTITY(_injected_loop_counter < 1, true && (_injected_loop_counter < 1)), true, false, true))))), (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_injected_loop_counter < 1, true && (_injected_loop_counter < 1)), true, false, true)), ! (! (bool(bvec4(_GLF_IDENTITY(_injected_loop_counter < 1, true && (_injected_loop_counter < 1)), true, false, true))))), bool(bool(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_injected_loop_counter < 1, true && (_injected_loop_counter < 1)), true, false, true)), ! (! (bool(bvec4(_GLF_IDENTITY(_injected_loop_counter < 1, true && (_injected_loop_counter < 1)), true, false, true))))))))) && true))); _injected_loop_counter ++)
                                {
                                 barrier();
                                }
                              }
                            }
                           if(_GLF_DEAD(false))
                            {
                             do
                              {
                               if(_GLF_DEAD(false))
                                {
                                 if(_GLF_DEAD(false))
                                  barrier();
                                 barrier();
                                }
                              }
                             while(_GLF_WRAPPED_LOOP(false));
                             barrier();
                             if(_GLF_DEAD(false))
                              barrier();
                            }
                          }
                         if(_GLF_DEAD(false))
                          barrier();
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                           if(_GLF_DEAD(false))
                            barrier();
                          }
                         if(_GLF_DEAD(false))
                          barrier();
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                         barrier();
                        }
                      }
                    }
                   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec2(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false)))))))));
                   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))
                    barrier();
                   do
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       do
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                     else
                      {
                      }
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter ++)
                      {
                       subgroupAll(false);
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 else
                  {
                   do
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         atomicStore(buf[next_virtual_gid], uint(2), 4, _GLF_IDENTITY(64, (_GLF_IDENTITY(true ? 64 : _GLF_IDENTITY(_GLF_FUZZED(-94915), int(_GLF_IDENTITY(ivec3(_GLF_FUZZED(-94915), _GLF_IDENTITY(1, (1) | (1)), ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)))), ~ (_GLF_IDENTITY(~ (ivec3(_GLF_FUZZED(-94915), _GLF_IDENTITY(1, (1) | (1)), ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))))), (~ (ivec3(_GLF_FUZZED(-94915), _GLF_IDENTITY(1, (1) | (1)), ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)))))) - ivec3(0, 0, 0)))))), min(true ? 64 : _GLF_FUZZED(-94915), true ? 64 : _GLF_FUZZED(-94915))))), 4);
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       else
                        {
                        }
                      }
                     else
                      {
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   else
                    {
                    }
                   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     subgroupAll(_GLF_IDENTITY(true, ! (! (true))));
                    }
                   else
                    {
                    }
                   do
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                      barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
             for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y))))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
              barrier();
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
      }
    }
   else
    {
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)))), bool(bool(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)))))))) && _GLF_IDENTITY(true, (true) || false))))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), bool(bool(! (false))))))))
    barrier();
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), bool(bvec4(_GLF_DEAD(false), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   else
    {
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))
          barrier();
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
}
