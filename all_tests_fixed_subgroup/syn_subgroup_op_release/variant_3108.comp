#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), ! (! (false))), false || _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bool(false)))), (_GLF_IDENTITY((_GLF_IDENTITY(false, bool(bool(false)))), (_GLF_IDENTITY((_GLF_IDENTITY(false, bool(bool(false)))), bool(bvec3((_GLF_IDENTITY(false, bool(bool(false)))), false, false)))) && true)) && true))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), false || _GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)), bool(bvec4((_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false)), false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))), false))))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true))), (false) || _GLF_IDENTITY(false, (false) && true)), false || _GLF_IDENTITY((_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) || false))), bool(bvec4((_GLF_IDENTITY(false, (false) || false)), false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false))), false || (bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))))), false)))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) || false), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))).y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-2.9), _GLF_FUZZED(-4.7)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-1.9))) < injectionSwitch.y)), true))), length(vec2(0.0, 0.0)), 1.0, 0.0, 1.0, 1.0, log(1.0), 0.0)), clamp(vec2(mat3(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-2.9), _GLF_FUZZED(-4.7)), vec2((_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)))[0], _GLF_IDENTITY((injectionSwitch)[1], float(mat4x2((injectionSwitch)[1], 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, log(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(vec3(-295.213, -726.445, -21.51).g), _GLF_IDENTITY((injectionSwitch)[1], (true ? _GLF_IDENTITY((injectionSwitch)[1], float(vec3((injectionSwitch)[1], 1.0, 0.0))) : _GLF_FUZZED(8420.6078)))), vec2((injectionSwitch)[0], _GLF_FUZZED((+ -840.290))), bvec2(true, false))).y, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(vec3(-295.213, -726.445, -21.51).g), _GLF_IDENTITY((injectionSwitch)[1], (true ? _GLF_IDENTITY((injectionSwitch)[1], float(vec3((injectionSwitch)[1], 1.0, 0.0))) : _GLF_FUZZED(8420.6078)))), vec2((injectionSwitch)[0], _GLF_FUZZED((+ -840.290))), bvec2(true, false))).y, clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(vec3(-295.213, -726.445, -21.51).g), _GLF_IDENTITY((injectionSwitch)[1], (true ? _GLF_IDENTITY((injectionSwitch)[1], float(vec3((injectionSwitch)[1], 1.0, 0.0))) : _GLF_FUZZED(8420.6078)))), vec2((injectionSwitch)[0], _GLF_FUZZED((+ -840.290))), bvec2(true, false))).y, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(vec3(-295.213, -726.445, -21.51).g), _GLF_IDENTITY((injectionSwitch)[1], (true ? _GLF_IDENTITY((injectionSwitch)[1], float(vec3((injectionSwitch)[1], 1.0, 0.0))) : _GLF_FUZZED(8420.6078)))), vec2((injectionSwitch)[0], _GLF_FUZZED((+ -840.290))), bvec2(true, false))).y, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(vec3(-295.213, -726.445, -21.51).g), _GLF_IDENTITY((injectionSwitch)[1], (true ? _GLF_IDENTITY((injectionSwitch)[1], float(vec3((injectionSwitch)[1], 1.0, 0.0))) : _GLF_FUZZED(8420.6078)))), vec2((injectionSwitch)[0], _GLF_FUZZED((+ -840.290))), bvec2(true, false))).y)) : _GLF_FUZZED(1.1))))))))), _GLF_IDENTITY(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), bvec2(_GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))), bvec2(bvec3(bvec2(bvec2(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))), true)))))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec2(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), bvec2(_GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))), bvec2(bvec3(bvec2(bvec2(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))), true)))))), false)))))), length(_GLF_IDENTITY(vec2(0.0, 0.0), (vec2(0.0, 0.0)) + vec2(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-4.1) : 0.0)), 0.0))), 1.0, 0.0, 1.0, 1.0, log(1.0), 0.0)), _GLF_IDENTITY(vec2(mat3(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY(_GLF_FUZZED(-2.9), (_GLF_FUZZED(-2.9)) - 0.0), _GLF_FUZZED(-4.7)), vec2((_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))[0], (injectionSwitch)[1]), bvec2(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((injectionSwitch.x < injectionSwitch.y)))), true))), length(vec2(0.0, 0.0)), 1.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0)), 1.0, 1.0, log(1.0), 0.0)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(vec2(mat3(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY(_GLF_FUZZED(-2.9), (_GLF_FUZZED(-2.9)) - 0.0), _GLF_FUZZED(-4.7)), vec2((_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))[0], (injectionSwitch)[1]), bvec2(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((injectionSwitch.x < injectionSwitch.y)))), true))), length(vec2(0.0, 0.0)), 1.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0)), 1.0, 1.0, log(1.0), 0.0)), vec2(_GLF_IDENTITY(_GLF_IDENTITY(mat3(vec2(mat3(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY(_GLF_FUZZED(-2.9), (_GLF_FUZZED(-2.9)) - 0.0), _GLF_FUZZED(-4.7)), vec2((_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))[0], (injectionSwitch)[1]), bvec2(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((injectionSwitch.x < injectionSwitch.y)))), true))), length(vec2(0.0, 0.0)), 1.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0)), 1.0, 1.0, log(1.0), 0.0)), 0.0, 0.0, 0.0, 1.0, abs(1.0), 1.0, _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), dot(vec2(0.0, 0.0), vec2(1.0, 1.0)))), (true ? mat3(vec2(mat3(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY(_GLF_FUZZED(-2.9), (_GLF_FUZZED(-2.9)) - 0.0), _GLF_FUZZED(-4.7)), vec2((_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))[0], (injectionSwitch)[1]), bvec2(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((injectionSwitch.x < injectionSwitch.y)))), true))), length(vec2(0.0, 0.0)), 1.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0)), 1.0, 1.0, log(1.0), 0.0)), 0.0, 0.0, 0.0, 1.0, abs(1.0), 1.0, _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), dot(vec2(0.0, 0.0), vec2(1.0, 1.0)))) : _GLF_FUZZED(mat3(-66.14, -3798.1488, 64.36, -4.7, -5.1, 78.37, 34.78, -8.2, 59.91)))), transpose(_GLF_IDENTITY(transpose(_GLF_IDENTITY(mat3(vec2(mat3(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY(_GLF_FUZZED(-2.9), (_GLF_FUZZED(-2.9)) - 0.0), _GLF_FUZZED(-4.7)), vec2((_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))[0], (injectionSwitch)[1]), bvec2(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((injectionSwitch.x < injectionSwitch.y)))), true))), length(vec2(0.0, 0.0)), 1.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0)), 1.0, 1.0, log(1.0), 0.0)), 0.0, 0.0, 0.0, 1.0, abs(1.0), 1.0, _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), dot(vec2(0.0, 0.0), vec2(1.0, 1.0)))), (true ? mat3(vec2(mat3(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY(_GLF_FUZZED(-2.9), (_GLF_FUZZED(-2.9)) - 0.0), _GLF_FUZZED(-4.7)), vec2((_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))[0], (injectionSwitch)[1]), bvec2(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((injectionSwitch.x < injectionSwitch.y)))), true))), length(vec2(0.0, 0.0)), 1.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0)), 1.0, 1.0, log(1.0), 0.0)), 0.0, 0.0, 0.0, 1.0, abs(1.0), 1.0, _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), dot(vec2(0.0, 0.0), vec2(1.0, 1.0)))) : _GLF_FUZZED(mat3(-66.14, -3798.1488, 64.36, -4.7, -5.1, 78.37, 34.78, -8.2, 59.91))))), transpose(transpose(transpose(_GLF_IDENTITY(mat3(vec2(mat3(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY(_GLF_FUZZED(-2.9), (_GLF_FUZZED(-2.9)) - 0.0), _GLF_FUZZED(-4.7)), vec2((_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))[0], (injectionSwitch)[1]), bvec2(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((injectionSwitch.x < injectionSwitch.y)))), true))), length(vec2(0.0, 0.0)), 1.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0)), 1.0, 1.0, log(1.0), 0.0)), 0.0, 0.0, 0.0, 1.0, abs(1.0), 1.0, _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), dot(vec2(0.0, 0.0), vec2(1.0, 1.0)))), (true ? mat3(vec2(mat3(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY(_GLF_FUZZED(-2.9), (_GLF_FUZZED(-2.9)) - 0.0), _GLF_FUZZED(-4.7)), vec2((_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))[0], (injectionSwitch)[1]), bvec2(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((injectionSwitch.x < injectionSwitch.y)))), true))), length(vec2(0.0, 0.0)), 1.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0)), 1.0, 1.0, log(1.0), 0.0)), 0.0, 0.0, 0.0, 1.0, abs(1.0), 1.0, _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), dot(vec2(0.0, 0.0), vec2(1.0, 1.0)))) : _GLF_FUZZED(mat3(-66.14, -3798.1488, 64.36, -4.7, -5.1, 78.37, 34.78, -8.2, 59.91)))))))))))) : _GLF_FUZZED(injectionSwitch))), vec2(_GLF_IDENTITY(mat3(_GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(vec2(_GLF_FUZZED(-2.9), _GLF_FUZZED(-4.7)), vec2(1.0, 1.0) * (vec2(_GLF_FUZZED(-2.9), _GLF_FUZZED(-4.7)))), vec2(_GLF_IDENTITY((injectionSwitch), (false ? _GLF_FUZZED(vec2(-1.3, 5.4)) : (injectionSwitch)))[0], (injectionSwitch)[_GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) - 0)]), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))), length(vec2(0.0, 0.0)), 1.0, 0.0, 1.0, 1.0, log(1.0), _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-2.2)), bool(false)))))), mat3(mat3x4(mat3(_GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(vec2(_GLF_FUZZED(-2.9), _GLF_FUZZED(-4.7)), vec2(1.0, 1.0) * (vec2(_GLF_FUZZED(-2.9), _GLF_FUZZED(-4.7)))), vec2(_GLF_IDENTITY((injectionSwitch), (false ? _GLF_FUZZED(vec2(-1.3, 5.4)) : (injectionSwitch)))[0], (injectionSwitch)[_GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) - 0)]), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))), length(vec2(0.0, 0.0)), 1.0, 0.0, 1.0, 1.0, log(1.0), _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-2.2)), bool(false))))))))))))).x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(float(160413u))), bool(false)))))))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        barrier();
       return;
      }
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true)), bool(_GLF_IDENTITY(bvec3(bool(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true)), true, true), bvec3(bvec3(bvec3(bool(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true)), true, true))))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false)))))), (_GLF_IDENTITY((_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false)))))), ! (! ((_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false)))))))))) || false) || _GLF_IDENTITY(false, false || (false)), false || ((false) || _GLF_IDENTITY(false, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), ! (! (bool(bvec2(false, _GLF_IDENTITY(false, false || (false)))))))) || (false))))), (false) && true)), bool(bvec2((_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, false || (false))), (false) && true)), _GLF_IDENTITY(true, false || (true))))))), _GLF_IDENTITY(_GLF_IDENTITY((false) && true, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY((false) && true, ((false) && true) || false)), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY((_GLF_IDENTITY((false) && true, ((false) && true) || false)), ! (! ((_GLF_IDENTITY((false) && true, ((false) && true) || false))))), false)), false || (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY((_GLF_IDENTITY((false) && true, ((false) && true) || false)), ! (! ((_GLF_IDENTITY((false) && true, ((false) && true) || false))))), false)), (bool(bvec2(_GLF_IDENTITY((_GLF_IDENTITY((false) && true, ((false) && true) || false)), ! (! ((_GLF_IDENTITY((false) && true, ((false) && true) || false))))), false))) || false)))), ((_GLF_IDENTITY((false) && true, ((false) && true) || false))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((false) && true, (_GLF_IDENTITY(_GLF_IDENTITY((false) && true, true && (_GLF_IDENTITY((false) && true, ((false) && true) && true))), (_GLF_IDENTITY(_GLF_IDENTITY((false) && true, bool(bvec2((false) && _GLF_IDENTITY(true, true && (true)), false))), true && (_GLF_IDENTITY(_GLF_IDENTITY((false) && true, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY((false) && true, ! (! (_GLF_IDENTITY((false) && true, true && ((false) && true))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (bool(bvec3(_GLF_IDENTITY((false) && true, ! (! (_GLF_IDENTITY((false) && true, _GLF_IDENTITY(true && ((false) && true), ! (! (_GLF_IDENTITY(true && ((false) && true), bool(bvec2(true && ((false) && true), false)))))))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) || false)), ((false) && true) && _GLF_IDENTITY(true, (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(true)), (bool(bool(true))) && true))) && true))))) && true)) || false), _GLF_IDENTITY((_GLF_IDENTITY((false) && true, ((false) && true) || _GLF_IDENTITY(false, bool(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y)) || ((_GLF_IDENTITY((false) && true, _GLF_IDENTITY(((false) && true) || false, bool(bvec4(((false) && true) || false, false, true, false))))))) && _GLF_IDENTITY(true, bool(bvec4(true, false, false, false)))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((false) && true, (_GLF_IDENTITY((false) && true, true && ((false) && true))) || false), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), ((false)) || false) && true, ((false) && true) || false)), _GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec2(false, true))))), (injectionSwitch.x > injectionSwitch.y)) || ((_GLF_IDENTITY(_GLF_IDENTITY((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((false))) && _GLF_IDENTITY(true, false || (true)), ((false) && true) || false)))) && true), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((false) && true, (_GLF_IDENTITY(_GLF_IDENTITY((false), ((false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true, true && ((false) && true))) || false), _GLF_IDENTITY((_GLF_IDENTITY((false) && true, ((false) && true) || false)), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), injectionSwitch.y)))) || ((_GLF_IDENTITY(_GLF_IDENTITY((false), ((false)) || false) && true, ((_GLF_IDENTITY(false, true && (false))) && true) || false)))) && true), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((false) && true, (_GLF_IDENTITY((false) && true, true && ((false) && true))) || false), _GLF_IDENTITY((_GLF_IDENTITY((false) && true, ((false) && true) || false)), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).x > injectionSwitch.y)) || ((_GLF_IDENTITY(_GLF_IDENTITY((false), ((false)) || false) && true, ((_GLF_IDENTITY(false, true && (false))) && true) || false)))) && true), (_GLF_IDENTITY(_GLF_IDENTITY((false) && true, (_GLF_IDENTITY((false) && true, true && ((false) && _GLF_IDENTITY(true, (true) || false)))) || false), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((false) && true, ((false) && true) || false), ((false) && true) || false)), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)) || ((_GLF_IDENTITY(_GLF_IDENTITY((false), _GLF_IDENTITY(((false)), (((false))) && true) || false) && true, ((_GLF_IDENTITY(false, true && (false))) && true) || _GLF_IDENTITY(false, false || _GLF_IDENTITY((false), ((false)) || false)))))) && _GLF_IDENTITY(true, (true) || false))) && true)) && true)) || false), _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) && true))), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((false) && true, (_GLF_IDENTITY((false) && true, true && (_GLF_IDENTITY((false) && true, bool(bool((false) && true)))))) || false), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((false), true && (_GLF_IDENTITY((false), true && ((_GLF_IDENTITY(false, false || (false))))))) && true, _GLF_IDENTITY((_GLF_IDENTITY((false), ((false)) && true) && _GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(true, true && (true)))))) || _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, _GLF_IDENTITY(true, ! (! (true))))), true && (bool(bvec2(false, true))))), bool(_GLF_IDENTITY(bvec3((_GLF_IDENTITY((false), ((false)) && true) && _GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(true, true && (true)))))) || _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, _GLF_IDENTITY(true, ! (! (true))))), true && (bool(bvec2(false, true))))), false, false), bvec3(bvec3(_GLF_IDENTITY(bvec3((_GLF_IDENTITY((false), ((false)) && true) && _GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(true, true && (true)))))) || _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, _GLF_IDENTITY(true, ! (! (true))))), true && (bool(bvec2(false, true))))), false, false), bvec3(bvec4(bvec3((_GLF_IDENTITY((false), ((false)) && true) && _GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(true, true && (true)))))) || _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, _GLF_IDENTITY(true, ! (! (true))))), true && (bool(bvec2(false, true))))), false, false), false)))))))))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))), injectionSwitch.x)) > injectionSwitch.y)) || ((_GLF_IDENTITY((false) && true, ((false) && true) || false)))) && true), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((false) && true, (_GLF_IDENTITY(_GLF_IDENTITY((false), false || ((false))) && true, _GLF_IDENTITY(true && ((false) && true), ! (! (true && ((false) && true)))))) || false), (_GLF_IDENTITY((false) && true, (_GLF_IDENTITY(_GLF_IDENTITY((false), false || (_GLF_IDENTITY((false), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false), ((false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec3(bool(_GLF_IDENTITY((false), ((false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true, true))))))) && true, _GLF_IDENTITY(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, bool(bvec3(true, false, false)))), true && (bool(_GLF_IDENTITY(true, bool(bvec3(true, false, false)))))))) && ((false) && true), ! (! (true && ((false) && true)))))) || false)) || false), _GLF_IDENTITY((_GLF_IDENTITY((false) && true, ((false) && true) || false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((_GLF_IDENTITY((false) && true, ((false) && true) || false)))) && _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! (! (true)))))))) || false), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) && true)))))), _GLF_IDENTITY((bool(bool(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) && true))))))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((bool(bool(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) && true))))))), ! (! ((bool(bool(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) && true)))))))))), true, true), _GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY((bool(bool(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) && true))))))), ! (! ((bool(bool(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) && true)))))))))), true, true))), bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY((bool(bool(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) && true))))))), ! (! ((bool(bool(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) && true)))))))))), true, true))))))))) || false))))), false, _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bool(! (true)))))))))))))))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
uint subgroup_size = 16;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(false, false, true)))) || false), (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (! (true)) && true))))))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec2(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(bvec2(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), false || (! (! _GLF_IDENTITY((false), ! (! ((false))))))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true), bool(bvec2(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y)), false)))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          return;
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
        barrier();
       if(_GLF_DEAD(false))
        return;
       return;
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, (true ? injectionSwitch.y : _GLF_FUZZED(-8949.3593)))))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)), ((injectionSwitch.x > injectionSwitch.y)) && true))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, false || (true))), true && (false))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), bool(_GLF_IDENTITY(bvec2(false, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))) || false)), bvec2(bvec4(bvec2(false, false), false, true)))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint num_workgroup = _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) >> uvec3(0u, 0u, 0u)).x, clamp(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) >> uvec3(0u, 0u, 0u)).x, _GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) >> uvec3(0u, 0u, 0u)).x, _GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) >> uvec3(0u, 0u, 0u)).x));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), bool(bvec3(bool(_GLF_DEAD(false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch.x : _GLF_FUZZED(674.585))) > injectionSwitch.y)), ! (! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (_GLF_IDENTITY(false, true && (false))), ! (! (true && (_GLF_IDENTITY(false, true && (false))))))), (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), max(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))))) - 0.0), injectionSwitch.x)), (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, true, _GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), true && (! (! (false)))))), bvec3(bvec4(_GLF_IDENTITY(bvec3(true, true, _GLF_IDENTITY(false, ! (! (false)))), bvec3(bvec3(bvec3(true, true, _GLF_IDENTITY(false, ! (! (false))))))), true))))) ? _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) : _GLF_FUZZED(65.31)))) - 0.0) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(5.1), _GLF_FUZZED(_GLF_IDENTITY(float(28321), max(float(28321), float(28321))))), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), mat2(_GLF_IDENTITY(1.0, float(mat3x2(1.0, 1.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 1.0, 1.0, 0.0)))) * (injectionSwitch)).y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
        barrier();
       barrier();
      }
     return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, false || (false)), false), bvec2(bvec2(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(bvec2(false, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false))))))))))))))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-4771.6105) : injectionSwitch.y)) : _GLF_FUZZED(-9.1))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false || (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y, false || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))), ! (! (false || (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y, false || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))))))))) || false), false, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false), _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(_GLF_IDENTITY(bvec2(bvec2(false, false)), bvec2(bvec4(bvec2(bvec2(false, false)), _GLF_IDENTITY(false, bool(bvec3(false, true, false))), true))))))), false), true)))))))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0) > injectionSwitch.y)))), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))), false || _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec3((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false)), false || (bool(bvec3((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false))))))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, float(mat3x2(_GLF_IDENTITY(injectionSwitch.y, float(mat3x2(injectionSwitch.y, 0.0, 0.0, 0.0, 1.0, 1.0))), 1.0, 0.0, 0.0, 0.0, 1.0))), max(_GLF_IDENTITY(injectionSwitch.y, float(mat3x2(_GLF_IDENTITY(injectionSwitch.y, float(mat3x2(injectionSwitch.y, 0.0, 0.0, 0.0, 1.0, 1.0))), 1.0, 0.0, 0.0, 0.0, 1.0))), _GLF_IDENTITY(injectionSwitch.y, float(mat3x2(_GLF_IDENTITY(injectionSwitch.y, float(mat3x2(injectionSwitch.y, 0.0, 0.0, 0.0, 1.0, 1.0))), 1.0, 0.0, 0.0, 0.0, 1.0)))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4x2(injectionSwitch, abs(1.0), 0.0, sin(0.0), 1.0, 0.0, cos(0.0))), (true ? vec2(mat4x2(injectionSwitch, abs(1.0), 0.0, sin(0.0), 1.0, 0.0, cos(0.0))) : _GLF_FUZZED(_GLF_IDENTITY(vec2(23.14, _GLF_IDENTITY(9.5, float(mat4x2(9.5, 1.0, 1.0, 1.0, 0.0, tan(0.0), 1.0, 0.0)))), (vec2(23.14, _GLF_IDENTITY(9.5, float(mat4x2(9.5, 1.0, 1.0, 1.0, 0.0, tan(0.0), 1.0, 0.0))))) * mat2(1.0)))))).x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && _GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)), injectionSwitch)).x > injectionSwitch.y)), false || (((_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)), injectionSwitch)).x > injectionSwitch.y))))))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), _GLF_IDENTITY(true, bool(bvec4(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true))) && (! (! (false)))))))), (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), (! (! (false))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
    }
   barrier();
  }
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize.x, 1u * (_GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY(_GLF_IDENTITY((gl_WorkGroupSize.x) | 0u, (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupSize.x, ~ (_GLF_IDENTITY(~ _GLF_IDENTITY((gl_WorkGroupSize.x), (_GLF_IDENTITY((gl_WorkGroupSize.x), clamp((gl_WorkGroupSize.x), _GLF_IDENTITY((gl_WorkGroupSize.x), ((gl_WorkGroupSize.x)) ^ 0u), (gl_WorkGroupSize.x)))) >> 0u), (~ (gl_WorkGroupSize.x)) / 1u)))), min(_GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupSize.x, ~ (_GLF_IDENTITY(~ _GLF_IDENTITY((gl_WorkGroupSize.x), (_GLF_IDENTITY((gl_WorkGroupSize.x), clamp((gl_WorkGroupSize.x), _GLF_IDENTITY((gl_WorkGroupSize.x), ((gl_WorkGroupSize.x)) ^ 0u), (gl_WorkGroupSize.x)))) >> 0u), (~ (gl_WorkGroupSize.x)) / 1u)))), max((_GLF_IDENTITY(gl_WorkGroupSize.x, ~ (_GLF_IDENTITY(~ _GLF_IDENTITY((gl_WorkGroupSize.x), (_GLF_IDENTITY((gl_WorkGroupSize.x), clamp((gl_WorkGroupSize.x), _GLF_IDENTITY((gl_WorkGroupSize.x), ((gl_WorkGroupSize.x)) ^ 0u), (gl_WorkGroupSize.x)))) >> 0u), (~ (gl_WorkGroupSize.x)) / 1u)))), (_GLF_IDENTITY(gl_WorkGroupSize.x, ~ (_GLF_IDENTITY(~ _GLF_IDENTITY((gl_WorkGroupSize.x), (_GLF_IDENTITY((gl_WorkGroupSize.x), clamp((gl_WorkGroupSize.x), _GLF_IDENTITY((gl_WorkGroupSize.x), ((gl_WorkGroupSize.x)) ^ 0u), (gl_WorkGroupSize.x)))) >> 0u), (~ (gl_WorkGroupSize.x)) / 1u)))))), (_GLF_IDENTITY(gl_WorkGroupSize.x, ~ (_GLF_IDENTITY(~ _GLF_IDENTITY((gl_WorkGroupSize.x), (_GLF_IDENTITY((gl_WorkGroupSize.x), clamp((gl_WorkGroupSize.x), _GLF_IDENTITY((gl_WorkGroupSize.x), ((gl_WorkGroupSize.x)) ^ 0u), (gl_WorkGroupSize.x)))) >> 0u), (~ (gl_WorkGroupSize.x)) / 1u)))))) | 0u, clamp((_GLF_IDENTITY(gl_WorkGroupSize.x, ~ (_GLF_IDENTITY(~ (gl_WorkGroupSize.x), (~ (_GLF_IDENTITY(gl_WorkGroupSize, uvec3(uvec4(gl_WorkGroupSize, (0u | 0u)))).x)) / 1u)))) | 0u, (_GLF_IDENTITY(gl_WorkGroupSize.x, ~ (_GLF_IDENTITY(~ (gl_WorkGroupSize.x), (~ (gl_WorkGroupSize.x)) / 1u)))) | _GLF_IDENTITY(0u, (0u) | uint(_GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_IDENTITY(gl_WorkGroupSize.x, ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (gl_WorkGroupSize.x), (~ (gl_WorkGroupSize.x)) / 1u)), ((_GLF_IDENTITY(~ (gl_WorkGroupSize.x), (~ (gl_WorkGroupSize.x)) / _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, clamp(1u, 1u, 1u))) / 1u)))) | ((_GLF_IDENTITY(~ (gl_WorkGroupSize.x), (~ (gl_WorkGroupSize.x)) / 1u)))))) | 0u))) - 0u), clamp(_GLF_IDENTITY((gl_WorkGroupSize.x) | 0u, (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupSize.x, ~ (_GLF_IDENTITY(~ _GLF_IDENTITY((gl_WorkGroupSize.x), (_GLF_IDENTITY((gl_WorkGroupSize.x), clamp((gl_WorkGroupSize.x), _GLF_IDENTITY((gl_WorkGroupSize.x), ((gl_WorkGroupSize.x)) ^ 0u), (gl_WorkGroupSize.x)))) >> 0u), (~ (gl_WorkGroupSize.x)) / 1u)))), min(_GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupSize.x, ~ (_GLF_IDENTITY(~ _GLF_IDENTITY((gl_WorkGroupSize.x), (_GLF_IDENTITY((gl_WorkGroupSize.x), clamp((gl_WorkGroupSize.x), _GLF_IDENTITY((gl_WorkGroupSize.x), ((gl_WorkGroupSize.x)) ^ 0u), (gl_WorkGroupSize.x)))) >> 0u), (~ (gl_WorkGroupSize.x)) / 1u)))), max((_GLF_IDENTITY(gl_WorkGroupSize.x, ~ (_GLF_IDENTITY(~ _GLF_IDENTITY((gl_WorkGroupSize.x), (_GLF_IDENTITY((gl_WorkGroupSize.x), clamp((gl_WorkGroupSize.x), _GLF_IDENTITY((gl_WorkGroupSize.x), ((gl_WorkGroupSize.x)) ^ 0u), (gl_WorkGroupSize.x)))) >> 0u), (~ (gl_WorkGroupSize.x)) / 1u)))), (_GLF_IDENTITY(gl_WorkGroupSize.x, ~ (_GLF_IDENTITY(~ _GLF_IDENTITY((gl_WorkGroupSize.x), (_GLF_IDENTITY((gl_WorkGroupSize.x), clamp((gl_WorkGroupSize.x), _GLF_IDENTITY((gl_WorkGroupSize.x), ((gl_WorkGroupSize.x)) ^ 0u), (gl_WorkGroupSize.x)))) >> 0u), (~ (gl_WorkGroupSize.x)) / 1u)))))), (_GLF_IDENTITY(gl_WorkGroupSize.x, ~ (_GLF_IDENTITY(~ _GLF_IDENTITY((gl_WorkGroupSize.x), (_GLF_IDENTITY((gl_WorkGroupSize.x), clamp((gl_WorkGroupSize.x), _GLF_IDENTITY((gl_WorkGroupSize.x), ((gl_WorkGroupSize.x)) ^ 0u), (gl_WorkGroupSize.x)))) >> 0u), (~ (gl_WorkGroupSize.x)) / 1u)))))) | 0u, clamp((_GLF_IDENTITY(gl_WorkGroupSize.x, ~ (_GLF_IDENTITY(~ (gl_WorkGroupSize.x), (~ (_GLF_IDENTITY(gl_WorkGroupSize, uvec3(uvec4(gl_WorkGroupSize, (0u | 0u)))).x)) / 1u)))) | 0u, (_GLF_IDENTITY(gl_WorkGroupSize.x, ~ (_GLF_IDENTITY(~ (gl_WorkGroupSize.x), (~ (gl_WorkGroupSize.x)) / 1u)))) | _GLF_IDENTITY(0u, (0u) | uint(_GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_IDENTITY(gl_WorkGroupSize.x, ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (gl_WorkGroupSize.x), (~ (gl_WorkGroupSize.x)) / 1u)), ((_GLF_IDENTITY(~ (gl_WorkGroupSize.x), (~ (gl_WorkGroupSize.x)) / _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, clamp(1u, 1u, 1u))) / 1u)))) | ((_GLF_IDENTITY(~ (gl_WorkGroupSize.x), (~ (gl_WorkGroupSize.x)) / 1u)))))) | 0u))) - 0u), _GLF_IDENTITY((gl_WorkGroupSize.x) | 0u, (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupSize.x, ~ (_GLF_IDENTITY(~ _GLF_IDENTITY((gl_WorkGroupSize.x), (_GLF_IDENTITY((gl_WorkGroupSize.x), clamp((gl_WorkGroupSize.x), _GLF_IDENTITY((gl_WorkGroupSize.x), ((gl_WorkGroupSize.x)) ^ 0u), (gl_WorkGroupSize.x)))) >> 0u), (~ (gl_WorkGroupSize.x)) / 1u)))), min(_GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupSize.x, ~ (_GLF_IDENTITY(~ _GLF_IDENTITY((gl_WorkGroupSize.x), (_GLF_IDENTITY((gl_WorkGroupSize.x), clamp((gl_WorkGroupSize.x), _GLF_IDENTITY((gl_WorkGroupSize.x), ((gl_WorkGroupSize.x)) ^ 0u), (gl_WorkGroupSize.x)))) >> 0u), (~ (gl_WorkGroupSize.x)) / 1u)))), max((_GLF_IDENTITY(gl_WorkGroupSize.x, ~ (_GLF_IDENTITY(~ _GLF_IDENTITY((gl_WorkGroupSize.x), (_GLF_IDENTITY((gl_WorkGroupSize.x), clamp((gl_WorkGroupSize.x), _GLF_IDENTITY((gl_WorkGroupSize.x), ((gl_WorkGroupSize.x)) ^ 0u), (gl_WorkGroupSize.x)))) >> 0u), (~ (gl_WorkGroupSize.x)) / 1u)))), (_GLF_IDENTITY(gl_WorkGroupSize.x, ~ (_GLF_IDENTITY(~ _GLF_IDENTITY((gl_WorkGroupSize.x), (_GLF_IDENTITY((gl_WorkGroupSize.x), clamp((gl_WorkGroupSize.x), _GLF_IDENTITY((gl_WorkGroupSize.x), ((gl_WorkGroupSize.x)) ^ 0u), (gl_WorkGroupSize.x)))) >> 0u), (~ (gl_WorkGroupSize.x)) / 1u)))))), (_GLF_IDENTITY(gl_WorkGroupSize.x, ~ (_GLF_IDENTITY(~ _GLF_IDENTITY((gl_WorkGroupSize.x), (_GLF_IDENTITY((gl_WorkGroupSize.x), clamp((gl_WorkGroupSize.x), _GLF_IDENTITY((gl_WorkGroupSize.x), ((gl_WorkGroupSize.x)) ^ 0u), (gl_WorkGroupSize.x)))) >> 0u), (~ (gl_WorkGroupSize.x)) / 1u)))))) | 0u, clamp((_GLF_IDENTITY(gl_WorkGroupSize.x, ~ (_GLF_IDENTITY(~ (gl_WorkGroupSize.x), (~ (_GLF_IDENTITY(gl_WorkGroupSize, uvec3(uvec4(gl_WorkGroupSize, (0u | 0u)))).x)) / 1u)))) | 0u, (_GLF_IDENTITY(gl_WorkGroupSize.x, ~ (_GLF_IDENTITY(~ (gl_WorkGroupSize.x), (~ (gl_WorkGroupSize.x)) / 1u)))) | _GLF_IDENTITY(0u, (0u) | uint(_GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_IDENTITY(gl_WorkGroupSize.x, ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (gl_WorkGroupSize.x), (~ (gl_WorkGroupSize.x)) / 1u)), ((_GLF_IDENTITY(~ (gl_WorkGroupSize.x), (~ (gl_WorkGroupSize.x)) / _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, clamp(1u, 1u, 1u))) / 1u)))) | ((_GLF_IDENTITY(~ (gl_WorkGroupSize.x), (~ (gl_WorkGroupSize.x)) / 1u)))))) | 0u))) - 0u), _GLF_IDENTITY((gl_WorkGroupSize.x) | 0u, (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupSize.x, ~ (_GLF_IDENTITY(~ _GLF_IDENTITY((gl_WorkGroupSize.x), (_GLF_IDENTITY((gl_WorkGroupSize.x), clamp((gl_WorkGroupSize.x), _GLF_IDENTITY((gl_WorkGroupSize.x), ((gl_WorkGroupSize.x)) ^ 0u), (gl_WorkGroupSize.x)))) >> 0u), (~ (gl_WorkGroupSize.x)) / 1u)))), min(_GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupSize.x, ~ (_GLF_IDENTITY(~ _GLF_IDENTITY((gl_WorkGroupSize.x), (_GLF_IDENTITY((gl_WorkGroupSize.x), clamp((gl_WorkGroupSize.x), _GLF_IDENTITY((gl_WorkGroupSize.x), ((gl_WorkGroupSize.x)) ^ 0u), (gl_WorkGroupSize.x)))) >> 0u), (~ (gl_WorkGroupSize.x)) / 1u)))), max((_GLF_IDENTITY(gl_WorkGroupSize.x, ~ (_GLF_IDENTITY(~ _GLF_IDENTITY((gl_WorkGroupSize.x), (_GLF_IDENTITY((gl_WorkGroupSize.x), clamp((gl_WorkGroupSize.x), _GLF_IDENTITY((gl_WorkGroupSize.x), ((gl_WorkGroupSize.x)) ^ 0u), (gl_WorkGroupSize.x)))) >> 0u), (~ (gl_WorkGroupSize.x)) / 1u)))), (_GLF_IDENTITY(gl_WorkGroupSize.x, ~ (_GLF_IDENTITY(~ _GLF_IDENTITY((gl_WorkGroupSize.x), (_GLF_IDENTITY((gl_WorkGroupSize.x), clamp((gl_WorkGroupSize.x), _GLF_IDENTITY((gl_WorkGroupSize.x), ((gl_WorkGroupSize.x)) ^ 0u), (gl_WorkGroupSize.x)))) >> 0u), (~ (gl_WorkGroupSize.x)) / 1u)))))), (_GLF_IDENTITY(gl_WorkGroupSize.x, ~ (_GLF_IDENTITY(~ _GLF_IDENTITY((gl_WorkGroupSize.x), (_GLF_IDENTITY((gl_WorkGroupSize.x), clamp((gl_WorkGroupSize.x), _GLF_IDENTITY((gl_WorkGroupSize.x), ((gl_WorkGroupSize.x)) ^ 0u), (gl_WorkGroupSize.x)))) >> 0u), (~ (gl_WorkGroupSize.x)) / 1u)))))) | 0u, clamp((_GLF_IDENTITY(gl_WorkGroupSize.x, ~ (_GLF_IDENTITY(~ (gl_WorkGroupSize.x), (~ (_GLF_IDENTITY(gl_WorkGroupSize, uvec3(uvec4(gl_WorkGroupSize, (0u | 0u)))).x)) / 1u)))) | 0u, (_GLF_IDENTITY(gl_WorkGroupSize.x, ~ (_GLF_IDENTITY(~ (gl_WorkGroupSize.x), (~ (gl_WorkGroupSize.x)) / 1u)))) | _GLF_IDENTITY(0u, (0u) | uint(_GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_IDENTITY(gl_WorkGroupSize.x, ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (gl_WorkGroupSize.x), (~ (gl_WorkGroupSize.x)) / 1u)), ((_GLF_IDENTITY(~ (gl_WorkGroupSize.x), (~ (gl_WorkGroupSize.x)) / _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, clamp(1u, 1u, 1u))) / 1u)))) | ((_GLF_IDENTITY(~ (gl_WorkGroupSize.x), (~ (gl_WorkGroupSize.x)) / 1u)))))) | 0u))) - 0u))))));
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / exp(0.0)) > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  barrier();
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u), subgroup_local_id)), (_GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u), ~ (~ (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u)))), subgroup_local_id))) - (0u >> _GLF_IDENTITY(uint(3u), uint(3u))));
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) | 0u) + ((subgroup_local_id + _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, 1 * (1))))))) % subgroup_size), max(workgroup_base + subgroup_id * subgroup_size + (_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (1) ^ 0)), ((subgroup_local_id + _GLF_IDENTITY(1, (1) ^ 0))) | ((subgroup_local_id + _GLF_IDENTITY(1, (1) ^ 0)))) % subgroup_size), workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size)));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false))), false, true)))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    return;
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-550.499), _GLF_FUZZED((3.2 + 98.31))), bvec2(false, false))).y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec2(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))))
    return;
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, false, false)))) || false), (_GLF_DEAD(false)) && true))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 buf[virtual_gid] = 1;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(vec4(injectionSwitch, 0.0, 1.0), vec4(mat3(vec4(injectionSwitch, 0.0, 1.0), 1.0, 1.0, 0.0, 0.0, 0.0)))), mix(vec2(_GLF_FUZZED(32.58), _GLF_FUZZED(-6.2)), vec2((vec2(_GLF_IDENTITY(vec4(injectionSwitch, 0.0, 1.0), vec4(mat3(vec4(injectionSwitch, 0.0, 1.0), 1.0, 1.0, 0.0, 0.0, 0.0)))))[0], (vec2(_GLF_IDENTITY(vec4(injectionSwitch, 0.0, 1.0), vec4(mat3(vec4(injectionSwitch, 0.0, 1.0), 1.0, 1.0, 0.0, 0.0, 0.0)))))[1]), bvec2(true, true)))) : _GLF_FUZZED(vec2(1.7, 375.985)))).x, mix(float(_GLF_FUZZED(-2.6)), float(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(vec4(injectionSwitch, 0.0, 1.0), vec4(mat3(vec4(injectionSwitch, 0.0, 1.0), 1.0, 1.0, 0.0, 0.0, 0.0)))), mix(vec2(_GLF_FUZZED(32.58), _GLF_FUZZED(-6.2)), vec2((vec2(_GLF_IDENTITY(vec4(injectionSwitch, 0.0, 1.0), vec4(mat3(vec4(injectionSwitch, 0.0, 1.0), 1.0, 1.0, 0.0, 0.0, 0.0)))))[0], (vec2(_GLF_IDENTITY(vec4(injectionSwitch, 0.0, 1.0), vec4(mat3(vec4(injectionSwitch, 0.0, 1.0), 1.0, 1.0, 0.0, 0.0, 0.0)))))[1]), bvec2(true, true)))) : _GLF_FUZZED(vec2(1.7, 375.985)))).x), bool(true))) > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)) || false))))) && true)))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(false), true)), ! (! (bool(bvec2(_GLF_DEAD(false), true)))))))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec3(! ((injectionSwitch.x > injectionSwitch.y)), false, false), bvec3(bvec3(bvec3(! ((injectionSwitch.x > injectionSwitch.y)), false, false)))))))))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec3(! ((injectionSwitch.x > injectionSwitch.y)), false, false), bvec3(bvec3(bvec3(! ((injectionSwitch.x > injectionSwitch.y)), false, false)))))))))), true))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), (_GLF_IDENTITY(true, ! (! (true))) ? _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)) : _GLF_FUZZED(vec2(-7818.7214, 9.4)))).y))))
  barrier();
 if(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) >> 0u) + 1 < _GLF_IDENTITY(subgroup_size, 1u * (subgroup_size)))
  {
   atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, 1 * (2))) * 1)), uint(uvec4(uint(2), 1u, _GLF_IDENTITY(_GLF_IDENTITY(1u, max(1u, 1u)), (false ? _GLF_FUZZED(_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, ~ (~ (workgroup_base))), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, ~ (~ _GLF_IDENTITY((workgroup_base), max((workgroup_base), _GLF_IDENTITY((workgroup_base), min((workgroup_base), (workgroup_base))))))), ~ (~ (_GLF_IDENTITY(workgroup_base, ~ (~ (workgroup_base))))))) | (_GLF_IDENTITY(workgroup_base, ~ (~ (workgroup_base)))))) << 0u)) : _GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(atomicAnd(workgroup_size, 183990u)) : 1u)))))), 0u))), 4, 64, _GLF_IDENTITY(4, (_GLF_IDENTITY(4, (4) + 0)) >> 0));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(3.2) : injectionSwitch.y)), max(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(3.2) : injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(3.2) : injectionSwitch.y))))), ((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(3.2) : injectionSwitch.y)), max(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(3.2) : injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(3.2) : injectionSwitch.y)))))) && true)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
    }
   subgroupAll(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(_GLF_IDENTITY(false, (false) || false), true), true, _GLF_IDENTITY(true, ! (! (true)))))))));
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (_GLF_IDENTITY(! (false), false || (_GLF_IDENTITY(! (false), (! (false)) && true)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (! (_GLF_IDENTITY(! (false), false || (_GLF_IDENTITY(! (false), (! (false)) && true)))))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, min(next_virtual_gid, next_virtual_gid))], uint(2), 4, 64, _GLF_IDENTITY(_GLF_IDENTITY(4, ~ _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((~ _GLF_IDENTITY((4), (_GLF_IDENTITY((4), 0 ^ ((4)))) >> 0)), ~ (_GLF_IDENTITY(~ ((~ (4))), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(~ ((~ (4))), (~ ((~ (4)))) ^ 0))), ((~ (_GLF_IDENTITY(~ ((~ (4))), (~ ((~ (4)))) ^ 0)))) | 0)))), max(_GLF_IDENTITY((~ _GLF_IDENTITY((_GLF_IDENTITY(4, ~ (~ (_GLF_IDENTITY(4, int(ivec3(4, 0, 0))))))), ((_GLF_IDENTITY(4, ~ (~ (_GLF_IDENTITY(4, int(ivec3(4, 0, 0)))))))) | (0 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), min(int(1), int(1))))))), ~ (_GLF_IDENTITY(~ ((~ (_GLF_IDENTITY(4, (0 | 0) + (_GLF_IDENTITY(4, (_GLF_IDENTITY(4, (4) / 1)) | 0)))))), ~ (~ (~ ((~ (4)))))))), _GLF_IDENTITY((~ (4)), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(~ (4), (false ? _GLF_FUZZED((true ? 94832 : -81745)) : ~ (4))))), ~ (~ (~ ((~ (_GLF_IDENTITY(4, (_GLF_IDENTITY(4, clamp(4, _GLF_IDENTITY(4, (4) | (4)), 4))) | (4)))))))))))), max(_GLF_IDENTITY((~ (4)), _GLF_IDENTITY(~ (_GLF_IDENTITY(~ ((~ _GLF_IDENTITY((4), max(_GLF_IDENTITY((4), (_GLF_IDENTITY(_GLF_IDENTITY((4), (false ? _GLF_FUZZED(-37259) : _GLF_IDENTITY((4), clamp((4), (4), _GLF_IDENTITY((4), int(ivec4((4), 1, 0, 1))))))), max((4), (4)))) - 0), (4))))), ~ _GLF_IDENTITY((~ (~ ((~ (4))))), min(_GLF_IDENTITY((~ (~ ((~ (4))))), int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY((~ (~ ((~ (4))))), ~ (~ ((~ (~ ((~ (_GLF_IDENTITY(4, (4) | (4)))))))))), 1), ivec2(ivec3(ivec2(_GLF_IDENTITY((~ (~ ((~ (4))))), ~ (~ ((~ (~ ((~ (4)))))))), 1), 1))))), (~ (~ ((~ (4))))))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-12535) : _GLF_IDENTITY(~ (_GLF_IDENTITY(~ ((~ _GLF_IDENTITY((4), max(_GLF_IDENTITY((4), (_GLF_IDENTITY(_GLF_IDENTITY((4), (false ? _GLF_FUZZED(-37259) : _GLF_IDENTITY((4), clamp((4), (4), _GLF_IDENTITY((4), int(ivec4((4), 1, 0, 1))))))), max((4), (4)))) - 0), (4))))), ~ _GLF_IDENTITY((~ (~ ((~ (4))))), min(_GLF_IDENTITY((~ (~ ((~ (4))))), int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY((~ (~ ((~ (4))))), ~ (~ ((~ (~ ((~ (_GLF_IDENTITY(4, (4) | (4)))))))))), 1), ivec2(ivec3(ivec2(_GLF_IDENTITY((~ (~ ((~ (4))))), ~ (~ ((~ (~ ((~ (4)))))))), 1), 1))))), (~ (~ ((~ (4))))))))), (~ (_GLF_IDENTITY(~ ((~ _GLF_IDENTITY((4), max(_GLF_IDENTITY((4), (_GLF_IDENTITY(_GLF_IDENTITY((4), (false ? _GLF_FUZZED(-37259) : _GLF_IDENTITY((4), clamp((4), (4), _GLF_IDENTITY((4), int(ivec4((4), 1, 0, 1))))))), max((4), (4)))) - 0), (4))))), ~ _GLF_IDENTITY((~ (~ ((~ (4))))), min(_GLF_IDENTITY((~ (~ ((~ (4))))), int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY((~ (~ ((~ (4))))), ~ (~ ((~ (~ ((~ (_GLF_IDENTITY(4, (4) | (4)))))))))), 1), ivec2(ivec3(ivec2(_GLF_IDENTITY((~ (~ ((~ (4))))), ~ (~ ((~ (~ ((~ (4)))))))), 1), 1))))), (~ (~ ((~ (4)))))))))) ^ 0)))), _GLF_IDENTITY((~ (4)), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY((~ (4)), 0 ^ ((_GLF_IDENTITY(~ (4), min(~ (4), ~ (4))))))), (~ ((~ (4)))) - 0), ~ (~ (~ ((~ (_GLF_IDENTITY(4, ~ (~ (_GLF_IDENTITY(4, 1 * (4)))))))))))))))), (_GLF_IDENTITY(4, ~ _GLF_IDENTITY((~ (4)), _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((~ (4)), (_GLF_IDENTITY((~ (4)), ((~ (4))) - 0)) / 1)), ~ (~ (~ ((~ (4))))))), (~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((~ (4)), (_GLF_IDENTITY((~ (4)), ((~ (4))) - 0)) / 1)), ~ (~ (~ ((~ (4)))))))) | (~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((~ (4)), (_GLF_IDENTITY((~ (4)), ((~ (4))) - 0)) / 1)), ~ (~ (~ ((~ (4)))))))))))) | (_GLF_IDENTITY(4, ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (4), (~ (4)) << (0 << _GLF_IDENTITY(int(6), int(6))))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ ((~ (_GLF_IDENTITY(4, (4) >> 0)))), ~ (~ (~ ((~ (4)))))), (_GLF_IDENTITY(~ ((~ _GLF_IDENTITY((4), ~ (~ ((4)))))), ~ (~ (~ ((~ (4))))))) ^ 0)))))));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           barrier();
          }
         return;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             return;
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
           return;
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, true))), (_GLF_IDENTITY(false, bool(bvec3(false, false, true)))) || false), bool(bvec4(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_IDENTITY(false, true && (false)), true))), true, false, true)))))))
          return;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
        barrier();
       return;
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   subgroupAll(true);
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), false)), _GLF_IDENTITY(bool(bvec2(bool(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), false)), false)), (bool(bvec2(bool(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), false)), false))) && true))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
}
