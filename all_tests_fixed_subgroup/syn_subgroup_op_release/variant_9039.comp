#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_7 {
 ivec3 _f0;
 mat2x4 _f1;
 vec4 _f2;
 mat4 _f3;
 ivec2 _f4;
 mat3 _f5;
} ;

struct _GLF_struct_6 {
 bvec3 _f0;
 ivec4 _f1;
} ;

struct _GLF_struct_5 {
 uvec2 _f0;
 uvec4 _f1;
 bvec2 _f2;
 ivec2 _f3;
 mat2 _f4;
} ;

struct _GLF_struct_8 {
 mat4 _f0;
 mat2x4 _f1;
 _GLF_struct_5 _f2;
 vec4 _f3;
 _GLF_struct_6 _f4;
 bvec2 _f5;
 _GLF_struct_7 _f6;
} ;

struct _GLF_struct_4 {
 vec4 _f0;
 uvec3 _f1;
 uint _f2;
} ;

struct _GLF_struct_2 {
 mat3 _f0;
 ivec4 _f1;
 mat3 _f2;
 vec2 _f3;
} ;

struct _GLF_struct_1 {
 bvec4 _f0;
 int _f1;
 bvec2 _f2;
 bvec4 _f3;
 mat2x4 _f4;
} ;

struct _GLF_struct_0 {
 bvec3 _f0;
 ivec2 _f1;
 float _f2;
 uvec2 _f3;
} ;

struct _GLF_struct_3 {
 _GLF_struct_0 _f0;
 _GLF_struct_1 _f1;
 _GLF_struct_2 _f2;
} ;

struct _GLF_struct_9 {
 vec2 _f0;
 _GLF_struct_3 _f1;
 ivec3 _f2;
 _GLF_struct_4 _f3;
 uint next_virtual_gid;
 uvec3 _f4;
 _GLF_struct_8 _f5;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
uint subgroup_size = 16;
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(3, (3) << 0)), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat4x2(injectionSwitch.y, 0.0, 0.0, sqrt(1.0), 0.0, 0.0, 1.0, sqrt(1.0))))))))
      {
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((+ 40075) & 0)); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
              barrier();
             barrier();
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = (1 | (0 >> _GLF_IDENTITY(int(1), int(1)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                }
              }
             else
              {
              }
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
    }
   else
    {
    }
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y)))))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) && true), _GLF_IDENTITY(true, true && (true)), false, false))), true && _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ! (! ((false))))))) && true), true, _GLF_IDENTITY(false, (false) || false), false)))), _GLF_IDENTITY(bool(bvec3((_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true), true, _GLF_IDENTITY(false, (false) || false), false)))), false, true)), ! (! (bool(bvec3((_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true), true, _GLF_IDENTITY(false, (false) || false), false)))), false, true)))))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true)))))
      barrier();
     barrier();
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      {
      }
     else
      {
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         barrier();
        }
      }
     do
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
          {
           barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(3.6), _GLF_FUZZED((- 372.564))), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))).x < injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(3.6), _GLF_FUZZED((- 372.564))), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))).x < injectionSwitch.y)))))))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   for(int _injected_loop_counter = (-654 & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY(min(gl_WorkGroupSize.x, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, uvec3(_GLF_IDENTITY(gl_WorkGroupSize[0], (true ? gl_WorkGroupSize[0] : _GLF_FUZZED(subgroup_local_id))), gl_WorkGroupSize[1], _GLF_IDENTITY(gl_WorkGroupSize[2], 0u | (_GLF_IDENTITY(gl_WorkGroupSize[2], ~ (~ (gl_WorkGroupSize[2]))))))).x, max(_GLF_IDENTITY(gl_WorkGroupSize, uvec3(_GLF_IDENTITY(gl_WorkGroupSize[0], (true ? gl_WorkGroupSize[0] : _GLF_FUZZED(subgroup_local_id))), gl_WorkGroupSize[1], _GLF_IDENTITY(gl_WorkGroupSize[2], 0u | (_GLF_IDENTITY(gl_WorkGroupSize[2], ~ _GLF_IDENTITY((~ (gl_WorkGroupSize[2])), (_GLF_IDENTITY((~ (gl_WorkGroupSize[2])), clamp((~ (gl_WorkGroupSize[2])), (~ (gl_WorkGroupSize[2])), (~ (gl_WorkGroupSize[2]))))) | (_GLF_IDENTITY((~ (gl_WorkGroupSize[2])), max((~ (gl_WorkGroupSize[2])), (~ (gl_WorkGroupSize[2]))))))))))).x, _GLF_IDENTITY(gl_WorkGroupSize, uvec3(_GLF_IDENTITY(gl_WorkGroupSize[0], _GLF_IDENTITY((_GLF_IDENTITY(true, false || (true)) ? gl_WorkGroupSize[0] : _GLF_FUZZED(subgroup_local_id)), max(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(true, false || (true)) ? gl_WorkGroupSize[0] : _GLF_FUZZED(subgroup_local_id)), ((_GLF_IDENTITY(true, false || (true)) ? gl_WorkGroupSize[0] : _GLF_FUZZED(subgroup_local_id))) >> 0u), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(true, false || (true)) ? gl_WorkGroupSize[0] : _GLF_FUZZED(subgroup_local_id)), ((_GLF_IDENTITY(true, false || (true)) ? gl_WorkGroupSize[0] : _GLF_FUZZED(subgroup_local_id))) >> 0u)))), (_GLF_IDENTITY(true, false || (true)) ? gl_WorkGroupSize[0] : _GLF_FUZZED(subgroup_local_id))))), gl_WorkGroupSize[1], _GLF_IDENTITY(gl_WorkGroupSize[2], 0u | (_GLF_IDENTITY(gl_WorkGroupSize[2], ~ (_GLF_IDENTITY(~ (gl_WorkGroupSize[2]), ~ (~ (~ (gl_WorkGroupSize[2])))))))))).x)), (_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) - 0u)) + 0u)), (min(_GLF_IDENTITY(gl_WorkGroupSize, uvec3(gl_WorkGroupSize[0], gl_WorkGroupSize[1], _GLF_IDENTITY(gl_WorkGroupSize[2], (gl_WorkGroupSize[2]) + 0u))).x, _GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) + 0u))) | (min(gl_WorkGroupSize.x, _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, uvec3(0u, 0u, 0u) + (gl_WorkGroupSize)).x, (_GLF_IDENTITY(gl_WorkGroupSize.x, max(gl_WorkGroupSize.x, _GLF_IDENTITY(gl_WorkGroupSize.x, min(_GLF_IDENTITY(gl_WorkGroupSize.x, 1u * (gl_WorkGroupSize.x)), gl_WorkGroupSize.x))))) + 0u)))));
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), (bool(false)) && true)))), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), (bool(false)) && true))))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = _GLF_IDENTITY(0, clamp(0, 0, 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
        {
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   barrier();
  }
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID, uvec3(0u, 0u, 0u) | (gl_WorkGroupID)).x;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, true && (true)), (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       else
        {
        }
      }
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(vec3(492.371, -84.94, -3128.6666)[2]) : injectionSwitch.x)), injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec3(true, true, false)))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, false || (false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false)))))
        barrier();
      }
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, false)), _GLF_IDENTITY((bool(bvec4(false, false, false, false))), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((bool(bvec4(false, false, false, false))), bool(bvec3((bool(bvec4(false, false, false, false))), false, true)))), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((bool(bvec4(false, false, false, false))), bool(bvec3((bool(bvec4(false, false, false, false))), false, true))))), (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((bool(bvec4(false, false, false, false))), bool(_GLF_IDENTITY(bvec3((bool(bvec4(false, false, _GLF_IDENTITY(false, false || (false)), false))), false, true), bvec3(bvec4(bvec3((bool(bvec4(false, false, false, false))), false, true), true)))))))) && true)))) && true))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false))), bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec2(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), false)))))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       barrier();
      }
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), false || _GLF_IDENTITY((bool(false)), false || ((bool(false))))))), (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || (bool(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || (bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), false || (bool(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || (bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(acos(vec2(-1.5, -7.0))))).x < injectionSwitch.y)))))
      barrier();
     if(_GLF_DEAD(false))
      {
       do
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 uint workgroup_base = workgroup_size * _GLF_IDENTITY(workgroup_id, max(workgroup_id, workgroup_id));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec3(_GLF_IDENTITY(bvec3(false, _GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (false)))), ! (! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true)))))))), true), bvec3(bvec4(bvec3(false, _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true)))))))), true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (_GLF_IDENTITY(! (false), ! (! (! (false)))))))))))
        barrier();
      }
     else
      {
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
       barrier();
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(false))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           barrier();
          }
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          barrier();
        }
      }
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
    barrier();
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 _GLF_struct_9 _GLF_struct_replacement_9 = _GLF_struct_9(vec2(1.0), _GLF_struct_3(_GLF_struct_0(bvec3(true), ivec2(1), 1.0, uvec2(1u)), _GLF_struct_1(bvec4(true), 1, _GLF_IDENTITY(_GLF_IDENTITY(bvec2(true), bvec2(bvec4(bvec2(true), false, false))), _GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(bvec2(true), _GLF_IDENTITY(bvec2(bvec4(bvec2(true), false, false)), bvec2(bvec3(bvec2(bvec4(bvec2(true), false, false)), true)))))), bvec2(bvec4(bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(true), bvec2(bvec2(bvec2(true)))), bvec2(bvec4(bvec2(true), false, false))))), true, false)))), bvec4(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec2(bvec2(true, false))))))), mat2x4(1.0)), _GLF_struct_2(mat3(1.0), _GLF_IDENTITY(ivec4(1), clamp(_GLF_IDENTITY(ivec4(1), (_GLF_IDENTITY(ivec4(1), max(ivec4(1), ivec4(1)))) << ivec4(0, 0, 0, 0)), ivec4(1), _GLF_IDENTITY(ivec4(1), ivec4(0, 0, 0, 0) | _GLF_IDENTITY((ivec4(1)), min((ivec4(1)), _GLF_IDENTITY((ivec4(1)), ivec4(1, 1, 1, 1) * ((ivec4(1))))))))), mat3(1.0), vec2(1.0))), ivec3(1), _GLF_struct_4(vec4(1.0), _GLF_IDENTITY(uvec3(1u), (false ? _GLF_FUZZED(uvec3(93071u, 72281u, 184952u)) : _GLF_IDENTITY(_GLF_IDENTITY(uvec3(1u), uvec3(_GLF_IDENTITY(uvec3(uvec3(1u)), (false ? _GLF_FUZZED(uvec3(119838u, 138645u, 24020u)) : uvec3(uvec3(1u)))))), max(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(1u), uvec3(_GLF_IDENTITY(uvec3(uvec3(1u)), (false ? _GLF_FUZZED(uvec3(119838u, 138645u, 24020u)) : uvec3(_GLF_IDENTITY(uvec3(1u), (uvec3(1u)) | (uvec3(1u)))))))), ~ (~ (_GLF_IDENTITY(uvec3(1u), uvec3(_GLF_IDENTITY(uvec3(uvec3(1u)), (false ? _GLF_FUZZED(uvec3(119838u, 138645u, 24020u)) : uvec3(uvec3(1u))))))))), _GLF_IDENTITY(uvec3(1u), uvec3(_GLF_IDENTITY(uvec3(uvec3(1u)), (false ? _GLF_FUZZED(uvec3(119838u, 138645u, 24020u)) : uvec3(uvec3(1u)))))))))), 1u), workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))) + 1) % subgroup_size), max(((subgroup_local_id + 1) % subgroup_size), (_GLF_IDENTITY((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, 0u | (_GLF_IDENTITY(subgroup_size, min(_GLF_IDENTITY(subgroup_size, (subgroup_size) | 0u), subgroup_size)))), 0u | ((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, 0u | (_GLF_IDENTITY(subgroup_size, min(_GLF_IDENTITY(subgroup_size, (subgroup_size) | 0u), subgroup_size))))))))), uvec3(1u), _GLF_struct_8(mat4(_GLF_IDENTITY(_GLF_IDENTITY(1.0, _GLF_IDENTITY(max(1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0) * 1.0, _GLF_IDENTITY(((1.0) * 1.0), 1.0 * (((1.0) * 1.0))) - 0.0))), max(max(1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0) * 1.0, _GLF_IDENTITY(((1.0) * 1.0), 1.0 * (((1.0) * 1.0))) - 0.0))), _GLF_IDENTITY(max(1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0) * 1.0, _GLF_IDENTITY(((1.0) * 1.0), 1.0 * (((1.0) * 1.0))) - 0.0))), (false ? _GLF_FUZZED(-6.5) : max(1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0) * 1.0, _GLF_IDENTITY(((1.0) * 1.0), 1.0 * (((1.0) * 1.0))) - 0.0)))))))), clamp(_GLF_IDENTITY(1.0, _GLF_IDENTITY(max(1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0) * 1.0, _GLF_IDENTITY(((1.0) * 1.0), 1.0 * (((1.0) * 1.0))) - 0.0))), max(max(1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0) * 1.0, _GLF_IDENTITY(((1.0) * 1.0), 1.0 * (((1.0) * 1.0))) - 0.0))), _GLF_IDENTITY(max(1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0) * 1.0, _GLF_IDENTITY(((1.0) * 1.0), 1.0 * (((1.0) * 1.0))) - 0.0))), (false ? _GLF_FUZZED(-6.5) : max(1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0) * 1.0, _GLF_IDENTITY(((1.0) * 1.0), 1.0 * (((1.0) * 1.0))) - 0.0)))))))), _GLF_IDENTITY(_GLF_IDENTITY(1.0, _GLF_IDENTITY(max(1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0) * 1.0, _GLF_IDENTITY(((1.0) * 1.0), 1.0 * (((1.0) * 1.0))) - 0.0))), max(max(1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0) * 1.0, _GLF_IDENTITY(((1.0) * 1.0), 1.0 * (((1.0) * 1.0))) - 0.0))), _GLF_IDENTITY(max(1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0) * 1.0, _GLF_IDENTITY(((1.0) * 1.0), 1.0 * (((1.0) * 1.0))) - 0.0))), (false ? _GLF_FUZZED(-6.5) : max(1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0) * 1.0, _GLF_IDENTITY(((1.0) * 1.0), 1.0 * (((1.0) * 1.0))) - 0.0)))))))), (_GLF_IDENTITY(1.0, _GLF_IDENTITY(max(1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0) * 1.0, _GLF_IDENTITY(((1.0) * 1.0), 1.0 * (((1.0) * 1.0))) - 0.0))), max(max(1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0) * 1.0, _GLF_IDENTITY(((1.0) * 1.0), 1.0 * (((1.0) * 1.0))) - 0.0))), _GLF_IDENTITY(max(1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0) * 1.0, _GLF_IDENTITY(((1.0) * 1.0), 1.0 * (((1.0) * 1.0))) - 0.0))), (false ? _GLF_FUZZED(-6.5) : max(1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0) * 1.0, _GLF_IDENTITY(((1.0) * 1.0), 1.0 * (((1.0) * 1.0))) - 0.0))))))))) - 0.0), _GLF_IDENTITY(1.0, _GLF_IDENTITY(max(1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0) * 1.0, _GLF_IDENTITY(((1.0) * 1.0), 1.0 * (((1.0) * 1.0))) - 0.0))), max(max(1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0) * 1.0, _GLF_IDENTITY(((1.0) * 1.0), 1.0 * (((1.0) * 1.0))) - 0.0))), _GLF_IDENTITY(max(1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0) * 1.0, _GLF_IDENTITY(((1.0) * 1.0), 1.0 * (((1.0) * 1.0))) - 0.0))), (false ? _GLF_FUZZED(-6.5) : max(1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0) * 1.0, _GLF_IDENTITY(((1.0) * 1.0), 1.0 * (((1.0) * 1.0))) - 0.0))))))))))), mat2x4(1.0), _GLF_struct_5(uvec2(1u), uvec4(1u), bvec2(true), ivec2(1), mat2(1.0)), _GLF_IDENTITY(vec4(1.0), (vec4(1.0)) + vec4(0.0, 0.0, 0.0, 0.0)), _GLF_struct_6(bvec3(true), ivec4(1)), bvec2(true), _GLF_struct_7(ivec3(1), mat2x4(1.0), _GLF_IDENTITY(_GLF_IDENTITY(vec4(1.0), _GLF_IDENTITY(vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, 1.0 * (0.0)), 1.0, 0.0, 1.0, _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (false ? _GLF_FUZZED(-1.6) : _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(max(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(1362.2253))))), (_GLF_IDENTITY(max(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)), (max(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))) / 1.0)) * 1.0))))) / 1.0))), (vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) / vec4(1.0, 1.0, 1.0, 1.0))), _GLF_IDENTITY(vec4(mat4(_GLF_IDENTITY(vec4(1.0), _GLF_IDENTITY(vec4(mat3x4(vec4(1.0), 1.0, 1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(5.7))), 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(_GLF_IDENTITY((vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))), min((vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))), _GLF_IDENTITY((vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))), mix(vec4(_GLF_FUZZED(2.4), ((vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))))[1], _GLF_FUZZED(9.2), _GLF_FUZZED(-7.5)), vec4(((vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))))[0], _GLF_FUZZED(8216.6024), ((vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))))[2], ((vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))))[3]), bvec4(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true, true))))) / vec4(1.0, 1.0, 1.0, 1.0), ((vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) / vec4(1.0, 1.0, 1.0, 1.0)) - vec4(0.0, 0.0, 0.0, 0.0)))), 0.0, _GLF_IDENTITY(abs(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED((- vec4(77.49, -781.319, -76.42, -442.960)[0])) : 1.0))), (_GLF_IDENTITY(abs(1.0), (_GLF_IDENTITY(abs(1.0), clamp(abs(1.0), abs(1.0), abs(1.0)))) / 1.0)) / 1.0), 0.0, _GLF_IDENTITY(1.0, float(vec4(1.0, 0.0, 1.0, 1.0))), 0.0, 0.0, sqrt(1.0), 1.0, tan(0.0), _GLF_IDENTITY(_GLF_IDENTITY(dot(vec3(sqrt(0.0), tan(0.0), 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(sqrt(0.0), tan(0.0), 1.0), vec3(0.0, 0.0, 1.0))), max(_GLF_IDENTITY(dot(vec3(sqrt(0.0), tan(0.0), 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(sqrt(0.0), tan(0.0), 1.0), vec3(0.0, 0.0, 1.0))), _GLF_IDENTITY(dot(vec3(sqrt(0.0), tan(0.0), 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(sqrt(0.0), tan(0.0), 1.0), vec3(0.0, 0.0, _GLF_IDENTITY(1.0, (1.0) / 1.0)))))), sqrt(1.0), 1.0)), (true ? vec4(mat4(_GLF_IDENTITY(_GLF_IDENTITY(vec4(1.0), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)), 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) / vec4(1.0, 1.0, 1.0, 1.0)), max(_GLF_IDENTITY(vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)), 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) / vec4(1.0, 1.0, 1.0, 1.0)), _GLF_IDENTITY(_GLF_IDENTITY(vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)), 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) / vec4(1.0, 1.0, 1.0, 1.0)), clamp(_GLF_IDENTITY(vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)), 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) / vec4(1.0, 1.0, 1.0, 1.0)), _GLF_IDENTITY(vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)), 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) / vec4(1.0, 1.0, 1.0, 1.0)), _GLF_IDENTITY(vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)), 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) / vec4(1.0, 1.0, 1.0, 1.0)))))), min(_GLF_IDENTITY(vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (vec4(mat3x4(vec4(1.0), _GLF_IDENTITY(1.0, float(mat3(_GLF_IDENTITY(1.0, float(mat3x2(1.0, 1.0, 0.0, 1.0, 1.0, 1.0))), 0.0, 0.0, 0.0, abs(1.0), 0.0, 0.0, 1.0, 0.0))), 1.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(0.0, float(vec3(0.0, 0.0, 0.0))), 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) / vec4(1.0, 1.0, 1.0, 1.0)), _GLF_IDENTITY(_GLF_IDENTITY(vec4(mat3x4(_GLF_IDENTITY(_GLF_IDENTITY(vec4(1.0), max(vec4(1.0), _GLF_IDENTITY(vec4(1.0), (_GLF_IDENTITY(vec4(1.0), mat4(1.0) * (vec4(1.0)))) / vec4(1.0, 1.0, 1.0, 1.0)))), (_GLF_IDENTITY(vec4(1.0), max(vec4(1.0), _GLF_IDENTITY(vec4(1.0), (_GLF_IDENTITY(vec4(1.0), mat4(1.0) * (vec4(1.0)))) / vec4(1.0, 1.0, 1.0, 1.0))))) + vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), _GLF_IDENTITY(0.0, float(float(0.0))), 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) / vec4(1.0, 1.0, 1.0, 1.0)), mix(vec4((_GLF_IDENTITY(vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(_GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-982.857) : 0.0)), injectionSwitch.x)))) / vec4(1.0, 1.0, 1.0, 1.0)))[0], _GLF_FUZZED(9.2), _GLF_FUZZED(-66.43), (_GLF_IDENTITY(_GLF_IDENTITY(vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_IDENTITY(vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) + vec4(0.0, 0.0, 0.0, 0.0))) * vec4(1.0, 1.0, 1.0, 1.0)), (vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) / vec4(1.0, 1.0, 1.0, 1.0)))[3]), vec4(_GLF_FUZZED(16.98), (_GLF_IDENTITY(vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(_GLF_IDENTITY(mat3(0.0, 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 1.0, cos(0.0)), mat3(1.0) * (mat3(0.0, 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 1.0, cos(0.0)))), (_GLF_IDENTITY(_GLF_IDENTITY(mat3(0.0, 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 1.0, cos(0.0)), mat3(1.0) * (mat3(0.0, 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 1.0, cos(0.0)))), (_GLF_IDENTITY(mat3(0.0, 0.0, 0.0, length(vec4(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 1.0, cos(0.0)), mat3(1.0) * (mat3(0.0, 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 1.0, cos(0.0))))) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))) + mat3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))), 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) / _GLF_IDENTITY(vec4(1.0, 1.0, 1.0, 1.0), mat4(1.0) * (vec4(1.0, 1.0, 1.0, 1.0)))))[1], (_GLF_IDENTITY(vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) / vec4(1.0, 1.0, 1.0, 1.0)))[2], _GLF_FUZZED(-3147.3892)), bvec4(false, true, true, false)))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(vec4(1.0), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)), 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) / vec4(1.0, 1.0, 1.0, 1.0)), max(_GLF_IDENTITY(vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)), 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) / vec4(1.0, 1.0, 1.0, 1.0)), _GLF_IDENTITY(_GLF_IDENTITY(vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)), 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) / vec4(1.0, 1.0, 1.0, 1.0)), clamp(_GLF_IDENTITY(vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)), 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) / vec4(1.0, 1.0, 1.0, 1.0)), _GLF_IDENTITY(vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)), 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) / vec4(1.0, 1.0, 1.0, 1.0)), _GLF_IDENTITY(vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)), 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) / vec4(1.0, 1.0, 1.0, 1.0)))))), min(_GLF_IDENTITY(vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (vec4(mat3x4(vec4(1.0), _GLF_IDENTITY(1.0, float(mat3(_GLF_IDENTITY(1.0, float(mat3x2(1.0, 1.0, 0.0, 1.0, 1.0, 1.0))), 0.0, 0.0, 0.0, abs(1.0), 0.0, 0.0, 1.0, 0.0))), 1.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(0.0, float(vec3(0.0, 0.0, 0.0))), 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) / vec4(1.0, 1.0, 1.0, 1.0)), _GLF_IDENTITY(_GLF_IDENTITY(vec4(mat3x4(_GLF_IDENTITY(_GLF_IDENTITY(vec4(1.0), max(vec4(1.0), _GLF_IDENTITY(vec4(1.0), (_GLF_IDENTITY(vec4(1.0), mat4(1.0) * (vec4(1.0)))) / vec4(1.0, 1.0, 1.0, 1.0)))), (_GLF_IDENTITY(vec4(1.0), max(vec4(1.0), _GLF_IDENTITY(vec4(1.0), (_GLF_IDENTITY(vec4(1.0), mat4(1.0) * (vec4(1.0)))) / vec4(1.0, 1.0, 1.0, 1.0))))) + vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), _GLF_IDENTITY(0.0, float(float(0.0))), 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) / vec4(1.0, 1.0, 1.0, 1.0)), mix(vec4((_GLF_IDENTITY(vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(_GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-982.857) : 0.0)), injectionSwitch.x)))) / vec4(1.0, 1.0, 1.0, 1.0)))[0], _GLF_FUZZED(9.2), _GLF_FUZZED(-66.43), (_GLF_IDENTITY(_GLF_IDENTITY(vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_IDENTITY(vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) + vec4(0.0, 0.0, 0.0, 0.0))) * vec4(1.0, 1.0, 1.0, 1.0)), (vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) / vec4(1.0, 1.0, 1.0, 1.0)))[3]), vec4(_GLF_FUZZED(16.98), (_GLF_IDENTITY(vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(_GLF_IDENTITY(mat3(0.0, 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 1.0, cos(0.0)), mat3(1.0) * (mat3(0.0, 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 1.0, cos(0.0)))), (_GLF_IDENTITY(_GLF_IDENTITY(mat3(0.0, 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 1.0, cos(0.0)), mat3(1.0) * (mat3(0.0, 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 1.0, cos(0.0)))), (_GLF_IDENTITY(mat3(0.0, 0.0, 0.0, length(vec4(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 1.0, cos(0.0)), mat3(1.0) * (mat3(0.0, 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 1.0, cos(0.0))))) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))) + mat3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))), 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) / _GLF_IDENTITY(vec4(1.0, 1.0, 1.0, 1.0), mat4(1.0) * (vec4(1.0, 1.0, 1.0, 1.0)))))[1], (_GLF_IDENTITY(vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) / vec4(1.0, 1.0, 1.0, 1.0)))[2], _GLF_FUZZED(-3147.3892)), bvec4(false, true, true, false)))))), (_GLF_IDENTITY(vec4(1.0), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)), 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) / vec4(1.0, 1.0, 1.0, 1.0)), max(_GLF_IDENTITY(vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)), 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) / vec4(1.0, 1.0, 1.0, 1.0)), _GLF_IDENTITY(_GLF_IDENTITY(vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)), 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) / vec4(1.0, 1.0, 1.0, 1.0)), clamp(_GLF_IDENTITY(vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)), 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) / vec4(1.0, 1.0, 1.0, 1.0)), _GLF_IDENTITY(vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)), 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) / vec4(1.0, 1.0, 1.0, 1.0)), _GLF_IDENTITY(vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)), 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) / vec4(1.0, 1.0, 1.0, 1.0)))))), min(_GLF_IDENTITY(vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (vec4(mat3x4(vec4(1.0), _GLF_IDENTITY(1.0, float(mat3(_GLF_IDENTITY(1.0, float(mat3x2(1.0, 1.0, 0.0, 1.0, 1.0, 1.0))), 0.0, 0.0, 0.0, abs(1.0), 0.0, 0.0, 1.0, 0.0))), 1.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(0.0, float(vec3(0.0, 0.0, 0.0))), 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) / vec4(1.0, 1.0, 1.0, 1.0)), _GLF_IDENTITY(_GLF_IDENTITY(vec4(mat3x4(_GLF_IDENTITY(_GLF_IDENTITY(vec4(1.0), max(vec4(1.0), _GLF_IDENTITY(vec4(1.0), (_GLF_IDENTITY(vec4(1.0), mat4(1.0) * (vec4(1.0)))) / vec4(1.0, 1.0, 1.0, 1.0)))), (_GLF_IDENTITY(vec4(1.0), max(vec4(1.0), _GLF_IDENTITY(vec4(1.0), (_GLF_IDENTITY(vec4(1.0), mat4(1.0) * (vec4(1.0)))) / vec4(1.0, 1.0, 1.0, 1.0))))) + vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), _GLF_IDENTITY(0.0, float(float(0.0))), 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) / vec4(1.0, 1.0, 1.0, 1.0)), mix(vec4((_GLF_IDENTITY(vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(_GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-982.857) : 0.0)), injectionSwitch.x)))) / vec4(1.0, 1.0, 1.0, 1.0)))[0], _GLF_FUZZED(9.2), _GLF_FUZZED(-66.43), (_GLF_IDENTITY(_GLF_IDENTITY(vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_IDENTITY(vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) + vec4(0.0, 0.0, 0.0, 0.0))) * vec4(1.0, 1.0, 1.0, 1.0)), (vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) / vec4(1.0, 1.0, 1.0, 1.0)))[3]), vec4(_GLF_FUZZED(16.98), (_GLF_IDENTITY(vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(_GLF_IDENTITY(mat3(0.0, 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 1.0, cos(0.0)), mat3(1.0) * (mat3(0.0, 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 1.0, cos(0.0)))), (_GLF_IDENTITY(_GLF_IDENTITY(mat3(0.0, 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 1.0, cos(0.0)), mat3(1.0) * (mat3(0.0, 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 1.0, cos(0.0)))), (_GLF_IDENTITY(mat3(0.0, 0.0, 0.0, length(vec4(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 1.0, cos(0.0)), mat3(1.0) * (mat3(0.0, 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 1.0, cos(0.0))))) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))) + mat3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))), 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) / _GLF_IDENTITY(vec4(1.0, 1.0, 1.0, 1.0), mat4(1.0) * (vec4(1.0, 1.0, 1.0, 1.0)))))[1], (_GLF_IDENTITY(vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) / vec4(1.0, 1.0, 1.0, 1.0)))[2], _GLF_FUZZED(-3147.3892)), bvec4(false, true, true, false))))))) * mat4(1.0)), _GLF_IDENTITY(_GLF_IDENTITY(vec4(1.0), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)), 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) / vec4(1.0, 1.0, 1.0, 1.0)), max(_GLF_IDENTITY(vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)), 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) / vec4(1.0, 1.0, 1.0, 1.0)), _GLF_IDENTITY(_GLF_IDENTITY(vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)), 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) / vec4(1.0, 1.0, 1.0, 1.0)), clamp(_GLF_IDENTITY(vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)), 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) / vec4(1.0, 1.0, 1.0, 1.0)), _GLF_IDENTITY(vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)), 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) / vec4(1.0, 1.0, 1.0, 1.0)), _GLF_IDENTITY(vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)), 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) / vec4(1.0, 1.0, 1.0, 1.0)))))), min(_GLF_IDENTITY(vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (vec4(mat3x4(vec4(1.0), _GLF_IDENTITY(1.0, float(mat3(_GLF_IDENTITY(1.0, float(mat3x2(1.0, 1.0, 0.0, 1.0, 1.0, 1.0))), 0.0, 0.0, 0.0, abs(1.0), 0.0, 0.0, 1.0, 0.0))), 1.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(0.0, float(vec3(0.0, 0.0, 0.0))), 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) / vec4(1.0, 1.0, 1.0, 1.0)), _GLF_IDENTITY(_GLF_IDENTITY(vec4(mat3x4(_GLF_IDENTITY(_GLF_IDENTITY(vec4(1.0), max(vec4(1.0), _GLF_IDENTITY(vec4(1.0), (_GLF_IDENTITY(vec4(1.0), mat4(1.0) * (vec4(1.0)))) / vec4(1.0, 1.0, 1.0, 1.0)))), (_GLF_IDENTITY(vec4(1.0), max(vec4(1.0), _GLF_IDENTITY(vec4(1.0), (_GLF_IDENTITY(vec4(1.0), mat4(1.0) * (vec4(1.0)))) / vec4(1.0, 1.0, 1.0, 1.0))))) + vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), _GLF_IDENTITY(0.0, float(float(0.0))), 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) / vec4(1.0, 1.0, 1.0, 1.0)), mix(vec4((_GLF_IDENTITY(vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(_GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-982.857) : 0.0)), injectionSwitch.x)))) / vec4(1.0, 1.0, 1.0, 1.0)))[0], _GLF_FUZZED(9.2), _GLF_FUZZED(-66.43), (_GLF_IDENTITY(_GLF_IDENTITY(vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_IDENTITY(vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) + vec4(0.0, 0.0, 0.0, 0.0))) * vec4(1.0, 1.0, 1.0, 1.0)), (vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) / vec4(1.0, 1.0, 1.0, 1.0)))[3]), vec4(_GLF_FUZZED(16.98), (_GLF_IDENTITY(vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(_GLF_IDENTITY(mat3(0.0, 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 1.0, cos(0.0)), mat3(1.0) * (mat3(0.0, 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 1.0, cos(0.0)))), (_GLF_IDENTITY(_GLF_IDENTITY(mat3(0.0, 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 1.0, cos(0.0)), mat3(1.0) * (mat3(0.0, 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 1.0, cos(0.0)))), (_GLF_IDENTITY(mat3(0.0, 0.0, 0.0, length(vec4(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 1.0, cos(0.0)), mat3(1.0) * (mat3(0.0, 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 1.0, cos(0.0))))) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))) + mat3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))), 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) / _GLF_IDENTITY(vec4(1.0, 1.0, 1.0, 1.0), mat4(1.0) * (vec4(1.0, 1.0, 1.0, 1.0)))))[1], (_GLF_IDENTITY(vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) / vec4(1.0, 1.0, 1.0, 1.0)))[2], _GLF_FUZZED(-3147.3892)), bvec4(false, true, true, false)))))), mix(vec4(_GLF_FUZZED(-2.6), (_GLF_IDENTITY(vec4(1.0), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)), 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) / vec4(1.0, 1.0, 1.0, 1.0)), max(_GLF_IDENTITY(vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)), 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) / vec4(1.0, 1.0, 1.0, 1.0)), _GLF_IDENTITY(_GLF_IDENTITY(vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)), 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) / vec4(1.0, 1.0, 1.0, 1.0)), clamp(_GLF_IDENTITY(vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)), 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) / vec4(1.0, 1.0, 1.0, 1.0)), _GLF_IDENTITY(vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)), 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) / vec4(1.0, 1.0, 1.0, 1.0)), _GLF_IDENTITY(vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)), 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) / vec4(1.0, 1.0, 1.0, 1.0)))))), min(_GLF_IDENTITY(vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (vec4(mat3x4(vec4(1.0), _GLF_IDENTITY(1.0, float(mat3(_GLF_IDENTITY(1.0, float(mat3x2(1.0, 1.0, 0.0, 1.0, 1.0, 1.0))), 0.0, 0.0, 0.0, abs(1.0), 0.0, 0.0, 1.0, 0.0))), 1.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(0.0, float(vec3(0.0, 0.0, 0.0))), 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) / vec4(1.0, 1.0, 1.0, 1.0)), _GLF_IDENTITY(_GLF_IDENTITY(vec4(mat3x4(_GLF_IDENTITY(_GLF_IDENTITY(vec4(1.0), max(vec4(1.0), _GLF_IDENTITY(vec4(1.0), (_GLF_IDENTITY(vec4(1.0), mat4(1.0) * (vec4(1.0)))) / vec4(1.0, 1.0, 1.0, 1.0)))), (_GLF_IDENTITY(vec4(1.0), max(vec4(1.0), _GLF_IDENTITY(vec4(1.0), (_GLF_IDENTITY(vec4(1.0), mat4(1.0) * (vec4(1.0)))) / vec4(1.0, 1.0, 1.0, 1.0))))) + vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), _GLF_IDENTITY(0.0, float(float(0.0))), 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) / vec4(1.0, 1.0, 1.0, 1.0)), mix(vec4((_GLF_IDENTITY(vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(_GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-982.857) : 0.0)), injectionSwitch.x)))) / vec4(1.0, 1.0, 1.0, 1.0)))[0], _GLF_FUZZED(9.2), _GLF_FUZZED(-66.43), (_GLF_IDENTITY(_GLF_IDENTITY(vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_IDENTITY(vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) + vec4(0.0, 0.0, 0.0, 0.0))) * vec4(1.0, 1.0, 1.0, 1.0)), (vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) / vec4(1.0, 1.0, 1.0, 1.0)))[3]), vec4(_GLF_FUZZED(16.98), (_GLF_IDENTITY(vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(_GLF_IDENTITY(mat3(0.0, 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 1.0, cos(0.0)), mat3(1.0) * (mat3(0.0, 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 1.0, cos(0.0)))), (_GLF_IDENTITY(_GLF_IDENTITY(mat3(0.0, 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 1.0, cos(0.0)), mat3(1.0) * (mat3(0.0, 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 1.0, cos(0.0)))), (_GLF_IDENTITY(mat3(0.0, 0.0, 0.0, length(vec4(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 1.0, cos(0.0)), mat3(1.0) * (mat3(0.0, 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 1.0, cos(0.0))))) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))) + mat3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))), 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) / _GLF_IDENTITY(vec4(1.0, 1.0, 1.0, 1.0), mat4(1.0) * (vec4(1.0, 1.0, 1.0, 1.0)))))[1], (_GLF_IDENTITY(vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) / vec4(1.0, 1.0, 1.0, 1.0)))[2], _GLF_FUZZED(-3147.3892)), bvec4(false, true, true, false)))))))[1], (_GLF_IDENTITY(vec4(1.0), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)), 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) / vec4(1.0, 1.0, 1.0, 1.0)), max(_GLF_IDENTITY(vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)), 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) / vec4(1.0, 1.0, 1.0, 1.0)), _GLF_IDENTITY(_GLF_IDENTITY(vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)), 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) / vec4(1.0, 1.0, 1.0, 1.0)), clamp(_GLF_IDENTITY(vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)), 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) / vec4(1.0, 1.0, 1.0, 1.0)), _GLF_IDENTITY(vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)), 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) / vec4(1.0, 1.0, 1.0, 1.0)), _GLF_IDENTITY(vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)), 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) / vec4(1.0, 1.0, 1.0, 1.0)))))), min(_GLF_IDENTITY(vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (vec4(mat3x4(vec4(1.0), _GLF_IDENTITY(1.0, float(mat3(_GLF_IDENTITY(1.0, float(mat3x2(1.0, 1.0, 0.0, 1.0, 1.0, 1.0))), 0.0, 0.0, 0.0, abs(1.0), 0.0, 0.0, 1.0, 0.0))), 1.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(0.0, float(vec3(0.0, 0.0, 0.0))), 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) / vec4(1.0, 1.0, 1.0, 1.0)), _GLF_IDENTITY(_GLF_IDENTITY(vec4(mat3x4(_GLF_IDENTITY(_GLF_IDENTITY(vec4(1.0), max(vec4(1.0), _GLF_IDENTITY(vec4(1.0), (_GLF_IDENTITY(vec4(1.0), mat4(1.0) * (vec4(1.0)))) / vec4(1.0, 1.0, 1.0, 1.0)))), (_GLF_IDENTITY(vec4(1.0), max(vec4(1.0), _GLF_IDENTITY(vec4(1.0), (_GLF_IDENTITY(vec4(1.0), mat4(1.0) * (vec4(1.0)))) / vec4(1.0, 1.0, 1.0, 1.0))))) + vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), _GLF_IDENTITY(0.0, float(float(0.0))), 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) / vec4(1.0, 1.0, 1.0, 1.0)), mix(vec4((_GLF_IDENTITY(vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(_GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-982.857) : 0.0)), injectionSwitch.x)))) / vec4(1.0, 1.0, 1.0, 1.0)))[0], _GLF_FUZZED(9.2), _GLF_FUZZED(-66.43), (_GLF_IDENTITY(_GLF_IDENTITY(vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_IDENTITY(vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) + vec4(0.0, 0.0, 0.0, 0.0))) * vec4(1.0, 1.0, 1.0, 1.0)), (vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) / vec4(1.0, 1.0, 1.0, 1.0)))[3]), vec4(_GLF_FUZZED(16.98), (_GLF_IDENTITY(vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(_GLF_IDENTITY(mat3(0.0, 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 1.0, cos(0.0)), mat3(1.0) * (mat3(0.0, 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 1.0, cos(0.0)))), (_GLF_IDENTITY(_GLF_IDENTITY(mat3(0.0, 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 1.0, cos(0.0)), mat3(1.0) * (mat3(0.0, 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 1.0, cos(0.0)))), (_GLF_IDENTITY(mat3(0.0, 0.0, 0.0, length(vec4(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 1.0, cos(0.0)), mat3(1.0) * (mat3(0.0, 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 1.0, cos(0.0))))) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))) + mat3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))), 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) / _GLF_IDENTITY(vec4(1.0, 1.0, 1.0, 1.0), mat4(1.0) * (vec4(1.0, 1.0, 1.0, 1.0)))))[1], (_GLF_IDENTITY(vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) / vec4(1.0, 1.0, 1.0, 1.0)))[2], _GLF_FUZZED(-3147.3892)), bvec4(false, true, true, false)))))))[2], (_GLF_IDENTITY(vec4(1.0), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)), 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) / vec4(1.0, 1.0, 1.0, 1.0)), max(_GLF_IDENTITY(vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)), 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) / vec4(1.0, 1.0, 1.0, 1.0)), _GLF_IDENTITY(_GLF_IDENTITY(vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)), 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) / vec4(1.0, 1.0, 1.0, 1.0)), clamp(_GLF_IDENTITY(vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)), 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) / vec4(1.0, 1.0, 1.0, 1.0)), _GLF_IDENTITY(vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)), 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) / vec4(1.0, 1.0, 1.0, 1.0)), _GLF_IDENTITY(vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)), 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) / vec4(1.0, 1.0, 1.0, 1.0)))))), min(_GLF_IDENTITY(vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (vec4(mat3x4(vec4(1.0), _GLF_IDENTITY(1.0, float(mat3(_GLF_IDENTITY(1.0, float(mat3x2(1.0, 1.0, 0.0, 1.0, 1.0, 1.0))), 0.0, 0.0, 0.0, abs(1.0), 0.0, 0.0, 1.0, 0.0))), 1.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(0.0, float(vec3(0.0, 0.0, 0.0))), 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) / vec4(1.0, 1.0, 1.0, 1.0)), _GLF_IDENTITY(_GLF_IDENTITY(vec4(mat3x4(_GLF_IDENTITY(_GLF_IDENTITY(vec4(1.0), max(vec4(1.0), _GLF_IDENTITY(vec4(1.0), (_GLF_IDENTITY(vec4(1.0), mat4(1.0) * (vec4(1.0)))) / vec4(1.0, 1.0, 1.0, 1.0)))), (_GLF_IDENTITY(vec4(1.0), max(vec4(1.0), _GLF_IDENTITY(vec4(1.0), (_GLF_IDENTITY(vec4(1.0), mat4(1.0) * (vec4(1.0)))) / vec4(1.0, 1.0, 1.0, 1.0))))) + vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), _GLF_IDENTITY(0.0, float(float(0.0))), 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) / vec4(1.0, 1.0, 1.0, 1.0)), mix(vec4((_GLF_IDENTITY(vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(_GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-982.857) : 0.0)), injectionSwitch.x)))) / vec4(1.0, 1.0, 1.0, 1.0)))[0], _GLF_FUZZED(9.2), _GLF_FUZZED(-66.43), (_GLF_IDENTITY(_GLF_IDENTITY(vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_IDENTITY(vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) + vec4(0.0, 0.0, 0.0, 0.0))) * vec4(1.0, 1.0, 1.0, 1.0)), (vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) / vec4(1.0, 1.0, 1.0, 1.0)))[3]), vec4(_GLF_FUZZED(16.98), (_GLF_IDENTITY(vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(_GLF_IDENTITY(mat3(0.0, 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 1.0, cos(0.0)), mat3(1.0) * (mat3(0.0, 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 1.0, cos(0.0)))), (_GLF_IDENTITY(_GLF_IDENTITY(mat3(0.0, 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 1.0, cos(0.0)), mat3(1.0) * (mat3(0.0, 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 1.0, cos(0.0)))), (_GLF_IDENTITY(mat3(0.0, 0.0, 0.0, length(vec4(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 1.0, cos(0.0)), mat3(1.0) * (mat3(0.0, 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 1.0, cos(0.0))))) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))) + mat3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))), 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) / _GLF_IDENTITY(vec4(1.0, 1.0, 1.0, 1.0), mat4(1.0) * (vec4(1.0, 1.0, 1.0, 1.0)))))[1], (_GLF_IDENTITY(vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) / vec4(1.0, 1.0, 1.0, 1.0)))[2], _GLF_FUZZED(-3147.3892)), bvec4(false, true, true, false)))))))[3]), vec4((_GLF_IDENTITY(vec4(1.0), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)), 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) / vec4(1.0, 1.0, 1.0, 1.0)), max(_GLF_IDENTITY(vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)), 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) / vec4(1.0, 1.0, 1.0, 1.0)), _GLF_IDENTITY(_GLF_IDENTITY(vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)), 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) / vec4(1.0, 1.0, 1.0, 1.0)), clamp(_GLF_IDENTITY(vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)), 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) / vec4(1.0, 1.0, 1.0, 1.0)), _GLF_IDENTITY(vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)), 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) / vec4(1.0, 1.0, 1.0, 1.0)), _GLF_IDENTITY(vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)), 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) / vec4(1.0, 1.0, 1.0, 1.0)))))), min(_GLF_IDENTITY(vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (vec4(mat3x4(vec4(1.0), _GLF_IDENTITY(1.0, float(mat3(_GLF_IDENTITY(1.0, float(mat3x2(1.0, 1.0, 0.0, 1.0, 1.0, 1.0))), 0.0, 0.0, 0.0, abs(1.0), 0.0, 0.0, 1.0, 0.0))), 1.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(0.0, float(vec3(0.0, 0.0, 0.0))), 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) / vec4(1.0, 1.0, 1.0, 1.0)), _GLF_IDENTITY(_GLF_IDENTITY(vec4(mat3x4(_GLF_IDENTITY(_GLF_IDENTITY(vec4(1.0), max(vec4(1.0), _GLF_IDENTITY(vec4(1.0), (_GLF_IDENTITY(vec4(1.0), mat4(1.0) * (vec4(1.0)))) / vec4(1.0, 1.0, 1.0, 1.0)))), (_GLF_IDENTITY(vec4(1.0), max(vec4(1.0), _GLF_IDENTITY(vec4(1.0), (_GLF_IDENTITY(vec4(1.0), mat4(1.0) * (vec4(1.0)))) / vec4(1.0, 1.0, 1.0, 1.0))))) + vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), _GLF_IDENTITY(0.0, float(float(0.0))), 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) / vec4(1.0, 1.0, 1.0, 1.0)), mix(vec4((_GLF_IDENTITY(vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(_GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-982.857) : 0.0)), injectionSwitch.x)))) / vec4(1.0, 1.0, 1.0, 1.0)))[0], _GLF_FUZZED(9.2), _GLF_FUZZED(-66.43), (_GLF_IDENTITY(_GLF_IDENTITY(vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_IDENTITY(vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) + vec4(0.0, 0.0, 0.0, 0.0))) * vec4(1.0, 1.0, 1.0, 1.0)), (vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) / vec4(1.0, 1.0, 1.0, 1.0)))[3]), vec4(_GLF_FUZZED(16.98), (_GLF_IDENTITY(vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(_GLF_IDENTITY(mat3(0.0, 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 1.0, cos(0.0)), mat3(1.0) * (mat3(0.0, 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 1.0, cos(0.0)))), (_GLF_IDENTITY(_GLF_IDENTITY(mat3(0.0, 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 1.0, cos(0.0)), mat3(1.0) * (mat3(0.0, 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 1.0, cos(0.0)))), (_GLF_IDENTITY(mat3(0.0, 0.0, 0.0, length(vec4(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 1.0, cos(0.0)), mat3(1.0) * (mat3(0.0, 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 1.0, cos(0.0))))) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))) + mat3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))), 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) / _GLF_IDENTITY(vec4(1.0, 1.0, 1.0, 1.0), mat4(1.0) * (vec4(1.0, 1.0, 1.0, 1.0)))))[1], (_GLF_IDENTITY(vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) / vec4(1.0, 1.0, 1.0, 1.0)))[2], _GLF_FUZZED(-3147.3892)), bvec4(false, true, true, false)))))))[0], _GLF_FUZZED(-6.7), _GLF_FUZZED(-4.3), _GLF_FUZZED(71.06)), bvec4(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false, false))), _GLF_IDENTITY(_GLF_IDENTITY(vec4(1.0), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)), 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) / vec4(1.0, 1.0, 1.0, 1.0)), max(_GLF_IDENTITY(vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)), 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) / vec4(1.0, 1.0, 1.0, 1.0)), _GLF_IDENTITY(_GLF_IDENTITY(vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)), 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) / vec4(1.0, 1.0, 1.0, 1.0)), clamp(_GLF_IDENTITY(vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)), 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) / vec4(1.0, 1.0, 1.0, 1.0)), _GLF_IDENTITY(vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)), 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) / vec4(1.0, 1.0, 1.0, 1.0)), _GLF_IDENTITY(vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)), 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) / vec4(1.0, 1.0, 1.0, 1.0)))))), min(_GLF_IDENTITY(vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (vec4(mat3x4(vec4(1.0), _GLF_IDENTITY(1.0, float(mat3(_GLF_IDENTITY(1.0, float(mat3x2(1.0, 1.0, 0.0, 1.0, 1.0, 1.0))), 0.0, 0.0, 0.0, abs(1.0), 0.0, 0.0, 1.0, 0.0))), 1.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(0.0, float(vec3(0.0, 0.0, 0.0))), 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) / vec4(1.0, 1.0, 1.0, 1.0)), _GLF_IDENTITY(_GLF_IDENTITY(vec4(mat3x4(_GLF_IDENTITY(_GLF_IDENTITY(vec4(1.0), max(vec4(1.0), _GLF_IDENTITY(vec4(1.0), (_GLF_IDENTITY(vec4(1.0), mat4(1.0) * (vec4(1.0)))) / vec4(1.0, 1.0, 1.0, 1.0)))), (_GLF_IDENTITY(vec4(1.0), max(vec4(1.0), _GLF_IDENTITY(vec4(1.0), (_GLF_IDENTITY(vec4(1.0), mat4(1.0) * (vec4(1.0)))) / vec4(1.0, 1.0, 1.0, 1.0))))) + vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), _GLF_IDENTITY(0.0, float(float(0.0))), 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) / vec4(1.0, 1.0, 1.0, 1.0)), mix(vec4((_GLF_IDENTITY(vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(_GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-982.857) : 0.0)), injectionSwitch.x)))) / vec4(1.0, 1.0, 1.0, 1.0)))[0], _GLF_FUZZED(9.2), _GLF_FUZZED(-66.43), (_GLF_IDENTITY(_GLF_IDENTITY(vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_IDENTITY(vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) + vec4(0.0, 0.0, 0.0, 0.0))) * vec4(1.0, 1.0, 1.0, 1.0)), (vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) / vec4(1.0, 1.0, 1.0, 1.0)))[3]), vec4(_GLF_FUZZED(16.98), (_GLF_IDENTITY(vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(_GLF_IDENTITY(mat3(0.0, 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 1.0, cos(0.0)), mat3(1.0) * (mat3(0.0, 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 1.0, cos(0.0)))), (_GLF_IDENTITY(_GLF_IDENTITY(mat3(0.0, 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 1.0, cos(0.0)), mat3(1.0) * (mat3(0.0, 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 1.0, cos(0.0)))), (_GLF_IDENTITY(mat3(0.0, 0.0, 0.0, length(vec4(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 1.0, cos(0.0)), mat3(1.0) * (mat3(0.0, 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 1.0, cos(0.0))))) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))) + mat3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))), 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) / _GLF_IDENTITY(vec4(1.0, 1.0, 1.0, 1.0), mat4(1.0) * (vec4(1.0, 1.0, 1.0, 1.0)))))[1], (_GLF_IDENTITY(vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) / vec4(1.0, 1.0, 1.0, 1.0)))[2], _GLF_FUZZED(-3147.3892)), bvec4(false, true, true, false)))))), (false ? _GLF_FUZZED(vec4(-7.3, -4.4, -92.68, 6.0)) : _GLF_IDENTITY(vec4(1.0), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)), 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) / vec4(1.0, 1.0, 1.0, 1.0)), max(_GLF_IDENTITY(vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)), 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) / vec4(1.0, 1.0, 1.0, 1.0)), _GLF_IDENTITY(_GLF_IDENTITY(vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)), 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) / vec4(1.0, 1.0, 1.0, 1.0)), clamp(_GLF_IDENTITY(vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)), 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) / vec4(1.0, 1.0, 1.0, 1.0)), _GLF_IDENTITY(vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)), 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) / vec4(1.0, 1.0, 1.0, 1.0)), _GLF_IDENTITY(vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)), 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) / vec4(1.0, 1.0, 1.0, 1.0)))))), min(_GLF_IDENTITY(vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (vec4(mat3x4(vec4(1.0), _GLF_IDENTITY(1.0, float(mat3(_GLF_IDENTITY(1.0, float(mat3x2(1.0, 1.0, 0.0, 1.0, 1.0, 1.0))), 0.0, 0.0, 0.0, abs(1.0), 0.0, 0.0, 1.0, 0.0))), 1.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(0.0, float(vec3(0.0, 0.0, 0.0))), 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) / vec4(1.0, 1.0, 1.0, 1.0)), _GLF_IDENTITY(_GLF_IDENTITY(vec4(mat3x4(_GLF_IDENTITY(_GLF_IDENTITY(vec4(1.0), max(vec4(1.0), _GLF_IDENTITY(vec4(1.0), (_GLF_IDENTITY(vec4(1.0), mat4(1.0) * (vec4(1.0)))) / vec4(1.0, 1.0, 1.0, 1.0)))), (_GLF_IDENTITY(vec4(1.0), max(vec4(1.0), _GLF_IDENTITY(vec4(1.0), (_GLF_IDENTITY(vec4(1.0), mat4(1.0) * (vec4(1.0)))) / vec4(1.0, 1.0, 1.0, 1.0))))) + vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), _GLF_IDENTITY(0.0, float(float(0.0))), 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) / vec4(1.0, 1.0, 1.0, 1.0)), mix(vec4((_GLF_IDENTITY(vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(_GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-982.857) : 0.0)), injectionSwitch.x)))) / vec4(1.0, 1.0, 1.0, 1.0)))[0], _GLF_FUZZED(9.2), _GLF_FUZZED(-66.43), (_GLF_IDENTITY(_GLF_IDENTITY(vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_IDENTITY(vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) + vec4(0.0, 0.0, 0.0, 0.0))) * vec4(1.0, 1.0, 1.0, 1.0)), (vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) / vec4(1.0, 1.0, 1.0, 1.0)))[3]), vec4(_GLF_FUZZED(16.98), (_GLF_IDENTITY(vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(_GLF_IDENTITY(mat3(0.0, 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 1.0, cos(0.0)), mat3(1.0) * (mat3(0.0, 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 1.0, cos(0.0)))), (_GLF_IDENTITY(_GLF_IDENTITY(mat3(0.0, 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 1.0, cos(0.0)), mat3(1.0) * (mat3(0.0, 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 1.0, cos(0.0)))), (_GLF_IDENTITY(mat3(0.0, 0.0, 0.0, length(vec4(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 1.0, cos(0.0)), mat3(1.0) * (mat3(0.0, 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 1.0, cos(0.0))))) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))) + mat3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))), 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) / _GLF_IDENTITY(vec4(1.0, 1.0, 1.0, 1.0), mat4(1.0) * (vec4(1.0, 1.0, 1.0, 1.0)))))[1], (_GLF_IDENTITY(vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), (vec4(mat3x4(vec4(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))) / vec4(1.0, 1.0, 1.0, 1.0)))[2], _GLF_FUZZED(-3147.3892)), bvec4(false, true, true, false)))))))))), 0.0, abs(1.0), 0.0, _GLF_IDENTITY(1.0, float(vec4(1.0, 0.0, 1.0, 1.0))), 0.0, 0.0, sqrt(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(4.1)), bool(_GLF_IDENTITY(false, ! (! (false))))))), 1.0, tan(0.0), _GLF_IDENTITY(dot(vec3(_GLF_IDENTITY(sqrt(0.0), _GLF_IDENTITY(_GLF_IDENTITY((sqrt(0.0)), ((sqrt(0.0))) * 1.0) / 1.0, max((sqrt(0.0)) / 1.0, (sqrt(0.0)) / 1.0))), tan(0.0), 1.0), _GLF_IDENTITY(vec3(0.0, 0.0, 1.0), (false ? _GLF_FUZZED(vec3(-603.381, -770.633, -5903.3927)) : _GLF_IDENTITY(vec3(0.0, 0.0, 1.0), clamp(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)))))), dot(vec3(_GLF_IDENTITY(sqrt(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(278.147)), float(0.0), bool(true)))), (true ? sqrt(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(278.147)), float(0.0), bool(true)))) : _GLF_FUZZED((125.940 / 4.7)))), tan(0.0), 1.0), vec3(0.0, 0.0, 1.0))), sqrt(1.0), 1.0)) : _GLF_FUZZED(vec4(-4.1, -6.5, -7.4, -7.4))))), _GLF_IDENTITY(mat4(1.0), transpose(transpose(_GLF_IDENTITY(mat4(1.0), (_GLF_IDENTITY(mat4(1.0), (true ? mat4(1.0) : _GLF_FUZZED(mat4(7783.9249, 7.6, 2.5, 935.451, -8462.7399, -48.51, 9.5, 6273.8702, -1.6, 1.4, 4465.2126, 9511.7913, 2.0, -0.8, -394.198, 1.0))))) - mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))), ivec2(1), mat3(1.0))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 buf[virtual_gid] = 1;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(_GLF_IDENTITY(bool(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bvec3(bool(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true, false))))))))
  barrier();
 for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))), true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))), _GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y)))), ! (_GLF_IDENTITY(! ((_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))))), ! (_GLF_IDENTITY(! (! ((_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y)))))), (! (! ((_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))))))) && true))))) && true)))))), false || (_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))))), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))), true && _GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))), ! _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))), (_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) >> (0 >> _GLF_IDENTITY(int(1), int(1)))))) && true))), bool(bool(_GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))), (_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) >> (0 >> _GLF_IDENTITY(int(1), int(1)))))) && true))), (_GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))), (_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) >> (0 >> _GLF_IDENTITY(int(1), int(1)))))) && true))), ((! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))), (_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) >> (0 >> _GLF_IDENTITY(int(1), int(1)))))) && true)))) || false)) || false)))))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))), ! _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))), (_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) >> (0 >> _GLF_IDENTITY(int(1), int(1)))))) && true))), bool(bool(_GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))), (_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) >> (0 >> _GLF_IDENTITY(int(1), int(1)))))) && true))), (_GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))), (_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) >> (0 >> _GLF_IDENTITY(int(1), int(1)))))) && true))), ((! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))), (_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) >> (0 >> _GLF_IDENTITY(int(1), int(1)))))) && true)))) || false)) || false)))))), ! (! ((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))), ! _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))), (_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) >> (0 >> _GLF_IDENTITY(int(1), int(1)))))) && true))), bool(bool(_GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))), (_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) >> (0 >> _GLF_IDENTITY(int(1), int(1)))))) && true))), (_GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))), (_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) >> (0 >> _GLF_IDENTITY(int(1), int(1)))))) && true))), ((! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))), (_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) >> (0 >> _GLF_IDENTITY(int(1), int(1)))))) && true)))) || false)) || false))))))))))), (bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))), ! _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))), (_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) >> (0 >> _GLF_IDENTITY(int(1), int(1)))))) && true))), bool(bool(_GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))), (_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) >> (0 >> _GLF_IDENTITY(int(1), int(1)))))) && true))), (_GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))), (_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) >> (0 >> _GLF_IDENTITY(int(1), int(1)))))) && true))), ((! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))), (_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) >> (0 >> _GLF_IDENTITY(int(1), int(1)))))) && true)))) || false)) || false)))))), ! (! ((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))), ! _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))), (_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) >> (0 >> _GLF_IDENTITY(int(1), int(1)))))) && true))), bool(bool(_GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))), (_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) >> (0 >> _GLF_IDENTITY(int(1), int(1)))))) && true))), (_GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))), (_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) >> (0 >> _GLF_IDENTITY(int(1), int(1)))))) && true))), ((! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))), (_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) >> (0 >> _GLF_IDENTITY(int(1), int(1)))))) && true)))) || false)) || false)))))))))))) && true))), false || (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))), false || (_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec2(false, false)))))))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
           barrier();
          }
        }
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             do
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
            }
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) || false)) && true)))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        {
         do
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + length(vec4(0.0, 0.0, 0.0, 0.0))) > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false)))))))))))
              barrier();
             barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
              barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       do
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) / 1))
          {
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)).y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)).y)))) && true))
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, true, true))))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               barrier();
              }
             else
              {
              }
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))), bool(bvec4(bool(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))), true, true, true)))))));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 for(int _injected_loop_counter = (((1 ^ 0) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id))), (false ? _GLF_FUZZED(60061u) : (_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id))) | (subgroup_local_id)))))) + 1 < subgroup_size)
        {
         do
          {
           atomicStore(buf[_GLF_IDENTITY(_GLF_struct_replacement_9.next_virtual_gid, uint(uvec4(_GLF_struct_replacement_9.next_virtual_gid, 1u, 1u, 0u)))], uint(2), 4, 64, 4);
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           do
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false))))))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 barrier();
                }
              }
             for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 ^ 0)); _injected_loop_counter --)
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   else
                    {
                    }
                   barrier();
                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))) && true)))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                    }
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
               barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
             do
              {
               if(_GLF_DEAD(false))
                barrier();
               subgroupAll(false);
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
            barrier();
           barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false)))))
            barrier();
          }
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && _GLF_IDENTITY(true, (true) && true)))
          {
          }
         else
          {
           for(int _injected_loop_counter = (0 | (0 | 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  {
                   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                    {
                     barrier();
                    }
                  }
                 barrier();
                }
              }
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false)))))))
            barrier();
          }
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, _GLF_IDENTITY(false, (false) || false) || (true)))))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
            {
             for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) << 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
              {
               barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               barrier();
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), injectionSwitch.x)) < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) + 0.0))).y))))
          {
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))))))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false || (_GLF_IDENTITY(bool(bvec3(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bvec3(bool(bvec3(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true, false)))))))) && true))
                  {
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_DEAD(false))
                  {
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             barrier();
                            }
                           else
                            {
                            }
                           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                            {
                             if(_GLF_DEAD(false))
                              {
                               do
                                {
                                 barrier();
                                }
                               while(_GLF_WRAPPED_LOOP(false));
                               if(_GLF_WRAPPED_IF_TRUE(true))
                                {
                                 if(_GLF_DEAD(false))
                                  barrier();
                                }
                               else
                                {
                                }
                              }
                            }
                           if(_GLF_DEAD(false))
                            barrier();
                          }
                        }
                      }
                    }
                   else
                    {
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                  barrier();
                 barrier();
                }
              }
             else
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                    }
                   barrier();
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             if(_GLF_DEAD(false))
              {
               do
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    {
                     do
                      {
                       barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 do
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   barrier();
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                  {
                   barrier();
                  }
                }
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bool(false)))))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                 barrier();
                }
              }
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat3(injectionSwitch.x, 0.0, 0.0, determinant(mat2(0.0, 0.0, 1.0, 0.0)), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(_GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, _GLF_IDENTITY(0.0, max(0.0, 0.0))))), 0.0)), _GLF_IDENTITY(_GLF_IDENTITY(dot(_GLF_IDENTITY(vec3(1.0, 0.0, 0.0), mix(vec3(_GLF_FUZZED(3.9), (vec3(1.0, 0.0, 0.0))[1], _GLF_FUZZED(5.1)), vec3((vec3(1.0, 0.0, 0.0))[0], _GLF_FUZZED(-5.6), (vec3(1.0, 0.0, 0.0))[2]), bvec3(true, false, true))), vec3(_GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0))), max(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0))), _GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0))), mix(float(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0)))), float(_GLF_FUZZED(84.40)), bool(false))))), float(mat3(_GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0))), max(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0))), _GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0))), mix(float(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0)))), float(_GLF_FUZZED(84.40)), bool(false))))), 1.0, 1.0, 0.0, 1.0, 0.0, sqrt(1.0), 1.0, 0.0)))) / 1.0), 0.0)), (dot(vec3(1.0, 0.0, 0.0), vec3(_GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(dot(_GLF_IDENTITY(vec2(0.0, 1.0), max(vec2(0.0, 1.0), vec2(0.0, 1.0))), vec2(1.0, 0.0)), dot(vec2(0.0, _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0))), vec2(1.0, 0.0))), 0.0))) / 1.0), float(mat4x2(_GLF_IDENTITY(dot(_GLF_IDENTITY(vec3(1.0, 0.0, 0.0), mix(vec3(_GLF_FUZZED(3.9), (vec3(1.0, 0.0, 0.0))[1], _GLF_FUZZED(5.1)), vec3((vec3(1.0, 0.0, 0.0))[0], _GLF_FUZZED(-5.6), (vec3(1.0, 0.0, 0.0))[2]), bvec3(true, false, true))), vec3(_GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0))), max(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0))), _GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0))), mix(float(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0)))), float(_GLF_FUZZED(84.40)), bool(false))))), float(mat3(_GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0))), max(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0))), _GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0))), mix(float(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0)))), float(_GLF_FUZZED(84.40)), bool(false))))), 1.0, 1.0, 0.0, 1.0, 0.0, sqrt(1.0), 1.0, 0.0)))) / 1.0), 0.0)), (dot(vec3(1.0, 0.0, 0.0), vec3(_GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(dot(_GLF_IDENTITY(vec2(0.0, 1.0), max(vec2(0.0, 1.0), vec2(0.0, 1.0))), vec2(1.0, 0.0)), dot(vec2(0.0, _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0))), vec2(1.0, 0.0))), 0.0))) / 1.0), sqrt(0.0), 0.0, 0.0, 1.0, abs(0.0), 1.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)))), dot(vec2(0.0, 1.0), vec2(0.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0))))))))), 1.0, 1.0), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? mat3(injectionSwitch.x, 0.0, 0.0, determinant(mat2(0.0, 0.0, 1.0, 0.0)), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(_GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0))), _GLF_IDENTITY(0.0, (0.0) - sin(0.0)))), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(_GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, _GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_IDENTITY(_GLF_FUZZED(dot(mod(vec2(-894.026, -92.38), injectionSwitch), vec2(-84.81, -33.28))), mix(float(_GLF_FUZZED(dot(mod(vec2(-894.026, -92.38), injectionSwitch), vec2(-84.81, -33.28)))), float(_GLF_FUZZED(-81.96)), bool(false))) : 0.0)))), dot(vec2(0.0, 1.0), vec2(1.0, 0.0))), 0.0)), (dot(vec3(1.0, 0.0, 0.0), vec3(_GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0))), 0.0))) / 1.0)), 1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))) : _GLF_FUZZED((mat3(65.80, 0.9, 6.1, -300.187, -3.2, 863.892, -8.1, -2.6, _GLF_IDENTITY(-9.0, min(-9.0, -9.0))) + -8.5)))))) > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / sqrt(cos(vec2(0.0, 0.0)))).y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y)))))))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec3(injectionSwitch, 1.0), (vec3(injectionSwitch, 1.0)) * mat3(1.0)))))).x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    {
                     do
                      {
                       barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   barrier();
                  }
                 barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
               for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 atomicStore(buf[_GLF_IDENTITY(_GLF_struct_replacement_9.next_virtual_gid, (_GLF_struct_replacement_9.next_virtual_gid) >> 0u)], uint(_GLF_IDENTITY(2, int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(mat3x2(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, _GLF_IDENTITY(1.0, 1.0 * (1.0)), 0.0, 0.0)))) ^ (2))), 4, 64, 4);
                }
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         barrier();
                        }
                       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter ++)
                        {
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             barrier();
                            }
                          }
                        }
                       barrier();
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                            {
                             barrier();
                            }
                          }
                        }
                      }
                     barrier();
                     do
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                          {
                           barrier();
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                          }
                         else
                          {
                          }
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                    }
                  }
                 else
                  {
                  }
                }
              }
             else
              {
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))).x > injectionSwitch.y))))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 do
                  {
                   do
                    {
                     for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         barrier();
                        }
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                    }
                   else
                    {
                     for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), 0 ^ (int(_GLF_ONE(1.0, injectionSwitch.y)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                      {
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                        }
                       else
                        {
                         barrier();
                        }
                      }
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       barrier();
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               for(int _injected_loop_counter = (-65194 & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 ^ (0 | 0))); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               do
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))), true))))))))
                    barrier();
                   barrier();
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 barrier();
                }
               if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                }
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
              }
             subgroupAll(true);
             if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         else
          {
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
            barrier();
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     barrier();
                    }
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   else
                    {
                    }
                  }
                 barrier();
                }
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), min(int(7), int(7)))))); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
            {
             do
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
              {
               barrier();
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
            }
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), min(int(0), int(0))))) >> _GLF_IDENTITY(int(0), int(0))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter --)
          {
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((0 ^ 0), ((0 ^ 0)) << 0)); _injected_loop_counter --)
            {
             do
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 for(int _injected_loop_counter = ((0 >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), max(int(6), int(6))))) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(false))
                    {
                     do
                      {
                       barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
                    }
                  }
                }
               else
                {
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec2((injectionSwitch.x < injectionSwitch.y), true))))))
      {
       barrier();
      }
     else
      {
      }
    }
   do
    {
     do
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))))
          barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
    {
    }
   else
    {
     barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
            {
            }
           else
            {
             barrier();
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, length(vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 1.0, 0.0, length(0.0), _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 1.0, 0.0, 0.0, 1.0))).y))))
                barrier();
               barrier();
              }
            }
          }
        }
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
}
