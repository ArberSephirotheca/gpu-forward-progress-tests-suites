#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_8 {
 ivec3 _f0;
 uvec2 _f1;
 mat3x4 _f2;
 bvec2 _f3;
 mat4x2 _f4;
} ;

struct _GLF_struct_7 {
 uvec4 _f0;
 mat2x4 _f1;
} ;

struct _GLF_struct_9 {
 mat4x3 _f0;
 uvec4 _f1;
 _GLF_struct_7 _f2;
 ivec3 _f3;
 _GLF_struct_8 _f4;
 bvec3 _f5;
 uvec2 _f6;
} ;

struct _GLF_struct_5 {
 bvec4 _f0;
 uvec3 _f1;
 vec3 _f2;
 bvec4 _f3;
 mat4x3 _f4;
 mat4x3 _f5;
 uvec3 _f6;
} ;

struct _GLF_struct_4 {
 mat2 _f0;
 uint virtual_gid;
 mat3x4 _f1;
 uint _f2;
 bvec4 _f3;
 mat3 _f4;
 ivec4 _f5;
} ;

struct _GLF_struct_3 {
 bvec3 _f0;
 uint _f1;
} ;

struct _GLF_struct_6 {
 _GLF_struct_3 _f0;
 _GLF_struct_4 _f1;
 _GLF_struct_5 _f2;
} ;

struct _GLF_struct_10 {
 bvec4 _f0;
 _GLF_struct_6 _f1;
 _GLF_struct_9 _f2;
} ;

struct _GLF_struct_0 {
 mat2 _f0;
 mat3x4 _f1;
} ;

struct _GLF_struct_1 {
 uint subgroup_local_id;
 mat2 _f0;
 mat4 _f1;
 _GLF_struct_0 _f2;
 bool _f3;
 bvec3 _f4;
} ;

struct _GLF_struct_2 {
 _GLF_struct_1 _f0;
 mat3 _f1;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
uint subgroup_size = 16;
 _GLF_struct_2 _GLF_struct_replacement_2 = _GLF_struct_2(_GLF_struct_1(gl_SubgroupInvocationID, mat2(1.0), mat4(1.0), _GLF_struct_0(mat2(1.0), mat3x4(1.0)), true, bvec3(true)), mat3(1.0));
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 _GLF_struct_10 _GLF_struct_replacement_10 = _GLF_struct_10(bvec4(true), _GLF_struct_6(_GLF_struct_3(bvec3(true), 1u), _GLF_struct_4(mat2(1.0), workgroup_base + subgroup_id * subgroup_size + _GLF_struct_replacement_2._f0.subgroup_local_id, mat3x4(1.0), 1u, bvec4(true), mat3(1.0), ivec4(1)), _GLF_struct_5(bvec4(true), uvec3(1u), vec3(1.0), bvec4(true), mat4x3(1.0), mat4x3(1.0), uvec3(1u))), _GLF_struct_9(mat4x3(1.0), uvec4(1u), _GLF_struct_7(uvec4(1u), mat2x4(1.0)), ivec3(1), _GLF_struct_8(ivec3(1), uvec2(1u), mat3x4(1.0), bvec2(true), mat4x2(1.0)), bvec3(true), uvec2(1u)));
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((_GLF_struct_replacement_2._f0.subgroup_local_id + 1) % subgroup_size);
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   buf[_GLF_struct_replacement_10._f1._f1.virtual_gid] = 1;
  }
 if(_GLF_struct_replacement_2._f0.subgroup_local_id + 1 < subgroup_size)
  {
   do
    {
     atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
    }
   while(_GLF_WRAPPED_LOOP(false));
   subgroupAll(false);
  }
 else
  {
   atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
   for(int _injected_loop_counter = ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     do
      {
       subgroupAll(true);
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
}
