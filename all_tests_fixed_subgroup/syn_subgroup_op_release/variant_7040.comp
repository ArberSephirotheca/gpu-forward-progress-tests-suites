#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), false || (! (true))))))), true && (bool(bool(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), false || (! (true))))))))), false || (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), false || (! (true))))))), (bool(bool(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), false || (! (true)))))))) && true))))) || false)))
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec2(false, true)))), (! (_GLF_IDENTITY(false, bool(bvec2(false, true))))) || false), bool(bvec3(! (_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true), bool(bvec2(false, true)))), false, false))))))))))
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                break;
               barrier();
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
              continue;
             return;
            }
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             continue;
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
            return;
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         continue;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         continue;
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      break;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(_GLF_IDENTITY(mat3x4(injectionSwitch.x, 1.0, 0.0, 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 1.0, 0.0), vec4(1.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 1.0, 1.0, 0.0), vec4(1.0, 0.0, 0.0, 1.0))), 1.0, 0.0, 1.0, sqrt(1.0), 0.0, 1.0)), 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 1.0, 0.0, 0.0), mat3x4(mat4(mat3x4(injectionSwitch.x, 1.0, 0.0, 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 1.0, 0.0), vec4(1.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 1.0, 1.0, 0.0), vec4(1.0, 0.0, 0.0, 1.0))), 1.0, 0.0, 1.0, sqrt(1.0), 0.0, 1.0)), 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 1.0, 0.0, 0.0))))), min(float(_GLF_IDENTITY(mat3x4(injectionSwitch.x, 1.0, 0.0, 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 1.0, 0.0), vec4(1.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 1.0, 1.0, 0.0), vec4(1.0, 0.0, 0.0, 1.0))), 1.0, 0.0, 1.0, sqrt(1.0), 0.0, 1.0)), 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 1.0, 0.0, 0.0), mat3x4(mat4(mat3x4(injectionSwitch.x, 1.0, 0.0, 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 1.0, 0.0), vec4(1.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 1.0, 1.0, 0.0), vec4(1.0, 0.0, 0.0, 1.0))), 1.0, 0.0, 1.0, sqrt(1.0), 0.0, 1.0)), 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 1.0, 0.0, 0.0))))), float(_GLF_IDENTITY(mat3x4(injectionSwitch.x, 1.0, 0.0, 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 1.0, 0.0), vec4(1.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 1.0, 1.0, 0.0), vec4(1.0, 0.0, 0.0, 1.0))), 1.0, 0.0, 1.0, sqrt(1.0), 0.0, 1.0)), 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 1.0, 0.0, 0.0), mat3x4(mat4(mat3x4(injectionSwitch.x, 1.0, 0.0, 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 1.0, 0.0), vec4(1.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 1.0, 1.0, 0.0), vec4(1.0, 0.0, 0.0, 1.0))), 1.0, 0.0, 1.0, sqrt(1.0), 0.0, 1.0)), 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 1.0, 0.0, 0.0)))))))) > injectionSwitch.y)), false || (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec4((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)))), true, false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < injectionSwitch.y)))))), bool(bvec2(bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))), true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true))))))))) || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((injectionSwitch.x), clamp((injectionSwitch.x), (injectionSwitch.x), _GLF_IDENTITY((injectionSwitch.x), (true ? (injectionSwitch.x) : _GLF_FUZZED(66.13))))) + 0.0) > injectionSwitch.y))))));
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))) || false), false, true)))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(0.0, 0.0) + (injectionSwitch), clamp(vec2(0.0, 0.0) + (injectionSwitch), vec2(0.0, 0.0) + (injectionSwitch), _GLF_IDENTITY(vec2(0.0, 0.0) + (injectionSwitch), (true ? vec2(0.0, 0.0) + (injectionSwitch) : _GLF_FUZZED(vec2(-90.99, -6733.8660)))))))) / vec2(1.0, 1.0)).x, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(0.0, 0.0) + (injectionSwitch), clamp(vec2(0.0, 0.0) + (injectionSwitch), vec2(0.0, 0.0) + (injectionSwitch), _GLF_IDENTITY(vec2(0.0, 0.0) + (injectionSwitch), (true ? vec2(0.0, 0.0) + (injectionSwitch) : _GLF_FUZZED(vec2(-90.99, -6733.8660)))))))) / vec2(1.0, 1.0)).x) * 1.0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (1) >> 0)); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        break;
       barrier();
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
      continue;
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
uint subgroup_size = 16;
 if(_GLF_DEAD(false))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 for(int _injected_loop_counter = _GLF_IDENTITY(1, min(1, 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(8), int(8)))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, (false ? _GLF_FUZZED(22041) : 0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(min(vec2(818.247, 6.9), injectionSwitch)))))).y))))
  barrier();
 for(int _injected_loop_counter = _GLF_IDENTITY(0, ~ (~ (0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, int(int(1)))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], clamp((injectionSwitch)[0], (injectionSwitch)[0], (injectionSwitch)[0])), _GLF_FUZZED(5.3)), vec2(_GLF_FUZZED(5116.3294), (injectionSwitch)[1]), bvec2(false, true))).x > injectionSwitch.y))))
          continue;
         barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
        continue;
       barrier();
      }
     barrier();
    }
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true, true, true)))))
      return;
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, uint(uvec2(workgroup_base, 1u))) + subgroup_id * subgroup_size + subgroup_local_id, uint(uvec3(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id, 0u, (1u & 1u))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(1.5) : injectionSwitch.y))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(1.5) : injectionSwitch.y))))))))))
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
     do
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             return;
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          return;
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       return;
       if(_GLF_DEAD(false))
        break;
      }
     if(_GLF_DEAD(false))
      return;
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, true))), (injectionSwitch.x > injectionSwitch.y))))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         return;
        }
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY(uint(uvec3(subgroup_local_id + 1, 1u, 0u)), (uint(uvec3(subgroup_local_id + 1, 1u, 0u))) | _GLF_IDENTITY((uint(_GLF_IDENTITY(uvec3(subgroup_local_id + 1, 1u, 0u), clamp(uvec3(subgroup_local_id + 1, 1u, 0u), _GLF_IDENTITY(uvec3(subgroup_local_id + 1, 1u, 0u), (uvec3(subgroup_local_id + 1, 1u, 0u)) - uvec3(0u, 0u, 0u)), _GLF_IDENTITY(_GLF_IDENTITY(uvec3(subgroup_local_id + 1, 1u, 0u), (uvec3(subgroup_local_id + 1, 1u, 0u)) - uvec3(0u, 0u, 0u)), ~ (~ (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(subgroup_local_id + 1, max(subgroup_local_id + 1, subgroup_local_id + 1)), 1u, 0u), (uvec3(subgroup_local_id + 1, 1u, 0u)) - uvec3(0u, 0u, 0u))))))))), 0u ^ ((uint(_GLF_IDENTITY(uvec3(subgroup_local_id + 1, 1u, 0u), clamp(uvec3(subgroup_local_id + 1, 1u, 0u), _GLF_IDENTITY(uvec3(subgroup_local_id + 1, 1u, 0u), (uvec3(subgroup_local_id + 1, 1u, 0u)) - uvec3(0u, 0u, 0u)), _GLF_IDENTITY(_GLF_IDENTITY(uvec3(subgroup_local_id + 1, 1u, 0u), (uvec3(subgroup_local_id + 1, 1u, 0u)) - uvec3(0u, 0u, 0u)), ~ (~ (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(subgroup_local_id + 1, max(subgroup_local_id + 1, subgroup_local_id + 1)), 1u, 0u), (uvec3(subgroup_local_id + 1, 1u, 0u)) - uvec3(0u, 0u, 0u))))))))))))))))) % subgroup_size, _GLF_IDENTITY(min(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY(uint(uvec3(subgroup_local_id + 1, 1u, 0u)), (uint(uvec3(subgroup_local_id + 1, 1u, 0u))) | (uint(uvec3(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u)) ^ 0u)) - 0u) + 1, 1u, 0u))))))))) % subgroup_size, 0u + ((_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY(uint(uvec3(subgroup_local_id + 1, 1u, 0u)), (uint(uvec3(subgroup_local_id + 1, 1u, 0u))) | (uint(uvec3(subgroup_local_id + 1, 1u, 0u))))), (_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY(uint(uvec3(subgroup_local_id + 1, 1u, 0u)), (uint(uvec3(subgroup_local_id + 1, 1u, 0u))) | (uint(uvec3(subgroup_local_id + 1, 1u, 0u)))))) >> 0u))))) % subgroup_size)), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY(uint(uvec3(subgroup_local_id + 1, 1u, 0u)), (uint(uvec3(subgroup_local_id + 1, 1u, 0u))) | (uint(uvec3(subgroup_local_id + 1, 1u, 0u))))))))) % subgroup_size, min((_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (subgroup_local_id)) + 1, 1u, 0u)), (uint(uvec3(subgroup_local_id + 1, 1u, 0u))) | (uint(uvec3(subgroup_local_id + 1, 1u, 0u))))))))) % subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY(uint(uvec3(subgroup_local_id + 1, 1u, 0u)), (uint(uvec3(subgroup_local_id + 1, 1u, 0u))) | (uint(uvec3(subgroup_local_id + 1, 1u, 0u))))))), _GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY(uint(uvec3(subgroup_local_id + 1, 1u, 0u)), (uint(uvec3(subgroup_local_id + 1, 1u, 0u))) | (uint(uvec3(subgroup_local_id + 1, 1u, 0u))))))), uint(uint(~ (~ (_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY(uint(uvec3(subgroup_local_id + 1, 1u, 0u)), (uint(uvec3(subgroup_local_id + 1, 1u, 0u))) | (uint(uvec3(subgroup_local_id + 1, 1u, 0u)))))))))), 0u)), (uint(uvec2(_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY(uint(uvec3(subgroup_local_id + 1, 1u, 0u)), (uint(uvec3(subgroup_local_id + 1, 1u, 0u))) | (uint(uvec3(subgroup_local_id + 1, 1u, 0u))))))), uint(uint(~ (~ (_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY(uint(uvec3(subgroup_local_id + 1, 1u, 0u)), (uint(uvec3(subgroup_local_id + 1, 1u, 0u))) | (uint(uvec3(subgroup_local_id + 1, 1u, 0u)))))))))), 0u))) + 0u)))), clamp(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY(uint(uvec3(subgroup_local_id + 1, 1u, 0u)), (uint(uvec3(subgroup_local_id + 1, 1u, 0u))) | (uint(uvec3(subgroup_local_id + 1, 1u, 0u))))))), _GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY(uint(uvec3(subgroup_local_id + 1, 1u, 0u)), (uint(uvec3(subgroup_local_id + 1, 1u, 0u))) | (uint(uvec3(subgroup_local_id + 1, 1u, 0u))))))), uint(uint(~ (~ (_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY(uint(uvec3(subgroup_local_id + 1, 1u, 0u)), (uint(uvec3(subgroup_local_id + 1, 1u, 0u))) | (uint(uvec3(subgroup_local_id + 1, 1u, 0u)))))))))), 0u)), (uint(uvec2(_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY(uint(uvec3(subgroup_local_id + 1, 1u, 0u)), (uint(uvec3(subgroup_local_id + 1, 1u, 0u))) | (uint(uvec3(subgroup_local_id + 1, 1u, 0u))))))), uint(uint(~ (~ (_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY(uint(uvec3(subgroup_local_id + 1, 1u, 0u)), (uint(uvec3(subgroup_local_id + 1, 1u, 0u))) | (uint(uvec3(subgroup_local_id + 1, 1u, 0u)))))))))), 0u))) + 0u)))), max((_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY(uint(uvec3(subgroup_local_id + 1, 1u, 0u)), (uint(uvec3(subgroup_local_id + 1, 1u, 0u))) | (uint(uvec3(subgroup_local_id + 1, 1u, 0u))))))), _GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY(uint(uvec3(subgroup_local_id + 1, 1u, 0u)), (uint(uvec3(subgroup_local_id + 1, 1u, 0u))) | (uint(uvec3(subgroup_local_id + 1, 1u, 0u))))))), uint(uint(~ (~ (_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY(uint(uvec3(subgroup_local_id + 1, 1u, 0u)), (uint(uvec3(subgroup_local_id + 1, 1u, 0u))) | (uint(uvec3(subgroup_local_id + 1, 1u, 0u)))))))))), 0u)), (uint(uvec2(_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY(uint(uvec3(subgroup_local_id + 1, 1u, 0u)), (uint(uvec3(subgroup_local_id + 1, 1u, 0u))) | (uint(uvec3(subgroup_local_id + 1, 1u, 0u))))))), uint(uint(~ (~ (_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY(uint(uvec3(subgroup_local_id + 1, 1u, 0u)), (uint(uvec3(subgroup_local_id + 1, 1u, 0u))) | (uint(uvec3(subgroup_local_id + 1, 1u, 0u)))))))))), 0u))) + 0u)))), (_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY(uint(uvec3(subgroup_local_id + 1, 1u, 0u)), (uint(uvec3(subgroup_local_id + 1, 1u, 0u))) | (uint(uvec3(subgroup_local_id + 1, 1u, 0u))))))), _GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY(uint(uvec3(subgroup_local_id + 1, 1u, 0u)), (uint(uvec3(subgroup_local_id + 1, 1u, 0u))) | (uint(uvec3(subgroup_local_id + 1, 1u, 0u))))))), uint(uint(~ (~ (_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY(uint(uvec3(subgroup_local_id + 1, 1u, 0u)), (uint(uvec3(subgroup_local_id + 1, 1u, 0u))) | (uint(uvec3(subgroup_local_id + 1, 1u, 0u)))))))))), 0u)), (uint(uvec2(_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY(uint(uvec3(subgroup_local_id + 1, 1u, 0u)), (uint(uvec3(subgroup_local_id + 1, 1u, 0u))) | (uint(uvec3(subgroup_local_id + 1, 1u, 0u))))))), uint(uint(~ (~ (_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY(uint(uvec3(subgroup_local_id + 1, 1u, 0u)), (uint(uvec3(subgroup_local_id + 1, 1u, 0u))) | (uint(uvec3(subgroup_local_id + 1, 1u, 0u)))))))))), 0u))) + 0u)))))), (_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY(uint(uvec3(subgroup_local_id + 1, 1u, 0u)), (uint(uvec3(subgroup_local_id + 1, 1u, 0u))) | (uint(uvec3(subgroup_local_id + 1, 1u, 0u))))))), _GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY(uint(uvec3(subgroup_local_id + 1, 1u, 0u)), (uint(uvec3(subgroup_local_id + 1, 1u, 0u))) | (uint(uvec3(subgroup_local_id + 1, 1u, 0u))))))), uint(uint(~ (~ (_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY(uint(uvec3(subgroup_local_id + 1, 1u, 0u)), (uint(uvec3(subgroup_local_id + 1, 1u, 0u))) | (uint(uvec3(subgroup_local_id + 1, 1u, 0u)))))))))), 0u)), (uint(uvec2(_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY(uint(uvec3(subgroup_local_id + 1, 1u, 0u)), (uint(uvec3(subgroup_local_id + 1, 1u, 0u))) | (uint(uvec3(subgroup_local_id + 1, 1u, 0u))))))), uint(uint(~ (~ (_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY(uint(uvec3(subgroup_local_id + 1, 1u, 0u)), (uint(uvec3(subgroup_local_id + 1, 1u, 0u))) | (uint(uvec3(subgroup_local_id + 1, 1u, 0u)))))))))), 0u))) + 0u)))), (_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY(uint(uvec3(subgroup_local_id + 1, 1u, 0u)), (uint(uvec3(subgroup_local_id + 1, 1u, 0u))) | (uint(uvec3(subgroup_local_id + 1, 1u, 0u))))))), _GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY(uint(uvec3(subgroup_local_id + 1, 1u, 0u)), (uint(uvec3(subgroup_local_id + 1, 1u, 0u))) | (uint(uvec3(subgroup_local_id + 1, 1u, 0u))))))), uint(uint(~ (~ (_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY(uint(uvec3(subgroup_local_id + 1, 1u, 0u)), (uint(uvec3(subgroup_local_id + 1, 1u, 0u))) | (uint(uvec3(subgroup_local_id + 1, 1u, 0u)))))))))), 0u)), (uint(uvec2(_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY(uint(uvec3(subgroup_local_id + 1, 1u, 0u)), (uint(uvec3(subgroup_local_id + 1, 1u, 0u))) | (uint(uvec3(subgroup_local_id + 1, 1u, 0u))))))), uint(uint(~ (~ (_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY(uint(uvec3(subgroup_local_id + 1, 1u, 0u)), (uint(uvec3(subgroup_local_id + 1, 1u, 0u))) | (uint(uvec3(subgroup_local_id + 1, 1u, 0u)))))))))), 0u))) + 0u)))))) % subgroup_size))), ~ (~ (min(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY(uint(uvec3(subgroup_local_id + 1, 1u, 0u)), (uint(uvec3(subgroup_local_id + 1, 1u, 0u))) | (uint(uvec3(subgroup_local_id + 1, 1u, 0u))))), min(_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY(uint(uvec3(subgroup_local_id + 1, 1u, 0u)), (uint(uvec3(subgroup_local_id + 1, 1u, 0u))) | (uint(uvec3(subgroup_local_id + 1, 1u, 0u))))), _GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY(uint(uvec3(subgroup_local_id + 1, 1u, 0u)), (uint(uvec3(subgroup_local_id + 1, 1u, 0u))) | (uint(uvec3(subgroup_local_id + 1, 1u, 0u))))))))))) % subgroup_size, 0u + ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY(uint(uvec3(subgroup_local_id + 1, 1u, 0u)), (uint(uvec3(subgroup_local_id + 1, 1u, 0u))) | (uint(uvec3(subgroup_local_id + 1, 1u, 0u)))))))), ~ (~ (_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY(uint(uvec3(subgroup_local_id + 1, 1u, 0u)), (uint(uvec3(_GLF_IDENTITY(subgroup_local_id + 1, max(subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + 1))))), 1u, 0u))) | (uint(uvec3(subgroup_local_id + 1, 1u, 0u)))))))))))) % _GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + 1, subgroup_local_id + 1)))), clamp(uint(uint(_GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + 1, subgroup_local_id + 1)))), uint(uint(_GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + 1, subgroup_local_id + 1)))), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + 1, subgroup_local_id + 1)))), (false ? _GLF_FUZZED(workgroup_id) : uint(uint(_GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + 1, subgroup_local_id + 1))))))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY(uint(uvec3(subgroup_local_id + 1, 1u, 0u)), (uint(uvec3(subgroup_local_id + 1, 1u, 0u))) | (uint(uvec3(subgroup_local_id + 1, 1u, 0u)))))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? ~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY(uint(uvec3(subgroup_local_id + 1, 1u, 0u)), (uint(uvec3(subgroup_local_id + 1, 1u, 0u))) | (uint(uvec3(subgroup_local_id + 1, 1u, 0u))))), (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY(uint(uvec3(subgroup_local_id + 1, 1u, 0u)), (uint(uvec3(subgroup_local_id + 1, 1u, 0u))) | (uint(uvec3(subgroup_local_id + 1, 1u, 0u))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY(uint(uvec3(subgroup_local_id + 1, 1u, 0u)), (uint(uvec3(subgroup_local_id + 1, 1u, 0u))) | (uint(uvec3(subgroup_local_id + 1, 1u, 0u)))))), (~ (_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY(uint(uvec3(subgroup_local_id + 1, 1u, 0u)), (uint(uvec3(subgroup_local_id + 1, 1u, 0u))) | (uint(uvec3(subgroup_local_id + 1, 1u, 0u))))))) / 1u))))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY(uint(uvec3(subgroup_local_id + 1, 1u, 0u)), _GLF_IDENTITY((uint(uvec3(subgroup_local_id + 1, 1u, 0u))), min(_GLF_IDENTITY((uint(uvec3(subgroup_local_id + 1, 1u, 0u))), ~ (~ ((uint(uvec3(subgroup_local_id + 1, 1u, 0u)))))), (uint(uvec3(subgroup_local_id + 1, 1u, 0u))))) | (uint(uvec3(subgroup_local_id + 1, _GLF_IDENTITY(1u, 1u * (1u)), 0u))))), (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, int(int(1))))), _GLF_IDENTITY(uint(uvec3(subgroup_local_id + 1, 1u, 0u)), _GLF_IDENTITY((uint(uvec3(subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) >> 0)) * 1), 1u, 0u))), ((uint(uvec3(subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) >> 0)) * 1), 1u, 0u)))) >> 0u) | (uint(uvec3(subgroup_local_id + 1, 1u, 0u))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY(uint(uvec3(subgroup_local_id + 1, 1u, 0u)), (uint(uvec3(subgroup_local_id + 1, 1u, 0u))) | (uint(uvec3(subgroup_local_id + 1, 1u, 0u)))))), (~ (_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY(uint(uvec3(subgroup_local_id + 1, 1u, 0u)), (uint(uvec3(subgroup_local_id + 1, 1u, 0u))) | (uint(uvec3(subgroup_local_id + 1, 1u, 0u))))))) / 1u))))))))) : _GLF_FUZZED(num_workgroup)))))) % subgroup_size, min((_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) + 0u), 1u, 0u)), (uint(uvec3(_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + 1))), 1u, 0u))) | (uint(uvec3(subgroup_local_id + 1, 1u, 0u))))))))) % subgroup_size, (_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)))))) + 1, 1u, 0u)), (uint(uvec3(subgroup_local_id + 1, 1u, 0u))) | (uint(uvec3(subgroup_local_id + 1, 1u, 0u))))))))) % subgroup_size))))))));
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     for(int _injected_loop_counter = (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, min(_GLF_IDENTITY(5, (true ? 5 : _GLF_FUZZED(89536))), _GLF_IDENTITY(5, max(5, 5))))))), ((1 << _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, min(_GLF_IDENTITY(5, (true ? 5 : _GLF_FUZZED(89536))), _GLF_IDENTITY(5, max(5, 5)))))))) | 0) >> _GLF_IDENTITY(int(5), int(5))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)) && true); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)))));
    }
   return;
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 buf[virtual_gid] = 1;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(_GLF_IDENTITY(bvec3(! (_GLF_DEAD(false)), true, true), bvec3(bvec4(bvec3(! (_GLF_DEAD(false)), true, true), false))))))))))))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   for(int _injected_loop_counter = (0 & 89632); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 | 0)); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(vec3(injectionSwitch.y, 0.0, 0.0))))), injectionSwitch.y))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        return;
       return;
       if(_GLF_DEAD(false))
        return;
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))));
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))))
      return;
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)))), ! (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true))))))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y))))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 if(_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - uint(_GLF_ZERO(0.0, injectionSwitch.x))) + 1) * ((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), _GLF_IDENTITY(uint(6u), 0u + (uint(6u)))), ~ (~ (_GLF_IDENTITY(uint(6u), uint(6u)))))) >> _GLF_IDENTITY(uint(6u), _GLF_IDENTITY(uint(6u), (uint(6u)) >> _GLF_IDENTITY(0u, min(0u, 0u)))))) < subgroup_size)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    {
     for(int _injected_loop_counter = ((0 | 1) & (_GLF_IDENTITY(1 | 1, min(1 | 1, 1 | 1)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
      }
     barrier();
    }
   atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, clamp(2, 2, 2))) | (_GLF_IDENTITY(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, _GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(2, (2) << 0), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1)), (int(ivec3(2, int(_GLF_ZERO(0.0, injectionSwitch.x)), 1))) * 1))) | (_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED((~ -86500)))))), _GLF_IDENTITY(0 | (_GLF_IDENTITY(2, (_GLF_IDENTITY(2, _GLF_IDENTITY(int(ivec3(2, int(_GLF_ZERO(0.0, injectionSwitch.x)), 1)), (int(ivec3(2, int(_GLF_ZERO(0.0, injectionSwitch.x)), 1))) * 1))) | (2))), 0 | (0 | (_GLF_IDENTITY(2, (_GLF_IDENTITY(2, _GLF_IDENTITY(int(ivec3(2, int(_GLF_ZERO(0.0, injectionSwitch.x)), 1)), (int(ivec3(2, int(_GLF_ZERO(0.0, injectionSwitch.x)), 1))) * 1))) | (2))))))))), 4, _GLF_IDENTITY(64, 0 + (_GLF_IDENTITY(64, int(ivec4(_GLF_IDENTITY(64, 0 ^ (_GLF_IDENTITY(64, 0 ^ (64)))), (1 ^ _GLF_IDENTITY(_GLF_IDENTITY(1, max(1, 1)), (_GLF_IDENTITY(1, max(1, 1))) << 0)), _GLF_IDENTITY(0, (0) - 0), 1))))), _GLF_IDENTITY(4, 0 + (4)));
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)))))))
        barrier();
      }
     else
      {
      }
    }
   else
    {
    }
   subgroupAll(false);
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
          return;
         barrier();
        }
       return;
      }
     do
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
       do
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)))) && true))
          return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bool(true)))), false || (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bool(true)))))))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false))))), (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, true && (true)), (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x < injectionSwitch.y))))
        {
         return;
        }
       else
        {
        }
      }
    }
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        continue;
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), bool(_GLF_IDENTITY(bool(bool(bvec2(false, false))), false || (bool(bool(bvec2(false, false)))))))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), bool(_GLF_IDENTITY(bool(bool(bvec2(false, false))), false || (bool(bool(bvec2(false, false)))))))), true), bvec2(bvec3(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), bool(_GLF_IDENTITY(bool(bool(bvec2(false, false))), false || (bool(bool(bvec2(false, false)))))))), true), true)))))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))))))
        return;
       if(_GLF_DEAD(false))
        return;
       return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (! (true))))))), (bool(bvec2(false, _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (! (true)))))))) && true))))
        break;
      }
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), true && (_GLF_WRAPPED_LOOP(false))));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = _GLF_IDENTITY(0, ~ (~ (0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _GLF_IDENTITY(_injected_loop_counter ++, ~ (~ (_injected_loop_counter ++))))
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         return;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)), true && (bool(bvec2(injectionSwitch.x > injectionSwitch.y, false))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
      barrier();
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   do
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || _GLF_IDENTITY((_GLF_WRAPPED_IF_TRUE(true)), bool(bool(_GLF_IDENTITY((_GLF_WRAPPED_IF_TRUE(true)), ((_GLF_WRAPPED_IF_TRUE(true))) || false))))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec2(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), ! (! (bool(false))))))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(_GLF_IDENTITY(float(_GLF_FUZZED(2.5)), (_GLF_IDENTITY(float(_GLF_FUZZED(2.5)), _GLF_IDENTITY(max(_GLF_IDENTITY(float(_GLF_FUZZED(2.5)), (float(_GLF_FUZZED(2.5))) - 0.0), float(_GLF_FUZZED(2.5))), mix(float(_GLF_FUZZED(-1.0)), float(max(_GLF_IDENTITY(float(_GLF_FUZZED(2.5)), (_GLF_IDENTITY(float(_GLF_FUZZED(2.5)), (float(_GLF_FUZZED(2.5))) + 0.0)) - 0.0), float(_GLF_FUZZED(2.5)))), bool(true))))) / 1.0), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(float(-21031))), vec2(_GLF_FUZZED(-2.6), (injectionSwitch)[1]), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))).y, _GLF_IDENTITY(clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, vec2(vec2(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch))))).y, injectionSwitch.y), clamp(clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, vec2(vec2(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch))))).y, injectionSwitch.y), clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch))), clamp(vec2(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch))), vec2(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch))), vec2(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch))))))).y, injectionSwitch.y), clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec2(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))), mix(vec2(_GLF_FUZZED(8.6), _GLF_FUZZED(-6.3)), vec2((vec2(vec2(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))))[0], _GLF_IDENTITY((vec2(vec2(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))))[1], max((vec2(vec2(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))))[1], (vec2(vec2(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))))[1]))), bvec2(true, true)))).y, injectionSwitch.y))))), 1.0 * (_GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(float(-21031))), vec2(_GLF_FUZZED(-2.6), (injectionSwitch)[1]), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))).y, _GLF_IDENTITY(clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, vec2(vec2(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch))))).y, injectionSwitch.y), clamp(clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, vec2(vec2(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch))))).y, injectionSwitch.y), clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch))), clamp(vec2(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch))), vec2(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch))), vec2(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch))))))).y, injectionSwitch.y), clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec2(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))), mix(vec2(_GLF_FUZZED(8.6), _GLF_FUZZED(-6.3)), vec2((vec2(vec2(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))))[0], _GLF_IDENTITY((vec2(vec2(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))))[1], max((vec2(vec2(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))))[1], (vec2(vec2(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))))[1]))), bvec2(true, true)))).y, injectionSwitch.y))))), mix(float(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(float(-21031))), vec2(_GLF_FUZZED(-2.6), (injectionSwitch)[1]), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))).y, _GLF_IDENTITY(clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, vec2(vec2(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch))))).y, injectionSwitch.y), clamp(clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, vec2(vec2(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch))))).y, injectionSwitch.y), clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch))), clamp(vec2(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch))), vec2(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch))), vec2(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch))))))).y, injectionSwitch.y), clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec2(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))), mix(vec2(_GLF_FUZZED(8.6), _GLF_FUZZED(-6.3)), vec2((vec2(vec2(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))))[0], _GLF_IDENTITY((vec2(vec2(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))))[1], max((vec2(vec2(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))))[1], (vec2(vec2(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))))[1]))), bvec2(true, true)))).y, injectionSwitch.y)))))), float(_GLF_FUZZED(-8.6)), bool(false))))), bool(_GLF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(true, (true) && true), false)), true && (bool(bvec2(_GLF_IDENTITY(true, (true) && true), false))))), (injectionSwitch.x < injectionSwitch.y)))))))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), true, true))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false))))), (_GLF_IDENTITY(false, ! (! (false)))) && true)))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               barrier();
              }
             else
              {
              }
            }
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                return;
               barrier();
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))))
                  {
                   if(_GLF_DEAD(false))
                    return;
                   return;
                  }
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                barrier();
              }
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, false))), ! (! _GLF_IDENTITY((false), bool(bvec3(_GLF_IDENTITY((false), true && (_GLF_IDENTITY((false), false || ((false))))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))
          {
          }
         else
          {
           return;
          }
        }
       barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y)), false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
        }
       else
        {
        }
      }
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)) > 0); _injected_loop_counter --)
      {
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, float(mat2x4(injectionSwitch.y, 0.0, 0.0, 0.0, 1.0, sqrt(1.0), 1.0, sqrt(0.0))))))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              return;
            }
          }
         do
          {
           do
            {
             for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                continue;
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, max(next_virtual_gid, next_virtual_gid))], uint(2), 4, 64, 4);
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) || false), false, false, true)))));
         do
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false)))))));
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(mix(637.676, 4625.9662, false)) : injectionSwitch.y)))))), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(mix(637.676, 4625.9662, false)) : injectionSwitch.y)))), (_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(mix(637.676, 4625.9662, false)) : injectionSwitch.y))))) / sqrt(1.0))))) && true)));
      }
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(2432.3772)), float(injectionSwitch.x), bool(true))))) | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-50783) : 0))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) / _GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0), ((1.0)) / 1.0) - 0.0)) > injectionSwitch.y)), bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
        barrier();
      }
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   subgroupAll(true);
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, ! (! (_injected_loop_counter < 1)))); _GLF_IDENTITY(_injected_loop_counter ++, _GLF_IDENTITY((_injected_loop_counter ++) - 0, (false ? _GLF_FUZZED(max(-58953, _injected_loop_counter)) : (_injected_loop_counter ++) - 0))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        continue;
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        continue;
       barrier();
      }
     if(_GLF_DEAD(false))
      break;
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) || false)) ? 0 : _GLF_FUZZED(_injected_loop_counter)))); _GLF_IDENTITY(_injected_loop_counter --, ~ (~ (_injected_loop_counter --))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
        {
         if(_GLF_DEAD(false))
          barrier();
         break;
         if(_GLF_DEAD(false))
          continue;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false)))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) && true)))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), true, true, false)), ! (! (bool(bvec4(_GLF_DEAD(false), true, true, false)))))))
            break;
           return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(219.677) : injectionSwitch.y))), float(_GLF_FUZZED(0.7)), bool(false)))))))
          continue;
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
          continue;
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > (0 | 0), _GLF_IDENTITY(false || (_injected_loop_counter > (0 | 0)), ! (! (_GLF_IDENTITY(false || (_injected_loop_counter > (0 | 0)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false || (_injected_loop_counter > (0 | 0))), (bool(false || (_injected_loop_counter > (0 | 0)))) && true)), (bool(_GLF_IDENTITY(bool(false || (_injected_loop_counter > (0 | 0))), (bool(false || (_injected_loop_counter > (0 | 0)))) && true))) || false))))))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            continue;
           barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           for(int _injected_loop_counter = ((1 ^ 0) ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           continue;
          }
         do
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y)))) && true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              continue;
             do
              {
               barrier();
               if(_GLF_DEAD(false))
                return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              continue;
             barrier();
            }
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        {
         if(_GLF_DEAD(false))
          break;
         barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), bool(bvec4(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), true, true, true))))))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      continue;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(! (! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(! (! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))), ! (! (! (! _GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((7.1 - -8.3)), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-2.5)), bvec2(true, false))).x > injectionSwitch.y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((7.1 - -8.3)), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-2.5)), bvec2(true, false))).x > injectionSwitch.y), false || ((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((7.1 - -8.3)), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-2.5)), bvec2(true, false))).x > injectionSwitch.y)))), (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((7.1 - -8.3)), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-2.5)), bvec2(true, false))).x > injectionSwitch.y), false || ((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((7.1 - -8.3)), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-2.5)), bvec2(true, false))).x > injectionSwitch.y))))) && true))))))), ! (! (_GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((7.1 - -8.3)), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-2.5)), bvec2(true, false))).x > injectionSwitch.y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((7.1 - -8.3)), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-2.5)), bvec2(true, false))).x > injectionSwitch.y), false || ((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((7.1 - -8.3)), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-2.5)), bvec2(true, false))).x > injectionSwitch.y)))), (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((7.1 - -8.3)), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-2.5)), bvec2(true, false))).x > injectionSwitch.y), false || ((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((7.1 - -8.3)), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-2.5)), bvec2(true, false))).x > injectionSwitch.y))))) && true))))))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((7.1 - -8.3)), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-2.5)), bvec2(true, false))).x > injectionSwitch.y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((7.1 - -8.3)), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-2.5)), bvec2(true, false))).x > injectionSwitch.y), false || ((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((7.1 - -8.3)), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-2.5)), bvec2(true, false))).x > injectionSwitch.y)))), (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((7.1 - -8.3)), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-2.5)), bvec2(true, false))).x > injectionSwitch.y), false || ((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((7.1 - -8.3)), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-2.5)), bvec2(true, false))).x > injectionSwitch.y))))) && true))))))), true && (((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((7.1 - -8.3)), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-2.5)), bvec2(true, false))).x > injectionSwitch.y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((7.1 - -8.3)), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-2.5)), bvec2(true, false))).x > injectionSwitch.y), false || ((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((7.1 - -8.3)), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-2.5)), bvec2(true, false))).x > injectionSwitch.y)))), (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((7.1 - -8.3)), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-2.5)), bvec2(true, false))).x > injectionSwitch.y), false || ((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((7.1 - -8.3)), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-2.5)), bvec2(true, false))).x > injectionSwitch.y))))) && true))))))))))), ! (! (bool(bool(_GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((7.1 - -8.3)), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-2.5)), bvec2(true, false))).x > injectionSwitch.y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((7.1 - -8.3)), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-2.5)), bvec2(true, false))).x > injectionSwitch.y), false || ((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((7.1 - -8.3)), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-2.5)), bvec2(true, false))).x > injectionSwitch.y)))), (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((7.1 - -8.3)), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-2.5)), bvec2(true, false))).x > injectionSwitch.y), false || ((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((7.1 - -8.3)), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-2.5)), bvec2(true, false))).x > injectionSwitch.y))))) && true))))))), true && (((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((7.1 - -8.3)), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-2.5)), bvec2(true, false))).x > injectionSwitch.y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((7.1 - -8.3)), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-2.5)), bvec2(true, false))).x > injectionSwitch.y), false || ((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((7.1 - -8.3)), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-2.5)), bvec2(true, false))).x > injectionSwitch.y)))), (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((7.1 - -8.3)), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-2.5)), bvec2(true, false))).x > injectionSwitch.y), false || ((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((7.1 - -8.3)), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-2.5)), bvec2(true, false))).x > injectionSwitch.y))))) && true)))))))))))))))))))))))))) || false)), bool(bvec3(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), ! (! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))))), _GLF_IDENTITY(! (! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))), true && (! (! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), true), true, true))))))))))))))) || false)))), false, false)))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        return;
      }
     for(int _injected_loop_counter = (_GLF_IDENTITY(0, _GLF_IDENTITY((0) ^ 0, clamp((0) ^ 0, _GLF_IDENTITY((_GLF_IDENTITY(0, 0 | _GLF_IDENTITY((0), 0 + ((0))))) ^ 0, _GLF_IDENTITY(max((0) ^ 0, _GLF_IDENTITY((0) ^ 0, ((0) ^ 0) << 0)), int(_GLF_ZERO(0.0, injectionSwitch.x)) | (max((0) ^ 0, (0) ^ 0)))), (0) ^ 0))) << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (false ? _GLF_FUZZED(4806) : int(1))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_injected_loop_counter < 1, false || (_injected_loop_counter < 1)))), (bool(bool(_GLF_IDENTITY(_injected_loop_counter < 1, false || (_injected_loop_counter < 1))))) && true))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
        continue;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, false))), (injectionSwitch.x > injectionSwitch.y))))
        continue;
       for(int _injected_loop_counter = _GLF_IDENTITY(((_GLF_IDENTITY(0 & -75253, 1 * (0 & _GLF_IDENTITY(-75253, (-75253) * int(_GLF_ONE(1.0, injectionSwitch.y)))))) | 0), min(_GLF_IDENTITY(((0 & -75253) | 0), (_GLF_IDENTITY((_GLF_IDENTITY((0 & -75253), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(_GLF_IDENTITY((0 & -75253), max((0 & -75253), (0 & -75253))), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), (false ? _GLF_FUZZED(_injected_loop_counter) : ~ (0))))) & -75253)), 0 | (~ ((0 & -75253)))))))) | 0), max(((0 & -75253) | 0), (_GLF_IDENTITY((0 & -75253) | 0, _GLF_IDENTITY(min((0 & -75253) | 0, (0 & -75253) | 0), (min((0 & -75253) | 0, (0 & -75253) | 0)) | 0)))))) | (((0 & _GLF_IDENTITY(-75253, max(-75253, -75253))) | 0))), ((0 & -75253) | 0))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, ! (! (_injected_loop_counter != 1)))); _GLF_IDENTITY(_injected_loop_counter ++, (true ? _injected_loop_counter ++ : _GLF_FUZZED(_injected_loop_counter))))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                break;
               return;
              }
             barrier();
            }
           barrier();
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              continue;
             barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               barrier();
              }
             continue;
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          barrier();
        }
      }
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(asinh(injectionSwitch)) : _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, true && (_GLF_IDENTITY((false) && true, bool(bvec3((false) && true, false, false))))))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
    }
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x < injectionSwitch.y), bool(bool(! (injectionSwitch.x < injectionSwitch.y)))))))))))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x < injectionSwitch.y), bool(bool(! (injectionSwitch.x < injectionSwitch.y)))))))))))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))).x < injectionSwitch.y)) && (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x < injectionSwitch.y), bool(bool(! (injectionSwitch.x < injectionSwitch.y))))))), (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x < injectionSwitch.y), bool(bool(! (injectionSwitch.x < injectionSwitch.y)))))))) || false), ! (! (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x < injectionSwitch.y), bool(bool(! (injectionSwitch.x < injectionSwitch.y)))))))))))))))))) || false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
          return;
        }
       while(_GLF_WRAPPED_LOOP(false));
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], max(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[0], (true ? injectionSwitch[0] : _GLF_FUZZED(5.6))))), injectionSwitch[1])).x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(bool(bvec4(! (false), true, true, _GLF_IDENTITY(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! (! (true)))))), (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, ! (! (true)))), ! (! (! (true))))))) && true))), true && (bool(bvec4(! (false), true, true, true))))))), (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          return;
         return;
         if(_GLF_DEAD(false))
          barrier();
        }
       for(int _injected_loop_counter = int(_GLF_ONE(_GLF_IDENTITY(1.0, min(1.0, 1.0)), injectionSwitch.y)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(_injected_loop_counter) : _injected_loop_counter)) != (0 | 0)); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            break;
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             barrier();
            }
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       return;
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(true && _GLF_IDENTITY((true), ((true)) && true), (true && _GLF_IDENTITY((true), ((true)) && true)) && true))))
    {
     for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(_GLF_IDENTITY(3, ~ (~ (3)))), 0 | (_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(ivec3(int(_GLF_IDENTITY(3, ~ (~ (3)))), _GLF_IDENTITY(1, min(1, 1)), 1)), _GLF_IDENTITY(int(ivec4(int(ivec3(int(_GLF_IDENTITY(3, ~ (~ (3)))), _GLF_IDENTITY(1, min(1, 1)), 1)), 0, 0, 0)), (int(ivec4(int(ivec3(int(_GLF_IDENTITY(3, ~ (~ (3)))), _GLF_IDENTITY(1, min(1, 1)), 1)), 0, 0, 0))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))))))))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) ^ 0)), int(int((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(_GLF_IDENTITY(int(3), 0 | _GLF_IDENTITY((int(3)), min((_GLF_IDENTITY(int(3), min(int(3), int(3)))), _GLF_IDENTITY((_GLF_IDENTITY(int(3), (int(3)) >> 0)), (_GLF_IDENTITY((_GLF_IDENTITY(int(3), clamp(int(3), int(3), int(3)))), min((int(3)), (int(3))))) + 0)))), _GLF_IDENTITY(min(_GLF_IDENTITY(int(3), 0 | (int(3))), _GLF_IDENTITY(int(3), 0 | (int(3)))), (min(_GLF_IDENTITY(int(3), 0 | (int(3))), _GLF_IDENTITY(int(3), 0 | (_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), ~ (~ (int(3))))) | (int(3))))))) | (_GLF_IDENTITY(min(_GLF_IDENTITY(int(3), 0 | (int(3))), _GLF_IDENTITY(_GLF_IDENTITY(int(3), 0 | (int(3))), _GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(int(3), 0 | (int(3))), 0)), 0 | (int(ivec2(_GLF_IDENTITY(int(3), 0 | (int(3))), 0)))))), min(min(_GLF_IDENTITY(int(3), 0 | (int(3))), _GLF_IDENTITY(int(3), 0 | (int(3)))), min(_GLF_IDENTITY(int(3), 0 | (int(3))), _GLF_IDENTITY(int(3), 0 | (int(3))))))))))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) ^ 0))))))), (_GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(_GLF_IDENTITY(3, ~ (~ (3)))), 0 | (_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(ivec3(int(_GLF_IDENTITY(3, ~ (~ (3)))), _GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), 0 + (_GLF_IDENTITY(1, min(1, 1)))), _GLF_IDENTITY(1, min(1, 1)), _GLF_IDENTITY(1, min(1, 1)))), 1)), _GLF_IDENTITY(int(ivec4(int(ivec3(int(_GLF_IDENTITY(3, ~ (~ (3)))), _GLF_IDENTITY(1, _GLF_IDENTITY(min(1, 1), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (min(1, 1)))), 1)), 0, 0, 0)), (int(ivec4(int(ivec3(int(_GLF_IDENTITY(3, ~ (~ (3)))), _GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), max(_GLF_IDENTITY(1, min(1, 1)), _GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), (false ? _GLF_FUZZED(47041) : _GLF_IDENTITY(1, min(1, 1)))))))), _GLF_IDENTITY(1, (61238 & 0) | (1)))), 0, 0, 0))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))))))))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) ^ 0)), int(int((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(_GLF_IDENTITY(int(3), 0 | _GLF_IDENTITY((int(3)), min((_GLF_IDENTITY(int(3), min(int(3), int(3)))), _GLF_IDENTITY((_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(_GLF_IDENTITY(3, (_GLF_IDENTITY(3, (3) >> 0)) << 0)), 0 ^ (int(_GLF_IDENTITY(3, (_GLF_IDENTITY(3, (3) >> 0)) << 0))))) >> 0)), (_GLF_IDENTITY((_GLF_IDENTITY(int(3), clamp(int(3), int(3), int(3)))), min((int(3)), (int(3))))) + 0)))), _GLF_IDENTITY(min(_GLF_IDENTITY(int(3), 0 | (int(3))), _GLF_IDENTITY(int(3), 0 | (int(3)))), (min(_GLF_IDENTITY(int(3), 0 | (int(3))), _GLF_IDENTITY(int(3), _GLF_IDENTITY(0 | (_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), ~ (~ (int(3))))) | (int(3)))), _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(0 | (_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), ~ (~ (int(3))))) | (int(3)))), (0 | (_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), ~ (~ (int(3))))) | (int(3))))) | (0 | (_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), ~ (~ (int(3))))) | (int(3)))))), 0, 1, 0)), ~ (~ (int(ivec4(_GLF_IDENTITY(0 | (_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), ~ (~ (int(3))))) | (int(3)))), (0 | (_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), ~ (~ (int(3))))) | (int(3))))) | (0 | (_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), ~ (~ (int(3))))) | (int(3)))))), 0, 1, 0))))))))) | (_GLF_IDENTITY(min(_GLF_IDENTITY(int(3), 0 | (int(3))), _GLF_IDENTITY(_GLF_IDENTITY(int(3), 0 | (int(3))), _GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(int(3), _GLF_IDENTITY(0 | (int(3)), (0 | (int(3))) - 0)), 0)), _GLF_IDENTITY(0 | (int(ivec2(_GLF_IDENTITY(int(3), 0 | (int(3))), 0))), (_GLF_IDENTITY(0 | (int(ivec2(_GLF_IDENTITY(int(3), 0 | (int(3))), 0))), (0 | (int(ivec2(_GLF_IDENTITY(int(3), 0 | (int(3))), 0)))) ^ 0)) - 0)))), min(min(_GLF_IDENTITY(int(_GLF_IDENTITY(3, min(3, 3))), _GLF_IDENTITY(0 | (int(3)), (0 | (int(3))) | 0)), _GLF_IDENTITY(int(3), 0 | (int(3)))), min(_GLF_IDENTITY(int(3), _GLF_IDENTITY(0, (0) / 1) | (int(3))), _GLF_IDENTITY(int(3), 0 | (int(3))))))))))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) ^ 0)))))))) || false), ! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(_GLF_IDENTITY(3, (3) << (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) << 0)) << 0)))), 0 | _GLF_IDENTITY((_GLF_IDENTITY(int(3), int(ivec3(int(3), _GLF_IDENTITY(1, min(1, 1)), 1)))), min(_GLF_IDENTITY((_GLF_IDENTITY(int(3), int(ivec3(int(3), _GLF_IDENTITY(1, min(1, 1)), 1)))), int(_GLF_IDENTITY(int((_GLF_IDENTITY(int(3), int(ivec3(int(3), _GLF_IDENTITY(1, min(1, 1)), 1))))), 1 * (int((_GLF_IDENTITY(int(3), int(ivec3(int(3), _GLF_IDENTITY(1, min(1, 1)), 1))))))))), (_GLF_IDENTITY(int(3), int(ivec3(int(3), _GLF_IDENTITY(1, min(1, 1)), 1))))))))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) ^ 0)), int(int((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(_GLF_IDENTITY(int(3), 0 | _GLF_IDENTITY((int(3)), min((int(3)), _GLF_IDENTITY(_GLF_IDENTITY((int(3)), _GLF_IDENTITY((_GLF_IDENTITY((int(3)), min((int(3)), (int(3))))) + 0, ((_GLF_IDENTITY((int(3)), min((int(3)), (int(3))))) + 0) | ((_GLF_IDENTITY((int(3)), min((int(3)), (int(3))))) + 0))), max(_GLF_IDENTITY((int(3)), (_GLF_IDENTITY((int(3)), _GLF_IDENTITY(min((int(3)), (int(3))), (min((int(_GLF_IDENTITY(3, (3) | (3)))), (int(3)))) / 1))) + 0), _GLF_IDENTITY(_GLF_IDENTITY((int(3)), (_GLF_IDENTITY((int(3)), min((int(3)), (int(3))))) + 0), int(int(_GLF_IDENTITY((int(3)), (_GLF_IDENTITY((int(3)), min((int(_GLF_IDENTITY(3, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 3 : _GLF_FUZZED(_injected_loop_counter))))), (int(3))))) + 0))))))))), _GLF_IDENTITY(_GLF_IDENTITY(min(_GLF_IDENTITY(int(3), 0 | (int(3))), _GLF_IDENTITY(int(3), 0 | (int(3)))), (_GLF_IDENTITY(min(_GLF_IDENTITY(int(3), 0 | (int(3))), _GLF_IDENTITY(int(3), 0 | (int(3)))), 0 + (min(_GLF_IDENTITY(int(3), 0 | (int(3))), _GLF_IDENTITY(int(3), 0 | (int(3))))))) >> (0 >> _GLF_IDENTITY(int(2), int(2)))), (_GLF_IDENTITY(min(_GLF_IDENTITY(int(3), 0 | (int(3))), _GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) | (int(3))), 0 | (int(3)))), min(min(_GLF_IDENTITY(_GLF_IDENTITY(int(3), 0 | (int(3))), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(int(3), 0 | (int(3))), min(_GLF_IDENTITY(int(3), 0 | (int(3))), _GLF_IDENTITY(int(3), 0 | (int(3))))))), _GLF_IDENTITY(int(3), 0 | (int(3)))), _GLF_IDENTITY(min(_GLF_IDENTITY(int(_GLF_IDENTITY(3, clamp(_GLF_IDENTITY(3, (3) | 0), 3, 3))), 0 | (int(3))), _GLF_IDENTITY(int(3), 0 | _GLF_IDENTITY((int(_GLF_IDENTITY(3, (3) | (_GLF_IDENTITY(3, (3) | (3)))))), max((int(_GLF_IDENTITY(3, (3) | (_GLF_IDENTITY(3, (3) | (3)))))), _GLF_IDENTITY((int(_GLF_IDENTITY(3, (3) | (_GLF_IDENTITY(3, (3) | (3)))))), max((int(_GLF_IDENTITY(3, (3) | (_GLF_IDENTITY(3, (3) | (3)))))), (int(_GLF_IDENTITY(3, (3) | (_GLF_IDENTITY(3, (3) | (3)))))))))))), clamp(min(_GLF_IDENTITY(int(_GLF_IDENTITY(3, (3) >> 0)), 0 | (int(3))), _GLF_IDENTITY(int(3), 0 | (int(3)))), min(_GLF_IDENTITY(int(3), 0 | (int(3))), _GLF_IDENTITY(int(3), 0 | (int(3)))), min(_GLF_IDENTITY(int(_GLF_IDENTITY(3, clamp(3, 3, 3))), 0 | (int(3))), _GLF_IDENTITY(int(3), 0 | (int(3))))))))) | (_GLF_IDENTITY(_GLF_IDENTITY(min(_GLF_IDENTITY(int(3), 0 | (int(3))), _GLF_IDENTITY(int(3), 0 | (int(3)))), (min(_GLF_IDENTITY(int(3), 0 | (int(3))), _GLF_IDENTITY(int(3), 0 | (int(3))))) / (0 ^ 1)), min(min(_GLF_IDENTITY(int(3), 0 | (int(3))), _GLF_IDENTITY(int(3), 0 | (int(3)))), min(_GLF_IDENTITY(int(3), _GLF_IDENTITY(0 | (int(3)), (0 | (int(3))) ^ 0)), _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(3), 0 ^ (_GLF_IDENTITY(int(3), max(int(3), int(3))))))), 0 | (int(3))))))))))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(ivec3(_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), ~ (~ (int(_GLF_IDENTITY(3, (3) * 1)))))) / int(_GLF_ONE(1.0, injectionSwitch.y))), 0, 1))), (int(3)) ^ 0))))))), bool(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(3, (false ? _GLF_FUZZED(86919) : _GLF_IDENTITY(3, max(3, 3))))), _GLF_IDENTITY(int(3), 0 | (_GLF_IDENTITY(int(3), int(ivec3(int(3), _GLF_IDENTITY(1, min(1, 1)), 1))))))), (false ? _GLF_FUZZED(-22440) : (1 << _GLF_IDENTITY(int(_GLF_IDENTITY(3, (false ? _GLF_FUZZED(86919) : _GLF_IDENTITY(3, max(3, 3))))), _GLF_IDENTITY(int(3), 0 | (_GLF_IDENTITY(int(3), int(ivec3(int(3), _GLF_IDENTITY(1, min(1, 1)), 1))))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) ^ 0)), (_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) ^ 0))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))), int(int((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(_GLF_IDENTITY(int(3), 0 | _GLF_IDENTITY((int(3)), min((int(3)), _GLF_IDENTITY((int(3)), (_GLF_IDENTITY((int(3)), min((int(3)), (int(3))))) + 0)))), _GLF_IDENTITY(min(_GLF_IDENTITY(int(3), 0 | _GLF_IDENTITY((int(3)), clamp(_GLF_IDENTITY((int(3)), ((int(3))) | ((int(3)))), (int(3)), (int(3))))), _GLF_IDENTITY(int(3), 0 | (int(3)))), (min(_GLF_IDENTITY(int(3), 0 | (int(3))), _GLF_IDENTITY(int(3), 0 | (int(3))))) | (_GLF_IDENTITY(min(_GLF_IDENTITY(int(3), 0 | (int(3))), _GLF_IDENTITY(int(3), 0 | (int(3)))), min(min(_GLF_IDENTITY(int(3), 0 | (int(3))), _GLF_IDENTITY(int(3), 0 | (int(3)))), min(_GLF_IDENTITY(int(3), _GLF_IDENTITY(0, (1 ^ 0) * (0)) | (int(_GLF_IDENTITY(3, (3) / (1 | 0))))), _GLF_IDENTITY(int(3), 0 | (int(3))))))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), max(_GLF_IDENTITY(int(3), 0 | (int(3))), int(3))), _GLF_IDENTITY(int(3), (int(3)) ^ 0)))))), max((_GLF_IDENTITY(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(3, (false ? _GLF_FUZZED(86919) : _GLF_IDENTITY(3, max(3, 3))))), _GLF_IDENTITY(int(3), 0 | (_GLF_IDENTITY(int(3), int(ivec3(int(3), _GLF_IDENTITY(1, min(1, 1)), 1))))))), (false ? _GLF_FUZZED(-22440) : (1 << _GLF_IDENTITY(int(_GLF_IDENTITY(3, (false ? _GLF_FUZZED(86919) : _GLF_IDENTITY(3, max(3, 3))))), _GLF_IDENTITY(int(3), 0 | (_GLF_IDENTITY(int(3), int(ivec3(int(3), _GLF_IDENTITY(1, min(1, 1)), 1))))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) ^ 0)), (_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) ^ 0))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))), int(int((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(_GLF_IDENTITY(int(3), 0 | _GLF_IDENTITY((int(3)), min((int(3)), _GLF_IDENTITY((int(3)), (_GLF_IDENTITY((int(3)), min((int(3)), (int(3))))) + 0)))), _GLF_IDENTITY(min(_GLF_IDENTITY(int(3), 0 | _GLF_IDENTITY((int(3)), clamp(_GLF_IDENTITY((int(3)), ((int(3))) | ((int(3)))), (int(3)), (int(3))))), _GLF_IDENTITY(int(3), 0 | (int(3)))), (min(_GLF_IDENTITY(int(3), 0 | (int(3))), _GLF_IDENTITY(int(3), 0 | (int(3))))) | (_GLF_IDENTITY(min(_GLF_IDENTITY(int(3), 0 | (int(3))), _GLF_IDENTITY(int(3), 0 | (int(3)))), min(min(_GLF_IDENTITY(int(3), 0 | (int(3))), _GLF_IDENTITY(int(3), 0 | (int(3)))), min(_GLF_IDENTITY(int(3), _GLF_IDENTITY(0, (1 ^ 0) * (0)) | (int(_GLF_IDENTITY(3, (3) / (1 | 0))))), _GLF_IDENTITY(int(3), 0 | (int(3))))))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), max(_GLF_IDENTITY(int(3), 0 | (int(3))), int(3))), _GLF_IDENTITY(int(3), (int(3)) ^ 0)))))), (_GLF_IDENTITY(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(3, (false ? _GLF_FUZZED(86919) : _GLF_IDENTITY(3, max(3, 3))))), _GLF_IDENTITY(int(3), 0 | (_GLF_IDENTITY(int(3), int(ivec3(int(3), _GLF_IDENTITY(1, min(1, 1)), 1))))))), (false ? _GLF_FUZZED(-22440) : (1 << _GLF_IDENTITY(int(_GLF_IDENTITY(3, (false ? _GLF_FUZZED(86919) : _GLF_IDENTITY(3, max(3, 3))))), _GLF_IDENTITY(int(3), 0 | (_GLF_IDENTITY(int(3), int(ivec3(int(3), _GLF_IDENTITY(1, min(1, 1)), 1))))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) ^ 0)), (_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) ^ 0))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))), int(int((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(_GLF_IDENTITY(int(3), 0 | _GLF_IDENTITY((int(3)), min((int(3)), _GLF_IDENTITY((int(3)), (_GLF_IDENTITY((int(3)), min((int(3)), (int(3))))) + 0)))), _GLF_IDENTITY(min(_GLF_IDENTITY(int(3), 0 | _GLF_IDENTITY((int(3)), clamp(_GLF_IDENTITY((int(3)), ((int(3))) | ((int(3)))), (int(3)), (int(3))))), _GLF_IDENTITY(int(3), 0 | (int(3)))), (min(_GLF_IDENTITY(int(3), 0 | (int(3))), _GLF_IDENTITY(int(3), 0 | (int(3))))) | (_GLF_IDENTITY(min(_GLF_IDENTITY(int(3), 0 | (int(3))), _GLF_IDENTITY(int(3), 0 | (int(3)))), min(min(_GLF_IDENTITY(int(3), 0 | (int(3))), _GLF_IDENTITY(int(3), 0 | (int(3)))), min(_GLF_IDENTITY(int(3), _GLF_IDENTITY(0, (1 ^ 0) * (0)) | (int(_GLF_IDENTITY(3, (3) / (1 | 0))))), _GLF_IDENTITY(int(3), 0 | (int(3))))))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), max(_GLF_IDENTITY(int(3), 0 | (int(3))), int(3))), _GLF_IDENTITY(int(3), (int(3)) ^ 0))))))))), true)))), true && ((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(_GLF_IDENTITY(3, (3) << (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) << 0)) << 0)))), 0 | _GLF_IDENTITY((_GLF_IDENTITY(int(3), int(ivec3(int(3), _GLF_IDENTITY(1, min(1, 1)), 1)))), min(_GLF_IDENTITY((_GLF_IDENTITY(int(3), int(ivec3(int(3), _GLF_IDENTITY(1, min(1, 1)), 1)))), int(_GLF_IDENTITY(int((_GLF_IDENTITY(int(3), int(ivec3(int(3), _GLF_IDENTITY(1, min(1, 1)), 1))))), 1 * (int((_GLF_IDENTITY(int(3), int(ivec3(int(3), _GLF_IDENTITY(1, min(1, 1)), 1))))))))), (_GLF_IDENTITY(int(3), int(ivec3(int(3), _GLF_IDENTITY(1, min(1, 1)), 1))))))))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) ^ 0)), int(int((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(_GLF_IDENTITY(int(3), 0 | _GLF_IDENTITY((int(3)), min((int(3)), _GLF_IDENTITY(_GLF_IDENTITY((int(3)), _GLF_IDENTITY((_GLF_IDENTITY((int(3)), min((int(3)), (int(3))))) + 0, ((_GLF_IDENTITY((int(3)), min((int(3)), (int(3))))) + 0) | ((_GLF_IDENTITY((int(3)), min((int(3)), (int(3))))) + 0))), max(_GLF_IDENTITY((int(3)), (_GLF_IDENTITY((int(3)), _GLF_IDENTITY(min((int(3)), (int(3))), (min((int(_GLF_IDENTITY(3, (3) | (3)))), (int(3)))) / 1))) + 0), _GLF_IDENTITY(_GLF_IDENTITY((int(3)), (_GLF_IDENTITY((int(3)), min((int(3)), (int(3))))) + 0), int(int(_GLF_IDENTITY((int(3)), (_GLF_IDENTITY((int(3)), min((int(_GLF_IDENTITY(3, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 3 : _GLF_FUZZED(_injected_loop_counter))))), (int(3))))) + 0))))))))), _GLF_IDENTITY(_GLF_IDENTITY(min(_GLF_IDENTITY(int(3), 0 | (int(3))), _GLF_IDENTITY(int(3), 0 | (int(3)))), (_GLF_IDENTITY(min(_GLF_IDENTITY(int(3), 0 | (int(3))), _GLF_IDENTITY(int(3), 0 | (int(3)))), 0 + (min(_GLF_IDENTITY(int(3), 0 | (int(3))), _GLF_IDENTITY(int(3), 0 | (int(3))))))) >> (0 >> _GLF_IDENTITY(int(2), int(2)))), (_GLF_IDENTITY(min(_GLF_IDENTITY(int(3), 0 | (int(3))), _GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) | (int(3))), 0 | (int(3)))), min(min(_GLF_IDENTITY(_GLF_IDENTITY(int(3), 0 | (int(3))), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(int(3), 0 | (int(3))), min(_GLF_IDENTITY(int(3), 0 | (int(3))), _GLF_IDENTITY(int(3), 0 | (int(3))))))), _GLF_IDENTITY(int(3), 0 | (int(3)))), _GLF_IDENTITY(min(_GLF_IDENTITY(int(_GLF_IDENTITY(3, clamp(_GLF_IDENTITY(3, (3) | 0), 3, 3))), 0 | (int(3))), _GLF_IDENTITY(int(3), 0 | _GLF_IDENTITY((int(_GLF_IDENTITY(3, (3) | (_GLF_IDENTITY(3, (3) | (3)))))), max((int(_GLF_IDENTITY(3, (3) | (_GLF_IDENTITY(3, (3) | (3)))))), _GLF_IDENTITY((int(_GLF_IDENTITY(3, (3) | (_GLF_IDENTITY(3, (3) | (3)))))), max((int(_GLF_IDENTITY(3, (3) | (_GLF_IDENTITY(3, (3) | (3)))))), (int(_GLF_IDENTITY(3, (3) | (_GLF_IDENTITY(3, (3) | (3)))))))))))), clamp(min(_GLF_IDENTITY(int(_GLF_IDENTITY(3, (3) >> 0)), 0 | (int(3))), _GLF_IDENTITY(int(3), 0 | (int(3)))), min(_GLF_IDENTITY(int(3), 0 | (int(3))), _GLF_IDENTITY(int(3), 0 | (int(3)))), min(_GLF_IDENTITY(int(_GLF_IDENTITY(3, clamp(3, 3, 3))), 0 | (int(3))), _GLF_IDENTITY(int(3), 0 | (int(3))))))))) | (_GLF_IDENTITY(_GLF_IDENTITY(min(_GLF_IDENTITY(int(3), 0 | (int(3))), _GLF_IDENTITY(int(3), 0 | (int(3)))), (min(_GLF_IDENTITY(int(3), 0 | (int(3))), _GLF_IDENTITY(int(3), 0 | (int(3))))) / (0 ^ 1)), min(min(_GLF_IDENTITY(int(3), 0 | (int(3))), _GLF_IDENTITY(int(3), 0 | (int(3)))), min(_GLF_IDENTITY(int(3), _GLF_IDENTITY(0 | (int(3)), (0 | (int(3))) ^ 0)), _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(3), 0 ^ (_GLF_IDENTITY(int(3), max(int(3), int(3))))))), 0 | (int(3))))))))))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(ivec3(_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), ~ (~ (int(_GLF_IDENTITY(3, (3) * 1)))))) / int(_GLF_ONE(1.0, injectionSwitch.y))), 0, 1))), (int(3)) ^ 0))))))), bool(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(3, (false ? _GLF_FUZZED(86919) : _GLF_IDENTITY(3, max(3, 3))))), _GLF_IDENTITY(int(3), 0 | (_GLF_IDENTITY(int(3), int(ivec3(int(3), _GLF_IDENTITY(1, min(1, 1)), 1))))))), (false ? _GLF_FUZZED(-22440) : (1 << _GLF_IDENTITY(int(_GLF_IDENTITY(3, (false ? _GLF_FUZZED(86919) : _GLF_IDENTITY(3, max(3, 3))))), _GLF_IDENTITY(int(3), 0 | (_GLF_IDENTITY(int(3), int(ivec3(int(3), _GLF_IDENTITY(1, min(1, 1)), 1))))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) ^ 0)), (_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) ^ 0))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))), int(int((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(_GLF_IDENTITY(int(3), 0 | _GLF_IDENTITY((int(3)), min((int(3)), _GLF_IDENTITY((int(3)), (_GLF_IDENTITY((int(3)), min((int(3)), (int(3))))) + 0)))), _GLF_IDENTITY(min(_GLF_IDENTITY(int(3), 0 | _GLF_IDENTITY((int(3)), clamp(_GLF_IDENTITY((int(3)), ((int(3))) | ((int(3)))), (int(3)), (int(3))))), _GLF_IDENTITY(int(3), 0 | (int(3)))), (min(_GLF_IDENTITY(int(3), 0 | (int(3))), _GLF_IDENTITY(int(3), 0 | (int(3))))) | (_GLF_IDENTITY(min(_GLF_IDENTITY(int(3), 0 | (int(3))), _GLF_IDENTITY(int(3), 0 | (int(3)))), min(min(_GLF_IDENTITY(int(3), 0 | (int(3))), _GLF_IDENTITY(int(3), 0 | (int(3)))), min(_GLF_IDENTITY(int(3), _GLF_IDENTITY(0, (1 ^ 0) * (0)) | (int(_GLF_IDENTITY(3, (3) / (1 | 0))))), _GLF_IDENTITY(int(3), 0 | (int(3))))))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), max(_GLF_IDENTITY(int(3), 0 | (int(3))), int(3))), _GLF_IDENTITY(int(3), (int(3)) ^ 0)))))), max((_GLF_IDENTITY(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(3, (false ? _GLF_FUZZED(86919) : _GLF_IDENTITY(3, max(3, 3))))), _GLF_IDENTITY(int(3), 0 | (_GLF_IDENTITY(int(3), int(ivec3(int(3), _GLF_IDENTITY(1, min(1, 1)), 1))))))), (false ? _GLF_FUZZED(-22440) : (1 << _GLF_IDENTITY(int(_GLF_IDENTITY(3, (false ? _GLF_FUZZED(86919) : _GLF_IDENTITY(3, max(3, 3))))), _GLF_IDENTITY(int(3), 0 | (_GLF_IDENTITY(int(3), int(ivec3(int(3), _GLF_IDENTITY(1, min(1, 1)), 1))))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) ^ 0)), (_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) ^ 0))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))), int(int((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(_GLF_IDENTITY(int(3), 0 | _GLF_IDENTITY((int(3)), min((int(3)), _GLF_IDENTITY((int(3)), (_GLF_IDENTITY((int(3)), min((int(3)), (int(3))))) + 0)))), _GLF_IDENTITY(min(_GLF_IDENTITY(int(3), 0 | _GLF_IDENTITY((int(3)), clamp(_GLF_IDENTITY((int(3)), ((int(3))) | ((int(3)))), (int(3)), (int(3))))), _GLF_IDENTITY(int(3), 0 | (int(3)))), (min(_GLF_IDENTITY(int(3), 0 | (int(3))), _GLF_IDENTITY(int(3), 0 | (int(3))))) | (_GLF_IDENTITY(min(_GLF_IDENTITY(int(3), 0 | (int(3))), _GLF_IDENTITY(int(3), 0 | (int(3)))), min(min(_GLF_IDENTITY(int(3), 0 | (int(3))), _GLF_IDENTITY(int(3), 0 | (int(3)))), min(_GLF_IDENTITY(int(3), _GLF_IDENTITY(0, (1 ^ 0) * (0)) | (int(_GLF_IDENTITY(3, (3) / (1 | 0))))), _GLF_IDENTITY(int(3), 0 | (int(3))))))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), max(_GLF_IDENTITY(int(3), 0 | (int(3))), int(3))), _GLF_IDENTITY(int(3), (int(3)) ^ 0)))))), (_GLF_IDENTITY(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(3, (false ? _GLF_FUZZED(86919) : _GLF_IDENTITY(3, max(3, 3))))), _GLF_IDENTITY(int(3), 0 | (_GLF_IDENTITY(int(3), int(ivec3(int(3), _GLF_IDENTITY(1, min(1, 1)), 1))))))), (false ? _GLF_FUZZED(-22440) : (1 << _GLF_IDENTITY(int(_GLF_IDENTITY(3, (false ? _GLF_FUZZED(86919) : _GLF_IDENTITY(3, max(3, 3))))), _GLF_IDENTITY(int(3), 0 | (_GLF_IDENTITY(int(3), int(ivec3(int(3), _GLF_IDENTITY(1, min(1, 1)), 1))))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) ^ 0)), (_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) ^ 0))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))), int(int((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(_GLF_IDENTITY(int(3), 0 | _GLF_IDENTITY((int(3)), min((int(3)), _GLF_IDENTITY((int(3)), (_GLF_IDENTITY((int(3)), min((int(3)), (int(3))))) + 0)))), _GLF_IDENTITY(min(_GLF_IDENTITY(int(3), 0 | _GLF_IDENTITY((int(3)), clamp(_GLF_IDENTITY((int(3)), ((int(3))) | ((int(3)))), (int(3)), (int(3))))), _GLF_IDENTITY(int(3), 0 | (int(3)))), (min(_GLF_IDENTITY(int(3), 0 | (int(3))), _GLF_IDENTITY(int(3), 0 | (int(3))))) | (_GLF_IDENTITY(min(_GLF_IDENTITY(int(3), 0 | (int(3))), _GLF_IDENTITY(int(3), 0 | (int(3)))), min(min(_GLF_IDENTITY(int(3), 0 | (int(3))), _GLF_IDENTITY(int(3), 0 | (int(3)))), min(_GLF_IDENTITY(int(3), _GLF_IDENTITY(0, (1 ^ 0) * (0)) | (int(_GLF_IDENTITY(3, (3) / (1 | 0))))), _GLF_IDENTITY(int(3), 0 | (int(3))))))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), max(_GLF_IDENTITY(int(3), 0 | (int(3))), int(3))), _GLF_IDENTITY(int(3), (int(3)) ^ 0))))))))), true)))))), _GLF_IDENTITY(! (! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)) != (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), 0 | (_GLF_IDENTITY(int(3), int(ivec3(int(3), _GLF_IDENTITY(1, min(1, 1)), 1))))))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) ^ 0)), int(int((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(3), 0 | _GLF_IDENTITY((int(3)), min((int(3)), _GLF_IDENTITY((int(3)), (_GLF_IDENTITY((int(3)), min((int(3)), (int(3))))) + 0)))), max(_GLF_IDENTITY(int(3), 0 | _GLF_IDENTITY((int(3)), min((int(3)), _GLF_IDENTITY((int(3)), (_GLF_IDENTITY((int(3)), min((int(3)), (int(3))))) + 0)))), _GLF_IDENTITY(int(3), 0 | _GLF_IDENTITY((int(3)), min((int(3)), _GLF_IDENTITY((int(3)), (_GLF_IDENTITY((int(3)), min((int(3)), (int(3))))) + 0)))))), _GLF_IDENTITY(min(_GLF_IDENTITY(int(3), 0 | (int(3))), _GLF_IDENTITY(int(3), 0 | (int(3)))), (min(_GLF_IDENTITY(int(3), 0 | (int(3))), _GLF_IDENTITY(int(3), 0 | (int(3))))) | (_GLF_IDENTITY(min(_GLF_IDENTITY(int(3), 0 | (int(3))), _GLF_IDENTITY(int(3), 0 | (int(3)))), min(min(_GLF_IDENTITY(int(3), 0 | (int(3))), _GLF_IDENTITY(int(3), 0 | (int(3)))), min(_GLF_IDENTITY(int(3), 0 | (int(3))), _GLF_IDENTITY(int(3), 0 | (int(3))))))))))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) ^ 0))))))), bool(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), 0 | (_GLF_IDENTITY(int(_GLF_IDENTITY(3, (3) / 1)), int(ivec3(int(3), _GLF_IDENTITY(1, min(1, 1)), 1))))))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) ^ 0)), int(int((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(_GLF_IDENTITY(int(3), 0 | _GLF_IDENTITY((int(3)), min((int(3)), _GLF_IDENTITY((int(3)), (_GLF_IDENTITY(_GLF_IDENTITY((int(3)), ((int(3))) / (0 ^ 1)), min((int(3)), (int(3))))) + 0)))), _GLF_IDENTITY(min(_GLF_IDENTITY(int(3), 0 | (int(3))), _GLF_IDENTITY(int(3), _GLF_IDENTITY(0, ~ (~ (0))) | (int(3)))), (min(_GLF_IDENTITY(int(3), 0 | (int(3))), _GLF_IDENTITY(int(3), 0 | (int(3))))) | (_GLF_IDENTITY(min(_GLF_IDENTITY(int(3), 0 | (int(3))), _GLF_IDENTITY(int(3), 0 | (_GLF_IDENTITY(int(3), 0 ^ (int(3)))))), min(min(_GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) | (_GLF_IDENTITY(int(3), (false ? _GLF_FUZZED(-31098) : int(3))))), 0 | (int(3))), _GLF_IDENTITY(int(3), 0 | (int(3)))), min(_GLF_IDENTITY(int(3), 0 | (int(3))), _GLF_IDENTITY(int(3), 0 | (int(3))))))))))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) ^ 0))))))), true)))))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(! (! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)) != (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), 0 | (_GLF_IDENTITY(int(3), int(ivec3(int(3), _GLF_IDENTITY(1, min(1, 1)), 1))))))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) ^ 0)), int(int((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(3), 0 | _GLF_IDENTITY((int(3)), min((int(3)), _GLF_IDENTITY((int(3)), (_GLF_IDENTITY((int(3)), min((int(3)), (int(3))))) + 0)))), max(_GLF_IDENTITY(int(3), 0 | _GLF_IDENTITY((int(3)), min((int(3)), _GLF_IDENTITY((int(3)), (_GLF_IDENTITY((int(3)), min((int(3)), (int(3))))) + 0)))), _GLF_IDENTITY(int(3), 0 | _GLF_IDENTITY((int(3)), min((int(3)), _GLF_IDENTITY((int(3)), (_GLF_IDENTITY((int(3)), min((int(3)), (int(3))))) + 0)))))), _GLF_IDENTITY(min(_GLF_IDENTITY(int(3), 0 | (int(3))), _GLF_IDENTITY(int(3), 0 | (int(3)))), (min(_GLF_IDENTITY(int(3), 0 | (int(3))), _GLF_IDENTITY(int(3), 0 | (int(3))))) | (_GLF_IDENTITY(min(_GLF_IDENTITY(int(3), 0 | (int(3))), _GLF_IDENTITY(int(3), 0 | (int(3)))), min(min(_GLF_IDENTITY(int(3), 0 | (int(3))), _GLF_IDENTITY(int(3), 0 | (int(3)))), min(_GLF_IDENTITY(int(3), 0 | (int(3))), _GLF_IDENTITY(int(3), 0 | (int(3))))))))))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) ^ 0))))))), bool(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), 0 | (_GLF_IDENTITY(int(_GLF_IDENTITY(3, (3) / 1)), int(ivec3(int(3), _GLF_IDENTITY(1, min(1, 1)), 1))))))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) ^ 0)), int(int((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(_GLF_IDENTITY(int(3), 0 | _GLF_IDENTITY((int(3)), min((int(3)), _GLF_IDENTITY((int(3)), (_GLF_IDENTITY(_GLF_IDENTITY((int(3)), ((int(3))) / (0 ^ 1)), min((int(3)), (int(3))))) + 0)))), _GLF_IDENTITY(min(_GLF_IDENTITY(int(3), 0 | (int(3))), _GLF_IDENTITY(int(3), _GLF_IDENTITY(0, ~ (~ (0))) | (int(3)))), (min(_GLF_IDENTITY(int(3), 0 | (int(3))), _GLF_IDENTITY(int(3), 0 | (int(3))))) | (_GLF_IDENTITY(min(_GLF_IDENTITY(int(3), 0 | (int(3))), _GLF_IDENTITY(int(3), 0 | (_GLF_IDENTITY(int(3), 0 ^ (int(3)))))), min(min(_GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) | (_GLF_IDENTITY(int(3), (false ? _GLF_FUZZED(-31098) : int(3))))), 0 | (int(3))), _GLF_IDENTITY(int(3), 0 | (int(3)))), min(_GLF_IDENTITY(int(3), 0 | (int(3))), _GLF_IDENTITY(int(3), 0 | (int(3))))))))))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) ^ 0))))))), true)))))), _GLF_IDENTITY(bool(bool(! (! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)) != (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), 0 | (_GLF_IDENTITY(int(3), int(ivec3(int(3), _GLF_IDENTITY(1, min(1, 1)), 1))))))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) ^ 0)), int(int((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(3), 0 | _GLF_IDENTITY((int(3)), min((int(3)), _GLF_IDENTITY((int(3)), (_GLF_IDENTITY((int(3)), min((int(3)), (int(3))))) + 0)))), max(_GLF_IDENTITY(int(3), 0 | _GLF_IDENTITY((int(3)), min((int(3)), _GLF_IDENTITY((int(3)), (_GLF_IDENTITY((int(3)), min((int(3)), (int(3))))) + 0)))), _GLF_IDENTITY(int(3), 0 | _GLF_IDENTITY((int(3)), min((int(3)), _GLF_IDENTITY((int(3)), (_GLF_IDENTITY((int(3)), min((int(3)), (int(3))))) + 0)))))), _GLF_IDENTITY(min(_GLF_IDENTITY(int(3), 0 | (int(3))), _GLF_IDENTITY(int(3), 0 | (int(3)))), (min(_GLF_IDENTITY(int(3), 0 | (int(3))), _GLF_IDENTITY(int(3), 0 | (int(3))))) | (_GLF_IDENTITY(min(_GLF_IDENTITY(int(3), 0 | (int(3))), _GLF_IDENTITY(int(3), 0 | (int(3)))), min(min(_GLF_IDENTITY(int(3), 0 | (int(3))), _GLF_IDENTITY(int(3), 0 | (int(3)))), min(_GLF_IDENTITY(int(3), 0 | (int(3))), _GLF_IDENTITY(int(3), 0 | (int(3))))))))))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) ^ 0))))))), bool(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), 0 | (_GLF_IDENTITY(int(_GLF_IDENTITY(3, (3) / 1)), int(ivec3(int(3), _GLF_IDENTITY(1, min(1, 1)), 1))))))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) ^ 0)), int(int((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(_GLF_IDENTITY(int(3), 0 | _GLF_IDENTITY((int(3)), min((int(3)), _GLF_IDENTITY((int(3)), (_GLF_IDENTITY(_GLF_IDENTITY((int(3)), ((int(3))) / (0 ^ 1)), min((int(3)), (int(3))))) + 0)))), _GLF_IDENTITY(min(_GLF_IDENTITY(int(3), 0 | (int(3))), _GLF_IDENTITY(int(3), _GLF_IDENTITY(0, ~ (~ (0))) | (int(3)))), (min(_GLF_IDENTITY(int(3), 0 | (int(3))), _GLF_IDENTITY(int(3), 0 | (int(3))))) | (_GLF_IDENTITY(min(_GLF_IDENTITY(int(3), 0 | (int(3))), _GLF_IDENTITY(int(3), 0 | (_GLF_IDENTITY(int(3), 0 ^ (int(3)))))), min(min(_GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) | (_GLF_IDENTITY(int(3), (false ? _GLF_FUZZED(-31098) : int(3))))), 0 | (int(3))), _GLF_IDENTITY(int(3), 0 | (int(3)))), min(_GLF_IDENTITY(int(3), 0 | (int(3))), _GLF_IDENTITY(int(3), 0 | (int(3))))))))))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) ^ 0))))))), true)))))))), bool(bool(bool(bool(! (! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)) != (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), 0 | (_GLF_IDENTITY(int(3), int(ivec3(int(3), _GLF_IDENTITY(1, min(1, 1)), 1))))))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) ^ 0)), int(int((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(3), 0 | _GLF_IDENTITY((int(3)), min((int(3)), _GLF_IDENTITY((int(3)), (_GLF_IDENTITY((int(3)), min((int(3)), (int(3))))) + 0)))), max(_GLF_IDENTITY(int(3), 0 | _GLF_IDENTITY((int(3)), min((int(3)), _GLF_IDENTITY((int(3)), (_GLF_IDENTITY((int(3)), min((int(3)), (int(3))))) + 0)))), _GLF_IDENTITY(int(3), 0 | _GLF_IDENTITY((int(3)), min((int(3)), _GLF_IDENTITY((int(3)), (_GLF_IDENTITY((int(3)), min((int(3)), (int(3))))) + 0)))))), _GLF_IDENTITY(min(_GLF_IDENTITY(int(3), 0 | (int(3))), _GLF_IDENTITY(int(3), 0 | (int(3)))), (min(_GLF_IDENTITY(int(3), 0 | (int(3))), _GLF_IDENTITY(int(3), 0 | (int(3))))) | (_GLF_IDENTITY(min(_GLF_IDENTITY(int(3), 0 | (int(3))), _GLF_IDENTITY(int(3), 0 | (int(3)))), min(min(_GLF_IDENTITY(int(3), 0 | (int(3))), _GLF_IDENTITY(int(3), 0 | (int(3)))), min(_GLF_IDENTITY(int(3), 0 | (int(3))), _GLF_IDENTITY(int(3), 0 | (int(3))))))))))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) ^ 0))))))), bool(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), 0 | (_GLF_IDENTITY(int(_GLF_IDENTITY(3, (3) / 1)), int(ivec3(int(3), _GLF_IDENTITY(1, min(1, 1)), 1))))))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) ^ 0)), int(int((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(_GLF_IDENTITY(int(3), 0 | _GLF_IDENTITY((int(3)), min((int(3)), _GLF_IDENTITY((int(3)), (_GLF_IDENTITY(_GLF_IDENTITY((int(3)), ((int(3))) / (0 ^ 1)), min((int(3)), (int(3))))) + 0)))), _GLF_IDENTITY(min(_GLF_IDENTITY(int(3), 0 | (int(3))), _GLF_IDENTITY(int(3), _GLF_IDENTITY(0, ~ (~ (0))) | (int(3)))), (min(_GLF_IDENTITY(int(3), 0 | (int(3))), _GLF_IDENTITY(int(3), 0 | (int(3))))) | (_GLF_IDENTITY(min(_GLF_IDENTITY(int(3), 0 | (int(3))), _GLF_IDENTITY(int(3), 0 | (_GLF_IDENTITY(int(3), 0 ^ (int(3)))))), min(min(_GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) | (_GLF_IDENTITY(int(3), (false ? _GLF_FUZZED(-31098) : int(3))))), 0 | (int(3))), _GLF_IDENTITY(int(3), 0 | (int(3)))), min(_GLF_IDENTITY(int(3), 0 | (int(3))), _GLF_IDENTITY(int(3), 0 | (int(3))))))))))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) ^ 0))))))), true)))))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), (bool(bvec3(_GLF_IDENTITY(! (! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)) != (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), 0 | (_GLF_IDENTITY(int(3), int(ivec3(int(3), _GLF_IDENTITY(1, min(1, 1)), 1))))))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) ^ 0)), int(int((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(3), 0 | _GLF_IDENTITY((int(3)), min((int(3)), _GLF_IDENTITY((int(3)), (_GLF_IDENTITY((int(3)), min((int(3)), (int(3))))) + 0)))), max(_GLF_IDENTITY(int(3), 0 | _GLF_IDENTITY((int(3)), min((int(3)), _GLF_IDENTITY((int(3)), (_GLF_IDENTITY((int(3)), min((int(3)), (int(3))))) + 0)))), _GLF_IDENTITY(int(3), 0 | _GLF_IDENTITY((int(3)), min((int(3)), _GLF_IDENTITY((int(3)), (_GLF_IDENTITY((int(3)), min((int(3)), (int(3))))) + 0)))))), _GLF_IDENTITY(min(_GLF_IDENTITY(int(3), 0 | (int(3))), _GLF_IDENTITY(int(3), 0 | (int(3)))), (min(_GLF_IDENTITY(int(3), 0 | (int(3))), _GLF_IDENTITY(int(3), 0 | (int(3))))) | (_GLF_IDENTITY(min(_GLF_IDENTITY(int(3), 0 | (int(3))), _GLF_IDENTITY(int(3), 0 | (int(3)))), min(min(_GLF_IDENTITY(int(3), 0 | (int(3))), _GLF_IDENTITY(int(3), 0 | (int(3)))), min(_GLF_IDENTITY(int(3), 0 | (int(3))), _GLF_IDENTITY(int(3), 0 | (int(3))))))))))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) ^ 0))))))), bool(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), 0 | (_GLF_IDENTITY(int(_GLF_IDENTITY(3, (3) / 1)), int(ivec3(int(3), _GLF_IDENTITY(1, min(1, 1)), 1))))))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) ^ 0)), int(int((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(_GLF_IDENTITY(int(3), 0 | _GLF_IDENTITY((int(3)), min((int(3)), _GLF_IDENTITY((int(3)), (_GLF_IDENTITY(_GLF_IDENTITY((int(3)), ((int(3))) / (0 ^ 1)), min((int(3)), (int(3))))) + 0)))), _GLF_IDENTITY(min(_GLF_IDENTITY(int(3), 0 | (int(3))), _GLF_IDENTITY(int(3), _GLF_IDENTITY(0, ~ (~ (0))) | (int(3)))), (min(_GLF_IDENTITY(int(3), 0 | (int(3))), _GLF_IDENTITY(int(3), 0 | (int(3))))) | (_GLF_IDENTITY(min(_GLF_IDENTITY(int(3), 0 | (int(3))), _GLF_IDENTITY(int(3), 0 | (_GLF_IDENTITY(int(3), 0 ^ (int(3)))))), min(min(_GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) | (_GLF_IDENTITY(int(3), (false ? _GLF_FUZZED(-31098) : int(3))))), 0 | (int(3))), _GLF_IDENTITY(int(3), 0 | (int(3)))), min(_GLF_IDENTITY(int(3), 0 | (int(3))), _GLF_IDENTITY(int(3), 0 | (int(3))))))))))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) ^ 0))))))), true)))))), _GLF_IDENTITY(bool(bool(! (! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)) != (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), 0 | (_GLF_IDENTITY(int(3), int(ivec3(int(3), _GLF_IDENTITY(1, min(1, 1)), 1))))))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) ^ 0)), int(int((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(3), 0 | _GLF_IDENTITY((int(3)), min((int(3)), _GLF_IDENTITY((int(3)), (_GLF_IDENTITY((int(3)), min((int(3)), (int(3))))) + 0)))), max(_GLF_IDENTITY(int(3), 0 | _GLF_IDENTITY((int(3)), min((int(3)), _GLF_IDENTITY((int(3)), (_GLF_IDENTITY((int(3)), min((int(3)), (int(3))))) + 0)))), _GLF_IDENTITY(int(3), 0 | _GLF_IDENTITY((int(3)), min((int(3)), _GLF_IDENTITY((int(3)), (_GLF_IDENTITY((int(3)), min((int(3)), (int(3))))) + 0)))))), _GLF_IDENTITY(min(_GLF_IDENTITY(int(3), 0 | (int(3))), _GLF_IDENTITY(int(3), 0 | (int(3)))), (min(_GLF_IDENTITY(int(3), 0 | (int(3))), _GLF_IDENTITY(int(3), 0 | (int(3))))) | (_GLF_IDENTITY(min(_GLF_IDENTITY(int(3), 0 | (int(3))), _GLF_IDENTITY(int(3), 0 | (int(3)))), min(min(_GLF_IDENTITY(int(3), 0 | (int(3))), _GLF_IDENTITY(int(3), 0 | (int(3)))), min(_GLF_IDENTITY(int(3), 0 | (int(3))), _GLF_IDENTITY(int(3), 0 | (int(3))))))))))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) ^ 0))))))), bool(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), 0 | (_GLF_IDENTITY(int(_GLF_IDENTITY(3, (3) / 1)), int(ivec3(int(3), _GLF_IDENTITY(1, min(1, 1)), 1))))))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) ^ 0)), int(int((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(_GLF_IDENTITY(int(3), 0 | _GLF_IDENTITY((int(3)), min((int(3)), _GLF_IDENTITY((int(3)), (_GLF_IDENTITY(_GLF_IDENTITY((int(3)), ((int(3))) / (0 ^ 1)), min((int(3)), (int(3))))) + 0)))), _GLF_IDENTITY(min(_GLF_IDENTITY(int(3), 0 | (int(3))), _GLF_IDENTITY(int(3), _GLF_IDENTITY(0, ~ (~ (0))) | (int(3)))), (min(_GLF_IDENTITY(int(3), 0 | (int(3))), _GLF_IDENTITY(int(3), 0 | (int(3))))) | (_GLF_IDENTITY(min(_GLF_IDENTITY(int(3), 0 | (int(3))), _GLF_IDENTITY(int(3), 0 | (_GLF_IDENTITY(int(3), 0 ^ (int(3)))))), min(min(_GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) | (_GLF_IDENTITY(int(3), (false ? _GLF_FUZZED(-31098) : int(3))))), 0 | (int(3))), _GLF_IDENTITY(int(3), 0 | (int(3)))), min(_GLF_IDENTITY(int(3), 0 | (int(3))), _GLF_IDENTITY(int(3), 0 | (int(3))))))))))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) ^ 0))))))), true)))))))), bool(bool(bool(bool(! (! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)) != (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), 0 | (_GLF_IDENTITY(int(3), int(ivec3(int(3), _GLF_IDENTITY(1, min(1, 1)), 1))))))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) ^ 0)), int(int((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(3), 0 | _GLF_IDENTITY((int(3)), min((int(3)), _GLF_IDENTITY((int(3)), (_GLF_IDENTITY((int(3)), min((int(3)), (int(3))))) + 0)))), max(_GLF_IDENTITY(int(3), 0 | _GLF_IDENTITY((int(3)), min((int(3)), _GLF_IDENTITY((int(3)), (_GLF_IDENTITY((int(3)), min((int(3)), (int(3))))) + 0)))), _GLF_IDENTITY(int(3), 0 | _GLF_IDENTITY((int(3)), min((int(3)), _GLF_IDENTITY((int(3)), (_GLF_IDENTITY((int(3)), min((int(3)), (int(3))))) + 0)))))), _GLF_IDENTITY(min(_GLF_IDENTITY(int(3), 0 | (int(3))), _GLF_IDENTITY(int(3), 0 | (int(3)))), (min(_GLF_IDENTITY(int(3), 0 | (int(3))), _GLF_IDENTITY(int(3), 0 | (int(3))))) | (_GLF_IDENTITY(min(_GLF_IDENTITY(int(3), 0 | (int(3))), _GLF_IDENTITY(int(3), 0 | (int(3)))), min(min(_GLF_IDENTITY(int(3), 0 | (int(3))), _GLF_IDENTITY(int(3), 0 | (int(3)))), min(_GLF_IDENTITY(int(3), 0 | (int(3))), _GLF_IDENTITY(int(3), 0 | (int(3))))))))))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) ^ 0))))))), bool(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), 0 | (_GLF_IDENTITY(int(_GLF_IDENTITY(3, (3) / 1)), int(ivec3(int(3), _GLF_IDENTITY(1, min(1, 1)), 1))))))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) ^ 0)), int(int((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(_GLF_IDENTITY(int(3), 0 | _GLF_IDENTITY((int(3)), min((int(3)), _GLF_IDENTITY((int(3)), (_GLF_IDENTITY(_GLF_IDENTITY((int(3)), ((int(3))) / (0 ^ 1)), min((int(3)), (int(3))))) + 0)))), _GLF_IDENTITY(min(_GLF_IDENTITY(int(3), 0 | (int(3))), _GLF_IDENTITY(int(3), _GLF_IDENTITY(0, ~ (~ (0))) | (int(3)))), (min(_GLF_IDENTITY(int(3), 0 | (int(3))), _GLF_IDENTITY(int(3), 0 | (int(3))))) | (_GLF_IDENTITY(min(_GLF_IDENTITY(int(3), 0 | (int(3))), _GLF_IDENTITY(int(3), 0 | (_GLF_IDENTITY(int(3), 0 ^ (int(3)))))), min(min(_GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) | (_GLF_IDENTITY(int(3), (false ? _GLF_FUZZED(-31098) : int(3))))), 0 | (int(3))), _GLF_IDENTITY(int(3), 0 | (int(3)))), min(_GLF_IDENTITY(int(3), 0 | (int(3))), _GLF_IDENTITY(int(3), 0 | (int(3))))))))))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) ^ 0))))))), true)))))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))) && true))))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x3(injectionSwitch, 1.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY((vec2(mat2x3(injectionSwitch, 1.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)))) * mat2(1.0), min((vec2(mat2x3(injectionSwitch, 1.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)))) * mat2(1.0), (vec2(mat2x3(injectionSwitch, 1.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)))) * mat2(1.0))))), (injectionSwitch) / exp(vec2(0.0, 0.0))).x > injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x3(injectionSwitch, 1.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY((vec2(mat2x3(injectionSwitch, 1.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)))) * mat2(1.0), min((vec2(mat2x3(injectionSwitch, 1.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)))) * mat2(1.0), (vec2(mat2x3(injectionSwitch, 1.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)))) * mat2(1.0))))), (injectionSwitch) / exp(vec2(0.0, 0.0))).x > injectionSwitch.y, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)), (_GLF_DEAD(false)) && true), true, false, false))))
        return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))))
      return;
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), false || (bool(false)))))))
        return;
      }
     else
      {
      }
    }
   else
    {
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
    return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(float(false))), float(injectionSwitch.y), bool(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-56.60)), float(injectionSwitch.x), bool(true)))) - 0.0))) < injectionSwitch.y)))))))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
}
