#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
uint subgroup_size = 16;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mix(vec2(_GLF_FUZZED(5757.3472), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(1514.9486)), bvec2(true, false)), (mix(vec2(_GLF_FUZZED(5757.3472), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(1514.9486)), bvec2(true, false))) / vec2(1.0, 1.0))).x > injectionSwitch.y), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))))), _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), ! (! (((injectionSwitch.x > injectionSwitch.y)))))))) && true)) && true))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
      }
    }
   else
    {
     return;
    }
   if(_GLF_DEAD(false))
    return;
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint workgroup_id = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, uvec3(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(gl_WorkGroupID, uvec3(gl_WorkGroupID[0], gl_WorkGroupID[1], gl_WorkGroupID[_GLF_IDENTITY(2, (2) - 0)])), 1u), uvec4(0u, 0u, 0u, 0u) ^ (_GLF_IDENTITY(uvec4(_GLF_IDENTITY(gl_WorkGroupID, uvec3(gl_WorkGroupID[_GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (false ? _GLF_FUZZED(-63121) : 0))) ^ 0), (_GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (false ? _GLF_FUZZED(-63121) : 0))) ^ 0), int(ivec4(_GLF_IDENTITY(0, (_GLF_IDENTITY(_GLF_IDENTITY(0, (false ? _GLF_FUZZED(-63121) : 0)), (0 >> _GLF_IDENTITY(int(8), int(8))) | (_GLF_IDENTITY(_GLF_IDENTITY(0, (false ? _GLF_FUZZED(-63121) : 0)), min(_GLF_IDENTITY(0, (false ? _GLF_FUZZED(-63121) : 0)), _GLF_IDENTITY(0, (false ? _GLF_FUZZED(-63121) : 0))))))) ^ 0), (0 << _GLF_IDENTITY(int(2), int(2))), 1, 1)))) / (1 | 1))], gl_WorkGroupID[1], gl_WorkGroupID[2])), 1u), (uvec4(_GLF_IDENTITY(gl_WorkGroupID, uvec3(_GLF_IDENTITY(gl_WorkGroupID[0], clamp(_GLF_IDENTITY(gl_WorkGroupID[0], (_GLF_IDENTITY(gl_WorkGroupID[0], (gl_WorkGroupID[0]) >> 0u)) | (gl_WorkGroupID[0])), gl_WorkGroupID[0], gl_WorkGroupID[0])), gl_WorkGroupID[1], gl_WorkGroupID[2])), 1u)) | (uvec4(_GLF_IDENTITY(gl_WorkGroupID, uvec3(gl_WorkGroupID[0], gl_WorkGroupID[1], gl_WorkGroupID[2])), 1u))))))), (gl_WorkGroupID) / uvec3(1u, 1u, 1u)).x, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, uvec3(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(gl_WorkGroupID, uvec3(gl_WorkGroupID[0], _GLF_IDENTITY(gl_WorkGroupID[1], (gl_WorkGroupID[1]) << (0u | 0u)), _GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) >> uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))[2])), 1u), _GLF_IDENTITY(uvec4(0u, 0u, 0u, 0u), clamp(uvec4(0u, 0u, 0u, 0u), uvec4(0u, 0u, 0u, 0u), uvec4(0u, 0u, 0u, 0u))) ^ (_GLF_IDENTITY(uvec4(_GLF_IDENTITY(gl_WorkGroupID, uvec3(gl_WorkGroupID[_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (false ? _GLF_FUZZED(-63121) : 0))) ^ 0)], _GLF_IDENTITY(gl_WorkGroupID[1], (gl_WorkGroupID[1]) | (gl_WorkGroupID[1])), gl_WorkGroupID[2])), 1u), (uvec4(_GLF_IDENTITY(gl_WorkGroupID, uvec3(_GLF_IDENTITY(gl_WorkGroupID[0], clamp(_GLF_IDENTITY(gl_WorkGroupID[0], (_GLF_IDENTITY(gl_WorkGroupID[0], (gl_WorkGroupID[0]) >> 0u)) | (gl_WorkGroupID[0])), gl_WorkGroupID[0], gl_WorkGroupID[0])), gl_WorkGroupID[1], gl_WorkGroupID[2])), 1u)) | (uvec4(_GLF_IDENTITY(gl_WorkGroupID, uvec3(gl_WorkGroupID[0], gl_WorkGroupID[1], gl_WorkGroupID[2])), 1u))))))), (gl_WorkGroupID) / uvec3(1u, 1u, 1u)).x) + (0u & (15755u & 108890u)), max((_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, uvec3(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(gl_WorkGroupID, uvec3(gl_WorkGroupID[0], _GLF_IDENTITY(gl_WorkGroupID[1], (gl_WorkGroupID[1]) << (0u | 0u)), _GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) >> uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))[2])), 1u), _GLF_IDENTITY(uvec4(0u, 0u, 0u, 0u), clamp(uvec4(0u, 0u, 0u, 0u), uvec4(0u, 0u, 0u, 0u), uvec4(0u, 0u, 0u, 0u))) ^ (_GLF_IDENTITY(uvec4(_GLF_IDENTITY(gl_WorkGroupID, uvec3(gl_WorkGroupID[_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (false ? _GLF_FUZZED(-63121) : 0))) ^ 0)], _GLF_IDENTITY(gl_WorkGroupID[1], (gl_WorkGroupID[1]) | (gl_WorkGroupID[1])), gl_WorkGroupID[2])), 1u), (uvec4(_GLF_IDENTITY(gl_WorkGroupID, uvec3(_GLF_IDENTITY(gl_WorkGroupID[0], clamp(_GLF_IDENTITY(gl_WorkGroupID[0], (_GLF_IDENTITY(gl_WorkGroupID[0], (gl_WorkGroupID[0]) >> 0u)) | (gl_WorkGroupID[0])), gl_WorkGroupID[0], gl_WorkGroupID[0])), gl_WorkGroupID[1], gl_WorkGroupID[2])), 1u)) | (uvec4(_GLF_IDENTITY(gl_WorkGroupID, uvec3(gl_WorkGroupID[0], gl_WorkGroupID[1], gl_WorkGroupID[2])), 1u))))))), (gl_WorkGroupID) / uvec3(1u, 1u, 1u)).x) + (0u & (15755u & 108890u)), (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, uvec3(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(gl_WorkGroupID, uvec3(gl_WorkGroupID[0], _GLF_IDENTITY(gl_WorkGroupID[1], (gl_WorkGroupID[1]) << (0u | 0u)), _GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) >> uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))[2])), 1u), _GLF_IDENTITY(uvec4(0u, 0u, 0u, 0u), clamp(uvec4(0u, 0u, 0u, 0u), uvec4(0u, 0u, 0u, 0u), uvec4(0u, 0u, 0u, 0u))) ^ (_GLF_IDENTITY(uvec4(_GLF_IDENTITY(gl_WorkGroupID, uvec3(gl_WorkGroupID[_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (false ? _GLF_FUZZED(-63121) : 0))) ^ 0)], _GLF_IDENTITY(gl_WorkGroupID[1], (gl_WorkGroupID[1]) | (gl_WorkGroupID[1])), gl_WorkGroupID[2])), 1u), (uvec4(_GLF_IDENTITY(gl_WorkGroupID, uvec3(_GLF_IDENTITY(gl_WorkGroupID[0], clamp(_GLF_IDENTITY(gl_WorkGroupID[0], (_GLF_IDENTITY(gl_WorkGroupID[0], (gl_WorkGroupID[0]) >> 0u)) | (gl_WorkGroupID[0])), gl_WorkGroupID[0], gl_WorkGroupID[0])), gl_WorkGroupID[1], gl_WorkGroupID[2])), 1u)) | (uvec4(_GLF_IDENTITY(gl_WorkGroupID, uvec3(gl_WorkGroupID[0], gl_WorkGroupID[1], gl_WorkGroupID[2])), 1u))))))), (gl_WorkGroupID) / uvec3(1u, 1u, 1u)).x) + (0u & (15755u & 108890u)))));
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, (false) || false), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, (false) || false), true, _GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), ! (! (bool(false))))), ! (! (bool(_GLF_IDENTITY(bool(false), ! (! (bool(false))))))))), (injectionSwitch.x > injectionSwitch.y))), false)))), (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, (false) || false), true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-9407.0598, 5407.6181)) : injectionSwitch)), injectionSwitch)).y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))))), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, (false) || false), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false))))) || false))))
  {
  }
 else
  {
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bool(false)))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, ! (! (false)))))))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                return;
              }
             return;
            }
           for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              return;
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
              }
             else
              {
              }
            }
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (int(3)))))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), min(int(3), _GLF_IDENTITY(int(3), (int(3)) / (1 ^ 0)))))), (false ? _GLF_FUZZED(-29536) : ((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (int(3)))))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), min(int(3), _GLF_IDENTITY(int(3), (int(3)) / (1 ^ 0)))))))), min(((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (int(3))))), (_GLF_IDENTITY(int(_GLF_IDENTITY(3, (true ? 3 : _GLF_FUZZED(-94201)))), _GLF_IDENTITY(int(3), ~ (~ _GLF_IDENTITY((int(_GLF_IDENTITY(3, clamp(3, 3, _GLF_IDENTITY(3, max(3, 3)))))), max((int(_GLF_IDENTITY(3, clamp(3, 3, _GLF_IDENTITY(3, max(3, 3)))))), _GLF_IDENTITY((int(_GLF_IDENTITY(3, clamp(3, 3, _GLF_IDENTITY(3, max(3, 3)))))), ((int(_GLF_IDENTITY(3, clamp(3, 3, _GLF_IDENTITY(3, max(3, 3))))))) | ((int(_GLF_IDENTITY(3, clamp(3, 3, _GLF_IDENTITY(3, max(3, 3)))))))))))))) / 1)) >> _GLF_IDENTITY(int(3), int(3))), (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (int(3)))))) >> _GLF_IDENTITY(int(3), int(3)), clamp((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (int(3)))))) >> _GLF_IDENTITY(int(3), int(3)), _GLF_IDENTITY((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (int(3)))))) >> _GLF_IDENTITY(int(3), int(3)), min((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (int(3)))))) >> _GLF_IDENTITY(int(3), int(3)), (1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (int(3)))))) >> _GLF_IDENTITY(int(3), int(3)))), _GLF_IDENTITY((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (int(3)))))) >> _GLF_IDENTITY(int(3), int(3)), ((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (int(3)))))) >> _GLF_IDENTITY(int(3), int(3))) << 0)))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)) > 0); _injected_loop_counter --)
                {
                 return;
                 if(_GLF_DEAD(false))
                  continue;
                }
               if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                continue;
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                continue;
               return;
               if(_GLF_DEAD(false))
                continue;
              }
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true))), (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0), _GLF_IDENTITY(injectionSwitch.x, float(mat3(injectionSwitch.x, 0.0, 0.0, 0.0, 0.0, 1.0, exp(_GLF_IDENTITY(0.0, float(mat3x2(0.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0)))), 0.0, 0.0))))) > injectionSwitch.y))));
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          return;
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
    }
  }
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false, ! (! (false))) || (false))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (_GLF_IDENTITY(0, max(0, 0))) >> 0)); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            return;
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                {
                 return;
                }
              }
            }
          }
        }
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
  }
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base, 0u ^ (workgroup_base)) + subgroup_id * subgroup_size + (_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | 0), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | 0), (_GLF_IDENTITY(1, (1) | 0)) >> 0), 0, (1 & 1))))))) - 0)) % _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) ^ 0u)) - 0u)) % subgroup_size), (~ (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, 1u * (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((subgroup_local_id + 1) % subgroup_size) / 1u))))) - 0u))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), false || (! (_GLF_DEAD(false)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_DEAD(false)), false || (! (_GLF_DEAD(false))))), (! (_GLF_IDENTITY(! (_GLF_DEAD(false)), false || (! (_GLF_DEAD(false)))))) || false)))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       return;
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x))); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
          }
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))))))
        break;
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false))) || (_GLF_IDENTITY(true, (true) && true)))), (_GLF_IDENTITY(! (_GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(true, (true) && true)))), (! (_GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(true, (true) && true))))) && true)) || false))), (injectionSwitch.x < injectionSwitch.y))))
            {
             return;
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                break;
               continue;
              }
            }
           else
            {
            }
          }
         return;
        }
       if(_GLF_DEAD(false))
        continue;
      }
     if(_GLF_DEAD(false))
      break;
    }
   if(_GLF_DEAD(false))
    continue;
  }
 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY((true) && true, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY((true) && true, bool(bool(_GLF_IDENTITY((true) && true, (_GLF_IDENTITY((true) && true, ! (! (_GLF_IDENTITY((true), _GLF_IDENTITY(bool(bvec3((true), false, false)), bool(bool(bool(bvec3((true), false, false)))))) && true)))) || false)))))), (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY((true) && true, bool(bvec3((true) && true, false, true))), bool(bool((true) && true))))), true && (bool(bool(_GLF_IDENTITY(_GLF_IDENTITY((true) && true, bool(bvec3((true) && true, false, true))), bool(bool((true) && true)))))))) || false)))))
  {
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || _GLF_IDENTITY(false, (false) && true)))
          {
          }
         else
          {
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec2(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec3((injectionSwitch.x < injectionSwitch.y), true, false))), true))))), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
            {
             do
              {
               for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), clamp(int(2), int(2), int(2))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                }
               return;
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                continue;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))));
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           else
            {
             if(_GLF_DEAD(false))
              continue;
            }
          }
        }
      }
     if(_GLF_DEAD(false))
      continue;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    return;
  }
 buf[virtual_gid] = 1;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    return;
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u, (0u) | (0u)) | (subgroup_local_id)) + 1 < subgroup_size)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(3), int(3)), (1 << _GLF_IDENTITY(int(3), int(3))) << 0)) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), 0 ^ (int(3))), _GLF_IDENTITY(int(3), 0 | (int(3)))))); _GLF_IDENTITY(_injected_loop_counter ++, (false ? _GLF_FUZZED(_injected_loop_counter) : _injected_loop_counter ++)))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
                break;
               if(_GLF_DEAD(false))
                break;
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 return;
                }
              }
             for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                return;
              }
            }
          }
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat2(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0))), 1.0, sqrt(0.0)))).y))))), _GLF_IDENTITY(! (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(float(16715))), float(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-22.98)), float(injectionSwitch.x), bool(true)))), bool(true))) > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))), _GLF_IDENTITY(bool(bvec4(! (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(float(16715))), float(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-22.98)), float(injectionSwitch.x), bool(true)))), bool(true))) > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))), true, true, true)), false || (bool(bvec4(! (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(float(16715))), float(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-22.98)), float(injectionSwitch.x), bool(true)))), bool(true))) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch)) : _GLF_FUZZED(injectionSwitch))), max(injectionSwitch, injectionSwitch)).y))))), true, true, true)))))))
            continue;
           return;
           do
            {
             if(_GLF_DEAD(false))
              return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
      }
     atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(_GLF_IDENTITY(2, (2) | (_GLF_IDENTITY(2, (2) | 0))), _GLF_IDENTITY(int(_GLF_IDENTITY(int(_GLF_IDENTITY(2, (_GLF_IDENTITY(_GLF_IDENTITY(2, _GLF_IDENTITY((2) | (0 << _GLF_IDENTITY(int(5), int(5))), 1 * ((2) | (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), 0 + (int(5))), int(5)))))), _GLF_IDENTITY((2), ((2)) - 0) | (2))) | _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(2, (2) | 0), (false ? _GLF_FUZZED(16147) : _GLF_IDENTITY(2, (2) | 0)))), 1 * ((_GLF_IDENTITY(_GLF_IDENTITY(2, (2) | 0), (false ? _GLF_FUZZED(16147) : _GLF_IDENTITY(2, (2) | 0)))))))), int(ivec4(int(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(2, (2) | (_GLF_IDENTITY(2, (2) | 0))), _GLF_IDENTITY(clamp(_GLF_IDENTITY(2, (2) | (_GLF_IDENTITY(2, (2) | 0))), _GLF_IDENTITY(_GLF_IDENTITY(2, (2) | (_GLF_IDENTITY(2, (2) | 0))), (false ? _GLF_FUZZED(71591) : _GLF_IDENTITY(_GLF_IDENTITY(2, (2) | (_GLF_IDENTITY(2, (2) | 0))), (_GLF_IDENTITY(2, (2) | (_GLF_IDENTITY(2, (2) | 0)))) << 0))), _GLF_IDENTITY(2, (2) | (_GLF_IDENTITY(2, (2) | 0)))), (clamp(_GLF_IDENTITY(2, (2) | (_GLF_IDENTITY(2, (2) | 0))), _GLF_IDENTITY(_GLF_IDENTITY(2, (2) | (_GLF_IDENTITY(2, (2) | 0))), (false ? _GLF_FUZZED(71591) : _GLF_IDENTITY(_GLF_IDENTITY(2, (2) | (_GLF_IDENTITY(2, (2) | 0))), (_GLF_IDENTITY(2, (2) | (_GLF_IDENTITY(2, (2) | 0)))) << 0))), _GLF_IDENTITY(2, (2) | (_GLF_IDENTITY(2, (2) | 0))))) << 0)), (true ? _GLF_IDENTITY(2, (2) | (_GLF_IDENTITY(2, (2) | 0))) : _GLF_FUZZED(-95934)))), 0, _GLF_IDENTITY(0, (0) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))), 1)))), (int(_GLF_IDENTITY(int(_GLF_IDENTITY(2, (2) | (_GLF_IDENTITY(2, (_GLF_IDENTITY(2, max(2, 2))) | 0)))), int(ivec4(int(_GLF_IDENTITY(2, _GLF_IDENTITY((2), _GLF_IDENTITY(((2)), min(((2)), _GLF_IDENTITY(((2)), max(_GLF_IDENTITY(((2)), (((2))) / 1), ((2)))))) - 0) | (_GLF_IDENTITY(_GLF_IDENTITY(2, (2) | 0), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(2, (2) | 0), 0, 1), (_GLF_IDENTITY(true ? ivec3(_GLF_IDENTITY(2, (2) | 0), 0, 1) : _GLF_FUZZED(ivec3(-48982, 23355, 41587)), clamp(true ? ivec3(_GLF_IDENTITY(2, (2) | 0), 0, 1) : _GLF_FUZZED(ivec3(-48982, 23355, 41587)), _GLF_IDENTITY(true ? ivec3(_GLF_IDENTITY(2, (2) | 0), 0, 1) : _GLF_FUZZED(ivec3(-48982, 23355, 41587)), (_GLF_IDENTITY(true ? ivec3(_GLF_IDENTITY(2, (2) | 0), 0, 1) : _GLF_FUZZED(ivec3(-48982, 23355, 41587)), max(true ? ivec3(_GLF_IDENTITY(2, (2) | 0), 0, 1) : _GLF_FUZZED(ivec3(-48982, 23355, 41587)), true ? ivec3(_GLF_IDENTITY(2, (2) | 0), 0, 1) : _GLF_FUZZED(ivec3(-48982, 23355, 41587))))) | ivec3(0, 0, 0)), _GLF_IDENTITY(true ? ivec3(_GLF_IDENTITY(2, _GLF_IDENTITY((2) | 0, _GLF_IDENTITY(int(ivec3(_GLF_IDENTITY((2) | 0, int(ivec3((2) | 0, (1 & 1), 1))), 0, 0)), (int(ivec3(_GLF_IDENTITY((2) | 0, int(ivec3((2) | 0, (1 & 1), 1))), 0, 0))) | (int(ivec3(_GLF_IDENTITY((2) | 0, int(ivec3((2) | 0, (1 & 1), 1))), 0, 0)))))), 0, 1) : _GLF_FUZZED(ivec3(-48982, 23355, 41587)), ~ (~ (true ? ivec3(_GLF_IDENTITY(2, (2) | 0), 0, 1) : _GLF_FUZZED(ivec3(-48982, 23355, 41587)))))))))), (int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(2, (2) | 0), 0, 1), (true ? ivec3(_GLF_IDENTITY(2, (2) | 0), 0, 1) : _GLF_FUZZED(ivec3(-48982, 23355, 41587)))))) ^ 0))))), 0, 0, 1))))) | 0))), 4, _GLF_IDENTITY(_GLF_IDENTITY(64, (_GLF_IDENTITY(_GLF_IDENTITY(64, min(64, _GLF_IDENTITY(64, (64) | 0))), _GLF_IDENTITY((64), ((64)) - 0) << 0)) ^ (0 << _GLF_IDENTITY(int(0), int(0)))), _GLF_IDENTITY((64) | (64), (_GLF_IDENTITY((64), (_GLF_IDENTITY((64), 0 | ((64)))) | ((64))) | _GLF_IDENTITY((64), (_GLF_IDENTITY((64), clamp((64), _GLF_IDENTITY((64), ~ (~ ((64)))), (64)))) | ((64)))) - 0)), 4);
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false)))))), true && (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false))))))))))))
        return;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
            return;
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             return;
            }
           else
            {
            }
          }
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 & 68697)); _injected_loop_counter --)
            {
             do
              {
               if(_GLF_DEAD(false))
                return;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), (bool(false)) || false)))));
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                 if(_GLF_DEAD(false))
                  return;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             else
              {
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
          }
         else
          {
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(false, (false) || false)) && true)))
        return;
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
          }
         if(_GLF_DEAD(false))
          return;
         return;
        }
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               return;
               if(_GLF_DEAD(false))
                continue;
              }
            }
           if(_GLF_DEAD(false))
            return;
          }
        }
       do
        {
         if(_GLF_DEAD(false))
          break;
         subgroupAll(false);
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   else
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), ! (! _GLF_IDENTITY((_GLF_DEAD(false)), ! (! ((_GLF_DEAD(false))))))), true))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 continue;
                }
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 return;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                }
               else
                {
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             return;
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(bvec3(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false))))), (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           return;
          }
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), clamp(_GLF_IDENTITY(int(7), int(7)), _GLF_IDENTITY(int(7), int(7)), _GLF_IDENTITY(int(7), int(7))))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) - _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(max(-61886, -26265)))))))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             return;
            }
           else
            {
            }
          }
         return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           continue;
          }
        }
       if(_GLF_DEAD(false))
        return;
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(8), int(8)))); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, false, false))))))
            break;
          }
        }
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y))), bool(bvec2(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)))))))
          break;
         if(_GLF_DEAD(false))
          break;
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))))
        return;
       if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true))), bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), bool(bvec2(bool(_GLF_DEAD(false)), true))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            return;
           continue;
          }
         return;
        }
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         break;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED((1880.6961 - -8.8))), vec2(_GLF_FUZZED(-6.3), _GLF_IDENTITY((injectionSwitch)[1], ((injectionSwitch)[1]) - _GLF_ZERO(0.0, injectionSwitch.x))), bvec2(false, true))).x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           return;
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          continue;
        }
       else
        {
         if(_GLF_DEAD(false))
          break;
         do
          {
           if(_GLF_DEAD(false))
            return;
           atomicStore(buf[next_virtual_gid], uint(2), _GLF_IDENTITY(4, 0 | (_GLF_IDENTITY(4, clamp(4, _GLF_IDENTITY(4, (true ? _GLF_IDENTITY(4, 1 * (4)) : _GLF_FUZZED(71598))), _GLF_IDENTITY(4, 0 ^ (4)))))), 64, 4);
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     subgroupAll(true);
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))))
          return;
        }
      }
    }
  }
}
