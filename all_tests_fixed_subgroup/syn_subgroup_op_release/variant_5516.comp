#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     break;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec3(injectionSwitch, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0))), vec3(1.0, 1.0, 1.0) * (vec3(injectionSwitch, 0.0))))).y, ! (! _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec3((injectionSwitch.x > injectionSwitch.y), false, false)), ! (! _GLF_IDENTITY((bool(bvec3((_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED((float(true) / 8489.9470))), float(injectionSwitch.x), bool(true))) > injectionSwitch.y), false, false))), true && (_GLF_IDENTITY((bool(bvec3((_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED((float(true) / 8489.9470))), float(injectionSwitch.x), bool(true))) > injectionSwitch.y), false, false))), bool(bvec3((bool(bvec3((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(mix(float(_GLF_FUZZED((float(true) / 8489.9470))), float(injectionSwitch.x), bool(true)), (false ? _GLF_FUZZED(-1476.1232) : _GLF_IDENTITY(mix(float(_GLF_FUZZED((float(true) / 8489.9470))), float(injectionSwitch.x), bool(true)), clamp(mix(float(_GLF_FUZZED((float(true) / 8489.9470))), float(injectionSwitch.x), bool(true)), mix(float(_GLF_FUZZED((float(true) / 8489.9470))), float(injectionSwitch.x), bool(true)), mix(float(_GLF_FUZZED((float(true) / 8489.9470))), float(injectionSwitch.x), bool(true))))))) > injectionSwitch.y), false, false))), true, true)))))))))))))), bool(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 1.0, 0.0, 0.0, 1.0))))), _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))))).x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(1.6)), float(injectionSwitch.y), bool(true))))), false)))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         continue;
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
        break;
      }
    }
  }
 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false)))));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x < injectionSwitch.y), (! (injectionSwitch.x < injectionSwitch.y)) || false)))))))
  {
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (0 ^ (((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) & 1))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  break;
                 continue;
                }
               return;
              }
            }
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))), injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(_GLF_IDENTITY(1.0, (1.0) / 1.0)) * (injectionSwitch)))), injectionSwitch)).x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch)), clamp(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))), injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))), injectionSwitch)).x > injectionSwitch.y)) || false))))
        {
         if(_GLF_DEAD(false))
          return;
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           return;
          }
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           return;
          }
        }
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))
            continue;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             for(int _injected_loop_counter = (1 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
                {
                 do
                  {
                   return;
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(0.0), _GLF_FUZZED(-8.5)), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], ((injectionSwitch)[1]) - 0.0)), bvec2(true, true))).x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                {
                 do
                  {
                   do
                    {
                     do
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                          continue;
                         return;
                        }
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        continue;
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(false))
                          break;
                         continue;
                        }
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(false))
                          continue;
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          return;
                         continue;
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          break;
                        }
                       if(_GLF_DEAD(false))
                        break;
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   do
                    {
                     return;
                     if(_GLF_DEAD(false))
                      break;
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    continue;
                  }
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      continue;
                     break;
                    }
                   continue;
                  }
                }
              }
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                }
               while(_GLF_WRAPPED_LOOP(false));
               continue;
              }
            }
           return;
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        {
         if(_GLF_DEAD(false))
          return;
         do
          {
           return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            return;
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))))) / abs(1.0)) > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
              }
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 return;
                }
              }
             return;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
uint subgroup_size = 16;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (1.0) + 0.0)) / 1.0) * _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x))), (true ? (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), 1.0 * (injectionSwitch.x))) : _GLF_FUZZED(-68.07)))) < injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         return;
         if(_GLF_DEAD(false))
          continue;
        }
      }
     else
      {
      }
    }
   else
    {
     for(int _injected_loop_counter = (0 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           break;
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false))), (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
      }
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y), true && _GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))))))), true && (((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))))))
    {
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
         if(_GLF_DEAD(false))
          return;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(false))))
      return;
     return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    return;
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), max(_GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (_GLF_ONE(1.0, injectionSwitch.y)) - _GLF_ZERO(0.0, injectionSwitch.x)))))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         return;
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      continue;
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       do
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))
          break;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             return;
            }
           else
            {
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((! (false)), ((! (false))) && true))))))));
      }
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (false))))))
  return;
 uint num_workgroup = gl_NumWorkGroups.x;
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_DEAD(false))
        continue;
       return;
       if(_GLF_DEAD(false))
        continue;
      }
     if(_GLF_DEAD(false))
      break;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
        }
       else
        {
         return;
         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(false), false)), (bool(bvec2(_GLF_DEAD(false), false))) && true))))))
          continue;
        }
      }
     if(_GLF_DEAD(false))
      break;
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))).x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize.x, max(gl_WorkGroupSize.x, gl_WorkGroupSize.x));
 do
  {
   for(int _injected_loop_counter = (0 & (-96892 & (35519 ^ -82423))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (((1 & 1) << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, _GLF_IDENTITY(false, ! (! (false))), false))))
          return;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           for(int _injected_loop_counter = (0 & 72139); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 0)), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) ^ 0) != (1 ^ 0))), false || (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((1 ^ 0), ((1 ^ 0)) / int(_GLF_ONE(1.0, injectionSwitch.y)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((1 ^ 0), ((1 ^ 0)) / int(_GLF_ONE(1.0, injectionSwitch.y))))))))))); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
                {
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    break;
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      return;
                     continue;
                    }
                   return;
                  }
                 if(_GLF_DEAD(false))
                  break;
                }
               else
                {
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_DEAD(false))
                  continue;
                }
               if(_GLF_DEAD(false))
                continue;
              }
             for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    break;
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    break;
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     return;
                    }
                   else
                    {
                    }
                  }
                }
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                  continue;
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                   if(_GLF_DEAD(false))
                    break;
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   return;
                  }
                }
              }
            }
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
             if(_GLF_DEAD(false))
              break;
            }
          }
        }
       if(_GLF_DEAD(false))
        break;
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      continue;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    continue;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
 if(_GLF_DEAD(false))
  return;
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID, min(_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, gl_WorkGroupID)), gl_WorkGroupID)).x;
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     return;
    }
  }
 uint virtual_gid = workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, uint(uvec4(_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (true ? subgroup_size : _GLF_FUZZED(subgroup_id))), ~ (~ (_GLF_IDENTITY(subgroup_size, (true ? subgroup_size : _GLF_FUZZED(subgroup_id))))))), ~ (~ (~ (subgroup_size)))))), (0u | 0u), ((((1u << _GLF_IDENTITY(uint(5u), uint(5u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(5u), uint(5u)), uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(uint(5u), uint(5u))), (uint(_GLF_IDENTITY(uint(5u), uint(5u)))) << 0u)))) << _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(6u)), _GLF_IDENTITY(max(_GLF_IDENTITY(uint(6u), uint(6u)), _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(6u)), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(6u)), max(_GLF_IDENTITY(uint(6u), uint(6u)), _GLF_IDENTITY(uint(6u), uint(6u)))), (_GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(6u)), max(_GLF_IDENTITY(uint(6u), uint(6u)), _GLF_IDENTITY(uint(6u), uint(6u))))) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(6u)), max(_GLF_IDENTITY(uint(6u), uint(6u)), _GLF_IDENTITY(uint(6u), uint(6u)))), (_GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(6u)), max(_GLF_IDENTITY(uint(6u), uint(6u)), _GLF_IDENTITY(uint(6u), uint(6u))))) - 0u)))))), max(max(_GLF_IDENTITY(uint(6u), uint(6u)), _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(6u)), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(6u)), max(_GLF_IDENTITY(uint(6u), uint(_GLF_IDENTITY(6u, (6u) | (_GLF_IDENTITY(6u, max(6u, 6u)))))), _GLF_IDENTITY(uint(6u), uint(6u))))))), max(_GLF_IDENTITY(uint(6u), uint(6u)), _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(6u)), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(6u)), max(_GLF_IDENTITY(uint(6u), uint(6u)), _GLF_IDENTITY(uint(6u), uint(6u))))))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(6u)), clamp(_GLF_IDENTITY(uint(6u), uint(6u)), _GLF_IDENTITY(uint(6u), uint(6u)), _GLF_IDENTITY(uint(6u), uint(6u)))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(6u)), 0u ^ (_GLF_IDENTITY(uint(6u), uint(6u)))), clamp(_GLF_IDENTITY(uint(6u), uint(6u)), _GLF_IDENTITY(uint(6u), uint(6u)), _GLF_IDENTITY(uint(6u), uint(6u))))) << 0u)), 1u))), (_GLF_IDENTITY(subgroup_size, uint(uvec4(_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (true ? subgroup_size : _GLF_FUZZED(subgroup_id))), ~ (~ (_GLF_IDENTITY(subgroup_size, (true ? subgroup_size : _GLF_FUZZED(subgroup_id))))))), ~ (~ (~ (subgroup_size)))))), (0u | 0u), ((_GLF_IDENTITY(((1u << _GLF_IDENTITY(uint(5u), uint(5u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(5u), uint(5u)), uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(uint(5u), uint(5u))), (uint(_GLF_IDENTITY(uint(5u), uint(5u)))) << 0u)))) << _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(6u)), _GLF_IDENTITY(max(_GLF_IDENTITY(uint(6u), uint(6u)), _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(6u)), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(6u)), max(_GLF_IDENTITY(uint(6u), uint(6u)), _GLF_IDENTITY(uint(6u), uint(6u)))), (_GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(6u)), max(_GLF_IDENTITY(uint(6u), uint(6u)), _GLF_IDENTITY(uint(6u), uint(6u))))) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(6u)), max(_GLF_IDENTITY(uint(6u), uint(6u)), _GLF_IDENTITY(uint(6u), uint(6u)))), (_GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(6u)), max(_GLF_IDENTITY(uint(6u), uint(6u)), _GLF_IDENTITY(uint(6u), uint(6u))))) - 0u)))))), max(max(_GLF_IDENTITY(uint(6u), uint(6u)), _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(6u)), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(6u)), max(_GLF_IDENTITY(uint(6u), uint(_GLF_IDENTITY(6u, (6u) | (_GLF_IDENTITY(6u, max(6u, 6u)))))), _GLF_IDENTITY(uint(6u), uint(6u))))))), max(_GLF_IDENTITY(uint(6u), uint(6u)), _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(6u)), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(6u)), max(_GLF_IDENTITY(uint(6u), uint(6u)), _GLF_IDENTITY(uint(6u), uint(6u)))))))))), (((1u << _GLF_IDENTITY(uint(5u), uint(5u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(5u), uint(5u)), uint(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(uint(5u), uint(5u))), (uint(_GLF_IDENTITY(uint(5u), uint(5u)))) << 0u), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(uint(5u), uint(5u))), (uint(_GLF_IDENTITY(uint(5u), uint(5u)))) << 0u), (_GLF_IDENTITY(uint(_GLF_IDENTITY(uint(5u), uint(5u))), (uint(_GLF_IDENTITY(uint(5u), uint(5u)))) << 0u)) | 0u)), max(_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(uint(5u), uint(5u))), (uint(_GLF_IDENTITY(uint(5u), uint(5u)))) << 0u), (_GLF_IDENTITY(uint(_GLF_IDENTITY(uint(5u), uint(5u))), (uint(_GLF_IDENTITY(uint(5u), uint(5u)))) << 0u)) | 0u)), min(~ (_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(uint(5u), uint(5u))), (uint(_GLF_IDENTITY(uint(5u), uint(5u)))) << 0u), (_GLF_IDENTITY(uint(_GLF_IDENTITY(uint(5u), uint(5u))), (uint(_GLF_IDENTITY(uint(5u), uint(5u)))) << 0u)) | 0u)), ~ (_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(uint(5u), uint(5u))), (uint(_GLF_IDENTITY(uint(5u), uint(5u)))) << 0u), (_GLF_IDENTITY(uint(_GLF_IDENTITY(uint(5u), uint(5u))), (uint(_GLF_IDENTITY(uint(5u), uint(5u)))) << 0u)) | 0u)))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(uint(5u), uint(5u))), (uint(_GLF_IDENTITY(uint(5u), uint(5u)))) << 0u), (_GLF_IDENTITY(uint(_GLF_IDENTITY(uint(5u), uint(5u))), (uint(_GLF_IDENTITY(uint(5u), uint(5u)))) << 0u)) | 0u))))))))) << _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(6u)), _GLF_IDENTITY(max(_GLF_IDENTITY(uint(6u), uint(6u)), _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(6u)), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(6u)), (true ? _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(6u)), (_GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(6u)), ~ (~ (_GLF_IDENTITY(uint(6u), uint(6u)))))) ^ 0u) : _GLF_FUZZED(subgroup_local_id))), max(_GLF_IDENTITY(uint(6u), uint(_GLF_IDENTITY(6u, 0u | (6u)))), _GLF_IDENTITY(uint(6u), uint(6u)))), (_GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(6u)), max(_GLF_IDENTITY(uint(6u), uint(6u)), _GLF_IDENTITY(uint(6u), uint(6u))))) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(6u)), max(_GLF_IDENTITY(uint(6u), uint(6u)), _GLF_IDENTITY(uint(6u), uint(6u)))), (_GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(6u)), max(_GLF_IDENTITY(uint(6u), uint(6u)), _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), min(_GLF_IDENTITY(uint(6u), (true ? _GLF_IDENTITY(uint(6u), 0u | (uint(6u))) : _GLF_FUZZED(workgroup_size))), uint(6u))), uint(6u))))) - 0u)))))), max(max(_GLF_IDENTITY(uint(6u), uint(6u)), _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(6u)), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(6u)), max(_GLF_IDENTITY(uint(6u), uint(_GLF_IDENTITY(6u, (6u) | (_GLF_IDENTITY(6u, max(6u, 6u)))))), _GLF_IDENTITY(uint(_GLF_IDENTITY(6u, ~ (~ (6u)))), uint(6u))))))), max(_GLF_IDENTITY(uint(6u), uint(6u)), _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(6u)), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(6u)), max(_GLF_IDENTITY(uint(6u), uint(6u)), _GLF_IDENTITY(uint(6u), uint(6u))))))))))) * ((1u << _GLF_IDENTITY(uint(5u), _GLF_IDENTITY(uint(5u), (uint(5u)) >> 0u))) >> _GLF_IDENTITY(uint(5u), uint(5u))))) >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(6u)), clamp(_GLF_IDENTITY(uint(6u), uint(6u)), _GLF_IDENTITY(uint(6u), uint(6u)), _GLF_IDENTITY(uint(6u), uint(6u)))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(6u)), 0u ^ (_GLF_IDENTITY(uint(6u), uint(6u)))), clamp(_GLF_IDENTITY(uint(6u), uint(6u)), _GLF_IDENTITY(uint(6u), uint(6u)), _GLF_IDENTITY(uint(6u), uint(6u))))) << 0u)), 1u)))) - 0u), (_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_local_id) : subgroup_size, _GLF_IDENTITY(0u, min(0u, 0u)) | _GLF_IDENTITY((false ? _GLF_FUZZED(subgroup_local_id) : subgroup_size), ((false ? _GLF_FUZZED(subgroup_local_id) : subgroup_size)) | ((false ? _GLF_FUZZED(subgroup_local_id) : subgroup_size)))))), subgroup_size)) + subgroup_local_id;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
     continue;
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(smoothstep(-3.5, distance(vec4(35.70, -2.0, -4.0, -11.08), vec4(-8.6, -7.0, -5110.2443, 9.9)), vec2(-1.4, -92.38))))).x, float(mat3x2(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x)), _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, float(mat3(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(8.5)), bool(false))), 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0)))) / round(length(normalize(vec2(1.0, 1.0))))), _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, sqrt(0.0)))) > injectionSwitch.y))))
    {
    }
   else
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          continue;
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            break;
           return;
          }
         if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, true, true))))))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], min(_GLF_IDENTITY((injectionSwitch), _GLF_IDENTITY(vec2(mat2x4(_GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch))), 0.0, 0.0, 1.0, sqrt(0.0), 1.0, 0.0)), max(vec2(mat2x4(_GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch))), 0.0, 0.0, 1.0, sqrt(0.0), 1.0, 0.0)), vec2(mat2x4(_GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch))), 0.0, 0.0, 1.0, sqrt(0.0), 1.0, 0.0)))))[0], (injectionSwitch)[0])), _GLF_FUZZED(-747.564)), vec2(_GLF_FUZZED(-262.382), (injectionSwitch)[1]), bvec2(_GLF_IDENTITY(false, ! (! (false))), true))).y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
            {
            }
           else
            {
             return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
            }
          }
         if(_GLF_DEAD(false))
          break;
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0))) < injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                      {
                       return;
                      }
                    }
                   return;
                  }
                 else
                  {
                  }
                }
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  break;
                 return;
                }
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec2(false, false)))))));
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              return;
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
              }
             else
              {
              }
            }
           if(_GLF_DEAD(false))
            break;
          }
        }
       if(_GLF_DEAD(false))
        break;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))));
     if(_GLF_DEAD(false))
      continue;
    }
  }
 uint next_virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_id, clamp(subgroup_id, subgroup_id, _GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)))) * subgroup_size + _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), min(((_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(subgroup_id) : subgroup_local_id)) + 1) % subgroup_size), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, uint(_GLF_IDENTITY(uvec3(subgroup_local_id + 1, 0u, 1u), (uvec3(subgroup_local_id + 1, 0u, 1u)) | uvec3(0u, 0u, 0u)))), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, uint(_GLF_IDENTITY(uvec3(subgroup_local_id + 1, 0u, 1u), (uvec3(subgroup_local_id + 1, 0u, 1u)) | _GLF_IDENTITY(uvec3(0u, 0u, 0u), min(uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u)))))), min(_GLF_IDENTITY(subgroup_local_id + 1, uint(_GLF_IDENTITY(uvec3(subgroup_local_id + 1, 0u, 1u), (uvec3(subgroup_local_id + 1, 0u, 1u)) | uvec3(_GLF_IDENTITY(0u, ~ (~ (_GLF_IDENTITY(0u, clamp(0u, 0u, 0u))))), 0u, 0u)))), _GLF_IDENTITY(subgroup_local_id + 1, uint(_GLF_IDENTITY(uvec3(subgroup_local_id + 1, 0u, 1u), (uvec3(subgroup_local_id + 1, 0u, 1u)) | uvec3(0u, 0u, 0u))))))) | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-37829) : 1))) ^ 0), uint(_GLF_IDENTITY(uvec3(subgroup_local_id + 1, 0u, 1u), (uvec3(subgroup_local_id + 1, 0u, 1u)) | uvec3(0u, 0u, 0u)))), (_GLF_IDENTITY(subgroup_local_id + 1, uint(_GLF_IDENTITY(uvec3(subgroup_local_id + 1, 0u, 1u), (uvec3(subgroup_local_id + 1, 0u, 1u)) | uvec3(_GLF_IDENTITY(0u, max(0u, 0u)), 0u, 0u))))) | 0u)))) % subgroup_size, clamp((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, _GLF_IDENTITY(subgroup_size, (true ? subgroup_size : _GLF_FUZZED(subgroup_size))))), (subgroup_local_id + 1) % subgroup_size, (subgroup_local_id + 1) % subgroup_size)))));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    return;
   do
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      break;
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false))))))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false)))))))
    return;
   return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
  }
 do
  {
   _GLF_IDENTITY(buf[virtual_gid] = _GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), (false ? _GLF_FUZZED(-81570) : _GLF_IDENTITY(_GLF_IDENTITY(1, (1) / 1), min(1, 1)))), (_GLF_IDENTITY(_GLF_IDENTITY(true ? buf[virtual_gid] = 1 : _GLF_FUZZED((subgroup_local_id * next_virtual_gid)), ~ (~ (true ? buf[virtual_gid] = 1 : _GLF_FUZZED((subgroup_local_id * next_virtual_gid))))), (true ? buf[virtual_gid] = 1 : _GLF_FUZZED((subgroup_local_id * next_virtual_gid))) << _GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), max(_GLF_IDENTITY(_GLF_IDENTITY(~ (0u), uint(uint(~ (0u)))), 0u ^ (_GLF_IDENTITY(~ (0u), uint(uint(~ (0u)))))), _GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(0u, max(0u, _GLF_IDENTITY(0u, (0u) | (0u))))), max(~ (0u), ~ (0u))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(0u, (0u) << 0u)), max(~ (0u), ~ (0u)))) >> 0u))))))));
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(subgroup_local_id + 1 < subgroup_size)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), false))))))
          return;
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))) && true)))))
        return;
      }
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = (0 & 45105); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (true ? _GLF_ONE(1.0, injectionSwitch.y) : _GLF_IDENTITY(_GLF_FUZZED(-6.1), clamp(_GLF_FUZZED(-6.1), _GLF_FUZZED(-6.1), _GLF_IDENTITY(_GLF_FUZZED(-6.1), (_GLF_FUZZED(-6.1)) - 0.0))))))); _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = _GLF_IDENTITY(1, (_GLF_IDENTITY(1, 1 * (1))) / 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
            continue;
           break;
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
            break;
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
            continue;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
             atomicStore(buf[next_virtual_gid], uint(2), 4, _GLF_IDENTITY(64, ~ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(~ (64), (~ (64)) - 0), (_GLF_IDENTITY(~ (64), max(~ (_GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(_injected_loop_counter)))), _GLF_IDENTITY(~ (64), max(_GLF_IDENTITY(~ (64), (~ (64)) | 0), ~ (64)))))) / 1)), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(~ _GLF_IDENTITY((64), ~ (~ ((64)))), (~ (64)) - _GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, (0) - 0)))), (_GLF_IDENTITY(~ (64), _GLF_IDENTITY(max(~ (64), ~ (64)), ~ (~ (max(~ (64), ~ (64))))))) / 1)), ~ (~ ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(~ (64), (_GLF_IDENTITY(~ (64), clamp(~ (64), ~ (64), ~ (64)))) / ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))), (~ (64)) - 0), (_GLF_IDENTITY(~ (64), max(~ (64), ~ (64)))) / 1)))))) >> (0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), max(int(4), int(4))))))), 4);
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            break;
          }
         if(_GLF_DEAD(false))
          continue;
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY((0 | 1), ((0 | 1)) * 1)); _injected_loop_counter ++)
          {
           return;
          }
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               return;
              }
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
            return;
           return;
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
            return;
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
        }
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], (false ? _GLF_FUZZED(-3.0) : injectionSwitch[0])), injectionSwitch[1])).y))))
          continue;
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false))))), _GLF_IDENTITY(bool(bvec3(false, false, true)), bool(bvec2(bool(bvec3(false, false, true)), false))))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
              return;
            }
           else
            {
            }
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
              return;
            }
           else
            {
            }
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), (_GLF_WRAPPED_IF_FALSE(false)) && true))
            {
            }
           else
            {
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
              {
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(false))
                break;
               break;
              }
             return;
            }
           if(_GLF_DEAD(false))
            continue;
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), max(int(6), int(6))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              break;
             continue;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           continue;
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(false || (false), ! (! (_GLF_IDENTITY(false || (_GLF_IDENTITY(false, bool(bvec3(false, true, _GLF_IDENTITY(false, bool(bvec3(false, true, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, ! (! (true)))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))), false || (false || (false)))))), false || (_GLF_IDENTITY(false || (false), _GLF_IDENTITY(false || (_GLF_IDENTITY(false || (false), (false || (false)) && true)), ! (! (_GLF_IDENTITY(false || (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)) || (false), (false || (false)) && true)), ! (! (false || (_GLF_IDENTITY(false || (false), (false || (false)) && true))))))))))))))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter --)
            {
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(false))
                break;
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                break;
               break;
              }
             for(int _injected_loop_counter = _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), int(ivec3(~ (0), 0, 1))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, 0 ^ (_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))))) < (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(7, int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(7, ~ (_GLF_IDENTITY(~ (7), int(int(~ (7)))))), 1, (1 & 1)), (ivec3(_GLF_IDENTITY(7, ~ (_GLF_IDENTITY(~ (7), int(int(~ (7)))))), 1, (1 & 1))) << ivec3(0, 0, 0))))))) >> _GLF_IDENTITY(int(7), int(7))) & 1, ~ (_GLF_IDENTITY(~ (((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))) & 1), (~ _GLF_IDENTITY((((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))) & 1), ((((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))) & 1)) >> 0)) | (~ (((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))) & 1))))))); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                continue;
               return;
              }
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              return;
            }
           if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (_GLF_IDENTITY(! (! (_GLF_DEAD(false))), bool(bvec4(! (! (_GLF_DEAD(false))), false, false, true))))))))
            continue;
           if(_GLF_DEAD(false))
            return;
           do
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false)))))))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0) : _GLF_FUZZED(3.0)))))) && true)))
                break;
               if(_GLF_DEAD(false))
                continue;
               return;
               if(_GLF_DEAD(false))
                return;
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            break;
          }
        }
       if(_GLF_DEAD(false))
        {
         do
          {
           return;
           if(_GLF_DEAD(false))
            continue;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bool(true)))))
        {
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
              break;
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               return;
              }
            }
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), false || _GLF_IDENTITY((_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(false, false, false)))) || false)) && true), (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bvec2(_GLF_IDENTITY(bool(bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(bool(bvec2(bool(bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false)), (_GLF_IDENTITY(bool(bvec2(bool(bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false)), false || (bool(bvec2(bool(bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false))))) || false)), false)))))))))
            break;
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             if(_GLF_DEAD(false))
              break;
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            return;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             do
              {
               return;
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  break;
                 continue;
                }
              }
             while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), false || (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), true && (_GLF_WRAPPED_LOOP(false))), false, true))))));
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             return;
            }
           else
            {
            }
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
              }
             else
              {
              }
            }
           return;
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         subgroupAll(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (_GLF_IDENTITY(! ((false) && _GLF_TRUE(true, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), _GLF_IDENTITY(mat2(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(7.1)), float(_GLF_IDENTITY(1.0, (1.0) - 0.0)), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) * (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0))), mix(vec2((mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0))))[0], _GLF_IDENTITY((mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0))))[1], (true ? (mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0))))[1] : _GLF_FUZZED(131.114)))), vec2(_GLF_FUZZED(1.7), _GLF_FUZZED(-6.4)), _GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(bvec2(false, false))))))))).y), true && ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), _GLF_IDENTITY(mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0))), mix(vec2((mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0))))[0], (mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0))))[1]), vec2(_GLF_FUZZED(1.7), _GLF_FUZZED(-6.4)), bvec2(false, false)))))).y))), _GLF_IDENTITY(bool(bool((_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_IDENTITY(_GLF_FUZZED(cosh(-9.7)), max(_GLF_FUZZED(cosh(-9.7)), _GLF_FUZZED(cosh(-9.7)))))) < injectionSwitch.y))), true && (bool(bool((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y)))))))), true && (_GLF_IDENTITY(! _GLF_IDENTITY(((false) && _GLF_TRUE(_GLF_IDENTITY(true, bool(bvec4(true, false, _GLF_IDENTITY(false, (false) && true), _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-0.0), _GLF_FUZZED(-1.0)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bool(injectionSwitch.x < injectionSwitch.y)))))))).y), bool(bvec4(! (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true))))))), (! ((injectionSwitch.x > injectionSwitch.y))) && true))))))), (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(6475.4504), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch)[0], float(mat4x3(_GLF_IDENTITY((injectionSwitch)[0], ((_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)))[0]) / 1.0), _GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, 1.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(vec3(1.3, 77.12, -4.5).x)), float(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat3x2(0.0, 1.0, 0.0, 1.0, 1.0, 1.0)), (float(mat3x2(0.0, 1.0, 0.0, 1.0, 1.0, 1.0))) * 1.0))), bool(true))), 0.0, 1.0, determinant(mat2(0.0, _GLF_IDENTITY(0.0, (0.0) * 1.0), 0.0, 0.0)), 1.0, round(length(normalize(vec3(_GLF_IDENTITY(1.0, (1.0) - sqrt(0.0)), 1.0, 1.0)))), 1.0, 0.0))), _GLF_FUZZED(-770.396)), bvec2(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x < injectionSwitch.y)), false))).x < injectionSwitch.y))), bool(bvec2(((false) && _GLF_TRUE(_GLF_IDENTITY(true, bool(bvec4(true, false, false, _GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, float(mat2x3(injectionSwitch.x, 0.0, 0.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, _GLF_IDENTITY(0.0, log(_GLF_ONE(1.0, injectionSwitch.y)) + (0.0)), 0.0), vec4(1.0, abs(0.0), 0.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, abs(0.0), 0.0, 0.0))), 1.0, 0.0))) > injectionSwitch.y), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)))), (! ((injectionSwitch.x > injectionSwitch.y))) && true))))))), (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-9.4)), float(injectionSwitch.y), bool(true)))) * 1.0)))), false))), bool(bvec3(_GLF_IDENTITY(! ((false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (! ((false) && _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, 1.0, 1.0, 1.0))))))), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))), false, true)))))))));
        }
       else
        {
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
     for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), ~ (_GLF_IDENTITY(~ (int(_GLF_ONE(1.0, injectionSwitch.y))), (true ? ~ (int(_GLF_ONE(1.0, injectionSwitch.y))) : _GLF_FUZZED(floatBitsToInt(5.0)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y))))))
        {
         if(_GLF_DEAD(false))
          continue;
         return;
        }
      }
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
        return;
       do
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(_GLF_DEAD(false))
            break;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 return;
                }
               else
                {
                }
              }
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)) - log(1.0))))))))
              return;
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            continue;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (true ? _GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | 0) : _GLF_FUZZED(_injected_loop_counter))) > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), false, true))))))
            {
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(false))
                return;
               break;
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 break;
                }
               if(_GLF_DEAD(false))
                continue;
               return;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   break;
                  }
                 break;
                }
              }
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                return;
               break;
              }
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             return;
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                return;
               continue;
               if(_GLF_DEAD(false))
                break;
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     for(int _injected_loop_counter = (int(_GLF_ONE(1.0, injectionSwitch.y)) ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
        continue;
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          break;
         do
          {
           atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(2), (_GLF_IDENTITY(uint(2), (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! (! (true)))))) ? uint(2) : _GLF_FUZZED(subgroup_size)))) << 0u), _GLF_IDENTITY(4, min(4, 4)), 64, 4);
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))));
        }
       else
        {
        }
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mix(vec2(_GLF_FUZZED(9.8), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-6876.5584), (_GLF_FUZZED(-6876.5584)) * sqrt(1.0)), max(_GLF_FUZZED(-6876.5584), _GLF_FUZZED(-6876.5584)))), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(_GLF_IDENTITY(true, _GLF_IDENTITY(true, (true) || false) && _GLF_IDENTITY(_GLF_IDENTITY((true), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED((-9.6)), _GLF_FUZZED(-7.5)), bvec2(false, false))).y)) && (_GLF_IDENTITY(_GLF_IDENTITY((true), bool(_GLF_IDENTITY(bvec2((true), true), bvec2(bvec2(bvec2((true), true)))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((true), bool(_GLF_IDENTITY(bvec2((true), true), bvec2(bvec2(bvec2((true), true))))))), false || (! (_GLF_IDENTITY(_GLF_IDENTITY((true), ((true)) && true), bool(_GLF_IDENTITY(bvec2((true), true), bvec2(bvec2(bvec2((true), true))))))))))))), (_GLF_IDENTITY((true), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED((-9.6)), _GLF_FUZZED(-7.5)), bvec2(false, false))).y)) && (_GLF_IDENTITY(_GLF_IDENTITY((true), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((true), ((true)) || false), true), bvec2(bvec2(bvec2((true), true)))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY((true), bool(_GLF_IDENTITY(bvec2((true), true), bvec2(bvec2(bvec2((true), true)))))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY((true), bool(_GLF_IDENTITY(bvec2((true), true), bvec2(bvec2(bvec2((true), true)))))))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((true), bool(_GLF_IDENTITY(bvec2((true), true), bvec2(bvec2(bvec2((true), true)))))))), ! (! (bool(bool(_GLF_IDENTITY((true), bool(_GLF_IDENTITY(bvec2((true), true), bvec2(bvec2(bvec2((true), true))))))))))), false, true)), false || (bool(bvec3(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((true), bool(_GLF_IDENTITY(bvec2((true), true), bvec2(bvec2(bvec2((true), true)))))))), ! (! (bool(bool(_GLF_IDENTITY((true), bool(_GLF_IDENTITY(bvec2((true), true), bvec2(bvec2(bvec2((true), true))))))))))), false, true))))))), _GLF_IDENTITY(false || (! (_GLF_IDENTITY(_GLF_IDENTITY((true), ((true)) && true), bool(_GLF_IDENTITY(bvec2((true), true), bvec2(bvec2(bvec2((true), true)))))))), false || (_GLF_IDENTITY(false || (! (_GLF_IDENTITY(_GLF_IDENTITY((true), ((true)) && true), bool(_GLF_IDENTITY(bvec2((true), true), bvec2(bvec2(bvec2((true), true)))))))), ! (! (false || (! (_GLF_IDENTITY(_GLF_IDENTITY((true), ((true)) && true), bool(_GLF_IDENTITY(bvec2((true), true), bvec2(bvec2(bvec2((true), true))))))))))))))))))) || false)), true)), mix(vec2(_GLF_FUZZED(-9.0), _GLF_FUZZED(vec2(-80.12, 579.537).xyxx.q)), vec2((mix(vec2(_GLF_FUZZED(9.8), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-6876.5584), (_GLF_FUZZED(-6876.5584)) * sqrt(1.0)), max(_GLF_FUZZED(-6876.5584), _GLF_FUZZED(-6876.5584)))), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(_GLF_IDENTITY(true, _GLF_IDENTITY(true, (true) || false) && _GLF_IDENTITY(_GLF_IDENTITY((true), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED((-9.6)), _GLF_FUZZED(-7.5)), bvec2(false, false))).y)) && (_GLF_IDENTITY(_GLF_IDENTITY((true), bool(_GLF_IDENTITY(bvec2((true), true), bvec2(bvec2(bvec2((true), true)))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((true), bool(_GLF_IDENTITY(bvec2((true), true), bvec2(bvec2(bvec2((true), true))))))), false || (! (_GLF_IDENTITY(_GLF_IDENTITY((true), ((true)) && true), bool(_GLF_IDENTITY(bvec2((true), true), bvec2(bvec2(bvec2((true), true))))))))))))), (_GLF_IDENTITY((true), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED((-9.6)), _GLF_FUZZED(-7.5)), bvec2(false, false))).y)) && (_GLF_IDENTITY(_GLF_IDENTITY((true), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((true), ((true)) || false), true), bvec2(bvec2(bvec2((true), true)))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY((true), bool(_GLF_IDENTITY(bvec2((true), true), bvec2(bvec2(bvec2((true), true)))))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY((true), bool(_GLF_IDENTITY(bvec2((true), true), bvec2(bvec2(bvec2((true), true)))))))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((true), bool(_GLF_IDENTITY(bvec2((true), true), bvec2(bvec2(bvec2((true), true)))))))), ! (! (bool(bool(_GLF_IDENTITY((true), bool(_GLF_IDENTITY(bvec2((true), true), bvec2(bvec2(bvec2((true), true))))))))))), false, true)), false || (bool(bvec3(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((true), bool(_GLF_IDENTITY(bvec2((true), true), bvec2(bvec2(bvec2((true), true)))))))), ! (! (bool(bool(_GLF_IDENTITY((true), bool(_GLF_IDENTITY(bvec2((true), true), bvec2(bvec2(bvec2((true), true))))))))))), false, true))))))), _GLF_IDENTITY(false || (! (_GLF_IDENTITY(_GLF_IDENTITY((true), ((true)) && true), bool(_GLF_IDENTITY(bvec2((true), true), bvec2(bvec2(bvec2((true), true)))))))), false || (_GLF_IDENTITY(false || (! (_GLF_IDENTITY(_GLF_IDENTITY((true), ((true)) && true), bool(_GLF_IDENTITY(bvec2((true), true), bvec2(bvec2(bvec2((true), true)))))))), ! (! (false || (! (_GLF_IDENTITY(_GLF_IDENTITY((true), ((true)) && true), bool(_GLF_IDENTITY(bvec2((true), true), bvec2(bvec2(bvec2((true), true))))))))))))))))))) || false)), true)))[0], (mix(vec2(_GLF_FUZZED(9.8), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-6876.5584), (_GLF_FUZZED(-6876.5584)) * sqrt(1.0)), max(_GLF_FUZZED(-6876.5584), _GLF_FUZZED(-6876.5584)))), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(_GLF_IDENTITY(true, _GLF_IDENTITY(true, (true) || false) && _GLF_IDENTITY(_GLF_IDENTITY((true), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED((-9.6)), _GLF_FUZZED(-7.5)), bvec2(false, false))).y)) && (_GLF_IDENTITY(_GLF_IDENTITY((true), bool(_GLF_IDENTITY(bvec2((true), true), bvec2(bvec2(bvec2((true), true)))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((true), bool(_GLF_IDENTITY(bvec2((true), true), bvec2(bvec2(bvec2((true), true))))))), false || (! (_GLF_IDENTITY(_GLF_IDENTITY((true), ((true)) && true), bool(_GLF_IDENTITY(bvec2((true), true), bvec2(bvec2(bvec2((true), true))))))))))))), (_GLF_IDENTITY((true), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED((-9.6)), _GLF_FUZZED(-7.5)), bvec2(false, false))).y)) && (_GLF_IDENTITY(_GLF_IDENTITY((true), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((true), ((true)) || false), true), bvec2(bvec2(bvec2((true), true)))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY((true), bool(_GLF_IDENTITY(bvec2((true), true), bvec2(bvec2(bvec2((true), true)))))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY((true), bool(_GLF_IDENTITY(bvec2((true), true), bvec2(bvec2(bvec2((true), true)))))))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((true), bool(_GLF_IDENTITY(bvec2((true), true), bvec2(bvec2(bvec2((true), true)))))))), ! (! (bool(bool(_GLF_IDENTITY((true), bool(_GLF_IDENTITY(bvec2((true), true), bvec2(bvec2(bvec2((true), true))))))))))), false, true)), false || (bool(bvec3(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((true), bool(_GLF_IDENTITY(bvec2((true), true), bvec2(bvec2(bvec2((true), true)))))))), ! (! (bool(bool(_GLF_IDENTITY((true), bool(_GLF_IDENTITY(bvec2((true), true), bvec2(bvec2(bvec2((true), true))))))))))), false, true))))))), _GLF_IDENTITY(false || (! (_GLF_IDENTITY(_GLF_IDENTITY((true), ((true)) && true), bool(_GLF_IDENTITY(bvec2((true), true), bvec2(bvec2(bvec2((true), true)))))))), false || (_GLF_IDENTITY(false || (! (_GLF_IDENTITY(_GLF_IDENTITY((true), ((true)) && true), bool(_GLF_IDENTITY(bvec2((true), true), bvec2(bvec2(bvec2((true), true)))))))), ! (! (false || (! (_GLF_IDENTITY(_GLF_IDENTITY((true), ((true)) && true), bool(_GLF_IDENTITY(bvec2((true), true), bvec2(bvec2(bvec2((true), true))))))))))))))))))) || false)), true)))[1]), bvec2(true, true)))).x > injectionSwitch.y))), _GLF_IDENTITY((_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(9.8), _GLF_IDENTITY(_GLF_FUZZED(-6876.5584), max(_GLF_FUZZED(-6876.5584), _GLF_FUZZED(-6876.5584)))), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(_GLF_IDENTITY(true, _GLF_IDENTITY(true, (true) || false) && _GLF_IDENTITY(_GLF_IDENTITY((true), _GLF_IDENTITY(((true)) && true, (_GLF_IDENTITY(((true)) && true, (((true)) && true) && true)) || false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((true), bool(_GLF_IDENTITY(bvec2((true), true), _GLF_IDENTITY(bvec2(bvec2(bvec2((true), true))), bvec2(bvec3(bvec2(bvec2(bvec2((true), true))), false))))))))), true))).x > injectionSwitch.y)))) || _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! ((_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(9.8), _GLF_IDENTITY(_GLF_FUZZED(-6876.5584), max(_GLF_FUZZED(-6876.5584), _GLF_FUZZED(-6876.5584)))), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(_GLF_IDENTITY(true, _GLF_IDENTITY(true, (true) || false) && _GLF_IDENTITY(_GLF_IDENTITY((true), _GLF_IDENTITY(((true)) && true, (_GLF_IDENTITY(((true)) && true, (((true)) && true) && true)) || false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((true), bool(_GLF_IDENTITY(bvec2((true), true), _GLF_IDENTITY(bvec2(bvec2(bvec2((true), true))), bvec2(bvec3(bvec2(bvec2(bvec2((true), true))), false))))))))), true))).x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(9.8), _GLF_IDENTITY(_GLF_FUZZED(-6876.5584), max(_GLF_FUZZED(-6876.5584), _GLF_FUZZED(-6876.5584)))), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(_GLF_IDENTITY(true, _GLF_IDENTITY(true, (true) || false) && _GLF_IDENTITY(_GLF_IDENTITY((true), _GLF_IDENTITY(((true)) && true, (_GLF_IDENTITY(((true)) && true, (((true)) && true) && true)) || false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((true), bool(_GLF_IDENTITY(bvec2((true), true), _GLF_IDENTITY(bvec2(bvec2(bvec2((true), true))), bvec2(bvec3(bvec2(bvec2(bvec2((true), true))), false))))))))), true))).x > injectionSwitch.y, false), bvec2(bvec2(bvec2(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(9.8), _GLF_IDENTITY(_GLF_FUZZED(-6876.5584), max(_GLF_FUZZED(-6876.5584), _GLF_FUZZED(-6876.5584)))), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(_GLF_IDENTITY(true, _GLF_IDENTITY(true, (true) || false) && _GLF_IDENTITY(_GLF_IDENTITY((true), _GLF_IDENTITY(((true)) && true, (_GLF_IDENTITY(((true)) && true, (((true)) && true) && true)) || false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((true), bool(_GLF_IDENTITY(bvec2((true), true), _GLF_IDENTITY(bvec2(bvec2(bvec2((true), true))), bvec2(bvec3(bvec2(bvec2(bvec2((true), true))), false))))))))), true))).x > injectionSwitch.y, false)))))))))) || _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))));
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      return;
     do
      {
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), ((_GLF_DEAD(false))) && true))))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      return;
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            break;
           do
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
              return;
             if(_GLF_DEAD(false))
              break;
             subgroupAll(_GLF_IDENTITY(true, (true) || false));
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              return;
            }
           if(_GLF_DEAD(false))
            continue;
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))) / exp(vec2(0.0, 0.0))).x > injectionSwitch.y))));
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(false), false)), ! (! (bool(bvec2(_GLF_DEAD(false), false)))))))
        return;
      }
     for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            break;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                return;
               continue;
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), bool(bvec4(bool(false), true, true, false)))))))
                break;
               return;
               if(_GLF_DEAD(false))
                return;
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
              continue;
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 return;
                }
              }
             return;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             return;
             if(_GLF_DEAD(false))
              break;
            }
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
            break;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                  {
                   return;
                  }
                }
               break;
              }
             return;
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            return;
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | (0 << _GLF_IDENTITY(int(0), int(0))))); _injected_loop_counter --)
        {
         return;
        }
      }
    }
  }
 for(int _injected_loop_counter = ((93611 % 83491) & int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, clamp(1, 1, 1)))))); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        continue;
       return;
      }
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          continue;
         break;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             break;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(_GLF_DEAD(false))
            {
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(false))
              return;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              break;
             break;
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(true), true, true)), (_GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(true), true, true)), bool(bvec3(bool(bvec3(_GLF_WRAPPED_IF_TRUE(true), true, _GLF_IDENTITY(true, (true) && true))), false, false)))) || false)))
            {
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))
              break;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_IDENTITY(_GLF_FUZZED(exp2(576.253)), min(_GLF_FUZZED(exp2(576.253)), _GLF_IDENTITY(_GLF_FUZZED(exp2(576.253)), clamp(_GLF_IDENTITY(_GLF_FUZZED(exp2(576.253)), float(mat2x4(_GLF_FUZZED(exp2(576.253)), 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0))), _GLF_FUZZED(exp2(576.253)), _GLF_IDENTITY(_GLF_FUZZED(exp2(576.253)), (_GLF_FUZZED(exp2(576.253))) / 1.0)))))))))))
              {
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, true && (true)), (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                    {
                     return;
                    }
                  }
                 else
                  {
                  }
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))), true && (false))))
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_DEAD(false))
                        return;
                      }
                     else
                      {
                      }
                     continue;
                    }
                   break;
                  }
                }
               else
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    return;
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 return;
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              return;
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), _GLF_IDENTITY(bool(bvec4(! (_GLF_DEAD(false)), true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(bvec4(! (_GLF_DEAD(false)), true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))
              continue;
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) && true)), (false) && true)))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)))))
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    return;
                   return;
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
               continue;
              }
            }
          }
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           continue;
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     do
      {
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
}
