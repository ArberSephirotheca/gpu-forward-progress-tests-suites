#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_11 {
 bvec2 _f0;
} ;

struct _GLF_struct_10 {
 mat3 _f0;
 uint _f1;
} ;

struct _GLF_struct_12 {
 mat3 _f0;
 int _f1;
 _GLF_struct_10 _f2;
 _GLF_struct_11 _f3;
} ;

struct _GLF_struct_13 {
 vec4 _f0;
 mat3x4 _f1;
 _GLF_struct_12 _f2;
 uvec4 _f3;
 vec3 _f4;
 uint subgroup_local_id;
} ;

struct _GLF_struct_7 {
 mat2x3 _f0;
} ;

struct _GLF_struct_6 {
 ivec2 _f0;
} ;

struct _GLF_struct_5 {
 mat3x2 _f0;
 mat2x3 _f1;
 mat3x2 _f2;
 mat4 _f3;
 ivec4 _f4;
 mat2x3 _f5;
 uint _f6;
} ;

struct _GLF_struct_8 {
 _GLF_struct_5 _f0;
 _GLF_struct_6 _f1;
 mat3x2 _f2;
 _GLF_struct_7 _f3;
} ;

struct _GLF_struct_4 {
 mat3 _f0;
 ivec4 _f1;
 mat4x3 _f2;
} ;

struct _GLF_struct_9 {
 float _f0;
 uvec3 _f1;
 _GLF_struct_4 _f2;
 uint next_virtual_gid;
 uint _f3;
 _GLF_struct_8 _f4;
 vec2 _f5;
} ;

struct _GLF_struct_1 {
 bvec4 _f0;
 uint workgroup_size;
 bvec2 _f1;
 uvec2 _f2;
} ;

struct _GLF_struct_0 {
 uvec4 _f0;
} ;

struct _GLF_struct_2 {
 mat4x2 _f0;
 _GLF_struct_0 _f1;
 _GLF_struct_1 _f2;
} ;

struct _GLF_struct_3 {
 _GLF_struct_2 _f0;
 bvec4 _f1;
 mat2x4 _f2;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 uint subgroup_id = gl_SubgroupID;
uint subgroup_size = 16;
 _GLF_struct_13 _GLF_struct_replacement_13 = _GLF_struct_13(vec4(1.0), mat3x4(1.0), _GLF_struct_12(mat3(1.0), 1, _GLF_struct_10(mat3(1.0), 1u), _GLF_struct_11(bvec2(true))), uvec4(1u), vec3(1.0), gl_SubgroupInvocationID);
 uint num_workgroup = gl_NumWorkGroups.x;
 _GLF_struct_3 _GLF_struct_replacement_3 = _GLF_struct_3(_GLF_struct_2(mat4x2(1.0), _GLF_struct_0(uvec4(1u)), _GLF_struct_1(bvec4(true), gl_WorkGroupSize.x, bvec2(true), uvec2(1u))), bvec4(true), mat2x4(1.0));
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = _GLF_struct_replacement_3._f0._f2.workgroup_size * workgroup_id;
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + _GLF_struct_replacement_13.subgroup_local_id;
 if(_GLF_DEAD(false))
  barrier();
 _GLF_struct_9 _GLF_struct_replacement_9 = _GLF_struct_9(1.0, uvec3(1u), _GLF_struct_4(mat3(1.0), ivec4(1), mat4x3(1.0)), workgroup_base + subgroup_id * subgroup_size + ((_GLF_struct_replacement_13.subgroup_local_id + 1) % subgroup_size), 1u, _GLF_struct_8(_GLF_struct_5(mat3x2(1.0), mat2x3(1.0), mat3x2(1.0), mat4(1.0), ivec4(1), mat2x3(1.0), 1u), _GLF_struct_6(ivec2(1)), mat3x2(1.0), _GLF_struct_7(mat2x3(1.0))), vec2(1.0));
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) / 1))) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   for(int _injected_loop_counter = (1 ^ ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       buf[virtual_gid] = 1;
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_struct_replacement_13.subgroup_local_id + 1 < subgroup_size)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       atomicStore(buf[_GLF_struct_replacement_9.next_virtual_gid], uint(2), 4, 64, 4);
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           do
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   subgroupAll(false);
                  }
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
      }
     else
      {
      }
    }
   else
    {
     atomicStore(buf[_GLF_struct_replacement_9.next_virtual_gid], uint(2), 4, 64, 4);
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     subgroupAll(true);
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
  }
}
