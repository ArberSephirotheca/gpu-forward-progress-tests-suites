#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
      break;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(_GLF_IDENTITY(0.0, 1.0 * (0.0)), 0.0)).y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y))))))), true && (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(_GLF_IDENTITY(0.0, 1.0 * (0.0)), 0.0)).y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y))))))))))))
      {
       if(_GLF_DEAD(false))
        break;
       return;
      }
    }
   if(_GLF_DEAD(false))
    continue;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, false || (false)), true)), true && (bool(bvec2(_GLF_IDENTITY(false, false || (false)), true)))))))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       return;
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (! (true)))))))
    {
     return;
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(false)), bool(bvec3(bool(bool(false)), true, true))), (_GLF_IDENTITY(bool(bool(false)), bool(bvec3(bool(bool(false)), true, true)))) || false))) || false), (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _GLF_IDENTITY(_injected_loop_counter ++, int(_GLF_ZERO(0.0, injectionSwitch.x)) | (_injected_loop_counter ++)))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))
    return;
   return;
  }
 do
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (1 ^ 1) ^ (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter)))) < 1); _injected_loop_counter ++)
        {
         return;
        }
      }
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           return;
          }
         return;
        }
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), (_GLF_DEAD(false)) && true))
        break;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
    }
  }
 if(_GLF_DEAD(false))
  return;
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), true))))
  return;
 if(_GLF_DEAD(false))
  return;
uint subgroup_size = 16;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (_GLF_IDENTITY(false, ! (! (false))))))))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(_GLF_IDENTITY(float(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))), clamp(float(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))), float(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))), float(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))))))), mix(float(float(_GLF_IDENTITY(float(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))), clamp(float(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))), float(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))), float(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))))), float(_GLF_FUZZED(-4.2)), bool(false)))), _GLF_IDENTITY(bool(bvec4(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)), (bool(bvec4(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true))) || false))))))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))));
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  {
   do
    {
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
        return;
       do
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_LOOP(false), false), bvec2(bvec3(bvec2(_GLF_WRAPPED_LOOP(false), false), true))))));
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y, float(mat3x2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y, 0.0, 0.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)), 0.0, 1.0)))) - 0.0)))))
      return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))));
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))) || _GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(_GLF_IDENTITY(bvec3(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bvec3(bvec4(bvec3(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false)))))), bool(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(_GLF_IDENTITY(bvec3(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bvec3(bvec4(bvec3(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false)))))), true && (bool(_GLF_IDENTITY(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(_GLF_IDENTITY(bvec3(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bvec3(bvec4(bvec3(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false))))))))))))))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) < injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | 1)); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 else
  {
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     for(int _injected_loop_counter = (0 | (0 & _GLF_IDENTITY(14305, max(14305, 14305)))); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       return;
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
    }
  }
 do
  {
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))))
    break;
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))))
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
      return;
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 & -37616)); _injected_loop_counter --)
      {
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
    }
   if(_GLF_DEAD(false))
    break;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) && true)))))))
      return;
     for(int _injected_loop_counter = _GLF_IDENTITY(1, 0 + (1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
        {
         return;
        }
       else
        {
        }
      }
    }
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))), _GLF_IDENTITY((false) && _GLF_IDENTITY(true, bool(bvec4(true, true, false, true))), ! (! _GLF_IDENTITY(((false) && true), (((false) && true)) && true))))))
    return;
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat2(injectionSwitch.x, 1.0, 1.0, 1.0)), max(_GLF_IDENTITY(float(mat2(injectionSwitch.x, 1.0, 1.0, 1.0)), max(_GLF_IDENTITY(float(mat2(injectionSwitch.x, 1.0, 1.0, 1.0)), (float(mat2(injectionSwitch.x, 1.0, 1.0, 1.0))) * 1.0), _GLF_IDENTITY(float(mat2(injectionSwitch.x, 1.0, 1.0, 1.0)), max(float(mat2(injectionSwitch.x, 1.0, 1.0, 1.0)), float(mat2(injectionSwitch.x, 1.0, 1.0, 1.0)))))), float(mat2(injectionSwitch.x, 1.0, 1.0, 1.0))))) > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat2(injectionSwitch.x, 1.0, 1.0, 1.0)), max(_GLF_IDENTITY(float(mat2(injectionSwitch.x, 1.0, 1.0, 1.0)), max(_GLF_IDENTITY(float(mat2(injectionSwitch.x, 1.0, 1.0, 1.0)), (float(mat2(injectionSwitch.x, 1.0, 1.0, 1.0))) * 1.0), _GLF_IDENTITY(float(mat2(injectionSwitch.x, 1.0, 1.0, 1.0)), max(float(mat2(injectionSwitch.x, 1.0, 1.0, 1.0)), float(mat2(injectionSwitch.x, 1.0, 1.0, 1.0)))))), float(mat2(injectionSwitch.x, 1.0, 1.0, 1.0))))) > injectionSwitch.y))), true && (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat2(injectionSwitch.x, 1.0, 1.0, 1.0)), max(_GLF_IDENTITY(float(mat2(injectionSwitch.x, 1.0, 1.0, 1.0)), max(_GLF_IDENTITY(float(mat2(injectionSwitch.x, 1.0, 1.0, 1.0)), (float(mat2(injectionSwitch.x, 1.0, 1.0, 1.0))) * 1.0), _GLF_IDENTITY(float(mat2(injectionSwitch.x, 1.0, 1.0, 1.0)), max(float(mat2(injectionSwitch.x, 1.0, 1.0, 1.0)), float(mat2(injectionSwitch.x, 1.0, 1.0, 1.0)))))), float(mat2(injectionSwitch.x, 1.0, 1.0, 1.0))))) > injectionSwitch.y)))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
    }
   else
    {
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(_injected_loop_counter) : _injected_loop_counter)) != (_GLF_IDENTITY(0 & (false ? -83340 : 97937), max(0 & _GLF_IDENTITY((false ? -83340 : 97937), max((false ? -83340 : 97937), (false ? -83340 : 97937))), _GLF_IDENTITY(0 & (false ? -83340 : 97937), (0 & (false ? _GLF_IDENTITY(-83340, 0 ^ (-83340)) : 97937)) * 1)))), true && (_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(_injected_loop_counter) : _injected_loop_counter)) != (_GLF_IDENTITY(0 & (false ? -83340 : 97937), max(0 & _GLF_IDENTITY((false ? -83340 : 97937), max((false ? -83340 : 97937), (false ? -83340 : 97937))), _GLF_IDENTITY(0 & (false ? -83340 : 97937), (0 & (false ? _GLF_IDENTITY(-83340, 0 ^ (-83340)) : 97937)) * 1))))))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           return;
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          continue;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
        return;
      }
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      continue;
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
      {
       return;
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, false || (false)))), true && (_GLF_IDENTITY(false, _GLF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), bvec3(bvec3(bvec3(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))), (bool(_GLF_IDENTITY(bvec3(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), bvec3(bvec3(bvec3(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))) || false)), (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, false || (false))))))))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   return;
  }
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(false))
      return;
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     return;
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(0u ^ (workgroup_base), uint(_GLF_IDENTITY(uint(0u ^ (workgroup_base)), (uint(0u ^ (workgroup_base))) | 0u)))) + _GLF_IDENTITY(subgroup_id, uint(uvec2(subgroup_id, uint(_GLF_ZERO(0.0, injectionSwitch.x))))) * subgroup_size + ((subgroup_local_id + 1) % subgroup_size), max(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | (subgroup_id * subgroup_size)) + ((_GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, 0u + (subgroup_local_id)), _GLF_IDENTITY(subgroup_local_id, 1u * (subgroup_local_id)))) + 1) % subgroup_size), _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (0u >> _GLF_IDENTITY(uint(6u), uint(6u))) + _GLF_IDENTITY(_GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size), ((workgroup_base + subgroup_id * subgroup_size)) | (_GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size), (false ? _GLF_FUZZED(subgroup_size) : (workgroup_base + subgroup_id * subgroup_size))))), clamp(_GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size), ((workgroup_base + subgroup_id * subgroup_size)) | (_GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size), (false ? _GLF_FUZZED(subgroup_size) : (workgroup_base + subgroup_id * subgroup_size))))), _GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size), ((workgroup_base + subgroup_id * subgroup_size)) | (_GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size), (false ? _GLF_FUZZED(subgroup_size) : (workgroup_base + subgroup_id * subgroup_size))))), _GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size), ((workgroup_base + subgroup_id * subgroup_size)) | (_GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size), (false ? _GLF_FUZZED(subgroup_size) : (workgroup_base + subgroup_id * subgroup_size)))))))), (workgroup_base + subgroup_id * subgroup_size) / 1u)) ^ _GLF_IDENTITY(0u, clamp(0u, 0u, 0u))) + ((subgroup_local_id + 1) % subgroup_size)));
 for(int _injected_loop_counter = ((0 >> _GLF_IDENTITY(int(1), int(1))) & -68273); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) >> 0))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(ivec4(_GLF_IDENTITY(int(2), int(int(int(2)))), 1, (1 | (-21728 & 0)), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))))), int(2)))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      return;
    }
   buf[virtual_gid] = 1;
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), ! _GLF_IDENTITY((! (_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY((false) || false, ((false) || false) && true), (_GLF_IDENTITY((false) || false, ((false) || false) && true)) || false)))), false || ((! (_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY((false) || false, ((false) || false) && true), (_GLF_IDENTITY((false) || false, ((false) || false) && true)) || false)))))))) || _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, true && (false)))), false || (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(true && (false), (true && (false)) && true), true, false, true)), false || (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(true && (false), (true && (false)) && true), true, false, true)), false || (bool(bvec4(_GLF_IDENTITY(true && (false), (true && (false)) && true), true, false, true)))))))))), bool(bvec4(bool(bool(_GLF_IDENTITY(false, true && (false)))), false, _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, (true) && true)), false || (! (_GLF_IDENTITY(true, (true) && true)))))), false)))))))))), (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        break;
       break;
      }
     if(_GLF_DEAD(false))
      return;
     break;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-4589.0314), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(928.955)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))).y, true && (injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), (false ? _GLF_FUZZED(floor(-79.81)) : _GLF_IDENTITY(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), min(_GLF_IDENTITY(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), float(mat4(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(1.0, exp(0.0) * (1.0)), 1.0))), clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))))) > injectionSwitch.y)))), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0))) > injectionSwitch.y)))))))), _GLF_IDENTITY(bool(bvec3(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), _GLF_IDENTITY((false ? _GLF_FUZZED(floor(-79.81)) : _GLF_IDENTITY(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), min(_GLF_IDENTITY(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), float(mat4(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(vec2(0.0, sqrt(1.0)), max(vec2(0.0, sqrt(1.0)), vec2(0.0, sqrt(1.0)))))), 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-2.8))))), 1.0, 0.0, 1.0, 1.0, 1.0))), clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))), (false ? _GLF_FUZZED(-4294.3185) : _GLF_IDENTITY((false ? _GLF_FUZZED(floor(-79.81)) : _GLF_IDENTITY(_GLF_IDENTITY(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), (_GLF_IDENTITY(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), mix(float(_GLF_IDENTITY(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), (false ? _GLF_FUZZED(-7.9) : clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))), float(_GLF_FUZZED(2297.5908)), bool(false)))) + 0.0), min(_GLF_IDENTITY(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), float(mat4(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0))), clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))), float(mat4x3((false ? _GLF_FUZZED(floor(-79.81)) : _GLF_IDENTITY(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), min(_GLF_IDENTITY(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), float(mat4(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0))), clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))), 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, tan(0.0), sqrt(1.0), 1.0, sqrt(1.0)))))))) > injectionSwitch.y)))), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((injectionSwitch.x), float(vec4((injectionSwitch.x), _GLF_ONE(1.0, injectionSwitch.y), exp(abs(0.0)), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0)))))) - 0.0))) > injectionSwitch.y)))))))), true, false)), ! (! (bool(bvec3(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], min(_GLF_IDENTITY((injectionSwitch)[0], float(mat4x2((injectionSwitch)[0], 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0))), _GLF_IDENTITY((injectionSwitch)[0], min((injectionSwitch)[0], (injectionSwitch)[0])))), (injectionSwitch)[1]), vec2(_GLF_FUZZED(-5.9), _GLF_FUZZED(-5.4)), bvec2(false, false))).x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), true && (injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), (false ? _GLF_FUZZED(floor(-79.81)) : _GLF_IDENTITY(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), min(_GLF_IDENTITY(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), float(mat4(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))), float(_GLF_FUZZED(73.19)), bool(false))), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0))), clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-42.23) : _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))), injectionSwitch.x)))))) > injectionSwitch.y)))), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y, min(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)) : _GLF_FUZZED(vec2(7.9, 3.8)))).y)), true && (injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0)) - 0.0))) > injectionSwitch.y)))))))), _GLF_IDENTITY(true, (true) || false), false)))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(false || (false), bool(bool(_GLF_IDENTITY(false || (false), (false || (false)) && true)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false || (false), bool(bool(_GLF_IDENTITY(false || (false), (false || (false)) && true)))))))))
      break;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) || false), (injectionSwitch.x > injectionSwitch.y))))
        break;
       return;
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        break;
      }
     if(_GLF_DEAD(false))
      continue;
    }
   if(_GLF_DEAD(false))
    break;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * round(length(normalize(vec3(1.0, 1.0, 1.0))))), 0.0 + (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x3(injectionSwitch, 0.0, 0.0, 0.0, 0.0)), max(vec2(mat2x3(injectionSwitch, 0.0, 0.0, 0.0, 0.0)), vec2(mat2x3(injectionSwitch, 0.0, 0.0, 0.0, 0.0))))))).x)) > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
      return;
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, (false) || false), false)), ! (! (bool(bvec2(_GLF_IDENTITY(false, (false) || false), false)))))), false || (false))))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
        return;
       return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true))))
        return;
      }
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))
      return;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       return;
      }
    }
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = ((_GLF_IDENTITY(1, (1) - 0) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), min(int(4), int(4))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y))))))
          return;
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(subgroup_local_id + _GLF_IDENTITY(1, (1) | int(_GLF_ZERO(0.0, injectionSwitch.x))) < subgroup_size)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false), bvec3(bvec4(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false), true))))))))))
        return;
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y) + 0.0)))))))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, false)), _GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, false)), (bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && _GLF_IDENTITY(true, (true) || false)), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true)))), _GLF_IDENTITY(true, bool(bvec3(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))), false))) && true), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, false)), (bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, false))) && true), true), false, false)))), true && (bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, false)), (bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, false))) && true), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, false)), (bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, false))) && true), true), false, false))), bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, false)), (bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, false))) && true), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, false)), (bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, false))) && true), true), false, false)))), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, false)), (bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, false))) && true), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, false)), (bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, false))) && true), true), false, false)))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, false)), (bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, false))) && true), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, false)), (bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, false))) && true), true), false, false)))), true))))))))))), true && (_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, false)), (bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && _GLF_IDENTITY(true, (true) || false)), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true)))), _GLF_IDENTITY(true, bool(bvec3(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))), false))) && true), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, false)), (bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, false))) && true), true), false, false)))), true && (bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, false)), (bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, false))) && true), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, false)), (bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, false))) && true), true), false, false))), bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, false)), (bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, false))) && true), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, false)), (bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, false))) && true), true), false, false)))), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, false)), (bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, false))) && true), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, false)), (bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, false))) && true), true), false, false)))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, false)), (bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, false))) && true), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, false)), (bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, false))) && true), true), false, false)))), true))))))))))), true && (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, false)), (bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && _GLF_IDENTITY(true, (true) || false)), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true)))), _GLF_IDENTITY(true, bool(bvec3(true, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y))) || false), true))), false))) && true), _GLF_IDENTITY(true, bool(bool(true)))), bvec2(bvec4(bvec2(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, false), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, false), true))))))), (bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, false))) && true), true), false, false)))), true && (bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, false)), (bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, false))) && true), true && (_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, false)), (bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY((_GLF_WRAPPED_IF_FALSE(false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_WRAPPED_IF_FALSE(false)), bool(bvec3((_GLF_WRAPPED_IF_FALSE(false)), true, false)))), true && (! (_GLF_IDENTITY((_GLF_WRAPPED_IF_FALSE(false)), bool(bvec3((_GLF_WRAPPED_IF_FALSE(false)), true, false)))))))) && true), true, false))) && true))), _GLF_IDENTITY(true, false || (true))), bvec2(bvec4(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, false)), (bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, false))) && true), true), false, false))), bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, false)), (bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY((_GLF_WRAPPED_IF_FALSE(false)), true && ((_GLF_WRAPPED_IF_FALSE(false)))) && true), true, false))) && true), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, false)), (bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, false))) && true), true), false, false)))), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, false)), (bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, false))) && true), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, false)), (bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && _GLF_IDENTITY(true, (true) || false))) && true), true, false))) && true), true), false, false)))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, false)), (bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, false))) && true), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, false)), (bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, false))) && true), true), false, false)))), true)))))))))))))))), ! (! (_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, false)), _GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, false)), (bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && _GLF_IDENTITY(true, (true) || false)), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true)))), _GLF_IDENTITY(true, bool(bvec3(true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(normalize(injectionSwitch)) : _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).x < injectionSwitch.y)), true))), false))) && true), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, false)), (bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, false))) && true), true), false, false)))), true && (bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, false)), (bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, false))) && true), true), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, false)), (bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, false))) && true), true), bvec2(bvec3(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, false)), (bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, false))) && true), true), false))), true, false))), bvec2(bvec4(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, false)), (bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true)), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, false))) && true), true), false, false))), bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, false)), (bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, false))) && true), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, false)), (bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, false))) && true), true), false, false)))), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, false)), (bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, false))) && true), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, false)), _GLF_IDENTITY((bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, false))) && true, bool(bvec3((bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, false))) && true, false, true)))), true), false, false)))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, false)), _GLF_IDENTITY((bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, false))), bool(bvec4((bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, false))), true, true, true))) && true), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, false)), (bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, false))) && true), true), false, false)))), true))))))))))), true && (_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, false)), (bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))), (_GLF_WRAPPED_IF_FALSE(false)) && _GLF_IDENTITY(true, (true) || false)), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true)))), _GLF_IDENTITY(true, bool(bvec3(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))), false))) && true), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, false)), (bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY((_GLF_WRAPPED_IF_FALSE(false)) && true, ! (! (_GLF_IDENTITY((_GLF_WRAPPED_IF_FALSE(false)) && true, true && ((_GLF_WRAPPED_IF_FALSE(false)) && true)))))), true, false))) && _GLF_IDENTITY(true, true && (true))), true), false, false)))), true && (bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, false)), (bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, false))) && true), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, false)), (bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY((_GLF_WRAPPED_IF_FALSE(false)) && true, ((_GLF_WRAPPED_IF_FALSE(false)) && true) || false)), true, false))) && true), true), false, false))), bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), false || (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true))), true, false)), (bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, false))) && true), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, false)), (bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, false))) && true), true), false, false)))), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, false)), (bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, false))) && true), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, false)), ! (! (bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, false))))), (bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) && true)))), (_GLF_WRAPPED_IF_FALSE(false)) && true), _GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) || false), false))) && true), true), false, false)))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, false)), (bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, false))) && true), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY((_GLF_WRAPPED_IF_FALSE(false)), true && ((_GLF_WRAPPED_IF_FALSE(false)))) && true), true, false)), (bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, false))) && true), true), false, false)))), true))))))))))), true && (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, false)), (bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && _GLF_IDENTITY(true, (true) || false)), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true)))), _GLF_IDENTITY(true, bool(bvec3(true, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y))) || false), true))), false))) && true), _GLF_IDENTITY(true, bool(bool(true)))), bvec2(bvec4(bvec2(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false)))), true)))), (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false)))), true))))) && true)))) && true), true, false), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY((_GLF_WRAPPED_IF_FALSE(false)) && true, false || ((_GLF_WRAPPED_IF_FALSE(false)) && true))), true, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, false), true))))))), (bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, false))) && true), true), false, _GLF_IDENTITY(false, ! (! (false))))))), true && (bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, false)), (bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true)) || false), true, false))) && true), true && (_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, false)), (bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY((_GLF_WRAPPED_IF_FALSE(false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_WRAPPED_IF_FALSE(false)), bool(bvec3((_GLF_WRAPPED_IF_FALSE(false)), true, false)))), true && (! (_GLF_IDENTITY((_GLF_WRAPPED_IF_FALSE(false)), bool(bvec3((_GLF_WRAPPED_IF_FALSE(false)), true, false)))))))) && true), true, false))) && true))), _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (true) && true)))), _GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, false)), (bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, false))) && true), true), false, false)), bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, false)), (bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, false))) && true), true), false, false)), bvec2(bvec2(bvec2(bvec4(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, false)), (bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, false))) && true), true), false, false))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), _GLF_IDENTITY(true, ! (! (true))), false)), (bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_WRAPPED_IF_FALSE(false)), ! (_GLF_IDENTITY(! ((_GLF_WRAPPED_IF_FALSE(false))), true && (! ((_GLF_WRAPPED_IF_FALSE(false))))))), true && _GLF_IDENTITY(((_GLF_WRAPPED_IF_FALSE(false))), ! (! (_GLF_IDENTITY(((_GLF_WRAPPED_IF_FALSE(false))), (((_GLF_WRAPPED_IF_FALSE(false)))) && true))))) && true), true, false))) && true), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, false)), (bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, false))) && true), true), false, false)))), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, false), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, false)), bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, false)))))))), (bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), ! (! (! (_GLF_IDENTITY(false, bool(bool(false)))))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && true), true, false))) && true), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, false)), (bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && _GLF_IDENTITY(true, (true) || false))) && true), true, false))) && true), true), false, false)))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), true && (_GLF_WRAPPED_IF_FALSE(false))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), false || (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false))))))), ! (! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), false || (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false))))))))))))) && true), true, false)), (bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), false || (_GLF_WRAPPED_IF_FALSE(false))), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, false))) && true), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true))) && true), true, false)), (bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, false))) && true), true), false, false)))), true)))))))))))))))))))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
          }
         if(_GLF_DEAD(false))
          {
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bool(true)))) && true)))
              {
               return;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat4x3(injectionSwitch.y, 1.0, 0.0, 0.0, 0.0, 1.0, abs(0.0), 1.0, 1.0, determinant(mat2(cos(0.0), 0.0, 0.0, 1.0)), round(_GLF_IDENTITY(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))), (length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))) - 0.0)), 0.0)), (float(mat4x3(injectionSwitch.y, 1.0, 0.0, 0.0, 0.0, 1.0, abs(0.0), 1.0, 1.0, determinant(mat2(cos(0.0), 0.0, 0.0, 1.0)), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0))) - 0.0))))))
                break;
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, false || (_GLF_IDENTITY(_injected_loop_counter > 0, ! (! (_injected_loop_counter > 0)))))); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                  continue;
                }
               if(_GLF_DEAD(false))
                break;
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              return;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
          return;
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(8), int(8)))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), false || (bool(bool(false)))))))))
              {
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || (false))))))
                break;
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                break;
               continue;
              }
             if(_GLF_DEAD(false))
              break;
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, log(determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0))) + (injectionSwitch.x)), clamp(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y)))))), bool(bvec4(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, log(determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0))) + (injectionSwitch.x)), clamp(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y)))))), false, true, false))))
              {
               if(_GLF_DEAD(false))
                break;
               atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, _GLF_IDENTITY(max(_GLF_IDENTITY(next_virtual_gid, _GLF_IDENTITY((next_virtual_gid), _GLF_IDENTITY(uint(uvec2((next_virtual_gid), 1u)), _GLF_IDENTITY(uint(uvec4(uint(uvec2((next_virtual_gid), 1u)), 0u, 0u, 1u)), 0u + (uint(uvec4(uint(uvec2((next_virtual_gid), 1u)), 0u, 0u, 1u)))))) + 0u), _GLF_IDENTITY(_GLF_IDENTITY(next_virtual_gid, ~ (~ (next_virtual_gid))), (_GLF_IDENTITY(next_virtual_gid, clamp(next_virtual_gid, next_virtual_gid, next_virtual_gid))) | _GLF_IDENTITY((_GLF_IDENTITY(next_virtual_gid, _GLF_IDENTITY(0u, max(0u, _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, 0u | (0u))) >> 0u)) | (0u)))) ^ (next_virtual_gid))), (true ? (_GLF_IDENTITY(next_virtual_gid, _GLF_IDENTITY(0u, max(0u, _GLF_IDENTITY(0u, (0u) | (0u)))) ^ (next_virtual_gid))) : _GLF_FUZZED(virtual_gid))))), 0u + (max(_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) + 0u), _GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) | _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(next_virtual_gid, _GLF_IDENTITY(0u, max(0u, _GLF_IDENTITY(0u, (0u) | (0u)))) ^ (next_virtual_gid)), min(_GLF_IDENTITY(next_virtual_gid, _GLF_IDENTITY(0u, max(0u, _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uint(0u)), (uint(uint(0u))) - 0u))) | (0u)))) ^ (next_virtual_gid)), _GLF_IDENTITY(_GLF_IDENTITY(next_virtual_gid, _GLF_IDENTITY(0u, _GLF_IDENTITY(max(0u, _GLF_IDENTITY(0u, (0u) | (0u))), ~ (~ (max(0u, _GLF_IDENTITY(0u, (0u) | (0u))))))) ^ (next_virtual_gid)), (_GLF_IDENTITY(next_virtual_gid, _GLF_IDENTITY(_GLF_IDENTITY(0u, max(0u, _GLF_IDENTITY(0u, (0u) | (0u)))) ^ (next_virtual_gid), ~ (~ (_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(subgroup_local_id) : 0u)), _GLF_IDENTITY(0u, (0u) | (0u)))) ^ (next_virtual_gid)))))) ^ 0u)))), (true ? (_GLF_IDENTITY(next_virtual_gid, _GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(workgroup_id) : 0u)), _GLF_IDENTITY(0u, (0u) | (0u)))) ^ (next_virtual_gid))) : _GLF_IDENTITY(_GLF_FUZZED(virtual_gid), min(_GLF_FUZZED(virtual_gid), _GLF_IDENTITY(_GLF_FUZZED(virtual_gid), max(_GLF_FUZZED(virtual_gid), _GLF_FUZZED(virtual_gid))))))), uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(next_virtual_gid, _GLF_IDENTITY(0u, max(0u, _GLF_IDENTITY(0u, (0u) | (0u)))) ^ (next_virtual_gid)), min(_GLF_IDENTITY(next_virtual_gid, _GLF_IDENTITY(0u, _GLF_IDENTITY(max(0u, _GLF_IDENTITY(0u, (0u) | (0u))), (_GLF_IDENTITY(max(0u, _GLF_IDENTITY(0u, (0u) | (0u))), max(max(0u, _GLF_IDENTITY(0u, (0u) | (0u))), max(0u, _GLF_IDENTITY(0u, (0u) | (0u)))))) | (max(0u, _GLF_IDENTITY(0u, (0u) | (0u)))))) ^ (next_virtual_gid)), _GLF_IDENTITY(_GLF_IDENTITY(next_virtual_gid, _GLF_IDENTITY(0u, max(0u, _GLF_IDENTITY(0u, (0u) | (0u)))) ^ (next_virtual_gid)), (_GLF_IDENTITY(next_virtual_gid, _GLF_IDENTITY(0u, max(0u, _GLF_IDENTITY(0u, (0u) | (0u)))) ^ (next_virtual_gid))) ^ 0u)))), (true ? (_GLF_IDENTITY(next_virtual_gid, _GLF_IDENTITY(_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(workgroup_id) : 0u)), _GLF_IDENTITY(0u, (0u) | (0u)))), ~ (~ (_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(workgroup_id) : 0u)), _GLF_IDENTITY(0u, (0u) | (0u))))))) ^ (next_virtual_gid))) : _GLF_IDENTITY(_GLF_FUZZED(virtual_gid), min(_GLF_FUZZED(virtual_gid), _GLF_IDENTITY(_GLF_FUZZED(virtual_gid), max(_GLF_FUZZED(_GLF_IDENTITY(virtual_gid, max(virtual_gid, _GLF_IDENTITY(virtual_gid, uint(uvec3(virtual_gid, 1u, ((1u << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u))))))))), _GLF_FUZZED(virtual_gid))))))), 0u, 0u), ~ (~ (uvec3(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(next_virtual_gid, _GLF_IDENTITY(0u, max(0u, _GLF_IDENTITY(0u, (0u) | (0u)))) ^ (next_virtual_gid)), min(_GLF_IDENTITY(next_virtual_gid, _GLF_IDENTITY(0u, _GLF_IDENTITY(max(0u, _GLF_IDENTITY(0u, (0u) | (0u))), (_GLF_IDENTITY(max(0u, _GLF_IDENTITY(0u, (0u) | (0u))), max(max(0u, _GLF_IDENTITY(0u, (0u) | (0u))), max(0u, _GLF_IDENTITY(0u, (0u) | (0u)))))) | (max(0u, _GLF_IDENTITY(0u, (0u) | (0u)))))) ^ (next_virtual_gid)), _GLF_IDENTITY(_GLF_IDENTITY(next_virtual_gid, _GLF_IDENTITY(0u, max(0u, _GLF_IDENTITY(0u, (0u) | (0u)))) ^ (next_virtual_gid)), (_GLF_IDENTITY(next_virtual_gid, _GLF_IDENTITY(0u, max(0u, _GLF_IDENTITY(0u, (0u) | (0u)))) ^ (next_virtual_gid))) ^ 0u)))), (true ? (_GLF_IDENTITY(next_virtual_gid, _GLF_IDENTITY(_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(workgroup_id) : 0u)), _GLF_IDENTITY(0u, (0u) | (0u)))), ~ (~ (_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(workgroup_id) : 0u)), _GLF_IDENTITY(0u, (0u) | (0u))))))) ^ (next_virtual_gid))) : _GLF_IDENTITY(_GLF_FUZZED(virtual_gid), min(_GLF_FUZZED(virtual_gid), _GLF_IDENTITY(_GLF_FUZZED(virtual_gid), max(_GLF_FUZZED(_GLF_IDENTITY(virtual_gid, max(virtual_gid, _GLF_IDENTITY(virtual_gid, uint(uvec3(virtual_gid, 1u, ((1u << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u))))))))), _GLF_FUZZED(virtual_gid))))))), 0u, 0u)))), (uvec3(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(next_virtual_gid, _GLF_IDENTITY(0u, max(0u, _GLF_IDENTITY(0u, _GLF_IDENTITY((0u) | (0u), ~ (~ ((0u) | (_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(subgroup_id) : 0u))))))))) ^ (next_virtual_gid)), min(_GLF_IDENTITY(next_virtual_gid, _GLF_IDENTITY(0u, max(0u, _GLF_IDENTITY(0u, (0u) | (0u)))) ^ (next_virtual_gid)), _GLF_IDENTITY(_GLF_IDENTITY(next_virtual_gid, _GLF_IDENTITY(0u, max(0u, _GLF_IDENTITY(0u, (0u) | (0u)))) ^ (next_virtual_gid)), (_GLF_IDENTITY(next_virtual_gid, _GLF_IDENTITY(0u, max(0u, _GLF_IDENTITY(0u, (0u) | (0u)))) ^ (next_virtual_gid))) ^ 0u)))), (true ? (_GLF_IDENTITY(next_virtual_gid, _GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(workgroup_id) : 0u)), _GLF_IDENTITY(0u, (0u) | (0u)))) ^ (next_virtual_gid))) : _GLF_IDENTITY(_GLF_FUZZED(virtual_gid), min(_GLF_FUZZED(virtual_gid), _GLF_IDENTITY(_GLF_FUZZED(virtual_gid), max(_GLF_FUZZED(virtual_gid), _GLF_FUZZED(virtual_gid))))))), 0u, 0u)) - uvec3(0u, 0u, 0u)))))))))], uint(2), 4, _GLF_IDENTITY(64, max(64, 64)), 4);
               if(_GLF_DEAD(false))
                break;
              }
             else
              {
               if(_GLF_DEAD(false))
                return;
              }
            }
          }
         else
          {
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (_GLF_IDENTITY(! _GLF_IDENTITY((false), bool(bvec2(_GLF_IDENTITY((false), ((false)) || false), false))), bool(bvec4(! (false), true, false, true)))))))))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)), _GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), true && (bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))); _injected_loop_counter ++)
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 ^ (0 >> _GLF_IDENTITY(int(6), int(6))))); _injected_loop_counter --)
            {
             return;
             if(_GLF_DEAD(false))
              continue;
            }
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         else
          {
          }
         return;
        }
       if(_GLF_DEAD(false))
        return;
      }
     do
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED((false ? 5610.8773 : -5.4)), _GLF_FUZZED((vec2(-15.03, 6.6)).s)), bvec2(false, false))).y))))
            break;
           return;
          }
         if(_GLF_DEAD(false))
          continue;
         return;
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, false || (false)), true, true), _GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(false, false || (false)), true, true))), bvec3(bvec4(bvec3(bvec3(bvec3(_GLF_IDENTITY(false, false || (false)), true, true))), true))))))))
          break;
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0)) * 1.0), _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y))));
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true)))))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           break;
          }
         if(_GLF_DEAD(false))
          return;
         return;
        }
      }
     for(int _injected_loop_counter = _GLF_IDENTITY(1, int(ivec2(1, 0))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter > _GLF_IDENTITY(0, (0) | (0)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_injected_loop_counter > 0, ! (! (_injected_loop_counter > 0)))), (! (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter > 0, (_injected_loop_counter > 0) || false), ! (! (_injected_loop_counter > 0))))) || false))), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter > 0, ! (! (_GLF_IDENTITY(_injected_loop_counter > 0, ! (! (_injected_loop_counter > 0)))))), bool(bvec4(_GLF_IDENTITY(_injected_loop_counter > 0, ! (! _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter > 0, ! (! (_injected_loop_counter > _GLF_IDENTITY(0, ~ (~ (0))))))), true && ((_GLF_IDENTITY(_injected_loop_counter > 0, ! (! (_injected_loop_counter > 0)))))))), true, false, true))), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter > 0, ! (! (_GLF_IDENTITY(_injected_loop_counter > 0, ! (! (_injected_loop_counter > 0)))))), bool(bvec4(_GLF_IDENTITY(_injected_loop_counter > 0, _GLF_IDENTITY(! (! _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter > 0, ! (! (_injected_loop_counter > _GLF_IDENTITY(0, ~ (~ (0))))))), true && ((_GLF_IDENTITY(_injected_loop_counter > 0, ! (! (_injected_loop_counter > 0))))))), ! (! (_GLF_IDENTITY(! (! _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter > 0, ! (! (_injected_loop_counter > _GLF_IDENTITY(0, ~ (~ (0))))))), true && ((_GLF_IDENTITY(_injected_loop_counter > 0, ! (! (_injected_loop_counter > 0))))))), ! (! (! (! _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter > 0, ! (! (_injected_loop_counter > _GLF_IDENTITY(0, _GLF_IDENTITY(~ (~ (0)), (~ (~ (0))) / 1)))))), true && ((_GLF_IDENTITY(_injected_loop_counter > 0, ! (! (_injected_loop_counter > 0)))))))))))))), true, false, true))), false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter > 0, ! (! (_GLF_IDENTITY(_injected_loop_counter > 0, ! (! (_injected_loop_counter > 0)))))), bool(bvec4(_GLF_IDENTITY(_injected_loop_counter > 0, ! (! _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter > 0, ! (! (_injected_loop_counter > _GLF_IDENTITY(0, ~ (~ (0))))))), true && ((_GLF_IDENTITY(_injected_loop_counter > 0, ! (! (_injected_loop_counter > 0)))))))), true, false, true))), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter > 0, ! (! (_GLF_IDENTITY(_injected_loop_counter > 0, ! (! (_injected_loop_counter > 0)))))), bool(bvec4(_GLF_IDENTITY(_injected_loop_counter > 0, _GLF_IDENTITY(! (! _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter > 0, ! (! (_injected_loop_counter > _GLF_IDENTITY(0, ~ (~ (0))))))), true && ((_GLF_IDENTITY(_injected_loop_counter > 0, ! (! (_injected_loop_counter > 0))))))), ! (! (_GLF_IDENTITY(! (! _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter > 0, ! (! (_injected_loop_counter > _GLF_IDENTITY(0, ~ (~ (0))))))), true && ((_GLF_IDENTITY(_injected_loop_counter > 0, ! (! (_injected_loop_counter > 0))))))), ! (! (! (! _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter > 0, ! (! (_injected_loop_counter > _GLF_IDENTITY(0, _GLF_IDENTITY(~ (~ (0)), (~ (~ (0))) / 1)))))), true && ((_GLF_IDENTITY(_injected_loop_counter > 0, ! (! (_injected_loop_counter > 0)))))))))))))), true, false, true))), false))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter > 0, ! (! (_GLF_IDENTITY(_injected_loop_counter > 0, ! (! (_injected_loop_counter > 0)))))), bool(bvec4(_GLF_IDENTITY(_injected_loop_counter > 0, ! (! _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter > 0, ! (! (_injected_loop_counter > _GLF_IDENTITY(0, ~ (~ (0))))))), true && ((_GLF_IDENTITY(_injected_loop_counter > 0, ! (! (_injected_loop_counter > 0)))))))), true, false, true))), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter > 0, ! (! (_GLF_IDENTITY(_injected_loop_counter > 0, ! (! (_injected_loop_counter > 0)))))), bool(bvec4(_GLF_IDENTITY(_injected_loop_counter > 0, _GLF_IDENTITY(! (! _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter > 0, ! (! (_injected_loop_counter > _GLF_IDENTITY(0, ~ (~ (0))))))), true && ((_GLF_IDENTITY(_injected_loop_counter > 0, ! (! (_injected_loop_counter > 0))))))), ! (! (_GLF_IDENTITY(! (! _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter > 0, ! (! (_injected_loop_counter > _GLF_IDENTITY(0, ~ (~ (0))))))), true && ((_GLF_IDENTITY(_injected_loop_counter > 0, ! (! (_injected_loop_counter > 0))))))), ! (! (! (! _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter > 0, ! (! (_injected_loop_counter > _GLF_IDENTITY(0, _GLF_IDENTITY(~ (~ (0)), (~ (~ (0))) / 1)))))), true && ((_GLF_IDENTITY(_injected_loop_counter > 0, ! (! (_injected_loop_counter > 0)))))))))))))), true, false, true))), false))))))), false || (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter > 0, ! (! (_GLF_IDENTITY(_injected_loop_counter > 0, ! (! (_injected_loop_counter > 0)))))), bool(bvec4(_GLF_IDENTITY(_injected_loop_counter > 0, ! (! _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter > 0, ! (! (_injected_loop_counter > _GLF_IDENTITY(0, ~ (~ (0))))))), true && ((_GLF_IDENTITY(_injected_loop_counter > 0, ! (! (_injected_loop_counter > 0)))))))), true, false, true))), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter > 0, ! (! (_GLF_IDENTITY(_injected_loop_counter > 0, ! (! (_injected_loop_counter > 0)))))), bool(bvec4(_GLF_IDENTITY(_injected_loop_counter > 0, _GLF_IDENTITY(! (! _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter > 0, ! (! (_injected_loop_counter > _GLF_IDENTITY(0, ~ (~ (0))))))), true && ((_GLF_IDENTITY(_injected_loop_counter > 0, ! (! (_injected_loop_counter > 0))))))), ! (! (_GLF_IDENTITY(! (! _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter > 0, ! (! (_injected_loop_counter > _GLF_IDENTITY(0, ~ (~ (0))))))), true && ((_GLF_IDENTITY(_injected_loop_counter > 0, ! (! (_injected_loop_counter > 0))))))), ! (! (! (! _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter > 0, ! (! (_injected_loop_counter > _GLF_IDENTITY(0, _GLF_IDENTITY(~ (~ (0)), (~ (~ (0))) / 1)))))), true && ((_GLF_IDENTITY(_injected_loop_counter > 0, ! (! (_injected_loop_counter > 0)))))))))))))), true, false, true))), false))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter > 0, ! (! (_GLF_IDENTITY(_injected_loop_counter > 0, ! (! (_injected_loop_counter > 0)))))), bool(bvec4(_GLF_IDENTITY(_injected_loop_counter > 0, ! (! _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter > 0, ! (! (_injected_loop_counter > _GLF_IDENTITY(0, ~ (~ (0))))))), true && ((_GLF_IDENTITY(_injected_loop_counter > 0, ! (! (_injected_loop_counter > 0)))))))), true, false, true))), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter > 0, bool(bvec2(_injected_loop_counter > 0, false))), ! (! (_GLF_IDENTITY(_injected_loop_counter > 0, ! (! (_injected_loop_counter > 0)))))), bool(bvec4(_GLF_IDENTITY(_injected_loop_counter > 0, _GLF_IDENTITY(! (! _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter > 0, ! (! (_injected_loop_counter > _GLF_IDENTITY(0, _GLF_IDENTITY(~ (~ (0)), 1 * (~ (~ (0))))))))), true && ((_GLF_IDENTITY(_injected_loop_counter > 0, ! (! (_injected_loop_counter > 0))))))), ! (! (_GLF_IDENTITY(! (! _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter > 0, ! (! (_injected_loop_counter > _GLF_IDENTITY(0, _GLF_IDENTITY(~ (~ (0)), max(~ (~ (0)), ~ (~ (0))))))))), true && ((_GLF_IDENTITY(_injected_loop_counter > 0, ! (! (_injected_loop_counter > 0))))))), ! (! (! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter > 0, ! (! (_injected_loop_counter > _GLF_IDENTITY(0, _GLF_IDENTITY(~ (~ (0)), (~ (~ (0))) / 1)))))), true && ((_GLF_IDENTITY(_injected_loop_counter > 0, ! (! (_injected_loop_counter > 0)))))), bool(bvec4(_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter > 0, ! (! (_injected_loop_counter > _GLF_IDENTITY(0, _GLF_IDENTITY(~ (~ (0)), (~ (~ (0))) / 1)))))), true && ((_GLF_IDENTITY(_injected_loop_counter > 0, ! (! (_injected_loop_counter > 0)))))), (! _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter > 0, ! (! (_injected_loop_counter > _GLF_IDENTITY(0, _GLF_IDENTITY(~ (~ (0)), (~ (~ (0))) / 1)))))), true && ((_GLF_IDENTITY(_injected_loop_counter > 0, ! (! (_injected_loop_counter > 0))))))) && true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true))))))))))), true, false, true))), false))))))))))))))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = (72102 & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             return;
            }
           if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
            continue;
          }
         continue;
        }
       for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY(int(3), int(3))) | 0), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), min(_GLF_IDENTITY(int(3), int(3)), _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), min(int(3), int(3))))) | (_GLF_IDENTITY(int(3), int(3)))))))))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)), ((_GLF_IDENTITY(false, (false) || false))) || false) && true)))
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            break;
           return;
          }
         subgroupAll(false);
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
          break;
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) && true)))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) && true)))), bool(bvec3(bool(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) && true)))), true, false)))) || false))))))) && true)), bool(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) && true)))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) && true)))), bool(bvec3(bool(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) && true)))), true, false)))) || false))))))) && true)), false, true))))
          continue;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
            break;
           return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))))
          continue;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, false || (true)), false, false, false))))) && (false)), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(false, true && (false))) || false)))))
        break;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
   else
    {
     atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
     for(int _injected_loop_counter = (int(_GLF_ONE(1.0, injectionSwitch.y)) & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > ((0 << _GLF_IDENTITY(int(2), int(2))) | 0)); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (int(_GLF_ZERO(0.0, injectionSwitch.x))) * 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), injectionSwitch, injectionSwitch))) / vec2(1.0, 1.0)).y, ! (_GLF_IDENTITY(! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), injectionSwitch, injectionSwitch))) / vec2(1.0, 1.0)).y), ! (! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), injectionSwitch, injectionSwitch))) / vec2(1.0, 1.0)).y))))))))))
          return;
         subgroupAll(true);
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          return;
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       for(int _injected_loop_counter = _GLF_IDENTITY((0 & -11365), ((0 & -11365)) << 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY((! (false)), ((! (false))) && true) || false)))))
              {
               if(_GLF_DEAD(false))
                continue;
               return;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             return;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                break;
               return;
              }
             if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
              continue;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
              {
               if(_GLF_DEAD(false))
                break;
              }
             else
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter --)
                {
                 return;
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
            }
           do
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)), true && (_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      break;
                     break;
                    }
                  }
                 else
                  {
                   return;
                  }
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               continue;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             return;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)))))));
          }
         if(_GLF_DEAD(false))
          break;
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         return;
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))))
          continue;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(true, bool(bvec2(true, false))) && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
          return;
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(false || (true), (false || (true)) || false)), (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, false, true, true)), (bool(bvec4(true, false, true, true))) && true))))
            {
             return;
            }
           else
            {
             if(_GLF_DEAD(false))
              return;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          continue;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), bool(bvec4(bool(false), false, false, false))))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))), bool(bvec2(bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false)))), true))))))))
      {
       do
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     if(_GLF_DEAD(false))
      return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   return;
  }
 do
  {
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) && true)) || false), _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x < injectionSwitch.y)))), _GLF_IDENTITY(((injectionSwitch.x < injectionSwitch.y)) && true, bool(bvec4(_GLF_IDENTITY(((injectionSwitch.x < injectionSwitch.y)) && true, ! (! (((injectionSwitch.x < injectionSwitch.y)) && true))), false, false, true))))) || false), _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) < injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) && true)) || false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! _GLF_IDENTITY(((_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) && true), (_GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED((198.660 / 5088.5767))), vec2(_GLF_FUZZED(-616.636), (injectionSwitch)[1]), bvec2(false, true))).y), ((injectionSwitch.x < injectionSwitch.y)) && true)) && true)) || false)) && _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false)), _GLF_IDENTITY(bool(bvec4((_GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) && true), (_GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED((198.660 / 5088.5767))), vec2(_GLF_FUZZED(-616.636), (injectionSwitch)[1]), bvec2(false, true))).y), ((injectionSwitch.x < injectionSwitch.y)) && true)) && true)) || false)) && _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false), false || ((_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) && true), (_GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED((198.660 / 5088.5767))), vec2(_GLF_FUZZED(-616.636), (injectionSwitch)[1]), bvec2(false, true))).y), ((injectionSwitch.x < injectionSwitch.y)) && true)) && true)) || false)) && _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false, bool(bvec4((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false, true, true, true))))))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), bool(bvec2(bool(bvec4(((_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0) < injectionSwitch.y)) && true), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED((198.660 / 5088.5767))), vec2(_GLF_FUZZED(-616.636), (injectionSwitch)[1]), bvec2(false, true))).y, ! (! (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED((198.660 / 5088.5767))), vec2(_GLF_FUZZED(-616.636), (injectionSwitch)[1]), bvec2(false, true))).y, min(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED((198.660 / 5088.5767))), vec2(_GLF_FUZZED(-616.636), (injectionSwitch)[1]), bvec2(false, true))).y, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED((198.660 / 5088.5767))), vec2(_GLF_FUZZED(-616.636), (injectionSwitch)[1]), bvec2(false, true))).y)))))), ((injectionSwitch.x < injectionSwitch.y)) && true)) && true)) || false)) && _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false)), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), true))))))))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, 1 * (0))) - (0 << _GLF_IDENTITY(int(7), int(7)))) & (87732))); _injected_loop_counter --)
              {
               return;
              }
            }
          }
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y))))
            return;
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
   do
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(false))
        return;
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, true)), (_GLF_IDENTITY(bool(bvec3(false, false, true)), bool(bvec4(bool(bvec3(false, false, true)), false, true, false)))) || false))));
      }
     if(_GLF_DEAD(false))
      break;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)) && true)))));
  }
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, (true) && true), bool(bvec4(_GLF_IDENTITY(true, (true) && true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)))), _GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), (true) && true)), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true))), (! (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && _GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(true)), ! (! (bool(bool(true)))))), bool(bvec4(true, true, false, true))))))) && _GLF_IDENTITY(true, ! (! (true)))))), true), bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), (true) && true)), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true))), (! (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, true && (true))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (bool(bool(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, true && (true))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true))) && _GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(true)), ! (! (bool(bool(true)))))), bool(bvec4(true, true, false, true))))))) && _GLF_IDENTITY(true, ! (! (true)))))), true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(bvec3(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), (true) && true)), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true))), (! (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && _GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(true)), ! (! (bool(bool(true)))))), bool(bvec4(true, true, false, true))))))) && _GLF_IDENTITY(true, ! (! (true)))))), true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)))))), (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), (true) && true)), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true))), (! (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && _GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(true)), ! (! (bool(bool(true)))))), bool(bvec4(true, true, false, _GLF_IDENTITY(true, bool(bvec2(true, false)))))))))) && _GLF_IDENTITY(true, ! (! (true)))))), true), bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), (true) && true)), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true))), _GLF_IDENTITY((! (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && _GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(true)), ! (! (bool(bool(true)))))), bool(bvec4(true, true, false, true))))))) && _GLF_IDENTITY(true, ! (! (true))), ! (_GLF_IDENTITY(! ((! (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && _GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(true)), ! (! (bool(bool(true)))))), bool(bvec4(true, true, false, true))))))) && _GLF_IDENTITY(true, ! (! (true)))), true && (! ((! (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && _GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(true)), ! (! (bool(bool(true)))))), bool(bvec4(true, true, false, true))))))) && _GLF_IDENTITY(true, ! (! (true))))))))))), true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(bvec3(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), (true) && true)), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true))), (! (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && _GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(true)), ! (! (bool(bool(true)))))), bool(bvec4(true, true, false, true))))))) && _GLF_IDENTITY(true, ! (! (true)))))), true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false))))))) || _GLF_IDENTITY(false, bool(bool(false)))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && _GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), (! (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && _GLF_IDENTITY(true, bool(bvec4(true, true, false, true))))))) && true))), true)), (bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), (true) && true))), (! (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && _GLF_IDENTITY(true, bool(bvec4(true, true, false, true))))))) && true))), true))) || false)), (bool(bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && _GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (true))))), (! (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && _GLF_IDENTITY(true, bool(bvec4(true, true, false, true))))))) && true))), true)))) && true)))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) && true)) || false)))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(237.437, 7784.3889)) : injectionSwitch)).x > injectionSwitch.y))))
        return;
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))), ! (! (bool(! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))))))), ! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(! _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))), (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), (bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))) && true)))) && true)), ((! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))) && true), false, true, true)), _GLF_IDENTITY(true && (bool(bvec4(_GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))), ((! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))) && true), false, true, true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true && (bool(bvec4(_GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))), ((! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))) && true), false, true, true)))))))), ! (! _GLF_IDENTITY((bool(! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))))), bool(bvec2((bool(! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))))), false)))))), (bool(_GLF_IDENTITY(bool(! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3(injectionSwitch, 0.0, 1.0, 1.0, log(1.0), 0.0, 1.0, 1.0)), vec2(0.0, 0.0) + (vec2(mat3(injectionSwitch, 0.0, 1.0, 1.0, log(1.0), 0.0, 1.0, 1.0))))).y)), true))), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))))))), ! (! (bool(! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))))))))) && true))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(! _GLF_IDENTITY(_GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))), ((! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))) || false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))), ((! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))) || false)), false || (! (_GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))), ((! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))) || false))))))), ! (_GLF_IDENTITY(! (bool(! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(! (bool(! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))))), ! (! (! (bool(! (! (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))))))), true)), (bool(bvec2(_GLF_IDENTITY(! (bool(! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))))))), ! (! (! (bool(! (! (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))))))), true))) && true))))), ! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-422.400), _GLF_FUZZED(-4206.5573)), vec2(_GLF_IDENTITY((injectionSwitch)[0], float(vec2(_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) + 0.0), 1.0))), (injectionSwitch)[1]), bvec2(true, true))).y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))), ! (! (bool(! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(vec4(-545.598, -1284.1378, _GLF_IDENTITY(-189.583, clamp(_GLF_IDENTITY(-189.583, max(-189.583, -189.583)), -189.583, -189.583)), 1770.7232).b)), float(injectionSwitch.y), bool(true))))), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))))))), (bool(_GLF_IDENTITY(bool(! (! (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))), true)))))), ! (! (bool(! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), injectionSwitch)).y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(_GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-27.45) : 0.0)), 0.0)))).y)), true))))))))))) && true))))), (_GLF_IDENTITY(_GLF_IDENTITY(! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! ((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))), (! ((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))) && true), bool(bvec4(_GLF_IDENTITY(! ((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))), (! ((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))) && true), false, true, true)))))), true && (_GLF_IDENTITY(! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! ((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))), (! ((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))) && true), bool(bvec4(_GLF_IDENTITY(! ((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))), (! ((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))) && true), false, true, true)))))), false || (_GLF_IDENTITY(! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! ((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))), (! ((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))) && true), bool(bvec4(_GLF_IDENTITY(! ((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))), (! ((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))) && true), false, true, true)))))), bool(bvec3(! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! ((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))), (! ((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))) && true), bool(bvec4(_GLF_IDENTITY(! ((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))), (! ((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))) && true), false, true, true)))))), false, false))))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(! (! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))), ! (! (bool(! (! (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, false, _GLF_IDENTITY(true, true && (true)))), (bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, false, true))) && _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), ! (! (bool(true))))))))), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))))))), ! _GLF_IDENTITY((! (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(! (! (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)), bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true)))))), ! (! _GLF_IDENTITY((bool(! (! (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (_GLF_IDENTITY(! (true), (! (true)) || false)) && true))) ? injectionSwitch.y : _GLF_FUZZED(-5010.6036)))), ! (! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (_GLF_IDENTITY(! (true), (! (true)) || false)) && true))) ? injectionSwitch.y : _GLF_FUZZED(-5010.6036)))), true && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (_GLF_IDENTITY(! (true), (! (true)) || false)) && true))) ? injectionSwitch.y : _GLF_FUZZED(-5010.6036)))))))))), bool(bvec2(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y)), true))))))), false || ((bool(! (! (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (_GLF_IDENTITY(! (true), (! (true)) || false)) && true))) ? injectionSwitch.y : _GLF_FUZZED(-5010.6036)))), ! (! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (_GLF_IDENTITY(! (true), (! (true)) || false)) && true))) ? injectionSwitch.y : _GLF_FUZZED(-5010.6036)))), true && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (_GLF_IDENTITY(! (true), (! (true)) || false)) && true))) ? injectionSwitch.y : _GLF_FUZZED(-5010.6036)))))))))), bool(bvec2(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y)), true))))))))))), ! _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(bool(! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))), ! (! (bool(! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), vec2(0.0, 0.0) + (mat2(1.0) * (injectionSwitch)))).x > injectionSwitch.y)), true)))))))))), bool(bvec4(! (_GLF_IDENTITY(bool(! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(363.236)), float(injectionSwitch.x), bool(true))), injectionSwitch.x)) > injectionSwitch.y)), true)))))), ! (! (bool(! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true)))), false || ((_GLF_IDENTITY(! (_GLF_IDENTITY(bool(! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))), ! (! (bool(! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), vec2(0.0, 0.0) + (mat2(1.0) * (injectionSwitch)))).x > injectionSwitch.y)), true)))))))))), bool(bvec4(! (_GLF_IDENTITY(bool(! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(363.236)), float(injectionSwitch.x), bool(true))), injectionSwitch.x)) > injectionSwitch.y)), true)))))), ! (! (bool(! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true)))))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(bool(! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))), ! (! (bool(! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), vec2(0.0, 0.0) + (mat2(1.0) * (injectionSwitch)))).x > injectionSwitch.y)), true)))))))))), bool(bvec4(! (_GLF_IDENTITY(bool(! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(363.236)), float(injectionSwitch.x), bool(true))), injectionSwitch.x)) > injectionSwitch.y)), true)), (bool(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(363.236)), float(injectionSwitch.x), bool(true))), injectionSwitch.x)) > injectionSwitch.y)), true))) || false))))), ! (! (bool(! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true)))), false || ((_GLF_IDENTITY(! (_GLF_IDENTITY(bool(! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))), ! (! (bool(! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), vec2(0.0, 0.0) + (mat2(1.0) * (injectionSwitch)))).x > injectionSwitch.y)), true)))))))))), bool(bvec4(! (_GLF_IDENTITY(bool(! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(363.236)), float(injectionSwitch.x), bool(true))), injectionSwitch.x)) > injectionSwitch.y)), true)))))), ! (! (bool(! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))))))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true))))))))))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))), ! (! (bool(! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), false)))), true)))))))))), bool(bool(bool(_GLF_IDENTITY(bool(! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))), ! (! (bool(! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), false)))), true)))))))))))))) && true))), true && ((! (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(! (! (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)), bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true)))))), ! (! _GLF_IDENTITY((bool(! (! (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (_GLF_IDENTITY(! (true), (! (true)) || false)) && true))) ? injectionSwitch.y : _GLF_FUZZED(-5010.6036)))), ! (! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (_GLF_IDENTITY(! (true), (! (true)) || false)) && true))) ? injectionSwitch.y : _GLF_FUZZED(-5010.6036)))), true && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (_GLF_IDENTITY(! (true), (! (true)) || false)) && true))) ? injectionSwitch.y : _GLF_FUZZED(-5010.6036)))))))))), bool(bvec2(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y)), true))))))), false || ((bool(! (! (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (_GLF_IDENTITY(! (true), (! (true)) || false)) && true))) ? injectionSwitch.y : _GLF_FUZZED(-5010.6036)))), ! (! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (_GLF_IDENTITY(! (true), (! (true)) || false)) && true))) ? injectionSwitch.y : _GLF_FUZZED(-5010.6036)))), true && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (_GLF_IDENTITY(! (true), (! (true)) || false)) && true))) ? injectionSwitch.y : _GLF_FUZZED(-5010.6036)))))))))), bool(bvec2(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y)), true))))))))))), ! _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(bool(! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))), ! (! (bool(! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), vec2(0.0, 0.0) + (mat2(1.0) * (injectionSwitch)))).x > injectionSwitch.y)), true)))))))))), bool(bvec4(! (_GLF_IDENTITY(bool(! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(363.236)), float(injectionSwitch.x), bool(true))), injectionSwitch.x)) > injectionSwitch.y)), true)))))), ! (! (bool(! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true)))), false || ((_GLF_IDENTITY(! (_GLF_IDENTITY(bool(! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))), ! (! (bool(! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), vec2(0.0, 0.0) + (mat2(1.0) * (injectionSwitch)))).x > injectionSwitch.y)), true)))))))))), bool(bvec4(! (_GLF_IDENTITY(bool(! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(363.236)), float(injectionSwitch.x), bool(true))), injectionSwitch.x)) > injectionSwitch.y)), true)))))), ! (! (bool(! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true)))))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(bool(! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))), ! (! (bool(! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), vec2(0.0, 0.0) + (mat2(1.0) * (injectionSwitch)))).x > injectionSwitch.y)), true)))))))))), bool(bvec4(! (_GLF_IDENTITY(bool(! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(363.236)), float(injectionSwitch.x), bool(true))), injectionSwitch.x)) > injectionSwitch.y)), true)), (bool(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(363.236)), float(injectionSwitch.x), bool(true))), injectionSwitch.x)) > injectionSwitch.y)), true))) || false))))), ! (! (bool(! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true)))), false || ((_GLF_IDENTITY(! (_GLF_IDENTITY(bool(! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))), ! (! (bool(! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), vec2(0.0, 0.0) + (mat2(1.0) * (injectionSwitch)))).x > injectionSwitch.y)), true)))))))))), bool(bvec4(! (_GLF_IDENTITY(bool(! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(363.236)), float(injectionSwitch.x), bool(true))), injectionSwitch.x)) > injectionSwitch.y)), true)))))), ! (! (bool(! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))))))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true))))))))))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))), ! (! (bool(! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), false)))), true)))))))))), bool(bool(bool(_GLF_IDENTITY(bool(! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))), ! (! (bool(! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), false)))), true)))))))))))))) && true)))))))) && true)))))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
          }
         else
          {
           for(int _injected_loop_counter = _GLF_IDENTITY(1, int(ivec3(1, 1, 1))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
              {
               if(_GLF_DEAD(false))
                return;
              }
             else
              {
               return;
               if(_GLF_DEAD(false))
                return;
              }
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             continue;
            }
          }
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         return;
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || false))))))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (false)))), (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (false)))), ! (! (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (false)))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true), _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (false)))), (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (false)))), ! (! (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (false)))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true)), (! (_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (false)))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (false)))), false || (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (false)))))), ! (! (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (false)))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))) && true)), (! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (false)))), (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (false)))), ! (! (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (false)))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (false)))), (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (false)))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (false)))), (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (false))))) || false))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true)), (! (_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (false)))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (false)))), false || (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (false)))))), ! (! (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (false)))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (false)))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && true), false))))))), false || (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (false)))))), ! (! (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (false)))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false)) && true))) && true))) || false))))
          {
           for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), max(_GLF_IDENTITY(int(7), int(7)), _GLF_IDENTITY(int(7), int(7))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), true && (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, (false) && true), true, false)), (bool(bvec3(_GLF_IDENTITY(false, (false) && true), true, false))) || false))), ! (! (! (_GLF_IDENTITY(false, (false) && true)))))), (! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, (false) && true), true, false)), (bool(bvec3(_GLF_IDENTITY(false, (false) && true), true, false))) || false))), bool(_GLF_IDENTITY(bvec3(! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, (false) && true), true, false)), (bool(bvec3(_GLF_IDENTITY(false, (false) && true), true, false))) || false))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec3(bvec3(! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, (false) && true), true, false)), (bool(bvec3(_GLF_IDENTITY(false, (false) && true), true, false))) || false))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), ! (! (! (_GLF_IDENTITY(false, (false) && true))))))) || false), ! (! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), ! (! (! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(false, false)))) && true)))))))))))))))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               return;
              }
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              return;
            }
           return;
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), ! (! (bool(true)))))), bool(bvec2(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), ! (! (bool(true)))))), true)))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))), injectionSwitch, injectionSwitch)).y), ((injectionSwitch.x > injectionSwitch.y)) || false)), ((_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))), injectionSwitch, injectionSwitch)).y), ((injectionSwitch.x > injectionSwitch.y)) || false))) && true))))))
          {
           do
            {
             if(_GLF_DEAD(false))
              continue;
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch.x : _GLF_FUZZED(-864.180)), (true ? (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch.x : _GLF_FUZZED(-864.180)) : _GLF_FUZZED(degrees(9648.0526))))) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(2385.9799)), vec2(_GLF_FUZZED(49.61), (injectionSwitch)[1]), bvec2(false, true))).y, 0.0 + (injectionSwitch.y))))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))
            break;
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                return;
              }
             else
              {
              }
             continue;
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))))))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * _GLF_IDENTITY(mat2(1.0), mat2(1.0) * (mat2(1.0))), mat2(1.0) * (_GLF_IDENTITY((injectionSwitch) * mat2(1.0), min(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), min((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0))), _GLF_IDENTITY((injectionSwitch) * mat2(1.0), vec2(_GLF_IDENTITY(vec4((injectionSwitch) * mat2(1.0), 1.0, 1.0), vec4(mat2(vec4((injectionSwitch) * mat2(1.0), 1.0, 1.0))))))))))), (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * _GLF_IDENTITY(mat2(1.0), mat2(1.0) * (mat2(1.0))), mat2(1.0) * (_GLF_IDENTITY((injectionSwitch) * mat2(1.0), min(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), min((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0))), _GLF_IDENTITY((injectionSwitch) * mat2(1.0), vec2(_GLF_IDENTITY(vec4((injectionSwitch) * mat2(1.0), 1.0, 1.0), vec4(mat2(vec4(_GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(356.485), ((injectionSwitch))[1]), vec2(_GLF_IDENTITY(((injectionSwitch))[0], clamp(_GLF_IDENTITY(((injectionSwitch))[0], (((injectionSwitch))[0]) * 1.0), ((injectionSwitch))[0], _GLF_IDENTITY(((injectionSwitch))[0], clamp(((injectionSwitch))[0], ((injectionSwitch))[0], ((injectionSwitch))[0])))), _GLF_FUZZED(7.0)), bvec2(true, false))) * mat2(1.0), 1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED((vec4(-938.034, -2.1, -36.14, 1.3) * mat4(9.0, -10.52, 3.1, -821.234, 178.321, -0.4, 164.668, -346.071, -370.281, -814.120, -934.102, -7.4, -5.0, 1310.2556, -4.4, 263.452)).a)), float(1.0), bool(true))))))))))))))) + sqrt(vec2(0.0, 0.0))).x > _GLF_IDENTITY(injectionSwitch, log(vec2(1.0, 1.0)) + _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), (false ? _GLF_FUZZED(vec2(-85.71, 1.0)) : (injectionSwitch))), (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), max((injectionSwitch), (injectionSwitch))), max(_GLF_IDENTITY((injectionSwitch), max((injectionSwitch), (injectionSwitch))), _GLF_IDENTITY((injectionSwitch), max((injectionSwitch), (injectionSwitch)))))) + vec2(0.0, 0.0))).y, true && (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * _GLF_IDENTITY(mat2(1.0), mat2(1.0) * (mat2(1.0))), mat2(1.0) * (_GLF_IDENTITY((injectionSwitch) * mat2(1.0), min(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), min((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0))), _GLF_IDENTITY((injectionSwitch) * mat2(1.0), _GLF_IDENTITY(vec2(_GLF_IDENTITY(vec4((injectionSwitch) * mat2(1.0), 1.0, 1.0), _GLF_IDENTITY(vec4(mat2(vec4((injectionSwitch) * mat2(1.0), 1.0, 1.0))), (vec4(mat2(vec4((injectionSwitch) * mat2(1.0), 1.0, 1.0)))) * mat4(1.0)))), (_GLF_IDENTITY(vec2(_GLF_IDENTITY(vec4((injectionSwitch) * mat2(1.0), 1.0, 1.0), vec4(mat2(vec4((injectionSwitch) * mat2(1.0), 1.0, 1.0))))), (true ? vec2(_GLF_IDENTITY(vec4((injectionSwitch) * mat2(1.0), 1.0, 1.0), vec4(mat2(vec4((injectionSwitch) * mat2(1.0), 1.0, 1.0))))) : _GLF_FUZZED(vec2(6.3, -7156.8376))))) / abs(vec2(1.0, 1.0))))))))).x > _GLF_IDENTITY(injectionSwitch, log(vec2(1.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, max(1.0, 1.0))) - 0.0))) + _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), _GLF_IDENTITY((false ? _GLF_FUZZED(vec2(-85.71, 1.0)) : (injectionSwitch)), (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY((false ? _GLF_FUZZED(vec2(-85.71, 1.0)) : (injectionSwitch)), mix(vec2(_GLF_FUZZED(-6.7), _GLF_FUZZED(-2.6)), vec2(((false ? _GLF_FUZZED(vec2(-85.71, 1.0)) : (injectionSwitch)))[0], ((false ? _GLF_FUZZED(vec2(-85.71, 1.0)) : (injectionSwitch)))[1]), bvec2(true, true)))))), (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), max((injectionSwitch), (injectionSwitch))), max(_GLF_IDENTITY((injectionSwitch), _GLF_IDENTITY(max((injectionSwitch), (injectionSwitch)), clamp(max(_GLF_IDENTITY((injectionSwitch), vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) + ((injectionSwitch))), (injectionSwitch)), max((injectionSwitch), (injectionSwitch)), _GLF_IDENTITY(max((injectionSwitch), (injectionSwitch)), clamp(max((injectionSwitch), (injectionSwitch)), max((injectionSwitch), (injectionSwitch)), max((injectionSwitch), (injectionSwitch))))))), _GLF_IDENTITY((injectionSwitch), max((injectionSwitch), (injectionSwitch)))))) + vec2(0.0, 0.0))).y))))))
              {
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)) && true)), true && (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(_GLF_IDENTITY(vec2(injectionSwitch), min(vec2(injectionSwitch), vec2(injectionSwitch))), (_GLF_IDENTITY(vec2(injectionSwitch), _GLF_IDENTITY((vec2(injectionSwitch)), max((_GLF_IDENTITY(vec2(injectionSwitch), (true ? vec2(injectionSwitch) : _GLF_FUZZED(asin(injectionSwitch))))), (vec2(injectionSwitch)))) - vec2(0.0, 0.0))) / vec2(1.0, 1.0))), _GLF_IDENTITY(mat2(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0)))) * (vec2(_GLF_IDENTITY(vec2(injectionSwitch), (_GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch))), (vec2(injectionSwitch)) - vec2(0.0, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, (0.0) * determinant(mat3(1.0, 1.0, 1.0, 0.0, 1.0, length(0.0), 0.0, 0.0, 1.0))), 0.0, 0.0))))))) / vec2(1.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(false ? _GLF_FUZZED(7314.9800) : 1.0, mix(float(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec3(bvec4(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), false)))))), bool(bvec4(! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec3(bvec4(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), false)))))), false, true, true))))) ? _GLF_FUZZED(7314.9800) : 1.0), float(_GLF_FUZZED(-661.769)), bool(false))))))))), (mat2(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0)))) * (vec2(_GLF_IDENTITY(vec2(injectionSwitch), (_GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch))), (vec2(injectionSwitch)) - vec2(0.0, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, (0.0) * determinant(mat3(1.0, 1.0, 1.0, 0.0, 1.0, length(0.0), 0.0, 0.0, 1.0))), 0.0, 0.0))))))) / vec2(1.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(false ? _GLF_FUZZED(7314.9800) : 1.0, mix(float(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec3(bvec4(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), false)))))), bool(bvec4(! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec3(bvec4(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), false)))))), false, true, true))))) ? _GLF_FUZZED(7314.9800) : 1.0), float(_GLF_FUZZED(-661.769)), bool(false)))))))))) * mat2(1.0)))).x > injectionSwitch.y), true && ((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(_GLF_IDENTITY(vec2(injectionSwitch), min(vec2(injectionSwitch), vec2(injectionSwitch))), (_GLF_IDENTITY(_GLF_IDENTITY(vec2(injectionSwitch), mix(vec2((vec2(injectionSwitch))[0], _GLF_FUZZED(-373.931)), vec2(_GLF_FUZZED((977.072 * 0.8)), (vec2(injectionSwitch))[1]), bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY((vec2(injectionSwitch)), max(_GLF_IDENTITY((vec2(_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mix(vec2(_GLF_FUZZED(-1.8), _GLF_FUZZED(823.489)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true)), max(_GLF_IDENTITY(mix(vec2(_GLF_FUZZED(-1.8), _GLF_FUZZED(823.489)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true)), (mix(vec2(_GLF_FUZZED(-1.8), _GLF_FUZZED(823.489)), vec2((injectionSwitch)[0], (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)))[1]), bvec2(true, true))) * vec2(1.0, 1.0)), _GLF_IDENTITY(mix(vec2(_GLF_FUZZED(-1.8), _GLF_FUZZED(823.489)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true)), min(mix(vec2(_GLF_FUZZED(-1.8), _GLF_FUZZED(823.489)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true)), mix(vec2(_GLF_FUZZED(-1.8), _GLF_FUZZED(823.489)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))))))), 0.0, sqrt(0.0), 0.0, 0.0, 1.0, 1.0))))), ((vec2(_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mix(vec2(_GLF_FUZZED(-1.8), _GLF_FUZZED(823.489)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true)), max(_GLF_IDENTITY(mix(vec2(_GLF_FUZZED(-1.8), _GLF_FUZZED(823.489)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true)), (mix(vec2(_GLF_FUZZED(-1.8), _GLF_FUZZED(823.489)), vec2((injectionSwitch)[0], (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)))[1]), bvec2(true, true))) * vec2(1.0, 1.0)), _GLF_IDENTITY(mix(vec2(_GLF_FUZZED(-1.8), _GLF_FUZZED(823.489)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true)), min(mix(vec2(_GLF_FUZZED(-1.8), _GLF_FUZZED(823.489)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true)), mix(vec2(_GLF_FUZZED(-1.8), _GLF_FUZZED(823.489)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))))))), 0.0, sqrt(0.0), 0.0, 0.0, 1.0, 1.0)))))) - vec2(0.0, 0.0)), _GLF_IDENTITY((vec2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))), clamp((vec2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))), _GLF_IDENTITY((vec2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))), vec2(mat3x4((vec2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))), 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, determinant(mat4(1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), determinant(mat4(0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)), 1.0))), (vec2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))))))) - vec2(0.0, 0.0))) / vec2(1.0, 1.0))), mat2(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(2.3)), float(1.0), bool(true)))) * (vec2(_GLF_IDENTITY(vec2(injectionSwitch), (_GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3(injectionSwitch, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0), (mat3(injectionSwitch, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0)) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)))), mat2(1.0) * (injectionSwitch)), injectionSwitch))), (vec2(injectionSwitch)) - vec2(0.0, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))))))) / _GLF_IDENTITY(vec2(1.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(7314.9800) : 1.0))), clamp(_GLF_IDENTITY(vec2(1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(tan(967.870)) : 1.0)), (false ? _GLF_IDENTITY(_GLF_FUZZED(7314.9800), mix(float(_GLF_FUZZED(-5.2)), float(_GLF_IDENTITY(_GLF_FUZZED(7314.9800), max(_GLF_FUZZED(7314.9800), _GLF_FUZZED(7314.9800)))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) : _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED((8.3 - (false ? -44.09 : -3859.3683)))), bool(false)))))), (vec2(1.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(7314.9800) : 1.0)))) - vec2(0.0, 0.0)), vec2(1.0, _GLF_IDENTITY(1.0, (false ? _GLF_IDENTITY(_GLF_FUZZED(7314.9800), min(_GLF_FUZZED(7314.9800), _GLF_FUZZED(7314.9800))) : 1.0))), vec2(1.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(7314.9800) : 1.0)))))))))).x > injectionSwitch.y))))))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                 if(_GLF_DEAD(false))
                  break;
                 do
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, true))), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)))))
                    break;
                   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-131.414)), float(injectionSwitch.x), bool(true))), injectionSwitch.x)) : _GLF_FUZZED(25.99))) > injectionSwitch.y))))
                    return;
                   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                      {
                       return;
                      }
                     else
                      {
                      }
                    }
                   return;
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))));
                }
               if(_GLF_DEAD(false))
                continue;
               return;
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _GLF_IDENTITY(_injected_loop_counter --, (_GLF_IDENTITY(_injected_loop_counter --, 1 * (_injected_loop_counter --))) ^ 0))
                {
                 if(_GLF_DEAD(false))
                  return;
                }
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                continue;
              }
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), (true && (false)) && true))), true && (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), (true && (false)) && true))))))
              break;
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _GLF_IDENTITY(_injected_loop_counter ++, 0 | (_injected_loop_counter ++)))
              {
               return;
              }
            }
          }
        }
       else
        {
        }
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)).x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     do
      {
       return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        break;
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true)))))))
        continue;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true, true)), bool(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))), true))))))))))), true, true)), (bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true, true))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true)))))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        continue;
       return;
       if(_GLF_DEAD(false))
        continue;
      }
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
    }
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
  }
}
