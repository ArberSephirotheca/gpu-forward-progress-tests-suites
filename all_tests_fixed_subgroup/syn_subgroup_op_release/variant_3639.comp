#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_14 {
 mat3 _f0;
 uvec4 _f1;
 mat2x4 _f2;
 bvec2 _f3;
 uint _f4;
} ;

struct _GLF_struct_13 {
 ivec3 _f0;
 uvec4 _f1;
 float _f2;
 mat3x2 _f3;
 vec3 _f4;
 mat3x2 _f5;
} ;

struct _GLF_struct_15 {
 _GLF_struct_13 _f0;
 _GLF_struct_14 _f1;
} ;

struct _GLF_struct_16 {
 _GLF_struct_15 _f0;
 uint subgroup_local_id;
 mat4x2 _f1;
} ;

struct _GLF_struct_10 {
 uint _f0;
 float _f1;
 bool _f2;
 mat3 _f3;
 bvec2 _f4;
 bvec3 _f5;
 vec3 _f6;
} ;

struct _GLF_struct_9 {
 float _f0;
 bvec3 _f1;
 int _f2;
 uint _f3;
} ;

struct _GLF_struct_11 {
 vec3 _f0;
 _GLF_struct_9 _f1;
 bvec2 _f2;
 _GLF_struct_10 _f3;
 mat2x3 _f4;
} ;

struct _GLF_struct_7 {
 ivec3 _f0;
 uvec4 _f1;
 vec2 _f2;
 vec2 _f3;
} ;

struct _GLF_struct_6 {
 mat3x4 _f0;
} ;

struct _GLF_struct_8 {
 bvec3 _f0;
 uvec2 _f1;
 uint _f2;
 _GLF_struct_6 _f3;
 _GLF_struct_7 _f4;
 ivec3 _f5;
} ;

struct _GLF_struct_4 {
 vec4 _f0;
} ;

struct _GLF_struct_5 {
 mat2 _f0;
 mat3x2 _f1;
 _GLF_struct_4 _f2;
 int _f3;
} ;

struct _GLF_struct_2 {
 uint _f0;
 ivec3 _f1;
 uvec4 _f2;
 vec2 _f3;
 uvec2 _f4;
 uvec4 _f5;
 bool _f6;
} ;

struct _GLF_struct_1 {
 mat3x4 _f0;
 mat2x4 _f1;
 bvec3 _f2;
 mat3 _f3;
 float _f4;
 uvec2 _f5;
} ;

struct _GLF_struct_0 {
 uvec4 _f0;
 vec3 _f1;
 uvec3 _f2;
 mat3x2 _f3;
 mat3x2 _f4;
 mat2 _f5;
 mat3 _f6;
} ;

struct _GLF_struct_3 {
 mat2x3 _f0;
 ivec2 _f1;
 bvec4 _f2;
 mat3x2 _f3;
 _GLF_struct_0 _f4;
 _GLF_struct_1 _f5;
 _GLF_struct_2 _f6;
} ;

struct _GLF_struct_12 {
 _GLF_struct_3 _f0;
 uint workgroup_size;
 mat4x2 _f1;
 _GLF_struct_5 _f2;
 _GLF_struct_8 _f3;
 _GLF_struct_11 _f4;
 uvec2 _f5;
 bvec4 _f6;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec2(bvec2(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))), true && (bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(1.4))) : _GLF_FUZZED(-333.231))))) > injectionSwitch.y)), false), bvec2(bvec2(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), ! (! (bool(bvec4(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), ! (! (bool(bvec4(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), ! (! (bool(bvec4(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))), bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), ! (! (bool(bvec4(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))), true, true, false)))))))))))))))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     return;
     if(_GLF_DEAD(false))
      return;
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 uint subgroup_id = gl_SubgroupID;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = (_GLF_IDENTITY(0 | (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, (_GLF_IDENTITY(7, _GLF_IDENTITY((7) - 0, ((7) - 0) | ((7) - 0)))) ^ 0)), int(7))), clamp(_GLF_IDENTITY(0 | (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, (_GLF_IDENTITY(7, (7) - 0)) ^ 0)), int(7))), 1 * (_GLF_IDENTITY(0, (0) / ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), min(int(1), int(1)))))) | (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, (_GLF_IDENTITY(7, (7) - 0)) ^ 0)), int(7))))), 0 | (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, (_GLF_IDENTITY(7, (7) - 0)) ^ 0)), int(7))), 0 | (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(7, (_GLF_IDENTITY(7, (7) - 0)) ^ 0), 0 ^ (_GLF_IDENTITY(7, (_GLF_IDENTITY(7, (7) - 0)) ^ 0)))), int(7)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         return;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
        return;
      }
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))))
  return;
uint subgroup_size = 16;
 _GLF_struct_16 _GLF_struct_replacement_16 = _GLF_struct_16(_GLF_struct_15(_GLF_struct_13(ivec3(1), uvec4(1u), 1.0, mat3x2(1.0), vec3(1.0), mat3x2(1.0)), _GLF_struct_14(mat3(1.0), uvec4(1u), mat2x4(1.0), bvec2(_GLF_IDENTITY(true, (true) || false)), 1u)), gl_SubgroupInvocationID, mat4x2(1.0));
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
  }
 uint num_workgroup = _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(0u, 0u, 0u) | (gl_NumWorkGroups))), min(~ (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(0u, 0u, 0u) | (gl_NumWorkGroups))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(uvec3(uvec4(gl_NumWorkGroups, 0u)), (uvec3(uvec4(gl_NumWorkGroups, 0u))) << uvec3(0u, 0u, 0u))), uvec3(0u, 0u, _GLF_IDENTITY(0u, max(0u, _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, 0u | (0u))) | 0u)))) | (gl_NumWorkGroups)), (uvec3(1u, 1u, 1u) ^ uvec3(1u, 1u, 1u)) | (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(0u, 0u, 0u) | (gl_NumWorkGroups))))))))), uvec3(_GLF_IDENTITY(gl_NumWorkGroups[0], (gl_NumWorkGroups[0]) + uint(_GLF_ZERO(_GLF_IDENTITY(0.0, min(0.0, 0.0)), injectionSwitch.x))), gl_NumWorkGroups[1], _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (false ? _GLF_FUZZED(uvec3(147861u, 101221u, 182041u)) : gl_NumWorkGroups)), min(gl_NumWorkGroups, gl_NumWorkGroups)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (false ? _GLF_FUZZED(uvec3(147861u, 101221u, 182041u)) : gl_NumWorkGroups)), min(gl_NumWorkGroups, gl_NumWorkGroups)), (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (false ? _GLF_FUZZED(uvec3(147861u, 101221u, 182041u)) : gl_NumWorkGroups)), min(gl_NumWorkGroups, gl_NumWorkGroups))) << uvec3(0u, 0u, 0u))) << uvec3(0u, 0u, 0u))[2], (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (false ? _GLF_FUZZED(uvec3(147861u, 101221u, 182041u)) : _GLF_IDENTITY(gl_NumWorkGroups, (true ? _GLF_IDENTITY(gl_NumWorkGroups, (true ? gl_NumWorkGroups : _GLF_FUZZED(uvec3(179356u, 49459u, 20254u)))) : _GLF_FUZZED(uvec3(29435u, 7441u, 12758u)))))), min(gl_NumWorkGroups, gl_NumWorkGroups))[2]) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (false ? _GLF_FUZZED(uvec3(147861u, 101221u, 182041u)) : gl_NumWorkGroups)), min(gl_NumWorkGroups, gl_NumWorkGroups))[2], (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (false ? _GLF_FUZZED(uvec3(147861u, 101221u, 182041u)) : gl_NumWorkGroups)), min(gl_NumWorkGroups, gl_NumWorkGroups))[2]) * 1u))))).x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
    {
     return;
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 _GLF_struct_12 _GLF_struct_replacement_12 = _GLF_struct_12(_GLF_struct_3(mat2x3(1.0), _GLF_IDENTITY(ivec2(1), ivec2(ivec2(ivec2(1)))), bvec4(true), mat3x2(_GLF_IDENTITY(1.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-77.37) : 1.0))), _GLF_struct_0(uvec4(1u), vec3(_GLF_IDENTITY(1.0, (1.0) - 0.0)), uvec3(1u), mat3x2(1.0), mat3x2(1.0), mat2(_GLF_IDENTITY(1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))) * (_GLF_IDENTITY(1.0, min(1.0, 1.0))))), mat3(1.0)), _GLF_struct_1(mat3x4(1.0), mat2x4(1.0), bvec3(true), mat3(1.0), 1.0, _GLF_IDENTITY(uvec2(1u), clamp(uvec2(1u), uvec2(1u), uvec2(1u)))), _GLF_struct_2(1u, ivec3(1), _GLF_IDENTITY(uvec4(1u), clamp(uvec4(1u), _GLF_IDENTITY(_GLF_IDENTITY(uvec4(1u), (uvec4(1u, 1u, 1u, 1u) ^ uvec4(0u, 0u, 0u, 0u)) * (_GLF_IDENTITY(uvec4(1u), (uvec4(1u)) >> uvec4(0u, 0u, 0u, 0u)))), uvec4(0u, 0u, 0u, 0u) ^ (uvec4(1u))), uvec4(1u))), vec2(1.0), uvec2(1u), uvec4(1u), true)), gl_WorkGroupSize.x, mat4x2(1.0), _GLF_struct_5(mat2(1.0), mat3x2(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-112.866)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), _GLF_struct_4(vec4(1.0)), 1), _GLF_struct_8(_GLF_IDENTITY(bvec3(true), _GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), ! (! (! (_GLF_IDENTITY(true, bool(bvec2(true, true))))))), true))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), ! (! (! (_GLF_IDENTITY(true, bool(bvec2(true, true))))))), true))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), ! (! (! (_GLF_IDENTITY(true, bool(bvec2(true, true))))))), true))), false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))))), false)), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), ! (! (! (_GLF_IDENTITY(true, bool(bvec2(true, true))))))), true))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), ! (! (! (_GLF_IDENTITY(true, bool(bvec2(true, true))))))), true))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), ! (! (! (_GLF_IDENTITY(true, bool(bvec2(true, true))))))), true))), false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))))), false)), bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), ! (! (! (_GLF_IDENTITY(true, bool(bvec2(true, true))))))), true))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), ! (! (! (_GLF_IDENTITY(true, bool(bvec2(true, true))))))), true))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), ! (! (! (_GLF_IDENTITY(true, bool(bvec2(true, true))))))), true))), false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))))), false))))))), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), ! (! (! (_GLF_IDENTITY(true, bool(bvec2(true, true))))))), true))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), ! (! (! (_GLF_IDENTITY(true, bool(bvec2(true, true))))))), true))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), ! (! (! (_GLF_IDENTITY(true, bool(bvec2(true, true))))))), true))), false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))))), false)), bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), ! (! (! (_GLF_IDENTITY(true, bool(bvec2(true, true))))))), true))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), ! (! (! (_GLF_IDENTITY(true, bool(bvec2(true, true))))))), true))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), ! (! (! (_GLF_IDENTITY(true, bool(bvec2(true, true))))))), true))), false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))))), false))))))), bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), ! (! (! (_GLF_IDENTITY(true, bool(bvec2(true, true))))))), true))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), ! (! (! (_GLF_IDENTITY(true, bool(bvec2(true, true))))))), true))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), ! (! (! (_GLF_IDENTITY(true, bool(bvec2(true, true))))))), true))), false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))))), false)), bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), ! (! (! (_GLF_IDENTITY(true, bool(bvec2(true, true))))))), true))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), ! (! (! (_GLF_IDENTITY(true, bool(bvec2(true, true))))))), true))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), ! (! (! (_GLF_IDENTITY(true, bool(bvec2(true, true))))))), true))), false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))))), false))))))), true))))))), bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), ! (! (! (_GLF_IDENTITY(true, bool(bvec2(true, true))))))), true))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), ! (! (! (_GLF_IDENTITY(true, bool(bvec2(true, true))))))), true))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), ! (! (! (_GLF_IDENTITY(true, bool(bvec2(true, true))))))), true))), false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))))), false)), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), ! (! (! (_GLF_IDENTITY(true, bool(bvec2(true, true))))))), true))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), ! (! (! (_GLF_IDENTITY(true, bool(bvec2(true, true))))))), true))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), ! (! (! (_GLF_IDENTITY(true, bool(bvec2(true, true))))))), true))), false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))))), false)), bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), ! (! (! (_GLF_IDENTITY(true, bool(bvec2(true, true))))))), true))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), ! (! (! (_GLF_IDENTITY(true, bool(bvec2(true, true))))))), true))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), ! (! (! (_GLF_IDENTITY(true, bool(bvec2(true, true))))))), true))), false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))))), false))))))), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), ! (! (! (_GLF_IDENTITY(true, bool(bvec2(true, true))))))), true))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), ! (! (! (_GLF_IDENTITY(true, bool(bvec2(true, true))))))), true))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), ! (! (! (_GLF_IDENTITY(true, bool(bvec2(true, true))))))), true))), false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))))), false)), bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), ! (! (! (_GLF_IDENTITY(true, bool(bvec2(true, true))))))), true))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), ! (! (! (_GLF_IDENTITY(true, bool(bvec2(true, true))))))), true))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), ! (! (! (_GLF_IDENTITY(true, bool(bvec2(true, true))))))), true))), false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))))), false))))))), bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), ! (! (! (_GLF_IDENTITY(true, bool(bvec2(true, true))))))), true))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), ! (! (! (_GLF_IDENTITY(true, bool(bvec2(true, true))))))), true))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), ! (! (! (_GLF_IDENTITY(true, bool(bvec2(true, true))))))), true))), false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))))), false)), bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), ! (! (! (_GLF_IDENTITY(true, bool(bvec2(true, true))))))), true))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), ! (! (! (_GLF_IDENTITY(true, bool(bvec2(true, true))))))), true))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), ! (! (! (_GLF_IDENTITY(true, bool(bvec2(true, true))))))), true))), false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))))), false))))))), true))))))), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), ! (! (! (_GLF_IDENTITY(true, bool(bvec2(true, true))))))), true))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), ! (! (! (_GLF_IDENTITY(true, bool(bvec2(true, true))))))), true))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), ! (! (! (_GLF_IDENTITY(true, bool(bvec2(true, true))))))), true))), false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))))), false)), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), ! (! (! (_GLF_IDENTITY(true, bool(bvec2(true, true))))))), true))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), ! (! (! (_GLF_IDENTITY(true, bool(bvec2(true, true))))))), true))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), ! (! (! (_GLF_IDENTITY(true, bool(bvec2(true, true))))))), true))), false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))))), false)), bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), ! (! (! (_GLF_IDENTITY(true, bool(bvec2(true, true))))))), true))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), ! (! (! (_GLF_IDENTITY(true, bool(bvec2(true, true))))))), true))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), ! (! (! (_GLF_IDENTITY(true, bool(bvec2(true, true))))))), true))), false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))))), false))))))), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), ! (! (! (_GLF_IDENTITY(true, bool(bvec2(true, true))))))), true))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), ! (! (! (_GLF_IDENTITY(true, bool(bvec2(true, true))))))), true))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), ! (! (! (_GLF_IDENTITY(true, bool(bvec2(true, true))))))), true))), false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))))), false)), bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), ! (! (! (_GLF_IDENTITY(true, bool(bvec2(true, true))))))), true))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), ! (! (! (_GLF_IDENTITY(true, bool(bvec2(true, true))))))), true))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), ! (! (! (_GLF_IDENTITY(true, bool(bvec2(true, true))))))), true))), false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))))), false))))))), bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), ! (! (! (_GLF_IDENTITY(true, bool(bvec2(true, true))))))), true))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), ! (! (! (_GLF_IDENTITY(true, bool(bvec2(true, true))))))), true))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), ! (! (! (_GLF_IDENTITY(true, bool(bvec2(true, true))))))), true))), false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))))), false)), bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), ! (! (! (_GLF_IDENTITY(true, bool(bvec2(true, true))))))), true))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), ! (! (! (_GLF_IDENTITY(true, bool(bvec2(true, true))))))), true))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), ! (! (! (_GLF_IDENTITY(true, bool(bvec2(true, true))))))), true))), false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))))), false))))))), true)))))))))), true)))), uvec2(1u), 1u, _GLF_struct_6(mat3x4(1.0)), _GLF_struct_7(ivec3(1), uvec4(1u), vec2(1.0), vec2(1.0)), ivec3(1)), _GLF_struct_11(vec3(1.0), _GLF_struct_9(1.0, bvec3(true), 1, 1u), bvec2(true), _GLF_struct_10(1u, 1.0, _GLF_IDENTITY(true, true && (true)), mat3(1.0), bvec2(true), bvec3(true), _GLF_IDENTITY(vec3(1.0), clamp(vec3(1.0), vec3(1.0), vec3(1.0)))), mat2x3(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(3.5) : _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))), float(mat4x3(1.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0, 1.0)))) * 1.0))), uvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1u, max(_GLF_IDENTITY(1u, (1u) + 0u), 1u)), ~ (~ (1u))), max(_GLF_IDENTITY(_GLF_IDENTITY(1u, max(_GLF_IDENTITY(1u, (1u) + 0u), 1u)), ~ (~ (1u))), _GLF_IDENTITY(_GLF_IDENTITY(1u, max(_GLF_IDENTITY(1u, (1u) + 0u), 1u)), ~ (~ (1u)))))), bvec4(true));
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec4(bvec3(false, true, true), false)))), (bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec4(bvec3(false, true, true), false))))) && true)), (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         return;
        }
       if(_GLF_DEAD(false))
        return;
      }
     return;
    }
  }
 else
  {
  }
 uint workgroup_base = _GLF_struct_replacement_12.workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) || false))), (_GLF_DEAD(false)) && true)), ((_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_DEAD(false)) && true, false || ((_GLF_DEAD(false)) && true))))) || false)))) && true))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  barrier();
 uint virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, clamp(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + subgroup_id * subgroup_size) >> 0u), _GLF_IDENTITY(workgroup_base, (false ? _GLF_FUZZED(subgroup_id) : workgroup_base)) + subgroup_id * subgroup_size, workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) ^ (0u | 0u)))) + _GLF_struct_replacement_16.subgroup_local_id, (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, uint(uint(subgroup_size))) + _GLF_struct_replacement_16.subgroup_local_id) | 0u);
 uint next_virtual_gid = workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, 0u ^ (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)))) + ((_GLF_struct_replacement_16.subgroup_local_id + 1) % subgroup_size);
 buf[virtual_gid] = 1;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-40.65)), vec2(_GLF_FUZZED(-56.85), (injectionSwitch)[1]), bvec2(false, true))).x > injectionSwitch.y))))
    return;
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
      return;
     barrier();
    }
  }
 if(_GLF_struct_replacement_16.subgroup_local_id + 1 < subgroup_size)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (0 | 1)); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (false)))))
        {
         if(_GLF_DEAD(false))
          break;
         barrier();
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
      }
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) << 0))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           atomicStore(buf[next_virtual_gid], uint(2), 4, 64, _GLF_IDENTITY(4, 0 ^ (4)));
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)), (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          break;
        }
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        continue;
      }
    }
   subgroupAll(false);
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter ++)
      {
       barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        return;
       if(_GLF_DEAD(false))
        continue;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 else
  {
   atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, max(_GLF_IDENTITY(next_virtual_gid, clamp(next_virtual_gid, next_virtual_gid, next_virtual_gid)), _GLF_IDENTITY(_GLF_IDENTITY(next_virtual_gid, ~ (~ (_GLF_IDENTITY(next_virtual_gid, ~ (~ (next_virtual_gid)))))), min(_GLF_IDENTITY(next_virtual_gid, ~ (~ (_GLF_IDENTITY(next_virtual_gid, ~ (~ (next_virtual_gid)))))), _GLF_IDENTITY(_GLF_IDENTITY(next_virtual_gid, ~ (~ (_GLF_IDENTITY(next_virtual_gid, ~ (~ (next_virtual_gid)))))), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(next_virtual_gid, ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(next_virtual_gid, ~ (~ (next_virtual_gid)))), (_GLF_IDENTITY((_GLF_IDENTITY(next_virtual_gid, ~ (~ (next_virtual_gid)))), ((_GLF_IDENTITY(next_virtual_gid, ~ (~ (next_virtual_gid))))) | ((_GLF_IDENTITY(next_virtual_gid, ~ (~ (next_virtual_gid))))))) / _GLF_IDENTITY(1u, uint(uint(1u)))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(next_virtual_gid, ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(next_virtual_gid, ~ (~ (next_virtual_gid)))), (_GLF_IDENTITY((_GLF_IDENTITY(next_virtual_gid, ~ (~ (next_virtual_gid)))), ((_GLF_IDENTITY(next_virtual_gid, ~ (~ (next_virtual_gid))))) | ((_GLF_IDENTITY(next_virtual_gid, ~ (~ (next_virtual_gid))))))) / _GLF_IDENTITY(1u, uint(uint(1u)))))), (_GLF_IDENTITY(next_virtual_gid, ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(next_virtual_gid, ~ (~ (next_virtual_gid)))), (_GLF_IDENTITY((_GLF_IDENTITY(next_virtual_gid, ~ (~ (next_virtual_gid)))), ((_GLF_IDENTITY(next_virtual_gid, ~ (~ (next_virtual_gid))))) | ((_GLF_IDENTITY(next_virtual_gid, ~ (~ (next_virtual_gid))))))) / _GLF_IDENTITY(1u, uint(uint(1u))))))) << 0u), _GLF_IDENTITY(next_virtual_gid, ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(next_virtual_gid, ~ (~ (next_virtual_gid)))), (_GLF_IDENTITY((_GLF_IDENTITY(next_virtual_gid, ~ (~ (next_virtual_gid)))), ((_GLF_IDENTITY(next_virtual_gid, ~ (~ (next_virtual_gid))))) | ((_GLF_IDENTITY(next_virtual_gid, ~ (~ (next_virtual_gid))))))) / _GLF_IDENTITY(1u, uint(uint(1u)))))), _GLF_IDENTITY(next_virtual_gid, ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(next_virtual_gid, ~ (~ (next_virtual_gid)))), (_GLF_IDENTITY((_GLF_IDENTITY(next_virtual_gid, ~ (~ (next_virtual_gid)))), ((_GLF_IDENTITY(next_virtual_gid, ~ (~ (next_virtual_gid))))) | ((_GLF_IDENTITY(next_virtual_gid, ~ (~ (next_virtual_gid))))))) / _GLF_IDENTITY(1u, uint(uint(1u))))))))))))))], uint(2), _GLF_IDENTITY(4, (_GLF_IDENTITY(4, _GLF_IDENTITY((4), ((4)) - 0) | (4))) - _GLF_IDENTITY(0, (0) >> 0)), 64, 4);
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       do
        {
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y))))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
    {
     subgroupAll(true);
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, abs(_GLF_IDENTITY(vec2(1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0))), vec2(1.0, 1.0) * (vec2(1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)))))) * (injectionSwitch)).y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
}
