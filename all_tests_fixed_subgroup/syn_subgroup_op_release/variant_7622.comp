#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_27 {
 int _f0;
} ;

struct _GLF_struct_26 {
 uvec3 _f0;
 mat3x2 _f1;
} ;

struct _GLF_struct_28 {
 _GLF_struct_26 _f0;
 _GLF_struct_27 _f1;
} ;

struct _GLF_struct_24 {
 mat3 _f0;
} ;

struct _GLF_struct_23 {
 mat4 _f0;
 mat3x2 _f1;
 uint _f2;
} ;

struct _GLF_struct_22 {
 vec3 _f0;
} ;

struct _GLF_struct_21 {
 mat3x2 _f0;
 uint _f1;
 bvec2 _f2;
 vec3 _f3;
 mat4 _f4;
 vec4 _f5;
} ;

struct _GLF_struct_25 {
 _GLF_struct_21 _f0;
 mat4x2 _f1;
 _GLF_struct_22 _f2;
 _GLF_struct_23 _f3;
 bool _f4;
 ivec3 _f5;
 _GLF_struct_24 _f6;
} ;

struct _GLF_struct_20 {
 ivec4 _f0;
 mat3x2 _f1;
} ;

struct _GLF_struct_18 {
 vec3 _f0;
 bvec3 _f1;
 vec2 _f2;
} ;

struct _GLF_struct_17 {
 bvec3 _f0;
 mat4x2 _f1;
 vec4 _f2;
 mat4 _f3;
 uvec2 _f4;
 ivec4 _f5;
 mat2 _f6;
} ;

struct _GLF_struct_16 {
 mat3x2 _f0;
 uvec2 _f1;
 mat4x2 _f2;
 mat2x3 _f3;
 bvec2 _f4;
} ;

struct _GLF_struct_15 {
 mat4x2 _f0;
 vec4 _f1;
 vec3 _f2;
 mat2x4 _f3;
 vec4 _f4;
} ;

struct _GLF_struct_14 {
 mat3 _f0;
 vec3 _f1;
 uvec2 _f2;
 mat4 _f3;
 mat3 _f4;
 int _f5;
 vec2 _f6;
} ;

struct _GLF_struct_19 {
 vec4 _f0;
 _GLF_struct_14 _f1;
 _GLF_struct_15 _f2;
 _GLF_struct_16 _f3;
 _GLF_struct_17 _f4;
 _GLF_struct_18 _f5;
 mat4 _f6;
} ;

struct _GLF_struct_12 {
 bvec3 _f0;
 bvec4 _f1;
 mat2 _f2;
 bool _f3;
 mat4x3 _f4;
} ;

struct _GLF_struct_11 {
 bool _f0;
 uvec4 _f1;
 bvec3 _f2;
 vec3 _f3;
 mat4 _f4;
 uvec3 _f5;
 bvec2 _f6;
} ;

struct _GLF_struct_13 {
 uvec3 _f0;
 _GLF_struct_11 _f1;
 mat3 _f2;
 _GLF_struct_12 _f3;
 mat4x2 _f4;
} ;

struct _GLF_struct_29 {
 uint virtual_gid;
 _GLF_struct_13 _f0;
 uvec4 _f1;
 _GLF_struct_19 _f2;
 _GLF_struct_20 _f3;
 _GLF_struct_25 _f4;
 _GLF_struct_28 _f5;
} ;

struct _GLF_struct_10 {
 uint workgroup_size;
 mat3x2 _f0;
} ;

struct _GLF_struct_9 {
 mat4x3 _f0;
 uint subgroup_size;
} ;

struct _GLF_struct_6 {
 mat3 _f0;
} ;

struct _GLF_struct_5 {
 mat4x3 _f0;
 bvec4 _f1;
} ;

struct _GLF_struct_4 {
 ivec4 _f0;
 vec4 _f1;
 mat2x4 _f2;
 vec3 _f3;
 mat2x3 _f4;
 mat4x2 _f5;
} ;

struct _GLF_struct_7 {
 bvec2 _f0;
 _GLF_struct_4 _f1;
 mat3x2 _f2;
 _GLF_struct_5 _f3;
 _GLF_struct_6 _f4;
 bvec2 _f5;
 uvec4 _f6;
} ;

struct _GLF_struct_2 {
 mat4x2 _f0;
} ;

struct _GLF_struct_3 {
 ivec2 _f0;
 mat3x2 _f1;
 _GLF_struct_2 _f2;
} ;

struct _GLF_struct_0 {
 mat2x3 _f0;
 mat4x3 _f1;
 bool _f2;
 mat2x4 _f3;
} ;

struct _GLF_struct_1 {
 uvec2 _f0;
 _GLF_struct_0 _f1;
 uint _f2;
} ;

struct _GLF_struct_8 {
 _GLF_struct_1 _f0;
 uint _f1;
 ivec2 _f2;
 uint next_virtual_gid;
 uvec2 _f3;
 _GLF_struct_3 _f4;
 _GLF_struct_7 _f5;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  barrier();
 _GLF_struct_9 _GLF_struct_replacement_9 = _GLF_struct_9(mat4x3(1.0), gl_SubgroupSize);
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false)))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 do
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), true && (_GLF_WRAPPED_IF_FALSE(false))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) || false)))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)) : _GLF_FUZZED(min(vec2(4305.7578, -9.0), 0.6)))).x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, float(mat4x2(injectionSwitch.y, 1.0, 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, mix(_GLF_IDENTITY(float(_GLF_FUZZED(735.352)), 1.0 * (float(_GLF_FUZZED(735.352)))), float(_GLF_IDENTITY(1.0, (1.0) - 0.0)), bool(true))), 1.0))), max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, float(mat4x2(injectionSwitch.y, 1.0, 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(735.352)), float(_GLF_IDENTITY(1.0, (1.0) - 0.0)), bool(true))), 1.0))), clamp(_GLF_IDENTITY(injectionSwitch.y, float(mat4x2(injectionSwitch.y, 1.0, 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(735.352)), float(_GLF_IDENTITY(1.0, (1.0) - 0.0)), bool(true))), 1.0))), _GLF_IDENTITY(injectionSwitch.y, float(mat4x2(injectionSwitch.y, 1.0, 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(735.352)), float(_GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0), (true ? (1.0) : _GLF_FUZZED(abs(5138.8658)))) - 0.0)), bool(true))), 1.0))), _GLF_IDENTITY(injectionSwitch.y, float(mat4x2(injectionSwitch.y, 1.0, 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(735.352)), float(_GLF_IDENTITY(1.0, (1.0) - 0.0)), bool(true))), 1.0))))), _GLF_IDENTITY(injectionSwitch.y, float(mat4x2(injectionSwitch.y, 1.0, 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(_GLF_FUZZED(735.352), (_GLF_FUZZED(735.352)) - 0.0)), float(_GLF_IDENTITY(1.0, (1.0) - 0.0)), bool(true))), 1.0)))))), ! (! ((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, float(mat4x2(injectionSwitch.y, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-47.35, -684.469)) : injectionSwitch)).y, float(mat4x2(injectionSwitch.y, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, float(mat4x2(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))), (_GLF_IDENTITY(injectionSwitch.y, float(mat4x2(injectionSwitch.y, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)))) / 1.0), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(asinh(-1.7)) : injectionSwitch.y)), injectionSwitch.y)), float(mat4x2(injectionSwitch.y, _GLF_IDENTITY(1.0, (1.0) - 0.0), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))))))))))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  barrier();
 _GLF_struct_10 _GLF_struct_replacement_10 = _GLF_struct_10(gl_WorkGroupSize.x, mat3x2(1.0));
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))))
    barrier();
   barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_base = _GLF_struct_replacement_10.workgroup_size * workgroup_id;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), true && (_GLF_WRAPPED_IF_TRUE(true)))) || false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            barrier();
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 _GLF_struct_29 _GLF_struct_replacement_29 = _GLF_struct_29(workgroup_base + subgroup_id * _GLF_struct_replacement_9.subgroup_size + subgroup_local_id, _GLF_struct_13(uvec3(1u), _GLF_struct_11(true, uvec4(1u), bvec3(true), vec3(1.0), mat4(1.0), uvec3(1u), bvec2(true)), mat3(1.0), _GLF_struct_12(bvec3(true), bvec4(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (true))))), mat2(1.0), _GLF_IDENTITY(true, true && (true)), mat4x3(1.0)), mat4x2(1.0)), uvec4(1u), _GLF_struct_19(vec4(1.0), _GLF_struct_14(mat3(1.0), _GLF_IDENTITY(vec3(1.0), max(vec3(1.0), vec3(1.0))), uvec2(1u), _GLF_IDENTITY(mat4(1.0), _GLF_IDENTITY((mat4(1.0)) * mat4(1.0), transpose(transpose((mat4(1.0)) * mat4(1.0))))), mat3(1.0), 1, vec2(_GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(_GLF_IDENTITY(-3.6, min(-3.6, -3.6))) : 1.0)) : _GLF_FUZZED(-4.2))))), _GLF_struct_15(mat4x2(1.0), vec4(1.0), vec3(1.0), mat2x4(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), vec4(_GLF_IDENTITY(1.0, _GLF_IDENTITY(min(1.0, 1.0), (_GLF_IDENTITY(false, false || (false)) ? _GLF_FUZZED(exp(distance(vec4(15.64, 0.2, -6.1, -6872.2712), vec4(8451.7537, -9.5, _GLF_IDENTITY(7.8, _GLF_IDENTITY(float(mat2x3(_GLF_IDENTITY(7.8, (7.8) + 0.0), 1.0, 1.0, 1.0, 0.0, 1.0)), (false ? _GLF_FUZZED(6.3) : float(mat2x3(_GLF_IDENTITY(7.8, (7.8) + 0.0), 1.0, 1.0, 1.0, 0.0, 1.0))))), 30.11)))) : min(1.0, 1.0)))))), _GLF_struct_16(mat3x2(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-3.0)))), uvec2(1u), mat4x2(1.0), mat2x3(1.0), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(true), _GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec3(bvec2(true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bvec2(bvec2(bvec2(bvec3(bvec2(true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(bvec3(bvec2(true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bvec2(bvec2(bvec2(bvec3(bvec2(true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec2(bvec3(bvec2(true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bvec2(bvec2(bvec2(bvec3(bvec2(true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), true, true)))))), bvec2(bvec4(_GLF_IDENTITY(bvec2(true), bvec2(bvec3(bvec2(true), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat2x4(injectionSwitch.x, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0), mat2x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat2x4(injectionSwitch.x, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0)))))), float(_GLF_FUZZED((2319.1214 / -374.030))), bool(false))) < injectionSwitch.y))))))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-3.1), _GLF_FUZZED(69.49)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))))), 0.0, 1.0, 1.0, 1.0, sqrt(_GLF_ONE(1.0, injectionSwitch.y)), round(length(normalize(1.0))), 0.0, 1.0, 1.0, 1.0))).y, (injectionSwitch.y) - 0.0))), true))), _GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(true), _GLF_IDENTITY(bvec2(bvec3(bvec2(true), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / sqrt(vec2(1.0, 1.0))))).y)))), bvec2(bvec2(bvec2(bvec3(bvec2(true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), bvec2(bvec4(_GLF_IDENTITY(bvec2(true), bvec2(bvec3(bvec2(true), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y))))))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))), true))), _GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(true), _GLF_IDENTITY(bvec2(bvec3(bvec2(true), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), bvec2(bvec2(bvec2(bvec3(bvec2(true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), bvec2(bvec4(_GLF_IDENTITY(bvec2(true), bvec2(bvec3(bvec2(true), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y))))))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))), true))), true, false)), bvec2(bvec3(bvec2(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, true && (true)), true)))), _GLF_IDENTITY(bvec2(bvec3(bvec2(true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bvec2(bvec2(bvec2(bvec3(bvec2(true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), bvec2(bvec4(_GLF_IDENTITY(bvec2(true), bvec2(bvec3(bvec2(true), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y))))))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))), true))), true, false)), false)))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, 0.0, 1.0, 1.0, 1.0, exp(0.0), 1.0))).y)), true)), bvec2(bvec4(bvec2(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(true), _GLF_IDENTITY(bvec2(bvec3(bvec2(true), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / sqrt(vec2(1.0, 1.0))))).y)))), bvec2(bvec2(bvec2(bvec3(bvec2(true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), bvec2(bvec4(_GLF_IDENTITY(bvec2(true), bvec2(bvec3(bvec2(true), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y))))))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))), true))), _GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(true), _GLF_IDENTITY(bvec2(bvec3(bvec2(true), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), bvec2(bvec2(bvec2(bvec3(bvec2(true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), bvec2(bvec4(_GLF_IDENTITY(bvec2(true), bvec2(bvec3(bvec2(true), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y))))))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))), true))), true, false)), bvec2(bvec3(bvec2(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, true && (true)), true)))), _GLF_IDENTITY(bvec2(bvec3(bvec2(true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bvec2(bvec2(bvec2(bvec3(bvec2(true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), bvec2(bvec4(_GLF_IDENTITY(bvec2(true), bvec2(bvec3(bvec2(true), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y))))))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))), true))), true, false)), false)))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, 0.0, 1.0, 1.0, 1.0, exp(0.0), 1.0))).y)), true)), true, true))), bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(true), _GLF_IDENTITY(bvec2(bvec3(bvec2(true), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x < injectionSwitch.y)))), bvec2(bvec2(bvec2(bvec3(bvec2(true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), bvec2(bvec4(_GLF_IDENTITY(bvec2(true), bvec2(bvec3(_GLF_IDENTITY(bvec2(true), bvec2(bvec2(bvec2(true)))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y))))))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))), true))), _GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(true), _GLF_IDENTITY(bvec2(bvec3(bvec2(true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bvec2(bvec2(bvec2(bvec3(bvec2(true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), bvec2(bvec4(_GLF_IDENTITY(bvec2(true), bvec2(bvec3(bvec2(true), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y))))))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))), true))), bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(true), _GLF_IDENTITY(bvec2(bvec3(bvec2(true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bvec2(bvec2(bvec2(bvec3(bvec2(true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), bvec2(bvec4(_GLF_IDENTITY(bvec2(true), bvec2(bvec3(bvec2(true), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y))))))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))), true)))))), true, false)), bvec2(bvec3(bvec2(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(true), _GLF_IDENTITY(bvec2(bvec3(bvec2(true), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)))), bvec2(bvec2(bvec2(bvec3(bvec2(true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), bvec2(bvec4(_GLF_IDENTITY(bvec2(true), bvec2(bvec3(bvec2(true), _GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y, true && (injectionSwitch.x < injectionSwitch.y))))))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))), true))), true, false)), false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), bvec2(bvec4(bvec2(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(true), _GLF_IDENTITY(bvec2(bvec3(bvec2(true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bvec2(bvec2(bvec2(bvec3(bvec2(true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), bvec2(bvec4(_GLF_IDENTITY(bvec2(true), bvec2(bvec3(bvec2(true), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y))))))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y) - 0.0, ((injectionSwitch.y) - 0.0) * 1.0)))), true))), _GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(true), _GLF_IDENTITY(bvec2(bvec3(bvec2(true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), _GLF_IDENTITY(bvec2(bvec2(bvec2(bvec3(bvec2(true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), _GLF_IDENTITY(bvec2(bvec4(bvec2(bvec2(bvec2(bvec3(bvec2(true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), false, false)), bvec2(bvec4(bvec2(bvec4(bvec2(bvec2(bvec2(bvec3(bvec2(true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), false, false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))), bvec2(bvec4(_GLF_IDENTITY(bvec2(true), bvec2(bvec3(bvec2(true), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y))))))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))), true))), true, false)), bvec2(bvec3(bvec2(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(true), _GLF_IDENTITY(bvec2(bvec3(bvec2(true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bvec2(bvec2(bvec2(bvec3(bvec2(true), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y)))))))), bvec2(bvec4(_GLF_IDENTITY(bvec2(true), bvec2(bvec3(bvec2(true), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y))))))), _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)), ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))) && true)), true))), true, false)), false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), true, false))), false, false))))), _GLF_struct_17(bvec3(true), mat4x2(1.0), _GLF_IDENTITY(vec4(1.0), mat4(1.0) * (vec4(1.0))), _GLF_IDENTITY(mat4(1.0), transpose(transpose(_GLF_IDENTITY(mat4(1.0), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(mat4(3.0, 3782.2175, -857.094, -4.1, -3146.6697, 4.6, -933.988, 6.4, 95.91, -13.75, 966.743, -298.006, 5470.8617, -794.241, 73.63, 9675.0337)) : mat4(1.0)))))), uvec2(_GLF_IDENTITY(_GLF_IDENTITY(1u, 0u ^ (_GLF_IDENTITY(1u, clamp(_GLF_IDENTITY(1u, (1u) | (1u)), 1u, 1u)))), (false ? _GLF_FUZZED(workgroup_id) : _GLF_IDENTITY(1u, (1u) ^ 0u)))), ivec4(1), mat2(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, float(vec2(1.0, 0.0)))) - 0.0))), _GLF_struct_18(vec3(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), _GLF_IDENTITY(1.0, max(1.0, 1.0))))), bvec3(true), _GLF_IDENTITY(vec2(1.0), clamp(vec2(1.0), _GLF_IDENTITY(vec2(1.0), (vec2(1.0)) - vec2(0.0, 0.0)), vec2(1.0)))), _GLF_IDENTITY(_GLF_IDENTITY(mat4(1.0), (_GLF_IDENTITY(false, bool(bvec2(false, false))) ? _GLF_FUZZED(mat4(-9.9, 7.0, 54.24, -9947.7814, 43.65, -8.2, -4.7, -5086.4090, _GLF_IDENTITY(_GLF_IDENTITY(3.2, _GLF_IDENTITY(float(_GLF_IDENTITY(mat4(3.2, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, log(1.0), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0), transpose(transpose(mat4(3.2, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, log(1.0), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0))))), float(_GLF_IDENTITY(vec2(float(_GLF_IDENTITY(mat4(3.2, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, log(1.0), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0), transpose(transpose(mat4(3.2, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, log(1.0), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0))))), 0.0), min(vec2(float(_GLF_IDENTITY(mat4(3.2, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, log(1.0), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0), transpose(transpose(mat4(3.2, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, log(1.0), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0))))), 0.0), vec2(float(_GLF_IDENTITY(mat4(3.2, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, log(1.0), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0), transpose(transpose(mat4(3.2, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, log(1.0), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0))))), 0.0)))))), 0.0 + (_GLF_IDENTITY(3.2, _GLF_IDENTITY(float(_GLF_IDENTITY(mat4(3.2, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, log(1.0), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0), transpose(transpose(mat4(3.2, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, log(1.0), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0))))), float(_GLF_IDENTITY(vec2(float(_GLF_IDENTITY(mat4(3.2, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, log(1.0), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0), transpose(transpose(mat4(3.2, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, log(1.0), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0))))), 0.0), min(vec2(float(_GLF_IDENTITY(mat4(_GLF_IDENTITY(3.2, (_GLF_IDENTITY(3.2, (3.2) * 1.0)) - 0.0), 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, log(1.0), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0), transpose(transpose(mat4(3.2, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, log(1.0), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0))))), 0.0), vec2(float(_GLF_IDENTITY(mat4(3.2, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, log(1.0), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0), transpose(transpose(mat4(3.2, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, log(1.0), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0))))), 0.0)))))))), 5155.3076, -1.4, -40.37, -6.6, -20.79, 2.6, 0.0)) : _GLF_IDENTITY(mat4(1.0), (true ? mat4(1.0) : _GLF_FUZZED(mat4(3.8, -4.0, 5.1, -26.97, 9197.0479, 947.847, 986.564, -567.376, 9.8, 9685.7060, 6.5, 9.3, 1.3, 662.309, -7.2, 7267.4288)))))), (_GLF_IDENTITY(mat4(1.0), (_GLF_IDENTITY(false, bool(bvec2(false, _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false)))))))) ? _GLF_FUZZED(_GLF_IDENTITY(mat4(-9.9, 7.0, 54.24, -9947.7814, 43.65, -8.2, -4.7, -5086.4090, 3.2, 5155.3076, -1.4, -40.37, -6.6, _GLF_IDENTITY(-20.79, _GLF_IDENTITY(float(mat3x4(-20.79, 1.0, 1.0, 0.0, tan(0.0), 1.0, determinant(mat4(1.0, tan(0.0), 1.0, 0.0, tan(0.0), 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), dot(vec2(0.0, 0.0), _GLF_IDENTITY(vec2(1.0, 1.0), (vec2(1.0, 1.0)) - sin(vec2(0.0, 0.0))))), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), 0.0, 0.0, 0.0, 0.0, 1.0)), mix(float(_GLF_FUZZED(-5691.7685)), float(float(mat3x4(-20.79, 1.0, 1.0, 0.0, tan(0.0), 1.0, determinant(mat4(1.0, tan(0.0), 1.0, 0.0, tan(0.0), 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), dot(vec2(0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-4.8)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), vec2(1.0, 1.0))), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, sqrt(0.0) + (_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(765.915))))), 1.0))), bool(true)))), _GLF_IDENTITY(_GLF_IDENTITY(2.6, mix(float(_GLF_FUZZED(-1.1)), float(2.6), bool(true))), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))))) ? _GLF_FUZZED(2.7) : _GLF_IDENTITY(2.6, mix(float(_GLF_FUZZED(-0.7)), float(_GLF_IDENTITY(2.6, max(2.6, _GLF_IDENTITY(2.6, length(vec3(0.0, 0.0, 0.0)) + (2.6))))), bool(_GLF_IDENTITY(true, true && (true))))))), 0.0), transpose(transpose(mat4(-9.9, 7.0, 54.24, -9947.7814, 43.65, -8.2, -4.7, -5086.4090, 3.2, 5155.3076, -1.4, -40.37, -6.6, _GLF_IDENTITY(-20.79, _GLF_IDENTITY(float(mat3x4(-20.79, 1.0, 1.0, 0.0, tan(0.0), 1.0, determinant(mat4(1.0, tan(0.0), 1.0, 0.0, tan(0.0), 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), dot(vec2(0.0, 0.0), _GLF_IDENTITY(vec2(1.0, 1.0), (vec2(1.0, 1.0)) - sin(vec2(0.0, 0.0))))), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), 0.0, 0.0, 0.0, 0.0, 1.0)), mix(float(_GLF_FUZZED(-5691.7685)), float(float(mat3x4(-20.79, 1.0, 1.0, 0.0, tan(0.0), 1.0, determinant(mat4(1.0, tan(0.0), 1.0, 0.0, tan(0.0), 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), dot(vec2(0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-4.8)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), vec2(1.0, 1.0))), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, sqrt(0.0) + (_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(765.915))))), 1.0))), bool(true)))), _GLF_IDENTITY(_GLF_IDENTITY(2.6, mix(float(_GLF_FUZZED(-1.1)), float(2.6), bool(true))), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))))) ? _GLF_FUZZED(2.7) : _GLF_IDENTITY(2.6, mix(float(_GLF_FUZZED(-0.7)), float(_GLF_IDENTITY(2.6, max(2.6, _GLF_IDENTITY(2.6, length(vec3(0.0, 0.0, 0.0)) + (2.6))))), bool(_GLF_IDENTITY(true, true && (true))))))), 0.0))))) : mat4(1.0)))) / mat4(1.0, 1.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(967.366)))) + length(0.0)), 1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))), _GLF_struct_20(ivec4(1), mat3x2(1.0)), _GLF_struct_25(_GLF_struct_21(mat3x2(1.0), 1u, bvec2(true), vec3(1.0), _GLF_IDENTITY(mat4(1.0), (mat4(1.0)) / _GLF_IDENTITY(mat4(_GLF_IDENTITY(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))), (_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y), max(_GLF_IDENTITY(clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y), mix(float(clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)), float(_GLF_FUZZED(vec2(7.2, 69.84).g)), bool(false))), clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)))))) + 0.0), _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), max(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) - 0.0), mix(float(_GLF_IDENTITY(1.0, (1.0) - 0.0)), float(_GLF_FUZZED(53.36)), bool(false))), _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))))) / vec2(1.0, 1.0)), injectionSwitch)))).y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))) - 0.0)), _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), _GLF_IDENTITY(vec2(_GLF_FUZZED(0.1), _GLF_FUZZED(((-908.214) + 4.9))), mat2(1.0) * (vec2(_GLF_FUZZED(0.1), _GLF_FUZZED(((-908.214) + 4.9))))), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), (mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (injectionSwitch)[0])), (injectionSwitch)[1]), _GLF_IDENTITY(vec2(_GLF_FUZZED(0.1), _GLF_FUZZED(((-908.214) + 4.9))), mat2(1.0) * (vec2(_GLF_FUZZED(0.1), _GLF_FUZZED(((-908.214) + 4.9))))), bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)), false))) * mat2(1.0))).y, injectionSwitch.y, injectionSwitch.y))), _GLF_ONE(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat4x3(1.0, 0.0, _GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, max(1.0, 1.0)) : _GLF_FUZZED(4087.0733))), 0.0, 1.0, 0.0, _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, float(vec4(injectionSwitch.y, 0.0, 1.0, 1.0))), _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-1.9)), bool(false)))))), 1.0, 0.0, 0.0, 0.0, 1.0), (mat4x3(1.0, 0.0, 1.0, 0.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-1286.2661)), _GLF_IDENTITY(float(0.0), (_GLF_IDENTITY(float(0.0), (float(0.0)) / 1.0)) / 1.0), bool(true))))), 0.0, 0.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-9304.7694))))) - mat4x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), 1.0, 1.0)), injectionSwitch.y), _GLF_ONE(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-5371.2937)), bool(false)))) / 1.0), injectionSwitch.y), _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(clamp(injectionSwitch, injectionSwitch, injectionSwitch), mat2(1.0) * (clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (false ? _GLF_FUZZED(292.946) : _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), max(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)))))), (mat4(_GLF_IDENTITY(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(29.70)), bool(false))), clamp(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), min(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))), injectionSwitch.y))), (_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)))) + 0.0), _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), max(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(48.50)), float(injectionSwitch.y), bool(true)))))), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) - 0.0), mix(float(_GLF_IDENTITY(1.0, (1.0) - 0.0)), float(_GLF_FUZZED(53.36)), bool(false))), _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch))), (true ? max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch))) : _GLF_FUZZED(injectionSwitch)))).y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY(mix(vec2((injectionSwitch)[_GLF_IDENTITY(0, (0) | 0)], (injectionSwitch)[1]), _GLF_IDENTITY(vec2(_GLF_FUZZED(0.1), _GLF_FUZZED(((-908.214) + 4.9))), mat2(1.0) * (vec2(_GLF_FUZZED(0.1), _GLF_FUZZED(((-908.214) + 4.9))))), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), (mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), _GLF_IDENTITY(vec2(_GLF_FUZZED(0.1), _GLF_FUZZED((_GLF_IDENTITY((-908.214), mix(float((-908.214)), float(_GLF_FUZZED(-1434.8466)), bool(false))) + 4.9))), mat2(1.0) * (vec2(_GLF_FUZZED(0.1), _GLF_FUZZED(((-908.214) + 4.9))))), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))) * mat2(1.0))).y, injectionSwitch.y, injectionSwitch.y))), _GLF_ONE(_GLF_IDENTITY(_GLF_IDENTITY(1.0, float(mat2x3(1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0), vec4(0.0, 0.0, 1.0, 0.0))), 0.0, 0.0, 0.0, 0.0))), clamp(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat4x3(1.0, 0.0, _GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, max(1.0, 1.0)) : _GLF_FUZZED(4087.0733))), 0.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 0.0, 0.0, 1.0), (mat4x3(1.0, 0.0, 1.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-9.4)), float(0.0), bool(_GLF_IDENTITY(true, bool(bvec2(true, true)))))), 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-1286.2661)), float(0.0), bool(true))))), 0.0, 0.0, 1.0)) - mat4x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), 1.0, 1.0)), injectionSwitch.y), _GLF_ONE(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-5371.2937)), bool(false)))) / 1.0), injectionSwitch.y), _GLF_ONE(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(true, false || (true)) ? 1.0 : _GLF_FUZZED(-1.1))), _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-6163.9755) : injectionSwitch[0])), injectionSwitch[1])), injectionSwitch)).y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (false ? _GLF_FUZZED(292.946) : _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), max(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))))))) + mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), vec4(1.0)), mat4x2(1.0), _GLF_struct_22(vec3(1.0)), _GLF_struct_23(mat4(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-9529.9949)), bool(false)))), mat3x2(1.0), 1u), true, ivec3(1), _GLF_struct_24(mat3(1.0))), _GLF_struct_28(_GLF_struct_26(uvec3(1u), mat3x2(1.0)), _GLF_struct_27(1)));
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)) && true, ((_GLF_IDENTITY(false, (false) || false)) && true) || false))))
  barrier();
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(0, (_GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, 0)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 0 : _GLF_FUZZED(_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter)))))) << (0 & 56376)) & 77832)); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      barrier();
     barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, false, false))))
    barrier();
  }
 _GLF_struct_8 _GLF_struct_replacement_8 = _GLF_struct_8(_GLF_struct_1(uvec2(1u), _GLF_struct_0(mat2x3(1.0), mat4x3(1.0), true, mat2x4(1.0)), 1u), _GLF_IDENTITY(1u, (true ? _GLF_IDENTITY(1u, max(1u, 1u)) : _GLF_FUZZED(subgroup_id))), ivec2(1), _GLF_IDENTITY(workgroup_base + subgroup_id * _GLF_struct_replacement_9.subgroup_size + ((_GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + 1, subgroup_local_id + 1))) % _GLF_struct_replacement_9.subgroup_size), (workgroup_base + subgroup_id * _GLF_struct_replacement_9.subgroup_size + ((_GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + 1, subgroup_local_id + 1))) % _GLF_struct_replacement_9.subgroup_size)) | (workgroup_base + subgroup_id * _GLF_struct_replacement_9.subgroup_size + ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, max(1, 1)), (true ? _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + 1))), max(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + 1))), (_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + 1)))) | (_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + 1))))), _GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + 1))))) : _GLF_FUZZED(subgroup_local_id))), min(subgroup_local_id + 1, subgroup_local_id + 1))) % _GLF_struct_replacement_9.subgroup_size))), uvec2(1u), _GLF_struct_3(_GLF_IDENTITY(ivec2(1), ivec2(_GLF_IDENTITY(ivec3(ivec2(1), (_GLF_IDENTITY(1, clamp(1, 1, 1)) ^ 1)), _GLF_IDENTITY(ivec3(ivec4(ivec3(ivec2(1), (_GLF_IDENTITY(1, clamp(1, 1, 1)) ^ 1)), 0)), (ivec3(_GLF_IDENTITY(ivec4(ivec3(ivec2(1), (_GLF_IDENTITY(1, clamp(1, 1, 1)) ^ 1)), 0), (ivec4(ivec3(ivec2(1), (_GLF_IDENTITY(1, clamp(1, 1, 1)) ^ 1)), 0)) | (ivec4(ivec3(ivec2(1), (_GLF_IDENTITY(1, clamp(1, 1, 1)) ^ 1)), 0))))) ^ ivec3(0, 0, 0))))), mat3x2(1.0), _GLF_struct_2(mat4x2(1.0))), _GLF_struct_7(_GLF_IDENTITY(bvec2(true), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(bvec2(true)), bvec2(bvec2(bvec2(bvec2(true)))))), bvec2(bvec2(bvec2(bvec2(bvec2(true))))))), _GLF_struct_4(ivec4(1), _GLF_IDENTITY(vec4(1.0), (vec4(1.0)) - vec4(0.0, 0.0, 0.0, 0.0)), mat2x4(1.0), vec3(1.0), mat2x3(1.0), mat4x2(1.0)), mat3x2(1.0), _GLF_struct_5(mat4x3(1.0), bvec4(true)), _GLF_struct_6(mat3(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(0.3) : 1.0)))), bvec2(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(true, _GLF_IDENTITY(true && _GLF_IDENTITY((true), false || (_GLF_IDENTITY((true), ! (! ((true)))))), ! (! (true && _GLF_IDENTITY((true), false || (_GLF_IDENTITY((true), _GLF_IDENTITY(! (! ((true))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(! (! ((true))), true, false), bvec3(bvec4(bvec3(! (! ((true))), true, false), false)))), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bvec3(! (! ((true))), true, false), bvec3(bvec4(bvec3(! (! ((true))), true, false), false))))), (! (bool(_GLF_IDENTITY(bvec3(! (! ((true))), true, false), bvec3(bvec4(bvec3(! (! ((_GLF_IDENTITY(true, true && (true))))), true, false), false)))))) && true))))))))))), false, false, false)), _GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), false))) || (bool(bvec4(_GLF_IDENTITY(true, true && _GLF_IDENTITY((true), false || (_GLF_IDENTITY((true), ! (! ((true))))))), false, false, false)))))), uvec4(1u)));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true)))), ((! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))) && true))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 for(int _injected_loop_counter = (-5357 & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   buf[_GLF_struct_replacement_29.virtual_gid] = 1;
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false), bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false), false, true))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))
          barrier();
        }
       else
        {
         do
          {
           do
            {
             barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), _GLF_IDENTITY(bool(bvec3((false), true, false)), _GLF_IDENTITY(bool(bvec2(bool(bvec3((false), true, false)), false)), true && (bool(bvec2(bool(bvec3((false), true, false)), false)))))) && true)), bool(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)), true, false))))
    {
     do
      {
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, true, false))))
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(0.9), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(469.245)), bvec2(true, false))).y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), bool(bvec3(_GLF_IDENTITY(false, (false) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
    }
   barrier();
  }
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, min(1, 1))))); _GLF_IDENTITY(_injected_loop_counter ++, 1 * (_injected_loop_counter ++)))
  {
   if(_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, 0 ^ (1)) < _GLF_struct_replacement_9.subgroup_size, bool(bvec4(subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(-3828))))), 0 ^ (1)) < _GLF_IDENTITY(_GLF_struct_replacement_9.subgroup_size, _GLF_IDENTITY((_GLF_struct_replacement_9.subgroup_size), max((_GLF_struct_replacement_9.subgroup_size), _GLF_IDENTITY((_GLF_struct_replacement_9.subgroup_size), ((_GLF_struct_replacement_9.subgroup_size)) / 1u))) << 0u), true, false, _GLF_IDENTITY(false, true && (false))))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
          barrier();
         for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false))))), bool(bvec3(bool(bool(false)), true, false))))))
          barrier();
         do
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) >> 0))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) / 1))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               barrier();
              }
            }
           barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(1.3) : injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), injectionSwitch)).y))))
                barrier();
               barrier();
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(8), int(8))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, int(_GLF_IDENTITY(ivec4(_injected_loop_counter, (1 | 0), 1, 1), min(_GLF_IDENTITY(ivec4(_injected_loop_counter, (1 | 0), 1, 1), (ivec4(_injected_loop_counter, (1 | 0), 1, 1)) | (ivec4(_injected_loop_counter, (1 | 0), 1, 1))), _GLF_IDENTITY(ivec4(_injected_loop_counter, (1 | 0), 1, 1), ivec4(0, 0, 0, 0) ^ (ivec4(_injected_loop_counter, (1 | 0), 1, 1))))))) < ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) > injectionSwitch.y))))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       do
        {
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             atomicStore(buf[_GLF_struct_replacement_8.next_virtual_gid], uint(2), 4, 64, 4);
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x > injectionSwitch.y) && true)) && true)))))))), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)), false || (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))))))))))
              barrier();
             barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     subgroupAll(false);
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false)))))))))))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(((_GLF_IDENTITY(1, (1) / 1) << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), int(int(_GLF_IDENTITY(int(6), clamp(_GLF_IDENTITY(int(6), (_GLF_IDENTITY(int(6), clamp(int(6), int(6), _GLF_IDENTITY(int(6), (false ? _GLF_FUZZED(_injected_loop_counter) : int(6)))))) >> 0), int(6), _GLF_IDENTITY(_GLF_IDENTITY(int(6), (false ? _GLF_FUZZED(_injected_loop_counter) : int(6))), (true ? int(6) : _GLF_FUZZED(-88638)))))))))), ~ (~ (((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), int(int(int(6))))), int(ivec2(_GLF_IDENTITY(int(6), _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(int(int(6)))), clamp(_GLF_IDENTITY(int(6), int(int(int(6)))), _GLF_IDENTITY(int(6), int(int(int(6)))), _GLF_IDENTITY(int(6), int(int(int(6))))))), 0)))))))); _injected_loop_counter ++)
          {
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && _GLF_IDENTITY((false), true && (_GLF_IDENTITY((false), ((false)) || false))))))
              barrier();
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           barrier();
          }
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))), _GLF_IDENTITY(bool(bvec3(! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, float(mat4x2(injectionSwitch.y, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0))))))), true, false)), bool(bvec3(_GLF_IDENTITY(bool(bvec3(! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)))), true, false)), false || (bool(bvec3(! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), (true ? clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x) : _GLF_FUZZED(2.5)))) > injectionSwitch.y)))), true, false)))), true, false)))))));
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(floor(-9585.6358)) : _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))))))))))
            {
             do
              {
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > _GLF_IDENTITY(injectionSwitch.y, float(mat4x2(injectionSwitch.y, 0.0, abs(0.0), 1.0, 0.0, 1.0, 0.0, 1.0)))))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   barrier();
                  }
                 else
                  {
                  }
                }
               if(_GLF_DEAD(false))
                barrier();
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), true && (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))))))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
               for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(8), _GLF_IDENTITY(_GLF_IDENTITY(int(8), 1 * (_GLF_IDENTITY(int(8), min(_GLF_IDENTITY(int(8), (_GLF_IDENTITY(int(8), (int(8)) / 1)) - 0), int(8))))), (int(8)) / 1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                {
                 barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     barrier();
                    }
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(8.5), _GLF_FUZZED((- -35.15))), bvec2(false, false))).x > injectionSwitch.y))))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                }
              }
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) ^ 0)))); _injected_loop_counter ++)
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-2.6)), float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)), bool(true)))))))
                  {
                   barrier();
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, 0.0, 1.0, 1.0))).x > injectionSwitch.y))))
                      barrier();
                     barrier();
                    }
                  }
                }
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
               for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != 0, (_injected_loop_counter != 0) && true), false || (_injected_loop_counter != 0))), ! (! (bool(_GLF_IDENTITY(_injected_loop_counter != 0, false || (_injected_loop_counter != 0))))))), (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_injected_loop_counter != 0, false || _GLF_IDENTITY((_injected_loop_counter != 0), ((_injected_loop_counter != 0)) || false))), ! _GLF_IDENTITY((! (bool(_GLF_IDENTITY(_injected_loop_counter != 0, false || (_injected_loop_counter != 0))))), false || (_GLF_IDENTITY((! (bool(_GLF_IDENTITY(_injected_loop_counter != 0, false || (_injected_loop_counter != 0))))), true && ((! (bool(_GLF_IDENTITY(_injected_loop_counter != 0, false || (_injected_loop_counter != 0)))))))))))) && _GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, false || (true)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) | 0))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                      barrier();
                     barrier();
                    }
                   barrier();
                  }
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(_GLF_DEAD(false))
          {
           do
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))));
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true)))))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), (bool(bvec2(false, false))) && true))))
          {
          }
         else
          {
           barrier();
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec4(_GLF_IDENTITY(! (false), bool(bvec4(! (false), true, true, false))), true, true, false))))), ! (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! _GLF_IDENTITY((false), (_GLF_IDENTITY((false), ! (! ((false))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_IDENTITY(! (false), bool(bvec4(! (false), true, true, false))), true, true, false))))))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true, true)))))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         do
          {
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x > injectionSwitch.y), bool(bvec3((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x > injectionSwitch.y), true, false))))))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + abs(vec2(0.0, 0.0))).x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
      barrier();
     atomicStore(buf[_GLF_IDENTITY(_GLF_struct_replacement_8.next_virtual_gid, max(_GLF_IDENTITY(_GLF_struct_replacement_8.next_virtual_gid, (_GLF_IDENTITY(_GLF_struct_replacement_8.next_virtual_gid, (_GLF_struct_replacement_8.next_virtual_gid) + 0u)) / _GLF_IDENTITY(1u, (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) < _GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0))).y)) ? _GLF_IDENTITY(1u, 0u ^ (1u)) : _GLF_FUZZED(81568u)))), _GLF_IDENTITY(_GLF_struct_replacement_8.next_virtual_gid, (_GLF_struct_replacement_8.next_virtual_gid) << 0u)))], uint(2), 4, 64, _GLF_IDENTITY(4, (true ? _GLF_IDENTITY(4, _GLF_IDENTITY(clamp(4, 4, 4), (_GLF_IDENTITY(clamp(4, 4, 4), (clamp(4, 4, 4)) ^ 0)) + 0)) : _GLF_FUZZED(17575))));
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec3((injectionSwitch.x > injectionSwitch.y), true, true), bvec3(bvec4(_GLF_IDENTITY(bvec3((injectionSwitch.x > injectionSwitch.y), true, true), bvec3(bvec3(bvec3((injectionSwitch.x > injectionSwitch.y), true, true)))), false)))))), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))) && true)))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false, true)), (bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false, true))) && true), bool(bool(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false, _GLF_IDENTITY(true, true && (true))))))))))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-62.84), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(162.815)), bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).y))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               else
                {
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             do
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec4(_GLF_WRAPPED_LOOP(false), false, true, false))));
          }
        }
      }
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false))))))), (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false)))))))) || false))
      barrier();
     subgroupAll(true);
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false))))))))))
      barrier();
    }
  }
}
