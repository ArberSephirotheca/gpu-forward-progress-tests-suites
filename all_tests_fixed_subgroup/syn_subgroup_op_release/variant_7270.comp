#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_3 {
 mat2x4 _f0;
 vec4 _f1;
} ;

struct _GLF_struct_2 {
 mat3 _f0;
 bvec3 _f1;
 mat4x2 _f2;
 bvec4 _f3;
 bvec3 _f4;
 mat4x2 _f5;
} ;

struct _GLF_struct_1 {
 mat3x2 _f0;
 ivec3 _f1;
 mat2x3 _f2;
 float _f3;
 mat4x2 _f4;
 mat2x3 _f5;
} ;

struct _GLF_struct_0 {
 mat3x2 _f0;
 ivec2 _f1;
 uvec3 _f2;
} ;

struct _GLF_struct_4 {
 _GLF_struct_0 _f0;
 vec2 _f1;
 _GLF_struct_1 _f2;
 _GLF_struct_2 _f3;
 vec3 _f4;
 _GLF_struct_3 _f5;
 uint subgroup_id;
 mat2x4 _f6;
} ;

struct _GLF_struct_5 {
 ivec2 _f0;
 mat4x3 _f1;
 _GLF_struct_4 _f2;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      return;
     return;
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
  }
 _GLF_struct_5 _GLF_struct_replacement_5 = _GLF_struct_5(_GLF_IDENTITY(ivec2(1), clamp(ivec2(1), ivec2(1), ivec2(1))), mat4x3(1.0), _GLF_struct_4(_GLF_struct_0(mat3x2(_GLF_IDENTITY(1.0, (1.0) - 0.0)), ivec2(_GLF_IDENTITY(1, (1) - 0)), uvec3(1u)), vec2(_GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-32.94)), float(1.0), bool(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x < injectionSwitch.y))))), clamp(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-32.94)), float(1.0), bool(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x < injectionSwitch.y))))), _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-32.94)), float(1.0), bool(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x < injectionSwitch.y))))), _GLF_IDENTITY(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-32.94)), float(1.0), bool(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x < injectionSwitch.y))))), clamp(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-32.94)), float(1.0), bool(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x < injectionSwitch.y))))), _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-32.94)), float(1.0), bool(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x < injectionSwitch.y))))), _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-32.94)), float(1.0), bool(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x < injectionSwitch.y)))))))))), float(_GLF_FUZZED(3434.4319)), bool(false)))), _GLF_struct_1(mat3x2(_GLF_IDENTITY(1.0, (1.0) * _GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0) - _GLF_ZERO(0.0, injectionSwitch.x), mix(float((1.0) - _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), abs(0.0), 1.0, 1.0, 1.0))))).x)), float(_GLF_FUZZED(893.910)), bool(false)))))), ivec3(1), mat2x3(1.0), 1.0, mat4x2(1.0), mat2x3(1.0)), _GLF_struct_2(mat3(_GLF_IDENTITY(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)))), 1.0)), max(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-295.877))), _GLF_IDENTITY(min(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-295.877))), _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-295.877)))), 1.0 * (_GLF_IDENTITY(min(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-295.877))), _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-295.877)))), mix(float(_GLF_FUZZED(1.0)), float(min(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-295.877))), _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-295.877))))), bool(true)))))), 1.0))), bvec3(true), mat4x2(1.0), bvec4(_GLF_IDENTITY(true, ! (! (true)))), bvec3(true), mat4x2(_GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, (1.0) + 0.0), _GLF_IDENTITY(_GLF_IDENTITY(1.0, 0.0 + (1.0)), _GLF_IDENTITY((1.0) + 0.0, _GLF_IDENTITY((true ? (1.0) + 0.0 : _GLF_FUZZED(-379.373)), clamp((true ? (1.0) + 0.0 : _GLF_FUZZED(-379.373)), _GLF_IDENTITY((true ? (1.0) + 0.0 : _GLF_FUZZED(-379.373)), (true ? (true ? (1.0) + 0.0 : _GLF_FUZZED(-379.373)) : _GLF_FUZZED(-3294.3770))), (true ? (1.0) + 0.0 : _GLF_FUZZED(-379.373)))))), _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(_GLF_IDENTITY(1139.1044, min(1139.1044, 1139.1044)))), float(1.0), _GLF_IDENTITY(bool(true), bool(bvec3(bool(true), true, false))))))), _GLF_IDENTITY(min(1.0, 1.0), clamp(min(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0), min(1.0, 1.0), min(1.0, 1.0)))))), vec3(1.0), _GLF_struct_3(mat2x4(1.0), _GLF_IDENTITY(vec4(1.0), max(_GLF_IDENTITY(vec4(1.0), (false ? _GLF_FUZZED(vec4(-5.5, 349.695, 9.1, 4860.1724)) : _GLF_IDENTITY(vec4(1.0), (vec4(1.0)) * mat4(1.0)))), vec4(1.0)))), gl_SubgroupID, mat2x4(1.0)));
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)))) && true))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
  {
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))) & 1)); _GLF_IDENTITY(_injected_loop_counter ++, (_GLF_IDENTITY(_injected_loop_counter ++, (0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(0, (0) / 1)), int(0))) + (_injected_loop_counter ++))) << 0))
      {
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
uint subgroup_size = 16;
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)), (_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x), float(_GLF_FUZZED(96.60)), bool(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))) : _GLF_FUZZED(-6.3))) > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[0], mix(float(_GLF_FUZZED(63.72)), float(injectionSwitch[0]), bool(_GLF_IDENTITY(true, bool(bvec4(true, false, true, false)))))), max(injectionSwitch[0], injectionSwitch[0])), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-3126.8516), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-7.9)), bvec2(true, false)))[1])).y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))))).y, bool(bool(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)).x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))), false || (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)))))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)).x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))), false || (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)))))), false || ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)).x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))), false || (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))))))))) || false)))))
  barrier();
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! _GLF_IDENTITY((_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_WRAPPED_LOOP(false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_WRAPPED_LOOP(false)), bool(bool((_GLF_WRAPPED_LOOP(false)))))), bool(bvec3(! (_GLF_IDENTITY((_GLF_WRAPPED_LOOP(false)), bool(bool((_GLF_WRAPPED_LOOP(false)))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(! (_GLF_WRAPPED_LOOP(false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(bool(! (_GLF_WRAPPED_LOOP(false))), (bool(! (_GLF_WRAPPED_LOOP(false)))) || false))), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bool(! (_GLF_WRAPPED_LOOP(false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(bool(! (_GLF_WRAPPED_LOOP(false))), (bool(! (_GLF_WRAPPED_LOOP(false)))) || false))), true && (_GLF_IDENTITY(bool(! (_GLF_WRAPPED_LOOP(false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(bool(! (_GLF_WRAPPED_LOOP(false))), (bool(! (_GLF_WRAPPED_LOOP(false)))) || false))))), false)))), ! (! (bool(bool(! (_GLF_WRAPPED_LOOP(false))))))))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec4(_GLF_WRAPPED_LOOP(false), false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec4(_GLF_WRAPPED_LOOP(false), false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))), ! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (! (_GLF_WRAPPED_LOOP(false)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec4(_GLF_WRAPPED_LOOP(false), false, true, _GLF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec2(true, true)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y)))))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec4(_GLF_WRAPPED_LOOP(false), false, true, _GLF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec2(true, true)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y)))))), ((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec4(_GLF_WRAPPED_LOOP(false), false, true, _GLF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec2(true, true)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))))))) && true)) || false))))))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(! (_GLF_WRAPPED_LOOP(false))), ! (! (bool(! (_GLF_WRAPPED_LOOP(false))))))), ! (! (bool(bool(! (_GLF_WRAPPED_LOOP(false))))))))), bool(bvec3((_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (_GLF_IDENTITY(! (false), true && (! (false)))))))))), _GLF_IDENTITY(bool(bool(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY((_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false)))) || false, ((_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false)))) || false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))), ! (! (bool(bool(! (_GLF_WRAPPED_LOOP(false))))))))), true, false)))) && true)));
   for(int _injected_loop_counter = ((1 & 1) & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      return;
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 do
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true))), bool(bvec2(_GLF_DEAD(false), false))))))) || false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      barrier();
     barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x < injectionSwitch.y))) && true))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
      break;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupSize.x, clamp(gl_WorkGroupSize.x, gl_WorkGroupSize.x, gl_WorkGroupSize.x))), 0u ^ ((_GLF_IDENTITY(gl_WorkGroupSize.x, clamp(gl_WorkGroupSize.x, gl_WorkGroupSize.x, gl_WorkGroupSize.x))))) ^ 0u);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      {
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = (0 ^ ((1 & 1) | 1)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), false, false, false)))), ! (! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), false, false, false))))))))); _injected_loop_counter --)
        {
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = _GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, clamp(1, 1, 1))), clamp(~ (_GLF_IDENTITY(1, clamp(1, 1, 1))), ~ (_GLF_IDENTITY(1, clamp(1, 1, 1))), ~ (_GLF_IDENTITY(1, clamp(1, 1, 1))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, (0) - 0)))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             return;
            }
           else
            {
            }
          }
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))), bool(bvec4(! (_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))), true, true, false))))), (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(_GLF_IDENTITY(0, min(0, 0)), clamp(0, 0, 0))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, true && (false)), false)), false || (bool(bvec2(_GLF_IDENTITY(false, true && (false)), false)))), (bool(bvec2(false, false))) || false)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, true && (false)), false)), false || (bool(bvec2(_GLF_IDENTITY(false, true && (false)), false)))), (bool(bvec2(false, false))) || false)), false || (_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, true && (false)), false)), false || (bool(bvec2(_GLF_IDENTITY(false, true && (false)), false)))), (bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), true, true))))) || false)))))))))
        barrier();
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(false || (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true)))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false || (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true)))), ! (! (false || (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true))))))), true, true, true)), (bool(bvec4(_GLF_IDENTITY(false || (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true)))), ! (! (false || (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true))))))), true, true, true))) && true))))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _GLF_IDENTITY(_injected_loop_counter --, _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter --, (false ? _GLF_FUZZED(-59139) : _injected_loop_counter --))), ((_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter --, (false ? _GLF_FUZZED(-59139) : _injected_loop_counter --)), (false ? _GLF_FUZZED(47544) : _GLF_IDENTITY(_injected_loop_counter --, (false ? _GLF_FUZZED(-59139) : _injected_loop_counter --)))))) / 1) << (0 << _GLF_IDENTITY(int(8), int(8)))))
      {
       barrier();
      }
    }
   barrier();
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
      {
       barrier();
      }
    }
  }
 uint workgroup_id = _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID.x, (_GLF_IDENTITY(gl_WorkGroupID.x, min(gl_WorkGroupID.x, gl_WorkGroupID.x))) >> (0u << _GLF_IDENTITY(uint(3u), uint(3u)))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID.x, (_GLF_IDENTITY(gl_WorkGroupID.x, _GLF_IDENTITY((gl_WorkGroupID.x), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (gl_WorkGroupID.x) : _GLF_FUZZED(workgroup_size))) | (_GLF_IDENTITY(gl_WorkGroupID.x, max(gl_WorkGroupID.x, gl_WorkGroupID.x))))) << uint(_GLF_ZERO(0.0, injectionSwitch.x))), clamp(_GLF_IDENTITY(gl_WorkGroupID.x, (_GLF_IDENTITY(gl_WorkGroupID.x, _GLF_IDENTITY((gl_WorkGroupID.x), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (gl_WorkGroupID.x) : _GLF_FUZZED(workgroup_size))) | (_GLF_IDENTITY(gl_WorkGroupID.x, max(gl_WorkGroupID.x, gl_WorkGroupID.x))))) << uint(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID.x, (_GLF_IDENTITY(gl_WorkGroupID.x, _GLF_IDENTITY((gl_WorkGroupID.x), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (gl_WorkGroupID.x) : _GLF_FUZZED(workgroup_size))) | (_GLF_IDENTITY(gl_WorkGroupID.x, max(gl_WorkGroupID.x, gl_WorkGroupID.x))))) << uint(_GLF_ZERO(0.0, injectionSwitch.x))), max(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID.x, (_GLF_IDENTITY(gl_WorkGroupID.x, _GLF_IDENTITY((gl_WorkGroupID.x), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (gl_WorkGroupID.x) : _GLF_FUZZED(workgroup_size))) | (_GLF_IDENTITY(gl_WorkGroupID.x, max(gl_WorkGroupID.x, gl_WorkGroupID.x))))) << uint(_GLF_ZERO(0.0, injectionSwitch.x))), 0u ^ (_GLF_IDENTITY(gl_WorkGroupID.x, (_GLF_IDENTITY(gl_WorkGroupID.x, _GLF_IDENTITY((gl_WorkGroupID.x), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (gl_WorkGroupID.x) : _GLF_FUZZED(workgroup_size))) | (_GLF_IDENTITY(gl_WorkGroupID.x, max(gl_WorkGroupID.x, gl_WorkGroupID.x))))) << uint(_GLF_ZERO(0.0, injectionSwitch.x))))), _GLF_IDENTITY(gl_WorkGroupID.x, (_GLF_IDENTITY(gl_WorkGroupID.x, _GLF_IDENTITY((gl_WorkGroupID.x), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (gl_WorkGroupID.x) : _GLF_FUZZED(workgroup_size))) | (_GLF_IDENTITY(gl_WorkGroupID.x, max(gl_WorkGroupID.x, gl_WorkGroupID.x))))) << uint(_GLF_ZERO(0.0, injectionSwitch.x))))), _GLF_IDENTITY(gl_WorkGroupID.x, (_GLF_IDENTITY(gl_WorkGroupID.x, _GLF_IDENTITY((gl_WorkGroupID.x), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (gl_WorkGroupID.x) : _GLF_FUZZED(workgroup_size))) | (_GLF_IDENTITY(gl_WorkGroupID.x, max(gl_WorkGroupID.x, gl_WorkGroupID.x))))) << uint(_GLF_ZERO(0.0, injectionSwitch.x))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID.x, (gl_WorkGroupID.x) << uint(_GLF_ZERO(0.0, injectionSwitch.x))), max(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID.x, clamp(gl_WorkGroupID.x, gl_WorkGroupID.x, _GLF_IDENTITY(gl_WorkGroupID.x, (gl_WorkGroupID.x) / 1u))), (gl_WorkGroupID.x) << uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))) / sqrt(1.0))))), _GLF_IDENTITY(gl_WorkGroupID.x, _GLF_IDENTITY((gl_WorkGroupID.x), (uint(_GLF_ZERO(0.0, injectionSwitch.x)) & 161829u) | ((gl_WorkGroupID.x))) << uint(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), tan(sqrt(0.0)) + (_GLF_ZERO(0.0, injectionSwitch.x))))))), (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID.x, (gl_WorkGroupID.x) << uint(_GLF_ZERO(0.0, injectionSwitch.x))), max(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID.x, clamp(gl_WorkGroupID.x, gl_WorkGroupID.x, _GLF_IDENTITY(gl_WorkGroupID.x, (gl_WorkGroupID.x) / 1u))), (gl_WorkGroupID.x) << uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))) / sqrt(1.0))))), _GLF_IDENTITY(gl_WorkGroupID.x, _GLF_IDENTITY((gl_WorkGroupID.x), (uint(_GLF_ZERO(0.0, injectionSwitch.x)) & 161829u) | ((gl_WorkGroupID.x))) << uint(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), tan(sqrt(0.0)) + (_GLF_ZERO(0.0, injectionSwitch.x)))))))) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID.x, (gl_WorkGroupID.x) << uint(_GLF_ZERO(0.0, injectionSwitch.x))), max(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID.x, clamp(gl_WorkGroupID.x, gl_WorkGroupID.x, _GLF_IDENTITY(gl_WorkGroupID.x, (gl_WorkGroupID.x) / 1u))), (gl_WorkGroupID.x) << uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))) / sqrt(1.0))))), _GLF_IDENTITY(gl_WorkGroupID.x, _GLF_IDENTITY((gl_WorkGroupID.x), (uint(_GLF_ZERO(0.0, injectionSwitch.x)) & 161829u) | ((gl_WorkGroupID.x))) << uint(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), tan(sqrt(0.0)) + (_GLF_ZERO(0.0, injectionSwitch.x))))))), max(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID.x, (gl_WorkGroupID.x) << uint(_GLF_ZERO(0.0, injectionSwitch.x))), max(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID.x, clamp(gl_WorkGroupID.x, gl_WorkGroupID.x, _GLF_IDENTITY(gl_WorkGroupID.x, (gl_WorkGroupID.x) / 1u))), (gl_WorkGroupID.x) << uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))) / sqrt(1.0))))), _GLF_IDENTITY(gl_WorkGroupID.x, _GLF_IDENTITY((gl_WorkGroupID.x), (uint(_GLF_ZERO(0.0, injectionSwitch.x)) & 161829u) | ((gl_WorkGroupID.x))) << uint(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), tan(sqrt(0.0)) + (_GLF_ZERO(0.0, injectionSwitch.x))))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID.x, (gl_WorkGroupID.x) << uint(_GLF_ZERO(0.0, injectionSwitch.x))), max(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID.x, clamp(gl_WorkGroupID.x, gl_WorkGroupID.x, _GLF_IDENTITY(gl_WorkGroupID.x, (gl_WorkGroupID.x) / 1u))), (gl_WorkGroupID.x) << uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))) / sqrt(1.0))))), _GLF_IDENTITY(gl_WorkGroupID.x, _GLF_IDENTITY((gl_WorkGroupID.x), (uint(_GLF_ZERO(0.0, injectionSwitch.x)) & 161829u) | ((gl_WorkGroupID.x))) << uint(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), tan(sqrt(0.0)) + (_GLF_ZERO(0.0, injectionSwitch.x))))))), (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID.x, (gl_WorkGroupID.x) << uint(_GLF_ZERO(0.0, injectionSwitch.x))), max(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID.x, clamp(gl_WorkGroupID.x, gl_WorkGroupID.x, _GLF_IDENTITY(gl_WorkGroupID.x, (gl_WorkGroupID.x) / 1u))), (gl_WorkGroupID.x) << uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))) / sqrt(1.0))))), _GLF_IDENTITY(gl_WorkGroupID.x, _GLF_IDENTITY((gl_WorkGroupID.x), (uint(_GLF_ZERO(0.0, injectionSwitch.x)) & 161829u) | ((gl_WorkGroupID.x))) << uint(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), tan(sqrt(0.0)) + (_GLF_ZERO(0.0, injectionSwitch.x)))))))) - 0u)))))) - uint(_GLF_ZERO(_GLF_IDENTITY(0.0, (0.0) / sqrt(1.0)), injectionSwitch.x))))));
 do
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), bool(bool(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))))
          barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       barrier();
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(_GLF_IDENTITY(true, bool(bool(true))), false || (_GLF_IDENTITY(true, bool(bool(true))))) && (_GLF_DEAD(false)))) || false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_base = _GLF_IDENTITY(workgroup_size, (workgroup_size) / 1u) * workgroup_id;
 uint virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_5._f2.subgroup_id, (_GLF_struct_replacement_5._f2.subgroup_id) ^ 0u) * subgroup_size, ~ (_GLF_IDENTITY(~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size), _GLF_IDENTITY(max(~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size), ~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size)), clamp(max(~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size), _GLF_IDENTITY(~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size), min(_GLF_IDENTITY(~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size), (~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size)) ^ 0u), _GLF_IDENTITY(~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size), min(~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size), ~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size)))))), max(~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size), ~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size)), max(~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size), ~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size))))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_5._f2.subgroup_id, (_GLF_struct_replacement_5._f2.subgroup_id) ^ 0u) * subgroup_size, ~ (_GLF_IDENTITY(~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size), _GLF_IDENTITY(max(~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size), ~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size)), clamp(max(~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size), ~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size)), max(~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size), _GLF_IDENTITY(~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size), 1u * (~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size)))), max(~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size), ~ _GLF_IDENTITY((_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size), max((_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size), (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size)))))))))) - 0u), (true ? workgroup_base + _GLF_IDENTITY(_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size), ((_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size)) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), max(~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size), ~ (_GLF_IDENTITY(_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size, max(_GLF_IDENTITY(_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size, uint(_GLF_IDENTITY(uvec3(_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size, (1u & 1u), (0u | 0u)), clamp(uvec3(_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size, (1u & 1u), (0u | 0u)), _GLF_IDENTITY(uvec3(_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size, (1u & 1u), (0u | 0u)), min(uvec3(_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size, (1u & 1u), (0u | 0u)), uvec3(_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size, (1u & 1u), (0u | 0u)))), uvec3(_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size, (1u & 1u), (0u | 0u)))))), _GLF_struct_replacement_5._f2.subgroup_id * subgroup_size))))), (false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size, uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size))), max(~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size), ~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size))))))) : _GLF_FUZZED(workgroup_id))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_5._f2.subgroup_id, (_GLF_struct_replacement_5._f2.subgroup_id) ^ 0u) * subgroup_size, ~ (_GLF_IDENTITY(~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size), _GLF_IDENTITY(max(~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size), ~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size)), clamp(max(~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size), _GLF_IDENTITY(~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size), min(_GLF_IDENTITY(~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size), (~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size)) ^ 0u), _GLF_IDENTITY(~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size), min(~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size), ~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size)))))), max(~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size), ~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size)), max(~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size), ~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size))))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_5._f2.subgroup_id, (_GLF_struct_replacement_5._f2.subgroup_id) ^ 0u) * subgroup_size, ~ (_GLF_IDENTITY(~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size), _GLF_IDENTITY(max(~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size), ~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size)), clamp(max(~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size), ~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size)), max(~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size), _GLF_IDENTITY(~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size), 1u * (~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size)))), max(~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size), ~ _GLF_IDENTITY((_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size), max((_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size), (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size)))))))))) - 0u), (true ? workgroup_base + _GLF_IDENTITY(_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size), ((_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size)) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), max(~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size), ~ (_GLF_IDENTITY(_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size, max(_GLF_IDENTITY(_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size, uint(_GLF_IDENTITY(uvec3(_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size, (1u & 1u), (0u | 0u)), clamp(uvec3(_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size, (1u & 1u), (0u | 0u)), _GLF_IDENTITY(uvec3(_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size, (1u & 1u), (0u | 0u)), min(uvec3(_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size, (1u & 1u), (0u | 0u)), uvec3(_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size, (1u & 1u), (0u | 0u)))), uvec3(_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size, (1u & 1u), (0u | 0u)))))), _GLF_struct_replacement_5._f2.subgroup_id * subgroup_size))))), (false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size, uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size))), max(~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size), ~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size))))))) : _GLF_FUZZED(workgroup_id)))), max(_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_5._f2.subgroup_id, (_GLF_struct_replacement_5._f2.subgroup_id) ^ 0u) * subgroup_size, ~ (_GLF_IDENTITY(~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size), _GLF_IDENTITY(max(~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size), ~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size)), clamp(max(~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size), _GLF_IDENTITY(~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size), min(_GLF_IDENTITY(~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size), (~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size)) ^ 0u), _GLF_IDENTITY(~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size), min(~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size), ~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size)))))), max(~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size), ~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size)), max(~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size), ~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size))))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_5._f2.subgroup_id, (_GLF_struct_replacement_5._f2.subgroup_id) ^ 0u) * subgroup_size, ~ (_GLF_IDENTITY(~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size), _GLF_IDENTITY(max(~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size), ~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size)), clamp(max(~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size), ~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size)), max(~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size), _GLF_IDENTITY(~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size), 1u * (~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size)))), max(~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size), ~ _GLF_IDENTITY((_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size), max((_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size), (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size)))))))))) - 0u), (true ? workgroup_base + _GLF_IDENTITY(_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size), ((_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size)) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), max(~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size), ~ (_GLF_IDENTITY(_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size, max(_GLF_IDENTITY(_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size, uint(_GLF_IDENTITY(uvec3(_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size, (1u & 1u), (0u | 0u)), clamp(uvec3(_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size, (1u & 1u), (0u | 0u)), _GLF_IDENTITY(uvec3(_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size, (1u & 1u), (0u | 0u)), min(uvec3(_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size, (1u & 1u), (0u | 0u)), uvec3(_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size, (1u & 1u), (0u | 0u)))), uvec3(_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size, (1u & 1u), (0u | 0u)))))), _GLF_struct_replacement_5._f2.subgroup_id * subgroup_size))))), (false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size, uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size))), max(~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size), ~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size))))))) : _GLF_FUZZED(workgroup_id)))), 0u ^ (~ (_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_5._f2.subgroup_id, (_GLF_struct_replacement_5._f2.subgroup_id) ^ 0u) * subgroup_size, ~ (_GLF_IDENTITY(~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size), _GLF_IDENTITY(max(~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size), ~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size)), clamp(max(~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size), _GLF_IDENTITY(~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size), min(_GLF_IDENTITY(~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size), (~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size)) ^ 0u), _GLF_IDENTITY(~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size), min(~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size), ~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size)))))), max(~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size), ~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size)), max(~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size), ~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size))))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_5._f2.subgroup_id, (_GLF_struct_replacement_5._f2.subgroup_id) ^ 0u) * subgroup_size, ~ (_GLF_IDENTITY(~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size), _GLF_IDENTITY(max(~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size), ~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size)), clamp(max(~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size), ~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size)), max(~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size), _GLF_IDENTITY(~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size), 1u * (~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size)))), max(~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size), ~ _GLF_IDENTITY((_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size), max((_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size), (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size)))))))))) - 0u), (true ? workgroup_base + _GLF_IDENTITY(_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size), ((_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size)) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), max(~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size), ~ (_GLF_IDENTITY(_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size, max(_GLF_IDENTITY(_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size, uint(_GLF_IDENTITY(uvec3(_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size, (1u & 1u), (0u | 0u)), clamp(uvec3(_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size, (1u & 1u), (0u | 0u)), _GLF_IDENTITY(uvec3(_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size, (1u & 1u), (0u | 0u)), min(uvec3(_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size, (1u & 1u), (0u | 0u)), uvec3(_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size, (1u & 1u), (0u | 0u)))), uvec3(_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size, (1u & 1u), (0u | 0u)))))), _GLF_struct_replacement_5._f2.subgroup_id * subgroup_size))))), (false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size, uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size))), max(~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size), ~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size))))))) : _GLF_FUZZED(workgroup_id)))))), ~ (_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_5._f2.subgroup_id, (_GLF_struct_replacement_5._f2.subgroup_id) ^ 0u) * subgroup_size, ~ (_GLF_IDENTITY(~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size), _GLF_IDENTITY(max(~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size), ~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size)), clamp(max(~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size), _GLF_IDENTITY(~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size), min(_GLF_IDENTITY(~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size), (~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size)) ^ 0u), _GLF_IDENTITY(~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size), min(~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size), ~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size)))))), max(~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size), ~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size)), max(~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size), ~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size))))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_5._f2.subgroup_id, (_GLF_struct_replacement_5._f2.subgroup_id) ^ 0u) * subgroup_size, ~ (_GLF_IDENTITY(~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size), _GLF_IDENTITY(max(~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size), ~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size)), clamp(max(~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size), ~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size)), max(~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size), _GLF_IDENTITY(~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size), 1u * (~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size)))), max(~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size), ~ _GLF_IDENTITY((_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size), max((_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size), (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size)))))))))) - 0u), (true ? workgroup_base + _GLF_IDENTITY(_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size), ((_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size)) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), max(~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size), ~ (_GLF_IDENTITY(_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size, max(_GLF_IDENTITY(_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size, uint(_GLF_IDENTITY(uvec3(_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size, (1u & 1u), (0u | 0u)), clamp(uvec3(_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size, (1u & 1u), (0u | 0u)), _GLF_IDENTITY(uvec3(_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size, (1u & 1u), (0u | 0u)), min(uvec3(_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size, (1u & 1u), (0u | 0u)), uvec3(_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size, (1u & 1u), (0u | 0u)))), uvec3(_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size, (1u & 1u), (0u | 0u)))))), _GLF_struct_replacement_5._f2.subgroup_id * subgroup_size))))), (false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size, uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size))), max(~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size), ~ (_GLF_struct_replacement_5._f2.subgroup_id * subgroup_size))))))) : _GLF_FUZZED(workgroup_id)))))))) + subgroup_local_id;
 if(_GLF_DEAD(false))
  barrier();
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base, max(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)), workgroup_base)) + _GLF_struct_replacement_5._f2.subgroup_id * subgroup_size + _GLF_IDENTITY(((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)), subgroup_local_id)) + 1, min(_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)), subgroup_local_id)) + 1, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)), subgroup_local_id)) + 1, (_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)), subgroup_local_id)) + 1) >> 0u))), max(_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)), subgroup_local_id)) + 1, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)), subgroup_local_id)), uint(uint(_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)), subgroup_local_id))))) + 1))) % subgroup_size), _GLF_IDENTITY((((_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)), subgroup_local_id)) + 1) % subgroup_size)), (_GLF_IDENTITY((((_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)), subgroup_local_id)) + 1) % subgroup_size)), 1u * ((((_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)), subgroup_local_id)) + 1) % subgroup_size))))) | 0u) << 0u);
 for(int _injected_loop_counter = _GLF_IDENTITY(((1 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), clamp(_GLF_IDENTITY(int(2), int(2)), _GLF_IDENTITY(int(2), int(2)), _GLF_IDENTITY(int(2), int(2)))), (_GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), clamp(_GLF_IDENTITY(int(2), int(2)), _GLF_IDENTITY(int(2), int(2)), _GLF_IDENTITY(int(2), int(2))))) - (1 ^ 1))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (_GLF_IDENTITY(int(2), (int(2)) / 1)) | (int(2))))), max(((1 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), clamp(_GLF_IDENTITY(int(2), int(2)), _GLF_IDENTITY(int(2), int(2)), _GLF_IDENTITY(int(2), int(2)))), (_GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), clamp(_GLF_IDENTITY(int(2), int(2)), _GLF_IDENTITY(int(2), int(2)), _GLF_IDENTITY(int(2), int(2))))) - (1 ^ 1))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (_GLF_IDENTITY(int(2), (int(2)) / 1)) | (int(2))))), ((1 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), clamp(_GLF_IDENTITY(int(2), int(2)), _GLF_IDENTITY(int(2), int(2)), _GLF_IDENTITY(int(2), int(2)))), (_GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), clamp(_GLF_IDENTITY(int(2), int(2)), _GLF_IDENTITY(int(2), int(2)), _GLF_IDENTITY(int(2), int(2))))) - (1 ^ 1))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (_GLF_IDENTITY(int(2), (int(2)) / 1)) | (int(2))))))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 ^ 1) << _GLF_IDENTITY(int(8), int(8)))), ! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 ^ 1) << _GLF_IDENTITY(int(8), int(8)))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 ^ 1) << _GLF_IDENTITY(int(8), int(8)))), false || (_GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 ^ 1) << _GLF_IDENTITY(int(8), int(8)))))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 ^ 1) << _GLF_IDENTITY(int(8), int(8)))), false || (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != ((1 ^ 1) << _GLF_IDENTITY(int(8), int(8))), (_injected_loop_counter != ((1 ^ 1) << _GLF_IDENTITY(int(8), int(8)))) && true)))), false, _GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (injectionSwitch.x > injectionSwitch.y)))), false || (bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 ^ 1) << _GLF_IDENTITY(int(8), int(8)))), false || (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != ((1 ^ 1) << _GLF_IDENTITY(int(8), int(8))), (_injected_loop_counter != ((1 ^ 1) << _GLF_IDENTITY(int(8), int(8)))) && true)))), false, _GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (injectionSwitch.x > injectionSwitch.y))))))) || false))), _GLF_IDENTITY(bool(bool(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 ^ 1) << _GLF_IDENTITY(int(8), int(8)))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY((1 ^ 1) << _GLF_IDENTITY(int(8), int(8)), min((1 ^ 1) << _GLF_IDENTITY(int(8), int(8)), _GLF_IDENTITY((1 ^ 1) << _GLF_IDENTITY(int(8), int(8)), (_GLF_IDENTITY((1 ^ 1) << _GLF_IDENTITY(int(8), int(8)), (true ? (1 ^ 1) << _GLF_IDENTITY(int(8), int(8)) : _GLF_FUZZED(-19697)))) | ((1 ^ 1) << _GLF_IDENTITY(int(8), int(8)))))))), false || (_GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 ^ 1) << _GLF_IDENTITY(int(8), int(8)))))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY((1 ^ 1) << _GLF_IDENTITY(int(8), int(8)), min((1 ^ 1) << _GLF_IDENTITY(int(8), int(8)), _GLF_IDENTITY((1 ^ 1) << _GLF_IDENTITY(int(8), int(8)), (_GLF_IDENTITY((1 ^ 1) << _GLF_IDENTITY(int(8), int(8)), (true ? (1 ^ 1) << _GLF_IDENTITY(int(8), int(8)) : _GLF_FUZZED(-19697)))) | ((1 ^ 1) << _GLF_IDENTITY(int(8), int(8)))))))), false || (_GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 ^ 1) << _GLF_IDENTITY(int(8), int(8)))))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY((1 ^ 1) << _GLF_IDENTITY(int(8), int(8)), min((1 ^ 1) << _GLF_IDENTITY(int(8), int(8)), _GLF_IDENTITY((1 ^ 1) << _GLF_IDENTITY(int(8), int(8)), (_GLF_IDENTITY((1 ^ 1) << _GLF_IDENTITY(int(8), int(8)), (true ? (1 ^ 1) << _GLF_IDENTITY(int(8), int(8)) : _GLF_FUZZED(-19697)))) | ((1 ^ 1) << _GLF_IDENTITY(int(8), int(8)))))))), false || (_GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 ^ 1) << _GLF_IDENTITY(int(8), int(8)))))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), bvec3(bvec4(bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY((1 ^ 1) << _GLF_IDENTITY(int(8), int(8)), min((1 ^ 1) << _GLF_IDENTITY(int(8), int(8)), _GLF_IDENTITY((1 ^ 1) << _GLF_IDENTITY(int(8), int(8)), (_GLF_IDENTITY((1 ^ 1) << _GLF_IDENTITY(int(8), int(8)), (true ? (1 ^ 1) << _GLF_IDENTITY(int(8), int(8)) : _GLF_FUZZED(-19697)))) | ((1 ^ 1) << _GLF_IDENTITY(int(8), int(8)))))))), false || (_GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 ^ 1) << _GLF_IDENTITY(int(8), int(8)))))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false))))))), (bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 ^ 1) << _GLF_IDENTITY(int(8), int(8)))), false || (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (true ? _injected_loop_counter : _GLF_FUZZED((- _injected_loop_counter)))) != ((_GLF_IDENTITY(1 ^ 1, (1 ^ 1) + (0 >> _GLF_IDENTITY(int(2), int(2))))) << _GLF_IDENTITY(int(8), int(8)))))), false, _GLF_FALSE(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (injectionSwitch.x > injectionSwitch.y))))) || false))))), bool(bool(bool(bool(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 ^ 1) << _GLF_IDENTITY(int(8), int(8)))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((_GLF_IDENTITY(1, clamp(1, 1, 1)) ^ 1) << _GLF_IDENTITY(int(8), int(8)))), false || (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)) != ((1 ^ 1) << _GLF_IDENTITY(int(8), int(8)))))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 ^ 1) << _GLF_IDENTITY(int(8), int(8)))), false || (_GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 ^ _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec3(1, 0, 0)), 0 | (_GLF_IDENTITY(int(ivec3(1, 0, 0)), (int(ivec3(1, 0, 0))) << 0))))) << _GLF_IDENTITY(int(8), int(8)))))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || _GLF_IDENTITY(false, ! (! (false))))))))))))), ((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 ^ 1) << _GLF_IDENTITY(int(8), int(8)))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 ^ 1) << _GLF_IDENTITY(int(8), int(8)))), false || (_GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 ^ 1) << _GLF_IDENTITY(int(8), int(8)))))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 ^ 1) << _GLF_IDENTITY(int(8), int(8)))), false || (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != ((1 ^ 1) << _GLF_IDENTITY(int(8), int(8))), (_injected_loop_counter != ((1 ^ 1) << _GLF_IDENTITY(int(8), int(8)))) && true)))), false, _GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (injectionSwitch.x > injectionSwitch.y)))), false || (bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 ^ 1) << _GLF_IDENTITY(int(8), int(8)))), false || (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != ((1 ^ 1) << _GLF_IDENTITY(int(8), int(8))), (_injected_loop_counter != ((1 ^ 1) << _GLF_IDENTITY(int(8), int(8)))) && true)))), false, _GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (injectionSwitch.x > injectionSwitch.y))))))) || false))), _GLF_IDENTITY(bool(bool(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 ^ 1) << _GLF_IDENTITY(int(8), int(8)))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY((1 ^ 1) << _GLF_IDENTITY(int(8), int(8)), min((1 ^ 1) << _GLF_IDENTITY(int(8), int(8)), _GLF_IDENTITY((1 ^ 1) << _GLF_IDENTITY(int(8), int(8)), (_GLF_IDENTITY((1 ^ 1) << _GLF_IDENTITY(int(8), int(8)), (true ? (1 ^ 1) << _GLF_IDENTITY(int(8), int(8)) : _GLF_FUZZED(-19697)))) | ((1 ^ 1) << _GLF_IDENTITY(int(8), int(8)))))))), false || (_GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 ^ 1) << _GLF_IDENTITY(int(8), int(8)))))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY((1 ^ 1) << _GLF_IDENTITY(int(8), int(8)), min((1 ^ 1) << _GLF_IDENTITY(int(8), int(8)), _GLF_IDENTITY((1 ^ 1) << _GLF_IDENTITY(int(8), int(8)), (_GLF_IDENTITY((1 ^ 1) << _GLF_IDENTITY(int(8), int(8)), (true ? (1 ^ 1) << _GLF_IDENTITY(int(8), int(8)) : _GLF_FUZZED(-19697)))) | ((1 ^ 1) << _GLF_IDENTITY(int(8), int(8)))))))), false || (_GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 ^ 1) << _GLF_IDENTITY(int(8), int(8)))))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY((1 ^ 1) << _GLF_IDENTITY(int(8), int(8)), min((1 ^ 1) << _GLF_IDENTITY(int(8), int(8)), _GLF_IDENTITY((1 ^ 1) << _GLF_IDENTITY(int(8), int(8)), (_GLF_IDENTITY((1 ^ 1) << _GLF_IDENTITY(int(8), int(8)), (true ? (1 ^ 1) << _GLF_IDENTITY(int(8), int(8)) : _GLF_FUZZED(-19697)))) | ((1 ^ 1) << _GLF_IDENTITY(int(8), int(8)))))))), false || (_GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 ^ 1) << _GLF_IDENTITY(int(8), int(8)))))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), bvec3(bvec4(bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY((1 ^ 1) << _GLF_IDENTITY(int(8), int(8)), min((1 ^ 1) << _GLF_IDENTITY(int(8), int(8)), _GLF_IDENTITY((1 ^ 1) << _GLF_IDENTITY(int(8), int(8)), (_GLF_IDENTITY((1 ^ 1) << _GLF_IDENTITY(int(8), int(8)), (true ? (1 ^ 1) << _GLF_IDENTITY(int(8), int(8)) : _GLF_FUZZED(-19697)))) | ((1 ^ 1) << _GLF_IDENTITY(int(8), int(8)))))))), false || (_GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 ^ 1) << _GLF_IDENTITY(int(8), int(8)))))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false))))))), (bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 ^ 1) << _GLF_IDENTITY(int(8), int(8)))), false || (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (true ? _injected_loop_counter : _GLF_FUZZED((- _injected_loop_counter)))) != ((_GLF_IDENTITY(1 ^ 1, (1 ^ 1) + (0 >> _GLF_IDENTITY(int(2), int(2))))) << _GLF_IDENTITY(int(8), int(8)))))), false, _GLF_FALSE(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (injectionSwitch.x > injectionSwitch.y))))) || false))))), bool(bool(bool(bool(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 ^ 1) << _GLF_IDENTITY(int(8), int(8)))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((_GLF_IDENTITY(1, clamp(1, 1, 1)) ^ 1) << _GLF_IDENTITY(int(8), int(8)))), false || (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)) != ((1 ^ 1) << _GLF_IDENTITY(int(8), int(8)))))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 ^ 1) << _GLF_IDENTITY(int(8), int(8)))), false || (_GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 ^ _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec3(1, 0, 0)), 0 | (_GLF_IDENTITY(int(ivec3(1, 0, 0)), (int(ivec3(1, 0, 0))) << 0))))) << _GLF_IDENTITY(int(8), int(8)))))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || _GLF_IDENTITY(false, ! (! (false)))))))))))))) && true)); _GLF_IDENTITY(_injected_loop_counter --, 0 ^ (_injected_loop_counter --)))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), _GLF_IDENTITY(false, bool(bvec4(false, false, false, true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 for(int _injected_loop_counter = (_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), (~ (0)) / 1))) | int(_GLF_ZERO(_GLF_IDENTITY(0.0, float(vec4(_GLF_IDENTITY(0.0, (0.0) - 0.0), cos(0.0), 0.0, abs(1.0)))), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(4.6), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(0.1)), bvec2(true, false))).x))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   buf[virtual_gid] = 1;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), vec2(mat3((injectionSwitch), 0.0, 0.0, sin(0.0), determinant(mat4(1.0, 0.0, 0.0, tan(0.0), 0.0, 1.0, 0.0, 0.0, 0.0, length(vec2(0.0, 0.0)), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), _GLF_IDENTITY(dot(vec4(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(exp2(-9.2)))), 0.0, 1.0, 1.0), vec4(0.0, cos(0.0), 0.0, 0.0)), _GLF_IDENTITY(dot(vec4(1.0, 0.0, 1.0, 1.0), vec4(0.0, cos(0.0), 0.0, 0.0)), clamp(dot(vec4(1.0, 0.0, 1.0, _GLF_IDENTITY(1.0, float(vec2(1.0, 0.0)))), vec4(0.0, cos(0.0), 0.0, 0.0)), dot(vec4(1.0, 0.0, 1.0, 1.0), vec4(0.0, cos(0.0), 0.0, 0.0)), dot(vec4(1.0, 0.0, 1.0, 1.0), vec4(0.0, cos(0.0), 0.0, 0.0))))), _GLF_IDENTITY(1.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(42.76) : 1.0)), determinant(mat3(_GLF_IDENTITY(0.0, _GLF_ONE(1.0, injectionSwitch.y) * (0.0)), 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0))))) / vec2(1.0, 1.0))), min((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), (true ? (injectionSwitch) : _GLF_FUZZED(vec2(-3.0, -6153.0542)))) / vec2(1.0, 1.0))), clamp((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), (injectionSwitch) / vec2(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-896.243)), bool(false))), 1.0))), vec2(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(1.9) : 1.0))) / _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0)))), 1.0) * ((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0))) / vec2(1.0, 1.0))))), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0))))))), clamp(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), vec2(mat3((injectionSwitch), 0.0, 0.0, sin(0.0), determinant(mat4(1.0, 0.0, 0.0, tan(0.0), 0.0, 1.0, 0.0, 0.0, 0.0, length(vec2(0.0, 0.0)), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), _GLF_IDENTITY(dot(vec4(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(exp2(-9.2)))), 0.0, 1.0, 1.0), vec4(0.0, cos(0.0), 0.0, 0.0)), _GLF_IDENTITY(dot(vec4(1.0, 0.0, 1.0, 1.0), vec4(0.0, cos(0.0), 0.0, 0.0)), clamp(dot(vec4(1.0, 0.0, 1.0, _GLF_IDENTITY(1.0, float(vec2(1.0, 0.0)))), vec4(0.0, cos(0.0), 0.0, 0.0)), dot(vec4(1.0, 0.0, 1.0, 1.0), vec4(0.0, cos(0.0), 0.0, 0.0)), dot(vec4(1.0, 0.0, 1.0, 1.0), vec4(0.0, cos(0.0), 0.0, 0.0))))), _GLF_IDENTITY(1.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(42.76) : 1.0)), determinant(mat3(_GLF_IDENTITY(0.0, _GLF_ONE(1.0, injectionSwitch.y) * (0.0)), 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0))))) / vec2(1.0, 1.0))), min((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), (true ? (injectionSwitch) : _GLF_FUZZED(vec2(-3.0, -6153.0542)))) / vec2(1.0, 1.0))), clamp((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), (injectionSwitch) / vec2(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-896.243)), bool(false))), 1.0))), vec2(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(1.9) : 1.0))) / _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0)))), 1.0) * ((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0))) / vec2(1.0, 1.0))))), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0))))))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), vec2(mat3((injectionSwitch), 0.0, 0.0, sin(0.0), determinant(mat4(1.0, 0.0, 0.0, tan(0.0), 0.0, 1.0, 0.0, 0.0, 0.0, length(vec2(0.0, 0.0)), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), _GLF_IDENTITY(dot(vec4(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(exp2(-9.2)))), 0.0, 1.0, 1.0), vec4(0.0, cos(0.0), 0.0, 0.0)), _GLF_IDENTITY(dot(vec4(1.0, 0.0, 1.0, 1.0), vec4(0.0, cos(0.0), 0.0, 0.0)), clamp(dot(vec4(1.0, 0.0, 1.0, _GLF_IDENTITY(1.0, float(vec2(1.0, 0.0)))), vec4(0.0, cos(0.0), 0.0, 0.0)), dot(vec4(1.0, 0.0, 1.0, 1.0), vec4(0.0, cos(0.0), 0.0, 0.0)), dot(vec4(1.0, 0.0, 1.0, 1.0), vec4(0.0, cos(0.0), 0.0, 0.0))))), _GLF_IDENTITY(1.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(42.76) : 1.0)), determinant(mat3(_GLF_IDENTITY(0.0, _GLF_ONE(1.0, injectionSwitch.y) * (0.0)), 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0))))) / vec2(1.0, 1.0))), min((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), (true ? (injectionSwitch) : _GLF_FUZZED(vec2(-3.0, -6153.0542)))) / vec2(1.0, 1.0))), clamp((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), (injectionSwitch) / vec2(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-896.243)), bool(false))), 1.0))), vec2(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(1.9) : 1.0))) / _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0)))), 1.0) * ((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0))) / vec2(1.0, 1.0))))), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0))))))), mix(vec2((_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), vec2(mat3((injectionSwitch), 0.0, 0.0, sin(0.0), determinant(mat4(1.0, 0.0, 0.0, tan(0.0), 0.0, 1.0, 0.0, 0.0, 0.0, length(vec2(0.0, 0.0)), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), _GLF_IDENTITY(dot(vec4(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(exp2(-9.2)))), 0.0, 1.0, 1.0), vec4(0.0, cos(0.0), 0.0, 0.0)), _GLF_IDENTITY(dot(vec4(1.0, 0.0, 1.0, 1.0), vec4(0.0, cos(0.0), 0.0, 0.0)), clamp(dot(vec4(1.0, 0.0, 1.0, _GLF_IDENTITY(1.0, float(vec2(1.0, 0.0)))), vec4(0.0, cos(0.0), 0.0, 0.0)), dot(vec4(1.0, 0.0, 1.0, 1.0), vec4(0.0, cos(0.0), 0.0, 0.0)), dot(vec4(1.0, 0.0, 1.0, 1.0), vec4(0.0, cos(0.0), 0.0, 0.0))))), _GLF_IDENTITY(1.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(42.76) : 1.0)), determinant(mat3(_GLF_IDENTITY(0.0, _GLF_ONE(1.0, injectionSwitch.y) * (0.0)), 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0))))) / vec2(1.0, 1.0))), min((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), (true ? (injectionSwitch) : _GLF_FUZZED(vec2(-3.0, -6153.0542)))) / vec2(1.0, 1.0))), clamp((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), (injectionSwitch) / vec2(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-896.243)), bool(false))), 1.0))), vec2(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(1.9) : 1.0))) / _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0)))), 1.0) * ((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0))) / vec2(1.0, 1.0))))), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0))))))))[0], _GLF_FUZZED(2.8)), vec2(_GLF_FUZZED(4.5), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), vec2(mat3((injectionSwitch), 0.0, 0.0, sin(0.0), determinant(mat4(1.0, 0.0, 0.0, tan(0.0), 0.0, 1.0, 0.0, 0.0, 0.0, length(vec2(0.0, 0.0)), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), _GLF_IDENTITY(dot(vec4(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(exp2(-9.2)))), 0.0, 1.0, 1.0), vec4(0.0, cos(0.0), 0.0, 0.0)), _GLF_IDENTITY(dot(vec4(1.0, 0.0, 1.0, 1.0), vec4(0.0, cos(0.0), 0.0, 0.0)), clamp(dot(vec4(1.0, 0.0, 1.0, _GLF_IDENTITY(1.0, float(vec2(1.0, 0.0)))), vec4(0.0, cos(0.0), 0.0, 0.0)), dot(vec4(1.0, 0.0, 1.0, 1.0), vec4(0.0, cos(0.0), 0.0, 0.0)), dot(vec4(1.0, 0.0, 1.0, 1.0), vec4(0.0, cos(0.0), 0.0, 0.0))))), _GLF_IDENTITY(1.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(42.76) : 1.0)), determinant(mat3(_GLF_IDENTITY(0.0, _GLF_ONE(1.0, injectionSwitch.y) * (0.0)), 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0))))) / vec2(1.0, 1.0))), min((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), (true ? (injectionSwitch) : _GLF_FUZZED(vec2(-3.0, -6153.0542)))) / vec2(1.0, 1.0))), clamp((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), (injectionSwitch) / vec2(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-896.243)), bool(false))), 1.0))), vec2(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(1.9) : 1.0))) / _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0)))), 1.0) * ((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0))) / vec2(1.0, 1.0))))), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0))))))))[1]), bvec2(false, true))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), vec2(mat3((injectionSwitch), 0.0, 0.0, sin(0.0), determinant(mat4(1.0, 0.0, 0.0, tan(0.0), 0.0, 1.0, 0.0, 0.0, 0.0, length(vec2(0.0, 0.0)), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), _GLF_IDENTITY(dot(vec4(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(exp2(-9.2)))), 0.0, 1.0, 1.0), vec4(0.0, cos(0.0), 0.0, 0.0)), _GLF_IDENTITY(dot(vec4(1.0, 0.0, 1.0, 1.0), vec4(0.0, cos(0.0), 0.0, 0.0)), clamp(dot(vec4(1.0, 0.0, 1.0, _GLF_IDENTITY(1.0, float(vec2(1.0, 0.0)))), vec4(0.0, cos(0.0), 0.0, 0.0)), dot(vec4(1.0, 0.0, 1.0, 1.0), vec4(0.0, cos(0.0), 0.0, 0.0)), dot(vec4(1.0, 0.0, 1.0, 1.0), vec4(0.0, cos(0.0), 0.0, 0.0))))), _GLF_IDENTITY(1.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(42.76) : 1.0)), determinant(mat3(_GLF_IDENTITY(0.0, _GLF_ONE(1.0, injectionSwitch.y) * (0.0)), 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0))))) / vec2(1.0, 1.0))), min((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), (true ? (injectionSwitch) : _GLF_FUZZED(vec2(-3.0, -6153.0542)))) / vec2(1.0, 1.0))), clamp((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), (injectionSwitch) / vec2(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-896.243)), bool(false))), 1.0))), vec2(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(1.9) : 1.0))) / _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0)))), 1.0) * ((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0))) / vec2(1.0, 1.0))))), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0))))))))) - vec2(0.0, 0.0)), injectionSwitch)).x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((false), false || ((false))))) || false), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), _GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)) && true, ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(false, (false) || false)) && true), ! (! (! ((_GLF_IDENTITY(false, (false) || false)) && true))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(false, (false) || false)) && true)))), true, false)))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
            {
            }
           else
            {
             barrier();
            }
          }
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))), true && (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true))))))) && true))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(false))
                return;
              }
             else
              {
               barrier();
              }
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_IDENTITY(_GLF_DEAD(false), false || _GLF_IDENTITY((_GLF_DEAD(false)), ! (_GLF_IDENTITY(! ((_GLF_DEAD(false))), (! ((_GLF_DEAD(false)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
        barrier();
       for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          return;
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false, true))), ! _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false, true))))), ((! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false, true)))))) || false))))
            {
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
              }
             return;
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         barrier();
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           barrier();
          }
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) > injectionSwitch.y))) && true, ! (! (_GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) > injectionSwitch.y))) && true, bool(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) > injectionSwitch.y)), false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) > injectionSwitch.y))))))), ! (! ((_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) > injectionSwitch.y)), false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) > injectionSwitch.y)))))))))) && true, false, true))))))))), false || (! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) > injectionSwitch.y))) && true, ! (! (_GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) > injectionSwitch.y))) && true, bool(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) > injectionSwitch.y, true && (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) > injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) > injectionSwitch.y, true, true)))))) || false))), false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) > injectionSwitch.y))))))), ! (! ((_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-31.85) : injectionSwitch.x)))) > injectionSwitch.y)), false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) > injectionSwitch.y)))))))))) && true, false, true))))))))))))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)))))))))
              barrier();
            }
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         break;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), true))))), (_GLF_IDENTITY(_GLF_IDENTITY(false || (_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, bool(bvec2(false, true))))), true && (false || (_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false))), true))))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(false || (_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, bool(bvec2(false, true))))), true && (false || (_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false))), true))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false || (_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, bool(bvec2(false, true))))), true && (false || (_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false))), true)))))))), bool(bvec2(! (_GLF_IDENTITY(false || (_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, bool(bvec2(false, true))))), true && (false || (_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false))), true)))))))), true)))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        {
         if(_GLF_DEAD(false))
          break;
         do
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), bool(bool(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))))))))
            barrier();
           barrier();
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) && true)), bool(bvec4(_GLF_DEAD(false), false, true, false))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) && true))), (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) && true)))) || false))
          barrier();
        }
       if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))), bool(bool(! (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false)))))))))))))))
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))) || false))))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       continue;
      }
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], max(injectionSwitch[1], injectionSwitch[1])))).y))); _injected_loop_counter ++)
      {
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y))))
        return;
       barrier();
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (true && (false)))))), bool(bvec4(false, false, false, false))))))))
  {
  }
 else
  {
   if(subgroup_local_id + 1 < subgroup_size)
    {
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) | (1 ^ ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 0)); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false)))))), bool(bvec2(false, true)))))
          {
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       else
        {
         for(int _injected_loop_counter = (0 | ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false)), false || (bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false)))))) && true)), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
            barrier();
          }
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(2, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(2, (2) | 0), _GLF_IDENTITY(0 ^ (2), 0 | (_GLF_IDENTITY(0 ^ (2), clamp(0 ^ (_GLF_IDENTITY(2, max(2, 2))), 0 ^ (2), 0 ^ (2))))))), clamp(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(2, (2) | 0), _GLF_IDENTITY(0 ^ (2), 0 | (_GLF_IDENTITY(0 ^ (2), clamp(0 ^ (2), 0 ^ (2), 0 ^ (2))))))), (true ? (_GLF_IDENTITY(_GLF_IDENTITY(2, _GLF_IDENTITY((2) | 0, (_GLF_IDENTITY((2) | 0, ((2) | 0) | ((2) | 0))) >> 0)), _GLF_IDENTITY(0 ^ (2), 0 | (_GLF_IDENTITY(0 ^ _GLF_IDENTITY((2), max((2), (2))), clamp(0 ^ (2), 0 ^ (2), 0 ^ (2))))))) : _GLF_FUZZED(50430))), (_GLF_IDENTITY(_GLF_IDENTITY(2, (2) | 0), _GLF_IDENTITY(0 ^ (2), 0 | (_GLF_IDENTITY(0 ^ _GLF_IDENTITY((2), ((2)) - 0), clamp(0 ^ (2), 0 ^ (2), 0 ^ (2))))))), (_GLF_IDENTITY(_GLF_IDENTITY(2, (2) | 0), _GLF_IDENTITY(0 ^ (2), 0 | (_GLF_IDENTITY(0 ^ (2), clamp(0 ^ (2), _GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, (0) >> 0))) ^ (2), 0 ^ _GLF_IDENTITY((2), min((2), (2))))))))))) + 0)), 4, 64, _GLF_IDENTITY(4, min(_GLF_IDENTITY(4, (4) >> 0), _GLF_IDENTITY(4, min(4, 4)))));
     subgroupAll(false);
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY((true), ! (_GLF_IDENTITY(! ((true)), ! (! (! ((true))))))) && true), (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = (0 & 89813); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             barrier();
            }
          }
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), true && (_GLF_WRAPPED_IF_FALSE(false))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             return;
             if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true)) && true)))
              barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), vec2(1.0, 1.0) * (injectionSwitch)).y))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           barrier();
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
        }
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), false || ((! (false)))))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), true, true)), (bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), true, true))) && true)))))) || false))
              barrier();
             barrier();
            }
           barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec2(false, false)))))), (injectionSwitch.x > injectionSwitch.y)) || (false))))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             return;
            }
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (91136 & 0)); _injected_loop_counter --)
        {
         barrier();
        }
      }
    }
   else
    {
     atomicStore(buf[next_virtual_gid], uint(2), 4, _GLF_IDENTITY(64, _GLF_IDENTITY((64) / 1, ((64) / _GLF_IDENTITY(1, min(1, 1))) >> 0)), 4);
     if(_GLF_DEAD(false))
      barrier();
     subgroupAll(true);
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), false || ((! (false)))))), true && (_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY(_GLF_IDENTITY((! (false)), false || ((! (false)))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(! (false), false || (_GLF_IDENTITY(! (false), false || (! (false)))))), false || ((! (false))))))))))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-8.8)), float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat3(injectionSwitch.x, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, exp(0.0), 0.0), mat3(mat3(mat3(injectionSwitch.x, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, exp(0.0), 0.0)))))), mix(float(_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat3(injectionSwitch.x, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, exp(0.0), 0.0), mat3(mat3(mat3(injectionSwitch.x, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, exp(0.0), 0.0))))))), float(_GLF_FUZZED(2621.9658)), bool(false)))), bool(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y)))))) / 1.0) > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(0.6)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) > injectionSwitch.y)))), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(1.0, 1.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(1.0, 1.0, 1.0, 0.0)))), injectionSwitch.x))), float(_GLF_FUZZED(0.6)), bool(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))) > injectionSwitch.y)))))))))))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
      }
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(7.0)), bool(false))), injectionSwitch.x)), 0.0, 0.0, 1.0, 0.0, 1.0), (mat3x2(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat3x2(injectionSwitch.x, 0.0, 0.0, 0.0, 0.0, 0.0), mat2(1.0) * (mat3x2(injectionSwitch.x, 0.0, 0.0, 0.0, 0.0, 0.0))))), _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), _GLF_IDENTITY(float(_GLF_FUZZED(7.0)), 0.0 + (float(_GLF_FUZZED(7.0)))), bool(false))), injectionSwitch.x)), 0.0, 0.0, 1.0, 0.0, 1.0)) + mat3x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))) > injectionSwitch.y))))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
}
