#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4x3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)), vec2(injectionSwitch[0], injectionSwitch[1])), 0.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0, 0.0, 1.0, 1.0, 1.0, abs(abs(0.0)), 0.0)), (_GLF_IDENTITY(false ? _GLF_FUZZED(injectionSwitch) : vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch)))) / vec2(1.0, 1.0))[1])), _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, round(length(normalize(vec4(1.0, _GLF_IDENTITY(1.0, (1.0) * 1.0), 1.0, 1.0)))), 0.0, 0.0, 1.0, 1.0, 1.0, abs(abs(0.0)), 0.0)), mix(vec2(_GLF_IDENTITY((false ? _GLF_FUZZED(injectionSwitch) : vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(_GLF_FUZZED(-58.22), (true ? _GLF_FUZZED(-58.22) : _GLF_FUZZED(-8.1)))), float(0.0), bool(true))), 0.0, 0.0)), 0.0)), 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0, 0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-2.4)), float(1.0), bool(true))), 1.0, 1.0, _GLF_IDENTITY(_GLF_IDENTITY(abs(abs(0.0)), (_GLF_IDENTITY(true ? abs(abs(0.0)) : _GLF_FUZZED(-11.85), float(_GLF_IDENTITY(vec4(true ? abs(abs(0.0)) : _GLF_FUZZED(-11.85), determinant(mat4(1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, sin(0.0), 1.0)), 1.0, log(1.0)), (vec4(true ? abs(abs(0.0)) : _GLF_FUZZED(-11.85), determinant(mat4(1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, sin(0.0), 1.0)), 1.0, log(1.0))) * vec4(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))))))), (false ? _GLF_FUZZED(551.991) : _GLF_IDENTITY(abs(abs(0.0)), (true ? abs(abs(0.0)) : _GLF_FUZZED(-11.85))))), 0.0))), ((false ? _GLF_FUZZED(injectionSwitch) : vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(_GLF_FUZZED(-58.22), (true ? _GLF_FUZZED(-58.22) : _GLF_FUZZED(-8.1)))), float(0.0), bool(true))), 0.0, 0.0)), 0.0)), 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0, 0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-2.4)), float(1.0), bool(true))), 1.0, 1.0, _GLF_IDENTITY(_GLF_IDENTITY(abs(abs(0.0)), (_GLF_IDENTITY(true ? abs(abs(0.0)) : _GLF_FUZZED(-11.85), float(_GLF_IDENTITY(vec4(true ? abs(abs(0.0)) : _GLF_FUZZED(-11.85), determinant(mat4(1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, sin(0.0), 1.0)), 1.0, log(1.0)), (vec4(true ? abs(abs(0.0)) : _GLF_FUZZED(-11.85), determinant(mat4(1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, sin(0.0), 1.0)), 1.0, log(1.0))) * vec4(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))))))), (false ? _GLF_FUZZED(551.991) : _GLF_IDENTITY(abs(abs(0.0)), (true ? abs(abs(0.0)) : _GLF_FUZZED(-11.85))))), 0.0)))) + tan(vec2(0.0, 0.0)))[0], _GLF_FUZZED(60.30)), vec2(_GLF_FUZZED(-13.41), _GLF_IDENTITY(_GLF_IDENTITY((false ? _GLF_FUZZED(injectionSwitch) : vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY(0.0, _GLF_IDENTITY(min(0.0, 0.0), float(vec2(min(0.0, 0.0), 1.0)))), 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(_GLF_IDENTITY(1.8, clamp(_GLF_IDENTITY(1.8, (false ? _GLF_FUZZED(2.8) : 1.8)), 1.8, 1.8)))), float(1.0), bool(true))), abs(abs(0.0)), 0.0)))[1], mix(float(_GLF_FUZZED(2889.9332)), float((false ? _GLF_FUZZED(injectionSwitch) : vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(0.0) : _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0)))))), 0.0)), 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(1.8)), float(1.0), bool(true))), abs(abs(0.0)), 0.0)))[1]), bool(true))), mix(float((false ? _GLF_FUZZED(injectionSwitch) : vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0, 0.0, 1.0, 1.0, 1.0, abs(abs(0.0)), 0.0)))[1]), float(_GLF_FUZZED(-70.07)), bool(false)))), bvec2(false, true)))))).x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), (int(6)) | 0), int(6))) >> _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, (_GLF_IDENTITY(6, ~ (~ (6)))) | (6)))))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))));
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, true)), bool(bvec2(bool(bvec3(false, true, true)), true))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), true && ((_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) < injectionSwitch.y))))))
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
    }
   do
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), ! (! _GLF_IDENTITY((_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))), ! (! ((_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))))))))
      {
       do
        {
         barrier();
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_LOOP(false), false, false)), ! (! (bool(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_LOOP(false), false, false), bvec3(bvec3(bvec3(_GLF_WRAPPED_LOOP(false), false, false))))))))));
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), ! (! (false)))))
  {
   for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), 0 ^ (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), 0 ^ (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (int(_GLF_ZERO(0.0, injectionSwitch.x))) >> 0))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, _GLF_IDENTITY(bool(bvec4(_injected_loop_counter != 1, false, true, true)), true && (bool(bvec4(_injected_loop_counter != 1, false, _GLF_IDENTITY(true, (true) || false), true)))))); _injected_loop_counter ++)
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true)) && true))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec3(bvec3(false, true, false))))))))
              barrier();
            }
           else
            {
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
        }
       else
        {
        }
       if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(false)), (! (_GLF_WRAPPED_IF_FALSE(false))) || false))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(false)), (! (_GLF_WRAPPED_IF_FALSE(false))) || false)))))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true))))) && true))
        {
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
uint subgroup_size = 16;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, true, _GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false))))), (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(bvec4(false, false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
    {
    }
   else
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) * _GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) || false) ? _GLF_FUZZED(-77845) : 1, clamp(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false) ? _GLF_FUZZED(-77845) : 1, (_GLF_IDENTITY(false ? _GLF_FUZZED(-77845) : 1, (false ? _GLF_FUZZED(-77845) : 1) * 1)) | 0), _GLF_IDENTITY(false ? _GLF_FUZZED(-77845) : 1, clamp(false ? _GLF_FUZZED(-77845) : 1, false ? _GLF_FUZZED(-77845) : 1, false ? _GLF_FUZZED(-77845) : 1)), _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false))) ? _GLF_FUZZED(-77845) : 1))))))) >> _GLF_IDENTITY(int(2), int(2))), int(ivec3(((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), _GLF_IDENTITY((int(2)) * 1, min(_GLF_IDENTITY((int(2)) * 1, max((int(2)) * 1, (int(2)) * 1)), (int(2)) * 1))))) >> _GLF_IDENTITY(int(2), int(2))), 0, (_GLF_IDENTITY(_GLF_IDENTITY(0, (false ? _GLF_FUZZED(-21278) : 0)), int(ivec4(_GLF_IDENTITY(0, 0 ^ (0)), 0, 1, 1))) >> _GLF_IDENTITY(int(4), int(4))))))); _injected_loop_counter ++)
          {
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               else
                {
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 do
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), false || (bool(bool(false))))), (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY(bool(bool(false)), false || (bool(bool(_GLF_IDENTITY(false, (false) || false)))))), (injectionSwitch.x > injectionSwitch.y)))) || false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
          barrier();
        }
       else
        {
         do
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2((! (false)), true)), true && (bool(bvec2((! (false)), true)))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY((! (false)), ! (_GLF_IDENTITY(! ((! _GLF_IDENTITY(_GLF_IDENTITY((false), (_GLF_IDENTITY((false), bool(bvec2((false), false)))) || false), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || (_GLF_IDENTITY((false), (_GLF_IDENTITY((false), bool(bvec2((false), false)))) || false))))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(! ((! _GLF_IDENTITY(_GLF_IDENTITY((false), (_GLF_IDENTITY((false), bool(bvec2((false), false)))) || false), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || (_GLF_IDENTITY((false), (_GLF_IDENTITY((false), bool(bvec2((false), false)))) || false))))), bool(bvec2(_GLF_IDENTITY(! ((! _GLF_IDENTITY(_GLF_IDENTITY((false), (_GLF_IDENTITY((false), bool(bvec2((false), false)))) || false), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || (_GLF_IDENTITY((false), (_GLF_IDENTITY((false), bool(bvec2((false), false)))) || false))))), bool(bvec2(! ((! _GLF_IDENTITY(_GLF_IDENTITY((false), (_GLF_IDENTITY((false), bool(bvec2((false), false)))) || false), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || (_GLF_IDENTITY((false), (_GLF_IDENTITY((false), bool(bvec2((false), false)))) || false))))), true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(! ((! _GLF_IDENTITY(_GLF_IDENTITY((false), (_GLF_IDENTITY((false), bool(bvec2((false), false)))) || false), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || (_GLF_IDENTITY((false), (_GLF_IDENTITY((false), bool(bvec2((false), false)))) || false))))), bool(bvec2(_GLF_IDENTITY(! ((! _GLF_IDENTITY(_GLF_IDENTITY((false), (_GLF_IDENTITY((false), bool(bvec2((false), false)))) || false), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || (_GLF_IDENTITY((false), (_GLF_IDENTITY((false), bool(bvec2((false), false)))) || false))))), bool(bvec2(! ((! _GLF_IDENTITY(_GLF_IDENTITY((false), (_GLF_IDENTITY((false), bool(bvec2((false), false)))) || false), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || (_GLF_IDENTITY((false), (_GLF_IDENTITY((false), bool(bvec2((false), false)))) || false))))), true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true), bvec2(bvec3(bvec2(_GLF_IDENTITY(! ((! _GLF_IDENTITY(_GLF_IDENTITY((false), (_GLF_IDENTITY((false), bool(bvec2((false), false)))) || false), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || (_GLF_IDENTITY((false), (_GLF_IDENTITY((false), bool(bvec2((false), false)))) || false))))), bool(bvec2(_GLF_IDENTITY(! ((! _GLF_IDENTITY(_GLF_IDENTITY((false), (_GLF_IDENTITY((false), bool(bvec2((false), false)))) || false), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || (_GLF_IDENTITY((false), (_GLF_IDENTITY((false), bool(bvec2((false), false)))) || false))))), bool(bvec2(! ((! _GLF_IDENTITY(_GLF_IDENTITY((false), (_GLF_IDENTITY((false), bool(bvec2((false), false)))) || false), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || (_GLF_IDENTITY((false), (_GLF_IDENTITY((false), bool(bvec2((false), false)))) || false))))), true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true), false))), true, true))))))), true)), bool(bvec2(bool(bvec2(_GLF_IDENTITY((! (false)), ! (! ((! _GLF_IDENTITY(_GLF_IDENTITY((false), (_GLF_IDENTITY((false), bool(bvec2((false), false)))) || false), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(radians(4.5)))))))) || (_GLF_IDENTITY((false), (_GLF_IDENTITY(_GLF_IDENTITY((false), ! (! ((false)))), bool(bvec2((false), false)))) || false))))))), _GLF_IDENTITY(true, bool(bvec3(true, true, true))))), false))), true && (bool(bvec2((! (false)), true))))), ((_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY((! (false)), ! (! ((! _GLF_IDENTITY(_GLF_IDENTITY((false), (_GLF_IDENTITY((false), bool(bvec2((false), false)))) || false), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-23.83)), vec2(_GLF_FUZZED((+ -6491.1661)), (injectionSwitch)[1]), bvec2(false, true))).x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || (_GLF_IDENTITY((false), (_GLF_IDENTITY((false), bool(_GLF_IDENTITY(bvec2((false), false), bvec2(bvec2(bvec2((false), false))))))) || false)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-23.83)), vec2(_GLF_FUZZED((+ -6491.1661)), (injectionSwitch)[1]), bvec2(false, true))).x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || (_GLF_IDENTITY((false), (_GLF_IDENTITY((false), bool(_GLF_IDENTITY(bvec2((false), false), bvec2(bvec2(bvec2((false), false))))))) || false)), (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((_GLF_IDENTITY(injectionSwitch, vec2(mat4x3(injectionSwitch, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, sin(0.0), 0.0))))[0], _GLF_FUZZED(-23.83)), vec2(_GLF_FUZZED((+ -6491.1661)), _GLF_IDENTITY((injectionSwitch), vec2(mat2x3(_GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch))), 0.0, 0.0, 1.0, 1.0)))[1]), bvec2(false, true))).x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || (_GLF_IDENTITY((false), (_GLF_IDENTITY((false), bool(_GLF_IDENTITY(bvec2((false), false), bvec2(bvec2(bvec2((false), false))))))) || false))) && true))))))))), true)), bool(bvec2(bool(bvec2(_GLF_IDENTITY((! (false)), ! (! ((! _GLF_IDENTITY(_GLF_IDENTITY((false), (_GLF_IDENTITY((false), bool(bvec2((false), false)))) || false), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || (_GLF_IDENTITY((false), (_GLF_IDENTITY((false), bool(bvec2((false), false)))) || false))))))), true)), false))), true && (bool(bvec2((! (false)), true)))))) && true) || false)))))
            {
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), int(ivec3(int(5), 0, 1))))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter ++)
                {
                 barrier();
                }
              }
             for(int _injected_loop_counter = (0 ^ int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_IDENTITY(_injected_loop_counter ++, (_GLF_IDENTITY(_injected_loop_counter ++, 1 * (_injected_loop_counter ++))) / ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)))))
              {
               barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-8.8) : injectionSwitch.x)) > injectionSwitch.y))));
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) << _GLF_IDENTITY(uvec3(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(0.7)), float(0.0), bool(true))), 0.0, 0.0)), injectionSwitch.x)), min(uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((injectionSwitch.x) + abs(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-2.1)), vec2(_GLF_FUZZED(9.9), (injectionSwitch)[1]), bvec2(false, true))).x)), max((injectionSwitch.x) + abs(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-2.1)), vec2(_GLF_FUZZED(9.9), (injectionSwitch)[1]), bvec2(false, true))).x)), (injectionSwitch.x) + abs(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-2.1)), vec2(_GLF_FUZZED(9.9), (injectionSwitch)[1]), bvec2(false, true))).x)))))), _GLF_ZERO(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, float(vec3(0.0, 1.0, 0.0))), _GLF_IDENTITY(0.0, min(0.0, 0.0)))), injectionSwitch.x)), uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))).x;
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    {
     do
      {
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 else
  {
  }
 uint virtual_gid = workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, uint(uvec2(subgroup_size, 0u))), subgroup_size, _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)))) + subgroup_local_id;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, false || (true))), bool(bvec3(! (_GLF_IDENTITY(true, false || (true))), true, false))))), ! (_GLF_IDENTITY(! (true), (! (true)) || false))), (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), _GLF_IDENTITY((! (true)) || false, ! (! ((! (true)) || false))))))) || false)))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) && true)))), (_GLF_DEAD(false)) || false))
        barrier();
       barrier();
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY((1 ^ 1), ((1 ^ 1)) + 0)); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             barrier();
            }
          }
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 0.0, 0.0))).y, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 0.0, 0.0))).y) - 0.0, (true ? _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 0.0, 0.0))).y) - 0.0, max((_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 0.0, 0.0))).y) - 0.0, (_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 0.0, 0.0))).y) - 0.0)) : _GLF_FUZZED(6.9))))))))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           else
            {
            }
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(3055.4574) : injectionSwitch.x)) > injectionSwitch.y))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y))), true && (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true)))))), _GLF_IDENTITY(true, ! (! (true))) && (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false), true && _GLF_IDENTITY((_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(_GLF_IDENTITY(bvec2((_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true), bvec2(bvec2(bvec2((_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true))))))))))))), (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 0.0), _GLF_IDENTITY(mat2(_GLF_IDENTITY(mat2x4(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 0.0), mat2(mat3x2(mat2(injectionSwitch, 1.0, 0.0))))), (mat2x4(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 0.0), mat2(mat3x2(mat2(injectionSwitch, 1.0, 0.0)))))) - mat2x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), (true ? mat2(_GLF_IDENTITY(mat2x4(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 0.0), mat2(mat3x2(mat2(injectionSwitch, 1.0, 0.0))))), (mat2x4(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 0.0), mat2(mat3x2(mat2(injectionSwitch, 1.0, 0.0)))))) - mat2x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))) : _GLF_FUZZED(mat2(-0.7, -6.3, -6.7, 8575.7520))))))).y))), true && (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), _GLF_IDENTITY(! (! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y))), bool(bvec4(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))), true && (! (! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y))), bool(bvec4(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((injectionSwitch.x), float(vec4(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x), _GLF_IDENTITY(float(mat4x2((injectionSwitch.x), round(length(normalize(vec2(1.0, 1.0)))), length(0.0), 0.0, sqrt(0.0), 0.0, _GLF_IDENTITY(dot(vec4(1.0, 1.0, 1.0, 1.0), vec4(0.0, sin(0.0), 0.0, 0.0)), dot(vec4(1.0, 1.0, 1.0, 1.0), vec4(0.0, sin(0.0), 0.0, 0.0))), 0.0)), clamp(float(mat4x2((injectionSwitch.x), round(length(normalize(vec2(1.0, 1.0)))), length(0.0), 0.0, sqrt(0.0), 0.0, _GLF_IDENTITY(dot(vec4(1.0, 1.0, 1.0, 1.0), vec4(0.0, sin(0.0), 0.0, 0.0)), dot(vec4(1.0, 1.0, 1.0, 1.0), vec4(0.0, sin(0.0), 0.0, 0.0))), 0.0)), float(mat4x2((injectionSwitch.x), round(length(normalize(vec2(1.0, 1.0)))), length(0.0), 0.0, sqrt(0.0), 0.0, _GLF_IDENTITY(dot(vec4(1.0, 1.0, 1.0, 1.0), vec4(0.0, sin(0.0), 0.0, 0.0)), dot(vec4(1.0, 1.0, 1.0, 1.0), vec4(0.0, sin(0.0), 0.0, 0.0))), 0.0)), float(mat4x2((injectionSwitch.x), round(length(normalize(vec2(1.0, 1.0)))), length(0.0), 0.0, sqrt(0.0), 0.0, _GLF_IDENTITY(dot(vec4(1.0, 1.0, 1.0, 1.0), vec4(0.0, sin(0.0), 0.0, 0.0)), dot(vec4(1.0, 1.0, 1.0, 1.0), vec4(0.0, sin(0.0), 0.0, 0.0))), 0.0))))), clamp((injectionSwitch.x), (injectionSwitch.x), (injectionSwitch.x))), 1.0, 1.0, 0.0))) / 1.0) > injectionSwitch.y))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))))))))) || false))))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat2(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / sqrt(1.0)), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))), 0.0, determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 0.0)))))))))
                    barrier();
                   barrier();
                  }
                 do
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                      }
                     else
                      {
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           barrier();
                          }
                         else
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                          }
                         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                          {
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             do
                              {
                               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))))
                                barrier();
                              }
                             while(_GLF_WRAPPED_LOOP(false));
                            }
                           else
                            {
                            }
                          }
                         if(_GLF_DEAD(false))
                          {
                           do
                            {
                             if(_GLF_DEAD(false))
                              barrier();
                             for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 >> _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(6), int(6)))); _GLF_IDENTITY(_injected_loop_counter --, (_GLF_IDENTITY(_injected_loop_counter --, ~ (~ (_injected_loop_counter --)))) ^ 0))
                              {
                               barrier();
                              }
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                          }
                        }
                       else
                        {
                        }
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                 if(_GLF_DEAD(false))
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       barrier();
                      }
                     else
                      {
                      }
                    }
                  }
                }
              }
             else
              {
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       else
        {
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(true && (_GLF_DEAD(false)), (_GLF_IDENTITY(true && (_GLF_DEAD(false)), false || (_GLF_IDENTITY(true && (_GLF_DEAD(false)), bool(bool(true && (_GLF_DEAD(false)))))))) || false)))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(_GLF_IDENTITY(int(7), _GLF_IDENTITY(min(int(7), int(7)), min(min(int(7), int(7)), min(int(7), int(7))))), _GLF_IDENTITY(int(int(_GLF_IDENTITY(int(7), min(int(7), int(7))))), int(_GLF_IDENTITY(ivec3(int(_GLF_IDENTITY(int(_GLF_IDENTITY(int(7), min(int(7), int(7)))), (_GLF_IDENTITY(int(_GLF_IDENTITY(int(7), min(int(7), int(7)))), (int(_GLF_IDENTITY(int(7), min(int(7), int(7))))) ^ 0)) | (int(_GLF_IDENTITY(int(7), min(int(7), int(7))))))), 0, 0), ivec3(ivec4(ivec3(int(int(_GLF_IDENTITY(int(7), min(int(7), int(7))))), 0, 0), 1)))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | 1)); _injected_loop_counter ++)
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), true && (bool(bvec2(false, false))))))))))
        {
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (-60084 & 0)); _injected_loop_counter --)
            {
             do
              {
               for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _GLF_IDENTITY(_injected_loop_counter ++, _GLF_IDENTITY((false ? _GLF_FUZZED(int(num_workgroup)) : _injected_loop_counter ++), ((false ? _GLF_FUZZED(int(num_workgroup)) : _injected_loop_counter ++)) / int(_GLF_ONE(1.0, injectionSwitch.y)))))
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter --)
                  {
                   barrier();
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, (1) + 0)); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) && true)))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)), ! (! (bool(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_DEAD(false)), true && ((_GLF_DEAD(false)))) && true))))))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))) || false, ! (_GLF_IDENTITY(! ((false) || false), false || (! ((false) || false))))))));
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter)) != _GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, max(0, 0))))); _injected_loop_counter --)
    {
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(16.11)), bool(false))))) > injectionSwitch.y))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_id * subgroup_size), min(~ (subgroup_id * subgroup_size), ~ (subgroup_id * subgroup_size))))), ~ (~ _GLF_IDENTITY((workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_id * subgroup_size), min(~ (subgroup_id * subgroup_size), _GLF_IDENTITY(~ (subgroup_id * subgroup_size), (~ (subgroup_id * subgroup_size)) | 0u)))))), uint(_GLF_IDENTITY(uint((workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_id * subgroup_size), min(~ (subgroup_id * subgroup_size), _GLF_IDENTITY(~ (subgroup_id * subgroup_size), (~ (subgroup_id * subgroup_size)) | 0u))))))), 0u | (uint((workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_id * subgroup_size), min(~ (subgroup_id * subgroup_size), _GLF_IDENTITY(~ (subgroup_id * subgroup_size), (~ (subgroup_id * subgroup_size)) | 0u))))))))))))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_id * subgroup_size), min(~ (_GLF_IDENTITY(subgroup_id, (subgroup_id) * 1u) * subgroup_size), ~ (subgroup_id * subgroup_size))))), clamp(_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_id * subgroup_size), min(~ (_GLF_IDENTITY(subgroup_id, (subgroup_id) * 1u) * subgroup_size), ~ (subgroup_id * subgroup_size))))), (workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_id * subgroup_size), min(~ (_GLF_IDENTITY(subgroup_id, (subgroup_id) * 1u) * subgroup_size), ~ (subgroup_id * subgroup_size)))))) / ((1u << _GLF_IDENTITY(uint(5u), uint(5u))) >> _GLF_IDENTITY(uint(5u), uint(5u)))), workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_id * subgroup_size), min(~ (_GLF_IDENTITY(subgroup_id, (subgroup_id) * 1u) * subgroup_size), ~ (subgroup_id * subgroup_size))))), workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_id * subgroup_size), min(~ (_GLF_IDENTITY(subgroup_id, (subgroup_id) * 1u) * subgroup_size), ~ (subgroup_id * subgroup_size))))))), ~ (~ (workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id * subgroup_size, 0u ^ (subgroup_id * subgroup_size))) * 1u), ~ (_GLF_IDENTITY(~ (subgroup_id * subgroup_size), min(~ (subgroup_id * subgroup_size), _GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)) * subgroup_size), (~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)) * subgroup_size)) + 0u)))))))) : _GLF_FUZZED(workgroup_base))) + ((subgroup_local_id + _GLF_IDENTITY(1, (1) - 0)) % subgroup_size);
 buf[virtual_gid] = _GLF_IDENTITY(1, (false ? _GLF_FUZZED(96995) : 1));
 for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) - 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false)))))
            {
            }
           else
            {
             barrier();
            }
          }
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1)), subgroup_local_id + 1))) | 0u) < subgroup_size)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))
                    barrier();
                   barrier();
                  }
                 barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x4(injectionSwitch, 1.0, 1.0, 0.0, 1.0, 1.0, abs(1.0), sqrt(1.0), 0.0, 0.0, 1.0), mat3x4(mat4(mat3x4(injectionSwitch, 1.0, 1.0, 0.0, 1.0, 1.0, abs(1.0), sqrt(1.0), 0.0, 0.0, 1.0)))))).x, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(float(47597)), _GLF_FUZZED(-41.49)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))))).x, min(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y))))
                  barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, ~ (_GLF_IDENTITY(~ (next_virtual_gid), uint(_GLF_IDENTITY(uvec3(~ (next_virtual_gid), 0u, 1u), (uvec3(~ (next_virtual_gid), 0u, 1u)) / uvec3(1u, 1u, 1u))))))], uint(2), _GLF_IDENTITY(4, clamp(_GLF_IDENTITY(4, (4) - 0), _GLF_IDENTITY(4, ~ (~ (_GLF_IDENTITY(4, (4) - 0)))), 4)), 64, 0);
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               subgroupAll(false);
              }
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_IDENTITY(true, ! (! (true))), false, true))), (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), true && (_GLF_IDENTITY((false), bool(bool((false))))))))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
                barrier();
              }
            }
           else
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((_GLF_IDENTITY(_GLF_IDENTITY(1, int(ivec4(1, 1, 0, 1))), ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(1, min(1, 1))), clamp((1), (1), _GLF_IDENTITY(_GLF_IDENTITY((1), (false ? _GLF_FUZZED(_injected_loop_counter) : (1))), clamp(_GLF_IDENTITY(_GLF_IDENTITY((1), (false ? _GLF_FUZZED(_injected_loop_counter) : (1))), (_GLF_IDENTITY((1), (false ? _GLF_FUZZED(_injected_loop_counter) : (1)))) | 0), _GLF_IDENTITY((1), (false ? _GLF_FUZZED(_injected_loop_counter) : (1))), _GLF_IDENTITY((1), (false ? _GLF_FUZZED(_injected_loop_counter) : (1))))))))) << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(7), _GLF_IDENTITY(0 | (int(7)), (0 | (int(7))) - 0)), int(7)))); _GLF_IDENTITY(_injected_loop_counter ++, _GLF_IDENTITY((_injected_loop_counter ++) >> 0, ((_injected_loop_counter ++) >> 0) | 0)))
              {
               do
                {
                 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)))))
                  barrier();
                 if(_GLF_DEAD(false))
                  {
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                  }
                 do
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bool((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))), false || (bool(bool((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y)))))))))
                    {
                     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), false || (! (_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))))))))))
                      barrier();
                     for(int _injected_loop_counter = (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), ~ (~ (int(1)))))), (false ? _GLF_FUZZED(-64719) : (1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), ~ (~ (int(1)))))))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (int(_GLF_ZERO(_GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, float(mat2(0.0, 0.0, 1.0, 0.0))) : _GLF_FUZZED(5.3))), injectionSwitch.x)) >> _GLF_IDENTITY(int(5), int(5)))); _GLF_IDENTITY(_injected_loop_counter --, (0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), ~ (_GLF_IDENTITY(~ (int(4)), (~ (int(4))) | (~ (int(4)))))))) | (_injected_loop_counter --)))
                      {
                       barrier();
                      }
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))), true && (_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))))); _injected_loop_counter ++)
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       else
                        {
                        }
                       barrier();
                      }
                    }
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(float(false))), float(injectionSwitch.x), bool(true))) < injectionSwitch.y))))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((_GLF_IDENTITY(false, bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, true), _GLF_IDENTITY(bvec2(bvec2(bvec2(false, true))), bvec2(bvec4(bvec2(bvec2(bvec2(false, true))), false, false)))), bvec2(bvec2(_GLF_IDENTITY(bvec2(false, true), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(bvec2(false, true)), bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec2(false, true)), bvec2(bvec2(bvec2(bvec2(false, true))))), true)))), _GLF_IDENTITY(bvec2(bvec3(bvec2(bvec2(bvec2(false, true))), true)), bvec2(bvec4(bvec2(bvec3(bvec2(bvec2(bvec2(false, true))), true)), true, true))))))))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3((_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), ! (! (bool(false)))))), bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, true), _GLF_IDENTITY(bvec2(bvec2(bvec2(false, true))), bvec2(bvec4(bvec2(bvec2(bvec2(false, true))), false, false)))), bvec2(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, true), _GLF_IDENTITY(bvec2(bvec2(bvec2(false, true))), bvec2(bvec4(bvec2(bvec2(bvec2(false, true))), false, false)))), bvec2(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, true), _GLF_IDENTITY(bvec2(bvec2(bvec2(false, true))), bvec2(bvec4(bvec2(bvec2(bvec2(false, true))), false, false)))), bvec2(bvec2(_GLF_IDENTITY(bvec2(false, true), _GLF_IDENTITY(bvec2(bvec2(bvec2(false, true))), bvec2(bvec4(bvec2(bvec2(bvec2(false, true))), false, false))))))), false))), false, false))), bvec2(bvec2(bvec2(false, true))))))), false, false), bvec3(bvec4(bvec3((_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, true), _GLF_IDENTITY(bvec2(bvec2(bvec2(false, true))), bvec2(bvec4(bvec2(bvec2(bvec2(false, true))), false, false)))), bvec2(bvec2(bvec2(false, true)))))), true && (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, true), _GLF_IDENTITY(bvec2(bvec2(bvec2(false, true))), bvec2(bvec4(bvec2(bvec2(bvec2(false, true))), false, _GLF_IDENTITY(false, bool(bvec3(false, false, true))))))), bvec2(bvec2(bvec2(false, true))))))))), false, false), _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(bool(bvec4((injectionSwitch.x < injectionSwitch.y), true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec4((injectionSwitch.x < injectionSwitch.y), true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false)), false), bvec2(bvec4(bvec2(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(bool(bvec4((injectionSwitch.x < injectionSwitch.y), true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec4((injectionSwitch.x < injectionSwitch.y), true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false)), false), false, false)))))))))), false || (bool(_GLF_IDENTITY(bvec3((_GLF_IDENTITY(false, bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, true), _GLF_IDENTITY(bvec2(bvec2(bvec2(false, true))), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(false, true && (false)), true)), _GLF_IDENTITY(bvec2(bvec4(bvec2(bvec2(_GLF_IDENTITY(false, true && (false)), true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), bvec2(bvec2(bvec2(bvec4(bvec2(bvec2(_GLF_IDENTITY(false, true && (false)), true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))), bvec2(bvec4(bvec2(bvec2(false, true)), true, _GLF_IDENTITY(false, false || (false)))))), false, false)))), bvec2(_GLF_IDENTITY(bvec2(bvec2(false, true)), bvec2(bvec4(bvec2(bvec2(false, true)), true, false)))))))), false, false), bvec3(bvec4(_GLF_IDENTITY(bvec3((_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, false, false)), false || (bool(bvec4(false, true, false, false)))))))), bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, true), _GLF_IDENTITY(bvec2(bvec2(bvec2(false, true))), bvec2(bvec4(bvec2(bvec2(bvec2(false, true))), false, false)))), bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, true), _GLF_IDENTITY(bvec2(bvec2(bvec2(false, true))), _GLF_IDENTITY(bvec2(bvec4(bvec2(bvec2(bvec2(false, true))), false, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))) || false))), bvec2(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(bvec4(bvec2(bvec2(bvec2(false, true))), false, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))) || false))), bvec2(bvec2(bvec2(bvec4(bvec2(bvec2(bvec2(false, true))), false, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))) || false)))))), true), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec2(bvec4(bvec2(bvec2(bvec2(false, true))), false, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))) || false))), bvec2(bvec2(bvec2(bvec4(bvec2(bvec2(bvec2(false, true))), false, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))) || false)))))), true)))))))), _GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(false, true), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(bvec2(false, true)), bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(bvec2(false, true)), bvec2(bvec2(bvec2(bvec2(false, true)))))), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(bvec2(false, true)), bvec2(bvec2(bvec2(bvec2(false, true)))))), bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec2(bvec2(false, true)), bvec2(bvec2(bvec2(bvec2(false, true)))))), true, false))), true)))))), bvec2(bvec4(bvec2(bvec2(bvec2(false, true))), false, false)))), true, false)), bvec2(bvec2(bvec2(bvec4(_GLF_IDENTITY(bvec2(false, true), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(bvec2(false, true)), bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec2(false, true)), bvec2(bvec3(bvec2(bvec2(false, true)), false))), true)))), bvec2(bvec4(bvec2(bvec2(bvec2(false, true))), false, false)))), true, false))))))))), bvec2(bvec2(bvec2(false, true))))))), false, false), bvec3(bvec4(_GLF_IDENTITY(bvec3((_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, false, false)), false || (bool(bvec4(false, true, false, false)))))))), bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, true), _GLF_IDENTITY(bvec2(bvec2(bvec2(false, true))), bvec2(bvec4(bvec2(bvec2(bvec2(false, true))), false, false)))), bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, true), _GLF_IDENTITY(bvec2(bvec2(bvec2(false, true))), _GLF_IDENTITY(bvec2(bvec4(bvec2(bvec2(bvec2(false, true))), false, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))) || false))), bvec2(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(bvec4(bvec2(bvec2(bvec2(false, true))), false, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))) || false))), bvec2(bvec2(bvec2(bvec4(bvec2(bvec2(bvec2(false, true))), false, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))) || false)))))), true), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec2(bvec4(bvec2(bvec2(bvec2(false, true))), false, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))) || false))), bvec2(bvec2(bvec2(bvec4(bvec2(bvec2(bvec2(false, true))), false, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))) || false)))))), true)))))))), _GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(false, true), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(bvec2(false, true)), bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(bvec2(false, true)), bvec2(bvec2(bvec2(bvec2(false, true)))))), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(bvec2(false, true)), bvec2(bvec2(bvec2(bvec2(false, true)))))), bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec2(bvec2(false, true)), bvec2(bvec2(bvec2(bvec2(false, true)))))), true, false))), true)))))), bvec2(bvec4(bvec2(bvec2(bvec2(false, true))), false, false)))), true, false)), bvec2(bvec2(bvec2(bvec4(_GLF_IDENTITY(bvec2(false, true), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(bvec2(false, true)), bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec2(false, true)), bvec2(bvec3(bvec2(bvec2(false, true)), false))), true)))), bvec2(bvec4(bvec2(bvec2(bvec2(false, true))), false, false)))), true, false))))))))), bvec2(bvec2(bvec2(false, true))))))), false, false), bvec3(bvec3(bvec3((_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, false, false)), false || (bool(bvec4(false, true, false, false)))))))), bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, true), _GLF_IDENTITY(bvec2(bvec2(bvec2(false, true))), bvec2(bvec4(bvec2(bvec2(bvec2(false, true))), false, false)))), bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, true), _GLF_IDENTITY(bvec2(bvec2(bvec2(false, true))), _GLF_IDENTITY(bvec2(bvec4(bvec2(bvec2(bvec2(false, true))), false, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))) || false))), bvec2(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(bvec4(bvec2(bvec2(bvec2(false, true))), false, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))) || false))), bvec2(bvec2(bvec2(bvec4(bvec2(bvec2(bvec2(false, true))), false, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))) || false)))))), true), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec2(bvec4(bvec2(bvec2(bvec2(false, true))), false, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))) || false))), bvec2(bvec2(bvec2(bvec4(bvec2(bvec2(bvec2(false, true))), false, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))) || false)))))), true)))))))), _GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(false, true), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(bvec2(false, true)), bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(bvec2(false, true)), bvec2(bvec2(bvec2(bvec2(false, true)))))), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(bvec2(false, true)), bvec2(bvec2(bvec2(bvec2(false, true)))))), bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec2(bvec2(false, true)), bvec2(bvec2(bvec2(bvec2(false, true)))))), true, false))), true)))))), bvec2(bvec4(bvec2(bvec2(bvec2(false, true))), false, false)))), true, false)), bvec2(bvec2(bvec2(bvec4(_GLF_IDENTITY(bvec2(false, true), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(bvec2(false, true)), bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec2(false, true)), bvec2(bvec3(bvec2(bvec2(false, true)), false))), true)))), bvec2(bvec4(bvec2(bvec2(bvec2(false, true))), false, false)))), true, false))))))))), bvec2(bvec2(bvec2(false, true))))))), false, false)))), false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))))
                  {
                   for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY((((1 | 1) << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))), min(_GLF_IDENTITY((((1 | 1) << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))), max(_GLF_IDENTITY((((1 | 1) << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))), ((((1 | 1) << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))) / 1), (((1 | 1) << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))))), _GLF_IDENTITY((((1 | 1) << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))), int(ivec2((((_GLF_IDENTITY(1 | 1, (1 | 1) - 0)) << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(7), min(int(7), int(7))), int(7))), 0))))) & 1)); _injected_loop_counter ++)
                    {
                     barrier();
                    }
                  }
                }
               else
                {
                }
               do
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec3(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec2(bvec2((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), false)))), ! (! (bool(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec3(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec2(bvec2((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), false)))))))), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-6.9) : injectionSwitch.y)))) && true))))
                    barrier();
                  }
                 else
                  {
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
               if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true))))
                barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  {
                   do
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       barrier();
                      }
                     else
                      {
                      }
                    }
                   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))) && true)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                  }
                 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(_GLF_IDENTITY(2, max(_GLF_IDENTITY(2, 1 * (_GLF_IDENTITY(2, max(2, 2)))), 2))), _GLF_IDENTITY(max(int(2), int(2)), (max(int(2), _GLF_IDENTITY(int(2), int(ivec4(int(2), 1, 0, 1))))) | (_GLF_IDENTITY(max(int(2), int(_GLF_IDENTITY(2, (2) | (2)))), int(ivec3(_GLF_IDENTITY(max(int(2), int(_GLF_IDENTITY(2, (2) | (2)))), (max(int(2), int(_GLF_IDENTITY(2, (2) | (2))))) - 0), 0, int(_GLF_ONE(1.0, injectionSwitch.y)))))))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, ! (! (_injected_loop_counter < 1)))); _injected_loop_counter ++)
                    {
                     do
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                     barrier();
                    }
                  }
                 do
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                  barrier();
                 barrier();
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   do
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, sqrt(1.0), 0.0, 1.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0))).x > injectionSwitch.y))))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         barrier();
                        }
                       else
                        {
                        }
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
                  }
                }
              }
             do
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     do
                      {
                       barrier();
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   else
                    {
                    }
                  }
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(0.0, 1.0, 1.0, 1.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(0.0, 1.0, 1.0, 1.0)))) > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-974.939) : injectionSwitch.x))) + _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(0.0, 1.0, 1.0, 1.0)), _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(0.0, 1.0, 1.0, 1.0)), max(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(0.0, 1.0, 1.0, 1.0)), _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(0.0, 1.0, 1.0, 1.0)), min(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(0.0, 1.0, 1.0, 1.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(0.0, 1.0, 1.0, 1.0)))))))) > injectionSwitch.y)))))))
                  barrier();
                }
               else
                {
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (true)), false || (true))))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec3(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec4(bvec3(true, false, false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                  {
                   for(int _injected_loop_counter = (_GLF_IDENTITY(0, (0) / 1) ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, clamp(1, 1, 1))); _injected_loop_counter ++)
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, bool(bvec3(true, false, true))), false, true), bvec3(bvec4(bvec3(_GLF_IDENTITY(true, bool(bvec3(true, false, true))), false, true), true))))), (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(trunc(360.928)) : injectionSwitch.x)) < injectionSwitch.y))), false || (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, bool(bvec3(true, false, true))), false, true), bvec3(bvec4(bvec3(_GLF_IDENTITY(true, bool(bvec3(true, false, true))), false, _GLF_IDENTITY(true, ! (! (true)))), true))))), (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(trunc(360.928)) : injectionSwitch.x)) < injectionSwitch.y))))))
                    {
                     do
                      {
                       barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch, vec2(mat3x4(false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch, 0.0, 1.0, 1.0, 1.0, 1.0, sqrt(1.0), 0.0, 1.0, 1.0, 1.0))))).y))));
                    }
                   else
                    {
                    }
                   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(1.0)), bool(false))), injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false)), bool(bool(bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-2.7)), bool(false))), injectionSwitch.x)) < injectionSwitch.y)), false, false))))))) && true))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat3x4(injectionSwitch.x, 0.0, 1.0, 0.0, 0.0, 1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, tan(0.0), 1.0, 1.0, 1.0)), min(float(mat3x4(injectionSwitch.x, 0.0, 1.0, 0.0, 0.0, 1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, tan(0.0), 1.0, 1.0, 1.0)), _GLF_IDENTITY(float(mat3x4(injectionSwitch.x, 0.0, 1.0, 0.0, 0.0, 1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, tan(0.0), 1.0, 1.0, 1.0)), min(float(mat3x4(injectionSwitch.x, 0.0, 1.0, 0.0, 0.0, 1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, tan(0.0), 1.0, 1.0, 1.0)), float(mat3x4(injectionSwitch.x, 0.0, 1.0, 0.0, 0.0, 1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, tan(0.0), 1.0, 1.0, 1.0)))))))) + (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)))))))
                      barrier();
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       do
                        {
                         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bool(_GLF_WRAPPED_IF_FALSE(false)))))
                          {
                          }
                         else
                          {
                           barrier();
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                    }
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       barrier();
                      }
                     else
                      {
                      }
                    }
                  }
                 for(int _injected_loop_counter = _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0 ^ 0, (0 ^ 0) | (0 ^ 0)), (0 ^ 0) / 1)), (_GLF_IDENTITY((_GLF_IDENTITY(0 ^ _GLF_IDENTITY(0, min(0, 0)), (0 ^ 0) / 1)), ((_GLF_IDENTITY(0 ^ _GLF_IDENTITY(0, min(0, 0)), (0 ^ 0) / 1))) | ((_GLF_IDENTITY(0 ^ _GLF_IDENTITY(0, min(0, 0)), (0 ^ 0) / 1))))) / (1 & _GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec2(1, 0), (true ? ivec2(1, 0) : _GLF_FUZZED(ivec2(-31548, 68032)))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, float(mat3x4(injectionSwitch.y, 1.0, 1.0, 1.0, tan(0.0), sqrt(1.0), 1.0, 0.0, 1.0, 0.0, abs(0.0), 0.0))), injectionSwitch.y))))))
                          {
                          }
                         else
                          {
                           barrier();
                          }
                        }
                      }
                    }
                   else
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, mix(vec2((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))[_GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter))), 0, 0))], _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))))[1], max((injectionSwitch)[1], (injectionSwitch)[1]))), vec2(_GLF_FUZZED(-3312.2348), _GLF_FUZZED(-0.5)), bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - _GLF_IDENTITY(vec2(0.0, 0.0), (vec2(0.0, 0.0)) * vec2(1.0, 1.0))), injectionSwitch, injectionSwitch)).x > injectionSwitch.y)), false))).x)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (true ? _injected_loop_counter : _GLF_FUZZED(_injected_loop_counter))) != ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1, int(ivec2(_GLF_IDENTITY(1, max(1, 1)), 1)))), int(ivec3((_GLF_IDENTITY(1, int(ivec2(_GLF_IDENTITY(1, max(1, 1)), 1)))), int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))), 1))) >> 0, min((_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(-13668)))) ^ (0 << _GLF_IDENTITY(int(4), int(4)))), max(_GLF_IDENTITY(1, (1) ^ (0 << _GLF_IDENTITY(int(4), int(4)))), _GLF_IDENTITY(1, (1) ^ (_GLF_IDENTITY(0, ~ (~ (0))) << _GLF_IDENTITY(int(4), int(4))))))) >> 0, _GLF_IDENTITY((1) >> 0, ((1) >> 0) | ((1) >> 0)))))), int(1))) >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), max(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(1, int(int(1)))), _GLF_IDENTITY((int(1)) + int(_GLF_ZERO(0.0, injectionSwitch.x)), 0 + (_GLF_IDENTITY((int(1)) + int(_GLF_ZERO(0.0, injectionSwitch.x)), ((int(1)) + int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_IDENTITY(_GLF_FUZZED(1.1), (_GLF_FUZZED(1.1)) / _GLF_ONE(1.0, injectionSwitch.y))))))) * 1)))), int(1)))), (_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), max(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(1, int(int(1)))), (int(1)) + int(_GLF_ZERO(0.0, injectionSwitch.x))), int(1))))) << int(_GLF_ZERO(0.0, injectionSwitch.x))))); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) - 0))
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         if(_GLF_DEAD(false))
                          barrier();
                         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! _GLF_IDENTITY((! (_GLF_DEAD(false))), false || (_GLF_IDENTITY((! (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))), bool(bvec2((! _GLF_IDENTITY((_GLF_DEAD(false)), ((_GLF_DEAD(false))) || false)), true))))))) && true))
                          barrier();
                         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, 0 + (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) | (0))) << 0)))); _injected_loop_counter --)
                          {
                           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (true) && true))) && ((false)))))) && true)), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (true) && true))) && ((false)))))) && true)), _GLF_IDENTITY((_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (true) && true))) && ((false)))))) && true))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || ((_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY(_GLF_IDENTITY((false), _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (true) && true))) && ((false))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY((false), _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (true) && true))) && ((false))))), ! (! (bool(bool(_GLF_IDENTITY((false), _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (true) && true))) && ((false)))))))))))) && true))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), _GLF_IDENTITY(true, false || (_GLF_IDENTITY(_GLF_IDENTITY(true, (true) && true), ! (! (_GLF_IDENTITY(true, (true) && true)))))) && ((false)))))) && true)), (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), _GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, true, true)), (_GLF_IDENTITY(bool(bvec3(true, true, true)), bool(bool(bool(bvec3(true, true, true)))))) && true)), false || (_GLF_IDENTITY(_GLF_IDENTITY(true, (true) && true), (_GLF_IDENTITY(true, (true) && true)) || false))) && ((false)))))) && true))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bool(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (true) && true))) && ((false)))))) && true)), (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (true) && true))) && (_GLF_IDENTITY((false), false || ((false)))))))) && true))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (true) && true))) && ((false)))))) && true)), (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (true) && true))) && (_GLF_IDENTITY((false), false || ((false)))))))) && true))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))), false || (bool(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (true) && true))) && ((false)))))) && true)), (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (true) && true))) && ((false)))))) && true))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (true) && true))) && ((false)))))) && true)), (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (true) && true))) && ((false)))))) && true))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true, false))))), bool(bool(bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), _GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), false || (_GLF_IDENTITY(true, (true) && true))) && ((false)))))) && true)), (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (true) && true))) && ((false)))))) && _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, ! (! (true)))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))), ! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (true) && true))) && ((false)))))) && true)), bool(bvec4(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (true) && true))) && ((false)))))) && true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (true) && true))) && ((false)))))) && true))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bool(bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (true) && true))) && ((false)))))) && true)), (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (true) && true))) && ((false)))))) && true))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), false || (bool(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (true) && _GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bool(true)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) && ((false)))))) && true)), (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (true) && true))) && ((false)))))) && true))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bool(bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)), ! (! (_GLF_IDENTITY((false), _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (true) && true))) && ((false)))))) && true)), (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (true) && true))) && ((false)))))) && true))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))), (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (true) && true))) && ((false)))))) && true)), bool(bvec4(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (true) && true))) && ((false)))))) && true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (true) && true))) && ((false)))))) && true))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bool(bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (true) && true))) && ((false)))))) && true)), (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (true) && true))) && ((false)))))) && true))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), false || (bool(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (true) && _GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bool(true)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) && ((false)))))) && true)), (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (true) && true))) && ((false)))))) && true))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bool(bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)), ! (! (_GLF_IDENTITY((false), _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (true) && true))) && ((false)))))) && true)), (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (true) && true))) && ((false)))))) && true))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(vec2(_GLF_FUZZED(74.61), _GLF_FUZZED(10.30)), min(vec2(_GLF_FUZZED(74.61), _GLF_FUZZED(10.30)), _GLF_IDENTITY(vec2(_GLF_FUZZED(74.61), _GLF_FUZZED(10.30)), min(vec2(_GLF_FUZZED(74.61), _GLF_FUZZED(10.30)), vec2(_GLF_FUZZED(74.61), _GLF_FUZZED(10.30)))))), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)))))).y))))
                              {
                               if(_GLF_WRAPPED_IF_FALSE(false))
                                {
                                }
                               else
                                {
                                 barrier();
                                }
                              }
                            }
                           else
                            {
                             for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                              {
                               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                {
                                 if(_GLF_DEAD(false))
                                  barrier();
                                 barrier();
                                }
                              }
                             do
                              {
                               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (! (true)) && true)))))
                                {
                                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_IDENTITY(_GLF_FUZZED(6.6), (_GLF_IDENTITY(_GLF_FUZZED(6.6), min(_GLF_FUZZED(6.6), _GLF_IDENTITY(_GLF_FUZZED(6.6), clamp(_GLF_FUZZED(6.6), _GLF_FUZZED(6.6), _GLF_FUZZED(6.6)))))) * 1.0) : injectionSwitch.y))))))))
                                  {
                                  }
                                 else
                                  {
                                   do
                                    {
                                     atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(ivec4(45863, 99682, 16062, -595).a)))), max(uint(_GLF_IDENTITY(2, (true ? _GLF_IDENTITY(2, int(int(2))) : _GLF_FUZZED(ivec4(45863, 99682, 16062, -595).a)))), uint(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(ivec4(45863, 99682, 16062, -595).a)))))), (_GLF_IDENTITY(uint(_GLF_IDENTITY(2, _GLF_IDENTITY((true ? 2 : _GLF_FUZZED(ivec4(45863, 99682, 16062, -595).a)), clamp((true ? 2 : _GLF_FUZZED(ivec4(45863, 99682, 16062, -595).a)), (true ? 2 : _GLF_FUZZED(ivec4(45863, 99682, 16062, -595).a)), (true ? 2 : _GLF_FUZZED(ivec4(45863, 99682, 16062, -595).a)))))), max(_GLF_IDENTITY(uint(_GLF_IDENTITY(2, (true ? _GLF_IDENTITY(2, int(int(2))) : _GLF_FUZZED(ivec4(45863, 99682, 16062, -595).a)))), (false ? _GLF_FUZZED(subgroup_size) : uint(_GLF_IDENTITY(2, (true ? _GLF_IDENTITY(2, int(int(2))) : _GLF_FUZZED(ivec4(45863, 99682, 16062, -595).a)))))), uint(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(ivec4(45863, 99682, 16062, -595).a))))))) | 0u), 4, _GLF_IDENTITY(64, ~ (~ (64))), _GLF_IDENTITY(0, (0) | 0));
                                    }
                                   while(_GLF_WRAPPED_LOOP(false));
                                  }
                                }
                               else
                                {
                                }
                              }
                             while(_GLF_WRAPPED_LOOP(false));
                             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))), (_GLF_WRAPPED_IF_FALSE(false)) && true))
                              {
                               do
                                {
                                 do
                                  {
                                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || _GLF_IDENTITY((_GLF_IDENTITY(false, true && (false))), _GLF_IDENTITY(bool(bvec4((_GLF_IDENTITY(false, true && (false))), false, false, true)), bool(bvec4(bool(bvec4((_GLF_IDENTITY(false, true && (false))), false, false, true)), false, true, false))))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, false || _GLF_IDENTITY((_GLF_IDENTITY(false, true && (false))), _GLF_IDENTITY(bool(bvec4((_GLF_IDENTITY(false, true && (false))), false, false, true)), bool(bvec4(bool(bvec4((_GLF_IDENTITY(false, true && (false))), false, false, true)), false, true, false))))), true)), ! (! (bool(bvec2(_GLF_IDENTITY(false, false || _GLF_IDENTITY((_GLF_IDENTITY(false, true && (false))), _GLF_IDENTITY(bool(bvec4((_GLF_IDENTITY(false, true && (false))), false, false, true)), bool(bvec4(bool(bvec4((_GLF_IDENTITY(false, true && (false))), false, false, true)), false, true, false))))), true))))))))
                                    {
                                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                      {
                                       if(_GLF_WRAPPED_IF_FALSE(false))
                                        {
                                        }
                                       else
                                        {
                                         barrier();
                                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                          {
                                           do
                                            {
                                             barrier();
                                            }
                                           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                          }
                                        }
                                      }
                                     else
                                      {
                                      }
                                    }
                                  }
                                 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), true && (_GLF_WRAPPED_LOOP(false))))))) && true));
                                 if(_GLF_DEAD(false))
                                  {
                                   do
                                    {
                                     for(int _injected_loop_counter = _GLF_IDENTITY((0 ^ 0), ((0 ^ 0)) | (_GLF_IDENTITY((0 ^ 0), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(0, 0 + (_GLF_IDENTITY(0, max(0, 0)))) ^ 0)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(0, 0 + (_GLF_IDENTITY(0, max(0, 0)))) ^ 0)), (~ ((_GLF_IDENTITY(0, 0 + (_GLF_IDENTITY(0, max(0, 0)))) ^ 0))) | (~ ((_GLF_IDENTITY(0, 0 + (_GLF_IDENTITY(0, max(0, 0)))) ^ 0))))), min(~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(0, 0 + (_GLF_IDENTITY(0, max(0, 0)))) ^ 0)), (~ ((_GLF_IDENTITY(0, 0 + (_GLF_IDENTITY(0, max(0, 0)))) ^ 0))) | (~ ((_GLF_IDENTITY(0, 0 + (_GLF_IDENTITY(0, max(0, 0)))) ^ 0))))), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(0, 0 + (_GLF_IDENTITY(0, max(0, 0)))) ^ 0)), (~ ((_GLF_IDENTITY(0, 0 + (_GLF_IDENTITY(0, max(0, 0)))) ^ 0))) | (~ ((_GLF_IDENTITY(0, 0 + (_GLF_IDENTITY(0, max(0, 0)))) ^ 0))))))))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (1) | (1))); _injected_loop_counter ++)
                                      {
                                       if(_GLF_WRAPPED_IF_TRUE(true))
                                        {
                                         do
                                          {
                                           barrier();
                                          }
                                         while(_GLF_WRAPPED_LOOP(false));
                                        }
                                       else
                                        {
                                        }
                                      }
                                    }
                                   while(_GLF_WRAPPED_LOOP(false));
                                  }
                                }
                               while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(false)), (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(false)), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true && (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))) && true))));
                               if(_GLF_DEAD(false))
                                barrier();
                              }
                             else
                              {
                               if(_GLF_WRAPPED_IF_TRUE(true))
                                {
                                 if(_GLF_WRAPPED_IF_FALSE(false))
                                  {
                                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                    {
                                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))
                                      {
                                       barrier();
                                      }
                                     else
                                      {
                                      }
                                    }
                                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                    barrier();
                                  }
                                 else
                                  {
                                   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
                                    {
                                     if(_GLF_DEAD(false))
                                      {
                                       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, false))), (injectionSwitch.x > injectionSwitch.y))))
                                        {
                                        }
                                       else
                                        {
                                         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                                          {
                                           if(_GLF_WRAPPED_IF_TRUE(true))
                                            {
                                             barrier();
                                            }
                                           else
                                            {
                                            }
                                          }
                                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                          barrier();
                                        }
                                      }
                                     for(int _injected_loop_counter = (54324 & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                                      {
                                       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != _GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(1, 1))) * 1), (_GLF_IDENTITY(_injected_loop_counter != 1, true && (_injected_loop_counter != 1))) && true)); _injected_loop_counter ++)
                                        {
                                         barrier();
                                        }
                                      }
                                    }
                                  }
                                 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), _GLF_IDENTITY(bvec3(bvec3(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), bvec3(bvec3(bvec3(bvec3(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))))))), (injectionSwitch.x > injectionSwitch.y))))
                                  barrier();
                                }
                               else
                                {
                                }
                              }
                            }
                           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            {
                            }
                           else
                            {
                             if(_GLF_DEAD(false))
                              barrier();
                            }
                          }
                        }
                      }
                     else
                      {
                      }
                    }
                  }
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     barrier();
                    }
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                 do
                  {
                   if(_GLF_DEAD(false))
                    {
                     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) << 0))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(0, int(ivec3(0, 0, 0))) & 19577)); _injected_loop_counter --)
                      {
                       do
                        {
                         barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))));
                }
               else
                {
                }
              }
             else
              {
              }
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))) || false))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             subgroupAll(true);
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, _GLF_IDENTITY(false, (false) || false), false)))))))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(float(-57152))), float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)), bool(true)))))))));
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   do
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 else
                  {
                  }
                 do
                  {
                   barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) && true));
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               else
                {
                 for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> 0) != ((((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))) << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), min(int(_GLF_IDENTITY(2, clamp(_GLF_IDENTITY(2, max(2, 2)), 2, 2))), int(2))))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(2), (0 << _GLF_IDENTITY(int(3), int(3))) + (int(2))), 0 + (int(_GLF_IDENTITY(2, int(int(_GLF_IDENTITY(2, (2) >> 0))))))), max(_GLF_IDENTITY(int(2), 0 + (int(2))), _GLF_IDENTITY(int(2), 0 + (int(2)))))), int(ivec2((_GLF_IDENTITY(int(2), 0 + (int(2)))), 0))) / 1)))); _injected_loop_counter ++)
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(-94757))), ! (! (_injected_loop_counter < _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (1) * 1) : _GLF_FUZZED(-94757))))))); _injected_loop_counter ++)
                    {
                     do
                      {
                       do
                        {
                         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                          {
                           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
                            {
                             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                              {
                               if(_GLF_WRAPPED_IF_FALSE(false))
                                {
                                }
                               else
                                {
                                 barrier();
                                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                  {
                                   if(_GLF_WRAPPED_IF_TRUE(true))
                                    {
                                     barrier();
                                    }
                                   else
                                    {
                                    }
                                  }
                                }
                              }
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              barrier();
                             if(_GLF_DEAD(false))
                              barrier();
                             barrier();
                            }
                          }
                         if(_GLF_DEAD(false))
                          {
                           do
                            {
                             do
                              {
                               for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, bool(bvec4(_injected_loop_counter < 1, false, true, false)))), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, 0)), (_GLF_IDENTITY(int(ivec2(1, 0)), clamp(int(ivec2(1, 0)), int(ivec2(1, 0)), int(ivec2(1, 0))))) - 0))), bool(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | 0)) | (1))), false, false)))) && true)) && true); _injected_loop_counter ++)
                                {
                                 do
                                  {
                                   barrier();
                                  }
                                 while(_GLF_WRAPPED_LOOP(false));
                                }
                              }
                             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                            }
                           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0)) + 0.0), 0.0), clamp(vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0)) + 0.0), 0.0), vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0)) + 0.0), 0.0), vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0)) + 0.0), 0.0))), clamp(_GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-56.42)))), 0.0), clamp(vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(mat3x2(injectionSwitch.x, 1.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), vec3(0.0, sin(0.0), 1.0)), dot(_GLF_IDENTITY(vec3(0.0, 0.0, 1.0), (_GLF_IDENTITY(vec3(0.0, 0.0, 1.0), mat3(1.0) * (vec3(0.0, 0.0, 1.0)))) - vec3(0.0, 0.0, 0.0)), vec3(0.0, sin(0.0), 1.0)))))), (injectionSwitch.x) / _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(_GLF_IDENTITY(-56.42, (-56.42) - 0.0))))), 0.0), vec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], float(vec4(injectionSwitch[1], 1.0, 1.0, 0.0))))), max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))).x, (injectionSwitch.x) / _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-56.42)))), 0.0), _GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-56.42)))), 0.0), (_GLF_IDENTITY(vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x) / _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-56.42)))), 0.0), mat2(1.0) * (vec2(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x))) / _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-56.42)))), 0.0)))) - vec2(0.0, 0.0)))), vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0))) - vec2(0.0, 0.0))) * vec2(1.0, 1.0)), injectionSwitch, injectionSwitch)).x, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x) / 1.0), _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-7.2)), bool(false)))))))), vec2(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), 0.0))), max(_GLF_IDENTITY(vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0)) + 0.0), 0.0), clamp(_GLF_IDENTITY(vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-56.42)))), (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / _GLF_IDENTITY(1.0, _GLF_IDENTITY((true ? 1.0 : _GLF_FUZZED(-56.42)), ((true ? 1.0 : _GLF_FUZZED(-56.42))) / _GLF_ONE(1.0, injectionSwitch.y))))) - 0.0), 0.0), clamp(vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(mat3x2(injectionSwitch.x, 1.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, sin(_GLF_IDENTITY(0.0, max(0.0, 0.0))), 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(0.0, sin(0.0), _GLF_IDENTITY(1.0, 0.0 + (1.0)))))))), (injectionSwitch.x) / _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-56.42)))), 0.0), vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))).x, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0)) / _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-56.42)))), 0.0), _GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-56.42)))), 0.0), (_GLF_IDENTITY(vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x) / _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-56.42)))), 0.0), mat2(1.0) * (vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x))) / _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-56.42)))), min(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x))) / _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-56.42)))), _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x))) / _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-56.42)))))), 0.0)))) - vec2(0.0, 0.0)))), vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), injectionSwitch, injectionSwitch)).x, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x) / 1.0), 0.0), vec2(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), 0.0))), _GLF_IDENTITY(vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0)) + 0.0, ((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0)) + 0.0) * 1.0)), 0.0), clamp(_GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(_GLF_IDENTITY(-56.42, min(_GLF_IDENTITY(-56.42, max(_GLF_IDENTITY(-56.42, (false ? _GLF_FUZZED(4149.1141) : -56.42)), -56.42)), _GLF_IDENTITY(-56.42, min(-56.42, _GLF_IDENTITY(-56.42, min(-56.42, -56.42)))))))))), 0.0), clamp(vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(mat3x2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x, 1.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, sin(0.0), 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(0.0, sin(0.0), 1.0)))))), (injectionSwitch.x) / _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-56.42)))), 0.0), vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), max((injectionSwitch), (injectionSwitch))) * mat2(1.0)))).x, (injectionSwitch.x) / _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-56.42)))), 0.0), _GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((injectionSwitch.x), float(mat3x2((injectionSwitch.x), 1.0, 0.0, 0.0, 1.0, 0.0))) / _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-56.42)))), 0.0), (_GLF_IDENTITY(vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x) / _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-56.42)))), 0.0), mat2(1.0) * (vec2(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x))) / _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-56.42)))), 0.0)))) - vec2(0.0, 0.0)))), vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch))) * vec2(1.0, 1.0)), injectionSwitch, injectionSwitch)).x, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(56.57), _GLF_FUZZED(3678.5323)), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], (true ? (injectionSwitch)[1] : _GLF_FUZZED(8723.9943)))), bvec2(true, true)))) : injectionSwitch)).x) / 1.0), 0.0), vec2(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), 0.0))))), mix(vec2((_GLF_IDENTITY(vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0)) + 0.0), 0.0), clamp(_GLF_IDENTITY(vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-2791.3427)), vec2(_GLF_FUZZED(-2560.7601), (injectionSwitch)[1]), bvec2(false, true))).x, (injectionSwitch.x) / _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-56.42)))), 0.0), clamp(vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(mat3x2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x, 1.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, sin(0.0), 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(0.0, sin(0.0), 1.0)))))), (injectionSwitch.x) / _GLF_IDENTITY(1.0, (_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, bool(bvec2(true, false))))) ? 1.0 : _GLF_FUZZED(-56.42)))), 0.0), vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))).x, (injectionSwitch.x) / _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-56.42)))), 0.0), _GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(_GLF_IDENTITY(-56.42, (-56.42) / 1.0))))), 0.0), (_GLF_IDENTITY(vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(max(injectionSwitch, injectionSwitch), clamp(_GLF_IDENTITY(max(injectionSwitch, injectionSwitch), mix(vec2((max(injectionSwitch, injectionSwitch))[0], (max(injectionSwitch, injectionSwitch))[1]), vec2(_GLF_FUZZED(1394.0150), _GLF_FUZZED(-95.77)), bvec2(false, false))), max(injectionSwitch, injectionSwitch), max(injectionSwitch, injectionSwitch)))).x, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x) / _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-56.42)))), 0.0), mat2(1.0) * (vec2(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x))) / _GLF_IDENTITY(1.0, _GLF_IDENTITY((_GLF_IDENTITY(true, true && (true)) ? 1.0 : _GLF_FUZZED(-56.42)), ((_GLF_IDENTITY(true, true && (true)) ? 1.0 : _GLF_FUZZED(-56.42))) / 1.0))), 0.0)))) - vec2(0.0, 0.0)))), vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + abs(vec2(0.0, 0.0)))) * vec2(1.0, 1.0)), injectionSwitch, injectionSwitch)).x, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) : injectionSwitch)).x) / 1.0), 0.0), vec2(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * _GLF_IDENTITY(mat2(1.0), mat2(mat2(mat2(1.0))))).x) / 1.0), 0.0))))[0], (_GLF_IDENTITY(vec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0)) * _GLF_ONE(1.0, injectionSwitch.y)), (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0)) + 0.0), 0.0), clamp(_GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-56.42)))), 0.0), clamp(vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(mat3x2(injectionSwitch.x, 1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED((523.256))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), 1.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (0.0) / 1.0)) * 1.0), _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, sin(0.0), 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(0.0, sin(0.0), 1.0)))))), (injectionSwitch.x) / _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-56.42)))), 0.0), vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))[0], _GLF_FUZZED(441.604)), vec2(_GLF_FUZZED(-3.9), _GLF_IDENTITY((injectionSwitch), max(_GLF_IDENTITY((injectionSwitch), clamp((injectionSwitch), (injectionSwitch), (injectionSwitch))), (injectionSwitch)))[1]), bvec2(false, true)))) * mat2(_GLF_IDENTITY(1.0, float(mat2(1.0, 0.0, 0.0, 0.0))))))).x, _GLF_IDENTITY((injectionSwitch.x), _GLF_IDENTITY(float(float((injectionSwitch.x))), _GLF_IDENTITY(float(mat2(_GLF_IDENTITY(float(float((injectionSwitch.x))), (float(float((injectionSwitch.x)))) - 0.0), 1.0, 0.0, 1.0)), mix(float(float(mat2(_GLF_IDENTITY(float(float((injectionSwitch.x))), (float(float((injectionSwitch.x)))) - 0.0), 1.0, 0.0, 1.0))), float(_GLF_FUZZED(7.2)), bool(false))))) / _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-56.42)))), 0.0), _GLF_IDENTITY(_GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((injectionSwitch.x) / _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-56.42))), mix(float(_GLF_FUZZED(vec3(47.70, -6.1, 4.0).t)), float(_GLF_IDENTITY((injectionSwitch.x) / _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-56.42))), clamp((injectionSwitch.x) / _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-56.42))), _GLF_IDENTITY((injectionSwitch.x) / _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-56.42))), (true ? (injectionSwitch.x) / _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-56.42))) : _GLF_FUZZED(954.748))), (injectionSwitch.x) / _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-56.42)))))), bool(true)))), _GLF_IDENTITY(0.0, (0.0) / 1.0)), (vec2(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((injectionSwitch.x) / _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-56.42))), mix(float(_GLF_FUZZED(vec3(47.70, -6.1, 4.0).t)), float(_GLF_IDENTITY((injectionSwitch.x) / _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-56.42))), clamp((injectionSwitch.x) / _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-56.42))), _GLF_IDENTITY((injectionSwitch.x) / _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-56.42))), (true ? (injectionSwitch.x) / _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-56.42))) : _GLF_FUZZED(954.748))), (injectionSwitch.x) / _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-56.42)))))), bool(true)))), _GLF_IDENTITY(0.0, (0.0) / 1.0))) - tan(vec2(0.0, 0.0))), (_GLF_IDENTITY(vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x) / _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-56.42)))), 0.0), _GLF_IDENTITY(mat2(1.0), transpose(transpose(mat2(1.0)))) * (vec2(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)), (false ? _GLF_FUZZED(0.0) : _GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x))))) / _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-56.42)))), 0.0)))) - vec2(0.0, 0.0)))), vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), (injectionSwitch) * vec2(1.0, 1.0)), injectionSwitch, injectionSwitch)).x, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0) * (injectionSwitch), max(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch))), tan(vec2(0.0, 0.0)) + (_GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0) * (injectionSwitch), max(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch))), (false ? _GLF_FUZZED(vec4(-1.5, -76.47, 492.161, -8.9).yx) : _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), max(mat2(1.0) * _GLF_IDENTITY((injectionSwitch), mat2(1.0) * ((injectionSwitch))), mat2(1.0) * (injectionSwitch))))))))) : injectionSwitch)).x) / 1.0), 0.0), vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-632.032)), bool(false))), (injectionSwitch.x) / 1.0), 0.0))))[1]), vec2(_GLF_FUZZED(39.24), _GLF_FUZZED((-8.8))), bvec2(false, false))))) > injectionSwitch.y))));
                          }
                        }
                       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch, injectionSwitch)).y))), false || (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, length(vec3(0.0, 0.0, 0.0)) + (_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-8146.5318)))))))), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && true))))), (! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! (! (true)))))))))) || false))));
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                }
              }
             else
              {
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               do
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (0 ^ _GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) + (1)))); _injected_loop_counter ++)
                        {
                         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (! (_GLF_DEAD(false))))), (! (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), bool(bvec3(bool(bvec2(false, false)), false, true))))))) && true))))
                          {
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             if(_GLF_DEAD(false))
                              barrier();
                            }
                           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(0, _GLF_IDENTITY((0), ~ (~ ((0)))) >> 0) | (0 ^ 0))); _injected_loop_counter --)
                            {
                             if(_GLF_WRAPPED_IF_TRUE(true))
                              {
                               if(_GLF_DEAD(false))
                                barrier();
                              }
                             else
                              {
                              }
                             for(int _injected_loop_counter = _GLF_IDENTITY(0, min(0, 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                              {
                               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                barrier();
                              }
                             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-4400.1927), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-21.05)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))), 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0))), 1.0, sin(0.0), 1.0, round(length(normalize(vec2(1.0, 1.0)))), exp(0.0)), transpose(transpose(_GLF_IDENTITY(mat3(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-4400.1927), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-21.05)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))), 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0))), 1.0, sin(0.0), 1.0, round(length(normalize(vec2(1.0, 1.0)))), exp(0.0)), mat3(mat4x3(mat3(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-4400.1927), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-21.05)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))), 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0))), 1.0, sin(0.0), 1.0, round(length(normalize(vec2(1.0, 1.0)))), exp(0.0)))))))))).y)), true && (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-4400.1927), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-21.05)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))), 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0)), dot(vec3(0.0, _GLF_IDENTITY(0.0, (0.0) + 0.0), 1.0), vec3(length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0))), 1.0, sin(0.0), 1.0, round(length(normalize(vec2(1.0, 1.0)))), exp(0.0)), transpose(transpose(_GLF_IDENTITY(mat3(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-4400.1927), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-21.05)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))), 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0))), 1.0, sin(0.0), 1.0, round(length(normalize(vec2(1.0, 1.0)))), exp(0.0)), mat3(mat4x3(mat3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))), mix(vec2(_GLF_FUZZED(-4400.1927), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-21.05)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))), 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0))), 1.0, sin(0.0), 1.0, round(length(normalize(vec2(1.0, 1.0)))), exp(0.0)))))))))).y))))))
                              barrier();
                            }
                           if(_GLF_DEAD(false))
                            barrier();
                           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) && true))), (injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                           do
                            {
                             if(_GLF_WRAPPED_IF_FALSE(false))
                              {
                              }
                             else
                              {
                               if(_GLF_DEAD(false))
                                barrier();
                              }
                            }
                           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y))))));
                           if(_GLF_DEAD(false))
                            barrier();
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             do
                              {
                               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                                {
                                 if(_GLF_WRAPPED_IF_TRUE(true))
                                  {
                                   if(_GLF_DEAD(false))
                                    barrier();
                                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                    {
                                     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
                                      {
                                       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                        {
                                        }
                                       else
                                        {
                                         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), bool(bvec3(false, true, true))), true, false, false)), true && (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), bool(bvec3(false, true, true))), true, false, false)), bool(bvec2(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), bool(bvec3(false, true, true))), true, false, false)), false))))))), false || (! (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(bvec3(false, true, true))), _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(true, (true) || false), false, false, true)), bool(bvec3(bool(bvec4(_GLF_IDENTITY(true, (true) || false), false, false, true)), true, false)))), false, false))))))))))
                                          {
                                          }
                                         else
                                          {
                                           barrier();
                                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                            barrier();
                                          }
                                        }
                                      }
                                     else
                                      {
                                      }
                                    }
                                   else
                                    {
                                    }
                                  }
                                 else
                                  {
                                  }
                                }
                              }
                             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
                            }
                           else
                            {
                            }
                           for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(1 ^ 1, (false ? _GLF_FUZZED(39178) : _GLF_IDENTITY(1 ^ 1, 0 ^ (1 ^ 1)))))); _GLF_IDENTITY(_injected_loop_counter --, ~ (~ (_injected_loop_counter --))))
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(201.286), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_IDENTITY(_GLF_FUZZED(1.9), (_GLF_FUZZED(1.9)) - length(vec4(0.0, 0.0, 0.0, 0.0)))), bvec2(true, false))).y, min(injectionSwitch.y, injectionSwitch.y))))))
                              barrier();
                             if(_GLF_DEAD(false))
                              barrier();
                            }
                          }
                        }
                      }
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              {
                               if(_GLF_DEAD(false))
                                barrier();
                               barrier();
                              }
                             if(_GLF_DEAD(false))
                              {
                               for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                                {
                                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) ^ 0))
                                  {
                                   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
                                    {
                                     if(_GLF_DEAD(false))
                                      {
                                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 | 0) >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter --)
                                        {
                                         if(_GLF_WRAPPED_IF_FALSE(false))
                                          {
                                          }
                                         else
                                          {
                                           do
                                            {
                                             barrier();
                                            }
                                           while(_GLF_WRAPPED_LOOP(false));
                                          }
                                        }
                                      }
                                     if(_GLF_WRAPPED_IF_FALSE(false))
                                      {
                                      }
                                     else
                                      {
                                       if(_GLF_DEAD(false))
                                        barrier();
                                       barrier();
                                      }
                                     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), false || ((false))) && true)))
                                      {
                                       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y)))), ! (_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bool(! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))) && true)))
                                        {
                                         if(_GLF_WRAPPED_IF_FALSE(false))
                                          {
                                          }
                                         else
                                          {
                                           if(_GLF_DEAD(false))
                                            {
                                             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                                              {
                                               barrier();
                                              }
                                            }
                                           barrier();
                                          }
                                        }
                                       else
                                        {
                                        }
                                      }
                                    }
                                  }
                                }
                               if(_GLF_WRAPPED_IF_FALSE(false))
                                {
                                }
                               else
                                {
                                 if(_GLF_DEAD(false))
                                  {
                                   do
                                    {
                                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, (1) | (1))); _injected_loop_counter ++)
                                      {
                                       do
                                        {
                                         if(_GLF_WRAPPED_IF_FALSE(false))
                                          {
                                          }
                                         else
                                          {
                                           if(_GLF_DEAD(false))
                                            barrier();
                                          }
                                         barrier();
                                        }
                                       while(_GLF_WRAPPED_LOOP(false));
                                      }
                                    }
                                   while(_GLF_WRAPPED_LOOP(false));
                                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                    {
                                    }
                                   else
                                    {
                                     if(_GLF_DEAD(false))
                                      barrier();
                                    }
                                  }
                                }
                               barrier();
                               if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false)))
                                barrier();
                              }
                            }
                          }
                        }
                       else
                        {
                        }
                      }
                     else
                      {
                      }
                     do
                      {
                       if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && _GLF_IDENTITY(true, ! (! (true)))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_DEAD(false)), ((_GLF_DEAD(false))) || false) && true)) && true)), ! (! (bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && _GLF_IDENTITY(true, ! (! (true)))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)), ! (! (bool(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))))))))))))))
                        barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                  }
                 else
                  {
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             else
              {
              }
            }
          }
        }
      }
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))), true, false)), (bool(bvec3(_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))), true, false))) || false)), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(! ((injectionSwitch.x > injectionSwitch.y))), false || (bool(! ((injectionSwitch.x > injectionSwitch.y)))))), (bool(_GLF_IDENTITY(bool(! ((injectionSwitch.x > injectionSwitch.y))), false || (bool(! ((injectionSwitch.x > injectionSwitch.y))))))) && true))))))) || false, true && (_GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))), true, false)), (bool(bvec3(_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))), true, false))) || false)), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(! ((injectionSwitch.x > injectionSwitch.y))), false || (bool(! ((injectionSwitch.x > injectionSwitch.y)))))), (bool(_GLF_IDENTITY(bool(! ((injectionSwitch.x > injectionSwitch.y))), false || (bool(! ((injectionSwitch.x > injectionSwitch.y))))))) && true))))))) || false, bool(bvec4((_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))), true, false)), (bool(bvec3(_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))), true, false))) || false)), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(! ((injectionSwitch.x > injectionSwitch.y))), false || (bool(! ((injectionSwitch.x > injectionSwitch.y)))))), (bool(_GLF_IDENTITY(bool(! ((injectionSwitch.x > injectionSwitch.y))), false || (bool(! ((injectionSwitch.x > injectionSwitch.y))))))) && true))))))) || false, false, true, false)))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
      }
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
}
