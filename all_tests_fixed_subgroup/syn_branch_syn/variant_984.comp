#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, min(0, 0))); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          barrier();
        }
       else
        {
        }
      }
    }
   else
    {
    }
  }
uint subgroup_size = 16;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 do
  {
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false, ! (! (false))) || (false))), false)), (bool(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), false))) && true)))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             for(int _injected_loop_counter = int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))) & 1)); _injected_loop_counter ++)
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec3(bvec3(false, false, true)))), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec3(bvec3(false, false, true)))), true)))))));
              }
            }
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6))))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(8), int(8)))); _injected_loop_counter --)
          {
           do
            {
             do
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
        }
       else
        {
        }
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY(false || (_GLF_WRAPPED_IF_FALSE(false)), true && (false || (_GLF_WRAPPED_IF_FALSE(false))))))
    {
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true))), ! (! _GLF_IDENTITY((_GLF_DEAD(false)), false || (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_DEAD(false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_DEAD(false)), false || ((_GLF_DEAD(false))))), _GLF_IDENTITY(bool(bvec3(! (_GLF_IDENTITY((_GLF_DEAD(false)), false || ((_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))))))))), true, true)), bool(bvec3(bool(bvec3(! (_GLF_IDENTITY((_GLF_DEAD(false)), false || ((_GLF_DEAD(false))))), true, true)), true, true)))))), ! (! ((_GLF_DEAD(false))))))))))
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     do
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) | (0 >> _GLF_IDENTITY(int(3), int(3)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (-57160 & 0)); _injected_loop_counter --)
      {
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)), _GLF_ONE(1.0, injectionSwitch.y))).x > injectionSwitch.y))))
    {
     do
      {
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false))))))), (_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false))))))), bool(bvec2(! (! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false))))))), true)))) && true))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != (_GLF_IDENTITY(0 ^ 0, int(ivec3(0 ^ 0, 0, 0)))), ! (! (_GLF_IDENTITY(_injected_loop_counter != (_GLF_IDENTITY(0 ^ 0, int(ivec3(0 ^ 0, 0, 0)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_injected_loop_counter, ~ (_GLF_IDENTITY(~ (_injected_loop_counter), 0 ^ (~ (_injected_loop_counter))))) != (_GLF_IDENTITY(0 ^ 0, int(ivec3(0 ^ 0, 0, 0)))))))))); _injected_loop_counter --)
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 ^ 0)); _injected_loop_counter --)
                {
                 for(int _injected_loop_counter = _GLF_IDENTITY(0, int(ivec4(0, 0, 0, 1))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, true && (_injected_loop_counter < 1))); _injected_loop_counter ++)
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter ++)
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                    }
                   else
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (false)))), false || (! (false))))), false, true, true)))))
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), 0.0, 1.0, 1.0, 0.0)), (vec2(mat3x2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), 0.0, 1.0, 1.0, 0.0))) * mat2(1.0))).y))))
                          barrier();
                         for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                          }
                         barrier();
                        }
                      }
                    }
                  }
                }
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           else
            {
            }
          }
        }
       barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          {
           do
            {
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-3011.0200), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-6495.2403)), bvec2(true, false))).x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), max((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0)))).y))))
              barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
     else
      {
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint workgroup_base = _GLF_IDENTITY(workgroup_size * _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u), 0u ^ (workgroup_size * _GLF_IDENTITY(workgroup_id, (_GLF_IDENTITY(workgroup_id, (workgroup_id) / uint(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y)))) ^ 0u)));
 uint virtual_gid = workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) | (_GLF_IDENTITY(subgroup_id, uint(uvec2(subgroup_id, 0u))))) * subgroup_size, min(_GLF_IDENTITY(subgroup_id, 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)), (subgroup_id) ^ 0u))) * subgroup_size, subgroup_id * subgroup_size)) + _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) >> 0u);
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(subgroup_local_id + 1, _GLF_IDENTITY((_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(1u), uint(1u)), clamp(0u >> _GLF_IDENTITY(uint(1u), uint(1u)), _GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(1u), uint(1u)), (0u >> _GLF_IDENTITY(uint(1u), uint(1u))) >> 0u), 0u >> _GLF_IDENTITY(uint(1u), uint(1u))))), max((_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(_GLF_IDENTITY(1u, ~ (~ (1u)))), uint(1u)), uint(_GLF_IDENTITY(uvec3(0u >> _GLF_IDENTITY(uint(1u), uint(1u)), ((0u | 0u) & 119828u), 0u), min(uvec3(0u >> _GLF_IDENTITY(uint(1u), uint(1u)), ((0u | _GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, min(0u, 0u))))) & 119828u), 0u), uvec3(0u >> _GLF_IDENTITY(uint(1u), uint(1u)), ((0u | 0u) & 119828u), 0u)))))), (0u >> _GLF_IDENTITY(uint(1u), _GLF_IDENTITY(uint(1u), (uint(1u)) - 0u)))))), min(uvec2(subgroup_local_id + 1, _GLF_IDENTITY((_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(1u), uint(1u)), clamp(0u >> _GLF_IDENTITY(uint(1u), uint(1u)), _GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(1u), uint(1u)), (0u >> _GLF_IDENTITY(uint(1u), uint(1u))) >> 0u), 0u >> _GLF_IDENTITY(uint(1u), uint(1u))))), max((_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(_GLF_IDENTITY(1u, ~ (~ (1u)))), uint(1u)), uint(_GLF_IDENTITY(uvec3(0u >> _GLF_IDENTITY(uint(1u), uint(1u)), ((0u | 0u) & 119828u), 0u), min(uvec3(0u >> _GLF_IDENTITY(uint(1u), uint(1u)), ((0u | _GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, min(0u, 0u))))) & 119828u), 0u), uvec3(0u >> _GLF_IDENTITY(uint(1u), uint(1u)), ((0u | 0u) & 119828u), 0u)))))), (0u >> _GLF_IDENTITY(uint(1u), _GLF_IDENTITY(uint(1u), (uint(1u)) - 0u)))))), uvec2(subgroup_local_id + 1, _GLF_IDENTITY((_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(1u), uint(1u)), clamp(0u >> _GLF_IDENTITY(uint(1u), uint(1u)), _GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(1u), uint(1u)), (0u >> _GLF_IDENTITY(uint(1u), uint(1u))) >> 0u), 0u >> _GLF_IDENTITY(uint(1u), uint(1u))))), max((_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(_GLF_IDENTITY(1u, ~ (~ (1u)))), uint(1u)), uint(_GLF_IDENTITY(uvec3(0u >> _GLF_IDENTITY(uint(1u), uint(1u)), ((0u | 0u) & 119828u), 0u), min(uvec3(0u >> _GLF_IDENTITY(uint(1u), uint(1u)), ((0u | _GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, min(0u, 0u))))) & 119828u), 0u), uvec3(0u >> _GLF_IDENTITY(uint(1u), uint(1u)), ((0u | 0u) & 119828u), 0u)))))), (0u >> _GLF_IDENTITY(uint(1u), _GLF_IDENTITY(uint(1u), (uint(1u)) - 0u))))))))), clamp(uint(uvec2(subgroup_local_id + 1, (_GLF_IDENTITY(0u, ~ (~ (_GLF_IDENTITY(0u, _GLF_IDENTITY((_GLF_IDENTITY(0u, (0u) | _GLF_IDENTITY((0u), clamp((0u), (0u), (0u))))) >> 0u, (true ? (_GLF_IDENTITY(0u, (0u) | _GLF_IDENTITY((0u), clamp((0u), (0u), (0u))))) >> 0u : _GLF_FUZZED(subgroup_local_id))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(1u), uint(1u)), (_GLF_IDENTITY(_GLF_IDENTITY(uint(1u), uint(1u)), min(_GLF_IDENTITY(_GLF_IDENTITY(uint(1u), uint(1u)), (_GLF_IDENTITY(uint(1u), uint(1u))) + 0u), _GLF_IDENTITY(uint(1u), uint(1u))))) - 0u)))), uint(uvec2(subgroup_local_id + 1, (0u >> _GLF_IDENTITY(uint(_GLF_IDENTITY(1u, min(_GLF_IDENTITY(1u, min(1u, 1u)), _GLF_IDENTITY(1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (1u))))), uint(1u))))), uint(uvec2(_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(1, 1, 1, (_GLF_IDENTITY(1 & 1, (_GLF_IDENTITY(1 & 1, (_GLF_IDENTITY(1 & 1, ~ (~ (1 & 1)))) << 0)) - 0))), clamp(ivec4(1, 1, 1, (1 & 1)), _GLF_IDENTITY(ivec4(1, 1, 1, (1 & 1)), _GLF_IDENTITY(clamp(ivec4(1, 1, 1, (1 & 1)), ivec4(1, 1, 1, (1 & 1)), ivec4(1, 1, 1, (1 & 1))), max(clamp(ivec4(1, 1, 1, (1 & 1)), ivec4(1, 1, 1, (1 & 1)), ivec4(1, 1, 1, (1 & 1))), _GLF_IDENTITY(clamp(ivec4(1, 1, 1, (1 & 1)), ivec4(1, 1, 1, (1 & 1)), ivec4(1, 1, 1, (1 & 1))), (clamp(ivec4(1, 1, 1, (1 & 1)), ivec4(1, 1, 1, (1 & 1)), ivec4(1, 1, 1, (1 & 1)))) ^ ivec4(0, 0, 0, 0))))), ivec4(1, 1, 1, _GLF_IDENTITY((1 & 1), (_GLF_IDENTITY((1 & 1), min((1 & 1), _GLF_IDENTITY((1 & 1), (true ? (1 & 1) : _GLF_FUZZED(-92757)))))) - (0 << _GLF_IDENTITY(int(1), int(1)))))))), (int(_GLF_IDENTITY(ivec4(1, 1, 1, (_GLF_IDENTITY(1 & _GLF_IDENTITY(1, int(ivec2(1, ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))))), (1 & 1) - 0))), clamp(ivec4(1, 1, 1, (1 & 1)), _GLF_IDENTITY(ivec4(1, 1, 1, (_GLF_IDENTITY(1, 0 | (1)) & 1)), (ivec4(1, 1, 1, 1) & ivec4(1, 1, 1, 1)) * (ivec4(1, 1, 1, (_GLF_IDENTITY(1, 0 | (1)) & 1)))), ivec4(1, 1, 1, (1 & 1)))))) - int(_GLF_ZERO(0.0, injectionSwitch.x)))))), min(subgroup_local_id + _GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec4(1, 1, 1, _GLF_IDENTITY((_GLF_IDENTITY(1 & 1, (1 & 1) - 0)), 0 | ((_GLF_IDENTITY(1 & 1, (1 & 1) - 0))))), clamp(ivec4(_GLF_IDENTITY(1, (1) | _GLF_IDENTITY(0, (0) - 0)), 1, 1, (1 & 1)), ivec4(1, _GLF_IDENTITY(1, (1) ^ 0), 1, (1 & 1)), ivec4(1, 1, 1, _GLF_IDENTITY((1 & 1), (_GLF_IDENTITY((1 & 1), ((1 & 1)) + 0)) ^ (0 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), max(int(5), int(5))))))))))))), subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, (0 >> _GLF_IDENTITY(int(6), int(6))) | _GLF_IDENTITY((1), ((1)) / (1 ^ 0))), min(1, _GLF_IDENTITY(1, int(_GLF_IDENTITY(_GLF_IDENTITY(ivec4(1, 1, 1, (_GLF_IDENTITY(1 & 1, _GLF_IDENTITY((_GLF_IDENTITY(1 & 1, (1 & 1) >> 0)) - 0, ((1 & 1) - 0) - 0)))), ivec4(0, 0, 0, _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, ~ (~ (0))), 0, 0))) | (ivec4(1, 1, 1, (_GLF_IDENTITY(1 & _GLF_IDENTITY(1, (1) << 0), _GLF_IDENTITY((1 & 1) - 0, ((_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), ~ (~ (~ (1)))))) & 1) - 0) - 0)))))), clamp(ivec4(1, _GLF_IDENTITY(_GLF_IDENTITY(1, int(ivec3(1, int(_GLF_ZERO(_GLF_IDENTITY(0.0, min(0.0, 0.0)), injectionSwitch.x)), 1))), (_GLF_IDENTITY(1, (1) | (1))) >> 0), 1, (1 & 1)), ivec4(1, 1, 1, (1 & 1)), ivec4(1, 1, 1, (1 & 1)))))))))), (_GLF_IDENTITY(0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(1u), (_GLF_IDENTITY(uint(1u), ~ (~ (uint(1u))))) + 0u), uint(1u)), (0u >> _GLF_IDENTITY(uint(1u), uint(1u))) ^ (0u >> _GLF_IDENTITY(uint(3u), uint(3u))))))))))) % subgroup_size), (((_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY(uint(uvec2(subgroup_local_id + 1, _GLF_IDENTITY((_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(1u), uint(1u)), clamp(0u >> _GLF_IDENTITY(uint(1u), uint(1u)), 0u >> _GLF_IDENTITY(uint(1u), uint(1u)), 0u >> _GLF_IDENTITY(uint(1u), uint(1u))))), max((_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(_GLF_IDENTITY(1u, ~ (~ (1u)))), uint(1u)), uint(uvec3(0u >> _GLF_IDENTITY(uint(1u), uint(1u)), ((0u | 0u) & 119828u), 0u)))), (0u >> _GLF_IDENTITY(uint(1u), _GLF_IDENTITY(uint(1u), (uint(1u)) - 0u))))))), clamp(uint(uvec2(subgroup_local_id + 1, (_GLF_IDENTITY(0u, ~ (~ _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(0u, _GLF_IDENTITY((_GLF_IDENTITY(0u, (0u) | (0u))) >> 0u, (true ? _GLF_IDENTITY((_GLF_IDENTITY(0u, (0u) | (0u))) >> 0u, uint(uvec3((_GLF_IDENTITY(0u, (0u) | (0u))) >> 0u, 0u, 1u))) : _GLF_FUZZED(2504u))))), (_GLF_IDENTITY((_GLF_IDENTITY(0u, _GLF_IDENTITY((_GLF_IDENTITY(0u, (0u) | (0u))) >> 0u, (true ? _GLF_IDENTITY((_GLF_IDENTITY(0u, (0u) | (0u))) >> 0u, uint(uvec3((_GLF_IDENTITY(0u, (0u) | (0u))) >> 0u, 0u, 1u))) : _GLF_FUZZED(2504u))))), ((_GLF_IDENTITY(0u, _GLF_IDENTITY((_GLF_IDENTITY(0u, (0u) | (0u))) >> 0u, (true ? _GLF_IDENTITY((_GLF_IDENTITY(0u, (0u) | (0u))) >> 0u, uint(uvec3((_GLF_IDENTITY(0u, (0u) | (0u))) >> 0u, 0u, 1u))) : _GLF_FUZZED(2504u)))))) - 0u)) | (_GLF_IDENTITY((_GLF_IDENTITY(0u, _GLF_IDENTITY((_GLF_IDENTITY(0u, (0u) | (0u))) >> 0u, (true ? _GLF_IDENTITY((_GLF_IDENTITY(0u, (0u) | (0u))) >> 0u, uint(uvec3((_GLF_IDENTITY(0u, (0u) | (0u))) >> 0u, 0u, 1u))) : _GLF_FUZZED(2504u))))), ((_GLF_IDENTITY(0u, _GLF_IDENTITY((_GLF_IDENTITY(0u, (0u) | (0u))) >> 0u, (true ? _GLF_IDENTITY((_GLF_IDENTITY(0u, (0u) | (0u))) >> 0u, uint(uvec3((_GLF_IDENTITY(0u, (0u) | (0u))) >> 0u, 0u, 1u))) : _GLF_FUZZED(2504u)))))) - uint(_GLF_ZERO(0.0, injectionSwitch.x))))), (_GLF_IDENTITY((_GLF_IDENTITY(0u, _GLF_IDENTITY((_GLF_IDENTITY(0u, (0u) | (0u))) >> 0u, (true ? _GLF_IDENTITY((_GLF_IDENTITY(0u, (0u) | (0u))) >> 0u, uint(uvec3((_GLF_IDENTITY(0u, (0u) | (0u))) >> 0u, 0u, 1u))) : _GLF_FUZZED(2504u))))), (_GLF_IDENTITY((_GLF_IDENTITY(0u, _GLF_IDENTITY((_GLF_IDENTITY(0u, (0u) | (0u))) >> 0u, (true ? _GLF_IDENTITY((_GLF_IDENTITY(0u, (0u) | (0u))) >> 0u, uint(uvec3((_GLF_IDENTITY(0u, (0u) | (0u))) >> 0u, 0u, 1u))) : _GLF_FUZZED(2504u))))), ((_GLF_IDENTITY(0u, _GLF_IDENTITY((_GLF_IDENTITY(0u, (0u) | (0u))) >> 0u, (true ? _GLF_IDENTITY((_GLF_IDENTITY(0u, (0u) | (0u))) >> 0u, uint(uvec3((_GLF_IDENTITY(0u, (0u) | (0u))) >> 0u, 0u, 1u))) : _GLF_FUZZED(2504u)))))) - 0u)) | (_GLF_IDENTITY((_GLF_IDENTITY(0u, _GLF_IDENTITY((_GLF_IDENTITY(0u, (0u) | (0u))) >> 0u, (true ? _GLF_IDENTITY((_GLF_IDENTITY(0u, (0u) | (0u))) >> 0u, uint(uvec3((_GLF_IDENTITY(0u, (0u) | (0u))) >> 0u, 0u, 1u))) : _GLF_FUZZED(2504u))))), ((_GLF_IDENTITY(0u, _GLF_IDENTITY((_GLF_IDENTITY(0u, (0u) | (0u))) >> 0u, (true ? _GLF_IDENTITY((_GLF_IDENTITY(0u, (0u) | (0u))) >> 0u, uint(uvec3((_GLF_IDENTITY(0u, (0u) | (0u))) >> 0u, 0u, 1u))) : _GLF_FUZZED(2504u)))))) - uint(_GLF_ZERO(0.0, injectionSwitch.x)))))) | 0u))) >> _GLF_IDENTITY(uint(1u), uint(1u))))), uint(uvec2(subgroup_local_id + 1, (_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(_GLF_IDENTITY(1u, min(_GLF_IDENTITY(1u, min(1u, 1u)), _GLF_IDENTITY(1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (1u))))), uint(1u)), uint(uvec3(_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(_GLF_IDENTITY(1u, min(_GLF_IDENTITY(1u, min(1u, 1u)), _GLF_IDENTITY(1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (1u))))), uint(1u)), min(0u >> _GLF_IDENTITY(uint(_GLF_IDENTITY(1u, min(_GLF_IDENTITY(1u, min(1u, 1u)), _GLF_IDENTITY(1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (1u))))), uint(1u)), _GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(_GLF_IDENTITY(1u, min(_GLF_IDENTITY(1u, min(1u, 1u)), _GLF_IDENTITY(1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (1u))))), uint(1u)), (false ? _GLF_FUZZED(workgroup_id) : 0u >> _GLF_IDENTITY(uint(_GLF_IDENTITY(1u, min(_GLF_IDENTITY(1u, min(1u, 1u)), _GLF_IDENTITY(1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (1u))))), uint(1u)))))), 0u, 0u)))))), uint(uvec2(_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(1, 1, 1, (_GLF_IDENTITY(1 & _GLF_IDENTITY(1, (1) / int(_GLF_ONE(1.0, injectionSwitch.y))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1 & 1, (_GLF_IDENTITY(1 & 1, ~ (~ (1 & 1)))) << 0)), ((_GLF_IDENTITY(1 & 1, (_GLF_IDENTITY(1 & 1, ~ (~ (1 & 1)))) << 0))) | ((_GLF_IDENTITY(1 & 1, (_GLF_IDENTITY(1 & 1, ~ (~ (1 & 1)))) << 0)))) - 0, 0 + (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1 & 1, (_GLF_IDENTITY(1 & 1, ~ (~ (1 & 1)))) << 0)), ((_GLF_IDENTITY(1 & 1, (_GLF_IDENTITY(1 & 1, ~ (~ (1 & 1)))) << 0))) | ((_GLF_IDENTITY(1 & 1, (_GLF_IDENTITY(1 & 1, ~ (~ (1 & 1)))) << 0)))) - 0, min(_GLF_IDENTITY((_GLF_IDENTITY(1 & 1, (_GLF_IDENTITY(1 & 1, ~ (~ (1 & 1)))) << 0)), ((_GLF_IDENTITY(1 & 1, (_GLF_IDENTITY(1 & 1, ~ (~ (1 & 1)))) << 0))) | ((_GLF_IDENTITY(1 & 1, (_GLF_IDENTITY(1 & 1, ~ (~ (1 & 1)))) << 0)))) - 0, _GLF_IDENTITY((_GLF_IDENTITY(1 & 1, (_GLF_IDENTITY(1 & 1, ~ (~ (1 & 1)))) << 0)), ((_GLF_IDENTITY(1 & 1, (_GLF_IDENTITY(1 & 1, ~ (~ (1 & 1)))) << 0))) | ((_GLF_IDENTITY(1 & 1, (_GLF_IDENTITY(1 & 1, ~ (~ (1 & 1)))) << 0)))) - 0))))))), clamp(ivec4(1, _GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec3(1, 1, 1), (ivec3(1, 1, 1)) * ivec3(1, 1, 1)))), 1, (1 & 1)), _GLF_IDENTITY(ivec4(1, 1, 1, (1 & 1)), clamp(ivec4(1, 1, 1, (1 & 1)), ivec4(1, 1, 1, (1 & 1)), ivec4(1, 1, 1, (1 & 1)))), ivec4(1, 1, 1, (1 & 1))))), (int(_GLF_IDENTITY(ivec4(1, 1, 1, (_GLF_IDENTITY(1 & _GLF_IDENTITY(1, int(ivec2(1, ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))))), (1 & 1) - 0))), clamp(_GLF_IDENTITY(ivec4(1, 1, 1, (1 & 1)), clamp(ivec4(1, 1, 1, (1 & 1)), _GLF_IDENTITY(ivec4(1, 1, 1, (1 & 1)), max(ivec4(1, 1, 1, (1 & 1)), ivec4(1, 1, 1, (1 & 1)))), _GLF_IDENTITY(ivec4(1, 1, 1, (1 & 1)), ~ (~ (ivec4(1, 1, 1, (1 & 1))))))), ivec4(1, 1, 1, _GLF_IDENTITY((_GLF_IDENTITY(1, 0 | (1)) & 1), 0 ^ ((_GLF_IDENTITY(1, 0 | (1)) & 1)))), ivec4(1, 1, 1, (1 & 1)))))) - int(_GLF_ZERO(0.0, injectionSwitch.x)))))), min(subgroup_local_id + _GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec4(1, _GLF_IDENTITY(1, 0 | (1)), 1, _GLF_IDENTITY((_GLF_IDENTITY(1 & 1, (1 & 1) - 0)), 0 | ((_GLF_IDENTITY(1 & 1, (1 & 1) - 0))))), clamp(ivec4(_GLF_IDENTITY(1, (1) | _GLF_IDENTITY(0, (0) - 0)), 1, 1, (1 & 1)), ivec4(1, 1, 1, _GLF_IDENTITY((1 & 1), int(_GLF_IDENTITY(ivec2((1 & 1), int(_GLF_ZERO(0.0, injectionSwitch.x))), min(ivec2((1 & 1), int(_GLF_ZERO(0.0, injectionSwitch.x))), ivec2((1 & 1), int(_GLF_ZERO(0.0, injectionSwitch.x)))))))), ivec4(1, 1, 1, (1 & 1)))))))), subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, (0 >> _GLF_IDENTITY(int(6), int(6))) | (1)), min(1, _GLF_IDENTITY(1, int(_GLF_IDENTITY(_GLF_IDENTITY(ivec4(1, 1, 1, (_GLF_IDENTITY(1 & 1, _GLF_IDENTITY((_GLF_IDENTITY(1 & 1, (1 & 1) >> 0)) - 0, ((1 & 1) - 0) - 0)))), ivec4(0, 0, 0, _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, ~ (~ (0))), 0, 0))) | (ivec4(1, 1, 1, (_GLF_IDENTITY(1 & _GLF_IDENTITY(1, (1) << 0), _GLF_IDENTITY((1 & 1) - 0, ((_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), ~ (~ (~ (1)))))) & 1, 1 * (_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), ~ (~ (~ (1)))))) & 1))) - 0) - 0)))))), clamp(ivec4(1, _GLF_IDENTITY(_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec3(1, int(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY(1, min(1, 1))), (ivec3(1, int(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY(1, min(1, 1)))) | (ivec3(1, int(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY(1, min(1, 1))))))), (_GLF_IDENTITY(1, (1) | (1))) >> 0), 1, (1 & 1)), ivec4(1, 1, 1, (1 & 1)), ivec4(1, 1, 1, (1 & 1)))))))))), (_GLF_IDENTITY(0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(1u), (_GLF_IDENTITY(uint(1u), ~ (~ (uint(1u))))) + 0u), uint(1u)), (0u >> _GLF_IDENTITY(uint(1u), uint(1u))) ^ (0u >> _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), (_GLF_IDENTITY(false, true && (false)) ? _GLF_FUZZED(bitfieldExtract(subgroup_local_id, -38133, (-30204 / 37901))) : uint(3u))))))))))))) % subgroup_size)) | 0u);
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = _GLF_IDENTITY((0 ^ 1), ~ (_GLF_IDENTITY(~ ((0 ^ 1)), max(_GLF_IDENTITY(~ ((0 ^ 1)), (~ (_GLF_IDENTITY((0 ^ 1), clamp((0 ^ 1), (0 ^ 1), (0 ^ 1))))) ^ 0), _GLF_IDENTITY(~ ((0 ^ 1)), int(ivec3(~ ((0 ^ 1)), 0, 0))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), true && (_GLF_WRAPPED_IF_FALSE(false))))
        {
         for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
        }
       else
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter)) < 1, bool(bvec4(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter)) < 1, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y))))) && true)))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))); _injected_loop_counter ++)
            {
             do
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), (clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) * cos(_GLF_IDENTITY(0.0, float(mat4x3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, sqrt(1.0), determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0)), 0.0, 0.0, cos(0.0), 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(1.0, 0.0, 1.0)), dot(vec3(0.0, 1.0, 0.0), vec3(1.0, 0.0, 1.0))), determinant(mat2(1.0, 0.0, 0.0, 1.0)), 0.0)), 1.0, 0.0, 1.0)))))) > injectionSwitch.y), bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED((injectionSwitch / 46.36)))), injectionSwitch, injectionSwitch)).x, _GLF_IDENTITY(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), (clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) * cos(0.0))) > injectionSwitch.y), true && ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), (clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) * cos(0.0))), min(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), (clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) * cos(0.0))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), (clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) * cos(0.0))), mix(float(_GLF_FUZZED(-461.467)), float(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), (clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) * cos(0.0)))), bool(true))))) > injectionSwitch.y))), true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), (clamp(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0), injectionSwitch.x)), injectionSwitch.x)) * cos(0.0))) > injectionSwitch.y), bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), (clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) * cos(_GLF_IDENTITY(0.0, min(0.0, 0.0))))) > injectionSwitch.y), true && ((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), (clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) * _GLF_IDENTITY(cos(0.0), (true ? cos(0.0) : _GLF_FUZZED(3.9))))) > injectionSwitch.y))), true, false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-986.941), _GLF_FUZZED(-6.8)), bvec2(false, false))) : _GLF_FUZZED(vec2(9.8, 502.087)))).x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).y)))))) || false)) || (false))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 do
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(250.207)), bool(false)))))))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                      }
                     else
                      {
                       barrier();
                      }
                    }
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 do
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   else
                    {
                    }
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, _GLF_IDENTITY(true && (true), ! (! (_GLF_IDENTITY(true && (true), _GLF_IDENTITY(bool(bvec4(true && (true), false, false, false)), ! (_GLF_IDENTITY(! (bool(bvec4(true && (true), false, false, false))), true && (! (bool(bvec4(true && (true), false, false, false))))))))))))), _GLF_IDENTITY(_GLF_IDENTITY(false || (_GLF_IDENTITY(! (true), ! (! (! (true))))), ! (! (false || (_GLF_IDENTITY(! (true), ! (! (! (true)))))))), ! (_GLF_IDENTITY(! (false || (_GLF_IDENTITY(! (true), ! (! (! (true)))))), ! _GLF_IDENTITY((! (_GLF_IDENTITY(! (false || _GLF_IDENTITY((_GLF_IDENTITY(! _GLF_IDENTITY((true), ((true)) || false), _GLF_IDENTITY(! (! (! _GLF_IDENTITY((true), ! (! ((true)))))), ! (! (! (! (! (true)))))))), ! (! ((_GLF_IDENTITY(! (true), ! (! (! (true))))))))), ! _GLF_IDENTITY((! (! (false || _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(! _GLF_IDENTITY(_GLF_IDENTITY((true), ((true)) || false), bool(bvec4(_GLF_IDENTITY((true), ((true)) || false), false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(! (! (! (true))), ! (! (_GLF_IDENTITY(! (! (! (true))), false || (! _GLF_IDENTITY((! (! (_GLF_IDENTITY(true, false || (true))))), bool(bvec3((! (! (true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))))))), _GLF_IDENTITY(! (! ((_GLF_IDENTITY(! (true), ! (! (! (true))))))), true && (_GLF_IDENTITY(! (! ((_GLF_IDENTITY(! (true), ! (! (! (true))))))), ! (! (! (! ((_GLF_IDENTITY(! (true), ! (! (! (true))))))))))))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(! _GLF_IDENTITY(_GLF_IDENTITY((true), ((true)) || false), bool(bvec4(_GLF_IDENTITY((true), ((true)) || false), false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(! (! (! (true))), ! (! (_GLF_IDENTITY(! (! (! (true))), false || (! _GLF_IDENTITY((! (! (_GLF_IDENTITY(true, false || (true))))), bool(bvec3((! (! (true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))))))), _GLF_IDENTITY(! (! ((_GLF_IDENTITY(! (true), ! (! (! (true))))))), true && (_GLF_IDENTITY(_GLF_IDENTITY(! (! ((_GLF_IDENTITY(! (true), ! (! (! (true))))))), ! (_GLF_IDENTITY(! (! (! ((_GLF_IDENTITY(! (true), ! (! (! (true)))))))), true && (! (! (! ((_GLF_IDENTITY(! (true), ! (! (! (true)))))))))))), ! (! (! (! ((_GLF_IDENTITY(! (true), ! (! (! (true))))))))))))))))))), ((! (! (false || _GLF_IDENTITY((_GLF_IDENTITY(! _GLF_IDENTITY(_GLF_IDENTITY((true), ((true)) || false), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY((true), ((true)) || false), true && (_GLF_IDENTITY(_GLF_IDENTITY((true), ((true)) || false), (_GLF_IDENTITY((true), ((true)) || false)) && true))), false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(! (_GLF_IDENTITY(! (! (true)), true && (! (! (true))))), ! (! (_GLF_IDENTITY(! (! (! (true))), false || (! _GLF_IDENTITY((! (! (_GLF_IDENTITY(true, false || (true))))), bool(_GLF_IDENTITY(bvec3((! (! (true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec3(bvec4(_GLF_IDENTITY(bvec3((! (! (true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec3(bvec4(bvec3((! (! (true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), false))), false)))))))))))), _GLF_IDENTITY(! (! ((_GLF_IDENTITY(! (true), ! (! (! (true))))))), true && (_GLF_IDENTITY(! (! ((_GLF_IDENTITY(! (true), ! (! (! (true))))))), ! (! (! (! ((_GLF_IDENTITY(! (true), ! (! (! (true))))))))))))))))) && true)))), ! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY((! (! (false || _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(! (true), ! (! (! _GLF_IDENTITY((true), bool(bvec3((true), false, true))))))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(! (true), ! (! (! (true))))), bool(bvec3((_GLF_IDENTITY(! (true), ! (_GLF_IDENTITY(! (! (true)), bool(bool(_GLF_IDENTITY(! (! (true)), true && (! (! (true)))))))))), false, true)))))), ! (! _GLF_IDENTITY(((_GLF_IDENTITY(_GLF_IDENTITY(! (true), ! (! (! (true)))), bool(bvec2(_GLF_IDENTITY(! _GLF_IDENTITY((true), ((true)) && true), ! (! (! (true)))), false))))), bool(bvec3(((_GLF_IDENTITY(_GLF_IDENTITY(! (true), ! (! (! (true)))), bool(bvec2(_GLF_IDENTITY(! _GLF_IDENTITY((true), ((true)) && true), ! (! (! (true)))), false))))), false, false)))))))), ((! (! (false || _GLF_IDENTITY((_GLF_IDENTITY(! (true), ! _GLF_IDENTITY((! (! (true))), bool(bvec3((! (! (true))), _GLF_IDENTITY(false, (false) || false), true))))), ! (! ((_GLF_IDENTITY(! (true), ! (! (! (true)))))))))))) || false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((_GLF_IDENTITY((! (! (false || _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(! (true), ! (! (! (true))))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(! (true), ! (! (! (true))))), bool(bvec3((_GLF_IDENTITY(_GLF_IDENTITY(! (true), ! (! (! (true)))), ! (! (! (true))))), false, true)))))), _GLF_IDENTITY(! (! ((_GLF_IDENTITY(! (true), ! (! (! (true))))))), true && (! (! ((_GLF_IDENTITY(_GLF_IDENTITY(! (true), ! (! (! (true)))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(! (true), ! (! (! (true)))), true && (_GLF_IDENTITY(! (true), ! (! (! (true))))))), true && (bool(_GLF_IDENTITY(_GLF_IDENTITY(! (true), ! (_GLF_IDENTITY(! (! (true)), ! (_GLF_IDENTITY(! (! (! (true))), ! (! (! (! (! (true)))))))))), true && (_GLF_IDENTITY(! (true), ! (! (! (true)))))))))))))))))))), ((! (! (false || _GLF_IDENTITY((_GLF_IDENTITY(! (true), ! (! (! (true))))), ! (! ((_GLF_IDENTITY(! (true), ! (! (! (true)))))))))))) || false)))), (! _GLF_IDENTITY((_GLF_IDENTITY((! (! (false || _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(! (true), ! (! (! (true))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(! (true), ! (_GLF_IDENTITY(! (! (true)), bool(bool(_GLF_IDENTITY(! (! (true)), (! (! (true))) && true))))))), bool(bvec3((_GLF_IDENTITY(! (true), ! (_GLF_IDENTITY(! (! (true)), bool(bool(_GLF_IDENTITY(! (! (true)), true && (! (! (true)))))))))), false, true))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(! (true), ! (! _GLF_IDENTITY((! _GLF_IDENTITY((true), false || ((true)))), ! (! (_GLF_IDENTITY((! _GLF_IDENTITY((true), false || ((true)))), true && ((! _GLF_IDENTITY((true), false || ((true))))))))))), false || (_GLF_IDENTITY(! (true), ! (! _GLF_IDENTITY((! _GLF_IDENTITY((true), false || ((true)))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY((! _GLF_IDENTITY((true), false || ((true)))), true && ((! _GLF_IDENTITY((true), false || ((true)))))), (_GLF_IDENTITY((! _GLF_IDENTITY((true), false || ((true)))), true && ((! _GLF_IDENTITY((true), false || ((true))))))) && true))))))))), bool(bvec3((_GLF_IDENTITY(_GLF_IDENTITY(! (true), ! (_GLF_IDENTITY(! (! (true)), bool(bool(_GLF_IDENTITY(! (! (true)), true && (! (! (true))))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (true), ! (_GLF_IDENTITY(! (! (true)), bool(bool(_GLF_IDENTITY(! (! (true)), true && (! (! (true))))))))), (_GLF_IDENTITY(! (true), ! (_GLF_IDENTITY(! (! (true)), bool(bool(_GLF_IDENTITY(! (! (true)), true && _GLF_IDENTITY((! (! (true))), _GLF_IDENTITY(bool(bvec4((! (! (true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)), bool(bvec3(bool(bvec4((! (! (true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)), true, false))))))))))) || false))))), _GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bool(false))))), _GLF_IDENTITY(true, (_GLF_IDENTITY(true, true && (true))) && true))))) && true)))), ! (! ((_GLF_IDENTITY(_GLF_IDENTITY(! (true), ! (! (! (true)))), bool(bvec2(_GLF_IDENTITY(! (true), ! (! (! (true)))), false)))))))))), ((! (! (false || _GLF_IDENTITY((_GLF_IDENTITY(! _GLF_IDENTITY((true), ! (! ((true)))), ! _GLF_IDENTITY((! (! (true))), bool(bvec3(_GLF_IDENTITY((! (! (true))), bool(_GLF_IDENTITY(bvec3((! (! (true))), true, true), bvec3(_GLF_IDENTITY(bvec3(bvec3((! (! (true))), true, true)), bvec3(bvec3(bvec3(bvec3((! (! (true))), true, true))))))))), false, true))))), ! (! ((_GLF_IDENTITY(! (true), ! (! (! (true)))))))))))) || false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((_GLF_IDENTITY((! (! (false || _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(! (true), _GLF_IDENTITY(! (! (! (true))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(! (! (! (true))), ! (_GLF_IDENTITY(! (! (! (! (true)))), ! (! (! (! (! (! (true))))))))))), false || (bool(bool(_GLF_IDENTITY(! (! (! (true))), ! (! (! (! (! (true))))))))))))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(! (true), _GLF_IDENTITY(! (! (_GLF_IDENTITY(! (true), ! (! (_GLF_IDENTITY(! (true), (! (true)) || false)))))), ! (! (! (! (_GLF_IDENTITY(! (true), ! (! (_GLF_IDENTITY(! (true), (! _GLF_IDENTITY((true), true && ((true)))) || false))))))))))), bool(bvec3((_GLF_IDENTITY(! (true), ! (_GLF_IDENTITY(! (! (true)), ! (! (! (! (true)))))))), false, true)))))), ! (! ((_GLF_IDENTITY(! (true), ! (! (! (true))))))))))), ((! (! _GLF_IDENTITY((false || _GLF_IDENTITY((_GLF_IDENTITY(! _GLF_IDENTITY((true), ! (_GLF_IDENTITY(! ((true)), (! ((true))) && true))), ! (! (! (true))))), ! (! ((_GLF_IDENTITY(_GLF_IDENTITY(! (true), ! (! (! (true)))), false || (_GLF_IDENTITY(! (true), ! (! (! (true))))))))))), true && (_GLF_IDENTITY((false || _GLF_IDENTITY((_GLF_IDENTITY(! _GLF_IDENTITY((true), ! (_GLF_IDENTITY(! ((true)), (! ((true))) && true))), ! (! (! (true))))), ! (! ((_GLF_IDENTITY(_GLF_IDENTITY(! (true), ! (! (! (true)))), false || (_GLF_IDENTITY(! (true), ! (! (! (true))))))))))), ! (! ((false || _GLF_IDENTITY((_GLF_IDENTITY(! _GLF_IDENTITY((true), ! (_GLF_IDENTITY(! ((true)), (! ((true))) && true))), ! (! (! (true))))), ! (! ((_GLF_IDENTITY(_GLF_IDENTITY(! (true), ! (! (! (true)))), false || (_GLF_IDENTITY(! (true), ! (! (! (true))))))))))))))))))) || false))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))))
                    {
                     buf[virtual_gid] = 1;
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         barrier();
                        }
                       if(_GLF_DEAD(false))
                        barrier();
                       for(int _injected_loop_counter = (-91082 & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(ivec2(int(6), 0)), 0 | (int(ivec2(int(6), 0))))))) >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter ++)
                        {
                         do
                          {
                           do
                            {
                             if(_GLF_DEAD(false))
                              {
                               do
                                {
                                 barrier();
                                }
                               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) && true)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) && true))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) && true)))), (! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) && true))))) && true)))))))
                                {
                                 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                                  barrier();
                                 barrier();
                                }
                               if(_GLF_DEAD(false))
                                barrier();
                              }
                             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                              {
                               barrier();
                              }
                            }
                           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (false) || false)));
                          }
                         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                        }
                       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           do
                            {
                             barrier();
                            }
                           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, ! (! (false))))))));
                          }
                        }
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                          }
                         else
                          {
                          }
                         barrier();
                         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))
                          barrier();
                        }
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, bool(bool(true))))))))
                        {
                         barrier();
                        }
                       else
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(vec4(injectionSwitch.x, 0.0, 1.0, _GLF_IDENTITY(abs(0.0), min(abs(0.0), abs(0.0)))), vec4(mat3(vec4(injectionSwitch.x, 0.0, 1.0, _GLF_IDENTITY(abs(0.0), min(abs(0.0), abs(0.0)))), 0.0, 0.0, 1.0, 0.0, 1.0))))) > _GLF_IDENTITY(injectionSwitch.y, abs(1.0) * _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(float(_GLF_IDENTITY(25071, _GLF_IDENTITY(0, _GLF_IDENTITY(0 ^ (0), int(ivec2(0 ^ (0), 0)))) + (_GLF_IDENTITY(25071, (25071) | (_GLF_IDENTITY(25071, int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(25071, ~ (_GLF_IDENTITY(~ (25071), (~ (25071)) ^ 0)))))))))))), vec2(_GLF_FUZZED(-4.2), (injectionSwitch)[1]), bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))).y) - 0.0)), min((_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(float(_GLF_IDENTITY(25071, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(25071, (25071) | 0)), 0 ^ (~ (_GLF_IDENTITY(25071, (25071) | 0))))))))), vec2(_GLF_IDENTITY(_GLF_FUZZED(-4.2), float(mat4x3(_GLF_FUZZED(-4.2), 1.0, 1.0, 1.0, 1.0, 0.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, sqrt(1.0), 1.0, 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), 0.0, 0.0, 1.0, 1.0, 1.0)), 1.0, 0.0, 0.0, 1.0, sin(log(1.0))))), (injectionSwitch)[1]), bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))).y) - 0.0)), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(float(25071))), vec2(_GLF_FUZZED(-4.2), (injectionSwitch)[1]), bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))).y) - 0.0)), mix(float(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[_GLF_IDENTITY(_GLF_IDENTITY(0, (0) | (0)), (true ? 0 : _GLF_FUZZED(-9527)))], _GLF_FUZZED(_GLF_IDENTITY(float(25071), mix(float(_GLF_IDENTITY(float(25071), max(float(25071), float(25071)))), float(_GLF_FUZZED(float(-91595))), bool(false))))), vec2(_GLF_FUZZED(-4.2), (injectionSwitch)[1]), bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))).y) - 0.0)), mix(float(_GLF_FUZZED(-209.314)), float((_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY(_GLF_FUZZED(float(25071)), (_GLF_FUZZED(float(25071))) / cos(0.0))), vec2(_GLF_FUZZED(-4.2), (injectionSwitch)[1]), bvec2(false, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y))))) && true))))).y) - 0.0))), bool(true)))), float(_GLF_FUZZED(6398.9348)), bool(false))), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(float(25071))), vec2(_GLF_FUZZED(-4.2), (injectionSwitch)[1]), bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))).y) - 0.0)), mix(float(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[_GLF_IDENTITY(_GLF_IDENTITY(0, (0) | (0)), (true ? 0 : _GLF_FUZZED(-9527)))], _GLF_FUZZED(_GLF_IDENTITY(float(25071), mix(float(_GLF_IDENTITY(float(25071), max(float(25071), float(25071)))), float(_GLF_FUZZED(float(-91595))), bool(false))))), vec2(_GLF_FUZZED(-4.2), (injectionSwitch)[1]), bvec2(false, _GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, _GLF_ZERO(0.0, injectionSwitch.x) + (injectionSwitch.x)) < injectionSwitch.y), false || ((_GLF_IDENTITY(injectionSwitch.x, _GLF_ZERO(0.0, injectionSwitch.x) + (injectionSwitch.x)) < injectionSwitch.y))))))).y) - 0.0)), mix(float(_GLF_FUZZED(-209.314)), float((_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY(_GLF_FUZZED(float(25071)), (_GLF_FUZZED(float(25071))) / cos(0.0))), vec2(_GLF_FUZZED(-4.2), (injectionSwitch)[1]), bvec2(false, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(! (! ((injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(! (! ((injectionSwitch.x < injectionSwitch.y)))), bool(bvec3(bool(! (! ((injectionSwitch.x < injectionSwitch.y)))), false, false)))), ! (! (bool(_GLF_IDENTITY(bool(! (! ((injectionSwitch.x < injectionSwitch.y)))), bool(bvec3(bool(! (! ((injectionSwitch.x < injectionSwitch.y)))), false, false)))))))))) && true))))).y) - 0.0))), bool(true)))), float(_GLF_FUZZED(6398.9348)), bool(false)))) + 0.0))))))));
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (! (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))))))))
                  barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), (true && (false)) || false)), ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(true && (false), _GLF_IDENTITY(bool(bvec4(true && (false), true, true, true)), true && (bool(bvec4(true && (false), true, _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), false || (! (true))))), true))))), (true && (false)) || false))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))));
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false)))))))))) || _GLF_IDENTITY(false, (false) || false), false || ((_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false)))))))))) || _GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true))), (false) || false)))))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     else
      {
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
        }
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, false))))))), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(false || (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), (clamp(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(vec4(4.0, 6106.5048, -70.82, -0.0).t)), bool(false))), injectionSwitch.x, injectionSwitch.x)) + 0.0))), float(_GLF_FUZZED(_GLF_IDENTITY(-0.3, 0.0 + (-0.3)))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(8681.7186))), bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y)) && true)))), (_GLF_IDENTITY(false || (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - sin(sin(0.0))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))), bool(bvec4(bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))), false, true, true)))), bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY((bool(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))), 0.0, determinant(mat4(0.0, 0.0, _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat3x2(0.0, 1.0, 1.0, 1.0, cos(0.0), 1.0)), max(float(mat3x2(0.0, 1.0, 1.0, 1.0, cos(0.0), 1.0)), float(mat3x2(0.0, 1.0, 1.0, 1.0, cos(0.0), 1.0))))), 0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(5.9))))), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0)), 1.0, abs(1.0), log(1.0), 1.0, 1.0, _GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), _GLF_IDENTITY(1.0, float(mat3(1.0, 0.0, 0.0, sqrt(1.0), 0.0, 0.0, 0.0, 0.0, 1.0))))), 0.0, 1.0))), vec2(_GLF_IDENTITY(mat3(_GLF_IDENTITY(injectionSwitch, vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))), 0.0, determinant(mat4(0.0, 0.0, _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat3x2(0.0, 1.0, 1.0, 1.0, cos(0.0), 1.0)), max(float(mat3x2(0.0, 1.0, 1.0, 1.0, cos(0.0), 1.0)), float(mat3x2(0.0, 1.0, 1.0, 1.0, cos(0.0), 1.0))))), 0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(5.9))))), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0)), 1.0, abs(1.0), log(1.0), 1.0, 1.0, _GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), _GLF_IDENTITY(1.0, float(mat3(1.0, 0.0, 0.0, sqrt(1.0), 0.0, 0.0, 0.0, 0.0, 1.0))))), 0.0, 1.0))), 1.0, determinant(mat4(1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, abs(0.0), 0.0, 1.0, 1.0, 1.0)), 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 1.0), mat3(mat3x4(mat3(_GLF_IDENTITY(injectionSwitch, vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))), 0.0, determinant(mat4(0.0, 0.0, _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat3x2(0.0, 1.0, 1.0, 1.0, cos(0.0), 1.0)), max(float(mat3x2(0.0, 1.0, 1.0, 1.0, cos(0.0), 1.0)), float(mat3x2(0.0, 1.0, 1.0, 1.0, cos(0.0), 1.0))))), 0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(5.9))))), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0)), 1.0, abs(1.0), log(1.0), 1.0, 1.0, _GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), _GLF_IDENTITY(1.0, float(mat3(1.0, 0.0, 0.0, sqrt(1.0), 0.0, 0.0, 0.0, 0.0, 1.0))))), 0.0, 1.0))), 1.0, determinant(mat4(1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, abs(0.0), 0.0, 1.0, 1.0, 1.0)), 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 1.0)))))) : _GLF_FUZZED(vec2(-7563.5924, 76.51))), _GLF_IDENTITY(vec2(mat3((true ? _GLF_IDENTITY(injectionSwitch, vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))), 0.0, determinant(mat4(0.0, 0.0, _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat3x2(0.0, 1.0, 1.0, 1.0, cos(0.0), 1.0)), max(float(mat3x2(0.0, 1.0, 1.0, 1.0, cos(0.0), 1.0)), float(mat3x2(0.0, 1.0, 1.0, 1.0, cos(0.0), 1.0))))), 0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(5.9))))), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0)), 1.0, abs(1.0), log(1.0), 1.0, 1.0, _GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), _GLF_IDENTITY(1.0, float(mat3(1.0, 0.0, 0.0, sqrt(1.0), 0.0, 0.0, 0.0, 0.0, 1.0))))), 0.0, 1.0))) : _GLF_FUZZED(vec2(-7563.5924, 76.51))), 1.0, 0.0, 1.0, exp(0.0), 1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0)), vec2(1.0, 1.0) * (vec2(mat3((true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))), 0.0, determinant(mat4(0.0, 0.0, _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat3x2(0.0, 1.0, 1.0, 1.0, cos(0.0), 1.0)), max(float(mat3x2(0.0, 1.0, 1.0, 1.0, cos(0.0), 1.0)), float(mat3x2(0.0, 1.0, 1.0, 1.0, cos(0.0), 1.0))))), 0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(5.9))))), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0)), 1.0, abs(1.0), log(1.0), 1.0, 1.0, _GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), _GLF_IDENTITY(1.0, float(mat3(1.0, 0.0, 0.0, sqrt(1.0), 0.0, 0.0, 0.0, 0.0, 1.0))))), 0.0, 1.0))) : _GLF_FUZZED(vec2(-7563.5924, 76.51))), 1.0, 0.0, 1.0, exp(0.0), 1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0)))))).y)) && true, _GLF_IDENTITY(((bool(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))), 0.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0)), 1.0, abs(1.0), log(1.0), 1.0, 1.0, 1.0, 0.0, 1.0))) : _GLF_FUZZED(vec2(-7563.5924, 76.51)))).y)) && true), bool(bvec4(((bool(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))), 0.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0)), _GLF_IDENTITY(1.0, min(1.0, 1.0)), abs(1.0), log(1.0), 1.0, 1.0, 1.0, 0.0, 1.0))) : _GLF_FUZZED(vec2(-7563.5924, 76.51)))).y)) && true), false, true, false))) && true))))), false || (false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, tan(0.0), 0.0, 1.0, 0.0), (true ? mat3x2(injectionSwitch, tan(0.0), 0.0, 1.0, 0.0) : _GLF_FUZZED(mat3x2(197.863, 62.82, 6960.0429, -5.6, 2519.0868, -1282.3268)))))).x > injectionSwitch.y, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y) && true))), bool(bvec4(bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))), false, true, true)))), bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY((bool(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))), 0.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(4.4) : 0.0)), 1.0, 0.0, 1.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)))), 1.0, abs(1.0), log(1.0), 1.0, 1.0, _GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), _GLF_IDENTITY(1.0, float(mat3(1.0, 0.0, 0.0, sqrt(1.0), 0.0, 0.0, 0.0, 0.0, 1.0))))), 0.0, 1.0))) : _GLF_FUZZED(vec2(-7563.5924, 76.51)))).y)) && true, (_GLF_IDENTITY((bool(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))), 0.0, determinant(mat4(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(8875.7538)), float(_GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-7.6)))))), bool(true))), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), 0.0, 1.0, 0.0, 1.0, 0.0)), 1.0, abs(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), log(1.0), 1.0, 1.0, 1.0, 0.0, 1.0))) : _GLF_FUZZED(vec2(-7563.5924, 76.51)))).y)), bool(_GLF_IDENTITY(bool((bool(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))), 0.0, determinant(mat4(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(8875.7538)), float(_GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-7.6)))))), bool(true))), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), 0.0, 1.0, 0.0, 1.0, 0.0)), 1.0, abs(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), log(1.0), 1.0, 1.0, 1.0, 0.0, 1.0))) : _GLF_FUZZED(vec2(-7563.5924, 76.51)))).y))), (bool((bool(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))), 0.0, determinant(mat4(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(8875.7538)), float(_GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-7.6)))))), bool(true))), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), 0.0, 1.0, 0.0, 1.0, 0.0)), 1.0, abs(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), log(1.0), 1.0, 1.0, 1.0, 0.0, 1.0))) : _GLF_FUZZED(vec2(-7563.5924, 76.51)))).y)))) && true))) && _GLF_IDENTITY(true, true && (true))) && true)))))))) && _GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), _GLF_IDENTITY(true, false || (true)) && (_GLF_IDENTITY(true, ! (! (true)))))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
       else
        {
         do
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, _GLF_IDENTITY(int(ivec4(3, _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (int(_GLF_ZERO(0.0, injectionSwitch.x))) ^ ((0 >> _GLF_IDENTITY(int(2), int(2))) | int(_GLF_ZERO(0.0, injectionSwitch.x)))), int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ZERO(0.0, injectionSwitch.x)))), min(int(ivec4(3, int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ZERO(0.0, injectionSwitch.x)))), _GLF_IDENTITY(int(ivec4(3, int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ZERO(0.0, injectionSwitch.x)))), (int(ivec4(3, int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ZERO(0.0, injectionSwitch.x))))) | (int(ivec4(3, int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ZERO(0.0, injectionSwitch.x)))))))))))) >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter ++)
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)) < 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     for(int _injected_loop_counter = (0 & -85817); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = (18861 & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           barrier();
          }
        }
      }
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (0 ^ 1)); _injected_loop_counter ++)
      {
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, int(int(1))) < subgroup_size, ! (! (_GLF_IDENTITY(subgroup_local_id + 1 < subgroup_size, _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(! (! ((injectionSwitch.x > injectionSwitch.y))), bool(bvec4(! (! ((injectionSwitch.x > injectionSwitch.y))), false, false, true))))) || (_GLF_IDENTITY(subgroup_local_id + 1 < subgroup_size, ! _GLF_IDENTITY((! (subgroup_local_id + _GLF_IDENTITY(1, 0 + (_GLF_IDENTITY(1, 0 | (1)))) < subgroup_size)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((! (subgroup_local_id + 1 < subgroup_size)), ! (_GLF_IDENTITY(! ((! (subgroup_local_id + 1 < subgroup_size))), true && (! ((! (subgroup_local_id + 1 < subgroup_size)))))))), (! (_GLF_IDENTITY((! (subgroup_local_id + 1 < subgroup_size)), ! (_GLF_IDENTITY(! ((! (subgroup_local_id + 1 < subgroup_size))), true && (! ((! (subgroup_local_id + 1 < _GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size)))))))))))) || false))))))))))
  {
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, true && (true))) || false) && (false))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     barrier();
    }
   int i = 0;
   buf[next_virtual_gid] = _GLF_IDENTITY(2, clamp(2, 2, _GLF_IDENTITY(2, (2) >> 0)));
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, false || (false)), false, true, true)), bool(_GLF_IDENTITY(bvec3(bool(bvec4(_GLF_IDENTITY(false, false || (false)), false, true, true)), true, true), bvec3(bvec3(bvec3(bool(bvec4(_GLF_IDENTITY(false, false || (false)), false, true, true)), true, true)))))))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), true, true, true)))))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, ! (! ((false) || false))))))
    {
     do
      {
       if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))), true && (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))), true && (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))))), bool(bvec3(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], _GLF_IDENTITY(min(_GLF_IDENTITY(injectionSwitch[1], min(injectionSwitch[1], injectionSwitch[1])), _GLF_IDENTITY(injectionSwitch[1], (true ? injectionSwitch[1] : _GLF_FUZZED(531.027)))), 0.0 + (min(_GLF_IDENTITY(injectionSwitch[1], min(injectionSwitch[1], _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))[1])), _GLF_IDENTITY(injectionSwitch[1], (true ? injectionSwitch[1] : _GLF_FUZZED(531.027))))))))).y, true && (injectionSwitch.x > injectionSwitch.y))), ! _GLF_IDENTITY((! ((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))), ! (! ((! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)))))))), _GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), ! (! (! ((injectionSwitch.x > injectionSwitch.y)))))))), false, false)), bool(bool(bool(bvec3(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))), false, false))))))), true, false))))
        {
        }
       else
        {
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), ~ (~ (_GLF_IDENTITY(int(5), (int(5)) | 0)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(bvec2(true, false), false, false)))))) || false) && (true))))
            {
             return;
            }
           else
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
              barrier();
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(vec3(1.7, -61.44, -1931.1992).r), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(float(uvec3(99749u, 32646u, 55810u).z))), bvec2(_GLF_IDENTITY(true, (true) || false), false))).y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED((3.8 + -5.2))), float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)), bool(true)))))) && true)))) && true)))
          barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     do
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))));
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, sqrt(0.0) + (injectionSwitch.x)))) < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-91.26) : injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y)), mix(float(_GLF_FUZZED(-3.8)), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y, clamp(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-91.26) : injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y)), 0.0 + (_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-91.26) : injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y)))), mix(float(_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-91.26) : injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y))), float(_GLF_FUZZED(-2.8)), bool(false)))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED((- -3.9)) : float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y, clamp(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-91.26) : injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y)), 0.0 + (_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-91.26) : injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y)))), mix(float(_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-91.26) : injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y))), float(_GLF_FUZZED(-2.8)), bool(false)))))), bool(true)))), ((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, sqrt(0.0) + (injectionSwitch.x)))) < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-91.26) : injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y)), mix(float(_GLF_FUZZED(-3.8)), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y, clamp(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-91.26) : injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y)), 0.0 + (_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-91.26) : injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y)))), mix(float(_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-91.26) : injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y))), float(_GLF_FUZZED(-2.8)), bool(false)))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED((- -3.9)) : float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y, clamp(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-91.26) : injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y)), 0.0 + (_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-91.26) : injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y)))), mix(float(_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-91.26) : injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y))), float(_GLF_FUZZED(-2.8)), bool(false)))))), bool(true))))) && true))))
        {
         do
          {
           for(int _injected_loop_counter = (1 ^ ((0 | 0) & -4434)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                 else
                  {
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                }
              }
             else
              {
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec3(_GLF_WRAPPED_IF_FALSE(false), false, true)))) || false))
            {
            }
           else
            {
             do
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             _GLF_IDENTITY(buf[next_virtual_gid] = 2, _GLF_IDENTITY((buf[next_virtual_gid] = 2) / 1u, ((buf[next_virtual_gid] = 2) / 1u) ^ _GLF_IDENTITY(0u, (0u) << 0u)));
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
              barrier();
            }
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))), true && (_GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(vec2(1.0, -7.9)))).y))))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))) && true))
              barrier();
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
              {
               barrier();
              }
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || (bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
            barrier();
          }
        }
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), ! (! (bool(false))))))))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], max(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[0], clamp(injectionSwitch[0], injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[0], mix(float(_GLF_FUZZED(8.0)), float(injectionSwitch[0]), bool(true))))))), injectionSwitch[1])).x > injectionSwitch.y))))
  {
   do
    {
     do
      {
       for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))) * vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))), (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))) * vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)))) * mat2(1.0)).x < injectionSwitch.y))))
      {
       do
        {
         for(int _injected_loop_counter = (_GLF_IDENTITY((_GLF_IDENTITY(1, (1) ^ 0) << _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), ~ (~ (_GLF_IDENTITY(int(5), _GLF_IDENTITY(int(_GLF_IDENTITY(5, (5) >> (0 >> _GLF_IDENTITY(int(6), int(6))))), (int(_GLF_IDENTITY(5, (5) >> (_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(6), int(6)), (false ? _GLF_FUZZED(5759) : 0 >> _GLF_IDENTITY(int(6), int(6)))))))) / 1)))))) >> _GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY(max((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)), (1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(int(5), int(5)), 0, 1), max(_GLF_IDENTITY(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(int(5), int(5)), 0, 1), ~ (~ (ivec3(_GLF_IDENTITY(int(5), int(5)), 0, 1)))), (true ? _GLF_IDENTITY(ivec3(_GLF_IDENTITY(int(5), int(5)), 0, 1), ~ (~ (ivec3(_GLF_IDENTITY(int(5), int(5)), 0, 1)))) : _GLF_FUZZED(ivec3(-66439, 2163, _GLF_IDENTITY(-30662, (false ? _GLF_FUZZED(-4360) : -30662)))))), _GLF_IDENTITY(ivec3(_GLF_IDENTITY(int(5), int(5)), 0, 1), ivec3(ivec3(ivec3(_GLF_IDENTITY(int(5), int(5)), 0, 1))))))))), 0 ^ _GLF_IDENTITY((max((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(5), int(ivec2(int(5), 1))), clamp(_GLF_IDENTITY(int(5), int(_GLF_ZERO(0.0, injectionSwitch.x)) | (int(5))), _GLF_IDENTITY(int(5), (_GLF_IDENTITY(int(5), max(int(5), int(5)))) / 1), int(5))), int(_GLF_IDENTITY(5, max(5, _GLF_IDENTITY(5, (_GLF_IDENTITY(5, int(ivec3(5, 1, 1)))) - 0))))), (1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))), max((max((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(5), int(ivec2(int(5), 1))), clamp(_GLF_IDENTITY(int(5), int(_GLF_ZERO(0.0, injectionSwitch.x)) | (int(5))), _GLF_IDENTITY(int(5), (_GLF_IDENTITY(int(5), max(int(5), int(5)))) / 1), int(5))), int(_GLF_IDENTITY(5, max(5, _GLF_IDENTITY(5, (_GLF_IDENTITY(5, int(ivec3(5, 1, 1)))) - 0))))), (1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))), _GLF_IDENTITY((max((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(5), int(ivec2(int(5), 1))), clamp(_GLF_IDENTITY(int(5), int(_GLF_ZERO(0.0, injectionSwitch.x)) | (int(5))), _GLF_IDENTITY(int(5), (_GLF_IDENTITY(int(5), max(int(5), int(5)))) / 1), int(5))), int(_GLF_IDENTITY(5, max(5, _GLF_IDENTITY(5, (_GLF_IDENTITY(5, int(ivec3(5, 1, 1)))) - 0))))), (1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))), (_GLF_IDENTITY((max((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(5), int(ivec2(int(5), 1))), clamp(_GLF_IDENTITY(int(5), int(_GLF_ZERO(0.0, injectionSwitch.x)) | (int(5))), _GLF_IDENTITY(int(5), (_GLF_IDENTITY(int(5), max(int(5), int(5)))) / 1), int(5))), int(_GLF_IDENTITY(5, max(5, _GLF_IDENTITY(5, (_GLF_IDENTITY(5, int(ivec3(5, 1, 1)))) - 0))))), (1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))), int(ivec2((max((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(5), int(ivec2(int(5), 1))), clamp(_GLF_IDENTITY(int(5), int(_GLF_ZERO(0.0, injectionSwitch.x)) | (int(5))), _GLF_IDENTITY(int(5), (_GLF_IDENTITY(int(5), max(int(5), int(5)))) / 1), int(5))), int(_GLF_IDENTITY(5, max(5, _GLF_IDENTITY(5, (_GLF_IDENTITY(5, int(ivec3(5, 1, 1)))) - 0))))), (1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))), 0)))) - 0)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false)))))))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
                {
                }
               else
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         barrier();
                        }
                      }
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                   else
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bool(! (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(bool(! (injectionSwitch.x > injectionSwitch.y)), ! (! (bool(! (injectionSwitch.x > injectionSwitch.y)))))) || false))))), true, true, true)))))))
                        {
                        }
                       else
                        {
                         if(_GLF_DEAD(false))
                          {
                           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                            {
                             barrier();
                            }
                          }
                         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))).x < injectionSwitch.y))))
                          {
                           for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) - 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((((1 << _GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 | (0))) / 1)))) >> _GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec3(0, 1, 1)), (int(ivec3(0, 1, 1))) / 1))))) << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) + 0))) >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter ++)
                            {
                             if(_GLF_WRAPPED_IF_FALSE(false))
                              {
                              }
                             else
                              {
                               if(_GLF_WRAPPED_IF_FALSE(false))
                                {
                                 if(_GLF_DEAD(false))
                                  barrier();
                                }
                               else
                                {
                                 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), _GLF_IDENTITY(true && (true), ! (! (_GLF_IDENTITY(true && (true), ! (! (true && (true))))))))))
                                  {
                                   if(_GLF_DEAD(false))
                                    {
                                     do
                                      {
                                       for(int _injected_loop_counter = _GLF_IDENTITY(0, max(0, 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                                        {
                                         if(_GLF_WRAPPED_IF_FALSE(false))
                                          {
                                          }
                                         else
                                          {
                                           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                                            {
                                             for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, 1.0, 0.0, 0.0, abs(0.0), 1.0, abs(0.0)))).x))); _injected_loop_counter --)
                                              {
                                               do
                                                {
                                                 do
                                                  {
                                                   if(_GLF_DEAD(false))
                                                    barrier();
                                                   if(_GLF_DEAD(false))
                                                    barrier();
                                                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                                    barrier();
                                                  }
                                                 while(_GLF_WRAPPED_LOOP(false));
                                                 do
                                                  {
                                                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                                    barrier();
                                                  }
                                                 while(_GLF_WRAPPED_LOOP(false));
                                                }
                                               while(_GLF_WRAPPED_LOOP(false));
                                               if(_GLF_DEAD(false))
                                                barrier();
                                               do
                                                {
                                                 if(_GLF_WRAPPED_IF_FALSE(false))
                                                  {
                                                  }
                                                 else
                                                  {
                                                   do
                                                    {
                                                     if(_GLF_DEAD(false))
                                                      barrier();
                                                     if(_GLF_WRAPPED_IF_TRUE(true))
                                                      {
                                                       do
                                                        {
                                                         if(_GLF_DEAD(false))
                                                          barrier();
                                                        }
                                                       while(_GLF_WRAPPED_LOOP(false));
                                                      }
                                                     else
                                                      {
                                                       if(_GLF_DEAD(false))
                                                        {
                                                         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! (! (true)))))), (injectionSwitch.x < injectionSwitch.y))))
                                                          {
                                                           barrier();
                                                          }
                                                         else
                                                          {
                                                          }
                                                        }
                                                      }
                                                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                                      {
                                                       return;
                                                       do
                                                        {
                                                         if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), false), bvec2(bvec2(bvec2(_GLF_DEAD(false), false)))))))), (! (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), false), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), false), _GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), false), bvec2(bvec3(bvec2(_GLF_DEAD(false), false), false))), false)), bvec2(bvec4(bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), false), bvec2(bvec3(bvec2(_GLF_DEAD(false), false), false))), false)), false, false)))))))))))) || false)))
                                                          {
                                                           do
                                                            {
                                                             barrier();
                                                             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                                              {
                                                               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(5.1), _GLF_FUZZED(579.347)), bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), injectionSwitch)).x > injectionSwitch.y))))
                                                                {
                                                                 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
                                                                  {
                                                                   barrier();
                                                                  }
                                                                 else
                                                                  {
                                                                  }
                                                                }
                                                              }
                                                             else
                                                              {
                                                              }
                                                             if(_GLF_DEAD(false))
                                                              barrier();
                                                            }
                                                           while(_GLF_WRAPPED_LOOP(false));
                                                           if(_GLF_DEAD(false))
                                                            {
                                                             for(int _injected_loop_counter = (0 & 19235); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(6, (false ? _GLF_FUZZED(_injected_loop_counter) : 6))), int(6))) >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter ++)
                                                              {
                                                               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, ~ (~ (0)))))); _injected_loop_counter --)
                                                                {
                                                                 barrier();
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                       while(_GLF_WRAPPED_LOOP(false));
                                                      }
                                                     else
                                                      {
                                                      }
                                                    }
                                                   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || _GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(62.81), _GLF_FUZZED(-6.0)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(4680.1349)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), mix(float(_GLF_FUZZED(-7.0)), float(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(4680.1349)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), bool(true)))))), _GLF_IDENTITY(bool(bvec3((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(62.81), _GLF_FUZZED(-6.0)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(4680.1349)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), mix(float(_GLF_FUZZED(-7.0)), float(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(4680.1349)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), bool(true)))))), false, false)), false || (bool(bvec3((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(62.81), _GLF_FUZZED(-6.0)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(4680.1349)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), mix(float(_GLF_FUZZED(-7.0)), float(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(4680.1349)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), bool(true)))))), false, false)))))), false || _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-32.51, 4.7)))).y))), (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (true)), _GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) + (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).x < injectionSwitch.y))), _GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), injectionSwitch)).x > injectionSwitch.y)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat4x3(injectionSwitch.y, 0.0, 0.0, 0.0, 1.0, 1.0, abs(round(length(normalize(vec3(1.0, 1.0, 1.0))))), sin(0.0), _GLF_IDENTITY(sin(0.0), (true ? sin(0.0) : _GLF_FUZZED(-5.8))), 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y)))))), true, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, _GLF_IDENTITY(true, (true) || false))))), bvec3(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat4x3(injectionSwitch.y, 0.0, 0.0, 0.0, 1.0, 1.0, abs(round(length(normalize(vec3(1.0, 1.0, 1.0))))), sin(0.0), _GLF_IDENTITY(sin(0.0), (true ? sin(0.0) : _GLF_FUZZED(-5.8))), 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y)))))), true, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, _GLF_IDENTITY(true, (true) || false))))))))))))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec4(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false))))))))))))), bool(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (true)), _GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) + (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).x < injectionSwitch.y))), _GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), injectionSwitch)).x > injectionSwitch.y)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat4x3(injectionSwitch.y, 0.0, 0.0, 0.0, 1.0, 1.0, abs(round(length(normalize(vec3(1.0, 1.0, 1.0))))), sin(0.0), _GLF_IDENTITY(sin(0.0), (true ? sin(0.0) : _GLF_FUZZED(-5.8))), 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y)))))), true, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, _GLF_IDENTITY(true, (true) || false))))), bvec3(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat4x3(injectionSwitch.y, 0.0, 0.0, 0.0, 1.0, 1.0, abs(round(length(normalize(vec3(1.0, 1.0, 1.0))))), sin(0.0), _GLF_IDENTITY(sin(0.0), (true ? sin(0.0) : _GLF_FUZZED(-5.8))), 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y)))))), true, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, _GLF_IDENTITY(true, (true) || false))))))))))))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec4(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false)))))))))))))), ! (! (bool(bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (true)), _GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) + (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).x < injectionSwitch.y))), _GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), injectionSwitch)).x > injectionSwitch.y)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat4x3(injectionSwitch.y, 0.0, 0.0, 0.0, 1.0, 1.0, abs(round(length(normalize(vec3(1.0, 1.0, 1.0))))), sin(0.0), _GLF_IDENTITY(sin(0.0), (true ? sin(0.0) : _GLF_FUZZED(-5.8))), 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y)))))), true, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, _GLF_IDENTITY(true, (true) || false))))), bvec3(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat4x3(injectionSwitch.y, 0.0, 0.0, 0.0, 1.0, 1.0, abs(round(length(normalize(vec3(1.0, 1.0, 1.0))))), sin(0.0), _GLF_IDENTITY(sin(0.0), (true ? sin(0.0) : _GLF_FUZZED(-5.8))), 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y)))))), true, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, _GLF_IDENTITY(true, (true) || false))))))))))))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec4(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false))))))))))))))))))))))))) || false))));
                                                  }
                                                }
                                               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
                                              }
                                            }
                                           if(_GLF_DEAD(false))
                                            barrier();
                                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                            barrier();
                                           for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != (1 & 1), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_injected_loop_counter != (1 & 1)), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_injected_loop_counter != (1 & 1)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_injected_loop_counter != (1 & 1))) || false), true)), bool(bvec4(bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_injected_loop_counter != (1 & 1)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_injected_loop_counter != (1 & 1))) || false), true)), false, false, false)))))); _injected_loop_counter ++)
                                            {
                                             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, int(ivec2(0, 1)))); _injected_loop_counter --)
                                              {
                                               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                                barrier();
                                              }
                                            }
                                           if(_GLF_DEAD(false))
                                            barrier();
                                          }
                                         if(_GLF_DEAD(false))
                                          barrier();
                                        }
                                       if(_GLF_WRAPPED_IF_TRUE(true))
                                        {
                                         if(_GLF_DEAD(false))
                                          barrier();
                                        }
                                       else
                                        {
                                        }
                                      }
                                     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, abs(_GLF_IDENTITY(vec2(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-70.69)), bool(false))), 0.0), min(vec2(0.0, 0.0), vec2(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (0.0) + 0.0)) * _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), 0.0)))) + (injectionSwitch)).y))) && _GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y, max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y)), _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))) && true)), ((injectionSwitch.x < injectionSwitch.y)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))));
                                    }
                                  }
                                 else
                                  {
                                  }
                                }
                              }
                            }
                          }
                         else
                          {
                          }
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                        }
                      }
                     else
                      {
                      }
                    }
                  }
                 else
                  {
                  }
                }
              }
             else
              {
              }
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
            barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
      }
    }
  }
 for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) + 0))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, true && (true))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          barrier();
        }
       else
        {
         for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, max(1, 1))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(true, (true) && true), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), ! (! (bool(bvec4(true, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(true, ! (! (true))), true)), bool(bvec3(bool(bvec2(_GLF_IDENTITY(true, ! (! (true))), true)), false, false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))), (injectionSwitch.x < injectionSwitch.y)), bool(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        {
                         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(int(_GLF_ZERO(_GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, max(0.0, 0.0))), float(_GLF_FUZZED(-889.308)), bool(false))), injectionSwitch.x)), 0 | (int(_GLF_ZERO(0.0, injectionSwitch.x))))); _injected_loop_counter --)
                          {
                           do
                            {
                             barrier();
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                          }
                        }
                      }
                    }
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       barrier();
                      }
                     barrier();
                    }
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       barrier();
                      }
                    }
                   else
                    {
                     barrier();
                    }
                  }
                }
               else
                {
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              barrier();
            }
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
}
