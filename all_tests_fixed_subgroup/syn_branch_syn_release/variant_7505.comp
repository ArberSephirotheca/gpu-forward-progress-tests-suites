#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_8 {
 vec4 _f0;
 int _f1;
} ;

struct _GLF_struct_7 {
 ivec2 _f0;
 ivec4 _f1;
 bool _f2;
} ;

struct _GLF_struct_9 {
 _GLF_struct_7 _f0;
 _GLF_struct_8 _f1;
} ;

struct _GLF_struct_5 {
 uvec3 _f0;
} ;

struct _GLF_struct_4 {
 uvec3 _f0;
 uvec2 _f1;
} ;

struct _GLF_struct_6 {
 _GLF_struct_4 _f0;
 vec3 _f1;
 _GLF_struct_5 _f2;
 mat2 _f3;
} ;

struct _GLF_struct_10 {
 mat3x4 _f0;
 uint next_virtual_gid;
 _GLF_struct_6 _f1;
 _GLF_struct_9 _f2;
} ;

struct _GLF_struct_1 {
 bvec2 _f0;
 mat2x4 _f1;
} ;

struct _GLF_struct_0 {
 uvec2 _f0;
 mat3 _f1;
 mat4x3 _f2;
} ;

struct _GLF_struct_2 {
 bvec3 _f0;
 int _f1;
 uint _f2;
 uvec2 _f3;
 _GLF_struct_0 _f4;
 uint subgroup_local_id;
 _GLF_struct_1 _f5;
} ;

struct _GLF_struct_3 {
 _GLF_struct_2 _f0;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
uint subgroup_size = 16;
 _GLF_struct_3 _GLF_struct_replacement_3 = _GLF_struct_3(_GLF_struct_2(bvec3(true), 1, 1u, uvec2(1u), _GLF_struct_0(uvec2(1u), mat3(1.0), mat4x3(1.0)), gl_SubgroupInvocationID, _GLF_struct_1(bvec2(true), mat2x4(1.0))));
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))))
  return;
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + _GLF_struct_replacement_3._f0.subgroup_local_id;
 _GLF_struct_10 _GLF_struct_replacement_10 = _GLF_struct_10(mat3x4(1.0), workgroup_base + subgroup_id * subgroup_size + ((_GLF_struct_replacement_3._f0.subgroup_local_id + 1) % subgroup_size), _GLF_struct_6(_GLF_struct_4(uvec3(1u), uvec2(1u)), vec3(1.0), _GLF_struct_5(uvec3(1u)), mat2(1.0)), _GLF_struct_9(_GLF_struct_7(ivec2(1), ivec4(1), true), _GLF_struct_8(vec4(1.0), 1)));
 buf[virtual_gid] = 1;
 if(_GLF_struct_replacement_3._f0.subgroup_local_id + _GLF_IDENTITY(1, int(ivec3(1, int(_GLF_ZERO(0.0, injectionSwitch.x)), 0))) < subgroup_size)
  {
   int i = 0;
   atomicStore(buf[_GLF_struct_replacement_10.next_virtual_gid], uint(2), _GLF_IDENTITY(4, 1 * (4)), 64, 4);
  }
 else
  {
   atomicStore(buf[_GLF_struct_replacement_10.next_virtual_gid], uint(2), 4, 64, 4);
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
}
