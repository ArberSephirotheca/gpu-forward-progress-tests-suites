#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 uint subgroup_id = gl_SubgroupID;
uint subgroup_size = 16;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 for(int _injected_loop_counter = (18217 & (0 | 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, true)))) || false))
        continue;
       break;
      }
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 1.0))), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))).y))), _GLF_IDENTITY(bool(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(true, true && (true)))), ! (! (bool(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), true && (true)))))))))
      {
      }
     else
      {
       for(int _injected_loop_counter = (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(1), int(1)), (0 >> _GLF_IDENTITY(int(4), int(4))) | (0 << _GLF_IDENTITY(int(1), int(1))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(false))
              break;
            }
           else
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              {
               if(_GLF_DEAD(false))
                break;
               return;
              }
             if(_GLF_DEAD(false))
              continue;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           return;
          }
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
    continue;
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), false || (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), false || (_GLF_WRAPPED_LOOP(false))))));
   return;
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))))
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_DEAD(false))
          break;
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
            continue;
          }
         else
          {
           return;
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
          return;
        }
       if(_GLF_DEAD(false))
        break;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         do
          {
           return;
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             return;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 0.0, 0.0, 1.0, 0.0))), injectionSwitch)).y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))))) > injectionSwitch.y))))
                return;
              }
             if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false))))), (injectionSwitch.x > injectionSwitch.y))))
              continue;
             break;
            }
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), (_GLF_DEAD(false)) && true))))
            {
             do
              {
               return;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              return;
             return;
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          continue;
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          break;
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       continue;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))))
      break;
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     if(_GLF_DEAD(false))
      break;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))))
        {
         for(int _injected_loop_counter = (int(-7081.3672) & (0 << _GLF_IDENTITY(int(0), int(0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            return;
          }
         return;
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))
      return;
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(false))
          continue;
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       return;
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y)))))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
      }
    }
   for(int _injected_loop_counter = (0 ^ (0 << _GLF_IDENTITY(int(3), int(3)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).y)), (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).y))) || false)))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, sin(vec2(_GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0)) + (injectionSwitch)))).y, injectionSwitch.y, injectionSwitch.y)))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, sin(vec2(_GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0)) + (injectionSwitch)))).y, injectionSwitch.y, injectionSwitch.y))))))), bool(bvec3(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, sin(vec2(_GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0)) + (injectionSwitch)))).y, injectionSwitch.y, injectionSwitch.y))))))), (bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, sin(vec2(_GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0)) + (injectionSwitch)))).y, injectionSwitch.y, injectionSwitch.y)))))))) && true), false, false)))), ! (! (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, sin(vec2(_GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0)) + (injectionSwitch)))).y, injectionSwitch.y, injectionSwitch.y))))))), bool(bvec3(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, sin(vec2(_GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0)) + (injectionSwitch)))).y, injectionSwitch.y, injectionSwitch.y))))))), (bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, sin(vec2(_GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0)) + (injectionSwitch)))).y, injectionSwitch.y, injectionSwitch.y)))))))) && true), false, false))))))))) && _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, true && (true))))))))))
    return;
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)))))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, true, true))), true && (false))))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, true, false)), bool(bvec3(bool(bvec4(false, false, true, false)), false, true))))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), true && (_GLF_WRAPPED_IF_FALSE(false)))) || false))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        return;
       for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          break;
         return;
        }
      }
    }
  }
 else
  {
   for(int _injected_loop_counter = _GLF_IDENTITY((((0 >> _GLF_IDENTITY(int(7), int(7))) << _GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), ~ (~ (int(_GLF_IDENTITY(2, int(ivec2(2, 1))))))), clamp(_GLF_IDENTITY(int(2), ~ (~ (int(_GLF_IDENTITY(2, int(ivec2(2, 1))))))), _GLF_IDENTITY(int(2), ~ (~ (int(_GLF_IDENTITY(2, int(ivec2(2, 1))))))), _GLF_IDENTITY(int(2), ~ (~ (int(_GLF_IDENTITY(2, int(ivec2(2, 1)))))))))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), ~ (~ (int(2))))), (_GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), ~ (~ (int(2))))), ~ (~ (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), ~ (~ (int(2))))))))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), ~ (~ (int(2))))), min(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), ~ (~ (int(2))))), _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), ~ (~ (int(2)))))))))), int(_GLF_IDENTITY(ivec3(~ (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), ~ (~ (int(2)))))), 1, int(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(clamp(ivec3(~ (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), ~ (~ (int(2)))))), 1, int(_GLF_ZERO(0.0, injectionSwitch.x))), ivec3(~ (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), ~ (~ (int(2)))))), 1, int(_GLF_ZERO(0.0, injectionSwitch.x))), ivec3(~ (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), ~ (~ (int(2)))))), 1, int(_GLF_ZERO(0.0, injectionSwitch.x)))), min(clamp(ivec3(~ (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), ~ (~ (int(2)))))), 1, int(_GLF_ZERO(0.0, injectionSwitch.x))), ivec3(~ (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), ~ (~ (int(2)))))), 1, int(_GLF_ZERO(0.0, injectionSwitch.x))), ivec3(~ (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), ~ (~ (int(2)))))), 1, int(_GLF_ZERO(0.0, injectionSwitch.x)))), clamp(ivec3(~ (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), ~ (~ (int(2)))))), 1, int(_GLF_ZERO(0.0, injectionSwitch.x))), ivec3(~ (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), ~ (~ (int(2)))))), 1, int(_GLF_ZERO(0.0, injectionSwitch.x))), ivec3(~ (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), ~ (~ (int(2)))))), 1, int(_GLF_ZERO(0.0, injectionSwitch.x))))))))), (false ? _GLF_FUZZED((-74418 | _GLF_IDENTITY(-35616, (-35616) | (-35616)))) : ~ (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), ~ (~ (int(2))))))))))) << _GLF_IDENTITY(int(0), int(0))), (true ? (((0 >> _GLF_IDENTITY(int(7), int(7))) << _GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), ~ (~ (int(_GLF_IDENTITY(2, int(ivec2(2, 1)))))))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), ~ (~ (int(2)))))), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(~ (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), ~ (~ (int(2)))))), 1, int(_GLF_ZERO(0.0, injectionSwitch.x))), clamp(ivec3(~ (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), ~ (~ (int(2)))))), 1, int(_GLF_ZERO(0.0, injectionSwitch.x))), ivec3(~ (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), ~ (~ _GLF_IDENTITY((int(2)), (_GLF_IDENTITY((int(2)), ((int(2))) / 1)) | ((int(2)))))))), 1, int(_GLF_ZERO(0.0, injectionSwitch.x))), ivec3(~ (_GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), ~ (~ (int(2))))), max(_GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), ~ _GLF_IDENTITY((~ (int(2))), 0 + ((~ (int(2))))))), (_GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), ~ (~ (int(2))))), (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), ~ (~ (int(2)))))) / 1)) * 1), _GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(_GLF_IDENTITY(2, (false ? _GLF_FUZZED(99875) : _GLF_IDENTITY(2, ~ (~ (2)))))), ~ (~ (int(2))))), (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), ~ (~ (int(2)))))) * 1)))), 1, int(_GLF_ZERO(0.0, injectionSwitch.x)))))), (int(_GLF_IDENTITY(ivec3(~ (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), ~ (~ (int(2)))))), 1, int(_GLF_ZERO(0.0, injectionSwitch.x))), clamp(ivec3(~ (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), ~ (~ (int(2)))))), 1, int(_GLF_ZERO(0.0, injectionSwitch.x))), ivec3(~ (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), ~ (~ _GLF_IDENTITY((int(2)), (_GLF_IDENTITY((int(2)), ((int(2))) / 1)) | ((int(2)))))))), 1, int(_GLF_ZERO(0.0, injectionSwitch.x))), ivec3(~ (_GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), ~ (~ (int(2))))), max(_GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), ~ _GLF_IDENTITY((~ (int(2))), 0 + ((~ (int(2))))))), (_GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), ~ (~ (int(2))))), (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), ~ (~ (int(2)))))) / 1)) * 1), _GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(_GLF_IDENTITY(2, (false ? _GLF_FUZZED(99875) : _GLF_IDENTITY(2, ~ (~ (2)))))), ~ (~ (int(2))))), (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), ~ (~ (int(2)))))) * 1)))), 1, int(_GLF_ZERO(0.0, injectionSwitch.x))))))) | (int(_GLF_IDENTITY(ivec3(~ (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), ~ (~ (int(2)))))), 1, int(_GLF_ZERO(0.0, injectionSwitch.x))), clamp(ivec3(~ (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), ~ (~ (int(2)))))), 1, int(_GLF_ZERO(0.0, injectionSwitch.x))), ivec3(~ (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), ~ (~ _GLF_IDENTITY((int(2)), (_GLF_IDENTITY((int(2)), ((int(2))) / 1)) | ((int(2)))))))), 1, int(_GLF_ZERO(0.0, injectionSwitch.x))), ivec3(~ (_GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), ~ (~ (int(2))))), max(_GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), ~ _GLF_IDENTITY((~ (int(2))), 0 + ((~ (int(2))))))), (_GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), ~ (~ (int(2))))), (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), ~ (~ (int(2)))))) / 1)) * 1), _GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(_GLF_IDENTITY(2, (false ? _GLF_FUZZED(99875) : _GLF_IDENTITY(2, ~ (~ (2)))))), ~ (~ (int(2))))), (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), ~ (~ (int(2)))))) * 1)))), 1, int(_GLF_ZERO(0.0, injectionSwitch.x))))))))), (false ? _GLF_FUZZED((-74418 | _GLF_IDENTITY(-35616, (-35616) | (-35616)))) : ~ (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), ~ (~ (int(2))))))))))) << _GLF_IDENTITY(int(0), int(0))) : _GLF_FUZZED(15685))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter < 1, (_injected_loop_counter < 1) && true)), (_GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter < 1, (_injected_loop_counter < 1) && true)), false || ((_GLF_IDENTITY(_injected_loop_counter < 1, (_injected_loop_counter < 1) && true))))) || false) && true)); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec4(! (false), false, true, true))))), (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_DEAD(false))
        break;
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             continue;
            }
           return;
          }
        }
       else
        {
         return;
         if(_GLF_DEAD(false))
          break;
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
      }
    }
  }
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID, clamp(_GLF_IDENTITY(gl_WorkGroupID, uvec3(uvec3(gl_WorkGroupID))), _GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) >> uvec3(0u, _GLF_IDENTITY(0u, 0u | (0u)), 0u)), gl_WorkGroupID)).x;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       return;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     do
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), bool(bool(! (_GLF_IDENTITY(false, (false) || false)))))))));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        continue;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  return;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
    {
     for(int _injected_loop_counter = ((0 | 0) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       return;
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)))))
      return;
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, _GLF_IDENTITY(true, ! (! (true))) && (false))))))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        continue;
       return;
      }
    }
   do
    {
     do
      {
       if(_GLF_DEAD(false))
        continue;
       for(int _injected_loop_counter = _GLF_IDENTITY(0, 0 | (0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         do
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
        }
       if(_GLF_DEAD(false))
        break;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, bool(bvec4(false, true, false, true))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    {
     if(_GLF_DEAD(false))
      break;
     return;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint workgroup_base = workgroup_size * workgroup_id;
 for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    return;
  }
 uint virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base, (workgroup_base) | (0u << _GLF_IDENTITY(uint(3u), uint(3u)))) + subgroup_id * subgroup_size), ~ _GLF_IDENTITY((~ (~ (workgroup_base + subgroup_id * subgroup_size))), ((0u >> _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u))) | ((~ (~ (workgroup_base + subgroup_id * subgroup_size)))))))) + _GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)), subgroup_local_id)))), 0u | _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)) + subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u) + _GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))), subgroup_local_id))), _GLF_IDENTITY(((_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)) + subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u) + _GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))), subgroup_local_id)))), (true ? ((_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)) + subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u) + _GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))), subgroup_local_id)))) : _GLF_FUZZED(workgroup_id))) * ((1u << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u)))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, true && (false))) || false, (_GLF_IDENTITY((_GLF_IDENTITY(false, true && (false))), bool(bvec2((_GLF_IDENTITY(false, true && (false))), true))) || false) || false)))))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
    }
  }
 else
  {
  }
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), (_GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), max(((subgroup_local_id + 1) % subgroup_size), ((subgroup_local_id + 1) % subgroup_size)))) ^ 0u);
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-0.9)), float(injectionSwitch.y), bool(true)))))))))
      {
      }
     else
      {
       return;
      }
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
    {
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), 0 ^ (int(7))))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       return;
      }
    }
   buf[virtual_gid] = _GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(clamp(1, 1, _GLF_IDENTITY(1, 0 ^ _GLF_IDENTITY((1), ((1)) - 0))), clamp(clamp(1, 1, _GLF_IDENTITY(1, 0 ^ _GLF_IDENTITY((1), ((1)) - 0))), clamp(1, 1, _GLF_IDENTITY(1, 0 ^ _GLF_IDENTITY((1), ((1)) - 0))), clamp(1, 1, _GLF_IDENTITY(1, 0 ^ _GLF_IDENTITY((1), ((1)) - 0)))))), clamp(_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, 0 ^ (1)))), _GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, 0 ^ (1)))), _GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, 0 ^ _GLF_IDENTITY((1), max((1), (1))))))))));
   do
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(false)))))))
      return;
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), false || (bool(false)))))))
        break;
       break;
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       do
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, ! (! (false))))), (bool(bool(_GLF_IDENTITY(false, ! (! (false)))))) || false))))
            {
             if(_GLF_DEAD(false))
              continue;
             return;
             if(_GLF_DEAD(false))
              continue;
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             do
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bool(true)))) && true)) || false) && (false))) || false)))
                continue;
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))), bool(bvec4(! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))), true, false, false)))))), bool(bvec3(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))), bool(bvec4(! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))), true, false, false)))))), false, true))))
                    return;
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    return;
                  }
                 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(false))
                    {
                     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < (0 ^ ((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), min(int(6), int(6))))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), 0 ^ (int(6))))))); _injected_loop_counter ++)
                      {
                       if(_GLF_DEAD(false))
                        return;
                      }
                     return;
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    break;
                  }
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                break;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
            continue;
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             do
              {
               return;
               if(_GLF_DEAD(false))
                continue;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, ~ (~ (1))), 1)), 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 ^ 0)); _injected_loop_counter --)
            {
             return;
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))
      continue;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY(false || (false), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0))) < injectionSwitch.y)) && (false || (false))))))
        return;
       return;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   do
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        return;
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false)))))))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && (false))), false || (! (_GLF_IDENTITY(false, true && (false)))))))))
    {
    }
   else
    {
     return;
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY(0, (0) + 0), (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(4), int(4)), max(0 << _GLF_IDENTITY(int(4), int(4)), 0 << _GLF_IDENTITY(int(4), int(4))))) | (0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, int(ivec3(1, 1, 1)))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        return;
       break;
      }
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, false, false))), (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec4(true, false, false, false)))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
            break;
          }
         else
          {
          }
        }
       else
        {
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_IDENTITY(subgroup_local_id + 1 < subgroup_size, (subgroup_local_id + 1 < subgroup_size) && true))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           return;
          }
         int i = 0;
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             do
              {
               if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_DEAD(false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bvec4(! (_GLF_DEAD(false)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))), (! (_GLF_DEAD(false))) || false), true, false)))))), ! (! (! (! (_GLF_DEAD(false)))))))))))
                continue;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               if(_GLF_DEAD(false))
                continue;
               for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)), (injectionSwitch.x) / 1.0)))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0))))))); _injected_loop_counter --)
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
                    break;
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       for(int _injected_loop_counter = ((0 >> _GLF_IDENTITY(int(7), int(7))) & -5020); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          continue;
                         return;
                        }
                      }
                    }
                   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))), (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(2), max(uint(2), uint(2))), 4, 64, _GLF_IDENTITY(4, max(4, _GLF_IDENTITY(4, 0 ^ (4)))));
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      continue;
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        return;
                       continue;
                      }
                     if(_GLF_DEAD(false))
                      break;
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y) / 1.0)))))
                      return;
                    }
                  }
                 if(_GLF_DEAD(false))
                  break;
                }
               if(_GLF_DEAD(false))
                break;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, (false) || false), true)))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             break;
             if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true)))
              continue;
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) || false)))))
            continue;
           return;
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))) - vec2(0.0, 0.0)), _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)))).y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), _GLF_IDENTITY(vec2(_GLF_FUZZED(68.67), _GLF_FUZZED(-78.12)), max(vec2(_GLF_FUZZED(68.67), _GLF_FUZZED(-78.12)), _GLF_IDENTITY(vec2(_GLF_FUZZED(68.67), _GLF_FUZZED(-78.12)), mix(vec2(_GLF_FUZZED(-913.763), (vec2(_GLF_FUZZED(68.67), _GLF_FUZZED(-78.12)))[1]), vec2((vec2(_GLF_FUZZED(68.67), _GLF_FUZZED(-78.12)))[0], _GLF_FUZZED(-7.1)), bvec2(true, false))))), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))).y)), true, false, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, true, false)), (bool(bvec3(true, true, false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))
            continue;
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-17.32)), float(injectionSwitch.y), bool(true)))) + 0.0)))))
            continue;
           return;
          }
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter --)
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - _GLF_IDENTITY(vec2(0.0, 0.0), vec2(0.0, 0.0) + (vec2(0.0, 0.0)))).x))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              {
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
                  break;
                 break;
                }
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
                {
                 if(_GLF_DEAD(false))
                  break;
                 break;
                }
               if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, true && (false)), true)))))
                  return;
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(false))
                    return;
                  }
                 else
                  {
                  }
                 break;
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), ! (! (bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))))))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              break;
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec2(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false))))))
              return;
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
              continue;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
              continue;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             return;
            }
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false)))))))
            return;
           atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(2), (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(_GLF_IDENTITY(uint(2), clamp(uint(2), uint(2), uint(2))), uint(uvec4(_GLF_IDENTITY(uint(2), clamp(uint(2), uint(2), uint(2))), 1u, 0u, 1u))))), 4, _GLF_IDENTITY(64, (_GLF_IDENTITY(64, ~ (~ (64)))) / 1), 4);
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-2097.3483), _GLF_FUZZED(9.5)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                return;
               for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                {
                 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false))))
                  return;
                }
              }
             else
              {
               if(_GLF_DEAD(false))
                continue;
              }
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              return;
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true))))
              {
              }
             else
              {
               return;
               if(_GLF_DEAD(false))
                continue;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                break;
               continue;
              }
             if(_GLF_DEAD(false))
              break;
             return;
            }
          }
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        continue;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         do
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false)))))))
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                break;
               break;
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                continue;
               return;
              }
             else
              {
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           return;
          }
        }
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   do
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y))))
          continue;
         if(_GLF_DEAD(false))
          continue;
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, bool(bvec2(true, true))), false)))))
          {
           do
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (0 ^ _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(11860) : _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) ^ 0))))); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0) > injectionSwitch.y)) && true), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
                {
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                      {
                       return;
                       if(_GLF_DEAD(false))
                        return;
                      }
                     else
                      {
                      }
                    }
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   return;
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    break;
                  }
                }
              }
            }
           while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))));
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           continue;
          }
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 return;
                }
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
              break;
            }
           else
            {
             return;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
         if(_GLF_DEAD(false))
          break;
        }
      }
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) && true), false, _GLF_IDENTITY(false, (false) || false), true))));
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec3(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, true)))), false || (_GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec3(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, true)))), ! (! ((_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec3(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, true)))))))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  return;
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > ((-40314 ^ 40666) & 0)); _injected_loop_counter --)
        {
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))) / 1.0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(_GLF_IDENTITY(0, (0) / int(_GLF_ONE(1.0, injectionSwitch.y))), (0) / 1)); _injected_loop_counter --)
          {
           for(int _injected_loop_counter = (1 | (0 & 46950)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             for(int _injected_loop_counter = (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(6), int(6)), (0 << _GLF_IDENTITY(int(6), int(6))) >> 0)) | (0 << _GLF_IDENTITY(int(6), int(6))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), (true ? _GLF_IDENTITY(int(3), int(3)) : _GLF_FUZZED(_injected_loop_counter)))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), _GLF_IDENTITY((int(3)) | 0, 1 * ((int(3)) | 0)))))); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(false))
                  return;
                }
              }
            }
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          break;
         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), false || (! (_GLF_DEAD(false)))))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 do
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                   return;
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               return;
              }
             return;
            }
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (true ? _GLF_IDENTITY(int(_GLF_IDENTITY(0, int(ivec4(0, 0, 1, 0)))), clamp(_GLF_IDENTITY(int(_GLF_IDENTITY(0, int(ivec4(0, 0, 1, 0)))), clamp(int(_GLF_IDENTITY(0, int(ivec4(0, 0, 1, 0)))), int(_GLF_IDENTITY(0, int(ivec4(0, 0, 1, 0)))), int(_GLF_IDENTITY(0, int(ivec4(0, 0, 1, 0)))))), _GLF_IDENTITY(int(_GLF_IDENTITY(0, int(ivec4(0, 0, 1, 0)))), (int(_GLF_IDENTITY(0, int(ivec4(0, 0, 1, 0))))) >> 0), int(_GLF_IDENTITY(0, int(ivec4(0, 0, 1, 0)))))) : _GLF_FUZZED(_injected_loop_counter)))), min(_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (true ? _GLF_IDENTITY(int(_GLF_IDENTITY(0, int(ivec4(0, 0, 1, 0)))), clamp(_GLF_IDENTITY(int(_GLF_IDENTITY(0, int(ivec4(0, 0, 1, 0)))), clamp(int(_GLF_IDENTITY(0, int(ivec4(0, 0, 1, 0)))), int(_GLF_IDENTITY(0, int(ivec4(0, 0, 1, 0)))), int(_GLF_IDENTITY(0, int(ivec4(0, 0, 1, 0)))))), _GLF_IDENTITY(int(_GLF_IDENTITY(0, int(ivec4(0, 0, 1, 0)))), (int(_GLF_IDENTITY(0, int(ivec4(0, 0, 1, 0))))) >> 0), int(_GLF_IDENTITY(0, int(ivec4(0, 0, 1, 0)))))) : _GLF_FUZZED(_injected_loop_counter)))), _GLF_IDENTITY(_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (true ? _GLF_IDENTITY(int(_GLF_IDENTITY(0, int(ivec4(0, 0, 1, 0)))), clamp(_GLF_IDENTITY(int(_GLF_IDENTITY(0, int(ivec4(0, 0, 1, 0)))), clamp(int(_GLF_IDENTITY(0, int(ivec4(0, 0, 1, 0)))), int(_GLF_IDENTITY(0, int(ivec4(0, 0, 1, 0)))), int(_GLF_IDENTITY(0, int(ivec4(0, 0, 1, 0)))))), _GLF_IDENTITY(int(_GLF_IDENTITY(0, int(ivec4(0, 0, 1, 0)))), (int(_GLF_IDENTITY(0, int(ivec4(0, 0, 1, 0))))) >> 0), int(_GLF_IDENTITY(0, int(ivec4(0, 0, 1, 0)))))) : _GLF_FUZZED(_injected_loop_counter)))), int(ivec3(_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (true ? _GLF_IDENTITY(int(_GLF_IDENTITY(0, int(ivec4(0, 0, 1, 0)))), clamp(_GLF_IDENTITY(int(_GLF_IDENTITY(0, int(ivec4(0, 0, 1, 0)))), clamp(int(_GLF_IDENTITY(0, int(ivec4(0, 0, 1, 0)))), int(_GLF_IDENTITY(0, int(ivec4(0, 0, 1, 0)))), int(_GLF_IDENTITY(0, int(ivec4(0, 0, 1, 0)))))), _GLF_IDENTITY(int(_GLF_IDENTITY(0, int(ivec4(0, 0, 1, 0)))), (int(_GLF_IDENTITY(0, int(ivec4(0, 0, 1, 0))))) >> 0), int(_GLF_IDENTITY(0, int(ivec4(0, 0, 1, 0)))))) : _GLF_FUZZED(_injected_loop_counter)))), 0, 0)))))) >> _GLF_IDENTITY(int(0), int(0)), ~ (~ ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (true ? _GLF_IDENTITY(int(_GLF_IDENTITY(0, int(ivec4(0, 0, 1, 0)))), clamp(_GLF_IDENTITY(int(_GLF_IDENTITY(0, int(ivec4(0, 0, 1, 0)))), clamp(int(_GLF_IDENTITY(0, int(ivec4(0, 0, 1, 0)))), int(_GLF_IDENTITY(0, int(ivec4(0, 0, 1, 0)))), int(_GLF_IDENTITY(0, int(ivec4(0, 0, 1, 0)))))), _GLF_IDENTITY(int(_GLF_IDENTITY(0, int(ivec4(0, 0, 1, 0)))), _GLF_IDENTITY((int(_GLF_IDENTITY(0, int(ivec4(0, 0, 1, 0))))) >> 0, clamp((int(_GLF_IDENTITY(0, int(ivec4(0, 0, 1, 0))))) >> 0, (int(_GLF_IDENTITY(0, int(ivec4(0, 0, 1, 0))))) >> 0, (int(_GLF_IDENTITY(0, int(ivec4(0, 0, 1, 0))))) >> 0))), int(_GLF_IDENTITY(0, int(ivec4(0, 0, 1, 0)))))) : _GLF_FUZZED(_injected_loop_counter)))), min(_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (true ? _GLF_IDENTITY(int(_GLF_IDENTITY(0, int(ivec4(0, 0, 1, 0)))), clamp(_GLF_IDENTITY(int(_GLF_IDENTITY(0, int(ivec4(0, 0, 1, 0)))), clamp(int(_GLF_IDENTITY(0, int(ivec4(0, 0, 1, 0)))), int(_GLF_IDENTITY(0, int(ivec4(0, 0, 1, 0)))), int(_GLF_IDENTITY(0, int(ivec4(0, _GLF_IDENTITY(0, (0) << (1 ^ 1)), 1, 0)))))), _GLF_IDENTITY(int(_GLF_IDENTITY(0, int(ivec4(0, _GLF_IDENTITY(0, (0) | 0), 1, _GLF_IDENTITY(0, (0) - 0))))), _GLF_IDENTITY((int(_GLF_IDENTITY(0, int(ivec4(0, 0, 1, 0))))) >> 0, ((int(_GLF_IDENTITY(0, int(ivec4(0, 0, 1, 0))))) >> 0) | ((int(_GLF_IDENTITY(0, int(ivec4(0, 0, 1, 0))))) >> 0))), int(_GLF_IDENTITY(0, int(ivec4(_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, ~ (~ (0)))))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, ~ (~ (0)))))), (~ (_GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, ~ (~ (0))))))) | (~ (_GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, ~ (~ (0))))))))) | 0))), 0, 1, 0)))))) : _GLF_FUZZED(_injected_loop_counter)))), _GLF_IDENTITY(_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (true ? _GLF_IDENTITY(int(_GLF_IDENTITY(0, int(ivec4(0, 0, 1, 0)))), clamp(_GLF_IDENTITY(int(_GLF_IDENTITY(0, int(ivec4(0, 0, 1, _GLF_IDENTITY(0, int(_GLF_ONE(1.0, injectionSwitch.y)) * (0)))))), clamp(int(_GLF_IDENTITY(0, int(ivec4(0, 0, 1, 0)))), int(_GLF_IDENTITY(0, int(ivec4(0, 0, 1, 0)))), int(_GLF_IDENTITY(0, int(ivec4(0, 0, 1, 0)))))), _GLF_IDENTITY(int(_GLF_IDENTITY(0, int(ivec4(0, 0, 1, 0)))), (int(_GLF_IDENTITY(0, int(ivec4(0, 0, 1, 0))))) >> 0), int(_GLF_IDENTITY(0, int(ivec4(0, 0, _GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, 0 | (1)), 1)))), 0)))))) : _GLF_FUZZED(_injected_loop_counter)))), int(ivec3(_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (_GLF_IDENTITY(true ? _GLF_IDENTITY(int(_GLF_IDENTITY(0, int(ivec4(0, 0, 1, 0)))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(0, int(ivec4(0, 0, 1, 0)))), (true ? _GLF_IDENTITY(int(_GLF_IDENTITY(0, int(ivec4(0, 0, 1, 0)))), clamp(int(_GLF_IDENTITY(0, int(ivec4(0, 0, 1, 0)))), int(_GLF_IDENTITY(0, int(ivec4(0, 0, 1, 0)))), int(_GLF_IDENTITY(0, int(ivec4(0, 0, 1, 0)))))) : _GLF_FUZZED((-51853)))), clamp(int(_GLF_IDENTITY(0, int(ivec4(0, 0, 1, 0)))), int(_GLF_IDENTITY(0, int(ivec4(0, 0, 1, 0)))), int(_GLF_IDENTITY(0, int(ivec4(0, 0, 1, 0)))))), _GLF_IDENTITY(int(_GLF_IDENTITY(0, int(ivec4(0, 0, 1, 0)))), (int(_GLF_IDENTITY(0, int(ivec4(0, 0, 1, 0))))) >> 0), int(_GLF_IDENTITY(0, int(ivec4(0, 0, 1, 0)))))) : _GLF_FUZZED(_injected_loop_counter), 0 + (_GLF_IDENTITY(true ? _GLF_IDENTITY(int(_GLF_IDENTITY(0, int(ivec4(0, 0, 1, 0)))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(0, int(ivec4(0, 0, 1, 0)))), (true ? _GLF_IDENTITY(int(_GLF_IDENTITY(0, int(ivec4(0, 0, 1, 0)))), clamp(int(_GLF_IDENTITY(0, int(ivec4(0, 0, 1, 0)))), int(_GLF_IDENTITY(0, int(ivec4(0, 0, 1, 0)))), int(_GLF_IDENTITY(0, int(ivec4(0, 0, 1, 0)))))) : _GLF_FUZZED((-51853)))), clamp(int(_GLF_IDENTITY(0, int(ivec4(0, 0, 1, 0)))), int(_GLF_IDENTITY(0, int(ivec4(0, 0, 1, 0)))), int(_GLF_IDENTITY(0, int(ivec4(0, 0, 1, 0)))))), _GLF_IDENTITY(int(_GLF_IDENTITY(0, int(ivec4(0, 0, 1, 0)))), (int(_GLF_IDENTITY(0, int(ivec4(0, 0, 1, 0))))) >> 0), int(_GLF_IDENTITY(0, int(ivec4(0, 0, 1, 0)))))) : _GLF_FUZZED(_injected_loop_counter), min(true ? _GLF_IDENTITY(int(_GLF_IDENTITY(0, int(ivec4(0, 0, 1, 0)))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(0, int(ivec4(0, 0, 1, 0)))), (true ? _GLF_IDENTITY(int(_GLF_IDENTITY(0, int(ivec4(0, 0, 1, 0)))), clamp(int(_GLF_IDENTITY(0, int(ivec4(0, 0, 1, 0)))), int(_GLF_IDENTITY(0, int(ivec4(0, 0, 1, 0)))), int(_GLF_IDENTITY(0, int(ivec4(0, 0, 1, 0)))))) : _GLF_FUZZED((-51853)))), clamp(int(_GLF_IDENTITY(0, int(ivec4(0, 0, 1, 0)))), int(_GLF_IDENTITY(0, int(ivec4(0, 0, 1, 0)))), int(_GLF_IDENTITY(0, int(ivec4(0, 0, 1, 0)))))), _GLF_IDENTITY(int(_GLF_IDENTITY(0, int(ivec4(0, 0, 1, 0)))), (int(_GLF_IDENTITY(0, int(ivec4(0, 0, 1, 0))))) >> 0), int(_GLF_IDENTITY(0, int(ivec4(0, 0, 1, 0)))))) : _GLF_FUZZED(_injected_loop_counter), true ? _GLF_IDENTITY(int(_GLF_IDENTITY(0, int(ivec4(0, 0, 1, 0)))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(0, int(ivec4(0, 0, 1, 0)))), (true ? _GLF_IDENTITY(int(_GLF_IDENTITY(0, int(ivec4(0, 0, 1, 0)))), clamp(int(_GLF_IDENTITY(0, int(ivec4(0, 0, 1, 0)))), int(_GLF_IDENTITY(0, int(ivec4(0, 0, 1, 0)))), int(_GLF_IDENTITY(0, int(ivec4(0, 0, 1, 0)))))) : _GLF_FUZZED((-51853)))), clamp(int(_GLF_IDENTITY(0, int(ivec4(0, 0, 1, 0)))), int(_GLF_IDENTITY(0, int(ivec4(0, 0, 1, 0)))), int(_GLF_IDENTITY(0, int(ivec4(0, 0, 1, 0)))))), _GLF_IDENTITY(int(_GLF_IDENTITY(0, int(ivec4(0, 0, 1, 0)))), (int(_GLF_IDENTITY(0, int(ivec4(0, 0, 1, 0))))) >> 0), int(_GLF_IDENTITY(0, int(ivec4(0, 0, 1, 0)))))) : _GLF_FUZZED(_injected_loop_counter)))))))), 0, 0)))))) >> _GLF_IDENTITY(int(0), int(0))))))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_DEAD(false))
              return;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, true))))))
                return;
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(false))
              continue;
             return;
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(false))
          continue;
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))) << _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), int(ivec2(_GLF_IDENTITY(int(5), int(5)), 1)))))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter ++)
        {
         do
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           do
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               if(_GLF_DEAD(false))
                return;
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
}
