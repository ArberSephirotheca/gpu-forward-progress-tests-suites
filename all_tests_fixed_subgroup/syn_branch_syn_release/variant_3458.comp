#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_16 {
 uvec3 _f0;
 mat4x2 _f1;
 mat3x4 _f2;
 mat3x4 _f3;
 mat4x3 _f4;
 bvec4 _f5;
} ;

struct _GLF_struct_15 {
 mat3x4 _f0;
 vec4 _f1;
 float _f2;
 ivec4 _f3;
 ivec2 _f4;
} ;

struct _GLF_struct_17 {
 int _f0;
 _GLF_struct_15 _f1;
 mat4x2 _f2;
 _GLF_struct_16 _f3;
 mat3x2 _f4;
 mat3x2 _f5;
} ;

struct _GLF_struct_13 {
 bvec3 _f0;
 uint _f1;
 mat4 _f2;
 mat4x2 _f3;
} ;

struct _GLF_struct_12 {
 vec4 _f0;
 bvec4 _f1;
 mat4 _f2;
 uint _f3;
 bvec4 _f4;
} ;

struct _GLF_struct_11 {
 mat2x3 _f0;
 mat3 _f1;
 uint _f2;
 uvec3 _f3;
 bvec3 _f4;
 float _f5;
} ;

struct _GLF_struct_10 {
 ivec4 _f0;
 bool _f1;
 bvec3 _f2;
} ;

struct _GLF_struct_14 {
 _GLF_struct_10 _f0;
 _GLF_struct_11 _f1;
 _GLF_struct_12 _f2;
 mat4x2 _f3;
 _GLF_struct_13 _f4;
} ;

struct _GLF_struct_9 {
 mat4 _f0;
} ;

struct _GLF_struct_18 {
 _GLF_struct_9 _f0;
 mat2 _f1;
 bvec3 _f2;
 _GLF_struct_14 _f3;
 _GLF_struct_17 _f4;
 uint num_workgroup;
 mat4 _f5;
} ;

struct _GLF_struct_6 {
 uvec2 _f0;
 mat2x3 _f1;
 mat2x4 _f2;
 vec4 _f3;
} ;

struct _GLF_struct_5 {
 mat2x4 _f0;
 uvec3 _f1;
} ;

struct _GLF_struct_4 {
 mat3x2 _f0;
 uint _f1;
 mat3x2 _f2;
 uvec3 _f3;
} ;

struct _GLF_struct_7 {
 _GLF_struct_4 _f0;
 _GLF_struct_5 _f1;
 _GLF_struct_6 _f2;
 uvec2 _f3;
 bvec3 _f4;
} ;

struct _GLF_struct_2 {
 ivec4 _f0;
 float _f1;
 bvec2 _f2;
} ;

struct _GLF_struct_1 {
 mat2x4 _f0;
 ivec3 _f1;
 mat4x2 _f2;
 ivec3 _f3;
 mat3x4 _f4;
 vec2 _f5;
} ;

struct _GLF_struct_0 {
 vec2 _f0;
 mat4 _f1;
 mat2 _f2;
 float _f3;
 ivec2 _f4;
} ;

struct _GLF_struct_3 {
 _GLF_struct_0 _f0;
 _GLF_struct_1 _f1;
 ivec4 _f2;
 _GLF_struct_2 _f3;
} ;

struct _GLF_struct_8 {
 bvec4 _f0;
 _GLF_struct_3 _f1;
 vec3 _f2;
 uvec4 GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_14num_workgroupsubgroup_idsubgroup_local_idworkgroup_base;
 _GLF_struct_7 _f3;
 ivec2 _f4;
 float _f5;
 float _f6;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 _GLF_struct_8 _GLF_struct_replacement_8;
 uint subgroup_id = gl_SubgroupID;
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(1 ^ (24173 & 0), (1 ^ (24173 & 0)) - (0 >> _GLF_IDENTITY(int(6), int(6)))))); _injected_loop_counter ++)
        {
         _GLF_struct_replacement_8.GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_14num_workgroupsubgroup_idsubgroup_local_idworkgroup_base.y = subgroup_id;
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 do
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(5, int(_GLF_IDENTITY(ivec2(5, 1), (ivec2(5, 1)) << ivec2(0, 0))))), int(_GLF_IDENTITY(5, (_GLF_IDENTITY(5, clamp(5, 5, _GLF_IDENTITY(5, 1 * (5))))) | (5)))))); _injected_loop_counter --)
    {
     if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), bool(bvec2(_GLF_DEAD(false), false))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, false, false)), true && (bool(bvec3(true, false, false)))))))
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                  {
                   barrier();
                  }
                }
               else
                {
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
        }
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
uint subgroup_size = 16;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   for(int _injected_loop_counter = int(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), mix(float(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec2(injectionSwitch), min(vec2(injectionSwitch), vec2(injectionSwitch))))).x)), _GLF_IDENTITY(float(_GLF_FUZZED(_GLF_IDENTITY(9716.0396, max(_GLF_IDENTITY(9716.0396, clamp(9716.0396, 9716.0396, 9716.0396)), 9716.0396)))), max(float(_GLF_FUZZED(_GLF_IDENTITY(9716.0396, max(_GLF_IDENTITY(9716.0396, clamp(9716.0396, 9716.0396, 9716.0396)), 9716.0396)))), float(_GLF_FUZZED(_GLF_IDENTITY(9716.0396, max(_GLF_IDENTITY(9716.0396, clamp(9716.0396, 9716.0396, 9716.0396)), 9716.0396)))))), bool(false))), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (false ? _GLF_FUZZED(7.8) : _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), mix(float(_GLF_IDENTITY(_GLF_FUZZED(2.6), (false ? _GLF_FUZZED(20.24) : _GLF_FUZZED(2.6)))), float(_GLF_ZERO(0.0, injectionSwitch.x)), bool(true))))))), min(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), mix(float(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec2(injectionSwitch), min(vec2(injectionSwitch), vec2(injectionSwitch))))).x)), _GLF_IDENTITY(float(_GLF_FUZZED(_GLF_IDENTITY(9716.0396, max(_GLF_IDENTITY(9716.0396, clamp(9716.0396, 9716.0396, 9716.0396)), 9716.0396)))), max(float(_GLF_FUZZED(_GLF_IDENTITY(9716.0396, max(_GLF_IDENTITY(9716.0396, clamp(9716.0396, 9716.0396, 9716.0396)), 9716.0396)))), float(_GLF_FUZZED(_GLF_IDENTITY(9716.0396, max(_GLF_IDENTITY(9716.0396, clamp(9716.0396, 9716.0396, 9716.0396)), 9716.0396)))))), bool(false))), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (false ? _GLF_FUZZED(7.8) : _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), mix(float(_GLF_IDENTITY(_GLF_FUZZED(2.6), (false ? _GLF_FUZZED(20.24) : _GLF_FUZZED(2.6)))), float(_GLF_ZERO(0.0, injectionSwitch.x)), bool(true))))))), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), mix(float(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec2(injectionSwitch), min(vec2(injectionSwitch), vec2(injectionSwitch))))).x)), _GLF_IDENTITY(float(_GLF_FUZZED(_GLF_IDENTITY(9716.0396, max(_GLF_IDENTITY(9716.0396, clamp(9716.0396, 9716.0396, 9716.0396)), 9716.0396)))), max(float(_GLF_FUZZED(_GLF_IDENTITY(9716.0396, max(_GLF_IDENTITY(9716.0396, clamp(9716.0396, 9716.0396, 9716.0396)), 9716.0396)))), float(_GLF_FUZZED(_GLF_IDENTITY(9716.0396, max(_GLF_IDENTITY(9716.0396, clamp(9716.0396, 9716.0396, 9716.0396)), 9716.0396)))))), bool(false))), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (false ? _GLF_FUZZED(7.8) : _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), mix(float(_GLF_IDENTITY(_GLF_FUZZED(2.6), (false ? _GLF_FUZZED(20.24) : _GLF_FUZZED(2.6)))), float(_GLF_ZERO(0.0, injectionSwitch.x)), bool(true)))))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(2, (2) * 1)), _GLF_IDENTITY(int(2), clamp(_GLF_IDENTITY(int(2), ~ (~ _GLF_IDENTITY((int(2)), 1 * (_GLF_IDENTITY((_GLF_IDENTITY(int(2), (int(2)) + 0)), clamp(_GLF_IDENTITY((int(2)), 0 | _GLF_IDENTITY(_GLF_IDENTITY(((int(2))), (true ? ((int(2))) : _GLF_FUZZED(_injected_loop_counter))), clamp(_GLF_IDENTITY(((int(2))), (true ? ((int(2))) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(((int(2))), (true ? ((int(2))) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(((int(2))), (true ? ((int(2))) : _GLF_FUZZED(_injected_loop_counter)))))), _GLF_IDENTITY((int(2)), ((_GLF_IDENTITY(int(2), (_GLF_IDENTITY(true ? int(_GLF_IDENTITY(2, clamp(2, 2, _GLF_IDENTITY(2, ~ (~ (2)))))) : _GLF_FUZZED(_injected_loop_counter), (true ? int(_GLF_IDENTITY(2, clamp(2, 2, _GLF_IDENTITY(2, ~ (~ (2)))))) : _GLF_FUZZED(_injected_loop_counter)) >> int(_GLF_ZERO(0.0, injectionSwitch.x))))))) | ((int(2)))), _GLF_IDENTITY((int(2)), _GLF_IDENTITY(((int(2))) | _GLF_IDENTITY((_GLF_IDENTITY((int(2)), (false ? _GLF_FUZZED(_injected_loop_counter) : (int(2))))), ~ (~ ((_GLF_IDENTITY((int(2)), (false ? _GLF_FUZZED(_injected_loop_counter) : (int(2)))))))), (_GLF_IDENTITY(((int(2))) | (_GLF_IDENTITY((int(2)), (false ? _GLF_FUZZED(_injected_loop_counter) : (int(2))))), 0 | (((int(2))) | (_GLF_IDENTITY((int(2)), (false ? _GLF_FUZZED(_injected_loop_counter) : (int(2)))))))) + 0)))))))), _GLF_IDENTITY(int(2), 0 + (int(2))), _GLF_IDENTITY(int(2), ~ (_GLF_IDENTITY(~ (int(2)), _GLF_IDENTITY(int(int(~ (int(2)))), ~ (~ (int(int(~ (int(_GLF_IDENTITY(2, (2) | 0))))))))))))))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), _GLF_IDENTITY((int(_GLF_IDENTITY(2, 0 ^ (_GLF_IDENTITY(2, clamp(2, _GLF_IDENTITY(2, (2) / _GLF_IDENTITY(1, min(1, 1))), 2)))))) * 1, (_GLF_IDENTITY(false ? _GLF_FUZZED(_injected_loop_counter) : (int(2)) * 1, ~ _GLF_IDENTITY((~ (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY((int(2)), (false ? _GLF_FUZZED(9061) : (int(2)))) * 1)), (false ? _GLF_FUZZED(_injected_loop_counter) : (~ (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY((int(2)), (false ? _GLF_FUZZED(9061) : (int(2)))) * 1))))))))))); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-3.6, -508.296)) : injectionSwitch)).x > injectionSwitch.y), _GLF_IDENTITY(true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y))))), (_GLF_IDENTITY(true && (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), bool(bool((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, false), bvec2(bvec3(bvec2(injectionSwitch.x > injectionSwitch.y, false), false))))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, false), bvec2(bvec3(bvec2(injectionSwitch.x > injectionSwitch.y, false), false))))), ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0) : _GLF_FUZZED(694.581))), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), mix(vec2((mat2(1.0) * (injectionSwitch))[0], (mat2(1.0) * (injectionSwitch))[1]), vec2(_GLF_IDENTITY(_GLF_FUZZED(-8.8), float(_GLF_IDENTITY(vec3(_GLF_FUZZED(-8.8), 1.0, 1.0), clamp(vec3(_GLF_FUZZED(-8.8), 1.0, 1.0), vec3(_GLF_FUZZED(-8.8), 1.0, 1.0), vec3(_GLF_FUZZED(-8.8), 1.0, 1.0))))), _GLF_FUZZED(7141.7202)), bvec2(false, false)))).x > injectionSwitch.y, false), false)))))))), false, true), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, false), _GLF_IDENTITY(bvec2(bvec3(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), false), false)), bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec3(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), false), false)), _GLF_IDENTITY(bvec2(bvec4(bvec2(bvec3(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), false), false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), bvec2(bvec3(bvec2(bvec4(bvec2(bvec3(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), false), false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), true)))), true, false)))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, false), bvec2(bvec3(bvec2(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, float(float(injectionSwitch.x)))), float(_GLF_FUZZED(-3.9)), bool(false))) > injectionSwitch.y, false), false)))))), ! (! (! _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, false), bvec2(bvec3(bvec2(injectionSwitch.x > injectionSwitch.y, false), false)))))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, false), bvec2(bvec3(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch, injectionSwitch)).y, false), false)))))), ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, false), bvec2(bvec3(bvec2(injectionSwitch.x > injectionSwitch.y, false), false))))))) && true))))))))), false, true), false)), bvec3(bvec4(bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, false), bvec2(bvec3(bvec2(injectionSwitch.x > injectionSwitch.y, false), false))))), ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, false), bvec2(bvec3(bvec2(injectionSwitch.x > injectionSwitch.y, false), _GLF_IDENTITY(false, true && (false)))))))))), false, true), _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false)))))), false))))))))))), (true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x) + 0.0), _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x)))) > injectionSwitch.y)))))) && true)) || false))), false || (_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false))), _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y), true && (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y), bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-3.8)), float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(vec3(injectionSwitch.y, 0.0, 1.0), max(vec3(injectionSwitch.y, 0.0, 1.0), vec3(injectionSwitch.y, 0.0, 1.0))))), float(vec3(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), 1.0, 1.0)))), bool(true))), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))) ? _GLF_FUZZED(-63.40) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-3.8)), float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(vec3(injectionSwitch.y, 0.0, 1.0), max(vec3(injectionSwitch.y, 0.0, 1.0), vec3(injectionSwitch.y, 0.0, 1.0))))), float(vec3(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), 1.0, 1.0)))), bool(true))), (true ? _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-3.8)), float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(vec3(injectionSwitch.y, 0.0, 1.0), _GLF_IDENTITY(max(vec3(injectionSwitch.y, 0.0, 1.0), vec3(injectionSwitch.y, 0.0, 1.0)), max(max(vec3(injectionSwitch.y, 0.0, 1.0), vec3(injectionSwitch.y, 0.0, 1.0)), _GLF_IDENTITY(max(vec3(injectionSwitch.y, 0.0, 1.0), vec3(injectionSwitch.y, 0.0, 1.0)), (max(vec3(injectionSwitch.y, 0.0, 1.0), vec3(injectionSwitch.y, 0.0, 1.0))) * mat3(1.0))))))), float(vec3(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), 1.0, 1.0)))), bool(true))) : _GLF_FUZZED(1.5))))))), (bool((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-3.8)), float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(vec3(injectionSwitch.y, 0.0, 1.0), max(vec3(injectionSwitch.y, 0.0, 1.0), vec3(injectionSwitch.y, 0.0, 1.0))))), float(vec3(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), 1.0, 1.0)))), bool(true))), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))) ? _GLF_FUZZED(-63.40) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - abs(0.0)), injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), float(_GLF_FUZZED(9602.8977)), bool(false))))), mix(float(_GLF_FUZZED(-3.8)), float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(vec3(injectionSwitch.y, 0.0, 1.0), max(vec3(injectionSwitch.y, 0.0, 1.0), vec3(injectionSwitch.y, 0.0, 1.0))))), float(vec3(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), 1.0, 1.0)))), bool(true))), (true ? _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-3.8)), float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(vec3(injectionSwitch.y, 0.0, 1.0), _GLF_IDENTITY(max(vec3(injectionSwitch.y, 0.0, 1.0), vec3(injectionSwitch.y, 0.0, 1.0)), max(max(vec3(injectionSwitch.y, 0.0, 1.0), vec3(injectionSwitch.y, 0.0, 1.0)), _GLF_IDENTITY(max(vec3(injectionSwitch.y, 0.0, 1.0), vec3(injectionSwitch.y, 0.0, 1.0)), (max(vec3(injectionSwitch.y, 0.0, 1.0), vec3(injectionSwitch.y, 0.0, 1.0))) * mat3(1.0))))))), float(vec3(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), 1.0, 1.0)))), bool(true))) : _GLF_FUZZED(1.5)))))))) && true))))))))))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 do
                  {
                   do
                    {
                     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(8), int(8)))); _injected_loop_counter --)
                      {
                       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (false ? _GLF_FUZZED(-66223) : int(2))))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), clamp(int(2), int(2), int(2))), (_GLF_IDENTITY(int(2), clamp(int(2), int(2), int(2)))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(2), clamp(int(2), int(2), int(2))), (_GLF_IDENTITY(int(2), clamp(int(2), int(2), int(2)))) ^ 0)))))); _injected_loop_counter ++)
                        {
                         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                          {
                           _GLF_struct_replacement_8.GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_14num_workgroupsubgroup_idsubgroup_local_idworkgroup_base.z = subgroup_local_id;
                          }
                        }
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true, false)))));
                }
              }
            }
           else
            {
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_IDENTITY(_GLF_DEAD(false), ! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))))) && true) && (_GLF_DEAD(false)))), (! (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))))))))) || false)), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))))) && true) && (_GLF_DEAD(false)))), (! (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))))))))) || false)), true && (_GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))))) && true) && (_GLF_DEAD(false)))), (! (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))))))))) || false)), ((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))))) && true) && (_GLF_DEAD(false)))), (! (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))))))))) || false))) || false))))))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   do
                    {
                     do
                      {
                       barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                }
              }
            }
          }
        }
      }
    }
  }
 _GLF_struct_18 _GLF_struct_replacement_18 = _GLF_struct_18(_GLF_struct_9(mat4(1.0)), mat2(1.0), bvec3(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (_GLF_IDENTITY(! (true), _GLF_IDENTITY(bool(bool(! (true))), ! (! (bool(bool(! (true)))))))) && true))), (_GLF_IDENTITY(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (_GLF_IDENTITY(! _GLF_IDENTITY((true), ((true)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(bool(bool(! (true))), ! (! (bool(bool(! (true)))))))) && true))), false || (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (_GLF_IDENTITY(! (true), _GLF_IDENTITY(bool(bool(! (true))), ! (! (bool(bool(! (true)))))))) && true)))))) && true)), _GLF_struct_14(_GLF_struct_10(ivec4(1), true, bvec3(true)), _GLF_struct_11(mat2x3(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(length(-8070.3974)) : 1.0))), _GLF_IDENTITY(mat3(1.0), (mat3(1.0)) - mat3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, injectionSwitch.x)) - log(1.0)), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat2x3(0.0, 1.0, cos(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(vec3(-5.6, -823.936, 328.897)[2]) : 0.0))), 1.0, sqrt(0.0), 1.0), mat2x3(mat3(mat2x3(0.0, 1.0, cos(0.0), 1.0, sqrt(0.0), 1.0)))))), injectionSwitch.x), _GLF_ZERO(0.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(543.395), _GLF_IDENTITY((injectionSwitch)[1], 1.0 * ((injectionSwitch)[1]))), vec2((injectionSwitch)[0], _GLF_FUZZED(-99.84)), bvec2(true, false))).x, mix(float(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(543.395), _GLF_IDENTITY((injectionSwitch)[1], 1.0 * ((injectionSwitch)[1]))), vec2((injectionSwitch)[0], _GLF_FUZZED(-99.84)), bvec2(true, false))).x), float(_GLF_FUZZED(579.803)), bool(false)))), _GLF_ZERO(0.0, injectionSwitch.x))), 1u, uvec3(1u), bvec3(true), 1.0), _GLF_struct_12(vec4(1.0), bvec4(true), mat4(1.0), 1u, bvec4(true)), mat4x2(1.0), _GLF_struct_13(bvec3(true), 1u, mat4(1.0), mat4x2(1.0))), _GLF_struct_17(1, _GLF_struct_15(mat3x4(_GLF_IDENTITY(1.0, (1.0) * 1.0)), vec4(1.0), 1.0, ivec4(1), ivec2(1)), mat4x2(1.0), _GLF_struct_16(uvec3(1u), mat4x2(1.0), mat3x4(1.0), mat3x4(1.0), mat4x3(1.0), bvec4(true)), mat3x2(1.0), mat3x2(1.0)), gl_NumWorkGroups.x, _GLF_IDENTITY(mat4(1.0), (mat4(1.0)) / mat4(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   do
    {
     _GLF_struct_replacement_8.GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_14num_workgroupsubgroup_idsubgroup_local_idworkgroup_base.x = _GLF_struct_replacement_18.num_workgroup;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))));
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch, injectionSwitch)).y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-4433.3936), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-3.6)), bvec2(true, false)))) * mat2(1.0)), injectionSwitch, injectionSwitch)).y)), false), bvec2(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch, injectionSwitch)).y)), false), false)))), bool(bvec3(bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * _GLF_IDENTITY(mat2(1.0), _GLF_IDENTITY((mat2(1.0)) / mat2(1.0, 1.0, 1.0, 1.0), ((mat2(1.0)) / mat2(1.0, 1.0, 1.0, 1.0)) + mat2(0.0, 0.0, 0.0, 0.0)))), _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)).y)), _GLF_IDENTITY(false, false || (false))), bvec2(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch, injectionSwitch)).y)), false), false)))), false, false))))))
      {
      }
     else
      {
       do
        {
         _GLF_struct_replacement_8.GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_14num_workgroupsubgroup_idsubgroup_local_idworkgroup_base.w = workgroup_base;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   else
    {
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), bool(_GLF_IDENTITY(bvec2(! (! (false)), false), bvec2(bvec4(bvec2(! (! (false)), false), false, true))))))), (_GLF_IDENTITY(! (false), _GLF_IDENTITY(true && (! (false)), (_GLF_IDENTITY(true && (! (false)), (true && (! (false))) || false)) || false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))) : _GLF_FUZZED(injectionSwitch))).x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(vec2(vec2(injectionSwitch)), mat2(1.0) * (vec2(vec2(injectionSwitch)))), (_GLF_IDENTITY(vec2(vec2(injectionSwitch)), mat2(1.0) * (vec2(vec2(injectionSwitch))))) * vec2(1.0, 1.0))).y))))
          {
          }
         else
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(_GLF_IDENTITY(((0 | 1) ^ 1), clamp(((0 | 1) ^ 1), ((0 | 1) ^ 1), (_GLF_IDENTITY(_GLF_IDENTITY((0 | 1) ^ 1, int(ivec4(_GLF_IDENTITY((0 | 1) ^ 1, min((0 | 1) ^ 1, (0 | 1) ^ 1)), 0, 1, ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), min(int(3), _GLF_IDENTITY(int(3), (int(3)) / 1))), int(3))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) | (int(3)))))))), int(ivec2(_GLF_IDENTITY((0 | 1) ^ 1, (_GLF_IDENTITY((0 | 1) ^ 1, (false ? _GLF_FUZZED(84216) : (0 | 1) ^ 1))) / 1), 0)))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(((0 | 1) ^ 1), clamp(((0 | 1) ^ 1), ((0 | 1) ^ 1), (_GLF_IDENTITY(_GLF_IDENTITY((0 | 1) ^ 1, int(ivec4(_GLF_IDENTITY((0 | 1) ^ 1, min((0 | 1) ^ 1, (0 | 1) ^ 1)), 0, 1, ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), min(int(3), _GLF_IDENTITY(int(3), (int(3)) / 1))), int(3))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) | (int(3)))))))), int(ivec2(_GLF_IDENTITY((0 | 1) ^ 1, (_GLF_IDENTITY((0 | 1) ^ 1, (false ? _GLF_FUZZED(84216) : (0 | 1) ^ 1))) / 1), 0)))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(((0 | 1) ^ 1), clamp(((0 | 1) ^ 1), ((0 | 1) ^ 1), (_GLF_IDENTITY(_GLF_IDENTITY((0 | 1) ^ 1, int(ivec4(_GLF_IDENTITY((0 | 1) ^ 1, min((0 | 1) ^ 1, (0 | 1) ^ 1)), 0, 1, ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), min(int(3), _GLF_IDENTITY(int(3), (int(3)) / 1))), int(3))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) | (int(3)))))))), int(ivec2(_GLF_IDENTITY((0 | 1) ^ 1, (_GLF_IDENTITY((0 | 1) ^ 1, (false ? _GLF_FUZZED(84216) : (0 | 1) ^ 1))) / 1), 0)))))), int(ivec2(_GLF_IDENTITY(((0 | 1) ^ 1), clamp(((0 | 1) ^ 1), ((0 | 1) ^ 1), (_GLF_IDENTITY(_GLF_IDENTITY((0 | 1) ^ 1, int(ivec4(_GLF_IDENTITY((0 | 1) ^ 1, min((0 | 1) ^ 1, (0 | 1) ^ 1)), 0, 1, ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), min(int(3), _GLF_IDENTITY(int(3), (int(3)) / 1))), int(3))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) | (int(3)))))))), int(ivec2(_GLF_IDENTITY((0 | 1) ^ 1, (_GLF_IDENTITY((0 | 1) ^ 1, (false ? _GLF_FUZZED(84216) : (0 | 1) ^ 1))) / 1), 0)))))), 0))), _GLF_IDENTITY(((0 | 1) ^ 1), clamp(((0 | 1) ^ 1), ((0 | 1) ^ 1), (_GLF_IDENTITY(_GLF_IDENTITY((0 | 1) ^ 1, int(ivec4(_GLF_IDENTITY((0 | 1) ^ 1, min((0 | 1) ^ 1, (0 | 1) ^ 1)), 0, 1, ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), min(int(3), _GLF_IDENTITY(int(3), (int(3)) / 1))), int(3))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) | (int(3)))))))), int(ivec2(_GLF_IDENTITY((0 | 1) ^ 1, (_GLF_IDENTITY((0 | 1) ^ 1, (false ? _GLF_FUZZED(84216) : (0 | 1) ^ 1))) / 1), 0)))))), _GLF_IDENTITY(((0 | 1) ^ 1), clamp(((0 | 1) ^ 1), ((0 | 1) ^ 1), (_GLF_IDENTITY(_GLF_IDENTITY((0 | 1) ^ 1, int(ivec4(_GLF_IDENTITY((0 | 1) ^ 1, min((0 | 1) ^ 1, (0 | 1) ^ 1)), 0, 1, ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), min(int(3), _GLF_IDENTITY(int(3), (int(3)) / 1))), int(3))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) | (int(3)))))))), int(ivec2(_GLF_IDENTITY((0 | 1) ^ 1, (_GLF_IDENTITY((0 | 1) ^ 1, (false ? _GLF_FUZZED(84216) : (0 | 1) ^ 1))) / 1), 0)))))))), _GLF_IDENTITY(((0 | 1) ^ 1), clamp(((0 | 1) ^ 1), ((0 | 1) ^ 1), (_GLF_IDENTITY(_GLF_IDENTITY((0 | 1) ^ 1, int(ivec4(_GLF_IDENTITY((0 | 1) ^ 1, min((0 | 1) ^ 1, (0 | 1) ^ 1)), 0, 1, ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), min(int(3), _GLF_IDENTITY(int(3), (int(3)) / 1))), int(3))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) | (int(3)))))))), int(ivec2(_GLF_IDENTITY((0 | 1) ^ 1, (_GLF_IDENTITY((0 | 1) ^ 1, (false ? _GLF_FUZZED(84216) : (0 | 1) ^ 1))) / 1), 0)))))), _GLF_IDENTITY(_GLF_IDENTITY(((0 | 1) ^ 1), clamp(((0 | 1) ^ 1), ((0 | 1) ^ 1), (_GLF_IDENTITY(_GLF_IDENTITY((0 | 1) ^ 1, int(ivec4(_GLF_IDENTITY((0 | 1) ^ 1, min((0 | 1) ^ 1, (0 | 1) ^ 1)), 0, 1, ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), min(int(3), _GLF_IDENTITY(int(3), (int(3)) / 1))), int(3))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) | (int(3)))))))), int(ivec2(_GLF_IDENTITY((0 | 1) ^ 1, (_GLF_IDENTITY((0 | 1) ^ 1, (false ? _GLF_FUZZED(84216) : (0 | 1) ^ 1))) / 1), 0)))))), (_GLF_IDENTITY(((0 | 1) ^ 1), clamp(((0 | 1) ^ 1), ((0 | 1) ^ 1), (_GLF_IDENTITY(_GLF_IDENTITY((0 | 1) ^ 1, int(ivec4(_GLF_IDENTITY((0 | 1) ^ 1, min((0 | 1) ^ 1, (0 | 1) ^ 1)), 0, 1, ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), min(int(3), _GLF_IDENTITY(int(3), (int(3)) / 1))), int(3))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) | (int(3)))))))), int(ivec2(_GLF_IDENTITY((0 | 1) ^ 1, (_GLF_IDENTITY((0 | 1) ^ 1, (false ? _GLF_FUZZED(84216) : (0 | 1) ^ 1))) / 1), 0))))))) * int(_GLF_ONE(1.0, injectionSwitch.y)))))); _injected_loop_counter --)
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(0, (0) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))) ^ 0)); _injected_loop_counter --)
                  {
                   barrier();
                  }
                }
              }
             else
              {
              }
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uint virtual_gid = _GLF_struct_replacement_8.GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_14num_workgroupsubgroup_idsubgroup_local_idworkgroup_base.w + _GLF_struct_replacement_8.GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_14num_workgroupsubgroup_idsubgroup_local_idworkgroup_base.y * subgroup_size + _GLF_struct_replacement_8.GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_14num_workgroupsubgroup_idsubgroup_local_idworkgroup_base.z;
 do
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), _GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false)))))))
      {
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             barrier();
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_8.GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_14num_workgroupsubgroup_idsubgroup_local_idworkgroup_base.w, (_GLF_struct_replacement_8.GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_14num_workgroupsubgroup_idsubgroup_local_idworkgroup_base.w) | (_GLF_struct_replacement_8.GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_14num_workgroupsubgroup_idsubgroup_local_idworkgroup_base.w)) + _GLF_struct_replacement_8.GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_14num_workgroupsubgroup_idsubgroup_local_idworkgroup_base.y * _GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(uvec2(159096u, 75902u)[1]) : subgroup_size)), (true ? _GLF_struct_replacement_8.GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_14num_workgroupsubgroup_idsubgroup_local_idworkgroup_base.w + _GLF_struct_replacement_8.GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_14num_workgroupsubgroup_idsubgroup_local_idworkgroup_base.y * subgroup_size : _GLF_FUZZED(uvec4(1998u, 125330u, 52682u, 87006u)[3]))) + ((_GLF_struct_replacement_8.GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_14num_workgroupsubgroup_idsubgroup_local_idworkgroup_base.z + 1) % _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))) | (subgroup_size))) + (0u << _GLF_IDENTITY(uint(1u), _GLF_IDENTITY(uint(1u), 0u | (uint(1u)))))));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   buf[virtual_gid] = _GLF_IDENTITY(1, max(1, 1));
  }
 do
  {
   do
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(bvec3(bool(true), _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true))))), true)))))))
        {
         do
          {
           do
            {
             do
              {
               if(_GLF_struct_replacement_8.GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_14num_workgroupsubgroup_idsubgroup_local_idworkgroup_base.z + 1 < _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, 0u | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, max(subgroup_size, _GLF_IDENTITY(subgroup_size, (true ? subgroup_size : _GLF_FUZZED(subgroup_id))))), clamp(_GLF_IDENTITY(subgroup_size, max(subgroup_size, _GLF_IDENTITY(subgroup_size, (true ? subgroup_size : _GLF_FUZZED(subgroup_id))))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, max(subgroup_size, _GLF_IDENTITY(subgroup_size, (true ? subgroup_size : _GLF_FUZZED(subgroup_id))))), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, max(subgroup_size, _GLF_IDENTITY(subgroup_size, (true ? subgroup_size : _GLF_FUZZED(subgroup_id))))), 0u + (_GLF_IDENTITY(subgroup_size, max(subgroup_size, _GLF_IDENTITY(subgroup_size, (true ? subgroup_size : _GLF_FUZZED(subgroup_id)))))))) ^ 0u), _GLF_IDENTITY(subgroup_size, max(subgroup_size, _GLF_IDENTITY(subgroup_size, (true ? subgroup_size : _GLF_FUZZED(subgroup_id))))))))), (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((true ? subgroup_size : _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, min(_GLF_IDENTITY(subgroup_size, uint(uint(_GLF_IDENTITY(subgroup_size, min(subgroup_size, _GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size)))))))), subgroup_size)), clamp(_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)), subgroup_size, subgroup_size)), _GLF_IDENTITY(subgroup_size, (subgroup_size) >> 0u)), max(min(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, min(_GLF_IDENTITY(subgroup_size, uint(uint(_GLF_IDENTITY(subgroup_size, min(subgroup_size, _GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size)))))))), subgroup_size)), clamp(_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)), subgroup_size, subgroup_size)), _GLF_IDENTITY(subgroup_size, (subgroup_size) >> 0u)), min(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, min(_GLF_IDENTITY(subgroup_size, uint(uint(_GLF_IDENTITY(subgroup_size, min(subgroup_size, _GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size)))))))), subgroup_size)), clamp(_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)), subgroup_size, subgroup_size)), _GLF_IDENTITY(subgroup_size, (subgroup_size) >> 0u))))))), (false ? _GLF_FUZZED(subgroup_size) : (true ? subgroup_size : _GLF_FUZZED(subgroup_size))))))))
                {
                 int i = 0;
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                    }
                   else
                    {
                     barrier();
                    }
                  }
                 atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, 0u ^ (next_virtual_gid))], uint(2), 4, 64, 4);
                }
               else
                {
                 for(int _injected_loop_counter = int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, injectionSwitch.x)) / 1.0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     atomicStore(buf[next_virtual_gid], uint(2), 4, 64, _GLF_IDENTITY(4, (4) * 1));
                    }
                   else
                    {
                    }
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       else
        {
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 while(_GLF_WRAPPED_LOOP(false));
 do
  {
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec2(true, false)))))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 while(_GLF_WRAPPED_LOOP(false));
}
