#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
    {
     return;
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        return;
       do
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, float(mat3x2(0.0, 1.0, 0.0, 0.0, 1.0, 1.0))), 0.0, 0.0)) + (injectionSwitch.x)) > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), int(ivec4(int(_GLF_IDENTITY(5, (5) >> 0)), 0, 1, 0)))))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) > injectionSwitch.y))))
              break;
             return;
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           for(int _injected_loop_counter = int(_GLF_ZERO(_GLF_IDENTITY(0.0, 0.0 + (0.0)), injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), 1.0 * (_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), min(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))))))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              continue;
             return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
uint subgroup_size = 16;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x) / 1.0) > injectionSwitch.y, false)), false || (bool(bvec2(injectionSwitch.x > injectionSwitch.y, false))))), ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0), (true ? _GLF_IDENTITY(mat2(1.0), mat2(mat2x4(_GLF_IDENTITY(mat2(1.0), (true ? mat2(1.0) : _GLF_FUZZED(mat2(4.5, -7324.3069, 394.298, 15.54))))))) : _GLF_FUZZED(mat2(-18.61, -9.9, -6.7, -4635.4697)))) * (injectionSwitch)).x, max(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0), (true ? _GLF_IDENTITY(mat2(1.0), mat2(mat2x4(_GLF_IDENTITY(mat2(1.0), (true ? mat2(1.0) : _GLF_FUZZED(mat2(4.5, -7324.3069, 394.298, 15.54))))))) : _GLF_FUZZED(mat2(-18.61, -9.9, -6.7, -4635.4697)))) * (injectionSwitch)).x, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0), (true ? _GLF_IDENTITY(mat2(1.0), mat2(mat2x4(_GLF_IDENTITY(mat2(1.0), (true ? mat2(1.0) : _GLF_FUZZED(mat2(4.5, -7324.3069, 394.298, 15.54))))))) : _GLF_FUZZED(mat2(-18.61, -9.9, -6.7, -4635.4697)))) * (injectionSwitch)).x)), (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x) / 1.0) > injectionSwitch.y, false)), _GLF_IDENTITY(false, bool(bvec4(false, false, true, false))) || (bool(bvec2(injectionSwitch.x > injectionSwitch.y, false))))))))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, _GLF_IDENTITY(true, ! (! (true))) && (_injected_loop_counter != 0))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        return;
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))));
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-5912.8137)), float(injectionSwitch.y), bool(true))))))))))
        break;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, false)))) || false)) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))))))))
  {
   for(int _injected_loop_counter = (((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)), ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), int(6)), 0 ^ (1 << _GLF_IDENTITY(int(6), int(6))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) - (0 & -41179))), int(6))) - int(_GLF_ZERO(0.0, injectionSwitch.x)))) << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(int(0), ~ (~ (int(0)))), 1)), clamp(int(ivec2(_GLF_IDENTITY(int(0), ~ (~ (int(0)))), 1)), int(ivec2(_GLF_IDENTITY(int(0), _GLF_IDENTITY(~ (~ (int(0))), (~ (~ (int(0)))) >> 0)), 1)), int(ivec2(_GLF_IDENTITY(int(0), ~ (~ (int(0)))), 1)))))))); _injected_loop_counter --)
        {
         return;
        }
      }
     do
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         return;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     return;
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)), (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x))) + 0.0)), log(1.0) + ((_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x))))), max(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x))), ((_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)))) + 0.0), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, 1.0 * _GLF_IDENTITY((injectionSwitch.x), 1.0 * ((injectionSwitch.x))))), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, 1.0 * _GLF_IDENTITY((injectionSwitch.x), 1.0 * ((injectionSwitch.x))))), float(mat3x4((_GLF_IDENTITY(injectionSwitch.x, 1.0 * _GLF_IDENTITY((injectionSwitch.x), 1.0 * ((injectionSwitch.x))))), 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0, 0.0))), (true ? _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x, 1.0 * _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(vec3(-3.0, -64.70, -90.01)[2])))), 1.0 * ((injectionSwitch.x))))), float(mat3x4((_GLF_IDENTITY(injectionSwitch.x, 1.0 * _GLF_IDENTITY((injectionSwitch.x), 1.0 * ((injectionSwitch.x))))), 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0, 0.0))) : _GLF_FUZZED(8.6)))) * 1.0), max((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x, 1.0 * (injectionSwitch.x))), (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x))))))) - 0.0) > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true, false)))))) || false)) && true)))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              return;
             return;
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         return;
        }
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       do
        {
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             return;
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, false, true)), ! (! (bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, false, true)))))), true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))
        return;
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), ((injectionSwitch.x > injectionSwitch.y)) || false)), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-522.807) : _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))))))))), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat3x4(injectionSwitch.y, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(1.0, (1.0) + 0.0), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, _GLF_IDENTITY(1.0 * (1.0), mix(float(_GLF_FUZZED(float(19118u))), float(1.0 * (1.0)), bool(true)))), float(_GLF_IDENTITY(mat2x3(_GLF_IDENTITY(1.0, 1.0 * (1.0)), 1.0, 0.0, 1.0, 0.0, 0.0), transpose(transpose(_GLF_IDENTITY(mat2x3(_GLF_IDENTITY(1.0, 1.0 * (1.0)), 1.0, 0.0, 1.0, 0.0, 0.0), (mat2x3(_GLF_IDENTITY(1.0, 1.0 * (_GLF_IDENTITY(1.0, float(mat3(1.0, 0.0, exp(0.0), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(dot(vec2(1.0, log(1.0)), vec2(1.0, abs(0.0))), dot(vec2(1.0, log(1.0)), vec2(1.0, abs(0.0)))), _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 0.0))))), 1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-9029.9773) : _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-762.582)), float(1.0), bool(true))))), 0.0, 0.0)) * mat2(1.0))))))))), 0.0))))), false, false, false))), true, false, true)))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         do
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
      }
    }
  }
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) ^ uvec3(0u, 0u, 0u)).x;
 if(_GLF_DEAD(false))
  return;
 uint workgroup_base = _GLF_IDENTITY(workgroup_size * workgroup_id, (workgroup_size * workgroup_id) | (_GLF_IDENTITY(workgroup_size * workgroup_id, uint(uvec3(workgroup_size * workgroup_id, 1u, 0u)))));
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(false, bool(bool(false))) || (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0)) - log(_GLF_ONE(1.0, injectionSwitch.y))) > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, false)))))))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          continue;
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(886.258)), float(injectionSwitch.x), bool(true))), injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y))))
        continue;
      }
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      break;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) || false));
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED((_GLF_IDENTITY(_GLF_IDENTITY(-570.380 / 989.012, abs(1.0) * (-570.380 / 989.012)), _GLF_IDENTITY(float(mat3x4(_GLF_IDENTITY(-570.380 / 989.012, abs(1.0) * (-570.380 / 989.012)), 1.0, exp(0.0), 1.0, 1.0, _GLF_IDENTITY(0.0, (0.0) * 1.0), 0.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0))), 0.0, 1.0, sin(0.0), 1.0)), 0.0 + (float(mat3x4(_GLF_IDENTITY(-570.380 / 989.012, abs(1.0) * (-570.380 / 989.012)), 1.0, exp(0.0), 1.0, 1.0, _GLF_IDENTITY(0.0, (0.0) * 1.0), 0.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0))), 0.0, 1.0, sin(0.0), 1.0)))))))), float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - _GLF_ZERO(0.0, injectionSwitch.x))), bool(true))), _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((injectionSwitch.x) + 0.0, mix(float((injectionSwitch.x) + 0.0), float(_GLF_FUZZED(-216.053)), bool(false)))))) > injectionSwitch.y)) || (_GLF_IDENTITY(false, (false) && true)))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((_GLF_IDENTITY(1 ^ 1, (1 ^ 1) + 0)), max(_GLF_IDENTITY((1 ^ 1), ((1 ^ 1)) | (0 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (true ? int(5) : _GLF_FUZZED(_injected_loop_counter)))))), (1 ^ 1)))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           return;
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        return;
      }
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  return;
 uint virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, 0u | (workgroup_base)) + subgroup_id * _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, (subgroup_size) >> 0u))), (_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))) - uint(_GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, (subgroup_size) >> 0u))), (_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))) - uint(_GLF_ZERO(0.0, injectionSwitch.x)))) | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, (subgroup_size) >> 0u))), (_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))) - uint(_GLF_ZERO(0.0, injectionSwitch.x))))) + subgroup_local_id, _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, 0u | (workgroup_base)) + subgroup_id * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, (subgroup_size) >> 0u))), (_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))) - uint(_GLF_ZERO(0.0, injectionSwitch.x))) + subgroup_local_id), uint(uint(_GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, 0u | (workgroup_base)) + subgroup_id * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, (subgroup_size) >> 0u))), (_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))) - uint(_GLF_ZERO(0.0, injectionSwitch.x))) + subgroup_local_id), (198134u & 0u) ^ ((_GLF_IDENTITY(workgroup_base, 0u | (workgroup_base)) + subgroup_id * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, (subgroup_size) >> 0u))), (_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))) - uint(_GLF_ZERO(0.0, injectionSwitch.x))) + subgroup_local_id)))))) >> 0u);
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, _GLF_IDENTITY(workgroup_base, (workgroup_base) / 1u))) + _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, min(_GLF_IDENTITY(subgroup_id, (subgroup_id) | 0u), subgroup_id))), clamp((_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)), ~ (~ (_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)))))) / 1u)), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))), ~ (~ ((_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)))))))) / 1u), max(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))) / 1u), uint(uint(_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))) / 1u)))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))) / 1u), clamp(_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))) / 1u), _GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, max(_GLF_IDENTITY(subgroup_id, (subgroup_id) - (0u >> _GLF_IDENTITY(uint(5u), uint(5u)))), subgroup_id)), min(subgroup_id, subgroup_id))) / 1u), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))) / 1u), (_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))) / 1u)) ^ 0u))), 0u | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))) / 1u), clamp(_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)), ~ (~ (_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))))), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)), ~ (~ (_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)))))) | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)), uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)), (_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))) ^ 0u), 1u, 1u, 0u), min(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)), (_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))) ^ 0u), 1u, 1u, 0u), uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)), (_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))) ^ 0u), 1u, 1u, 0u)))))))) / 1u), _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))), ((_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)))) | ((_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))))) / 1u), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))) / 1u), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(subgroup_id, _GLF_IDENTITY(subgroup_id, ~ (~ (subgroup_id))))), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(min(subgroup_id, subgroup_id), min(min(subgroup_id, subgroup_id), min(subgroup_id, subgroup_id))))), 0u | ((_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(min(subgroup_id, subgroup_id), min(min(subgroup_id, subgroup_id), min(subgroup_id, subgroup_id))))))) / 1u)) ^ 0u), min(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))) / 1u), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(subgroup_id, _GLF_IDENTITY(subgroup_id, ~ (~ (subgroup_id))))), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(min(subgroup_id, subgroup_id), min(min(subgroup_id, subgroup_id), min(subgroup_id, subgroup_id))))), 0u | ((_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(min(subgroup_id, subgroup_id), min(min(subgroup_id, subgroup_id), min(subgroup_id, subgroup_id))))))) / 1u)) ^ 0u), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))) / 1u), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(subgroup_id, _GLF_IDENTITY(subgroup_id, ~ (~ (subgroup_id))))), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(min(subgroup_id, subgroup_id), min(min(subgroup_id, subgroup_id), min(subgroup_id, subgroup_id))))), 0u | ((_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(min(subgroup_id, subgroup_id), min(min(subgroup_id, subgroup_id), min(subgroup_id, subgroup_id))))))) / 1u)) ^ 0u))))))))) * subgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(min(subgroup_id, subgroup_id), uint(_GLF_IDENTITY(uvec2(min(subgroup_id, subgroup_id), 0u), (false ? _GLF_FUZZED(uvec2(91528u, 156606u)) : uvec2(min(subgroup_id, subgroup_id), 0u))))))), clamp((_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) ^ 0u), min(subgroup_id, subgroup_id))), (_GLF_IDENTITY(subgroup_id, min(subgroup_id, _GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))))))) / 1u), max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))) / 1u), uint(uint(_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))) / 1u)))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))) / 1u), uint(uint(_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))) / 1u)))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))) / 1u), uint(uint(_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))) / 1u)))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))) / 1u), uint(uint(_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))) / 1u)))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))) / 1u), clamp(_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))) / 1u), _GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))) / 1u), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))) / 1u), (_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)), 0u ^ (_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))))) << 0u)) / 1u)) ^ 0u))), 0u | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, ~ (~ (subgroup_id))), (_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))) / 1u), clamp(_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)), _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))), (~ (_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)))) - uint(_GLF_ZERO(0.0, injectionSwitch.x)))), (false ? _GLF_IDENTITY(_GLF_FUZZED(76738u), (_GLF_IDENTITY(_GLF_FUZZED(76738u), (true ? _GLF_FUZZED(76738u) : _GLF_FUZZED(num_workgroup)))) * 1u) : ~ (~ (_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)))))))) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)), uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(min(subgroup_id, subgroup_id), ~ (_GLF_IDENTITY(~ (min(subgroup_id, subgroup_id)), (_GLF_IDENTITY(~ (min(subgroup_id, subgroup_id)), (~ (min(subgroup_id, subgroup_id))) | (~ (min(subgroup_id, subgroup_id))))) | (~ (min(subgroup_id, subgroup_id))))))), (_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))) ^ 0u), _GLF_IDENTITY(1u, 0u ^ (1u)), 1u, 0u), min(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)), (_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))) ^ 0u), 1u, 1u, 0u), uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)), (_GLF_IDENTITY(subgroup_id, min(subgroup_id, _GLF_IDENTITY(subgroup_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (subgroup_id))))) ^ 0u), 1u, 1u, 0u))))), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)), uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(subgroup_id, _GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)))), (_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))) ^ 0u), 1u, 1u, 0u), min(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))), (false ? _GLF_FUZZED(virtual_gid) : _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))), min((_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))), (_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))))))) ^ 0u), 1u, 1u, 0u), (uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))), (false ? _GLF_FUZZED(virtual_gid) : _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))), min((_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))), (_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))))))) ^ 0u), 1u, 1u, 0u)) << (uvec4(1u, 1u, 1u, 1u) ^ uvec4(1u, 1u, 1u, 1u))), uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)), min(subgroup_id, _GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, 1u * (subgroup_id))) | 0u)))) ^ _GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, (0u) ^ 0u), 0u, 0u))), _GLF_IDENTITY(1u, ~ (_GLF_IDENTITY(~ (1u), (~ (1u)) | (~ (1u))))), 1u, 0u)))))) ^ 0u)))) / 1u), _GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))) / 1u), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, min(_GLF_IDENTITY(subgroup_id, (true ? subgroup_id : _GLF_FUZZED(146393u))), subgroup_id))) / 1u), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(subgroup_id, _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(~ (~ (subgroup_id)), (_GLF_IDENTITY(~ (~ (subgroup_id)), (~ (~ (_GLF_IDENTITY(subgroup_id, 1u * (subgroup_id))))) * 1u)) >> 0u)))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(min(subgroup_id, subgroup_id), min(min(_GLF_IDENTITY(subgroup_id, (subgroup_id) + uint(_GLF_ZERO(0.0, injectionSwitch.x))), subgroup_id), min(subgroup_id, subgroup_id)))), 0u | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(min(subgroup_id, subgroup_id), min(min(_GLF_IDENTITY(subgroup_id, (subgroup_id) + uint(_GLF_ZERO(0.0, injectionSwitch.x))), subgroup_id), min(subgroup_id, subgroup_id)))), uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(min(subgroup_id, subgroup_id), min(min(_GLF_IDENTITY(subgroup_id, (subgroup_id) + uint(_GLF_ZERO(0.0, injectionSwitch.x))), subgroup_id), min(subgroup_id, subgroup_id)))), (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(min(subgroup_id, subgroup_id), min(min(_GLF_IDENTITY(subgroup_id, (subgroup_id) + uint(_GLF_ZERO(0.0, injectionSwitch.x))), subgroup_id), min(subgroup_id, subgroup_id))))) << 0u), 1u, 1u)))))), 0u | ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(min(subgroup_id, subgroup_id), min(min(subgroup_id, subgroup_id), min(subgroup_id, _GLF_IDENTITY(subgroup_id, ~ (~ (subgroup_id))))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_GLF_IDENTITY((workgroup_id % 118220u), ((workgroup_id % 118220u)) - 0u)) : _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, ~ (_GLF_IDENTITY(~ (subgroup_id), 0u ^ (~ (subgroup_id))))), _GLF_IDENTITY(_GLF_IDENTITY(min(subgroup_id, subgroup_id), min(min(subgroup_id, subgroup_id), min(subgroup_id, subgroup_id))), (_GLF_IDENTITY(min(subgroup_id, subgroup_id), min(min(subgroup_id, subgroup_id), min(subgroup_id, subgroup_id)))) << 0u))))))) / 1u)) ^ 0u))))))) * subgroup_size) * 1u) + (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), 0u ^ ((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)))))) % subgroup_size, ~ _GLF_IDENTITY((_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + 1)))) % subgroup_size, min((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + 1))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + 1))), (false ? _GLF_FUZZED(workgroup_id) : _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, 0u ^ (subgroup_local_id)) + 1, ~ (~ (subgroup_local_id + 1))))) : _GLF_FUZZED(num_workgroup)))) % subgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (true ? subgroup_local_id + 1 : _GLF_FUZZED(148142u))), ~ (~ (subgroup_local_id + 1)))) % subgroup_size))), ((_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + 1)))) % subgroup_size, (true ? _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + 1)))) % subgroup_size, (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + 1)))) % subgroup_size, ~ (~ ((_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + 1)))) % subgroup_size)))) ^ 0u) : _GLF_FUZZED(subgroup_id))), min((_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + 1)))) % subgroup_size, (_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (1) - (0 ^ 0)), ~ (~ (subgroup_local_id + 1)))) % subgroup_size)))) - 0u), uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), ~ (~ _GLF_IDENTITY((~ ((subgroup_local_id + 1) % subgroup_size)), (true ? (~ ((subgroup_local_id + 1) % subgroup_size)) : _GLF_FUZZED(138808u))))), (_GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), ~ (~ _GLF_IDENTITY((~ ((subgroup_local_id + 1) % subgroup_size)), (true ? (~ ((subgroup_local_id + 1) % subgroup_size)) : _GLF_FUZZED(138808u)))))) | (_GLF_IDENTITY(_GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), ~ (~ _GLF_IDENTITY((~ ((subgroup_local_id + 1) % subgroup_size)), (true ? (~ ((subgroup_local_id + 1) % subgroup_size)) : _GLF_FUZZED(138808u))))), ~ (~ (_GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), ~ (~ _GLF_IDENTITY((~ ((subgroup_local_id + 1) % subgroup_size)), (true ? (~ ((subgroup_local_id + 1) % subgroup_size)) : _GLF_FUZZED(138808u)))))))))), 1u, 1u), min(uvec3(_GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), ~ (~ _GLF_IDENTITY((~ ((subgroup_local_id + 1) % subgroup_size)), (true ? (~ ((subgroup_local_id + 1) % subgroup_size)) : _GLF_FUZZED(138808u))))), 1u, 1u), uvec3(_GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), ~ (~ _GLF_IDENTITY((~ ((subgroup_local_id + 1) % subgroup_size)), (true ? (_GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), min(~ ((subgroup_local_id + 1) % subgroup_size), ~ ((subgroup_local_id + 1) % subgroup_size)))) : _GLF_FUZZED(138808u))))), 1u, 1u)))))), ((_GLF_IDENTITY(~ _GLF_IDENTITY(((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id)))) / 1u, 1u * (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id)))) / 1u, max((_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id)))) / 1u, (_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id)))) / 1u))))), 1u * (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id)))) / 1u, 1u * (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id)))) / 1u, max((_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id)))) / 1u, (_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id)))) / 1u))))), (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id)))) / 1u, 1u * (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id)))) / 1u, max((_GLF_IDENTITY(subgroup_local_id, ~ (_GLF_IDENTITY(~ (subgroup_local_id), uint(uint(~ (subgroup_local_id))))))) / 1u, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id)))) / 1u, clamp(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id)))) / 1u, max((_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id)))) / 1u, (_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id)))) / 1u)), (_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id)))) / 1u, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id)))) / 1u, ~ (~ ((_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id)))) / 1u))))))))))) / 1u))) + 1, ~ (~ (subgroup_local_id + 1)))) % subgroup_size), _GLF_IDENTITY(~ (~ (((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id)))) / 1u) + 1, ~ (_GLF_IDENTITY(~ (subgroup_local_id + 1), (false ? _GLF_FUZZED(atomicXor(subgroup_local_id, subgroup_size)) : ~ (subgroup_local_id + 1)))))) % subgroup_size))), (true ? ~ (~ (((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id)))) / 1u) + 1, ~ (_GLF_IDENTITY(~ (subgroup_local_id + 1), (false ? _GLF_FUZZED(atomicXor(subgroup_local_id, subgroup_size)) : ~ (subgroup_local_id + 1)))))) % subgroup_size))) : _GLF_FUZZED(subgroup_size)))), uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), _GLF_IDENTITY(min(~ (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((subgroup_local_id + 1) % subgroup_size) - 0u)) | ((subgroup_local_id + 1) % subgroup_size))), ~ ((subgroup_local_id + 1) % subgroup_size)), (_GLF_IDENTITY(min(~ (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((subgroup_local_id + 1) % subgroup_size) - 0u)) | ((subgroup_local_id + 1) % subgroup_size))), ~ ((subgroup_local_id + 1) % subgroup_size)), ~ (~ (min(~ (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((subgroup_local_id + 1) % subgroup_size) - 0u)) | ((subgroup_local_id + 1) % subgroup_size))), ~ ((subgroup_local_id + 1) % subgroup_size)))))) << 0u)), ~ (~ (~ ((subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(-51751))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(-51751))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1 : _GLF_FUZZED(-58871))), (true ? 1 : _GLF_FUZZED(-51751))))))), (false ? _GLF_FUZZED(_GLF_IDENTITY(43152, (43152) | (43152))) : ~ (_GLF_IDENTITY(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(-51751))), ~ (~ (_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(-51751)))))))))))) % subgroup_size)))), 1u, 1u))))) | (_GLF_IDENTITY((_GLF_IDENTITY(~ ((_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + 1)))) % subgroup_size), uint(uvec3(_GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), ~ (~ (~ ((subgroup_local_id + 1) % subgroup_size)))), 1u, 1u)))), max((_GLF_IDENTITY(~ ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY((1), clamp(_GLF_IDENTITY((1), (_GLF_IDENTITY((1), clamp((1), (1), (1)))) | ((1))), (1), (1))) - 0), ~ (~ (subgroup_local_id + 1))), (_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY((1), clamp(_GLF_IDENTITY((1), (_GLF_IDENTITY((1), clamp((1), (1), (1)))) | ((1))), (1), (1))) - 0), ~ (~ (subgroup_local_id + 1)))) ^ 0u)) % subgroup_size), uint(uvec3(_GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), _GLF_IDENTITY(~ (~ (~ ((subgroup_local_id + 1) % subgroup_size))), ~ (_GLF_IDENTITY(~ (~ (~ (~ ((subgroup_local_id + 1) % subgroup_size)))), (~ (~ (~ (~ ((subgroup_local_id + 1) % subgroup_size))))) << 0u)))), 1u, 1u)))), (_GLF_IDENTITY(~ ((_GLF_IDENTITY(subgroup_local_id + 1, ~ (_GLF_IDENTITY(~ (subgroup_local_id + 1), (~ (subgroup_local_id + 1)) | (0u >> _GLF_IDENTITY(uint(6u), uint(6u))))))) % subgroup_size), uint(uvec3(_GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), ~ (_GLF_IDENTITY(~ (~ ((subgroup_local_id + 1) % subgroup_size)), (false ? _GLF_FUZZED(subgroup_id) : ~ (~ ((subgroup_local_id + 1) % subgroup_size)))))), 1u, 1u))))))))));
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
   return;
  }
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)))) > _GLF_IDENTITY((0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(0), int(0))), 0 + (~ (_GLF_IDENTITY(int(0), int(0)))))))), 0 | ((0 >> _GLF_IDENTITY(int(0), int(0)))))), bool(bvec3(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)))) > _GLF_IDENTITY((0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(0), int(0))), 0 + (~ (_GLF_IDENTITY(int(0), int(0)))))))), 0 | ((0 >> _GLF_IDENTITY(int(0), int(0)))))), false, false))); _injected_loop_counter --)
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y))), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_IDENTITY(1.0, mix(_GLF_IDENTITY(float(1.0), mix(float(_GLF_FUZZED(-7.1)), float(float(1.0)), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), float(_GLF_FUZZED(-73.14)), bool(false))))).y)))))))
    {
     if(_GLF_DEAD(false))
      continue;
     buf[virtual_gid] = 1;
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    continue;
  }
 do
  {
   do
    {
     if(subgroup_local_id + 1 < subgroup_size)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       int i = _GLF_IDENTITY(0, max(_GLF_IDENTITY(0, _GLF_IDENTITY(0 | (_GLF_IDENTITY(0, min(0, 0))), ~ (~ (_GLF_IDENTITY(0 | (_GLF_IDENTITY(0, min(0, 0))), (0 | (_GLF_IDENTITY(0, min(0, 0)))) | 0))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, (0) >> 0), (_GLF_IDENTITY(0, (0) >> 0)) >> 0), (_GLF_IDENTITY(0, _GLF_IDENTITY((0), clamp((0), _GLF_IDENTITY((0), ((0)) << 0), _GLF_IDENTITY((0), max((0), (0))))) >> 0)) ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))));
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(_GLF_IDENTITY(0, (0) - int(_GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)) ? 0 : _GLF_FUZZED(-94977), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), false || (true)) ? 0 : _GLF_FUZZED(-94977)) + 0, ((_GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), false || (true)) ? 0 : _GLF_FUZZED(-94977)) + 0) | ((_GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), false || (true)) ? 0 : _GLF_FUZZED(-94977)) + 0)))))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, false || (true)), false, true, _GLF_IDENTITY(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (! (true)) && true))))), ! (! (_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (! (true)) && true)))))))))))))
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))))
              {
               if(_GLF_DEAD(false))
                return;
               break;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             return;
             if(_GLF_DEAD(false))
              continue;
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
          }
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-3777.4212), _GLF_FUZZED(2.0)), bvec2(false, false))).y))))
          break;
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), true && (! (injectionSwitch.x > injectionSwitch.y)))))))))
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            continue;
           continue;
           if(_GLF_DEAD(false))
            continue;
          }
         atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(2), uint(uvec2(uint(2), 0u))), _GLF_IDENTITY(4, 1 * (4)), 64, 4);
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        return;
       for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) | (0)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), false || (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))), true, true, true)))))); _injected_loop_counter ++)
        {
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y))))))
              break;
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               return;
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          break;
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            continue;
           for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                continue;
               return;
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               return;
              }
            }
          }
         else
          {
          }
        }
       for(int _injected_loop_counter = int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (false ? _GLF_FUZZED(-4.8) : _GLF_ONE(1.0, injectionSwitch.y)))) / _GLF_ONE(1.0, injectionSwitch.y))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          return;
        }
       atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))));
  }
 while(_GLF_WRAPPED_LOOP(false));
}
