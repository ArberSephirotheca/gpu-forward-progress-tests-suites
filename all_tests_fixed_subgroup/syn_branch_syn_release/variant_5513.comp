#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec4 GLF_merged3_0_2_55_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizesubgroup_idsubgroup_size;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 uvec3 GLF_merged3_0_1_17_1_1_13_2_1_12subgroup_local_idsubgroup_sizeworkgroup_id;
 uvec4 GLF_merged4_0_1_16_1_1_11_2_1_12_3_1_14next_virtual_gidvirtual_gidworkgroup_idworkgroup_size;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))), true && (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), false || (false))))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uvec3 GLF_merged3_0_1_11_1_1_12_2_1_14virtual_gidworkgroup_idworkgroup_size;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uvec2 GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false)))))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 GLF_merged3_0_2_55_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizesubgroup_idsubgroup_size.xy = GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size;
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 GLF_merged3_0_2_55_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizesubgroup_idsubgroup_size.z = subgroup_id;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         barrier();
        }
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
uint subgroup_size = 16;
 GLF_merged3_0_2_55_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizesubgroup_idsubgroup_size.w = subgroup_size;
 GLF_merged3_0_1_17_1_1_13_2_1_12subgroup_local_idsubgroup_sizeworkgroup_id.y = GLF_merged3_0_2_55_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizesubgroup_idsubgroup_size.w;
 do
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))));
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> 0) != ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))), (_injected_loop_counter != ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))) || false)); _injected_loop_counter ++)
      {
       barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false)))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat4x2(injectionSwitch.x, 0.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 1.0, 0.0, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0))), mat2(1.0) * (mat4x2(injectionSwitch.x, 0.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 1.0, 0.0, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0))))))) > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), min(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch)))).x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)).y)) || (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false), bvec3(bvec4(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false), true)))))))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       barrier();
      }
    }
  }
 GLF_merged3_0_2_55_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizesubgroup_idsubgroup_size.xy.y = GLF_merged3_0_1_17_1_1_13_2_1_12subgroup_local_idsubgroup_sizeworkgroup_id.y;
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   GLF_merged3_0_1_17_1_1_13_2_1_12subgroup_local_idsubgroup_sizeworkgroup_id.x = subgroup_local_id;
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   GLF_merged3_0_2_55_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizesubgroup_idsubgroup_size.xy.x = GLF_merged3_0_1_17_1_1_13_2_1_12subgroup_local_idsubgroup_sizeworkgroup_id.x;
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 GLF_merged4_0_1_16_1_1_11_2_1_12_3_1_14next_virtual_gidvirtual_gidworkgroup_idworkgroup_size.w = workgroup_size;
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch)).x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     GLF_merged3_0_1_11_1_1_12_2_1_14virtual_gidworkgroup_idworkgroup_size.z = GLF_merged4_0_1_16_1_1_11_2_1_12_3_1_14next_virtual_gidvirtual_gidworkgroup_idworkgroup_size.w;
    }
   else
    {
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter)), _GLF_IDENTITY(1, _GLF_IDENTITY(min(1, 1), _GLF_IDENTITY(int(ivec2(min(1, 1), 1)), min(int(ivec2(min(1, 1), 1)), int(ivec2(min(1, 1), 1)))))), 1, 1), (ivec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter)))), clamp(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter)))), _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter)))), (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter)))), (true ? _GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter)))) : _GLF_FUZZED(_injected_loop_counter)))) - 0), _GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter)))))), (_injected_loop_counter) | (_injected_loop_counter)), 1, 1, 1)) / ivec4(1, 1, 1, 1)))) != 1), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter)), _GLF_IDENTITY(1, min(1, 1)), 1, _GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, (1) | (1))))), (ivec4(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | _GLF_IDENTITY((_injected_loop_counter), ~ (~ ((_injected_loop_counter))))), 1, 1, 1)) / ivec4(1, 1, 1, 1)))) != 1), ! (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter)), _GLF_IDENTITY(1, min(1, 1)), _GLF_IDENTITY(1, (1) * 1), 1), (ivec4(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter)))) | (_injected_loop_counter)), 1, 1, 1)) / ivec4(1, 1, 1, 1)))) != 1))))))); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
          }
         else
          {
          }
         barrier();
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (1) - 0)); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(false))
                barrier();
              }
            }
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec2(! (false), true)))))))
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   barrier();
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = ((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), _GLF_IDENTITY((int(8)), _GLF_IDENTITY(int(int((int(8)))), min(int(int((int(8)))), int(int((int(8))))))) | 0)), (_GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (int(8)) | 0))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (int(8)) | 0)), (_GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (int(8)) | 0))) / 1)))) | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & _GLF_IDENTITY(-198, (_GLF_IDENTITY(-198, 0 | (-198))) - 0))); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x4(injectionSwitch, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0)), max(vec2(mat3x4(injectionSwitch, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0)), vec2(mat3x4(injectionSwitch, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0))))).x > injectionSwitch.y))))
          barrier();
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         for(int _injected_loop_counter = _GLF_IDENTITY(1, (false ? _GLF_FUZZED(abs(_injected_loop_counter)) : 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
          barrier();
         barrier();
        }
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   barrier();
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     barrier();
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   do
    {
     GLF_merged3_0_1_17_1_1_13_2_1_12subgroup_local_idsubgroup_sizeworkgroup_id.z = workgroup_id;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        barrier();
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (0) ^ 0)); _injected_loop_counter --)
          {
           for(int _injected_loop_counter = _GLF_IDENTITY(((0 >> _GLF_IDENTITY(int(1), int(1))) << _GLF_IDENTITY(int(4), int(4))), clamp(((0 >> _GLF_IDENTITY(int(1), int(1))) << _GLF_IDENTITY(int(4), int(4))), ((0 >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(3), int(3)), (0 >> _GLF_IDENTITY(int(3), int(3))) | (0 << _GLF_IDENTITY(int(5), int(5))))) ^ (int(1))))) << _GLF_IDENTITY(int(4), int(4))), ((_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) << 0)) / 1), 0)) >> _GLF_IDENTITY(int(1), int(1))) << _GLF_IDENTITY(int(4), int(4))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             GLF_merged4_0_1_16_1_1_11_2_1_12_3_1_14next_virtual_gidvirtual_gidworkgroup_idworkgroup_size.z = GLF_merged3_0_1_17_1_1_13_2_1_12subgroup_local_idsubgroup_sizeworkgroup_id.z;
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
              barrier();
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), true && (false))));
    }
  }
 GLF_merged3_0_1_11_1_1_12_2_1_14virtual_gidworkgroup_idworkgroup_size.y = GLF_merged4_0_1_16_1_1_11_2_1_12_3_1_14next_virtual_gidvirtual_gidworkgroup_idworkgroup_size.z;
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         barrier();
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), false, true, false)))));
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_base = GLF_merged3_0_1_11_1_1_12_2_1_14virtual_gidworkgroup_idworkgroup_size.z * GLF_merged3_0_1_11_1_1_12_2_1_14virtual_gidworkgroup_idworkgroup_size.y;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
             barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) >> 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
          }
         else
          {
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + GLF_merged3_0_2_55_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizesubgroup_idsubgroup_size.z * GLF_merged3_0_2_55_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizesubgroup_idsubgroup_size.xy.y, (_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, _GLF_IDENTITY(workgroup_base, 0u + (workgroup_base)), _GLF_IDENTITY(workgroup_base, (workgroup_base) << 0u))) + GLF_merged3_0_2_55_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizesubgroup_idsubgroup_size.z * GLF_merged3_0_2_55_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizesubgroup_idsubgroup_size.xy.y) | (_GLF_IDENTITY(workgroup_base + GLF_merged3_0_2_55_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizesubgroup_idsubgroup_size.z * GLF_merged3_0_2_55_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizesubgroup_idsubgroup_size.xy.y, _GLF_IDENTITY(min(_GLF_IDENTITY(workgroup_base + GLF_merged3_0_2_55_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizesubgroup_idsubgroup_size.z * GLF_merged3_0_2_55_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizesubgroup_idsubgroup_size.xy.y, (workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_2_55_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizesubgroup_idsubgroup_size, uvec4(1u, 1u, 1u, 1u) * (_GLF_IDENTITY(GLF_merged3_0_2_55_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizesubgroup_idsubgroup_size, uvec4(0u, 0u, 0u, 0u) ^ (GLF_merged3_0_2_55_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizesubgroup_idsubgroup_size)))), (GLF_merged3_0_2_55_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizesubgroup_idsubgroup_size) | (GLF_merged3_0_2_55_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizesubgroup_idsubgroup_size)).z * GLF_merged3_0_2_55_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizesubgroup_idsubgroup_size.xy.y) | (workgroup_base + GLF_merged3_0_2_55_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizesubgroup_idsubgroup_size.z * GLF_merged3_0_2_55_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizesubgroup_idsubgroup_size.xy.y)), workgroup_base + GLF_merged3_0_2_55_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizesubgroup_idsubgroup_size.z * GLF_merged3_0_2_55_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizesubgroup_idsubgroup_size.xy.y), clamp(min(_GLF_IDENTITY(workgroup_base + GLF_merged3_0_2_55_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizesubgroup_idsubgroup_size.z * GLF_merged3_0_2_55_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizesubgroup_idsubgroup_size.xy.y, (workgroup_base + _GLF_IDENTITY(GLF_merged3_0_2_55_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizesubgroup_idsubgroup_size, (GLF_merged3_0_2_55_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizesubgroup_idsubgroup_size) | (GLF_merged3_0_2_55_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizesubgroup_idsubgroup_size)).z * GLF_merged3_0_2_55_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizesubgroup_idsubgroup_size.xy.y) | (workgroup_base + GLF_merged3_0_2_55_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizesubgroup_idsubgroup_size.z * GLF_merged3_0_2_55_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizesubgroup_idsubgroup_size.xy.y)), workgroup_base + GLF_merged3_0_2_55_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizesubgroup_idsubgroup_size.z * GLF_merged3_0_2_55_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizesubgroup_idsubgroup_size.xy.y), min(_GLF_IDENTITY(workgroup_base + GLF_merged3_0_2_55_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizesubgroup_idsubgroup_size.z * GLF_merged3_0_2_55_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizesubgroup_idsubgroup_size.xy.y, (workgroup_base + _GLF_IDENTITY(GLF_merged3_0_2_55_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizesubgroup_idsubgroup_size, (GLF_merged3_0_2_55_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizesubgroup_idsubgroup_size) | (GLF_merged3_0_2_55_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizesubgroup_idsubgroup_size)).z * GLF_merged3_0_2_55_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizesubgroup_idsubgroup_size.xy.y) | (workgroup_base + GLF_merged3_0_2_55_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizesubgroup_idsubgroup_size.z * _GLF_IDENTITY(GLF_merged3_0_2_55_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizesubgroup_idsubgroup_size, (uvec4(0u, 0u, 0u, 0u) << _GLF_IDENTITY(uvec4(6u), uvec4(6u))) + (GLF_merged3_0_2_55_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizesubgroup_idsubgroup_size)).xy.y)), workgroup_base + GLF_merged3_0_2_55_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizesubgroup_idsubgroup_size.z * GLF_merged3_0_2_55_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizesubgroup_idsubgroup_size.xy.y), min(_GLF_IDENTITY(workgroup_base + GLF_merged3_0_2_55_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizesubgroup_idsubgroup_size.z * GLF_merged3_0_2_55_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizesubgroup_idsubgroup_size.xy.y, (workgroup_base + _GLF_IDENTITY(GLF_merged3_0_2_55_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizesubgroup_idsubgroup_size, (GLF_merged3_0_2_55_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizesubgroup_idsubgroup_size) | (GLF_merged3_0_2_55_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizesubgroup_idsubgroup_size)).z * GLF_merged3_0_2_55_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizesubgroup_idsubgroup_size.xy.y) | (workgroup_base + GLF_merged3_0_2_55_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizesubgroup_idsubgroup_size.z * GLF_merged3_0_2_55_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizesubgroup_idsubgroup_size.xy.y)), workgroup_base + GLF_merged3_0_2_55_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizesubgroup_idsubgroup_size.z * GLF_merged3_0_2_55_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizesubgroup_idsubgroup_size.xy.y)))))) + GLF_merged3_0_2_55_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizesubgroup_idsubgroup_size.xy.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 GLF_merged4_0_1_16_1_1_11_2_1_12_3_1_14next_virtual_gidvirtual_gidworkgroup_idworkgroup_size.y = virtual_gid;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
    barrier();
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   GLF_merged3_0_1_11_1_1_12_2_1_14virtual_gidworkgroup_idworkgroup_size.x = GLF_merged4_0_1_16_1_1_11_2_1_12_3_1_14next_virtual_gidvirtual_gidworkgroup_idworkgroup_size.y;
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-0.9), _GLF_FUZZED(-0.4)), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], sqrt(1.0) * ((injectionSwitch)[1]))), bvec2(true, _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, (true) || false))))))).x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), ! (! (_GLF_IDENTITY(false, true && (false)))))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        {
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), ~ (~ (int(8)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))
        {
        }
       else
        {
         barrier();
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), clamp(int(_GLF_IDENTITY(5, min(5, 5))), int(5), int(5))))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
        barrier();
       barrier();
      }
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 0.0))).x))) - (0 >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(_GLF_IDENTITY(1, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(1, 1, (0 & int(true)), (0 << _GLF_IDENTITY(int(2), int(2)))), (ivec4(1, 1, (0 & int(true)), (0 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(_GLF_IDENTITY(2, ~ (~ (2)))), ~ (_GLF_IDENTITY(~ (int(2)), clamp(~ (int(2)), ~ (int(2)), ~ (int(2)))))))))) / ivec4(1, 1, 1, 1))), max(_GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(1, 1, (0 & _GLF_IDENTITY(_GLF_IDENTITY(int(true), min(int(true), int(true))), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(int(true), min(int(true), int(true)))))), (0 << _GLF_IDENTITY(int(2), int(2)))), (ivec4(1, 1, (0 & int(true)), (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), (_GLF_IDENTITY(int(2), int(2))) ^ 0))))))) / ivec4(_GLF_IDENTITY(1, int(ivec4(1, (1 ^ 1), 0, (0 >> _GLF_IDENTITY(int(3), int(3)))))), _GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, min(1, 1)), 1)), (_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, min(1, 1)), 1))) / (1 & 1)), 1, 1))), clamp(int(_GLF_IDENTITY(ivec4(1, 1, (0 & int(true)), (0 << _GLF_IDENTITY(int(2), int(2)))), (ivec4(1, 1, (_GLF_IDENTITY(0 & int(true), (0 & int(true)) - 0)), (0 << _GLF_IDENTITY(int(2), int(2))))) / ivec4(1, 1, 1, 1))), int(_GLF_IDENTITY(ivec4(1, 1, (0 & int(true)), (0 << _GLF_IDENTITY(int(2), int(2)))), (ivec4(1, _GLF_IDENTITY(1, min(1, 1)), (_GLF_IDENTITY(0, (0) >> 0) & int(true)), (0 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(ivec2(int(2), 1)), _GLF_IDENTITY((int(ivec2(int(2), 1))), (_GLF_IDENTITY((int(ivec2(int(2), 1))), (0 >> _GLF_IDENTITY(int(5), int(5))) | ((int(ivec2(int(2), 1)))))) << 0) >> 0)))))) / ivec4(1, 1, 1, 1))), int(_GLF_IDENTITY(ivec4(1, 1, (0 & int(true)), _GLF_IDENTITY(_GLF_IDENTITY((0 << _GLF_IDENTITY(int(2), int(2))), ((0 << _GLF_IDENTITY(int(2), int(2)))) ^ 0), 0 ^ ((0 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) * 1)))))), (ivec4(1, _GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(1, 1))) - int(_GLF_ZERO(0.0, injectionSwitch.x))), (0 & int(true)), (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(2, ~ (~ (_GLF_IDENTITY(2, min(2, 2)))))), int(2))))) / _GLF_IDENTITY(ivec4(1, 1, 1, 1), (true ? _GLF_IDENTITY(ivec4(1, 1, 1, 1), clamp(ivec4(1, 1, 1, 1), ivec4(1, 1, 1, 1), ivec4(1, 1, 1, 1))) : _GLF_FUZZED(ivec4(10042, -47672, -80369, 4612)))))))), int(_GLF_IDENTITY(ivec4(1, 1, (0 & int(true)), (0 << _GLF_IDENTITY(int(2), int(2)))), (ivec4(1, 1, (0 & int(true)), (0 << _GLF_IDENTITY(int(2), int(2))))) / ivec4(1, 1, 1, 1))))))), int(ivec2(int(1), 1))))))); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         barrier();
        }
      }
    }
   else
    {
    }
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint next_virtual_gid = workgroup_base + GLF_merged3_0_2_55_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizesubgroup_idsubgroup_size.z * GLF_merged3_0_2_55_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizesubgroup_idsubgroup_size.xy.y + ((_GLF_IDENTITY(GLF_merged3_0_2_55_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizesubgroup_idsubgroup_size, ~ (_GLF_IDENTITY(~ (GLF_merged3_0_2_55_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizesubgroup_idsubgroup_size), uvec4(0u, 0u, 0u, _GLF_IDENTITY(0u, 0u + (0u))) | (~ (GLF_merged3_0_2_55_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizesubgroup_idsubgroup_size))))).xy.x + 1) % GLF_merged3_0_2_55_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizesubgroup_idsubgroup_size.xy.y);
 GLF_merged4_0_1_16_1_1_11_2_1_12_3_1_14next_virtual_gidvirtual_gidworkgroup_idworkgroup_size.x = next_virtual_gid;
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
  barrier();
 buf[GLF_merged3_0_1_11_1_1_12_2_1_14virtual_gidworkgroup_idworkgroup_size.x] = 1;
 do
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_IDENTITY(GLF_merged3_0_2_55_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizesubgroup_idsubgroup_size.xy, (_GLF_IDENTITY(GLF_merged3_0_2_55_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizesubgroup_idsubgroup_size.xy, max(GLF_merged3_0_2_55_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizesubgroup_idsubgroup_size.xy, _GLF_IDENTITY(GLF_merged3_0_2_55_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizesubgroup_idsubgroup_size.xy, clamp(GLF_merged3_0_2_55_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizesubgroup_idsubgroup_size.xy, GLF_merged3_0_2_55_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizesubgroup_idsubgroup_size.xy, GLF_merged3_0_2_55_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizesubgroup_idsubgroup_size.xy))))) / ((uvec2(1u, 1u) << _GLF_IDENTITY(uvec2(6u), uvec2(_GLF_IDENTITY(6u, (_GLF_IDENTITY(6u, (false ? _GLF_FUZZED(workgroup_size) : 6u))) / 1u)))) >> _GLF_IDENTITY(uvec2(6u), _GLF_IDENTITY(uvec2(6u), min(uvec2(6u), uvec2(6u)))))).x + 1 < GLF_merged3_0_2_55_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizesubgroup_idsubgroup_size.xy.y)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(! _GLF_IDENTITY((! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-5.5)), float(injectionSwitch.y), bool(true))))))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-5.5)), float(injectionSwitch.y), bool(true))))))), true && ((! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-5.5)), float(injectionSwitch.y), bool(true))))))))), true, true, true)), ! (! (bool(bvec4(_GLF_IDENTITY((! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-5.5)), float(injectionSwitch.y), bool(true))))))), true && ((! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-5.5)), float(injectionSwitch.y), bool(true))))))))), true, true, true)))))), false || (! _GLF_IDENTITY((! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-5.5)), float(injectionSwitch.y), bool(true))))))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-5.5)), float(injectionSwitch.y), bool(true))))))), true && ((! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-5.5)), float(injectionSwitch.y), bool(true))))))))), true, true, true)), ! (! (bool(bvec4(_GLF_IDENTITY((! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-5.5)), float(injectionSwitch.y), bool(true))))))), true && ((! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-5.5)), float(injectionSwitch.y), bool(true))))))))), true, true, true)))))))))), ! (! ((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(! _GLF_IDENTITY((! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-5.5)), float(injectionSwitch.y), bool(true))))))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-5.5)), float(injectionSwitch.y), bool(true))))))), true && ((! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-5.5)), float(injectionSwitch.y), bool(true))))))))), true, true, true)), ! (! (bool(bvec4(_GLF_IDENTITY((! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-5.5)), float(injectionSwitch.y), bool(true))))))), true && ((! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-5.5)), float(injectionSwitch.y), bool(true))))))))), true, true, true)))))), false || (! _GLF_IDENTITY((! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-5.5)), float(injectionSwitch.y), bool(true))))))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-5.5)), float(injectionSwitch.y), bool(true))))))), true && ((! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-5.5)), float(injectionSwitch.y), bool(true))))))))), true, true, true)), ! (! (bool(bvec4(_GLF_IDENTITY((! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-5.5)), float(injectionSwitch.y), bool(true))))))), true && ((! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-5.5)), float(injectionSwitch.y), bool(true))))))))), true, true, true))))))))))))) || false))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   int i = 0;
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_DEAD(false)), bool(bvec3((_GLF_DEAD(false)), false, false))) || false), true && (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true)))))
      barrier();
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           do
            {
             barrier();
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) & (-43 * 92705)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 barrier();
                }
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
          }
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       else
        {
        }
      }
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   atomicStore(buf[GLF_merged4_0_1_16_1_1_11_2_1_12_3_1_14next_virtual_gidvirtual_gidworkgroup_idworkgroup_size.x], uint(2), 4, 64, _GLF_IDENTITY(4, 0 | (4)));
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        barrier();
      }
     else
      {
       atomicStore(buf[_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_11_2_1_12_3_1_14next_virtual_gidvirtual_gidworkgroup_idworkgroup_size.x, (true ? _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_11_2_1_12_3_1_14next_virtual_gidvirtual_gidworkgroup_idworkgroup_size.x, ~ (~ _GLF_IDENTITY((GLF_merged4_0_1_16_1_1_11_2_1_12_3_1_14next_virtual_gidvirtual_gidworkgroup_idworkgroup_size.x), max(_GLF_IDENTITY((_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_11_2_1_12_3_1_14next_virtual_gidvirtual_gidworkgroup_idworkgroup_size, (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_11_2_1_12_3_1_14next_virtual_gidvirtual_gidworkgroup_idworkgroup_size, uvec4(GLF_merged4_0_1_16_1_1_11_2_1_12_3_1_14next_virtual_gidvirtual_gidworkgroup_idworkgroup_size[0], GLF_merged4_0_1_16_1_1_11_2_1_12_3_1_14next_virtual_gidvirtual_gidworkgroup_idworkgroup_size[1], GLF_merged4_0_1_16_1_1_11_2_1_12_3_1_14next_virtual_gidvirtual_gidworkgroup_idworkgroup_size[2], GLF_merged4_0_1_16_1_1_11_2_1_12_3_1_14next_virtual_gidvirtual_gidworkgroup_idworkgroup_size[3]))) - uvec4(0u, 0u, 0u, 0u)).x), max((GLF_merged4_0_1_16_1_1_11_2_1_12_3_1_14next_virtual_gidvirtual_gidworkgroup_idworkgroup_size.x), _GLF_IDENTITY((GLF_merged4_0_1_16_1_1_11_2_1_12_3_1_14next_virtual_gidvirtual_gidworkgroup_idworkgroup_size.x), ((GLF_merged4_0_1_16_1_1_11_2_1_12_3_1_14next_virtual_gidvirtual_gidworkgroup_idworkgroup_size.x)) ^ 0u))), (GLF_merged4_0_1_16_1_1_11_2_1_12_3_1_14next_virtual_gidvirtual_gidworkgroup_idworkgroup_size.x))))) : _GLF_FUZZED(virtual_gid)))], _GLF_IDENTITY(uint(2), (uint(2)) >> (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(2u, _GLF_IDENTITY((false ? _GLF_FUZZED(GLF_merged3_0_2_55_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizesubgroup_idsubgroup_size.z) : 2u), clamp(_GLF_IDENTITY((false ? _GLF_FUZZED(GLF_merged3_0_2_55_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizesubgroup_idsubgroup_size.z) : 2u), max(_GLF_IDENTITY((false ? _GLF_FUZZED(GLF_merged3_0_2_55_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizesubgroup_idsubgroup_size.z) : 2u), (_GLF_IDENTITY((false ? _GLF_FUZZED(GLF_merged3_0_2_55_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizesubgroup_idsubgroup_size.z) : 2u), 0u | (_GLF_IDENTITY(_GLF_IDENTITY((false ? _GLF_FUZZED(GLF_merged3_0_2_55_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizesubgroup_idsubgroup_size.z) : 2u), ((false ? _GLF_FUZZED(GLF_merged3_0_2_55_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizesubgroup_idsubgroup_size.z) : 2u)) ^ 0u), max((false ? _GLF_FUZZED(GLF_merged3_0_2_55_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizesubgroup_idsubgroup_size.z) : 2u), (false ? _GLF_FUZZED(GLF_merged3_0_2_55_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizesubgroup_idsubgroup_size.z) : 2u)))))) - 0u), _GLF_IDENTITY((_GLF_IDENTITY(false ? _GLF_FUZZED(GLF_merged3_0_2_55_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizesubgroup_idsubgroup_size.z) : 2u, _GLF_IDENTITY((_GLF_IDENTITY(false ? _GLF_FUZZED(GLF_merged3_0_2_55_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizesubgroup_idsubgroup_size.z) : 2u, (false ? _GLF_FUZZED(_GLF_IDENTITY(148345u, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(148345u, (true ? 148345u : _GLF_FUZZED(subgroup_local_id))) : _GLF_FUZZED(workgroup_size)))) : false ? _GLF_FUZZED(GLF_merged3_0_2_55_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizesubgroup_idsubgroup_size.z) : 2u))), ((_GLF_IDENTITY(_GLF_IDENTITY(false ? _GLF_FUZZED(GLF_merged3_0_2_55_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizesubgroup_idsubgroup_size.z) : 2u, (false ? _GLF_FUZZED(148345u) : false ? _GLF_FUZZED(GLF_merged3_0_2_55_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizesubgroup_idsubgroup_size.z) : 2u)), (true ? _GLF_IDENTITY(false ? _GLF_FUZZED(GLF_merged3_0_2_55_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizesubgroup_idsubgroup_size.z) : 2u, (false ? _GLF_FUZZED(148345u) : _GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(GLF_merged3_0_2_55_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizesubgroup_idsubgroup_size.z) : 2u)) : _GLF_FUZZED(atomicAdd(subgroup_local_id, subgroup_local_id)))))) | 0u) | (false ? _GLF_FUZZED(GLF_merged3_0_2_55_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizesubgroup_idsubgroup_size.z) : 2u))), ~ _GLF_IDENTITY((~ ((false ? _GLF_FUZZED(GLF_merged3_0_2_55_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizesubgroup_idsubgroup_size.z) : 2u))), max((~ ((false ? _GLF_FUZZED(GLF_merged3_0_2_55_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizesubgroup_idsubgroup_size.z) : 2u))), (~ ((false ? _GLF_FUZZED(GLF_merged3_0_2_55_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizesubgroup_idsubgroup_size.z) : 2u)))))))), _GLF_IDENTITY((false ? _GLF_FUZZED(GLF_merged3_0_2_55_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizesubgroup_idsubgroup_size.z) : 2u), ((false ? _GLF_FUZZED(GLF_merged3_0_2_55_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizesubgroup_idsubgroup_size.z) : 2u)) | (_GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, true, true)), (bool(bvec4(false, false, true, true))) || false)) ? _GLF_FUZZED(GLF_merged3_0_2_55_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizesubgroup_idsubgroup_size.z) : 2u), ~ (~ ((_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, true, true)), (bool(bvec4(false, false, true, true))) || false)) ? _GLF_FUZZED(GLF_merged3_0_2_55_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizesubgroup_idsubgroup_size.z) : 2u)))))), (false ? _GLF_FUZZED(_GLF_IDENTITY(GLF_merged3_0_2_55_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizesubgroup_idsubgroup_size.z, clamp(GLF_merged3_0_2_55_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizesubgroup_idsubgroup_size.z, _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_2_55_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizesubgroup_idsubgroup_size.z, (GLF_merged3_0_2_55_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizesubgroup_idsubgroup_size.z) + uint(_GLF_ZERO(0.0, injectionSwitch.x))), clamp(_GLF_IDENTITY(GLF_merged3_0_2_55_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizesubgroup_idsubgroup_size.z, (GLF_merged3_0_2_55_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizesubgroup_idsubgroup_size.z) + uint(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(GLF_merged3_0_2_55_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizesubgroup_idsubgroup_size.z, (GLF_merged3_0_2_55_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizesubgroup_idsubgroup_size.z) + uint(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(GLF_merged3_0_2_55_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizesubgroup_idsubgroup_size.z, (GLF_merged3_0_2_55_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizesubgroup_idsubgroup_size.z) + uint(_GLF_ZERO(0.0, injectionSwitch.x))))), GLF_merged3_0_2_55_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizesubgroup_idsubgroup_size.z))) : 2u))))), uint(2u)), (_GLF_IDENTITY(uint(_GLF_IDENTITY(2u, (false ? _GLF_FUZZED(GLF_merged3_0_2_55_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizesubgroup_idsubgroup_size.z) : 2u))), uint(2u))) | uint(_GLF_ZERO(0.0, injectionSwitch.x))))), 4, 64, 4);
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
}
