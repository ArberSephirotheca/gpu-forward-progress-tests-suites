#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_6 {
 mat4 _f0;
 vec4 _f1;
 uvec2 _f2;
 bvec4 _f3;
 mat2 _f4;
 vec2 _f5;
} ;

struct _GLF_struct_5 {
 mat3x2 _f0;
 mat3 _f1;
 mat2x4 _f2;
 float _f3;
 uvec4 _f4;
} ;

struct _GLF_struct_7 {
 uvec3 _f0;
 uint workgroup_id;
 _GLF_struct_5 _f1;
 _GLF_struct_6 _f2;
} ;

struct _GLF_struct_3 {
 vec2 _f0;
 uvec4 _f1;
 uvec4 _f2;
 ivec4 _f3;
 mat2 _f4;
 mat4x3 _f5;
 bvec2 _f6;
} ;

struct _GLF_struct_4 {
 _GLF_struct_3 _f0;
 mat4 _f1;
 uvec2 _f2;
} ;

struct _GLF_struct_1 {
 mat4x2 _f0;
 vec2 _f1;
 uvec2 _f2;
 vec3 _f3;
} ;

struct _GLF_struct_0 {
 mat4 _f0;
 mat3 _f1;
 mat4 _f2;
 float _f3;
 mat2x3 _f4;
 vec4 _f5;
} ;

struct _GLF_struct_2 {
 uvec2 _f0;
 _GLF_struct_0 _f1;
 vec3 _f2;
 mat2 _f3;
 uvec3 _f4;
 _GLF_struct_1 _f5;
} ;

struct _GLF_struct_8 {
 _GLF_struct_2 _f0;
 _GLF_struct_4 _f1;
 int _f2;
 _GLF_struct_7 _f3;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec2 GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uvec4 GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_14next_virtual_gidnum_workgroupsubgroup_idworkgroup_base;
 uvec2 GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_size;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (false), bool(bvec4(! (false), true, true, false)))), ! (! (! (_GLF_IDENTITY(! (false), bool(bvec4(! (false), true, true, false))))))))))), (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))) || false)))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec4(_GLF_WRAPPED_IF_TRUE(true), false, true, false))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
       return;
       if(_GLF_DEAD(false))
        return;
       do
        {
         if(_GLF_DEAD(false))
          return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false)))))));
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
      }
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false)), ! (! (bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))), false))))))))
      return;
    }
   else
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
        {
         return;
        }
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bool(! ((injectionSwitch.x > injectionSwitch.y)))), bool(bvec3(bool(bool(! ((injectionSwitch.x > injectionSwitch.y)))), true, true)))))))))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, 0.0)), exp(vec2(0.0, 0.0)) * (_GLF_IDENTITY(vec2(mat2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, 0.0)), mix(vec2(_GLF_FUZZED(85.84), _GLF_FUZZED(4.5)), vec2(_GLF_IDENTITY((vec2(mat2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, 0.0))), clamp((vec2(mat2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, 0.0))), (vec2(mat2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, 0.0))), _GLF_IDENTITY((vec2(mat2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, 0.0))), ((vec2(mat2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, 0.0)))) * sqrt(vec2(1.0, 1.0)))))[0], _GLF_IDENTITY((vec2(mat2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, 0.0))), max((vec2(mat2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, 0.0))), (vec2(mat2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, 0.0)))))[1]), bvec2(true, true)))))).x > injectionSwitch.y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, 0.0)), exp(vec2(0.0, 0.0)) * (_GLF_IDENTITY(vec2(mat2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, 0.0)), mix(vec2(_GLF_FUZZED(85.84), _GLF_FUZZED(4.5)), vec2(_GLF_IDENTITY((vec2(mat2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, 0.0))), clamp((vec2(mat2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, 0.0))), (vec2(mat2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, 0.0))), _GLF_IDENTITY((vec2(mat2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, 0.0))), ((vec2(mat2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, 0.0)))) * sqrt(vec2(1.0, 1.0)))))[0], _GLF_IDENTITY((vec2(mat2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, 0.0))), max((vec2(mat2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, 0.0))), (vec2(mat2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, 0.0)))))[1]), bvec2(true, true)))))).x > injectionSwitch.y), bool(bvec4((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, 0.0)), exp(vec2(0.0, 0.0)) * (_GLF_IDENTITY(vec2(mat2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, 0.0)), mix(vec2(_GLF_FUZZED(85.84), _GLF_FUZZED(4.5)), vec2(_GLF_IDENTITY((vec2(mat2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, 0.0))), clamp((vec2(mat2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, 0.0))), (vec2(mat2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, 0.0))), _GLF_IDENTITY((vec2(mat2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, 0.0))), ((vec2(mat2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, 0.0)))) * sqrt(vec2(1.0, 1.0)))))[0], _GLF_IDENTITY((vec2(mat2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, 0.0))), max((vec2(mat2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, 0.0))), (vec2(mat2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, 0.0)))))[1]), bvec2(true, true)))))).x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, 0.0)), exp(vec2(0.0, 0.0)) * (_GLF_IDENTITY(vec2(mat2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, 0.0)), mix(vec2(_GLF_FUZZED(85.84), _GLF_FUZZED(4.5)), vec2(_GLF_IDENTITY((vec2(mat2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, 0.0))), clamp((vec2(mat2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, 0.0))), (vec2(mat2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, 0.0))), _GLF_IDENTITY((vec2(mat2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, 0.0))), ((vec2(mat2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, 0.0)))) * sqrt(vec2(1.0, 1.0)))))[0], _GLF_IDENTITY((vec2(mat2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, 0.0))), max((vec2(mat2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, 0.0))), (vec2(mat2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, 0.0)))))[1]), bvec2(true, true)))))).x > injectionSwitch.y), bool(bvec4((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, 0.0)), exp(vec2(0.0, 0.0)) * (_GLF_IDENTITY(vec2(mat2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, 0.0)), mix(vec2(_GLF_FUZZED(85.84), _GLF_FUZZED(4.5)), vec2(_GLF_IDENTITY((vec2(mat2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, 0.0))), clamp((vec2(mat2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, 0.0))), (vec2(mat2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, 0.0))), _GLF_IDENTITY((vec2(mat2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, 0.0))), ((vec2(mat2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, 0.0)))) * sqrt(vec2(1.0, 1.0)))))[0], _GLF_IDENTITY((vec2(mat2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, 0.0))), max((vec2(mat2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, 0.0))), (vec2(mat2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, 0.0)))))[1]), bvec2(true, true)))))).x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))), ! (! (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, 0.0)), exp(vec2(0.0, 0.0)) * (_GLF_IDENTITY(vec2(mat2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, 0.0)), mix(vec2(_GLF_FUZZED(85.84), _GLF_FUZZED(4.5)), vec2(_GLF_IDENTITY((vec2(mat2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, 0.0))), clamp((vec2(mat2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, 0.0))), (vec2(mat2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, 0.0))), _GLF_IDENTITY((vec2(mat2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, 0.0))), ((vec2(mat2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, 0.0)))) * sqrt(vec2(1.0, 1.0)))))[0], _GLF_IDENTITY((vec2(mat2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, 0.0))), max((vec2(mat2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, 0.0))), (vec2(mat2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, 0.0)))))[1]), bvec2(true, true)))))).x > injectionSwitch.y), bool(bvec4((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, 0.0)), exp(vec2(0.0, 0.0)) * (_GLF_IDENTITY(vec2(mat2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, 0.0)), mix(vec2(_GLF_FUZZED(85.84), _GLF_FUZZED(4.5)), vec2(_GLF_IDENTITY((vec2(mat2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, 0.0))), clamp((vec2(mat2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, 0.0))), (vec2(mat2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, 0.0))), _GLF_IDENTITY((vec2(mat2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, 0.0))), ((vec2(mat2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, 0.0)))) * sqrt(vec2(1.0, 1.0)))))[0], _GLF_IDENTITY((vec2(mat2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, 0.0))), max((vec2(mat2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, 0.0))), (vec2(mat2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, 0.0)))))[1]), bvec2(true, true)))))).x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))))))), ! (! (bool(_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, 0.0)), exp(vec2(0.0, 0.0)) * (_GLF_IDENTITY(vec2(mat2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, 0.0)), mix(vec2(_GLF_FUZZED(85.84), _GLF_FUZZED(4.5)), vec2(_GLF_IDENTITY((vec2(mat2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, 0.0))), clamp((vec2(mat2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, 0.0))), (vec2(mat2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, 0.0))), _GLF_IDENTITY((vec2(mat2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, 0.0))), ((vec2(mat2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, 0.0)))) * sqrt(vec2(1.0, 1.0)))))[0], _GLF_IDENTITY((vec2(mat2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, 0.0))), max((vec2(mat2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, 0.0))), (vec2(mat2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, 0.0)))))[1]), bvec2(true, true)))))).x > injectionSwitch.y), bool(bvec4((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, 0.0)), exp(vec2(0.0, 0.0)) * (_GLF_IDENTITY(vec2(mat2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, 0.0)), mix(vec2(_GLF_FUZZED(85.84), _GLF_FUZZED(4.5)), vec2(_GLF_IDENTITY((vec2(mat2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, 0.0))), clamp((vec2(mat2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, 0.0))), (vec2(mat2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, 0.0))), _GLF_IDENTITY((vec2(mat2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, 0.0))), ((vec2(mat2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, 0.0)))) * sqrt(vec2(1.0, 1.0)))))[0], _GLF_IDENTITY((vec2(mat2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, 0.0))), max((vec2(mat2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, 0.0))), (vec2(mat2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, 0.0)))))[1]), bvec2(true, true)))))).x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))), ! (! (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, 0.0)), exp(vec2(0.0, 0.0)) * (_GLF_IDENTITY(vec2(mat2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, 0.0)), mix(vec2(_GLF_FUZZED(85.84), _GLF_FUZZED(4.5)), vec2(_GLF_IDENTITY((vec2(mat2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, 0.0))), clamp((vec2(mat2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, 0.0))), (vec2(mat2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, 0.0))), _GLF_IDENTITY((vec2(mat2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, 0.0))), ((vec2(mat2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, 0.0)))) * sqrt(vec2(1.0, 1.0)))))[0], _GLF_IDENTITY((vec2(mat2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, 0.0))), max((vec2(mat2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, 0.0))), (vec2(mat2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, 0.0)))))[1]), bvec2(true, true)))))).x > injectionSwitch.y), bool(bvec4((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, 0.0)), exp(vec2(0.0, 0.0)) * (_GLF_IDENTITY(vec2(mat2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, 0.0)), mix(vec2(_GLF_FUZZED(85.84), _GLF_FUZZED(4.5)), vec2(_GLF_IDENTITY((vec2(mat2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, 0.0))), clamp((vec2(mat2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, 0.0))), (vec2(mat2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, 0.0))), _GLF_IDENTITY((vec2(mat2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, 0.0))), ((vec2(mat2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, 0.0)))) * sqrt(vec2(1.0, 1.0)))))[0], _GLF_IDENTITY((vec2(mat2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, 0.0))), max((vec2(mat2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, 0.0))), (vec2(mat2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, 0.0)))))[1]), bvec2(true, true)))))).x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true))))))))))))))))))
      return;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) && true)))
        barrier();
      }
     else
      {
      }
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             if(_GLF_DEAD(false))
              return;
            }
           while(_GLF_WRAPPED_LOOP(false));
           return;
          }
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      return;
     barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), true, false)), false || (bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))))), true, false))))))
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         return;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         return;
        }
       else
        {
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)) && true))
    return;
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ int(_GLF_ONE(1.0, injectionSwitch.y)))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
    barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (_GLF_IDENTITY(false, ! (! (false)))))), (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       barrier();
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      return;
    }
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, int(int(0))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, int(int(_injected_loop_counter))) != 1); _injected_loop_counter ++)
  {
   do
    {
     GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_14next_virtual_gidnum_workgroupsubgroup_idworkgroup_base.z = subgroup_id;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
uint subgroup_size = 16;
 GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_size.y = _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(~ (~ _GLF_IDENTITY((subgroup_size), (_GLF_IDENTITY((subgroup_size), min((subgroup_size), (subgroup_size)))) ^ 0u)), _GLF_IDENTITY(0u, ~ (~ (0u))) | (_GLF_IDENTITY(~ (~ _GLF_IDENTITY((subgroup_size), (_GLF_IDENTITY((subgroup_size), min((subgroup_size), (subgroup_size)))) ^ 0u)), (~ (~ _GLF_IDENTITY((subgroup_size), (_GLF_IDENTITY((subgroup_size), min((subgroup_size), (subgroup_size)))) ^ 0u))) | (_GLF_IDENTITY(~ (~ _GLF_IDENTITY((subgroup_size), (_GLF_IDENTITY((subgroup_size), min((subgroup_size), (subgroup_size)))) ^ 0u)), (~ (~ _GLF_IDENTITY((subgroup_size), (_GLF_IDENTITY((subgroup_size), min((subgroup_size), (subgroup_size)))) ^ 0u))) | (~ (~ _GLF_IDENTITY((subgroup_size), (_GLF_IDENTITY((subgroup_size), min((subgroup_size), (subgroup_size)))) ^ 0u)))))))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
    }
  }
 if(_GLF_DEAD(false))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
      barrier();
    }
   else
    {
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
  }
 GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x = subgroup_local_id;
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bool(injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_IDENTITY(bool(bool(injectionSwitch.x > injectionSwitch.y)), (bool(bool(injectionSwitch.x > injectionSwitch.y))) || false)))))))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), true && (! ((injectionSwitch.x > injectionSwitch.y)))))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), true, true), bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true)))))))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x4(injectionSwitch, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0)), min(vec2(mat3x4(injectionSwitch, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0)), vec2(mat3x4(injectionSwitch, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0))))), injectionSwitch, injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(786.222, -408.427)))).y))))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         return;
        }
      }
    }
   return;
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) >> 0), 1))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 do
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
       continue;
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_14next_virtual_gidnum_workgroupsubgroup_idworkgroup_base.y = _GLF_IDENTITY(num_workgroup, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(37306u) : _GLF_IDENTITY(num_workgroup, max(num_workgroup, num_workgroup))));
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           barrier();
          }
        }
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(2.8)), bool(false))) > injectionSwitch.y))));
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, max(_GLF_IDENTITY(0, max(0, 0)), 0))); _injected_loop_counter --)
      {
       barrier();
      }
    }
  }
 else
  {
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 for(int _injected_loop_counter = (1 & 1); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)) && true)))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false)))))
    {
     if(_GLF_DEAD(false))
      continue;
     break;
    }
   if(_GLF_DEAD(false))
    barrier();
   GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_size.x = _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_14next_virtual_gidnum_workgroupsubgroup_idworkgroup_base, uvec4(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_14next_virtual_gidnum_workgroupsubgroup_idworkgroup_base[0], clamp(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_14next_virtual_gidnum_workgroupsubgroup_idworkgroup_base[0], (GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_14next_virtual_gidnum_workgroupsubgroup_idworkgroup_base[0]) | (GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_14next_virtual_gidnum_workgroupsubgroup_idworkgroup_base[0])), GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_14next_virtual_gidnum_workgroupsubgroup_idworkgroup_base[0], GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_14next_virtual_gidnum_workgroupsubgroup_idworkgroup_base[0])), GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_14next_virtual_gidnum_workgroupsubgroup_idworkgroup_base[1], GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_14next_virtual_gidnum_workgroupsubgroup_idworkgroup_base[2], GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_14next_virtual_gidnum_workgroupsubgroup_idworkgroup_base[3])).y;
   for(int _injected_loop_counter = _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), int(ivec2(~ (0), 0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), clamp(int(0), int(0), int(0))))) >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        continue;
       barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     barrier();
    }
   else
    {
    }
  }
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) | 0u);
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
     for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  barrier();
 GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.y = _GLF_IDENTITY(workgroup_size, uint(uvec4(workgroup_size, 0u, 0u, _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_size) : 1u))) | (1u)))));
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), ! (! (_GLF_IDENTITY(false, (false) || false))))))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter --)
      {
       return;
      }
    }
   barrier();
  }
 _GLF_struct_8 _GLF_struct_replacement_8 = _GLF_struct_8(_GLF_struct_2(uvec2(1u), _GLF_struct_0(mat4(1.0), mat3(1.0), mat4(1.0), 1.0, mat2x3(_GLF_IDENTITY(1.0, (1.0) / 1.0)), vec4(_GLF_IDENTITY(1.0, mix(_GLF_IDENTITY(float(_GLF_FUZZED(_GLF_IDENTITY(8328.6089, (false ? _GLF_FUZZED(-5.7) : 8328.6089)))), max(float(_GLF_FUZZED(_GLF_IDENTITY(8328.6089, (false ? _GLF_FUZZED(-5.7) : 8328.6089)))), float(_GLF_FUZZED(_GLF_IDENTITY(8328.6089, (false ? _GLF_FUZZED(-5.7) : 8328.6089)))))), float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, float(mat3x2(1.0, 0.0, 1.0, 1.0, 0.0, 1.0))), 1.0)), _GLF_IDENTITY(float(_GLF_IDENTITY(mat3x2(1.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(1.0, max(1.0, 1.0))), (mat3x2(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, float(vec3(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 0.0, 0.0)))) - 0.0), 1.0)))) + mat3x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), (float(_GLF_IDENTITY(mat3x2(1.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(1.0, max(1.0, 1.0))), (mat3x2(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, float(vec3(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 0.0, 0.0)))) - 0.0), 1.0)))) + mat3x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))) + 0.0)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, float(mat3x2(1.0, 0.0, 1.0, 1.0, 0.0, 1.0))), 1.0)), float(_GLF_IDENTITY(mat3x2(1.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(1.0, max(1.0, 1.0))), (mat3x2(1.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)))) + mat3x2(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, (0.0) - sin(0.0)), 0.0, 0.0)), 0.0, 0.0, 0.0, 0.0, 0.0)))), 0.0 + (_GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, float(mat3x2(1.0, 0.0, 1.0, 1.0, 0.0, 1.0))), 1.0)), float(_GLF_IDENTITY(mat3x2(1.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(1.0, max(1.0, 1.0))), (mat3x2(1.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)))) + mat3x2(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, (0.0) - sin(0.0)), 0.0, 0.0)), 0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(6358.9716) : 0.0)), 0.0, 0.0, 0.0)))))), mix(float(_GLF_FUZZED(6.2)), float(_GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, float(mat3x2(1.0, 0.0, 1.0, 1.0, 0.0, 1.0))), 1.0)), float(_GLF_IDENTITY(mat3x2(1.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(1.0, max(1.0, 1.0))), (mat3x2(1.0, 0.0, _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-52.28)), float(1.0), bool(true)))) / 1.0), 1.0)), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)))), 0.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)))) + mat3x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))), bool(true))), _GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, float(mat3x2(1.0, 0.0, 1.0, 1.0, 0.0, 1.0))), min(_GLF_IDENTITY(_GLF_IDENTITY(1.0, float(mat3x2(1.0, 0.0, 1.0, 1.0, 0.0, 1.0))), (false ? _GLF_FUZZED(-0.3) : _GLF_IDENTITY(_GLF_IDENTITY(1.0, float(mat3x2(1.0, 0.0, 1.0, 1.0, 0.0, 1.0))), 0.0 + (_GLF_IDENTITY(1.0, float(mat3x2(1.0, 0.0, 1.0, 1.0, 0.0, 1.0))))))), _GLF_IDENTITY(_GLF_IDENTITY(1.0, float(mat3x2(1.0, 0.0, 1.0, 1.0, 0.0, 1.0))), min(_GLF_IDENTITY(1.0, float(mat3x2(1.0, 0.0, 1.0, 1.0, 0.0, 1.0))), _GLF_IDENTITY(_GLF_IDENTITY(1.0, float(mat3x2(1.0, 0.0, 1.0, 1.0, 0.0, 1.0))), 0.0 + (_GLF_IDENTITY(1.0, float(mat3x2(1.0, 0.0, 1.0, 1.0, 0.0, 1.0))))))))), 1.0)), float(_GLF_IDENTITY(mat3x2(1.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(1.0, max(1.0, 1.0))), (mat3x2(1.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)))) + mat3x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, float(mat3x2(1.0, 0.0, 1.0, 1.0, 0.0, 1.0))), 1.0)), float(_GLF_IDENTITY(mat3x2(1.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(1.0, max(1.0, 1.0))), (mat3x2(1.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)))) + mat3x2(0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0)))), 0.0 + (_GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, float(mat3x2(1.0, 0.0, 1.0, 1.0, 0.0, 1.0))), _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(4.5) : 1.0)))), float(_GLF_IDENTITY(mat3x2(1.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(1.0, max(1.0, 1.0))), (mat3x2(1.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)))) + mat3x2(0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(17.31)), float(0.0), bool(true))), 0.0, 0.0, 0.0)))))), (_GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, float(mat3x2(1.0, 0.0, 1.0, 1.0, 0.0, 1.0))), 1.0)), float(_GLF_IDENTITY(mat3x2(1.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(1.0, max(1.0, 1.0))), (mat3x2(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(7.4)), bool(false))))), 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(max(1.0, 1.0), mix(float(_GLF_IDENTITY(max(1.0, 1.0), (max(1.0, 1.0)) - 0.0)), float(_GLF_FUZZED(4569.4056)), bool(false)))))) + mat3x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))) / 1.0))), _GLF_IDENTITY((false ? _GLF_FUZZED(-4135.8186) : _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), (true ? _GLF_IDENTITY((false ? _GLF_FUZZED(-4135.8186) : _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), _GLF_IDENTITY(float(mat3((false ? _GLF_FUZZED(-4135.8186) : _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), 1.0, 1.0, 0.0, 1.0, 1.0, sqrt(1.0), 0.0, 1.0)), mix(float(_GLF_FUZZED(9871.4038)), float(float(mat3((false ? _GLF_FUZZED(-4135.8186) : _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), 1.0, 1.0, 0.0, 1.0, 1.0, sqrt(1.0), 0.0, 1.0))), bool(true)))) : _GLF_FUZZED(-459.446))))), bool(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))))), vec3(_GLF_IDENTITY(1.0, min(1.0, 1.0))), _GLF_IDENTITY(mat2(1.0), transpose(_GLF_IDENTITY(transpose(mat2(1.0)), mat2(mat3x4(transpose(mat2(1.0))))))), uvec3(1u), _GLF_struct_1(mat4x2(1.0), vec2(_GLF_IDENTITY(1.0, (1.0) + 0.0)), uvec2(1u), vec3(1.0))), _GLF_struct_4(_GLF_struct_3(vec2(1.0), uvec4(1u), uvec4(_GLF_IDENTITY(_GLF_IDENTITY(1u, max(1u, _GLF_IDENTITY(1u, 0u | (1u)))), uint(uvec4(_GLF_IDENTITY(1u, (1u) - 0u), _GLF_IDENTITY(1u, (1u) | (1u)), 0u, 0u)))), ivec4(_GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, 0 + (1)) : _GLF_FUZZED(-33035)))), mat2(1.0), mat4x3(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-87.57)), float(1.0), bool(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x < injectionSwitch.y)))))), bvec2(true)), mat4(1.0), uvec2(1u)), 1, _GLF_struct_7(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, _GLF_IDENTITY((1u), (false ? _GLF_FUZZED((workgroup_size / GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_size.y)) : (1u))) | (1u))), (uvec3(_GLF_IDENTITY(1u, (1u) | (1u)))) - uvec3(0u, 0u, 0u)), uvec3(0u, 0u, 0u) + (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (1u) ^ 0u)) | (1u))), _GLF_IDENTITY((uvec3(_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) | (1u)), _GLF_IDENTITY(0u + (_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) | (1u)), min(_GLF_IDENTITY(1u, (1u) | (1u)), _GLF_IDENTITY(1u, (1u) | (1u))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(num_workgroup) : 0u + (_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) | (1u)), min(_GLF_IDENTITY(1u, (1u) | (1u)), _GLF_IDENTITY(1u, (1u) | (1u)))))))))) - uvec3(0u, 0u, 0u), ((uvec3(_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) | (1u)), 0u + (_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) | (1u)), _GLF_IDENTITY(min(_GLF_IDENTITY(1u, (1u) | (1u)), _GLF_IDENTITY(1u, (1u) | (1u))), (_GLF_IDENTITY(min(_GLF_IDENTITY(1u, (1u) | (1u)), _GLF_IDENTITY(1u, (1u) | (1u))), min(min(_GLF_IDENTITY(1u, (1u) | (1u)), _GLF_IDENTITY(1u, (1u) | (1u))), min(_GLF_IDENTITY(1u, (1u) | (1u)), _GLF_IDENTITY(1u, (1u) | (1u)))))) | 0u)))))) - uvec3(0u, 0u, 0u)) | ((uvec3(_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) | (1u)), 0u + (_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) | (1u)), min(_GLF_IDENTITY(1u, (1u) | (1u)), _GLF_IDENTITY(1u, (1u) | (1u)))))))) - uvec3(0u, 0u, 0u)))))), _GLF_IDENTITY(gl_WorkGroupID, (false ? _GLF_FUZZED(uvec4(54963u, 177977u, 96202u, 176393u).raa) : _GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) << uvec3(0u, 0u, 0u)))).x, _GLF_struct_5(mat3x2(1.0), _GLF_IDENTITY(mat3(1.0), mat3(mat4x3(_GLF_IDENTITY(mat3(1.0), (mat3(1.0)) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))))), mat2x4(1.0), 1.0, _GLF_IDENTITY(uvec4(_GLF_IDENTITY(1u, (1u) * 1u)), uvec4(1u, 1u, 1u, 1u) * (uvec4(_GLF_IDENTITY(1u, (1u) * 1u))))), _GLF_struct_6(_GLF_IDENTITY(mat4(1.0), (false ? _GLF_FUZZED(mat4(-0.2, 6.0, 4.9, -1.1, -436.740, 267.664, 48.12, -196.213, -1.3, -7418.1700, 437.496, 1.7, -7.9, 6.4, -98.90, -8118.1609)) : mat4(1.0))), vec4(1.0), uvec2(1u), bvec4(true), mat2(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, sqrt(1.0) * (1.0))) / 1.0)) / 1.0), _GLF_IDENTITY(1.0, min(1.0, 1.0))))), _GLF_IDENTITY(vec2(1.0), mat2(1.0) * (vec2(1.0))))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter ++)
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), false || (_GLF_WRAPPED_IF_FALSE(false))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true)), false || (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true)))), _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true))) && true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true))) && true, false || ((! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true))) && true))), bool(bool(! (_GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true))) && true, false || ((! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true))) && true)))))))))))), bool(bvec4(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true)), (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true))) && true)))), _GLF_IDENTITY(bool(bool(! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true)), (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true))) && true)))))), (bool(bool(! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true)), (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true))) && true))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true, true, _GLF_IDENTITY(false, false || (false))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bool(_GLF_DEAD(false))), ! (_GLF_IDENTITY(! (bool(bool(_GLF_DEAD(false)))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x < injectionSwitch.y)) && (! _GLF_IDENTITY((bool(bool(_GLF_DEAD(false)))), ! (! (_GLF_IDENTITY((bool(bool(_GLF_DEAD(false)))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))))), false), bvec2(bvec2(bvec2((bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), bool(bool(bool(_GLF_DEAD(false))))))), (bool(bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), bool(bool(bool(_GLF_DEAD(false)))))))) && true)))), false))))), false || (bool(_GLF_IDENTITY(bvec2((bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))))), false), bvec2(bvec2(bvec2((bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), bool(bool(bool(_GLF_DEAD(false))))))), (bool(bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), bool(bool(bool(_GLF_DEAD(false)))))))) && true)))), false)))))))))))))))))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 uint workgroup_base = GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.y * _GLF_IDENTITY(_GLF_struct_replacement_8._f3.workgroup_id, (0u ^ 0u) | (_GLF_struct_replacement_8._f3.workgroup_id));
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, bool(bvec4(true, false, true, _GLF_IDENTITY(true, true && (true))))))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)))), ! (_GLF_IDENTITY(! (false), true && (! (false)))))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        continue;
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        return;
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
      }
     else
      {
      }
    }
   return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
  return;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(8), int(8))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), true && ((false))))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       else
        {
        }
      }
    }
  }
 GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_14next_virtual_gidnum_workgroupsubgroup_idworkgroup_base.w = workgroup_base;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false)), bool(bool(bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))))))))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
    return;
   barrier();
  }
 uint virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_14next_virtual_gidnum_workgroupsubgroup_idworkgroup_base.w, 0u ^ (GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_14next_virtual_gidnum_workgroupsubgroup_idworkgroup_base.w)) + _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_14next_virtual_gidnum_workgroupsubgroup_idworkgroup_base.z * GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_size.y, 0u | (GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_14next_virtual_gidnum_workgroupsubgroup_idworkgroup_base.z * GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_size.y)) + GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x, max(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_14next_virtual_gidnum_workgroupsubgroup_idworkgroup_base.w, 0u ^ (GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_14next_virtual_gidnum_workgroupsubgroup_idworkgroup_base.w)) + _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_14next_virtual_gidnum_workgroupsubgroup_idworkgroup_base.z * GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_size.y, 0u | (GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_14next_virtual_gidnum_workgroupsubgroup_idworkgroup_base.z * GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_size.y)) + GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x, _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_14next_virtual_gidnum_workgroupsubgroup_idworkgroup_base.w, 0u ^ (GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_14next_virtual_gidnum_workgroupsubgroup_idworkgroup_base.w)) + _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_14next_virtual_gidnum_workgroupsubgroup_idworkgroup_base.z * GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_size.y, 0u | (GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_14next_virtual_gidnum_workgroupsubgroup_idworkgroup_base.z * GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_size.y)) + GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x, ~ (~ (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_14next_virtual_gidnum_workgroupsubgroup_idworkgroup_base.w, 0u ^ (GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_14next_virtual_gidnum_workgroupsubgroup_idworkgroup_base.w)) + _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_14next_virtual_gidnum_workgroupsubgroup_idworkgroup_base.z * GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_size.y, 0u | (GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_14next_virtual_gidnum_workgroupsubgroup_idworkgroup_base.z * GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_size.y)) + GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x)))));
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = ((((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), min(int(7), int(7))))) >> _GLF_IDENTITY(int(7), int(7))) << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = ((1 | int(_GLF_ONE(1.0, injectionSwitch.y))) ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        break;
      }
     return;
    }
  }
 uint next_virtual_gid = GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_14next_virtual_gidnum_workgroupsubgroup_idworkgroup_base.w + GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_14next_virtual_gidnum_workgroupsubgroup_idworkgroup_base.z * GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_size.y + ((GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x + 1) % GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_size.y);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) || false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true) || (! (false)))))))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             return;
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            return;
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
           return;
          }
        }
       else
        {
        }
       return;
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_14next_virtual_gidnum_workgroupsubgroup_idworkgroup_base.x = next_virtual_gid;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))); _injected_loop_counter --)
        {
         return;
        }
      }
    }
  }
 _GLF_IDENTITY(buf[virtual_gid] = 1, (buf[virtual_gid] = 1) << 0u);
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)), bool(bvec4(_GLF_DEAD(false), false, false, true))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 ^ 0)); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (mat2(1.0) * (injectionSwitch)) + vec2(0.0, 0.0))).x : _GLF_FUZZED(38.33))), injectionSwitch.x)) > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x + 1 < _GLF_IDENTITY(GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_size.y, (GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_size.y) ^ 0u), ! (! (_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size, (_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size, clamp(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size, GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size, GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size))) * uvec2(1u, 1u)).x + 1 < GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_size.y))))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 ^ 0)); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))))))))))))
      continue;
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        return;
      }
     for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x)))))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ 1)); _injected_loop_counter ++)
          {
           return;
          }
        }
      }
     else
      {
       barrier();
       if(_GLF_DEAD(false))
        return;
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   int i = 0;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && (false))), ! (! (! (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) && true))))))))), (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter --)
      {
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    return;
   atomicStore(buf[GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_14next_virtual_gidnum_workgroupsubgroup_idworkgroup_base.x], uint(2), 4, 64, 4);
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))), ! (! (injectionSwitch.x > injectionSwitch.y)))))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), int(int(int(5)))))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), clamp(int(5), int(5), _GLF_IDENTITY(int(5), ~ (~ (int(5))))))))); _injected_loop_counter ++)
            {
             return;
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             do
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                {
                 barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           break;
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
            barrier();
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             break;
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           return;
          }
        }
       return;
      }
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           return;
          }
         else
          {
          }
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
      barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 1)); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          return;
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false)))))))))
              break;
             if(_GLF_DEAD(false))
              break;
             do
              {
               if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || false))
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < (1 & 1), ! (! (_injected_loop_counter < (1 & 1))))); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, _GLF_IDENTITY(false, false || (false)))))))
                    barrier();
                  }
                 return;
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                continue;
               barrier();
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
             return;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               continue;
              }
            }
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            break;
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          break;
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), clamp((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0)))))).y))))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec3(bvec2(false, false), true)))))), ! _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec3(bvec2(false, false), true)))))), ! (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false)))))))), bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec3(bvec2(false, false), _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(true)), bool(_GLF_IDENTITY(bvec2(bool(bool(true)), true), bvec2(bvec4(bvec2(bool(bool(true)), true), false, false))))))))))))))))), true && ((! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)), bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec3(bvec2(false, false), true)))))), ! (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false)))))))), bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec3(bvec2(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true), false), _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(true)), bool(_GLF_IDENTITY(bvec2(bool(bool(true)), _GLF_IDENTITY(true, (true) && true)), bvec2(bvec4(bvec2(bool(bool(_GLF_IDENTITY(true, ! (! (true))))), true), false, false)))))))))))))))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(5, (5) >> 0)), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           return;
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       atomicStore(buf[GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_14next_virtual_gidnum_workgroupsubgroup_idworkgroup_base.x], uint(2), 4, 64, 4);
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat4(injectionSwitch.y, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-796.265)))) - 0.0), 0.0, 1.0, tan(0.0), 0.0, 0.0, 1.0, 0.0, determinant(mat4(1.0, 0.0, 1.0, _GLF_IDENTITY(exp(0.0), clamp(exp(0.0), _GLF_IDENTITY(exp(0.0), mix(float(exp(0.0)), float(_GLF_FUZZED((true ? -8260.4750 : 37.16))), bool(false))), exp(0.0))), 0.0, 1.0, sqrt(1.0), 0.0, 0.0, 0.0, 1.0, 1.0, log(1.0), 0.0, 0.0, 1.0)), _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0)), 0.0, 1.0, 1.0, 1.0, 1.0), mat4(0.0, 0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-0.1))), _GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, (0.0) - 0.0)), float(_GLF_FUZZED(57.55)), bool(false))), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (_GLF_IDENTITY(mat4(injectionSwitch.y, 1.0, 0.0, 1.0, _GLF_IDENTITY(tan(0.0), mix(float(_GLF_FUZZED(-8770.1490)), float(_GLF_IDENTITY(tan(0.0), (tan(0.0)) / 1.0)), bool(true))), 0.0, 0.0, 1.0, 0.0, determinant(mat4(1.0, 0.0, 1.0, exp(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(6.8)), float(0.0), bool(true))), 0.0, 0.0))), 0.0, 1.0, sqrt(1.0), 0.0, 0.0, 0.0, 1.0, 1.0, log(1.0), 0.0, 0.0, 1.0)), 0.0, 0.0, 1.0, 1.0, 1.0, 1.0), (mat4(injectionSwitch.y, 1.0, 0.0, 1.0, tan(0.0), 0.0, 0.0, 1.0, 0.0, determinant(mat4(1.0, 0.0, 1.0, exp(0.0), 0.0, 1.0, sqrt(1.0), 0.0, 0.0, 0.0, 1.0, 1.0, log(1.0), 0.0, 0.0, 1.0)), 0.0, 0.0, 1.0, 1.0, 1.0, 1.0)) - mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))))), _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(false, bool(bool(false))) || (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), (! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(false, bool(bool(false))) || (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false || (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, float(_GLF_IDENTITY(mat4(_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 0.0, 1.0, 0.0, exp(0.0), 0.0, 1.0, exp(0.0)))).y, 1.0, 0.0, 1.0, tan(0.0), 0.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(1987.5231)), float(0.0), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), 0.0)), 1.0, 0.0, determinant(mat4(1.0, 0.0, 1.0, exp(0.0), 0.0, 1.0, sqrt(1.0), 0.0, 0.0, 0.0, 1.0, 1.0, log(1.0), _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), 0.0)), 0.0, 1.0)), 0.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)), 1.0, 1.0, 1.0, 1.0), mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) / round(length(normalize(1.0))))) + (_GLF_IDENTITY(mat4(injectionSwitch.y, 1.0, 0.0, 1.0, tan(0.0), 0.0, 0.0, 1.0, 0.0, determinant(mat4(1.0, 0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-9.3)), float(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(3.6)))), bool(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(tanh(vec2(9.7, 12.27))) : injectionSwitch)).y))))), exp(0.0), 0.0, 1.0, sqrt(1.0), 0.0, 0.0, 0.0, 1.0, 1.0, log(1.0), 0.0, 0.0, 1.0)), _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, float(mat3(0.0, 1.0, abs(1.0), 0.0, 0.0, 1.0, 1.0, 1.0, 0.0))), 0.0)), 0.0, 1.0, 1.0, 1.0, 1.0), (_GLF_IDENTITY(mat4(injectionSwitch.y, 1.0, 0.0, 1.0, tan(0.0), 0.0, 0.0, 1.0, 0.0, determinant(mat4(_GLF_IDENTITY(1.0, (1.0) - 0.0), 0.0, 1.0, exp(0.0), 0.0, 1.0, sqrt(1.0), 0.0, 0.0, 0.0, 1.0, 1.0, log(1.0), 0.0, 0.0, 1.0)), 0.0, 0.0, 1.0, 1.0, 1.0, 1.0), (mat4(injectionSwitch.y, 1.0, 0.0, 1.0, tan(0.0), 0.0, 0.0, 1.0, 0.0, determinant(mat4(_GLF_IDENTITY(1.0, (1.0) - 0.0), 0.0, 1.0, exp(0.0), 0.0, 1.0, sqrt(1.0), 0.0, 0.0, 0.0, 1.0, 1.0, log(1.0), 0.0, 0.0, 1.0)), 0.0, 0.0, 1.0, 1.0, 1.0, 1.0)) - mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))) - mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))))), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), bool(bool(false))) || (! (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)), false, false)))) && true), false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false))))), false)))) && _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, true && (true))), (! (_GLF_IDENTITY(true, true && (true)))) && true)))))))))))))))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, bool(bvec2(false, true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, bool(bvec2(false, true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))))))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true, false, false)), bool(bvec4(bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true, false, false)), false, true, false))))))
            return;
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter ++)
              {
               return;
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              return;
             barrier();
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_IDENTITY(false, (false) && true))))))
              barrier();
            }
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(false))
              return;
             barrier();
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                return;
              }
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               barrier();
              }
            }
           else
            {
            }
           barrier();
          }
        }
       else
        {
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)), clamp(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)), clamp((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)), (1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)), (1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))), _GLF_IDENTITY((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)), ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) << int(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)), clamp((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)), (1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)), (1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))))))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))), ((injectionSwitch.x > injectionSwitch.y)) || false))))
          return;
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           barrier();
          }
         else
          {
          }
        }
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec4(false, true, true, false))))))))
    return;
  }
}
